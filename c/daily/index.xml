<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-29T01:38:34Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>FFmpeg/FFmpeg</title>
    <updated>2022-08-29T01:38:34Z</updated>
    <id>tag:github.com,2022-08-29:/FFmpeg/FFmpeg</id>
    <link href="https://github.com/FFmpeg/FFmpeg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Mirror of https://git.ffmpeg.org/ffmpeg.git&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FFmpeg README&lt;/h1&gt; &#xA;&lt;p&gt;FFmpeg is a collection of libraries and tools to process multimedia content such as audio, video, subtitles and related metadata.&lt;/p&gt; &#xA;&lt;h2&gt;Libraries&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;libavcodec&lt;/code&gt; provides implementation of a wider range of codecs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavformat&lt;/code&gt; implements streaming protocols, container formats and basic I/O access.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavutil&lt;/code&gt; includes hashers, decompressors and miscellaneous utility functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavfilter&lt;/code&gt; provides means to alter decoded audio and video through a directed graph of connected filters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libavdevice&lt;/code&gt; provides an abstraction to access capture and playback devices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libswresample&lt;/code&gt; implements audio mixing and resampling routines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;libswscale&lt;/code&gt; implements color conversion and scaling routines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffmpeg.html&#34;&gt;ffmpeg&lt;/a&gt; is a command line toolbox to manipulate, convert and stream multimedia content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffplay.html&#34;&gt;ffplay&lt;/a&gt; is a minimalistic multimedia player.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ffmpeg.org/ffprobe.html&#34;&gt;ffprobe&lt;/a&gt; is a simple analysis tool to inspect multimedia content.&lt;/li&gt; &#xA; &lt;li&gt;Additional small tools such as &lt;code&gt;aviocat&lt;/code&gt;, &lt;code&gt;ismindex&lt;/code&gt; and &lt;code&gt;qt-faststart&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The offline documentation is available in the &lt;strong&gt;doc/&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The online documentation is available in the main &lt;a href=&#34;https://ffmpeg.org&#34;&gt;website&lt;/a&gt; and in the &lt;a href=&#34;https://trac.ffmpeg.org&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Coding examples are available in the &lt;strong&gt;doc/examples&lt;/strong&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;FFmpeg codebase is mainly LGPL-licensed with optional components licensed under GPL. Please refer to the LICENSE file for detailed information.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Patches should be submitted to the ffmpeg-devel mailing list using &lt;code&gt;git format-patch&lt;/code&gt; or &lt;code&gt;git send-email&lt;/code&gt;. Github pull requests should be avoided because they are not part of our review process and will be ignored.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>flightlessmango/MangoHud</title>
    <updated>2022-08-29T01:38:34Z</updated>
    <id>tag:github.com,2022-08-29:/flightlessmango/MangoHud</id>
    <link href="https://github.com/flightlessmango/MangoHud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Vulkan and OpenGL overlay for monitoring FPS, temperatures, CPU/GPU load and more. Discord: https://discordapp.com/invite/Gj5YmBb&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MangoHud&lt;/h1&gt; &#xA;&lt;p&gt;A Vulkan and OpenGL overlay for monitoring FPS, temperatures, CPU/GPU load and more.&lt;/p&gt; &#xA;&lt;h4&gt;Example:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/assets/overlay_example.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Navigation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#build&#34;&gt;Build&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#building-with-build-script&#34;&gt;Building with build script&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#pre-packaged-binaries&#34;&gt;Pre-packaged binaries&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#github-releases&#34;&gt;GitHub releases&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#arch-based-distributions&#34;&gt;Arch-based distributions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#debian-11-bullseye&#34;&gt;Debian 11 (Bullseye)&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#fedora&#34;&gt;Fedora&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#solus&#34;&gt;Solus&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#opensuse&#34;&gt;openSUSE&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#flatpak&#34;&gt;Flatpak&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#normal-usage&#34;&gt;Normal usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#opengl&#34;&gt;OpenGL&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#hud-configuration&#34;&gt;Hud configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#vsync&#34;&gt;Vsync&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#keybindings&#34;&gt;Keybindings&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#workarounds&#34;&gt;Workarounds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/#mangohud-fps-logging&#34;&gt;MangoHud FPS logging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to compile MangoHud to keep up to date with any changes - first clone this repository and cd into it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --recurse-submodules https://github.com/flightlessmango/MangoHud.git&#xA;cd MangoHud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;meson&lt;/code&gt; to install &#34;manually&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;meson build&#xA;ninja -C build install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, meson should install MangoHud to &lt;code&gt;/usr/local&lt;/code&gt;. Specify install prefix with &lt;code&gt;--prefix=/usr&lt;/code&gt; if desired. Add &lt;code&gt;-Dappend_libdir_mangohud=false&lt;/code&gt; option to meson to not append &lt;code&gt;mangohud&lt;/code&gt; to libdir if desired (e.g. /usr/local/lib/mangohud).&lt;/p&gt; &#xA;&lt;p&gt;To install 32-bit build on 64-bit distro, specify proper &lt;code&gt;libdir&lt;/code&gt;: &lt;code&gt;lib32&lt;/code&gt; for Arch, &lt;code&gt;lib/i386-linux-gnu&lt;/code&gt; on Debian-based distros. RPM-based distros usually install 32-bit libraries to &lt;code&gt;/usr/lib&lt;/code&gt; and 64-bit to &lt;code&gt;/usr/lib64&lt;/code&gt;. You may have to change &lt;code&gt;PKG_CONFIG_PATH&lt;/code&gt; to point to correct folders for your distro.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;CC=&#34;gcc -m32&#34; \&#xA;CXX=&#34;g++ -m32&#34; \&#xA;PKG_CONFIG_PATH=&#34;/usr/lib32/pkgconfig:/usr/lib/i386-linux-gnu/pkgconfig:/usr/lib/pkgconfig&#34; \&#xA;meson build32 --libdir lib32&#xA;ninja -C build32 install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Install necessary development packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;gcc, g++&lt;/li&gt; &#xA; &lt;li&gt;or gcc-multilib, g++-multilib for 32-bit support&lt;/li&gt; &#xA; &lt;li&gt;meson &amp;gt;=0.54&lt;/li&gt; &#xA; &lt;li&gt;ninja (ninja-build)&lt;/li&gt; &#xA; &lt;li&gt;glslang&lt;/li&gt; &#xA; &lt;li&gt;vulkan headers if using &lt;code&gt;-Duse_system_vulkan=enabled&lt;/code&gt; option with &lt;code&gt;meson&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;libGL/libEGL (libglvnd, mesa-common-dev, mesa-libGL-devel etc)&lt;/li&gt; &#xA; &lt;li&gt;X11 (libx11-dev)&lt;/li&gt; &#xA; &lt;li&gt;XNVCtrl (libxnvctrl-dev), optional, use &lt;code&gt;-Dwith_xnvctrl=disabled&lt;/code&gt; option with &lt;code&gt;meson&lt;/code&gt; to disable&lt;/li&gt; &#xA; &lt;li&gt;D-Bus (libdbus-1-dev), optional, use &lt;code&gt;-Dwith_dbus=disabled&lt;/code&gt; option with &lt;code&gt;meson&lt;/code&gt; to disable&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Python 3 libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mako (python3-mako or install with &lt;code&gt;pip&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If distro&#39;s packaged &lt;code&gt;meson&lt;/code&gt; is too old and gives build errors, install newer version with &lt;code&gt;pip&lt;/code&gt; (&lt;code&gt;python3-pip&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Building with build script&lt;/h3&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;build.sh&lt;/code&gt; script to do some things automatically like install dependencies, if distro is supported but it usually assumes you are running on x86_64 architecture.&lt;/p&gt; &#xA;&lt;p&gt;To just build it, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass arguments to meson:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh build -Dwith_xnvctrl=disabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Resulting files will be install to &lt;code&gt;./build/release&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If you have compiled MangoHud from source, to install it, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can then subsequently uninstall MangoHud via the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh uninstall&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To tar up the resulting binaries into a package and create a release tar with installer script, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh package release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or combine the commands, although &lt;code&gt;package&lt;/code&gt; should also call &lt;code&gt;build&lt;/code&gt; if it doesn&#39;t find the built libs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh build package release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have built MangoHud before and suddenly it fails, you can try cleaning the &lt;code&gt;build&lt;/code&gt; folder, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./build.sh clean&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently it just does &lt;code&gt;rm -fr build&lt;/code&gt; and clears subprojects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE: If you are running an Ubuntu-based, Arch-based, Fedora-based, or openSUSE-based distro, the build script will automatically detect and prompt you to install missing build dependencies. If you run into any issues with this please report them!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Pre-packaged binaries&lt;/h3&gt; &#xA;&lt;h4&gt;GitHub releases&lt;/h4&gt; &#xA;&lt;p&gt;If you do not wish to compile anything, simply download the file under &lt;a href=&#34;https://github.com/flightlessmango/MangoHud/releases&#34;&gt;Releases&lt;/a&gt;, extract it, and from within the extracted folder in terminal, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./mangohud-setup.sh install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arch-based distributions&lt;/h4&gt; &#xA;&lt;p&gt;If you are using an Arch-based distribution, install &lt;a href=&#34;https://aur.archlinux.org/packages/mangohud/&#34;&gt;&lt;code&gt;mangohud&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://aur.archlinux.org/packages/lib32-mangohud/&#34;&gt;&lt;code&gt;lib32-mangohud&lt;/code&gt;&lt;/a&gt; with your favourite AUR helper. &lt;a href=&#34;https://aur.archlinux.org/packages/mangohud-git/&#34;&gt;&lt;code&gt;mangohud-git&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://aur.archlinux.org/packages/lib32-mangohud-git/&#34;&gt;&lt;code&gt;lib32-mangohud-git&lt;/code&gt;&lt;/a&gt; are also available on the AUR if you want the up-to-date version of MangoHud.&lt;/p&gt; &#xA;&lt;p&gt;If you are building it by yourself, you need to enable multilib repository, by editing pacman config:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo nano /etc/pacman.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and uncomment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#[multilib]&#xA;#Include = /etc/pacman.d/mirrorlist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then save the file and execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo pacman -Syy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Debian 11 (Bullseye)&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Debian 11 or later, to install the &lt;a href=&#34;https://tracker.debian.org/pkg/mangohud&#34;&gt;MangoHud&lt;/a&gt; package, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install mangohud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, if you also need MangoHud for 32-bit applications, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install mangohud:i386&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fedora&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Fedora, to install the &lt;a href=&#34;https://src.fedoraproject.org/rpms/mangohud&#34;&gt;MangoHud&lt;/a&gt; package, execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo dnf install mangohud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Solus&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Solus, to install &lt;a href=&#34;https://dev.getsol.us/source/mangohud/&#34;&gt;MangoHud&lt;/a&gt; simply execute:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo eopkg it mangohud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;openSUSE&lt;/h4&gt; &#xA;&lt;p&gt;If you run openSUSE Leap or Tumbleweed you can get Mangohud from the official repositories. There are two packages, &lt;a href=&#34;https://software.opensuse.org/package/mangohud&#34;&gt;mangohud&lt;/a&gt; for 64bit and &lt;a href=&#34;https://software.opensuse.org/package/mangohud-32bit&#34;&gt;mangohud-32bit&lt;/a&gt; for 32bit application support. To have Mangohud working for both 32bit and 64bit applications you need to install both packages even on a 64bit operating system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo zypper in mangohud mangohud-32bit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Leap doesn&#39;t seem to have the 32bit package.&lt;/p&gt; &#xA;&lt;p&gt;Leap 15.2&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo zypper addrepo -f https://download.opensuse.org/repositories/games:tools/openSUSE_Leap_15.2/games:tools.repo&#xA;sudo zypper install mangohud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Leap 15.3&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo zypper addrepo -f https://download.opensuse.org/repositories/games:tools/openSUSE_Leap_15.3/games:tools.repo&#xA;sudo zypper install mangohud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Flatpak&lt;/h4&gt; &#xA;&lt;p&gt;If you are using Flatpaks, you will have to add the &lt;a href=&#34;https://flatpak.org/setup/&#34;&gt;Flathub repository&lt;/a&gt; for your specific distribution, and then, to install it, execute:&lt;/p&gt; &#xA;&lt;h5&gt;For flatpak&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;flatpak install org.freedesktop.Platform.VulkanLayer.MangoHud&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable MangoHud for all Steam games:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flatpak override --user --env=MANGOHUD=1 com.valvesoftware.Steam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Normal usage&lt;/h1&gt; &#xA;&lt;p&gt;To enable the MangoHud overlay layer for Vulkan and OpenGL, run :&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mangohud /path/to/app&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Lutris games, go to the System options in Lutris (make sure that advanced options are enabled) and add this to the &lt;code&gt;Command prefix&lt;/code&gt; setting:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mangohud&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Steam games, you can add this as a launch option:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;mangohud %command%&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or alternatively, add &lt;code&gt;MANGOHUD=1&lt;/code&gt; to your shell profile (Vulkan only).&lt;/p&gt; &#xA;&lt;h2&gt;OpenGL&lt;/h2&gt; &#xA;&lt;p&gt;OpenGL games may also need &lt;code&gt;dlsym&lt;/code&gt; hooking. Add &lt;code&gt;--dlsym&lt;/code&gt; or &lt;code&gt;MANGOHUD_DLSYM=1&lt;/code&gt; env var to your command like &lt;code&gt;mangohud --dlsym %command%&lt;/code&gt; for Steam.&lt;/p&gt; &#xA;&lt;p&gt;Some Linux native OpenGL games overrides LD_PRELOAD and stops MangoHud from working. You can sometimes fix this by editing LD_PRELOAD in the start script &lt;code&gt;LD_PRELOAD=/path/to/mangohud/lib/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hud configuration&lt;/h2&gt; &#xA;&lt;p&gt;MangoHud comes with a config file which can be used to set configuration options globally or per application. The priorities of different config files are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;/path/to/application/dir/MangoHud.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Per-application configuration in ~/.config/MangoHud: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;~/.config/MangoHud/&amp;lt;application_name&amp;gt;.conf&lt;/code&gt; for native applications, where &lt;code&gt;&amp;lt;application_name&amp;gt;&lt;/code&gt; is the case sensitive name of the executable&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;~/.config/MangoHud/wine-&amp;lt;application_name&amp;gt;.conf&lt;/code&gt; for wine/proton apps, where &lt;code&gt;&amp;lt;application_name&amp;gt;&lt;/code&gt; is the case sensitive name of the executable without the &lt;code&gt;.exe&lt;/code&gt; ending&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;~/.config/MangoHud/MangoHud.conf&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Example: For Overwatch, this would be &lt;code&gt;wine-Overwatch.conf&lt;/code&gt; (even though the executable you run from Lutris is &lt;code&gt;Battle.net.exe&lt;/code&gt;, the actual game executable name is &lt;code&gt;Overwatch.exe&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If you start the game from the terminal with MangoHud enabled (for example by starting Lutris from the terminal), MangoHud will print the config file names it is looking for.&lt;/p&gt; &#xA;&lt;p&gt;You can find an example config in /usr/share/doc/mangohud&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/benjamimgois/goverlay&#34;&gt;GOverlay&lt;/a&gt; is a GUI application that can be used to manage the config&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;&lt;code&gt;MANGOHUD_CONFIG&lt;/code&gt; and &lt;code&gt;MANGOHUD_CONFIGFILE&lt;/code&gt; environment variables&lt;/h3&gt; &#xA;&lt;p&gt;You can also customize the hud by using the &lt;code&gt;MANGOHUD_CONFIG&lt;/code&gt; environment variable while separating different options with a comma. This takes priority over any config file.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify configuration file with &lt;code&gt;MANGOHUD_CONFIGFILE=/path/to/config&lt;/code&gt; for applications whose names are hard to guess (java, python etc).&lt;/p&gt; &#xA;&lt;p&gt;A partial list of parameters are below. See the config file for a complete list. Parameters that are enabled by default have to be explicitly disabled. These (currently) are &lt;code&gt;fps&lt;/code&gt;, &lt;code&gt;frame_timing&lt;/code&gt;, &lt;code&gt;cpu_stats&lt;/code&gt; (cpu load), &lt;code&gt;gpu_stats&lt;/code&gt; (gpu load), and each can be disabled by setting the corresponding variable to 0 (e.g., fps=0).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpu_temp&lt;/code&gt;&lt;br&gt;&lt;code&gt;gpu_temp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays current CPU/GPU temperature&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;core_load&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays load &amp;amp; frequency per core&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpu_core_clock&lt;/code&gt;&lt;br&gt;&lt;code&gt;gpu_mem_clock&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays GPU core/memory frequency&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ram&lt;/code&gt;&lt;br&gt;&lt;code&gt;vram&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays system RAM/VRAM usage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;swap&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays swap space usage next to system RAM usage&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;procmem&lt;/code&gt;&lt;br&gt;&lt;code&gt;procmem_shared&lt;/code&gt;, &lt;code&gt;procmem_virt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays process&#39; memory usage: resident, shared and/or virtual. &lt;code&gt;procmem&lt;/code&gt; (resident) also toggles others off if disabled.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;full&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Enables most of the toggleable parameters (currently excludes &lt;code&gt;histogram&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font_size=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Customizeable font size (default=24)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font_size_text=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Customizeable font size for other text like media metadata (default=24)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font_scale=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set global font scale (default=1.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font_file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change default font (set location to .TTF/.OTF file )&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font_file_text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change text font. Otherwise &lt;code&gt;font_file&lt;/code&gt; is used&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font_glyph_ranges&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Specify extra font glyph ranges, comma separated: &lt;code&gt;korean&lt;/code&gt;, &lt;code&gt;chinese&lt;/code&gt;, &lt;code&gt;chinese_simplified&lt;/code&gt;, &lt;code&gt;japanese&lt;/code&gt;, &lt;code&gt;cyrillic&lt;/code&gt;, &lt;code&gt;thai&lt;/code&gt;, &lt;code&gt;vietnamese&lt;/code&gt;, &lt;code&gt;latin_ext_a&lt;/code&gt;, &lt;code&gt;latin_ext_b&lt;/code&gt;. If you experience crashes or text is just squares, reduce font size or glyph ranges.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;no_small_font&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use primary font size for smaller text like units&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;width=&lt;/code&gt;&lt;br&gt;&lt;code&gt;height=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Customizeable hud dimensions (in pixels)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;position=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Location of the hud: &lt;code&gt;top-left&lt;/code&gt; (default), &lt;code&gt;top-right&lt;/code&gt;, &lt;code&gt;middle-left&lt;/code&gt;, &lt;code&gt;middle-right&lt;/code&gt;, &lt;code&gt;bottom-left&lt;/code&gt;, &lt;code&gt;bottom-right&lt;/code&gt;, &lt;code&gt;top-center&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;offset_x&lt;/code&gt; &lt;code&gt;offset_y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hud position offsets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;no_display&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Hide the hud by default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_hud=&lt;/code&gt;&lt;br&gt;&lt;code&gt;toggle_logging=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Modifiable toggle hotkeys. Default are &lt;code&gt;Shift_R+F12&lt;/code&gt; and &lt;code&gt;Shift_L+F2&lt;/code&gt;, respectively.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;reload_cfg=&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change keybind for reloading the config. Default = &lt;code&gt;Shift_L+F4&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;time&lt;/code&gt;&lt;br&gt;&lt;code&gt;time_format=%T&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays local time. See &lt;a href=&#34;https://en.cppreference.com/w/cpp/io/manip/put_time&#34;&gt;std::put_time&lt;/a&gt; for formatting help. NOTE: Sometimes apps (or AMDVLK (should be fixed in latest)) may set &lt;code&gt;TZ&lt;/code&gt; (timezone) environment variable to UTC/GMT&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpu_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;cpu_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;vram_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;ram_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;io_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;engine_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;frametime_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;background_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;text_color&lt;/code&gt;&lt;br&gt;&lt;code&gt;media_player_color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change default colors: &lt;code&gt;gpu_color=RRGGBB&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;alpha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the opacity of all text and frametime graph &lt;code&gt;0.0-1.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;background_alpha&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the opacity of the background &lt;code&gt;0.0-1.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;read_cfg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add to MANGOHUD_CONFIG as first parameter to also load config file. Otherwise only MANGOHUD_CONFIG parameters are used.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;output_folder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set location of the output files (Required for logging)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;log_duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set amount of time the logging will run for (in seconds)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vsync&lt;/code&gt;&lt;br&gt; &lt;code&gt;gl_vsync&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set vsync for OpenGL or Vulkan&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;media_player&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show media player metadata&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;media_player_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Force media player DBus service name without the &lt;code&gt;org.mpris.MediaPlayer2&lt;/code&gt; part, like &lt;code&gt;spotify&lt;/code&gt;, &lt;code&gt;vlc&lt;/code&gt;, &lt;code&gt;audacious&lt;/code&gt; or &lt;code&gt;cantata&lt;/code&gt;. If none is set, MangoHud tries to switch between currently playing players.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;media_player_format&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Format media player metadata. Add extra text etc. Semi-colon breaks to new line. Defaults to &lt;code&gt;{title};{artist};{album}&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;font_scale_media_player&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change size of media player text relative to font_size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;io_read&lt;/code&gt;&lt;br&gt; &lt;code&gt;io_write&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show non-cached IO read/write, in MiB/s&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pci_dev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select GPU device in multi-gpu setups&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows current mangohud version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fps_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Limit the apps framerate. Comma-separated list of one or more FPS values. &lt;code&gt;0&lt;/code&gt; means unlimited.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;toggle_fps_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Cycle between FPS limits. Defaults to &lt;code&gt;Shift_L+F1&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show if the application is 32 or 64 bit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;histogram&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change fps graph to histogram&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpu_text&lt;/code&gt;&lt;br&gt;&lt;code&gt;gpu_text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Override CPU and GPU text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;log_interval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change the default log interval, &lt;code&gt;100&lt;/code&gt; is default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vulkan_driver&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays used vulkan driver, radv/amdgpu-pro/amdvlk&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpu_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Displays GPU name from pci.ids&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpu_power&lt;/code&gt;&lt;br&gt;&lt;code&gt;gpu_power&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display CPU/GPU draw in watts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;engine_version&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display OpenGL or vulkan and vulkan-based render engine&#39;s version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;permit_upload&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allow uploading of logs to Flightlessmango.com&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;upload_log&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change keybind for uploading log&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;benchmark_percentiles&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configure which framerate percentiles are shown in the logging summary. Default is &lt;code&gt;97,AVG,1,0.1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;wine&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows current Wine or Proton version in use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;wine_color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change color of the wine/proton text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpu_mhz&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows the CPUs current MHz&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpu_load_change&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changes the color of the GPU load depending on load&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpu_load_color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the colors for the gpu load change low,medium and high. e.g &lt;code&gt;gpu_load_color=0000FF,00FFFF,FF00FF&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpu_load_value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the values for medium and high load e.g &lt;code&gt;gpu_load_value=50,90&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpu_load_change&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changes the color of the CPU load depending on load&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpu_load_color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the colors for the gpu load change low,medium and high. e.g &lt;code&gt;cpu_load_color=0000FF,00FFFF,FF00FF&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cpu_load_value&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the values for medium and high load e.g &lt;code&gt;cpu_load_value=50,90&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;core_load_change&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Changes the colors of cpu core loads, uses the same data from &lt;code&gt;cpu_load_value&lt;/code&gt; and &lt;code&gt;cpu_load_change&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cellpadding_y&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the vertical cellpadding, default is &lt;code&gt;-0.085&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;frametime&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display frametime next to fps text&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;frame_count&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display frame count&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;table_columns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the number of table columns for ImGui, defaults to 3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;blacklist&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add a program to the blacklist. e.g &lt;code&gt;blacklist=vkcube,WatchDogs2.exe&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resolution&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display the current resolution&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;show_fps_limit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display the current fps limit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;custom_text_center&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display a custom text centered useful for a header e.g &lt;code&gt;custom_text_center=FlightLessMango Benchmarks&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;custom_text&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display a custom text e.g &lt;code&gt;custom_text=Fsync enabled&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;exec&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display output of bash command in next column, e.g &lt;code&gt;custom_text=/home&lt;/code&gt; , &lt;code&gt;exec=df -h /home | tail -n 1&lt;/code&gt;. Only works with legacy_layout=false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;round_corners&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change the amount of roundness of the corners have e.g &lt;code&gt;round_corners=10.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vkbasalt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows if vkbasalt is on&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gamemode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Shows if gamemode is on&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;battery&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display current battery percent and energy consumption&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;battery_icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display battery icon instead of percent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;battery_color&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change the BATT text color&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fps_only&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show FPS only. &lt;em&gt;&lt;strong&gt;Not meant to be used with other display params&lt;/strong&gt;&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gamepad_battery&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display battey of wireless gamepads (xone,xpadneo,ds4)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;gamepad_battery_icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display gamepad battery percent with icon. *enabled by default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Example: &lt;code&gt;MANGOHUD_CONFIG=cpu_temp,gpu_temp,position=top-right,height=500,font_size=32&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Because comma is also used as option delimiter and needs to be escaped for values with a backslash, you can use &lt;code&gt;+&lt;/code&gt; like &lt;code&gt;MANGOHUD_CONFIG=fps_limit=60+30+0&lt;/code&gt; instead.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: Width and Height are set automatically based on the font_size, but can be overridden.&lt;/p&gt; &#xA;&lt;p&gt;Note: RAPL is currently used for Intel CPUs to show power draw with &lt;code&gt;cpu_power&lt;/code&gt; which may be unreadable for non-root users due to &lt;a href=&#34;https://platypusattack.com/&#34;&gt;vulnerability&lt;/a&gt;. The corresponding &lt;code&gt;energy_uj&lt;/code&gt; file has to be readable by corresponding user, e.g. by running &lt;code&gt;chmod o+r /sys/class/powercap/intel-rapl\:0/energy_uj&lt;/code&gt; as root, else the power shown will be &lt;em&gt;0 W&lt;/em&gt;, though having the file readable may potentially be a security vulnerability persisting until system reboots.&lt;/p&gt; &#xA;&lt;h2&gt;Vsync&lt;/h2&gt; &#xA;&lt;h3&gt;OpenGL Vsync&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-1&lt;/code&gt; = Adaptive sync&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt; = Off&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt; = On&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;n&lt;/code&gt; = Sync to refresh rate / n.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Vulkan Vsync&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;0&lt;/code&gt; = Adaptive VSync (FIFO_RELAXED_KHR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;1&lt;/code&gt; = Off (IMMEDIATE_KHR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;2&lt;/code&gt; = Mailbox (VSync with uncapped FPS) (MAILBOX_KHR)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;3&lt;/code&gt; = On (FIFO_KHR)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All vulkan vsync options might not be supported on your device, you can check what your device supports here &lt;a href=&#34;https://vulkan.gpuinfo.org/listsurfacepresentmodes.php?platform=linux&#34;&gt;vulkan.gpuinfo.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Shift_L+F2&lt;/code&gt; : Toggle Logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shift_L+F4&lt;/code&gt; : Reload Config&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Shift_R+F12&lt;/code&gt;: Toggle Hud&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Workarounds&lt;/h2&gt; &#xA;&lt;p&gt;Options starting with &#34;gl_*&#34; are for OpenGL.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;gl_size_query = viewport&lt;/code&gt; : Specify what to use for getting display size. Options are &#34;viewport&#34;, &#34;scissorbox&#34; or disabled. Defaults to using glXQueryDrawable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gl_bind_framebuffer = 0..N&lt;/code&gt; : (Re)bind given framebuffer before MangoHud gets drawn. Helps with Crusader Kings III.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gl_dont_flip = 1&lt;/code&gt; : Don&#39;t swap origin if using GL_UPPER_LEFT. Helps with Ryujinx.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;MangoHud FPS logging&lt;/h2&gt; &#xA;&lt;p&gt;You must set a valid path for &lt;code&gt;output_folder&lt;/code&gt; in your configuration to store logs in.&lt;/p&gt; &#xA;&lt;p&gt;When you toggle logging (using the keybind &lt;code&gt;Shift_L+F2&lt;/code&gt;), a file is created with the game name plus a date &amp;amp; timestamp in your &lt;code&gt;output_folder&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Log files can be uploaded to &lt;a href=&#34;https://flightlessmango.com/games/user_benchmarks&#34;&gt;Flightlessmango.com&lt;/a&gt; to create graphs automatically.&lt;/p&gt; &#xA;&lt;p&gt;You can share the created page with others, just link it.&lt;/p&gt; &#xA;&lt;h4&gt;Multiple log files&lt;/h4&gt; &#xA;&lt;p&gt;It&#39;s possible to upload multiple files when using &lt;a href=&#34;https://flightlessmango.com/games/user_benchmarks&#34;&gt;Flightlessmango.com&lt;/a&gt;. You can rename them to your preferred names and upload them in a batch. These filenames will be used as the legend in the graph.&lt;/p&gt; &#xA;&lt;h4&gt;Log uploading walkthrough&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/flightlessmango/MangoHud/master/assets/log_upload_example.gif&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ish-app/ish</title>
    <updated>2022-08-29T01:38:34Z</updated>
    <id>tag:github.com,2022-08-29:/ish-app/ish</id>
    <link href="https://github.com/ish-app/ish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Linux shell for iOS&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://ish.app&#34;&gt;iSH&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/ish-app/ish&#34;&gt;&lt;img src=&#34;https://travis-ci.org/ish-app/ish.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ish-app/ish/search?q=goto&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/search/ish-app/ish/goto.svg?sanitize=true&#34; alt=&#34;goto counter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ish-app/ish/search?q=fuck&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/search/ish-app/ish/fuck.svg?sanitize=true&#34; alt=&#34;fuck counter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ish.app&#34;&gt; &lt;img src=&#34;https://ish.app/assets/github-readme.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;A project to get a Linux shell running on iOS, using usermode x86 emulation and syscall translation.&lt;/p&gt; &#xA;&lt;p&gt;For the current status of the project, check the issues tab, and the commit logs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/ish-shell/id1436902243&#34;&gt;App Store page&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://testflight.apple.com/join/97i7KM8O&#34;&gt;TestFlight beta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/HFAXj44&#34;&gt;Discord server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish/wiki&#34;&gt;Wiki with help and tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ish-app/ish/raw/master/README_ZH.md&#34;&gt;README中文&lt;/a&gt; (如若未能保持最新，请提交PR以更新)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Hacking&lt;/h1&gt; &#xA;&lt;p&gt;This project has a git submodule, make sure to clone with &lt;code&gt;--recurse-submodules&lt;/code&gt; or run &lt;code&gt;git submodule update --init&lt;/code&gt; after cloning.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll need these things to build the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Python 3 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Meson (&lt;code&gt;pip3 install meson&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Ninja&lt;/li&gt; &#xA; &lt;li&gt;Clang and LLD (on mac, &lt;code&gt;brew install llvm&lt;/code&gt;, on linux, &lt;code&gt;sudo apt install clang lld&lt;/code&gt; or &lt;code&gt;sudo pacman -S clang lld&lt;/code&gt; or whatever)&lt;/li&gt; &#xA; &lt;li&gt;sqlite3 (this is so common it may already be installed on linux and is definitely already installed on mac. if not, do something like &lt;code&gt;sudo apt install libsqlite3-dev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;libarchive (&lt;code&gt;brew install libarchive&lt;/code&gt;, &lt;code&gt;sudo port install libarchive&lt;/code&gt;, &lt;code&gt;sudo apt install libarchive-dev&lt;/code&gt;) TODO: bundle this dependency&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build for iOS&lt;/h2&gt; &#xA;&lt;p&gt;Open the project in Xcode, open iSH.xcconfig, and change &lt;code&gt;ROOT_BUNDLE_IDENTIFIER&lt;/code&gt; to something unique. You&#39;ll also need to update the development team ID in the project (not target!) build settings. Then click Run. There are scripts that should do everything else automatically. If you run into any problems, open an issue and I&#39;ll try to help.&lt;/p&gt; &#xA;&lt;h2&gt;Build command line tool for testing&lt;/h2&gt; &#xA;&lt;p&gt;To set up your environment, cd to the project and run &lt;code&gt;meson build&lt;/code&gt; to create a build directory in &lt;code&gt;build&lt;/code&gt;. Then cd to the build directory and run &lt;code&gt;ninja&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To set up a self-contained Alpine linux filesystem, download the Alpine minirootfs tarball for i386 from the &lt;a href=&#34;https://alpinelinux.org/downloads/&#34;&gt;Alpine website&lt;/a&gt; and run &lt;code&gt;./tools/fakefsify&lt;/code&gt;, with the minirootfs tarball as the first argument and the name of the output directory as the second argument. Then you can run things inside the Alpine filesystem with &lt;code&gt;./ish -f alpine /bin/login -f root&lt;/code&gt;, assuming the output directory is called &lt;code&gt;alpine&lt;/code&gt;. If &lt;code&gt;tools/fakefsify&lt;/code&gt; doesn&#39;t exist for you in your build directory, that might be because it couldn&#39;t find libarchive on your system (see above for ways to install it.)&lt;/p&gt; &#xA;&lt;p&gt;You can replace &lt;code&gt;ish&lt;/code&gt; with &lt;code&gt;tools/ptraceomatic&lt;/code&gt; to run the program in a real process and single step and compare the registers at each step. I use it for debugging. Requires 64-bit Linux 4.11 or later.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;iSH has several logging channels which can be enabled at build time. By default, all of them are disabled. To enable them:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In Xcode: Set the &lt;code&gt;ISH_LOG&lt;/code&gt; setting in iSH.xcconfig to a space-separated list of log channels.&lt;/li&gt; &#xA; &lt;li&gt;With Meson (command line tool for testing): Run &lt;code&gt;meson configure -Dlog=&#34;&amp;lt;space-separated list of log channels&amp;gt;&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Available channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;strace&lt;/code&gt;: The most useful channel, logs the parameters and return value of almost every system call.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;instr&lt;/code&gt;: Logs every instruction executed by the emulator. This slows things down a lot.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;verbose&lt;/code&gt;: Debug logs that don&#39;t fit into another category.&lt;/li&gt; &#xA; &lt;li&gt;Grep for &lt;code&gt;DEFAULT_CHANNEL&lt;/code&gt; to see if more log channels have been added since this list was updated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;A note on the JIT&lt;/h1&gt; &#xA;&lt;p&gt;Possibly the most interesting thing I wrote as part of iSH is the JIT. It&#39;s not actually a JIT since it doesn&#39;t target machine code. Instead it generates an array of pointers to functions called gadgets, and each gadget ends with a tailcall to the next function; like the threaded code technique used by some Forth interpreters. The result is a speedup of roughly 3-5x compared to pure emulation.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I made the decision to write nearly all of the gadgets in assembly language. This was probably a good decision with regards to performance (though I&#39;ll never know for sure), but a horrible decision with regards to readability, maintainability, and my sanity. The amount of bullshit I&#39;ve had to put up with from the compiler/assembler/linker is insane. It&#39;s like there&#39;s a demon in there that makes sure my code is sufficiently deformed, and if not, makes up stupid reasons why it shouldn&#39;t compile. In order to stay sane while writing this code, I&#39;ve had to ignore best practices in code structure and naming. You&#39;ll find macros and variables with such descriptive names as &lt;code&gt;ss&lt;/code&gt; and &lt;code&gt;s&lt;/code&gt; and &lt;code&gt;a&lt;/code&gt;. Assembler macros nested beyond belief. And to top it off, there are almost no comments.&lt;/p&gt; &#xA;&lt;p&gt;So a warning: Long-term exposure to this code may cause loss of sanity, nightmares about GAS macros and linker errors, or any number of other debilitating side effects. This code is known to the State of California to cause cancer, birth defects, and reproductive harm.&lt;/p&gt;</summary>
  </entry>
</feed>