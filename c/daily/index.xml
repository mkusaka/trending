<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-20T01:28:08Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>google/wuffs</title>
    <updated>2024-05-20T01:28:08Z</updated>
    <id>tag:github.com,2024-05-20:/google/wuffs</id>
    <link href="https://github.com/google/wuffs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wrangling Untrusted File Formats Safely&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Wuffs is a &lt;strong&gt;memory-safe programming language&lt;/strong&gt; (and a &lt;strong&gt;standard library&lt;/strong&gt; written in that language) for &lt;strong&gt;Wrangling Untrusted File Formats Safely&lt;/strong&gt;. Wrangling includes parsing, decoding and encoding. Example file formats include images, audio, video, fonts and compressed archives.&lt;/p&gt; &#xA;&lt;p&gt;It is &lt;a href=&#34;https://twitter.com/richgel999/status/1481027198530248714&#34;&gt;&lt;strong&gt;&#34;ridiculously fast&#34;&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/wuffs/main/test/data/ridiculously-fast.png&#34; alt=&#34;Screenshot of a tweet saying &amp;quot;ridiculously fast&amp;quot;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Per its &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/benchmarks.md&#34;&gt;benchmarks&lt;/a&gt; and other linked-to blog posts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It can decode bzip2 &lt;strong&gt;&lt;a href=&#34;https://nigeltao.github.io/blog/2022/wuffs-bzip2-decoder.html&#34;&gt;1.3x faster than &lt;code&gt;/usr/bin/bzcat&lt;/code&gt; (C)&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It can decode deflate up to &lt;strong&gt;1.4x faster than zlib-the-library (C)&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It can decode GIF &lt;strong&gt;2x-6x faster than &#34;giflib&#34; (C), &#34;image/gif&#34; (Go) and &#34;gif&#34; (Rust)&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;It can decode PNG &lt;strong&gt;&lt;a href=&#34;https://nigeltao.github.io/blog/2021/fastest-safest-png-decoder.html&#34;&gt;1.2x-2.7x faster than &#34;libpng&#34; (C), &#34;image/png&#34; (Go) and &#34;png&#34; (Rust)&lt;/a&gt;&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals and Non-Goals&lt;/h2&gt; &#xA;&lt;p&gt;Wuffs&#39; goal is to produce software libraries that are as safe as Go or Rust, roughly speaking, but as fast as C, and that can be used anywhere C libraries are used. This includes very large C/C++ projects, such as popular web browsers and operating systems (using that term to include desktop and mobile user interfaces, not just the kernel).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/wuffs-the-library.md&#34;&gt;Wuffs the Library&lt;/a&gt; is &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/release/c&#34;&gt;available&lt;/a&gt; as transpiled C code. Other C/C++ projects can &lt;strong&gt;use that library without requiring the &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/wuffs-the-language.md&#34;&gt;Wuffs the Language&lt;/a&gt; toolchain&lt;/strong&gt;. Those projects can use Wuffs the Library like using any other third party C library. It&#39;s just not hand-written C.&lt;/p&gt; &#xA;&lt;p&gt;However, unlike hand-written C, Wuffs the Language is safe with respect to buffer overflows, integer arithmetic overflows and null pointer dereferences. A key difference between Wuffs and other memory-safe languages is that &lt;strong&gt;all such checks are done at compile time, not at run time&lt;/strong&gt;. If it compiles, it is safe, with respect to those three bug classes.&lt;/p&gt; &#xA;&lt;p&gt;The trade-off in aiming for both safety and speed is that Wuffs programs take longer for a programmer to write, as they have to &lt;strong&gt;explicitly annotate their programs with proofs of safety&lt;/strong&gt;. A statement like &lt;code&gt;x += 1&lt;/code&gt; unsurprisingly means to increment the variable &lt;code&gt;x&lt;/code&gt; by &lt;code&gt;1&lt;/code&gt;. However, in Wuffs, such a statement is a compile time error unless the compiler can also prove that &lt;code&gt;x&lt;/code&gt; is not the maximal value of &lt;code&gt;x&lt;/code&gt;&#39;s type (e.g. &lt;code&gt;x&lt;/code&gt; is not &lt;code&gt;255&lt;/code&gt; if &lt;code&gt;x&lt;/code&gt; is a &lt;code&gt;base.u8&lt;/code&gt;), as the increment would otherwise overflow. Similarly, an integer arithmetic expression like &lt;code&gt;x / y&lt;/code&gt; is a compile time error unless the compiler can also prove that &lt;code&gt;y&lt;/code&gt; is not zero.&lt;/p&gt; &#xA;&lt;h2&gt;Hermeticity&lt;/h2&gt; &#xA;&lt;p&gt;Wuffs is not a general purpose programming language. &lt;strong&gt;It is for writing libraries, not programs&lt;/strong&gt;. Wuffs code is &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/note/hermeticity.md&#34;&gt;hermetic&lt;/a&gt; and can only compute (e.g. convert &#34;compressed bytes&#34; to &#34;decompressed bytes&#34;). &lt;strong&gt;It cannot make any syscalls&lt;/strong&gt; (e.g. it has no ambient authority to read your files), implying that it cannot allocate or free memory (and is therefore trivially safe against things like memory leaks, use-after-frees and double-frees).&lt;/p&gt; &#xA;&lt;p&gt;It produces &lt;a href=&#34;https://sans-io.readthedocs.io/&#34;&gt;Sans I/O style&lt;/a&gt; libraries (but C libraries, not Python), meaning that they are agnostic to &lt;a href=&#34;https://journal.stuffwithstuff.com/2015/02/01/what-color-is-your-function/&#34;&gt;&#39;function colors&#39;&lt;/a&gt;. They can be combined with synchronous or asynchronous I/O, as the library caller (not library implementation) is responsible for the actual I/O.&lt;/p&gt; &#xA;&lt;p&gt;The idea isn&#39;t to write your whole program in Wuffs, &lt;strong&gt;only the parts that are both performance-conscious and security-conscious&lt;/strong&gt;. For example, while technically possible, it is unlikely that a Wuffs compiler would be worth writing entirely in Wuffs.&lt;/p&gt; &#xA;&lt;h2&gt;What Does Wuffs Code Look Like?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/std/lzw/decode_lzw.wuffs&#34;&gt;&lt;code&gt;/std/lzw/decode_lzw.wuffs&lt;/code&gt;&lt;/a&gt; file is a good example. The &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/wuffs-the-language.md&#34;&gt;Wuffs the Language&lt;/a&gt; document has more information on how it differs from other languages in the C family.&lt;/p&gt; &#xA;&lt;h2&gt;What Does Compile Time Checking Look Like?&lt;/h2&gt; &#xA;&lt;p&gt;For example, making this one-line edit to the LZW codec leads to a compile time error. &lt;code&gt;wuffs gen&lt;/code&gt; fails to generate the C code, i.e. fails to compile (transpile) the Wuffs code to C code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/std/lzw/decode_lzw.wuffs b/std/lzw/decode_lzw.wuffs&#xA;index f878c5e..f10dcee 100644&#xA;--- a/std/lzw/decode_lzw.wuffs&#xA;+++ b/std/lzw/decode_lzw.wuffs&#xA;@@ -98,7 +98,7 @@ pub func lzw_decoder.decode?(dst ptr buf1, src ptr buf1, src_final bool)() {&#xA;                        in.dst.write?(x:s)&#xA;&#xA;                        if use_save_code {&#xA;-                               this.suffixes[save_code] = c as u8&#xA;+                               this.suffixes[save_code] = (c + 1) as u8&#xA;                                this.prefixes[save_code] = prev_code as u16&#xA;                        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wuffs gen std/gif&#xA;check: expression &#34;(c + 1) as u8&#34; bounds [1 ..= 256] is not within bounds [0 ..= 255] at&#xA;/home/n/go/src/github.com/google/wuffs/std/lzw/decode_lzw.wuffs:101. Facts:&#xA;    n_bits &amp;lt; 8&#xA;    c &amp;lt; 256&#xA;    this.stack[s] == (c as u8)&#xA;    use_save_code&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In comparison, this two-line edit will compile (but the &#34;does it decode GIF correctly&#34; tests then fail):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;diff --git a/std/lzw/decode_lzw.wuffs b/std/lzw/decode_lzw.wuffs&#xA;index f878c5e..b43443d 100644&#xA;--- a/std/lzw/decode_lzw.wuffs&#xA;+++ b/std/lzw/decode_lzw.wuffs&#xA;@@ -97,8 +97,8 @@ pub func lzw_decoder.decode?(dst ptr buf1, src ptr buf1, src_final bool)() {&#xA;                        // type checking, bounds checking and code generation for it).&#xA;                        in.dst.write?(x:s)&#xA;&#xA;-                       if use_save_code {&#xA;-                               this.suffixes[save_code] = c as u8&#xA;+                       if use_save_code and (c &amp;lt; 200) {&#xA;+                               this.suffixes[save_code] = (c + 1) as u8&#xA;                                this.prefixes[save_code] = prev_code as u16&#xA;                        }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ wuffs gen std/gif&#xA;gen wrote:      /home/n/go/src/github.com/google/wuffs/gen/c/gif.c&#xA;gen unchanged:  /home/n/go/src/github.com/google/wuffs/gen/h/gif.h&#xA;$ wuffs test std/gif&#xA;gen unchanged:  /home/n/go/src/github.com/google/wuffs/gen/c/gif.c&#xA;gen unchanged:  /home/n/go/src/github.com/google/wuffs/gen/h/gif.h&#xA;test:           /home/n/go/src/github.com/google/wuffs/test/c/gif&#xA;gif/basic.c     clang   PASS (8 tests run)&#xA;gif/basic.c     gcc     PASS (8 tests run)&#xA;gif/gif.c       clang   FAIL test_lzw_decode: bufs1_equal: wi: got 19311, want 19200.&#xA;contents differ at byte 3 (in hex: 0x000003):&#xA;  000000: dcdc dc00 00d9 f5f9 f6df dc5f 393a 3a3a  ..........._9:::&#xA;  000010: 3a3b 618e c8e4 e4e4 e5e4 e600 00e4 bbbb  :;a.............&#xA;  000020: eded 8f91 9191 9090 9090 9190 9192 9192  ................&#xA;  000030: 9191 9292 9191 9293 93f0 f0f0 f1f1 f2f2  ................&#xA;excerpts of got (above) versus want (below):&#xA;  000000: dcdc dcdc dcd9 f5f9 f6df dc5f 393a 3a3a  ..........._9:::&#xA;  000010: 3a3a 618e c8e4 e4e4 e5e4 e6e4 e4e4 bbbb  ::a.............&#xA;  000020: eded 8f91 9191 9090 9090 9090 9191 9191  ................&#xA;  000030: 9191 9191 9191 9193 93f0 f0f0 f1f1 f2f2  ................&#xA;&#xA;gif/gif.c       gcc     FAIL test_lzw_decode: bufs1_equal: wi: got 19311, want 19200.&#xA;contents differ at byte 3 (in hex: 0x000003):&#xA;  000000: dcdc dc00 00d9 f5f9 f6df dc5f 393a 3a3a  ..........._9:::&#xA;  000010: 3a3b 618e c8e4 e4e4 e5e4 e600 00e4 bbbb  :;a.............&#xA;  000020: eded 8f91 9191 9090 9090 9190 9192 9192  ................&#xA;  000030: 9191 9292 9191 9293 93f0 f0f0 f1f1 f2f2  ................&#xA;excerpts of got (above) versus want (below):&#xA;  000000: dcdc dcdc dcd9 f5f9 f6df dc5f 393a 3a3a  ..........._9:::&#xA;  000010: 3a3a 618e c8e4 e4e4 e5e4 e6e4 e4e4 bbbb  ::a.............&#xA;  000020: eded 8f91 9191 9090 9090 9090 9191 9191  ................&#xA;  000030: 9191 9191 9191 9193 93f0 f0f0 f1f1 f2f2  ................&#xA;&#xA;wuffs-test-c: some tests failed&#xA;wuffs test: some tests failed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Directory Layout&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;lang&lt;/code&gt; holds the Go libraries that implement Wuffs the Language: tokenizer, AST, parser, renderer, etc. The Wuffs tools are written in Go, but as mentioned above, Wuffs transpiles to C code, and Go is not necessarily involved if all you want is to use the C edition of Wuffs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib&lt;/code&gt; holds other Go libraries, not specific to Wuffs the Language per se.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;internal&lt;/code&gt; holds internal implementation details, as per Go&#39;s &lt;a href=&#34;https://golang.org/s/go14internal&#34;&gt;internal packages&lt;/a&gt; convention.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmd&lt;/code&gt; holds Wuffs the Language&#39; command line tools, also written in Go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;std&lt;/code&gt; holds Wuffs the Library&#39;s code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;release&lt;/code&gt; holds the releases (e.g. in their C form) of Wuffs the Library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt; holds the regular tests for Wuffs the Library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fuzz&lt;/code&gt; holds the fuzz tests for Wuffs the Library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;script&lt;/code&gt; holds miscellaneous utility programs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doc&lt;/code&gt; holds documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;example&lt;/code&gt; holds example programs for Wuffs the Library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hello-wuffs-c&lt;/code&gt; holds an example program for Wuffs the Language.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/BUILD.md&#34;&gt;BUILD&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/getting-started.md&#34;&gt;Getting Started&lt;/a&gt;. &lt;strong&gt;Start here&lt;/strong&gt; if you want to play but aren&#39;t sure how (and &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/BUILD.md&#34;&gt;BUILD&lt;/a&gt; doesn&#39;t help).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/background.md&#34;&gt;Background&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/benchmarks.md&#34;&gt;Benchmarks&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/binary-size.md&#34;&gt;Binary Size&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/changelog.md&#34;&gt;Changelog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/glossary.md&#34;&gt;Glossary&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/related-work.md&#34;&gt;Related Work&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/roadmap.md&#34;&gt;Roadmap&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/wuffs-the-language.md&#34;&gt;Wuffs the Language&lt;/a&gt; overview.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/wuffs-the-library.md&#34;&gt;Wuffs the Library&lt;/a&gt; overview and see also &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/std&#34;&gt;API categories&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/note&#34;&gt;Note&lt;/a&gt; directory also contains various short articles.&lt;/p&gt; &#xA;&lt;h1&gt;Non-C/C++ Languages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dev0x13/pywuffs&#34;&gt;dev0x13/pywuffs&lt;/a&gt; holds Python bindings for Wuffs the Library.&lt;/li&gt; &#xA; &lt;li&gt;Bindings for Go, Rust and other languages are tracked as &lt;a href=&#34;https://github.com/google/wuffs/issues/38&#34;&gt;issue #38&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;p&gt;Version 0.3 (April 2023) is the latest stable version. Stable means that its API won&#39;t change any further, but being a &#34;version 0.x&#34; means that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It will not have long term support.&lt;/li&gt; &#xA; &lt;li&gt;Newer versions make no promises about compatibility.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The compiler undoubtedly has bugs. Assertion checking needs more rigor, especially around side effects and aliasing, and being sufficiently well specified to allow alternative implementations. Lots of detail needs work, but the broad brushstrokes are there.&lt;/p&gt; &#xA;&lt;p&gt;Nonetheless, Wuffs&#39; GIF decoder has shipped in the Google Chrome web browser &lt;a href=&#34;https://chromium-review.googlesource.com/c/chromium/src/+/2940044&#34;&gt;since June 2021&lt;/a&gt; (milestone M93). See also the &lt;a href=&#34;https://twitter.com/richgel999/status/1481027198530248714&#34;&gt;&#34;ridiculously fast&#34;&lt;/a&gt; tweet already mentioned above.&lt;/p&gt; &#xA;&lt;h1&gt;Discussion&lt;/h1&gt; &#xA;&lt;p&gt;The mailing list is at &lt;a href=&#34;https://groups.google.com/forum/#!forum/wuffs&#34;&gt;https://groups.google.com/forum/#!forum/wuffs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file contains instructions on how to file the Contributor License Agreement before sending any pull requests (PRs). Of course, if you&#39;re new to the project, it&#39;s usually best to discuss any proposals and reach consensus before sending your first PR.&lt;/p&gt; &#xA;&lt;p&gt;Source code is &lt;a href=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/note/auto-formatting.md&#34;&gt;auto-formatted&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This software is distributed under the terms of both the MIT license and the Apache License (Version 2.0).&lt;/p&gt; &#xA;&lt;p&gt;See LICENSE for details.&lt;/p&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;This is not an official Google product, it is just code that happens to be owned by Google.&lt;/p&gt; &#xA;&lt;h1&gt;Mascot&lt;/h1&gt; &#xA;&lt;p&gt;Tony is an arse-kicking wombat who loves playing &lt;a href=&#34;https://en.wikipedia.org/wiki/Full-forward&#34;&gt;full-forward&lt;/a&gt; and hates buffer overflows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/google/wuffs/main/doc/logo/wuffs-acronym-logo-1536x1024.png&#34; alt=&#34;WUFFS Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Updated on November 2023.&lt;/p&gt;</summary>
  </entry>
</feed>