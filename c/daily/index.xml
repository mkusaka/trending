<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-25T01:31:43Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cnlohr/epaper_projects</title>
    <updated>2023-01-25T01:31:43Z</updated>
    <id>tag:github.com,2023-01-25:/cnlohr/epaper_projects</id>
    <link href="https://github.com/cnlohr/epaper_projects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;epaper_projects&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>TurtleARM/CVE-2023-0179-PoC</title>
    <updated>2023-01-25T01:31:43Z</updated>
    <id>tag:github.com,2023-01-25:/TurtleARM/CVE-2023-0179-PoC</id>
    <link href="https://github.com/TurtleARM/CVE-2023-0179-PoC" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-0179 PoC&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the exploit for my recently discovered vulnerability in the nftables subsystem that was assigned CVE-2023-0179, affecting all Linux versions from 5.5 to 6.2-rc3, although the exploit was tested on 6.1.6.&lt;/p&gt; &#xA;&lt;p&gt;The vulnerability details and writeup can be found on &lt;a href=&#34;https://www.openwall.com/lists/oss-security/2023/01/13/2&#34;&gt;oss-security&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building instructions&lt;/h2&gt; &#xA;&lt;p&gt;Just invoke the &lt;code&gt;make leak&lt;/code&gt; and &lt;code&gt;make crash&lt;/code&gt; commands to generate the corresponding executables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;libmnl&lt;/code&gt; and &lt;code&gt;libnftnl&lt;/code&gt; are required for the build to succeed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install libmnl-dev libnftnl-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Infoleak&lt;/h2&gt; &#xA;&lt;p&gt;The exploit will enter an unprivileged user and network namespace and add an &lt;code&gt;nft_payload&lt;/code&gt; expression via the &lt;code&gt;rule_add_payload&lt;/code&gt; function which, when evaluated, will trigger the stack buffer overflow and overwrite the registers.&lt;/p&gt; &#xA;&lt;p&gt;The content is then retrieved with the following nft command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nft list map netdev mytable myset12&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output will leak several shuffled addresses relative to kernel data structures.&lt;/p&gt; &#xA;&lt;h2&gt;LPE&lt;/h2&gt; &#xA;&lt;p&gt;TODO: for now, the crash binary will just panic the kernel.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;David Bouman&#39;s &lt;code&gt;libnftnl&lt;/code&gt; &lt;a href=&#34;https://github.com/pqlx/CVE-2022-1015&#34;&gt;implementation&lt;/a&gt; and detailed &lt;a href=&#34;https://blog.dbouman.nl/2022/04/02/How-The-Tables-Have-Turned-CVE-2022-1015-1016/&#34;&gt;blog post&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>elastic/Silhouette</title>
    <updated>2023-01-25T01:31:43Z</updated>
    <id>tag:github.com,2023-01-25:/elastic/Silhouette</id>
    <link href="https://github.com/elastic/Silhouette" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Keep it secret, keep it safe&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Silhouette&lt;/h1&gt; &#xA;&lt;p&gt;By &lt;a href=&#34;https://twitter.com/GabrielLandau&#34;&gt;Gabriel Landau&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/magerbomb&#34;&gt;Mark Mager&lt;/a&gt; at &lt;a href=&#34;https://www.elastic.co/security-labs/&#34;&gt;Elastic Security&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://www.youtube.com/watch?v=NnM9HvDping&amp;amp;t=22652s&#34;&gt;&lt;em&gt;Hide Your Valuables â€” Mitigating Physical Credential Dumping Attacks&lt;/em&gt;&lt;/a&gt; presented at &lt;a href=&#34;https://shmoocon.org/&#34;&gt;Shmoocon 2023&lt;/a&gt;. Slides &lt;a href=&#34;https://raw.githubusercontent.com/elastic/Silhouette/main/2023-01%20Silhouette%20Shmoocon%20Presentation.pdf&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Keeping LSA secrets out of physical memory&lt;/h3&gt; &#xA;&lt;p&gt;Silhouette is a POC that mitigates the use of physical memory to dump credentials from LSASS. It does this in three ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Aggressively flush LSASS&#39;s pages from RAM to disk.&lt;/li&gt; &#xA; &lt;li&gt;Block raw disk access within the boot volume, preventing raw copy attacks against &lt;code&gt;pagefile.sys&lt;/code&gt; and &lt;code&gt;hiberfil.sys&lt;/code&gt; (e.g. &lt;a href=&#34;https://www.powershellgallery.com/packages/PowerSploit/1.0.0.0/Content/Exfiltration%5CInvoke-NinjaCopy.ps1&#34;&gt;Invoke-NinjaCopy&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Block &lt;code&gt;FILE_READ_DATA&lt;/code&gt; for &lt;code&gt;pagefile.sys&lt;/code&gt; in all Volume Shadow Copy snapshots to block access with tools like &lt;a href=&#34;https://github.com/candera/hobocopy&#34;&gt;hobocopy&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;It is highly recommended to enable RunAsPPL before using Silhouette.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building and running it&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is a proof of concept. Use it at your own risk.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Compile Silhouette.sln with Visual Studio 2019. The WDK is required. This was originally developed with the &lt;a href=&#34;https://learn.microsoft.com/en-us/windows-hardware/drivers/other-wdk-downloads#step-2-install-the-wdk&#34;&gt;Win11 21H2 WDK&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;a href=&#34;https://docs.microsoft.com/en-us/windows-hardware/drivers/install/the-testsigning-boot-configuration-option&#34;&gt;Test Signing&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Register the service:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sc create Silhouette type= filesys start= demand binpath= %CD%\Silhouette.sys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Add Minifilter keys:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;reg import FilterKeys.reg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Start the service:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;sc start Silhouette&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;Silhouette is covered by the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/Silhouette/main/LICENSE.txt&#34;&gt;ELv2 license&lt;/a&gt;. It uses &lt;a href=&#34;https://github.com/winsiderss/systeminformer/tree/25846070780183848dc8d8f335a54fa6e636e281/phnt&#34;&gt;phnt&lt;/a&gt; from SystemInformer under the &lt;a href=&#34;https://raw.githubusercontent.com/elastic/Silhouette/main/phnt/LICENSE.txt&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>