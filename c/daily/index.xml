<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub C Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-01T01:29:28Z</updated>
  <subtitle>Daily Trending of C in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gyf304/dotenv</title>
    <updated>2024-05-01T01:29:28Z</updated>
    <id>tag:github.com,2024-05-01:/gyf304/dotenv</id>
    <link href="https://github.com/gyf304/dotenv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone, language agnostic dotenv&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Prefix any command with &lt;code&gt;dotenv&lt;/code&gt; to load environment variables from a file named &lt;code&gt;.env&lt;/code&gt; in the current directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dotenv sh -c &#39;echo $MY_VAR&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively put &lt;code&gt;dotenv&lt;/code&gt; in the shebang line of a script to automatically load environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env -S dotenv bash&#xA;echo $MY_VAR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;dotenv&lt;/code&gt; is a tiny, self-contained utility.&lt;/p&gt; &#xA;&lt;p&gt;This README file contains the installation instructions and the manpage for the &lt;code&gt;dotenv&lt;/code&gt; utility.&lt;/p&gt; &#xA;&lt;h1&gt;INSTALL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;dotenv&lt;/code&gt; can be installed on a Unix-like system with a C compiler and &lt;code&gt;make&lt;/code&gt; installed by running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make&#xA;sudo make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the &lt;code&gt;dotenv&lt;/code&gt; binary to &lt;code&gt;/usr/local/bin&lt;/code&gt;, and the manpage to &lt;code&gt;/usr/local/share/man/man1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;DOTENV(1) - General Commands Manual&lt;/p&gt; &#xA;&lt;h1&gt;NAME&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotenv&lt;/strong&gt; - load environment variables from a file&lt;/p&gt; &#xA;&lt;h1&gt;SYNOPSIS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;dotenv&lt;/strong&gt; &lt;em&gt;program&amp;nbsp;...&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h1&gt;DESCRIPTION&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;dotenv&lt;/strong&gt; utility reads a file (by default &lt;em&gt;.env&lt;/em&gt; in the current directory) and loads the environment variables from it. It then executes the specified program with the loaded environment variables. If no dotenv file is found, it will execute the program with the current environment.&lt;/p&gt; &#xA;&lt;h1&gt;ENVIRONMENT VARIABLES&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;DOTENV_PATH&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The path to the dotenv file. If not set, the default path is &lt;em&gt;.env&lt;/em&gt; in the current directory.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;DOTENV_CONFIG_PATH&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Same as &lt;code&gt;DOTENV_PATH&lt;/code&gt; for compatibility with the original nodejs &lt;strong&gt;dotenv&lt;/strong&gt; implementation.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;EXAMPLES&lt;/h1&gt; &#xA;&lt;p&gt;Run the env(1) command with the environment variables loaded from the .env file in the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ dotenv env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Same as above but with a custom dotenv file path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ DOTENV_PATH=.env2 dotenv env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use dotenv in the shebang line of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;#!/usr/bin/env -S dotenv bash&#xA;echo $MY_VAR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FILE FORMAT&lt;/h1&gt; &#xA;&lt;p&gt;The file format is a list of key-value pairs, one per line. The key and value are separated by an equal sign. Whitespaces around keys and values are ignored. A line is terminated by a newline character or a carriage return. Comments can be added using a hash sign (#) either at the start of a line or inline. For values that contain a hash sign, the value must be quoted. Values can be optionally quoted with single or double quotes. If quoted, the following escape sequences are supported:&lt;/p&gt; &#xA;&lt;p&gt;\n&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A newline.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;\r&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A carriage return.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;\t&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A tab.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;\&#39;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A single quote.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;\&#34;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A double quote.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;\\&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A backslash.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;SEE ALSO&lt;/h1&gt; &#xA;&lt;p&gt;env(1)&lt;/p&gt; &#xA;&lt;h1&gt;AUTHORS&lt;/h1&gt; &#xA;&lt;p&gt;Yifan Gu &amp;lt;&lt;a href=&#34;mailto:me@yifangu.com&#34;&gt;me@yifangu.com&lt;/a&gt;&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;Unknown OS - April 28, 2024&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>exploits-forsale/CVE-2024-26218</title>
    <updated>2024-05-01T01:29:28Z</updated>
    <id>tag:github.com,2024-05-01:/exploits-forsale/CVE-2024-26218</id>
    <link href="https://github.com/exploits-forsale/CVE-2024-26218" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proof-of-Concept for CVE-2024-26218&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>exploits-forsale/24h2-nt-exploit</title>
    <updated>2024-05-01T01:29:28Z</updated>
    <id>tag:github.com,2024-05-01:/exploits-forsale/24h2-nt-exploit</id>
    <link href="https://github.com/exploits-forsale/24h2-nt-exploit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exploit targeting NT kernel in 24H2 Windows Insider Preview&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Windows 11 24H2 NT Exploit&lt;/h1&gt; &#xA;&lt;p&gt;Source code for the exploit &lt;a href=&#34;https://exploits.forsale/24h2-nt-exploit/&#34;&gt;detailed on exploits.forsale&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Should work on all Windows 11 24H2 x64 builds prior to &lt;code&gt;26058&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;teb_nt_poc.c&lt;/code&gt; - The exploit itself, leveraging &lt;code&gt;CVE-2024-21345 &lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prefetch_asm.asm&lt;/code&gt;, &lt;code&gt;prefetch_leak.h&lt;/code&gt; - Side-channel to bypass kernel ASLR&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;find_nt_offsets.h&lt;/code&gt;, &lt;code&gt;find_nt_offsets.c&lt;/code&gt; - Finds some non-exported globals in NT using Capstone&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ntos.h&lt;/code&gt; - Misc non-public structs and functions related to NT.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>