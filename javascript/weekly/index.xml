<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-18T01:49:06Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>awslabs/llrt</title>
    <updated>2024-02-18T01:49:06Z</updated>
    <id>tag:github.com,2024-02-18:/awslabs/llrt</id>
    <link href="https://github.com/awslabs/llrt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LLRT (Low Latency Runtime) is an experimental, lightweight JavaScript runtime designed to address the growing demand for fast and efficient Serverless applications.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/awslabs/llrt/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/awslabs/llrt/actions/workflows/ci.yml/badge.svg?branch=main&#34; alt=&#34;LLRT CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/awslabs/llrt/actions/workflows/release.yml&#34;&gt;&lt;img src=&#34;https://github.com/awslabs/llrt/actions/workflows/release.yml/badge.svg?sanitize=true&#34; alt=&#34;LLRT Release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;LLRT (&lt;strong&gt;L&lt;/strong&gt;ow &lt;strong&gt;L&lt;/strong&gt;atency &lt;strong&gt;R&lt;/strong&gt;un&lt;strong&gt;t&lt;/strong&gt;ime) is a lightweight JavaScript runtime designed to address the growing demand for fast and efficient Serverless applications. LLRT offers up to over &lt;strong&gt;10x&lt;/strong&gt; faster startup and up to &lt;strong&gt;2x&lt;/strong&gt; overall lower cost compared to other JavaScript runtimes running on &lt;strong&gt;AWS Lambda&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s built in Rust, utilizing QuickJS as JavaScript engine, ensuring efficient memory usage and swift startup.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] LLRT is an &lt;strong&gt;experimental&lt;/strong&gt; package. It is subject to change and intended only for evaluation purposes.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;sub&gt;LLRT - &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/example/functions/src/v3-lib.mjs&#34;&gt;DynamoDB Put, ARM, 128MB&lt;/a&gt;:&lt;sub&gt; &lt;img src=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/benchmarks/llrt-ddb-put.png&#34; alt=&#34;DynamoDB Put LLRT&#34; title=&#34;LLRT DynamoDB Put&#34;&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;sub&gt;Node.js 20 - &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/example/functions/src/v3-lib.mjs&#34;&gt;DynamoDB Put, ARM, 128MB&lt;/a&gt;:&lt;sub&gt; &lt;img src=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/benchmarks/node20-ddb-put.png&#34; alt=&#34;DynamoDB Put Node20&#34; title=&#34;Node20 DynamoDB Put&#34;&gt;&lt;/sub&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;HTTP benchmarks measured in &lt;strong&gt;round trip time&lt;/strong&gt; for a cold start (&lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/#benchmark-methodology&#34;&gt;why?&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Configure Lambda functions to use LLRT&lt;/h2&gt; &#xA;&lt;p&gt;Download the last LLRT release from &lt;a href=&#34;https://github.com/awslabs/llrt/releases&#34;&gt;https://github.com/awslabs/llrt/releases&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Option 1: Custom runtime (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;Choose &lt;code&gt;Custom Runtime on Amazon Linux 2023&lt;/code&gt; and package the LLRT &lt;code&gt;bootstrap&lt;/code&gt; binary together with your JS code.&lt;/p&gt; &#xA;&lt;h3&gt;Option 2: Use a layer&lt;/h3&gt; &#xA;&lt;p&gt;Choose &lt;code&gt;Custom Runtime on Amazon Linux 2023&lt;/code&gt;, upload &lt;code&gt;llrt-lambda-arm64.zip&lt;/code&gt; or &lt;code&gt;llrt-lambda-x86.zip&lt;/code&gt; as a layer and add to your function&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it 🎉&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] Even though LLRT supports &lt;a href=&#34;https://262.ecma-international.org/11.0/&#34;&gt;ES2020&lt;/a&gt; it&#39;s &lt;strong&gt;NOT&lt;/strong&gt; a drop in replacement for Node.js. Consult &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/#compatibility-matrix&#34;&gt;Compatibility matrix&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/API.md&#34;&gt;API&lt;/a&gt; for more details. All dependencies should be bundled for a &lt;code&gt;browser&lt;/code&gt; platform and mark included &lt;code&gt;@aws-sdk&lt;/code&gt; packages as external.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Option 3: AWS SAM&lt;/h3&gt; &#xA;&lt;p&gt;The following &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/example/llrt-sam/&#34;&gt;example project&lt;/a&gt; sets up a lambda instrumented with a layer containing the llrt runtime.&lt;/p&gt; &#xA;&lt;h2&gt;Testing &amp;amp; ensuring compatibility&lt;/h2&gt; &#xA;&lt;p&gt;The best way to ensure that your code is compatible with LLRT is to write tests and executing them via the built in test runner&lt;/p&gt; &#xA;&lt;h3&gt;Test runner&lt;/h3&gt; &#xA;&lt;p&gt;Test runner uses a lightweight Jest-like API and uses the &lt;a href=&#34;https://nodejs.org/api/assert.html&#34;&gt;assert module&lt;/a&gt; from Node.js for test assertions. For examples how to implement tests for LLRT see the &lt;code&gt;/tests&lt;/code&gt; folder of this repository.&lt;/p&gt; &#xA;&lt;p&gt;To run tests, execute the &lt;code&gt;llrt test&lt;/code&gt; command. LLRT scans the current directory and sub-directories for files that ends with &lt;code&gt;*.test.js&lt;/code&gt; or &lt;code&gt;*.test.mjs&lt;/code&gt;. You can also provide a specific test directory to scan by using the &lt;code&gt;llrt test -d &amp;lt;directory&amp;gt;&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;p&gt;The test runner also has support for filters. Using filters is as simple as adding additional command line arguments, i.e: &lt;code&gt;llrt test crypto&lt;/code&gt; will only run tests that match the filename containing &lt;code&gt;crypto&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility matrix&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] LLRT only support a fraction of the Node.js APIs. It is &lt;strong&gt;NOT&lt;/strong&gt; a drop in replacement for Node.js, nor will it ever be. Below is a high level overview of partially supported APIs and modules. For more details consult the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/API.md&#34;&gt;API&lt;/a&gt; documentation&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Node.js&lt;/th&gt; &#xA;   &lt;th&gt;LLRT ⚠️&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;buffer&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;streams&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎*&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;child_process&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎⏱&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;net:sockets&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎⏱&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;net:server&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;tls&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✘⏱&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fetch&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;http&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✘⏱**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;https&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✘⏱**&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fs/promises&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fs&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✘⏱&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;timers&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uuid&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;crypto&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;process&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;encoding&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;console&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;events&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ESM&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CJS&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;async/await&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Other modules&lt;/td&gt; &#xA;   &lt;td&gt;✔︎&lt;/td&gt; &#xA;   &lt;td&gt;✘&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;em&gt;⚠️ = partially supported in LLRT&lt;/em&gt; &lt;em&gt;⏱ = planned partial support&lt;/em&gt; &lt;em&gt;* = Not native&lt;/em&gt; &lt;em&gt;** = Use fetch instead&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Using node_modules (dependencies) with LLRT&lt;/h2&gt; &#xA;&lt;p&gt;Since LLRT is meant for performance critical application it&#39;s not recommended to deploy &lt;code&gt;node_modules&lt;/code&gt; without bundling, minification and tree-shaking.&lt;/p&gt; &#xA;&lt;p&gt;LLRT can work with any bundler of your choice. Below are some configurations for popular bundlers:&lt;/p&gt; &#xA;&lt;h3&gt;ESBuild&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;esbuild index.js --platform=node --target=es2020 --format=esm --bundle --minify --external:@aws-sdk --external:@smithy --external:uuid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rollup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import resolve from &#39;rollup-plugin-node-resolve&#39;;&#xA;import commonjs from &#39;rollup-plugin-commonjs&#39;;&#xA;import { terser } from &#39;rollup-plugin-terser&#39;;&#xA;&#xA;export default {&#xA;  input: &#39;index.js&#39;,&#xA;  output: {&#xA;    file: &#39;dist/bundle.js&#39;,&#xA;    format: &#39;esm&#39;,&#xA;    sourcemap: true,&#xA;    target: &#39;es2020&#39;,&#xA;  },&#xA;  plugins: [&#xA;    resolve(),&#xA;    commonjs(),&#xA;    terser(),&#xA;  ],&#xA;  external: [&#34;@aws-sdk&#34;,&#34;@smithy&#34;,&#34;uuid&#34;],&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Webpack&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import TerserPlugin from &#39;terser-webpack-plugin&#39;;&#xA;import nodeExternals from &#39;webpack-node-externals&#39;;&#xA;&#xA;export default {&#xA;  entry: &#39;./index.js&#39;,&#xA;  output: {&#xA;    path: &#34;dist&#34;,&#xA;    filename: &#39;bundle.js&#39;,&#xA;    libraryTarget: &#39;module&#39;,&#xA;  },&#xA;  target: &#39;web&#39;,&#xA;  mode: &#39;production&#39;,&#xA;  resolve: {&#xA;    extensions: [&#39;.js&#39;],&#xA;  },&#xA;  externals: [nodeExternals(),&#34;@aws-sdk&#34;,&#34;@smithy&#34;,&#34;uuid&#34;],&#xA;  optimization: {&#xA;    minimize: true,&#xA;    minimizer: [&#xA;      new TerserPlugin({&#xA;        terserOptions: {&#xA;          ecma: 2020,&#xA;        },&#xA;      }),&#xA;    ],&#xA;  },&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using AWS SDK (v3) with LLRT&lt;/h2&gt; &#xA;&lt;p&gt;LLRT includes many AWS SDK clients and utils as part of the runtime, built into the executable. These SDK Clients have been specifically fine-tuned to offer best performance while not compromising on compatibility. LLRT replaces some JavaScript dependencies used by the AWS SDK by native ones such as Hash calculations and XML parsing. V3 SDK packages not included in the list below have to be bundled with your source code while marking the following packages as external:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Bundled AWS SDK packages&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-dynamodb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/lib-dynamodb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-kms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-lambda&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-s3&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-secrets-manager&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-ses&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-sns&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-sqs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-sts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-ssm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-cloudwatch-logs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-cloudwatch-events&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-eventbridge&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-sfn&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-xray&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/client-cognito-identity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/util-dynamodb&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@aws-sdk/credential-providers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;@smithy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] LLRT currently does not support returning streams from SDK responses. Use &lt;code&gt;response.Body.transformToString();&lt;/code&gt; or &lt;code&gt;response.Body.transformToByteArray();&lt;/code&gt; as shown below.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const response = await client.send(command);&#xA;// or &#39;transformToByteArray()&#39;&#xA;const str = await response.Body.transformToString();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Running TypeScript with LLRT&lt;/h2&gt; &#xA;&lt;p&gt;Same principle as dependencies applies when using TypeScript. TypeScript must be bundled and transpiled into ES2020 JavaScript.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] LLRT will not support running TypeScript without transpilation. This is by design for performance reasons. Transpiling requires CPU and memory that adds latency and cost during execution. This can be avoided if done ahead of time during deployment.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Rationale&lt;/h2&gt; &#xA;&lt;p&gt;What justifies the introduction of another JavaScript runtime in light of existing options such as &lt;a href=&#34;https://nodejs.org/en&#34;&gt;Node.js&lt;/a&gt;, &lt;a href=&#34;https://bun.sh&#34;&gt;Bun&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://deno.com/&#34;&gt;Deno&lt;/a&gt;?&lt;/p&gt; &#xA;&lt;p&gt;Node.js, Bun, and Deno represent highly proficient JavaScript runtimes. However, they are designed with general-purpose applications in mind. These runtimes were not specifically tailored for the demands of a Serverless environment, characterized by short-lived runtime instances. They each depend on a (&lt;a href=&#34;https://en.wikipedia.org/wiki/Just-in-time_compilation&#34;&gt;Just-In-Time compiler (JIT)&lt;/a&gt; for dynamic code compilation and optimization during execution. While JIT compilation offers substantial long-term performance advantages, it carries a computational and memory overhead.&lt;/p&gt; &#xA;&lt;p&gt;In contrast, LLRT distinguishes itself by not incorporating a JIT compiler, a strategic decision that yields two significant advantages:&lt;/p&gt; &#xA;&lt;p&gt;A) JIT compilation is a notably sophisticated technological component, introducing increased system complexity and contributing substantially to the runtime&#39;s overall size.&lt;/p&gt; &#xA;&lt;p&gt;B) Without the JIT overhead, LLRT conserves both CPU and memory resources that can be more efficiently allocated to code execution tasks, thereby reducing application startup times.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;There are many cases where LLRT shows notable performance drawbacks compared with JIT-powered runtimes, such as large data processing, Monte Carlo simulations or performing tasks with hundreds of thousands or millions of iterations. LLRT is most effective when applied to smaller Serverless functions dedicated to tasks such as data transformation, real time processing, AWS service integrations, authorization, validation etc. It is designed to complement existing components rather than serve as a comprehensive replacement for everything. Notably, given its supported APIs are based on Node.js specification, transitioning back to alternative solutions requires minimal code adjustments.&lt;/p&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;Clone code and cd to directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:awslabs/llrt.git --recursive&#xA;cd llrt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install rust&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | bash -s -- -y&#xA;source &#34;$HOME/.cargo/env&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# MacOS&#xA;brew install zig make zstd node corepack&#xA;&#xA;# Ubuntu&#xA;sudo apt -y install make zstd&#xA;sudo snap install zig --classic --beta&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install Node.js packages&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;corepack enable&#xA;yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install generate libs and setup rust targets &amp;amp; toolchains&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make stdlib &amp;amp;&amp;amp; make libs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build release for Lambda&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make release-arm64&#xA;# or for x86-64, use&#xA;make release-x64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally build for your local machine (Mac or Linux)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now have a &lt;code&gt;llrt-lambda-arm64.zip&lt;/code&gt; or &lt;code&gt;llrt-lambda-x86.zip&lt;/code&gt;. You can manually upload this as a Lambda layer or use it via your Infrastructure-as-code pipeline&lt;/p&gt; &#xA;&lt;h2&gt;Running Lambda emulator&lt;/h2&gt; &#xA;&lt;p&gt;Please note that in order to run the example you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Valid AWS credentials via a &lt;code&gt;~/.aws/credentials&lt;/code&gt; or via environment variables.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export AWS_ACCESS_KEY_ID=XXX&#xA;export AWS_SECRET_ACCESS_KEY=YYY&#xA;export AWS_REGION=us-east-1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A DynamoDB table (with &lt;code&gt;id&lt;/code&gt; as the partition key) on &lt;code&gt;us-east-1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;dynamodb:PutItem&lt;/code&gt; IAM permission on this table. You can use this policy (don&#39;t forget to modify &amp;lt;YOUR_ACCOUNT_ID&amp;gt;):&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;&#x9;&#34;Version&#34;: &#34;2012-10-17&#34;,&#xA;&#x9;&#34;Statement&#34;: [&#xA;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#34;Sid&#34;: &#34;putItem&#34;,&#xA;&#x9;&#x9;&#x9;&#34;Effect&#34;: &#34;Allow&#34;,&#xA;&#x9;&#x9;&#x9;&#34;Action&#34;: &#34;dynamodb:PutItem&#34;,&#xA;&#x9;&#x9;&#x9;&#34;Resource&#34;: &#34;arn:aws:dynamodb:us-east-1:&amp;lt;YOUR_ACCOUNT_ID&amp;gt;:table/quickjs-table&#34;&#xA;&#x9;&#x9;}&#xA;&#x9;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start the &lt;code&gt;lambda-server.js&lt;/code&gt; in a separate terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node lambda-server.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then run llrt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Benchmark Methodology&lt;/h2&gt; &#xA;&lt;p&gt;Although Init Duration &lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtime-environment.html&#34;&gt;reported by Lambda&lt;/a&gt; is commonly used to understand cold start impact on overall request latency, this metric does not include the time needed to copy code into the Lambda sandbox.&lt;/p&gt; &#xA;&lt;p&gt;The technical definition of Init Duration (&lt;a href=&#34;https://docs.aws.amazon.com/lambda/latest/dg/nodejs-logging.html#node-logging-output&#34;&gt;source&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For the first request served, the amount of time it took the runtime to load the function and run code outside of the handler method.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Measuring round-trip request duration provides a more complete picture of user facing cold-start latency.&lt;/p&gt; &#xA;&lt;p&gt;Lambda invocation results (λ-labeled row) report the sum total of Init Duration + Function Duration.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/CONTRIBUTING.md#security-issue-notifications&#34;&gt;CONTRIBUTING&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under the Apache-2.0 License. See the &lt;a href=&#34;https://raw.githubusercontent.com/awslabs/llrt/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GovindCodes/ValentineWish</title>
    <updated>2024-02-18T01:49:06Z</updated>
    <id>tag:github.com,2024-02-18:/GovindCodes/ValentineWish</id>
    <link href="https://github.com/GovindCodes/ValentineWish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wish Valentine&#39;s Day to Your loved ones like a Nerd.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Valentine&#39;s Wish &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GovindCodes&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/author-GovindCodes-green&#34; alt=&#34;Author&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://govindcodes.github.io/ValentineWish/&#34;&gt;See it Live&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h2&gt;Make your own version &lt;span&gt;💻&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;📷&lt;/span&gt;&lt;span&gt;📷&lt;/span&gt;&lt;span&gt;📷&lt;/span&gt;&lt;span&gt;📷&lt;/span&gt;&lt;span&gt;📷&lt;/span&gt;&lt;span&gt;📷&lt;/span&gt;&lt;span&gt;📷&lt;/span&gt; &lt;em&gt;Start with Smile&lt;/em&gt;&lt;span&gt;😄&lt;/span&gt;&lt;span&gt;😄&lt;/span&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;customize.json&lt;/code&gt; and replace name/wish-message/image with your own&lt;/li&gt; &#xA; &lt;li&gt;Turn on GitHub pages for the repository (Settings &amp;gt; GitHub Pages)&lt;/li&gt; &#xA; &lt;li&gt;Send the URL that you get at the above step to your friend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have any idea to make it more interesting, feel free to send a PR, or create an issue for a feature request.&lt;/p&gt; &#xA;&lt;p&gt;Stay happy and keep the people you care about happy. :)&lt;/p&gt; &#xA;&lt;h4&gt;OwnerShip&lt;/h4&gt; &#xA;&lt;p&gt;The animations used in the Repository is created by Afiur Rahman Fahim(faahim).&lt;span&gt;😄&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kleampa/not-paid</title>
    <updated>2024-02-18T01:49:06Z</updated>
    <id>tag:github.com,2024-02-18:/kleampa/not-paid</id>
    <link href="https://github.com/kleampa/not-paid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Client did not pay? Add opacity to the body tag and decrease it every day until their site completely fades away&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Client did not pay?&lt;/h2&gt; &#xA;&lt;p&gt;Add opacity to the body tag and decrease it every day until their site completely fades away. Set a due date and customize the number of days you offer them until the website is fully vanished.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/* change these variables as you wish */&#xA;var due_date = new Date(&#39;2017-02-27&#39;);&#xA;var days_deadline = 60;&#xA;/* stop changing here */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;PS: Next time use &lt;a href=&#34;https://letsdeel.com&#34;&gt;letsdeel.com&lt;/a&gt; to make sure you get paid.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Just load the not-paid.js file in &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A Wordpress plugin is also available &lt;a href=&#34;https://github.com/SurfEdge/not-paid-wp&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s also an Android version available &lt;a href=&#34;https://github.com/theapache64/faded&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There&#39;s also an Windows Forms version available &lt;a href=&#34;https://github.com/g-otn/winforms-not-paid&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Flutter version available &lt;a href=&#34;https://github.com/krishnakumarcn/faded&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;iOS (SwiftUI) version available &lt;a href=&#34;https://github.com/vfrascello/not-paid-ios/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Angular version available &lt;a href=&#34;https://github.com/CleitonJB/not-paid&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Inspired from twitter (@riklomas) Made by Ciprian (@kleampa), Romania&lt;/p&gt; &#xA;&lt;p&gt;PS: No PR&#39;s or issues will be accepted for this project.&lt;/p&gt; &#xA;&lt;h2&gt;Advertising&lt;/h2&gt; &#xA;&lt;p&gt;Because this repo is going viral from time to time to developers, I&#39;m open for discussion if you want to promote a product/service in this README file. Just mail me at kleampa[]gmail&lt;/p&gt;</summary>
  </entry>
</feed>