<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-03T01:43:37Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>playcanvas/engine</title>
    <updated>2025-08-03T01:43:37Z</updated>
    <id>tag:github.com,2025-08-03:/playcanvas/engine</id>
    <link href="https://github.com/playcanvas/engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Powerful web graphics runtime built on WebGL, WebGPU, WebXR and glTF&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img width=&#34;200&#34; src=&#34;https://s3-eu-west-1.amazonaws.com/static.playcanvas.com/platform/images/logo/playcanvas-logo-medium.png&#34;&gt; &#xA; &lt;h1&gt;PlayCanvas WebGL Game Engine&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://api.playcanvas.com/engine/&#34;&gt;API Reference&lt;/a&gt; | &lt;a href=&#34;https://developer.playcanvas.com&#34;&gt;User Manual&lt;/a&gt; | &lt;a href=&#34;https://playcanvas.github.io&#34;&gt;Examples&lt;/a&gt; | &lt;a href=&#34;https://forum.playcanvas.com&#34;&gt;Forum&lt;/a&gt; | &lt;a href=&#34;https://blog.playcanvas.com&#34;&gt;Blog&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;PlayCanvas is an open-source game engine. It uses HTML5 and WebGL to run games and other interactive 3D content in any mobile or desktop browser.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/playcanvas&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/playcanvas&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/result?p=playcanvas&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/playcanvas&#34; alt=&#34;Minzipped size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://isitmaintained.com/project/playcanvas/engine&#34;&gt;&lt;img src=&#34;https://isitmaintained.com/badge/resolution/playcanvas/engine.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://isitmaintained.com/project/playcanvas/engine&#34;&gt;&lt;img src=&#34;https://isitmaintained.com/badge/open/playcanvas/engine.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=playcanvas&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/playcanvas.svg?style=social&amp;amp;label=Follow&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/playcanvas/engine/raw/dev/README.md&#34;&gt;English&lt;/a&gt; &lt;a href=&#34;https://github.com/playcanvas/engine/raw/dev/README-zh.md&#34;&gt;‰∏≠Êñá&lt;/a&gt; &lt;a href=&#34;https://github.com/playcanvas/engine/raw/dev/README-ja.md&#34;&gt;Êó•Êú¨Ë™û&lt;/a&gt; &lt;a href=&#34;https://github.com/playcanvas/engine/raw/dev/README-kr.md&#34;&gt;ÌïúÍ∏Ä&lt;/a&gt;&lt;/p&gt; &#xA; &lt;h2&gt;Project Showcase&lt;/h2&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/playcanvas/awesome-playcanvas&#34;&gt;Many games and apps&lt;/a&gt; have been published using the PlayCanvas engine. Here is a small selection:&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://playcanv.as/p/MflWvdTW/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/14705/319531/O4J4VU-image-25.jpg&#34; alt=&#34;Seemore&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://playcanv.as/p/44MRmJRU/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/14928/440410/98554E-image-25.jpg&#34; alt=&#34;After The Flood&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://playcanv.as/p/LpmXGUe6/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/14928/349824/U88HJQ-image-25.jpg&#34; alt=&#34;Casino&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://playcanv.as/p/JtL2iqIH/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/4763/TKYXB8-image-25.jpg&#34; alt=&#34;Swooop&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://playcanv.as/p/JERg21J8/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/415995/10A5A9-image-25.jpg&#34; alt=&#34;dev Archer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://playcanv.as/p/2OlkUaxF/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/8/375389/23PRTL-image-25.jpg&#34; alt=&#34;Flappy Bird&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://playcanv.as/p/RqJJ9oU9/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/347824/7ULQ3Y-image-25.jpg&#34; alt=&#34;Car&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://playcanv.as/p/SA7hVBLt/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/12/333626/BGQN9H-image-25.jpg&#34; alt=&#34;Star-Lord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://playcanv.as/p/ZV4PW6wr/&#34;&gt;&lt;img src=&#34;https://s3-eu-west-1.amazonaws.com/images.playcanvas.com/projects/4373/625081/6AB32D-image-25.jpg&#34; alt=&#34;Global Illumination&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;You can see more games on the &lt;a href=&#34;https://playcanvas.com/explore&#34;&gt;PlayCanvas website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Users&lt;/h2&gt; &#xA;&lt;p&gt;PlayCanvas is used by leading companies in video games, advertising and visualization such as:&lt;br&gt; &lt;strong&gt;Animech, Arm, BMW, Disney, Facebook, Famobi, Funday Factory, IGT, King, Miniclip, Leapfrog, Mojiworks, Mozilla, Nickelodeon, Nordeus, NOWWA, PikPok, PlaySide Studios, Polaris, Product Madness, Samsung, Snap, Spry Fox, Zeptolab, Zynga&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;PlayCanvas is a fully-featured game engine.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üßä &lt;strong&gt;Graphics&lt;/strong&gt; - Advanced 2D + 3D graphics engine built on WebGL2 &amp;amp; WebGPU.&lt;/li&gt; &#xA; &lt;li&gt;üèÉ &lt;strong&gt;Animation&lt;/strong&gt; - Powerful state-based animations for characters and arbitrary scene properties&lt;/li&gt; &#xA; &lt;li&gt;‚öõÔ∏è &lt;strong&gt;Physics&lt;/strong&gt; - Full integration with 3D rigid-body physics engine &lt;a href=&#34;https://github.com/kripken/ammo.js&#34;&gt;ammo.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;üéÆ &lt;strong&gt;Input&lt;/strong&gt; - Mouse, keyboard, touch, gamepad and VR controller APIs&lt;/li&gt; &#xA; &lt;li&gt;üîä &lt;strong&gt;Sound&lt;/strong&gt; - 3D positional sounds built on the Web Audio API&lt;/li&gt; &#xA; &lt;li&gt;üì¶ &lt;strong&gt;Assets&lt;/strong&gt; - Asynchronous streaming system built on &lt;a href=&#34;https://www.khronos.org/gltf/&#34;&gt;glTF 2.0&lt;/a&gt;, &lt;a href=&#34;https://google.github.io/draco/&#34;&gt;Draco&lt;/a&gt; and &lt;a href=&#34;https://github.com/BinomialLLC/basis_universal&#34;&gt;Basis&lt;/a&gt; compression&lt;/li&gt; &#xA; &lt;li&gt;üìú &lt;strong&gt;Scripts&lt;/strong&gt; - Write game behaviors in Typescript or JavaScript&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a super-simple Hello World example - a spinning cube!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import * as pc from &#39;playcanvas&#39;;&#xA;&#xA;const canvas = document.createElement(&#39;canvas&#39;);&#xA;document.body.appendChild(canvas);&#xA;&#xA;const app = new pc.Application(canvas);&#xA;&#xA;// fill the available space at full resolution&#xA;app.setCanvasFillMode(pc.FILLMODE_FILL_WINDOW);&#xA;app.setCanvasResolution(pc.RESOLUTION_AUTO);&#xA;&#xA;// ensure canvas is resized when window changes size&#xA;window.addEventListener(&#39;resize&#39;, () =&amp;gt; app.resizeCanvas());&#xA;&#xA;// create box entity&#xA;const box = new pc.Entity(&#39;cube&#39;);&#xA;box.addComponent(&#39;model&#39;, {&#xA;  type: &#39;box&#39;&#xA;});&#xA;app.root.addChild(box);&#xA;&#xA;// create camera entity&#xA;const camera = new pc.Entity(&#39;camera&#39;);&#xA;camera.addComponent(&#39;camera&#39;, {&#xA;  clearColor: new pc.Color(0.1, 0.2, 0.3)&#xA;});&#xA;app.root.addChild(camera);&#xA;camera.setPosition(0, 0, 3);&#xA;&#xA;// create directional light entity&#xA;const light = new pc.Entity(&#39;light&#39;);&#xA;light.addComponent(&#39;light&#39;);&#xA;app.root.addChild(light);&#xA;light.setEulerAngles(45, 0, 0);&#xA;&#xA;// rotate the box according to the delta time since the last frame&#xA;app.on(&#39;update&#39;, dt =&amp;gt; box.rotate(10 * dt, 20 * dt, 30 * dt));&#xA;&#xA;app.start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Want to play with the code yourself? Edit it on &lt;a href=&#34;https://codepen.io/playcanvas/pen/NPbxMj&#34;&gt;CodePen&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A full guide to setting up a local development environment based on the PlayCanvas Engine can be found &lt;a href=&#34;https://developer.playcanvas.com/user-manual/engine/standalone/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build&lt;/h2&gt; &#xA;&lt;p&gt;Ensure you have &lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js 18+&lt;/a&gt; installed. Then, install all of the required Node.js dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run various build options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Command&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Outputs To&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build all engine flavors and type declarations&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;build&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;npm run docs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Build engine &lt;a href=&#34;https://api.playcanvas.com/modules/Engine.html&#34;&gt;API reference docs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;PlayCanvas Editor&lt;/h2&gt; &#xA;&lt;p&gt;The PlayCanvas Engine is an open-source engine that you can use to create HTML5 apps/games. In addition to the engine, we also make the &lt;a href=&#34;https://playcanvas.com/&#34;&gt;PlayCanvas Editor&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/playcanvas/editor&#34;&gt;&lt;img src=&#34;https://github.com/playcanvas/editor/raw/main/images/editor.png?raw=true&#34; alt=&#34;Editor&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For Editor-related bugs and issues, please refer to the &lt;a href=&#34;https://github.com/playcanvas/editor&#34;&gt;Editor&#39;s repo&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zumerlab/snapdom</title>
    <updated>2025-08-03T01:43:37Z</updated>
    <id>tag:github.com,2025-08-03:/zumerlab/snapdom</id>
    <link href="https://github.com/zumerlab/snapdom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;snapDOM captures HTML elements to images with exceptional speed and accuracy.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://zumerlab.github.io/snapdom&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zumerlab/snapdom/main/docs/assets/newhero.png&#34; width=&#34;70%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@zumer/snapdom&#34;&gt; &lt;img alt=&#34;NPM version&#34; src=&#34;https://img.shields.io/npm/v/@zumer/snapdom?style=flat-square&amp;amp;label=Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/zumerlab/snapdom/graphs/contributors&#34;&gt; &lt;img alt=&#34;GitHub contributors&#34; src=&#34;https://img.shields.io/github/contributors/zumerlab/snapdom?style=flat-square&amp;amp;label=Contributors&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/zumerlab/snapdom/stargazers&#34;&gt; &lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/zumerlab/snapdom?style=flat-square&amp;amp;label=Stars&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/zumerlab/snapdom/network/members&#34;&gt; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/zumerlab/snapdom?style=flat-square&amp;amp;label=Forks&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/tinchox5&#34;&gt; &lt;img alt=&#34;Sponsor tinchox5&#34; src=&#34;https://img.shields.io/github/sponsors/tinchox5?style=flat-square&amp;amp;label=Sponsor&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/zumerlab/snapdom/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/zumerlab/snapdom?style=flat-square&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;snapDOM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;snapDOM&lt;/strong&gt; is a fast and accurate DOM-to-image capture tool built for &lt;strong&gt;Zumly&lt;/strong&gt;, a zoom-based view transition framework.&lt;/p&gt; &#xA;&lt;p&gt;It captures any HTML element as a scalable SVG image, preserving styles, fonts, background images, pseudo-elements, and even shadow DOM. It also supports export to raster image formats and canvas.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üì∏ Full DOM capture&lt;/li&gt; &#xA; &lt;li&gt;üé® Embedded styles, pseudo-elements, and fonts&lt;/li&gt; &#xA; &lt;li&gt;üñºÔ∏è Export to SVG, PNG, JPG, WebP, &lt;code&gt;canvas&lt;/code&gt;, or Blob&lt;/li&gt; &#xA; &lt;li&gt;‚ö° Ultra fast, no dependencies&lt;/li&gt; &#xA; &lt;li&gt;üì¶ 100% based on standard Web APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zumerlab.github.io/snapdom/&#34;&gt;https://zumerlab.github.io/snapdom/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;NPM / Yarn&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i @zumer/snapdom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn add @zumer/snapdom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import it in your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { snapdom } from &#39;@zumer/snapdom&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/@zumer/snapdom/dist/snapdom.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Script tag (local)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;snapdom.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ES Module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { snapdom } from &#39;./snapdom.mjs&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module via CDN&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&#34;module&#34;&amp;gt;&#xA;  import { snapdom } from &#39;https://cdn.jsdelivr.net/npm/@zumer/snapdom/dist/snapdom.mjs&#39;;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic usage&lt;/h2&gt; &#xA;&lt;h3&gt;Reusable capture&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const el = document.querySelector(&#39;#target&#39;);&#xA;const result = await snapdom(el, { scale: 2 });&#xA;&#xA;const img = await result.toPng();&#xA;document.body.appendChild(img);&#xA;&#xA;await result.download({ format: &#39;jpg&#39;, filename: &#39;my-capture&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;One-step shortcuts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const el = document.querySelector(&#39;#target&#39;);&#xA;const png = await snapdom.toPng(el);&#xA;document.body.appendChild(png);&#xA;&#xA;const blob = await snapdom.toBlob(el);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;snapdom(el, options?)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns an object with reusable export methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  url: string;&#xA;  toRaw(): string;&#xA;  toImg(): Promise&amp;lt;HTMLImageElement&amp;gt;;&#xA;  toCanvas(): Promise&amp;lt;HTMLCanvasElement&amp;gt;;&#xA;  toBlob(options?): Promise&amp;lt;Blob&amp;gt;;&#xA;  toPng(options?): Promise&amp;lt;HTMLImageElement&amp;gt;;&#xA;  toJpg(options?): Promise&amp;lt;HTMLImageElement&amp;gt;;&#xA;  toWebp(options?): Promise&amp;lt;HTMLImageElement&amp;gt;;&#xA;  download(options?): Promise&amp;lt;void&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shortcut methods&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snapdom.toImg(el, options?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns an &lt;code&gt;HTMLImageElement&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snapdom.toCanvas(el, options?) &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a &lt;code&gt;Canvas&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snapdom.toBlob(el, options?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns an SVG &lt;code&gt;Blob&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snapdom.toPng(el, options?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a PNG image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snapdom.toJpg(el, options?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a JPG image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snapdom.toWebp(el, options?)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a WebP image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;snapdom.download(el, options?) &lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Triggers download in specified format&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;All capture methods accept an &lt;code&gt;options&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;compress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes redundant styles&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fast&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Skips idle delay for faster results&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;embedFonts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Inlines fonts (icon fonts always embedded)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;scale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Output scale multiplier&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dpr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;devicePixelRatio&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Device pixel ratio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Output specific width size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Output specific height size&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;#fff&#34;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Fallback color for JPG/WebP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;quality&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quality for JPG/WebP (0 to 1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;useProxy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Specify a proxy for handling CORS images as fallback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;svg&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Select &lt;code&gt;png&lt;/code&gt;, &lt;code&gt;jpg&lt;/code&gt;, &lt;code&gt;webp&lt;/code&gt; Blob type&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;exclude&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string[]&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;CSS selectors for elements to exclude&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;filter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;function&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;Custom filter function ie &lt;code&gt;(el) =&amp;gt; !el.classList.contains(&#39;hidden&#39;)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Setting custom dimensions with width and height options&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; options to generate an image with specific dimensions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Examples:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Fixed width (proportional height)&lt;/strong&gt; Sets a specific width while maintaining the aspect ratio. Height adjusts proportionally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const result = await snapdom(element, {&#xA;  width: 400 // Outputs a 400px-wide image with auto-scaled height&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Fixed height (proportional width)&lt;/strong&gt; Sets a specific height while maintaining the aspect ratio. Width adjusts proportionally.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const result = await snapdom(element, {&#xA;  height: 200 // Outputs a 200px-tall image with auto-scaled width&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Fixed width and height (may distort image)&lt;/strong&gt; Forces exact dimensions, potentially distorting the image if the aspect ratio differs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const result = await snapdom(element, {&#xA;  width: 800,  // Outputs an 800px √ó 200px image (may stretch/squish content)&#xA;  height: 200&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If &lt;code&gt;scale&lt;/code&gt; is different from 1, it takes priority over width and height. Example: &lt;code&gt;{ scale: 3, width: 500 }&lt;/code&gt; ignores width and scales the image 3x instead.&lt;/p&gt; &#xA;&lt;h3&gt;Cross-Origin Images&lt;/h3&gt; &#xA;&lt;p&gt;By default, snapDOM loads images with &lt;code&gt;crossOrigin=&#34;anonymous&#34;&lt;/code&gt; or &lt;code&gt;crossOrigin=&#34;use-credentials&#34;&lt;/code&gt;. In case fails to get the images, &lt;code&gt;useProxy&lt;/code&gt; can be used to deal with CORS images:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const result = await snapdom(element, {&#xA;  useProxy: &#39;your/proxy/&#39; //Example: &#39;https://corsproxy.io/?url=&#39; or &#39;https://api.allorigins.win/raw?url=&#39;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  format?: &#34;svg&#34; | &#34;png&#34; | &#34;jpg&#34; | &#34;jpeg&#34; | &#34;webp&#34;; // default: &#34;png&#34;&#xA;  filename?: string;         // default: &#34;capture&#34;&#xA;  backgroundColor?: string;  // optional override&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;preCache()&lt;/code&gt; ‚Äì Optional helper&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;preCache()&lt;/code&gt; function can be used to load external resources (like images and fonts) in advance. It is specially useful when the element to capture is big and complex.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { preCache } from &#39;@zumer/snapdom&#39;;&#xA;&#xA;await preCache(document.body);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { snapdom, preCache } from &#39;./snapdom.mjs&#39;;&#xA;    window.addEventListener(&#39;load&#39;, async () =&amp;gt; {&#xA;    await preCache();&#xA;    console.log(&#39;üì¶ Resources preloaded&#39;);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Options for &lt;code&gt;preCache()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;embedFonts&lt;/code&gt; &lt;em&gt;(boolean, default: true)&lt;/em&gt; ‚Äî Inlines non-icon fonts during preload.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;useProxy&lt;/code&gt; &lt;em&gt;(string)&lt;/em&gt; ‚Äî Proxy for handling CORS images as fallback.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Captures &lt;strong&gt;shadow DOM&lt;/strong&gt; and Web Components&lt;/li&gt; &#xA; &lt;li&gt;Supports &lt;code&gt;::before&lt;/code&gt;, &lt;code&gt;::after&lt;/code&gt; and &lt;code&gt;::first-letter&lt;/code&gt; pseudo-elements&lt;/li&gt; &#xA; &lt;li&gt;Inlines background images and fonts&lt;/li&gt; &#xA; &lt;li&gt;Handles &lt;strong&gt;Font Awesome&lt;/strong&gt;, &lt;strong&gt;Material Icons&lt;/strong&gt;, and more&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data-capture=&#34;exclude&#34;&lt;/code&gt; to ignore an element&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;data-capture=&#34;placeholder&#34;&lt;/code&gt; with &lt;code&gt;data-placeholder-text&lt;/code&gt; for masked replacements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;External images should be CORS-accessible (use &lt;code&gt;useProxy&lt;/code&gt; option for handling CORS denied)&lt;/li&gt; &#xA; &lt;li&gt;Iframes are not supported&lt;/li&gt; &#xA; &lt;li&gt;When WebP format is used on Safari, it will fallback to PNG rendering.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@font-face&lt;/code&gt; CSS rule is well supported, but if need to use JS &lt;code&gt;FontFace()&lt;/code&gt;, see this workaround &lt;a href=&#34;https://github.com/zumerlab/snapdom/issues/43&#34;&gt;&lt;code&gt;#43&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ö° Performance Benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;Snapdom has received &lt;strong&gt;significant performance improvements&lt;/strong&gt; since version &lt;code&gt;v1.8.0&lt;/code&gt;. The following benchmarks compare:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Snapdom (current)&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Snapdom v1.8.0&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;html2canvas&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;html-to-image&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simple elements&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Scenario&lt;/th&gt; &#xA;   &lt;th&gt;Snapdom (current)&lt;/th&gt; &#xA;   &lt;th&gt;Snapdom v1.8.0&lt;/th&gt; &#xA;   &lt;th&gt;html2canvas&lt;/th&gt; &#xA;   &lt;th&gt;html-to-image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Small (200√ó100)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.4 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.2 ms&lt;/td&gt; &#xA;   &lt;td&gt;70.3 ms&lt;/td&gt; &#xA;   &lt;td&gt;3.6 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Modal (400√ó300)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.4 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.1 ms&lt;/td&gt; &#xA;   &lt;td&gt;68.8 ms&lt;/td&gt; &#xA;   &lt;td&gt;3.6 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Page View (1200√ó800)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.4 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.0 ms&lt;/td&gt; &#xA;   &lt;td&gt;100.5 ms&lt;/td&gt; &#xA;   &lt;td&gt;3.4 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Large Scroll (2000√ó1500)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.4 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.0 ms&lt;/td&gt; &#xA;   &lt;td&gt;153.1 ms&lt;/td&gt; &#xA;   &lt;td&gt;3.4 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Very Large (4000√ó2000)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;0.4 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1.0 ms&lt;/td&gt; &#xA;   &lt;td&gt;278.9 ms&lt;/td&gt; &#xA;   &lt;td&gt;4.3 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Complex elements&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Scenario&lt;/th&gt; &#xA;   &lt;th&gt;Snapdom (current)&lt;/th&gt; &#xA;   &lt;th&gt;Snapdom v1.8.0&lt;/th&gt; &#xA;   &lt;th&gt;html2canvas&lt;/th&gt; &#xA;   &lt;th&gt;html-to-image&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Small (200√ó100)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;1.1 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3.2 ms&lt;/td&gt; &#xA;   &lt;td&gt;76.0 ms&lt;/td&gt; &#xA;   &lt;td&gt;15.3 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Modal (400√ó300)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;4.5 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;14.0 ms&lt;/td&gt; &#xA;   &lt;td&gt;133.2 ms&lt;/td&gt; &#xA;   &lt;td&gt;55.4 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Page View (1200√ó800)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;32.9 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;113.6 ms&lt;/td&gt; &#xA;   &lt;td&gt;303.4 ms&lt;/td&gt; &#xA;   &lt;td&gt;369.1 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Large Scroll (2000√ó1500)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;133.9 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;387.4 ms&lt;/td&gt; &#xA;   &lt;td&gt;594.4 ms&lt;/td&gt; &#xA;   &lt;td&gt;1,163.0 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Very Large (4000√ó2000)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;364.0 ms&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1,200.4 ms&lt;/td&gt; &#xA;   &lt;td&gt;1,380.8 ms&lt;/td&gt; &#xA;   &lt;td&gt;3,023.9 ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Summary&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Snapdom (current) is &lt;strong&gt;2√ó‚Äì6√ó faster&lt;/strong&gt; than &lt;code&gt;v1.8.0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Up to &lt;strong&gt;150√ó faster&lt;/strong&gt; than &lt;code&gt;html2canvas&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Up to &lt;strong&gt;8√ó faster&lt;/strong&gt; than &lt;code&gt;html-to-image&lt;/code&gt; in large scenarios&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;sub&gt;Benchmarks run in Chromium using Vitest.&lt;br&gt; Hardware: MacBook Air 2018.&lt;br&gt; ‚ö†Ô∏è Performance may vary depending on device.&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Run the benchmarks&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/zumerlab/snapdom.git&#xA;cd snapdom&#xA;npm install&#xA;npm run test:benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Planned improvements for future versions of SnapDOM:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Implement plugin system&lt;/strong&gt; SnapDOM will support external plugins to extend or override internal behavior (e.g. custom node transformers, exporters, or filters).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Refactor to modular architecture&lt;/strong&gt; Internal logic will be split into smaller, focused modules to improve maintainability and code reuse.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Decouple internal logic from global options&lt;/strong&gt; Functions will be redesigned to avoid relying directly on &lt;code&gt;options&lt;/code&gt;. A centralized capture context will improve clarity, autonomy, and testability.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Expose cache control&lt;/strong&gt; Users will be able to manually clear image and font caches or configure their own caching strategies.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Auto font preloading&lt;/strong&gt; Required fonts will be automatically detected and preloaded before capture, reducing the need for manual &lt;code&gt;preCache()&lt;/code&gt; calls.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Document plugin development&lt;/strong&gt; A full guide will be provided for creating and registering custom SnapDOM plugins.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;p&gt;&lt;strong&gt;Make export utilities tree-shakeable&lt;/strong&gt; Export functions like &lt;code&gt;toPng&lt;/code&gt;, &lt;code&gt;toJpg&lt;/code&gt;, &lt;code&gt;toBlob&lt;/code&gt;, etc. will be restructured into independent modules to support tree shaking and minimal builds.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have ideas or feature requests? Feel free to share suggestions or feedback in &lt;a href=&#34;https://github.com/zumerlab/snapdom/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;To contribute or build snapDOM locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Clone the repository&#xA;git clone https://github.com/zumerlab/snapdom.git&#xA;cd snapdom&#xA;&#xA;# Switch to dev branch&#xA;git checkout dev&#xA;&#xA;# Install dependencies&#xA;npm install&#xA;&#xA;# Compile the library (ESM, CJS, and minified versions)&#xA;npm run compile&#xA;&#xA;# Install playwright browsers (necessary for running tests)&#xA;npx playwright install&#xA;&#xA;# Run tests&#xA;npm test&#xA;&#xA;# Run Benchmarks&#xA;npm run test:benchmark&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The main entry point is in &lt;code&gt;src/&lt;/code&gt;, and output bundles are generated in the &lt;code&gt;dist/&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;For detailed contribution guidelines, please see &lt;a href=&#34;https://github.com/zumerlab/snapdom/raw/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors üôå&lt;/h2&gt; &#xA;&lt;!-- CONTRIBUTORS:START --&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://github.com/tinchox5&#34; title=&#34;tinchox5&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/11557901?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;tinchox5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tarwin&#34; title=&#34;tarwin&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/646149?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;tarwin&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/17biubiu&#34; title=&#34;17biubiu&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/13295895?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;17biubiu&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/av01d&#34; title=&#34;av01d&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6247646?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;av01d&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/CHOYSEN&#34; title=&#34;CHOYSEN&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/25995358?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;CHOYSEN&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/pedrocateexte&#34; title=&#34;pedrocateexte&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/207524750?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;pedrocateexte&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/domialex&#34; title=&#34;domialex&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/4694217?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;domialex&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/elliots&#34; title=&#34;elliots&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/622455?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;elliots&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jswhisperer&#34; title=&#34;jswhisperer&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1177690?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;jswhisperer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sharuzzaman&#34; title=&#34;sharuzzaman&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7421941?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;sharuzzaman&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simon1uo&#34; title=&#34;simon1uo&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/60037549?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;simon1uo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/titoBouzout&#34; title=&#34;titoBouzout&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/64156?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;titoBouzout&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jhbae200&#34; title=&#34;jhbae200&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/20170610?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;jhbae200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/miusuncle&#34; title=&#34;miusuncle&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/7549857?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;miusuncle&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/rbbydotdev&#34; title=&#34;rbbydotdev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/101137670?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;rbbydotdev&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kohaiy&#34; title=&#34;kohaiy&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/15622127?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;kohaiy&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fu050409&#34; title=&#34;fu050409&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/46275354?v=4&amp;amp;s=100&#34; style=&#34;border-radius:10px; width:60px; height:60px; object-fit:cover; margin:5px;&#34; alt=&#34;fu050409&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- CONTRIBUTORS:END --&gt; &#xA;&lt;h2&gt;üíñ Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/megaphonecolin&#34;&gt;@megaphonecolin&lt;/a&gt; for supporting this project!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to support this project too, you can &lt;a href=&#34;https://github.com/sponsors/tinchox5&#34;&gt;become a sponsor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT ¬© Zumerlab&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mediacms-io/mediacms</title>
    <updated>2025-08-03T01:43:37Z</updated>
    <id>tag:github.com,2025-08-03:/mediacms-io/mediacms</id>
    <link href="https://github.com/mediacms-io/mediacms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MediaCMS is a modern, fully featured open source video and media CMS, written in Python/Django and React, featuring a REST API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MediaCMS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/LICENSE.txt&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-AGPL%20v3-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mediacms-io/mediacms/releases/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/mediacms-io/mediacms?color=green&#34; alt=&#34;Releases&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/mediacms/mediacms&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/mediacms/mediacms&#34; alt=&#34;DockerHub&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;MediaCMS is a modern, fully featured open source video and media CMS. It is developed to meet the needs of modern web platforms for viewing and sharing media. It can be used to build a small to medium video and media portal within minutes.&lt;/p&gt; &#xA;&lt;p&gt;It is built mostly using the modern stack Django + React and includes a REST API.&lt;/p&gt; &#xA;&lt;p&gt;A demo is available at &lt;a href=&#34;https://demo.mediacms.io&#34;&gt;https://demo.mediacms.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/images/index.jpg&#34; width=&#34;340&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/images/video.jpg&#34; width=&#34;340&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/images/embed.jpg&#34; width=&#34;340&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete control over your data&lt;/strong&gt;: host it yourself!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern technologies&lt;/strong&gt;: Django/Python/Celery, React.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for multiple publishing workflows&lt;/strong&gt;: public, private, unlisted and custom&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple media types support&lt;/strong&gt;: video, audio, image, pdf&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple media classification options&lt;/strong&gt;: categories, tags and custom&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple media sharing options&lt;/strong&gt;: social media share, videos embed code generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Video Trimmer&lt;/strong&gt;: trim video, replace, save as new or create segments&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Role-Based Access Control (RBAC)&lt;/strong&gt;: create RBAC categories and connect users to groups with view/edit access on their media&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SAML support&lt;/strong&gt;: with ability to add mappings to system roles and groups&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Easy media searching&lt;/strong&gt;: enriched with live search functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Playlists for audio and video content&lt;/strong&gt;: create playlists, add and reorder content&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Responsive design&lt;/strong&gt;: including light and dark themes&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advanced users management&lt;/strong&gt;: allow self registration, invite only, closed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable actions&lt;/strong&gt;: allow download, add comments, add likes, dislikes, report media&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configuration options&lt;/strong&gt;: change logos, fonts, styling, add more pages&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Enhanced video player&lt;/strong&gt;: customized video.js player with multiple resolution and playback speed options&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple transcoding profiles&lt;/strong&gt;: sane defaults for multiple dimensions (144p, 240p, 360p, 480p, 720p, 1080p) and multiple profiles (h264, h265, vp9)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Adaptive video streaming&lt;/strong&gt;: possible through HLS protocol&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Subtitles/CC&lt;/strong&gt;: support for multilingual subtitle files&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalable transcoding&lt;/strong&gt;: transcoding through priorities. Experimental support for remote workers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chunked file uploads&lt;/strong&gt;: for pausable/resumable upload of content&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;REST API&lt;/strong&gt;: Documented through Swagger&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Translation&lt;/strong&gt;: Most of the CMS is translated to a number of languages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example cases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Schools, education.&lt;/strong&gt; Administrators and editors keep what content will be published, students are not distracted with advertisements and irrelevant content, plus they have the ability to select either to stream or download content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Organization sensitive content.&lt;/strong&gt; In cases where content is sensitive and cannot be uploaded to external sites.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Build a great community.&lt;/strong&gt; MediaCMS can be customized (URLs, logos, fonts, aesthetics) so that you create a highly customized video portal for your community!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Personal portal.&lt;/strong&gt; Organize, categorize and host your content the way you prefer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;We believe there&#39;s a need for quality open source web applications that can be used to build community portals and support collaboration. We have three goals for MediaCMS: a) deliver all functionality one would expect from a modern system, b) allow for easy installation and maintenance, c) allow easy customization and addition of features.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MediaCMS is released under &lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/LICENSE.txt&#34;&gt;GNU Affero General Public License v3.0 license&lt;/a&gt;. Copyright Markos Gogoulos.&lt;/p&gt; &#xA;&lt;h2&gt;Support and paid services&lt;/h2&gt; &#xA;&lt;p&gt;We provide custom installations, development of extra functionality, migration from existing systems, integrations with legacy systems, training and support. Contact us at &lt;a href=&#34;mailto:info@mediacms.io&#34;&gt;info@mediacms.io&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;Commercial Hostings&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Elestio&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can deploy MediaCMS on Elestio using one-click deployment. Elestio supports MediaCMS by providing revenue share so go ahead and click below to deploy and use MediaCMS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://elest.io/open-source/mediacms&#34;&gt;&lt;img src=&#34;https://elest.io/images/logos/deploy-to-elestio-btn.png&#34; alt=&#34;Deploy on Elestio&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hardware considerations&lt;/h2&gt; &#xA;&lt;p&gt;For a small to medium installation, with a few hours of video uploaded daily, and a few hundreds of active daily users viewing content, 4GB Ram / 2-4 CPUs as minimum is ok. For a larger installation with many hours of video uploaded daily, consider adding more CPUs and more Ram.&lt;/p&gt; &#xA;&lt;p&gt;In terms of disk space, think of what the needs will be. A general rule is to multiply by three the size of the expected uploaded videos (since the system keeps original versions, encoded versions plus HLS), so if you receive 1G of videos daily and maintain all of them, you should consider a 1T disk across a year (1G * 3 * 365).&lt;/p&gt; &#xA;&lt;h2&gt;Installation / Maintanance&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to run MediaCMS, through Docker Compose and through installing it on a server via an automation script that installs and configures all needed services. Find the related pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/admins_docs.md#2-server-installation&#34;&gt;Single Server&lt;/a&gt; page&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/admins_docs.md#3-docker-installation&#34;&gt;Docker Compose&lt;/a&gt; page&lt;/p&gt; &lt;p&gt;A complete guide can be found on the blog post &lt;a href=&#34;https://medium.com/@MediaCMS.io/how-to-self-host-and-share-your-videos-in-2021-14067e3b291b&#34;&gt;How to self-host and share your videos in 2021&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/user_docs.md&#34;&gt;Users documentation&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/admins_docs.md&#34;&gt;Administrators documentation&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/developers_docs.md&#34;&gt;Developers documentation&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/admins_docs.md#5-configuration&#34;&gt;Configuration&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/transcoding.md&#34;&gt;Transcoding&lt;/a&gt; page&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mediacms-io/mediacms/main/docs/dev_exp.md&#34;&gt;Developer Experience&lt;/a&gt; page&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Technology&lt;/h2&gt; &#xA;&lt;p&gt;This software uses the following list of awesome technologies: Python, Django, Django Rest Framework, Celery, PostgreSQL, Redis, Nginx, uWSGI, React, Fine Uploader, video.js, FFMPEG, Bento4&lt;/p&gt; &#xA;&lt;h2&gt;Who is using it&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cinemata&lt;/strong&gt; non-profit media, technology and culture organization - &lt;a href=&#34;https://cinemata.org&#34;&gt;https://cinemata.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Critical Commons&lt;/strong&gt; public media archive and fair use advocacy network - &lt;a href=&#34;https://criticalcommons.org&#34;&gt;https://criticalcommons.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;American Association of Gynecologic Laparoscopists&lt;/strong&gt; - &lt;a href=&#34;https://surgeryu.org/&#34;&gt;https://surgeryu.org/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you like the project, here&#39;s a few things you can do&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Hire us, for custom installations, training, support, maintenance work&lt;/li&gt; &#xA; &lt;li&gt;Suggest us to others that are interested to hire us&lt;/li&gt; &#xA; &lt;li&gt;Write a blog post/article about MediaCMS&lt;/li&gt; &#xA; &lt;li&gt;Share on social media about the project&lt;/li&gt; &#xA; &lt;li&gt;Open issues, participate on &lt;a href=&#34;https://github.com/mediacms-io/mediacms/discussions&#34;&gt;discussions&lt;/a&gt;, report bugs, suggest ideas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mediacms-io/mediacms/discussions/categories/show-and-tell&#34;&gt;Show and tell&lt;/a&gt; how you are using the project&lt;/li&gt; &#xA; &lt;li&gt;Star the project&lt;/li&gt; &#xA; &lt;li&gt;Add functionality, work on a PR, fix an issue!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contact&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:info@mediacms.io&#34;&gt;info@mediacms.io&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>