<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-10-20T01:39:55Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>is-a-dev/register</title>
    <updated>2024-10-20T01:39:55Z</updated>
    <id>tag:github.com,2024-10-20:/is-a-dev/register</id>
    <link href="https://github.com/is-a-dev/register" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Grab your own sweet-looking &#39;.is-a.dev&#39; subdomain.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;is-a.dev Banner&#34; src=&#34;https://raw.githubusercontent.com/is-a-dev/register/main/media/banner.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Domains&#34; src=&#34;https://img.shields.io/github/directory-file-count/is-a-dev/register/domains?color=5c46eb&amp;amp;label=domains&amp;amp;style=for-the-badge&#34;&gt; &lt;img alt=&#34;Open Pull Requests&#34; src=&#34;https://img.shields.io/github/issues-raw/is-a-dev/register?color=5c46eb&amp;amp;label=issues&amp;amp;style=for-the-badge&#34;&gt; &lt;img alt=&#34;Open Issues&#34; src=&#34;https://img.shields.io/github/issues-pr-raw/is-a-dev/register?color=5c46eb&amp;amp;label=pull%20requests&amp;amp;style=for-the-badge&#34;&gt; &lt;br&gt; &lt;img alt=&#34;Publish&#34; src=&#34;https://github.com/is-a-dev/register/actions/workflows/publish.yml/badge.svg?sanitize=true&#34;&gt; &lt;img alt=&#34;Raw API&#34; src=&#34;https://github.com/is-a-dev/register/actions/workflows/raw-api.yml/badge.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;is-a.dev&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;strong&gt;is-a-dev&lt;/strong&gt; is a service that allows developers to get a sweet-looking &#34;.is-a.dev&#34; domain for their personal websites.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/is-a-dev-830872854677422150&#34;&gt;&lt;img alt=&#34;Discord Server&#34; src=&#34;https://invidget.switchblade.xyz/is-a-dev-830872854677422150&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/is-a-dev/register/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://github.com/is-a-dev/register/actions/workflows/publish.yml/badge.svg?sanitize=true&#34; alt=&#34;Publish&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you have any problems, feel free to &lt;a href=&#34;https://github.com/is-a-dev/register/issues/new/choose&#34;&gt;open a issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have an issue that contains confidental infomation, send an email to &lt;a href=&#34;mailto:security@is-a.dev&#34;&gt;security@is-a.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Register&lt;/h2&gt; &#xA;&lt;h3&gt;NS records&lt;/h3&gt; &#xA;&lt;p&gt;When applying for NS records, please consider if you &lt;em&gt;actually&lt;/em&gt; need them. Please provide a detailed reason (with evidence) of why you require NS records.&lt;/p&gt; &#xA;&lt;p&gt;9 times out of 10, you do not actually need NS records, and merely want them. We already support a wide range of records, so it is extremely unlikely you will actually require them.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests adding NS records without reasoning will be closed instantly.&lt;/p&gt; &#xA;&lt;h3&gt;Manual Registration&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want a more visual guide, check out &lt;a href=&#34;https://wdh.gg/tX3ghge&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/is-a-dev/register/fork&#34;&gt;Fork&lt;/a&gt; and star this repository&lt;/li&gt; &#xA; &lt;li&gt;Add a new file called &lt;code&gt;your-domain-name.json&lt;/code&gt; in the &lt;code&gt;domains&lt;/code&gt; folder to register &lt;code&gt;your-domain-name.is-a.dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://is-a.dev/docs&#34;&gt;Read the documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Your pull request will be reviewed and merged. &lt;em&gt;Make sure to keep an eye on it incase we need you to make any changes!&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;After the pull request is merged, please allow up to 24 hours for the changes to propagate&lt;/li&gt; &#xA; &lt;li&gt;Enjoy your new &lt;code&gt;.is-a.dev&lt;/code&gt; domain!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Automated Registration&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] &lt;strong&gt;When using automated registration, please ensure your records are valid. Please do NOT &#34;test&#34; out the system and create invalid PRs, it wastes maintainers&#39; time.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Join our &lt;a href=&#34;https://discord.gg/is-a-dev-830872854677422150&#34;&gt;Discord server&lt;/a&gt;, head to the commands channel and run &lt;code&gt;/register&lt;/code&gt;. The bot will ask you a few questions then will generate your PR and domain automatically. The bot also allows for domain deletion and editing.&lt;/p&gt; &#xA;&lt;h3&gt;Donate&lt;/h3&gt; &#xA;&lt;p&gt;If you like this project, please consider donating so we can keep this project running forever!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/phenax&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-orange.png&#34; alt=&#34;Buy Me a Coffee&#34; height=&#34;28&#34; width=&#34;119&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://liberapay.com/phenax&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/liberapay-donate-yellow.svg?style=for-the-badge&#34; alt=&#34;Liberapay&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://www.cloudflare.com/lp/project-alexandria/&#34;&gt; &lt;img alt=&#34;Cloudflare Logo&#34; src=&#34;https://raw.githubusercontent.com/is-a-dev/register/main/media/cloudflare.png&#34; height=&#34;128&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Similar Services&lt;/h3&gt; &#xA;&lt;p&gt;If you want to find services similar to is-a.dev, take a look at &lt;a href=&#34;https://github.com/wdhdev/free-for-life#domains&#34;&gt;Free For Life&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>canove/whaticket-community</title>
    <updated>2024-10-20T01:39:55Z</updated>
    <id>tag:github.com,2024-10-20:/canove/whaticket-community</id>
    <link href="https://github.com/canove/whaticket-community" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A very simple Ticket System based on WhatsApp messages, that allow multi-users in same WhatsApp account.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?business=VWW3BHW4AWHUY&amp;amp;item_name=Desenvolvimento+de+Software&amp;amp;currency_code=BRL&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B21084%2Fgithub.com%2Fcanove%2Fwhaticket?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B21084%2Fgithub.com%2Fcanove%2Fwhaticket.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=canove_whaticket&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=canove_whaticket&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=canove_whaticket&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=canove_whaticket&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Dp2tTZRYHg&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/784109818247774249.svg?logo=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://whaticket.online/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/forum-online-blue.svg?logo=discourse&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WhaTicket!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The new version of whatsapp-web.js required Node 14. Upgrade your installations to keep using it.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;very simple&lt;/em&gt; Ticket System based on WhatsApp messages.&lt;/p&gt; &#xA;&lt;p&gt;Backend uses &lt;a href=&#34;https://github.com/pedroslopez/whatsapp-web.js&#34;&gt;whatsapp-web.js&lt;/a&gt; to receive and send WhatsApp messages, create tickets from them and store all in a MySQL database.&lt;/p&gt; &#xA;&lt;p&gt;Frontend is a full-featured multi-user &lt;em&gt;chat app&lt;/em&gt; bootstrapped with react-create-app and Material UI, that comunicates with backend using REST API and Websockets. It allows you to interact with contacts, tickets, send and receive WhatsApp messages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I can&#39;t guarantee you will not be blocked by using this method, although it has worked for me. WhatsApp does not allow bots or unofficial clients on their platform, so this shouldn&#39;t be considered totally safe.&lt;/p&gt; &#xA;&lt;h2&gt;How it works?&lt;/h2&gt; &#xA;&lt;p&gt;On every new message received in an associated WhatsApp, a new Ticket is created. Then, this ticket can be reached in a &lt;em&gt;queue&lt;/em&gt; on &lt;em&gt;Tickets&lt;/em&gt; page, where you can assign ticket to your yourself by &lt;em&gt;aceppting&lt;/em&gt; it, respond ticket message and eventually &lt;em&gt;resolve&lt;/em&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Subsequent messages from same contact will be related to first &lt;strong&gt;open/pending&lt;/strong&gt; ticket found.&lt;/p&gt; &#xA;&lt;p&gt;If a contact sent a new message in less than 2 hours interval, and there is no ticket from this contact with &lt;strong&gt;pending/open&lt;/strong&gt; status, the newest &lt;strong&gt;closed&lt;/strong&gt; ticket will be reopen, instead of creating a new one.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/canove/whaticket/raw/master/images/whaticket-queues.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/chat2.png&#34; width=&#34;350&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/chat3.png&#34; width=&#34;350&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/multiple-whatsapps2.png&#34; width=&#34;350&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/contacts1.png&#34; width=&#34;350&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have multiple users chating in same WhatsApp Number ✅&lt;/li&gt; &#xA; &lt;li&gt;Connect to multiple WhatsApp accounts and receive all messages in one place ✅ 🆕&lt;/li&gt; &#xA; &lt;li&gt;Create and chat with new contacts without touching cellphone ✅&lt;/li&gt; &#xA; &lt;li&gt;Send and receive message ✅&lt;/li&gt; &#xA; &lt;li&gt;Send media (images/audio/documents) ✅&lt;/li&gt; &#xA; &lt;li&gt;Receive media (images/audio/video/documents) ✅&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Usage (Linux Ubuntu - Development)&lt;/h2&gt; &#xA;&lt;p&gt;Create Mysql Database using docker: &lt;em&gt;Note&lt;/em&gt;: change MYSQL_DATABASE, MYSQL_PASSWORD, MYSQL_USER and MYSQL_ROOT_PASSWORD.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name whaticketdb -e MYSQL_ROOT_PASSWORD=strongpassword -e MYSQL_DATABASE=whaticket -e MYSQL_USER=whaticket -e MYSQL_PASSWORD=whaticket --restart always -p 3306:3306 -d mariadb:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_bin&#xA;&#xA;# Or run using `docker-compose` as below&#xA;# Before copy .env.example to .env first and set the variables in the file.&#xA;docker-compose up -d mysql&#xA;&#xA;# To administer this mysql database easily using phpmyadmin. &#xA;# It will run by default on port 9000, but can be changed in .env using `PMA_PORT`&#xA;docker-compose -f docker-compose.phpmyadmin.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install puppeteer dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y libxshmfence-dev libgbm-dev wget unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone this repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/canove/whaticket/ whaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to backend folder and create .env file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;nano .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fill &lt;code&gt;.env&lt;/code&gt; file with environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NODE_ENV=DEVELOPMENT      #it helps on debugging&#xA;BACKEND_URL=http://localhost&#xA;FRONTEND_URL=https://localhost:3000&#xA;PROXY_PORT=8080&#xA;PORT=8080&#xA;&#xA;DB_HOST=                  #DB host IP, usually localhost&#xA;DB_DIALECT=&#xA;DB_USER=&#xA;DB_PASS=&#xA;DB_NAME=&#xA;&#xA;JWT_SECRET=3123123213123&#xA;JWT_REFRESH_SECRET=75756756756&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install backend dependencies, build app, run migrations and seeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run build&#xA;npx sequelize db:migrate&#xA;npx sequelize db:seed:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open a second terminal, go to frontend folder and create .env file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano .env&#xA;REACT_APP_BACKEND_URL = http://localhost:8080/ # Your previous configured backend app URL.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start frontend app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to http://your_server_ip:3000/signup&lt;/li&gt; &#xA; &lt;li&gt;Create an user and login with it.&lt;/li&gt; &#xA; &lt;li&gt;On the sidebard, go to &lt;em&gt;Connections&lt;/em&gt; page and create your first WhatsApp connection.&lt;/li&gt; &#xA; &lt;li&gt;Wait for QR CODE button to appear, click it and read qr code.&lt;/li&gt; &#xA; &lt;li&gt;Done. Every message received by your synced WhatsApp number will appear in Tickets List.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic production deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Using Ubuntu 20.04 VPS&lt;/h3&gt; &#xA;&lt;p&gt;All instructions below assumes you are NOT running as root, since it will give an error in puppeteer. So let&#39;s start creating a new user and granting sudo privileges to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adduser deploy&#xA;usermod -aG sudo deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can login with this new user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll need two subdomains forwarding to yours VPS ip to follow these instructions. We&#39;ll use &lt;code&gt;myapp.mydomain.com&lt;/code&gt; to frontend and &lt;code&gt;api.mydomain.com&lt;/code&gt; to backend in the following example.&lt;/p&gt; &#xA;&lt;p&gt;Update all system packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install node, and confirm node command is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -&#xA;sudo apt-get install -y nodejs&#xA;node -v&#xA;npm -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install docker and add you user to docker group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install apt-transport-https ca-certificates curl software-properties-common&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&#xA;sudo add-apt-repository &#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&#34;&#xA;sudo apt update&#xA;sudo apt install docker-ce&#xA;sudo systemctl status docker&#xA;sudo usermod -aG docker ${USER}&#xA;su - ${USER}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create Mysql Database using docker: &lt;em&gt;Note&lt;/em&gt;: change MYSQL_DATABASE, MYSQL_PASSWORD, MYSQL_USER and MYSQL_ROOT_PASSWORD.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name whaticketdb -e MYSQL_ROOT_PASSWORD=strongpassword -e MYSQL_DATABASE=whaticket -e MYSQL_USER=whaticket -e MYSQL_PASSWORD=whaticket --restart always -p 3306:3306 -d mariadb:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_bin&#xA;&#xA;# Or run using `docker-compose` as below&#xA;# Before copy .env.example to .env first and set the variables in the file.&#xA;docker-compose up -d mysql&#xA;&#xA;# To administer this mysql database easily using phpmyadmin. &#xA;# It will run by default on port 9000, but can be changed in .env using `PMA_PORT`&#xA;docker-compose -f docker-compose.phpmyadmin.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~&#xA;git clone https://github.com/canove/whaticket whaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create backend .env file and fill with details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp whaticket/backend/.env.example whaticket/backend/.env&#xA;nano whaticket/backend/.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NODE_ENV=&#xA;BACKEND_URL=https://api.mydomain.com      #USE HTTPS HERE, WE WILL ADD SSL LATTER&#xA;FRONTEND_URL=https://myapp.mydomain.com   #USE HTTPS HERE, WE WILL ADD SSL LATTER, CORS RELATED!&#xA;PROXY_PORT=443                            #USE NGINX REVERSE PROXY PORT HERE, WE WILL CONFIGURE IT LATTER&#xA;PORT=8080&#xA;&#xA;DB_HOST=localhost&#xA;DB_DIALECT=&#xA;DB_USER=&#xA;DB_PASS=&#xA;DB_NAME=&#xA;&#xA;JWT_SECRET=3123123213123&#xA;JWT_REFRESH_SECRET=75756756756&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install puppeteer dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y libxshmfence-dev libgbm-dev wget unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install backend dependencies, build app, run migrations and seeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd whaticket/backend&#xA;npm install&#xA;npm run build&#xA;npx sequelize db:migrate&#xA;npx sequelize db:seed:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start it with &lt;code&gt;npm start&lt;/code&gt;, you should see: &lt;code&gt;Server started on port...&lt;/code&gt; on console. Hit &lt;code&gt;CTRL + C&lt;/code&gt; to exit.&lt;/p&gt; &#xA;&lt;p&gt;Install pm2 &lt;strong&gt;with sudo&lt;/strong&gt;, and start backend with it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo npm install -g pm2&#xA;pm2 start dist/server.js --name whaticket-backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make pm2 auto start after reboot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pm2 startup ubuntu -u `YOUR_USERNAME`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the last line outputed from previus command and run it, its something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo env PATH=\$PATH:/usr/bin pm2 startup ubuntu -u YOUR_USERNAME --hp /home/YOUR_USERNAM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to frontend folder and install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ../frontend&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create frontend .env file and fill it ONLY with your backend address, it should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REACT_APP_BACKEND_URL = https://api.mydomain.com/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build frontend app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start frontend with pm2, and save pm2 process list to start automatically after reboot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pm2 start server.js --name whaticket-frontend&#xA;pm2 save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check if it&#39;s running, run &lt;code&gt;pm2 list&lt;/code&gt;, it should look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deploy@ubuntu-whats:~$ pm2 list&#xA;┌─────┬─────────────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐&#xA;│ id  │ name                    │ namespace   │ version │ mode    │ pid      │ uptime │ .    │ status    │ cpu      │ mem      │ user     │ watching │&#xA;├─────┼─────────────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤&#xA;│ 1   │ whaticket-frontend      │ default     │ 0.1.0   │ fork    │ 179249   │ 12D    │ 0    │ online    │ 0.3%     │ 50.2mb   │ deploy   │ disabled │&#xA;│ 6   │ whaticket-backend       │ default     │ 1.0.0   │ fork    │ 179253   │ 12D    │ 15   │ online    │ 0.3%     │ 118.5mb  │ deploy   │ disabled │&#xA;└─────┴─────────────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install nginx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove nginx default site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm /etc/nginx/sites-enabled/default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new nginx site to frontend app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/nginx/sites-available/whaticket-frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit and fill it with this information, changing &lt;code&gt;server_name&lt;/code&gt; to yours equivalent to &lt;code&gt;myapp.mydomain.com&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {&#xA;  server_name myapp.mydomain.com;&#xA;&#xA;  location / {&#xA;    proxy_pass http://127.0.0.1:3333;&#xA;    proxy_http_version 1.1;&#xA;    proxy_set_header Upgrade $http_upgrade;&#xA;    proxy_set_header Connection &#39;upgrade&#39;;&#xA;    proxy_set_header Host $host;&#xA;    proxy_set_header X-Real-IP $remote_addr;&#xA;    proxy_set_header X-Forwarded-Proto $scheme;&#xA;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;    proxy_cache_bypass $http_upgrade;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create another one to backend api, changing &lt;code&gt;server_name&lt;/code&gt; to yours equivalent to &lt;code&gt;api.mydomain.com&lt;/code&gt;, and &lt;code&gt;proxy_pass&lt;/code&gt; to your localhost backend node server URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp /etc/nginx/sites-available/whaticket-frontend /etc/nginx/sites-available/whaticket-backend&#xA;sudo nano /etc/nginx/sites-available/whaticket-backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {&#xA;  server_name api.mydomain.com;&#xA;&#xA;  location / {&#xA;    proxy_pass http://127.0.0.1:8080;&#xA;    ......&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a symbolic links to enable nginx sites:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /etc/nginx/sites-available/whaticket-frontend /etc/nginx/sites-enabled&#xA;sudo ln -s /etc/nginx/sites-available/whaticket-backend /etc/nginx/sites-enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, nginx limit body size to 1MB, which isn&#39;t enough for some media uploads. Lets change it to 20MB, adding a new line to config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/nginx/nginx.conf&#xA;...&#xA;http {&#xA;    ...&#xA;    client_max_body_size 20M; # HANDLE BIGGER UPLOADS&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test nginx configuration and restart server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nginx -t&#xA;sudo service nginx restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, enable SSL (https) on your sites to use all app features like notifications and sending audio messages. An easy way to this is using Certbot:&lt;/p&gt; &#xA;&lt;p&gt;Install certbot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install --classic certbot&#xA;sudo apt update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable SSL on nginx (Fill / Accept all information required):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo certbot --nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using docker and docker-compose&lt;/h3&gt; &#xA;&lt;p&gt;To run WhaTicket using docker you must perform the following steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now it will be necessary to configure the .env using its information, the variables are the same as those mentioned in the deployment using ubuntu, with the exception of mysql settings that were not in the .env.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# MYSQL&#xA;MYSQL_ENGINE=                           # default: mariadb&#xA;MYSQL_VERSION=                          # default: 10.6&#xA;MYSQL_ROOT_PASSWORD=strongpassword      # change it please&#xA;MYSQL_DATABASE=whaticket&#xA;MYSQL_PORT=3306                         # default: 3306; Use this port to expose mysql server&#xA;TZ=America/Fortaleza                    # default: America/Fortaleza; Timezone for mysql&#xA;&#xA;# BACKEND&#xA;BACKEND_PORT=                           # default: 8080; but access by host not use this port&#xA;BACKEND_SERVER_NAME=api.mydomain.com&#xA;BACKEND_URL=https://api.mydomain.com&#xA;PROXY_PORT=443&#xA;JWT_SECRET=3123123213123                # change it please&#xA;JWT_REFRESH_SECRET=75756756756          # change it please&#xA;&#xA;# FRONTEND&#xA;FRONTEND_PORT=80                        # default: 3000; Use port 80 to expose in production&#xA;FRONTEND_SSL_PORT=443                   # default: 3001; Use port 443 to expose in production&#xA;FRONTEND_SERVER_NAME=myapp.mydomain.com&#xA;FRONTEND_URL=https://myapp.mydomain.com&#xA;&#xA;# BROWSERLESS&#xA;MAX_CONCURRENT_SESSIONS=                # default: 1; Use only if using browserless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After defining the variables, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the &lt;code&gt;first&lt;/code&gt; run it will be necessary to seed the database tables using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec backend npx sequelize db:seed:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SSL Certificate&lt;/h4&gt; &#xA;&lt;p&gt;To deploy the ssl certificate, add it to the &lt;code&gt;ssl/certs&lt;/code&gt; folder. Inside it there should be a &lt;code&gt;backend&lt;/code&gt; and a &lt;code&gt;frontend&lt;/code&gt; folder, and each of them should contain the files &lt;code&gt;fullchain.pem&lt;/code&gt; and &lt;code&gt;privkey.pem&lt;/code&gt;, as in the structure below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.&#xA;├── certs&#xA;│&amp;nbsp;&amp;nbsp; ├── backend&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── fullchain.pem&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── privkey.pem&#xA;│&amp;nbsp;&amp;nbsp; └── frontend&#xA;│&amp;nbsp;&amp;nbsp;     ├── fullchain.pem&#xA;│&amp;nbsp;&amp;nbsp;     └── privkey.pem&#xA;└── www&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate the certificate files use &lt;code&gt;certbot&lt;/code&gt; which can be installed using snap, I used the following command:&lt;/p&gt; &#xA;&lt;p&gt;Note: The frontend container that runs nginx is already prepared to receive the request made by certboot to validate the certificate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# BACKEND&#xA;certbot certonly --cert-name backend --webroot --webroot-path ./ssl/www/ -d api.mydomain.com&#xA;&#xA;# FRONTEND&#xA;certbot certonly --cert-name frontend --webroot --webroot-path ./ssl/www/ -d myapp.mydomain.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Access Data&lt;/h2&gt; &#xA;&lt;p&gt;User: &lt;a href=&#34;mailto:admin@whaticket.com&#34;&gt;admin@whaticket.com&lt;/a&gt; Password: admin&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;WhaTicket is a working in progress and we are adding new features frequently. To update your old installation and get all the new features, you can use a bash script like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Always check the .env.example and adjust your .env file before upgrading, since some new variable may be added.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano updateWhaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;echo &#34;Updating Whaticket, please wait.&#34;&#xA;&#xA;cd ~&#xA;cd whaticket&#xA;git pull&#xA;cd backend&#xA;npm install&#xA;rm -rf dist&#xA;npm run build&#xA;npx sequelize db:migrate&#xA;npx sequelize db:seed&#xA;cd ../frontend&#xA;npm install&#xA;rm -rf build&#xA;npm run build&#xA;pm2 restart all&#xA;&#xA;echo &#34;Update finished. Enjoy!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make it executable and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x updateWhaticket&#xA;./updateWhaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project helps you and you want to help keep it going? Buy me a coffee:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/canove&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 61px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Para doações em BRL, utilize o Paypal:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?business=VWW3BHW4AWHUY&amp;amp;item_name=Desenvolvimento+de+Software&amp;amp;currency_code=BRL&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any help and suggestions will be apreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I just started leaning Javascript a few months ago and this is my first project. It may have security issues and many bugs. I recommend using it only on local network.&lt;/p&gt; &#xA;&lt;p&gt;This project is not affiliated, associated, authorized, endorsed by, or in any way officially connected with WhatsApp or any of its subsidiaries or its affiliates. The official WhatsApp website can be found at &lt;a href=&#34;https://whatsapp.com&#34;&gt;https://whatsapp.com&lt;/a&gt;. &#34;WhatsApp&#34; as well as related names, marks, emblems and images are registered trademarks of their respective owners.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>scutan90/DeepLearning-500-questions</title>
    <updated>2024-10-20T01:39:55Z</updated>
    <id>tag:github.com,2024-10-20:/scutan90/DeepLearning-500-questions</id>
    <link href="https://github.com/scutan90/DeepLearning-500-questions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;深度学习500问，以问答形式对常用的概率知识、线性代数、机器学习、深度学习、计算机视觉等热点问题进行阐述，以帮助自己及有需要的读者。 全书分为18个章节，50余万字。由于水平有限，书中不妥之处恳请广大读者批评指正。 未完待续............ 如有意合作，联系scutjy2015@163.com 版权所有，违权必究 Tan 2018.06&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;京东售卖链接：&lt;a href=&#34;https://item.jd.com/12785031.html&#34;&gt;https://item.jd.com/12785031.html&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;京东商城100多家书店有现货。&lt;/h1&gt; &#xA;&lt;h2&gt;深度学习500问——AI工程师面试宝典(博文视点出品)，谈继勇 主编，郭子钊，李剑，佃松宜 副主编 著&lt;/h2&gt; &#xA;&lt;h1&gt;内容简介&lt;/h1&gt; &#xA;&lt;p&gt;本书系统地描述了深度学习的基本理论算法及应用。全书共14章，第1-3章论述了数学基础、机器学习基础和深度学习基础；第4-7章介绍了一些经典网络及计算机视觉领域中常用的CNN、RNN、GAN等网络结构技术；第8-9章介绍了深度学习在计算机视觉领域的目标检测及图像分割两大应用；第10-14章介绍了计算机视觉领域主要的优化方法及思路等，包括迁移学习、网络架构及训练、网络优化技巧、超参数调整及模型的压缩和加速等。本书凝聚了众多一线科研人员及工程师的经验，旨在培养读者发现问题、解决问题、扩展问题的能力。&lt;/p&gt; &#xA;&lt;p&gt;本书内容取材于编者在日常学习过程中总结的知识点及各大公司常见的笔试、面试题。本书可为高等院校计算机科学、信息科学、人工智能、控制科学与工程、电子科学与技术等领域的研究及教学人员提供参考，也可为相关专业本科生及研究生提供思考方向，还可为深度学习及计算机视觉领域的初、中级研究人员和工程技术人员提供参考，尤其适合需要查漏补缺的应聘者及提供相关岗位的面试官阅读。&lt;/p&gt; &#xA;&lt;h1&gt;作者简介&lt;/h1&gt; &#xA;&lt;p&gt;谈继勇 主编&lt;/p&gt; &#xA;&lt;p&gt;南方科技大学和哈尔滨工业大学联合培养博士（在读），现任瀚维智能医疗技术总监，深圳工信局专家库专家，兼任南方科技大学、四川大学研究生企业导师，南方科技大学和瀚维智能医疗联合实验室副主任，北京探工所特聘技术专家，曾先后在中科院信工所、香港中文大学（深圳）、FOXCONN机器人与人工智能实验室、顺丰科技等单位任职。主要专注于智能感知与控制、实时智能与计算机视觉方向的研究，主持/主研国家自然科学基金、省重点研发计划、深圳战略性新兴产业计划等项目20余项，发表SCI/EI论文20余篇，申请发明专利40余项，获全国发明金奖。&lt;/p&gt; &#xA;&lt;p&gt;郭子钊 副主编&lt;/p&gt; &#xA;&lt;p&gt;四川大学计算机科学专业博士，硕士毕业于四川大学自动化系，主要从事AI芯片、深度学习、行为检测识别、人脸检测识别等相关研究工作。&lt;/p&gt; &#xA;&lt;p&gt;李剑 副主编&lt;/p&gt; &#xA;&lt;p&gt;同济大学计算机科学专业博士，浙江农林大学副教授、硕士生导师，主要从事推荐系统、排序学习、凸优化等机器学习领域的科研和教学工作，发表SCI论文10余篇，曾获浙江省科技进步二等奖等多项省部级奖项。&lt;/p&gt; &#xA;&lt;p&gt;佃松宜 副主编&lt;/p&gt; &#xA;&lt;p&gt;日本东北大学博士，四川大学电气工程学院教授、自动化系系主任，四川省信息与自动化技术重点实验室主任。主要专注于先进控制理论与人工智能算法研究、嵌入式计算与实时智能系统的研究与开发、机器人与智能装备的智能感知与控制技术的研究、工业测控与智能物联的研究。近5年来主持包括国家重点研发计划、基金、国网总部项目等各类科研项目近30项，累计总经费近2200万元；发表论文100多篇，其中SCI/EI检索近40篇，ESI高引论文1篇。参与编撰专著3部（其中英文专著1部），参编国家九五规划教材1部。&lt;/p&gt; &#xA;&lt;p&gt;王晋东 特邀编委&lt;/p&gt; &#xA;&lt;p&gt;中科院计算所博士，微软亚洲研究院机器学习研究员，主要从事迁移学习和机器学习方向的研究工作，在IJCAI、CVPR、ICDM、UbiComp、ACMMM、PERCOM、IJCNN、PRICAI、IEEE TNNLS、NEUNET、PRL、PMCJ、IMWUT、IJMLC、ICME、ACM TIST等国际权威期刊和会议上发表论文20余篇，多次获得“最佳论文”奖。作品有《迁移学习简明手册》等。&lt;/p&gt; &#xA;&lt;p&gt;王超锋&lt;/p&gt; &#xA;&lt;p&gt;上海大学硕士，百度计算机视觉算法工程师，主研图像处理，深度学习等方向。曾多次在国内外各类知名计算机视觉挑战赛中获得优异成绩。&lt;/p&gt; &#xA;&lt;p&gt;郭晓锋&lt;/p&gt; &#xA;&lt;p&gt;中国科学院硕士，爱奇艺算法工程师，主要从事图像处理、深度学习等方向的研究，曾获“2017华为软件精英挑战赛”复赛第6名。&lt;/p&gt; &#xA;&lt;p&gt;黄伟&lt;/p&gt; &#xA;&lt;p&gt;华南理工大学硕士，顺丰科技机器人算法工程师，主要从事计算机视觉和自然语言处理方向的研究。曾在相关领域国际期刊、会议上发表论文，并在相关竞赛中获得优异成绩。&lt;/p&gt; &#xA;&lt;p&gt;陈方杰（Amusi）&lt;/p&gt; &#xA;&lt;p&gt;上海大学硕士，CVer（计算机视觉知识分享和学习交流平台）创始人。&lt;/p&gt; &#xA;&lt;p&gt;李元伟&lt;/p&gt; &#xA;&lt;p&gt;国防科技大学硕士，深圳瀚维智能医疗科技公司高级算法工程师，南方科技大学和瀚维智能医疗联合实验室委员，主要从事机器视觉、图像处理及深度学习方向的研究工作，参编普通高等教育十三五规划教材《图像通信基础》，在IEEE TCSVT、COGN COMPUT等发表学术论文多篇，曾获湖南省/全军优秀硕士论文。&lt;/p&gt; &#xA;&lt;p&gt;陈琳&lt;/p&gt; &#xA;&lt;p&gt;北京航空航天大学博士（在读），研究方向为无人机智能控制与决策、仿生智能计算。&lt;/p&gt; &#xA;&lt;h1&gt;目录&lt;/h1&gt; &#xA;&lt;p&gt;第1章 数学基础 1&lt;/p&gt; &#xA;&lt;p&gt;1.1 向量和矩阵 1&lt;/p&gt; &#xA;&lt;p&gt;1.1.1 标量、向量、矩阵和张量 1&lt;/p&gt; &#xA;&lt;p&gt;1.1.2 张量与矩阵的区别 2&lt;/p&gt; &#xA;&lt;p&gt;1.1.3 矩阵和向量相乘的结果 2&lt;/p&gt; &#xA;&lt;p&gt;1.1.4 向量和矩阵的范数归纳 2&lt;/p&gt; &#xA;&lt;p&gt;1.1.5 判断一个矩阵是否为正定矩阵 4&lt;/p&gt; &#xA;&lt;p&gt;1.2 导数和偏导数 5&lt;/p&gt; &#xA;&lt;p&gt;1.2.1 导数偏导计算 5&lt;/p&gt; &#xA;&lt;p&gt;1.2.2 导数和偏导数的区别 6&lt;/p&gt; &#xA;&lt;p&gt;1.3 特征值和特征向量 6&lt;/p&gt; &#xA;&lt;p&gt;1.3.1 特征值分解 6&lt;/p&gt; &#xA;&lt;p&gt;1.3.2 奇异值和特征值的关系 6&lt;/p&gt; &#xA;&lt;p&gt;1.4 概率分布与随机变量 7&lt;/p&gt; &#xA;&lt;p&gt;1.4.1 机器学习为什么要使用概率 7&lt;/p&gt; &#xA;&lt;p&gt;1.4.2 变量与随机变量的区别 7&lt;/p&gt; &#xA;&lt;p&gt;1.4.3 随机变量与概率分布的联系 8&lt;/p&gt; &#xA;&lt;p&gt;1.4.4 离散型随机变量和概率质量函数 8&lt;/p&gt; &#xA;&lt;p&gt;1.4.5 连续型随机变量和概率密度函数 8&lt;/p&gt; &#xA;&lt;p&gt;1.4.6 举例理解条件概率 9&lt;/p&gt; &#xA;&lt;p&gt;1.4.7 联合概率与边缘概率的区别和联系 9&lt;/p&gt; &#xA;&lt;p&gt;1.4.8 条件概率的链式法则 10&lt;/p&gt; &#xA;&lt;p&gt;1.4.9 独立性和条件独立性 10&lt;/p&gt; &#xA;&lt;p&gt;1.5 常见概率分布 11&lt;/p&gt; &#xA;&lt;p&gt;1.5.1 伯努利分布 11&lt;/p&gt; &#xA;&lt;p&gt;1.5.2 高斯分布 11&lt;/p&gt; &#xA;&lt;p&gt;1.5.3 何时采用正态分布 12&lt;/p&gt; &#xA;&lt;p&gt;1.5.4 指数分布 12&lt;/p&gt; &#xA;&lt;p&gt;1.5.5 Laplace分布 13&lt;/p&gt; &#xA;&lt;p&gt;1.5.6 Dirac分布和经验分布 13&lt;/p&gt; &#xA;&lt;p&gt;1.6 期望、方差、协方差、相关系数 13&lt;/p&gt; &#xA;&lt;p&gt;1.6.1 期望 13&lt;/p&gt; &#xA;&lt;p&gt;1.6.2 方差 14&lt;/p&gt; &#xA;&lt;p&gt;1.6.3 协方差 14&lt;/p&gt; &#xA;&lt;p&gt;1.6.4 相关系数 15&lt;/p&gt; &#xA;&lt;p&gt;第2章 机器学习基础 16&lt;/p&gt; &#xA;&lt;p&gt;2.1 基本概念 16&lt;/p&gt; &#xA;&lt;p&gt;2.1.1 大话机器学习本质 16&lt;/p&gt; &#xA;&lt;p&gt;2.1.2 什么是神经网络 16&lt;/p&gt; &#xA;&lt;p&gt;2.1.3 各种常见算法图示 17&lt;/p&gt; &#xA;&lt;p&gt;2.1.4 计算图的导数计算 17&lt;/p&gt; &#xA;&lt;p&gt;2.1.5 理解局部最优与全局最优 18&lt;/p&gt; &#xA;&lt;p&gt;2.1.6 大数据与深度学习之间的关系 19&lt;/p&gt; &#xA;&lt;p&gt;2.2 机器学习的学习方式 20&lt;/p&gt; &#xA;&lt;p&gt;2.2.1 监督学习 20&lt;/p&gt; &#xA;&lt;p&gt;2.2.2 非监督学习 20&lt;/p&gt; &#xA;&lt;p&gt;2.2.3 半监督学习 20&lt;/p&gt; &#xA;&lt;p&gt;2.2.4 弱监督学习 20&lt;/p&gt; &#xA;&lt;p&gt;2.2.5 监督学习模型的搭建步骤 21&lt;/p&gt; &#xA;&lt;p&gt;2.3 分类算法 22&lt;/p&gt; &#xA;&lt;p&gt;2.3.1 常用分类算法的优缺点 22&lt;/p&gt; &#xA;&lt;p&gt;2.3.2 分类算法的评估方法 23&lt;/p&gt; &#xA;&lt;p&gt;2.3.3 正确率能否很好地评估分类算法 25&lt;/p&gt; &#xA;&lt;p&gt;2.3.4 什么样的分类器是最好的 26&lt;/p&gt; &#xA;&lt;p&gt;2.4 逻辑回归 26&lt;/p&gt; &#xA;&lt;p&gt;2.4.1 回归的种类 26&lt;/p&gt; &#xA;&lt;p&gt;2.4.2 逻辑回归适用性 27&lt;/p&gt; &#xA;&lt;p&gt;2.4.3 逻辑回归与朴素贝叶斯的区别 27&lt;/p&gt; &#xA;&lt;p&gt;2.4.4 线性回归与逻辑回归的区别 27&lt;/p&gt; &#xA;&lt;p&gt;2.5 代价函数 28&lt;/p&gt; &#xA;&lt;p&gt;2.5.1 为什么需要代价函数 28&lt;/p&gt; &#xA;&lt;p&gt;2.5.2 代价函数作用原理 28&lt;/p&gt; &#xA;&lt;p&gt;2.5.3 常见代价函数 30&lt;/p&gt; &#xA;&lt;p&gt;2.5.4 为什么代价函数要非负 31&lt;/p&gt; &#xA;&lt;p&gt;2.5.5 为什么用交叉熵代替二次代价函数 31&lt;/p&gt; &#xA;&lt;p&gt;2.6 损失函数 32&lt;/p&gt; &#xA;&lt;p&gt;2.6.1 什么是损失函数 32&lt;/p&gt; &#xA;&lt;p&gt;2.6.2 常见的损失函数 32&lt;/p&gt; &#xA;&lt;p&gt;2.6.3 逻辑回归为什么使用对数损失函数 34&lt;/p&gt; &#xA;&lt;p&gt;2.6.4 对数损失函数如何度量损失 34&lt;/p&gt; &#xA;&lt;p&gt;2.7 梯度下降法 35&lt;/p&gt; &#xA;&lt;p&gt;2.7.1 梯度下降法的作用 36&lt;/p&gt; &#xA;&lt;p&gt;2.7.2 梯度下降法的直观理解 36&lt;/p&gt; &#xA;&lt;p&gt;2.7.3 梯度下降法算法描述 37&lt;/p&gt; &#xA;&lt;p&gt;2.7.4 梯度下降法的缺点 38&lt;/p&gt; &#xA;&lt;p&gt;2.7.5 如何对梯度下降法进行调优 38&lt;/p&gt; &#xA;&lt;p&gt;2.7.6 随机梯度下降和批量梯度下降的区别 38&lt;/p&gt; &#xA;&lt;p&gt;2.7.7 各种梯度下降法性能比较 40&lt;/p&gt; &#xA;&lt;p&gt;2.8 线性判别分析 40&lt;/p&gt; &#xA;&lt;p&gt;2.8.1 LDA思想总结 40&lt;/p&gt; &#xA;&lt;p&gt;2.8.2 图解LDA核心思想 41&lt;/p&gt; &#xA;&lt;p&gt;2.8.3 二类LDA算法原理 41&lt;/p&gt; &#xA;&lt;p&gt;2.8.4 LDA算法流程总结 42&lt;/p&gt; &#xA;&lt;p&gt;2.8.5 LDA和PCA的异同 43&lt;/p&gt; &#xA;&lt;p&gt;2.8.6 LDA的优缺点 43&lt;/p&gt; &#xA;&lt;p&gt;2.9 主成分分析 43&lt;/p&gt; &#xA;&lt;p&gt;2.9.1 图解PCA核心思想 43&lt;/p&gt; &#xA;&lt;p&gt;2.9.2 PCA算法推理 44&lt;/p&gt; &#xA;&lt;p&gt;2.9.3 PCA算法流程总结 45&lt;/p&gt; &#xA;&lt;p&gt;2.9.4 PCA思想总结 46&lt;/p&gt; &#xA;&lt;p&gt;2.9.5 PCA算法的优缺点 46&lt;/p&gt; &#xA;&lt;p&gt;2.9.6 降维的必要性及目的 46&lt;/p&gt; &#xA;&lt;p&gt;2.9.7 KPCA与PCA的区别 47&lt;/p&gt; &#xA;&lt;p&gt;2.10 模型评估 47&lt;/p&gt; &#xA;&lt;p&gt;2.10.1 模型评估常用方法 48&lt;/p&gt; &#xA;&lt;p&gt;2.10.2 误差、偏差和方差的区别和联系 48&lt;/p&gt; &#xA;&lt;p&gt;2.10.3 为什么使用标准差 49&lt;/p&gt; &#xA;&lt;p&gt;2.10.4 经验误差与泛化误差 50&lt;/p&gt; &#xA;&lt;p&gt;2.10.5 图解欠拟合与过拟合 50&lt;/p&gt; &#xA;&lt;p&gt;2.10.6 如何解决欠拟合与过拟合 52&lt;/p&gt; &#xA;&lt;p&gt;2.10.7 交叉验证的主要作用 52&lt;/p&gt; &#xA;&lt;p&gt;2.10.8 理解K折交叉验证 53&lt;/p&gt; &#xA;&lt;p&gt;2.10.9 理解混淆矩阵 53&lt;/p&gt; &#xA;&lt;p&gt;2.10.10 理解查准率与查全率 53&lt;/p&gt; &#xA;&lt;p&gt;2.10.11 理解ROC与AUC 54&lt;/p&gt; &#xA;&lt;p&gt;2.10.12 如何绘制ROC曲线 55&lt;/p&gt; &#xA;&lt;p&gt;2.10.13 如何计算TPR和FPR 56&lt;/p&gt; &#xA;&lt;p&gt;2.10.14 如何计算AUC 58&lt;/p&gt; &#xA;&lt;p&gt;2.10.15 直观理解AUC 58&lt;/p&gt; &#xA;&lt;p&gt;2.10.16 ROC评估分类器 60&lt;/p&gt; &#xA;&lt;p&gt;2.10.17 代价敏感错误率与代价曲线 60&lt;/p&gt; &#xA;&lt;p&gt;2.10.18 比较检验方法 61&lt;/p&gt; &#xA;&lt;p&gt;2.11 决策树 61&lt;/p&gt; &#xA;&lt;p&gt;2.11.1 决策树的基本原理 62&lt;/p&gt; &#xA;&lt;p&gt;2.11.2 决策树的生成过程 62&lt;/p&gt; &#xA;&lt;p&gt;2.11.3 决策树学习基本算法步骤 62&lt;/p&gt; &#xA;&lt;p&gt;2.11.4 决策树算法的优缺点 63&lt;/p&gt; &#xA;&lt;p&gt;2.11.5 决策树和熵的联系 63&lt;/p&gt; &#xA;&lt;p&gt;2.11.6 熵的概念及定义 63&lt;/p&gt; &#xA;&lt;p&gt;2.11.7 理解信息增益 64&lt;/p&gt; &#xA;&lt;p&gt;2.11.8 决策树中熵、条件熵和信息增益的联系 64&lt;/p&gt; &#xA;&lt;p&gt;2.11.9 决策树算法中剪枝的作用及策略 65&lt;/p&gt; &#xA;&lt;p&gt;2.12 支持向量机（SVM） 65&lt;/p&gt; &#xA;&lt;p&gt;2.12.1 什么是SVM 65&lt;/p&gt; &#xA;&lt;p&gt;2.12.2 SVM能解决的问题 66&lt;/p&gt; &#xA;&lt;p&gt;2.12.3 核函数特点及其作用 67&lt;/p&gt; &#xA;&lt;p&gt;2.12.4 SVM为什么引入对偶问题 67&lt;/p&gt; &#xA;&lt;p&gt;2.12.5 如何理解SVM中的对偶问题 67&lt;/p&gt; &#xA;&lt;p&gt;2.12.6 常见的核函数 69&lt;/p&gt; &#xA;&lt;p&gt;2.12.7 SVM的主要特点 69&lt;/p&gt; &#xA;&lt;p&gt;2.12.8 SVM的主要缺点 70&lt;/p&gt; &#xA;&lt;p&gt;2.12.9 逻辑回归与SVM的异同 70&lt;/p&gt; &#xA;&lt;p&gt;2.13 贝叶斯分类器 72&lt;/p&gt; &#xA;&lt;p&gt;2.13.1 贝叶斯分类器的基本原理 72&lt;/p&gt; &#xA;&lt;p&gt;2.13.2 朴素贝叶斯分类器 72&lt;/p&gt; &#xA;&lt;p&gt;2.13.3 举例理解朴素贝叶斯分类器 73&lt;/p&gt; &#xA;&lt;p&gt;2.13.4 半朴素贝叶斯分类器 75&lt;/p&gt; &#xA;&lt;p&gt;2.13.5 极大似然估计和贝叶斯估计的联系与区别 75&lt;/p&gt; &#xA;&lt;p&gt;2.13.6 极大似然估计原理 76&lt;/p&gt; &#xA;&lt;p&gt;2.13.7 图解极大似然估计 76&lt;/p&gt; &#xA;&lt;p&gt;2.14 EM算法 77&lt;/p&gt; &#xA;&lt;p&gt;2.14.1 EM算法的基本思想 77&lt;/p&gt; &#xA;&lt;p&gt;2.14.2 EM算法推导 77&lt;/p&gt; &#xA;&lt;p&gt;2.14.3 图解EM算法 78&lt;/p&gt; &#xA;&lt;p&gt;2.14.4 EM算法流程 79&lt;/p&gt; &#xA;&lt;p&gt;2.15 降维和聚类 79&lt;/p&gt; &#xA;&lt;p&gt;2.15.1 图解为什么会产生维数灾难 79&lt;/p&gt; &#xA;&lt;p&gt;2.15.2 怎样避免维数灾难 83&lt;/p&gt; &#xA;&lt;p&gt;2.15.3 聚类和降维 83&lt;/p&gt; &#xA;&lt;p&gt;2.15.4 聚类算法优劣的衡量标准 84&lt;/p&gt; &#xA;&lt;p&gt;2.15.5 聚类和分类 85&lt;/p&gt; &#xA;&lt;p&gt;2.15.6 聚类算法的性能比较 85&lt;/p&gt; &#xA;&lt;p&gt;2.15.7 4种常用聚类方法比较 85&lt;/p&gt; &#xA;&lt;p&gt;第3章 深度学习基础 89&lt;/p&gt; &#xA;&lt;p&gt;3.1 基本概念 89&lt;/p&gt; &#xA;&lt;p&gt;3.1.1 神经网络的类型 89&lt;/p&gt; &#xA;&lt;p&gt;3.1.2 神经网络的常用模型结构 92&lt;/p&gt; &#xA;&lt;p&gt;3.1.3 深度学习和机器学习的区别与联系 93&lt;/p&gt; &#xA;&lt;p&gt;3.1.4 为什么使用深层表示 93&lt;/p&gt; &#xA;&lt;p&gt;3.1.5 深度学习架构分类 94&lt;/p&gt; &#xA;&lt;p&gt;3.1.6 如何选择深度学习开发平台 94&lt;/p&gt; &#xA;&lt;p&gt;3.2 神经网络计算 95&lt;/p&gt; &#xA;&lt;p&gt;3.2.1 前向传播和反向传播 95&lt;/p&gt; &#xA;&lt;p&gt;3.2.2 如何计算神经网络的输出 96&lt;/p&gt; &#xA;&lt;p&gt;3.2.3 如何计算卷积神经网络输出值 97&lt;/p&gt; &#xA;&lt;p&gt;3.2.4 如何计算池化层输出值 100&lt;/p&gt; &#xA;&lt;p&gt;3.2.5 反向传播实例 101&lt;/p&gt; &#xA;&lt;p&gt;3.2.6 神经网络更“深”的意义 104&lt;/p&gt; &#xA;&lt;p&gt;3.3 激活函数 104&lt;/p&gt; &#xA;&lt;p&gt;3.3.1 为什么需要激活函数 104&lt;/p&gt; &#xA;&lt;p&gt;3.3.2 为什么激活函数需要非线性函数 105&lt;/p&gt; &#xA;&lt;p&gt;3.3.3 常见的激活函数及其图像 105&lt;/p&gt; &#xA;&lt;p&gt;3.3.4 常见激活函数的导数计算 107&lt;/p&gt; &#xA;&lt;p&gt;3.3.5 激活函数有哪些性质 108&lt;/p&gt; &#xA;&lt;p&gt;3.3.6 如何选择激活函数 108&lt;/p&gt; &#xA;&lt;p&gt;3.3.7 为什么tanh收敛速度比sigmoid快 109&lt;/p&gt; &#xA;&lt;p&gt;3.3.8 Relu激活函数的优点 109&lt;/p&gt; &#xA;&lt;p&gt;3.3.9 理解Relu激活函数的稀疏激活性 109&lt;/p&gt; &#xA;&lt;p&gt;3.3.10 什么时候可以用线性激活函数 109&lt;/p&gt; &#xA;&lt;p&gt;3.3.11 softmax函数的定义及作用 110&lt;/p&gt; &#xA;&lt;p&gt;3.3.12 softmax函数如何应用于多分类 110&lt;/p&gt; &#xA;&lt;p&gt;3.4 BATCH SIZE 112&lt;/p&gt; &#xA;&lt;p&gt;3.4.1 为什么需要Batch Size 112&lt;/p&gt; &#xA;&lt;p&gt;3.4.2 如何选择Batch Size值 112&lt;/p&gt; &#xA;&lt;p&gt;3.4.3 调节Batch Size对训练效果的影响 113&lt;/p&gt; &#xA;&lt;p&gt;3.4.4 在合理范围内增大Batch Size的好处 113&lt;/p&gt; &#xA;&lt;p&gt;3.4.5 盲目增大Batch Size的坏处 114&lt;/p&gt; &#xA;&lt;p&gt;3.5 归一化 114&lt;/p&gt; &#xA;&lt;p&gt;3.5.1 理解归一化含义 114&lt;/p&gt; &#xA;&lt;p&gt;3.5.2 归一化和标准化的联系与区别 114&lt;/p&gt; &#xA;&lt;p&gt;3.5.3 为什么要归一化或标准化 115&lt;/p&gt; &#xA;&lt;p&gt;3.5.4 图解为什么要归一化 115&lt;/p&gt; &#xA;&lt;p&gt;3.5.5 为什么归一化能提高求最优解速度 115&lt;/p&gt; &#xA;&lt;p&gt;3.5.6 归一化有哪些类型 116&lt;/p&gt; &#xA;&lt;p&gt;3.5.7 局部响应归一化作用 116&lt;/p&gt; &#xA;&lt;p&gt;3.5.8 局部响应归一化原理 117&lt;/p&gt; &#xA;&lt;p&gt;3.5.9 什么是批归一化 118&lt;/p&gt; &#xA;&lt;p&gt;3.5.10 批归一化的优点 118&lt;/p&gt; &#xA;&lt;p&gt;3.5.11 批归一化算法流程 118&lt;/p&gt; &#xA;&lt;p&gt;3.5.12 批归一化和组归一化比较 119&lt;/p&gt; &#xA;&lt;p&gt;3.5.13 权重归一化和批归一化比较 119&lt;/p&gt; &#xA;&lt;p&gt;3.5.14 批归一化适用范围 120&lt;/p&gt; &#xA;&lt;p&gt;3.5.15 BN、LN、IN和GN的对比 120&lt;/p&gt; &#xA;&lt;p&gt;3.6 参数初始化 121&lt;/p&gt; &#xA;&lt;p&gt;3.6.1 参数初始化应满足的条件 121&lt;/p&gt; &#xA;&lt;p&gt;3.6.2 常用的几种初始化方式 121&lt;/p&gt; &#xA;&lt;p&gt;3.6.3 全0初始化带来的问题 121&lt;/p&gt; &#xA;&lt;p&gt;3.6.4 全都初始化为同样的值 122&lt;/p&gt; &#xA;&lt;p&gt;3.6.5 初始化为小的随机数 123&lt;/p&gt; &#xA;&lt;p&gt;3.6.6 用 校准方差 123&lt;/p&gt; &#xA;&lt;p&gt;3.7 预训练与微调 123&lt;/p&gt; &#xA;&lt;p&gt;3.7.1 什么是预训练和微调 123&lt;/p&gt; &#xA;&lt;p&gt;3.7.2 预训练和微调的作用 124&lt;/p&gt; &#xA;&lt;p&gt;3.7.3 预训练模型的复用 124&lt;/p&gt; &#xA;&lt;p&gt;3.7.4 预训练和迁移学习 125&lt;/p&gt; &#xA;&lt;p&gt;3.7.5 微调时网络参数是否更新 125&lt;/p&gt; &#xA;&lt;p&gt;3.7.6 微调模型的三种状态 125&lt;/p&gt; &#xA;&lt;p&gt;3.7.7 为什么深层神经网络难以训练 125&lt;/p&gt; &#xA;&lt;p&gt;3.8 超参数 127&lt;/p&gt; &#xA;&lt;p&gt;3.8.1 超参数有哪些 127&lt;/p&gt; &#xA;&lt;p&gt;3.8.2 参数和模型的关系 127&lt;/p&gt; &#xA;&lt;p&gt;3.8.3 参数和超参数的区别 127&lt;/p&gt; &#xA;&lt;p&gt;3.8.4 如何寻找超参数的最优值 128&lt;/p&gt; &#xA;&lt;p&gt;3.8.5 超参数搜索的一般过程 128&lt;/p&gt; &#xA;&lt;p&gt;3.9 学习率 129&lt;/p&gt; &#xA;&lt;p&gt;3.9.1 学习率的作用 129&lt;/p&gt; &#xA;&lt;p&gt;3.9.2 学习率衰减的常用参数 129&lt;/p&gt; &#xA;&lt;p&gt;3.9.3 常用的学习率衰减方法 129&lt;/p&gt; &#xA;&lt;p&gt;3.10 正则化 133&lt;/p&gt; &#xA;&lt;p&gt;3.10.1 为什么要正则化 133&lt;/p&gt; &#xA;&lt;p&gt;3.10.2 常见正则化方法 133&lt;/p&gt; &#xA;&lt;p&gt;3.10.3 图解L1和L2正则化 134&lt;/p&gt; &#xA;&lt;p&gt;3.10.4 Dropout具体工作流程 135&lt;/p&gt; &#xA;&lt;p&gt;3.10.5 为什么Dropout可以解决过拟合问题 137&lt;/p&gt; &#xA;&lt;p&gt;3.10.6 Dropout的缺点&lt;/p&gt;</summary>
  </entry>
</feed>