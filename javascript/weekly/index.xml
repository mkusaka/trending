<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-16T01:43:48Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebook/create-react-app</title>
    <updated>2022-10-16T01:43:48Z</updated>
    <id>tag:github.com,2022-10-16:/facebook/create-react-app</id>
    <link href="https://github.com/facebook/create-react-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Set up a modern web app by running one command.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Create React App &lt;a href=&#34;https://dev.azure.com/facebook/create-react-app/_build/latest?definitionId=1&amp;amp;branchName=main&#34;&gt;&lt;img src=&#34;https://dev.azure.com/facebook/create-react-app/_apis/build/status/facebook.create-react-app?branchName=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/facebook/create-react-app/raw/main/CONTRIBUTING.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-green.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;img alt=&#34;Logo&#34; align=&#34;right&#34; src=&#34;https://create-react-app.dev/img/logo.svg?sanitize=true&#34; width=&#34;20%&#34;&gt; &#xA;&lt;p&gt;Create React apps with no build configuration.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/create-react-app/main/#creating-an-app&#34;&gt;Creating an App&lt;/a&gt; – How to create a new app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://facebook.github.io/create-react-app/&#34;&gt;User Guide&lt;/a&gt; – How to develop apps bootstrapped with Create React App.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Create React App works on macOS, Windows, and Linux.&lt;br&gt; If something doesn’t work, please &lt;a href=&#34;https://github.com/facebook/create-react-app/issues/new&#34;&gt;file an issue&lt;/a&gt;.&lt;br&gt; If you have questions or need help, please ask in &lt;a href=&#34;https://github.com/facebook/create-react-app/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Overview&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-react-app my-app&#xA;cd my-app&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;ve previously installed &lt;code&gt;create-react-app&lt;/code&gt; globally via &lt;code&gt;npm install -g create-react-app&lt;/code&gt;, we recommend you uninstall the package using &lt;code&gt;npm uninstall -g create-react-app&lt;/code&gt; or &lt;code&gt;yarn global remove create-react-app&lt;/code&gt; to ensure that npx always uses the latest version.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(&lt;a href=&#34;https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b&#34;&gt;npx&lt;/a&gt; comes with npm 5.2+ and higher, see &lt;a href=&#34;https://gist.github.com/gaearon/4064d3c23a77c74a3614c498a8bb1c5f&#34;&gt;instructions for older npm versions&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then open &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; to see your app.&lt;br&gt; When you’re ready to deploy to production, create a minified bundle with &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/facebook/create-react-app@27b42ac7efa018f2541153ab30d63180f5fa39e0/screencast.svg?sanitize=true&#34; width=&#34;600&#34; alt=&#34;npm start&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Get Started Immediately&lt;/h3&gt; &#xA;&lt;p&gt;You &lt;strong&gt;don’t&lt;/strong&gt; need to install or configure tools like webpack or Babel.&lt;br&gt; They are preconfigured and hidden so that you can focus on the code.&lt;/p&gt; &#xA;&lt;p&gt;Create a project, and you’re good to go.&lt;/p&gt; &#xA;&lt;h2&gt;Creating an App&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;You’ll need to have Node 14.0.0 or later version on your local development machine&lt;/strong&gt; (but it’s not required on the server). We recommend using the latest LTS version. You can use &lt;a href=&#34;https://github.com/creationix/nvm#installation&#34;&gt;nvm&lt;/a&gt; (macOS/Linux) or &lt;a href=&#34;https://github.com/coreybutler/nvm-windows#node-version-manager-nvm-for-windows&#34;&gt;nvm-windows&lt;/a&gt; to switch Node versions between different projects.&lt;/p&gt; &#xA;&lt;p&gt;To create a new app, you may choose one of the following methods:&lt;/p&gt; &#xA;&lt;h3&gt;npx&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-react-app my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;(&lt;a href=&#34;https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b&#34;&gt;npx&lt;/a&gt; is a package runner tool that comes with npm 5.2+ and higher, see &lt;a href=&#34;https://gist.github.com/gaearon/4064d3c23a77c74a3614c498a8bb1c5f&#34;&gt;instructions for older npm versions&lt;/a&gt;)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;npm&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm init react-app my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;code&gt;npm init &amp;lt;initializer&amp;gt;&lt;/code&gt; is available in npm 6+&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Yarn&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn create react-app my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://yarnpkg.com/lang/en/docs/cli/create/&#34;&gt;&lt;code&gt;yarn create &amp;lt;starter-kit-package&amp;gt;&lt;/code&gt;&lt;/a&gt; is available in Yarn 0.25+&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;It will create a directory called &lt;code&gt;my-app&lt;/code&gt; inside the current folder.&lt;br&gt; Inside that directory, it will generate the initial project structure and install the transitive dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;my-app&#xA;├── README.md&#xA;├── node_modules&#xA;├── package.json&#xA;├── .gitignore&#xA;├── public&#xA;│   ├── favicon.ico&#xA;│   ├── index.html&#xA;│   └── manifest.json&#xA;└── src&#xA;    ├── App.css&#xA;    ├── App.js&#xA;    ├── App.test.js&#xA;    ├── index.css&#xA;    ├── index.js&#xA;    ├── logo.svg&#xA;    └── serviceWorker.js&#xA;    └── setupTests.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No configuration or complicated folder structures, only the files you need to build your app.&lt;br&gt; Once the installation is done, you can open your project folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd my-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside the newly created project, you can run some built-in commands:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;yarn start&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs the app in development mode.&lt;br&gt; Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view it in the browser.&lt;/p&gt; &#xA;&lt;p&gt;The page will automatically reload if you make changes to the code.&lt;br&gt; You will see the build errors and lint warnings in the console.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://cdn.jsdelivr.net/gh/marionebl/create-react-app@9f6282671c54f0874afd37a72f6689727b562498/screencast-error.svg?sanitize=true&#34; width=&#34;600&#34; alt=&#34;Build errors&#34;&gt; &lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm test&lt;/code&gt; or &lt;code&gt;yarn test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs the test watcher in an interactive mode.&lt;br&gt; By default, runs tests related to files changed since the last commit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://facebook.github.io/create-react-app/docs/running-tests&#34;&gt;Read more about testing.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run build&lt;/code&gt; or &lt;code&gt;yarn build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt; It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt; &#xA;&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Your app is ready to be deployed.&lt;/p&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;You can find detailed instructions on using Create React App and many tips in &lt;a href=&#34;https://facebook.github.io/create-react-app/&#34;&gt;its documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to Update to New Versions?&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/updating-to-new-releases&#34;&gt;User Guide&lt;/a&gt; for this and other information.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;One Dependency:&lt;/strong&gt; There is only one build dependency. It uses webpack, Babel, ESLint, and other amazing projects, but provides a cohesive curated experience on top of them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Configuration Required:&lt;/strong&gt; You don&#39;t need to configure anything. A reasonably good configuration of both development and production builds is handled for you so you can focus on writing code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Lock-In:&lt;/strong&gt; You can “eject” to a custom setup at any time. Run a single command, and all the configuration and build dependencies will be moved directly into your project, so you can pick up right where you left off.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What’s Included?&lt;/h2&gt; &#xA;&lt;p&gt;Your environment will have everything you need to build a modern single-page React app:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;React, JSX, ES6, TypeScript and Flow syntax support.&lt;/li&gt; &#xA; &lt;li&gt;Language extras beyond ES6 like the object spread operator.&lt;/li&gt; &#xA; &lt;li&gt;Autoprefixed CSS, so you don’t need &lt;code&gt;-webkit-&lt;/code&gt; or other prefixes.&lt;/li&gt; &#xA; &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting.&lt;/li&gt; &#xA; &lt;li&gt;A live development server that warns about common mistakes.&lt;/li&gt; &#xA; &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.&lt;/li&gt; &#xA; &lt;li&gt;An offline-first &lt;a href=&#34;https://developers.google.com/web/fundamentals/getting-started/primers/service-workers&#34;&gt;service worker&lt;/a&gt; and a &lt;a href=&#34;https://developers.google.com/web/fundamentals/engage-and-retain/web-app-manifest/&#34;&gt;web app manifest&lt;/a&gt;, meeting all the &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app&#34;&gt;Progressive Web App&lt;/a&gt; criteria. (&lt;em&gt;Note: Using the service worker is opt-in as of &lt;code&gt;react-scripts@2.0.0&lt;/code&gt; and higher&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Hassle-free updates for the above tools with a single dependency.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://github.com/nitishdayal/cra_closer_look&#34;&gt;this guide&lt;/a&gt; for an overview of how these tools fit together.&lt;/p&gt; &#xA;&lt;p&gt;The tradeoff is that &lt;strong&gt;these tools are preconfigured to work in a specific way&lt;/strong&gt;. If your project needs more customization, you can &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/available-scripts#npm-run-eject&#34;&gt;&#34;eject&#34;&lt;/a&gt; and customize it, but then you will need to maintain this configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Popular Alternatives&lt;/h2&gt; &#xA;&lt;p&gt;Create React App is a great fit for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Learning React&lt;/strong&gt; in a comfortable and feature-rich development environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Starting new single-page React applications.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Creating examples&lt;/strong&gt; with React for your libraries and components.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here are a few common cases where you might want to try something else:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to &lt;strong&gt;try React&lt;/strong&gt; without hundreds of transitive build tool dependencies, consider &lt;a href=&#34;https://reactjs.org/docs/getting-started.html#try-react&#34;&gt;using a single HTML file or an online sandbox instead&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you need to &lt;strong&gt;integrate React code with a server-side template framework&lt;/strong&gt; like Rails, Django or Symfony, or if you’re &lt;strong&gt;not building a single-page app&lt;/strong&gt;, consider using &lt;a href=&#34;https://github.com/insin/nwb&#34;&gt;nwb&lt;/a&gt;, or &lt;a href=&#34;https://neutrino.js.org/&#34;&gt;Neutrino&lt;/a&gt; which are more flexible. For Rails specifically, you can use &lt;a href=&#34;https://github.com/rails/webpacker&#34;&gt;Rails Webpacker&lt;/a&gt;. For Symfony, try &lt;a href=&#34;https://symfony.com/doc/current/frontend/encore/reactjs.html&#34;&gt;Symfony&#39;s webpack Encore&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you need to &lt;strong&gt;publish a React component&lt;/strong&gt;, &lt;a href=&#34;https://github.com/insin/nwb&#34;&gt;nwb&lt;/a&gt; can &lt;a href=&#34;https://github.com/insin/nwb#react-components-and-libraries&#34;&gt;also do this&lt;/a&gt;, as well as &lt;a href=&#34;https://neutrino.js.org/packages/react-components/&#34;&gt;Neutrino&#39;s react-components preset&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to do &lt;strong&gt;server rendering&lt;/strong&gt; with React and Node.js, check out &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; or &lt;a href=&#34;https://github.com/jaredpalmer/razzle&#34;&gt;Razzle&lt;/a&gt;. Create React App is agnostic of the backend, and only produces static HTML/JS/CSS bundles.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If your website is &lt;strong&gt;mostly static&lt;/strong&gt; (for example, a portfolio or a blog), consider using &lt;a href=&#34;https://www.gatsbyjs.org/&#34;&gt;Gatsby&lt;/a&gt; or &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt;. Unlike Create React App, Gatsby pre-renders the website into HTML at build time. Next.js supports both server rendering and pre-rendering.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Finally, if you need &lt;strong&gt;more customization&lt;/strong&gt;, check out &lt;a href=&#34;https://neutrino.js.org/&#34;&gt;Neutrino&lt;/a&gt; and its &lt;a href=&#34;https://neutrino.js.org/packages/react/&#34;&gt;React preset&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All of the above tools can work with little to no configuration.&lt;/p&gt; &#xA;&lt;p&gt;If you prefer configuring the build yourself, &lt;a href=&#34;https://reactjs.org/docs/add-react-to-a-website.html&#34;&gt;follow this guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;React Native&lt;/h2&gt; &#xA;&lt;p&gt;Looking for something similar, but for React Native?&lt;br&gt; Check out &lt;a href=&#34;https://github.com/expo/expo-cli&#34;&gt;Expo CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;d love to have your helping hand on &lt;code&gt;create-react-app&lt;/code&gt;! See &lt;a href=&#34;https://raw.githubusercontent.com/facebook/create-react-app/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for more information on what we&#39;re looking for and how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Create React App&lt;/h2&gt; &#xA;&lt;p&gt;Create React App is a community maintained project and all contributors are volunteers. If you&#39;d like to support the future development of Create React App then please consider donating to our &lt;a href=&#34;https://opencollective.com/create-react-app&#34;&gt;Open Collective&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who &lt;a href=&#34;https://raw.githubusercontent.com/facebook/create-react-app/main/CONTRIBUTING.md&#34;&gt;contribute&lt;/a&gt;.&lt;br&gt; &lt;a href=&#34;https://github.com/facebook/create-react-app/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/create-react-app/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; for hosting our documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;We are grateful to the authors of existing related projects for their ideas and collaboration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eanplatter&#34;&gt;@eanplatter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/insin&#34;&gt;@insin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mxstbr&#34;&gt;@mxstbr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Create React App is open source software &lt;a href=&#34;https://github.com/facebook/create-react-app/raw/main/LICENSE&#34;&gt;licensed as MIT&lt;/a&gt;. The Create React App logo is licensed under a &lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;Creative Commons Attribution 4.0 International license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tailwindlabs/tailwindcss</title>
    <updated>2022-10-16T01:43:48Z</updated>
    <id>tag:github.com,2022-10-16:/tailwindlabs/tailwindcss</id>
    <link href="https://github.com/tailwindlabs/tailwindcss" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A utility-first CSS framework for rapid UI development.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tailwindcss.com/#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tailwindlabs/tailwindcss/master/.github/logo-light.svg?sanitize=true&#34; alt=&#34;Tailwind CSS&#34; width=&#34;350&#34; height=&#34;70&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://tailwindcss.com/#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tailwindlabs/tailwindcss/master/.github/logo-dark.svg?sanitize=true&#34; alt=&#34;Tailwind CSS&#34; width=&#34;350&#34; height=&#34;70&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A utility-first CSS framework for rapidly building custom user interfaces. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tailwindlabs/tailwindcss/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/tailwindlabs/tailwindcss/Node.js%20CI&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/tailwindcss&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/tailwindcss.svg?sanitize=true&#34; alt=&#34;Total Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/tailwindcss.svg?sanitize=true&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/tailwindcss.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For full documentation, visit &lt;a href=&#34;https://tailwindcss.com/&#34;&gt;tailwindcss.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;For help, discussion about best practices, or any other conversation that would benefit from being searchable:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/discussions&#34;&gt;Discuss Tailwind CSS on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For casual chit-chat with others using the framework:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/7NF8GNe&#34;&gt;Join the Tailwind CSS Discord Server&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing to Tailwind CSS, please read our &lt;a href=&#34;https://github.com/tailwindcss/tailwindcss/raw/master/.github/CONTRIBUTING.md&#34;&gt;contributing docs&lt;/a&gt; &lt;strong&gt;before submitting a pull request&lt;/strong&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>axios/axios</title>
    <updated>2022-10-16T01:43:48Z</updated>
    <id>tag:github.com,2022-10-16:/axios/axios</id>
    <link href="https://github.com/axios/axios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;b&gt; &lt;a href=&#34;https://axios-http.com&#34;&gt;&lt;img src=&#34;https://axios-http.com/assets/logo.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;br&gt; &lt;/b&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Promise based HTTP client for the browser and node.js&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://axios-http.com/&#34;&gt;&lt;b&gt;Website&lt;/b&gt;&lt;/a&gt; • &lt;a href=&#34;https://axios-http.com/docs/intro&#34;&gt;&lt;b&gt;Documentation&lt;/b&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/axios.svg?style=flat-square&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cdnjs.com/libraries/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/cdnjs/v/axios.svg?style=flat-square&#34; alt=&#34;CDNJS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/axios/axios/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/axios/axios/ci?label=CI&amp;amp;logo=github&amp;amp;style=flat-square&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/axios/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&amp;amp;style=flat-square&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/mzabriskie/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square&#34; alt=&#34;code coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagephobia.now.sh/result?p=axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/dynamic/json?url=https://packagephobia.com/v2/api.json?p=axios&amp;amp;query=$.install.pretty&amp;amp;label=install%20size&amp;amp;style=flat-square&#34; alt=&#34;install size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/package/axios@latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/axios?style=flat-square&#34; alt=&#34;npm bundle size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npm-stat.com/charts.html?package=axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/axios.svg?style=flat-square&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/mzabriskie/axios&#34;&gt;&lt;img src=&#34;https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square&#34; alt=&#34;gitter chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/axios/axios&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/axios/axios/badges/users.svg?sanitize=true&#34; alt=&#34;code helpers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/npm/axios&#34;&gt;&lt;img src=&#34;https://snyk.io/test/npm/axios/badge.svg?sanitize=true&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#browser-support&#34;&gt;Browser Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#axios-api&#34;&gt;Axios API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#request-method-aliases&#34;&gt;Request method aliases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#concurrency-deprecated&#34;&gt;Concurrency 👎&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#creating-an-instance&#34;&gt;Creating an instance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#instance-methods&#34;&gt;Instance methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#request-config&#34;&gt;Request Config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#response-schema&#34;&gt;Response Schema&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#config-defaults&#34;&gt;Config Defaults&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#global-axios-defaults&#34;&gt;Global axios defaults&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#custom-instance-defaults&#34;&gt;Custom instance defaults&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#config-order-of-precedence&#34;&gt;Config order of precedence&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#interceptors&#34;&gt;Interceptors&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#multiple-interceptors&#34;&gt;Multiple Interceptors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#handling-errors&#34;&gt;Handling Errors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#cancellation&#34;&gt;Cancellation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#abortcontroller&#34;&gt;AbortController&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#canceltoken-deprecated&#34;&gt;CancelToken 👎&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#using-applicationx-www-form-urlencoded-format&#34;&gt;Using application/x-www-form-urlencoded format&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#urlsearchparams&#34;&gt;URLSearchParams&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#query-string-older-browsers&#34;&gt;Query string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-automatic-serialization-to-urlsearchparams&#34;&gt;🆕 Automatic serialization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#using-multipartform-data-format&#34;&gt;Using multipart/form-data format&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#formdata&#34;&gt;FormData&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-automatic-serialization-to-formdata&#34;&gt;🆕 Automatic serialization&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#files-posting&#34;&gt;Files Posting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-html-form-posting-browser&#34;&gt;HTML Form Posting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-progress-capturing&#34;&gt;🆕 Progress capturing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#-progress-capturing&#34;&gt;🆕 Rate limiting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#semver&#34;&gt;Semver&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#promises&#34;&gt;Promises&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest&#34;&gt;XMLHttpRequests&lt;/a&gt; from the browser&lt;/li&gt; &#xA; &lt;li&gt;Make &lt;a href=&#34;https://nodejs.org/api/http.html&#34;&gt;http&lt;/a&gt; requests from node.js&lt;/li&gt; &#xA; &lt;li&gt;Supports the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise&lt;/a&gt; API&lt;/li&gt; &#xA; &lt;li&gt;Intercept request and response&lt;/li&gt; &#xA; &lt;li&gt;Transform request and response data&lt;/li&gt; &#xA; &lt;li&gt;Cancel requests&lt;/li&gt; &#xA; &lt;li&gt;Automatic transforms for JSON data&lt;/li&gt; &#xA; &lt;li&gt;🆕 Automatic data object serialization to &lt;code&gt;multipart/form-data&lt;/code&gt; and &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; body encodings&lt;/li&gt; &#xA; &lt;li&gt;Client side support for protecting against &lt;a href=&#34;https://en.wikipedia.org/wiki/Cross-site_request_forgery&#34;&gt;XSRF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Browser Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/chrome/chrome_48x48.png&#34; alt=&#34;Chrome&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/firefox/firefox_48x48.png&#34; alt=&#34;Firefox&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/safari/safari_48x48.png&#34; alt=&#34;Safari&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/opera/opera_48x48.png&#34; alt=&#34;Opera&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/main/src/edge/edge_48x48.png&#34; alt=&#34;Edge&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png&#34; alt=&#34;IE&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;Latest ✔&lt;/td&gt; &#xA;   &lt;td&gt;11 ✔&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://saucelabs.com/u/axios&#34;&gt;&lt;img src=&#34;https://saucelabs.com/open_sauce/build_matrix/axios.svg?sanitize=true&#34; alt=&#34;Browser Matrix&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Using npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using bower:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bower install axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using yarn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn add axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using pnpm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pnpm add axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using jsDelivr CDN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/axios@1.1.2/dist/axios.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using unpkg CDN:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://unpkg.com/axios@1.1.2/dist/axios.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;h3&gt;note: CommonJS usage&lt;/h3&gt; &#xA;&lt;p&gt;In order to gain the TypeScript typings (for intellisense / autocomplete) while using CommonJS imports with &lt;code&gt;require()&lt;/code&gt; use the following approach:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const axios = require(&#39;axios&#39;).default;&#xA;&#xA;// axios.&amp;lt;method&amp;gt; will now provide autocomplete and parameter typings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;GET&lt;/code&gt; request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const axios = require(&#39;axios&#39;).default;&#xA;&#xA;// Make a request for a user with a given ID&#xA;axios.get(&#39;/user?ID=12345&#39;)&#xA;  .then(function (response) {&#xA;    // handle success&#xA;    console.log(response);&#xA;  })&#xA;  .catch(function (error) {&#xA;    // handle error&#xA;    console.log(error);&#xA;  })&#xA;  .finally(function () {&#xA;    // always executed&#xA;  });&#xA;&#xA;// Optionally the request above could also be done as&#xA;axios.get(&#39;/user&#39;, {&#xA;    params: {&#xA;      ID: 12345&#xA;    }&#xA;  })&#xA;  .then(function (response) {&#xA;    console.log(response);&#xA;  })&#xA;  .catch(function (error) {&#xA;    console.log(error);&#xA;  })&#xA;  .finally(function () {&#xA;    // always executed&#xA;  });&#xA;&#xA;// Want to use async/await? Add the `async` keyword to your outer function/method.&#xA;async function getUser() {&#xA;  try {&#xA;    const response = await axios.get(&#39;/user?ID=12345&#39;);&#xA;    console.log(response);&#xA;  } catch (error) {&#xA;    console.error(error);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; &lt;code&gt;async/await&lt;/code&gt; is part of ECMAScript 2017 and is not supported in Internet Explorer and older browsers, so use with caution.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Performing a &lt;code&gt;POST&lt;/code&gt; request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.post(&#39;/user&#39;, {&#xA;    firstName: &#39;Fred&#39;,&#xA;    lastName: &#39;Flintstone&#39;&#xA;  })&#xA;  .then(function (response) {&#xA;    console.log(response);&#xA;  })&#xA;  .catch(function (error) {&#xA;    console.log(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Performing multiple concurrent requests&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function getUserAccount() {&#xA;  return axios.get(&#39;/user/12345&#39;);&#xA;}&#xA;&#xA;function getUserPermissions() {&#xA;  return axios.get(&#39;/user/12345/permissions&#39;);&#xA;}&#xA;&#xA;Promise.all([getUserAccount(), getUserPermissions()])&#xA;  .then(function (results) {&#xA;    const acct = results[0];&#xA;    const perm = results[1];&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;axios API&lt;/h2&gt; &#xA;&lt;p&gt;Requests can be made by passing the relevant config to &lt;code&gt;axios&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;axios(config)&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Send a POST request&#xA;axios({&#xA;  method: &#39;post&#39;,&#xA;  url: &#39;/user/12345&#39;,&#xA;  data: {&#xA;    firstName: &#39;Fred&#39;,&#xA;    lastName: &#39;Flintstone&#39;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// GET request for remote image in node.js&#xA;axios({&#xA;  method: &#39;get&#39;,&#xA;  url: &#39;https://bit.ly/2mTM3nY&#39;,&#xA;  responseType: &#39;stream&#39;&#xA;})&#xA;  .then(function (response) {&#xA;    response.data.pipe(fs.createWriteStream(&#39;ada_lovelace.jpg&#39;))&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;axios(url[, config])&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Send a GET request (default method)&#xA;axios(&#39;/user/12345&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request method aliases&lt;/h3&gt; &#xA;&lt;p&gt;For convenience, aliases have been provided for all common request methods.&lt;/p&gt; &#xA;&lt;h5&gt;axios.request(config)&lt;/h5&gt; &#xA;&lt;h5&gt;axios.get(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.delete(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.head(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.options(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.post(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.put(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios.patch(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h6&gt;NOTE&lt;/h6&gt; &#xA;&lt;p&gt;When using the alias methods &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;method&lt;/code&gt;, and &lt;code&gt;data&lt;/code&gt; properties don&#39;t need to be specified in config.&lt;/p&gt; &#xA;&lt;h3&gt;Concurrency (Deprecated)&lt;/h3&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;Promise.all&lt;/code&gt; to replace the below functions.&lt;/p&gt; &#xA;&lt;p&gt;Helper functions for dealing with concurrent requests.&lt;/p&gt; &#xA;&lt;p&gt;axios.all(iterable) axios.spread(callback)&lt;/p&gt; &#xA;&lt;h3&gt;Creating an instance&lt;/h3&gt; &#xA;&lt;p&gt;You can create a new instance of axios with a custom config.&lt;/p&gt; &#xA;&lt;h5&gt;axios.create([config])&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const instance = axios.create({&#xA;  baseURL: &#39;https://some-domain.com/api/&#39;,&#xA;  timeout: 1000,&#xA;  headers: {&#39;X-Custom-Header&#39;: &#39;foobar&#39;}&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Instance methods&lt;/h3&gt; &#xA;&lt;p&gt;The available instance methods are listed below. The specified config will be merged with the instance config.&lt;/p&gt; &#xA;&lt;h5&gt;axios#request(config)&lt;/h5&gt; &#xA;&lt;h5&gt;axios#get(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#delete(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#head(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#options(url[, config])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#post(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#put(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#patch(url[, data[, config]])&lt;/h5&gt; &#xA;&lt;h5&gt;axios#getUri([config])&lt;/h5&gt; &#xA;&lt;h2&gt;Request Config&lt;/h2&gt; &#xA;&lt;p&gt;These are the available config options for making requests. Only the &lt;code&gt;url&lt;/code&gt; is required. Requests will default to &lt;code&gt;GET&lt;/code&gt; if &lt;code&gt;method&lt;/code&gt; is not specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  // `url` is the server URL that will be used for the request&#xA;  url: &#39;/user&#39;,&#xA;&#xA;  // `method` is the request method to be used when making the request&#xA;  method: &#39;get&#39;, // default&#xA;&#xA;  // `baseURL` will be prepended to `url` unless `url` is absolute.&#xA;  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs&#xA;  // to methods of that instance.&#xA;  baseURL: &#39;https://some-domain.com/api/&#39;,&#xA;&#xA;  // `transformRequest` allows changes to the request data before it is sent to the server&#xA;  // This is only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, &#39;PATCH&#39; and &#39;DELETE&#39;&#xA;  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,&#xA;  // FormData or Stream&#xA;  // You may modify the headers object.&#xA;  transformRequest: [function (data, headers) {&#xA;    // Do whatever you want to transform the data&#xA;&#xA;    return data;&#xA;  }],&#xA;&#xA;  // `transformResponse` allows changes to the response data to be made before&#xA;  // it is passed to then/catch&#xA;  transformResponse: [function (data) {&#xA;    // Do whatever you want to transform the data&#xA;&#xA;    return data;&#xA;  }],&#xA;&#xA;  // `headers` are custom headers to be sent&#xA;  headers: {&#39;X-Requested-With&#39;: &#39;XMLHttpRequest&#39;},&#xA;&#xA;  // `params` are the URL parameters to be sent with the request&#xA;  // Must be a plain object or a URLSearchParams object&#xA;  params: {&#xA;    ID: 12345&#xA;  },&#xA;&#xA;  // `paramsSerializer` is an optional config in charge of serializing `params`&#xA;  paramsSerializer: {&#xA;    encode?: (param: string): string =&amp;gt; { /* Do custom ops here and return transformed string */ }, // custom encoder function; sends Key/Values in an iterative fashion&#xA;    serialize?: (params: Record&amp;lt;string, any&amp;gt;, options?: ParamsSerializerOptions ), // mimic pre 1.x behavior and send entire params object to a custom serializer func. Allows consumer to control how params are serialized.&#xA;    indexes: false // array indexes format (null - no brackets, false (default) - empty brackets, true - brackets with indexes)&#xA;  },&#xA;&#xA;  // `data` is the data to be sent as the request body&#xA;  // Only applicable for request methods &#39;PUT&#39;, &#39;POST&#39;, &#39;DELETE , and &#39;PATCH&#39;&#xA;  // When no `transformRequest` is set, must be of one of the following types:&#xA;  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams&#xA;  // - Browser only: FormData, File, Blob&#xA;  // - Node only: Stream, Buffer, FormData (form-data package)&#xA;  data: {&#xA;    firstName: &#39;Fred&#39;&#xA;  },&#xA;&#xA;  // syntax alternative to send data into the body&#xA;  // method post&#xA;  // only the value is sent, not the key&#xA;  data: &#39;Country=Brasil&amp;amp;City=Belo Horizonte&#39;,&#xA;&#xA;  // `timeout` specifies the number of milliseconds before the request times out.&#xA;  // If the request takes longer than `timeout`, the request will be aborted.&#xA;  timeout: 1000, // default is `0` (no timeout)&#xA;&#xA;  // `withCredentials` indicates whether or not cross-site Access-Control requests&#xA;  // should be made using credentials&#xA;  withCredentials: false, // default&#xA;&#xA;  // `adapter` allows custom handling of requests which makes testing easier.&#xA;  // Return a promise and supply a valid response (see lib/adapters/README.md).&#xA;  adapter: function (config) {&#xA;    /* ... */&#xA;  },&#xA;&#xA;  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.&#xA;  // This will set an `Authorization` header, overwriting any existing&#xA;  // `Authorization` custom headers you have set using `headers`.&#xA;  // Please note that only HTTP Basic auth is configurable through this parameter.&#xA;  // For Bearer tokens and such, use `Authorization` custom headers instead.&#xA;  auth: {&#xA;    username: &#39;janedoe&#39;,&#xA;    password: &#39;s00pers3cret&#39;&#xA;  },&#xA;&#xA;  // `responseType` indicates the type of data that the server will respond with&#xA;  // options are: &#39;arraybuffer&#39;, &#39;document&#39;, &#39;json&#39;, &#39;text&#39;, &#39;stream&#39;&#xA;  //   browser only: &#39;blob&#39;&#xA;  responseType: &#39;json&#39;, // default&#xA;&#xA;  // `responseEncoding` indicates encoding to use for decoding responses (Node.js only)&#xA;  // Note: Ignored for `responseType` of &#39;stream&#39; or client-side requests&#xA;  responseEncoding: &#39;utf8&#39;, // default&#xA;&#xA;  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token&#xA;  xsrfCookieName: &#39;XSRF-TOKEN&#39;, // default&#xA;&#xA;  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value&#xA;  xsrfHeaderName: &#39;X-XSRF-TOKEN&#39;, // default&#xA;&#xA;  // `onUploadProgress` allows handling of progress events for uploads&#xA;  // browser &amp;amp; node.js&#xA;  onUploadProgress: function ({loaded, total, progress, bytes, estimated, rate, upload = true}) {&#xA;    // Do whatever you want with the Axios progress event&#xA;  },&#xA;&#xA;  // `onDownloadProgress` allows handling of progress events for downloads&#xA;  // browser &amp;amp; node.js&#xA;  onDownloadProgress: function ({loaded, total, progress, bytes, estimated, rate, download = true}) {&#xA;    // Do whatever you want with the Axios progress event&#xA;  },&#xA;&#xA;  // `maxContentLength` defines the max size of the http response content in bytes allowed in node.js&#xA;  maxContentLength: 2000,&#xA;&#xA;  // `maxBodyLength` (Node only option) defines the max size of the http request content in bytes allowed&#xA;  maxBodyLength: 2000,&#xA;&#xA;  // `validateStatus` defines whether to resolve or reject the promise for a given&#xA;  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`&#xA;  // or `undefined`), the promise will be resolved; otherwise, the promise will be&#xA;  // rejected.&#xA;  validateStatus: function (status) {&#xA;    return status &amp;gt;= 200 &amp;amp;&amp;amp; status &amp;lt; 300; // default&#xA;  },&#xA;&#xA;  // `maxRedirects` defines the maximum number of redirects to follow in node.js.&#xA;  // If set to 0, no redirects will be followed.&#xA;  maxRedirects: 21, // default&#xA;&#xA;  // `beforeRedirect` defines a function that will be called before redirect.&#xA;  // Use this to adjust the request options upon redirecting,&#xA;  // to inspect the latest response headers,&#xA;  // or to cancel the request by throwing an error&#xA;  // If maxRedirects is set to 0, `beforeRedirect` is not used.&#xA;  beforeRedirect: (options, { headers }) =&amp;gt; {&#xA;    if (options.hostname === &#34;example.com&#34;) {&#xA;      options.auth = &#34;user:password&#34;;&#xA;    }&#xA;  },&#xA;&#xA;  // `socketPath` defines a UNIX Socket to be used in node.js.&#xA;  // e.g. &#39;/var/run/docker.sock&#39; to send requests to the docker daemon.&#xA;  // Only either `socketPath` or `proxy` can be specified.&#xA;  // If both are specified, `socketPath` is used.&#xA;  socketPath: null, // default&#xA;&#xA;  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http&#xA;  // and https requests, respectively, in node.js. This allows options to be added like&#xA;  // `keepAlive` that are not enabled by default.&#xA;  httpAgent: new http.Agent({ keepAlive: true }),&#xA;  httpsAgent: new https.Agent({ keepAlive: true }),&#xA;&#xA;  // `proxy` defines the hostname, port, and protocol of the proxy server.&#xA;  // You can also define your proxy using the conventional `http_proxy` and&#xA;  // `https_proxy` environment variables. If you are using environment variables&#xA;  // for your proxy configuration, you can also define a `no_proxy` environment&#xA;  // variable as a comma-separated list of domains that should not be proxied.&#xA;  // Use `false` to disable proxies, ignoring environment variables.&#xA;  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and&#xA;  // supplies credentials.&#xA;  // This will set an `Proxy-Authorization` header, overwriting any existing&#xA;  // `Proxy-Authorization` custom headers you have set using `headers`.&#xA;  // If the proxy server uses HTTPS, then you must set the protocol to `https`.&#xA;  proxy: {&#xA;    protocol: &#39;https&#39;,&#xA;    host: &#39;127.0.0.1&#39;,&#xA;    // hostname: &#39;127.0.0.1&#39; // Takes precedence over &#39;host&#39; if both are defined&#xA;    port: 9000,&#xA;    auth: {&#xA;      username: &#39;mikeymike&#39;,&#xA;      password: &#39;rapunz3l&#39;&#xA;    }&#xA;  },&#xA;&#xA;  // `cancelToken` specifies a cancel token that can be used to cancel the request&#xA;  // (see Cancellation section below for details)&#xA;  cancelToken: new CancelToken(function (cancel) {&#xA;  }),&#xA;&#xA;  // an alternative way to cancel Axios requests using AbortController&#xA;  signal: new AbortController().signal,&#xA;&#xA;  // `decompress` indicates whether or not the response body should be decompressed&#xA;  // automatically. If set to `true` will also remove the &#39;content-encoding&#39; header&#xA;  // from the responses objects of all decompressed responses&#xA;  // - Node only (XHR cannot turn off decompression)&#xA;  decompress: true // default&#xA;&#xA;  // `insecureHTTPParser` boolean.&#xA;  // Indicates where to use an insecure HTTP parser that accepts invalid HTTP headers.&#xA;  // This may allow interoperability with non-conformant HTTP implementations.&#xA;  // Using the insecure parser should be avoided.&#xA;  // see options https://nodejs.org/dist/latest-v12.x/docs/api/http.html#http_http_request_url_options_callback&#xA;  // see also https://nodejs.org/en/blog/vulnerability/february-2020-security-releases/#strict-http-header-parsing-none&#xA;  insecureHTTPParser: undefined // default&#xA;&#xA;  // transitional options for backward compatibility that may be removed in the newer versions&#xA;  transitional: {&#xA;    // silent JSON parsing mode&#xA;    // `true`  - ignore JSON parsing errors and set response.data to null if parsing failed (old behaviour)&#xA;    // `false` - throw SyntaxError if JSON parsing failed (Note: responseType must be set to &#39;json&#39;)&#xA;    silentJSONParsing: true, // default value for the current Axios version&#xA;&#xA;    // try to parse the response string as JSON even if `responseType` is not &#39;json&#39;&#xA;    forcedJSONParsing: true,&#xA;&#xA;    // throw ETIMEDOUT error instead of generic ECONNABORTED on request timeouts&#xA;    clarifyTimeoutError: false,&#xA;  },&#xA;&#xA;  env: {&#xA;    // The FormData class to be used to automatically serialize the payload into a FormData object&#xA;    FormData: window?.FormData || global?.FormData&#xA;  },&#xA;&#xA;  formSerializer: {&#xA;      visitor: (value, key, path, helpers) =&amp;gt; {}; // custom visitor function to serialize form values&#xA;      dots: boolean; // use dots instead of brackets format&#xA;      metaTokens: boolean; // keep special endings like {} in parameter key&#xA;      indexes: boolean; // array indexes format null - no brackets, false - empty brackets, true - brackets with indexes&#xA;  },&#xA;&#xA;  // http adapter only (node.js)&#xA;  maxRate: [&#xA;    100 * 1024, // 100KB/s upload limit,&#xA;    100 * 1024  // 100KB/s download limit&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Response Schema&lt;/h2&gt; &#xA;&lt;p&gt;The response for a request contains the following information.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  // `data` is the response that was provided by the server&#xA;  data: {},&#xA;&#xA;  // `status` is the HTTP status code from the server response&#xA;  status: 200,&#xA;&#xA;  // `statusText` is the HTTP status message from the server response&#xA;  statusText: &#39;OK&#39;,&#xA;&#xA;  // `headers` the HTTP headers that the server responded with&#xA;  // All header names are lowercase and can be accessed using the bracket notation.&#xA;  // Example: `response.headers[&#39;content-type&#39;]`&#xA;  headers: {},&#xA;&#xA;  // `config` is the config that was provided to `axios` for the request&#xA;  config: {},&#xA;&#xA;  // `request` is the request that generated this response&#xA;  // It is the last ClientRequest instance in node.js (in redirects)&#xA;  // and an XMLHttpRequest instance in the browser&#xA;  request: {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;then&lt;/code&gt;, you will receive the response as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;)&#xA;  .then(function (response) {&#xA;    console.log(response.data);&#xA;    console.log(response.status);&#xA;    console.log(response.statusText);&#xA;    console.log(response.headers);&#xA;    console.log(response.config);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using &lt;code&gt;catch&lt;/code&gt;, or passing a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then&#34;&gt;rejection callback&lt;/a&gt; as second parameter of &lt;code&gt;then&lt;/code&gt;, the response will be available through the &lt;code&gt;error&lt;/code&gt; object as explained in the &lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/#handling-errors&#34;&gt;Handling Errors&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;Config Defaults&lt;/h2&gt; &#xA;&lt;p&gt;You can specify config defaults that will be applied to every request.&lt;/p&gt; &#xA;&lt;h3&gt;Global axios defaults&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.defaults.baseURL = &#39;https://api.example.com&#39;;&#xA;&#xA;// Important: If axios is used with multiple domains, the AUTH_TOKEN will be sent to all of them.&#xA;// See below for an example using Custom instance defaults instead.&#xA;axios.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;&#xA;&#xA;axios.defaults.headers.post[&#39;Content-Type&#39;] = &#39;application/x-www-form-urlencoded&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom instance defaults&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Set config defaults when creating the instance&#xA;const instance = axios.create({&#xA;  baseURL: &#39;https://api.example.com&#39;&#xA;});&#xA;&#xA;// Alter defaults after instance has been created&#xA;instance.defaults.headers.common[&#39;Authorization&#39;] = AUTH_TOKEN;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Config order of precedence&lt;/h3&gt; &#xA;&lt;p&gt;Config will be merged with an order of precedence. The order is library defaults found in &lt;a href=&#34;https://github.com/axios/axios/raw/master/lib/defaults/index.js#L28&#34;&gt;lib/defaults.js&lt;/a&gt;, then &lt;code&gt;defaults&lt;/code&gt; property of the instance, and finally &lt;code&gt;config&lt;/code&gt; argument for the request. The latter will take precedence over the former. Here&#39;s an example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Create an instance using the config defaults provided by the library&#xA;// At this point the timeout config value is `0` as is the default for the library&#xA;const instance = axios.create();&#xA;&#xA;// Override timeout default for the library&#xA;// Now all requests using this instance will wait 2.5 seconds before timing out&#xA;instance.defaults.timeout = 2500;&#xA;&#xA;// Override timeout for this request as it&#39;s known to take a long time&#xA;instance.get(&#39;/longRequest&#39;, {&#xA;  timeout: 5000&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interceptors&lt;/h2&gt; &#xA;&lt;p&gt;You can intercept requests or responses before they are handled by &lt;code&gt;then&lt;/code&gt; or &lt;code&gt;catch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Add a request interceptor&#xA;axios.interceptors.request.use(function (config) {&#xA;    // Do something before request is sent&#xA;    return config;&#xA;  }, function (error) {&#xA;    // Do something with request error&#xA;    return Promise.reject(error);&#xA;  });&#xA;&#xA;// Add a response interceptor&#xA;axios.interceptors.response.use(function (response) {&#xA;    // Any status code that lie within the range of 2xx cause this function to trigger&#xA;    // Do something with response data&#xA;    return response;&#xA;  }, function (error) {&#xA;    // Any status codes that falls outside the range of 2xx cause this function to trigger&#xA;    // Do something with response error&#xA;    return Promise.reject(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to remove an interceptor later you can.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const myInterceptor = axios.interceptors.request.use(function () {/*...*/});&#xA;axios.interceptors.request.eject(myInterceptor);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also clear all interceptors for requests or responses.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const instance = axios.create();&#xA;instance.interceptors.request.use(function () {/*...*/});&#xA;instance.interceptors.request.clear(); // Removes interceptors from requests&#xA;instance.interceptors.response.use(function () {/*...*/});&#xA;instance.interceptors.response.clear(); // Removes interceptors from responses&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add interceptors to a custom instance of axios.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const instance = axios.create();&#xA;instance.interceptors.request.use(function () {/*...*/});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you add request interceptors, they are presumed to be asynchronous by default. This can cause a delay in the execution of your axios request when the main thread is blocked (a promise is created under the hood for the interceptor and your request gets put on the bottom of the call stack). If your request interceptors are synchronous you can add a flag to the options object that will tell axios to run the code synchronously and avoid any delays in request execution.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.interceptors.request.use(function (config) {&#xA;  config.headers.test = &#39;I am only a header!&#39;;&#xA;  return config;&#xA;}, null, { synchronous: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to execute a particular interceptor based on a runtime check, you can add a &lt;code&gt;runWhen&lt;/code&gt; function to the options object. The interceptor will not be executed &lt;strong&gt;if and only if&lt;/strong&gt; the return of &lt;code&gt;runWhen&lt;/code&gt; is &lt;code&gt;false&lt;/code&gt;. The function will be called with the config object (don&#39;t forget that you can bind your own arguments to it as well.) This can be handy when you have an asynchronous request interceptor that only needs to run at certain times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function onGetCall(config) {&#xA;  return config.method === &#39;get&#39;;&#xA;}&#xA;axios.interceptors.request.use(function (config) {&#xA;  config.headers.test = &#39;special get headers&#39;;&#xA;  return config;&#xA;}, null, { runWhen: onGetCall });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Interceptors&lt;/h3&gt; &#xA;&lt;p&gt;Given you add multiple response interceptors and when the response was fulfilled&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;then each interceptor is executed&lt;/li&gt; &#xA; &lt;li&gt;then they are executed in the order they were added&lt;/li&gt; &#xA; &lt;li&gt;then only the last interceptor&#39;s result is returned&lt;/li&gt; &#xA; &lt;li&gt;then every interceptor receives the result of its predecessor&lt;/li&gt; &#xA; &lt;li&gt;and when the fulfillment-interceptor throws &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;then the following fulfillment-interceptor is not called&lt;/li&gt; &#xA;   &lt;li&gt;then the following rejection-interceptor is called&lt;/li&gt; &#xA;   &lt;li&gt;once caught, another following fulfill-interceptor is called again (just like in a promise chain).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/test/specs/interceptors.spec.js&#34;&gt;the interceptor tests&lt;/a&gt; for seeing all this in code.&lt;/p&gt; &#xA;&lt;h2&gt;Handling Errors&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;)&#xA;  .catch(function (error) {&#xA;    if (error.response) {&#xA;      // The request was made and the server responded with a status code&#xA;      // that falls out of the range of 2xx&#xA;      console.log(error.response.data);&#xA;      console.log(error.response.status);&#xA;      console.log(error.response.headers);&#xA;    } else if (error.request) {&#xA;      // The request was made but no response was received&#xA;      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of&#xA;      // http.ClientRequest in node.js&#xA;      console.log(error.request);&#xA;    } else {&#xA;      // Something happened in setting up the request that triggered an Error&#xA;      console.log(&#39;Error&#39;, error.message);&#xA;    }&#xA;    console.log(error.config);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the &lt;code&gt;validateStatus&lt;/code&gt; config option, you can define HTTP code(s) that should throw an error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;, {&#xA;  validateStatus: function (status) {&#xA;    return status &amp;lt; 500; // Resolve only if the status code is less than 500&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;toJSON&lt;/code&gt; you get an object with more information about the HTTP error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axios.get(&#39;/user/12345&#39;)&#xA;  .catch(function (error) {&#xA;    console.log(error.toJSON());&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cancellation&lt;/h2&gt; &#xA;&lt;h3&gt;AbortController&lt;/h3&gt; &#xA;&lt;p&gt;Starting from &lt;code&gt;v0.22.0&lt;/code&gt; Axios supports AbortController to cancel requests in fetch API way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const controller = new AbortController();&#xA;&#xA;axios.get(&#39;/foo/bar&#39;, {&#xA;   signal: controller.signal&#xA;}).then(function(response) {&#xA;   //...&#xA;});&#xA;// cancel the request&#xA;controller.abort()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CancelToken &lt;code&gt;👎deprecated&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can also cancel a request using a &lt;em&gt;CancelToken&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The axios cancel token API is based on the withdrawn &lt;a href=&#34;https://github.com/tc39/proposal-cancelable-promises&#34;&gt;cancelable promises proposal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This API is deprecated since v0.22.0 and shouldn&#39;t be used in new projects&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can create a cancel token using the &lt;code&gt;CancelToken.source&lt;/code&gt; factory as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const CancelToken = axios.CancelToken;&#xA;const source = CancelToken.source();&#xA;&#xA;axios.get(&#39;/user/12345&#39;, {&#xA;  cancelToken: source.token&#xA;}).catch(function (thrown) {&#xA;  if (axios.isCancel(thrown)) {&#xA;    console.log(&#39;Request canceled&#39;, thrown.message);&#xA;  } else {&#xA;    // handle error&#xA;  }&#xA;});&#xA;&#xA;axios.post(&#39;/user/12345&#39;, {&#xA;  name: &#39;new name&#39;&#xA;}, {&#xA;  cancelToken: source.token&#xA;})&#xA;&#xA;// cancel the request (the message parameter is optional)&#xA;source.cancel(&#39;Operation canceled by the user.&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create a cancel token by passing an executor function to the &lt;code&gt;CancelToken&lt;/code&gt; constructor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const CancelToken = axios.CancelToken;&#xA;let cancel;&#xA;&#xA;axios.get(&#39;/user/12345&#39;, {&#xA;  cancelToken: new CancelToken(function executor(c) {&#xA;    // An executor function receives a cancel function as a parameter&#xA;    cancel = c;&#xA;  })&#xA;});&#xA;&#xA;// cancel the request&#xA;cancel();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you can cancel several requests with the same cancel token/abort controller. If a cancellation token is already cancelled at the moment of starting an Axios request, then the request is cancelled immediately, without any attempts to make a real request.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;During the transition period, you can use both cancellation APIs, even for the same request:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format&lt;/h2&gt; &#xA;&lt;h3&gt;URLSearchParams&lt;/h3&gt; &#xA;&lt;p&gt;By default, axios serializes JavaScript objects to &lt;code&gt;JSON&lt;/code&gt;. To send data in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/POST&#34;&gt;&lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; format&lt;/a&gt; instead, you can use the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams&#34;&gt;&lt;code&gt;URLSearchParams&lt;/code&gt;&lt;/a&gt; API, which is &lt;a href=&#34;http://www.caniuse.com/#feat=urlsearchparams&#34;&gt;supported&lt;/a&gt; in the vast majority of browsers, &lt;a href=&#34;https://nodejs.org/api/url.html#url_class_urlsearchparams&#34;&gt;and Node&lt;/a&gt; starting with v10 (released in 2018).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const params = new URLSearchParams({ foo: &#39;bar&#39; });&#xA;params.append(&#39;extraparam&#39;, &#39;value&#39;);&#xA;axios.post(&#39;/foo&#39;, params);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Query string (Older browsers)&lt;/h3&gt; &#xA;&lt;p&gt;For compatibility with very old browsers, there is a &lt;a href=&#34;https://github.com/WebReflection/url-search-params&#34;&gt;polyfill&lt;/a&gt; available (make sure to polyfill the global environment).&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can encode data using the &lt;a href=&#34;https://github.com/ljharb/qs&#34;&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const qs = require(&#39;qs&#39;);&#xA;axios.post(&#39;/foo&#39;, qs.stringify({ &#39;bar&#39;: 123 }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or in another way (ES6),&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import qs from &#39;qs&#39;;&#xA;const data = { &#39;bar&#39;: 123 };&#xA;const options = {&#xA;  method: &#39;POST&#39;,&#xA;  headers: { &#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39; },&#xA;  data: qs.stringify(data),&#xA;  url,&#xA;};&#xA;axios(options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Older Node.js versions&lt;/h3&gt; &#xA;&lt;p&gt;For older Node.js engines, you can use the &lt;a href=&#34;https://nodejs.org/api/querystring.html&#34;&gt;&lt;code&gt;querystring&lt;/code&gt;&lt;/a&gt; module as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const querystring = require(&#39;querystring&#39;);&#xA;axios.post(&#39;https://something.com/&#39;, querystring.stringify({ foo: &#39;bar&#39; }));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://github.com/ljharb/qs&#34;&gt;&lt;code&gt;qs&lt;/code&gt;&lt;/a&gt; library.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; The &lt;code&gt;qs&lt;/code&gt; library is preferable if you need to stringify nested objects, as the &lt;code&gt;querystring&lt;/code&gt; method has &lt;a href=&#34;https://github.com/nodejs/node-v0.x-archive/issues/1665&#34;&gt;known issues&lt;/a&gt; with that use case.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;🆕 Automatic serialization to URLSearchParams&lt;/h3&gt; &#xA;&lt;p&gt;Axios will automatically serialize the data object to urlencoded format if the content-type header is set to &#34;application/x-www-form-urlencoded&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const data = {&#xA;  x: 1,&#xA;  arr: [1, 2, 3],&#xA;  arr2: [1, [2], 3],&#xA;  users: [{name: &#39;Peter&#39;, surname: &#39;Griffin&#39;}, {name: &#39;Thomas&#39;, surname: &#39;Anderson&#39;}],&#xA;};&#xA;&#xA;await axios.postForm(&#39;https://postman-echo.com/post&#39;, data,&#xA;  {headers: {&#39;content-type&#39;: &#39;application/x-www-form-urlencoded&#39;}}&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will handle it as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  {&#xA;    x: &#39;1&#39;,&#xA;    &#39;arr[]&#39;: [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ],&#xA;    &#39;arr2[0]&#39;: &#39;1&#39;,&#xA;    &#39;arr2[1][0]&#39;: &#39;2&#39;,&#xA;    &#39;arr2[2]&#39;: &#39;3&#39;,&#xA;    &#39;arr3[]&#39;: [ &#39;1&#39;, &#39;2&#39;, &#39;3&#39; ],&#xA;    &#39;users[0][name]&#39;: &#39;Peter&#39;,&#xA;    &#39;users[0][surname]&#39;: &#39;griffin&#39;,&#xA;    &#39;users[1][name]&#39;: &#39;Thomas&#39;,&#xA;    &#39;users[1][surname]&#39;: &#39;Anderson&#39;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your backend body-parser (like &lt;code&gt;body-parser&lt;/code&gt; of &lt;code&gt;express.js&lt;/code&gt;) supports nested objects decoding, you will get the same object on the server-side automatically&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  var app = express();&#xA;&#xA;  app.use(bodyParser.urlencoded({ extended: true })); // support encoded bodies&#xA;&#xA;  app.post(&#39;/&#39;, function (req, res, next) {&#xA;     // echo body as JSON&#xA;     res.send(JSON.stringify(req.body));&#xA;  });&#xA;&#xA;  server = app.listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using &lt;code&gt;multipart/form-data&lt;/code&gt; format&lt;/h2&gt; &#xA;&lt;h3&gt;FormData&lt;/h3&gt; &#xA;&lt;p&gt;To send the data as a &lt;code&gt;multipart/formdata&lt;/code&gt; you need to pass a formData instance as a payload. Setting the &lt;code&gt;Content-Type&lt;/code&gt; header is not required as Axios guesses it based on the payload type.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const formData = new FormData();&#xA;formData.append(&#39;foo&#39;, &#39;bar&#39;);&#xA;&#xA;axios.post(&#39;https://httpbin.org/post&#39;, formData);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In node.js, you can use the &lt;a href=&#34;https://github.com/form-data/form-data&#34;&gt;&lt;code&gt;form-data&lt;/code&gt;&lt;/a&gt; library as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const FormData = require(&#39;form-data&#39;);&#xA;&#xA;const form = new FormData();&#xA;form.append(&#39;my_field&#39;, &#39;my value&#39;);&#xA;form.append(&#39;my_buffer&#39;, new Buffer(10));&#xA;form.append(&#39;my_file&#39;, fs.createReadStream(&#39;/foo/bar.jpg&#39;));&#xA;&#xA;axios.post(&#39;https://example.com&#39;, form)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;🆕 Automatic serialization to FormData&lt;/h3&gt; &#xA;&lt;p&gt;Starting from &lt;code&gt;v0.27.0&lt;/code&gt;, Axios supports automatic object serialization to a FormData object if the request &lt;code&gt;Content-Type&lt;/code&gt; header is set to &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The following request will submit the data in a FormData format (Browser &amp;amp; Node.js):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import axios from &#39;axios&#39;;&#xA;&#xA;axios.post(&#39;https://httpbin.org/post&#39;, {x: 1}, {&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: &#39;multipart/form-data&#39;&#xA;  }&#xA;}).then(({data}) =&amp;gt; console.log(data));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the &lt;code&gt;node.js&lt;/code&gt; build, the (&lt;a href=&#34;https://github.com/form-data/form-data&#34;&gt;&lt;code&gt;form-data&lt;/code&gt;&lt;/a&gt;) polyfill is used by default.&lt;/p&gt; &#xA;&lt;p&gt;You can overload the FormData class by setting the &lt;code&gt;env.FormData&lt;/code&gt; config variable, but you probably won&#39;t need it in most cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const axios = require(&#39;axios&#39;);&#xA;var FormData = require(&#39;form-data&#39;);&#xA;&#xA;axios.post(&#39;https://httpbin.org/post&#39;, {x: 1, buf: new Buffer(10)}, {&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: &#39;multipart/form-data&#39;&#xA;  }&#xA;}).then(({data}) =&amp;gt; console.log(data));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Axios FormData serializer supports some special endings to perform the following operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;{}&lt;/code&gt; - serialize the value with JSON.stringify&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[]&lt;/code&gt; - unwrap the array-like object as separate fields with the same key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; unwrap/expand operation will be used by default on arrays and FileList objects&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;FormData serializer supports additional options via &lt;code&gt;config.formSerializer: object&lt;/code&gt; property to handle rare cases:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;visitor: Function&lt;/code&gt; - user-defined visitor function that will be called recursively to serialize the data object to a &lt;code&gt;FormData&lt;/code&gt; object by following custom rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dots: boolean = false&lt;/code&gt; - use dot notation instead of brackets to serialize arrays and objects;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;metaTokens: boolean = true&lt;/code&gt; - add the special ending (e.g &lt;code&gt;user{}: &#39;{&#34;name&#34;: &#34;John&#34;}&#39;&lt;/code&gt;) in the FormData key. The back-end body-parser could potentially use this meta-information to automatically parse the value as JSON.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;indexes: null|false|true = false&lt;/code&gt; - controls how indexes will be added to unwrapped keys of &lt;code&gt;flat&lt;/code&gt; array-like objects&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;null&lt;/code&gt; - don&#39;t add brackets (&lt;code&gt;arr: 1&lt;/code&gt;, &lt;code&gt;arr: 2&lt;/code&gt;, &lt;code&gt;arr: 3&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;false&lt;/code&gt;(default) - add empty brackets (&lt;code&gt;arr[]: 1&lt;/code&gt;, &lt;code&gt;arr[]: 2&lt;/code&gt;, &lt;code&gt;arr[]: 3&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;true&lt;/code&gt; - add brackets with indexes (&lt;code&gt;arr[0]: 1&lt;/code&gt;, &lt;code&gt;arr[1]: 2&lt;/code&gt;, &lt;code&gt;arr[2]: 3&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Let&#39;s say we have an object like this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const obj = {&#xA;  x: 1,&#xA;  arr: [1, 2, 3],&#xA;  arr2: [1, [2], 3],&#xA;  users: [{name: &#39;Peter&#39;, surname: &#39;Griffin&#39;}, {name: &#39;Thomas&#39;, surname: &#39;Anderson&#39;}],&#xA;  &#39;obj2{}&#39;: [{x:1}]&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following steps will be executed by the Axios serializer internally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const formData = new FormData();&#xA;formData.append(&#39;x&#39;, &#39;1&#39;);&#xA;formData.append(&#39;arr[]&#39;, &#39;1&#39;);&#xA;formData.append(&#39;arr[]&#39;, &#39;2&#39;);&#xA;formData.append(&#39;arr[]&#39;, &#39;3&#39;);&#xA;formData.append(&#39;arr2[0]&#39;, &#39;1&#39;);&#xA;formData.append(&#39;arr2[1][0]&#39;, &#39;2&#39;);&#xA;formData.append(&#39;arr2[2]&#39;, &#39;3&#39;);&#xA;formData.append(&#39;users[0][name]&#39;, &#39;Peter&#39;);&#xA;formData.append(&#39;users[0][surname]&#39;, &#39;Griffin&#39;);&#xA;formData.append(&#39;users[1][name]&#39;, &#39;Thomas&#39;);&#xA;formData.append(&#39;users[1][surname]&#39;, &#39;Anderson&#39;);&#xA;formData.append(&#39;obj2{}&#39;, &#39;[{&#34;x&#34;:1}]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Axios supports the following shortcut methods: &lt;code&gt;postForm&lt;/code&gt;, &lt;code&gt;putForm&lt;/code&gt;, &lt;code&gt;patchForm&lt;/code&gt; which are just the corresponding http methods with the &lt;code&gt;Content-Type&lt;/code&gt; header preset to &lt;code&gt;multipart/form-data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Files Posting&lt;/h2&gt; &#xA;&lt;p&gt;You can easily submit a single file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, {&#xA;  &#39;myVar&#39; : &#39;foo&#39;,&#xA;  &#39;file&#39;: document.querySelector(&#39;#fileInput&#39;).files[0]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or multiple files as &lt;code&gt;multipart/form-data&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, {&#xA;  &#39;files[]&#39;: document.querySelector(&#39;#fileInput&#39;).files&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;FileList&lt;/code&gt; object can be passed directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, document.querySelector(&#39;#fileInput&#39;).files)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All files will be sent with the same field names: &lt;code&gt;files[]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🆕 HTML Form Posting (browser)&lt;/h2&gt; &#xA;&lt;p&gt;Pass HTML Form element as a payload to submit it as &lt;code&gt;multipart/form-data&lt;/code&gt; content.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.postForm(&#39;https://httpbin.org/post&#39;, document.querySelector(&#39;#htmlForm&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;FormData&lt;/code&gt; and &lt;code&gt;HTMLForm&lt;/code&gt; objects can also be posted as &lt;code&gt;JSON&lt;/code&gt; by explicitly setting the &lt;code&gt;Content-Type&lt;/code&gt; header to &lt;code&gt;application/json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.post(&#39;https://httpbin.org/post&#39;, document.querySelector(&#39;#htmlForm&#39;), {&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: &#39;application/json&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, the Form&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form id=&#34;form&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;foo&#34; value=&#34;1&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;deep.prop&#34; value=&#34;2&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;deep prop spaced&#34; value=&#34;3&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;baz&#34; value=&#34;4&#34;&amp;gt;&#xA;  &amp;lt;input type=&#34;text&#34; name=&#34;baz&#34; value=&#34;5&#34;&amp;gt;&#xA;&#xA;  &amp;lt;select name=&#34;user.age&#34;&amp;gt;&#xA;    &amp;lt;option value=&#34;value1&#34;&amp;gt;Value 1&amp;lt;/option&amp;gt;&#xA;    &amp;lt;option value=&#34;value2&#34; selected&amp;gt;Value 2&amp;lt;/option&amp;gt;&#xA;    &amp;lt;option value=&#34;value3&#34;&amp;gt;Value 3&amp;lt;/option&amp;gt;&#xA;  &amp;lt;/select&amp;gt;&#xA;&#xA;  &amp;lt;input type=&#34;submit&#34; value=&#34;Save&#34;&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will be submitted as the following JSON object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;foo&#34;: &#34;1&#34;,&#xA;  &#34;deep&#34;: {&#xA;    &#34;prop&#34;: {&#xA;      &#34;spaced&#34;: &#34;3&#34;&#xA;    }&#xA;  },&#xA;  &#34;baz&#34;: [&#xA;    &#34;4&#34;,&#xA;    &#34;5&#34;&#xA;  ],&#xA;  &#34;user&#34;: {&#xA;    &#34;age&#34;: &#34;value2&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sending &lt;code&gt;Blobs&lt;/code&gt;/&lt;code&gt;Files&lt;/code&gt; as JSON (&lt;code&gt;base64&lt;/code&gt;) is not currently supported.&lt;/p&gt; &#xA;&lt;h2&gt;🆕 Progress capturing&lt;/h2&gt; &#xA;&lt;p&gt;Axios supports both browser and node environments to capture request upload/download progress.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await axios.post(url, data, {&#xA;  onUploadProgress: function (axiosProgressEvent) {&#xA;    /*{&#xA;      loaded: number;&#xA;      total?: number;&#xA;      progress?: number; // in range [0..1]&#xA;      bytes: number; // how many bytes have been transferred since the last trigger (delta)&#xA;      estimated?: number; // estimated time in seconds&#xA;      rate?: number; // upload speed in bytes&#xA;      upload: true; // upload sign&#xA;    }*/&#xA;  },&#xA;&#xA;  onDownloadProgress: function (axiosProgressEvent) {&#xA;    /*{&#xA;      loaded: number;&#xA;      total?: number;&#xA;      progress?: number;&#xA;      bytes: number; &#xA;      estimated?: number;&#xA;      rate?: number; // download speed in bytes&#xA;      download: true; // download sign&#xA;    }*/&#xA;  }&#xA;});  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also track stream upload/download progress in node.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {data} = await axios.post(SERVER_URL, readableStream, {&#xA;   onUploadProgress: ({progress}) =&amp;gt; {&#xA;     console.log((progress * 100).toFixed(2));&#xA;   },&#xA;  &#xA;   headers: {&#xA;    &#39;Content-Length&#39;: contentLength&#xA;   },&#xA;&#xA;   maxRedirects: 0 // avoid buffering the entire stream&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Capturing FormData upload progress is currently not currently supported in node.js environments.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ Warning&lt;/strong&gt; It is recommended to disable redirects by setting maxRedirects: 0 to upload the stream in the &lt;strong&gt;node.js&lt;/strong&gt; environment, as follow-redirects package will buffer the entire stream in RAM without following the &#34;backpressure&#34; algorithm.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🆕 Rate limiting&lt;/h2&gt; &#xA;&lt;p&gt;Download and upload rate limits can only be set for the http adapter (node.js):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {data} = await axios.post(LOCAL_SERVER_URL, myBuffer, {&#xA;  onUploadProgress: ({progress, rate}) =&amp;gt; {&#xA;    console.log(`Upload [${(progress*100).toFixed(2)}%]: ${(rate / 1024).toFixed(2)}KB/s`)&#xA;  },&#xA;   &#xA;  maxRate: [100 * 1024], // 100KB/s limit&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Semver&lt;/h2&gt; &#xA;&lt;p&gt;Until axios reaches a &lt;code&gt;1.0&lt;/code&gt; release, breaking changes will be released with a new minor version. For example &lt;code&gt;0.5.1&lt;/code&gt;, and &lt;code&gt;0.5.4&lt;/code&gt; will have the same API, but &lt;code&gt;0.6.0&lt;/code&gt; will have breaking changes.&lt;/p&gt; &#xA;&lt;h2&gt;Promises&lt;/h2&gt; &#xA;&lt;p&gt;axios depends on a native ES6 Promise implementation to be &lt;a href=&#34;https://caniuse.com/promises&#34;&gt;supported&lt;/a&gt;. If your environment doesn&#39;t support ES6 Promises, you can &lt;a href=&#34;https://github.com/jakearchibald/es6-promise&#34;&gt;polyfill&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;axios includes &lt;a href=&#34;https://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; definitions and a type guard for axios errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;let user: User = null;&#xA;try {&#xA;  const { data } = await axios.get(&#39;/user?ID=12345&#39;);&#xA;  user = data.userDetails;&#xA;} catch (error) {&#xA;  if (axios.isAxiosError(error)) {&#xA;    handleAxiosError(error);&#xA;  } else {&#xA;    handleUnexpectedError(error);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Online one-click setup&lt;/h2&gt; &#xA;&lt;p&gt;You can use Gitpod, an online IDE(which is free for Open Source) for contributing or running the examples online.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/axios/axios/raw/main/examples/server.js&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/master/UPGRADE_GUIDE.md&#34;&gt;Upgrade Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/master/ECOSYSTEM.md&#34;&gt;Ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/axios/axios/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;axios is heavily inspired by the &lt;a href=&#34;https://docs.angularjs.org/api/ng/service/$http&#34;&gt;$http service&lt;/a&gt; provided in &lt;a href=&#34;https://angularjs.org/&#34;&gt;AngularJS&lt;/a&gt;. Ultimately axios is an effort to provide a standalone &lt;code&gt;$http&lt;/code&gt;-like service for use outside of AngularJS.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/axios/axios/v1.x/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>