<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T02:00:14Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>saharmor/dalle-playground</title>
    <updated>2022-06-19T02:00:14Z</updated>
    <id>tag:github.com,2022-06-19:/saharmor/dalle-playground</id>
    <link href="https://github.com/saharmor/dalle-playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A playground to generate images from any text prompt using DALL-E Mini and based on OpenAI&#39;s DALL-E https://openai.com/blog/dall-e/&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://emojipedia-us.s3.dualstack.us-west-1.amazonaws.com/thumbs/240/apple/285/woman-artist_1f469-200d-1f3a8.png&#34; width=&#34;60&#34; alt=&#34;Dali&#34;&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;DALL-E Playground&lt;/h2&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;A playground for DALL-E enthusiasts to tinker with the open-source version of OpenAI&#39;s &lt;a href=&#34;https://openai.com/blog/dall-e/&#34;&gt;DALL-E&lt;/a&gt;, based on &lt;a href=&#34;https://github.com/borisdayma/dalle-mini&#34;&gt;DALL-E Mini&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/6180201/136710500-8bb01b4c-5741-4007-a8ea-e18ba5895649.mp4&#34;&gt;https://user-images.githubusercontent.com/6180201/136710500-8bb01b4c-5741-4007-a8ea-e18ba5895649.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Fast usage&lt;/h2&gt; &#xA;&lt;p&gt;You can tinker with the DALL-E playground using a Github-hosted frontend. Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the DALL-E backend using Google Colab &lt;a href=&#34;https://colab.research.google.com/github/saharmor/dalle-playground/blob/main/backend/dalle_playground_backend.ipynb&#34;&gt;&lt;img src=&#34;https://colab.research.google.com/assets/colab-badge.svg?sanitize=true&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the URL from the last executed cell. Look for the line having &lt;code&gt;your url is: https://XXXX.loca.lt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wait for the backend to fully load&lt;/strong&gt;, this should take ~2min and you should see &lt;code&gt;--&amp;gt; DALL-E Server is up and running!&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Browse &lt;a href=&#34;https://saharmor.github.io/dalle-playground/?backendUrl=https://XXXX.loca.lt&#34;&gt;https://saharmor.github.io/dalle-playground/?backendUrl=https://XXXX.loca.lt&lt;/a&gt; where the &lt;code&gt;backendUrl&lt;/code&gt; query parameter should be the url from the previous step&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;General note&lt;/strong&gt;: while it is possible to run the DALL-E Mini backend on the free tier of Google Colab, generating more than 1-2 images would take more than 1min, which will result in a frontend timeout. Consider upgrading to Colab Pro or run the backend notebook on your stronger ML machine (e.g. AWS EC2).&lt;/p&gt; &#xA;&lt;h2&gt;Using DALL-E Mega&lt;/h2&gt; &#xA;&lt;p&gt;DALL-E Mega is substianlly more capable than DALL-E Mini and therefore generates higher fidelity images. If you have the computing power--either through a Google Colab Pro+ subcription or by having a strong local machine, select the DALL-E Mega model in the colab notebook or run the backend with a &lt;code&gt;Mega&lt;/code&gt; or &lt;code&gt;Mega_full&lt;/code&gt; parameter, e.g. &lt;code&gt;python dalle-playground/backend/app.py --port 8000 --model_version mega&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Local development&lt;/h2&gt; &#xA;&lt;p&gt;Follow these steps in case you&#39;d like to clone and run the DALL-E playground locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone or fork this repository&lt;/li&gt; &#xA; &lt;li&gt;Create a virtual environment &lt;code&gt;cd backend &amp;amp;&amp;amp; python3 -m venv ENV_NAME&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install requirements &lt;code&gt;pip install -r requirements.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Make sure you have pytorch and its dependencies installed &lt;em&gt;&lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;Installation guide&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run web server &lt;code&gt;python app.py --port 8080 --model_version mini&lt;/code&gt; (you can change from 8080 to your own port)&lt;/li&gt; &#xA; &lt;li&gt;In a different terminal, install frontend&#39;s modules &lt;code&gt;cd interface &amp;amp;&amp;amp; npm install&lt;/code&gt; and run it &lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy backend&#39;s url from step 5 and paste it in the backend&#39;s url input within the web app&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Local development with Docker-compose&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you have &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;docker&lt;/a&gt; and &lt;a href=&#34;https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html&#34;&gt;The NVIDIA Container Toolkit&lt;/a&gt; installed&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone or fork this repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;start server &lt;code&gt;docker-compose up&lt;/code&gt;, add &lt;code&gt;-d&lt;/code&gt; to &lt;code&gt;docker-compose up&lt;/code&gt; if you&#39;d like to run it in the background&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time will take some time to download the images, models and other dependencies. models and other dependencies are downloaded only once, and then cached.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Copy backend&#39;s url from step 2 and paste it in the backend&#39;s url input within the web app.&lt;/p&gt; &lt;p&gt;webapp at &lt;code&gt;http://localhost:3000/dalle-playground&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This repo is a full-stack flavour of &lt;a href=&#34;https://github.com/borisdayma&#34;&gt;Boris Dayma&#39;s&lt;/a&gt; DALL-E Mini repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>digitalocean/nginxconfig.io</title>
    <updated>2022-06-19T02:00:14Z</updated>
    <id>tag:github.com,2022-06-19:/digitalocean/nginxconfig.io</id>
    <link href="https://github.com/digitalocean/nginxconfig.io" rel="alternate"></link>
    <summary type="html">&lt;p&gt;‚öôÔ∏è NGINX config generator on steroids üíâ&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/digitalocean/nginxconfig.io.svg?sanitize=true&#34; alt=&#34;GitHub stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/digitalocean/nginxconfig.io.svg?color=blue&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/digitalocean/nginxconfig.io.svg?color=blue&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/issues?q=is%3Aissue+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-closed-raw/digitalocean/nginxconfig.io.svg?color=brightgreen&#34; alt=&#34;Closed issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/pulls?q=is%3Apr+is%3Aclosed&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr-closed-raw/digitalocean/nginxconfig.io.svg?color=brightgreen&#34; alt=&#34;Closed PR&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-raw/digitalocean/nginxconfig.io.svg?sanitize=true&#34; alt=&#34;Open issues&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues-pr-raw/digitalocean/nginxconfig.io.svg?sanitize=true&#34; alt=&#34;Open PR&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://do.co/nginxconfig&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/digitalocean/nginxconfig.io/master/src/static/banner.png&#34; alt=&#34;nginxconfig&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;‚öôÔ∏è NGINX configuration generator on steroids üíâ&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The only tool you&#39;ll ever need to configure your NGINX server. &lt;br&gt; &lt;a href=&#34;https://do.co/nginxconfig&#34;&gt;&lt;strong&gt;do.co/nginxconfig ¬ª&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/issues/new?template=report-a-bug.md&#34;&gt;Report a bug&lt;/a&gt; ¬∑ &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/issues/new?template=request-a-feature.md&#34;&gt;Request a feature&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;‚ú® &lt;a href=&#34;https://do.co/nginxconfig&#34;&gt;NGINX Config&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;NGINX is so much more than just a webserver. You already knew that, probably.&lt;/p&gt; &#xA;&lt;p&gt;We love NGINX, because:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Low memory usage&lt;/li&gt; &#xA; &lt;li&gt;High concurrency&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous event-driven architecture&lt;/li&gt; &#xA; &lt;li&gt;Load balancing&lt;/li&gt; &#xA; &lt;li&gt;Reverse proxying&lt;/li&gt; &#xA; &lt;li&gt;FastCGI support with caching (PHP)&lt;/li&gt; &#xA; &lt;li&gt;Amazing fast handling of static files&lt;/li&gt; &#xA; &lt;li&gt;TLS/SSL with SNI&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A lot of features with corresponding configuration directives. You can deep dive into the &lt;a href=&#34;http://nginx.org/en/docs/&#34;&gt;NGINX documentation&lt;/a&gt; right now OR you can &lt;a href=&#34;https://do.co/nginxconfig&#34;&gt;use this tool&lt;/a&gt; to check how NGINX works, observe how your inputs are affecting the output, and &lt;strong&gt;generate the best config for your specific use-case&lt;/strong&gt; (in parallel you can also still use the docs).&lt;/p&gt; &#xA;&lt;h2&gt;üöÄ Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;GOTO&lt;/code&gt; &lt;strong&gt;&lt;a href=&#34;https://do.co/nginxconfig&#34;&gt;&lt;code&gt;do.co/nginxconfig&lt;/code&gt;&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt; HTTPS, HTTP/2, IPv6, certbot, HSTS, security headers, SSL profiles, OCSP resolvers, caching, gzip, brotli, fallback routing, reverse proxy, www/non-www redirect, CDN, PHP (TCP/socket, WordPress, Drupal, Magento, Joomla), Node.js support, Python (Django) server, etc.&lt;/p&gt; &#xA;&lt;h2&gt;üë®‚Äçüíª Author&lt;/h2&gt; &#xA;&lt;h3&gt;Rewrite &amp;amp; Maintenance&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Matt (IPv4) Cowley &amp;lt;&lt;a href=&#34;mailto:me@mattcowley.co.uk&#34;&gt;me@mattcowley.co.uk&lt;/a&gt;&amp;gt; (&lt;a href=&#34;https://mattcowley.co.uk&#34;&gt;https://mattcowley.co.uk&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/MattIPv4&#34;&gt;@MattIPv4&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Original version&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;B√°lint Szekeres &amp;lt;&lt;a href=&#34;mailto:balint@szekeres.me&#34;&gt;balint@szekeres.me&lt;/a&gt;&amp;gt; (&lt;a href=&#34;https://balint.szekeres.me&#34;&gt;https://balint.szekeres.me&lt;/a&gt;)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GitHub: &lt;a href=&#34;https://github.com/0xB4LINT&#34;&gt;@0xB4LINT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;LinkedIn: &lt;a href=&#34;https://www.linkedin.com/in/0xB4LINT/&#34;&gt;@0xB4LINT&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ñ∂Ô∏è Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/digitalocean/nginxconfig.io.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install NPM packages&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the development server &lt;em&gt;(with file watchers)&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the development site &lt;strong&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;localhost:8080&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Lint your code &lt;em&gt;(eslint &amp;amp; stylelint)&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build for production &lt;em&gt;(to the &lt;code&gt;dist&lt;/code&gt; directory)&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are what make the open source community such an amazing place to be learn, inspire, and create. Any contributions you make are &lt;strong&gt;greatly appreciated&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the Project&lt;/li&gt; &#xA; &lt;li&gt;Create your Feature Branch (&lt;code&gt;git checkout -b feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Commit your Changes (&lt;code&gt;git commit -m &#39;Add some AmazingFeature&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Push to the Branch (&lt;code&gt;git push origin feature/AmazingFeature&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Open a Pull Request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;‚öíÔ∏è Built With&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt; - Template handling &amp;amp; app generation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bulma.io/&#34;&gt;Bulma&lt;/a&gt; - Base styling, customised by &lt;a href=&#34;https://github.com/do-community/do-bulma&#34;&gt;do-bulma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prismjs.com/&#34;&gt;Prism&lt;/a&gt; - Bash &amp;amp; NGINX syntax highlighting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ssl-config.mozilla.org&#34;&gt;Mozilla SSL Configuration Generator v5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mozilla.github.io/server-side-tls/ssl-config-generator/&#34;&gt;Mozilla SSL Configuration Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OWASP/CheatSheetSeries/raw/master/cheatsheets/TLS_Cipher_String_Cheat_Sheet.md&#34;&gt;OWASP TLS Cipher String Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://thoughts.t37.net/nginx-optimization-understanding-sendfile-tcp-nodelay-and-tcp-nopush-c55cdd276765&#34;&gt;Nginx Optimization: understanding sendfile, tcp_nodelay and tcp_nopush&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/denji/8359866&#34;&gt;NGINX Tuning For Best Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.keycdn.com/blog/http-security-headers/&#34;&gt;Hardening Your HTTP Security Headers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/h5bp/server-configs-nginx&#34;&gt;h5bp/server-configs-nginx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://security.stackexchange.com/questions/95178/diffie-hellman-parameters-still-calculating-after-24-hours/95184#95184&#34;&gt;Diffie-Hellman DSA-like parameters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hstspreload.org&#34;&gt;hstspreload.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://serverfault.com/questions/787919/optimal-value-for-nginx-worker-connections&#34;&gt;Optimal value for nginx worker_connections&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚≠êÔ∏è Show your support&lt;/h2&gt; &#xA;&lt;p&gt;Give a ‚≠êÔ∏è if this project helped you!&lt;/p&gt; &#xA;&lt;h2&gt;üìù License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright ¬© 2020 &lt;a href=&#34;https://www.digitalocean.com&#34;&gt;DigitalOcean, Inc &amp;lt;contact@digitalocean.com&amp;gt; (https://www.digitalocean.com)&lt;/a&gt;. &lt;br&gt; This project is licensed under the &lt;a href=&#34;https://github.com/digitalocean/nginxconfig.io/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>google/zx</title>
    <updated>2022-06-19T02:00:14Z</updated>
    <id>tag:github.com,2022-06-19:/google/zx</id>
    <link href="https://github.com/google/zx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tool for writing better scripts&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üêö zx&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;#!/usr/bin/env zx&#xA;&#xA;await $`cat package.json | grep name`&#xA;&#xA;let branch = await $`git branch --show-current`&#xA;await $`dep deploy --branch=${branch}`&#xA;&#xA;await Promise.all([&#xA;  $`sleep 1; echo 1`,&#xA;  $`sleep 2; echo 2`,&#xA;  $`sleep 3; echo 3`,&#xA;])&#xA;&#xA;let name = &#39;foo bar&#39;&#xA;await $`mkdir /tmp/${name}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Bash is great, but when it comes to writing scripts, people usually choose a more convenient programming language. JavaScript is a perfect choice, but standard Node.js library requires additional hassle before using. The &lt;code&gt;zx&lt;/code&gt; package provides useful wrappers around &lt;code&gt;child_process&lt;/code&gt;, escapes arguments and gives sensible defaults.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g zx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Requirement&lt;/strong&gt;: Node version &amp;gt;= 16.0.0&lt;/p&gt; &#xA;&lt;h2&gt;Goods&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#command-&#34;&gt;$&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#cd&#34;&gt;cd()&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#fetch&#34;&gt;fetch()&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#question&#34;&gt;question()&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#sleep&#34;&gt;sleep()&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#echo&#34;&gt;echo()&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#stdin&#34;&gt;stdin()&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#within&#34;&gt;within()&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#chalk-package&#34;&gt;chalk&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#fs-package&#34;&gt;fs&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#os-package&#34;&gt;os&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#path-package&#34;&gt;path&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#globby-package&#34;&gt;glob&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#yaml-package&#34;&gt;yaml&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#minimist-package&#34;&gt;minimist&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#which-package&#34;&gt;which&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#__filename--__dirname&#34;&gt;__filename&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#__filename--__dirname&#34;&gt;__dirname&lt;/a&gt; ¬∑ &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#require&#34;&gt;require()&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Write your scripts in a file with &lt;code&gt;.mjs&lt;/code&gt; extension in order to be able to use &lt;code&gt;await&lt;/code&gt; on top level. If you prefer the &lt;code&gt;.js&lt;/code&gt; extension, wrap your scripts in something like &lt;code&gt;void async function () {...}()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Add the following shebang to the beginning of your &lt;code&gt;zx&lt;/code&gt; scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env zx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you will be able to run your script like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x ./script.mjs&#xA;./script.mjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or via the &lt;code&gt;zx&lt;/code&gt; executable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zx ./script.mjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All functions (&lt;code&gt;$&lt;/code&gt;, &lt;code&gt;cd&lt;/code&gt;, &lt;code&gt;fetch&lt;/code&gt;, etc) are available straight away without any imports.&lt;/p&gt; &#xA;&lt;p&gt;Or import globals explicitly (for better autocomplete in VS Code).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;zx/globals&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;$`command` &lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Executes a given command using the &lt;code&gt;spawn&lt;/code&gt; func and returns &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#processpromise&#34;&gt;&lt;code&gt;ProcessPromise&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Everything passed through &lt;code&gt;${...}&lt;/code&gt; will be automatically escaped and quoted.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let name = &#39;foo &amp;amp; bar&#39;&#xA;await $`mkdir ${name}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;There is no need to add extra quotes.&lt;/strong&gt; Read more about it in &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/docs/quotes.md&#34;&gt;quotes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can pass an array of arguments if needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let flags = [&#xA;  &#39;--oneline&#39;,&#xA;  &#39;--decorate&#39;,&#xA;  &#39;--color&#39;,&#xA;]&#xA;await $`git log ${flags}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the executed program returns a non-zero exit code, &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#processoutput&#34;&gt;&lt;code&gt;ProcessOutput&lt;/code&gt;&lt;/a&gt; will be thrown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;try {&#xA;  await $`exit 1`&#xA;} catch (p) {&#xA;  console.log(`Exit code: ${p.exitCode}`)&#xA;  console.log(`Error: ${p.stderr}`)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;ProcessPromise&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class ProcessPromise extends Promise&amp;lt;ProcessOutput&amp;gt; {&#xA;  stdin: Writable&#xA;  stdout: Readable&#xA;  stderr: Readable&#xA;  exitCode: Promise&amp;lt;number&amp;gt;&#xA;  pipe(dest): ProcessPromise&#xA;  kill(): Promise&amp;lt;void&amp;gt;&#xA;  nothrow(): this&#xA;  quiet(): this&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about the &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/docs/process-promise.md&#34;&gt;ProcessPromise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;ProcessOutput&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;class ProcessOutput {&#xA;  readonly stdout: string&#xA;  readonly stderr: string&#xA;  readonly signal: string&#xA;  readonly exitCode: number&#xA;  toString(): string // Combined stdout &amp;amp; stderr.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output of the process is captured as is. Usually, programs print a new line &lt;code&gt;\n&lt;/code&gt; at the end.&lt;br&gt; If &lt;code&gt;ProcessOutput&lt;/code&gt; is used as an argument to some other &lt;code&gt;$&lt;/code&gt; process, &lt;strong&gt;zx&lt;/strong&gt; will use stdout and trim the new line.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let date = await $`date`&#xA;await $`echo Current date is ${date}.`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Functions&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;cd()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Changes the current working directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cd(&#39;/tmp&#39;)&#xA;await $`pwd` // =&amp;gt; /tmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;fetch()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A wrapper around the &lt;a href=&#34;https://www.npmjs.com/package/node-fetch&#34;&gt;node-fetch&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let resp = await fetch(&#39;https://medv.io&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;question()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A wrapper around the &lt;a href=&#34;https://nodejs.org/api/readline.html&#34;&gt;readline&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let bear = await question(&#39;What kind of bear is best? &#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;sleep()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A wrapper around the &lt;code&gt;setTimeout&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await sleep(1000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;echo()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;code&gt;console.log()&lt;/code&gt; alternative which can take &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#processoutput&#34;&gt;ProcessOutput&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let branch = await $`git branch --show-current`&#xA;&#xA;echo`Current branch is ${branch}.`&#xA;// or&#xA;echo(&#39;Current branch is&#39;, branch)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;stdin()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns the stdin as a string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let content = JSON.parse(await stdin())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;within()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Creates a new async context.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await $`pwd` // =&amp;gt; /home/path&#xA;&#xA;within(async () =&amp;gt; {&#xA;  cd(&#39;/tmp&#39;)&#xA;  &#xA;  setTimeout(async () =&amp;gt; {&#xA;    await $`pwd` // =&amp;gt; /tmp&#xA;  }, 1000)&#xA;})&#xA;&#xA;await $`pwd` // =&amp;gt; /home/path&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let version = await within(async () =&amp;gt; {&#xA; $.prefix += &#39;export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; &#39;&#xA; await $`nvm use 16`&#xA; return $`node -v`&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packages&lt;/h2&gt; &#xA;&lt;p&gt;Following packages are available without importing inside scripts.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;chalk&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.npmjs.com/package/chalk&#34;&gt;chalk&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(chalk.blue(&#39;Hello world!&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;fs&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.npmjs.com/package/fs-extra&#34;&gt;fs-extra&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let {version} = await fs.readJson(&#39;./package.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;os&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://nodejs.org/api/os.html&#34;&gt;os&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await $`cd ${os.homedir()} &amp;amp;&amp;amp; mkdir example`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;path&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://nodejs.org/api/path.html&#34;&gt;path&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;await $`mkdir ${path.join(basedir, &#39;output&#39;)}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;globby&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/sindresorhus/globby&#34;&gt;globby&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let packages = await glob([&#39;package.json&#39;, &#39;packages/*/package.json&#39;])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;yaml&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.npmjs.com/package/yaml&#34;&gt;yaml&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(YAML.parse(&#39;foo: bar&#39;).foo)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;minimist&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.npmjs.com/package/minimist&#34;&gt;minimist&lt;/a&gt; package available as global const &lt;code&gt;argv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if( argv.someFlag ){ echo(&#39;yes&#39;) }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;which&lt;/code&gt; package&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/npm/node-which&#34;&gt;which&lt;/a&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let node = await which(&#39;node&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.shell&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies what shell is used. Default is &lt;code&gt;which bash&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$.shell = &#39;/usr/bin/bash&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use a CLI argument: &lt;code&gt;--shell=/bin/bash&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.spawn&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies a &lt;code&gt;spawn&lt;/code&gt; api. Defaults to &lt;code&gt;require(&#39;child_process&#39;).spawn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.prefix&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies the command that will be prefixed to all commands run.&lt;/p&gt; &#xA;&lt;p&gt;Default is &lt;code&gt;set -euo pipefail;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or use a CLI argument: &lt;code&gt;--prefix=&#39;set -e;&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.quote&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies a function for escaping special characters during command substitution.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.verbose&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies verbosity. Default is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In verbose mode, the &lt;code&gt;zx&lt;/code&gt; prints all executed commands alongside with their outputs.&lt;/p&gt; &#xA;&lt;p&gt;Or use a CLI argument &lt;code&gt;--quiet&lt;/code&gt; to set &lt;code&gt;$.verbose = false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.env&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies an environment variables map.&lt;/p&gt; &#xA;&lt;p&gt;Defaults to &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.cwd&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies a current working directory of all processes created with the &lt;code&gt;$&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/#cd&#34;&gt;cd()&lt;/a&gt; func changes only &lt;code&gt;process.cwd()&lt;/code&gt; and if no &lt;code&gt;$.cwd&lt;/code&gt; specified, all &lt;code&gt;$&lt;/code&gt; processes use &lt;code&gt;process.cwd()&lt;/code&gt; by default (same as &lt;code&gt;spawn&lt;/code&gt; behavior).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;$.log&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Specifies a &lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/src/log.ts&#34;&gt;logging function&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Polyfills&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;__filename&lt;/code&gt; &amp;amp; &lt;code&gt;__dirname&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://nodejs.org/api/esm.html&#34;&gt;ESM&lt;/a&gt; modules, Node.js does not provide &lt;code&gt;__filename&lt;/code&gt; and &lt;code&gt;__dirname&lt;/code&gt; globals. As such globals are really handy in scripts, &lt;code&gt;zx&lt;/code&gt; provides these for use in &lt;code&gt;.mjs&lt;/code&gt; files (when using the &lt;code&gt;zx&lt;/code&gt; executable).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;require()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;a href=&#34;https://nodejs.org/api/modules.html#modules_module_createrequire_filename&#34;&gt;ESM&lt;/a&gt; modules, the &lt;code&gt;require()&lt;/code&gt; function is not defined. The &lt;code&gt;zx&lt;/code&gt; provides &lt;code&gt;require()&lt;/code&gt; function, so it can be used with imports in &lt;code&gt;.mjs&lt;/code&gt; files (when using &lt;code&gt;zx&lt;/code&gt; executable).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let {version} = require(&#39;./package.json&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Experimental&lt;/h2&gt; &#xA;&lt;p&gt;The zx also provides a few experimental functions. Please leave a feedback about those features in &lt;a href=&#34;https://github.com/google/zx/discussions/299&#34;&gt;the discussion&lt;/a&gt;. To enable new features via CLI pass &lt;code&gt;--experimental&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;retry()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Retries a callback for a few times. Will return after the first successful attempt, or will throw after specifies attempts count.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { retry, expBackoff } from &#39;zx/experimental&#39;&#xA;&#xA;let p = await retry(10, () =&amp;gt; $`curl https://medv.io`)&#xA;&#xA;// With a specified delay between attempts.&#xA;let p = await retry(20, &#39;1s&#39;, () =&amp;gt; $`curl https://medv.io`)&#xA;&#xA;// With an exponential backoff.&#xA;let p = await retry(30, expBackoff(), () =&amp;gt; $`curl https://medv.io`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;spinner()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Starts a simple CLI spinner.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { spinner } from &#39;zx/experimental&#39;&#xA;&#xA;await spinner(() =&amp;gt; $`long-running command`)&#xA;&#xA;// With a message.&#xA;await spinner(&#39;working...&#39;, () =&amp;gt; $`sleep 99`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Passing env variables&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;process.env.FOO = &#39;bar&#39;&#xA;await $`echo $FOO`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing array of values&lt;/h3&gt; &#xA;&lt;p&gt;If array of values passed as argument to &lt;code&gt;$&lt;/code&gt;, items of the array will be escaped individually and concatenated via space.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let files = [...]&#xA;await $`tar cz ${files}`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing from other scripts&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to make use of &lt;code&gt;$&lt;/code&gt; and other functions via explicit imports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;#!/usr/bin/env node&#xA;import {$} from &#39;zx&#39;&#xA;await $`date`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scripts without extensions&lt;/h3&gt; &#xA;&lt;p&gt;If script does not have a file extension (like &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;), zx assumes that it is an &lt;a href=&#34;https://nodejs.org/api/modules.html#modules_module_createrequire_filename&#34;&gt;ESM&lt;/a&gt; module.&lt;/p&gt; &#xA;&lt;h3&gt;Markdown scripts&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;zx&lt;/code&gt; can execute scripts written in markdown (&lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/docs/markdown.md&#34;&gt;docs/markdown.md&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zx docs/markdown.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TypeScript scripts&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import {$} from &#39;zx&#39;&#xA;// Or &#xA;import &#39;zx/globals&#39;&#xA;&#xA;void async function () {&#xA;  await $`ls -la`&#xA;}()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set &lt;a href=&#34;https://nodejs.org/api/packages.html#packages_type&#34;&gt;&lt;code&gt;&#34;type&#34;: &#34;module&#34;&lt;/code&gt;&lt;/a&gt; in &lt;strong&gt;package.json&lt;/strong&gt; and &lt;a href=&#34;https://www.typescriptlang.org/tsconfig/#module&#34;&gt;&lt;code&gt;&#34;module&#34;: &#34;ESNext&#34;&lt;/code&gt;&lt;/a&gt; in &lt;strong&gt;tsconfig.json&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Executing remote scripts&lt;/h3&gt; &#xA;&lt;p&gt;If the argument to the &lt;code&gt;zx&lt;/code&gt; executable starts with &lt;code&gt;https://&lt;/code&gt;, the file will be downloaded and executed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;zx https://medv.io/game-of-life.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executing scripts from stdin&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;zx&lt;/code&gt; supports executing scripts from stdin.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;zx &amp;lt;&amp;lt;&#39;EOF&#39;&#xA;await $`pwd`&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Executing scripts via --eval&lt;/h3&gt; &#xA;&lt;p&gt;Evaluate the following argument as a script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat package.json | zx --eval &#39;let v = JSON.parse(await stdin()).version; echo(v)&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Attaching a profile&lt;/h3&gt; &#xA;&lt;p&gt;By default &lt;code&gt;child_process&lt;/code&gt; does not include aliases and bash functions. But you are still able to do it by hand. Just attach necessary directives to &lt;code&gt;$.prefix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$.prefix += &#39;export NVM_DIR=$HOME/.nvm; source $NVM_DIR/nvm.sh; &#39;&#xA;await $`nvm -v`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using GitHub Actions&lt;/h3&gt; &#xA;&lt;p&gt;Default GitHub Action runner comes with npx installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;jobs:&#xA;  build:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: actions/checkout@v3&#xA;&#xA;    - name: Build&#xA;      env:&#xA;        FORCE_COLOR: 3&#xA;      run: |&#xA;        npx zx &amp;lt;&amp;lt;&#39;EOF&#39;&#xA;        await $`...`&#xA;        EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/google/zx/main/LICENSE&#34;&gt;Apache-2.0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Disclaimer: &lt;em&gt;This is not an officially supported Google product.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
</feed>