<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T02:00:43Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ansh/bionic-reading</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/ansh/bionic-reading</id>
    <link href="https://github.com/ansh/bionic-reading" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Chrome Extension for Bionic Reading on ANY website!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;bionic-reading&lt;/h1&gt; &#xA;&lt;p&gt;A Chrome Extension for Bionic Reading on ANY website!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.producthunt.com/posts/jiffy-reader?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-jiffy-reader&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=347823&amp;amp;theme=light&#34; alt=&#34;Jiffy Reader - Read anything on the internet faster and more clearly! | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.producthunt.com/posts/jiffy-reader?utm_source=badge-top-post-badge&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-jiffy-reader&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/top-post-badge.svg?post_id=347823&amp;amp;theme=light&amp;amp;period=daily&#34; alt=&#34;Jiffy Reader - Read anything on the internet faster and more clearly | Product Hunt&#34; style=&#34;width: 250px; height: 54px;&#34; width=&#34;250&#34; height=&#34;54&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How it works&lt;/h1&gt; &#xA;&lt;p&gt;Below is a screenshot demonstrating how the extension works by bolding out the initial parts of all text on any page when clicked. There are toggles and dials to customize it to your preference so you can enjoy your time reading. You must agree; this is awesome right. &lt;img src=&#34;https://user-images.githubusercontent.com/20851930/170895288-992e802f-4f64-4134-97cc-5144685ecb9e.png&#34; alt=&#34;Screenshot from 2022-05-29 19-13-02&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The best way to install this extension is to follow the instructions below. However, we will also periodically be releasing this extension on the various stores under the name &lt;a href=&#34;https://jiffyreader.com&#34;&gt;Jiffy Reader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#bionic-reading&#34;&gt;bionic-reading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#how-it-works&#34;&gt;How it works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#installation-instructions&#34;&gt;Installation Instructions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#chrome&#34;&gt;Chrome&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#firefox&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#opera&#34;&gt;Opera&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#edge&#34;&gt;Edge&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#what-is-bionic-reading&#34;&gt;What is Bionic Reading?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#reporting-issues-bugs-and-feature-request&#34;&gt;Reporting Issues, bugs and feature request&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#how-to-contribution&#34;&gt;How to Contribution&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#development&#34;&gt;Development&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#configure-vscode-to-run-the-project-when-it-is-opened&#34;&gt;Configure vscode to run the project when it is opened&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#release-a-new-version&#34;&gt;Release a new version&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation Instructions&lt;/h1&gt; &#xA;&lt;h2&gt;Chrome&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Download via &lt;a href=&#34;https://chrome.google.com/webstore/detail/jiffy-reader/lljedihjnnjjefafchaljkhbpfhfkdic&#34;&gt;Chrome Store&lt;/a&gt; or&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Click &lt;a href=&#34;https://github.com/ansh/bionic-reading/releases/latest/download/chrome.zip&#34;&gt;here&lt;/a&gt; to download the latest &lt;code&gt;chrome.zip&lt;/code&gt; release&lt;/li&gt; &#xA; &lt;li&gt;Extract the file&lt;/li&gt; &#xA; &lt;li&gt;Open Chrome&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;chrome://extensions&lt;/code&gt; in the address bar&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;code&gt;developer mode&lt;/code&gt; with the toggle on the top right side of the page if it is not enabled already&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;load unpacked&lt;/code&gt; on the left side of the page&lt;/li&gt; &#xA; &lt;li&gt;Find and select the extracted folder, this extension should now be installed&lt;/li&gt; &#xA; &lt;li&gt;To pin the extension, click the &lt;code&gt;puzzle icon&lt;/code&gt; on the top right of Chrome, then &lt;code&gt;pin the extension&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Firefox&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download &lt;code&gt;firefox.xpi&lt;/code&gt; by right clicking &lt;a href=&#34;https://github.com/ansh/bionic-reading/releases/latest/download/firefox.xpi&#34;&gt;here&lt;/a&gt; and choose &lt;code&gt;Save link as&lt;/code&gt; to download the latest &lt;code&gt;firefox.xpi &lt;/code&gt;release&lt;/li&gt; &#xA; &lt;li&gt;Open Firefox&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;about:debugging#/runtime/this-firefox&lt;/code&gt; in the address bar&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Load Temporary Add-on...&lt;/code&gt; and navigate to the path of the downloaded &lt;code&gt;firefox.xpi&lt;/code&gt; and select it to install it&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Firefox will remove the extension when the browser is closed. This will be solved once we provide a means to download the extension from the firefox store&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Opera&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download: Click &lt;a href=&#34;https://github.com/ansh/bionic-reading/releases/latest/download/opera.crx&#34;&gt;here&lt;/a&gt; to download the latest &lt;code&gt;opera.crx&lt;/code&gt; release&lt;/li&gt; &#xA; &lt;li&gt;Extract the file&lt;/li&gt; &#xA; &lt;li&gt;Open Opera&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;opera://extensions&lt;/code&gt; in the address bar&lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;code&gt;developer mode&lt;/code&gt; with the toggle on the top right side of the page if it is not enabled already&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;load unpacked&lt;/code&gt; on the left side of the page&lt;/li&gt; &#xA; &lt;li&gt;Find and select the extracted folder, this extension should now be installed and listed on the screen&lt;/li&gt; &#xA; &lt;li&gt;To pin the extension, click the &lt;code&gt;cube icon&lt;/code&gt; on the top right of Chrome, then &lt;code&gt;pin the extension&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Edge&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Please follow the steps for &lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#chrome&#34;&gt;chrome&lt;/a&gt; above&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;What is Bionic Reading?&lt;/h1&gt; &#xA;&lt;p&gt;Bionic Reading is a new method facilitating the reading process by guiding the eyes through text with artficial fixation points. As a result, the reader is only focusing on the highlighted initial letters and lets the brain center complete the word. In a digital world dominated by shallow forms of reading, Bionic Reading aims to encourage a more in-depth reading and understanding of written content.&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://bionic-reading.com/about/&#34;&gt;Bionic Reading&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Reporting Issues, bugs and feature request&lt;/h1&gt; &#xA;&lt;p&gt;Visit the issues page to report, bugs or tell us about a feature you would like to see and hopefully we will get to you. Kindly allow for some time after submitting a issue for someone to get back to you. You can also see a list of open issues that you may contribute to by commenting to help out someone with a challenge or developing and opening a PR. &lt;a href=&#34;https://raw.githubusercontent.com/ansh/bionic-reading/master/#how-to-contribution&#34;&gt;See contribution section&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to Contribution&lt;/h1&gt; &#xA;&lt;p&gt;Anyone is welcome to provide contributions to this project by submitting a PR (Pull Request) and it will be happily merged to provide features and fixes to the increadible people using the extension.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the project&lt;/li&gt; &#xA; &lt;li&gt;Open in VS Code or your favourite editor&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm i&lt;/code&gt; to install dependencies&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;yarn dev:chrome&lt;/code&gt; or &lt;code&gt;npm run dev:chrome&lt;/code&gt; to build the development version. Substitute chrome for firefox if that is your prefered browser.&lt;/li&gt; &#xA; &lt;li&gt;Follow the installation version for your prefered browser but navigate to the &lt;code&gt;projectRootFolder/extensions/&lt;/code&gt; and choose the folder that corresponds with your browser.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configure vscode to run the project when it is opened&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;.vscode/tasks.json.example&lt;/code&gt; to &lt;code&gt;.vscode/tasks.json&lt;/code&gt; or enter &lt;code&gt;cp .vscode/tasks.json.example .vscode/tasks.json&lt;/code&gt; in the terminal from the &lt;code&gt;project root&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;vs code command pallet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Type and select &lt;code&gt;Tasks: Manage Automatic Tasks in Folder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click &lt;code&gt;Allow Automatic Tasks in Folder&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Reload vs code.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Release a new version&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change &lt;code&gt;version&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;, eg. &lt;code&gt;&#34;version&#34;: &#34;1.0.0&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push a new tag to GitHub, eg. &lt;code&gt;git tag 1.0.0 &amp;amp;&amp;amp; git push --tags&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The Workflow should be running &lt;a href=&#34;https://github.com/ansh/bionic-reading/actions&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check the release version &lt;a href=&#34;https://github.com/ansh/bionic-reading/releases&#34;&gt;here&lt;/a&gt; and edit release notes.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yangshun/tech-interview-handbook</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/yangshun/tech-interview-handbook</id>
    <link href="https://github.com/yangshun/tech-interview-handbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💯 Curated interview preparation materials for busy engineers&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Tech Interview Handbook&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.techinterviewhandbook.org/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yangshun/tech-interview-handbook/master/website/static/img/logo.svg?sanitize=true&#34; alt=&#34;Tech Interview Handbook&#34; width=&#34;400&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://www.techinterviewhandbook.org/&#34;&gt;Read on the website&lt;/a&gt; &lt;/h3&gt; &#xA; &lt;p&gt; Follow us on &lt;a href=&#34;https://facebook.com/techinterviewhandbook&#34;&gt;Facebook&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/techinterviewhb&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://t.me/techinterviewhandbook&#34;&gt;Telegram&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://www.techinterviewhandbook.org/software-engineering-interview-guide/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yangshun/tech-interview-handbook/master/assets/start-reading-button.jpg&#34; alt=&#34;Start Reading Tech Interview Handbook&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;Not everyone has the time to do a few hundred LeetCode questions. Here are &lt;em&gt;free and curated&lt;/em&gt; technical interview preparation materials for busy engineers, brought to you by me, the author of &lt;a href=&#34;https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU&#34;&gt;Blind 75&lt;/a&gt;. Over 500,000 people have benefitted from this handbook!&lt;/p&gt; &#xA;&lt;p&gt;Besides the usual algorithm questions, other &lt;strong&gt;awesome&lt;/strong&gt; stuff includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/coding-interview-study-plan/&#34;&gt;Best practice questions&lt;/a&gt; for coding interviews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/grind75&#34;&gt;Grind 75&lt;/a&gt; the next evolution of Blind 75, bigger and better.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/coding-interview-prep/&#34;&gt;How to prepare&lt;/a&gt; for coding interviews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/coding-interview-cheatsheet/&#34;&gt;Coding interview best practices&lt;/a&gt; - Straight-to-the-point Do&#39;s and Don&#39;ts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/algorithms/study-cheatsheet/&#34;&gt;Algorithm cheatsheets and tips&lt;/a&gt; categorized by topic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/resume/&#34;&gt;Step-by-step Software Engineer resume guide&lt;/a&gt; to prepare a FAANG-ready resume&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/behavioral-interview-questions/&#34;&gt;Behavioral questions&lt;/a&gt; asked by the top tech companies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.frontendinterviewhandbook.com&#34;&gt;Front end interview preparation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Help from you in contributing content would be very much appreciated!&lt;/p&gt; &#xA;&lt;h2&gt;Why would you read this?&lt;/h2&gt; &#xA;&lt;p&gt;This repository has &lt;strong&gt;practical&lt;/strong&gt; content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful.&lt;/p&gt; &#xA;&lt;p&gt;The information in this repository is condensed. Ultimately, the key to succeeding in technical interviews is consistent practice and I don&#39;t want to bore you with too many words. I tell you the minimum you need to know on how to go about navigating the interview process, you go and practice and land your dream job.&lt;/p&gt; &#xA;&lt;h2&gt;Who is this for?&lt;/h2&gt; &#xA;&lt;p&gt;Anybody who wants to land a job at a tech company but is new to technical interviews, seasoned engineers who have not been on the other side of the interviewing table in a while and want to get back into the game, or anyone who wants to be better at technical interviewing.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;💡 Stop grinding LeetCode aimlessly! Study coding question patterns efficiently with &lt;a href=&#34;https://www.educative.io/courses/grokking-the-coding-interview?aff=x23W&#34;&gt;Grokking the Coding Interview&lt;/a&gt; on Educative 💡 &lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How is this repository different?&lt;/h2&gt; &#xA;&lt;p&gt;There are many awesome books like &lt;a href=&#34;http://www.crackingthecodinginterview.com/&#34;&gt;Cracking the Coding Interview&lt;/a&gt; and interview-related repositories out there on GitHub, what makes this repository different? The difference is that many existing interview repositories contain mainly links to external resources whereas this repository contains top-quality curated content directly for your consumption.&lt;/p&gt; &#xA;&lt;p&gt;Also, existing resources focus mainly on algorithm questions and lack coverage for more domain-specific and non-technical questions. This handbook aims to cover content beyond the typical algorithmic coding questions. 😎&lt;/p&gt; &#xA;&lt;h2&gt;Looking for interview courses?&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;AlgoMonster&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;AlgoMonster aims to help you ace the technical interview &lt;strong&gt;in the shortest time possible&lt;/strong&gt;. By Google engineers, AlgoMonster uses a data-driven approach to teach you the most useful key question patterns and has contents to help you quickly revise basic data structures and algorithms. Best of all, AlgoMonster is not subscription-based - pay a one-time fee and get &lt;strong&gt;lifetime access&lt;/strong&gt;. &lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;&lt;strong&gt;Join today for a 70% discount →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.educative.io/courses/grokking-the-coding-interview?aff=x23W&#34;&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This course by Educative expands upon the questions on the recommended practice questions but approaches the practicing from a questions pattern perspective, which is an approach I also agree with for learning and have personally used to get better at coding interviews. The course allows you to practice selected questions in Java, Python, C++, JavaScript and also provides sample solutions in those languages. &lt;strong&gt;Learn and understand patterns, not memorize answers!&lt;/strong&gt; &lt;a href=&#34;https://www.educative.io/courses/grokking-the-coding-interview?aff=x23W&#34;&gt;&lt;strong&gt;Join today for a 10% discount →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Looking for Front End content?&lt;/h2&gt; &#xA;&lt;p&gt;Front-end-related content has been moved to a separate website - &lt;a href=&#34;https://frontendinterviewhandbook.com&#34;&gt;Front End Interview Handbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Looking for System Design content?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re still working on System Design content. In the meanwhile, check out Educative&#39;s &lt;a href=&#34;https://www.educative.io/courses/grokking-the-system-design-interview?aff=x23W&#34;&gt;Grokking the System Design Interview course&lt;/a&gt;, which in our opinion is one of the most useful resources for getting started on system design interviews preparation.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/facebook/docusaurus&#34;&gt;Docusaurus&lt;/a&gt; website has been created to provide a better reading experience. Check out the website &lt;a href=&#34;https://www.techinterviewhandbook.org&#34;&gt;here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;💡 Stop the grind and study with a plan! Developed by Google engineers, &lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;AlgoMonster&lt;/a&gt; is the fastest way to get a software engineering job. &lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;Join today for a 70% discount!&lt;/a&gt; 💡&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in how data structures are implemented, check out &lt;a href=&#34;https://github.com/yangshun/lago&#34;&gt;Lago&lt;/a&gt;, a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that can be used in production and also a reference resource for revising Data Structures and Algorithms.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are no formal contributing guidelines at the moment as things are still in flux and we might find a better approach to structure content as we go along. You are welcome to contribute whatever you think will be helpful to fellow engineers. If you would like to contribute content for different domains, feel free to create an issue or submit a pull request and we can discuss further.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contributed. [&lt;a href=&#34;https://raw.githubusercontent.com/yangshun/tech-interview-handbook/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/yangshun/tech-interview-handbook/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/tech-interview-handbook#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tech-interview-handbook#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/yangshun&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: auto !important; width: auto !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo/profile picture will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/tech-interview-handbook#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer (Meta).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Asabeneh/30-Days-Of-React</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/Asabeneh/30-Days-Of-React</id>
    <link href="https://github.com/Asabeneh/30-Days-Of-React" rel="alternate"></link>
    <summary type="html">&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. It requires HTML, CSS, and JavaScript knowledge. You should be comfortable with JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of JS. This challenge may take more than 100…&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;img align=&#34;right&#34; width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/30_days_of_react.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; 30 Days Of React&lt;/h1&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://www.linkedin.com/in/asabeneh/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://twitter.com/Asabeneh&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/asabeneh?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;sub&gt;Author: &lt;a href=&#34;https://www.linkedin.com/in/asabeneh/&#34; target=&#34;_blank&#34;&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; October, 2020&lt;/small&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;# Day&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Topics&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&#34;&gt;How to Use Repo&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;JavaScript Refresher&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md&#34;&gt;Getting Started React&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md&#34;&gt;Setting Up&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md&#34;&gt;Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md&#34;&gt;Props&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md&#34;&gt;List, Map and Keys&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md&#34;&gt;Class Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md&#34;&gt;States&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md&#34;&gt;Conditional Rendering&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md&#34;&gt;React Project Folder Structure&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md&#34;&gt;Events&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md&#34;&gt;Forms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md&#34;&gt;Controlled and Uncontrolled Component&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md&#34;&gt;Component Life Cycles&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md&#34;&gt;Third Party Packages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md&#34;&gt;Higher Order Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md&#34;&gt;React Router&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md&#34;&gt;Fetch versus Axios&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md&#34;&gt;Projects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md&#34;&gt;Projects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md&#34;&gt;Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md&#34;&gt;Forms Using Hook&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md&#34;&gt;Fetching Data Using Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md&#34;&gt;Project using Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md&#34;&gt;Custom Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md&#34;&gt;Context&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md&#34;&gt;Ref&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md&#34;&gt;project&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md&#34;&gt;Explore&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md&#34;&gt;Conclusions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.paypal.me/asabeneh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/paypal_lg.png&#34; alt=&#34;Paypal Logo&#34; style=&#34;width:10%&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&#34;&gt;How to Use Repo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo&#34;&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork&#34;&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch&#34;&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions&#34;&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions&#34;&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily&#34;&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs&#34;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser&#34;&gt;Browser&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome&#34;&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console&#34;&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console&#34;&gt;Writing Code on Browser Console&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog&#34;&gt;Console.log&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments&#34;&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics&#34;&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor&#34;&gt;Code Editor&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code&#34;&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code&#34;&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href=&#34;https://t.me/thirtydaysofreact&#34;&gt;telegram group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; &#xA;&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don&#39;t be surprised because I don&#39;t do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href=&#34;https://github.com/Asabeneh/30-Days-Of-JavaScript&#34;&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before you dive into this course, you may check the &lt;a href=&#34;https://t.me/thirtydaysofreact/992&#34;&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Motivation&lt;/li&gt; &#xA; &lt;li&gt;A computer&lt;/li&gt; &#xA; &lt;li&gt;Internet&lt;/li&gt; &#xA; &lt;li&gt;A browser&lt;/li&gt; &#xA; &lt;li&gt;A code editor&lt;/li&gt; &#xA; &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Use Repo&lt;/h2&gt; &#xA;&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; &#xA;&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; &#xA;&lt;h3&gt;Clone your Fork&lt;/h3&gt; &#xA;&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# note that an `ssh` link is used here, but an `https` link will work the same&#xA;git clone git@github.com:username/30-Days-Of-React.git&#xA;cd 30-Days-Of-React&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a New Branch&lt;/h3&gt; &#xA;&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; &#xA;&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories&#xA;touch solutions/day-01/level1.js # touch creates a file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; &#xA;&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add solutions/day-01/level1.js&#xA;git commit -m &#34;chore: exercise level1 complete&#34;&#xA;git push origin exercise-solutions # branch `exercise-solutions` was created earlier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; &#xA;&lt;p&gt;This repo will be updated daily throughout the month. When a new day&#39;s content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. switch to master branch&#xA;git checkout master&#xA;# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`&#xA;git remote -v&#xA;# 3. if not, add a link to original, you can choose any name for the link or use `upstream`&#xA;git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git&#xA;# 4. check again to confirm link added&#xA;git remote -v&#xA;# 5. now you can fetch updates from original repo, assuming you named this `upstream`&#xA;git fetch upstream&#xA;# 6. merge the updates to your local master branch&#xA;git merge upstream/master master&#xA;# 7. push the merged updates to your Forked copy on GitHub&#xA;git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git merge upstream/master exercise-solutions&#xA;git push origin exercise-solutions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Install Node.js&lt;/h3&gt; &#xA;&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png&#34; alt=&#34;Node download&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After downloading double click and install&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png&#34; alt=&#34;Install node&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asabeneh $ node -v&#xA;v12.14.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png&#34; alt=&#34;Google Chrome&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; &#xA;&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png&#34; alt=&#34;Opening chrome&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don&#39;t be lazy to open it during development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Mac&#xA;Command+Option+J&#xA;&#xA;Windows/Linux:&#xA;Ctl+Shift+J&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png&#34; alt=&#34;Opening console&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png&#34; alt=&#34;write code on console&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; &#xA;&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Mac&#xA;Command+Option+I&#xA;&#xA;Windows:&#xA;Ctl+Shift+I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Console.log&lt;/h5&gt; &#xA;&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed &#39;Hello, World&#39; as input data or argument in the console.log() function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png&#34; alt=&#34;console log multiple arguments&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello&#39;, &#39;World&#39;, &#39;!&#39;)&#xA;console.log(&#39;HAPPY&#39;, &#39;NEW&#39;, &#39;YEAR&#39;, 2020)&#xA;console.log(&#39;Welcome&#39;, &#39;to&#39;, 30, &#39;Days&#39;, &#39;Of&#39;, &#39;JavaScript&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don&#39;t keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; &#xA;&lt;h5&gt;Comments&lt;/h5&gt; &#xA;&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;// This is the first comment&lt;br&gt; // This is the second comment&lt;br&gt; // I am a single line comment&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/* This is a multiline comment&lt;br&gt; Multiline comments can take multiple lines&lt;br&gt; JavaScript is the language of the web&lt;br&gt; */&lt;/p&gt; &#xA;&lt;h5&gt;Syntax&lt;/h5&gt; &#xA;&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png&#34; alt=&#34;Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;console.log(&#39;Hello, World!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;console.log(&#39;Hello, World!&#39;)&#xA;console.log(`Hello, World!`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arithmetics&lt;/h4&gt; &#xA;&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png&#34; alt=&#34;Arithmetic&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(2 + 3) // Addition&#xA;console.log(3 - 2) // Subtraction&#xA;console.log(2 * 3) // Multiplication&#xA;console.log(3 / 2) // Division&#xA;console.log(3 % 2) // Modulus - finding remainder&#xA;console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code Editor&lt;/h3&gt; &#xA;&lt;p&gt;We can write our codes on the browser console, but it won&#39;t do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png&#34; alt=&#34;Vscode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; &#xA;&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png&#34; alt=&#34;Vscode ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png&#34; alt=&#34;Vscode add project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png&#34; alt=&#34;Vscode open project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png&#34; alt=&#34;script file&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png&#34; alt=&#34;Installing Live Server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png&#34; alt=&#34;running script&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png&#34; alt=&#34;coding running&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let&#39;s do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md&#34;&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; &#xA;&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>troyeguo/koodo-reader</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/troyeguo/koodo-reader</id>
    <link href="https://github.com/troyeguo/koodo-reader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern ebook manager and reader with sync and backup capacities for Windows, macOS, Linux and Web&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/troyeguo/koodo-reader/raw/master/README_cn.md&#34;&gt;简体中文&lt;/a&gt; | English&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/07/30/ZKNMmz54Q3uqlrW.png&#34; width=&#34;96px&#34; height=&#34;96px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Koodo Reader &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; A cross-platform ebook reader &lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://koodo.960960.xyz/en&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://reader.960960.xyz&#34;&gt;Preview&lt;/a&gt; | &lt;a href=&#34;https://troyeguo.notion.site/d1c19a132932465bae1d89dd963c92ea?v=ca8aa69cf25849c18c92b92ba868663b&#34;&gt;Roadmap&lt;/a&gt; | &lt;a href=&#34;https://troyeguo.notion.site/Koodo-Reader-Document-9c767af3d66c459db996bdd08a34c34b&#34;&gt;Document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/I37WPYFJcC1jltn.png&#34;&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/G7WvUQFTrEpSCKg.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;EPUB (&lt;strong&gt;.epub&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Scanned document (&lt;strong&gt;.pdf&lt;/strong&gt;, &lt;strong&gt;.djvu&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;DRM-free Mobipocket (&lt;strong&gt;.mobi&lt;/strong&gt;) and Kindle (&lt;strong&gt;.azw3&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Plain text (&lt;strong&gt;.txt&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;FictionBook (&lt;strong&gt;.fb2&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Comic book archive (&lt;strong&gt;.cbr&lt;/strong&gt;, &lt;strong&gt;.cbz&lt;/strong&gt;, &lt;strong&gt;.cbt&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Rich text (&lt;strong&gt;.md&lt;/strong&gt;, &lt;strong&gt;.docx&lt;/strong&gt;, &lt;strong&gt;.rtf&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Hyper Text (&lt;strong&gt;.html&lt;/strong&gt;, &lt;strong&gt;.xml&lt;/strong&gt;, &lt;strong&gt;.xhtml&lt;/strong&gt;, &lt;strong&gt;.htm&lt;/strong&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Platform support: &lt;strong&gt;Windows&lt;/strong&gt;, &lt;strong&gt;macOS&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt; and &lt;strong&gt;Web&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Save your data to &lt;strong&gt;Dropbox&lt;/strong&gt; or &lt;strong&gt;Webdav&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customize the source folder and synchronize among multiple devices using OneDrive, iCloud, Dropbox, etc.&lt;/li&gt; &#xA; &lt;li&gt;Single-column, two-column, or continuous scrolling layouts&lt;/li&gt; &#xA; &lt;li&gt;Text-to-speech, translation, progress slider, touch screen support, batch import&lt;/li&gt; &#xA; &lt;li&gt;Add bookmarks, notes, highlights to your books&lt;/li&gt; &#xA; &lt;li&gt;Adjust font size, font family, line-spacing, paragraph spacing, background color, text color, margins, and brightness&lt;/li&gt; &#xA; &lt;li&gt;Night mode and theme color&lt;/li&gt; &#xA; &lt;li&gt;Text highlight, underline, boldness, italics and shadow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Desktop Version: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stable Version (Recommended): &lt;a href=&#34;https://koodo.960960.xyz/en&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Developer Version: &lt;a href=&#34;https://github.com/troyeguo/koodo-reader/releases/latest&#34;&gt;Download&lt;/a&gt; ( With new feature and bug fix, but may induce some unknown bugs)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Web Version：&lt;a href=&#34;https://reader.960960.xyz&#34;&gt;Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install with Scoop:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop bucket add dorado https://github.com/chawyehsu/dorado&#xA;scoop install dorado/koodo-reader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with Homebrew:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install --cask koodo-reader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with Docker:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;b&gt;List mode&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/JyNHfThMs184Um2.png&#34;&gt; &#xA; &lt;b&gt;Cover mode&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/76zkDEAobd4qsmR.png&#34;&gt; &#xA; &lt;b&gt;Reader menu&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/LeEN9gnOvFmfVWA.png&#34;&gt; &#xA; &lt;b&gt;Backup and restore&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/aRIAiYT2dGJQhC1.png&#34;&gt; &#xA; &lt;b&gt;Dark mode and theme color&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/ynqUNpX93xZefdw.png&#34;&gt; &#xA; &lt;b&gt;Note management&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/09/sARQBoefvGklHwC.png&#34;&gt; &#xA;&lt;/div&gt;  &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;Make sure that you have installed yarn and git, node&#39;s version on your computer is larger than 14.0.0.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the repo&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/troyeguo/koodo-reader.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter desktop mode&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter web mode&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn&#xA;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;Koodo Reader use POEditor to manage localization, Visit &lt;a href=&#34;https://poeditor.com/join/project?hash=fk4qbQTlsk&#34;&gt;here&lt;/a&gt; to edit current translation or add new language&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>listen1/listen1_desktop</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/listen1/listen1_desktop</id>
    <link href="https://github.com/listen1/listen1_desktop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;one for all free music in china (Windows, Mac, Linux desktop)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Listen 1 音乐播放器（桌面版）&lt;/h1&gt; &#xA;&lt;p&gt;Listen 1 可以搜索和播放来自多个主流音乐网站的歌曲，让你的曲库更全面。并支持收藏功能，方便的创建自己的歌单。&lt;/p&gt; &#xA;&lt;p&gt;支持音乐平台&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;网易云音乐&lt;/li&gt; &#xA; &lt;li&gt;QQ 音乐&lt;/li&gt; &#xA; &lt;li&gt;酷狗音乐&lt;/li&gt; &#xA; &lt;li&gt;酷我音乐&lt;/li&gt; &#xA; &lt;li&gt;bilibili&lt;/li&gt; &#xA; &lt;li&gt;咪咕音乐&lt;/li&gt; &#xA; &lt;li&gt;千千音乐&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;http://i.imgur.com/Ae6ItmA.png&#34; alt=&#34;imgur&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持 Windows，Mac，Linux 平台&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;安装方式&lt;/h1&gt; &#xA;&lt;p&gt;访问 github 主页下载安装包安装&lt;/p&gt; &#xA;&lt;p&gt;网址：&lt;a href=&#34;https://listen1.github.io/listen1&#34;&gt;https://listen1.github.io/listen1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;生成完整代码&lt;/h2&gt; &#xA;&lt;p&gt;项目中包含了 listen1_chrome_extension 的引用，在 checkout 后需要把引用库初始化&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;运行&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;生成安装包&lt;/h2&gt; &#xA;&lt;p&gt;全平台安装包&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Windows 安装包&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dist:win32&#xA;npm run dist:win64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mac 安装包&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dist:mac&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Linux 安装包&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dist:linux32&#xA;npm run dist:linux64&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ryanmcdermott/clean-code-javascript</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/ryanmcdermott/clean-code-javascript</id>
    <link href="https://github.com/ryanmcdermott/clean-code-javascript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛁 Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-javascript&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid&#34;&gt;SOLID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.osnews.com/images/comics/wtfm.jpg&#34; alt=&#34;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for JavaScript. This is not a style guide. It&#39;s a guide to producing &lt;a href=&#34;https://github.com/ryanmcdermott/3rs-of-software-architecture&#34;&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.&lt;/p&gt; &#xA;&lt;p&gt;One more thing: knowing these won&#39;t immediately make you a better software developer, and working with them for many years doesn&#39;t mean you won&#39;t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don&#39;t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const yyyymmdstr = moment().format(&#34;YYYY/MM/DD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const currentDate = moment().format(&#34;YYYY/MM/DD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getUserInfo();&#xA;getClientData();&#xA;getCustomerRecord();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&#34;https://github.com/danielstjules/buddy.js&#34;&gt;buddy.js&lt;/a&gt; and &lt;a href=&#34;https://github.com/eslint/eslint/raw/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md&#34;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// What the heck is 86400000 for?&#xA;setTimeout(blastOff, 86400000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Declare them as capitalized named constants.&#xA;const MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;&#xA;&#xA;setTimeout(blastOff, MILLISECONDS_PER_DAY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;&#xA;saveCityZipCode(&#xA;  address.match(cityZipCodeRegex)[1],&#xA;  address.match(cityZipCodeRegex)[2]&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;&#xA;const [_, city, zipCode] = address.match(cityZipCodeRegex) || [];&#xA;saveCityZipCode(city, zipCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const locations = [&#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34;];&#xA;locations.forEach(l =&amp;gt; {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  // Wait, what is `l` for again?&#xA;  dispatch(l);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const locations = [&#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34;];&#xA;locations.forEach(location =&amp;gt; {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  dispatch(location);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Car = {&#xA;  carMake: &#34;Honda&#34;,&#xA;  carModel: &#34;Accord&#34;,&#xA;  carColor: &#34;Blue&#34;&#xA;};&#xA;&#xA;function paintCar(car, color) {&#xA;  car.carColor = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Car = {&#xA;  make: &#34;Honda&#34;,&#xA;  model: &#34;Accord&#34;,&#xA;  color: &#34;Blue&#34;&#xA;};&#xA;&#xA;function paintCar(car, color) {&#xA;  car.color = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;Default arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for &lt;code&gt;undefined&lt;/code&gt; arguments. Other &#34;falsy&#34; values such as &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&#34;&#34;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, will not be replaced by a default value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMicrobrewery(name) {&#xA;  const breweryName = name || &#34;Hipster Brew Co.&#34;;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMicrobrewery(name = &#34;Hipster Brew Co.&#34;) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.&lt;/p&gt; &#xA;&lt;p&gt;To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When someone looks at the function signature, it&#39;s immediately clear what properties are being used.&lt;/li&gt; &#xA; &lt;li&gt;It can be used to simulate named parameters.&lt;/li&gt; &#xA; &lt;li&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/li&gt; &#xA; &lt;li&gt;Linters can warn you about unused properties, which would be impossible without destructuring.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMenu(title, body, buttonText, cancellable) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu(&#34;Foo&#34;, &#34;Bar&#34;, &#34;Baz&#34;, true);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMenu({ title, body, buttonText, cancellable }) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({&#xA;  title: &#34;Foo&#34;,&#xA;  body: &#34;Bar&#34;,&#xA;  buttonText: &#34;Baz&#34;,&#xA;  cancellable: true&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should do one thing&lt;/h3&gt; &#xA;&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function emailClients(clients) {&#xA;  clients.forEach(client =&amp;gt; {&#xA;    const clientRecord = database.lookup(client);&#xA;    if (clientRecord.isActive()) {&#xA;      email(client);&#xA;    }&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function emailActiveClients(clients) {&#xA;  clients.filter(isActiveClient).forEach(email);&#xA;}&#xA;&#xA;function isActiveClient(client) {&#xA;  const clientRecord = database.lookup(client);&#xA;  return clientRecord.isActive();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function addToDate(date, month) {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;&#xA;// It&#39;s hard to tell from the function name what is added&#xA;addToDate(date, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function addMonthToDate(month, date) {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;addMonthToDate(1, date);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function parseBetterJSAlternative(code) {&#xA;  const REGEXES = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  const statements = code.split(&#34; &#34;);&#xA;  const tokens = [];&#xA;  REGEXES.forEach(REGEX =&amp;gt; {&#xA;    statements.forEach(statement =&amp;gt; {&#xA;      // ...&#xA;    });&#xA;  });&#xA;&#xA;  const ast = [];&#xA;  tokens.forEach(token =&amp;gt; {&#xA;    // lex...&#xA;  });&#xA;&#xA;  ast.forEach(node =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function parseBetterJSAlternative(code) {&#xA;  const tokens = tokenize(code);&#xA;  const syntaxTree = parse(tokens);&#xA;  syntaxTree.forEach(node =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&#xA;function tokenize(code) {&#xA;  const REGEXES = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  const statements = code.split(&#34; &#34;);&#xA;  const tokens = [];&#xA;  REGEXES.forEach(REGEX =&amp;gt; {&#xA;    statements.forEach(statement =&amp;gt; {&#xA;      tokens.push(/* ... */);&#xA;    });&#xA;  });&#xA;&#xA;  return tokens;&#xA;}&#xA;&#xA;function parse(tokens) {&#xA;  const syntaxTree = [];&#xA;  tokens.forEach(token =&amp;gt; {&#xA;    syntaxTree.push(/* ... */);&#xA;  });&#xA;&#xA;  return syntaxTree;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove duplicate code&lt;/h3&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function showDeveloperList(developers) {&#xA;  developers.forEach(developer =&amp;gt; {&#xA;    const expectedSalary = developer.calculateExpectedSalary();&#xA;    const experience = developer.getExperience();&#xA;    const githubLink = developer.getGithubLink();&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      githubLink&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&#xA;function showManagerList(managers) {&#xA;  managers.forEach(manager =&amp;gt; {&#xA;    const expectedSalary = manager.calculateExpectedSalary();&#xA;    const experience = manager.getExperience();&#xA;    const portfolio = manager.getMBAProjects();&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      portfolio&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function showEmployeeList(employees) {&#xA;  employees.forEach(employee =&amp;gt; {&#xA;    const expectedSalary = employee.calculateExpectedSalary();&#xA;    const experience = employee.getExperience();&#xA;&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience&#xA;    };&#xA;&#xA;    switch (employee.type) {&#xA;      case &#34;manager&#34;:&#xA;        data.portfolio = employee.getMBAProjects();&#xA;        break;&#xA;      case &#34;developer&#34;:&#xA;        data.githubLink = employee.getGithubLink();&#xA;        break;&#xA;    }&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Set default objects with Object.assign&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const menuConfig = {&#xA;  title: null,&#xA;  body: &#34;Bar&#34;,&#xA;  buttonText: null,&#xA;  cancellable: true&#xA;};&#xA;&#xA;function createMenu(config) {&#xA;  config.title = config.title || &#34;Foo&#34;;&#xA;  config.body = config.body || &#34;Bar&#34;;&#xA;  config.buttonText = config.buttonText || &#34;Baz&#34;;&#xA;  config.cancellable =&#xA;    config.cancellable !== undefined ? config.cancellable : true;&#xA;}&#xA;&#xA;createMenu(menuConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const menuConfig = {&#xA;  title: &#34;Order&#34;,&#xA;  // User did not include &#39;body&#39; key&#xA;  buttonText: &#34;Send&#34;,&#xA;  cancellable: true&#xA;};&#xA;&#xA;function createMenu(config) {&#xA;  let finalConfig = Object.assign(&#xA;    {&#xA;      title: &#34;Foo&#34;,&#xA;      body: &#34;Bar&#34;,&#xA;      buttonText: &#34;Baz&#34;,&#xA;      cancellable: true&#xA;    },&#xA;    config&#xA;  );&#xA;  return finalConfig&#xA;  // config now equals: {title: &#34;Order&#34;, body: &#34;Bar&#34;, buttonText: &#34;Send&#34;, cancellable: true}&#xA;  // ...&#xA;}&#xA;&#xA;createMenu(menuConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createFile(name, temp) {&#xA;  if (temp) {&#xA;    fs.create(`./temp/${name}`);&#xA;  } else {&#xA;    fs.create(name);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createFile(name) {&#xA;  fs.create(name);&#xA;}&#xA;&#xA;function createTempFile(name) {&#xA;  createFile(`./temp/${name}`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;let name = &#34;Ryan McDermott&#34;;&#xA;&#xA;function splitIntoFirstAndLastName() {&#xA;  name = name.split(&#34; &#34;);&#xA;}&#xA;&#xA;splitIntoFirstAndLastName();&#xA;&#xA;console.log(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function splitIntoFirstAndLastName(name) {&#xA;  return name.split(&#34; &#34;);&#xA;}&#xA;&#xA;const name = &#34;Ryan McDermott&#34;;&#xA;const newName = splitIntoFirstAndLastName(name);&#xA;&#xA;console.log(name); // &#39;Ryan McDermott&#39;;&#xA;console.log(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it&#39;s important to handle them carefully when they&#39;re passed as parameters to a function. A JavaScript function can change an object&#39;s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Suppose there&#39;s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let&#39;s imagine a bad situation:&lt;/p&gt; &#xA;&lt;p&gt;The user clicks the &#34;Purchase&#34; button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an &#34;Add to Cart&#34; button on an item they don&#39;t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; &#xA;&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn&#39;t be affected by the changes.&lt;/p&gt; &#xA;&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn&#39;t a big issue in practice because there are &lt;a href=&#34;https://facebook.github.io/immutable-js/&#34;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const addItemToCart = (cart, item) =&amp;gt; {&#xA;  cart.push({ item, date: Date.now() });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const addItemToCart = (cart, item) =&amp;gt; {&#xA;  return [...cart, { item, date: Date.now() }];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; &#xA;&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to extend JavaScript&#39;s native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Array.prototype.diff = function diff(comparisonArray) {&#xA;  const hash = new Set(comparisonArray);&#xA;  return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class SuperArray extends Array {&#xA;  diff(comparisonArray) {&#xA;    const hash = new Set(comparisonArray);&#xA;    return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript isn&#39;t a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const programmerOutput = [&#xA;  {&#xA;    name: &#34;Uncle Bobby&#34;,&#xA;    linesOfCode: 500&#xA;  },&#xA;  {&#xA;    name: &#34;Suzie Q&#34;,&#xA;    linesOfCode: 1500&#xA;  },&#xA;  {&#xA;    name: &#34;Jimmy Gosling&#34;,&#xA;    linesOfCode: 150&#xA;  },&#xA;  {&#xA;    name: &#34;Gracie Hopper&#34;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;let totalOutput = 0;&#xA;&#xA;for (let i = 0; i &amp;lt; programmerOutput.length; i++) {&#xA;  totalOutput += programmerOutput[i].linesOfCode;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const programmerOutput = [&#xA;  {&#xA;    name: &#34;Uncle Bobby&#34;,&#xA;    linesOfCode: 500&#xA;  },&#xA;  {&#xA;    name: &#34;Suzie Q&#34;,&#xA;    linesOfCode: 1500&#xA;  },&#xA;  {&#xA;    name: &#34;Jimmy Gosling&#34;,&#xA;    linesOfCode: 150&#xA;  },&#xA;  {&#xA;    name: &#34;Gracie Hopper&#34;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;const totalOutput = programmerOutput.reduce(&#xA;  (totalLines, output) =&amp;gt; totalLines + output.linesOfCode,&#xA;  0&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (fsm.state === &#34;fetching&#34; &amp;amp;&amp;amp; isEmpty(listNode)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function shouldShowSpinner(fsm, listNode) {&#xA;  return fsm.state === &#34;fetching&#34; &amp;amp;&amp;amp; isEmpty(listNode);&#xA;}&#xA;&#xA;if (shouldShowSpinner(fsmInstance, listNodeInstance)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isDOMNodeNotPresent(node) {&#xA;  // ...&#xA;}&#xA;&#xA;if (!isDOMNodeNotPresent(node)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isDOMNodePresent(node) {&#xA;  // ...&#xA;}&#xA;&#xA;if (isDOMNodePresent(node)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    switch (this.type) {&#xA;      case &#34;777&#34;:&#xA;        return this.getMaxAltitude() - this.getPassengerCount();&#xA;      case &#34;Air Force One&#34;:&#xA;        return this.getMaxAltitude();&#xA;      case &#34;Cessna&#34;:&#xA;        return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Airplane {&#xA;  // ...&#xA;}&#xA;&#xA;class Boeing777 extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getPassengerCount();&#xA;  }&#xA;}&#xA;&#xA;class AirForceOne extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude();&#xA;  }&#xA;}&#xA;&#xA;class Cessna extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function travelToTexas(vehicle) {&#xA;  if (vehicle instanceof Bicycle) {&#xA;    vehicle.pedal(this.currentLocation, new Location(&#34;texas&#34;));&#xA;  } else if (vehicle instanceof Car) {&#xA;    vehicle.drive(this.currentLocation, new Location(&#34;texas&#34;));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function travelToTexas(vehicle) {&#xA;  vehicle.move(this.currentLocation, new Location(&#34;texas&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;If you are working with basic primitive values like strings and integers, and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux &#34;type-safety&#34; you get doesn&#39;t make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(val1, val2) {&#xA;  if (&#xA;    (typeof val1 === &#34;number&#34; &amp;amp;&amp;amp; typeof val2 === &#34;number&#34;) ||&#xA;    (typeof val1 === &#34;string&#34; &amp;amp;&amp;amp; typeof val2 === &#34;string&#34;)&#xA;  ) {&#xA;    return val1 + val2;&#xA;  }&#xA;&#xA;  throw new Error(&#34;Must be of type String or Number&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(val1, val2) {&#xA;  return val1 + val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t over-optimize&lt;/h3&gt; &#xA;&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&#34;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&#34;&gt;There are good resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// On old browsers, each iteration with uncached `list.length` would be costly&#xA;// because of `list.length` recomputation. In modern browsers, this is optimized.&#xA;for (let i = 0, len = list.length; i &amp;lt; len; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;for (let i = 0; i &amp;lt; list.length; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function oldRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;function newRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = newRequestModule;&#xA;inventoryTracker(&#34;apples&#34;, req, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function newRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = newRequestModule;&#xA;inventoryTracker(&#34;apples&#34;, req, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use getters and setters&lt;/h3&gt; &#xA;&lt;p&gt;Using getters and setters to access data on objects could be better than simply looking for a property on an object. &#34;Why?&#34; you might ask. Well, here&#39;s an unorganized list of reasons why:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA; &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA; &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA; &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeBankAccount() {&#xA;  // ...&#xA;&#xA;  return {&#xA;    balance: 0&#xA;    // ...&#xA;  };&#xA;}&#xA;&#xA;const account = makeBankAccount();&#xA;account.balance = 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeBankAccount() {&#xA;  // this one is private&#xA;  let balance = 0;&#xA;&#xA;  // a &#34;getter&#34;, made public via the returned object below&#xA;  function getBalance() {&#xA;    return balance;&#xA;  }&#xA;&#xA;  // a &#34;setter&#34;, made public via the returned object below&#xA;  function setBalance(amount) {&#xA;    // ... validate before updating the balance&#xA;    balance = amount;&#xA;  }&#xA;&#xA;  return {&#xA;    // ...&#xA;    getBalance,&#xA;    setBalance&#xA;  };&#xA;}&#xA;&#xA;const account = makeBankAccount();&#xA;account.setBalance(100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make objects have private members&lt;/h3&gt; &#xA;&lt;p&gt;This can be accomplished through closures (for ES5 and below).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Employee = function(name) {&#xA;  this.name = name;&#xA;};&#xA;&#xA;Employee.prototype.getName = function getName() {&#xA;  return this.name;&#xA;};&#xA;&#xA;const employee = new Employee(&#34;John Doe&#34;);&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;delete employee.name;&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeEmployee(name) {&#xA;  return {&#xA;    getName() {&#xA;      return name;&#xA;    }&#xA;  };&#xA;}&#xA;&#xA;const employee = makeEmployee(&#34;John Doe&#34;);&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;delete employee.name;&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Prefer ES2015/ES6 classes over ES5 plain functions&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Animal = function(age) {&#xA;  if (!(this instanceof Animal)) {&#xA;    throw new Error(&#34;Instantiate Animal with `new`&#34;);&#xA;  }&#xA;&#xA;  this.age = age;&#xA;};&#xA;&#xA;Animal.prototype.move = function move() {};&#xA;&#xA;const Mammal = function(age, furColor) {&#xA;  if (!(this instanceof Mammal)) {&#xA;    throw new Error(&#34;Instantiate Mammal with `new`&#34;);&#xA;  }&#xA;&#xA;  Animal.call(this, age);&#xA;  this.furColor = furColor;&#xA;};&#xA;&#xA;Mammal.prototype = Object.create(Animal.prototype);&#xA;Mammal.prototype.constructor = Mammal;&#xA;Mammal.prototype.liveBirth = function liveBirth() {};&#xA;&#xA;const Human = function(age, furColor, languageSpoken) {&#xA;  if (!(this instanceof Human)) {&#xA;    throw new Error(&#34;Instantiate Human with `new`&#34;);&#xA;  }&#xA;&#xA;  Mammal.call(this, age, furColor);&#xA;  this.languageSpoken = languageSpoken;&#xA;};&#xA;&#xA;Human.prototype = Object.create(Mammal.prototype);&#xA;Human.prototype.constructor = Human;&#xA;Human.prototype.speak = function speak() {};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Animal {&#xA;  constructor(age) {&#xA;    this.age = age;&#xA;  }&#xA;&#xA;  move() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&#xA;class Mammal extends Animal {&#xA;  constructor(age, furColor) {&#xA;    super(age);&#xA;    this.furColor = furColor;&#xA;  }&#xA;&#xA;  liveBirth() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&#xA;class Human extends Mammal {&#xA;  constructor(age, furColor, languageSpoken) {&#xA;    super(age, furColor);&#xA;    this.languageSpoken = languageSpoken;&#xA;  }&#xA;&#xA;  speak() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use method chaining&lt;/h3&gt; &#xA;&lt;p&gt;This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return &lt;code&gt;this&lt;/code&gt; at the end of every function, and you can chain further class methods onto it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Car {&#xA;  constructor(make, model, color) {&#xA;    this.make = make;&#xA;    this.model = model;&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  setMake(make) {&#xA;    this.make = make;&#xA;  }&#xA;&#xA;  setModel(model) {&#xA;    this.model = model;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  save() {&#xA;    console.log(this.make, this.model, this.color);&#xA;  }&#xA;}&#xA;&#xA;const car = new Car(&#34;Ford&#34;, &#34;F-150&#34;, &#34;red&#34;);&#xA;car.setColor(&#34;pink&#34;);&#xA;car.save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Car {&#xA;  constructor(make, model, color) {&#xA;    this.make = make;&#xA;    this.model = model;&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  setMake(make) {&#xA;    this.make = make;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  setModel(model) {&#xA;    this.model = model;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    this.color = color;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  save() {&#xA;    console.log(this.make, this.model, this.color);&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;}&#xA;&#xA;const car = new Car(&#34;Ford&#34;, &#34;F-150&#34;, &#34;red&#34;).setColor(&#34;pink&#34;).save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA; &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA; &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Employee {&#xA;  constructor(name, email) {&#xA;    this.name = name;&#xA;    this.email = email;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data. EmployeeTaxData is not a type of Employee&#xA;class EmployeeTaxData extends Employee {&#xA;  constructor(ssn, salary) {&#xA;    super();&#xA;    this.ssn = ssn;&#xA;    this.salary = salary;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class EmployeeTaxData {&#xA;  constructor(ssn, salary) {&#xA;    this.ssn = ssn;&#xA;    this.salary = salary;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class Employee {&#xA;  constructor(name, email) {&#xA;    this.name = name;&#xA;    this.email = email;&#xA;  }&#xA;&#xA;  setTaxData(ssn, salary) {&#xA;    this.taxData = new EmployeeTaxData(ssn, salary);&#xA;  }&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserSettings {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;  }&#xA;&#xA;  changeSettings(settings) {&#xA;    if (this.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserAuth {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class UserSettings {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;    this.auth = new UserAuth(user);&#xA;  }&#xA;&#xA;  changeSettings(settings) {&#xA;    if (this.auth.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;ajaxAdapter&#34;;&#xA;  }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;nodeAdapter&#34;;&#xA;  }&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(adapter) {&#xA;    this.adapter = adapter;&#xA;  }&#xA;&#xA;  fetch(url) {&#xA;    if (this.adapter.name === &#34;ajaxAdapter&#34;) {&#xA;      return makeAjaxCall(url).then(response =&amp;gt; {&#xA;        // transform response and return&#xA;      });&#xA;    } else if (this.adapter.name === &#34;nodeAdapter&#34;) {&#xA;      return makeHttpCall(url).then(response =&amp;gt; {&#xA;        // transform response and return&#xA;      });&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;function makeAjaxCall(url) {&#xA;  // request and return promise&#xA;}&#xA;&#xA;function makeHttpCall(url) {&#xA;  // request and return promise&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;ajaxAdapter&#34;;&#xA;  }&#xA;&#xA;  request(url) {&#xA;    // request and return promise&#xA;  }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;nodeAdapter&#34;;&#xA;  }&#xA;&#xA;  request(url) {&#xA;    // request and return promise&#xA;  }&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(adapter) {&#xA;    this.adapter = adapter;&#xA;  }&#xA;&#xA;  fetch(url) {&#xA;    return this.adapter.request(url).then(response =&amp;gt; {&#xA;      // transform response and return&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Rectangle {&#xA;  constructor() {&#xA;    this.width = 0;&#xA;    this.height = 0;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area) {&#xA;    // ...&#xA;  }&#xA;&#xA;  setWidth(width) {&#xA;    this.width = width;&#xA;  }&#xA;&#xA;  setHeight(height) {&#xA;    this.height = height;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Rectangle {&#xA;  setWidth(width) {&#xA;    this.width = width;&#xA;    this.height = width;&#xA;  }&#xA;&#xA;  setHeight(height) {&#xA;    this.width = height;&#xA;    this.height = height;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeRectangles(rectangles) {&#xA;  rectangles.forEach(rectangle =&amp;gt; {&#xA;    rectangle.setWidth(4);&#xA;    rectangle.setHeight(5);&#xA;    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.&#xA;    rectangle.render(area);&#xA;  });&#xA;}&#xA;&#xA;const rectangles = [new Rectangle(), new Rectangle(), new Square()];&#xA;renderLargeRectangles(rectangles);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Shape {&#xA;  setColor(color) {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class Rectangle extends Shape {&#xA;  constructor(width, height) {&#xA;    super();&#xA;    this.width = width;&#xA;    this.height = height;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Shape {&#xA;  constructor(length) {&#xA;    super();&#xA;    this.length = length;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.length * this.length;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeShapes(shapes) {&#xA;  shapes.forEach(shape =&amp;gt; {&#xA;    const area = shape.getArea();&#xA;    shape.render(area);&#xA;  });&#xA;}&#xA;&#xA;const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];&#xA;renderLargeShapes(shapes);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript doesn&#39;t have interfaces so this principle doesn&#39;t apply as strictly as others. However, it&#39;s important and relevant even with JavaScript&#39;s lack of type system.&lt;/p&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34; Interfaces are implicit contracts in JavaScript because of duck typing.&lt;/p&gt; &#xA;&lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &#34;fat interface&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class DOMTraverser {&#xA;  constructor(settings) {&#xA;    this.settings = settings;&#xA;    this.setup();&#xA;  }&#xA;&#xA;  setup() {&#xA;    this.rootNode = this.settings.rootNode;&#xA;    this.settings.animationModule.setup();&#xA;  }&#xA;&#xA;  traverse() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const $ = new DOMTraverser({&#xA;  rootNode: document.getElementsByTagName(&#34;body&#34;),&#xA;  animationModule() {} // Most of the time, we won&#39;t need to animate when traversing.&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class DOMTraverser {&#xA;  constructor(settings) {&#xA;    this.settings = settings;&#xA;    this.options = settings.options;&#xA;    this.setup();&#xA;  }&#xA;&#xA;  setup() {&#xA;    this.rootNode = this.settings.rootNode;&#xA;    this.setupOptions();&#xA;  }&#xA;&#xA;  setupOptions() {&#xA;    if (this.options.animationModule) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  traverse() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const $ = new DOMTraverser({&#xA;  rootNode: document.getElementsByTagName(&#34;body&#34;),&#xA;  options: {&#xA;    animationModule() {}&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with AngularJS, you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;As stated previously, JavaScript doesn&#39;t have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code&gt;InventoryTracker&lt;/code&gt; will have a &lt;code&gt;requestItems&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class InventoryRequester {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;HTTP&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryTracker {&#xA;  constructor(items) {&#xA;    this.items = items;&#xA;&#xA;    // BAD: We have created a dependency on a specific request implementation.&#xA;    // We should just have requestItems depend on a request method: `request`&#xA;    this.requester = new InventoryRequester();&#xA;  }&#xA;&#xA;  requestItems() {&#xA;    this.items.forEach(item =&amp;gt; {&#xA;      this.requester.requestItem(item);&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;const inventoryTracker = new InventoryTracker([&#34;apples&#34;, &#34;bananas&#34;]);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class InventoryTracker {&#xA;  constructor(items, requester) {&#xA;    this.items = items;&#xA;    this.requester = requester;&#xA;  }&#xA;&#xA;  requestItems() {&#xA;    this.items.forEach(item =&amp;gt; {&#xA;      this.requester.requestItem(item);&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;class InventoryRequesterV1 {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;HTTP&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryRequesterV2 {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;WS&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;// By constructing our dependencies externally and injecting them, we can easily&#xA;// substitute our request module for a fancy new one that uses WebSockets.&#xA;const inventoryTracker = new InventoryTracker(&#xA;  [&#34;apples&#34;, &#34;bananas&#34;],&#xA;  new InventoryRequesterV2()&#xA;);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&#34;https://gotwarlost.github.io/istanbul/&#34;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no excuse to not write tests. There are &lt;a href=&#34;https://jstherightway.org/#testing-tools&#34;&gt;plenty of good JS test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; &#xA;&lt;h3&gt;Single concept per test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import assert from &#34;assert&#34;;&#xA;&#xA;describe(&#34;MomentJS&#34;, () =&amp;gt; {&#xA;  it(&#34;handles date boundaries&#34;, () =&amp;gt; {&#xA;    let date;&#xA;&#xA;    date = new MomentJS(&#34;1/1/2015&#34;);&#xA;    date.addDays(30);&#xA;    assert.equal(&#34;1/31/2015&#34;, date);&#xA;&#xA;    date = new MomentJS(&#34;2/1/2016&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;02/29/2016&#34;, date);&#xA;&#xA;    date = new MomentJS(&#34;2/1/2015&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;03/01/2015&#34;, date);&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import assert from &#34;assert&#34;;&#xA;&#xA;describe(&#34;MomentJS&#34;, () =&amp;gt; {&#xA;  it(&#34;handles 30-day months&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;1/1/2015&#34;);&#xA;    date.addDays(30);&#xA;    assert.equal(&#34;1/31/2015&#34;, date);&#xA;  });&#xA;&#xA;  it(&#34;handles leap year&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;2/1/2016&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;02/29/2016&#34;, date);&#xA;  });&#xA;&#xA;  it(&#34;handles non-leap year&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;2/1/2015&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;03/01/2015&#34;, date);&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use Promises, not callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Callbacks aren&#39;t clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request&#34;;&#xA;import { writeFile } from &#34;fs&#34;;&#xA;&#xA;get(&#xA;  &#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;,&#xA;  (requestErr, response, body) =&amp;gt; {&#xA;    if (requestErr) {&#xA;      console.error(requestErr);&#xA;    } else {&#xA;      writeFile(&#34;article.html&#34;, body, writeErr =&amp;gt; {&#xA;        if (writeErr) {&#xA;          console.error(writeErr);&#xA;        } else {&#xA;          console.log(&#34;File written&#34;);&#xA;        }&#xA;      });&#xA;    }&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;get(&#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;)&#xA;  .then(body =&amp;gt; {&#xA;    return writeFile(&#34;article.html&#34;, body);&#xA;  })&#xA;  .then(() =&amp;gt; {&#xA;    console.log(&#34;File written&#34;);&#xA;  })&#xA;  .catch(err =&amp;gt; {&#xA;    console.error(err);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; &#xA;&lt;p&gt;Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an &lt;code&gt;async&lt;/code&gt; keyword, and then you can write your logic imperatively without a &lt;code&gt;then&lt;/code&gt; chain of functions. Use this if you can take advantage of ES2017/ES8 features today!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;get(&#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;)&#xA;  .then(body =&amp;gt; {&#xA;    return writeFile(&#34;article.html&#34;, body);&#xA;  })&#xA;  .then(() =&amp;gt; {&#xA;    console.log(&#34;File written&#34;);&#xA;  })&#xA;  .catch(err =&amp;gt; {&#xA;    console.error(err);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;async function getCleanCodeArticle() {&#xA;  try {&#xA;    const body = await get(&#xA;      &#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;&#xA;    );&#xA;    await writeFile(&#34;article.html&#34;, body);&#xA;    console.log(&#34;File written&#34;);&#xA;  } catch (err) {&#xA;    console.error(err);&#xA;  }&#xA;}&#xA;&#xA;getCleanCodeArticle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t ignore caught errors&lt;/h3&gt; &#xA;&lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn&#39;t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  console.log(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  // One option (more noisy than console.log):&#xA;  console.error(error);&#xA;  // Another option:&#xA;  notifyUserOfError(error);&#xA;  // Another option:&#xA;  reportErrorToService(error);&#xA;  // OR do all three!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t ignore rejected promises&lt;/h3&gt; &#xA;&lt;p&gt;For the same reason you shouldn&#39;t ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getdata()&#xA;  .then(data =&amp;gt; {&#xA;    functionThatMightThrow(data);&#xA;  })&#xA;  .catch(error =&amp;gt; {&#xA;    console.log(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getdata()&#xA;  .then(data =&amp;gt; {&#xA;    functionThatMightThrow(data);&#xA;  })&#xA;  .catch(error =&amp;gt; {&#xA;    // One option (more noisy than console.log):&#xA;    console.error(error);&#xA;    // Another option:&#xA;    notifyUserOfError(error);&#xA;    // Another option:&#xA;    reportErrorToService(error);&#xA;    // OR do all three!&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are &lt;a href=&#34;https://standardjs.com/rules.html&#34;&gt;tons of tools&lt;/a&gt; to automate this. Use one! It&#39;s a waste of time and money for engineers to argue over formatting.&lt;/p&gt; &#xA;&lt;p&gt;For things that don&#39;t fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.&lt;/p&gt; &#xA;&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const daysInMonth = 30;&#xA;&#xA;const songs = [&#34;Back In Black&#34;, &#34;Stairway to Heaven&#34;, &#34;Hey Jude&#34;];&#xA;const Artists = [&#34;ACDC&#34;, &#34;Led Zeppelin&#34;, &#34;The Beatles&#34;];&#xA;&#xA;function eraseDatabase() {}&#xA;function restore_database() {}&#xA;&#xA;class animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const DAYS_IN_MONTH = 30;&#xA;&#xA;const SONGS = [&#34;Back In Black&#34;, &#34;Stairway to Heaven&#34;, &#34;Hey Jude&#34;];&#xA;const ARTISTS = [&#34;ACDC&#34;, &#34;Led Zeppelin&#34;, &#34;The Beatles&#34;];&#xA;&#xA;function eraseDatabase() {}&#xA;function restoreDatabase() {}&#xA;&#xA;class Animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; &#xA;&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class PerformanceReview {&#xA;  constructor(employee) {&#xA;    this.employee = employee;&#xA;  }&#xA;&#xA;  lookupPeers() {&#xA;    return db.lookup(this.employee, &#34;peers&#34;);&#xA;  }&#xA;&#xA;  lookupManager() {&#xA;    return db.lookup(this.employee, &#34;manager&#34;);&#xA;  }&#xA;&#xA;  getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  perfReview() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;  }&#xA;&#xA;  getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.perfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class PerformanceReview {&#xA;  constructor(employee) {&#xA;    this.employee = employee;&#xA;  }&#xA;&#xA;  perfReview() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;  }&#xA;&#xA;  getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  lookupPeers() {&#xA;    return db.lookup(this.employee, &#34;peers&#34;);&#xA;  }&#xA;&#xA;  getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  lookupManager() {&#xA;    return db.lookup(this.employee, &#34;manager&#34;);&#xA;  }&#xA;&#xA;  getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.perfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; &#xA;&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function hashIt(data) {&#xA;  // The hash&#xA;  let hash = 0;&#xA;&#xA;  // Length of string&#xA;  const length = data.length;&#xA;&#xA;  // Loop through every character in data&#xA;  for (let i = 0; i &amp;lt; length; i++) {&#xA;    // Get character code.&#xA;    const char = data.charCodeAt(i);&#xA;    // Make the hash&#xA;    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;&#xA;    // Convert to 32-bit integer&#xA;    hash &amp;amp;= hash;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function hashIt(data) {&#xA;  let hash = 0;&#xA;  const length = data.length;&#xA;&#xA;  for (let i = 0; i &amp;lt; length; i++) {&#xA;    const char = data.charCodeAt(i);&#xA;    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;&#xA;&#xA;    // Convert to 32-bit integer&#xA;    hash &amp;amp;= hash;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t leave commented out code in your codebase&lt;/h3&gt; &#xA;&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;doStuff();&#xA;// doOtherStuff();&#xA;// doSomeMoreStuff();&#xA;// doSoMuchStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;doStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t have journal comments&lt;/h3&gt; &#xA;&lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**&#xA; * 2016-12-20: Removed monads, didn&#39;t understand them (RM)&#xA; * 2016-10-01: Improved using special monads (JP)&#xA; * 2016-02-03: Removed type-checking (LI)&#xA; * 2015-03-14: Added combine with type-checking (JR)&#xA; */&#xA;function combine(a, b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(a, b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid positional markers&lt;/h3&gt; &#xA;&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;////////////////////////////////////////////////////////////////////////////////&#xA;// Scope Model Instantiation&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;$scope.model = {&#xA;  menu: &#34;foo&#34;,&#xA;  nav: &#34;bar&#34;&#xA;};&#xA;&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;// Action setup&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;const actions = function() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$scope.model = {&#xA;  menu: &#34;foo&#34;,&#xA;  nav: &#34;bar&#34;&#xA;};&#xA;&#xA;const actions = function() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Armenia.png&#34; alt=&#34;am&#34;&gt; &lt;strong&gt;Armenian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/hanumanum/clean-code-javascript&#34;&gt;hanumanum/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bangladesh.png&#34; alt=&#34;bd&#34;&gt; &lt;strong&gt;Bangla(বাংলা)&lt;/strong&gt;: &lt;a href=&#34;https://github.com/InsomniacSabbir/clean-code-javascript/&#34;&gt;InsomniacSabbir/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&#34; alt=&#34;br&#34;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/fesnt/clean-code-javascript&#34;&gt;fesnt/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&#34; alt=&#34;cn&#34;&gt; &lt;strong&gt;Simplified Chinese&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/alivebao/clean-code-js&#34;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/beginor/clean-code-javascript&#34;&gt;beginor/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png&#34; alt=&#34;tw&#34;&gt; &lt;strong&gt;Traditional Chinese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/AllJointTW/clean-code-javascript&#34;&gt;AllJointTW/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&#34; alt=&#34;fr&#34;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&#34;https://github.com/GavBaros/clean-code-javascript-fr&#34;&gt;GavBaros/clean-code-javascript-fr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&#34; alt=&#34;de&#34;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&#34;https://github.com/marcbruederlin/clean-code-javascript&#34;&gt;marcbruederlin/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png&#34; alt=&#34;id&#34;&gt; &lt;strong&gt;Indonesia&lt;/strong&gt;: &lt;a href=&#34;https://github.com/andirkh/clean-code-javascript/&#34;&gt;andirkh/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png&#34; alt=&#34;it&#34;&gt; &lt;strong&gt;Italian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/frappacchio/clean-code-javascript/&#34;&gt;frappacchio/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&#34; alt=&#34;ja&#34;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mitsuruog/clean-code-javascript/&#34;&gt;mitsuruog/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&#34; alt=&#34;kr&#34;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&#34;https://github.com/qkraudghgh/clean-code-javascript-ko&#34;&gt;qkraudghgh/clean-code-javascript-ko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png&#34; alt=&#34;pl&#34;&gt; &lt;strong&gt;Polish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/greg-dev/clean-code-javascript-pl&#34;&gt;greg-dev/clean-code-javascript-pl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&#34; alt=&#34;ru&#34;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BoryaMogila/clean-code-javascript-ru/&#34;&gt;BoryaMogila/clean-code-javascript-ru/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/maksugr/clean-code-javascript&#34;&gt;maksugr/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&#34; alt=&#34;es&#34;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tureey/clean-code-javascript&#34;&gt;tureey/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png&#34; alt=&#34;es&#34;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/andersontr15/clean-code-javascript-es&#34;&gt;andersontr15/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Serbia.png&#34; alt=&#34;rs&#34;&gt; &lt;strong&gt;Serbian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/doskovicmilos/clean-code-javascript&#34;&gt;doskovicmilos/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&#34; alt=&#34;tr&#34;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/bsonmez/clean-code-javascript/tree/turkish-translation&#34;&gt;bsonmez/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png&#34; alt=&#34;ua&#34;&gt; &lt;strong&gt;Ukrainian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mindfr1k/clean-code-javascript-ua&#34;&gt;mindfr1k/clean-code-javascript-ua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&#34; alt=&#34;vi&#34;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/hienvd/clean-code-javascript/&#34;&gt;hienvd/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>twbs/bootstrap</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/twbs/bootstrap</id>
    <link href="https://github.com/twbs/bootstrap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The most popular HTML, CSS, and JavaScript framework for developing responsive, mobile first projects on the web.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://getbootstrap.com/&#34;&gt; &lt;img src=&#34;https://getbootstrap.com/docs/5.2/assets/brand/bootstrap-logo-shadow.png&#34; alt=&#34;Bootstrap logo&#34; width=&#34;200&#34; height=&#34;165&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Bootstrap&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Sleek, intuitive, and powerful front-end framework for faster and easier web development. &lt;br&gt; &lt;a href=&#34;https://getbootstrap.com/docs/5.2/&#34;&gt;&lt;strong&gt;Explore Bootstrap docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/twbs/bootstrap/issues/new?assignees=-&amp;amp;labels=bug&amp;amp;template=bug_report.yml&#34;&gt;Report bug&lt;/a&gt; · &lt;a href=&#34;https://github.com/twbs/bootstrap/issues/new?assignees=&amp;amp;labels=feature&amp;amp;template=feature_request.yml&#34;&gt;Request feature&lt;/a&gt; · &lt;a href=&#34;https://themes.getbootstrap.com/&#34;&gt;Themes&lt;/a&gt; · &lt;a href=&#34;https://blog.getbootstrap.com/&#34;&gt;Blog&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Bootstrap 5&lt;/h2&gt; &#xA;&lt;p&gt;Our default branch is for development of our Bootstrap 5 release. Head to the &lt;a href=&#34;https://github.com/twbs/bootstrap/tree/v4-dev&#34;&gt;&lt;code&gt;v4-dev&lt;/code&gt; branch&lt;/a&gt; to view the readme, documentation, and source code for Bootstrap 4.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#quick-start&#34;&gt;Quick start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#status&#34;&gt;Status&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#whats-included&#34;&gt;What&#39;s included&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#bugs-and-feature-requests&#34;&gt;Bugs and feature requests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#creators&#34;&gt;Creators&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#thanks&#34;&gt;Thanks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#copyright-and-license&#34;&gt;Copyright and license&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;Several quick start options are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/twbs/bootstrap/archive/v5.2.0-beta1.zip&#34;&gt;Download the latest release&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo: &lt;code&gt;git clone https://github.com/twbs/bootstrap.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install with &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;: &lt;code&gt;npm install bootstrap@v5.2.0-beta1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install with &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;yarn&lt;/a&gt;: &lt;code&gt;yarn add bootstrap@v5.2.0-beta1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install with &lt;a href=&#34;https://getcomposer.org/&#34;&gt;Composer&lt;/a&gt;: &lt;code&gt;composer require twbs/bootstrap:5.2.0-beta1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install with &lt;a href=&#34;https://www.nuget.org/&#34;&gt;NuGet&lt;/a&gt;: CSS: &lt;code&gt;Install-Package bootstrap&lt;/code&gt; Sass: &lt;code&gt;Install-Package bootstrap.sass&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://getbootstrap.com/docs/5.2/getting-started/introduction/&#34;&gt;Getting started page&lt;/a&gt; for information on the framework contents, templates, examples, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bootstrap-slack.herokuapp.com/&#34;&gt;&lt;img src=&#34;https://bootstrap-slack.herokuapp.com/badge.svg?sanitize=true&#34; alt=&#34;Slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/twbs/bootstrap/actions?query=workflow%3AJS+Tests+branch%3Amain&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/twbs/bootstrap/JS%20Tests/main?label=JS%20Tests&amp;amp;logo=github&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/bootstrap&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/bootstrap&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rubygems.org/gems/bootstrap&#34;&gt;&lt;img src=&#34;https://img.shields.io/gem/v/bootstrap&#34; alt=&#34;Gem version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://atmospherejs.com/twbs/bootstrap&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/meteor-twbs%3Abootstrap-blue&#34; alt=&#34;Meteor Atmosphere&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/twbs/bootstrap&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/vpre/twbs/bootstrap&#34; alt=&#34;Packagist Prerelease&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.nuget.org/packages/bootstrap/absoluteLatest&#34;&gt;&lt;img src=&#34;https://img.shields.io/nuget/vpre/bootstrap&#34; alt=&#34;NuGet&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/twbs/bootstrap?branch=main&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/twbs/bootstrap/main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/dist/css/bootstrap.min.css&#34;&gt;&lt;img src=&#34;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=gzip&amp;amp;label=CSS%20gzip%20size&#34; alt=&#34;CSS gzip size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/dist/css/bootstrap.min.css&#34;&gt;&lt;img src=&#34;https://img.badgesize.io/twbs/bootstrap/main/dist/css/bootstrap.min.css?compression=brotli&amp;amp;label=CSS%20Brotli%20size&#34; alt=&#34;CSS Brotli size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/dist/js/bootstrap.min.js&#34;&gt;&lt;img src=&#34;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=gzip&amp;amp;label=JS%20gzip%20size&#34; alt=&#34;JS gzip size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/dist/js/bootstrap.min.js&#34;&gt;&lt;img src=&#34;https://img.badgesize.io/twbs/bootstrap/main/dist/js/bootstrap.min.js?compression=brotli&amp;amp;label=JS%20Brotli%20size&#34; alt=&#34;JS Brotli size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.browserstack.com/automate/public-build/SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&#34;&gt;&lt;img src=&#34;https://www.browserstack.com/automate/badge.svg?badge_key=SkxZcStBeExEdVJqQ2hWYnlWckpkNmNEY213SFp6WHFETWk2bGFuY3pCbz0tLXhqbHJsVlZhQnRBdEpod3NLSDMzaHc9PQ==--3d0b75245708616eb93113221beece33e680b229&#34; alt=&#34;BrowserStack Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#backers&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/backers/bootstrap&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/twbs/bootstrap/main/#sponsors&#34;&gt;&lt;img src=&#34;https://img.shields.io/opencollective/sponsors/bootstrap&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s included&lt;/h2&gt; &#xA;&lt;p&gt;Within the download you&#39;ll find the following directories and files, logically grouping common assets and providing both compiled and minified variations.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Download contents&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;bootstrap/&#xA;├── css/&#xA;│   ├── bootstrap-grid.css&#xA;│   ├── bootstrap-grid.css.map&#xA;│   ├── bootstrap-grid.min.css&#xA;│   ├── bootstrap-grid.min.css.map&#xA;│   ├── bootstrap-grid.rtl.css&#xA;│   ├── bootstrap-grid.rtl.css.map&#xA;│   ├── bootstrap-grid.rtl.min.css&#xA;│   ├── bootstrap-grid.rtl.min.css.map&#xA;│   ├── bootstrap-reboot.css&#xA;│   ├── bootstrap-reboot.css.map&#xA;│   ├── bootstrap-reboot.min.css&#xA;│   ├── bootstrap-reboot.min.css.map&#xA;│   ├── bootstrap-reboot.rtl.css&#xA;│   ├── bootstrap-reboot.rtl.css.map&#xA;│   ├── bootstrap-reboot.rtl.min.css&#xA;│   ├── bootstrap-reboot.rtl.min.css.map&#xA;│   ├── bootstrap-utilities.css&#xA;│   ├── bootstrap-utilities.css.map&#xA;│   ├── bootstrap-utilities.min.css&#xA;│   ├── bootstrap-utilities.min.css.map&#xA;│   ├── bootstrap-utilities.rtl.css&#xA;│   ├── bootstrap-utilities.rtl.css.map&#xA;│   ├── bootstrap-utilities.rtl.min.css&#xA;│   ├── bootstrap-utilities.rtl.min.css.map&#xA;│   ├── bootstrap.css&#xA;│   ├── bootstrap.css.map&#xA;│   ├── bootstrap.min.css&#xA;│   ├── bootstrap.min.css.map&#xA;│   ├── bootstrap.rtl.css&#xA;│   ├── bootstrap.rtl.css.map&#xA;│   ├── bootstrap.rtl.min.css&#xA;│   └── bootstrap.rtl.min.css.map&#xA;└── js/&#xA;    ├── bootstrap.bundle.js&#xA;    ├── bootstrap.bundle.js.map&#xA;    ├── bootstrap.bundle.min.js&#xA;    ├── bootstrap.bundle.min.js.map&#xA;    ├── bootstrap.esm.js&#xA;    ├── bootstrap.esm.js.map&#xA;    ├── bootstrap.esm.min.js&#xA;    ├── bootstrap.esm.min.js.map&#xA;    ├── bootstrap.js&#xA;    ├── bootstrap.js.map&#xA;    ├── bootstrap.min.js&#xA;    └── bootstrap.min.js.map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;We provide compiled CSS and JS (&lt;code&gt;bootstrap.*&lt;/code&gt;), as well as compiled and minified CSS and JS (&lt;code&gt;bootstrap.min.*&lt;/code&gt;). &lt;a href=&#34;https://developers.google.com/web/tools/chrome-devtools/javascript/source-maps&#34;&gt;Source maps&lt;/a&gt; (&lt;code&gt;bootstrap.*.map&lt;/code&gt;) are available for use with certain browsers&#39; developer tools. Bundled JS files (&lt;code&gt;bootstrap.bundle.js&lt;/code&gt; and minified &lt;code&gt;bootstrap.bundle.min.js&lt;/code&gt;) include &lt;a href=&#34;https://popper.js.org/&#34;&gt;Popper&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Bugs and feature requests&lt;/h2&gt; &#xA;&lt;p&gt;Have a bug or a feature request? Please first read the &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/.github/CONTRIBUTING.md#using-the-issue-tracker&#34;&gt;issue guidelines&lt;/a&gt; and search for existing and closed issues. If your problem or idea is not addressed yet, &lt;a href=&#34;https://github.com/twbs/bootstrap/issues/new&#34;&gt;please open a new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Bootstrap&#39;s documentation, included in this repo in the root directory, is built with &lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; and publicly hosted on GitHub Pages at &lt;a href=&#34;https://getbootstrap.com/&#34;&gt;https://getbootstrap.com/&lt;/a&gt;. The docs may also be run locally.&lt;/p&gt; &#xA;&lt;p&gt;Documentation search is powered by &lt;a href=&#34;https://community.algolia.com/docsearch/&#34;&gt;Algolia&#39;s DocSearch&lt;/a&gt;. Working on our search? Be sure to set &lt;code&gt;debug: true&lt;/code&gt; in &lt;code&gt;site/assets/js/search.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Running documentation locally&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the Node.js dependencies, including Hugo (the site builder).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run test&lt;/code&gt; (or a specific npm script) to rebuild distributed CSS and JavaScript files, as well as our docs assets.&lt;/li&gt; &#xA; &lt;li&gt;From the root &lt;code&gt;/bootstrap&lt;/code&gt; directory, run &lt;code&gt;npm run docs-serve&lt;/code&gt; in the command line.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;http://localhost:9001/&lt;/code&gt; in your browser, and voilà.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Learn more about using Hugo by reading its &lt;a href=&#34;https://gohugo.io/documentation/&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Documentation for previous releases&lt;/h3&gt; &#xA;&lt;p&gt;You can find all our previous releases docs on &lt;a href=&#34;https://getbootstrap.com/docs/versions/&#34;&gt;https://getbootstrap.com/docs/versions/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/twbs/bootstrap/releases&#34;&gt;Previous releases&lt;/a&gt; and their documentation are also available for download.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read through our &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/.github/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;. Included are directions for opening issues, coding standards, and notes on development.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, if your pull request contains JavaScript patches or features, you must include &lt;a href=&#34;https://github.com/twbs/bootstrap/tree/main/js/tests&#34;&gt;relevant unit tests&lt;/a&gt;. All HTML and CSS should conform to the &lt;a href=&#34;https://github.com/mdo/code-guide&#34;&gt;Code Guide&lt;/a&gt;, maintained by &lt;a href=&#34;https://github.com/mdo&#34;&gt;Mark Otto&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Editor preferences are available in the &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/.editorconfig&#34;&gt;editor config&lt;/a&gt; for easy use in common text editors. Read more and download plugins at &lt;a href=&#34;https://editorconfig.org/&#34;&gt;https://editorconfig.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Get updates on Bootstrap&#39;s development and chat with the project maintainers and community members.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://twitter.com/getbootstrap&#34;&gt;@getbootstrap on Twitter&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Read and subscribe to &lt;a href=&#34;https://blog.getbootstrap.com/&#34;&gt;The Official Bootstrap Blog&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Join &lt;a href=&#34;https://bootstrap-slack.herokuapp.com/&#34;&gt;the official Slack room&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Chat with fellow Bootstrappers in IRC. On the &lt;code&gt;irc.libera.chat&lt;/code&gt; server, in the &lt;code&gt;#bootstrap&lt;/code&gt; channel.&lt;/li&gt; &#xA; &lt;li&gt;Implementation help may be found at Stack Overflow (tagged &lt;a href=&#34;https://stackoverflow.com/questions/tagged/bootstrap-5&#34;&gt;&lt;code&gt;bootstrap-5&lt;/code&gt;&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Developers should use the keyword &lt;code&gt;bootstrap&lt;/code&gt; on packages which modify or add to the functionality of Bootstrap when distributing through &lt;a href=&#34;https://www.npmjs.com/browse/keyword/bootstrap&#34;&gt;npm&lt;/a&gt; or similar delivery mechanisms for maximum discoverability.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;For transparency into our release cycle and in striving to maintain backward compatibility, Bootstrap is maintained under &lt;a href=&#34;https://semver.org/&#34;&gt;the Semantic Versioning guidelines&lt;/a&gt;. Sometimes we screw up, but we adhere to those rules whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/twbs/bootstrap/releases&#34;&gt;the Releases section of our GitHub project&lt;/a&gt; for changelogs for each release version of Bootstrap. Release announcement posts on &lt;a href=&#34;https://blog.getbootstrap.com/&#34;&gt;the official Bootstrap blog&lt;/a&gt; contain summaries of the most noteworthy changes made in each release.&lt;/p&gt; &#xA;&lt;h2&gt;Creators&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mark Otto&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/mdo&#34;&gt;https://twitter.com/mdo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mdo&#34;&gt;https://github.com/mdo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Jacob Thornton&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/fat&#34;&gt;https://twitter.com/fat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fat&#34;&gt;https://github.com/fat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;a href=&#34;https://www.browserstack.com/&#34;&gt; &lt;img src=&#34;https://live.browserstack.com/images/opensource/browserstack-logo.svg?sanitize=true&#34; alt=&#34;BrowserStack&#34; width=&#34;192&#34; height=&#34;42&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.browserstack.com/&#34;&gt;BrowserStack&lt;/a&gt; for providing the infrastructure that allows us to test in real browsers!&lt;/p&gt; &#xA;&lt;a href=&#34;https://www.netlify.com/&#34;&gt; &lt;img src=&#34;https://www.netlify.com/v3/img/components/full-logo-light.svg?sanitize=true&#34; alt=&#34;Netlify&#34; width=&#34;147&#34; height=&#34;40&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.netlify.com/&#34;&gt;Netlify&lt;/a&gt; for providing us with Deploy Previews!&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/bootstrap#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/0/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/1/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 1&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/2/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/3/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/4/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 4&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/5/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 5&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/6/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 6&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/7/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 7&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/8/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/bootstrap/sponsor/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/sponsor/9/avatar.svg?sanitize=true&#34; alt=&#34;OC sponsor 9&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/bootstrap#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/bootstrap#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/bootstrap/backers.svg?width=890&#34; alt=&#34;Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Copyright and license&lt;/h2&gt; &#xA;&lt;p&gt;Code and documentation copyright 2011–2022 the &lt;a href=&#34;https://github.com/twbs/bootstrap/graphs/contributors&#34;&gt;Bootstrap Authors&lt;/a&gt; and &lt;a href=&#34;https://twitter.com&#34;&gt;Twitter, Inc.&lt;/a&gt; Code released under the &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;. Docs released under &lt;a href=&#34;https://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>livebud/bud</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/livebud/bud</id>
    <link href="https://github.com/livebud/bud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Full-Stack Web Framework for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bud&lt;/h1&gt; &#xA;&lt;p&gt;The Full-Stack Web Framework for Go. Bud writes the boring code for you, helping you launch your website faster.&lt;/p&gt; &#xA;&lt;h2&gt;Video Demo&lt;/h2&gt; &#xA;&lt;p&gt;Watch a video demonstrating how to build a minimal HN clone in 15 minutes with Bud.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LoypcRqn-xA&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/170299/168361927-9165c2f9-55d4-4fa0-a53e-966028a79b39.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69&#34;&gt;the documentation&lt;/a&gt; to learn how to get started with Bud.&lt;/p&gt; &#xA;&lt;h1&gt;Installing Bud&lt;/h1&gt; &#xA;&lt;p&gt;Bud ships as a single binary that runs on Linux and Mac. You can follow along for Windows support in &lt;a href=&#34;https://github.com/livebud/bud/issues/7&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to get started is by copying and pasting the command below in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;$ curl -sf https://raw.githubusercontent.com/livebud/bud/main/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will download the right binary for your operating system and move the binary to the right location in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Confirm that you&#39;ve installed Bud by typing &lt;code&gt;bud&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bud -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Usage:&#xA;    bud [flags] [command]&#xA;&#xA;Flags:&#xA;  -C, --chdir  Change the working directory&#xA;&#xA;Commands:&#xA;  build    build the production server&#xA;  create   create a new project&#xA;  run      run the development server&#xA;  tool     extra tools&#xA;  version  Show package versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;The following software is required to use Bud.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Node v14+&lt;/p&gt; &lt;p&gt;This is a temporary requirement that we plan to remove in &lt;a href=&#34;https://github.com/livebud/bud/discussions/21&#34;&gt;v0.3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go v1.16+&lt;/p&gt; &lt;p&gt;Bud relies heavily on &lt;code&gt;io/fs&lt;/code&gt; and will take advantage of generics in the future, so while Go v1.16 will work, we suggest running Go v1.18+ if you can.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Your First Project&lt;/h1&gt; &#xA;&lt;p&gt;With bud installed, you can now scaffold a new project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bud create hello&#xA;$ cd hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The create command will scaffold everything you need to get started with bud.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls&#xA;go.mod  node_modules/  package-lock.json  package.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... which is not very much by the way! Unlike most other fullstack frameworks, Bud starts out very minimal. As you add dependencies, Bud will generate all the boring code to glue your app together. Let&#39;s see this in action.&lt;/p&gt; &#xA;&lt;p&gt;Start the development server with &lt;code&gt;bud run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bud run&#xA;| Listening on http://127.0.0.1:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Click on the link to open the browser. You&#39;ll be greeted with bud&#39;s welcome page.&lt;/p&gt; &#xA;&lt;p&gt;Congrats! You&#39;re running your first web server with Bud. The welcome server is your jumping off point to learn more about the framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://denim-cub-301.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdb7f750b-a699-4117-ac07-303124e5d2f4%2FCleanShot_2022-05-12_at_22.00.192x.png?table=block&amp;amp;id=9488d91f-b72d-4c6d-9ce0-358c31f7f964&amp;amp;spaceId=faf0f409-6e25-40a4-871e-3b311037350f&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; alt=&#34;CleanShot 2022-05-12 at 22.00.19@2x.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;Check out the Hacker News &lt;a href=&#34;https://www.youtube.com/watch?v=LoypcRqn-xA&#34;&gt;demo&lt;/a&gt;, read the &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69#156ea69b8d044bacb65fc2897f3e52b8&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://cal.com/mattmueller/30min&#34;&gt;schedule a quick call&lt;/a&gt; or go on your own adventure. The only limit is your imagination.&lt;/p&gt; &#xA;&lt;p&gt;Recent discussions: &lt;a href=&#34;https://www.reddit.com/r/golang/comments/uoxocj/bud_the_fullstack_web_framework_for_go_developers/&#34;&gt;Reddit&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/item?id=31371340&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/golivebud&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How did Bud come into existence?&lt;/h1&gt; &#xA;&lt;p&gt;I started working on Bud 2 years ago after seeing how productive people could be in &lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel&lt;/a&gt;. I wanted the same for Go, so I decided to try creating Laravel for the Go ecosystem. However, my first version after 6 months needed to scaffold many files just to get started. If you are coming from &lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Rails&lt;/a&gt; or Laravel, you may shrug and consider this as pretty normal.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I have been spoiled by the renaissance in frontend frameworks like &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; that start barebones but every file you add incrementally enhances your web application. This keeps the initial complexity under control.&lt;/p&gt; &#xA;&lt;p&gt;With this additional inspiration, I worked on the next iteration for the ensuing 18 months.&lt;/p&gt; &#xA;&lt;p&gt;The goals are now:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate files only as you need them. Keep these generated files away from your application code and give developers the choice to keep them out of source control. You shouldn&#39;t need to care about the generated code. You may be surprised to learn that Go also generates code to turn your Go code into an executable, but it works so well you don&#39;t need to think about it. Bud should feel like this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feel like using a modern JS framework. This means it should work with &lt;a href=&#34;https://github.com/livebud/bud/discussions/8&#34;&gt;multiple&lt;/a&gt; modern frontend frameworks like &lt;a href=&#34;https://svelte.dev/&#34;&gt;Svelte&lt;/a&gt; and &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;, support &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69#4c7dff15ef3e458587b81fb9b1819afb&#34;&gt;live reload&lt;/a&gt;, and have &lt;a href=&#34;https://www.reddit.com/r/golang/comments/uoxocj/bud_the_fullstack_web_framework_for_go_developers/i8ke92h/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;server-side rendering&lt;/a&gt; for better performance and SEO.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The framework should be extensible from Day 1. Bud is too ambitious for one person. We&#39;re going to need an ambitious community behind this framework. Extensibility should be primarily driven by adding code, rather than by adding configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bud should provide high-level, type-safe APIs for developers while generating performant, low-level Go code under the covers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bud should compile to a single binary that contains your entire web app and can be copied to a server that doesn&#39;t even have Go installed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/livebud/bud/main/contributing/Readme.md&#34;&gt;Contributing Guide&lt;/a&gt; to learn how to develop Bud locally.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>6dylan6/jdpro</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/6dylan6/jdpro</id>
    <link href="https://github.com/6dylan6/jdpro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;青龙脚本库&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;DY&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;全网可用，加密代码审查，测运行无重复，定期移除失效，默认无加购，一键配置内部互助(可选模式),自动安装运行依赖（需青龙2.8+）;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;欢迎大家issue、pr，会一一回复！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;请注意安全，不用不明js，app，exe！被偷回到解放前！！！&lt;/h2&gt; &#xA;&lt;h2&gt;防走失&lt;a href=&#34;https://t.me/dylan_jdpro&#34;&gt;TG频道&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;青龙面板&lt;a href=&#34;https://github.com/6dylan6/jdpro/tree/main/docker&#34;&gt;INSTALL&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;拉库指令&lt;/h2&gt; &#xA;&lt;p&gt;【注意】2.11.1前版本青龙config.sh配置把GithubProxyUrl=&#34;&lt;a href=&#34;https://ghproxy.com/&#34;&gt;https://ghproxy.com/&lt;/a&gt; （差不在多19行）&#34; 修改为GithubProxyUrl=&#34;&#34;，否则拉取失败，以上版本无需配置。&lt;/p&gt; &#xA;&lt;p&gt;国内机用下面指令（带代理，不要太频繁请求，会ban）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://js.dayplus.xyz/https://github.com/6dylan6/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;国外机用下面指令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://github.com/6dylan6/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;怎么都拉不下来就用gitee版吧，用下面指令！(更新会慢点）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://gitee.com/dylanote/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;任务定时建议 50 7-23/2 * * *&lt;/p&gt; &#xA;&lt;h2&gt;依赖安装&lt;/h2&gt; &#xA;&lt;p&gt;拉库后，执行&#39;依赖安装&#39;任务安装此库脚本所需依赖，脚本名jd_indeps，首次拉库执行一次即可，有新依赖再次执行。&lt;/p&gt; &#xA;&lt;h2&gt;互助指南&lt;/h2&gt; &#xA;&lt;p&gt;1、修改青龙config.sh配置，差不多在17行（特别注意，没有修改此配置，会少依赖安装任务和获取互助任务）&lt;/p&gt; &#xA;&lt;p&gt;RepoFileExtensions=&#34;js py&#34;修改为&lt;/p&gt; &#xA;&lt;p&gt;RepoFileExtensions=&#34;js py sh ts&#34;&lt;/p&gt; &#xA;&lt;p&gt;保存&lt;/p&gt; &#xA;&lt;p&gt;2、执行拉库任务。&lt;/p&gt; &#xA;&lt;p&gt;3、执行&#39;获取互助码&#39;任务即可自动完成互助配置（脚本名jd_sharecode),互助码获取情况可查看任务运行日志（首次使用此库需等待任务运行一遍后产生日志才会获取到互助码，可以看jd_sharecode日志获取情况）&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;使用技巧与问题解答&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#xA;&lt;p&gt;1、涉及兑换或需要抢的可以配置任务并发，就是全部一起跑。&lt;/p&gt;&#xA;&lt;p&gt;并发配置方法：&lt;/p&gt;&#xA;&lt;p&gt;在任务后面加conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;如 task XXXXX.js conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;任务分组运行方法：&lt;/p&gt;&#xA;&lt;p&gt;在任务后面加desi JD_COOKIE 需要运行的ck序号&lt;/p&gt;&#xA;&lt;p&gt;如 task XXXX.js desi JD_COOKIE 1-10 前10个一组运行，2 8 9就是第2/8/9序号的ck执行，以此类推。&lt;/p&gt;&#xA;&lt;p&gt;2、极速版签到建议并发，号多跑很久的，一个号要30多分钟。。&lt;/p&gt;&#xA;&lt;p&gt;task 6dylan6_jdpro_jd_speed_sign.js conc JD_COOKIE （具体任务路径不同版本不一样，按自己的写）&lt;/p&gt;&#xA;&lt;p&gt;3、保价建议并发，否则可能前几个号正常跑，后面会报频繁！&lt;/p&gt;&#xA;&lt;p&gt;task 6dylan6_jdpro_jd_price.js conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;4、通知支持一对一推送和显示备注，还有分组通知等用法参考&lt;a href=&#34;https://raw.githubusercontent.com/6dylan6/jdpro/main/notify.md&#34;&gt;notify.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;备注显示变量如下&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;1&#34; 不做任何变动&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;2&#34; 效果是 : 账号名称：别名(备注)&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;3&#34; 效果是 : 账号名称：pin(备注)&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;4&#34; 效果是 : 账号名称：备注&lt;/p&gt;&#xA;&lt;p&gt;5、因为青龙有随机延时（可以在配置文件设置为0，默认300秒），所以涉及准点运行的任务，最后加now，如果是desi或conc不用加也会准时跑。&lt;/p&gt;&#xA;&lt;p&gt;6、青龙系统通知（新增删除任务、登录等通知），需把通知变量写到config.sh文件，在环境变量里只发脚本运行通知哈。&lt;/p&gt;&#xA;&lt;p&gt;7、本库开卡任务默认不执行，如需运行请设置变量export DY_OPENALL=&#34;true&#34;，所有开卡任务通用。&lt;/p&gt;&#xA;&lt;p&gt;8、如果通知文件发现和库里的不一致，那是青龙自带的覆盖了，正常库里会自动覆盖掉青龙的通知文件，如果没有自动那就手动拷贝一份到deps目录下吧，或者直接删掉deps目录下的sendnotify.js&lt;/p&gt;&#xA;&lt;/code&gt;&lt;p&gt;&lt;code&gt;9、建议调整任务运行超时时间，青龙默认1小时有些脚本跑不完就被强制kill，config.sh里配置。CommandTimeoutTime=&#34;3h&#34; 即改为3小时，根据自己的号数量调整。 &lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;加密脚本清单&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;加密脚本清单，已审查， 不放心可禁用&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#xA;jd_zjd.js (赚京豆，全加密）&#xA;jddj_fruit.js（到家果园，全加密）&#xA;jd_fans.js （粉丝互动，全加密）&#xA;jd_half_redrain.js (半点京豆雨，全加密）&#xA;jd_jxmc.js （京喜牧场，算法加密）&#xA;jd_cfd.js （京喜财富岛，算法加密）&#xA;jd_cfd_loop.js (京喜财富岛捡贝壳，算法加密）&#xA;jd_speed_sign.js （极速版签到，算法加密）&#xA;jd_speed_signred.js  （极速版红包，算法加密）&#xA;开卡系列全部都有算法加密 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;控制脚本功能环境变量&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;归属&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;属性&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;PET_NOTIFY_CONTROL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;东东萌宠&lt;br&gt;推送开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制京东萌宠是否静默运行,&lt;br&gt;&lt;code&gt;false&lt;/code&gt;为否(发送推送通知消息),&lt;code&gt;true&lt;/code&gt;为是(即：不发送推送通知消息)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;FRUIT_NOTIFY_CONTROL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;东东农场&lt;br&gt;推送开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制京东农场是否静默运行,&lt;br&gt;&lt;code&gt;false&lt;/code&gt;为否(发送推送通知消息),&lt;code&gt;true&lt;/code&gt;为是(即：不发送推送通知消息)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;NOTIFY_AUTOCHECKCK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;自动禁用失效CK开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;有CK失效自动禁用并通知，true为自动禁用，false不自动禁用，默认false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JOY_FEED_COUNT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;宠汪汪喂食数量&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制&lt;code&gt;jd_joy_feedPets.js&lt;/code&gt;脚本喂食数量,可以填的数字10,20,40,80,其他数字不可.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;NOTIFY_SKIP_LIST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;控制关闭某些标题的通知&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;通知标题在此变量里面存在(&amp;amp;隔开),则屏蔽不发送通知.例 : export NOTIFY_SKIP_LIST=&#34;临期京豆换喜豆&amp;amp;京东资产统计&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;FRUIT_BEAN_CARD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;农场&lt;br&gt;使用水滴换豆卡&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;农场使用水滴换豆卡(如果出现限时活动时100g水换20豆,此时比浇水划算,推荐换豆),&lt;br&gt;&lt;code&gt;true&lt;/code&gt;表示换豆(不浇水),&lt;code&gt;false&lt;/code&gt;表示不换豆(继续浇水),脚本默认是浇水&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JD_UNSUB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;批量取消商品与店铺关注开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制jd_unsubscribe.js运行，默认为true取关，false不取关&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JD_CART_REMOVE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;清空购物车&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制jd_clean_car.js运行 ，默认false不清空，true清空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;MONEY_TREE_SELL_FRUIT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;摇钱树&lt;br&gt;是否卖出金果&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制摇钱树脚本是否自动卖出金果兑换成金币，&lt;code&gt;true&lt;/code&gt;卖出，&lt;code&gt;false&lt;/code&gt;不卖出，默认卖出&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;QCARD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;店铺退会链接&lt;br&gt;是否运行&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;按需运行，&lt;code&gt;true&lt;/code&gt;运行，默认&lt;code&gt;false&lt;/code&gt;不运行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;Ev_Start&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;自动评价&lt;br&gt;是否运行&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;选择运行，&lt;code&gt;true&lt;/code&gt;运行，默认&lt;code&gt;false&lt;/code&gt;不运行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;exjxbeans&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;临期京豆换喜豆&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认为false不换，设置true换7天内过期京豆换喜豆&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;WSKEY_DISCHECK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;wskey转换&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认为false检查，设置true为不检查直接转换&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt; HelpType&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;互助模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认顺序助力，0是全部一样顺序助力，1是均等机会助力，2是随机顺序助力，例： export HelpType=1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;PandaToken&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;领现金使用&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;Token去&lt;a href=&#34;https://t.me/pang_da_bot&#34;&gt;TG机器人&lt;/a&gt; 获取，获取一次7天有效期1000次调用，export PandaToken=&#39;你获取的token&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;DY_OPENALL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;开卡系列&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;开卡系列任务默认不执行，设置变量DY_OPENALL=&#39;true&#39;执行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;DY_ZJD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;赚京豆&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认不执行，设置变量DY_ZJD=&#39;true&#39;执行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>azl397985856/leetcode</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/azl397985856/leetcode</id>
    <link href="https://github.com/azl397985856/leetcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LeetCode Solutions: A Record of My Problem Solving Journey.( leetcode题解，记录自己的leetcode解题之路。)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LeetCode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-C++-green.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Python-red.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Java-blue.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Go-red.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-Php-pink.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/language-JavaScript-yellow.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/#%E5%93%AA%E9%87%8C%E8%83%BD%E6%89%BE%E5%88%B0%E6%88%91&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/WeChat-%E5%BE%AE%E4%BF%A1%E7%BE%A4-brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/#%E5%93%AA%E9%87%8C%E8%83%BD%E6%89%BE%E5%88%B0%E6%88%91&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E5%85%AC%E4%BC%97%E5%8F%B7-%E5%8A%9B%E6%89%A3%E5%8A%A0%E5%8A%A0-blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://juejin.im/user/58af98305c497d0067780b3b&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Juejin-%E6%8E%98%E9%87%91-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.zhihu.com/people/lu-xiao-13-70&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Zhihu-%E7%9F%A5%E4%B9%8E-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://space.bilibili.com/519510412/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/bilili-%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9-ff69b4&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/README.en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;我们的 slogan 是： &lt;strong&gt;只有熟练掌握基础的数据结构与算法，才能对复杂问题迎刃有余。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔥🔥🔥 我的《算法通关之路》出版了 🔥🔥🔥&lt;/h2&gt; &#xA;&lt;p&gt;我的新书《算法通关之路》出版了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gu39d1zb7qj622g0u013a02.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://union-click.jd.com/jdc?e=618%7Cpc%7C&amp;amp;p=JF8BAOAJK1olXgEGUV9cAE4VCl8IGloXWgYCV1tcAE8TBl9MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFksWAm0PG1sWWAcKUFpYFxJSXzI4GAhrA0IDUiM-FjFxQQtKWFx2AlkYElJROEonA24JG1MQWgMEUW5tCEwnQgEIGlkdXAQHUW5cOEsQBmkNElwWXgYGUFxtD0seMzRddVwVWFVWB10PXxtDVDo4K2sWbQECXRMcWgYnM284GGtXMwUKAw5VDEpDA2oBGl4SXwELUF5fCkkQVDtdH1JGX1EAZFxcCU8eMw&#34;&gt;实体版购书链接 1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://union-click.jd.com/jdc?e=618%7Cpc%7C&amp;amp;p=JF8BAM0JK1olXDYCV1ZfC0kWB19MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFksUC20LGVoRQl9HCANtQDt-RAZPBQFwJ0ZEA1hDWh9wdTB2a1cZbQcyVF9cCEMSBGoOHmslXQEyAjBdCUoWAm4NG14WbQcyVFlYDk4eBG8LG1gUXzYFVFdtUx55BG8NSA9GXlRVBAoKXXsnM2w4HFscEEdQGW5tCHsUMy1mE14WDQcCUVxfWk9EBmkOSQsWDwVSVwpcWEoXUG5aElslXwcDUFdt&#34;&gt;实体版购书链接 2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://union-click.jd.com/jdc?e=&amp;amp;p=JF8BAL0JK1olXDYAVVhfD04UAl9MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFkkWBW0PHlgUQl9HCANtcS0SdTFvWVt1X3BkVV4Kc0JxYRtPe1cZbQcyVF9cCEMSBGoOHmslXQEyHzBcOEonA2gKE1oVWwEKXV5cAXsQA2Y4QA57WgYHBwoOCxlAUztfTmslbQUyZG5dOEgnQQFaSQ5FWQYFB1cODhgSVDpaS1hFDwQLUlwJAU5DAWcJHWsXXAcGXW4&#34;&gt;电子版购书链接&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📘&lt;/span&gt; 电子书&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：这里的电子书并不是《算法通关之路》的电子版，而是本仓库内容的电子版！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/&#34;&gt;在线阅读地址&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/0081Kckwly1gm3r7y4dt8j30zx0u0hdt.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;限时免费下载！后期随时可能收费&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;可以去我的公众号《力扣加加》后台回复电子书获取！&lt;/p&gt; &#xA;&lt;img src=&#34;https://tva1.sinaimg.cn/large/007S8ZIlly1gfcuzagjalj30p00dwabs.jpg&#34; width=&#34;100%&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;epub 还是有动图的&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;另外有些内容只在公众号发布，因此大家觉得内容不错的话，可以关注一下。如果再给 ➕ 个星标就更棒啦！&lt;/p&gt; &#xA;&lt;h2&gt;图片加载不出来如何解决？&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fe-lucifer/fanqiang&#34;&gt;https://github.com/fe-lucifer/fanqiang&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;📆&lt;/span&gt;《91 天学算法》限时活动&lt;/h2&gt; &#xA;&lt;p&gt;很多教育机构宣传的 7 天，一个月搞定算法面试的，我大概都了解了下，不怎么靠谱。学习算法这东西，还是要靠积累，没有量变是不可能有质变的。还有的人选择看书，这是一个不错的选择。但是很多人选了过时的或者质量差的书，又或者不会去写书中给的练习题，导致效果很差。&lt;/p&gt; &#xA;&lt;p&gt;基于这几个原因，我组织了一个 91 天刷题活动，通过一个相对比较长的时间（91 天）给出最新的学习路径，并强制大家打卡这种高强度练习来让大家&lt;strong&gt;在 91 天后遇见更好的自己&lt;/strong&gt;。详细活动介绍可以点下方链接查看。另外往期的讲义也在下面了，大家可以看看合不合你的口味。&lt;/p&gt; &#xA;&lt;p&gt;最后送给大家一句话： &lt;strong&gt;坚持下去，会有突然间成长的一天&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gq0mm4lscqj313h0r0diy.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥🔥🔥🔥 &lt;a href=&#34;https://leetcode-solution.cn/91&#34;&gt;活动首页&lt;/a&gt; 🔥🔥🔥🔥&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-1.md&#34;&gt;91 第三期讲义 - 二分专题（上）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-2.md&#34;&gt;91 第三期讲义 - 二分专题（下）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;关于我&lt;/h2&gt; &#xA;&lt;p&gt;大家也可以加我微信好友进行交流！&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/008i3skNly1gx11szd02ej30e80e8dg3.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;) 仓库介绍&lt;/h2&gt; &#xA;&lt;p&gt;leetcode 题解，记录自己的 leetcode 解题之路。&lt;/p&gt; &#xA;&lt;p&gt;本仓库目前分为&lt;strong&gt;五个&lt;/strong&gt;部分：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;第一个部分是 leetcode 经典题目的解析，包括思路，关键点和具体的代码实现。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第二部分是对于数据结构与算法的总结&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第三部分是 anki 卡片， 将 leetcode 题目按照一定的方式记录在 anki 中，方便大家记忆。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第四部分是每日一题，每日一题是在交流群（包括微信和 qq）里进行的一种活动，大家一起 解一道题，这样讨论问题更加集中，会得到更多的反馈。而且 这些题目可以被记录下来，日后会进行筛选添加到仓库的题解模块。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第五部分是计划， 这里会记录将来要加入到以上三个部分内容&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🍖&lt;/span&gt; 仓库食用指南&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;这里有一张互联网公司面试中经常考察的问题类型总结的思维导图，我们可以结合图片中的信息分析一下。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/007S8ZIlly1ghluennxvrj30k00jx0te.jpg&#34; alt=&#34;leetcode-zhihu&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;（图片来自 leetcode)&lt;/p&gt; &#xA;&lt;p&gt;其中算法，主要是以下几种：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基础技巧：分治、二分、贪心&lt;/li&gt; &#xA; &lt;li&gt;排序算法：快速排序、归并排序、计数排序&lt;/li&gt; &#xA; &lt;li&gt;搜索算法：回溯、递归、深度优先遍历，广度优先遍历，二叉搜索树等&lt;/li&gt; &#xA; &lt;li&gt;图论：最短路径、最小生成树&lt;/li&gt; &#xA; &lt;li&gt;动态规划：背包问题、最长子序列&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;数据结构，主要有如下几种：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数组与链表：单 / 双向链表&lt;/li&gt; &#xA; &lt;li&gt;栈与队列&lt;/li&gt; &#xA; &lt;li&gt;哈希表&lt;/li&gt; &#xA; &lt;li&gt;堆：最大堆 ／ 最小堆&lt;/li&gt; &#xA; &lt;li&gt;树与图：最近公共祖先、并查集&lt;/li&gt; &#xA; &lt;li&gt;字符串：前缀树（字典树） ／ 后缀树&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我在网上找到一份 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/assets/cheatsheet.pdf&#34;&gt;《Interview Cheat Sheet》&lt;/a&gt;，这个 PDF 列举了面试的&lt;strong&gt;模板步骤&lt;/strong&gt;。，详细指示了如何一步步完成面试。&lt;/p&gt; &#xA;&lt;p&gt;这个 pdf 开头就提到了好的代码三个标准：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;可读性&lt;/li&gt; &#xA; &lt;li&gt;时间复杂度&lt;/li&gt; &#xA; &lt;li&gt;空间复杂度&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;这写的太好了。&lt;/p&gt; &#xA;&lt;p&gt;紧接着，列举了 15 算法面试的步骤。比如步骤一：&lt;strong&gt;当面试官提问完后，你需要先下来关键点（之后再下面写注释和代码）&lt;/strong&gt; 看完我的感受就是，&lt;strong&gt;面试只要按照这个来做，成功率蹭蹭提升&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;数据结构与算法的总结&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/basic-data-structure.md&#34;&gt;数据结构总览&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/linked-list.md&#34;&gt;链表专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/tree.md&#34;&gt;树专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/heap.md&#34;&gt;堆专题（上）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/heap-2.md&#34;&gt;堆专题（下）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-1.md&#34;&gt;二分专题（上）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-2.md&#34;&gt;二分专题（下）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - [基础算法](./thinkings/basic-algorithm.md) --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/dynamic-programming.md&#34;&gt;动态规划（重置版）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/search.md&#34;&gt;大话搜索&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-tree-traversal.md&#34;&gt;二叉树的遍历&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/backtrack.md&#34;&gt;回溯&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/run-length-encode-and-huffman-encode.md&#34;&gt;哈夫曼编码和游程编码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/bloom-filter.md&#34;&gt;布隆过滤器&lt;/a&gt;🖊&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/trie.md&#34;&gt;前缀树&lt;/a&gt;🖊&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/02/03/leetcode-%E6%88%91%E7%9A%84%E6%97%A5%E7%A8%8B%E5%AE%89%E6%8E%92%E8%A1%A8%E7%B3%BB%E5%88%97/&#34;&gt;《日程安排》专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/02/08/%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98/&#34;&gt;《构造二叉树》专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/slide-window.md&#34;&gt;滑动窗口（思路 + 模板）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/bit.md&#34;&gt;位运算&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/island.md&#34;&gt;小岛问题&lt;/a&gt;🖊&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/GCD.md&#34;&gt;最大公约数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/union-find.md&#34;&gt;并查集&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/balanced-tree.md&#34;&gt;平衡二叉树专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/reservoid-sampling.md&#34;&gt;蓄水池抽样&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/monotone-stack.md&#34;&gt;单调栈&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;❗&lt;/span&gt; 怎么刷 LeetCode？&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/280279208/answer/824585814&#34;&gt;我是如何刷 LeetCode 的&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/321738058/answer/1279464192&#34;&gt;算法小白如何高效、快速刷 leetcode？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/06/06/algo-chrome-extension/&#34;&gt;刷题效率低？或许你就差这么一个插件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/08/16/leetcode-cheat/&#34;&gt;力扣刷题插件&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💻&lt;/span&gt; 插件&lt;/h2&gt; &#xA;&lt;p&gt;或许是一个可以改变你刷题效率的浏览器扩展插件。&lt;/p&gt; &#xA;&lt;p&gt;插件地址：&lt;a href=&#34;https://chrome.google.com/webstore/detail/leetcode-cheatsheet/fniccleejlofifaakbgppmbbcdfjonle?hl=en-US&#34;&gt;https://chrome.google.com/webstore/detail/leetcode-cheatsheet/fniccleejlofifaakbgppmbbcdfjonle?hl=en-US&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不能访问谷歌商店的朋友可以去我的公众号回复插件获取离线版。强烈推荐大家使用谷歌商店安装， 这样如果有更新可以自动安装，毕竟咱们的插件更新还是蛮快的。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;另外大家也可以使用 zerotrac 开发的用于计算力扣中题目分数的网站。这里的分数指的是竞赛分，大家可以根据自己的竞赛分选择稍微比自己竞赛分高一点的题目进行练习，注意这个只是根据通过人数等计算的一个预估分数。地址：&lt;a href=&#34;https://zerotrac.github.io/leetcode_problem_rating/&#34;&gt;https://zerotrac.github.io/leetcode_problem_rating/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;精选题解&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/a-deleted.md&#34;&gt;字典序列删除&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/atMostK.md&#34;&gt;一次搞定前缀和&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/byte-dance-algo-ex.md&#34;&gt;字节跳动的算法面试题是什么难度？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/byte-dance-algo-ex-2017.md&#34;&gt;字节跳动的算法面试题是什么难度？（第二弹）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/mother-01.md&#34;&gt;《我是你的妈妈呀》 - 第一期&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/serialize.md&#34;&gt;一文带你看懂二叉树的序列化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/LIS.md&#34;&gt;穿上衣服我就不认识你了？来聊聊最长上升子序列&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/LCS.md&#34;&gt;你的衣服我扒了 - 《最长公共子序列》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/LSS.md&#34;&gt;一文看懂《最大子序列和问题》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;leetcode 经典题目的解析（200 多道）&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这里仅列举具有&lt;strong&gt;代表性题目&lt;/strong&gt;，并不是全部题目&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;目前更新了 200 多道题解，加上专题涉及的题目，差不多有 &lt;strong&gt;300 道&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;简单难度题目合集&lt;/h3&gt; &#xA;&lt;p&gt;这里的题目难度比较小， 大多是模拟题，或者是很容易看出解法的题目，另外简单题目一般使用暴力法都是可以解决的。 这个时候只有看一下数据范围，思考下你的算法复杂度就行了。&lt;/p&gt; &#xA;&lt;p&gt;当然也不排除很多 hard 题目也可以暴力模拟，大家平时多注意数据范围即可。&lt;/p&gt; &#xA;&lt;p&gt;以下是我列举的经典题目（带 91 字样的表示出自 &lt;strong&gt;91 天学算法&lt;/strong&gt;活动）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/binode-lcci.md&#34;&gt;面试题 17.12. BiNode&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1.two-sum.md&#34;&gt;0001. 两数之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/20.valid-parentheses.md&#34;&gt;0020. 有效的括号&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/21.merge-two-sorted-lists.md&#34;&gt;0021. 合并两个有序链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/26.remove-duplicates-from-sorted-array.md&#34;&gt;0026. 删除排序数组中的重复项&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/53.maximum-sum-subarray-cn.md&#34;&gt;0053. 最大子序和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/66.plus-one.md&#34;&gt;0066. 加一&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/88.merge-sorted-array.md&#34;&gt;0088. 合并两个有序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/101.symmetric-tree.md&#34;&gt;0101. 对称二叉树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/104.maximum-depth-of-binary-tree.md&#34;&gt;0104. 二叉树的最大深度&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/108.convert-sorted-array-to-binary-search-tree.md&#34;&gt;0108. 将有序数组转换为二叉搜索树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/121.best-time-to-buy-and-sell-stock.md&#34;&gt;0121. 买卖股票的最佳时机&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/122.best-time-to-buy-and-sell-stock-ii.md&#34;&gt;0122. 买卖股票的最佳时机 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/125.valid-palindrome.md&#34;&gt;0125. 验证回文串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/136.single-number.md&#34;&gt;0136. 只出现一次的数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/155.min-stack.md&#34;&gt;0155. 最小栈&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/160.Intersection-of-Two-Linked-Lists.md&#34;&gt;0160. 相交链表&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/167.two-sum-ii-input-array-is-sorted.md&#34;&gt;0167. 两数之和 II 输入有序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/169.majority-element.md&#34;&gt;0169. 多数元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/172.factorial-trailing-zeroes.md&#34;&gt;0172. 阶乘后的零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/190.reverse-bits.md&#34;&gt;0190. 颠倒二进制位&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/191.number-of-1-bits.md&#34;&gt;0191. 位 1 的个数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/198.house-robber.md&#34;&gt;0198. 打家劫舍&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/203.remove-linked-list-elements.md&#34;&gt;0203. 移除链表元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/206.reverse-linked-list.md&#34;&gt;0206. 反转链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/219.contains-duplicate-ii.md&#34;&gt;0219. 存在重复元素 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/226.invert-binary-tree.md&#34;&gt;0226. 翻转二叉树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/232.implement-queue-using-stacks.md&#34;&gt;0232. 用栈实现队列&lt;/a&gt; 👍 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/263.ugly-number.md&#34;&gt;0263. 丑数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/283.move-zeroes.md&#34;&gt;0283. 移动零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/342.power-of-four.md&#34;&gt;0342. 4 的幂&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/349.intersection-of-two-arrays.md&#34;&gt;0349. 两个数组的交集&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/371.sum-of-two-integers.md&#34;&gt;0371. 两整数之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/401.binary-watch.md&#34;&gt;401. 二进制手表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/437.path-sum-iii.md&#34;&gt;0437. 路径总和 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/455.AssignCookies.md&#34;&gt;0455. 分发饼干&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/504.base-7.md&#34;&gt;0504. 七进制数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/575.distribute-candies.md&#34;&gt;0575. 分糖果&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/606.construct-string-from-binary-tree.md&#34;&gt;0606. 根据二叉树创建字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/661.image-smoother.md&#34;&gt;0661. 图片平滑器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/665.non-decreasing-array.md&#34;&gt;0665. 非递减数列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/821.shortest-distance-to-a-character.md&#34;&gt;821. 字符的最短距离&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/874.walking-robot-simulation.md&#34;&gt;0874. 模拟行走机器人&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1128.number-of-equivalent-domino-pairs.md&#34;&gt;1128. 等价多米诺骨牌对的数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1260.shift-2d-grid.md&#34;&gt;1260. 二维网格迁移&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1332.remove-palindromic-subsequences.md&#34;&gt;1332. 删除回文子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;中等难度题目合集&lt;/h3&gt; &#xA;&lt;p&gt;中等题目是力扣比例最大的部分，因此这部分我的题解也是最多的。 大家不要太过追求难题，先把中等难度题目做熟了再说。&lt;/p&gt; &#xA;&lt;p&gt;这部分的题目要不需要我们挖掘题目的内含信息， 将其抽象成简单题目。 要么是一些写起来比较麻烦的题目， 一些人编码能力不行就挂了。因此大家一定要自己做， 即使看了题解 ”会了“，也要自己码一遍。自己不亲自写一遍，里面的细节永远不知道。&lt;/p&gt; &#xA;&lt;p&gt;以下是我列举的经典题目（带 91 字样的表示出自 &lt;strong&gt;91 天学算法&lt;/strong&gt;活动）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/get-kth-magic-number-lcci.md&#34;&gt;面试题 17.09. 第 k 个数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/max-black-square-lcci.md&#34;&gt;面试题 17.23. 最大黑方阵&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/sub-sort-lcci.md&#34;&gt;面试题 16.16. 部分排序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Increasing-Digits.md&#34;&gt;Increasing Digits&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion.md&#34;&gt;Longest Contiguously Strictly Increasing Sublist After Deletion&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/consecutive-wins.md&#34;&gt;Consecutive Wins&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Sort-String-by-Flipping.md&#34;&gt;Sort-String-by-Flipping&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Number-of-Substrings-with-Single-Character-Difference.md&#34;&gt;Number of Substrings with Single Character Difference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Bus-Fare.md&#34;&gt;Bus Fare&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Minimum-Dropping-Path-Sum.md&#34;&gt;Minimum Dropping Path Sum&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Longest-Matrix-Path-Length.md&#34;&gt;Longest-Matrix-Path-Length&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Every-Sublist-Min-Sum.md&#34;&gt;Every Sublist Min Sum&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Maximize-the-Number-of-Equivalent-Pairs-After-Swaps.md&#34;&gt;Maximize the Number of Equivalent Pairs After Swaps&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2.add-two-numbers.md&#34;&gt;0002. 两数相加&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/3.longest-substring-without-repeating-characters.md&#34;&gt;0003. 无重复字符的最长子串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5.longest-palindromic-substring.md&#34;&gt;0005. 最长回文子串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/11.container-with-most-water.md&#34;&gt;0011. 盛最多水的容器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/15.3sum.md&#34;&gt;0015. 三数之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/17.Letter-Combinations-of-a-Phone-Number.md&#34;&gt;0017. 电话号码的字母组合&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/19.removeNthNodeFromEndofList.md&#34;&gt;0019. 删除链表的倒数第 N 个节点&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/22.generate-parentheses.md&#34;&gt;0022. 括号生成&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/24.swapNodesInPairs.md&#34;&gt;0024. 两两交换链表中的节点&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/29.divide-two-integers.md&#34;&gt;0029. 两数相除&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/31.next-permutation.md&#34;&gt;0031. 下一个排列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/33.search-in-rotated-sorted-array.md&#34;&gt;0033. 搜索旋转排序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/39.combination-sum.md&#34;&gt;0039. 组合总和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/40.combination-sum-ii.md&#34;&gt;0040. 组合总和 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/46.permutations.md&#34;&gt;0046. 全排列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/47.permutations-ii.md&#34;&gt;0047. 全排列 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/48.rotate-image.md&#34;&gt;0048. 旋转图像&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/49.group-anagrams.md&#34;&gt;0049. 字母异位词分组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/50.pow-x-n.md&#34;&gt;0050. Pow(x, n)&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/55.jump-game.md&#34;&gt;0055. 跳跃游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/56.merge-intervals.md&#34;&gt;0056. 合并区间&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/60.permutation-sequence.md&#34;&gt;0060. 第 k 个排列&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/61.Rotate-List.md&#34;&gt;0061. 旋转链表&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/62.unique-paths.md&#34;&gt;0062. 不同路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/73.set-matrix-zeroes.md&#34;&gt;0073. 矩阵置零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/75.sort-colors.md&#34;&gt;0075. 颜色分类&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/78.subsets.md&#34;&gt;0078. 子集&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/79.word-search.md&#34;&gt;0079. 单词搜索&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/80.remove-duplicates-from-sorted-array-ii.md&#34;&gt;0080. 删除排序数组中的重复项 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/86.partition-list.md&#34;&gt;0086. 分隔链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/90.subsets-ii.md&#34;&gt;0090. 子集 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/91.decode-ways.md&#34;&gt;0091. 解码方法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/92.reverse-linked-list-ii.md&#34;&gt;0092. 反转链表 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/94.binary-tree-inorder-traversal.md&#34;&gt;0094. 二叉树的中序遍历&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/95.unique-binary-search-trees-ii.md&#34;&gt;0095. 不同的二叉搜索树 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/96.unique-binary-search-trees.md&#34;&gt;0096. 不同的二叉搜索树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/98.validate-binary-search-tree.md&#34;&gt;0098. 验证二叉搜索树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/102.binary-tree-level-order-traversal.md&#34;&gt;0102. 二叉树的层序遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/103.binary-tree-zigzag-level-order-traversal.md&#34;&gt;0103. 二叉树的锯齿形层次遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/113.path-sum-ii.md&#34;&gt;0113. 路径总和 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/129.sum-root-to-leaf-numbers.md&#34;&gt;0129. 求根到叶子节点数字之和&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/130.surrounded-regions.md&#34;&gt;0130. 被围绕的区域&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/131.palindrome-partitioning.md&#34;&gt;0131. 分割回文串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/139.word-break.md&#34;&gt;0139. 单词拆分&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/144.binary-tree-preorder-traversal.md&#34;&gt;0144. 二叉树的前序遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/147.insertion-sort-list.md&#34;&gt;0147. 对链表进行插入排序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/150.evaluate-reverse-polish-notation.md&#34;&gt;0150. 逆波兰表达式求值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/152.maximum-product-subarray.md&#34;&gt;0152. 乘积最大子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/153.find-minimum-in-rotated-sorted-array.md&#34;&gt;0153. 寻找旋转排序数组中的最小值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/199.binary-tree-right-side-view.md&#34;&gt;0199. 二叉树的右视图&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/200.number-of-islands.md&#34;&gt;0200. 岛屿数量&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/201.bitwise-and-of-numbers-range.md&#34;&gt;0201. 数字范围按位与&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/208.implement-trie-prefix-tree.md&#34;&gt;0208. 实现 Trie （前缀树）&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/209.minimum-size-subarray-sum.md&#34;&gt;0209. 长度最小的子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/211.add-and-search-word-data-structure-design.md&#34;&gt;0211. 添加与搜索单词 - 数据结构设计&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/215.kth-largest-element-in-an-array.md&#34;&gt;0215. 数组中的第 K 个最大元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/220.contains-duplicate-iii.md&#34;&gt;0220. 存在重复元素 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/221.maximal-square.md&#34;&gt;0221. 最大正方形&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/227.basic-calculator-ii.md&#34;&gt;0227. 基本计算器 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/229.majority-element-ii.md&#34;&gt;0229. 求众数 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/230.kth-smallest-element-in-a-bst.md&#34;&gt;0230. 二叉搜索树中第 K 小的元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md&#34;&gt;0236. 二叉树的最近公共祖先&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/238.product-of-array-except-self.md&#34;&gt;0238. 除自身以外数组的乘积&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/240.search-a-2-d-matrix-ii.md&#34;&gt;0240. 搜索二维矩阵 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/279.perfect-squares.md&#34;&gt;0279. 完全平方数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md&#34;&gt;0309. 最佳买卖股票时机含冷冻期&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/322.coin-change.md&#34;&gt;0322. 零钱兑换&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/328.odd-even-linked-list.md&#34;&gt;0328. 奇偶链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/331.verify-preorder-serialization-of-a-binary-tree.md&#34;&gt;0331. 验证二叉树的前序序列化&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/334.increasing-triplet-subsequence.md&#34;&gt;0334. 递增的三元子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/337.house-robber-iii.md&#34;&gt;0337. 打家劫舍 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/343.integer-break.md&#34;&gt;0343. 整数拆分&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/365.water-and-jug-problem.md&#34;&gt;0365. 水壶问题&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md&#34;&gt;0378. 有序矩阵中第 K 小的元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/380.insert-delete-getrandom-o1.md&#34;&gt;0380. 常数时间插入、删除和获取随机元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/385.mini-parser.md&#34;&gt;0385. 迷你语法分析器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/394.decode-string.md&#34;&gt;0394. 字符串解码&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/416.partition-equal-subset-sum.md&#34;&gt;0416. 分割等和子集&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/424.longest-repeating-character-replacement.md&#34;&gt;0424. 替换后的最长重复字符&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/438.find-all-anagrams-in-a-string.md&#34;&gt;0438. 找到字符串中所有字母异位词&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/445.add-two-numbers-ii.md&#34;&gt;0445. 两数相加 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/454.4-sum-ii.md&#34;&gt;0454. 四数相加 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/456.132-pattern.md&#34;&gt;0456. 132 模式&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/457.circular-array-loop.md&#34;&gt;0457.457. 环形数组是否存在循环&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/464.can-i-win.md&#34;&gt;0464. 我能赢么&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/470.implement-rand10-using-rand7.md&#34;&gt;0470. 用 Rand7() 实现 Rand10&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/473.matchsticks-to-square.md&#34;&gt;0473. 火柴拼正方形&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/494.target-sum.md&#34;&gt;0494. 目标和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/516.longest-palindromic-subsequence.md&#34;&gt;0516. 最长回文子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/513.find-bottom-left-tree-value.md&#34;&gt;0513. 找树左下角的值&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/518.coin-change-2.md&#34;&gt;0518. 零钱兑换 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/525.contiguous-array.md&#34;&gt;0525. 连续数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/547.number-of-provinces.md&#34;&gt;0547. 省份数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/560.subarray-sum-equals-k.md&#34;&gt;0560. 和为 K 的子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/609.find-duplicate-file-in-system.md&#34;&gt;0609. 在系统中查找重复文件&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/611.valid-triangle-number.md&#34;&gt;0611. 有效三角形的个数&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/673.number-of-longest-increasing-subsequence.md&#34;&gt;0673. 最长递增子序列的个数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/686.repeated-string-match.md&#34;&gt;0686. 重复叠加字符串匹配&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/718.maximum-length-of-repeated-subarray.md&#34;&gt;0718. 最长重复子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/714.best-time-to-buy-and-sell-stock-with-transaction-fee.md&#34;&gt;0714. 买卖股票的最佳时机含手续费&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/735.asteroid-collision.md&#34;&gt;0735. 行星碰撞&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/754.reach-a-number.md&#34;&gt;0754. 到达终点数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/785.is-graph-bipartite.md&#34;&gt;0785. 判断二分图&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/790.domino-and-tromino-tiling.md&#34;&gt;0790. 多米诺和托米诺平铺&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/799.champagne-tower.md&#34;&gt;0799. 香槟塔&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/801.minimum-swaps-to-make-sequences-increasing.md&#34;&gt;0801. 使序列递增的最小交换次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/816.ambiguous-coordinates.md&#34;&gt;0816. 模糊坐标&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/820.short-encoding-of-words.md&#34;&gt;0820. 单词的压缩编码&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/838.push-dominoes.md&#34;&gt;0838. 推多米诺&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/873.length-of-longest-fibonacci-subsequence.md&#34;&gt;0873. 最长的斐波那契子序列的长度&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/875.koko-eating-bananas.md&#34;&gt;0875. 爱吃香蕉的珂珂&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/877.stone-game.md&#34;&gt;0877. 石子游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/886.possible-bipartition.md&#34;&gt;0886. 可能的二分法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/898.bitwise-ors-of-subarrays.md&#34;&gt;0898. 子数组按位或操作&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/900.rle-iterator.md&#34;&gt;0900. RLE 迭代器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/911.online-election.md&#34;&gt;0911. 在线选举&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/912.sort-an-array.md&#34;&gt;0912. 排序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/932.beautiful-array.md&#34;&gt;0932. 漂亮数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/935.knight-dialer.md&#34;&gt;0935. 骑士拨号器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/947.most-stones-removed-with-same-row-or-column.md&#34;&gt;0947. 移除最多的同行或同列石头&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/959.regions-cut-by-slashes.md&#34;&gt;0959. 由斜杠划分区域&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/978.longest-turbulent-subarray.md&#34;&gt;0978. 最长湍流子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/987.vertical-order-traversal-of-a-binary-tree.md&#34;&gt;0987. 二叉树的垂序遍历&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1004.max-consecutive-ones-iii.md&#34;&gt;1004. 最大连续 1 的个数 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1011.capacity-to-ship-packages-within-d-days.md&#34;&gt;1011. 在 D 天内送达包裹的能力&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1014.best-sightseeing-pair.md&#34;&gt;1014. 最佳观光组合&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1015.smallest-integer-divisible-by-k.md&#34;&gt;1015. 可被 K 整除的最小整数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1019.next-greater-node-in-linked-list.md&#34;&gt;1019. 链表中的下一个更大节点&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1020.number-of-enclaves.md&#34;&gt;1020. 飞地的数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1023.camelcase-matching.md&#34;&gt;1023. 驼峰式匹配&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md&#34;&gt;1031. 两个非重叠子数组的最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1043.partition-array-for-maximum-sum.md&#34;&gt;1043. 分隔数组以得到最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1104.path-in-zigzag-labelled-binary-tree.md&#34;&gt;1104. 二叉树寻路&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1129.shortest-path-with-alternating-colors.md&#34;&gt;1129. 颜色交替的最短路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1131.maximum-of-absolute-value-expression.md&#34;&gt;1131. 绝对值表达式的最大值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1138.alphabet-board-path.md&#34;&gt;1138. 字母板上的路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1186.maximum-subarray-sum-with-one-deletion.md&#34;&gt;1186. 删除一次得到子数组最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md&#34;&gt;1218. 最长定差子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1227.airplane-seat-assignment-probability.md&#34;&gt;1227. 飞机座位分配概率&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md&#34;&gt;1261. 在受污染的二叉树中查找元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1262.greatest-sum-divisible-by-three.md&#34;&gt;1262. 可被三整除的最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md&#34;&gt;1297. 子串的最大出现次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1310.xor-queries-of-a-subarray.md&#34;&gt;1310. 子数组异或查询&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md&#34;&gt;1334. 阈值距离内邻居最少的城市&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md&#34;&gt;1371. 每个元音包含偶数次的最长子字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1381.design-a-stack-with-increment-operation.md&#34;&gt;1381. 设计一个支持增量操作的栈&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1423.maximum-points-you-can-obtain-from-cards.md&#34;&gt;1423. 可获得的最大点数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1438.longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.md&#34;&gt;1438. 绝对差不超过限制的最长连续子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1558.minimum-numbers-of-function-calls-to-make-target-array.md&#34;&gt;1558. 得到目标数组的最少函数调用次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1574.shortest-subarray-to-be-removed-to-make-array-sorted.md&#34;&gt;1574. 删除最短的子数组使剩余数组有序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1589.maximum-sum-obtained-of-any-permutation.md&#34;&gt;1589. 所有排列中的最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1631.path-with-minimum-effort.md&#34;&gt;1631. 最小体力消耗路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1658.minimum-operations-to-reduce-x-to-zero.md&#34;&gt;1658. 将 x 减到 0 的最小操作数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1697.checking-existence-of-edge-length-limited-paths.md&#34;&gt;1697. 检查边长度限制的路径是否存在&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1737.change-minimum-characters-to-satisfy-one-of-three-conditions.md&#34;&gt;1737. 满足三条件之一需改变的最少字符数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1834.single-threaded-cpu.md&#34;&gt;1834. 单线程 CPU&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1899.merge-triplets-to-form-target-triplet.md&#34;&gt;1899. 合并若干三元组以形成目标三元组&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1904.the-number-of-full-rounds-you-have-played.md&#34;&gt;1904. 你完成的完整对局数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1906.minimum-absolute-difference-queries.md&#34;&gt;1906. 查询差绝对值的最小值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2007.find-original-array-from-doubled-array.md&#34;&gt;2007. 从双倍数组中还原原数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2008.maximum-earnings-from-taxi.md&#34;&gt;2008. 出租车的最大盈利&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5935.find-good-days-to-rob-the-bank.md&#34;&gt;5935. 适合打劫银行的日子&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5936.detonate-the-maximum-bombs.md&#34;&gt;5936. 引爆最多的炸弹&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5965.intervals-between-identical-elements.md&#34;&gt;5965. 相同元素的间隔之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/6201.maximize-number-of-subsequences-in-a-string.md&#34;&gt;6021. 字符串中最多数目的子字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;困难难度题目合集&lt;/h3&gt; &#xA;&lt;p&gt;困难难度题目从类型上说多是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图&lt;/li&gt; &#xA; &lt;li&gt;设计题&lt;/li&gt; &#xA; &lt;li&gt;游戏场景题目&lt;/li&gt; &#xA; &lt;li&gt;中等题目的 follow up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;从解法上来说，多是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图算法&lt;/li&gt; &#xA; &lt;li&gt;动态规划&lt;/li&gt; &#xA; &lt;li&gt;二分法&lt;/li&gt; &#xA; &lt;li&gt;DFS &amp;amp; BFS&lt;/li&gt; &#xA; &lt;li&gt;状态压缩&lt;/li&gt; &#xA; &lt;li&gt;剪枝&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;从逻辑上说， 要么就是非常难想到，要么就是非常难写代码。 这里我总结了几个技巧：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;看题目的数据范围， 看能否暴力模拟&lt;/li&gt; &#xA; &lt;li&gt;暴力枚举所有可能的算法往上套，比如图的题目。&lt;/li&gt; &#xA; &lt;li&gt;总结和记忆解题模板，减少解题压力&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;以下是我列举的经典题目（带 91 字样的表示出自 &lt;strong&gt;91 天学算法&lt;/strong&gt;活动）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/lcp20.meChtZ.md&#34;&gt;LCP 20. 快速公交&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/lcp21.Za25hA.md&#34;&gt;LCP 21. 追逐游戏&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Number-Stream-to-Intervals.md&#34;&gt;Number Stream to Intervals&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Triple-Inversion.md&#34;&gt;Triple Inversion&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Kth-Pair-Distance.md&#34;&gt;Kth Pair Distance&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Minimum-Light-Radius.md&#34;&gt;Minimum Light Radius&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Largest-Equivalent-Set-of-Pairs.md&#34;&gt;Largest Equivalent Set of Pairs&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Ticket-Order.md&#34;&gt;Ticket-Order.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Connected-Road-to-Destination.md&#34;&gt;Connected-Road-to-Destination&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/4.median-of-two-sorted-arrays.md&#34;&gt;0004. 寻找两个正序数组的中位数&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/23.merge-k-sorted-lists.md&#34;&gt;0023. 合并 K 个升序链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/25.reverse-nodes-in-k-groups.md&#34;&gt;0025. K 个一组翻转链表&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/30.substring-with-concatenation-of-all-words.md&#34;&gt;0030. 串联所有单词的子串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/32.longest-valid-parentheses.md&#34;&gt;0032. 最长有效括号&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/42.trapping-rain-water.md&#34;&gt;0042. 接雨水&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/52.N-Queens-II.md&#34;&gt;0052. N 皇后 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/57.insert-interval.md&#34;&gt;0057. 插入区间&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/65.valid-number.md&#34;&gt;0065. 有效数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/84.largest-rectangle-in-histogram.md&#34;&gt;0084. 柱状图中最大的矩形&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/85.maximal-rectangle.md&#34;&gt;0085. 最大矩形&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/87.scramble-string.md&#34;&gt;0087. 扰乱字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/124.binary-tree-maximum-path-sum.md&#34;&gt;0124. 二叉树中的最大路径和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/128.longest-consecutive-sequence.md&#34;&gt;0128. 最长连续序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/132.palindrome-partitioning-ii.md&#34;&gt;0132. 分割回文串 II&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/140.word-break-ii.md&#34;&gt;0140. 单词拆分 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/145.binary-tree-postorder-traversal.md&#34;&gt;0145. 二叉树的后序遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/146.lru-cache.md&#34;&gt;0146. LRU 缓存机制&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/154.find-minimum-in-rotated-sorted-array-ii.md&#34;&gt;0154. 寻找旋转排序数组中的最小值 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/212.word-search-ii.md&#34;&gt;0212. 单词搜索 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/239.sliding-window-maximum.md&#34;&gt;0239. 滑动窗口最大值&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/295.find-median-from-data-stream.md&#34;&gt;0295. 数据流的中位数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/297.serialize-and-deserialize-binary-tree.md&#34;&gt;0297. 二叉树的序列化与反序列化&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/301.remove-invalid-parentheses.md&#34;&gt;0301. 删除无效的括号&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/312.burst-balloons.md&#34;&gt;0312. 戳气球&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/330.patching-array.md&#34;&gt;330. 按要求补齐数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/335.self-crossing.md&#34;&gt;0335. 路径交叉&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/460.lfu-cache.md&#34;&gt;0460. LFU 缓存&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/472.concatenated-words.md&#34;&gt;0472. 连接词&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/480.sliding-window-median.md&#34;&gt;0480. 滑动窗口中位数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/483.smallest-good-base.md&#34;&gt;0483. 最小好进制&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/488.zuma-game.md&#34;&gt;0488. 祖玛游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/493.reverse-pairs.md&#34;&gt;0493. 翻转对&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/664.strange-printer.md&#34;&gt;0664. 奇怪的打印机&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/679.24-game.md&#34;&gt;0679. 24 点游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/715.range-module.md&#34;&gt;0715. Range 模块&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/726.number-of-atoms.md&#34;&gt;0726. 原子的数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/768.max-chunks-to-make-sorted-ii.md&#34;&gt;0768. 最多能完成排序的块 II&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/805.split-array-with-same-average.md&#34;&gt;0805. 数组的均值分割&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/839.similar-string-groups.md&#34;&gt;0839. 相似字符串组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/887.super-egg-drop.md&#34;&gt;0887. 鸡蛋掉落&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/895.maximum-frequency-stack.md&#34;&gt;0895. 最大频率栈&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/909.snakes-and-ladders.md&#34;&gt;0909. 蛇梯棋&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/975.odd-even-jump.md&#34;&gt;0975. 奇偶跳&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/995.minimum-number-of-k-consecutive-bit-flips.md&#34;&gt;0995. K 连续位的最小翻转次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1032.stream-of-characters.md&#34;&gt;1032. 字符流&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1168.optimize-water-distribution-in-a-village.md&#34;&gt;1168. 水资源分配优化&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1178.number-of-valid-words-for-each-puzzle.md&#34;&gt;1178. 猜字谜&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1203.sort-items-by-groups-respecting-dependencies.md&#34;&gt;1203. 项目管理&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1255.maximum-score-words-formed-by-letters.md&#34;&gt;1255. 得分最高的单词集合&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1435.jump-game-iv.md&#34;&gt;1345. 跳跃游戏 IV&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md&#34;&gt;1449. 数位成本和为目标值的最大数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1494.parallel-courses-ii.md&#34;&gt;1494. 并行课程 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1521.find-a-value-of-a-mysterious-function-closest-to-target.md&#34;&gt;1521. 找到最接近目标值的函数值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1526.minimum-number-of-increments-on-subarrays-to-form-a-target-array.md&#34;&gt;1526. 形成目标数组的子数组最少增加次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1649.create-sorted-array-through-instructions.md&#34;&gt;1649. 通过指令创建有序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1671.minimum-number-of-removals-to-make-mountain-array.md&#34;&gt;1671. 得到山形数组的最少删除次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5640.maximum-xor-with-an-element-from-array.md&#34;&gt;1707. 与数组中元素的最大异或值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1713.minimum-operations-to-make-a-subsequence.md&#34;&gt;1713. 得到子序列的最少操作次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1723.find-minimum-time-to-finish-all-jobs.md&#34;&gt;1723. 完成所有工作的最短时间&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1787.make-the-xor-of-all-segments-equal-to-zero.md&#34;&gt;1787. 使所有区间的异或结果为零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1835.find-xor-sum-of-all-pairs-bitwise-and.md&#34;&gt;1835. 所有数对按位与结果的异或和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1871.jump-game-vii.md&#34;&gt;1871. 跳跃游戏 VII&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1872.stone-game-viii.md&#34;&gt;1872. 石子游戏 VIII&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5775.minimum-skips-to-arrive-at-meeting-on-time.md&#34;&gt;1883. 准时抵达会议现场的最小跳过休息次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1970.last-day-where-you-can-still-cross.md&#34;&gt;1970. 你能穿过矩阵的最后一天&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2009.minimum-number-of-operations-to-make-array-continuous.md&#34;&gt;2009. 使数组连续的最少操作数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2025.maximum-number-of-ways-to-partition-an-array.md&#34;&gt;2025. 分割数组的最多方案数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2030.smallest-k-length-subsequence-with-occurrences-of-a-letter.md&#34;&gt;2030. 含特定字母的最小子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2102.sequentially-ordinal-rank-tracker.md&#34;&gt;2102. 序列顺序查询&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2209.minimum-white-tiles-after-covering-with-carpets.md&#34;&gt;2209. 用地毯覆盖后的最少白色砖块&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2281.sum-of-total-strength-of-wizards.md&#34;&gt;2281.sum-of-total-strength-of-wizards&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5999.count-good-triplets-in-an-array.md&#34;&gt;5999. 统计数组中好三元组数目&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔱&lt;/span&gt; &amp;nbsp;anki 卡片&lt;/h2&gt; &#xA;&lt;p&gt;Anki 主要分为两个部分：一部分是关键点到题目的映射，另一部分是题目到思路，关键点，代码的映射。&lt;/p&gt; &#xA;&lt;p&gt;全部卡片都在 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/assets/anki/leetcode.apkg&#34;&gt;anki-card&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;使用方法：&lt;/p&gt; &#xA;&lt;p&gt;anki - 文件 - 导入 - 下拉格式选择“打包的 anki 集合”，然后选中你下载好的文件，确定即可。&lt;/p&gt; &#xA;&lt;p&gt;更多关于 anki 使用方法的请查看 &lt;a href=&#34;https://apps.ankiweb.net/&#34;&gt;anki 官网&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;目前已更新卡片一览（仅列举正面）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;二分法解决问题的关键点是什么，相关问题有哪些？&lt;/li&gt; &#xA; &lt;li&gt;如何用栈的特点来简化操作， 涉及到的题目有哪些？&lt;/li&gt; &#xA; &lt;li&gt;双指针问题的思路以及相关题目有哪些？&lt;/li&gt; &#xA; &lt;li&gt;滑动窗口问题的思路以及相关题目有哪些？&lt;/li&gt; &#xA; &lt;li&gt;回溯法解题的思路以及相关题目有哪些？&lt;/li&gt; &#xA; &lt;li&gt;数论解决问题的关键点是什么，相关问题有哪些？&lt;/li&gt; &#xA; &lt;li&gt;位运算解决问题的关键点是什么，相关问题有哪些？&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;已加入的题目有：#2 #3 #11&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;span&gt;📈&lt;/span&gt; 大事件&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-07-10 ：&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thanksGiving.md&#34;&gt;纪念项目 Star 突破 1W 的一个短文&lt;/a&gt;， 记录了项目的&#34;兴起&#34;之路，大家有兴趣可以看一下，如果对这个项目感兴趣，请&lt;strong&gt;点击一下 Star&lt;/strong&gt;， 项目会&lt;strong&gt;持续更新&lt;/strong&gt;，感谢大家的支持。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-10-08: &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thanksGiving2.md&#34;&gt;纪念 LeetCode 项目 Star 突破 2W&lt;/a&gt;，并且 Github 搜索“LeetCode”，排名第一。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-04-12: &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thanksGiving3.md&#34;&gt;项目突破三万 Star&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-04-14: 官网&lt;code&gt;力扣加加&lt;/code&gt;上线啦 💐💐💐💐💐，有专题讲解，每日一题，下载区和视频题解，后续会增加更多内容，还不赶紧收藏起来？地址：&lt;a href=&#34;http://leetcode-solution.cn/&#34;&gt;http://leetcode-solution.cn/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://tva1.sinaimg.cn/large/007S8ZIlly1ghluemaoj3j30z90dtmy5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2021-02-23: star 破四万&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💝&lt;/span&gt; 贡献&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果有想法和创意，请提 &lt;a href=&#34;https://github.com/azl397985856/leetcode/issues&#34;&gt;issue&lt;/a&gt; 或者进群提&lt;/li&gt; &#xA; &lt;li&gt;如果想贡献增加题解或者翻译， 可以参考 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/CONTRIBUTING.md&#34;&gt;贡献指南&lt;/a&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;关于如何提交题解，我写了一份 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/templates/problems/1014.best-sightseeing-pair.md&#34;&gt;指南&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;如果需要修改项目中图片，&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/assets/drawio/&#34;&gt;这里&lt;/a&gt; 存放了项目中绘制图的源代码，大家可以用 &lt;a href=&#34;https://www.draw.io/&#34;&gt;draw.io&lt;/a&gt; 打开进行编辑。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💌&lt;/span&gt; 鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢为这个项目作出贡献的所有 &lt;a href=&#34;https://github.com/azl397985856/leetcode/graphs/contributors&#34;&gt;小伙伴&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/LICENSE.txt&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trekhleb/javascript-algorithms</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/trekhleb/javascript-algorithms</id>
    <link href="https://github.com/trekhleb/javascript-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🇺🇦 UKRAINE &lt;a href=&#34;https://twitter.com/MFA_Ukraine&#34;&gt;IS BEING ATTACKED&lt;/a&gt; BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Help Ukraine via &lt;a href=&#34;https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi&#34;&gt;National Bank of Ukraine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Help Ukraine via &lt;a href=&#34;https://savelife.in.ua/en/donate/&#34;&gt;SaveLife&lt;/a&gt; fund&lt;/li&gt; &#xA;  &lt;li&gt;More info on &lt;a href=&#34;https://war.ukraine.ua/&#34;&gt;war.ukraine.ua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/trekhleb/javascript-algorithms&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; &#xA;&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md&#34;&gt;&lt;em&gt;简体中文&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md&#34;&gt;&lt;em&gt;繁體中文&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md&#34;&gt;&lt;em&gt;한국어&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md&#34;&gt;&lt;em&gt;日本語&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md&#34;&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md&#34;&gt;&lt;em&gt;Français&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md&#34;&gt;&lt;em&gt;Español&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md&#34;&gt;&lt;em&gt;Português&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md&#34;&gt;&lt;em&gt;Русский&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md&#34;&gt;&lt;em&gt;Türk&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md&#34;&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md&#34;&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md&#34;&gt;&lt;em&gt;Українська&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md&#34;&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.vi-VN.md&#34;&gt;&lt;em&gt;Tiếng Việt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.de-DE.md&#34;&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;☝ Note that this project is meant to be used for learning and researching purposes only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list&#34;&gt;Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list&#34;&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table&#34;&gt;Hash Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap&#34;&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue&#34;&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie&#34;&gt;Trie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree&#34;&gt;Tree&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree&#34;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree&#34;&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree&#34;&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree&#34;&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph&#34;&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set&#34;&gt;Disjoint Set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter&#34;&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; &#xA;&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits&#34;&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/binary-floating-point&#34;&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial&#34;&gt;Factorial&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&#34;&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors&#34;&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan&#39;s theorem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test&#34;&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&#34;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple&#34;&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes&#34;&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two&#34;&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&#34;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number&#34;&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian&#34;&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&#34;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method&#34;&gt;Horner&#39;s method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&#34;&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-distance&#34;&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&#34;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root&#34;&gt;Square Root&lt;/a&gt; - Newton&#39;s method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui&#34;&gt;Liu Hui π Algorithm&lt;/a&gt; - approximate π calculations based on N-gons&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&#34;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product&#34;&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates&#34;&gt;Fisher–Yates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&#34;&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&#34;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&#34;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&#34;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&#34;&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;Knapsack Problem&lt;/a&gt; - &#34;0/1&#34; and &#34;Unbound&#34; ones&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt; - &#34;Brute Force&#34; and &#34;Dynamic Programming&#34; (Kadane&#39;s) versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&#34;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance&#34;&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/palindrome&#34;&gt;Palindrome&lt;/a&gt; - check if the string is the same in reverse&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&#34;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt&#34;&gt;Knuth–Morris–Pratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm&#34;&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp&#34;&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&#34;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&#34;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search&#34;&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&#34;&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search&#34;&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort&#34;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort&#34;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort&#34;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort&#34;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&#34;&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort&#34;&gt;Shellsort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort&#34;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort&#34;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal&#34;&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal&#34;&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&#34;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search&#34;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&#34;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search&#34;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&#34;&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&#34;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&#34;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&#34;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle&#34;&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&#34;&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting&#34;&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points&#34;&gt;Articulation Points&lt;/a&gt; - Tarjan&#39;s algorithm (DFS based)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges&#34;&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path&#34;&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury&#39;s algorithm - Visit every edge exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&#34;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components&#34;&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju&#39;s algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&#34;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash&#34;&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/rail-fence-cipher&#34;&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher&#34;&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/hill-cipher&#34;&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://github.com/trekhleb/nano-neuron&#34;&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/knn&#34;&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/k-means&#34;&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Processing&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&#34;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Statistics&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/statistics/weighted-random&#34;&gt;Weighted Random&lt;/a&gt; - select the random item from the list based on items&#39; weights&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evolutionary algorithms&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://github.com/trekhleb/self-parking-car-evolution&#34;&gt;Genetic algorithm&lt;/a&gt; - example of how the genetic algorithm may be applied for training the self-parking cars&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&#34;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation&#34;&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal&#39;s Triangle based examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&#34;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&#34;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&#34;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; &#xA;&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&#34;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&#34;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&#34;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&#34;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&#34;&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&#34;&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&#34;&gt;Binary Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&#34;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&#34;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&#34;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&#34;&gt;Quicksort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&#34;&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&#34;&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&#34;&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&#34;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&#34;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&#34;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&#34;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&#34;&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&#34;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&#34;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&#34;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&#34;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&#34;&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&#34;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&#34;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&#34;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a different path of finding a solution. Normally the DFS traversal of state-space is being used. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&#34;&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&#34;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&#34;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&#34;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&#34;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem, in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use this repository&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test -- &#39;LinkedList&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In case if linting or testing is failing try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -rf ./node_modules&#xA;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also make sure that you&#39;re using a correct Node version (&lt;code&gt;&amp;gt;=14.16.0&lt;/code&gt;). If you&#39;re using &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; for Node version management you may run &lt;code&gt;nvm use&lt;/code&gt; from the root folder of the project and the correct version will be picked up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test -- &#39;playground&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful Information&lt;/h2&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&#34;&gt;▶ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Big O Notation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png&#34; alt=&#34;Big O graphs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;http://bigocheatsheet.com/&#34;&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Big O Notation&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 10 elements&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 100 elements&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 1000 elements&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Constant&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logarithmic&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linear&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n log(n)&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;600&lt;/td&gt; &#xA;   &lt;td&gt;9000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quadratic&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;10000&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exponential&lt;/td&gt; &#xA;   &lt;td&gt;1024&lt;/td&gt; &#xA;   &lt;td&gt;1.26e+29&lt;/td&gt; &#xA;   &lt;td&gt;1.07e+301&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Factorial&lt;/td&gt; &#xA;   &lt;td&gt;3628800&lt;/td&gt; &#xA;   &lt;td&gt;9.3e+157&lt;/td&gt; &#xA;   &lt;td&gt;4.02e+2567&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Data Structure&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Access&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Search&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Insertion&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Deletion&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;False positives are possible while searching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Best&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Average&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Worst&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Memory&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Stable&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;depends on gap sequence&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;(log(n))&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;r - biggest number in array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;k - length of longest key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Project Backers&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You may support this project via ❤️️ &lt;a href=&#34;https://github.com/sponsors/trekhleb&#34;&gt;GitHub&lt;/a&gt; or ❤️️ &lt;a href=&#34;https://www.patreon.com/trekhleb&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms/raw/master/BACKERS.md&#34;&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;∑ = 0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ A few more &lt;a href=&#34;https://trekhleb.dev/projects/&#34;&gt;projects&lt;/a&gt; and &lt;a href=&#34;https://trekhleb.dev/blog/&#34;&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href=&#34;https://trekhleb.dev&#34;&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>vercel/next.js</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/vercel/next.js</id>
    <link href="https://github.com/vercel/next.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://nextjs.org&#34;&gt; &lt;img src=&#34;https://assets.vercel.com/image/upload/v1607554385/repositories/next-js/next-logo.png&#34; height=&#34;128&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://nextjs.org&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Vercel logo&#34; href=&#34;https://vercel.com&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=Vercel&amp;amp;labelColor=000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;NPM version&#34; href=&#34;https://www.npmjs.com/package/next&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/v/next.svg?style=for-the-badge&amp;amp;labelColor=000000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;License&#34; href=&#34;https://github.com/vercel/next.js/raw/canary/license.md&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/l/next.svg?style=for-the-badge&amp;amp;labelColor=000000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join the community on GitHub&#34; href=&#34;https://github.com/vercel/next.js/discussions&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&amp;amp;logo=Next.js&amp;amp;labelColor=000000&amp;amp;logoWidth=20&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a aria-label=&#34;next.js learn&#34; href=&#34;https://nextjs.org/learn&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://nextjs.org/learn&#34;&gt;https://nextjs.org/learn&lt;/a&gt; to get started with Next.js.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://nextjs.org/docs&#34;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; &#xA;&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&#34;https://nextjs.org/showcase&#34;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The Next.js community can be found on &lt;a href=&#34;https://github.com/vercel/next.js/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; &#xA;&lt;p&gt;To chat with other community members you can join the &lt;a href=&#34;https://nextjs.org/discord&#34;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/vercel/next.js/raw/canary/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&#34;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Good First Issues&lt;/h3&gt; &#xA;&lt;p&gt;We have a list of &lt;a href=&#34;https://github.com/vercel/next.js/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tim Neutkens (&lt;a href=&#34;https://twitter.com/timneutkens&#34;&gt;@timneutkens&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com/about/timneutkens&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&#34;https://twitter.com/nkzawa&#34;&gt;@nkzawa&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com/about/nkzawa&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guillermo Rauch (&lt;a href=&#34;https://twitter.com/rauchg&#34;&gt;@rauchg&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com/about/rauchg&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arunoda Susiripala (&lt;a href=&#34;https://twitter.com/arunoda&#34;&gt;@arunoda&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tony Kovanen (&lt;a href=&#34;https://twitter.com/tonykovanen&#34;&gt;@tonykovanen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dan Zajdband (&lt;a href=&#34;https://twitter.com/impronunciable&#34;&gt;@impronunciable&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>KingRan/KR</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/KingRan/KR</id>
    <link href="https://github.com/KingRan/KR" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;前言(必看)&lt;/h1&gt; &#xA;&lt;h2&gt;频道：&lt;a href=&#34;https://t.me/KingRan521&#34;&gt;https://t.me/KingRan521&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;君子慎独，不欺暗室， 卑以自牧，含章可贞。&lt;/p&gt; &#xA;&lt;p&gt;大丈夫立于天地之间， 当仰天地浩然正气， 行光明磊落之事。&lt;/p&gt; &#xA;&lt;p&gt;克己，慎独，守心，明性。&lt;/p&gt; &#xA;&lt;p&gt;以克人之心克己， 以容己之心容人。&lt;/p&gt; &#xA;&lt;p&gt;言尽于此，不想解释也不想回答！！！&lt;/p&gt; &#xA;&lt;p&gt;建议不要使用本库。免生是非！！！&lt;/p&gt; &#xA;&lt;p&gt;建议不要使用本库。免生是非！！！&lt;/p&gt; &#xA;&lt;p&gt;建议不要使用本库。免生是非！！！&lt;/p&gt; &#xA;&lt;h4&gt;无互助池，无需配置互助码，账号之间内部互助。&lt;/h4&gt; &#xA;&lt;h3&gt;目前有加密的如下（不放心请禁用）&lt;/h3&gt; &#xA;&lt;p&gt;1.jd_zdjr.js （组队瓜分）&lt;/p&gt; &#xA;&lt;p&gt;2.jd_cjzdgf.js （组队瓜分）&lt;/p&gt; &#xA;&lt;p&gt;3.jd_zjd.js （赚京豆）&lt;/p&gt; &#xA;&lt;p&gt;4.jd_fan.js （粉丝互动）&lt;/p&gt; &#xA;&lt;p&gt;5.jd_js_sign.js （极速版签到提现）&lt;/p&gt; &#xA;&lt;p&gt;6.jd_jx_sign.js （京东-京喜双签）&lt;/p&gt; &#xA;&lt;p&gt;7.jd_computer.js （电脑配件通用任务）&lt;/p&gt; &#xA;&lt;h4&gt;另外涉及开卡均有部分加密。&lt;/h4&gt; &#xA;&lt;h3&gt;拉取(js py ts)青龙 config.sh 文件中修改&lt;/h3&gt; &#xA;&lt;p&gt;ql repo命令拉取脚本时需要拉取的文件后缀，直接写文件后缀名即可&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;RepoFileExtensions=&#34;js py ts&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;腾讯云活动：&lt;/h3&gt; &#xA;&lt;p&gt;2核2G4M/40RMB/一年，仅限新用户，一个实名可以注册3个新用户账号&lt;/p&gt; &#xA;&lt;p&gt;抢购地址：&lt;a href=&#34;https://sourl.cn/RFwHRZ&#34;&gt;https://sourl.cn/RFwHRZ&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;取关店铺和商品 使用说明（待完善）&lt;/h3&gt; &#xA;&lt;p&gt;通过设置变量&lt;code&gt;UN_SUBSCRIBES&lt;/code&gt;来进行&lt;code&gt;商品一次性取消数量&lt;/code&gt;, &lt;code&gt;店铺一次性取消数量&lt;/code&gt;, &lt;code&gt;商品取关忽略列表&lt;/code&gt;, &lt;code&gt;店铺取关忽略列表&lt;/code&gt;四项内容的自定义设置，以&#39;&amp;amp;&#39;、回车或&#39;\n&#39;隔开。&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;设定项&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;类型&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;说明&lt;/th&gt; &#xA;   &lt;th&gt;示例&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;商品取消数/次&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;数字&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;默认20，为0不取消&lt;/td&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;店铺取消数/次&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;数字&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;默认20，为0不取消&lt;/td&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;商品取关忽略列表&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;JSON数组&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;按商品详情页的商品编号设置&lt;/td&gt; &#xA;   &lt;td&gt;[&#34;100016814096&#34;, &#34;100009667851&#34;]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;店铺取关忽略列表&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;JSON数组&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;按店铺名关键字&lt;/td&gt; &#xA;   &lt;td&gt;[&#34;华硕&#34;, &#34;丽台京东自营旗舰店&#34;]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>UberGuidoZ/Flipper</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/UberGuidoZ/Flipper</id>
    <link href="https://github.com/UberGuidoZ/Flipper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Playground (and dump) of stuff I make or modify for the Flipper Zero&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Playground (and dump) of stuff I make, modify, or found for the Flipper Zero.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>denysdovhan/wtfjs</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/denysdovhan/wtfjs</id>
    <link href="https://github.com/denysdovhan/wtfjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🤪 A list of funny and tricky JavaScript examples&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://stand-with-ukraine.pp.ua/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/banner-direct-single.svg?sanitize=true&#34; alt=&#34;SWUbanner&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;What the f*ck JavaScript?&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.wtfpl.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square&#34; alt=&#34;WTFPL 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/wtfjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/wtfjs.svg?style=flat-square&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/denysdovhan&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/support-patreon-F96854.svg?style=flat-square&#34; alt=&#34;Patreon&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://patreon.com/denysdovhan&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/support-buymeacoffee-222222.svg?style=flat-square&#34; alt=&#34;Buy Me A Coffee&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A list of funny and tricky JavaScript examples&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;JavaScript is a great language. It has a simple syntax, large ecosystem and, what is most important, a great community.&lt;/p&gt; &#xA;&lt;p&gt;At the same time, we all know that JavaScript is quite a funny language with tricky parts. Some of them can quickly turn our everyday job into hell, and some of them can make us laugh out loud.&lt;/p&gt; &#xA;&lt;p&gt;The original idea for WTFJS belongs to &lt;a href=&#34;https://twitter.com/brianleroux&#34;&gt;Brian Leroux&lt;/a&gt;. This list is highly inspired by his talk &lt;a href=&#34;https://www.youtube.com/watch?v=et8xNAc2ic8&#34;&gt;&lt;strong&gt;“WTFJS”&lt;/strong&gt; at dotJS 2012&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=et8xNAc2ic8&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/et8xNAc2ic8/0.jpg&#34; alt=&#34;dotJS 2012 - Brian Leroux - WTFJS&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Node Packaged Manuscript&lt;/h1&gt; &#xA;&lt;p&gt;You can install this handbook using &lt;code&gt;npm&lt;/code&gt;. Just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install -g wtfjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should be able to run &lt;code&gt;wtfjs&lt;/code&gt; at the command line now. This will open the manual in your selected &lt;code&gt;$PAGER&lt;/code&gt;. Otherwise, you may continue reading on here.&lt;/p&gt; &#xA;&lt;p&gt;The source is available here: &lt;a href=&#34;https://github.com/denysdovhan/wtfjs&#34;&gt;https://github.com/denysdovhan/wtfjs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Translations&lt;/h1&gt; &#xA;&lt;p&gt;Currently, there are these translations of &lt;strong&gt;wtfjs&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/README-zh-cn.md&#34;&gt;中文&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/README-hi.md&#34;&gt;हिंदी&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/README-fr-fr.md&#34;&gt;Français&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/README-pt-br.md&#34;&gt;Português do Brasil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/README-pl-pl.md&#34;&gt;Polski&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/README-it-it.md&#34;&gt;Italiano&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://habr.com/ru/company/mailru/blog/335292/&#34;&gt;Russian&lt;/a&gt; (on Habr.com)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/README-kr.md&#34;&gt;한국어&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/denysdovhan/wtfjs/raw/master/CONTRIBUTING.md#translations&#34;&gt;&lt;strong&gt;Help translating to your language&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Translations are maintained by their translators. They may not contain every example, and existing examples may be outdated.&lt;/p&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- START doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- DON&#39;T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE --&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-motivation&#34;&gt;💪🏻 Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-notation&#34;&gt;✍🏻 Notation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-examples&#34;&gt;👀 Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-is-equal-&#34;&gt;&lt;code&gt;[]&lt;/code&gt; is equal &lt;code&gt;![]&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#true-is-not-equal--but-not-equal--too&#34;&gt;&lt;code&gt;true&lt;/code&gt; is not equal &lt;code&gt;![]&lt;/code&gt;, but not equal &lt;code&gt;[]&lt;/code&gt; too&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#true-is-false&#34;&gt;true is false&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#banana&#34;&gt;baNaNa&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#nan-is-not-a-nan&#34;&gt;&lt;code&gt;NaN&lt;/code&gt; is not a &lt;code&gt;NaN&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#objectis-and--weird-cases&#34;&gt;&lt;code&gt;Object.is()&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt; weird cases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#its-a-fail&#34;&gt;It&#39;s a fail&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-is-truthy-but-not-true&#34;&gt;&lt;code&gt;[]&lt;/code&gt; is truthy, but not &lt;code&gt;true&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#null-is-falsy-but-not-false&#34;&gt;&lt;code&gt;null&lt;/code&gt; is falsy, but not &lt;code&gt;false&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#documentall-is-an-object-but-it-is-undefined&#34;&gt;&lt;code&gt;document.all&lt;/code&gt; is an object, but it is undefined&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#minimal-value-is-greater-than-zero&#34;&gt;Minimal value is greater than zero&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#function-is-not-a-function&#34;&gt;function is not a function&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#adding-arrays&#34;&gt;Adding arrays&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#trailing-commas-in-array&#34;&gt;Trailing commas in array&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#array-equality-is-a-monster&#34;&gt;Array equality is a monster&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#undefined-and-number&#34;&gt;&lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#parseint-is-a-bad-guy&#34;&gt;&lt;code&gt;parseInt&lt;/code&gt; is a bad guy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#math-with-true-and-false&#34;&gt;Math with &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#html-comments-are-valid-in-javascript&#34;&gt;HTML comments are valid in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#nan-is-not-a-number&#34;&gt;&lt;code&gt;NaN&lt;/code&gt; is &lt;del&gt;not&lt;/del&gt; a number&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-and-null-are-objects&#34;&gt;&lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are objects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#magically-increasing-numbers&#34;&gt;Magically increasing numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#precision-of-01--02&#34;&gt;Precision of &lt;code&gt;0.1 + 0.2&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#patching-numbers&#34;&gt;Patching numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#comparison-of-three-numbers&#34;&gt;Comparison of three numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#funny-math&#34;&gt;Funny math&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#addition-of-regexps&#34;&gt;Addition of RegExps&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#strings-arent-instances-of-string&#34;&gt;Strings aren&#39;t instances of &lt;code&gt;String&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#calling-functions-with-backticks&#34;&gt;Calling functions with backticks&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#call-call-call&#34;&gt;Call call call&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#a-constructor-property&#34;&gt;A &lt;code&gt;constructor&lt;/code&gt; property&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#object-as-a-key-of-objects-property&#34;&gt;Object as a key of object&#39;s property&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#accessing-prototypes-with-__proto__&#34;&gt;Accessing prototypes with &lt;code&gt;__proto__&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-object-&#34;&gt;&lt;code&gt;`${{Object}}`&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#destructuring-with-default-values&#34;&gt;Destructuring with default values&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#dots-and-spreading&#34;&gt;Dots and spreading&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#labels&#34;&gt;Labels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#nested-labels&#34;&gt;Nested labels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#insidious-trycatch&#34;&gt;Insidious &lt;code&gt;try..catch&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#is-this-multiple-inheritance&#34;&gt;Is this multiple inheritance?&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#a-generator-which-yields-itself&#34;&gt;A generator which yields itself&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#a-class-of-class&#34;&gt;A class of class&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#non-coercible-objects&#34;&gt;Non-coercible objects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#tricky-arrow-functions&#34;&gt;Tricky arrow functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#arrow-functions-can-not-be-a-constructor&#34;&gt;Arrow functions can not be a constructor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#arguments-and-arrow-functions&#34;&gt;&lt;code&gt;arguments&lt;/code&gt; and arrow functions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#tricky-return&#34;&gt;Tricky return&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#chaining-assignments-on-object&#34;&gt;Chaining assignments on object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#accessing-object-properties-with-arrays&#34;&gt;Accessing object properties with arrays&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#numbertofixed-display-different-numbers&#34;&gt;&lt;code&gt;Number.toFixed()&lt;/code&gt; display different numbers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#mathmax-less-than-mathmin&#34;&gt;&lt;code&gt;Math.max()&lt;/code&gt; less than &lt;code&gt;Math.min()&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#comparing-null-to-0&#34;&gt;Comparing &lt;code&gt;null&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#same-variable-redeclaration&#34;&gt;Same variable redeclaration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#default-behavior-arrayprototypesort&#34;&gt;Default behavior Array.prototype.sort()&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#resolve-wont-return-promise-instance&#34;&gt;resolve() won&#39;t return Promise instance&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-is-undefined&#34;&gt;&lt;code&gt;{}{}&lt;/code&gt; is undefined&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#arguments-binding&#34;&gt;&lt;code&gt;arguments&lt;/code&gt; binding&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#an-alert-from-hell&#34;&gt;An &lt;code&gt;alert&lt;/code&gt; from hell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#an-infinite-timeout&#34;&gt;An infinite timeout&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#a-settimeout-object&#34;&gt;A &lt;code&gt;setTimeout&lt;/code&gt; object&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#double-dot&#34;&gt;Double dot&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#extra-newness&#34;&gt;Extra Newness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#why-you-should-use-semicolons&#34;&gt;Why you should use semicolons&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#split-a-string-by-a-space&#34;&gt;Split a string by a space&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#a-stringified-string&#34;&gt;A stringified string&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#non-strict-comparison-of-a-number-to-true&#34;&gt;Non-strict comparison of a number to &lt;code&gt;true&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-other-resources&#34;&gt;📚 Other resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-supporting&#34;&gt;🤝 Supporting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-license&#34;&gt;🎓 License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- END doctoc generated TOC please keep comment here to allow auto update --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;h1&gt;💪🏻 Motivation&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just for fun&lt;/p&gt; &#xA; &lt;p&gt;— &lt;em&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Just_for_Fun&#34;&gt;&lt;strong&gt;“Just for Fun: The Story of an Accidental Revolutionary”&lt;/strong&gt;&lt;/a&gt;, Linus Torvalds&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The primary goal of this list is to collect some crazy examples and explain how they work, if possible. Just because it&#39;s fun to learn something that we didn&#39;t know before.&lt;/p&gt; &#xA;&lt;p&gt;If you are a beginner, you can use these notes to get a deeper dive into JavaScript. I hope these notes will motivate you to spend more time reading the specification.&lt;/p&gt; &#xA;&lt;p&gt;If you are a professional developer, you can consider these examples as a great reference for all of the quirks and unexpected edges of our beloved JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;In any case, just read this. You&#39;re probably going to find something new.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ Note:&lt;/strong&gt; If you enjoy reading this document, please, &lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-supporting&#34;&gt;consider supporting the author of this collection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;✍🏻 Notation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;// -&amp;gt;&lt;/code&gt;&lt;/strong&gt; is used to show the result of an expression. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1 + 1; // -&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;// &amp;gt;&lt;/code&gt;&lt;/strong&gt; means the result of &lt;code&gt;console.log&lt;/code&gt; or another output. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#34;hello, world!&#34;); // &amp;gt; hello, world!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;//&lt;/code&gt;&lt;/strong&gt; is just a comment used for explanations. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Assigning a function to foo constant&#xA;const foo = function() {};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;👀 Examples&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;code&gt;[]&lt;/code&gt; is equal &lt;code&gt;![]&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Array is equal not array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[] == ![]; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The abstract equality operator converts both sides to numbers to compare them, and both sides become the number &lt;code&gt;0&lt;/code&gt; for different reasons. Arrays are truthy, so on the right, the opposite of a truthy value is &lt;code&gt;false&lt;/code&gt;, which is then coerced to &lt;code&gt;0&lt;/code&gt;. On the left, however, an empty array is coerced to a number without becoming a boolean first, and empty arrays are coerced to &lt;code&gt;0&lt;/code&gt;, despite being truthy.&lt;/p&gt; &#xA;&lt;p&gt;Here is how this expression simplifies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;+[] == +![];&#xA;0 == +false;&#xA;0 == 0;&#xA;true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://raw.githubusercontent.com/denysdovhan/wtfjs/master/#-is-truthy-but-not-true&#34;&gt;&lt;code&gt;[]&lt;/code&gt; is truthy, but not &lt;code&gt;true&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-logical-not-operator&#34;&gt;&lt;strong&gt;12.5.9&lt;/strong&gt; Logical NOT Operator (&lt;code&gt;!&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;true&lt;/code&gt; is not equal &lt;code&gt;![]&lt;/code&gt;, but not equal &lt;code&gt;[]&lt;/code&gt; too&lt;/h2&gt; &#xA;&lt;p&gt;Array is not equal &lt;code&gt;true&lt;/code&gt;, but not Array is not equal &lt;code&gt;true&lt;/code&gt; too; Array is equal &lt;code&gt;false&lt;/code&gt;, not Array is equal &lt;code&gt;false&lt;/code&gt; too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;true == []; // -&amp;gt; false&#xA;true == ![]; // -&amp;gt; false&#xA;&#xA;false == []; // -&amp;gt; true&#xA;false == ![]; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;true == []; // -&amp;gt; false&#xA;true == ![]; // -&amp;gt; false&#xA;&#xA;// According to the specification&#xA;&#xA;true == []; // -&amp;gt; false&#xA;&#xA;toNumber(true); // -&amp;gt; 1&#xA;toNumber([]); // -&amp;gt; 0&#xA;&#xA;1 == 0; // -&amp;gt; false&#xA;&#xA;true == ![]; // -&amp;gt; false&#xA;&#xA;![]; // -&amp;gt; false&#xA;&#xA;true == false; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;false == []; // -&amp;gt; true&#xA;false == ![]; // -&amp;gt; true&#xA;&#xA;// According to the specification&#xA;&#xA;false == []; // -&amp;gt; true&#xA;&#xA;toNumber(false); // -&amp;gt; 0&#xA;toNumber([]); // -&amp;gt; 0&#xA;&#xA;0 == 0; // -&amp;gt; true&#xA;&#xA;false == ![]; // -&amp;gt; true&#xA;&#xA;![]; // -&amp;gt; false&#xA;&#xA;false == false; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;true is false&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;!!&#34;false&#34; == !!&#34;true&#34;; // -&amp;gt; true&#xA;!!&#34;false&#34; === !!&#34;true&#34;; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Consider this step-by-step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// true is &#39;truthy&#39; and represented by value 1 (number), &#39;true&#39; in string form is NaN.&#xA;true == &#34;true&#34;; // -&amp;gt; false&#xA;false == &#34;false&#34;; // -&amp;gt; false&#xA;&#xA;// &#39;false&#39; is not the empty string, so it&#39;s a truthy value&#xA;!!&#34;false&#34;; // -&amp;gt; true&#xA;!!&#34;true&#34;; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;baNaNa&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;b&#34; + &#34;a&#34; + +&#34;a&#34; + &#34;a&#34;; // -&amp;gt; &#39;baNaNa&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is an old-school joke in JavaScript, but remastered. Here&#39;s the original one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;foo&#34; + +&#34;bar&#34;; // -&amp;gt; &#39;fooNaN&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The expression is evaluated as &lt;code&gt;&#39;foo&#39; + (+&#39;bar&#39;)&lt;/code&gt;, which converts &lt;code&gt;&#39;bar&#39;&lt;/code&gt; to not a number.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-addition-operator-plus&#34;&gt;&lt;strong&gt;12.8.3&lt;/strong&gt; The Addition Operator (&lt;code&gt;+&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-unary-plus-operator&#34;&gt;12.5.6 Unary + Operator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;NaN&lt;/code&gt; is not a &lt;code&gt;NaN&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;NaN === NaN; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The specification strictly defines the logic behind this behavior:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;If &lt;code&gt;Type(x)&lt;/code&gt; is different from &lt;code&gt;Type(y)&lt;/code&gt;, return &lt;strong&gt;false&lt;/strong&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;If &lt;code&gt;Type(x)&lt;/code&gt; is Number, then &#xA;   &lt;ol&gt; &#xA;    &lt;li&gt;If &lt;code&gt;x&lt;/code&gt; is &lt;strong&gt;NaN&lt;/strong&gt;, return &lt;strong&gt;false&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;If &lt;code&gt;y&lt;/code&gt; is &lt;strong&gt;NaN&lt;/strong&gt;, return &lt;strong&gt;false&lt;/strong&gt;.&lt;/li&gt; &#xA;    &lt;li&gt;… … …&lt;/li&gt; &#xA;   &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;— &lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-strict-equality-comparison&#34;&gt;&lt;strong&gt;7.2.14&lt;/strong&gt; Strict Equality Comparison&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Following the definition of &lt;code&gt;NaN&lt;/code&gt; from the IEEE:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Four mutually exclusive relations are possible: less than, equal, greater than, and unordered. The last case arises when at least one operand is NaN. Every NaN shall compare unordered with everything, including itself.&lt;/p&gt; &#xA; &lt;p&gt;— &lt;a href=&#34;https://stackoverflow.com/questions/1565164/1573715#1573715&#34;&gt;“What is the rationale for all comparisons returning false for IEEE754 NaN values?”&lt;/a&gt; at StackOverflow&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;&lt;code&gt;Object.is()&lt;/code&gt; and &lt;code&gt;===&lt;/code&gt; weird cases&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Object.is()&lt;/code&gt; determines if two values have the same value or not. It works similar to the &lt;code&gt;===&lt;/code&gt; operator but there are a few weird cases:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Object.is(NaN, NaN); // -&amp;gt; true&#xA;NaN === NaN; // -&amp;gt; false&#xA;&#xA;Object.is(-0, 0); // -&amp;gt; false&#xA;-0 === 0; // -&amp;gt; true&#xA;&#xA;Object.is(NaN, 0 / 0); // -&amp;gt; true&#xA;NaN === 0 / 0; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;In JavaScript lingo, &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;NaN&lt;/code&gt; are the same value but they&#39;re not strictly equal. &lt;code&gt;NaN === NaN&lt;/code&gt; being false is apparently due to historical reasons so it would probably be better to accept it as it is.&lt;/p&gt; &#xA;&lt;p&gt;Similarly, &lt;code&gt;-0&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt; are strictly equal, but they&#39;re not the same value.&lt;/p&gt; &#xA;&lt;p&gt;For more details about &lt;code&gt;NaN === NaN&lt;/code&gt;, see the above case.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tc39.es/ecma262/#sec-object.is&#34;&gt;Here are the TC39 specs about Object.is&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Equality_comparisons_and_sameness&#34;&gt;Equality comparisons and sameness&lt;/a&gt; on MDN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;It&#39;s a fail&lt;/h2&gt; &#xA;&lt;p&gt;You would not believe, but …&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(![] + [])[+[]] +&#xA;  (![] + [])[+!+[]] +&#xA;  ([![]] + [][[]])[+!+[] + [+[]]] +&#xA;  (![] + [])[!+[] + !+[]];&#xA;// -&amp;gt; &#39;fail&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;By breaking that mass of symbols into pieces, we notice that the following pattern occurs often:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;![] + []; // -&amp;gt; &#39;false&#39;&#xA;![]; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So we try adding &lt;code&gt;[]&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;. But due to a number of internal function calls (&lt;code&gt;binary + Operator&lt;/code&gt; -&amp;gt; &lt;code&gt;ToPrimitive&lt;/code&gt; -&amp;gt; &lt;code&gt;[[DefaultValue]]&lt;/code&gt;) we end up converting the right operand to a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;![] + [].toString(); // &#39;false&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thinking of a string as an array we can access its first character via &lt;code&gt;[0]&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;false&#34;[0]; // -&amp;gt; &#39;f&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest is obvious, but the &lt;code&gt;i&lt;/code&gt; is tricky. The &lt;code&gt;i&lt;/code&gt; in &lt;code&gt;fail&lt;/code&gt; is grabbed by generating the string &lt;code&gt;&#39;falseundefined&#39;&lt;/code&gt; and grabbing the element on index &lt;code&gt;[&#39;10&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;More examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;+![]          // -&amp;gt; 0&#xA;+!![]         // -&amp;gt; 1&#xA;!![]          // -&amp;gt; true&#xA;![]           // -&amp;gt; false&#xA;[][[]]        // -&amp;gt; undefined&#xA;+!![] / +![]  // -&amp;gt; Infinity&#xA;[] + {}       // -&amp;gt; &#34;[object Object]&#34;&#xA;+{}           // -&amp;gt; NaN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://patriciopalladino.com/blog/2012/08/09/non-alphanumeric-javascript.html&#34;&gt;Brainfuck beware: JavaScript is after you!&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bluewings.github.io/en/writing-a-sentence-without-using-the-alphabet/#weird-javascript-generator&#34;&gt;Writing a sentence without using the Alphabet&lt;/a&gt; — generate any phrase using JavaScript&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;[]&lt;/code&gt; is truthy, but not &lt;code&gt;true&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;An array is a truthy value, however, it&#39;s not equal to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;!![]       // -&amp;gt; true&#xA;[] == true // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Here are links to the corresponding sections in the ECMA-262 specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-logical-not-operator&#34;&gt;&lt;strong&gt;12.5.9&lt;/strong&gt; Logical NOT Operator (&lt;code&gt;!&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;null&lt;/code&gt; is falsy, but not &lt;code&gt;false&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Despite the fact that &lt;code&gt;null&lt;/code&gt; is a falsy value, it&#39;s not equal to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;!!null; // -&amp;gt; false&#xA;null == false; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the same time, other falsy values, like &lt;code&gt;0&lt;/code&gt; or &lt;code&gt;&#39;&#39;&lt;/code&gt; are equal to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;0 == false; // -&amp;gt; true&#xA;&#34;&#34; == false; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The explanation is the same as for previous example. Here&#39;s the corresponding link:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;document.all&lt;/code&gt; is an object, but it is undefined&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ This is part of the Browser API and won&#39;t work in a Node.js environment ⚠️&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Despite the fact that &lt;code&gt;document.all&lt;/code&gt; is an array-like object and it gives access to the DOM nodes in the page, it responds to the &lt;code&gt;typeof&lt;/code&gt; function as &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.all instanceof Object; // -&amp;gt; true&#xA;typeof document.all; // -&amp;gt; &#39;undefined&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;At the same time, &lt;code&gt;document.all&lt;/code&gt; is not equal to &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.all === undefined; // -&amp;gt; false&#xA;document.all === null; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But at the same time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;document.all == null; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;document.all&lt;/code&gt; used to be a way to access DOM elements, in particular with old versions of IE. While it has never been a standard it was broadly used in the old age JS code. When the standard progressed with new APIs (such as &lt;code&gt;document.getElementById&lt;/code&gt;) this API call became obsolete and the standard committee had to decide what to do with it. Because of its broad use they decided to keep the API but introduce a willful violation of the JavaScript specification. The reason why it responds to &lt;code&gt;false&lt;/code&gt; when using the &lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-strict-equality-comparison&#34;&gt;Strict Equality Comparison&lt;/a&gt; with &lt;code&gt;undefined&lt;/code&gt; while &lt;code&gt;true&lt;/code&gt; when using the &lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;Abstract Equality Comparison&lt;/a&gt; is due to the willful violation of the specification that explicitly allows that.&lt;/p&gt; &#xA; &lt;p&gt;— &lt;a href=&#34;https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all&#34;&gt;“Obsolete features - document.all”&lt;/a&gt; at WhatWG - HTML spec — &lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/raw/0d79079b61dad953bbfde817a5893a49f7e889fb/types%20%26%20grammar/ch4.md#falsy-objects&#34;&gt;“Chapter 4 - ToBoolean - Falsy values”&lt;/a&gt; at YDKJS - Types &amp;amp; Grammar&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Minimal value is greater than zero&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; is the smallest number, which is greater than zero:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Number.MIN_VALUE &amp;gt; 0; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;Number.MIN_VALUE&lt;/code&gt; is &lt;code&gt;5e-324&lt;/code&gt;, i.e. the smallest positive number that can be represented within float precision, i.e. that&#39;s as close as you can get to zero. It defines the best resolution that floats can give you.&lt;/p&gt; &#xA; &lt;p&gt;Now the overall smallest value is &lt;code&gt;Number.NEGATIVE_INFINITY&lt;/code&gt; although it&#39;s not really numeric in a strict sense.&lt;/p&gt; &#xA; &lt;p&gt;— &lt;a href=&#34;https://stackoverflow.com/questions/26614728/why-is-0-less-than-number-min-value-in-javascript&#34;&gt;“Why is &lt;code&gt;0&lt;/code&gt; less than &lt;code&gt;Number.MIN_VALUE&lt;/code&gt; in JavaScript?”&lt;/a&gt; at StackOverflow&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-number.min_value&#34;&gt;&lt;strong&gt;20.1.2.9&lt;/strong&gt; Number.MIN_VALUE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;function is not a function&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;⚠️ A bug present in V8 v5.5 or lower (Node.js &amp;lt;=7) ⚠️&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;All of you know about the annoying &lt;em&gt;undefined is not a function&lt;/em&gt;, but what about this?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Declare a class which extends null&#xA;class Foo extends null {}&#xA;// -&amp;gt; [Function: Foo]&#xA;&#xA;new Foo() instanceof null;&#xA;// &amp;gt; TypeError: function is not a function&#xA;// &amp;gt;     at … … …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;This is not a part of the specification. It&#39;s just a bug that has now been fixed, so there shouldn&#39;t be a problem with it in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Super constructor null of Foo is not a constructor&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s continuation of story with previous bug in modern environment (tested with Chrome 71 and Node.js v11.8.0).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Foo extends null {}&#xA;new Foo() instanceof null;&#xA;// &amp;gt; TypeError: Super constructor null of Foo is not a constructor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;This is not a bug because:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Object.getPrototypeOf(Foo.prototype); // -&amp;gt; null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the class has no constructor the call from prototype chain. But in the parent has no constructor. Just in case, I’ll clarify that &lt;code&gt;null&lt;/code&gt; is an object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;typeof null === &#34;object&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Therefore, you can inherit from it (although in the world of the OOP for such terms would have beaten me). So you can&#39;t call the null constructor. If you change this code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Foo extends null {&#xA;  constructor() {&#xA;    console.log(&#34;something&#34;);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You see the error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ReferenceError: Must call super constructor in derived class before accessing &#39;this&#39; or returning from derived constructor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And if you add &lt;code&gt;super&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Foo extends null {&#xA;  constructor() {&#xA;    console.log(111);&#xA;    super();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JS throws an error:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TypeError: Super constructor null of Foo is not a constructor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denysdovhan/wtfjs/pull/102#discussion_r259143582&#34;&gt;An explanation of this issue&lt;/a&gt; by &lt;a href=&#34;https://github.com/geekjob&#34;&gt;@geekjob&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Adding arrays&lt;/h2&gt; &#xA;&lt;p&gt;What if you try to add two arrays?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[1, 2, 3] + [4, 5, 6]; // -&amp;gt; &#39;1,2,34,5,6&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The concatenation happens. Step-by-step, it looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[1, 2, 3] +&#xA;  [4, 5, 6][&#xA;    // call toString()&#xA;    (1, 2, 3)&#xA;  ].toString() +&#xA;  [4, 5, 6].toString();&#xA;// concatenation&#xA;&#34;1,2,3&#34; + &#34;4,5,6&#34;;&#xA;// -&amp;gt;&#xA;(&#34;1,2,34,5,6&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Trailing commas in array&lt;/h2&gt; &#xA;&lt;p&gt;You&#39;ve created an array with 4 empty elements. Despite all, you&#39;ll get an array with three elements, because of trailing commas:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let a = [, , ,];&#xA;a.length; // -&amp;gt; 3&#xA;a.toString(); // -&amp;gt; &#39;,,&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Trailing commas&lt;/strong&gt; (sometimes called &#34;final commas&#34;) can be useful when adding new elements, parameters, or properties to JavaScript code. If you want to add a new property, you can simply add a new line without modifying the previously last line if that line already uses a trailing comma. This makes version-control diffs cleaner and editing code might be less troublesome.&lt;/p&gt; &#xA; &lt;p&gt;— &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Trailing_commas&#34;&gt;Trailing commas&lt;/a&gt; at MDN&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Array equality is a monster&lt;/h2&gt; &#xA;&lt;p&gt;Array equality is a monster in JS, as you can see below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[] == &#39;&#39;   // -&amp;gt; true&#xA;[] == 0    // -&amp;gt; true&#xA;[&#39;&#39;] == &#39;&#39; // -&amp;gt; true&#xA;[0] == 0   // -&amp;gt; true&#xA;[0] == &#39;&#39;  // -&amp;gt; false&#xA;[&#39;&#39;] == 0  // -&amp;gt; true&#xA;&#xA;[null] == &#39;&#39;      // true&#xA;[null] == 0       // true&#xA;[undefined] == &#39;&#39; // true&#xA;[undefined] == 0  // true&#xA;&#xA;[[]] == 0  // true&#xA;[[]] == &#39;&#39; // true&#xA;&#xA;[[[[[[]]]]]] == &#39;&#39; // true&#xA;[[[[[[]]]]]] == 0  // true&#xA;&#xA;[[[[[[ null ]]]]]] == 0  // true&#xA;[[[[[[ null ]]]]]] == &#39;&#39; // true&#xA;&#xA;[[[[[[ undefined ]]]]]] == 0  // true&#xA;[[[[[[ undefined ]]]]]] == &#39;&#39; // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;You should watch very carefully for the above examples! The behaviour is described in section &lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt; of the specification.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;Number&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;If we don&#39;t pass any arguments into the &lt;code&gt;Number&lt;/code&gt; constructor, we&#39;ll get &lt;code&gt;0&lt;/code&gt;. The value &lt;code&gt;undefined&lt;/code&gt; is assigned to formal arguments when there are no actual arguments, so you might expect that &lt;code&gt;Number&lt;/code&gt; without arguments takes &lt;code&gt;undefined&lt;/code&gt; as a value of its parameter. However, when we pass &lt;code&gt;undefined&lt;/code&gt;, we will get &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Number(); // -&amp;gt; 0&#xA;Number(undefined); // -&amp;gt; NaN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;According to the specification:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If no arguments were passed to this function&#39;s invocation, let &lt;code&gt;n&lt;/code&gt; be &lt;code&gt;+0&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Else, let &lt;code&gt;n&lt;/code&gt; be ? &lt;code&gt;ToNumber(value)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In case of &lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;ToNumber(undefined)&lt;/code&gt; should return &lt;code&gt;NaN&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s the corresponding section:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-number-constructor&#34;&gt;&lt;strong&gt;20.1.1&lt;/strong&gt; The Number Constructor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-tonumber&#34;&gt;&lt;strong&gt;7.1.3&lt;/strong&gt; ToNumber(&lt;code&gt;argument&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;parseInt&lt;/code&gt; is a bad guy&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;parseInt&lt;/code&gt; is famous by its quirks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;parseInt(&#34;f*ck&#34;); // -&amp;gt; NaN&#xA;parseInt(&#34;f*ck&#34;, 16); // -&amp;gt; 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; This happens because &lt;code&gt;parseInt&lt;/code&gt; will continue parsing character-by-character until it hits a character it doesn&#39;t know. The &lt;code&gt;f&lt;/code&gt; in &lt;code&gt;&#39;f*ck&#39;&lt;/code&gt; is the hexadecimal digit &lt;code&gt;15&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parsing &lt;code&gt;Infinity&lt;/code&gt; to integer is something…&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;parseInt(&#34;Infinity&#34;, 10); // -&amp;gt; NaN&#xA;// ...&#xA;parseInt(&#34;Infinity&#34;, 18); // -&amp;gt; NaN...&#xA;parseInt(&#34;Infinity&#34;, 19); // -&amp;gt; 18&#xA;// ...&#xA;parseInt(&#34;Infinity&#34;, 23); // -&amp;gt; 18...&#xA;parseInt(&#34;Infinity&#34;, 24); // -&amp;gt; 151176378&#xA;// ...&#xA;parseInt(&#34;Infinity&#34;, 29); // -&amp;gt; 385849803&#xA;parseInt(&#34;Infinity&#34;, 30); // -&amp;gt; 13693557269&#xA;// ...&#xA;parseInt(&#34;Infinity&#34;, 34); // -&amp;gt; 28872273981&#xA;parseInt(&#34;Infinity&#34;, 35); // -&amp;gt; 1201203301724&#xA;parseInt(&#34;Infinity&#34;, 36); // -&amp;gt; 1461559270678...&#xA;parseInt(&#34;Infinity&#34;, 37); // -&amp;gt; NaN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be careful with parsing &lt;code&gt;null&lt;/code&gt; too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;parseInt(null, 24); // -&amp;gt; 23&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s converting &lt;code&gt;null&lt;/code&gt; to the string &lt;code&gt;&#34;null&#34;&lt;/code&gt; and trying to convert it. For radixes 0 through 23, there are no numerals it can convert, so it returns NaN. At 24, &lt;code&gt;&#34;n&#34;&lt;/code&gt;, the 14th letter, is added to the numeral system. At 31, &lt;code&gt;&#34;u&#34;&lt;/code&gt;, the 21st letter, is added and the entire string can be decoded. At 37 on there is no longer any valid numeral set that can be generated and &lt;code&gt;NaN&lt;/code&gt; is returned.&lt;/p&gt; &#xA; &lt;p&gt;— &lt;a href=&#34;https://stackoverflow.com/questions/6459758/parseintnull-24-23-wait-what&#34;&gt;“parseInt(null, 24) === 23… wait, what?”&lt;/a&gt; at StackOverflow&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Don&#39;t forget about octals:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;parseInt(&#34;06&#34;); // 6&#xA;parseInt(&#34;08&#34;); // 8 if support ECMAScript 5&#xA;parseInt(&#34;08&#34;); // 0 if not support ECMAScript 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; If the input string begins with &#34;0&#34;, radix is eight (octal) or 10 (decimal). Exactly which radix is chosen is implementation-dependent. ECMAScript 5 specifies that 10 (decimal) is used, but not all browsers support this yet. For this reason always specify a radix when using &lt;code&gt;parseInt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;parseInt&lt;/code&gt; always convert input to string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;parseInt({ toString: () =&amp;gt; 2, valueOf: () =&amp;gt; 1 }); // -&amp;gt; 2&#xA;Number({ toString: () =&amp;gt; 2, valueOf: () =&amp;gt; 1 }); // -&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Be careful while parsing floating point values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;parseInt(0.000001); // -&amp;gt; 0&#xA;parseInt(0.0000001); // -&amp;gt; 1&#xA;parseInt(1 / 1999999); // -&amp;gt; 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;💡 Explanation:&lt;/strong&gt; &lt;code&gt;ParseInt&lt;/code&gt; takes a string argument and returns an integer of the specified radix. &lt;code&gt;ParseInt&lt;/code&gt; also strips anything after and including the first non-digit in the string parameter. &lt;code&gt;0.000001&lt;/code&gt; is converted to a string &lt;code&gt;&#34;0.000001&#34;&lt;/code&gt; and the &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;0&lt;/code&gt;. When &lt;code&gt;0.0000001&lt;/code&gt; is converted to a string it is treated as &lt;code&gt;&#34;1e-7&#34;&lt;/code&gt; and hence &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;1&lt;/code&gt;. &lt;code&gt;1/1999999&lt;/code&gt; is interpreted as &lt;code&gt;5.00000250000125e-7&lt;/code&gt; and &lt;code&gt;parseInt&lt;/code&gt; returns &lt;code&gt;5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Math with &lt;code&gt;true&lt;/code&gt; and &lt;code&gt;false&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s do some math:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;true + true; // -&amp;gt; 2&#xA;(true + true) * (true + true) - true; // -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hmmm… 🤔&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;We can coerce values to numbers with the &lt;code&gt;Number&lt;/code&gt; constructor. It&#39;s quite obvious that &lt;code&gt;true&lt;/code&gt; will be coerced to &lt;code&gt;1&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Number(true); // -&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The unary plus operator attempts to convert its value into a number. It can convert string representations of integers and floats, as well as the non-string values &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, and &lt;code&gt;null&lt;/code&gt;. If it cannot parse a particular value, it will evaluate to &lt;code&gt;NaN&lt;/code&gt;. That means we can coerce &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;1&lt;/code&gt; easier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;+true; // -&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re performing addition or multiplication, the &lt;code&gt;ToNumber&lt;/code&gt; method is invoked. According to the specification, this method returns:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If &lt;code&gt;argument&lt;/code&gt; is &lt;strong&gt;true&lt;/strong&gt;, return &lt;strong&gt;1&lt;/strong&gt;. If &lt;code&gt;argument&lt;/code&gt; is &lt;strong&gt;false&lt;/strong&gt;, return &lt;strong&gt;+0&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;That&#39;s why we can add boolean values as regular numbers and get correct results.&lt;/p&gt; &#xA;&lt;p&gt;Corresponding sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-unary-plus-operator&#34;&gt;&lt;strong&gt;12.5.6&lt;/strong&gt; Unary &lt;code&gt;+&lt;/code&gt; Operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-addition-operator-plus&#34;&gt;&lt;strong&gt;12.8.3&lt;/strong&gt; The Addition Operator (&lt;code&gt;+&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-tonumber&#34;&gt;&lt;strong&gt;7.1.3&lt;/strong&gt; ToNumber(&lt;code&gt;argument&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;HTML comments are valid in JavaScript&lt;/h2&gt; &#xA;&lt;p&gt;You will be impressed, but &lt;code&gt;&amp;lt;!--&lt;/code&gt; (which is known as HTML comment) is a valid comment in JavaScript.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// valid comment&#xA;&amp;lt;!-- valid comment too&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Impressed? HTML-like comments were intended to allow browsers that didn&#39;t understand the &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag to degrade gracefully. These browsers, e.g. Netscape 1.x are no longer popular. So there is really no point in putting HTML comments in your script tags anymore.&lt;/p&gt; &#xA;&lt;p&gt;Since Node.js is based on the V8 engine, HTML-like comments are supported by the Node.js runtime too. Moreover, they&#39;re a part of the specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-html-like-comments&#34;&gt;&lt;strong&gt;B.1.3&lt;/strong&gt; HTML-like Comments&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;NaN&lt;/code&gt; is &lt;del&gt;not&lt;/del&gt; a number&lt;/h2&gt; &#xA;&lt;p&gt;Type of &lt;code&gt;NaN&lt;/code&gt; is a &lt;code&gt;&#39;number&#39;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;typeof NaN; // -&amp;gt; &#39;number&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Explanations of how &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt; operators work:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-typeof-operator&#34;&gt;&lt;strong&gt;12.5.5&lt;/strong&gt; The &lt;code&gt;typeof&lt;/code&gt; Operator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-instanceofoperator&#34;&gt;&lt;strong&gt;12.10.4&lt;/strong&gt; Runtime Semantics: InstanceofOperator(&lt;code&gt;O&lt;/code&gt;,&lt;code&gt;C&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are objects&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;typeof []; // -&amp;gt; &#39;object&#39;&#xA;typeof null; // -&amp;gt; &#39;object&#39;&#xA;&#xA;// however&#xA;null instanceof Object; // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The behavior of &lt;code&gt;typeof&lt;/code&gt; operator is defined in this section of the specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/12.0/#sec-typeof-operator&#34;&gt;&lt;strong&gt;13.5.3&lt;/strong&gt; The &lt;code&gt;typeof&lt;/code&gt; Operator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;According to the specification, the &lt;code&gt;typeof&lt;/code&gt; operator returns a string according to &lt;a href=&#34;https://262.ecma-international.org/12.0/#table-typeof-operator-results&#34;&gt;Table 37: &lt;code&gt;typeof&lt;/code&gt; Operator Results&lt;/a&gt;. For &lt;code&gt;null&lt;/code&gt;, ordinary, standard exotic and non-standard exotic objects, which do not implement &lt;code&gt;[[Call]]&lt;/code&gt;, it returns the string &lt;code&gt;&#34;object&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, you can check the type of an object by using the &lt;code&gt;toString&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Object.prototype.toString.call([]);&#xA;// -&amp;gt; &#39;[object Array]&#39;&#xA;&#xA;Object.prototype.toString.call(new Date());&#xA;// -&amp;gt; &#39;[object Date]&#39;&#xA;&#xA;Object.prototype.toString.call(null);&#xA;// -&amp;gt; &#39;[object Null]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Magically increasing numbers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;999999999999999; // -&amp;gt; 999999999999999&#xA;9999999999999999; // -&amp;gt; 10000000000000000&#xA;&#xA;10000000000000000; // -&amp;gt; 10000000000000000&#xA;10000000000000000 + 1; // -&amp;gt; 10000000000000000&#xA;10000000000000000 + 1.1; // -&amp;gt; 10000000000000002&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;This is caused by IEEE 754-2008 standard for Binary Floating-Point Arithmetic. At this scale, it rounds to the nearest even number. Read more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-ecmascript-language-types-number-type&#34;&gt;&lt;strong&gt;6.1.6&lt;/strong&gt; The Number Type&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/IEEE_754&#34;&gt;IEEE 754&lt;/a&gt; on Wikipedia&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Precision of &lt;code&gt;0.1 + 0.2&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;A well-known joke. An addition of &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;0.2&lt;/code&gt; is deadly precise:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;0.1 + 0.2; // -&amp;gt; 0.30000000000000004&#xA;0.1 + 0.2 === 0.3; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The answer for the &lt;a href=&#34;https://stackoverflow.com/questions/588004/is-floating-point-math-broken&#34;&gt;”Is floating point math broken?”&lt;/a&gt; question on StackOverflow:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The constants &lt;code&gt;0.2&lt;/code&gt; and &lt;code&gt;0.3&lt;/code&gt; in your program will also be approximations to their true values. It happens that the closest &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;0.2&lt;/code&gt; is larger than the rational number &lt;code&gt;0.2&lt;/code&gt; but that the closest &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;0.3&lt;/code&gt; is smaller than the rational number &lt;code&gt;0.3&lt;/code&gt;. The sum of &lt;code&gt;0.1&lt;/code&gt; and &lt;code&gt;0.2&lt;/code&gt; winds up being larger than the rational number &lt;code&gt;0.3&lt;/code&gt; and hence disagreeing with the constant in your code.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This problem is so known that there is even a website called &lt;a href=&#34;http://0.30000000000000004.com/&#34;&gt;0.30000000000000004.com&lt;/a&gt;. It occurs in every language that uses floating-point math, not just JavaScript.&lt;/p&gt; &#xA;&lt;h2&gt;Patching numbers&lt;/h2&gt; &#xA;&lt;p&gt;You can add your own methods to wrapper objects like &lt;code&gt;Number&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Number.prototype.isOne = function() {&#xA;  return Number(this) === 1;&#xA;};&#xA;&#xA;(1.0).isOne(); // -&amp;gt; true&#xA;(1).isOne(); // -&amp;gt; true&#xA;(2.0).isOne(); // -&amp;gt; false&#xA;(7).isOne(); // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Obviously, you can extend the &lt;code&gt;Number&lt;/code&gt; object like any other object in JavaScript. However, it&#39;s not recommended if the behavior of the defined method is not a part of the specification. Here is the list of &lt;code&gt;Number&lt;/code&gt;&#39;s properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-number-objects&#34;&gt;&lt;strong&gt;20.1&lt;/strong&gt; Number Objects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparison of three numbers&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1 &amp;lt; 2 &amp;lt; 3; // -&amp;gt; true&#xA;3 &amp;gt; 2 &amp;gt; 1; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Why does this work that way? Well, the problem is in the first part of an expression. Here&#39;s how it works:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1 &amp;lt; 2 &amp;lt; 3; // 1 &amp;lt; 2 -&amp;gt; true&#xA;true &amp;lt; 3; // true -&amp;gt; 1&#xA;1 &amp;lt; 3; // -&amp;gt; true&#xA;&#xA;3 &amp;gt; 2 &amp;gt; 1; // 3 &amp;gt; 2 -&amp;gt; true&#xA;true &amp;gt; 1; // true -&amp;gt; 1&#xA;1 &amp;gt; 1; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can fix this with &lt;em&gt;Greater than or equal operator (&lt;code&gt;&amp;gt;=&lt;/code&gt;)&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;3 &amp;gt; 2 &amp;gt;= 1; // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about Relational operators in the specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-relational-operators&#34;&gt;&lt;strong&gt;12.10&lt;/strong&gt; Relational Operators&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Funny math&lt;/h2&gt; &#xA;&lt;p&gt;Often the results of arithmetic operations in JavaScript might be quite unexpected. Consider these examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; 3  - 1  // -&amp;gt; 2&#xA; 3  + 1  // -&amp;gt; 4&#xA;&#39;3&#39; - 1  // -&amp;gt; 2&#xA;&#39;3&#39; + 1  // -&amp;gt; &#39;31&#39;&#xA;&#xA;&#39;&#39; + &#39;&#39; // -&amp;gt; &#39;&#39;&#xA;[] + [] // -&amp;gt; &#39;&#39;&#xA;{} + [] // -&amp;gt; 0&#xA;[] + {} // -&amp;gt; &#39;[object Object]&#39;&#xA;{} + {} // -&amp;gt; &#39;[object Object][object Object]&#39;&#xA;&#xA;&#39;222&#39; - -&#39;111&#39; // -&amp;gt; 333&#xA;&#xA;[4] * [4]       // -&amp;gt; 16&#xA;[] * []         // -&amp;gt; 0&#xA;[4, 4] * [4, 4] // NaN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;What&#39;s happening in the first four examples? Here&#39;s a small table to understand addition in JavaScript:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Number  + Number  -&amp;gt; addition&#xA;Boolean + Number  -&amp;gt; addition&#xA;Boolean + Boolean -&amp;gt; addition&#xA;Number  + String  -&amp;gt; concatenation&#xA;String  + Boolean -&amp;gt; concatenation&#xA;String  + String  -&amp;gt; concatenation&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What about other examples? A &lt;code&gt;ToPrimitive&lt;/code&gt; and &lt;code&gt;ToString&lt;/code&gt; methods are being implicitly called for &lt;code&gt;[]&lt;/code&gt; and &lt;code&gt;{}&lt;/code&gt; before addition. Read more about evaluation process in the specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-addition-operator-plus&#34;&gt;&lt;strong&gt;12.8.3&lt;/strong&gt; The Addition Operator (&lt;code&gt;+&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-toprimitive&#34;&gt;&lt;strong&gt;7.1.1&lt;/strong&gt; ToPrimitive(&lt;code&gt;input&lt;/code&gt; [,&lt;code&gt;PreferredType&lt;/code&gt;])&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-tostring&#34;&gt;&lt;strong&gt;7.1.12&lt;/strong&gt; ToString(&lt;code&gt;argument&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Notably, &lt;code&gt;{} + []&lt;/code&gt; here is the exception. The reason why it differs from &lt;code&gt;[] + {}&lt;/code&gt; is that, without parenthesis, it is interpreted as a code block and then a unary +, converting &lt;code&gt;[]&lt;/code&gt; into a number. It sees the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  // a code block here&#xA;}&#xA;+[]; // -&amp;gt; 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the same output as &lt;code&gt;[] + {}&lt;/code&gt; we can wrap it in parenthesis.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;({} + []); // -&amp;gt; [object Object]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Addition of RegExps&lt;/h2&gt; &#xA;&lt;p&gt;Did you know you can add numbers like this?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Patch a toString method&#xA;RegExp.prototype.toString =&#xA;  function() {&#xA;    return this.source;&#xA;  } /&#xA;  7 /&#xA;  -/5/; // -&amp;gt; 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-get-regexp.prototype.source&#34;&gt;&lt;strong&gt;21.2.5.10&lt;/strong&gt; get RegExp.prototype.source&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Strings aren&#39;t instances of &lt;code&gt;String&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;str&#34;; // -&amp;gt; &#39;str&#39;&#xA;typeof &#34;str&#34;; // -&amp;gt; &#39;string&#39;&#xA;&#34;str&#34; instanceof String; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;String&lt;/code&gt; constructor returns a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;typeof String(&#34;str&#34;); // -&amp;gt; &#39;string&#39;&#xA;String(&#34;str&#34;); // -&amp;gt; &#39;str&#39;&#xA;String(&#34;str&#34;) == &#34;str&#34;; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s try with a &lt;code&gt;new&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new String(&#34;str&#34;) == &#34;str&#34;; // -&amp;gt; true&#xA;typeof new String(&#34;str&#34;); // -&amp;gt; &#39;object&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Object? What&#39;s that?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new String(&#34;str&#34;); // -&amp;gt; [String: &#39;str&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information about the String constructor in the specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-string-constructor&#34;&gt;&lt;strong&gt;21.1.1&lt;/strong&gt; The String Constructor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Calling functions with backticks&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s declare a function which logs all params into the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function f(...args) {&#xA;  return args;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;No doubt, you know you can call this function like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;f(1, 2, 3); // -&amp;gt; [ 1, 2, 3 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But did you know you can call any function with backticks?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;f`true is ${true}, false is ${false}, array is ${[1, 2, 3]}`;&#xA;// -&amp;gt; [ [ &#39;true is &#39;, &#39;, false is &#39;, &#39;, array is &#39;, &#39;&#39; ],&#xA;// -&amp;gt;   true,&#xA;// -&amp;gt;   false,&#xA;// -&amp;gt;   [ 1, 2, 3 ] ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Well, this is not magic at all if you&#39;re familiar with &lt;em&gt;Tagged template literals&lt;/em&gt;. In the example above, &lt;code&gt;f&lt;/code&gt; function is a tag for template literal. Tags before template literal allow you to parse template literals with a function. The first argument of a tag function contains an array of string values. The remaining arguments are related to the expressions. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function template(strings, ...keys) {&#xA;  // do something with strings and keys…&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is the &lt;a href=&#34;http://mxstbr.blog/2016/11/styled-components-magic-explained/&#34;&gt;magic behind&lt;/a&gt; famous library called &lt;a href=&#34;https://www.styled-components.com/&#34;&gt;💅 styled-components&lt;/a&gt;, which is popular in the React community.&lt;/p&gt; &#xA;&lt;p&gt;Link to the specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-tagged-templates&#34;&gt;&lt;strong&gt;12.3.7&lt;/strong&gt; Tagged Templates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Call call call&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Found by &lt;a href=&#34;http://twitter.com/cramforce&#34;&gt;@cramforce&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log.call.call.call.call.call.apply(a =&amp;gt; a, [1, 2]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Attention, it could break your mind! Try to reproduce this code in your head: we&#39;re applying the &lt;code&gt;call&lt;/code&gt; method using the &lt;code&gt;apply&lt;/code&gt; method. Read more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-function.prototype.call&#34;&gt;&lt;strong&gt;19.2.3.3&lt;/strong&gt; Function.prototype.call(&lt;code&gt;thisArg&lt;/code&gt;, ...&lt;code&gt;args&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-function.prototype.apply&#34;&gt;**19.2.3.1 ** Function.prototype.apply(&lt;code&gt;thisArg&lt;/code&gt;, &lt;code&gt;argArray&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A &lt;code&gt;constructor&lt;/code&gt; property&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const c = &#34;constructor&#34;;&#xA;c[c][c](&#39;console.log(&#34;WTF?&#34;)&#39;)(); // &amp;gt; WTF?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s consider this example step-by-step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Declare a new constant which is a string &#39;constructor&#39;&#xA;const c = &#34;constructor&#34;;&#xA;&#xA;// c is a string&#xA;c; // -&amp;gt; &#39;constructor&#39;&#xA;&#xA;// Getting a constructor of string&#xA;c[c]; // -&amp;gt; [Function: String]&#xA;&#xA;// Getting a constructor of constructor&#xA;c[c][c]; // -&amp;gt; [Function: Function]&#xA;&#xA;// Call the Function constructor and pass&#xA;// the body of new function as an argument&#xA;c[c][c](&#39;console.log(&#34;WTF?&#34;)&#39;); // -&amp;gt; [Function: anonymous]&#xA;&#xA;// And then call this anonymous function&#xA;// The result is console-logging a string &#39;WTF?&#39;&#xA;c[c][c](&#39;console.log(&#34;WTF?&#34;)&#39;)(); // &amp;gt; WTF?&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An &lt;code&gt;Object.prototype.constructor&lt;/code&gt; returns a reference to the &lt;code&gt;Object&lt;/code&gt; constructor function that created the instance object. In case with strings it is &lt;code&gt;String&lt;/code&gt;, in case with numbers it is &lt;code&gt;Number&lt;/code&gt; and so on.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/constructor&#34;&gt;&lt;code&gt;Object.prototype.constructor&lt;/code&gt;&lt;/a&gt; at MDN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-object.prototype.constructor&#34;&gt;&lt;strong&gt;19.1.3.1&lt;/strong&gt; Object.prototype.constructor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Object as a key of object&#39;s property&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{ [{}]: {} } // -&amp;gt; { &#39;[object Object]&#39;: {} }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Why does this work so? Here we&#39;re using a &lt;em&gt;Computed property name&lt;/em&gt;. When you pass an object between those brackets, it coerces object to a string, so we get the property key &lt;code&gt;&#39;[object Object]&#39;&lt;/code&gt; and the value &lt;code&gt;{}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can make &#34;brackets hell&#34; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;({ [{}]: { [{}]: {} } }[{}][{}]); // -&amp;gt; {}&#xA;&#xA;// structure:&#xA;// {&#xA;//   &#39;[object Object]&#39;: {&#xA;//     &#39;[object Object]&#39;: {}&#xA;//   }&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about object literals here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer&#34;&gt;Object initializer&lt;/a&gt; at MDN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/#sec-object-initializer&#34;&gt;&lt;strong&gt;12.2.6&lt;/strong&gt; Object Initializer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Accessing prototypes with &lt;code&gt;__proto__&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;As we know, primitives don&#39;t have prototypes. However, if we try to get a value of &lt;code&gt;__proto__&lt;/code&gt; for primitives, we would get this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(1).__proto__.__proto__.__proto__; // -&amp;gt; null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;This happens because when something doesn&#39;t have a prototype, it will be wrapped into a wrapper object using the &lt;code&gt;ToObject&lt;/code&gt; method. So, step-by-step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(1).__proto__; // -&amp;gt; [Number: 0]&#xA;(1).__proto__.__proto__; // -&amp;gt; {}&#xA;(1).__proto__.__proto__.__proto__; // -&amp;gt; null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is more information about &lt;code&gt;__proto__&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-object.prototype.__proto__&#34;&gt;&lt;strong&gt;B.2.2.1&lt;/strong&gt; Object.prototype.&lt;strong&gt;proto&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-toobject&#34;&gt;&lt;strong&gt;7.1.13&lt;/strong&gt; ToObject(&lt;code&gt;argument&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;`${{Object}}`&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;What is the result of the expression below?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;`${{ Object }}`;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The answer is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// -&amp;gt; &#39;[object Object]&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;We defined an object with a property &lt;code&gt;Object&lt;/code&gt; using &lt;em&gt;Shorthand property notation&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  Object: Object;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we&#39;ve passed this object to the template literal, so the &lt;code&gt;toString&lt;/code&gt; method calls for that object. That&#39;s why we get the string &lt;code&gt;&#39;[object Object]&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-template-literals&#34;&gt;&lt;strong&gt;12.2.9&lt;/strong&gt; Template Literals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer&#34;&gt;Object initializer&lt;/a&gt; at MDN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Destructuring with default values&lt;/h2&gt; &#xA;&lt;p&gt;Consider this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let x,&#xA;  { x: y = 1 } = { x };&#xA;y;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The example above is a great task for an interview. What the value of &lt;code&gt;y&lt;/code&gt;? The answer is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// -&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let x,&#xA;  { x: y = 1 } = { x };&#xA;y;&#xA;//  ↑       ↑           ↑    ↑&#xA;//  1       3           2    4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the example above:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;We declare &lt;code&gt;x&lt;/code&gt; with no value, so it&#39;s &lt;code&gt;undefined&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then we pack the value of &lt;code&gt;x&lt;/code&gt; into the object property &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Then we extract the value of &lt;code&gt;x&lt;/code&gt; using destructuring and want to assign it to &lt;code&gt;y&lt;/code&gt;. If the value is not defined, then we&#39;re going to use &lt;code&gt;1&lt;/code&gt; as the default value.&lt;/li&gt; &#xA; &lt;li&gt;Return the value of &lt;code&gt;y&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Object_initializer&#34;&gt;Object initializer&lt;/a&gt; at MDN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Dots and spreading&lt;/h2&gt; &#xA;&lt;p&gt;Interesting examples could be composed with spreading of arrays. Consider this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[...[...&#34;...&#34;]].length; // -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Why &lt;code&gt;3&lt;/code&gt;? When we use the &lt;a href=&#34;http://www.ecma-international.org/ecma-262/6.0/#sec-array-initializer&#34;&gt;spread operator&lt;/a&gt;, the &lt;code&gt;@@iterator&lt;/code&gt; method is called, and the returned iterator is used to obtain the values to be iterated. The default iterator for string spreads a string into characters. After spreading, we pack these characters into an array. Then we spread this array again and pack it back to an array.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;&#39;...&#39;&lt;/code&gt; string consists with three &lt;code&gt;.&lt;/code&gt; characters, so the length of resulting array is &lt;code&gt;3&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, step-by-step:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[...&#39;...&#39;]             // -&amp;gt; [ &#39;.&#39;, &#39;.&#39;, &#39;.&#39; ]&#xA;[...[...&#39;...&#39;]]        // -&amp;gt; [ &#39;.&#39;, &#39;.&#39;, &#39;.&#39; ]&#xA;[...[...&#39;...&#39;]].length // -&amp;gt; 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Obviously, we can spread and wrap the elements of an array as many times as we want:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[...&#39;...&#39;]                 // -&amp;gt; [ &#39;.&#39;, &#39;.&#39;, &#39;.&#39; ]&#xA;[...[...&#39;...&#39;]]            // -&amp;gt; [ &#39;.&#39;, &#39;.&#39;, &#39;.&#39; ]&#xA;[...[...[...&#39;...&#39;]]]       // -&amp;gt; [ &#39;.&#39;, &#39;.&#39;, &#39;.&#39; ]&#xA;[...[...[...[...&#39;...&#39;]]]]  // -&amp;gt; [ &#39;.&#39;, &#39;.&#39;, &#39;.&#39; ]&#xA;// and so on …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Labels&lt;/h2&gt; &#xA;&lt;p&gt;Not many programmers know about labels in JavaScript. They are kind of interesting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;foo: {&#xA;  console.log(&#34;first&#34;);&#xA;  break foo;&#xA;  console.log(&#34;second&#34;);&#xA;}&#xA;&#xA;// &amp;gt; first&#xA;// -&amp;gt; undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The labeled statement is used with &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statements. You can use a label to identify a loop, and then use the &lt;code&gt;break&lt;/code&gt; or &lt;code&gt;continue&lt;/code&gt; statements to indicate whether a program should interrupt the loop or continue its execution.&lt;/p&gt; &#xA;&lt;p&gt;In the example above, we identify a label &lt;code&gt;foo&lt;/code&gt;. After that &lt;code&gt;console.log(&#39;first&#39;);&lt;/code&gt; executes and then we interrupt the execution.&lt;/p&gt; &#xA;&lt;p&gt;Read more about labels in JavaScript:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tc39.github.io/ecma262/#sec-labelled-statements&#34;&gt;&lt;strong&gt;13.13&lt;/strong&gt; Labelled Statements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label&#34;&gt;Labeled statements&lt;/a&gt; at MDN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Nested labels&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;a: b: c: d: e: f: g: 1, 2, 3, 4, 5; // -&amp;gt; 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Similar to previous examples, follow these links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-comma-operator&#34;&gt;&lt;strong&gt;12.16&lt;/strong&gt; Comma Operator (&lt;code&gt;,&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tc39.github.io/ecma262/#sec-labelled-statements&#34;&gt;&lt;strong&gt;13.13&lt;/strong&gt; Labelled Statements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/label&#34;&gt;Labeled statements&lt;/a&gt; at MDN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Insidious &lt;code&gt;try..catch&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;What will this expression return? &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(() =&amp;gt; {&#xA;  try {&#xA;    return 2;&#xA;  } finally {&#xA;    return 3;&#xA;  }&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The answer is &lt;code&gt;3&lt;/code&gt;. Surprised?&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-try-statement&#34;&gt;&lt;strong&gt;13.15&lt;/strong&gt; The &lt;code&gt;try&lt;/code&gt; Statement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Is this multiple inheritance?&lt;/h2&gt; &#xA;&lt;p&gt;Take a look at the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new class F extends (String, Array) {}(); // -&amp;gt; F []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Is this a multiple inheritance? Nope.&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The interesting part is the value of the &lt;code&gt;extends&lt;/code&gt; clause (&lt;code&gt;(String, Array)&lt;/code&gt;). The grouping operator always returns its last argument, so &lt;code&gt;(String, Array)&lt;/code&gt; is actually just &lt;code&gt;Array&lt;/code&gt;. That means we&#39;ve just created a class which extends &lt;code&gt;Array&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-class-definitions&#34;&gt;&lt;strong&gt;14.5&lt;/strong&gt; Class Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-comma-operator&#34;&gt;&lt;strong&gt;12.16&lt;/strong&gt; Comma Operator (&lt;code&gt;,&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A generator which yields itself&lt;/h2&gt; &#xA;&lt;p&gt;Consider this example of a generator which yields itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function* f() {&#xA;  yield f;&#xA;})().next();&#xA;// -&amp;gt; { value: [GeneratorFunction: f], done: false }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, the returned value is an object with its &lt;code&gt;value&lt;/code&gt; equal to &lt;code&gt;f&lt;/code&gt;. In that case, we can do something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function* f() {&#xA;  yield f;&#xA;})()&#xA;  .next()&#xA;  .value()&#xA;  .next()(&#xA;    // -&amp;gt; { value: [GeneratorFunction: f], done: false }&#xA;&#xA;    // and again&#xA;    function* f() {&#xA;      yield f;&#xA;    }&#xA;  )()&#xA;  .next()&#xA;  .value()&#xA;  .next()&#xA;  .value()&#xA;  .next()(&#xA;    // -&amp;gt; { value: [GeneratorFunction: f], done: false }&#xA;&#xA;    // and again&#xA;    function* f() {&#xA;      yield f;&#xA;    }&#xA;  )()&#xA;  .next()&#xA;  .value()&#xA;  .next()&#xA;  .value()&#xA;  .next()&#xA;  .value()&#xA;  .next();&#xA;// -&amp;gt; { value: [GeneratorFunction: f], done: false }&#xA;&#xA;// and so on&#xA;// …&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;To understand why this works that way, read these sections of the specification:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-control-abstraction-objects&#34;&gt;&lt;strong&gt;25&lt;/strong&gt; Control Abstraction Objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-generator-objects&#34;&gt;&lt;strong&gt;25.3&lt;/strong&gt; Generator Objects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A class of class&lt;/h2&gt; &#xA;&lt;p&gt;Consider this obfuscated syntax playing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;typeof new class {&#xA;  class() {}&#xA;}(); // -&amp;gt; &#39;object&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It seems like we&#39;re declaring a class inside of class. Should be an error, however, we get the string &lt;code&gt;&#39;object&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Since ECMAScript 5 era, &lt;em&gt;keywords&lt;/em&gt; are allowed as &lt;em&gt;property names&lt;/em&gt;. So think about it as this simple object example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const foo = {&#xA;  class: function() {}&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And ES6 standardized shorthand method definitions. Also, classes can be anonymous. So if we drop &lt;code&gt;: function&lt;/code&gt; part, we&#39;re going to get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class {&#xA;  class() {}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The result of a default class is always a simple object. And its typeof should return &lt;code&gt;&#39;object&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Read more here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-method-definitions&#34;&gt;&lt;strong&gt;14.3&lt;/strong&gt; Method Definitions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-class-definitions&#34;&gt;&lt;strong&gt;14.5&lt;/strong&gt; Class Definitions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Non-coercible objects&lt;/h2&gt; &#xA;&lt;p&gt;With well-known symbols, there&#39;s a way to get rid of type coercion. Take a look:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function nonCoercible(val) {&#xA;  if (val == null) {&#xA;    throw TypeError(&#34;nonCoercible should not be called with null or undefined&#34;);&#xA;  }&#xA;&#xA;  const res = Object(val);&#xA;&#xA;  res[Symbol.toPrimitive] = () =&amp;gt; {&#xA;    throw TypeError(&#34;Trying to coerce non-coercible object&#34;);&#xA;  };&#xA;&#xA;  return res;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can use this like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// objects&#xA;const foo = nonCoercible({ foo: &#34;foo&#34; });&#xA;&#xA;foo * 10; // -&amp;gt; TypeError: Trying to coerce non-coercible object&#xA;foo + &#34;evil&#34;; // -&amp;gt; TypeError: Trying to coerce non-coercible object&#xA;&#xA;// strings&#xA;const bar = nonCoercible(&#34;bar&#34;);&#xA;&#xA;bar + &#34;1&#34;; // -&amp;gt; TypeError: Trying to coerce non-coercible object&#xA;bar.toString() + 1; // -&amp;gt; bar1&#xA;bar === &#34;bar&#34;; // -&amp;gt; false&#xA;bar.toString() === &#34;bar&#34;; // -&amp;gt; true&#xA;bar == &#34;bar&#34;; // -&amp;gt; TypeError: Trying to coerce non-coercible object&#xA;&#xA;// numbers&#xA;const baz = nonCoercible(1);&#xA;&#xA;baz == 1; // -&amp;gt; TypeError: Trying to coerce non-coercible object&#xA;baz === 1; // -&amp;gt; false&#xA;baz.valueOf() === 1; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gist.github.com/chicoxyzzy/5dd24608e886adf5444499896dff1197&#34;&gt;A gist by Sergey Rubanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-well-known-symbols&#34;&gt;&lt;strong&gt;6.1.5.1&lt;/strong&gt; Well-Known Symbols&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tricky arrow functions&lt;/h2&gt; &#xA;&lt;p&gt;Consider the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = () =&amp;gt; 10;&#xA;f(); // -&amp;gt; 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Okay, fine, but what about this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = () =&amp;gt; {};&#xA;f(); // -&amp;gt; undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;You might expect &lt;code&gt;{}&lt;/code&gt; instead of &lt;code&gt;undefined&lt;/code&gt;. This is because the curly braces are part of the syntax of the arrow functions, so &lt;code&gt;f&lt;/code&gt; will return undefined. It is however possible to return the &lt;code&gt;{}&lt;/code&gt; object directly from an arrow function, by enclosing the return value with brackets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = () =&amp;gt; ({});&#xA;f(); // -&amp;gt; {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Arrow functions can not be a constructor&lt;/h2&gt; &#xA;&lt;p&gt;Consider the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = function() {&#xA;  this.a = 1;&#xA;};&#xA;new f(); // -&amp;gt; f { &#39;a&#39;: 1 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, try do to the same with an arrow function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = () =&amp;gt; {&#xA;  this.a = 1;&#xA;};&#xA;new f(); // -&amp;gt; TypeError: f is not a constructor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Arrow functions cannot be used as constructors and will throw an error when used with &lt;code&gt;new&lt;/code&gt;. Because they have a lexical &lt;code&gt;this&lt;/code&gt;, and do not have a &lt;code&gt;prototype&lt;/code&gt; property, so it would not make much sense.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;arguments&lt;/code&gt; and arrow functions&lt;/h2&gt; &#xA;&lt;p&gt;Consider the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = function() {&#xA;  return arguments;&#xA;};&#xA;f(&#34;a&#34;); // -&amp;gt; { &#39;0&#39;: &#39;a&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, try do to the same with an arrow function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = () =&amp;gt; arguments;&#xA;f(&#34;a&#34;); // -&amp;gt; Uncaught ReferenceError: arguments is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Arrow functions are a lightweight version of regular functions with a focus on being short and lexical &lt;code&gt;this&lt;/code&gt;. At the same time arrow functions do not provide a binding for the &lt;code&gt;arguments&lt;/code&gt; object. As a valid alternative use the &lt;code&gt;rest parameters&lt;/code&gt; to achieve the same result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let f = (...args) =&amp;gt; args;&#xA;f(&#34;a&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions&#34;&gt;Arrow functions&lt;/a&gt; at MDN.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tricky return&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;return&lt;/code&gt; statement is also tricky. Consider this:&lt;/p&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function() {&#xA;  return&#xA;  {&#xA;    b: 10;&#xA;  }&#xA;})(); // -&amp;gt; undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;return&lt;/code&gt; and the returned expression must be in the same line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(function() {&#xA;  return {&#xA;    b: 10&#xA;  };&#xA;})(); // -&amp;gt; { b: 10 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is because of a concept called Automatic Semicolon Insertion, which automagically inserts semicolons after most newlines. In the first example, there is a semicolon inserted between the &lt;code&gt;return&lt;/code&gt; statement and the object literal, so the function returns &lt;code&gt;undefined&lt;/code&gt; and the object literal is never evaluated.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-rules-of-automatic-semicolon-insertion&#34;&gt;&lt;strong&gt;11.9.1&lt;/strong&gt; Rules of Automatic Semicolon Insertion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-return-statement&#34;&gt;&lt;strong&gt;13.10&lt;/strong&gt; The &lt;code&gt;return&lt;/code&gt; Statement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Chaining assignments on object&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var foo = { n: 1 };&#xA;var bar = foo;&#xA;&#xA;foo.x = foo = { n: 2 };&#xA;&#xA;foo.x; // -&amp;gt; undefined&#xA;foo; // -&amp;gt; {n: 2}&#xA;bar; // -&amp;gt; {n: 1, x: {n: 2}}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From right to left, &lt;code&gt;{n: 2}&lt;/code&gt; is assigned to foo, and the result of this assignment &lt;code&gt;{n: 2}&lt;/code&gt; is assigned to foo.x, that&#39;s why bar is &lt;code&gt;{n: 1, x: {n: 2}}&lt;/code&gt; as bar is a reference to foo. But why foo.x is undefined while bar.x is not ?&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Foo and bar references the same object &lt;code&gt;{n: 1}&lt;/code&gt;, and lvalues are resolved before assignations. &lt;code&gt;foo = {n: 2}&lt;/code&gt; is creating a new object, and so foo is updated to reference that new object. The trick here is foo in &lt;code&gt;foo.x = ...&lt;/code&gt; as a lvalue was resolved beforehand and still reference the old &lt;code&gt;foo = {n: 1}&lt;/code&gt; object and update it by adding the x value. After that chain assignments, bar still reference the old foo object, but foo reference the new &lt;code&gt;{n: 2}&lt;/code&gt; object, where x is not existing.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var foo = { n: 1 };&#xA;var bar = foo;&#xA;&#xA;foo = { n: 2 }; // -&amp;gt; {n: 2}&#xA;bar.x = foo; // -&amp;gt; {n: 1, x: {n: 2}}&#xA;// bar.x point to the address of the new foo object&#xA;// it&#39;s not equivalent to: bar.x = {n: 2}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Accessing object properties with arrays&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var obj = { property: 1 };&#xA;var array = [&#34;property&#34;];&#xA;&#xA;obj[array]; // -&amp;gt; 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What about pseudo-multidimensional arrays?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var map = {};&#xA;var x = 1;&#xA;var y = 2;&#xA;var z = 3;&#xA;&#xA;map[[x, y, z]] = true;&#xA;map[[x + 10, y, z]] = true;&#xA;&#xA;map[&#34;1,2,3&#34;]; // -&amp;gt; true&#xA;map[&#34;11,2,3&#34;]; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The brackets &lt;code&gt;[]&lt;/code&gt; operator converts the passed expression using &lt;code&gt;toString&lt;/code&gt;. Converting a one-element array to a string is akin to converting the contained element to the string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[&#34;property&#34;].toString(); // -&amp;gt; &#39;property&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;Number.toFixed()&lt;/code&gt; display different numbers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;Number.toFixed()&lt;/code&gt; can behave a bit strange in different browsers. Check out this example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(0.7875).toFixed(3);&#xA;// Firefox: -&amp;gt; 0.787&#xA;// Chrome: -&amp;gt; 0.787&#xA;// IE11: -&amp;gt; 0.788&#xA;(0.7876).toFixed(3);&#xA;// Firefox: -&amp;gt; 0.788&#xA;// Chrome: -&amp;gt; 0.788&#xA;// IE11: -&amp;gt; 0.788&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;While your first instinct may be that IE11 is correct and Firefox/Chrome are wrong, the reality is that Firefox/Chrome are more directly obeying standards for numbers (IEEE-754 Floating Point), while IE11 is minutely disobeying them in (what is probably) an effort to give clearer results.&lt;/p&gt; &#xA;&lt;p&gt;You can see why this occurs with a few quick tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Confirm the odd result of rounding a 5 down&#xA;(0.7875).toFixed(3); // -&amp;gt; 0.787&#xA;// It looks like it&#39;s just a 5 when you expand to the&#xA;// limits of 64-bit (double-precision) float accuracy&#xA;(0.7875).toFixed(14); // -&amp;gt; 0.78750000000000&#xA;// But what if you go beyond the limit?&#xA;(0.7875).toFixed(20); // -&amp;gt; 0.78749999999999997780&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Floating point numbers are not stored as a list of decimal digits internally, but through a more complicated methodology that produces tiny inaccuracies that are usually rounded away by toString and similar calls, but are actually present internally.&lt;/p&gt; &#xA;&lt;p&gt;In this case, that &#34;5&#34; on the end was actually an extremely tiny fraction below a true 5. Rounding it at any reasonable length will render it as a 5... but it is actually not a 5 internally.&lt;/p&gt; &#xA;&lt;p&gt;IE11, however, will report the value input with only zeros appended to the end even in the toFixed(20) case, as it seems to be forcibly rounding the value to reduce the troubles from hardware limits.&lt;/p&gt; &#xA;&lt;p&gt;See for reference &lt;code&gt;NOTE 2&lt;/code&gt; on the ECMA-262 definition for &lt;code&gt;toFixed&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262//#sec-number.prototype.tofixed&#34;&gt;&lt;strong&gt;20.1.3.3&lt;/strong&gt; Number.prototype.toFixed (&lt;code&gt;fractionDigits&lt;/code&gt;)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;code&gt;Math.max()&lt;/code&gt; less than &lt;code&gt;Math.min()&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;I find this example hilarious:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Math.min() &amp;gt; Math.max(); // -&amp;gt; true&#xA;Math.min() &amp;lt; Math.max(); // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;This is a simple one. Let&#39;s consider each part of this expression separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Math.min(); // -&amp;gt; Infinity&#xA;Math.max(); // -&amp;gt; -Infinity&#xA;Infinity &amp;gt; -Infinity; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Why so? Well, &lt;code&gt;Math.max()&lt;/code&gt; is not the same thing as &lt;code&gt;Number.MAX_VALUE&lt;/code&gt;. It does not return the largest possible number.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Math.max&lt;/code&gt; takes arguments, tries to convert the to numbers, compares each one and then returns the largest remaining. If no arguments are given, the result is −∞. If any value is &lt;code&gt;NaN&lt;/code&gt;, the result is &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The opposite is happening for &lt;code&gt;Math.min&lt;/code&gt;. &lt;code&gt;Math.min&lt;/code&gt; returns ∞, if no arguments are given.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/5.1/#sec-15.8.2.11&#34;&gt;&lt;strong&gt;15.8.2.11&lt;/strong&gt; Math.max&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/5.1/#sec-15.8.2.12&#34;&gt;&lt;strong&gt;15.8.2.11&lt;/strong&gt; Math.min&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://charlieharvey.org.uk/page/why_math_max_is_less_than_math_min&#34;&gt;Why is &lt;code&gt;Math.max()&lt;/code&gt; less than &lt;code&gt;Math.min()&lt;/code&gt;?&lt;/a&gt; by Charlie Harvey&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparing &lt;code&gt;null&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The following expressions seem to introduce a contradiction:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;null == 0; // -&amp;gt; false&#xA;null &amp;gt; 0; // -&amp;gt; false&#xA;null &amp;gt;= 0; // -&amp;gt; true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;How can &lt;code&gt;null&lt;/code&gt; be neither equal to nor greater than &lt;code&gt;0&lt;/code&gt;, if &lt;code&gt;null &amp;gt;= 0&lt;/code&gt; is actually &lt;code&gt;true&lt;/code&gt;? (This also works with less than in the same way.)&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The way these three expressions are evaluated are all different and are responsible for producing this unexpected behavior.&lt;/p&gt; &#xA;&lt;p&gt;First, the abstract equality comparison &lt;code&gt;null == 0&lt;/code&gt;. Normally, if this operator can&#39;t compare the values on either side properly, it converts both to numbers and compares the numbers. Then, you might expect the following behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// This is not what happens&#xA;(null == 0 + null) == +0;&#xA;0 == 0;&#xA;true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, according to a close reading of the spec, the number conversion doesn&#39;t actually happen on a side that is &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;. Therefore, if you have &lt;code&gt;null&lt;/code&gt; on one side of the equal sign, the other side must be &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt; for the expression to return &lt;code&gt;true&lt;/code&gt;. Since this is not the case, &lt;code&gt;false&lt;/code&gt; is returned.&lt;/p&gt; &#xA;&lt;p&gt;Next, the relational comparison &lt;code&gt;null &amp;gt; 0&lt;/code&gt;. The algorithm here, unlike that of the abstract equality operator, &lt;em&gt;will&lt;/em&gt; convert &lt;code&gt;null&lt;/code&gt; to a number. Therefore, we get this behavior:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;null &amp;gt; 0&#xA;+null = +0&#xA;0 &amp;gt; 0&#xA;false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, the relational comparison &lt;code&gt;null &amp;gt;= 0&lt;/code&gt;. You could argue that this expression should be the result of &lt;code&gt;null &amp;gt; 0 || null == 0&lt;/code&gt;; if this were the case, then the above results would mean that this would also be &lt;code&gt;false&lt;/code&gt;. However, the &lt;code&gt;&amp;gt;=&lt;/code&gt; operator in fact works in a very different way, which is basically to take the opposite of the &lt;code&gt;&amp;lt;&lt;/code&gt; operator. Because our example with the greater than operator above also holds for the less than operator, that means this expression is actually evaluated like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;null &amp;gt;= 0;&#xA;!(null &amp;lt; 0);&#xA;!(+null &amp;lt; +0);&#xA;!(0 &amp;lt; 0);&#xA;!false;&#xA;true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-abstract-relational-comparison&#34;&gt;&lt;strong&gt;7.2.12&lt;/strong&gt; Abstract Relational Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.campvanilla.com/javascript-the-curious-case-of-null-0-7b131644e274&#34;&gt;An in-depth explanation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Same variable redeclaration&lt;/h2&gt; &#xA;&lt;p&gt;JS allows to redeclare variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;a;&#xA;a;&#xA;// This is also valid&#xA;a, a;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Works also in strict mode:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var a, a, a;&#xA;var a;&#xA;var a;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;All definitions are merged into one definition.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-variable-statement&#34;&gt;&lt;strong&gt;13.3.2&lt;/strong&gt; Variable Statement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Default behavior Array.prototype.sort()&lt;/h2&gt; &#xA;&lt;p&gt;Imagine that you need to sort an array of numbers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[10, 1, 3].sort(); // -&amp;gt; [ 1, 10, 3 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;The default sort order is built upon converting the elements into strings, then comparing their sequences of UTF-16 code units values.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ecma-international.org/ecma-262/#sec-array.prototype.sort&#34;&gt;&lt;strong&gt;22.1.3.25&lt;/strong&gt; Array.prototype.sort ( comparefn )&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Hint&lt;/h3&gt; &#xA;&lt;p&gt;Pass &lt;code&gt;compareFn&lt;/code&gt; if you try to sort anything but string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[10, 1, 3].sort((a, b) =&amp;gt; a - b); // -&amp;gt; [ 1, 3, 10 ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;resolve() won&#39;t return Promise instance&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const theObject = {&#xA;  a: 7&#xA;};&#xA;const thePromise = new Promise((resolve, reject) =&amp;gt; {&#xA;  resolve(theObject);&#xA;}); // Promise instance object&#xA;&#xA;thePromise.then(value =&amp;gt; {&#xA;  console.log(value === theObject); // &amp;gt; true&#xA;  console.log(value); // &amp;gt; { a: 7 }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;value&lt;/code&gt; which is resolved from &lt;code&gt;thePromise&lt;/code&gt; is exactly &lt;code&gt;theObject&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;How about input another &lt;code&gt;Promise&lt;/code&gt; into the &lt;code&gt;resolve&lt;/code&gt; function?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const theObject = new Promise((resolve, reject) =&amp;gt; {&#xA;  resolve(7);&#xA;}); // Promise instance object&#xA;const thePromise = new Promise((resolve, reject) =&amp;gt; {&#xA;  resolve(theObject);&#xA;}); // Promise instance object&#xA;&#xA;thePromise.then(value =&amp;gt; {&#xA;  console.log(value === theObject); // &amp;gt; false&#xA;  console.log(value); // &amp;gt; 7&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This function flattens nested layers of promise-like objects (e.g. a promise that resolves to a promise that resolves to something) into a single layer.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve&#34;&gt;Promise.resolve() on MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The specification is &lt;a href=&#34;https://tc39.es/ecma262/#sec-promise-resolve-functions&#34;&gt;ECMAScript 25.6.1.3.2 Promise Resolve Functions&lt;/a&gt;. But it is not quite human-friendly.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;{}{}&lt;/code&gt; is undefined&lt;/h2&gt; &#xA;&lt;p&gt;Write them in the console. They will return the value defined in the last object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{}{}; // -&amp;gt; undefined&#xA;{}{}{}; // -&amp;gt; undefined&#xA;{}{}{}{}; // -&amp;gt; undefined&#xA;{foo: &#39;bar&#39;}{}; // -&amp;gt; &#39;bar&#39;&#xA;{}{foo: &#39;bar&#39;}; // -&amp;gt; &#39;bar&#39;&#xA;{}{foo: &#39;bar&#39;}{}; // -&amp;gt; &#39;bar&#39;&#xA;{a: &#39;b&#39;}{c:&#39; d&#39;}{}; // -&amp;gt; &#39;d&#39;&#xA;{a: &#39;b&#39;, c: &#39;d&#39;}{}; // &amp;gt; SyntaxError: Unexpected token &#39;:&#39;&#xA;({}{}); // &amp;gt; SyntaxError: Unexpected token &#39;{&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;When inspecting each &lt;code&gt;{}&lt;/code&gt;, they returns undefined. If you inspect &lt;code&gt;{foo: &#39;bar&#39;}{}&lt;/code&gt;, you will find &lt;code&gt;{foo: &#39;bar&#39;}&lt;/code&gt; is &lt;code&gt;&#39;bar&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are two meanings for &lt;code&gt;{}&lt;/code&gt;: an object or a block. For example, the &lt;code&gt;{}&lt;/code&gt; in &lt;code&gt;() =&amp;gt; {}&lt;/code&gt; means block. So we need to use &lt;code&gt;() =&amp;gt; ({})&lt;/code&gt; to return an object.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s use &lt;code&gt;{foo: &#39;bar&#39;}&lt;/code&gt; as a block. Write this snippet in your console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (true) {&#xA;  foo: &#34;bar&#34;;&#xA;} // -&amp;gt; &#39;bar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Surprisingly, it behaviors the same! You can guess here that &lt;code&gt;{foo: &#39;bar&#39;}{}&lt;/code&gt; is a block.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;arguments&lt;/code&gt; binding&lt;/h2&gt; &#xA;&lt;p&gt;Consider this function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function a(x) {&#xA;  arguments[0] = &#34;hello&#34;;&#xA;  console.log(x);&#xA;}&#xA;&#xA;a(); // &amp;gt; undefined&#xA;a(1); // &amp;gt; &#34;hello&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;arguments&lt;/code&gt; is an Array-like object that contains the values of the arguments passed to that function. When no arguments are passed, then there&#39;s no &lt;code&gt;x&lt;/code&gt; to override.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/arguments&#34;&gt;The arguments object&lt;/a&gt; on MDN&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;An &lt;code&gt;alert&lt;/code&gt; from hell&lt;/h2&gt; &#xA;&lt;p&gt;This on is literally from hell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[666][&#34;\155\141\160&#34;][&#34;\143\157\156\163\164\162\165\143\164\157\162&#34;](&#xA;  &#34;\141\154\145\162\164(666)&#34;&#xA;)(666); // alert(666)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;This one is based on octal escape sequences and multiple strings.&lt;/p&gt; &#xA;&lt;p&gt;Any character with a character code lower than 256 (i.e. any character in the extended ASCII range) can be escaped using its octal-encoded character code, prefixed with &lt;code&gt;\&lt;/code&gt;. An example above is basically and &lt;code&gt;alert&lt;/code&gt; ecoded by octal escape sequances.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/aemkei/status/897172907222237185&#34;&gt;Martin Kleppe tweet about it&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mathiasbynens.be/notes/javascript-escapes#octal&#34;&gt;JavaScript character escape sequences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://davidwalsh.name/multiline-javascript-strings&#34;&gt;Multi-Line JavaScript Strings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;An infinite timeout&lt;/h2&gt; &#xA;&lt;p&gt;Guess what would happen if we set an infinite timeout?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(() =&amp;gt; console.log(&#34;called&#34;), Infinity); // -&amp;gt; &amp;lt;timeoutId&amp;gt;&#xA;// &amp;gt; &#39;called&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will executed immediately instead of infinity delay.&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Usually, runtime stores the delay as a 32-bit signed integer internally. This causes an integer overflow, resulting in the timeout being executed immediately.&lt;/p&gt; &#xA;&lt;p&gt;For example, in Node.js we will get this warning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(node:1731) TimeoutOverflowWarning: Infinity does not fit into a 32-bit signed integer.&#xA;Timeout duration was set to 1.&#xA;(Use `node --trace-warnings ...` to show where the warning was created)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&#34;&gt;WindowOrWorkerGlobalScope.setTimeout()&lt;/a&gt; on MDN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/api/timers.html#timers_settimeout_callback_delay_args&#34;&gt;Node.js Documentation on Timers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/2011/WD-html5-20110525/timers.html&#34;&gt;Timers&lt;/a&gt; on W3C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A &lt;code&gt;setTimeout&lt;/code&gt; object&lt;/h2&gt; &#xA;&lt;p&gt;Guess what would happen if we set an callback that&#39;s not a function to &lt;code&gt;setTimeout&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(123, 100); // -&amp;gt; &amp;lt;timeoutId&amp;gt;&#xA;// &amp;gt; &#39;called&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is fine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(&#39;{a: 1}&#39;, 100); // -&amp;gt; &amp;lt;timeoutId&amp;gt;&#xA;// &amp;gt; &#39;called&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is also fine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout({a: 1}, 100); // -&amp;gt; &amp;lt;timeoutId&amp;gt;&#xA;// &amp;gt; &#39;Uncaught SyntaxError: Unexpected identifier               setTimeout (async) (anonymous) @ VM__:1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This throws an &lt;strong&gt;SyntaxError&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this can easily happen if your function returns an object and you call it here instead of passing it! What if the content - policy is set to &lt;code&gt;self&lt;/code&gt;?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(123, 100); // -&amp;gt; &amp;lt;timeoutId&amp;gt;&#xA;// &amp;gt; console.error(&#34;[Report Only] Refused to evaluate a string as JavaScript because &#39;unsafe-eval&#39; is not an allowed source of script in the following Content Security Policy directive: &#34;script-src &#39;report-sample&#39; &#39;self&#39; &#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The console refuses to run it at all!&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;WindowOrWorkerGlobalScope.setTimeout()&lt;/code&gt; can be called with &lt;code&gt;code&lt;/code&gt; as first argument, which will be passed on to &lt;code&gt;eval&lt;/code&gt;, which is bad. Eval will coerce her input to String, and evaluate what is produced, so Objects becomes &lt;code&gt;&#39;[object Object]&#39;&lt;/code&gt; which has hmmm ... an &lt;code&gt;&#39;Unexpected identifier&#39;&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval&#34;&gt;eval()&lt;/a&gt; on MDN (don&#39;t use this)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/setTimeout&#34;&gt;WindowOrWorkerGlobalScope.setTimeout()&lt;/a&gt; on MDN&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy&#34;&gt;Content Security Policy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3.org/TR/2011/WD-html5-20110525/timers.html&#34;&gt;Timers&lt;/a&gt; on W3C&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Double dot&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s try to coerce a number to a string:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;27.toString() // &amp;gt; Uncaught SyntaxError: Invalid or unexpected token&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Maybe we should try with two dots?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;27..toString(); // -&amp;gt; &#39;27&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But why doesn&#39;t first example work?&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s just a language grammar limitation.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;.&lt;/code&gt; character presents an ambiguity. It can be understood to be the member operator, or a decimal, depending on its placement.&lt;/p&gt; &#xA;&lt;p&gt;The specification&#39;s interpretation of the &lt;code&gt;.&lt;/code&gt; character in that particular position is that it will be a decimal. This is defined by the numeric literal syntax of ECMAScript.&lt;/p&gt; &#xA;&lt;p&gt;You must always use parenthesis or an addition dot to make such expression valid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(27).toString(); // -&amp;gt; &#39;27&#39;&#xA;// or&#xA;27..toString(); // -&amp;gt; &#39;27&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/6853865/usage-of-tostring-in-javascript/6853910#6853910&#34;&gt;Usage of toString in JavaScript&lt;/a&gt; on StackOverflow&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/13149282/why-does-10-tostring-work-but-10-tostring-does-not/13149301#13149301&#34;&gt;Why does 10..toString() work, but 10.toString() does not?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extra Newness&lt;/h2&gt; &#xA;&lt;p&gt;I present this as an oddity for your amusement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Foo extends Function {&#xA;  constructor(val) {&#xA;    super();&#xA;    this.prototype.val = val;&#xA;  }&#xA;}&#xA;&#xA;new new Foo(&#34;:D&#34;)().val; // -&amp;gt; &#39;:D&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Constructors in JavaScript are just functions with some special treatment. By extending Function using the class syntax you create a class that, when instantiated, is now a function, which you can then additionally instantiate.&lt;/p&gt; &#xA;&lt;p&gt;While not exhaustively tested, I believe the last statement can be analyzed thus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new new Foo(&#34;:D&#34;)().val(new newFooInstance()).val;&#xA;veryNewFooInstance.val;&#xA;// -&amp;gt; &#39;:D&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a tiny addendum, doing &lt;code&gt;new Function(&#39;return &#34;bar&#34;;&#39;)&lt;/code&gt; of course creates a function with the body &lt;code&gt;return &#34;bar&#34;;&lt;/code&gt;. Since &lt;code&gt;super()&lt;/code&gt; in the constructor of our &lt;code&gt;Foo&lt;/code&gt; class is calling &lt;code&gt;Function&lt;/code&gt;&#39;s constructor, it should come as no surprise now to see that we can additionally manipulate things in there.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class Foo extends Function {&#xA;  constructor(val) {&#xA;    super(`&#xA;      this.val = arguments[0];&#xA;    `);&#xA;    this.prototype.val = val;&#xA;  }&#xA;}&#xA;&#xA;var foo = new new Foo(&#34;:D&#34;)(&#34;D:&#34;);&#xA;foo.val; // -&amp;gt; &#39;D:&#39;&#xA;delete foo.val; // remove the instance prop &#39;val&#39;, deferring back to the prototype&#39;s &#39;val&#39;.&#xA;foo.val; // -&amp;gt; &#39;:D&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/denysdovhan/wtfjs/issues/78&#34;&gt;Class Extends Function: Extra Newness&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why you should use semicolons&lt;/h2&gt; &#xA;&lt;p&gt;Writing some standard JavaScript… and then BOOM!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class SomeClass {&#xA;  [&#34;array&#34;] = []&#xA;  [&#34;string&#34;] = &#34;str&#34;&#xA;}&#xA;&#xA;new SomeClass().array; // -&amp;gt; &#39;str&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What the …?&lt;/p&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Once again, this is all thanks to the Automatic Semicolon Insertion.&lt;/p&gt; &#xA;&lt;p&gt;An example above is basically the same as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class SomeClass {&#xA;  [&#34;array&#34;] = ([][&#34;string&#34;] = &#34;str&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You basically assign a string &lt;code&gt;str&lt;/code&gt; into an &lt;code&gt;array&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/SeaRyanC/status/1148726605222535168&#34;&gt;An original tweet with an example&lt;/a&gt; by Ryan Cavanaugh&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tc39/notes/raw/master/meetings/2017-09/sept-26.md&#34;&gt;TC39 meeting when they debated about it&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Split a string by a space&lt;/h2&gt; &#xA;&lt;p&gt;Have you ever tried to split a string by a space?&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;&#34;.split(&#34;&#34;); // -&amp;gt; []&#xA;// but…&#xA;&#34;&#34;.split(&#34; &#34;); // -&amp;gt; [&#34;&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;This is expected behaviour. It&#39;s responsibility is to divide the input string every time a separator occurs in that input string. When you pass in an empty string it&#39;ll never find a separator and thus return that string.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s quote the specification:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The substrings are determined by searching from left to right for occurrences of &lt;code&gt;separator&lt;/code&gt;; these occurrences are not part of any String in the returned array, but serve to divide up the String value.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tc39.es/ecma262/#sec-string.prototype.split&#34;&gt;&lt;strong&gt;22.1.3.21&lt;/strong&gt; String.prototype.split&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/SeaRyanC/status/1331656278104440833&#34;&gt;An original tween with an example&lt;/a&gt; by Ryan Cavanaugh&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/kl13nt/status/1331742810932916227?s=20&#34;&gt;A tween with an explanation&lt;/a&gt; by Nabil Tharwat&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;A stringified string&lt;/h2&gt; &#xA;&lt;p&gt;This caused a bug that I&#39;ve been solving for a few days:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;JSON.stringify(&#34;production&#34;) === &#34;production&#34;; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;Let&#39;s see what &lt;code&gt;JSON.stringify&lt;/code&gt; is returning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;JSON.stringify(&#34;production&#34;); // -&amp;gt; &#39;&#34;production&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is actually a stringified string, so it&#39;s true:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#39;&#34;production&#34;&#39; === &#34;production&#34;; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.json.org/json-en.html&#34;&gt;ECMA-404 The JSON Data Interchange Standard.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Non-strict comparison of a number to &lt;code&gt;true&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1 == true; // -&amp;gt; true&#xA;// but…&#xA;Boolean(1.1); // -&amp;gt; true&#xA;1.1 == true; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;💡 Explanation:&lt;/h3&gt; &#xA;&lt;p&gt;According to the specification:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The comparison x == y, where x and y are values, produces true or false. Such a comparison is performed as follows:&lt;/p&gt; &#xA; &lt;ol start=&#34;4&#34;&gt; &#xA;  &lt;li&gt;If &lt;code&gt;Type(x)&lt;/code&gt; is Number and &lt;code&gt;Type(y)&lt;/code&gt; is String, return the result of the comparison &lt;code&gt;x == ! ToNumber(y)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;So this comparison is performed like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1 == true;&#xA;1 == Number(true);&#xA;1 == 1; // -&amp;gt; true&#xA;// but…&#xA;1.1 == true;&#xA;1.1 == Number(true);&#xA;1.1 == 1; // -&amp;gt; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://262.ecma-international.org/11.0/index.html#sec-abstract-equality-comparison&#34;&gt;&lt;strong&gt;7.2.15&lt;/strong&gt; Abstract Equality Comparison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;📚 Other resources&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://wtfjs.com/&#34;&gt;wtfjs.com&lt;/a&gt; — a collection of those very special irregularities, inconsistencies and just plain painfully unintuitive moments for the language of the web.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.destroyallsoftware.com/talks/wat&#34;&gt;Wat&lt;/a&gt; — A lightning talk by Gary Bernhardt from CodeMash 2012&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=2pL28CcEijU&#34;&gt;What the... JavaScript?&lt;/a&gt; — Kyle Simpsons talk for Forward 2 attempts to “pull out the crazy” from JavaScript. He wants to help you produce cleaner, more elegant, more readable code, then inspire people to contribute to the open source community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zero.milosz.ca/&#34;&gt;Zeros in JavaScript&lt;/a&gt; — a comparison table of &lt;code&gt;==&lt;/code&gt;, &lt;code&gt;===&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt; and &lt;code&gt;*&lt;/code&gt; in JavaScript.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;🤝 Supporting&lt;/h1&gt; &#xA;&lt;p&gt;Hi! I work on this project in my spare time, in addition to my primary job. I hope you enjoy reading it. If you do, please, consider supporting me 🙏.&lt;/p&gt; &#xA;&lt;p&gt;Every single donation is important. Your donation is gonna make a clear statement: My work is valued.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🙏 Thank you for your support! 🙏&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Service&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Link&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Patreon&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://patreon.com/denysdovhan&#34;&gt;Become a patron&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://patreon.com/denysdovhan&#34;&gt;&lt;img src=&#34;https://c5.patreon.com/external/logo/become_a_patron_button@2x.png&#34; width=&#34;120px&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;BuyMeACoffee&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://patreon.com/denysdovhan&#34;&gt;Buy me a cup of ☕️ or 🥤&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://buymeacoffee.com/denysdovhan&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/default-black.png&#34; width=&#34;120px&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bitcoin&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;1EJsKs6rPsqa7QLoVLpe3wgcdL9Q8WmDxE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3459374/107130426-0ae4f800-68d6-11eb-9b86-15bf33467615.png&#34; width=&#34;120px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Ethereum&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;0x6aF39C917359897ae6969Ad682C14110afe1a0a1&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/3459374/107130370-55b24000-68d5-11eb-93f5-075355c7fcd4.png&#34; width=&#34;120px&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;⚠️ Note:&lt;/strong&gt; I live in Ukraine and services like PayPal and Stripe don&#39;t work with Ukrainian bank accounts. This means there&#39;s no way for me to set up GitHub Sponsors, OpenCollective, or services relied on them. Sorry, those are the only ways you can support me for now.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;🎓 License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.wtfpl.net&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-WTFPL%202.0-lightgrey.svg?style=flat-square&#34; alt=&#34;CC 4.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;© &lt;a href=&#34;http://denysdovhan.com&#34;&gt;Denys Dovhan&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ColorlibHQ/AdminLTE</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/ColorlibHQ/AdminLTE</id>
    <link href="https://github.com/ColorlibHQ/AdminLTE" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AdminLTE - Free admin dashboard template based on Bootstrap 4&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://adminlte.io&#34;&gt;AdminLTE - Bootstrap 4 Admin Dashboard&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/admin-lte&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/admin-lte/latest.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagist.org/packages/almasaeed2010/adminlte&#34;&gt;&lt;img src=&#34;https://img.shields.io/packagist/v/almasaeed2010/adminlte.svg?sanitize=true&#34; alt=&#34;Packagist&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdelivr.com/package/npm/admin-lte&#34;&gt;&lt;img src=&#34;https://data.jsdelivr.com/v1/package/npm/admin-lte/badge&#34; alt=&#34;cdn version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/from-referrer/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://open.vscode.dev/ColorlibHQ/AdminLTE&#34;&gt;&lt;img src=&#34;https://open.vscode.dev/badges/open-in-vscode.svg?sanitize=true&#34; alt=&#34;Open in Visual Studio Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/jfdvjwFqfz&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/discord-join%20now-green&#34; alt=&#34;Discord Invite&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AdminLTE&lt;/strong&gt; is a fully responsive administration template. Based on &lt;strong&gt;&lt;a href=&#34;https://getbootstrap.com/&#34;&gt;Bootstrap 4.6&lt;/a&gt;&lt;/strong&gt; framework and also the JS/jQuery plugin. Highly customizable and easy to use. Fits many screen resolutions from small mobile devices to large desktops.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Preview on &lt;a href=&#34;https://adminlte.io/themes/v3&#34;&gt;AdminLTE.io&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Looking for Premium Templates?&lt;/h2&gt; &#xA;&lt;p&gt;AdminLTE.io just opened a new premium templates page. Hand picked to ensure the best quality and the most affordable prices. Visit &lt;a href=&#34;https://adminlte.io/premium&#34;&gt;https://adminlte.io/premium&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://adminlte.io/AdminLTE3.png&#34; alt=&#34;&amp;quot;AdminLTE Presentation&amp;quot;&#34; title=&#34;AdminLTE Presentation&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;AdminLTE&lt;/strong&gt; has been carefully coded with clear comments in all of its JS, SCSS and HTML files. SCSS has been used to increase code customizability.&lt;/p&gt; &#xA;&lt;h2&gt;Quick start&lt;/h2&gt; &#xA;&lt;p&gt;There are multiple ways to install AdminLTE.&lt;/p&gt; &#xA;&lt;h3&gt;Download &amp;amp; Changelog:&lt;/h3&gt; &#xA;&lt;p&gt;Always Recommended to download from GitHub latest release &lt;a href=&#34;https://github.com/ColorlibHQ/AdminLTE/releases/latest&#34;&gt;AdminLTE 3&lt;/a&gt; for bug free and latest features.&lt;br&gt; Visit the &lt;a href=&#34;https://github.com/ColorlibHQ/AdminLTE/releases&#34;&gt;releases&lt;/a&gt; page to view the changelog.&lt;br&gt; Legacy Releases are &lt;a href=&#34;https://github.com/ColorlibHQ/AdminLTE/releases/tag/v2.4.18&#34;&gt;AdminLTE 2&lt;/a&gt; / &lt;a href=&#34;https://github.com/ColorlibHQ/AdminLTE/releases/tag/1.3.1&#34;&gt;AdminLTE 1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stable release&lt;/h2&gt; &#xA;&lt;h3&gt;Grab from &lt;a href=&#34;https://www.jsdelivr.com/package/npm/admin-lte&#34;&gt;jsdelivr&lt;/a&gt; CDN:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important Note&lt;/strong&gt;: You needed to add separately cdn links for plugins in your project.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/admin-lte@3.2/dist/js/adminlte.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/admin-lte@3.2/dist/css/adminlte.min.css&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using The Command Line:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Important Note&lt;/strong&gt;: To install it via npm/Yarn, you need at least Node.js 14 or higher.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Via npm&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install admin-lte@^3.2 --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via Yarn&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add admin-lte@^3.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via Composer&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;composer require &#34;almasaeed2010/adminlte=~3.2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Via Git&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/ColorlibHQ/AdminLTE.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://adminlte.io/docs/3.2/&#34;&gt;online documentation&lt;/a&gt; for the most updated guide. Information will be added on a weekly basis.&lt;/p&gt; &#xA;&lt;h2&gt;Browsers support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/edge/edge_48x48.png&#34; alt=&#34;IE / Edge&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;IE / Edge&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png&#34; alt=&#34;Firefox&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;Firefox&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png&#34; alt=&#34;Chrome&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;Chrome&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari/safari_48x48.png&#34; alt=&#34;Safari&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;Safari&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/safari-ios/safari-ios_48x48.png&#34; alt=&#34;iOS Safari&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;iOS Safari&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/samsung-internet/samsung-internet_48x48.png&#34; alt=&#34;Samsung&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;Samsung&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/opera/opera_48x48.png&#34; alt=&#34;Opera&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;Opera&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/vivaldi/vivaldi_48x48.png&#34; alt=&#34;Vivaldi&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;Vivaldi&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;http://godban.github.io/browsers-support-badges/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/alrra/browser-logos/master/src/electron/electron_48x48.png&#34; alt=&#34;Electron&#34; width=&#34;24px&#34; height=&#34;24px&#34;&gt;&lt;/a&gt;&lt;br&gt;Electron&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;IE10, IE11, Edge&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;   &lt;td&gt;last 2 versions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Light Mode (Only Dark Mode Removed)&lt;/h2&gt; &#xA;&lt;p&gt;You can use light-mode-only version, if you are not using dark mode and also file size less without dark-mode.&lt;/p&gt; &#xA;&lt;p&gt;File Location &lt;code&gt;./dist/css/alt/adminlte.light.css&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compile dist files&lt;/h2&gt; &#xA;&lt;p&gt;To compile the dist files you need Node.js/npm, clone/download the repo then:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;npm install&lt;/code&gt; (install npm deps)&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Optional:&lt;/em&gt; &lt;code&gt;npm run dev&lt;/code&gt; (developer mode, autocompile with browsersync support for live demo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run production&lt;/code&gt; (compile css/js files)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read through our &lt;a href=&#34;https://github.com/ColorlibHQ/AdminLTE/tree/master/.github/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;. Included are directions for opening issues, coding standards, and notes on development.&lt;/p&gt; &#xA;&lt;p&gt;Editor preferences are available in the &lt;a href=&#34;https://github.com/twbs/bootstrap/raw/main/.editorconfig&#34;&gt;editor config&lt;/a&gt; for easy use in common text editors. Read more and download plugins at &lt;a href=&#34;https://editorconfig.org/&#34;&gt;https://editorconfig.org/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;AdminLTE is an open source project by &lt;a href=&#34;https://adminlte.io&#34;&gt;AdminLTE.io&lt;/a&gt; that is licensed under &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt;. AdminLTE.io reserves the right to change the license of future releases.&lt;/p&gt; &#xA;&lt;h2&gt;Image Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pixeden.com/psd-web-elements/flat-responsive-showcase-psd&#34;&gt;Pixeden&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.graphicsfuel.com/2013/02/13-high-resolution-blur-backgrounds/&#34;&gt;Graphicsfuel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pickaface.net/&#34;&gt;Pickaface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://unsplash.com/&#34;&gt;Unsplash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://uifaces.com/&#34;&gt;Uifaces&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>TryGhost/Ghost</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/TryGhost/Ghost</id>
    <link href="https://github.com/TryGhost/Ghost" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Turn your audience into a business. Publishing, memberships, subscriptions and newsletters.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ghost.org/#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/65487235/157884383-1b75feb1-45d8-4430-b636-3f7e06577347.png&#34; alt=&#34;Ghost&#34; width=&#34;200px&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://ghost.org/#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/65487235/157849205-aa24152c-4610-4d7d-b752-3a8c4f9319e6.png&#34; alt=&#34;Ghost&#34; width=&#34;200px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &amp;nbsp; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ghost.org/&#34;&gt;Ghost.org&lt;/a&gt; • &lt;a href=&#34;https://forum.ghost.org&#34;&gt;Forum&lt;/a&gt; • &lt;a href=&#34;https://ghost.org/docs/&#34;&gt;Docs&lt;/a&gt; • &lt;a href=&#34;https://github.com/TryGhost/Ghost/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; • &lt;a href=&#34;https://twitter.com/ghost&#34;&gt;Twitter&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://ghost.org/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/downloads-2M-brightgreen.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/TryGhost/Ghost/releases/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/TryGhost/Ghost.svg?sanitize=true&#34; alt=&#34;Latest release&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/TryGhost/Ghost/actions&#34;&gt; &lt;img src=&#34;https://github.com/TryGhost/Ghost/workflows/Test%20Suite/badge.svg?branch=main&#34; alt=&#34;Build status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/TryGhost/Ghost/contributors/&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/TryGhost/Ghost.svg?sanitize=true&#34; alt=&#34;Contributors&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Love open source? &lt;a href=&#34;https://careers.ghost.org/product-engineer-node-js/&#34;&gt;We&#39;re hiring&lt;/a&gt; Node.js engineers to work on Ghost full-time. &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ghost.org/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/353959/169805900-66be5b89-0859-4816-8da9-528ed7534704.png&#34; alt=&#34;Fiercely independent, professional publishing. Ghost is the most popular open source, headless Node.js CMS which already works with all the tools you know and love.&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://ghost.org/pricing/#gh-light-mode-only&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65487235/157849437-9b8fcc48-1920-4b26-a1e8-5806db0e6bb9.png&#34; alt=&#34;Ghost(Pro)&#34; width=&#34;165px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ghost.org/pricing/#gh-dark-mode-only&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65487235/157849438-79889b04-b7b6-4ba7-8de6-4c1e4b4e16a5.png&#34; alt=&#34;Ghost(Pro)&#34; width=&#34;165px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to get a production instance deployed is with our official &lt;strong&gt;&lt;a href=&#34;https://ghost.org/pricing/&#34;&gt;Ghost(Pro)&lt;/a&gt;&lt;/strong&gt; managed service. It takes about 2 minutes to launch a new site with worldwide CDN, backups, security and maintenance all done for you.&lt;/p&gt; &#xA;&lt;p&gt;For most people this ends up being the best value option cause of &lt;a href=&#34;https://ghost.org/docs/hosting/&#34;&gt;how much time it saves&lt;/a&gt; — and 100% of revenue goes to the Ghost Foundation; funding the maintenance and further development of the project itself. So you’ll be supporting open source software &lt;em&gt;and&lt;/em&gt; getting a great service!&lt;/p&gt; &#xA;&lt;p&gt;If you prefer to run on your own infrastructure, we also offer official 1-off installs and managed support and maintenance plans via &lt;strong&gt;&lt;a href=&#34;https://valet.ghost.org&#34;&gt;Ghost(Valet)&lt;/a&gt;&lt;/strong&gt; - which can save a substantial amount of developer time and resources.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Quickstart install&lt;/h1&gt; &#xA;&lt;p&gt;If you want to run your own instance of Ghost, in most cases the best way is to use our &lt;strong&gt;CLI tool&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install ghost-cli -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;Then, if installing locally add the &lt;code&gt;local&lt;/code&gt; flag to get up and running in under a minute - &lt;a href=&#34;https://ghost.org/docs/install/local/&#34;&gt;Local install docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ghost install local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;or on a server run the full install, including automatic SSL setup using LetsEncrypt - &lt;a href=&#34;https://ghost.org/docs/install/ubuntu/&#34;&gt;Production install docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ghost install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://ghost.org/docs/&#34;&gt;official documentation&lt;/a&gt; for more information about our &lt;a href=&#34;https://ghost.org/docs/hosting/&#34;&gt;recommended hosting stack&lt;/a&gt; &amp;amp; properly &lt;a href=&#34;https://ghost.org/docs/update/&#34;&gt;upgrading Ghost&lt;/a&gt;, plus everything you need to develop your own Ghost &lt;a href=&#34;https://ghost.org/docs/themes/&#34;&gt;themes&lt;/a&gt; or work with &lt;a href=&#34;https://ghost.org/docs/content-api/&#34;&gt;our API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors &amp;amp; advanced developers&lt;/h3&gt; &#xA;&lt;p&gt;For anyone wishing to contribute to Ghost or to hack/customize core files we recommend following our full development setup guides: &lt;a href=&#34;https://ghost.org/docs/contributing/&#34;&gt;Contributor guide&lt;/a&gt; • &lt;a href=&#34;https://ghost.org/docs/install/source/&#34;&gt;Developer setup&lt;/a&gt; • &lt;a href=&#34;https://ghost.org/docs/install/source/#ghost-admin&#34;&gt;Admin App dev guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Ghost sponsors&lt;/h1&gt; &#xA;&lt;p&gt;We&#39;d like to extend big thanks to our sponsors and partners who make Ghost possible. If you&#39;re interested in sponsoring Ghost and supporting the project, please check out our profile on &lt;a href=&#34;https://github.com/sponsors/TryGhost&#34;&gt;GitHub sponsors&lt;/a&gt; &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://m.do.co/c/9ff29836d717&#34;&gt;DigitalOcean&lt;/a&gt;&lt;/strong&gt; • &lt;strong&gt;&lt;a href=&#34;https://www.fastly.com/&#34;&gt;Fastly&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Getting help&lt;/h1&gt; &#xA;&lt;p&gt;You can find answers to a huge variety of questions, along with a large community of helpful developers over on the &lt;a href=&#34;https://forum.ghost.org/&#34;&gt;Ghost forum&lt;/a&gt; - replies are generally very quick. &lt;strong&gt;Ghost(Pro)&lt;/strong&gt; customers also have access to 24/7 email support.&lt;/p&gt; &#xA;&lt;p&gt;To stay up to date with all the latest news and product updates, make sure you &lt;a href=&#34;https://ghost.org/blog/&#34;&gt;subscribe to our blog&lt;/a&gt; — or you can always follow us &lt;a href=&#34;https://twitter.com/Ghost&#34;&gt;on Twitter&lt;/a&gt;, if you prefer your updates bite-sized and facetious. &lt;span&gt;🎷&lt;/span&gt;&lt;span&gt;🐢&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Copyright &amp;amp; license&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2013-2022 Ghost Foundation - Released under the &lt;a href=&#34;https://raw.githubusercontent.com/TryGhost/Ghost/main/LICENSE&#34;&gt;MIT license&lt;/a&gt;. Ghost and the Ghost Logo are trademarks of Ghost Foundation Ltd. Please see our &lt;a href=&#34;https://ghost.org/trademark/&#34;&gt;trademark policy&lt;/a&gt; for info on acceptable usage.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>beefproject/beef</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/beefproject/beef</id>
    <link href="https://github.com/beefproject/beef" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Browser Exploitation Framework Project&lt;/p&gt;&lt;hr&gt;&lt;p&gt;===============================================================================&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2006-2022 Wade Alcorn - wade@bindshell.net&#xA;Browser Exploitation Framework (BeEF) - http://beefproject.com&#xA;See the file &#39;doc/COPYING&#39; for copying permission&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;===============================================================================&lt;/p&gt; &#xA;&lt;h2&gt;What is BeEF?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;BeEF&lt;/strong&gt; is short for &lt;strong&gt;The Browser Exploitation Framework&lt;/strong&gt;. It is a penetration testing tool that focuses on the web browser.&lt;/p&gt; &#xA;&lt;p&gt;Amid growing concerns about web-borne attacks against clients, including mobile clients, BeEF allows the professional penetration tester to assess the actual security posture of a target environment by using client-side attack vectors. Unlike other security frameworks, BeEF looks past the hardened network perimeter and client system, and examines exploitability within the context of the one open door: the web browser. BeEF will hook one or more web browsers and use them as beachheads for launching directed command modules and further attacks against the system from within the browser context.&lt;/p&gt; &#xA;&lt;h2&gt;Get Involved&lt;/h2&gt; &#xA;&lt;p&gt;You can get in touch with the BeEF team. Just check out the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please, send us pull requests!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Web:&lt;/strong&gt; &lt;a href=&#34;https://beefproject.com/&#34;&gt;https://beefproject.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bugs:&lt;/strong&gt; &lt;a href=&#34;https://github.com/beefproject/beef/issues&#34;&gt;https://github.com/beefproject/beef/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Security Bugs:&lt;/strong&gt; &lt;a href=&#34;mailto:security@beefproject.com&#34;&gt;security@beefproject.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Twitter:&lt;/strong&gt; &lt;a href=&#34;https://twitter.com/beefproject&#34;&gt;@beefproject&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Operating System: Mac OSX 10.5.0 or higher / modern Linux. Note: Windows is not supported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ruby-lang.org&#34;&gt;Ruby&lt;/a&gt;: 2.7 or newer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sqlite.org&#34;&gt;SQLite&lt;/a&gt;: 3.x&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;Node.js&lt;/a&gt;: 10 or newer&lt;/li&gt; &#xA; &lt;li&gt;The gems listed in the Gemfile: &lt;a href=&#34;https://github.com/beefproject/beef/raw/master/Gemfile&#34;&gt;https://github.com/beefproject/beef/blob/master/Gemfile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Selenium is required on OSX: &lt;code&gt;brew install selenium-server-standalone&lt;/code&gt; (See &lt;a href=&#34;https://github.com/shvets/selenium&#34;&gt;https://github.com/shvets/selenium&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;The following is for the impatient.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;install&lt;/code&gt; script installs the required operating system packages and all the prerequisite Ruby gems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For full installation details, please refer to &lt;a href=&#34;https://github.com/beefproject/beef/raw/master/INSTALL.txt&#34;&gt;INSTALL.txt&lt;/a&gt; or the &lt;a href=&#34;https://github.com/beefproject/beef/wiki/Installation&#34;&gt;Installation&lt;/a&gt; page on the wiki.&lt;/p&gt; &#xA;&lt;p&gt;Upon successful installation, be sure to read the &lt;a href=&#34;https://github.com/beefproject/beef/wiki/Configuration&#34;&gt;Configuration&lt;/a&gt; page on the wiki for important details on configuring and securing BeEF.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beefproject/beef/wiki#user-guide&#34;&gt;User Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/beefproject/beef/wiki/FAQ&#34;&gt;Frequently Asked Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://beefproject.github.io/beef/index.html&#34;&gt;JSdocs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To get started, simply execute beef and follow the instructions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ./beef&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>sudheerj/reactjs-interview-questions</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/sudheerj/reactjs-interview-questions</id>
    <link href="https://github.com/sudheerj/reactjs-interview-questions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;List of top 500 ReactJS Interview Questions &amp; Answers....Coding exercise questions are coming soon!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Interview Questions &amp;amp; Answers&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Click &lt;span&gt;⭐&lt;/span&gt;if you like the project. Pull Request are highly appreciated. Follow me &lt;a href=&#34;https://twitter.com/SudheerJonna&#34;&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;div&gt;&#xA;  Learn to code and get hired with &#xA; &lt;a href=&#34;https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=reactjs-interview-questions&#34;&gt;Zero To Mastery:&lt;/a&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;This &lt;a href=&#34;https://links.zerotomastery.io/react_sudheer&#34;&gt;React course&lt;/a&gt; is good if you’re struggling to learn React beyond the basics&lt;/li&gt; &#xA;  &lt;li&gt;This &lt;a href=&#34;http://links.zerotomastery.io/mci_sudheer&#34;&gt;coding interview bootcamp&lt;/a&gt; is helpful if you’re serious about getting hired as a developer&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository is specific to ReactJS. Please check &lt;a href=&#34;https://github.com/sudheerj/javascript-interview-questions&#34;&gt;Javascript Interview questions&lt;/a&gt; for core javascript questions.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading PDF/Epub formats&lt;/h2&gt; &#xA;&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href=&#34;https://github.com/sudheerj/reactjs-interview-questions/actions&#34;&gt;actions tab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;No.&lt;/th&gt; &#xA;   &lt;th&gt;Questions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core React&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react&#34;&gt;What is React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-major-features-of-react&#34;&gt;What are the major features of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jsx&#34;&gt;What is JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-element-and-component&#34;&gt;What is the difference between Element and Component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-components-in-react&#34;&gt;How to create components in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-a-class-component-over-a-function-component&#34;&gt;When to use a Class Component over a Function Component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-pure-components&#34;&gt;What are Pure Components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-in-react&#34;&gt;What is state in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-props-in-react&#34;&gt;What are props in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-state-and-props&#34;&gt;What is the difference between state and props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-we-not-update-the-state-directly&#34;&gt;Why should we not update the state directly?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate&#34;&gt;What is the purpose of callback function as an argument of setState()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-html-and-react-event-handling&#34;&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-bind-methods-or-event-handlers-in-jsx-callbacks&#34;&gt;How to bind methods or event handlers in JSX callbacks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-a-parameter-to-an-event-handler-or-callback&#34;&gt;How to pass a parameter to an event handler or callback?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-synthetic-events-in-react&#34;&gt;What are synthetic events in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-inline-conditional-expressions&#34;&gt;What are inline conditional expressions?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements&#34;&gt;What is &#34;key&#34; prop and what is the benefit of using it in arrays of elements?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-refs&#34;&gt;What is the use of refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-refs&#34;&gt;How to create refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-forward-refs&#34;&gt;What are forward refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#which-is-preferred-option-with-in-callback-refs-and-finddomnode&#34;&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-string-refs-legacy&#34;&gt;Why are String Refs legacy?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-virtual-dom&#34;&gt;What is Virtual DOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-virtual-dom-works&#34;&gt;How Virtual DOM works?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-shadow-dom-and-virtual-dom&#34;&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-fiber&#34;&gt;What is React Fiber?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-goal-of-react-fiber&#34;&gt;What is the main goal of React Fiber?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-controlled-components&#34;&gt;What are controlled components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-uncontrolled-components&#34;&gt;What are uncontrolled components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;31&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-createelement-and-cloneelement&#34;&gt;What is the difference between createElement and cloneElement?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-lifting-state-up-in-react&#34;&gt;What is Lifting State Up in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;33&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-phases-of-component-lifecycle&#34;&gt;What are the different phases of component lifecycle?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;34&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-of-react&#34;&gt;What are the lifecycle methods of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;35&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-higher-order-components&#34;&gt;What are Higher-Order components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;36&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-props-proxy-for-hoc-component&#34;&gt;How to create props proxy for HOC component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;37&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-context&#34;&gt;What is context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-children-prop&#34;&gt;What is children prop?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;39&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-write-comments-in-react&#34;&gt;How to write comments in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-using-super-constructor-with-props-argument&#34;&gt;What is the purpose of using super constructor with props argument?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;41&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reconciliation&#34;&gt;What is reconciliation?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;42&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-state-with-a-dynamic-key-name&#34;&gt;How to set state with a dynamic key name?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-would-be-the-common-mistake-of-function-being-called-every-time-the-component-renders&#34;&gt;What would be the common mistake of function being called every time the component renders?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;44&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-lazy-function-supports-named-exports&#34;&gt;Is lazy function supports named exports?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-uses-classname-over-class-attribute&#34;&gt;Why React uses className over class attribute?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;46&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-fragments&#34;&gt;What are fragments?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;47&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-fragments-are-better-than-container-divs&#34;&gt;Why fragments are better than container divs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;48&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-portals-in-react&#34;&gt;What are portals in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateless-components&#34;&gt;What are stateless components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateful-components&#34;&gt;What are stateful components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;51&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-apply-validation-on-props-in-react&#34;&gt;How to apply validation on props in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;52&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react&#34;&gt;What are the advantages of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;53&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-of-react&#34;&gt;What are the limitations of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;54&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-error-boundaries-in-react-v16&#34;&gt;What are error boundaries in React v16&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;55&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-error-boundaries-handled-in-react-v15&#34;&gt;How error boundaries handled in React v15?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;56&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-recommended-ways-for-static-type-checking&#34;&gt;What are the recommended ways for static type checking?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;57&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-react-dom-package&#34;&gt;What is the use of react-dom package?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;58&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-render-method-of-react-dom&#34;&gt;What is the purpose of render method of react-dom?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;59&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reactdomserver&#34;&gt;What is ReactDOMServer?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;60&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-innerhtml-in-react&#34;&gt;How to use InnerHtml in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;61&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-styles-in-react&#34;&gt;How to use styles in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;62&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-events-are-different-in-react&#34;&gt;How events are different in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;63&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-setstate-in-constructor&#34;&gt;What will happen if you use setState in constructor?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-impact-of-indexes-as-keys&#34;&gt;What is the impact of indexes as keys?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;65&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-setstate-in-componentwillmount-method&#34;&gt;Is it good to use setState() in componentWillMount() method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;66&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-props-in-initial-state&#34;&gt;What will happen if you use props in initial state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;67&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-conditionally-render-components&#34;&gt;How do you conditionally render components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;68&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-be-careful-when-spreading-props-on-dom-elements&#34;&gt;Why we need to be careful when spreading props on DOM elements??&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;69&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-use-decorators-in-react&#34;&gt;How you use decorators in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;70&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-memoize-a-component&#34;&gt;How do you memoize a component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;71&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-implement-server-side-rendering-or-ssr&#34;&gt;How you implement Server-Side Rendering or SSR?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;72&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-enable-production-mode-in-react&#34;&gt;How to enable production mode in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;73&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-cra-and-its-benefits&#34;&gt;What is CRA and its benefits?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;74&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-lifecycle-methods-order-in-mounting&#34;&gt;What is the lifecycle methods order in mounting?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;75&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-going-to-be-deprecated-in-react-v16&#34;&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;76&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromprops-lifecycle-method&#34;&gt;What is the purpose of getDerivedStateFromProps() lifecycle method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;77&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getsnapshotbeforeupdate-lifecycle-method&#34;&gt;What is the purpose of getSnapshotBeforeUpdate() lifecycle method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;78&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-hooks-replace-render-props-and-higher-order-components&#34;&gt;Do Hooks replace render props and higher order components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;79&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-way-for-naming-components&#34;&gt;What is the recommended way for naming components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;80&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-ordering-of-methods-in-component-class&#34;&gt;What is the recommended ordering of methods in component class?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;81&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-switching-component&#34;&gt;What is a switching component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;82&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-pass-a-function-to-setstate&#34;&gt;Why we need to pass a function to setState()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;83&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-strict-mode-in-react&#34;&gt;What is strict mode in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;84&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-mixins&#34;&gt;What are React Mixins?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;85&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-ismounted-an-anti-pattern-and-what-is-the-proper-solution&#34;&gt;Why is isMounted() an anti-pattern and what is the proper solution?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;86&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-pointer-events-supported-in-react&#34;&gt;What are the Pointer Events supported in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;87&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-component-names-start-with-capital-letter&#34;&gt;Why should component names start with capital letter?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;88&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-custom-dom-attributes-supported-in-react-v16&#34;&gt;Are custom DOM attributes supported in React v16?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;89&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-constructor-and-getinitialstate&#34;&gt;What is the difference between constructor and getInitialState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;90&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-force-a-component-to-re-render-without-calling-setstate&#34;&gt;Can you force a component to re-render without calling setState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;91&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-super-and-superprops-in-react-using-es6-classes&#34;&gt;What is the difference between super() and super(props) in React using ES6 classes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;92&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-loop-inside-jsx&#34;&gt;How to loop inside JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;93&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-props-in-attribute-quotes&#34;&gt;How do you access props in attribute quotes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;94&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-proptype-array-with-shape&#34;&gt;What is React PropType array with shape?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;95&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-conditionally-apply-class-attributes&#34;&gt;How to conditionally apply class attributes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;96&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-reactdom&#34;&gt;What is the difference between React and ReactDOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;97&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-reactdom-is-separated-from-react&#34;&gt;Why ReactDOM is separated from React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;98&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-react-label-element&#34;&gt;How to use React label element?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;99&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-combine-multiple-inline-style-objects&#34;&gt;How to combine multiple inline style objects?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-re-render-the-view-when-the-browser-is-resized&#34;&gt;How to re-render the view when the browser is resized?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;101&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-setstate-and-replacestate-methods&#34;&gt;What is the difference between setState and replaceState methods?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;102&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-listen-to-state-changes&#34;&gt;How to listen to state changes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;103&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-approach-of-removing-an-array-element-in-react-state&#34;&gt;What is the recommended approach of removing an array element in react state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;104&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-rendering-html&#34;&gt;Is it possible to use React without rendering HTML?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;105&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pretty-print-json-with-react&#34;&gt;How to pretty print JSON with React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;106&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-cant-update-props-in-react&#34;&gt;Why you can&#39;t update props in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;107&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-focus-an-input-element-on-page-load&#34;&gt;How to focus an input element on page load?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;108&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-ways-of-updating-objects-in-state&#34;&gt;What are the possible ways of updating objects in state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;110&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-can-we-find-the-version-of-react-at-runtime-in-the-browser&#34;&gt;How can we find the version of React at runtime in the browser?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;111&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-approaches-to-include-polyfills-in-your-create-react-app&#34;&gt;What are the approaches to include polyfills in your create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;112&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-https-instead-of-http-in-create-react-app&#34;&gt;How to use https instead of http in create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;113&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-avoid-using-relative-path-imports-in-create-react-app&#34;&gt;How to avoid using relative path imports in create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;114&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-google-analytics-for-react-router&#34;&gt;How to add Google Analytics for react-router?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;115&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-update-a-component-every-second&#34;&gt;How to update a component every second?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;116&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-apply-vendor-prefixes-to-inline-styles-in-react&#34;&gt;How do you apply vendor prefixes to inline styles in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;117&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-import-and-export-components-using-react-and-es6&#34;&gt;How to import and export components using react and ES6?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;118&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-exceptions-on-react-component-naming&#34;&gt;What are the exceptions on React component naming?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;119&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-a-component-constructor-called-only-once&#34;&gt;Why is a component constructor called only once?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;120&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-define-constants-in-react&#34;&gt;How to define constants in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;121&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-programmatically-trigger-click-event-in-react&#34;&gt;How to programmatically trigger click event in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;122&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-asyncawait-in-plain-react&#34;&gt;Is it possible to use async/await in plain React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;123&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-common-folder-structures-for-react&#34;&gt;What are the common folder structures for React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;124&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-packages-for-animation&#34;&gt;What are the popular packages for animation?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;125&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-styles-modules&#34;&gt;What is the benefit of styles modules?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;126&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-react-specific-linters&#34;&gt;What are the popular React-specific linters?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;127&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-call-and-in-which-component-lifecycle-methods-should-i-make-an-ajax-call&#34;&gt;How to make AJAX call and In which component lifecycle methods should I make an AJAX call?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-render-props&#34;&gt;What are render props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Router&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;129&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-router&#34;&gt;What is React Router?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;130&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-router-is-different-from-history-library&#34;&gt;How React Router is different from history library?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;131&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-router-components-of-react-router-v4&#34;&gt;What are the &amp;lt;Router&amp;gt; components of React Router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;132&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-push-and-replace-methods-of-history&#34;&gt;What is the purpose of push and replace methods of history?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;133&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-programmatically-navigate-using-react-router-v4&#34;&gt;How do you programmatically navigate using React router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;134&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-query-parameters-in-react-router-v4&#34;&gt;How to get query parameters in React Router v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;135&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-get-router-may-have-only-one-child-element-warning&#34;&gt;Why you get &#34;Router may have only one child element&#34; warning?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;136&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-params-to-historypush-method-in-react-router-v4&#34;&gt;How to pass params to history.push method in React Router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;137&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-implement-default-or-notfound-page&#34;&gt;How to implement default or NotFound page?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;138&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-history-on-react-router-v4&#34;&gt;How to get history on React Router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;139&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-perform-automatic-redirect-after-login&#34;&gt;How to perform automatic redirect after login?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Internationalization&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;140&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-intl&#34;&gt;What is React-Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;141&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-react-intl&#34;&gt;What are the main features of React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;142&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-two-ways-of-formatting-in-react-intl&#34;&gt;What are the two ways of formatting in React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;143&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-formattedmessage-as-placeholder-using-react-intl&#34;&gt;How to use FormattedMessage as placeholder using React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;144&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-current-locale-with-react-intl&#34;&gt;How to access current locale with React Intl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;145&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-format-date-using-react-intl&#34;&gt;How to format date using React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Testing&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;146&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-shallow-renderer-in-react-testing&#34;&gt;What is Shallow Renderer in React testing?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;147&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-testrenderer-package-in-react&#34;&gt;What is TestRenderer package in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;148&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-reacttestutils-package&#34;&gt;What is the purpose of ReactTestUtils package?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;149&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jest&#34;&gt;What is Jest?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;150&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-jest-over-jasmine&#34;&gt;What are the advantages of Jest over Jasmine?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;151&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-a-simple-example-of-jest-test-case&#34;&gt;Give a simple example of Jest test case&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Redux&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;152&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flux&#34;&gt;What is Flux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;153&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux&#34;&gt;What is Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;154&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-core-principles-of-redux&#34;&gt;What are the core principles of Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;155&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-downsides-of-redux-compared-to-flux&#34;&gt;What are the downsides of Redux compared to Flux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;156&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-mapstatetoprops-and-mapdispatchtoprops&#34;&gt;What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;157&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-dispatch-an-action-in-reducer&#34;&gt;Can I dispatch an action in reducer?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;158&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-redux-store-outside-a-component&#34;&gt;How to access Redux store outside a component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;159&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-drawbacks-of-mvw-pattern&#34;&gt;What are the drawbacks of MVW pattern&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;160&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-there-any-similarities-between-redux-and-rxjs&#34;&gt;Are there any similarities between Redux and RxJS?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;161&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-dispatch-an-action-on-load&#34;&gt;How to dispatch an action on load?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;162&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-connect-from-react-redux&#34;&gt;How to use connect from React Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;163&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-reset-state-in-redux&#34;&gt;How to reset state in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;164&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#whats-the-purpose-of-at-symbol-in-the-redux-connect-decorator&#34;&gt;Whats the purpose of at symbol in the redux connect decorator?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;165&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-context-and-react-redux&#34;&gt;What is the difference between React context and React Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;166&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-redux-state-functions-called-reducers&#34;&gt;Why are Redux state functions called reducers?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;167&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-request-in-redux&#34;&gt;How to make AJAX request in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;168&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-keep-all-components-state-in-redux-store&#34;&gt;Should I keep all component&#39;s state in Redux store?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;169&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-way-to-access-redux-store&#34;&gt;What is the proper way to access Redux store?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;170&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-component-and-container-in-react-redux&#34;&gt;What is the difference between component and container in React Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;171&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-the-constants-in-redux&#34;&gt;What is the purpose of the constants in Redux? &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;172&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-ways-to-write-mapdispatchtoprops&#34;&gt;What are the different ways to write mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;173&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-the-ownprops-parameter-in-mapstatetoprops-and-mapdispatchtoprops&#34;&gt;What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;174&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-structure-redux-top-level-directories&#34;&gt;How to structure Redux top level directories?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;175&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-saga&#34;&gt;What is redux-saga?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;176&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-mental-model-of-redux-saga&#34;&gt;What is the mental model of redux-saga?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;177&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-call-and-put-in-redux-saga&#34;&gt;What are the differences between call and put in redux-saga&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;178&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-thunk&#34;&gt;What is Redux Thunk?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;179&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-saga-and-redux-thunk&#34;&gt;What are the differences between redux-saga and redux-thunk&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-devtools&#34;&gt;What is Redux DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;181&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-redux-devtools&#34;&gt;What are the features of Redux DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;182&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-redux-selectors-and-why-to-use-them&#34;&gt;What are Redux selectors and Why to use them?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;183&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-form&#34;&gt;What is Redux Form?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;184&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-redux-form&#34;&gt;What are the main features of Redux Form?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;185&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-multiple-middlewares-to-redux&#34;&gt;How to add multiple middlewares to Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;186&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-initial-state-in-redux&#34;&gt;How to set initial state in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;187&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-relay-is-different-from-redux&#34;&gt;How Relay is different from Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;188&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-an-action-in-redux&#34;&gt;What is an action in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;188&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-native-and-react&#34;&gt;What is the difference between React Native and React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;189&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-test-react-native-apps&#34;&gt;How to test React Native apps?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;190&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-do-logging-in-react-native&#34;&gt;How to do logging in React Native?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;191&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-your-react-native&#34;&gt;How to debug your React Native?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React supported libraries and Integration&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;192&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reselect-and-how-it-works&#34;&gt;What is reselect and how it works?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;193&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flow&#34;&gt;What is Flow?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;194&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-flow-and-proptypes&#34;&gt;What is the difference between Flow and PropTypes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;195&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-font-awesome-icons-in-react&#34;&gt;How to use font-awesome icons in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;196&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-dev-tools&#34;&gt;What is React Dev Tools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;197&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-devtools-not-loading-in-chrome-for-local-files&#34;&gt;Why is DevTools not loading in Chrome for local files?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;198&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-polymer-in-react&#34;&gt;How to use Polymer in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;199&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react-over-vuejs&#34;&gt;What are the advantages of React over Vue.js?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-angular&#34;&gt;What is the difference between React and Angular?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;201&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-tab-is-not-showing-up-in-devtools&#34;&gt;Why React tab is not showing up in DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;202&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-styled-components&#34;&gt;What are styled components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;203&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-styled-components&#34;&gt;Give an example of Styled Components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;204&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-relay&#34;&gt;What is Relay?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;205&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-typescript-in-create-react-app-application&#34;&gt;How to use TypeScript in create-react-app application?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;206&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-reselect-library&#34;&gt;What are the main features of reselect library?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;207&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-reselect-usage&#34;&gt;Give an example of reselect usage?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;209&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-the-statics-object-work-with-es6-classes-in-react&#34;&gt;Does the statics object work with ES6 classes in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;210&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-redux-only-be-used-with-react&#34;&gt;Can Redux only be used with React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;211&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-you-need-to-have-a-particular-build-tool-to-use-redux&#34;&gt;Do you need to have a particular build tool to use Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;212&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-redux-form-initialvalues-get-updated-from-state&#34;&gt;How Redux Form initialValues get updated from state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;213&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-proptypes-allow-different-types-for-one-prop&#34;&gt;How React PropTypes allow different type for one prop?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;214&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-import-an-svg-file-as-react-component&#34;&gt;Can I import an SVG file as react component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;215&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-inline-ref-callbacks-or-functions-not-recommended&#34;&gt;Why are inline ref callbacks or functions not recommended?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;216&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-render-hijacking-in-react&#34;&gt;What is render hijacking in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;217&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hoc-factory-implementations&#34;&gt;What are HOC factory implementations?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;218&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-numbers-to-react-component&#34;&gt;How to pass numbers to React component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;219&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-keep-all-my-state-into-redux-should-i-ever-use-react-internal-state&#34;&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;220&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-registerserviceworker-in-react&#34;&gt;What is the purpose of registerServiceWorker in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;221&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-memo-function&#34;&gt;What is React memo function?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;222&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-lazy-function&#34;&gt;What is React lazy function?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;223&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-unnecessary-updates-using-setstate&#34;&gt;How to prevent unnecessary updates using setState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;224&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-render-array-strings-and-numbers-in-react-16-version&#34;&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;225&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-class-field-declarations-syntax-in-react-classes&#34;&gt;How to use class field declarations syntax in React classes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;226&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hooks&#34;&gt;What are hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;227&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-rules-need-to-be-followed-for-hooks&#34;&gt;What rules need to be followed for hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;228&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-ensure-hooks-followed-the-rules-in-your-project&#34;&gt;How to ensure hooks followed the rules in your project?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;229&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-flux-and-redux&#34;&gt;What are the differences between Flux and Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;230&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-react-router-v4&#34;&gt;What are the benefits of React Router V4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;231&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-describe-about-componentdidcatch-lifecycle-method-signature&#34;&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;232&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#in-which-scenarios-error-boundaries-do-not-catch-errors&#34;&gt;In which scenarios error boundaries do not catch errors?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;233&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-need-error-boundaries-for-event-handlers&#34;&gt;Why do you not need error boundaries for event handlers?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;234&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-try-catch-block-and-error-boundaries&#34;&gt;What is the difference between try catch block and error boundaries?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;235&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-behavior-of-uncaught-errors-in-react-16&#34;&gt;What is the behavior of uncaught errors in react 16?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;236&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-placement-for-error-boundaries&#34;&gt;What is the proper placement for error boundaries?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;237&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-component-stack-trace-from-error-boundary&#34;&gt;What is the benefit of component stack trace from error boundary?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;238&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-required-method-to-be-defined-for-a-class-component&#34;&gt;What is the required method to be defined for a class component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;239&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-return-types-of-render-method&#34;&gt;What are the possible return types of render method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;240&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-purpose-of-constructor&#34;&gt;What is the main purpose of constructor?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;241&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-mandatory-to-define-constructor-for-react-component&#34;&gt;Is it mandatory to define constructor for React component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;242&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-default-props&#34;&gt;What are default props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;243&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-not-call-setstate-in-componentwillunmount&#34;&gt;Why should not call setState in componentWillUnmount?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;244&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromerror&#34;&gt;What is the purpose of getDerivedStateFromError?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;245&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-methods-order-when-component-re-rendered&#34;&gt;What is the methods order when component re-rendered?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;246&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-methods-invoked-during-error-handling&#34;&gt;What are the methods invoked during error handling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;247&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-displayname-class-property&#34;&gt;What is the purpose of displayName class property?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;248&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-browser-support-for-react-applications&#34;&gt;What is the browser support for react applications?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;249&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-unmountcomponentatnode-method&#34;&gt;What is the purpose of unmountComponentAtNode method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;250&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-code-splitting&#34;&gt;What is code-splitting?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;251&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-strict-mode&#34;&gt;What is the benefit of strict mode?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;252&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-keyed-fragments&#34;&gt;What are Keyed Fragments?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;253&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-react-support-all-html-attributes&#34;&gt;Does React support all HTML attributes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;254&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-with-hocs&#34;&gt;What are the limitations with HOCs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;255&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-forwardrefs-in-devtools&#34;&gt;How to debug forwardRefs in DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;256&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-component-props-defaults-to-true&#34;&gt;When component props defaults to true?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;257&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-nextjs-and-major-features-of-it&#34;&gt;What is NextJS and major features of it?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;258&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-an-event-handler-to-a-component&#34;&gt;How do you pass an event handler to a component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;259&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-arrow-functions-in-render-methods&#34;&gt;Is it good to use arrow functions in render methods?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;260&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-a-function-from-being-called-multiple-times&#34;&gt;How to prevent a function from being called multiple times?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;261&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-jsx-prevents-injection-attacks&#34;&gt;How JSX prevents Injection Attacks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;262&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-rendered-elements&#34;&gt;How do you update rendered elements?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;263&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-props-are-read-only&#34;&gt;How do you say that props are read only?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;264&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-state-updates-are-merged&#34;&gt;How do you say that state updates are merged?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;265&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-arguments-to-an-event-handler&#34;&gt;How do you pass arguments to an event handler?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;266&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-component-from-rendering&#34;&gt;How to prevent component from rendering?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;267&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-conditions-to-safely-use-the-index-as-a-key&#34;&gt;What are the conditions to safely use the index as a key?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;268&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-keys-should-be-globally-unique&#34;&gt;Is it keys should be globally unique?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;269&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-popular-choice-for-form-handling&#34;&gt;What is the popular choice for form handling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;270&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-formik-over-redux-form-library&#34;&gt;What are the advantages of formik over redux form library?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;271&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-required-to-use-inheritance&#34;&gt;Why do you not required to use inheritance?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;272&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-web-components-in-react-application&#34;&gt;Can I use web components in react application?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;273&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-dynamic-import&#34;&gt;What is dynamic import?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;274&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-loadable-components&#34;&gt;What are loadable components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;275&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-suspense-component&#34;&gt;What is suspense component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;276&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-route-based-code-splitting&#34;&gt;What is route based code splitting?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;277&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-on-how-to-use-context&#34;&gt;Give an example on How to use context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;278&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-default-value-in-context&#34;&gt;What is the purpose of default value in context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;279&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-use-contexttype&#34;&gt;How do you use contextType?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;280&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-consumer&#34;&gt;What is a consumer?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;281&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-solve-performance-corner-cases-while-using-context&#34;&gt;How do you solve performance corner cases while using context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;282&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-forward-ref-in-hocs&#34;&gt;What is the purpose of forward ref in HOCs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;283&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-ref-argument-available-for-all-functions-or-class-components&#34;&gt;Is it ref argument available for all functions or class components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;284&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-need-additional-care-for-component-libraries-while-using-forward-refs&#34;&gt;Why do you need additional care for component libraries while using forward refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;285&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-react-class-components-without-es6&#34;&gt;How to create react class components without ES6?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;286&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-jsx&#34;&gt;Is it possible to use react without JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;287&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-diffing-algorithm&#34;&gt;What is diffing algorithm?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;288&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-covered-by-diffing-algorithm&#34;&gt;What are the rules covered by diffing algorithm?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;289&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-do-you-need-to-use-refs&#34;&gt;When do you need to use refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;290&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-prop-must-be-named-as-render-for-render-props&#34;&gt;Is it prop must be named as render for render props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;291&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-problems-of-using-render-props-with-pure-components&#34;&gt;What are the problems of using render props with pure components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;292&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-create-hoc-using-render-props&#34;&gt;How do you create HOC using render props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;293&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-windowing-technique&#34;&gt;What is windowing technique?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;294&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-print-falsy-values-in-jsx&#34;&gt;How do you print falsy values in JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;295&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-typical-use-case-of-portals&#34;&gt;What is the typical use case of portals?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;296&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-set-default-value-for-uncontrolled-component&#34;&gt;How do you set default value for uncontrolled component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;297&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-your-favorite-react-stack&#34;&gt;What is your favorite React stack?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;298&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-real-dom-and-virtual-dom&#34;&gt;What is the difference between Real DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;299&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-bootstrap-to-a-react-application&#34;&gt;How to add Bootstrap to a react application?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;300&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-list-down-top-websites-or-applications-using-react-as-front-end-framework&#34;&gt;Can you list down top websites or applications using react as front end framework?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;301&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-recommended-to-use-css-in-js-technique-in-react&#34;&gt;Is it recommended to use CSS In JS technique in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;302&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-rewrite-all-my-class-components-with-hooks&#34;&gt;Do I need to rewrite all my class components with hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;303&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-fetch-data-with-react-hooks&#34;&gt;How to fetch data with React Hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;304&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-hooks-cover-all-use-cases-for-classes&#34;&gt;Is Hooks cover all use cases for classes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;305&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-stable-release-for-hooks-support&#34;&gt;What is the stable release for hooks support?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;306&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-we-use-array-destructuring-square-brackets-notation-in-usestate&#34;&gt;Why do we use array destructuring (square brackets notation) in useState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;307&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-sources-used-for-introducing-hooks&#34;&gt;What are the sources used for introducing hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;308&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-imperative-api-of-web-components&#34;&gt;How do you access imperative API of web components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;309&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-formik&#34;&gt;What is formik?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;310&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-typical-middleware-choices-for-handling-asynchronous-calls-in-redux&#34;&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;311&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-browsers-understand-jsx-code&#34;&gt;Do browsers understand JSX code?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;312&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#describe-about-data-flow-in-react&#34;&gt;Describe about data flow in react?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;313&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-scripts&#34;&gt;What is react scripts?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;314&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-create-react-app&#34;&gt;What are the features of create react app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;315&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-rendertonodestream-method&#34;&gt;What is the purpose of renderToNodeStream method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;316&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-mobx&#34;&gt;What is MobX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;317&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-and-mobx&#34;&gt;What are the differences between Redux and MobX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;318&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-learn-es6-before-learning-reactjs&#34;&gt;Should I learn ES6 before learning ReactJS?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;319&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-concurrent-rendering&#34;&gt;What is Concurrent Rendering?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;320&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-async-mode-and-concurrent-mode&#34;&gt;What is the difference between async mode and concurrent mode?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;321&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-javascript-urls-in-react169&#34;&gt;Can I use javascript urls in react16.9?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;322&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-eslint-plugin-for-hooks&#34;&gt;What is the purpose of eslint plugin for hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;323&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-imperative-and-declarative-in-react&#34;&gt;What is the difference between Imperative and Declarative in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;324&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-using-typescript-with-reactjs&#34;&gt;What are the benefits of using typescript with reactjs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;325&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-make-sure-that-user-remains-authenticated-on-page-refresh-while-using-context-api-state-management&#34;&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;326&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-new-jsx-transform&#34;&gt;What are the benefits of new JSX transform?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;327&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-new-jsx-transform-different-from-old-transform&#34;&gt;How does new JSX transform different from old transform?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;328&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-get-redux-scaffolding-using-create-react-app&#34;&gt;How do you get redux scaffolding using create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;329&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-server-components&#34;&gt;What are React Server components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;330&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-prop-drilling&#34;&gt;What is prop drilling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;331&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-mutation-and-how-to-prevent-it&#34;&gt;What is state mutation and how to prevent it?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;332&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-usestate-and-useref-hook&#34;&gt;What is the difference between useState and useRef hook?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Core React&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React?&lt;/h3&gt; &lt;p&gt;React is an &lt;strong&gt;open-source front-end JavaScript library&lt;/strong&gt; that is used for building user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps. React was created by &lt;a href=&#34;https://github.com/jordwalke&#34;&gt;Jordan Walke&lt;/a&gt;, a software engineer working for Facebook. React was first deployed on Facebook&#39;s News Feed in 2011 and on Instagram in 2012.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the major features of React?&lt;/h3&gt; &lt;p&gt;The major features of React are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It uses &lt;strong&gt;VirtualDOM&lt;/strong&gt; instead of RealDOM considering that RealDOM manipulations are expensive.&lt;/li&gt; &#xA;   &lt;li&gt;Supports &lt;strong&gt;server-side rendering&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Follows &lt;strong&gt;Unidirectional&lt;/strong&gt; data flow or data binding.&lt;/li&gt; &#xA;   &lt;li&gt;Uses &lt;strong&gt;reusable/composable&lt;/strong&gt; UI components to develop the view.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is JSX?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;JSX&lt;/em&gt; is a XML-like syntax extension to ECMAScript (the acronym stands for &lt;em&gt;JavaScript XML&lt;/em&gt;). Basically it just provides syntactic sugar for the &lt;code&gt;React.createElement()&lt;/code&gt; function, giving us expressiveness of JavaScript along with HTML like template syntax.&lt;/p&gt; &lt;p&gt;In the example below text inside &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is returned as JavaScript function to the render function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class App extends React.Component {&#xA;  render() {&#xA;    return(&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;h1&amp;gt;{&#39;Welcome to React world!&#39;}&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Element and Component?&lt;/h3&gt; &lt;p&gt;An &lt;em&gt;Element&lt;/em&gt; is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. &lt;em&gt;Elements&lt;/em&gt; can contain other &lt;em&gt;Elements&lt;/em&gt; in their props. Creating a React element is cheap. Once an element is created, it is never mutated.&lt;/p&gt; &lt;p&gt;The object representation of React Element would be as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const element = React.createElement(&#xA;  &#39;div&#39;,&#xA;  {id: &#39;login-btn&#39;},&#xA;  &#39;Login&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above &lt;code&gt;React.createElement()&lt;/code&gt; function returns an object:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;  type: &#39;div&#39;,&#xA;  props: {&#xA;    children: &#39;Login&#39;,&#xA;    id: &#39;login-btn&#39;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And finally it renders to the DOM using &lt;code&gt;ReactDOM.render()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&#39;login-btn&#39;&amp;gt;Login&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas a &lt;strong&gt;component&lt;/strong&gt; can be declared in several different ways. It can be a class with a &lt;code&gt;render()&lt;/code&gt; method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Button = ({ onLogin }) =&amp;gt;&#xA;  &amp;lt;div id={&#39;login-btn&#39;} onClick={onLogin}&amp;gt;Login&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then JSX gets transpiled to a &lt;code&gt;React.createElement()&lt;/code&gt; function tree:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Button = ({ onLogin }) =&amp;gt; React.createElement(&#xA;  &#39;div&#39;,&#xA;  { id: &#39;login-btn&#39;, onClick: onLogin },&#xA;  &#39;Login&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create components in React?&lt;/h3&gt; &lt;p&gt;There are two possible ways to create a component.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function Components:&lt;/strong&gt; This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the first parameter and return React elements:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Greeting({ message }) {&#xA;  return &amp;lt;h1&amp;gt;{`Hello, ${message}`}&amp;lt;/h1&amp;gt;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Class Components:&lt;/strong&gt; You can also use ES6 class to define a component. The above function component can be written as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class Greeting extends React.Component {&#xA;  render() {&#xA;    return &amp;lt;h1&amp;gt;{`Hello, ${this.props.message}`}&amp;lt;/h1&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;When to use a Class Component over a Function Component?&lt;/h3&gt; &lt;p&gt;If the component needs &lt;em&gt;state or lifecycle methods&lt;/em&gt; then use class component otherwise use function component. &lt;em&gt;However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component.&lt;/em&gt; *So, it is always recommended to use Function components, unless you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries *&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Pure Components?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/em&gt; is exactly the same as &lt;em&gt;&lt;code&gt;React.Component&lt;/code&gt;&lt;/em&gt; except that it handles the &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; method for you. When props or state changes, &lt;em&gt;PureComponent&lt;/em&gt; will do a shallow comparison on both props and state. &lt;em&gt;Component&lt;/em&gt; on the other hand won&#39;t compare current props and state to next out of the box. Thus, the component will re-render by default whenever &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is called.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is state in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;State&lt;/em&gt; of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.&lt;/p&gt; &lt;p&gt;Let&#39;s create a user component with message state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class User extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    this.state = {&#xA;      message: &#39;Welcome to React world&#39;&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/state.jpg&#34; alt=&#34;state&#34;&gt;&lt;/p&gt; &lt;p&gt;State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are props in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Props&lt;/em&gt; are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.&lt;/p&gt; &lt;p&gt;The primary purpose of props in React is to provide following component functionality:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Pass custom data to your component.&lt;/li&gt; &#xA;   &lt;li&gt;Trigger state changes.&lt;/li&gt; &#xA;   &lt;li&gt;Use via &lt;code&gt;this.props.reactProp&lt;/code&gt; inside component&#39;s &lt;code&gt;render()&lt;/code&gt; method.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;For example, let us create an element with &lt;code&gt;reactProp&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Element reactProp={&#39;1&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This &lt;code&gt;reactProp&lt;/code&gt; (or whatever you came up with) name then becomes a property attached to React&#39;s native props object which originally already exists on all components created using React library.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;props.reactProp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between state and props?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;props&lt;/em&gt; and &lt;em&gt;state&lt;/em&gt; are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why should we not update the state directly?&lt;/h3&gt; &lt;p&gt;If you try to update the state directly then it won&#39;t re-render the component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//Wrong&#xA;this.state.message = &#39;Hello world&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead use &lt;code&gt;setState()&lt;/code&gt; method. It schedules an update to a component&#39;s state object. When state changes, the component responds by re-rendering.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//Correct&#xA;this.setState({ message: &#39;Hello World&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can directly assign to the state object either in &lt;em&gt;constructor&lt;/em&gt; or using latest javascript&#39;s class field declaration syntax.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;12&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;The callback function is invoked when setState finished and the component gets rendered. Since &lt;code&gt;setState()&lt;/code&gt; is &lt;strong&gt;asynchronous&lt;/strong&gt; the callback function is used for any post action.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended to use lifecycle method rather than this callback function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;setState({ name: &#39;John&#39; }, () =&amp;gt; console.log(&#39;The name has updated and component re-rendered&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;13&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; &lt;p&gt;Below are some of the main differences between HTML and React event handling,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;In HTML, the event name usually represents in &lt;em&gt;lowercase&lt;/em&gt; as a convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button onclick=&#39;activateLasers()&#39;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React it follows &lt;em&gt;camelCase&lt;/em&gt; convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={activateLasers}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;In HTML, you can return &lt;code&gt;false&lt;/code&gt; to prevent default behavior:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#39;#&#39; onclick=&#39;console.log(&#34;The link was clicked.&#34;); return false;&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React you must call &lt;code&gt;preventDefault()&lt;/code&gt; explicitly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function handleClick(event) {&#xA;  event.preventDefault()&#xA;  console.log(&#39;The link was clicked.&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;In HTML, you need to invoke the function by appending &lt;code&gt;()&lt;/code&gt; Whereas in react you should not append &lt;code&gt;()&lt;/code&gt; with the function name. (refer &#34;activateLasers&#34; function in the first point for example)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;14&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to bind methods or event handlers in JSX callbacks?&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to achieve this:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Binding in Constructor:&lt;/strong&gt; In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Foo extends Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.handleClick = this.handleClick.bind(this);&#xA;  }&#xA;  handleClick() {&#xA;    console.log(&#39;Click happened&#39;);&#xA;  }&#xA;  render() {&#xA;    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;;&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public class fields syntax:&lt;/strong&gt; If you don&#39;t like to use bind approach then &lt;em&gt;public class fields syntax&lt;/em&gt; can be used to correctly bind callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;handleClick = () =&amp;gt; {&#xA;  console.log(&#39;this is:&#39;, this)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;&#xA;  {&#39;Click me&#39;}&#xA;&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arrow functions in callbacks:&lt;/strong&gt; You can use &lt;em&gt;arrow functions&lt;/em&gt; directly in the callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;handleClick() {&#xA;    console.log(&#39;Click happened&#39;);&#xA;}&#xA;render() {&#xA;    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with &lt;code&gt;.bind()&lt;/code&gt; or &lt;em&gt;public class fields syntax&lt;/em&gt; approach considering performance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;15&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pass a parameter to an event handler or callback?&lt;/h3&gt; &lt;p&gt;You can use an &lt;em&gt;arrow function&lt;/em&gt; to wrap around an &lt;em&gt;event handler&lt;/em&gt; and pass parameters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is an equivalent to calling &lt;code&gt;.bind&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={this.handleClick(id)} /&amp;gt;&#xA;handleClick = (id) =&amp;gt; () =&amp;gt; {&#xA;    console.log(&#34;Hello, your ticket number is&#34;, id)&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;16&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are synthetic events in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt; is a cross-browser wrapper around the browser&#39;s native event. Its API is same as the browser&#39;s native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;17&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; &lt;p&gt;You can use either &lt;em&gt;if statements&lt;/em&gt; or &lt;em&gt;ternary expressions&lt;/em&gt; which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;&#xA;{&#xA;    messages.length &amp;gt; 0 &amp;amp;&amp;amp; !isLogin?&#xA;      &amp;lt;h2&amp;gt;&#xA;          You have {messages.length} unread messages.&#xA;      &amp;lt;/h2&amp;gt;&#xA;      :&#xA;      &amp;lt;h2&amp;gt;&#xA;          You don&#39;t have unread messages.&#xA;      &amp;lt;/h2&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;18&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is &#34;key&#34; prop and what is the benefit of using it in arrays of elements?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;key&lt;/code&gt; is a special string attribute you &lt;strong&gt;should&lt;/strong&gt; include when creating arrays of elements. &lt;em&gt;Key&lt;/em&gt; prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt; &lt;p&gt;Most often we use ID from our data as &lt;em&gt;key&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((todo) =&amp;gt;&#xA;  &amp;lt;li key={todo.id}&amp;gt;&#xA;    {todo.text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you don&#39;t have stable IDs for rendered items, you may use the item &lt;em&gt;index&lt;/em&gt; as a &lt;em&gt;key&lt;/em&gt; as a last resort:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((todo, index) =&amp;gt;&#xA;  &amp;lt;li key={index}&amp;gt;&#xA;    {todo.text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Using &lt;em&gt;indexes&lt;/em&gt; for &lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;not recommended&lt;/strong&gt; if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt; &#xA;   &lt;li&gt;If you extract list item as separate component then apply &lt;em&gt;keys&lt;/em&gt; on list component instead of &lt;code&gt;li&lt;/code&gt; tag.&lt;/li&gt; &#xA;   &lt;li&gt;There will be a warning message in the console if the &lt;code&gt;key&lt;/code&gt; prop is not present on list items.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;19&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the use of refs?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;ref&lt;/em&gt; is used to return a reference to the element. They &lt;em&gt;should be avoided&lt;/em&gt; in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;20&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create refs?&lt;/h3&gt; &lt;p&gt;There are two approaches&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;This is a recently added approach. &lt;em&gt;Refs&lt;/em&gt; are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use &lt;em&gt;refs&lt;/em&gt; throughout the component, just assign the &lt;em&gt;ref&lt;/em&gt; to the instance property within constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.myRef = React.createRef()&#xA;  }&#xA;  render() {&#xA;    return &amp;lt;div ref={this.myRef} /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can also use ref callbacks approach regardless of React version. For example, the search bar component&#39;s input element is accessed as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class SearchBar extends Component {&#xA;   constructor(props) {&#xA;      super(props);&#xA;      this.txtSearch = null;&#xA;      this.state = { term: &#39;&#39; };&#xA;      this.setInputSearchRef = e =&amp;gt; {&#xA;         this.txtSearch = e;&#xA;      }&#xA;   }&#xA;   onInputChange(event) {&#xA;      this.setState({ term: this.txtSearch.value });&#xA;   }&#xA;   render() {&#xA;      return (&#xA;         &amp;lt;input&#xA;            value={this.state.term}&#xA;            onChange={this.onInputChange.bind(this)}&#xA;            ref={this.setInputSearchRef} /&amp;gt;&#xA;      );&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;You can also use &lt;em&gt;refs&lt;/em&gt; in function components using &lt;strong&gt;closures&lt;/strong&gt;. &lt;strong&gt;Note&lt;/strong&gt;: You can also use inline ref callbacks even though it is not a recommended approach.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;21&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are forward refs?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Ref forwarding&lt;/em&gt; is a feature that lets some components take a &lt;em&gt;ref&lt;/em&gt; they receive, and pass it further down to a child.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const ButtonElement = React.forwardRef((props, ref) =&amp;gt; (&#xA;  &amp;lt;button ref={ref} className=&#34;CustomButton&#34;&amp;gt;&#xA;    {props.children}&#xA;  &amp;lt;/button&amp;gt;&#xA;));&#xA;&#xA;// Create ref to the DOM button:&#xA;const ref = React.createRef();&#xA;&amp;lt;ButtonElement ref={ref}&amp;gt;{&#39;Forward Ref&#39;}&amp;lt;/ButtonElement&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;22&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/h3&gt; &lt;p&gt;It is preferred to use &lt;em&gt;callback refs&lt;/em&gt; over &lt;code&gt;findDOMNode()&lt;/code&gt; API. Because &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;legacy&lt;/strong&gt; approach of using &lt;code&gt;findDOMNode&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends Component {&#xA;  componentDidMount() {&#xA;    findDOMNode(this).scrollIntoView()&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recommended approach is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends Component {&#xA;  constructor(props){&#xA;    super(props);&#xA;    this.node = createRef();&#xA;  }&#xA;  componentDidMount() {&#xA;    this.node.current.scrollIntoView();&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div ref={this.node} /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;23&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are String Refs legacy?&lt;/h3&gt; &lt;p&gt;If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;ref={&#39;textInput&#39;}&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because &lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were &lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;They &lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/li&gt; &#xA;   &lt;li&gt;They are &lt;em&gt;not composable&lt;/em&gt; — if a library puts a ref on the passed child, the user can&#39;t put another ref on it. Callback refs are perfectly composable.&lt;/li&gt; &#xA;   &lt;li&gt;They &lt;em&gt;don&#39;t work with static analysis&lt;/em&gt; like Flow. Flow can&#39;t guess the magic that framework does to make the string ref appear on &lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/li&gt; &#xA;   &lt;li&gt;It doesn&#39;t work as most people would expect with the &#34;render callback&#34; pattern (e.g. &#xA;    &lt;datagrid renderRow=&#34;{this.renderRow}&#34; /&gt;) &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends Component {&#xA;  renderRow = (index) =&amp;gt; {&#xA;    // This won&#39;t work. Ref will get attached to DataTable rather than MyComponent:&#xA;    return &amp;lt;input ref={&#39;input-&#39; + index} /&amp;gt;;&#xA;&#xA;    // This would work though! Callback refs are awesome.&#xA;    return &amp;lt;input ref={input =&amp;gt; this[&#39;input-&#39; + index] = input} /&amp;gt;;&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;DataTable data={this.props.data} renderRow={this.renderRow} /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;24&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; (VDOM) is an in-memory representation of &lt;em&gt;Real DOM&lt;/em&gt;. The representation of a UI is kept in memory and synced with the &#34;real&#34; DOM. It&#39;s a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;25&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How Virtual DOM works?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; works in three simple steps.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom1.png&#34; alt=&#34;vdom&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Then the difference between the previous DOM representation and the new one is calculated.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom2.png&#34; alt=&#34;vdom2&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Once the calculations are done, the real DOM will be updated with only the things that have actually changed.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom3.png&#34; alt=&#34;vdom3&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;26&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Shadow DOM&lt;/em&gt; is a browser technology designed primarily for scoping variables and CSS in &lt;em&gt;web components&lt;/em&gt;. The &lt;em&gt;Virtual DOM&lt;/em&gt; is a concept implemented by libraries in JavaScript on top of browser APIs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;27&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Fiber?&lt;/h3&gt; &lt;p&gt;Fiber is the new &lt;em&gt;reconciliation&lt;/em&gt; engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;28&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the main goal of React Fiber?&lt;/h3&gt; &lt;p&gt;The goal of &lt;em&gt;React Fiber&lt;/em&gt; is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is &lt;strong&gt;incremental rendering&lt;/strong&gt;: the ability to split rendering work into chunks and spread it out over multiple frames.&lt;/p&gt; &lt;p&gt;&lt;em&gt;from documentation&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Its main goals are:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Ability to split interruptible work in chunks.&lt;/li&gt; &#xA;   &lt;li&gt;Ability to prioritize, rebase and reuse work in progress.&lt;/li&gt; &#xA;   &lt;li&gt;Ability to yield back and forth between parents and children to support layout in React.&lt;/li&gt; &#xA;   &lt;li&gt;Ability to return multiple elements from render().&lt;/li&gt; &#xA;   &lt;li&gt;Better support for error boundaries.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;29&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are controlled components?&lt;/h3&gt; &lt;p&gt;A component that controls the input elements within the forms on subsequent user input is called &lt;strong&gt;Controlled Component&lt;/strong&gt;, i.e, every state mutation will have an associated handler function.&lt;/p&gt; &lt;p&gt;For example, to write all the names in uppercase letters, we use handleChange as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;handleChange(event) {&#xA;  this.setState({value: event.target.value.toUpperCase()})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;30&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are uncontrolled components?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Uncontrolled Components&lt;/strong&gt; are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt; &lt;p&gt;In the below UserProfile component, the &lt;code&gt;name&lt;/code&gt; input is accessed using ref.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class UserProfile extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.handleSubmit = this.handleSubmit.bind(this)&#xA;    this.input = React.createRef()&#xA;  }&#xA;&#xA;  handleSubmit(event) {&#xA;    alert(&#39;A name was submitted: &#39; + this.input.current.value)&#xA;    event.preventDefault()&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;        &amp;lt;label&amp;gt;&#xA;          {&#39;Name:&#39;}&#xA;          &amp;lt;input type=&#34;text&#34; ref={this.input} /&amp;gt;&#xA;        &amp;lt;/label&amp;gt;&#xA;        &amp;lt;input type=&#34;submit&#34; value=&#34;Submit&#34; /&amp;gt;&#xA;      &amp;lt;/form&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In most cases, it&#39;s recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;31&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between createElement and cloneElement?&lt;/h3&gt; &lt;p&gt;JSX elements will be transpiled to &lt;code&gt;React.createElement()&lt;/code&gt; functions to create React elements which are going to be used for the object representation of UI. Whereas &lt;code&gt;cloneElement&lt;/code&gt; is used to clone an element and pass it new props.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;32&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Lifting State Up in React?&lt;/h3&gt; &lt;p&gt;When several components need to share the same changing data then it is recommended to &lt;em&gt;lift the shared state up&lt;/em&gt; to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;33&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the different phases of component lifecycle?&lt;/h3&gt; &lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt; The component is ready to mount in the browser DOM. This phase covers initialization from &lt;code&gt;constructor()&lt;/code&gt;, &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, and &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Updating:&lt;/strong&gt; In this phase, the component gets updated in two ways, sending the new props and updating the state either from &lt;code&gt;setState()&lt;/code&gt; or &lt;code&gt;forceUpdate()&lt;/code&gt;. This phase covers &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unmounting:&lt;/strong&gt; In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes &lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;It&#39;s worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Render&lt;/strong&gt; The component will render without any side effects. This applies to Pure components and in this phase, React can pause, abort, or restart the render.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pre-commit&lt;/strong&gt; Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit&lt;/strong&gt; React works with the DOM and executes the final lifecycles respectively &lt;code&gt;componentDidMount()&lt;/code&gt; for mounting, &lt;code&gt;componentDidUpdate()&lt;/code&gt; for updating, and &lt;code&gt;componentWillUnmount()&lt;/code&gt; for unmounting.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;React 16.3+ Phases (or an &lt;a href=&#34;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&#34;&gt;interactive version&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases16.4.png&#34; alt=&#34;phases 16.4+&#34;&gt;&lt;/p&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases.png&#34; alt=&#34;phases 16.2&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;34&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the lifecycle methods of React?&lt;/h3&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillMount:&lt;/strong&gt; Executed before rendering and is used for App level configuration in your root component.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillReceiveProps:&lt;/strong&gt; Executed when particular prop updates to trigger state transitions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillUpdate:&lt;/strong&gt; Executed before re-rendering the component when there are props &amp;amp; state changes confirmed by &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; which returns true.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillUnmount:&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;React 16.3+&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;getDerivedStateFromProps:&lt;/strong&gt; Invoked right before calling &lt;code&gt;render()&lt;/code&gt; and is invoked on &lt;em&gt;every&lt;/em&gt; render. This exists for rare use cases where you need a derived state. Worth reading &lt;a href=&#34;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&#34;&gt;if you need derived state&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default, it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after the state or props are updated, you can return a false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives a new prop.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;getSnapshotBeforeUpdate:&lt;/strong&gt; Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into &lt;code&gt;componentDidUpdate()&lt;/code&gt;. This is useful to capture information from the DOM i.e. scroll position.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes. This will not fire if &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillUnmount&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;35&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Higher-Order Components?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;higher-order component&lt;/em&gt; (&lt;em&gt;HOC&lt;/em&gt;) is a function that takes a component and returns a new component. Basically, it&#39;s a pattern that is derived from React&#39;s compositional nature.&lt;/p&gt; &lt;p&gt;We call them &lt;strong&gt;pure components&lt;/strong&gt; because they can accept any dynamically provided child component but they won&#39;t modify or copy any behavior from their input components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const EnhancedComponent = higherOrderComponent(WrappedComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;HOC can be used for many use cases:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Code reuse, logic and bootstrap abstraction.&lt;/li&gt; &#xA;   &lt;li&gt;Render hijacking.&lt;/li&gt; &#xA;   &lt;li&gt;State abstraction and manipulation.&lt;/li&gt; &#xA;   &lt;li&gt;Props manipulation.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;36&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create props proxy for HOC component?&lt;/h3&gt; &lt;p&gt;You can add/edit props passed to the component using &lt;em&gt;props proxy&lt;/em&gt; pattern like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function HOC(WrappedComponent) {&#xA;  return class Test extends Component {&#xA;    render() {&#xA;      const newProps = {&#xA;        title: &#39;New Header&#39;,&#xA;        footer: false,&#xA;        showFeatureX: false,&#xA;        showFeatureY: true&#xA;      }&#xA;&#xA;      return &amp;lt;WrappedComponent {...this.props} {...newProps} /&amp;gt;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;37&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is context?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Context&lt;/em&gt; provides a way to pass data through the component tree without having to pass props down manually at every level.&lt;/p&gt; &lt;p&gt;For example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const {Provider, Consumer} = React.createContext(defaultValue)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;38&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is children prop?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Children&lt;/em&gt; is a prop (&lt;code&gt;this.props.children&lt;/code&gt;) that allows you to pass components as data to other components, just like any other prop you use. Component tree put between component&#39;s opening and closing tag will be passed to that component as &lt;code&gt;children&lt;/code&gt; prop.&lt;/p&gt; &lt;p&gt;There are several methods available in the React API to work with this prop. These include &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt;, &lt;code&gt;React.Children.toArray&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A simple usage of children prop looks as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyDiv = React.createClass({&#xA;  render: function() {&#xA;    return &amp;lt;div&amp;gt;{this.props.children}&amp;lt;/div&amp;gt;&#xA;  }&#xA;})&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;MyDiv&amp;gt;&#xA;    &amp;lt;span&amp;gt;{&#39;Hello&#39;}&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span&amp;gt;{&#39;World&#39;}&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/MyDiv&amp;gt;,&#xA;  node&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;39&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to write comments in React?&lt;/h3&gt; &lt;p&gt;The comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div&amp;gt;&#xA;  {/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */}&#xA;  {`Welcome ${user}, let&#39;s play React`}&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Multi-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div&amp;gt;&#xA;  {/* Multi-line comments for more than&#xA;   one line */}&#xA;  {`Welcome ${user}, let&#39;s play React`}&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;40&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of using super constructor with props argument?&lt;/h3&gt; &lt;p&gt;A child class constructor cannot make use of &lt;code&gt;this&lt;/code&gt; reference until the &lt;code&gt;super()&lt;/code&gt; method has been called. The same applies to ES6 sub-classes as well. The main reason for passing props parameter to &lt;code&gt;super()&lt;/code&gt; call is to access &lt;code&gt;this.props&lt;/code&gt; in your child constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Not passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super()&#xA;&#xA;    console.log(this.props) // prints undefined&#xA;&#xA;    // but props parameter is still available&#xA;    console.log(props) // prints { name: &#39;John&#39;, age: 42 }&#xA;  }&#xA;&#xA;  render() {&#xA;    // no difference outside constructor&#xA;    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code snippets reveals that &lt;code&gt;this.props&lt;/code&gt; is different only within the constructor. It would be the same outside the constructor.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;41&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is reconciliation?&lt;/h3&gt; &lt;p&gt;When a component&#39;s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;42&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to set state with a dynamic key name?&lt;/h3&gt; &lt;p&gt;If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with &lt;em&gt;computed property names&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;handleInputChange(event) {&#xA;  this.setState({ [event.target.id]: event.target.value })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;43&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What would be the common mistake of function being called every time the component renders?&lt;/h3&gt; &lt;p&gt;You need to make sure that function is not being called while passing the function as a parameter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  // Wrong: handleClick is called instead of passed as a reference!&#xA;  return &amp;lt;button onClick={this.handleClick()}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, pass the function itself without parenthesis:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  // Correct: handleClick is passed as a reference!&#xA;  return &amp;lt;button onClick={this.handleClick}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;44&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is lazy function supports named exports?&lt;/h3&gt; No, currently &lt;code&gt;React.lazy&lt;/code&gt; function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don’t pull unused components. Let&#39;s take a component file which exports multiple named components, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// MoreComponents.js&#xA;export const SomeComponent = /* ... */;&#xA;export const UnusedComponent = /* ... */;&#xA;&lt;/code&gt;&lt;/pre&gt; and reexport &lt;code&gt;MoreComponents.js&lt;/code&gt; components in an intermediate file &lt;code&gt;IntermediateComponent.js&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// IntermediateComponent.js&#xA;export { SomeComponent as default } from &#34;./MoreComponents.js&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; Now you can import the module using lazy function as below, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { lazy } from &#39;react&#39;;&#xA;const SomeComponent = lazy(() =&amp;gt; import(&#34;./IntermediateComponent.js&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;45&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why React uses &lt;code&gt;className&lt;/code&gt; over &lt;code&gt;class&lt;/code&gt; attribute?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;class&lt;/code&gt; is a keyword in JavaScript, and JSX is an extension of JavaScript. That&#39;s the principal reason why React uses &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;. Pass a string as the &lt;code&gt;className&lt;/code&gt; prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return &amp;lt;span className={&#39;menu navigation-menu&#39;}&amp;gt;{&#39;Menu&#39;}&amp;lt;/span&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;46&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are fragments?&lt;/h3&gt; &lt;p&gt;It&#39;s a common pattern in React which is used for a component to return multiple elements. &lt;em&gt;Fragments&lt;/em&gt; let you group a list of children without adding extra nodes to the DOM.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;React.Fragment&amp;gt;&#xA;      &amp;lt;ChildA /&amp;gt;&#xA;      &amp;lt;ChildB /&amp;gt;&#xA;      &amp;lt;ChildC /&amp;gt;&#xA;    &amp;lt;/React.Fragment&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is also a &lt;em&gt;shorter syntax&lt;/em&gt;, but it&#39;s not supported in many tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;ChildA /&amp;gt;&#xA;      &amp;lt;ChildB /&amp;gt;&#xA;      &amp;lt;ChildC /&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;47&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why fragments are better than container divs?&lt;/h3&gt; &lt;p&gt;Below are the list of reasons,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.&lt;/li&gt; &#xA;   &lt;li&gt;Some CSS mechanisms like &lt;em&gt;Flexbox&lt;/em&gt; and &lt;em&gt;CSS Grid&lt;/em&gt; have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.&lt;/li&gt; &#xA;   &lt;li&gt;The DOM Inspector is less cluttered.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;48&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are portals in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Portal&lt;/em&gt; is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ReactDOM.createPortal(child, container)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;49&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are stateless components?&lt;/h3&gt; &lt;p&gt;If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;50&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are stateful components?&lt;/h3&gt; &lt;p&gt;If the behaviour of a component is dependent on the &lt;em&gt;state&lt;/em&gt; of the component then it can be termed as stateful component. These &lt;em&gt;stateful components&lt;/em&gt; are always &lt;em&gt;class components&lt;/em&gt; and have a state that gets initialized in the &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = { count: 0 }&#xA;  }&#xA;&#xA;  render() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;React 16.8 Update:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Hooks let you use state and other React features without writing classes.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; import React, {useState} from &#39;react&#39;;&#xA;&#xA; const App = (props) =&amp;gt; {&#xA;   const [count, setCount] = useState(0);&#xA;&#xA;   return (&#xA;     // JSX&#xA;   )&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;51&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to apply validation on props in React?&lt;/h3&gt; &lt;p&gt;When the application is running in &lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have &lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It&#39;s disabled in &lt;em&gt;production mode&lt;/em&gt; due to performance impact. The mandatory props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The set of predefined prop types:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;We can define &lt;code&gt;propTypes&lt;/code&gt; for &lt;code&gt;User&lt;/code&gt; component as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import PropTypes from &#39;prop-types&#39;&#xA;&#xA;class User extends React.Component {&#xA;  static propTypes = {&#xA;    name: PropTypes.string.isRequired,&#xA;    age: PropTypes.number.isRequired&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;&amp;gt;&#xA;        &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;&#xA;        &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;&#xA;      &amp;lt;/&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In React v15.5 &lt;em&gt;PropTypes&lt;/em&gt; were moved from &lt;code&gt;React.PropTypes&lt;/code&gt; to &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import PropTypes from &#39;prop-types&#39;&#xA;&#xA;function User({name, age}) {&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;h1&amp;gt;{`Welcome, ${name}`}&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;h2&amp;gt;{`Age, ${age}`}&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;User.propTypes = {&#xA;    name: PropTypes.string.isRequired,&#xA;    age: PropTypes.number.isRequired&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;52&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of React?&lt;/h3&gt; &lt;p&gt;Below are the list of main advantages of React,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Increases the application&#39;s performance with &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;JSX makes code easy to read and write.&lt;/li&gt; &#xA;   &lt;li&gt;It renders both on client and server side (&lt;em&gt;SSR&lt;/em&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.&lt;/li&gt; &#xA;   &lt;li&gt;Easy to write unit and integration tests with tools such as Jest.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;53&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the limitations of React?&lt;/h3&gt; &lt;p&gt;Apart from the advantages, there are few limitations of React too,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React is just a view library, not a full framework.&lt;/li&gt; &#xA;   &lt;li&gt;There is a learning curve for beginners who are new to web development.&lt;/li&gt; &#xA;   &lt;li&gt;Integrating React into a traditional MVC framework requires some additional configuration.&lt;/li&gt; &#xA;   &lt;li&gt;The code complexity increases with inline templating and JSX.&lt;/li&gt; &#xA;   &lt;li&gt;Too many smaller components leading to over engineering or boilerplate.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;54&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are error boundaries in React v16?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Error boundaries&lt;/em&gt; are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.&lt;/p&gt; &lt;p&gt;A class component becomes an error boundary if it defines a new lifecycle method called &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; or &lt;code&gt;static getDerivedStateFromError() &lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class ErrorBoundary extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = { hasError: false }&#xA;  }&#xA;&#xA;  componentDidCatch(error, info) {&#xA;    // You can also log the error to an error reporting service&#xA;    logErrorToMyService(error, info)&#xA;  }&#xA;&#xA;  static getDerivedStateFromError(error) {&#xA;     // Update state so the next render will show the fallback UI.&#xA;     return { hasError: true };&#xA;   }&#xA;&#xA;  render() {&#xA;    if (this.state.hasError) {&#xA;      // You can render any custom fallback UI&#xA;      return &amp;lt;h1&amp;gt;{&#39;Something went wrong.&#39;}&amp;lt;/h1&amp;gt;&#xA;    }&#xA;    return this.props.children&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that use it as a regular component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ErrorBoundary&amp;gt;&#xA;  &amp;lt;MyWidget /&amp;gt;&#xA;&amp;lt;/ErrorBoundary&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;55&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How error boundaries handled in React v15?&lt;/h3&gt; &lt;p&gt;React v15 provided very basic support for &lt;em&gt;error boundaries&lt;/em&gt; using &lt;code&gt;unstable_handleError&lt;/code&gt; method. It has been renamed to &lt;code&gt;componentDidCatch&lt;/code&gt; in React v16.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;56&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the recommended ways for static type checking?&lt;/h3&gt; &lt;p&gt;Normally we use &lt;em&gt;PropTypes library&lt;/em&gt; (&lt;code&gt;React.PropTypes&lt;/code&gt; moved to a &lt;code&gt;prop-types&lt;/code&gt; package since React v15.5) for &lt;em&gt;type checking&lt;/em&gt; in the React applications. For large code bases, it is recommended to use &lt;em&gt;static type checkers&lt;/em&gt; such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;57&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the use of &lt;code&gt;react-dom&lt;/code&gt; package?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-dom&lt;/code&gt; package provides &lt;em&gt;DOM-specific methods&lt;/em&gt; that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hydrate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;unmountComponentAtNode()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;findDOMNode()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createPortal()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;58&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of render method of &lt;code&gt;react-dom&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ReactDOM.render(element, container[, callback])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the optional callback is provided, it will be executed after the component is rendered or updated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;59&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is ReactDOMServer?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;ReactDOMServer&lt;/code&gt; object enables you to render components to static markup (typically used on node server). This object is mainly used for &lt;em&gt;server-side rendering&lt;/em&gt; (SSR). The following methods can be used in both the server and browser environments:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;renderToString()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;renderToStaticMarkup()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call &lt;code&gt;renderToString&lt;/code&gt; to render your root component to a string, which you then send as response.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// using Express&#xA;import { renderToString } from &#39;react-dom/server&#39;&#xA;import MyPage from &#39;./MyPage&#39;&#xA;&#xA;app.get(&#39;/&#39;, (req, res) =&amp;gt; {&#xA;  res.write(&#39;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;My Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&#39;)&#xA;  res.write(&#39;&amp;lt;div id=&#34;content&#34;&amp;gt;&#39;)&#xA;  res.write(renderToString(&amp;lt;MyPage/&amp;gt;))&#xA;  res.write(&#39;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;)&#xA;  res.end()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;60&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use innerHTML in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute is React&#39;s replacement for using &lt;code&gt;innerHTML&lt;/code&gt; in the browser DOM. Just like &lt;code&gt;innerHTML&lt;/code&gt;, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a &lt;code&gt;__html&lt;/code&gt; object as key and HTML text as value.&lt;/p&gt; &lt;p&gt;In this example MyComponent uses &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute for setting HTML markup:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function createMarkup() {&#xA;  return { __html: &#39;First &amp;amp;middot; Second&#39; }&#xA;}&#xA;&#xA;function MyComponent() {&#xA;  return &amp;lt;div dangerouslySetInnerHTML={createMarkup()} /&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;61&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use styles in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const divStyle = {&#xA;  color: &#39;blue&#39;,&#xA;  backgroundImage: &#39;url(&#39; + imgUrl + &#39;)&#39;&#xA;};&#xA;&#xA;function HelloWorldComponent() {&#xA;  return &amp;lt;div style={divStyle}&amp;gt;Hello World!&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. &lt;code&gt;node.style.backgroundImage&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;62&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How events are different in React?&lt;/h3&gt; &lt;p&gt;Handling events in React elements has some syntactic differences:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React event handlers are named using camelCase, rather than lowercase.&lt;/li&gt; &#xA;   &lt;li&gt;With JSX you pass a function as the event handler, rather than a string.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;63&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What will happen if you use &lt;code&gt;setState()&lt;/code&gt; in constructor?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt;, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: &lt;em&gt;Can only update a mounted or mounting component.&lt;/em&gt; So we need to use &lt;code&gt;this.state&lt;/code&gt; to initialize variables inside constructor.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;64&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the impact of indexes as keys?&lt;/h3&gt; &lt;p&gt;Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt; &lt;p&gt;In the below code snippet each element&#39;s key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;{todos.map((todo, index) =&amp;gt;&#xA;  &amp;lt;Todo&#xA;    {...todo}&#xA;    key={index}&#xA;  /&amp;gt;&#xA;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;{todos.map((todo) =&amp;gt;&#xA;  &amp;lt;Todo {...todo}&#xA;    key={todo.id} /&amp;gt;&#xA;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;65&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it good to use &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillMount()&lt;/code&gt; method?&lt;/h3&gt; &lt;p&gt;Yes, it is safe to use &lt;code&gt;setState()&lt;/code&gt; inside &lt;code&gt;componentWillMount()&lt;/code&gt; method. But at the same it is recommended to avoid async initialization in &lt;code&gt;componentWillMount()&lt;/code&gt; lifecycle method. &lt;code&gt;componentWillMount()&lt;/code&gt; is invoked immediately before mounting occurs. It is called before &lt;code&gt;render()&lt;/code&gt;, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in &lt;code&gt;componentDidMount()&lt;/code&gt; instead of &lt;code&gt;componentWillMount()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;componentDidMount() {&#xA;  axios.get(`api/todos`)&#xA;    .then((result) =&amp;gt; {&#xA;      this.setState({&#xA;        messages: [...result.data]&#xA;      })&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;66&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What will happen if you use props in initial state?&lt;/h3&gt; &lt;p&gt;If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.&lt;/p&gt; &lt;p&gt;The below component won&#39;t display the updated input value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    this.state = {&#xA;      records: [],&#xA;      inputValue: this.props.inputValue&#xA;    };&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;{this.state.inputValue}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using props inside render method will update the value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    this.state = {&#xA;      record: []&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;{this.props.inputValue}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;67&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you conditionally render components?&lt;/h3&gt; &lt;p&gt;In some cases you want to render different components depending on some state. JSX does not render &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so you can use conditional &lt;em&gt;short-circuiting&lt;/em&gt; to render a given part of your component only if a certain condition is true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyComponent = ({ name, address }) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;&#xA;    {address &amp;amp;&amp;amp;&#xA;      &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;&#xA;    }&#xA;  &amp;lt;/div&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need an &lt;code&gt;if-else&lt;/code&gt; condition then use &lt;em&gt;ternary operator&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyComponent = ({ name, address }) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;&#xA;    {address&#xA;      ? &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;&#xA;      : &amp;lt;p&amp;gt;{&#39;Address is not available&#39;}&amp;lt;/p&amp;gt;&#xA;    }&#xA;  &amp;lt;/div&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;68&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why we need to be careful when spreading props on DOM elements?&lt;/h3&gt; &lt;p&gt;When we &lt;em&gt;spread props&lt;/em&gt; we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with &lt;code&gt;...rest&lt;/code&gt; operator, so it will add only required props.&lt;/p&gt; &lt;p&gt;For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const ComponentA = () =&amp;gt;&#xA;  &amp;lt;ComponentB isDisplay={true} className={&#39;componentStyle&#39;} /&amp;gt;&#xA;&#xA;const ComponentB = ({ isDisplay, ...domProps }) =&amp;gt;&#xA;  &amp;lt;div {...domProps}&amp;gt;{&#39;ComponentB&#39;}&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;69&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How you use decorators in React?&lt;/h3&gt; &lt;p&gt;You can &lt;em&gt;decorate&lt;/em&gt; your &lt;em&gt;class&lt;/em&gt; components, which is the same as passing the component into a function. &lt;strong&gt;Decorators&lt;/strong&gt; are flexible and readable way of modifying component functionality.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;@setTitle(&#39;Profile&#39;)&#xA;class Profile extends React.Component {&#xA;    //....&#xA;}&#xA;&#xA;/*&#xA;  title is a string that will be set as a document title&#xA;  WrappedComponent is what our decorator will receive when&#xA;  put directly above a component class as seen in the example above&#xA;*/&#xA;const setTitle = (title) =&amp;gt; (WrappedComponent) =&amp;gt; {&#xA;  return class extends React.Component {&#xA;    componentDidMount() {&#xA;      document.title = title&#xA;    }&#xA;&#xA;    render() {&#xA;      return &amp;lt;WrappedComponent {...this.props} /&amp;gt;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Decorators are a feature that didn&#39;t make it into ES7, but are currently a &lt;em&gt;stage 2 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;70&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you memoize a component?&lt;/h3&gt; &lt;p&gt;There are memoize libraries available which can be used on function components.&lt;/p&gt; &lt;p&gt;For example &lt;code&gt;moize&lt;/code&gt; library can memoize the component in another component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import moize from &#39;moize&#39;&#xA;import Component from &#39;./components/Component&#39; // this module exports a non-memoized component&#xA;&#xA;const MemoizedFoo = moize.react(Component)&#xA;&#xA;const Consumer = () =&amp;gt; {&#xA;  &amp;lt;div&amp;gt;&#xA;    {&#39;I will memoize the following entry:&#39;}&#xA;    &amp;lt;MemoizedFoo/&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Since React v16.6.0, we have a &lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  const MemoComponent = React.memo(function MemoComponent(props) {&#xA;    /* render using props */&#xA;  });&#xA;  OR&#xA;  export default React.memo(MyFunctionComponent);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;71&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How you implement Server Side Rendering or SSR?&lt;/h3&gt; &lt;p&gt;React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import ReactDOMServer from &#39;react-dom/server&#39;&#xA;import App from &#39;./App&#39;&#xA;&#xA;ReactDOMServer.renderToString(&amp;lt;App /&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;72&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to enable production mode in React?&lt;/h3&gt; &lt;p&gt;You should use Webpack&#39;s &lt;code&gt;DefinePlugin&lt;/code&gt; method to set &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify&#39;s dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;73&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is CRA and its benefits?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;create-react-app&lt;/code&gt; CLI tool allows you to quickly create &amp;amp; run React applications with no configuration step.&lt;/p&gt; &lt;p&gt;Let&#39;s create Todo App using &lt;em&gt;CRA&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Installation&#xA;$ npm install -g create-react-app&#xA;&#xA;# Create new project&#xA;$ create-react-app todo-app&#xA;$ cd todo-app&#xA;&#xA;# Build, test and run&#xA;$ npm run build&#xA;$ npm run test&#xA;$ npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It includes everything we need to build a React app:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React, JSX, ES6, and Flow syntax support.&lt;/li&gt; &#xA;   &lt;li&gt;Language extras beyond ES6 like the object spread operator.&lt;/li&gt; &#xA;   &lt;li&gt;Autoprefixed CSS, so you don’t need -webkit- or other prefixes.&lt;/li&gt; &#xA;   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting.&lt;/li&gt; &#xA;   &lt;li&gt;A live development server that warns about common mistakes.&lt;/li&gt; &#xA;   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;74&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the lifecycle methods order in mounting?&lt;/h3&gt; &lt;p&gt;The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;static getDerivedStateFromProps()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;75&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/h3&gt; &lt;p&gt;The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;Starting with React v16.3 these methods are aliased with &lt;code&gt;UNSAFE_&lt;/code&gt; prefix, and the unprefixed version will be removed in React v17.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;76&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new static &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or &lt;code&gt;null&lt;/code&gt; to indicate that the new props do not require any state updates.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  static getDerivedStateFromProps(props, state) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillReceiveProps()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;77&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to &lt;code&gt;componentDidUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  getSnapshotBeforeUpdate(prevProps, prevState) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;78&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do Hooks replace render props and higher order components?&lt;/h3&gt; &lt;p&gt;Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;79&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the recommended way for naming components?&lt;/h3&gt; &lt;p&gt;It is recommended to name the component by reference instead of using &lt;code&gt;displayName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;displayName&lt;/code&gt; for naming component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default React.createClass({&#xA;  displayName: &#39;TodoApp&#39;,&#xA;  // ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;strong&gt;recommended&lt;/strong&gt; approach:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default class TodoApp extends React.Component {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;also&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const TodoApp = () =&amp;gt; {&#xA; //...&#xA;}&#xA;export default TodoApp;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;80&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the recommended ordering of methods in component class?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; ordering of methods from &lt;em&gt;mounting&lt;/em&gt; to &lt;em&gt;render stage&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getChildContext()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentDidUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;click handlers or event handlers like &lt;code&gt;onClickSubmit()&lt;/code&gt; or &lt;code&gt;onChangeDescription()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;getter methods for render like &lt;code&gt;getSelectReason()&lt;/code&gt; or &lt;code&gt;getFooterContent()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;optional render methods like &lt;code&gt;renderNavigation()&lt;/code&gt; or &lt;code&gt;renderProfilePicture()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;81&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is a switching component?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;switching component&lt;/em&gt; is a component that renders one of many components. We need to use object to map prop values to components.&lt;/p&gt; &lt;p&gt;For example, a switching component to display different pages based on &lt;code&gt;page&lt;/code&gt; prop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import HomePage from &#39;./HomePage&#39;&#xA;import AboutPage from &#39;./AboutPage&#39;&#xA;import ServicesPage from &#39;./ServicesPage&#39;&#xA;import ContactPage from &#39;./ContactPage&#39;&#xA;&#xA;const PAGES = {&#xA;  home: HomePage,&#xA;  about: AboutPage,&#xA;  services: ServicesPage,&#xA;  contact: ContactPage&#xA;}&#xA;&#xA;const Page = (props) =&amp;gt; {&#xA;  const Handler = PAGES[props.page] || ContactPage&#xA;&#xA;  return &amp;lt;Handler {...props} /&amp;gt;&#xA;}&#xA;&#xA;// The keys of the PAGES object can be used in the prop types to catch dev-time errors.&#xA;Page.propTypes = {&#xA;  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;82&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why we need to pass a function to setState()?&lt;/h3&gt; &lt;p&gt;The reason behind for this is that &lt;code&gt;setState()&lt;/code&gt; is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after &lt;code&gt;setState()&lt;/code&gt; is called. That means you should not rely on the current state when calling &lt;code&gt;setState()&lt;/code&gt; since you can&#39;t be sure what that state will be. The solution is to pass a function to &lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&#39;s say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// assuming this.state.count === 0&#xA;this.setState({ count: this.state.count + 1 })&#xA;this.setState({ count: this.state.count + 1 })&#xA;this.setState({ count: this.state.count + 1 })&#xA;// this.state.count === 1, not 3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we pass a function to &lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.setState((prevState, props) =&amp;gt; ({&#xA;  count: prevState.count + props.increment&#xA;}))&#xA;// this.state.count === 3 as expected&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;h3&gt;Why function is preferred over object for &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;React may batch multiple &lt;code&gt;setState()&lt;/code&gt; calls into a single update for performance. Because &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt; &lt;p&gt;This counter example will fail to update as expected:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Wrong&#xA;this.setState({&#xA;  counter: this.state.counter + this.props.increment,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preferred approach is to call &lt;code&gt;setState()&lt;/code&gt; with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Correct&#xA;this.setState((prevState, props) =&amp;gt; ({&#xA;  counter: prevState.counter + props.increment&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;83&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is strict mode in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;React.StrictMode&lt;/code&gt; is a useful component for highlighting potential problems in an application. Just like &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;StrictMode&amp;gt;&lt;/code&gt; does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for &lt;em&gt;development mode&lt;/em&gt; only.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;&#xA;function ExampleApplication() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;Header /&amp;gt;&#xA;      &amp;lt;React.StrictMode&amp;gt;&#xA;        &amp;lt;div&amp;gt;&#xA;          &amp;lt;ComponentOne /&amp;gt;&#xA;          &amp;lt;ComponentTwo /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/React.StrictMode&amp;gt;&#xA;      &amp;lt;Header /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the example above, the &lt;em&gt;strict mode&lt;/em&gt; checks apply to &lt;code&gt;&amp;lt;ComponentOne&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ComponentTwo&amp;gt;&lt;/code&gt; components only.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;84&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are React Mixins?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Mixins&lt;/em&gt; are a way to totally separate components to have a common functionality. Mixins &lt;strong&gt;should not be used&lt;/strong&gt; and can be replaced with &lt;em&gt;higher-order components&lt;/em&gt; or &lt;em&gt;decorators&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;One of the most commonly used mixins is &lt;code&gt;PureRenderMixin&lt;/code&gt;. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const PureRenderMixin = require(&#39;react-addons-pure-render-mixin&#39;)&#xA;&#xA;const Button = React.createClass({&#xA;  mixins: [PureRenderMixin],&#xA;  // ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;!-- TODO: mixins are deprecated --&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;85&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why is &lt;code&gt;isMounted()&lt;/code&gt; an anti-pattern and what is the proper solution?&lt;/h3&gt; &lt;p&gt;The primary use case for &lt;code&gt;isMounted()&lt;/code&gt; is to avoid calling &lt;code&gt;setState()&lt;/code&gt; after a component has been unmounted, because it will emit a warning.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (this.isMounted()) {&#xA;  this.setState({...})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Checking &lt;code&gt;isMounted()&lt;/code&gt; before calling &lt;code&gt;setState()&lt;/code&gt; does eliminate the warning, but it also defeats the purpose of the warning. Using &lt;code&gt;isMounted()&lt;/code&gt; is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.&lt;/p&gt; &lt;p&gt;An optimal solution would be to find places where &lt;code&gt;setState()&lt;/code&gt; might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in &lt;code&gt;componentWillUnmount()&lt;/code&gt;, prior to unmounting.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;86&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the Pointer Events supported in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Pointer Events&lt;/em&gt; provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don&#39;t correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the &lt;em&gt;Pointer Events&lt;/em&gt; specification.&lt;/p&gt; &lt;p&gt;The following event types are now available in &lt;em&gt;React DOM&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerDown&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerMove&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerUp&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerCancel&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onGotPointerCapture&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onLostPointerCapture&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerEnter&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerLeave&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerOver&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerOut&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;87&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why should component names start with capital letter?&lt;/h3&gt; &lt;p&gt;If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as an unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class SomeComponent extends Component {&#xA; // Code goes here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can define component class which name starts with lowercase letter, but when it&#39;s imported it should have capital letter. Here lowercase is fine:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class myComponent extends Component {&#xA;  render() {&#xA;    return &amp;lt;div /&amp;gt;&#xA;  }&#xA;}&#xA;&#xA;export default myComponent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While when imported in another file it should start with capital letter:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MyComponent from &#39;./MyComponent&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;What are the exceptions on React component naming?&lt;/h4&gt; &lt;p&gt;The component names should start with an uppercase letter but there are few exceptions to this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names. For example, the below tag can be compiled to a valid component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;     render() {&#xA;          return (&#xA;            &amp;lt;obj.component/&amp;gt; // `React.createElement(obj.component)`&#xA;          )&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;88&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Are custom DOM attributes supported in React v16?&lt;/h3&gt; &lt;p&gt;Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn&#39;t recognize, React would just skip it.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take a look at the below attribute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div mycustomattribute={&#39;something&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Would render an empty div to the DOM with React v15:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In React v16 any unknown attributes will end up in the DOM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div mycustomattribute=&#39;something&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;89&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between constructor and getInitialState?&lt;/h3&gt; &lt;p&gt;You should initialize state in the constructor when using ES6 classes, and &lt;code&gt;getInitialState()&lt;/code&gt; method when using &lt;code&gt;React.createClass()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using ES6 classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = { /* initial state */ }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const MyComponent = React.createClass({&#xA;  getInitialState() {&#xA;    return { /* initial state */ }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.createClass()&lt;/code&gt; is deprecated and removed in React v16. Use plain JavaScript classes instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;90&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can you force a component to re-render without calling setState?&lt;/h3&gt; &lt;p&gt;By default, when your component&#39;s state or props change, your component will re-render. If your &lt;code&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;component.forceUpdate(callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;91&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;super()&lt;/code&gt; and &lt;code&gt;super(props)&lt;/code&gt; in React using ES6 classes?&lt;/h3&gt; &lt;p&gt;When you want to access &lt;code&gt;this.props&lt;/code&gt; in &lt;code&gt;constructor()&lt;/code&gt; then you should pass props to &lt;code&gt;super()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    console.log(this.props) // { name: &#39;John&#39;, ... }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super()&#xA;    console.log(this.props) // undefined&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Outside &lt;code&gt;constructor()&lt;/code&gt; both will display same value for &lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;92&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to loop inside JSX?&lt;/h3&gt; &lt;p&gt;You can simply use &lt;code&gt;Array.prototype.map&lt;/code&gt; with ES6 &lt;em&gt;arrow function&lt;/em&gt; syntax.&lt;/p&gt; &lt;p&gt;For example, the &lt;code&gt;items&lt;/code&gt; array of objects is mapped into an array of components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;tbody&amp;gt;&#xA;  {items.map(item =&amp;gt; &amp;lt;SomeComponent key={item.id} name={item.name} /&amp;gt;)}&#xA;&amp;lt;/tbody&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can&#39;t iterate using &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;tbody&amp;gt;&#xA;  for (let i = 0; i &amp;lt; items.length; i++) {&#xA;    &amp;lt;SomeComponent key={items[i].id} name={items[i].name} /&amp;gt;&#xA;  }&#xA;&amp;lt;/tbody&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is because JSX tags are transpiled into &lt;em&gt;function calls&lt;/em&gt;, and you can&#39;t use statements inside expressions. This may change thanks to &lt;code&gt;do&lt;/code&gt; expressions which are &lt;em&gt;stage 1 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;93&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you access props in attribute quotes?&lt;/h3&gt; &lt;p&gt;React (or JSX) doesn&#39;t support variable interpolation inside an attribute value. The below representation won&#39;t work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;img className=&#39;image&#39; src=&#39;images/{this.props.image}&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;img className=&#39;image&#39; src={&#39;images/&#39; + this.props.image} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;em&gt;template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;img className=&#39;image&#39; src={`images/${this.props.image}`} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;94&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React proptype array with shape?&lt;/h3&gt; &lt;p&gt;If you want to pass an array of objects to a component with a particular shape then use &lt;code&gt;React.PropTypes.shape()&lt;/code&gt; as an argument to &lt;code&gt;React.PropTypes.arrayOf()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ReactComponent.propTypes = {&#xA;  arrayWithShape: React.PropTypes.arrayOf(React.PropTypes.shape({&#xA;    color: React.PropTypes.string.isRequired,&#xA;    fontSize: React.PropTypes.number.isRequired&#xA;  })).isRequired&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;95&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to conditionally apply class attributes?&lt;/h3&gt; &lt;p&gt;You shouldn&#39;t use curly braces inside quotes because it is going to be evaluated as a string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div className=&#34;btn-panel {this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead you need to move curly braces outside (don&#39;t forget to include spaces between class names):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div className={&#39;btn-panel &#39; + (this.props.visible ? &#39;show&#39; : &#39;hidden&#39;)}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div className={`btn-panel ${this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}`}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;96&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React and ReactDOM?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react&lt;/code&gt; package contains &lt;code&gt;React.createElement()&lt;/code&gt;, &lt;code&gt;React.Component&lt;/code&gt;, &lt;code&gt;React.Children&lt;/code&gt;, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The &lt;code&gt;react-dom&lt;/code&gt; package contains &lt;code&gt;ReactDOM.render()&lt;/code&gt;, and in &lt;code&gt;react-dom/server&lt;/code&gt; we have &lt;em&gt;server-side rendering&lt;/em&gt; support with &lt;code&gt;ReactDOMServer.renderToString()&lt;/code&gt; and &lt;code&gt;ReactDOMServer.renderToStaticMarkup()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;97&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why ReactDOM is separated from React?&lt;/h3&gt; &lt;p&gt;The React team worked on extracting all DOM-related features into a separate library called &lt;em&gt;ReactDOM&lt;/em&gt;. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, &lt;code&gt;react-native&lt;/code&gt;, &lt;code&gt;react-art&lt;/code&gt;, &lt;code&gt;react-canvas&lt;/code&gt;, and &lt;code&gt;react-three&lt;/code&gt;, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.&lt;/p&gt; &lt;p&gt;To build more environments that React can render to, React team planned to split the main React package into two: &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;. This paves the way to writing components that can be shared between the web version of React and React Native.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;98&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use React label element?&lt;/h3&gt; &lt;p&gt;If you try to render a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element bound to a text input using the standard &lt;code&gt;for&lt;/code&gt; attribute, then it produces HTML missing that attribute and prints a warning to the console.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;label for={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;&#xA;&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;for&lt;/code&gt; is a reserved keyword in JavaScript, use &lt;code&gt;htmlFor&lt;/code&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;label htmlFor={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;&#xA;&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;99&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to combine multiple inline style objects?&lt;/h3&gt; &lt;p&gt;You can use &lt;em&gt;spread operator&lt;/em&gt; in regular React:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt; &amp;lt;button style={{...styles.panel.button, ...styles.panel.submitButton}}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re using React Native then you can use the array notation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button style={[styles.panel.button, styles.panel.submitButton]}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;100&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to re-render the view when the browser is resized?&lt;/h3&gt; &lt;p&gt;You can listen to the &lt;code&gt;resize&lt;/code&gt; event in &lt;code&gt;componentDidMount()&lt;/code&gt; and then update the dimensions (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;). You should remove the listener in &lt;code&gt;componentWillUnmount()&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class WindowDimensions extends React.Component {&#xA;  constructor(props){&#xA;    super(props);&#xA;    this.updateDimensions = this.updateDimensions.bind(this);&#xA;  }&#xA;   &#xA;  componentWillMount() {&#xA;    this.updateDimensions()&#xA;  }&#xA;&#xA;  componentDidMount() {&#xA;    window.addEventListener(&#39;resize&#39;, this.updateDimensions)&#xA;  }&#xA;&#xA;  componentWillUnmount() {&#xA;    window.removeEventListener(&#39;resize&#39;, this.updateDimensions)&#xA;  }&#xA;&#xA;  updateDimensions() {&#xA;    this.setState({width: window.innerWidth, height: window.innerHeight})&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;span&amp;gt;{this.state.width} x {this.state.height}&amp;lt;/span&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;101&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;setState()&lt;/code&gt; and &lt;code&gt;replaceState()&lt;/code&gt; methods?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt; the current and previous states are merged. &lt;code&gt;replaceState()&lt;/code&gt; throws out the current state, and replaces it with only what you provide. Usually &lt;code&gt;setState()&lt;/code&gt; is used unless you really need to remove all previous keys for some reason. You can also set state to &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt; in &lt;code&gt;setState()&lt;/code&gt; instead of using &lt;code&gt;replaceState()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;102&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to listen to state changes?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;componentDidUpdate&lt;/code&gt; lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;componentDidUpdate(object prevProps, object prevState)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The previous releases of ReactJS also uses &lt;code&gt;componentWillUpdate(object nextProps, object nextState)&lt;/code&gt; for state changes. It has been deprecated in latest releases.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;103&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the recommended approach of removing an array element in React state?&lt;/h3&gt; &lt;p&gt;The better approach is to use &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;For example, let&#39;s create a &lt;code&gt;removeItem()&lt;/code&gt; method for updating the state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;removeItem(index) {&#xA;  this.setState({&#xA;    data: this.state.data.filter((item, i) =&amp;gt; i !== index)&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;104&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it possible to use React without rendering HTML?&lt;/h3&gt; &lt;p&gt;It is possible with latest version (&amp;gt;=16.2). Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return null&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return &amp;lt;React.Fragment&amp;gt;&amp;lt;/React.Fragment&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Returning &lt;code&gt;undefined&lt;/code&gt; won&#39;t work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;105&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pretty print JSON with React?&lt;/h3&gt; &lt;p&gt;We can use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag so that the formatting of the &lt;code&gt;JSON.stringify()&lt;/code&gt; is retained:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const data = { name: &#39;John&#39;, age: 42 }&#xA;&#xA;class User extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;pre&amp;gt;&#xA;        {JSON.stringify(data, null, 2)}&#xA;      &amp;lt;/pre&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;React.render(&amp;lt;User /&amp;gt;, document.getElementById(&#39;container&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;106&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why you can&#39;t update props in React?&lt;/h3&gt; &lt;p&gt;The React philosophy is that props should be &lt;em&gt;immutable&lt;/em&gt; and &lt;em&gt;top-down&lt;/em&gt;. This means that a parent can send any prop values to a child, but the child can&#39;t modify received props.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;107&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to focus an input element on page load?&lt;/h3&gt; &lt;p&gt;You can do it by creating &lt;em&gt;ref&lt;/em&gt; for &lt;code&gt;input&lt;/code&gt; element and using it in &lt;code&gt;componentDidMount()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class App extends React.Component{&#xA;  componentDidMount() {&#xA;    this.nameInput.focus()&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;input&#xA;          defaultValue={&#39;Won\&#39;t focus&#39;}&#xA;        /&amp;gt;&#xA;        &amp;lt;input&#xA;          ref={(input) =&amp;gt; this.nameInput = input}&#xA;          defaultValue={&#39;Will focus&#39;}&#xA;        /&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also in Functional component (react 16.08 and above)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React, {useEffect, useRef} from &#39;react&#39;;&#xA;&#xA;const App = () =&amp;gt; {&#xA;  const inputElRef = useRef(null)&#xA;  &#xA;  useEffect(()=&amp;gt;{&#xA;    inputElRef.current.focus()&#xA;  }, [])&#xA;  &#xA;  return(&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;input&#xA;        defaultValue={&#39;Won\&#39;t focus&#39;}&#xA;      /&amp;gt;&#xA;      &amp;lt;input&#xA;        ref={inputElRef}&#xA;        defaultValue={&#39;Will focus&#39;}&#xA;      /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;108&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the possible ways of updating objects in state?&lt;/h3&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with an object to merge with state:&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Using &lt;code&gt;Object.assign()&lt;/code&gt; to create a copy of the object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const user = Object.assign({}, this.state.user, { age: 42 })&#xA;this.setState({ user })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Using &lt;em&gt;spread operator&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const user = { ...this.state.user, age: 42 }&#xA;this.setState({ user })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with a function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.setState(prevState =&amp;gt; ({&#xA;  user: {&#xA;    ...prevState.user,&#xA;    age: 42&#xA;  }&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;110&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How can we find the version of React at runtime in the browser?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;React.version&lt;/code&gt; to get the version.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const REACT_VERSION = React.version&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;div&amp;gt;{`React version: ${REACT_VERSION}`}&amp;lt;/div&amp;gt;,&#xA;  document.getElementById(&#39;app&#39;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;111&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the approaches to include polyfills in your &lt;code&gt;create-react-app&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are approaches to include polyfills in create-react-app,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual import from &lt;code&gt;core-js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a file called (something like) &lt;code&gt;polyfills.js&lt;/code&gt; and import it into root &lt;code&gt;index.js&lt;/code&gt; file. Run &lt;code&gt;npm install core-js&lt;/code&gt; or &lt;code&gt;yarn add core-js&lt;/code&gt; and import your specific required features.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;core-js/fn/array/find&#39;&#xA;import &#39;core-js/fn/array/includes&#39;&#xA;import &#39;core-js/fn/number/is-nan&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Polyfill service:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#39;https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes&#39;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above script we had to explicitly request the &lt;code&gt;Array.prototype.includes&lt;/code&gt; feature as it is not included in the default feature set.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;112&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use https instead of http in create-react-app?&lt;/h3&gt; &lt;p&gt;You just need to use &lt;code&gt;HTTPS=true&lt;/code&gt; configuration. You can edit your &lt;code&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;  &#34;start&#34;: &#34;set HTTPS=true &amp;amp;&amp;amp; react-scripts start&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just run &lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;113&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to avoid using relative path imports in create-react-app?&lt;/h3&gt; &lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; in the project root and write the import path:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NODE_PATH=src/app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that restart the development server. Now you should be able to import anything inside &lt;code&gt;src/app&lt;/code&gt; without relative paths.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;114&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to add Google Analytics for React Router?&lt;/h3&gt; &lt;p&gt;Add a listener on the &lt;code&gt;history&lt;/code&gt; object to record each page view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;history.listen(function (location) {&#xA;  window.ga(&#39;set&#39;, &#39;page&#39;, location.pathname + location.search)&#xA;  window.ga(&#39;send&#39;, &#39;pageview&#39;, location.pathname + location.search)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;115&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to update a component every second?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;setInterval()&lt;/code&gt; to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;componentDidMount() {&#xA;  this.interval = setInterval(() =&amp;gt; this.setState({ time: Date.now() }), 1000)&#xA;}&#xA;&#xA;componentWillUnmount() {&#xA;  clearInterval(this.interval)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;116&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you apply vendor prefixes to inline styles in React?&lt;/h3&gt; &lt;p&gt;React &lt;em&gt;does not&lt;/em&gt; apply &lt;em&gt;vendor prefixes&lt;/em&gt; automatically. You need to add vendor prefixes manually.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div style={{&#xA;  transform: &#39;rotate(90deg)&#39;,&#xA;  WebkitTransform: &#39;rotate(90deg)&#39;, // note the capital &#39;W&#39; here&#xA;  msTransform: &#39;rotate(90deg)&#39; // &#39;ms&#39; is the only lowercase vendor prefix&#xA;}} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;117&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to import and export components using React and ES6?&lt;/h3&gt; &lt;p&gt;You should use default for exporting the components&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import User from &#39;user&#39;&#xA;&#xA;export default class MyProfile extends React.Component {&#xA;  render(){&#xA;    return (&#xA;      &amp;lt;User type=&#34;customer&#34;&amp;gt;&#xA;        //...&#xA;      &amp;lt;/User&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;119&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why is a component constructor called only once?&lt;/h3&gt; &lt;p&gt;React&#39;s &lt;em&gt;reconciliation&lt;/em&gt; algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it&#39;s the same component as before, so reuses the previous instance rather than creating a new one.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;120&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to define constants in React?&lt;/h3&gt; &lt;p&gt;You can use ES7 &lt;code&gt;static&lt;/code&gt; field to define constant.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  static DEFAULT_PAGINATION = 10&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;121&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to programmatically trigger click event in React?&lt;/h3&gt; &lt;p&gt;You could use the ref prop to acquire a reference to the underlying &lt;code&gt;HTMLInputElement&lt;/code&gt; object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the &lt;code&gt;HTMLElement.click&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;This can be done in two steps:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create ref in render method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;input ref={input =&amp;gt; this.inputElement = input} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Apply click event in your event handler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.inputElement.click()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;122&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it possible to use async/await in plain React?&lt;/h3&gt; &lt;p&gt;If you want to use &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in React, you will need &lt;em&gt;Babel&lt;/em&gt; and &lt;a href=&#34;https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator&#34;&gt;transform-async-to-generator&lt;/a&gt; plugin. React Native ships with Babel and a set of transforms.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;123&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the common folder structures for React?&lt;/h3&gt; &lt;p&gt;There are two common practices for React project file structure.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by features or routes:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;common/&#xA;├─ Avatar.js&#xA;├─ Avatar.css&#xA;├─ APIUtils.js&#xA;└─ APIUtils.test.js&#xA;feed/&#xA;├─ index.js&#xA;├─ Feed.js&#xA;├─ Feed.css&#xA;├─ FeedStory.js&#xA;├─ FeedStory.test.js&#xA;└─ FeedAPI.js&#xA;profile/&#xA;├─ index.js&#xA;├─ Profile.js&#xA;├─ ProfileHeader.js&#xA;├─ ProfileHeader.css&#xA;└─ ProfileAPI.js&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by file type:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Another popular way to structure projects is to group similar files together.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;api/&#xA;├─ APIUtils.js&#xA;├─ APIUtils.test.js&#xA;├─ ProfileAPI.js&#xA;└─ UserAPI.js&#xA;components/&#xA;├─ Avatar.js&#xA;├─ Avatar.css&#xA;├─ Feed.js&#xA;├─ Feed.css&#xA;├─ FeedStory.js&#xA;├─ FeedStory.test.js&#xA;├─ Profile.js&#xA;├─ ProfileHeader.js&#xA;└─ ProfileHeader.css&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;124&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the popular packages for animation?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Transition Group&lt;/em&gt; and &lt;em&gt;React Motion&lt;/em&gt; are popular animation packages in React ecosystem.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;125&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the benefit of styles modules?&lt;/h3&gt; &lt;p&gt;It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.&lt;/p&gt; &lt;p&gt;For example, these styles could be extracted into a separate component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const colors = {&#xA;  white,&#xA;  black,&#xA;  blue&#xA;}&#xA;&#xA;export const space = [&#xA;  0,&#xA;  8,&#xA;  16,&#xA;  32,&#xA;  64&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then imported individually in other components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { space, colors } from &#39;./styles&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;126&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the popular React-specific linters?&lt;/h3&gt; &lt;p&gt;ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called &lt;code&gt;eslint-plugin-react&lt;/code&gt;. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.&lt;/p&gt; &lt;p&gt;Another popular plugin is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with &lt;code&gt;alt&lt;/code&gt; text and &lt;code&gt;tabindex&lt;/code&gt;, for example, will not be picked up by regular plugins.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;127&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to make AJAX call and in which component lifecycle methods should I make an AJAX call?&lt;/h3&gt; &lt;p&gt;You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in &lt;code&gt;fetch&lt;/code&gt;. You should fetch data in the &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method. This is so you can use &lt;code&gt;setState()&lt;/code&gt; to update your component when the data is retrieved.&lt;/p&gt; &lt;p&gt;For example, the employees list fetched from API and set local state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = {&#xA;      employees: [],&#xA;      error: null&#xA;    }&#xA;  }&#xA;&#xA;  componentDidMount() {&#xA;    fetch(&#39;https://api.example.com/items&#39;)&#xA;      .then(res =&amp;gt; res.json())&#xA;      .then(&#xA;        (result) =&amp;gt; {&#xA;          this.setState({&#xA;            employees: result.employees&#xA;          })&#xA;        },&#xA;        (error) =&amp;gt; {&#xA;          this.setState({ error })&#xA;        }&#xA;      )&#xA;  }&#xA;&#xA;  render() {&#xA;    const { error, employees } = this.state&#xA;    if (error) {&#xA;      return &amp;lt;div&amp;gt;Error: {error.message}&amp;lt;/div&amp;gt;;&#xA;    } else {&#xA;      return (&#xA;        &amp;lt;ul&amp;gt;&#xA;          {employees.map(employee =&amp;gt; (&#xA;            &amp;lt;li key={employee.name}&amp;gt;&#xA;              {employee.name}-{employee.experience}&#xA;            &amp;lt;/li&amp;gt;&#xA;          ))}&#xA;        &amp;lt;/ul&amp;gt;&#xA;      )&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;128&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are render props?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Render Props&lt;/strong&gt; is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;DataProvider render={data =&amp;gt; (&#xA;  &amp;lt;h1&amp;gt;{`Hello ${data.target}`}&amp;lt;/h1&amp;gt;&#xA;)}/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Router&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;129&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Router?&lt;/h3&gt; &lt;p&gt;React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what&#39;s being displayed on the page.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;130&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How React Router is different from history library?&lt;/h3&gt; &lt;p&gt;React Router is a wrapper around the &lt;code&gt;history&lt;/code&gt; library which handles interaction with the browser&#39;s &lt;code&gt;window.history&lt;/code&gt; with its browser and hash histories. It also provides memory history which is useful for environments that don&#39;t have global history, such as mobile app development (React Native) and unit testing with Node.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;131&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components of React Router v4?&lt;/h3&gt; &lt;p&gt;React Router v4 provides below 3 &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;HashRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The above components will create &lt;em&gt;browser&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, and &lt;em&gt;memory&lt;/em&gt; history instances. React Router v4 makes the properties and methods of the &lt;code&gt;history&lt;/code&gt; instance associated with your router available through the context in the &lt;code&gt;router&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;132&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods of &lt;code&gt;history&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;A history instance has two methods for navigation purpose.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;If you think of the history as an array of visited locations, &lt;code&gt;push()&lt;/code&gt; will add a new location to the array and &lt;code&gt;replace()&lt;/code&gt; will replace the current location in the array with the new one.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;133&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you programmatically navigate using React Router v4?&lt;/h3&gt; &lt;p&gt;There are three different ways to achieve programmatic routing/navigation within components.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using the &lt;code&gt;withRouter()&lt;/code&gt; higher-order function:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;withRouter()&lt;/code&gt; higher-order function will inject the history object as a prop of the component. This object provides &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods to avoid the usage of context.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { withRouter } from &#39;react-router-dom&#39; // this also works with &#39;react-router-native&#39;&#xA;&#xA;const Button = withRouter(({ history }) =&amp;gt; (&#xA;  &amp;lt;button&#xA;    type=&#39;button&#39;&#xA;    onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}&#xA;  &amp;gt;&#xA;    {&#39;Click Me!&#39;}&#xA;  &amp;lt;/button&amp;gt;&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component and render props pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component passes the same props as &lt;code&gt;withRouter()&lt;/code&gt;, so you will be able to access the history methods through the history prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Route } from &#39;react-router-dom&#39;&#xA;&#xA;const Button = () =&amp;gt; (&#xA;  &amp;lt;Route render={({ history }) =&amp;gt; (&#xA;    &amp;lt;button&#xA;      type=&#39;button&#39;&#xA;      onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}&#xA;    &amp;gt;&#xA;      {&#39;Click Me!&#39;}&#xA;    &amp;lt;/button&amp;gt;&#xA;  )} /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using context:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This option is not recommended and treated as unstable API.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const Button = (props, context) =&amp;gt; (&#xA;  &amp;lt;button&#xA;    type=&#39;button&#39;&#xA;    onClick={() =&amp;gt; {&#xA;      context.history.push(&#39;/new-location&#39;)&#xA;    }}&#xA;  &amp;gt;&#xA;    {&#39;Click Me!&#39;}&#xA;  &amp;lt;/button&amp;gt;&#xA;)&#xA;&#xA;Button.contextTypes = {&#xA;  history: React.PropTypes.shape({&#xA;    push: React.PropTypes.func.isRequired&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;134&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to get query parameters in React Router v4?&lt;/h3&gt; &lt;p&gt;The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const queryString = require(&#39;query-string&#39;);&#xA;const parsed = queryString.parse(props.location.search);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;URLSearchParams&lt;/code&gt; if you want something native:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const params = new URLSearchParams(props.location.search)&#xA;const foo = params.get(&#39;name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should use a &lt;em&gt;polyfill&lt;/em&gt; for IE11.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;135&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why you get &#34;Router may have only one child element&#34; warning?&lt;/h3&gt; &lt;p&gt;You have to wrap your Route&#39;s in a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block because &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; is unique in that it renders a route exclusively.&lt;/p&gt; &lt;p&gt;At first you need to add &lt;code&gt;Switch&lt;/code&gt; to your imports:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Switch, Router, Route } from &#39;react-router&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then define the routes within &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Router&amp;gt;&#xA;  &amp;lt;Switch&amp;gt;&#xA;    &amp;lt;Route {/* ... */} /&amp;gt;&#xA;    &amp;lt;Route {/* ... */} /&amp;gt;&#xA;  &amp;lt;/Switch&amp;gt;&#xA;&amp;lt;/Router&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;136&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pass params to &lt;code&gt;history.push&lt;/code&gt; method in React Router v4?&lt;/h3&gt; &lt;p&gt;While navigating you can pass props to the &lt;code&gt;history&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.props.history.push({&#xA;  pathname: &#39;/template&#39;,&#xA;  search: &#39;?name=sudheer&#39;,&#xA;  state: { detail: response.data }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;search&lt;/code&gt; property is used to pass query params in &lt;code&gt;push()&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;137&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to implement &lt;em&gt;default&lt;/em&gt; or &lt;em&gt;NotFound&lt;/em&gt; page?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; renders the first child &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; that matches. A &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; with no path always matches. So you just need to simply drop path attribute as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Switch&amp;gt;&#xA;  &amp;lt;Route exact path=&#34;/&#34; component={Home}/&amp;gt;&#xA;  &amp;lt;Route path=&#34;/user&#34; component={User}/&amp;gt;&#xA;  &amp;lt;Route component={NotFound} /&amp;gt;&#xA;&amp;lt;/Switch&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;138&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to get history on React Router v4?&lt;/h3&gt; &lt;p&gt;Below are the list of steps to get history object on React Router v4,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create a module that exports a &lt;code&gt;history&lt;/code&gt; object and import this module across the project.&lt;/p&gt; &lt;p&gt;For example, create &lt;code&gt;history.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createBrowserHistory } from &#39;history&#39;&#xA;&#xA;export default createBrowserHistory({&#xA;  /* pass a configuration object here if needed */&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You should use the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; component instead of built-in routers. Import the above &lt;code&gt;history.js&lt;/code&gt; inside &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Router } from &#39;react-router-dom&#39;&#xA;import history from &#39;./history&#39;&#xA;import App from &#39;./App&#39;&#xA;&#xA;ReactDOM.render((&#xA;  &amp;lt;Router history={history}&amp;gt;&#xA;    &amp;lt;App /&amp;gt;&#xA;  &amp;lt;/Router&amp;gt;&#xA;), holder)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can also use push method of &lt;code&gt;history&lt;/code&gt; object similar to built-in history object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// some-other-file.js&#xA;import history from &#39;./history&#39;&#xA;&#xA;history.push(&#39;/go-here&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;139&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to perform automatic redirect after login?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-router&lt;/code&gt; package provides &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; component in React Router. Rendering a &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;&#xA;import { Redirect } from &#39;react-router&#39;&#xA;&#xA;export default class LoginComponent extends Component {&#xA;  render() {&#xA;    if (this.state.isLoggedIn === true) {&#xA;      return &amp;lt;Redirect to=&#34;/your/redirect/page&#34; /&amp;gt;&#xA;    } else {&#xA;      return &amp;lt;div&amp;gt;{&#39;Login Please&#39;}&amp;lt;/div&amp;gt;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Internationalization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;140&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;React Intl&lt;/em&gt; library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of &lt;em&gt;FormatJS&lt;/em&gt; which provides bindings to React via its components and API.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;141&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the main features of React Intl?&lt;/h3&gt; &lt;p&gt;Below are the main features of React Intl,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Display numbers with separators.&lt;/li&gt; &#xA;   &lt;li&gt;Display dates and times correctly.&lt;/li&gt; &#xA;   &lt;li&gt;Display dates relative to &#34;now&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Pluralize labels in strings.&lt;/li&gt; &#xA;   &lt;li&gt;Support for 150+ languages.&lt;/li&gt; &#xA;   &lt;li&gt;Runs in the browser and Node.&lt;/li&gt; &#xA;   &lt;li&gt;Built on standards.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;142&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the two ways of formatting in React Intl?&lt;/h3&gt; &lt;p&gt;The library provides two ways to format strings, numbers, and dates:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using react components:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;FormattedMessage&#xA;  id={&#39;account&#39;}&#xA;  defaultMessage={&#39;The amount is less than minimum balance.&#39;}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using an API:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const messages = defineMessages({&#xA;  accountMessage: {&#xA;    id: &#39;account&#39;,&#xA;    defaultMessage: &#39;The amount is less than minimum balance.&#39;,&#xA;  }&#xA;})&#xA;&#xA;formatMessage(messages.accountMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;143&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; as placeholder using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Formatted... /&amp;gt;&lt;/code&gt; components from &lt;code&gt;react-intl&lt;/code&gt; return elements, not plain text, so they can&#39;t be used for placeholders, alt text, etc. In that case, you should use lower level API &lt;code&gt;formatMessage()&lt;/code&gt;. You can inject the &lt;code&gt;intl&lt;/code&gt; object into your component using &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component and then format the message using &lt;code&gt;formatMessage()&lt;/code&gt; available on that object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import { injectIntl, intlShape } from &#39;react-intl&#39;&#xA;&#xA;const MyComponent = ({ intl }) =&amp;gt; {&#xA;  const placeholder = intl.formatMessage({id: &#39;messageId&#39;})&#xA;  return &amp;lt;input placeholder={placeholder} /&amp;gt;&#xA;}&#xA;&#xA;MyComponent.propTypes = {&#xA;  intl: intlShape.isRequired&#xA;}&#xA;&#xA;export default injectIntl(MyComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;144&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to access current locale with React Intl?&lt;/h3&gt; &lt;p&gt;You can get the current locale in any component of your application using &lt;code&gt;injectIntl()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;&#xA;&#xA;const MyComponent = ({ intl }) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;{`The current locale is ${intl.locale}`}&amp;lt;/div&amp;gt;&#xA;)&#xA;&#xA;MyComponent.propTypes = {&#xA;  intl: intlShape.isRequired&#xA;}&#xA;&#xA;export default injectIntl(MyComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;145&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to format date using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component will give you access to the &lt;code&gt;formatDate()&lt;/code&gt; method via the props in your component. The method is used internally by instances of &lt;code&gt;FormattedDate&lt;/code&gt; and it returns the string representation of the formatted date.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;&#xA;&#xA;const stringDate = this.props.intl.formatDate(date, {&#xA;  year: &#39;numeric&#39;,&#xA;  month: &#39;numeric&#39;,&#xA;  day: &#39;numeric&#39;&#xA;})&#xA;&#xA;const MyComponent = ({intl}) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;{`The formatted date is ${stringDate}`}&amp;lt;/div&amp;gt;&#xA;)&#xA;&#xA;MyComponent.propTypes = {&#xA;  intl: intlShape.isRequired&#xA;}&#xA;&#xA;export default injectIntl(MyComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;146&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Shallow Renderer in React testing?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Shallow rendering&lt;/em&gt; is useful for writing unit test cases in React. It lets you render a component &lt;em&gt;one level deep&lt;/em&gt; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.&lt;/p&gt; &lt;p&gt;For example, if you have the following component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function MyComponent() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;&#xA;      &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you can assert as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import ShallowRenderer from &#39;react-test-renderer/shallow&#39;&#xA;&#xA;// in your test&#xA;const renderer = new ShallowRenderer()&#xA;renderer.render(&amp;lt;MyComponent /&amp;gt;)&#xA;&#xA;const result = renderer.getRenderOutput()&#xA;&#xA;expect(result.type).toBe(&#39;div&#39;)&#xA;expect(result.props.children).toEqual([&#xA;  &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;,&#xA;  &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;147&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;TestRenderer&lt;/code&gt; package in React?&lt;/h3&gt; &lt;p&gt;This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or &lt;code&gt;jsdom&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import TestRenderer from &#39;react-test-renderer&#39;&#xA;&#xA;const Link = ({page, children}) =&amp;gt; &amp;lt;a href={page}&amp;gt;{children}&amp;lt;/a&amp;gt;&#xA;&#xA;const testRenderer = TestRenderer.create(&#xA;  &amp;lt;Link page={&#39;https://www.facebook.com/&#39;}&amp;gt;{&#39;Facebook&#39;}&amp;lt;/Link&amp;gt;&#xA;)&#xA;&#xA;console.log(testRenderer.toJSON())&#xA;// {&#xA;//   type: &#39;a&#39;,&#xA;//   props: { href: &#39;https://www.facebook.com/&#39; },&#xA;//   children: [ &#39;Facebook&#39; ]&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;148&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of ReactTestUtils package?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;ReactTestUtils&lt;/em&gt; are provided in the &lt;code&gt;with-addons&lt;/code&gt; package and allow you to perform actions against a simulated DOM for the purpose of unit testing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;149&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Jest?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Jest&lt;/em&gt; is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a &lt;code&gt;jsdom&lt;/code&gt; environment. It&#39;s often used for testing components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;150&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of Jest over Jasmine?&lt;/h3&gt; &lt;p&gt;There are couple of advantages compared to Jasmine:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatically finds tests to execute in your source code.&lt;/li&gt; &#xA;   &lt;li&gt;Automatically mocks dependencies when running your tests.&lt;/li&gt; &#xA;   &lt;li&gt;Allows you to test asynchronous code synchronously.&lt;/li&gt; &#xA;   &lt;li&gt;Runs your tests with a fake DOM implementation (via &lt;code&gt;jsdom&lt;/code&gt;) so that your tests can be run on the command line.&lt;/li&gt; &#xA;   &lt;li&gt;Runs tests in parallel processes so that they finish sooner.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;151&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Give a simple example of Jest test case&lt;/h3&gt; &lt;p&gt;Let&#39;s write a test for a function that adds two numbers in &lt;code&gt;sum.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const sum = (a, b) =&amp;gt; a + b&#xA;&#xA;export default sum&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a file named &lt;code&gt;sum.test.js&lt;/code&gt; which contains actual test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import sum from &#39;./sum&#39;&#xA;&#xA;test(&#39;adds 1 + 2 to equal 3&#39;, () =&amp;gt; {&#xA;  expect(sum(1, 2)).toBe(3)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then add the following section to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;test&#34;: &#34;jest&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, run &lt;code&gt;yarn test&lt;/code&gt; or &lt;code&gt;npm test&lt;/code&gt; and Jest will print a result:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ yarn test&#xA;PASS ./sum.test.js&#xA;✓ adds 1 + 2 to equal 3 (2ms)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Redux&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;152&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is flux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flux&lt;/em&gt; is an &lt;em&gt;application design paradigm&lt;/em&gt; used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.&lt;/p&gt; &lt;p&gt;The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/flux.png&#34; alt=&#34;flux&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;153&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux&lt;/em&gt; is a predictable state container for JavaScript apps based on the &lt;em&gt;Flux design pattern&lt;/em&gt;. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;154&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the core principles of Redux?&lt;/h3&gt; &lt;p&gt;Redux follows three fundamental principles:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Single source of truth:&lt;/strong&gt; The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;State is read-only:&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Changes are made with pure functions:&lt;/strong&gt; To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;155&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the downsides of Redux compared to Flux?&lt;/h3&gt; &lt;p&gt;Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;You will need to learn to avoid mutations:&lt;/strong&gt; Flux is un-opinionated about mutating data, but Redux doesn&#39;t like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like &lt;code&gt;redux-immutable-state-invariant&lt;/code&gt;, Immutable.js, or instructing your team to write non-mutating code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;You&#39;re going to have to carefully pick your packages:&lt;/strong&gt; While Flux explicitly doesn&#39;t try to solve problems such as undo/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;There is no nice Flow integration yet:&lt;/strong&gt; Flux currently lets you do very impressive static type checks which Redux doesn&#39;t support yet.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;156&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt; is a utility which helps your component get updated state (which is updated by some other components):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapStateToProps = (state) =&amp;gt; {&#xA;  return {&#xA;    todos: getVisibleTodos(state.todos, state.visibilityFilter)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt; is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; {&#xA;  return {&#xA;    onTodoClick: (id) =&amp;gt; {&#xA;      dispatch(toggleTodo(id))&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to always use the “object shorthand” form for the &lt;code&gt;mapDispatchToProps&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Redux wraps it in another function that looks like (…args) =&amp;gt; dispatch(onTodoClick(…args)), and pass that wrapper function as a prop to your component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; const mapDispatchToProps = ({&#xA;   onTodoClick&#xA; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;157&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I dispatch an action in reducer?&lt;/h3&gt; &lt;p&gt;Dispatching an action within a reducer is an &lt;strong&gt;anti-pattern&lt;/strong&gt;. Your reducer should be &lt;em&gt;without side effects&lt;/em&gt;, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;158&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to access Redux store outside a component?&lt;/h3&gt; &lt;p&gt;You just need to export the store from the module where it created with &lt;code&gt;createStore()&lt;/code&gt;. Also, it shouldn&#39;t pollute the global window object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;store = createStore(myReducer)&#xA;&#xA;export default store&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;159&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the drawbacks of MVW pattern?&lt;/h3&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;DOM manipulation is very expensive which causes applications to behave slow and inefficient.&lt;/li&gt; &#xA;   &lt;li&gt;Due to circular dependencies, a complicated model was created around models and views.&lt;/li&gt; &#xA;   &lt;li&gt;Lot of data changes happens for collaborative applications(like Google Docs).&lt;/li&gt; &#xA;   &lt;li&gt;No way to do undo (travel back in time) easily without adding so much extra code.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;160&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Are there any similarities between Redux and RxJS?&lt;/h3&gt; &lt;p&gt;These libraries are very different for very different purposes, but there are some vague similarities.&lt;/p&gt; &lt;p&gt;Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;161&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to dispatch an action on load?&lt;/h3&gt; &lt;p&gt;You can dispatch an action in &lt;code&gt;componentDidMount()&lt;/code&gt; method and in &lt;code&gt;render()&lt;/code&gt; method you can verify the data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends Component {&#xA;  componentDidMount() {&#xA;    this.props.fetchData()&#xA;  }&#xA;&#xA;  render() {&#xA;    return this.props.isLoaded&#xA;      ? &amp;lt;div&amp;gt;{&#39;Loaded&#39;}&amp;lt;/div&amp;gt;&#xA;      : &amp;lt;div&amp;gt;{&#39;Not Loaded&#39;}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&#xA;const mapStateToProps = (state) =&amp;gt; ({&#xA;  isLoaded: state.isLoaded&#xA;})&#xA;&#xA;const mapDispatchToProps = { fetchData }&#xA;&#xA;export default connect(mapStateToProps, mapDispatchToProps)(App)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;162&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;connect()&lt;/code&gt; from React Redux?&lt;/h3&gt; &lt;p&gt;You need to follow two steps to use your store in your container:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use &lt;code&gt;mapStateToProps()&lt;/code&gt;:&lt;/strong&gt; It maps the state variables from your store to the props that you specify.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the above props to your container:&lt;/strong&gt; The object returned by the &lt;code&gt;mapStateToProps&lt;/code&gt; function is connected to the container. You can import &lt;code&gt;connect()&lt;/code&gt; from &lt;code&gt;react-redux&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import { connect } from &#39;react-redux&#39;&#xA;&#xA;class App extends React.Component {&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;{this.props.containerData}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&#xA;function mapStateToProps(state) {&#xA;  return { containerData: state.data }&#xA;}&#xA;&#xA;export default connect(mapStateToProps)(App)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;163&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to reset state in Redux?&lt;/h3&gt; &lt;p&gt;You need to write a &lt;em&gt;root reducer&lt;/em&gt; in your application which delegate handling the action to the reducer generated by &lt;code&gt;combineReducers()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take &lt;code&gt;rootReducer()&lt;/code&gt; to return the initial state after &lt;code&gt;USER_LOGOUT&lt;/code&gt; action. As we know, reducers are supposed to return the initial state when they are called with &lt;code&gt;undefined&lt;/code&gt; as the first argument, no matter the action.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const appReducer = combineReducers({&#xA;  /* your app&#39;s top-level reducers */&#xA;})&#xA;&#xA;const rootReducer = (state, action) =&amp;gt; {&#xA;  if (action.type === &#39;USER_LOGOUT&#39;) {&#xA;    state = undefined&#xA;  }&#xA;&#xA;  return appReducer(state, action)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case of using &lt;code&gt;redux-persist&lt;/code&gt;, you may also need to clean your storage. &lt;code&gt;redux-persist&lt;/code&gt; keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const appReducer = combineReducers({&#xA;  /* your app&#39;s top-level reducers */&#xA;})&#xA;&#xA;const rootReducer = (state, action) =&amp;gt; {&#xA;  if (action.type === &#39;USER_LOGOUT&#39;) {&#xA;    Object.keys(state).forEach(key =&amp;gt; {&#xA;      storage.removeItem(`persist:${key}`)&#xA;    })&#xA;&#xA;    state = undefined&#xA;  }&#xA;&#xA;  return appReducer(state, action)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;164&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Whats the purpose of &lt;code&gt;at&lt;/code&gt; symbol in the Redux connect decorator?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;@&lt;/strong&gt; symbol is in fact a JavaScript expression used to signify decorators. &lt;em&gt;Decorators&lt;/em&gt; make it possible to annotate and modify classes and properties at design time.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example setting up Redux without and with a decorator.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Without decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;import * as actionCreators from &#39;./actionCreators&#39;&#xA;import { bindActionCreators } from &#39;redux&#39;&#xA;import { connect } from &#39;react-redux&#39;&#xA;&#xA;function mapStateToProps(state) {&#xA;  return { todos: state.todos }&#xA;}&#xA;&#xA;function mapDispatchToProps(dispatch) {&#xA;  return { actions: bindActionCreators(actionCreators, dispatch) }&#xA;}&#xA;&#xA;class MyApp extends React.Component {&#xA;  // ...define your main app here&#xA;}&#xA;&#xA;export default connect(mapStateToProps, mapDispatchToProps)(MyApp)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;With decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;import * as actionCreators from &#39;./actionCreators&#39;&#xA;import { bindActionCreators } from &#39;redux&#39;&#xA;import { connect } from &#39;react-redux&#39;&#xA;&#xA;function mapStateToProps(state) {&#xA;  return { todos: state.todos }&#xA;}&#xA;&#xA;function mapDispatchToProps(dispatch) {&#xA;  return { actions: bindActionCreators(actionCreators, dispatch) }&#xA;}&#xA;&#xA;@connect(mapStateToProps, mapDispatchToProps)&#xA;export default class MyApp extends React.Component {&#xA;  // ...define your main app here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The above examples are almost similar except the usage of decorator. The decorator syntax isn&#39;t built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;165&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React context and React Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;strong&gt;Context&lt;/strong&gt; in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.&lt;/p&gt; &lt;p&gt;Whereas &lt;strong&gt;Redux&lt;/strong&gt; is much more powerful and provides a large number of features that the Context API doesn&#39;t provide. Also, React Redux uses context internally but it doesn&#39;t expose this fact in the public API.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;166&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are Redux state functions called reducers?&lt;/h3&gt; &lt;p&gt;Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could &lt;em&gt;reduce&lt;/em&gt; a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;167&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to make AJAX request in Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;redux-thunk&lt;/code&gt; middleware which allows you to define async actions.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of fetching specific account as an AJAX call using &lt;em&gt;fetch API&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export function fetchAccount(id) {&#xA;  return dispatch =&amp;gt; {&#xA;    dispatch(setLoadingAccountState()) // Show a loading spinner&#xA;    fetch(`/account/${id}`, (response) =&amp;gt; {&#xA;      dispatch(doneFetchingAccount()) // Hide loading spinner&#xA;      if (response.status === 200) {&#xA;        dispatch(setAccount(response.json)) // Use a normal function to set the received state&#xA;      } else {&#xA;        dispatch(someError)&#xA;      }&#xA;    })&#xA;  }&#xA;}&#xA;&#xA;function setAccount(data) {&#xA; return { type: &#39;SET_Account&#39;, data: data }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;168&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Should I keep all component&#39;s state in Redux store?&lt;/h3&gt; &lt;p&gt;Keep your data in the Redux store, and the UI related state internally in the component.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;169&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the proper way to access Redux store?&lt;/h3&gt; &lt;p&gt;The best way to access your store in a component is to use the &lt;code&gt;connect()&lt;/code&gt; function, that creates a new component that wraps around your existing one. This pattern is called &lt;em&gt;Higher-Order Components&lt;/em&gt;, and is generally the preferred way of extending a component&#39;s functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of &lt;code&gt;&amp;lt;FilterLink&amp;gt;&lt;/code&gt; component using connect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { connect } from &#39;react-redux&#39;&#xA;import { setVisibilityFilter } from &#39;../actions&#39;&#xA;import Link from &#39;../components/Link&#39;&#xA;&#xA;const mapStateToProps = (state, ownProps) =&amp;gt; ({&#xA;  active: ownProps.filter === state.visibilityFilter&#xA;})&#xA;&#xA;const mapDispatchToProps = (dispatch, ownProps) =&amp;gt; ({&#xA;  onClick: () =&amp;gt; dispatch(setVisibilityFilter(ownProps.filter))&#xA;})&#xA;&#xA;const FilterLink = connect(&#xA;  mapStateToProps,&#xA;  mapDispatchToProps&#xA;)(Link)&#xA;&#xA;export default FilterLink&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using &lt;code&gt;connect()&lt;/code&gt; over accessing the store directly (using context API).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent {&#xA;  someMethod() {&#xA;    doSomethingWith(this.context.store)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;170&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between component and container in React Redux?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt; is a class or function component that describes the presentational part of your application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is an informal term for a component that is connected to a Redux store. Containers &lt;em&gt;subscribe&lt;/em&gt; to Redux state updates and &lt;em&gt;dispatch&lt;/em&gt; actions, and they usually don&#39;t render DOM elements; they delegate rendering to presentational child components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;171&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of the constants in Redux?&lt;/h3&gt; &lt;p&gt;Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos – in which case, you will get a &lt;code&gt;ReferenceError&lt;/code&gt; immediately.&lt;/p&gt; &lt;p&gt;Normally we will save them in a single file (&lt;code&gt;constants.js&lt;/code&gt; or &lt;code&gt;actionTypes.js&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const ADD_TODO = &#39;ADD_TODO&#39;&#xA;export const DELETE_TODO = &#39;DELETE_TODO&#39;&#xA;export const EDIT_TODO = &#39;EDIT_TODO&#39;&#xA;export const COMPLETE_TODO = &#39;COMPLETE_TODO&#39;&#xA;export const COMPLETE_ALL = &#39;COMPLETE_ALL&#39;&#xA;export const CLEAR_COMPLETED = &#39;CLEAR_COMPLETED&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Redux, you use them in two places:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;During action creation:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s take &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;;&#xA;&#xA;export function addTodo(text) {&#xA;  return { type: ADD_TODO, text }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;In reducers:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s create &lt;code&gt;reducer.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;&#xA;&#xA;export default (state = [], action) =&amp;gt; {&#xA;  switch (action.type) {&#xA;    case ADD_TODO:&#xA;      return [&#xA;        ...state,&#xA;        {&#xA;          text: action.text,&#xA;          completed: false&#xA;        }&#xA;      ];&#xA;    default:&#xA;      return state&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;172&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the different ways to write &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are a few ways of binding &lt;em&gt;action creators&lt;/em&gt; to &lt;code&gt;dispatch()&lt;/code&gt; in &lt;code&gt;mapDispatchToProps()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({&#xA; action: () =&amp;gt; dispatch(action())&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({&#xA; action: bindActionCreators(action, dispatch)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = { action }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The third option is just a shorthand for the first one.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;173&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the use of the &lt;code&gt;ownProps&lt;/code&gt; parameter in &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;If the &lt;code&gt;ownProps&lt;/code&gt; parameter is specified, React Redux will pass the props that were passed to the component into your &lt;em&gt;connect&lt;/em&gt; functions. So, if you use a connected component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import ConnectedComponent from &#39;./containers/ConnectedComponent&#39;;&#xA;&#xA;&amp;lt;ConnectedComponent user={&#39;john&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;ownProps&lt;/code&gt; inside your &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt; functions will be an object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ user: &#39;john&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use this object to decide what to return from those functions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;174&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to structure Redux top level directories?&lt;/h3&gt; &lt;p&gt;Most of the applications has several top-level directories as below:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: Used for &lt;em&gt;dumb&lt;/em&gt; components unaware of Redux.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Used for &lt;em&gt;smart&lt;/em&gt; components connected to Redux.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;: Used for all action creators, where file names correspond to part of the app.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Reducers&lt;/strong&gt;: Used for all reducers, where files name correspond to state key.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: Used for store initialization.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;This structure works well for small and medium size apps.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;175&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.&lt;/p&gt; &lt;p&gt;It is available in NPM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npm install --save redux-saga&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;176&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the mental model of redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Saga&lt;/em&gt; is like a separate thread in your application, that&#39;s solely responsible for side effects. &lt;code&gt;redux-saga&lt;/code&gt; is a redux &lt;em&gt;middleware&lt;/em&gt;, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;177&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; in redux-saga?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; are effect creator functions. &lt;code&gt;call()&lt;/code&gt; function is used to create effect description, which instructs middleware to call the promise. &lt;code&gt;put()&lt;/code&gt; function creates an effect, which instructs middleware to dispatch an action to the store.&lt;/p&gt; &lt;p&gt;Let&#39;s take example of how these effects work for fetching particular user data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function* fetchUserSaga(action) {&#xA;  // `call` function accepts rest arguments, which will be passed to `api.fetchUser` function.&#xA;  // Instructing middleware to call promise, it resolved value will be assigned to `userData` variable&#xA;  const userData = yield call(api.fetchUser, action.userId)&#xA;&#xA;  // Instructing middleware to dispatch corresponding action.&#xA;  yield put({&#xA;    type: &#39;FETCH_USER_SUCCESS&#39;,&#xA;    userData&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;178&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux Thunk?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Thunk&lt;/em&gt; middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;179&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;redux-saga&lt;/code&gt; and &lt;code&gt;redux-thunk&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;Redux Thunk&lt;/em&gt; and &lt;em&gt;Redux Saga&lt;/em&gt; take care of dealing with side effects. In most of the scenarios, Thunk uses &lt;em&gt;Promises&lt;/em&gt; to deal with them, whereas Saga uses &lt;em&gt;Generators&lt;/em&gt;. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;180&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux DevTools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux DevTools&lt;/em&gt; is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don&#39;t want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;181&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the features of Redux DevTools?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux DevTools are below,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Lets you inspect every state and action payload.&lt;/li&gt; &#xA;   &lt;li&gt;Lets you go back in time by &lt;em&gt;cancelling&lt;/em&gt; actions.&lt;/li&gt; &#xA;   &lt;li&gt;If you change the reducer code, each &lt;em&gt;staged&lt;/em&gt; action will be re-evaluated.&lt;/li&gt; &#xA;   &lt;li&gt;If the reducers throw, you will see during which action this happened, and what the error was.&lt;/li&gt; &#xA;   &lt;li&gt;With &lt;code&gt;persistState()&lt;/code&gt; store enhancer, you can persist debug sessions across page reloads.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;182&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Redux selectors and why to use them?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Selectors&lt;/em&gt; are functions that take Redux state as an argument and return some data to pass to the component.&lt;/p&gt; &lt;p&gt;For example, to get user details from the state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const getUserData = state =&amp;gt; state.user.data&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These selectors have two main benefits,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/li&gt; &#xA;   &lt;li&gt;The selector is not recomputed unless one of its arguments changes&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;183&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux Form?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Form&lt;/em&gt; works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;184&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the main features of Redux Form?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux Form are:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Field values persistence via Redux store.&lt;/li&gt; &#xA;   &lt;li&gt;Validation (sync/async) and submission.&lt;/li&gt; &#xA;   &lt;li&gt;Formatting, parsing and normalization of field values.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;185&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to add multiple middlewares to Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;applyMiddleware()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, you can add &lt;code&gt;redux-thunk&lt;/code&gt; and &lt;code&gt;logger&lt;/code&gt; passing them as arguments to &lt;code&gt;applyMiddleware()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;&#xA;const createStoreWithMiddleware = applyMiddleware(ReduxThunk, logger)(createStore)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;186&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to set initial state in Redux?&lt;/h3&gt; &lt;p&gt;You need to pass initial state as second argument to createStore:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const rootReducer = combineReducers({&#xA;  todos: todos,&#xA;  visibilityFilter: visibilityFilter&#xA;})&#xA;&#xA;const initialState = {&#xA;  todos: [{ id: 123, name: &#39;example&#39;, completed: false }]&#xA;}&#xA;&#xA;const store = createStore(&#xA;  rootReducer,&#xA;  initialState&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;187&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How Relay is different from Redux?&lt;/h3&gt; &lt;p&gt;Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via &lt;em&gt;GraphQL&lt;/em&gt; queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is an action in Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Actions&lt;/em&gt; are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take an action which represents adding a new todo item:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;  type: ADD_TODO,&#xA;  text: &#39;Add todo item&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;React Native&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;188&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React Native and React?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt; is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;189&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to test React Native apps?&lt;/h3&gt; &lt;p&gt;React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (&lt;a href=&#34;https://expo.io&#34;&gt;https://expo.io&lt;/a&gt;) Where it syncs using QR code, your mobile and computer should be in same wireless network.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;190&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to do logging in React Native?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, etc. As of React Native v0.29 you can simply run the following to see logs in the console:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ react-native log-ios&#xA;$ react-native log-android&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;191&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to debug your React Native?&lt;/h3&gt; &lt;p&gt;Follow the below steps to debug React Native app:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run your application in the iOS simulator.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;Command + D&lt;/code&gt; and a webpage should open up at &lt;code&gt;http://localhost:8081/debugger-ui&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Enable &lt;em&gt;Pause On Caught Exceptions&lt;/em&gt; for a better debugging experience.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;Command + Option + I&lt;/code&gt; to open the Chrome Developer tools, or open it via &lt;code&gt;View&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer Tools&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;You should now be able to debug as you normally would.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React supported libraries &amp;amp; Integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;192&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is reselect and how it works?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Reselect&lt;/em&gt; is a &lt;strong&gt;selector library&lt;/strong&gt; (for Redux) which uses &lt;em&gt;memoization&lt;/em&gt; concept. It was originally written to compute derived data from Redux-like applications state, but it can&#39;t be tied to any architecture or library.&lt;/p&gt; &lt;p&gt;Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It&#39;s memoization and cache are fully customizable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;193&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Flow?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flow&lt;/em&gt; is a &lt;em&gt;static type checker&lt;/em&gt; designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving &lt;code&gt;null&lt;/code&gt;, unlike most type systems.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;194&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Flow and PropTypes?&lt;/h3&gt; &lt;p&gt;Flow is a &lt;em&gt;static analysis tool&lt;/em&gt; (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.&lt;/p&gt; &lt;p&gt;PropTypes is a &lt;em&gt;basic type checker&lt;/em&gt; (runtime checker) which has been patched onto React. It can&#39;t check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;195&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use Font Awesome icons in React?&lt;/h3&gt; &lt;p&gt;The below steps followed to include Font Awesome in React:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Install &lt;code&gt;font-awesome&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npm install --save font-awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Import &lt;code&gt;font-awesome&lt;/code&gt; in your &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;font-awesome/css/font-awesome.min.css&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add Font Awesome classes in &lt;code&gt;className&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;  return &amp;lt;div&amp;gt;&amp;lt;i className={&#39;fa fa-spinner&#39;} /&amp;gt;&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;196&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Dev Tools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Developer Tools&lt;/em&gt; let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).&lt;/p&gt; &lt;p&gt;The official extensions available for different browsers or environments.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chrome extension&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Firefox extension&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Standalone app&lt;/strong&gt; (Safari, React Native, etc)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;197&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why is DevTools not loading in Chrome for local files?&lt;/h3&gt; &lt;p&gt;If you opened a local HTML file in your browser (&lt;code&gt;file://...&lt;/code&gt;) then you must first open &lt;em&gt;Chrome Extensions&lt;/em&gt; and check &lt;code&gt;Allow access to file URLs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;198&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use Polymer in React?&lt;/h3&gt; &lt;p&gt;You need to follow below steps to use Polymer in React,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create a Polymer element:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;../../bower_components/polymer/polymer.html&#39; /&amp;gt;&#xA;Polymer({&#xA;  is: &#39;calender-element&#39;,&#xA;  ready: function() {&#xA;    this.textContent = &#39;I am a calender&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the &lt;code&gt;index.html&lt;/code&gt; of your React application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;./src/polymer-components/calender-element.html&#39;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use that element in the JSX file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;&#xA;class MyComponent extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;calender-element /&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;export default MyComponent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;199&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of React over Vue.js?&lt;/h3&gt; &lt;p&gt;React has the following advantages over Vue.js:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Gives more flexibility in large apps developing.&lt;/li&gt; &#xA;   &lt;li&gt;Easier to test.&lt;/li&gt; &#xA;   &lt;li&gt;Suitable for mobile apps creating.&lt;/li&gt; &#xA;   &lt;li&gt;More information and solutions available.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;200&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React and Angular?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the difference between React and Angular in a table format.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;React&lt;/th&gt; &#xA;     &lt;th&gt;Angular&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React is a library and has only the View layer&lt;/td&gt; &#xA;     &lt;td&gt;Angular is a framework and has complete MVC functionality&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React handles rendering on the server side&lt;/td&gt; &#xA;     &lt;td&gt;AngularJS renders only on the client side but Angular 2 and above renders on the server side&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React uses JSX that looks like HTML in JS which can be confusing&lt;/td&gt; &#xA;     &lt;td&gt;Angular follows the template approach for HTML, which makes code shorter and easy to understand&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React Native, which is a React type to build mobile applications are faster and more stable&lt;/td&gt; &#xA;     &lt;td&gt;Ionic, Angular&#39;s mobile native app is relatively less stable and slower&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;In React, data flows only in one way and hence debugging is easy&lt;/td&gt; &#xA;     &lt;td&gt;In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;201&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why React tab is not showing up in DevTools?&lt;/h3&gt; &lt;p&gt;When the page loads, &lt;em&gt;React DevTools&lt;/em&gt; sets a global named &lt;code&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/code&gt;, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won&#39;t show up the tab.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;202&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Styled Components?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;203&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Give an example of Styled Components?&lt;/h3&gt; &lt;p&gt;Lets create &lt;code&gt;&amp;lt;Title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Wrapper&amp;gt;&lt;/code&gt; components with specific styles for each.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;import styled from &#39;styled-components&#39;&#xA;&#xA;// Create a &amp;lt;Title&amp;gt; component that renders an &amp;lt;h1&amp;gt; which is centered, red and sized at 1.5em&#xA;const Title = styled.h1`&#xA;  font-size: 1.5em;&#xA;  text-align: center;&#xA;  color: palevioletred;&#xA;`&#xA;&#xA;// Create a &amp;lt;Wrapper&amp;gt; component that renders a &amp;lt;section&amp;gt; with some padding and a papayawhip background&#xA;const Wrapper = styled.section`&#xA;  padding: 4em;&#xA;  background: papayawhip;&#xA;`&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These two variables, &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt;, are now components that you can render just like any other react component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Wrapper&amp;gt;&#xA;  &amp;lt;Title&amp;gt;{&#39;Lets start first styled component!&#39;}&amp;lt;/Title&amp;gt;&#xA;&amp;lt;/Wrapper&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;204&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Relay?&lt;/h3&gt; &lt;p&gt;Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;205&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use TypeScript in &lt;code&gt;create-react-app&lt;/code&gt; application?&lt;/h3&gt; &lt;p&gt;Starting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, &lt;code&gt;create-react-app&lt;/code&gt; now supports typescript natively. You can just pass &lt;code&gt;--typescript&lt;/code&gt; option as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-react-app my-app --typescript&#xA;&#xA;# or&#xA;&#xA;yarn create react-app my-app --typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But for lower versions of react scripts, just supply &lt;code&gt;--scripts-version&lt;/code&gt; option as &lt;code&gt;react-scripts-ts&lt;/code&gt; while you create a new project. &lt;code&gt;react-scripts-ts&lt;/code&gt; is a set of adjustments to take the standard &lt;code&gt;create-react-app&lt;/code&gt; project pipeline and bring TypeScript into the mix.&lt;/p&gt; &lt;p&gt;Now the project layout should look like the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;my-app/&#xA;├─ .gitignore&#xA;├─ images.d.ts&#xA;├─ node_modules/&#xA;├─ public/&#xA;├─ src/&#xA;│  └─ ...&#xA;├─ package.json&#xA;├─ tsconfig.json&#xA;├─ tsconfig.prod.json&#xA;├─ tsconfig.test.json&#xA;└─ tslint.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;206&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the main features of Reselect library?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the main features of Reselect library,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Selectors can compute derived data, allowing Redux to store the minimal possible state.&lt;/li&gt; &#xA;   &lt;li&gt;Selectors are efficient. A selector is not recomputed unless one of its arguments changes.&lt;/li&gt; &#xA;   &lt;li&gt;Selectors are composable. They can be used as input to other selectors.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Give an example of Reselect usage?&lt;/h4&gt; &lt;p&gt;Let&#39;s take calculations and different amounts of a shipment order with the simplified usage of Reselect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createSelector } from &#39;reselect&#39;&#xA;&#xA;const shopItemsSelector = state =&amp;gt; state.shop.items&#xA;const taxPercentSelector = state =&amp;gt; state.shop.taxPercent&#xA;&#xA;const subtotalSelector = createSelector(&#xA;  shopItemsSelector,&#xA;  items =&amp;gt; items.reduce((acc, item) =&amp;gt; acc + item.value, 0)&#xA;)&#xA;&#xA;const taxSelector = createSelector(&#xA;  subtotalSelector,&#xA;  taxPercentSelector,&#xA;  (subtotal, taxPercent) =&amp;gt; subtotal * (taxPercent / 100)&#xA;)&#xA;&#xA;export const totalSelector = createSelector(&#xA;  subtotalSelector,&#xA;  taxSelector,&#xA;  (subtotal, tax) =&amp;gt; ({ total: subtotal + tax })&#xA;)&#xA;&#xA;let exampleState = {&#xA;  shop: {&#xA;    taxPercent: 8,&#xA;    items: [&#xA;      { name: &#39;apple&#39;, value: 1.20 },&#xA;      { name: &#39;orange&#39;, value: 0.95 },&#xA;    ]&#xA;  }&#xA;}&#xA;&#xA;console.log(subtotalSelector(exampleState)) // 2.15&#xA;console.log(taxSelector(exampleState))      // 0.172&#xA;console.log(totalSelector(exampleState))    // { total: 2.322 }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;209&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Does the statics object work with ES6 classes in React?&lt;/h3&gt; &lt;p&gt;No, &lt;code&gt;statics&lt;/code&gt; only works with &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;someComponent= React.createClass({&#xA;  statics: {&#xA;    someMethod: function() {&#xA;      // ..&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can write statics inside ES6+ classes as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Component extends React.Component {&#xA;  static propTypes = {&#xA;    // ...&#xA;  }&#xA;&#xA;  static someMethod() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or writing them outside class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Component extends React.Component {&#xA;   ....&#xA;}&#xA;&#xA;Component.propTypes = {...}&#xA;Component.someMethod = function(){....}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;210&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can Redux only be used with React?&lt;/h3&gt; &lt;p&gt;Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;211&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do you need to have a particular build tool to use Redux?&lt;/h3&gt; &lt;p&gt;Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;212&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How Redux Form &lt;code&gt;initialValues&lt;/code&gt; get updated from state?&lt;/h3&gt; &lt;p&gt;You need to add &lt;code&gt;enableReinitialize : true&lt;/code&gt; setting.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const InitializeFromStateForm = reduxForm({&#xA;  form: &#39;initializeFromState&#39;,&#xA;  enableReinitialize : true&#xA;})(UserEdit)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your &lt;code&gt;initialValues&lt;/code&gt; prop gets updated, your form will update too.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;213&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How React PropTypes allow different types for one prop?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;oneOfType()&lt;/code&gt; method of &lt;code&gt;PropTypes&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, the height property can be defined with either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; type as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Component.propTypes = {&#xA;  size: PropTypes.oneOfType([&#xA;    PropTypes.string,&#xA;    PropTypes.number&#xA;  ])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;214&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I import an SVG file as react component?&lt;/h3&gt; &lt;p&gt;You can import SVG directly as component instead of loading it as a file. This feature is available with &lt;code&gt;react-scripts@2.0.0&lt;/code&gt; and higher.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { ReactComponent as Logo } from &#39;./logo.svg&#39;&#xA;&#xA;const App = () =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;&#xA;    {/* Logo is an actual react component */}&#xA;    &amp;lt;Logo /&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don&#39;t forget about the curly braces in the import.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;215&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are inline ref callbacks or functions not recommended?&lt;/h3&gt; &lt;p&gt;If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class UserForm extends Component {&#xA;  handleSubmit = () =&amp;gt; {&#xA;    console.log(&#34;Input Value is: &#34;, this.input.value)&#xA;  }&#xA;&#xA;&#xA;  render () {&#xA;   return (&#xA;     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;       &amp;lt;input&#xA;         type=&#39;text&#39;&#xA;         ref={(input) =&amp;gt; this.input = input} /&amp;gt; // Access DOM input in handle submit&#xA;       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;&#xA;     &amp;lt;/form&amp;gt;&#xA;   )&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class UserForm extends Component {&#xA; handleSubmit = () =&amp;gt; {&#xA;   console.log(&#34;Input Value is: &#34;, this.input.value)&#xA; }&#xA;&#xA; setSearchInput = (input) =&amp;gt; {&#xA;   this.input = input&#xA; }&#xA;&#xA; render () {&#xA;   return (&#xA;     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;       &amp;lt;input&#xA;         type=&#39;text&#39;&#xA;         ref={this.setSearchInput} /&amp;gt; // Access DOM input in handle submit&#xA;       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;&#xA;     &amp;lt;/form&amp;gt;&#xA;   )&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;**Note:** In React v16.3,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;216&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is render hijacking in react?&lt;/h3&gt; &lt;p&gt;The concept of render hijacking is the ability to control what a component will output from another component. It means that you decorate your component by wrapping it into a Higher-Order component. By wrapping, you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enable hijacking, but by using HOC you make your component behave differently.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;217&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are HOC factory implementations?&lt;/h3&gt; &lt;p&gt;There are two main ways of implementing HOCs in React.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Props Proxy (PP) and&lt;/li&gt; &#xA;   &lt;li&gt;Inheritance Inversion (II).&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;But they follow different approaches for manipulating the &lt;em&gt;WrappedComponent&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Props Proxy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name &lt;strong&gt;Props Proxy&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&#xA;function ppHOC(WrappedComponent) {&#xA; return class PP extends React.Component {&#xA;   render() {&#xA;     return &amp;lt;WrappedComponent {...this.props}/&amp;gt;&#xA;   }&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Inheritance Inversion&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems &lt;strong&gt;inverse&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function iiHOC(WrappedComponent) {&#xA; return class Enhancer extends WrappedComponent {&#xA;   render() {&#xA;     return super.render()&#xA;   }&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;218&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pass numbers to React component?&lt;/h3&gt; &lt;p&gt;You should be passing the numbers via curly braces({}) where as strings in quotes&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;   React.render(&amp;lt;User age={30} department={&#34;IT&#34;} /&amp;gt;, document.getElementById(&#39;container&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;219&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/h3&gt; &lt;p&gt;It is up to the developer&#39;s decision, i.e., it is developer&#39;s job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as “is this dropdown currently open”, inside a component&#39;s internal state.&lt;/p&gt; &lt;p&gt;Below are the thumb rules to determine what kind of data should be put into Redux&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Do other parts of the application care about this data?&lt;/li&gt; &#xA;   &lt;li&gt;Do you need to be able to create further derived data based on this original data?&lt;/li&gt; &#xA;   &lt;li&gt;Is the same data being used to drive multiple components?&lt;/li&gt; &#xA;   &lt;li&gt;Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?&lt;/li&gt; &#xA;   &lt;li&gt;Do you want to cache the data (i.e, use what&#39;s in state if it&#39;s already there instead of re-requesting it)?&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;220&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of registerServiceWorker in React?&lt;/h3&gt; &lt;p&gt;React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on a slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that&#39;s what you should know about service worker for now. It&#39;s all about adding offline capabilities to your site.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;   import React from &#39;react&#39;;&#xA;   import ReactDOM from &#39;react-dom&#39;;&#xA;   import App from &#39;./App&#39;;&#xA;   import registerServiceWorker from &#39;./registerServiceWorker&#39;;&#xA;&#xA;   ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;root&#39;));&#xA;   registerServiceWorker();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;221&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React memo function?&lt;/h3&gt; &lt;p&gt;Class components can be restricted from re-rendering when their input props are the same using &lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in &lt;strong&gt;React.memo&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyComponent = React.memo(function MyComponent(props) {&#xA; /* only rerenders if props change */&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;222&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React lazy function?&lt;/h3&gt; The &lt;code&gt;React.lazy&lt;/code&gt; function lets you render a dynamic import as a regular component. It will automatically load the bundle containing the &lt;code&gt;OtherComponent&lt;/code&gt; when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component. &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));&#xA;&#xA;function MyComponent() {&#xA; return (&#xA;   &amp;lt;div&amp;gt;&#xA;     &amp;lt;OtherComponent /&amp;gt;&#xA;   &amp;lt;/div&amp;gt;&#xA; );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.lazy&lt;/code&gt; and &lt;code&gt;Suspense&lt;/code&gt; is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;223&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to prevent unnecessary updates using setState?&lt;/h3&gt; &lt;p&gt;You can compare the current value of the state with an existing state value and decide whether to rerender the page or not. If the values are the same then you need to return &lt;strong&gt;null&lt;/strong&gt; to stop re-rendering otherwise return the latest state value.&lt;/p&gt; &lt;p&gt;For example, the user profile information is conditionally rendered as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;getUserProfile = user =&amp;gt; {&#xA;  const latestAddress = user.address;&#xA;  this.setState(state =&amp;gt; {&#xA;    if (state.address === latestAddress) {&#xA;      return null;&#xA;    } else {&#xA;      return { title: latestAddress };&#xA;    }&#xA;  });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;224&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: Unlike older releases, you don&#39;t need to make sure &lt;strong&gt;render&lt;/strong&gt; method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.&lt;/p&gt; &lt;p&gt;For example, let us take the below list of developers,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const ReactJSDevs = () =&amp;gt; {&#xA;  return [&#xA;    &amp;lt;li key=&#34;1&#34;&amp;gt;John&amp;lt;/li&amp;gt;,&#xA;    &amp;lt;li key=&#34;2&#34;&amp;gt;Jackie&amp;lt;/li&amp;gt;,&#xA;    &amp;lt;li key=&#34;3&#34;&amp;gt;Jordan&amp;lt;/li&amp;gt;&#xA;  ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also merge this array of items in another array component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const JSDevs = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;ul&amp;gt;&#xA;      &amp;lt;li&amp;gt;Brad&amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt;Brodge&amp;lt;/li&amp;gt;&#xA;      &amp;lt;ReactJSDevs/&amp;gt;&#xA;      &amp;lt;li&amp;gt;Brandon&amp;lt;/li&amp;gt;&#xA;    &amp;lt;/ul&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Strings and Numbers:&lt;/strong&gt; You can also return string and number type from the render method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA; return &#39;Welcome to ReactJS questions&#39;;&#xA;}&#xA;// Number&#xA;render() {&#xA; return 2018;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;225&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use class field declarations syntax in React classes?&lt;/h3&gt; &lt;p&gt;React Class Components can be made much more concise using the class field declarations. You can initialize the local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.&lt;/p&gt; &lt;p&gt;Let&#39;s take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class Counter extends Component {&#xA;  state = { value: 0 };&#xA;&#xA;  handleIncrement = () =&amp;gt; {&#xA;    this.setState(prevState =&amp;gt; ({&#xA;      value: prevState.value + 1&#xA;    }));&#xA;  };&#xA;&#xA;  handleDecrement = () =&amp;gt; {&#xA;    this.setState(prevState =&amp;gt; ({&#xA;      value: prevState.value - 1&#xA;    }));&#xA;  };&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        {this.state.value}&#xA;&#xA;        &amp;lt;button onClick={this.handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;&#xA;        &amp;lt;button onClick={this.handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;226&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are hooks?&lt;/h3&gt; &lt;p&gt;Hooks is a new feature(React 16.8) that lets you use state and other React features without writing a class.&lt;/p&gt; &lt;p&gt;Let&#39;s see an example of useState hook:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { useState } from &#39;react&#39;;&#xA;&#xA;function Example() {&#xA;  // Declare a new state variable, which we&#39;ll call &#34;count&#34;&#xA;  const [count, setCount] = useState(0);&#xA;&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;&#xA;      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;&#xA;        Click me&#xA;      &amp;lt;/button&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;227&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What rules need to be followed for hooks?&lt;/h3&gt; &lt;p&gt;You need to follow two rules in order to use hooks,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Call Hooks only at the top level of your react functions. i.e, You shouldn’t call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.&lt;/li&gt; &#xA;   &lt;li&gt;Call Hooks from React Functions only. i.e, You shouldn’t call Hooks from regular JavaScript functions.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;228&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to ensure hooks followed the rules in your project?&lt;/h3&gt; React team released an ESLint plugin called &lt;strong&gt;eslint-plugin-react-hooks&lt;/strong&gt; that enforces these two rules. You can add this plugin to your project using the below command, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm install eslint-plugin-react-hooks@next&#xA;&lt;/code&gt;&lt;/pre&gt; And apply the below config in your ESLint config file, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Your ESLint configuration&#xA;{&#xA;  &#34;plugins&#34;: [&#xA;    // ...&#xA;    &#34;react-hooks&#34;&#xA;  ],&#xA;  &#34;rules&#34;: {&#xA;    // ...&#xA;    &#34;react-hooks/rules-of-hooks&#34;: &#34;error&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; This plugin is intended to use in Create React App by default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;229&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between Flux and Redux?&lt;/h3&gt; &lt;p&gt;Below are the major differences between Flux and Redux&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Flux&lt;/th&gt; &#xA;     &lt;th&gt;Redux&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;State is mutable&lt;/td&gt; &#xA;     &lt;td&gt;State is immutable&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;The Store contains both state and change logic&lt;/td&gt; &#xA;     &lt;td&gt;The Store and change logic are separate&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;There are multiple stores exist&lt;/td&gt; &#xA;     &lt;td&gt;There is only one store exist&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;All the stores are disconnected and flat&lt;/td&gt; &#xA;     &lt;td&gt;Single store with hierarchical reducers&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;It has a singleton dispatcher&lt;/td&gt; &#xA;     &lt;td&gt;There is no concept of dispatcher&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React components subscribe to the store&lt;/td&gt; &#xA;     &lt;td&gt;Container components uses connect function&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;230&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the benefits of React Router V4?&lt;/h3&gt; &lt;p&gt;Below are the main benefits of React Router V4 module,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;In React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;) which wraps specific child router components(&lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;You don&#39;t need to manually set history. The router module will take care history by wrapping routes with &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; component.&lt;/li&gt; &#xA;   &lt;li&gt;The application size is reduced by adding only the specific router module(Web, core, or native)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;231&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;error: - The error object which was thrown&lt;/li&gt; &#xA;   &lt;li&gt;info: - An object with a componentStack key contains the information about which component threw the error.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The method structure would be as follows&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;componentDidCatch(error, info)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;232&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;In which scenarios error boundaries do not catch errors?&lt;/h3&gt; &lt;p&gt;Below are the cases in which error boundaries doesn&#39;t work,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Inside Event handlers&lt;/li&gt; &#xA;   &lt;li&gt;Asynchronous code using &lt;strong&gt;setTimeout or requestAnimationFrame&lt;/strong&gt; callbacks&lt;/li&gt; &#xA;   &lt;li&gt;During Server side rendering&lt;/li&gt; &#xA;   &lt;li&gt;When errors thrown in the error boundary code itself&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;233&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why do you not need error boundaries for event handlers?&lt;/h3&gt; &lt;p&gt;Error boundaries do not catch errors inside event handlers.&lt;/p&gt; &lt;p&gt;React doesn’t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don’t happen during rendering. So if they throw, React still knows what to display on the screen.&lt;/p&gt; &lt;p&gt;If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = { error: null };&#xA;    this.handleClick = this.handleClick.bind(this);&#xA;  }&#xA;&#xA;  handleClick() {&#xA;    try {&#xA;      // Do something that could throw&#xA;    } catch (error) {&#xA;      this.setState({ error });&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    if (this.state.error) {&#xA;      return &amp;lt;h1&amp;gt;Caught an error.&amp;lt;/h1&amp;gt;&#xA;    }&#xA;    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the above example is demonstrating regular JavaScript behavior and doesn’t use error boundaries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;234&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between try catch block and error boundaries?&lt;/h3&gt; &lt;p&gt;Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.&lt;/p&gt; &lt;p&gt;For example, the try catch block used for below imperative code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  showButton();&#xA;} catch (error) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas error boundaries wrap declarative code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;ErrorBoundary&amp;gt;&#xA;  &amp;lt;MyComponent /&amp;gt;&#xA;&amp;lt;/ErrorBoundary&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So if an error occurs in a &lt;strong&gt;componentDidUpdate&lt;/strong&gt; method caused by a &lt;strong&gt;setState&lt;/strong&gt; somewhere deep in the tree, it will still correctly propagate to the closest error boundary.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;235&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the behavior of uncaught errors in react 16?&lt;/h3&gt; In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;236&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the proper placement for error boundaries?&lt;/h3&gt; The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches, &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;You can wrap top-level route components to display a generic error message for the entire application.&lt;/li&gt; &#xA;   &lt;li&gt;You can also wrap individual components in an error boundary to protect them from crashing the rest of the application.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;237&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the benefit of component stack trace from error boundary?&lt;/h3&gt; &lt;p&gt;Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.&lt;/p&gt; &lt;p&gt;For example, BuggyCounter component displays the component stack trace as below,&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/error_boundary.png&#34; alt=&#34;stacktrace&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;238&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the required method to be defined for a class component?&lt;/h3&gt; The &lt;code&gt;render()&lt;/code&gt; method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;239&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the possible return types of render method?&lt;/h3&gt; &lt;p&gt;Below are the list of following types used and return from render method,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;React elements:&lt;/strong&gt; Elements that instruct React to render a DOM node. It includes html elements such as &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; and user defined elements.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Arrays and fragments:&lt;/strong&gt; Return multiple elements to render as Arrays and Fragments to wrap multiple elements&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Portals:&lt;/strong&gt; Render children into a different DOM subtree.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;String and numbers:&lt;/strong&gt; Render both Strings and Numbers as text nodes in the DOM&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Booleans or null:&lt;/strong&gt; Doesn&#39;t render anything but these types are used to conditionally render content.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;240&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the main purpose of constructor?&lt;/h3&gt; &lt;p&gt;The constructor is mainly used for two purposes,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;To initialize local state by assigning object to this.state&lt;/li&gt; &#xA;   &lt;li&gt;For binding event handler methods to the instance For example, the below code covers both the above cases,&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;constructor(props) {&#xA;  super(props);&#xA;  // Don&#39;t call this.setState() here!&#xA;  this.state = { counter: 0 };&#xA;  this.handleClick = this.handleClick.bind(this);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;241&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it mandatory to define constructor for React component?&lt;/h3&gt; No, it is not mandatory. i.e, If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;242&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are default props?&lt;/h3&gt; &lt;p&gt;The defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.&lt;/p&gt; &lt;p&gt;For example, let us create color default prop for the button component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyButton extends React.Component {&#xA;  // ...&#xA;}&#xA;&#xA;MyButton.defaultProps = {&#xA;  color: &#39;red&#39;&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;props.color&lt;/code&gt; is not provided then it will set the default value to &#39;red&#39;. i.e, Whenever you try to access the color prop it uses default value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;   return &amp;lt;MyButton /&amp;gt; ; // props.color will be set to red&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you provide null value then it remains null value.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;243&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why should not call setState in componentWillUnmount?&lt;/h3&gt; You should not call &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillUnmount()&lt;/code&gt; because once a component instance is unmounted, it will never be mounted again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;244&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of getDerivedStateFromError?&lt;/h3&gt; &lt;p&gt;This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.&lt;/p&gt; &lt;p&gt;The signature of the lifecycle method is as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;static getDerivedStateFromError(error)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let us take error boundary use case with the above lifecycle method for demonstration purpose,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class ErrorBoundary extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = { hasError: false };&#xA;  }&#xA;&#xA;  static getDerivedStateFromError(error) {&#xA;    // Update state so the next render will show the fallback UI.&#xA;    return { hasError: true };&#xA;  }&#xA;&#xA;  render() {&#xA;    if (this.state.hasError) {&#xA;      // You can render any custom fallback UI&#xA;      return &amp;lt;h1&amp;gt;Something went wrong.&amp;lt;/h1&amp;gt;;&#xA;    }&#xA;&#xA;    return this.props.children;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;245&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the methods order when component re-rendered?&lt;/h3&gt; &lt;p&gt;An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt; &#xA;   &lt;li&gt;shouldComponentUpdate()&lt;/li&gt; &#xA;   &lt;li&gt;render()&lt;/li&gt; &#xA;   &lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt; &#xA;   &lt;li&gt;componentDidUpdate()&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;246&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the methods invoked during error handling?&lt;/h3&gt; &lt;p&gt;Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;static getDerivedStateFromError()&lt;/li&gt; &#xA;   &lt;li&gt;componentDidCatch()&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;247&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of displayName class property?&lt;/h3&gt; &lt;p&gt;The displayName string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.&lt;/p&gt; &lt;p&gt;For example, To ease debugging, choose a display name that communicates that it’s the result of a withSubscription HOC.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function withSubscription(WrappedComponent) {&#xA;  class WithSubscription extends React.Component {/* ... */}&#xA;  WithSubscription.displayName = `WithSubscription(${getDisplayName(WrappedComponent)})`;&#xA;  return WithSubscription;&#xA;}&#xA;function getDisplayName(WrappedComponent) {&#xA;  return WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;248&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the browser support for react applications?&lt;/h3&gt; React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use &lt;strong&gt;es5-shim and es5-sham&lt;/strong&gt; polyfill then it even support old browsers that doesn&#39;t support ES5 methods.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;249&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of unmountComponentAtNode method?&lt;/h3&gt; &lt;p&gt;This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.&lt;/p&gt; &lt;p&gt;The method signature would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ReactDOM.unmountComponentAtNode(container)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;250&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is code-splitting?&lt;/h3&gt; &lt;p&gt;Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.&lt;/p&gt; &lt;p&gt;For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the &#39;Load&#39; button. &lt;strong&gt;moduleA.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const moduleA = &#39;Hello&#39;;&#xA;&#xA;export { moduleA };&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;&#xA;&#xA;class App extends Component {&#xA;  handleClick = () =&amp;gt; {&#xA;    import(&#39;./moduleA&#39;)&#xA;      .then(({ moduleA }) =&amp;gt; {&#xA;        // Use moduleA&#xA;      })&#xA;      .catch(err =&amp;gt; {&#xA;        // Handle failure&#xA;      });&#xA;  };&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;button onClick={this.handleClick}&amp;gt;Load&amp;lt;/button&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;export default App;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;251&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the benefit of strict mode?&lt;/h3&gt; &lt;p&gt;The &#xA;   &lt;strictmode&gt;&#xA;     will be helpful in the below cases&#xA;   &lt;/strictmode&gt;&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Identifying components with &lt;strong&gt;unsafe lifecycle methods&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Warning about &lt;strong&gt;legacy string ref&lt;/strong&gt; API usage.&lt;/li&gt; &#xA;   &lt;li&gt;Detecting unexpected &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Detecting &lt;strong&gt;legacy context&lt;/strong&gt; API.&lt;/li&gt; &#xA;   &lt;li&gt;Warning about deprecated findDOMNode usage&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;252&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Keyed Fragments?&lt;/h3&gt; &lt;p&gt;The Fragments declared with the explicit &amp;lt;React.Fragment&amp;gt; syntax may have keys. The general use case is mapping a collection to an array of fragments as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Glossary(props) {&#xA;  return (&#xA;    &amp;lt;dl&amp;gt;&#xA;      {props.items.map(item =&amp;gt; (&#xA;        // Without the `key`, React will fire a key warning&#xA;        &amp;lt;React.Fragment key={item.id}&amp;gt;&#xA;          &amp;lt;dt&amp;gt;{item.term}&amp;lt;/dt&amp;gt;&#xA;          &amp;lt;dd&amp;gt;{item.description}&amp;lt;/dd&amp;gt;&#xA;        &amp;lt;/React.Fragment&amp;gt;&#xA;      ))}&#xA;    &amp;lt;/dl&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;253&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Does React support all HTML attributes?&lt;/h3&gt; &lt;p&gt;As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.&lt;/p&gt; &lt;p&gt;Let us take few props with respect to standard HTML attributes,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;div tabIndex=&#34;-1&#34; /&amp;gt;      // Just like node.tabIndex DOM API&#xA;&amp;lt;div className=&#34;Button&#34; /&amp;gt; // Just like node.className DOM API&#xA;&amp;lt;input readOnly={true} /&amp;gt;  // Just like node.readOnly DOM API&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;254&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the limitations with HOCs?&lt;/h3&gt; &lt;p&gt;Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don’t use HOCs inside the render method:&lt;/strong&gt; It is not recommended to apply a HOC to a component within the render method of a component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;  // A new version of EnhancedComponent is created on every render&#xA;  // EnhancedComponent1 !== EnhancedComponent2&#xA;  const EnhancedComponent = enhance(MyComponent);&#xA;  // That causes the entire subtree to unmount/remount each time!&#xA;  return &amp;lt;EnhancedComponent /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code impacts on performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static methods must be copied over:&lt;/strong&gt; When you apply a HOC to a component the new component does not have any of the static methods of the original component&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Define a static method&#xA;WrappedComponent.staticMethod = function() {/*...*/}&#xA;// Now apply a HOC&#xA;const EnhancedComponent = enhance(WrappedComponent);&#xA;&#xA;// The enhanced component has no static method&#xA;typeof EnhancedComponent.staticMethod === &#39;undefined&#39; // true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can overcome this by copying the methods onto the container before returning it,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function enhance(WrappedComponent) {&#xA;  class Enhance extends React.Component {/*...*/}&#xA;  // Must know exactly which method(s) to copy :(&#xA;  Enhance.staticMethod = WrappedComponent.staticMethod;&#xA;  return Enhance;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refs aren’t passed through:&lt;/strong&gt; For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;255&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to debug forwardRefs in DevTools?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React.forwardRef&lt;/strong&gt; accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.&lt;/p&gt; &lt;p&gt;For example, If you don&#39;t name the render function or not using displayName property then it will appear as ”ForwardRef” in the DevTools,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const WrappedComponent = React.forwardRef((props, ref) =&amp;gt; {&#xA;  return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But If you name the render function then it will appear as &lt;strong&gt;”ForwardRef(myFunction)”&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const WrappedComponent = React.forwardRef(&#xA;  function myFunction(props, ref) {&#xA;    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As an alternative, You can also set displayName property for forwardRef function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function logProps(Component) {&#xA;  class LogProps extends React.Component {&#xA;    // ...&#xA;  }&#xA;&#xA;  function forwardRef(props, ref) {&#xA;    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;  }&#xA;&#xA;  // Give this component a more helpful display name in DevTools.&#xA;  // e.g. &#34;ForwardRef(logProps(MyComponent))&#34;&#xA;  const name = Component.displayName || Component.name;&#xA;  forwardRef.displayName = `logProps(${name})`;&#xA;&#xA;  return React.forwardRef(forwardRef);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;256&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;When component props defaults to true?&lt;/h3&gt; &lt;p&gt;If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.&lt;/p&gt; &lt;p&gt;For example, below expressions are equivalent,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;MyInput autocomplete /&amp;gt;&#xA;&#xA;&amp;lt;MyInput autocomplete={true} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, &lt;code&gt;{name}&lt;/code&gt; which is short for &lt;code&gt;{name: name}&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;257&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is NextJS and major features of it?&lt;/h3&gt; &lt;p&gt;Next.js is a popular and lightweight framework for static and server‑rendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Server-rendered by default&lt;/li&gt; &#xA;   &lt;li&gt;Automatic code splitting for faster page loads&lt;/li&gt; &#xA;   &lt;li&gt;Simple client-side routing (page based)&lt;/li&gt; &#xA;   &lt;li&gt;Webpack-based dev environment which supports (HMR)&lt;/li&gt; &#xA;   &lt;li&gt;Able to implement with Express or any other Node.js HTTP server&lt;/li&gt; &#xA;   &lt;li&gt;Customizable with your own Babel and Webpack configurations&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;258&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you pass an event handler to a component?&lt;/h3&gt; &lt;p&gt;You can pass event handlers and other functions as props to child components. It can be used in child component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;259&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it good to use arrow functions in render methods?&lt;/h3&gt; &lt;p&gt;Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Foo extends Component {&#xA;  handleClick() {&#xA;    console.log(&#39;Click happened&#39;);&#xA;  }&#xA;  render() {&#xA;    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using an arrow function in render method creates a new function each time the component renders, which may have performance implications&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;260&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to prevent a function from being called multiple times?&lt;/h3&gt; &lt;p&gt;If you use an event handler such as &lt;strong&gt;onClick or onScroll&lt;/strong&gt; and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Throttling:&lt;/strong&gt; Changes based on a time based frequency. For example, it can be used using _.throttle lodash function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Debouncing:&lt;/strong&gt; Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;RequestAnimationFrame throttling:&lt;/strong&gt; Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;261&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How JSX prevents Injection Attacks?&lt;/h3&gt; &lt;p&gt;React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered.&lt;/p&gt; &lt;p&gt;For example, you can embed user input as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const name = response.potentiallyMaliciousInput;&#xA;const element = &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way you can prevent XSS(Cross-site-scripting) attacks in the application.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;262&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you update rendered elements?&lt;/h3&gt; &lt;p&gt;You can update UI(represented by rendered element) by passing the newly created element to ReactDOM&#39;s render method.&lt;/p&gt; &lt;p&gt;For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function tick() {&#xA;  const element = (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;h2&amp;gt;It is {new Date().toLocaleTimeString()}.&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;  ReactDOM.render(element, document.getElementById(&#39;root&#39;));&#xA;}&#xA;&#xA;setInterval(tick, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;263&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you say that props are readonly?&lt;/h3&gt; &lt;p&gt;When you declare a component as a function or a class, it must never modify its own props.&lt;/p&gt; &lt;p&gt;Let us take a below capital function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function capital(amount, interest) {&#xA;   return amount + interest;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above function is called “pure” because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying &#34;All React components must act like pure functions with respect to their props.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;264&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you say that state updates are merged?&lt;/h3&gt; &lt;p&gt;When you call setState() in the component, React merges the object you provide into the current state.&lt;/p&gt; &lt;p&gt;For example, let us take a facebook user with posts and comments details as state variables,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {&#xA;      posts: [],&#xA;      comments: []&#xA;    };&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can update them independently with separate &lt;code&gt;setState()&lt;/code&gt; calls as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; componentDidMount() {&#xA;    fetchPosts().then(response =&amp;gt; {&#xA;      this.setState({&#xA;        posts: response.posts&#xA;      });&#xA;    });&#xA;&#xA;    fetchComments().then(response =&amp;gt; {&#xA;      this.setState({&#xA;        comments: response.comments&#xA;      });&#xA;    });&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code snippets, &lt;code&gt;this.setState({comments})&lt;/code&gt; updates only comments variable without modifying or replacing &lt;code&gt;posts&lt;/code&gt; variable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;265&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you pass arguments to an event handler?&lt;/h3&gt; &lt;p&gt;During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.&lt;/p&gt; &lt;p&gt;Let us take an example of user details updated in a grid,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;button onClick={(e) =&amp;gt; this.updateUser(userId, e)}&amp;gt;Update User details&amp;lt;/button&amp;gt;&#xA;&amp;lt;button onClick={this.updateUser.bind(this, userId)}&amp;gt;Update User details&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the both approaches, the synthetic argument &lt;code&gt;e&lt;/code&gt; is passed as a second argument. You need to pass it explicitly for arrow functions and it will be passed automatically for &lt;code&gt;bind&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;266&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to prevent component from rendering?&lt;/h3&gt; &lt;p&gt;You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Greeting(props) {&#xA;  if (!props.loggedIn) {&#xA;    return null;&#xA;  }&#xA;&#xA;  return (&#xA;    &amp;lt;div className=&#34;greeting&#34;&amp;gt;&#xA;      welcome, {props.name}&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class User extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {loggedIn: false, name: &#39;John&#39;};&#xA;  }&#xA;&#xA;  render() {&#xA;   return (&#xA;       &amp;lt;div&amp;gt;&#xA;         //Prevent component render if it is not loggedIn&#xA;         &amp;lt;Greeting loggedIn={this.state.loggedIn} /&amp;gt;&#xA;         &amp;lt;UserDetails name={this.state.name}&amp;gt;&#xA;       &amp;lt;/div&amp;gt;&#xA;   );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, the &lt;code&gt;greeting&lt;/code&gt; component skips its rendering section by applying condition and returning null value.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;267&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the conditions to safely use the index as a key?&lt;/h3&gt; &lt;p&gt;There are three conditions to make sure, it is safe use the index as a key.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The list and items are static– they are not computed and do not change&lt;/li&gt; &#xA;   &lt;li&gt;The items in the list have no ids&lt;/li&gt; &#xA;   &lt;li&gt;The list is never reordered or filtered.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;268&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Should keys be globally unique?&lt;/h3&gt; &lt;p&gt;The keys used within arrays should be unique among their siblings but they don’t need to be globally unique. i.e, You can use the same keys with two different arrays.&lt;/p&gt; &lt;p&gt;For example, the below &lt;code&gt;Book&lt;/code&gt; component uses two arrays with different arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Book(props) {&#xA;  const index = (&#xA;    &amp;lt;ul&amp;gt;&#xA;      {props.pages.map((page) =&amp;gt;&#xA;        &amp;lt;li key={page.id}&amp;gt;&#xA;          {page.title}&#xA;        &amp;lt;/li&amp;gt;&#xA;      )}&#xA;    &amp;lt;/ul&amp;gt;&#xA;  );&#xA;  const content = props.pages.map((page) =&amp;gt;&#xA;    &amp;lt;div key={page.id}&amp;gt;&#xA;      &amp;lt;h3&amp;gt;{page.title}&amp;lt;/h3&amp;gt;&#xA;      &amp;lt;p&amp;gt;{page.content}&amp;lt;/p&amp;gt;&#xA;      &amp;lt;p&amp;gt;{page.pageNumber}&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      {index}&#xA;      &amp;lt;hr /&amp;gt;&#xA;      {content}&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;269&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the popular choice for form handling?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Formik&lt;/code&gt; is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.&lt;/p&gt; &lt;p&gt;In detail, You can categorize them as follows,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; &#xA;   &lt;li&gt;Validation and error messages&lt;/li&gt; &#xA;   &lt;li&gt;Handling form submission&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;270&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of formik over redux form library?&lt;/h3&gt; &lt;p&gt;Below are the main reasons to recommend formik over redux form library,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.&lt;/li&gt; &#xA;   &lt;li&gt;Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.&lt;/li&gt; &#xA;   &lt;li&gt;Redux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;271&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are you not required to use inheritance?&lt;/h3&gt; In React, it is recommended to use composition over inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component’s look and behavior explicitly and safely. Whereas, If you want to reuse non-UI functionality between components, it is suggested to extract it into a separate JavaScript module. Later components import it and use that function, object, or class, without extending it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;272&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I use web components in react application?&lt;/h3&gt; &lt;p&gt;Yes, you can use web components in a react application. Even though many developers won&#39;t use this combination, it may require especially if you are using third-party UI components that are written using Web Components.&lt;/p&gt; &lt;p&gt;For example, let us use &lt;code&gt;Vaadin&lt;/code&gt; date picker web component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;&#xA;import &#39;./App.css&#39;;&#xA;import &#39;@vaadin/vaadin-date-picker&#39;;&#xA;class App extends Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div className=&#34;App&#34;&amp;gt;&#xA;        &amp;lt;vaadin-date-picker label=&#34;When were you born?&#34;&amp;gt;&amp;lt;/vaadin-date-picker&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;273&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is dynamic import?&lt;/h3&gt; &lt;p&gt;You can achieve code-splitting in your app using dynamic import.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of addition,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Normal Import&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { add } from &#39;./math&#39;;&#xA;console.log(add(10, 20));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Dynamic Import&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import(&#34;./math&#34;).then(math =&amp;gt; {&#xA;  console.log(math.add(10, 20));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;274&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are loadable components?&lt;/h3&gt; &lt;p&gt;If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.&lt;/p&gt; &lt;p&gt;Lets take an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import loadable from &#39;@loadable/component&#39;&#xA;&#xA;const OtherComponent = loadable(() =&amp;gt; import(&#39;./OtherComponent&#39;))&#xA;&#xA;function MyComponent() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;OtherComponent /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now OtherComponent will be loaded in a separated bundle&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;275&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is suspense component?&lt;/h3&gt; &lt;p&gt;If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you’re waiting for it to load using a loading indicator. This can be done using &lt;strong&gt;Suspense&lt;/strong&gt; component.&lt;/p&gt; &lt;p&gt;For example, the below code uses suspense component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));&#xA;&#xA;function MyComponent() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;&#xA;        &amp;lt;OtherComponent /&amp;gt;&#xA;      &amp;lt;/Suspense&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code, Suspense is wrapped above the lazy component.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;276&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is route based code splitting?&lt;/h3&gt; &lt;p&gt;One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won&#39;t be disturbed.&lt;/p&gt; &lt;p&gt;Let us take an example of route based website using libraries like React Router with React.lazy,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { BrowserRouter as Router, Route, Switch } from &#39;react-router-dom&#39;;&#xA;import React, { Suspense, lazy } from &#39;react&#39;;&#xA;&#xA;const Home = lazy(() =&amp;gt; import(&#39;./routes/Home&#39;));&#xA;const About = lazy(() =&amp;gt; import(&#39;./routes/About&#39;));&#xA;&#xA;const App = () =&amp;gt; (&#xA;  &amp;lt;Router&amp;gt;&#xA;    &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;&#xA;      &amp;lt;Switch&amp;gt;&#xA;        &amp;lt;Route exact path=&#34;/&#34; component={Home}/&amp;gt;&#xA;        &amp;lt;Route path=&#34;/about&#34; component={About}/&amp;gt;&#xA;      &amp;lt;/Switch&amp;gt;&#xA;    &amp;lt;/Suspense&amp;gt;&#xA;  &amp;lt;/Router&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, the code splitting will happen at each route level.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;277&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Give an example on How to use context?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt; is designed to share data that can be considered &lt;strong&gt;global&lt;/strong&gt; for a tree of React components.&lt;/p&gt; &lt;p&gt;For example, in the code below lets manually thread through a “theme” prop in order to style the Button component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//Lets create a context with a default theme value &#34;luna&#34;&#xA;const ThemeContext = React.createContext(&#39;luna&#39;);&#xA;// Create App component where it uses provider to pass theme value in the tree&#xA;class App extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;ThemeContext.Provider value=&#34;nova&#34;&amp;gt;&#xA;        &amp;lt;Toolbar /&amp;gt;&#xA;      &amp;lt;/ThemeContext.Provider&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;// A middle component where you don&#39;t need to pass theme prop anymore&#xA;function Toolbar(props) {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;ThemedButton /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;// Lets read theme value in the button component to use&#xA;class ThemedButton extends React.Component {&#xA;  static contextType = ThemeContext;&#xA;  render() {&#xA;    return &amp;lt;Button theme={this.context} /&amp;gt;;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;278&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of default value in context?&lt;/h3&gt; &lt;p&gt;The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.&lt;/p&gt; &lt;p&gt;Below code snippet provides default theme value as Luna.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const MyContext = React.createContext(defaultValue);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;279&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you use contextType?&lt;/h3&gt; &lt;p&gt;ContextType is used to consume the context object. The contextType property can be used in two ways,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;contextType as property of class:&lt;/strong&gt; The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.&lt;/p&gt; &lt;p&gt;Lets assign contextType property on MyClass as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyClass extends React.Component {&#xA;  componentDidMount() {&#xA;    let value = this.context;&#xA;    /* perform a side-effect at mount using the value of MyContext */&#xA;  }&#xA;  componentDidUpdate() {&#xA;    let value = this.context;&#xA;    /* ... */&#xA;  }&#xA;  componentWillUnmount() {&#xA;    let value = this.context;&#xA;    /* ... */&#xA;  }&#xA;  render() {&#xA;    let value = this.context;&#xA;    /* render something based on the value of MyContext */&#xA;  }&#xA;}&#xA;MyClass.contextType = MyContext;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static field&lt;/strong&gt; You can use a static class field to initialize your contextType using public class field syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyClass extends React.Component {&#xA;  static contextType = MyContext;&#xA;  render() {&#xA;    let value = this.context;&#xA;    /* render something based on the value */&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;280&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is a consumer?&lt;/h3&gt; &lt;p&gt;A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.&lt;/p&gt; &lt;p&gt;Lets take a simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;MyContext.Consumer&amp;gt;&#xA;  {value =&amp;gt; /* render something based on the context value */}&#xA;&amp;lt;/MyContext.Consumer&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;281&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you solve performance corner cases while using context?&lt;/h3&gt; &lt;p&gt;The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders.&lt;/p&gt; &lt;p&gt;For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;Provider value={{something: &#39;something&#39;}}&amp;gt;&#xA;        &amp;lt;Toolbar /&amp;gt;&#xA;      &amp;lt;/Provider&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be solved by lifting up the value to parent state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {&#xA;      value: {something: &#39;something&#39;},&#xA;    };&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;Provider value={this.state.value}&amp;gt;&#xA;        &amp;lt;Toolbar /&amp;gt;&#xA;      &amp;lt;/Provider&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;282&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of forward ref in HOCs?&lt;/h3&gt; &lt;p&gt;Refs will not get passed through because ref is not a prop. It is handled differently by React just like &lt;strong&gt;key&lt;/strong&gt;. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.&lt;/p&gt; &lt;p&gt;The below HOC logs all props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    function logProps(Component) {&#xA;      class LogProps extends React.Component {&#xA;        componentDidUpdate(prevProps) {&#xA;          console.log(&#39;old props:&#39;, prevProps);&#xA;          console.log(&#39;new props:&#39;, this.props);&#xA;        }&#xA;&#xA;        render() {&#xA;          const {forwardedRef, ...rest} = this.props;&#xA;&#xA;          // Assign the custom prop &#34;forwardedRef&#34; as a ref&#xA;          return &amp;lt;Component ref={forwardedRef} {...rest} /&amp;gt;;&#xA;        }&#xA;      }&#xA;&#xA;      return React.forwardRef((props, ref) =&amp;gt; {&#xA;        return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;      });&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s use this HOC to log all props that get passed to our “fancy button” component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    class FancyButton extends React.Component {&#xA;      focus() {&#xA;        // ...&#xA;      }&#xA;&#xA;      // ...&#xA;    }&#xA;    export default logProps(FancyButton);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now let&#39;s create a ref and pass it to FancyButton component. In this case, you can set focus to button element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    import FancyButton from &#39;./FancyButton&#39;;&#xA;&#xA;    const ref = React.createRef();&#xA;    ref.current.focus();&#xA;    &amp;lt;FancyButton&#xA;      label=&#34;Click Me&#34;&#xA;      handleClick={handleClick}&#xA;      ref={ref}&#xA;    /&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;283&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is ref argument available for all functions or class components?&lt;/h3&gt; Regular function or class components don’t receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;284&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why do you need additional care for component libraries while using forward refs?&lt;/h3&gt; When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;285&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create react class components without ES6?&lt;/h3&gt; &lt;p&gt;If you don’t use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Greeting = createReactClass({&#xA;  getDefaultProps: function() {&#xA;      return {&#xA;        name: &#39;Jhohn&#39;&#xA;      };&#xA;    },&#xA;  getInitialState: function() {&#xA;      return {message: this.props.message};&#xA;    },&#xA;  handleClick: function() {&#xA;     console.log(this.state.message);&#xA;  },&#xA;  render: function() {&#xA;    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use createReactClass then auto binding is available for all methods. i.e, You don&#39;t need to use &lt;code&gt;.bind(this)&lt;/code&gt; with in constructor for event handlers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;286&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it possible to use react without JSX?&lt;/h3&gt; &lt;p&gt;Yes, JSX is not mandatory for using React. Actually it is convenient when you don’t want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take a greeting example with JSX,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Greeting extends React.Component {&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;Hello {this.props.message}&amp;lt;/div&amp;gt;;&#xA;  }&#xA;}&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;Greeting message=&#34;World&#34; /&amp;gt;,&#xA;  document.getElementById(&#39;root&#39;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the same code without JSX as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Greeting extends React.Component {&#xA;  render() {&#xA;    return React.createElement(&#39;div&#39;, null, `Hello ${this.props.message}`);&#xA;  }&#xA;}&#xA;&#xA;ReactDOM.render(&#xA;  React.createElement(Greeting, {message: &#39;World&#39;}, null),&#xA;  document.getElementById(&#39;root&#39;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;287&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is diffing algorithm?&lt;/h3&gt; &lt;p&gt;React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.&lt;/p&gt; &lt;p&gt;In this case, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt; &#xA;   &lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;288&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the rules covered by diffing algorithm?&lt;/h3&gt; &lt;p&gt;When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Elements Of Different Types:&lt;/strong&gt; Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements &lt;a&gt; to &lt;img&gt;, or from &#xA;     &lt;article&gt;&#xA;       to &#xA;      &lt;comment&gt;&#xA;        of different types lead a full rebuild.&#xA;      &lt;/comment&gt;&#xA;     &lt;/article&gt;&lt;/a&gt;&lt;/li&gt;&#xA;   &lt;a&gt; &lt;li&gt;&lt;strong&gt;DOM Elements Of The Same Type:&lt;/strong&gt; When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;div className=&#34;show&#34; title=&#34;ReactJS&#34; /&amp;gt;&#xA;&#xA;&amp;lt;div className=&#34;hide&#34; title=&#34;ReactJS&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Component Elements Of The Same Type:&lt;/strong&gt; When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Recursing On Children:&lt;/strong&gt; when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there’s a difference. For example, when adding an element at the end of the children, converting between these two trees works well. &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&#xA;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Handling keys:&lt;/strong&gt; React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,&lt;/li&gt; &lt;/a&gt;&#xA;  &lt;/ol&gt;&lt;a&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li key=&#34;2015&#34;&amp;gt;Duke&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li key=&#34;2016&#34;&amp;gt;Villanova&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&#xA;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li key=&#34;2014&#34;&amp;gt;Connecticut&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li key=&#34;2015&#34;&amp;gt;Duke&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li key=&#34;2016&#34;&amp;gt;Villanova&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&lt;/li&gt;&#xA; &lt;a&gt; &lt;/a&gt;&#xA;&lt;/ol&gt;&#xA;&lt;a&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;289&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;When do you need to use refs?&lt;/h3&gt; &lt;p&gt;There are few use cases to go for refs,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; &#xA;   &lt;li&gt;Triggering imperative animations.&lt;/li&gt; &#xA;   &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;290&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Must prop be named as render for render props?&lt;/h3&gt; &lt;p&gt;Even though the pattern named render props, you don’t have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a “render prop”. Lets take an example with the children prop for render props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Mouse children={mouse =&amp;gt; (&#xA;  &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;&#xA;)}/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Actually children prop doesn’t need to be named in the list of “attributes” in JSX element. Instead, you can keep it directly inside element,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Mouse&amp;gt;&#xA;  {mouse =&amp;gt; (&#xA;    &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;&#xA;  )}&#xA;&amp;lt;/Mouse&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While using this above technique(without any name), explicitly state that children should be a function in your propTypes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Mouse.propTypes = {&#xA;  children: PropTypes.func.isRequired&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;291&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the problems of using render props with pure components?&lt;/h3&gt; If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;292&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you create HOC using render props?&lt;/h3&gt; &lt;p&gt;You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a &#xA;   &lt;mouse&gt;&#xA;     component, you could easily create one using a regular &#xA;    &lt;mouse&gt;&#xA;      with a render prop.&#xA;    &lt;/mouse&gt;&#xA;   &lt;/mouse&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function withMouse(Component) {&#xA;  return class extends React.Component {&#xA;    render() {&#xA;      return (&#xA;        &amp;lt;Mouse render={mouse =&amp;gt; (&#xA;          &amp;lt;Component {...this.props} mouse={mouse} /&amp;gt;&#xA;        )}/&amp;gt;&#xA;      );&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way render props gives the flexibility of using either pattern.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;293&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is windowing technique?&lt;/h3&gt; Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;294&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you print falsy values in JSX?&lt;/h3&gt; &lt;p&gt;The falsy values such as false, null, undefined, and true are valid children but they don&#39;t render anything. If you still want to display them then you need to convert it to string. Let&#39;s take an example on how to convert to a string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;div&amp;gt;&#xA;  My JavaScript variable is {String(myVariable)}.&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;295&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the typical use case of portals?&lt;/h3&gt; &lt;p&gt;React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context (e.g. z-index, position, opacity) and you need to visually “break out” of its container.&lt;/p&gt; &lt;p&gt;For example, dialogs, global message notifications, hovercards, and tooltips.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;296&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you set default value for uncontrolled component?&lt;/h3&gt; &lt;p&gt;In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;strong&gt;defaultValue&lt;/strong&gt; attribute instead of &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;      &amp;lt;label&amp;gt;&#xA;        User Name:&#xA;        &amp;lt;input&#xA;          defaultValue=&#34;John&#34;&#xA;          type=&#34;text&#34;&#xA;          ref={this.input} /&amp;gt;&#xA;      &amp;lt;/label&amp;gt;&#xA;      &amp;lt;input type=&#34;submit&#34; value=&#34;Submit&#34; /&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The same applies for &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textArea&lt;/code&gt; inputs. But you need to use &lt;strong&gt;defaultChecked&lt;/strong&gt; for &lt;code&gt;checkbox&lt;/code&gt; and &lt;code&gt;radio&lt;/code&gt; inputs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;297&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is your favorite React stack?&lt;/h3&gt; Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel. You can clone the project &lt;a href=&#34;https://github.com/react-boilerplate/react-boilerplate&#34;&gt;https://github.com/react-boilerplate/react-boilerplate&lt;/a&gt; and start working on any new react project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;298&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Real DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Real DOM and Virtual DOM,&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Real DOM&lt;/th&gt; &#xA;     &lt;th&gt;Virtual DOM&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Updates are slow&lt;/td&gt; &#xA;     &lt;td&gt;Updates are fast&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;DOM manipulation is very expensive.&lt;/td&gt; &#xA;     &lt;td&gt;DOM manipulation is very easy&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;You can update HTML directly.&lt;/td&gt; &#xA;     &lt;td&gt;You Can’t directly update HTML&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;It causes too much of memory wastage&lt;/td&gt; &#xA;     &lt;td&gt;There is no memory wastage&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Creates a new DOM if element updates&lt;/td&gt; &#xA;     &lt;td&gt;It updates the JSX if element update&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;299&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to add Bootstrap to a react application?&lt;/h3&gt; &lt;p&gt;Bootstrap can be added to your React app in a three possible ways,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Using the Bootstrap CDN: This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.&lt;/li&gt; &#xA;   &lt;li&gt;Bootstrap as Dependency: If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm install bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;React Bootstrap Package: In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category, &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;react-bootstrap&lt;/li&gt; &#xA;     &lt;li&gt;reactstrap&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;300&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can you list down top websites or applications using react as front end framework?&lt;/h3&gt; &lt;p&gt;Below are the &lt;code&gt;top 10 websites&lt;/code&gt; using React as their front-end framework,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Facebook&lt;/li&gt; &#xA;   &lt;li&gt;Uber&lt;/li&gt; &#xA;   &lt;li&gt;Instagram&lt;/li&gt; &#xA;   &lt;li&gt;WhatsApp&lt;/li&gt; &#xA;   &lt;li&gt;Khan Academy&lt;/li&gt; &#xA;   &lt;li&gt;Airbnb&lt;/li&gt; &#xA;   &lt;li&gt;Dropbox&lt;/li&gt; &#xA;   &lt;li&gt;Flipboard&lt;/li&gt; &#xA;   &lt;li&gt;Netflix&lt;/li&gt; &#xA;   &lt;li&gt;PayPal&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;301&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it recommended to use CSS In JS technique in React?&lt;/h3&gt; React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;302&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do I need to rewrite all my class components with hooks?&lt;/h3&gt; No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;303&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to fetch data with React Hooks?&lt;/h3&gt; &lt;p&gt;The effect hook called &lt;code&gt;useEffect&lt;/code&gt; is used to fetch the data with axios from the API and to set the data in the local state of the component with the state hook’s update function.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example in which it fetches list of react articles from the API&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { useState, useEffect } from &#39;react&#39;;&#xA;import axios from &#39;axios&#39;;&#xA;&#xA;function App() {&#xA;  const [data, setData] = useState({ hits: [] });&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    (async () =&amp;gt; {&#xA;      const result = await axios(&#xA;        &#39;http://hn.algolia.com/api/v1/search?query=react&#39;,&#xA;      );&#xA;&#xA;      setData(result.data);&#xA;    })()&#xA;  }, []);&#xA;&#xA;  return (&#xA;    &amp;lt;ul&amp;gt;&#xA;      {data.hits.map(item =&amp;gt; (&#xA;        &amp;lt;li key={item.objectID}&amp;gt;&#xA;          &amp;lt;a href={item.url}&amp;gt;{item.title}&amp;lt;/a&amp;gt;&#xA;        &amp;lt;/li&amp;gt;&#xA;      ))}&#xA;    &amp;lt;/ul&amp;gt;&#xA;  );&#xA;}&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember we provided an empty array as second argument to the effect hook to avoid activating it on component updates but only on mounting of the component. i.e, It fetches only on component mount.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;304&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is Hooks cover all use cases for classes?&lt;/h3&gt; Hooks doesn&#39;t cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon &lt;strong&gt;getSnapshotBeforeUpdate&lt;/strong&gt; and &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycles yet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;305&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the stable release for hooks support?&lt;/h3&gt; &lt;p&gt;React includes a stable implementation of React Hooks in 16.8 release for below packages&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React DOM&lt;/li&gt; &#xA;   &lt;li&gt;React DOM Server&lt;/li&gt; &#xA;   &lt;li&gt;React Test Renderer&lt;/li&gt; &#xA;   &lt;li&gt;React Shallow Renderer&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;306&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why do we use array destructuring (square brackets notation) in &lt;code&gt;useState&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;When we declare a state variable with &lt;code&gt;useState&lt;/code&gt;, it returns a pair — an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.&lt;/p&gt; &lt;p&gt;For example, the array index access would look as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; var userStateVariable = useState(&#39;userProfile&#39;); // Returns an array pair&#xA; var user = userStateVariable[0]; // Access first item&#xA; var setUser = userStateVariable[1]; // Access second item&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas with array destructuring the variables can be accessed as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const [user, setUser] = useState(&#39;userProfile&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the sources used for introducing hooks?&lt;/h3&gt; &lt;p&gt;Hooks got the ideas from several different sources. Below are some of them,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Previous experiments with functional APIs in the react-future repository&lt;/li&gt; &#xA;   &lt;li&gt;Community experiments with render prop APIs such as Reactions Component&lt;/li&gt; &#xA;   &lt;li&gt;State variables and state cells in DisplayScript.&lt;/li&gt; &#xA;   &lt;li&gt;Subscriptions in Rx.&lt;/li&gt; &#xA;   &lt;li&gt;Reducer components in ReasonReact.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;308&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you access imperative API of web components?&lt;/h3&gt; Web Components often expose an imperative API to implement its functions. You will need to use a &lt;strong&gt;ref&lt;/strong&gt; to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a &lt;strong&gt;wrapper&lt;/strong&gt; for your Web Component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;309&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is formik?&lt;/h3&gt; &lt;p&gt;Formik is a small react form library that helps you with the three major problems,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; &#xA;   &lt;li&gt;Validation and error messages&lt;/li&gt; &#xA;   &lt;li&gt;Handling form submission&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;310&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/h3&gt; Some of the popular middleware choices for handling asynchronous calls in Redux eco system are &lt;code&gt;Redux Thunk, Redux Promise, Redux Saga&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;311&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do browsers understand JSX code?&lt;/h3&gt; No, browsers can&#39;t understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;312&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Describe about data flow in react?&lt;/h3&gt; React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;313&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is react scripts?&lt;/h3&gt; The &lt;code&gt;react-scripts&lt;/code&gt; package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The &lt;code&gt;react-scripts start&lt;/code&gt; command sets up the development environment and starts a server, as well as hot module reloading.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;314&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the features of create react app?&lt;/h3&gt; &lt;p&gt;Below are the list of some of the features provided by create react app.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React, JSX, ES6, Typescript and Flow syntax support.&lt;/li&gt; &#xA;   &lt;li&gt;Autoprefixed CSS&lt;/li&gt; &#xA;   &lt;li&gt;CSS Reset/Normalize&lt;/li&gt; &#xA;   &lt;li&gt;A live development server&lt;/li&gt; &#xA;   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting&lt;/li&gt; &#xA;   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps&lt;/li&gt; &#xA;   &lt;li&gt;An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;315&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of renderToNodeStream method?&lt;/h3&gt; The &lt;code&gt;ReactDOMServer#renderToNodeStream&lt;/code&gt; method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes. &lt;strong&gt;Note:&lt;/strong&gt; Remember this method is not available in the browser but only server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;316&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is MobX?&lt;/h3&gt; MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages, &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install mobx --save&#xA;npm install mobx-react --save&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;317&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between Redux and MobX?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Redux and MobX,&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Topic&lt;/th&gt; &#xA;     &lt;th&gt;Redux&lt;/th&gt; &#xA;     &lt;th&gt;MobX&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Definition&lt;/td&gt; &#xA;     &lt;td&gt;It is a javascript library for managing the application state&lt;/td&gt; &#xA;     &lt;td&gt;It is a library for reactively managing the state of your applications&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Programming&lt;/td&gt; &#xA;     &lt;td&gt;It is mainly written in ES6&lt;/td&gt; &#xA;     &lt;td&gt;It is written in JavaScript(ES5)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Data Store&lt;/td&gt; &#xA;     &lt;td&gt;There is only one large store exist for data storage&lt;/td&gt; &#xA;     &lt;td&gt;There is more than one store for storage&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Usage&lt;/td&gt; &#xA;     &lt;td&gt;Mainly used for large and complex applications&lt;/td&gt; &#xA;     &lt;td&gt;Used for simple applications&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Performance&lt;/td&gt; &#xA;     &lt;td&gt;Need to be improved&lt;/td&gt; &#xA;     &lt;td&gt;Provides better performance&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;How it stores&lt;/td&gt; &#xA;     &lt;td&gt;Uses JS Object to store&lt;/td&gt; &#xA;     &lt;td&gt;Uses observable to store the data&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;318&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Should I learn ES6 before learning ReactJS?&lt;/h3&gt; &lt;p&gt;No, you don’t have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let&#39;s see some of the frequently used ES6 features,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Destructuring:&lt;/strong&gt; To get props and use them in a component &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// in es 5&#xA; var someData = this.props.someData&#xA; var dispatch = this.props.dispatch&#xA;&#xA;// in es6&#xA;const { someData, dispatch } = this.props&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Spread operator: Helps in passing props down into a component &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// in es 5&#xA;&amp;lt;SomeComponent someData={this.props.someData} dispatch={this.props.dispatch} /&amp;gt;&#xA;&#xA;// in es6&#xA;&amp;lt;SomeComponent {...this.props} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Arrow functions: Makes compact syntax &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// es 5&#xA;var users = usersList.map(function (user) {&#xA; return &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;&#xA;})&#xA;// es 6&#xA;const users = usersList.map(user =&amp;gt; &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;319&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Concurrent Rendering?&lt;/h3&gt; &lt;p&gt;The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there&#39;s something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 1. Part of an app by wrapping with ConcurrentMode&#xA;&amp;lt;React.unstable_ConcurrentMode&amp;gt;&#xA;  &amp;lt;Something /&amp;gt;&#xA;&amp;lt;/React.unstable_ConcurrentMode&amp;gt;&#xA;&#xA;// 2. Whole app using createRoot&#xA;ReactDOM.unstable_createRoot(domNode).render(&amp;lt;App /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;320&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between async mode and concurrent mode?&lt;/h3&gt; Both refers the same thing. Previously concurrent Mode being referred to as &#34;Async Mode&#34; by React team. The name has been changed to highlight React’s ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;321&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I use javascript urls in react16.9?&lt;/h3&gt; &lt;p&gt;Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; and create a security hole.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const companyProfile = {&#xA;  website: &#34;javascript: alert(&#39;Your website is hacked&#39;)&#34;,&#xA;};&#xA;// It will log a warning&#xA;&amp;lt;a href={companyProfile.website}&amp;gt;More details&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember that the future versions will throw an error for javascript URLs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;322&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of eslint plugin for hooks?&lt;/h3&gt; &lt;p&gt;The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with ”use” and a capital letter right after it is a Hook. In particular, the rule enforces that,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Calls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).&lt;/li&gt; &#xA;   &lt;li&gt;Hooks are called in the same order on every render.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;323&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Imperative and Declarative in React?&lt;/h3&gt; &lt;p&gt;Imagine a simple UI component, such as a &#34;Like&#34; button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.&lt;/p&gt; &lt;p&gt;The imperative way of doing this would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if( user.likes() ) {&#xA;    if( hasBlue() ) {&#xA;        removeBlue();&#xA;        addGrey();&#xA;    } else {&#xA;        removeGrey();&#xA;        addBlue();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.&lt;/p&gt; &lt;p&gt;In contrast, the declarative approach would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if( this.state.liked ) {&#xA;    return &amp;lt;blueLike /&amp;gt;;&#xA;} else {&#xA;    return &amp;lt;greyLike /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;324&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the benefits of using typescript with reactjs?&lt;/h3&gt; &lt;p&gt;Below are some of the benefits of using typescript with Reactjs,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;It is possible to use latest JavaScript features&lt;/li&gt; &#xA;   &lt;li&gt;Use of interfaces for complex type definitions&lt;/li&gt; &#xA;   &lt;li&gt;IDEs such as VS Code was made for TypeScript&lt;/li&gt; &#xA;   &lt;li&gt;Avoid bugs with the ease of readability and Validation&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {loadUser}  from &#39;../actions/auth&#39;;&#xA;store.dispatch(loadUser());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;But while using &lt;strong&gt;Context API&lt;/strong&gt;, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as &lt;strong&gt;loadUser&lt;/strong&gt; action will be triggered on each re-render.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#39;react&#39;;&#xA;import ReactDOM from &#39;react-dom&#39;;&#xA;import App from &#39;./App&#39;;&#xA;import AuthState from &#39;./context/auth/AuthState&#39;&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;React.StrictMode&amp;gt;&#xA;    &amp;lt;AuthState&amp;gt;&#xA;      &amp;lt;App /&amp;gt;&#xA;    &amp;lt;/AuthState&amp;gt;&#xA;  &amp;lt;/React.StrictMode&amp;gt;,&#xA;  document.getElementById(&#39;root&#39;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  const authContext = useContext(AuthContext);&#xA;&#xA;  const { loadUser } = authContext;&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    loadUser();&#xA;  },[])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;loadUser&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    const loadUser = async () =&amp;gt; {&#xA;        const token = sessionStorage.getItem(&#39;token&#39;);&#xA;&#xA;        if(!token){&#xA;            dispatch({&#xA;                type: ERROR&#xA;            })&#xA;        }&#xA;        setAuthToken(token);&#xA;&#xA;        try {&#xA;            const res = await axios(&#39;/api/auth&#39;); &#xA;&#xA;            dispatch({&#xA;                type: USER_LOADED,&#xA;                payload: res.data.data&#xA;            })&#xA;            &#xA;        } catch (err) {&#xA;           console.error(err); &#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;326&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the benefits of new JSX transform?&lt;/h3&gt; &lt;p&gt;There are three major benefits of new JSX transform,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;It is possible to use JSX without importing React packages&lt;/li&gt; &#xA;   &lt;li&gt;The compiled output might improve the bundle size in a small amount&lt;/li&gt; &#xA;   &lt;li&gt;The future improvements provides the flexibility to reduce the number of concepts to learn React.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;327&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How does new JSX transform different from old transform?&lt;/h3&gt; &lt;p&gt;The new JSX transform doesn’t require React to be in scope. i.e, You don&#39;t need to import React package for simple scenarios.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example to look at the main differences between the old and the new transform,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Old Transform:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#39;react&#39;;&#xA;&#xA;function App() {&#xA;  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now JSX transform convert the above code into regular JavaScript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#39;react&#39;;&#xA;&#xA;function App() {&#xA;  return React.createElement(&#39;h1&#39;, null, &#39;Good morning!!&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;New Transform:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The new JSX transform doesn&#39;t require any React imports&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function App() {&#xA;  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Under the hood JSX transform compiles to below code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {jsx as _jsx} from &#39;react/jsx-runtime&#39;;&#xA;&#xA;function App() {&#xA;  return _jsx(&#39;h1&#39;, { children: &#39;Good morning!!&#39; });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You still need to import React to use Hooks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;328&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you get redux scaffolding using create-react-app?&lt;/h3&gt; &lt;p&gt;Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Redux Toolkit and React-Redux dependencies&lt;/li&gt; &#xA;   &lt;li&gt;Create and configure Redux store&lt;/li&gt; &#xA;   &lt;li&gt;React-Redux &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; passing the store to React components&lt;/li&gt; &#xA;   &lt;li&gt;Small &#34;counter&#34; example to demo how to add redux logic and React-Redux hooks API to interact with the store from components&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The below commands need to be executed along with template option as below,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Javascript template:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npx create-react-app my-app --template redux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Typescript template:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npx create-react-app my-app --template redux-typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;329&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are React Server components?&lt;/h3&gt; &lt;p&gt;React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React Server Components is still under development and not recommended for production yet.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;330&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is prop drilling?&lt;/h3&gt; Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;331&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is state mutation and how to prevent it?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;State mutation&lt;/code&gt; happens when you try to update the state of a component without actually using &lt;code&gt;setState&lt;/code&gt; function. This can happen when you are trying to do some computations using a state variable and unknowingly save the result in the same state variable. This is the main reason why it is advised to return new instances of state variables from the reducers by using Object.assign({}, ...) or spread syntax.&lt;/p&gt; &lt;p&gt;This can cause unknown issues in the UI as the value of the state variable got updated without telling React to check what all components were being affected from this update and it can cause UI bugs.&lt;/p&gt; &lt;p&gt;Ex:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class A extends React.component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {&#xA;      loading: false&#xA;    }&#xA; }&#xA;&#xA;componentDidMount() {&#xA;  let { loading } = this.state;&#xA;  loading = (() =&amp;gt; true)(); // Trying to perform an operation and directly saving in a state variable&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;How to prevent it:&lt;/strong&gt; Make sure your state variables are immutable by either enforcing immutability by using plugins like Immutable.js, always using &lt;code&gt;setState&lt;/code&gt; to make updates, and returning new instances in reducers when sending updated state values.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;332&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between useState and useRef hook?&lt;/h3&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;useState causes components to re-render after state updates whereas useRef doesn’t cause a component to re-render when the value or state changes. Essentially, useRef is like a “box” that can hold a mutable value in its (.current) property.&lt;/li&gt; &#xA;   &lt;li&gt;useState allows us to update the state inside components. While useRef allows refrencing DOM elements.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don&#39;t know the answer to all of them ⁠— that is ok!&lt;/p&gt; &#xA;&lt;p&gt;Good luck with your interview 😊&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>strapi/strapi</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/strapi/strapi</id>
    <link href="https://github.com/strapi/strapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 Open source Node.js Headless CMS to easily build customisable APIs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://strapi.io/#gh-light-mode-only&#34;&gt; &lt;img src=&#34;https://strapi.io/assets/strapi-logo-dark.svg?sanitize=true&#34; width=&#34;318px&#34; alt=&#34;Strapi logo&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://strapi.io/#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://strapi.io/assets/strapi-logo-light.svg?sanitize=true&#34; width=&#34;318px&#34; alt=&#34;Strapi logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;API creation made simple, secure and fast.&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;The most advanced open-source headless CMS to build powerful APIs with no effort.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://strapi.io/demo&#34;&gt;Try live demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.org/package/@strapi/strapi&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@strapi/strapi/latest.svg?sanitize=true&#34; alt=&#34;NPM Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/strapi/strapi/actions/workflows/tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/strapi/strapi/actions/workflows/tests.yml/badge.svg?branch=master&#34; alt=&#34;Tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.strapi.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/811989166782021633?label=Discord&#34; alt=&#34;Strapi on Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://strapi.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/strapi/strapi/0bcebf77b37182fe021cb59cc19be8f5db4a18ac/public/assets/administration_panel.png&#34; alt=&#34;Administration panel&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Strapi is a free and open-source headless CMS delivering your content anywhere you need.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keep control over your data&lt;/strong&gt;. With Strapi, you know where your data is stored, and you keep full control at all times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Self-hosted&lt;/strong&gt;. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database agnostic&lt;/strong&gt;. Strapi works with SQL databases. You can choose the database you prefer: PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html&#34; target=&#34;_blank&#34;&gt;Read the Getting Started tutorial&lt;/a&gt; or follow the steps below:&lt;/p&gt; &#xA;&lt;h3&gt;⏳ Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install Strapi with this &lt;strong&gt;Quickstart&lt;/strong&gt; command to create a Strapi project instantly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Use &lt;strong&gt;yarn&lt;/strong&gt; to install the Strapi project (recommended). &lt;a href=&#34;https://yarnpkg.com/lang/en/docs/install/&#34;&gt;Install yarn with these docs&lt;/a&gt;.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn create strapi-app my-project --quickstart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Use npm/npx to install the Strapi project.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-strapi-app my-project --quickstart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command generates a brand new project with the default features (authentication, permissions, content management, content type builder &amp;amp; file upload). The &lt;strong&gt;Quickstart&lt;/strong&gt; command installs Strapi using a &lt;strong&gt;SQLite&lt;/strong&gt; database which is used for prototyping in development.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy 🎉&lt;/p&gt; &#xA;&lt;h3&gt;🖐 Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Complete installation requirements can be found in the documentation under &lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment.html&#34;&gt;Installation Requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported operating systems&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu LTS/Debian 9.x&lt;/li&gt; &#xA; &lt;li&gt;CentOS/RHEL 8&lt;/li&gt; &#xA; &lt;li&gt;macOS Mojave&lt;/li&gt; &#xA; &lt;li&gt;Windows 10&lt;/li&gt; &#xA; &lt;li&gt;Docker - &lt;a href=&#34;https://github.com/strapi/strapi-docker&#34;&gt;Docker-Repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NodeJS &amp;gt;= 12 &amp;lt;= 16&lt;/li&gt; &#xA; &lt;li&gt;NPM &amp;gt;= 6.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQL &amp;gt;= 5.7.8&lt;/li&gt; &#xA; &lt;li&gt;MariaDB &amp;gt;= 10.2.7&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL &amp;gt;= 10&lt;/li&gt; &#xA; &lt;li&gt;SQLite &amp;gt;= 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We recommend always using the latest version of Strapi to start your new projects&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern Admin Panel:&lt;/strong&gt; Elegant, entirely customizable and a fully extensible admin panel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure by default:&lt;/strong&gt; Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plugins Oriented:&lt;/strong&gt; Install the auth system, content management, custom plugins, and more, in seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Blazing Fast:&lt;/strong&gt; Built on top of Node.js, Strapi delivers amazing performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Front-end Agnostic:&lt;/strong&gt; Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful CLI:&lt;/strong&gt; Scaffold projects and APIs on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL databases:&lt;/strong&gt; Works with PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://strapi.io/overview&#34;&gt;See more on our website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/strapi/strapi/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before submitting a Pull Request to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Community support&lt;/h2&gt; &#xA;&lt;p&gt;For general help using Strapi, please refer to &lt;a href=&#34;https://docs.strapi.io&#34;&gt;the official Strapi documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.strapi.io&#34;&gt;Discord&lt;/a&gt; (For live discussion with the Community and Strapi team)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/strapi/strapi&#34;&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.strapi.io&#34;&gt;Community Forum&lt;/a&gt; (Questions and Discussions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://feedback.strapi.io&#34;&gt;Feedback section&lt;/a&gt; (Roadmap, Feature requests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/strapijs&#34;&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/Strapi-616063331867161&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/strapi&#34;&gt;YouTube Channel&lt;/a&gt; (Learn from Video Tutorials)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;p&gt;Follow our &lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/update-migration-guides/migration-guides.html&#34;&gt;migration guides&lt;/a&gt; on the documentation to keep your projects up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://feedback.strapi.io&#34;&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See our dedicated &lt;a href=&#34;https://github.com/strapi/documentation&#34;&gt;repository&lt;/a&gt; for the Strapi documentation, or view our documentation live:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html&#34;&gt;Developer docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.strapi.io/user-docs/latest/getting-started/introduction.html&#34;&gt;User guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Try live demo&lt;/h2&gt; &#xA;&lt;p&gt;See for yourself what&#39;s under the hood by getting access to a &lt;a href=&#34;https://strapi.io/demo&#34;&gt;hosted Strapi project&lt;/a&gt; with sample data.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/strapi/strapi/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for licensing information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/react-native</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/facebook/react-native</id>
    <link href="https://github.com/facebook/react-native" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for building native applications using React&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://reactnative.dev/&#34;&gt; React Native &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Learn once, write anywhere:&lt;/strong&gt;&lt;br&gt; Build mobile apps with React. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;React Native is released under the MIT license.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/facebook/react-native&#34;&gt; &lt;img src=&#34;https://circleci.com/gh/facebook/react-native.svg?style=shield&#34; alt=&#34;Current CircleCI build status.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.org/package/react-native&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/react-native?color=brightgreen&amp;amp;label=npm%20package&#34; alt=&#34;Current npm package version.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs welcome!&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=reactnative&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/reactnative.svg?label=Follow%20@reactnative&#34; alt=&#34;Follow @reactnative&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;Getting Started&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/docs/tutorial&#34;&gt;Learn the Basics&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/showcase&#34;&gt;Showcase&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt;Contribute&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/help&#34;&gt;Community&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/.github/SUPPORT.md&#34;&gt;Support&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;React Native brings &lt;a href=&#34;https://reactjs.org/&#34;&gt;&lt;strong&gt;React&lt;/strong&gt;&#39;s&lt;/a&gt; declarative UI framework to iOS and Android. With React Native, you use native UI controls and have full access to the native platform.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative.&lt;/strong&gt; React makes it painless to create interactive UIs. Declarative views make your code more predictable and easier to debug.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Component-Based.&lt;/strong&gt; Build encapsulated components that manage their state, then compose them to make complex UIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer Velocity.&lt;/strong&gt; See local changes in seconds. Changes to JavaScript code can be live reloaded without rebuilding the native app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Reuse code across iOS, Android, and &lt;a href=&#34;https://reactnative.dev/docs/out-of-tree-platforms&#34;&gt;other platforms&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;React Native is developed and supported by many companies and individual core contributors. Find out more in our &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/ECOSYSTEM.md&#34;&gt;ecosystem overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-building-your-first-react-native-app&#34;&gt;Building your first React Native app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-upgrading&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-how-to-contribute&#34;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📋 Requirements&lt;/h2&gt; &#xA;&lt;p&gt;React Native apps may target iOS 11.0 and Android 5.0 (API 21) or newer. You may use Windows, macOS, or Linux as your development operating system, though building and running iOS apps is limited to macOS. Tools like &lt;a href=&#34;https://expo.io&#34;&gt;Expo&lt;/a&gt; can be used to work around this.&lt;/p&gt; &#xA;&lt;h2&gt;🎉 Building your first React Native app&lt;/h2&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;Getting Started guide&lt;/a&gt;. The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snack.expo.io/@hramos/hello,-world!&#34;&gt;Trying out React Native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;Creating a New Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactnative.dev/docs/integration-with-existing-apps&#34;&gt;Adding React Native to an Existing Application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The full documentation for React Native can be found on our &lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The React Native documentation discusses components, APIs, and topics that are specific to React Native. For further documentation on the React API that is shared between React Native and React DOM, refer to the &lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The source for the React Native documentation and website is hosted on a separate repo, &lt;a href=&#34;https://github.com/facebook/react-native-website&#34;&gt;&lt;strong&gt;@facebook/react-native-website&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;Upgrading to new versions of React Native may give you access to more APIs, views, developer tools, and other goodies. See the &lt;a href=&#34;https://reactnative.dev/docs/upgrading&#34;&gt;Upgrading Guide&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;p&gt;React Native releases are discussed &lt;a href=&#34;https://github.com/reactwg/react-native-releases/discussions&#34;&gt;in this discussion repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;👏 How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;The main purpose of this repository is to continue evolving React Native core. We want to make contributing to this project as easy and transparent as possible, and we are grateful to the community for contributing bug fixes and improvements. Read below to learn how you can take part in improving React Native.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://code.fb.com/codeofconduct/&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the &lt;a href=&#34;https://code.fb.com/codeofconduct/&#34;&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React Native.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/facebook/react-native/wiki/Roadmap&#34;&gt;Open Source Roadmap&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can learn more about our vision for React Native in the &lt;a href=&#34;https://github.com/facebook/react-native/wiki/Roadmap&#34;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Good First Issues&lt;/h3&gt; &#xA;&lt;p&gt;We have a list of &lt;a href=&#34;https://github.com/facebook/react-native/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; &#xA;&lt;h3&gt;Discussions&lt;/h3&gt; &#xA;&lt;p&gt;Larger discussions and proposals are discussed in &lt;a href=&#34;https://github.com/react-native-community/discussions-and-proposals&#34;&gt;&lt;strong&gt;@react-native-community/discussions-and-proposals&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;React Native is MIT licensed, as found in the &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;React Native documentation is Creative Commons licensed, as found in the &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/LICENSE-docs&#34;&gt;LICENSE-docs&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/react</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/facebook/react</id>
    <link href="https://github.com/facebook/react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative, efficient, and flexible JavaScript library for building user interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; · &lt;a href=&#34;https://github.com/facebook/react/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/facebook/react&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/react.svg?style=shield&amp;amp;circle-token=:circle-token&#34; alt=&#34;CircleCI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;React is a JavaScript library for building user interfaces.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative:&lt;/strong&gt; React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Component-Based:&lt;/strong&gt; Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Learn Once, Write Anywhere:&lt;/strong&gt; We don&#39;t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using &lt;a href=&#34;https://reactnative.dev/&#34;&gt;React Native&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;Learn how to use React in your project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;React has been designed for gradual adoption from the start, and &lt;strong&gt;you can use as little or as much React as you need&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://reactjs.org/docs/getting-started.html#online-playgrounds&#34;&gt;Online Playgrounds&lt;/a&gt; to get a taste of React.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/add-react-to-a-website.html&#34;&gt;Add React to a Website&lt;/a&gt; as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in one minute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/create-a-new-react-app.html&#34;&gt;Create a New React App&lt;/a&gt; if you&#39;re looking for a powerful JavaScript toolchain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag from a &lt;a href=&#34;https://reactjs.org/docs/cdn-links.html&#34;&gt;CDN&lt;/a&gt;, or as a &lt;code&gt;react&lt;/code&gt; package on &lt;a href=&#34;https://www.npmjs.com/package/react&#34;&gt;npm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the React documentation &lt;a href=&#34;https://reactjs.org/&#34;&gt;on the website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;Getting Started&lt;/a&gt; page for a quick overview.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is divided into several sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/tutorial/tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hello-world.html&#34;&gt;Main Concepts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/jsx-in-depth.html&#34;&gt;Advanced Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/react-api.html&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/community/support.html&#34;&gt;Where to Get Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can improve it by sending pull requests to &lt;a href=&#34;https://github.com/reactjs/reactjs.org&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;We have several examples &lt;a href=&#34;https://reactjs.org/&#34;&gt;on the website&lt;/a&gt;. Here is the first one to get you started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { createRoot } from &#39;react-dom/client&#39;;&#xA;&#xA;function HelloMessage({ name }) {&#xA;  return &amp;lt;div&amp;gt;Hello {name}&amp;lt;/div&amp;gt;;&#xA;}&#xA;&#xA;const root = createRoot(document.getElementById(&#39;container&#39;));&#xA;root.render(&amp;lt;HelloMessage name=&#34;Taylor&#34; /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example will render &#34;Hello Taylor&#34; into a container on the page.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll notice that we used an HTML-like syntax; &lt;a href=&#34;https://reactjs.org/docs/introducing-jsx.html&#34;&gt;we call it JSX&lt;/a&gt;. JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you&#39;re using React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, read &lt;a href=&#34;https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx&#34;&gt;this section&lt;/a&gt; on integrating JSX; otherwise, the &lt;a href=&#34;https://reactjs.org/docs/create-a-new-react-app.html&#34;&gt;recommended JavaScript toolchains&lt;/a&gt; handle it automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://code.fb.com/codeofconduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read &lt;a href=&#34;https://code.fb.com/codeofconduct&#34;&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html&#34;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.&lt;/p&gt; &#xA;&lt;h3&gt;Good First Issues&lt;/h3&gt; &#xA;&lt;p&gt;To help you get your feet wet and get you familiar with our contribution process, we have a list of &lt;a href=&#34;https://github.com/facebook/react/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; that contain bugs that have a relatively limited scope. This is a great place to get started.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;React is &lt;a href=&#34;https://raw.githubusercontent.com/facebook/react/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>terra-money/core</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/terra-money/core</id>
    <link href="https://github.com/terra-money/core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;GO implementation of the Terra 2.0 Protocol&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/terra-money/core/main/core_logo.svg?sanitize=true&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The full-node software implementation of the Terra blockchain.&lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://codecov.io/gh/terra-money/core&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/terra-money/core/branch/main/graph/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/terra-money/core&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/terra-money/core&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://docs.terra.money/&#34;&gt;&lt;strong&gt;Explore the Docs »&lt;/strong&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; &lt;a href=&#34;https://docs.terra.money/docs/develop/module-specifications/README.html&#34;&gt;Terra Core reference&lt;/a&gt; · &lt;a href=&#34;https://pkg.go.dev/github.com/terra-money/core?tab=subdirectories&#34;&gt;Go API&lt;/a&gt; · &lt;a href=&#34;https://lcd.terra.dev/swagger/#/&#34;&gt;Rest API&lt;/a&gt; · &lt;a href=&#34;https://finder.terra.money/&#34;&gt;Finder&lt;/a&gt; · &lt;a href=&#34;https://station.terra.money/&#34;&gt;Station&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Terra migration guides&lt;/h2&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://migrate.terra.money&#34;&gt;migration guide&lt;/a&gt; to learn how to migrate from Terra Classic to the new Terra blockchain.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents &#xA; &lt;!-- omit in toc --&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#what-is-terra&#34;&gt;What is Terra?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#from-binary&#34;&gt;From Binary&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#from-source&#34;&gt;From Source&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#terrad&#34;&gt;terrad&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#node-setup&#34;&gt;Node Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#terra-node-quickstart&#34;&gt;Terra node quickstart&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#join-the-mainnet&#34;&gt;Join the mainnet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#join-a-testnet&#34;&gt;Join a testnet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#run-a-local-testnet&#34;&gt;Run a local testnet&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#run-a-single-node-testnet&#34;&gt;Run a single node testnet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#set-up-a-production-environment&#34;&gt;Set up a production environment&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#increase-maximum-open-files&#34;&gt;Increase maximum open files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#create-a-dedicated-user&#34;&gt;Create a dedicated user&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#port-configuration&#34;&gt;Port configuration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#run-the-server-as-a-daemon&#34;&gt;Run the server as a daemon&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#register-terrad-as-a-service&#34;&gt;Register terrad as a service&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#start-stop-or-restart-service&#34;&gt;Start, stop, or restart service&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#access-logs&#34;&gt;Access logs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Terra?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://terra.money&#34;&gt;Terra&lt;/a&gt;&lt;/strong&gt; is a public, open-source, proof-of-stake blockchain. &lt;strong&gt;The Terra Core&lt;/strong&gt; is the reference implementation of the Terra protocol written in Golang. The Terra Core is powered by the &lt;a href=&#34;https://github.com/cosmos/cosmos-sdk&#34;&gt;Cosmos SDK&lt;/a&gt; and &lt;a href=&#34;https://github.com/tendermint/tendermint&#34;&gt;Tendermint&lt;/a&gt; BFT consensus.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;From Binary&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to install the Terra Core is to download a pre-built binary. You can find the latest binaries on the &lt;a href=&#34;https://github.com/terra-money/core/releases&#34;&gt;releases&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1: Install Golang&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Go v1.18+ or higher is required for The Terra Core.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://go.dev/dl/&#34;&gt;Go 1.18+ from the official site&lt;/a&gt;. Ensure that your &lt;code&gt;GOPATH&lt;/code&gt; and &lt;code&gt;GOBIN&lt;/code&gt; environment variables are properly set up by using the following commands:&lt;/p&gt; &lt;p&gt;For Windows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;wget &amp;lt;https://golang.org/dl/go1.18.2.linux-amd64.tar.gz&amp;gt;&#xA;sudo tar -C /usr/local -xzf go1.18.2.linux-amd64.tar.gz&#xA;export PATH=$PATH:/usr/local/go/bin&#xA;export PATH=$PATH:$(go env GOPATH)/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;For Mac:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=$PATH:/usr/local/go/bin&#xA;export PATH=$PATH:$(go env GOPATH)/bin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Confirm your Go installation by checking the version:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;go version&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2: Get Terra Core source code&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clone the Terra Core from the &lt;a href=&#34;https://github.com/terra-money/core/&#34;&gt;official repo&lt;/a&gt; and check out the &lt;code&gt;main&lt;/code&gt; branch for the latest stable release.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/terra-money/core/&#xA;cd core&#xA;git checkout main&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3: Build Terra core&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to install &lt;code&gt;terrad&lt;/code&gt; to your &lt;code&gt;GOPATH&lt;/code&gt; and build the Terra Core. &lt;code&gt;terrad&lt;/code&gt; is the node daemon and CLI for interacting with a Terra node.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# COSMOS_BUILD_OPTIONS=rocksdb make install&#xA;make install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4: Verify your installation&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify your installation with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terrad version --long&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A successful installation will return the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;name: terra&#xA;server_name: terrad&#xA;version: &amp;lt;x.x.x&amp;gt;&#xA;commit: &amp;lt;Commit hash&amp;gt;&#xA;build_tags: netgo,ledger&#xA;go: go version go1.18.2 darwin/amd64&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;terrad&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;terrad&lt;/code&gt; is the all-in-one CLI and node daemon for interacting with the Terra blockchain.&lt;/p&gt; &#xA;&lt;p&gt;To view various subcommands and their expected arguments, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ terrad --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Stargate Terra App&#xA;&#xA;Usage:&#xA;  terrad [command]&#xA;&#xA;Available Commands:&#xA;  add-genesis-account Add a genesis account to genesis.json&#xA;  collect-gentxs      Collect genesis txs and output a genesis.json file&#xA;  debug               Tool for helping with debugging your application&#xA;  export              Export state to JSON&#xA;  gentx               Generate a genesis tx carrying a self delegation&#xA;  help                Help about any command&#xA;  init                Initialize private validator, p2p, genesis, and application configuration files&#xA;  keys                Manage your application&#39;s keys&#xA;  migrate             Migrate genesis to a specified target version&#xA;  query               Querying subcommands&#xA;  rosetta             spin up a rosetta server&#xA;  start               Run the full node&#xA;  status              Query remote node for status&#xA;  tendermint          Tendermint subcommands&#xA;  testnet             Initialize files for a terrad testnet&#xA;  tx                  Transactions subcommands&#xA;  unsafe-reset-all    Resets the blockchain database, removes address book files, and resets data/priv_validator_state.json to the genesis state&#xA;  validate-genesis    validates the genesis file at the default location or at the location passed as an arg&#xA;  version             Print the application binary version information&#xA;&#xA;Flags:&#xA;  -h, --help                help for terrad&#xA;      --home string         directory for config and data (default &#34;/Users/evan/.terra&#34;)&#xA;      --log_format string   The logging format (json|plain) (default &#34;plain&#34;)&#xA;      --log_level string    The logging level (trace|debug|info|warn|error|fatal|panic) (default &#34;info&#34;)&#xA;      --trace               print out full stack trace on errors&#xA;&#xA;Use &#34;terrad [command] --help&#34; for more information about a command.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit the &lt;a href=&#34;https://docs.terra.money/docs/develop/how-to/terrad/README.html&#34;&gt;terrad documentation page&lt;/a&gt; for more info on usage.&lt;/p&gt; &#xA;&lt;h2&gt;Node Setup&lt;/h2&gt; &#xA;&lt;p&gt;Once you have &lt;code&gt;terrad&lt;/code&gt; installed, you will need to set up your node to be part of the network.&lt;/p&gt; &#xA;&lt;h3&gt;Join the mainnet&lt;/h3&gt; &#xA;&lt;p&gt;The following requirements are recommended for running a mainnet node:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Four or more CPU cores&lt;/li&gt; &#xA; &lt;li&gt;At least 32 GB of memory&lt;/li&gt; &#xA; &lt;li&gt;At least 300 mbps of network bandwidth&lt;/li&gt; &#xA; &lt;li&gt;At least 2 TB NVME SSD&lt;/li&gt; &#xA; &lt;li&gt;A Linux distribution&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Terra node quickstart&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;terrad init nodename&#xA;wget -O ~/.terra/config/genesis.json https://cloudflare-ipfs.com/ipfs/QmZAMcdu85Qr8saFuNpL9VaxVqqLGWNAs72RVFhchL9jWs&#xA;curl https://network.terra.dev/addrbook.json &amp;gt; ~/.terrad/config/addrbook.json&#xA;terrad start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Join a testnet&lt;/h3&gt; &#xA;&lt;p&gt;Several testnets might exist simultaneously. Ensure that your version of &lt;code&gt;terrad&lt;/code&gt; is compatible with the network you want to join.&lt;/p&gt; &#xA;&lt;p&gt;To set up a node on the latest testnet, visit &lt;a href=&#34;https://github.com/terra-money/testnet&#34;&gt;the testnet repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Run a local testnet&lt;/h4&gt; &#xA;&lt;p&gt;The easiest way to set up a local testing environment is to run &lt;a href=&#34;https://github.com/terra-money/LocalTerra&#34;&gt;LocalTerra&lt;/a&gt;, a zero-configuration complete testing environment.&lt;/p&gt; &#xA;&lt;h3&gt;Run a single node testnet&lt;/h3&gt; &#xA;&lt;p&gt;You can also run a local testnet using a single node. On a local testnet, you will be the sole validator signing blocks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1: Create network and account&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First, initialize your genesis file to bootstrap your network. Create a name for your local testnet and provide a moniker to refer to your node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terrad init --chain-id=&amp;lt;testnet_name&amp;gt; &amp;lt;node_moniker&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, create a Terra account by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terrad keys add &amp;lt;account_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2: Add account to genesis&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add your account to genesis and set an initial balance to start. Run the following commands to add your account and set the initial balance:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terrad add-genesis-account $(terrad keys show &amp;lt;account_name&amp;gt; -a) 100000000uluna&#xA;terrad gentx &amp;lt;account_name&amp;gt; 10000000uluna --chain-id=&amp;lt;testnet_name&amp;gt;&#xA;terrad collect-gentxs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3: Run terrad&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now you can start your private Terra network:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terrad start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your &lt;code&gt;terrad&lt;/code&gt; node will be running a node on &lt;code&gt;tcp://localhost:26656&lt;/code&gt;, listening for incoming transactions and signing blocks.&lt;/p&gt; &#xA;&lt;h2&gt;Set up a production environment&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This guide only covers general settings for a production-level full node. Visit the &lt;a href=&#34;https://docs.terra.money/docs/full-node/manage-a-terra-validator/README.html&#34;&gt;Terra validator&#39;s guide&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This guide has been tested against Linux distributions only. To ensure you successfully set up your production environment, consider setting it up on an Linux system.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Increase maximum open files&lt;/h3&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;terrad&lt;/code&gt; can&#39;t open more than 1024 files at once.&lt;/p&gt; &#xA;&lt;p&gt;You can increase this limit by modifying &lt;code&gt;/etc/security/limits.conf&lt;/code&gt; and raising the &lt;code&gt;nofile&lt;/code&gt; capability.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;*                soft    nofile          65535&#xA;*                hard    nofile          65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a dedicated user&lt;/h3&gt; &#xA;&lt;p&gt;It is recommended that you run &lt;code&gt;terrad&lt;/code&gt; as a normal user. Super-user accounts are only recommended during setup to create and modify files.&lt;/p&gt; &#xA;&lt;h3&gt;Port configuration&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;terrad&lt;/code&gt; uses several TCP ports for different purposes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;26656&lt;/code&gt;: The default port for the P2P protocol. Use this port to communicate with other nodes. While this port must be open to join a network, it does not have to be open to the public. Validator nodes should configure &lt;code&gt;persistent_peers&lt;/code&gt; and close this port to the public.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;26657&lt;/code&gt;: The default port for the RPC protocol. This port is used for querying / sending transactions and must be open to serve queries from &lt;code&gt;terrad&lt;/code&gt;. &lt;strong&gt;DO NOT&lt;/strong&gt; open this port to the public unless you are planning to run a public node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;1317&lt;/code&gt;: The default port for &lt;a href=&#34;https://docs.terra.money/docs/develop/how-to/start-lcd.html&#34;&gt;Lite Client Daemon&lt;/a&gt; (LCD), which can be enabled in &lt;code&gt;~/.terra/config/app.toml&lt;/code&gt;. The LCD provides an HTTP RESTful API layer to allow applications and services to interact with your &lt;code&gt;terrad&lt;/code&gt; instance through RPC. Check the &lt;a href=&#34;https://lcd.terra.dev/swagger/#/&#34;&gt;Terra REST API&lt;/a&gt; for usage examples. Don&#39;t open this port unless you need to use the LCD.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;26660&lt;/code&gt;: The default port for interacting with the &lt;a href=&#34;https://prometheus.io&#34;&gt;Prometheus&lt;/a&gt; database. You can use Promethues to monitor an environment. This port is closed by default.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run the server as a daemon&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Important&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;Keep &lt;code&gt;terrad&lt;/code&gt; running at all times. The simplest solution is to register &lt;code&gt;terrad&lt;/code&gt; as a &lt;code&gt;systemd&lt;/code&gt; service so that it automatically starts after system reboots and other events.&lt;/p&gt; &#xA;&lt;h3&gt;Register terrad as a service&lt;/h3&gt; &#xA;&lt;p&gt;First, create a service definition file in &lt;code&gt;/etc/systemd/system&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Sample file: &lt;code&gt;/etc/systemd/system/terrad.service&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[Unit]&#xA;Description=Terra Daemon&#xA;After=network.target&#xA;&#xA;[Service]&#xA;Type=simple&#xA;User=terra&#xA;ExecStart=/data/terra/go/bin/terrad start&#xA;Restart=on-abort&#xA;&#xA;[Install]&#xA;WantedBy=multi-user.target&#xA;&#xA;[Service]&#xA;LimitNOFILE=65535&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Modify the &lt;code&gt;Service&lt;/code&gt; section from the given sample above to suit your settings. Note that even if you raised the number of open files for a process, you still need to include &lt;code&gt;LimitNOFILE&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After creating a service definition file, you should execute &lt;code&gt;systemctl daemon-reload&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Start, stop, or restart service&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;systemctl&lt;/code&gt; to control (start, stop, restart)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start&#xA;systemctl start terrad&#xA;# Stop&#xA;systemctl stop terrad&#xA;# Restart&#xA;systemctl restart terrad&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Access logs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Entire log&#xA;journalctl -t terrad&#xA;# Entire log reversed&#xA;journalctl -t terrad -r&#xA;# Latest and continuous&#xA;journalctl -t terrad -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;Developer Tools:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.terra.money&#34;&gt;Terra docs&lt;/a&gt;: Developer documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://faucet.terra.money&#34;&gt;Faucet&lt;/a&gt;: Get testnet Luna.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.github.com/terra-money/LocalTerra&#34;&gt;LocalTerra&lt;/a&gt;: A dockerized local blockchain testnet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Developer Forums:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/channels/464241079042965516/591812948867940362&#34;&gt;Terra Developer Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/+gCxCPohmVBkyNDRl&#34;&gt;Terra Developer Telegram room&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Block Explorer:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://finder.terra.money&#34;&gt;Terra Finder&lt;/a&gt;: Terra&#39;s basic block explorer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Wallets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://station.terra.money&#34;&gt;Terra Station&lt;/a&gt;: The official Terra wallet.&lt;/li&gt; &#xA; &lt;li&gt;Terra Station Mobile: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://apps.apple.com/us/app/terra-station/id1548434735&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://play.google.com/store/apps/details?id=money.terra.station&amp;amp;hl=en_US&amp;amp;gl=US&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Research:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agora.terra.money&#34;&gt;Agora&lt;/a&gt;: Research forum&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://terra.money&#34;&gt;Offical Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/e29HWwC2Mz&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://t.me/terra_announcements&#34;&gt;Telegram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/terra_money&#34;&gt;Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://goo.gl/3G4T1z&#34;&gt;YouTube&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in contributing to Terra Core source, please review our &lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is &lt;a href=&#34;https://raw.githubusercontent.com/terra-money/core/main/LICENSE&#34;&gt;licensed under the Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;© 2022 Terraform Labs, PTE LTD&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://terra.money/&#34;&gt;&lt;img src=&#34;https://assets.website-files.com/611153e7af981472d8da199c/61794f2b6b1c7a1cb9444489_symbol-terra-blue.svg?sanitize=true&#34; align=&#34;center&#34; width=&#34;200/&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>odoo/odoo</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/odoo/odoo</id>
    <link href="https://github.com/odoo/odoo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Odoo. Open Source Apps To Grow Your Business.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://runbot.odoo.com/runbot&#34;&gt;&lt;img src=&#34;https://runbot.odoo.com/runbot/badge/flat/1/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.odoo.com/documentation/15.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/master-docs-875A7B.svg?style=flat&amp;amp;colorA=8F8F8F&#34; alt=&#34;Tech Doc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.odoo.com/forum/help-1&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/master-help-875A7B.svg?style=flat&amp;amp;colorA=8F8F8F&#34; alt=&#34;Help&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nightly.odoo.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/master-nightly-875A7B.svg?style=flat&amp;amp;colorA=8F8F8F&#34; alt=&#34;Nightly Builds&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Odoo&lt;/h2&gt; &#xA;&lt;p&gt;Odoo is a suite of web based open source business apps.&lt;/p&gt; &#xA;&lt;p&gt;The main Odoo Apps include an &lt;a href=&#34;https://www.odoo.com/page/crm&#34;&gt;Open Source CRM&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/website&#34;&gt;Website Builder&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/ecommerce&#34;&gt;eCommerce&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/inventory&#34;&gt;Warehouse Management&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/project&#34;&gt;Project Management&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/accounting&#34;&gt;Billing &amp;amp; Accounting&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/point-of-sale-shop&#34;&gt;Point of Sale&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/employees&#34;&gt;Human Resources&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/social-marketing&#34;&gt;Marketing&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/app/manufacturing&#34;&gt;Manufacturing&lt;/a&gt;, &lt;a href=&#34;https://www.odoo.com/&#34;&gt;...&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Odoo Apps can be used as stand-alone applications, but they also integrate seamlessly so you get a full-featured &lt;a href=&#34;https://www.odoo.com&#34;&gt;Open Source ERP&lt;/a&gt; when you install several Apps.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started with Odoo&lt;/h2&gt; &#xA;&lt;p&gt;For a standard installation please follow the &lt;a href=&#34;https://www.odoo.com/documentation/15.0/administration/install.html&#34;&gt;Setup instructions&lt;/a&gt; from the documentation.&lt;/p&gt; &#xA;&lt;p&gt;To learn the software, we recommend the &lt;a href=&#34;https://www.odoo.com/slides&#34;&gt;Odoo eLearning&lt;/a&gt;, or &lt;a href=&#34;https://www.odoo.com/page/scale-up-business-game&#34;&gt;Scale-up&lt;/a&gt;, the &lt;a href=&#34;https://www.odoo.com/page/scale-up-business-game&#34;&gt;business game&lt;/a&gt;. Developers can start with &lt;a href=&#34;https://www.odoo.com/documentation/15.0/developer/howtos.html&#34;&gt;the developer tutorials&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adrianhajdin/project_syncfusion_dashboard</title>
    <updated>2022-06-01T02:00:43Z</updated>
    <id>tag:github.com,2022-06-01:/adrianhajdin/project_syncfusion_dashboard</id>
    <link href="https://github.com/adrianhajdin/project_syncfusion_dashboard" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This is a code repository for the corresponding YouTube video. In this tutorial we are going to build and deploy a an admin dashboard app using React.js and Syncfusion&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Build and Deploy a React Admin Dashboard App With Theming, Tables, Charts, Calendar, Kanban and More&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.ibb.co/W6g39w3/image.png&#34; alt=&#34;Shoppy&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is a code repository for the corresponding video tutorial.&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date with new projects&lt;/h2&gt; &#xA;&lt;p&gt;New major projects coming soon, subscribe to the mailing list to stay up to date &lt;a href=&#34;https://resource.jsmasterypro.com/newsletter&#34;&gt;https://resource.jsmasterypro.com/newsletter&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>