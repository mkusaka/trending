<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-24T02:00:54Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>adiwajshing/Baileys</title>
    <updated>2022-07-24T02:00:54Z</updated>
    <id>tag:github.com,2022-07-24:/adiwajshing/Baileys</id>
    <link href="https://github.com/adiwajshing/Baileys" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight full-featured WhatsApp Web + Multi-Device API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Baileys - Typescript/Javascript WhatsApp Web API&lt;/h1&gt; &#xA;&lt;p&gt;Baileys does not require Selenium or any other browser to be interface with WhatsApp Web, it does so directly using a &lt;strong&gt;WebSocket&lt;/strong&gt;. Not running Selenium or Chromimum saves you like &lt;strong&gt;half a gig&lt;/strong&gt; of ram :/&lt;/p&gt; &#xA;&lt;p&gt;Baileys supports interacting with the multi-device &amp;amp; web versions of WhatsApp.&lt;/p&gt; &#xA;&lt;p&gt;Thank you to &lt;a href=&#34;https://github.com/pokearaujo/multidevice&#34;&gt;@pokearaujo&lt;/a&gt; for writing his observations on the workings of WhatsApp Multi-Device. Also, thank you to &lt;a href=&#34;https://github.com/sigalor/whatsapp-web-reveng&#34;&gt;@Sigalor&lt;/a&gt; for writing his observations on the workings of WhatsApp Web and thanks to &lt;a href=&#34;https://github.com/Rhymen/go-whatsapp/&#34;&gt;@Rhymen&lt;/a&gt; for the &lt;strong&gt;go&lt;/strong&gt; implementation.&lt;/p&gt; &#xA;&lt;p&gt;Baileys is type-safe, extensible and simple to use. If you require more functionality than provided, it&#39;s super easy to write an extension. More on this &lt;a href=&#34;https://raw.githubusercontent.com/adiwajshing/Baileys/master/#WritingCustomFunctionality&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in building a WhatsApp bot, you may wanna check out &lt;a href=&#34;https://github.com/adiwajshing/WhatsappInfoBot&#34;&gt;WhatsAppInfoBot&lt;/a&gt; and an actual bot built with it, &lt;a href=&#34;https://github.com/ashokatechmin/Messcat&#34;&gt;Messcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the docs &lt;a href=&#34;https://adiwajshing.github.io/Baileys&#34;&gt;here&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;Join the Discord &lt;a href=&#34;https://discord.gg/WeJM5FP9GG&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Do check out &amp;amp; run &lt;a href=&#34;https://github.com/adiwajshing/Baileys/raw/master/Example/example.ts&#34;&gt;example.ts&lt;/a&gt; to see an example usage of the library. The script covers most common use cases. To run the example script, download or clone the repo and then type the following in a terminal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd path/to/Baileys&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn example&lt;/code&gt; for the multi-device edition&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn example:legacy&lt;/code&gt; for the legacy web edition&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use the stable version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @adiwajshing/baileys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the edge version (no guarantee of stability, but latest fixes + features)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add github:adiwajshing/baileys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import your code using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for multi-device&#xA;import makeWASocket from &#39;@adiwajshing/baileys&#39;&#xA;// for legacy web&#xA;import {makeWALegacySocket} from &#39;@adiwajshing/baileys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Connecting&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { DisconnectReason } from &#39;@adiwajshing/baileys&#39;&#xA;import { Boom } from &#39;@hapi/boom&#39;&#xA;&#xA;async function connectToWhatsApp () {&#xA;    const sock = makeWASocket({&#xA;        // can provide additional config here&#xA;        printQRInTerminal: true&#xA;    })&#xA;    sock.ev.on(&#39;connection.update&#39;, (update) =&amp;gt; {&#xA;        const { connection, lastDisconnect } = update&#xA;        if(connection === &#39;close&#39;) {&#xA;            const shouldReconnect = (lastDisconnect.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut&#xA;            console.log(&#39;connection closed due to &#39;, lastDisconnect.error, &#39;, reconnecting &#39;, shouldReconnect)&#xA;            // reconnect if not logged out&#xA;            if(shouldReconnect) {&#xA;                connectToWhatsApp()&#xA;            }&#xA;        } else if(connection === &#39;open&#39;) {&#xA;            console.log(&#39;opened connection&#39;)&#xA;        }&#xA;    })&#xA;    sock.ev.on(&#39;messages.upsert&#39;, m =&amp;gt; {&#xA;        console.log(JSON.stringify(m, undefined, 2))&#xA;&#xA;        console.log(&#39;replying to&#39;, m.messages[0].key.remoteJid)&#xA;        await sock.sendMessage(m.messages[0].key.remoteJid!, { text: &#39;Hello there!&#39; })&#xA;    })&#xA;}&#xA;// run in main file&#xA;connectToWhatsApp()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the connection is successful, you will see a QR code printed on your terminal screen, scan it with WhatsApp on your phone and you&#39;ll be logged in!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; install &lt;code&gt;qrcode-terminal&lt;/code&gt; using &lt;code&gt;yarn add qrcode-terminal&lt;/code&gt; to auto-print the QR to the terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Notable Differences Between Baileys v3 &amp;amp; v4&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Baileys has been written from the ground up to have a more &#34;functional&#34; structure. This is done primarily for simplicity &amp;amp; more testability&lt;/li&gt; &#xA; &lt;li&gt;The Baileys event emitter will emit all events and be used to generate a source of truth for the connected user&#39;s account. Access the event emitter using (&lt;code&gt;sock.ev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Baileys no longer maintains an internal state of chats/contacts/messages. You should ideally take this on your own, simply because your state in MD is its own source of truth &amp;amp; there is no one-size-fits-all way to handle the storage for this. However, a simple storage extension has been provided. This also serves as a good demonstration of how to use the Baileys event emitter to construct a source of truth.&lt;/li&gt; &#xA; &lt;li&gt;A baileys &#34;socket&#34; is meant to be a temporary &amp;amp; disposable object -- this is done to maintain simplicity &amp;amp; prevent bugs. I felt the entire Baileys object became too bloated as it supported too many configurations. You&#39;re encouraged to write your own implementation to handle missing functionality.&lt;/li&gt; &#xA; &lt;li&gt;Baileys does not offer an inbuilt reconnect mechanism anymore (though it&#39;s super easy to set one up with your own rules, check the example script)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuring the Connection&lt;/h2&gt; &#xA;&lt;p&gt;You can configure the connection by passing a &lt;code&gt;SocketConfig&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;The entire &lt;code&gt;SocketConfig&lt;/code&gt; structure is mentioned here with default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type SocketConfig = {&#xA;    /** provide an auth state object to maintain the auth state */&#xA;    auth?: AuthenticationState&#xA;    /** the WS url to connect to WA */&#xA;    waWebSocketUrl: string | URL &#xA;    /** Fails the connection if the connection times out in this time interval or no data is received */&#xA;&#x9;connectTimeoutMs: number&#xA;    /** Default timeout for queries, undefined for no timeout */&#xA;    defaultQueryTimeoutMs: number | undefined&#xA;    /** ping-pong interval for WS connection */&#xA;    keepAliveIntervalMs: number&#xA;    /** proxy agent */&#xA;&#x9;agent?: Agent&#xA;    /** pino logger */&#xA;&#x9;logger: Logger&#xA;    /** version to connect with */&#xA;    version: WAVersion&#xA;    /** override browser config */&#xA;&#x9;browser: WABrowserDescription&#xA;&#x9;/** agent used for fetch requests -- uploading/downloading media */&#xA;&#x9;fetchAgent?: Agent&#xA;    /** should the QR be printed in the terminal */&#xA;    printQRInTerminal: boolean&#xA;    /** &#xA;     * fetch a message from your store &#xA;     * implement this so that messages that failed to send (solves the &#34;this message can take a while&#34; issue) can be retried&#xA;     * */&#xA;    getMessage: (key: proto.IMessageKey) =&amp;gt; Promise&amp;lt;proto.IMessage | undefined&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving &amp;amp; Restoring Sessions&lt;/h2&gt; &#xA;&lt;p&gt;You obviously don&#39;t want to keep scanning the QR code every time you want to connect.&lt;/p&gt; &#xA;&lt;p&gt;So, you can load the credentials to log back in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { BufferJSON, useMultiFileAuthState } from &#39;@adiwajshing/baileys&#39;&#xA;import * as fs from &#39;fs&#39;&#xA;&#xA;// utility function to help save the auth state in a single folder&#xA;// this function serves as a good guide to help write auth &amp;amp; key states for SQL/no-SQL databases, which I would recommend in any production grade system&#xA;const { state, saveCreds } = await useMultiFileAuthState(&#39;auth_info_baileys&#39;)&#xA;// will use the given state to connect&#xA;// so if valid credentials are available -- it&#39;ll connect without QR&#xA;const conn = makeWASocket({ auth: state }) &#xA;// this will be called as soon as the credentials are updated&#xA;conn.ev.on (&#39;creds.update&#39;, saveCreds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When a message is received/sent, due to signal sessions needing updating, the auth keys (&lt;code&gt;authState.keys&lt;/code&gt;) will update. Whenever that happens, you must save the updated keys (&lt;code&gt;authState.keys.set()&lt;/code&gt; is called). Not doing so will prevent your messages from reaching the recipient &amp;amp; cause other unexpected consequences. The &lt;code&gt;useMultiFileAuthState&lt;/code&gt; function automatically takes care of that, but for any other serious implementation -- you will need to be very careful with the key state management.&lt;/p&gt; &#xA;&lt;h2&gt;Listening to Connection Updates&lt;/h2&gt; &#xA;&lt;p&gt;Baileys now fires the &lt;code&gt;connection.update&lt;/code&gt; event to let you know something has updated in the connection. This data has the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type ConnectionState = {&#xA;&#x9;/** connection is now open, connecting or closed */&#xA;&#x9;connection: WAConnectionState&#xA;&#x9;/** the error that caused the connection to close */&#xA;&#x9;lastDisconnect?: {&#xA;&#x9;&#x9;error: Error&#xA;&#x9;&#x9;date: Date&#xA;&#x9;}&#xA;&#x9;/** is this a new login */&#xA;&#x9;isNewLogin?: boolean&#xA;&#x9;/** the current QR code */&#xA;&#x9;qr?: string&#xA;&#x9;/** has the device received all pending notifications while it was offline */&#xA;&#x9;receivedPendingNotifications?: boolean &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this also offers any updates to the QR&lt;/p&gt; &#xA;&lt;h2&gt;Handling Events&lt;/h2&gt; &#xA;&lt;p&gt;Baileys uses the EventEmitter syntax for events. They&#39;re all nicely typed up, so you shouldn&#39;t have any issues with an Intellisense editor like VS Code.&lt;/p&gt; &#xA;&lt;p&gt;The events are typed up in a type map, as mentioned here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;export type BaileysEventMap&amp;lt;T&amp;gt; = {&#xA;    /** connection state has been updated -- WS closed, opened, connecting etc. */&#xA;&#x9;&#39;connection.update&#39;: Partial&amp;lt;ConnectionState&amp;gt;&#xA;    /** credentials updated -- some metadata, keys or something */&#xA;    &#39;creds.update&#39;: Partial&amp;lt;T&amp;gt;&#xA;    /** set chats (history sync), chats are reverse chronologically sorted */&#xA;    &#39;chats.set&#39;: { chats: Chat[], isLatest: boolean }&#xA;    /** set messages (history sync), messages are reverse chronologically sorted */&#xA;    &#39;messages.set&#39;: { messages: WAMessage[], isLatest: boolean }&#xA;    /** set contacts (history sync) */&#xA;    &#39;contacts.set&#39;: { contacts: Contact[], isLatest: boolean }&#xA;    /** upsert chats */&#xA;    &#39;chats.upsert&#39;: Chat[]&#xA;    /** update the given chats */&#xA;    &#39;chats.update&#39;: Partial&amp;lt;Chat&amp;gt;[]&#xA;    /** delete chats with given ID */&#xA;    &#39;chats.delete&#39;: string[]&#xA;    /** presence of contact in a chat updated */&#xA;    &#39;presence.update&#39;: { id: string, presences: { [participant: string]: PresenceData } }&#xA;&#xA;    &#39;contacts.upsert&#39;: Contact[]&#xA;    &#39;contacts.update&#39;: Partial&amp;lt;Contact&amp;gt;[]&#xA;&#xA;    &#39;messages.delete&#39;: { keys: WAMessageKey[] } | { jid: string, all: true }&#xA;    &#39;messages.update&#39;: WAMessageUpdate[]&#xA;    &#39;messages.media-update&#39;: { key: WAMessageKey, media?: { ciphertext: Uint8Array, iv: Uint8Array }, error?: Boom }[]&#xA;    /**&#xA;     * add/update the given messages. If they were received while the connection was online,&#xA;     * the update will have type: &#34;notify&#34;&#xA;     *  */&#xA;    &#39;messages.upsert&#39;: { messages: WAMessage[], type: MessageUpsertType }&#xA;    /** message was reacted to. If reaction was removed -- then &#34;reaction.text&#34; will be falsey */&#xA;    &#39;messages.reaction&#39;: { key: WAMessageKey, reaction: proto.IReaction }[]&#xA;&#xA;    &#39;message-receipt.update&#39;: MessageUserReceiptUpdate[]&#xA;&#xA;    &#39;groups.upsert&#39;: GroupMetadata[]&#xA;    &#39;groups.update&#39;: Partial&amp;lt;GroupMetadata&amp;gt;[]&#xA;    /** apply an action to participants in a group */&#xA;    &#39;group-participants.update&#39;: { id: string, participants: string[], action: ParticipantAction }&#xA;&#xA;    &#39;blocklist.set&#39;: { blocklist: string[] }&#xA;    &#39;blocklist.update&#39;: { blocklist: string[], type: &#39;add&#39; | &#39;remove&#39; }&#xA;    /** Receive an update on a call, including when the call was received, rejected, accepted */&#xA;    &#39;call&#39;: WACallEvent[]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can listen to these events like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;const sock = makeWASocket()&#xA;sock.ev.on(&#39;messages.upsert&#39;, ({ messages }) =&amp;gt; {&#xA;    console.log(&#39;got messages&#39;, messages)&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementing a Data Store&lt;/h2&gt; &#xA;&lt;p&gt;Baileys does not come with a defacto storage for chats, contacts, or messages. However, a simple in-memory implementation has been provided. The store listens for chat updates, new messages, message updates, etc., to always have an up-to-date version of the data.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { makeInMemoryStore } from &#39;@adiwajshing/baileys&#39;&#xA;// the store maintains the data of the WA connection in memory&#xA;// can be written out to a file &amp;amp; read from it&#xA;const store = makeInMemoryStore({ })&#xA;// can be read from a file&#xA;store.readFromFile(&#39;./baileys_store.json&#39;)&#xA;// saves the state to a file every 10s&#xA;setInterval(() =&amp;gt; {&#xA;    store.writeToFile(&#39;./baileys_store.json&#39;)&#xA;}, 10_000)&#xA;&#xA;const sock = makeWASocket({ })&#xA;// will listen from this socket&#xA;// the store can listen from a new socket once the current socket outlives its lifetime&#xA;store.bind(sock.ev)&#xA;&#xA;sock.ev.on(&#39;chats.set&#39;, () =&amp;gt; {&#xA;    // can use &#34;store.chats&#34; however you want, even after the socket dies out&#xA;    // &#34;chats&#34; =&amp;gt; a KeyedDB instance&#xA;    console.log(&#39;got chats&#39;, store.chats.all())&#xA;})&#xA;&#xA;sock.ev.on(&#39;contacts.set&#39;, () =&amp;gt; {&#xA;    console.log(&#39;got contacts&#39;, Object.values(store.contacts))&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The store also provides some simple functions such as &lt;code&gt;loadMessages&lt;/code&gt; that utilize the store to speed up data retrieval.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I highly recommend building your own data store especially for MD connections, as storing someone&#39;s entire chat history in memory is a terrible waste of RAM.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Legacy Version&lt;/h2&gt; &#xA;&lt;p&gt;The API for the legacy and MD versions has been made as similar as possible so you can switch between them seamlessly.&lt;/p&gt; &#xA;&lt;p&gt;Example on using the eg. version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import P from &#34;pino&#34;&#xA;import { Boom } from &#34;@hapi/boom&#34;&#xA;import { makeWALegacySocket } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;// store can be used with legacy version as well&#xA;const store = makeInMemoryStore({ logger: P().child({ level: &#39;debug&#39;, stream: &#39;store&#39; }) })&#xA;&#xA;const sock = makeWALegacySocket({&#xA;    logger: P({ level: &#39;debug&#39; }),&#xA;    printQRInTerminal: true,&#xA;    auth: state&#xA;})&#xA;// bind to the socket&#xA;store.bind(sock.ev)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a type representing either the legacy or MD version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// this type can have any of the socket types underneath&#xA;import { AnyWASocket } from &#39;@adiwajshing/baileys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sending Messages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Send all types of messages with a single function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Non-Media Messages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;const id = &#39;abcd@s.whatsapp.net&#39; // the WhatsApp ID &#xA;// send a simple text!&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; })&#xA;// send a reply messagge&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; }, { quoted: message })&#xA;// send a mentions message&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;@12345678901&#39;, mentions: [&#39;12345678901@s.whatsapp.net&#39;] })&#xA;// send a location!&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id, &#xA;    { location: { degreesLatitude: 24.121231, degreesLongitude: 55.1121221 } }&#xA;)&#xA;// send a contact!&#xA;const vcard = &#39;BEGIN:VCARD\n&#39; // metadata of the contact card&#xA;            + &#39;VERSION:3.0\n&#39; &#xA;            + &#39;FN:Jeff Singh\n&#39; // full name&#xA;            + &#39;ORG:Ashoka Uni;\n&#39; // the organization of the contact&#xA;            + &#39;TEL;type=CELL;type=VOICE;waid=911234567890:+91 12345 67890\n&#39; // WhatsApp ID + phone number&#xA;            + &#39;END:VCARD&#39;&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id,&#xA;    { &#xA;        contacts: { &#xA;            displayName: &#39;Jeff&#39;, &#xA;            contacts: [{ vcard }] &#xA;        }&#xA;    }&#xA;)&#xA;&#xA;// send a buttons message!&#xA;const buttons = [&#xA;  {buttonId: &#39;id1&#39;, buttonText: {displayText: &#39;Button 1&#39;}, type: 1},&#xA;  {buttonId: &#39;id2&#39;, buttonText: {displayText: &#39;Button 2&#39;}, type: 1},&#xA;  {buttonId: &#39;id3&#39;, buttonText: {displayText: &#39;Button 3&#39;}, type: 1}&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    text: &#34;Hi it&#39;s button message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    buttons: buttons,&#xA;    headerType: 1&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, buttonMessage)&#xA;&#xA;//send a template message!&#xA;const templateButtons = [&#xA;    {index: 1, urlButton: {displayText: &#39;⭐ Star Baileys on GitHub!&#39;, url: &#39;https://github.com/adiwajshing/Baileys&#39;}},&#xA;    {index: 2, callButton: {displayText: &#39;Call me!&#39;, phoneNumber: &#39;+1 (234) 5678-901&#39;}},&#xA;    {index: 3, quickReplyButton: {displayText: &#39;This is a reply, just like normal buttons!&#39;, id: &#39;id-like-buttons-message&#39;}},&#xA;]&#xA;&#xA;const templateMessage = {&#xA;    text: &#34;Hi it&#39;s a template message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    templateButtons: templateButtons&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, templateMessage)&#xA;&#xA;// send a list message!&#xA;const sections = [&#xA;    {&#xA;&#x9;title: &#34;Section 1&#34;,&#xA;&#x9;rows: [&#xA;&#x9;    {title: &#34;Option 1&#34;, rowId: &#34;option1&#34;},&#xA;&#x9;    {title: &#34;Option 2&#34;, rowId: &#34;option2&#34;, description: &#34;This is a description&#34;}&#xA;&#x9;]&#xA;    },&#xA;   {&#xA;&#x9;title: &#34;Section 2&#34;,&#xA;&#x9;rows: [&#xA;&#x9;    {title: &#34;Option 3&#34;, rowId: &#34;option3&#34;},&#xA;&#x9;    {title: &#34;Option 4&#34;, rowId: &#34;option4&#34;, description: &#34;This is a description V2&#34;}&#xA;&#x9;]&#xA;    },&#xA;]&#xA;&#xA;const listMessage = {&#xA;  text: &#34;This is a list&#34;,&#xA;  footer: &#34;nice footer, link: https://google.com&#34;,&#xA;  title: &#34;Amazing boldfaced list title&#34;,&#xA;  buttonText: &#34;Required, text on the button to view the list&#34;,&#xA;  sections&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, listMessage)&#xA;&#xA;const reactionMessage = {&#xA;    react: {&#xA;        text: &#34;💖&#34;, // use an empty string to remove the reaction&#xA;        key: message.key&#xA;    }&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, reactionMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending messages with link previews&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By default, WA MD does not have link generation when sent from the web&lt;/li&gt; &#xA; &lt;li&gt;Baileys has a function to generate the content for these link previews&lt;/li&gt; &#xA; &lt;li&gt;To enable this function&#39;s usage, add &lt;code&gt;link-preview-js&lt;/code&gt; as a dependency to your project with &lt;code&gt;yarn add link-preview-js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send a link:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// send a link&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;Hi, this was sent using https://github.com/adiwajshing/baileys&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Media Messages&lt;/h3&gt; &#xA;&lt;p&gt;Sending media (video, stickers, images) is easier &amp;amp; more efficient than ever.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can specify a buffer, a local url or even a remote url.&lt;/li&gt; &#xA; &lt;li&gt;When specifying a media url, Baileys never loads the entire buffer into memory; it even encrypts the media as a readable stream.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@adiwajshing/baileys&#39;&#xA;// Sending gifs&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: fs.readFileSync(&#34;Media/ma_gif.mp4&#34;), &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: &#34;./Media/ma_gif.mp4&#34;, &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;// send an audio file&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { audio: { url: &#34;./Media/audio.mp3&#34; }, mimetype: &#39;audio/mp4&#39; }&#xA;    { url: &#34;Media/audio.mp3&#34; }, // can send mp3, mp4, &amp;amp; ogg&#xA;)&#xA;&#xA;// send a buttons message with image header!&#xA;const buttons = [&#xA;  {buttonId: &#39;id1&#39;, buttonText: {displayText: &#39;Button 1&#39;}, type: 1},&#xA;  {buttonId: &#39;id2&#39;, buttonText: {displayText: &#39;Button 2&#39;}, type: 1},&#xA;  {buttonId: &#39;id3&#39;, buttonText: {displayText: &#39;Button 3&#39;}, type: 1}&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    image: {url: &#39;https://example.com/image.jpeg&#39;},&#xA;    caption: &#34;Hi it&#39;s button message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    buttons: buttons,&#xA;    headerType: 4&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, buttonMessage)&#xA;&#xA;//send a template message with an image **attached**!&#xA;const templateButtons = [&#xA;  {index: 1, urlButton: {displayText: &#39;⭐ Star Baileys on GitHub!&#39;, url: &#39;https://github.com/adiwajshing/Baileys&#39;}},&#xA;  {index: 2, callButton: {displayText: &#39;Call me!&#39;, phoneNumber: &#39;+1 (234) 5678-901&#39;}},&#xA;  {index: 3, quickReplyButton: {displayText: &#39;This is a reply, just like normal buttons!&#39;, id: &#39;id-like-buttons-message&#39;}},&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    text: &#34;Hi it&#39;s a template message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    templateButtons: templateButtons,&#xA;    image: {url: &#39;https://example.com/image.jpeg&#39;}&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, templateMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; is the WhatsApp ID of the person or group you&#39;re sending the message to. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It must be in the format &lt;code&gt;[country code][phone number]@s.whatsapp.net&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Example for people: &lt;code&gt;+19999999999@s.whatsapp.net&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;For groups, it must be in the format &lt;code&gt;123456789-123345@g.us&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For broadcast lists, it&#39;s &lt;code&gt;[timestamp of creation]@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For stories, the ID is &lt;code&gt;status@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For media messages, the thumbnail can be generated automatically for images &amp;amp; stickers provided you add &lt;code&gt;jimp&lt;/code&gt; or &lt;code&gt;sharp&lt;/code&gt; as a dependency in your project using &lt;code&gt;yarn add jimp&lt;/code&gt; or &lt;code&gt;yarn add sharp&lt;/code&gt;. Thumbnails for videos can also be generated automatically, though, you need to have &lt;code&gt;ffmpeg&lt;/code&gt; installed on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MiscGenerationOptions&lt;/strong&gt;: some extra info about the message. It can have the following &lt;strong&gt;optional&lt;/strong&gt; values: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const info: MessageOptions = {&#xA;    quoted: quotedMessage, // the message you want to quote&#xA;    contextInfo: { forwardingScore: 2, isForwarded: true }, // some random context info (can show a forwarded message with this too)&#xA;    timestamp: Date(), // optional, if you want to manually set the timestamp of the message&#xA;    caption: &#34;hello there!&#34;, // (for media messages) the caption to send with the media (cannot be sent with stickers though)&#xA;    jpegThumbnail: &#34;23GD#4/==&#34;, /*  (for location &amp;amp; media messages) has to be a base 64 encoded JPEG if you want to send a custom thumb, &#xA;                                or set to null if you don&#39;t want to send a thumbnail.&#xA;                                Do not enter this field if you want to automatically generate a thumb&#xA;                            */&#xA;    mimetype: Mimetype.pdf, /* (for media messages) specify the type of media (optional for all media types except documents),&#xA;                                import {Mimetype} from &#39;@adiwajshing/baileys&#39;&#xA;                            */&#xA;    fileName: &#39;somefile.pdf&#39;, // (for media messages) file name for the media&#xA;    /* will send audio messages as voice notes, if set to true */&#xA;    ptt: true,&#xA;    /** Should it send as a disappearing messages. &#xA;     * By default &#39;chat&#39; -- which follows the setting of the chat */&#xA;    sendEphemeral: &#39;chat&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forwarding Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const msg = getMessageFromStore(&#39;455@s.whatsapp.net&#39;, &#39;HSJHJWH7323HSJSJ&#39;) // implement this on your end&#xA;await sock.sendMessage(&#39;1234@s.whatsapp.net&#39;, { forward: msg }) // WA forward the message!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reading Messages&lt;/h2&gt; &#xA;&lt;p&gt;A set of message keys must be explicitly marked read now. In multi-device, you cannot mark an entire &#34;chat&#34; read as it were with Baileys Web. This means you have to keep track of unread messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const key = {&#xA;    remoteJid: &#39;1234-123@g.us&#39;,&#xA;    id: &#39;AHASHH123123AHGA&#39;, // id of the message you want to read&#xA;    participant: &#39;912121232@s.whatsapp.net&#39; // the ID of the user that sent the  message (undefined for individual chats)&#xA;}&#xA;// pass to readMessages function&#xA;// can pass multiple keys to read multiple messages as well&#xA;await sock.readMessages([key])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The message ID is the unique identifier of the message that you are marking as read. On a &lt;code&gt;WAMessage&lt;/code&gt;, the &lt;code&gt;messageID&lt;/code&gt; can be accessed using &lt;code&gt;messageID = message.key.id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Update Presence&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.sendPresenceUpdate(&#39;available&#39;, id) &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This lets the person/group with &lt;code&gt;id&lt;/code&gt; know whether you&#39;re online, offline, typing etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;presence&lt;/code&gt; can be one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type WAPresence = &#39;unavailable&#39; | &#39;available&#39; | &#39;composing&#39; | &#39;recording&#39; | &#39;paused&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The presence expires after about 10 seconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the multi-device version of WhatsApp -- if a desktop client is active, WA doesn&#39;t send push notifications to the device. If you would like to receive said notifications -- mark your Baileys client offline using &lt;code&gt;sock.sendPresenceUpdate(&#39;unavailable&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloading Media Messages&lt;/h2&gt; &#xA;&lt;p&gt;If you want to save the media you received&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { writeFile } from &#39;fs/promises&#39;&#xA;import { downloadMediaMessage } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;sock.ev.on(&#39;messages.upsert&#39;, async ({ messages }) =&amp;gt; {&#xA;    const m = messages[0]&#xA;&#xA;    if (!m.message) return // if there is no text or media message&#xA;    const messageType = Object.keys (m.message)[0]// get what type of message it is -- text, image, video&#xA;    // if the message is an image&#xA;    if (messageType === &#39;imageMessage&#39;) {&#xA;        // download the message&#xA;        const buffer = await downloadMediaMessage(&#xA;            m,&#xA;            &#39;buffer&#39;,&#xA;            { },&#xA;            { &#xA;                logger,&#xA;                // pass this so that baileys can request a reupload of media&#xA;                // that has been deleted&#xA;                reuploadRequest: sock.updateMediaMessage&#xA;            }&#xA;        )&#xA;        // save to file&#xA;        await writeFile(&#39;./my-download.jpeg&#39;, buffer)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; WhatsApp automatically removes old media from their servers. For the device to access said media -- a re-upload is required by another device that has it. This can be accomplished using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const updatedMediaMsg = await sock.updateMediaMessage(msg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deleting Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;const response = await sock.sendMessage(jid, { text: &#39;hello!&#39; }) // send a message&#xA;// sends a message to delete the given message&#xA;// this deletes the message for everyone&#xA;await sock.sendMessage(jid, { delete: response.key })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; deleting for oneself is supported via &lt;code&gt;chatModify&lt;/code&gt; (next section)&lt;/p&gt; &#xA;&lt;h2&gt;Modifying Chats&lt;/h2&gt; &#xA;&lt;p&gt;WA uses an encrypted form of communication to send chat/app updates. This has been implemented mostly and you can send the following updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Archive a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;await sock.chatModify({ archive: true, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mute/unmute a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// mute for 8 hours&#xA;await sock.chatModify({ mute: 8*60*60*1000 }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;// unmute&#xA;await sock.chatModify({ mute: null }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mark a chat read/unread&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;// mark it unread&#xA;await sock.chatModify({ markRead: false, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete a message for me&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.chatModify(&#xA;  { clear: { messages: [{ id: &#39;ATWYHDNNWU81732J&#39;, fromMe: true, timestamp: &#34;1654823909&#34; }] } }, &#xA;  &#39;123456@s.whatsapp.net&#39;, &#xA;  []&#xA;  )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you mess up one of your updates, WA can log you out of all your devices and you&#39;ll have to log in again.&lt;/p&gt; &#xA;&lt;h2&gt;Disappearing Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;// turn on disappearing messages&#xA;await sock.sendMessage(&#xA;    jid, &#xA;    // this is 1 week in seconds -- how long you want messages to appear for&#xA;    { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL }&#xA;)&#xA;// will send as a disappearing message&#xA;await sock.sendMessage(jid, { text: &#39;hello&#39; }, { ephemeralExpiration: WA_DEFAULT_EPHEMERAL })&#xA;// turn off disappearing messages&#xA;await sock.sendMessage(&#xA;    jid, &#xA;    { disappearingMessagesInChat: false }&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To check if a given ID is on WhatsApp &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const id = &#39;123456&#39;&#xA;const [result] = await sock.onWhatsApp(id)&#xA;if (result.exists) console.log (`${id} exists on WhatsApp, as jid: ${result.jid}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To query chat history on a group or with someone TODO, if possible&lt;/li&gt; &#xA; &lt;li&gt;To get the status of some person &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const status = await sock.fetchStatus(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;status: &#34; + status)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your profile status &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const status = &#39;Hello World!&#39;&#xA;await sock.updateProfileStatus(status)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your profile name &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const name = &#39;My name&#39;&#xA;await sock.updateProfileName(name)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get the display picture of some person/group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for low res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;)&#xA;console.log(&#34;download profile picture from: &#34; + ppUrl)&#xA;// for high res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;, &#39;image&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your display picture or a group&#39;s &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;111234567890-1594482450@g.us&#39; // can be your own too&#xA;await sock.updateProfilePicture(jid, { url: &#39;./new-profile-picture.jpeg&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get someone&#39;s presence (if they&#39;re typing or online) &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// the presence update is fetched and called here&#xA;sock.ev.on(&#39;presence-update&#39;, json =&amp;gt; console.log(json))&#xA;// request updates for a chat&#xA;await sock.presenceSubscribe(&#34;xyz@s.whatsapp.net&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To block or unblock user &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;block&#34;) // Block user&#xA;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;unblock&#34;) // Unblock user&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get a business profile, such as description or category &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const profile = await sock.getBusinessProfile(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;business description: &#34; + profile.description + &#34;, category: &#34; + profile.category)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course, replace &lt;code&gt;xyz&lt;/code&gt; with an actual ID.&lt;/p&gt; &#xA;&lt;h2&gt;Groups&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To create a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// title &amp;amp; participants&#xA;const group = await sock.groupCreate(&#34;My Fab Group&#34;, [&#34;1234@s.whatsapp.net&#34;, &#34;4564@s.whatsapp.net&#34;])&#xA;console.log (&#34;created group with id: &#34; + group.gid)&#xA;sock.sendMessage(group.id, { text: &#39;hello there&#39; }) // say hello to everyone on the group&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To add/remove people to a group or demote/promote people &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// id &amp;amp; people to add to the group (will throw error if it fails)&#xA;const response = await sock.groupParticipantsUpdate(&#xA;    &#34;abcd-xyz@g.us&#34;, &#xA;    [&#34;abcd@s.whatsapp.net&#34;, &#34;efgh@s.whatsapp.net&#34;],&#xA;    &#34;add&#34; // replace this parameter with &#34;remove&#34;, &#34;demote&#34; or &#34;promote&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change the group&#39;s subject &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateSubject(&#34;abcd-xyz@g.us&#34;, &#34;New Subject!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change the group&#39;s description &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateDescription(&#34;abcd-xyz@g.us&#34;, &#34;New Description!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change group settings &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// only allow admins to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;announcement&#39;)&#xA;// allow everyone to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;not_announcement&#39;)&#xA;// allow everyone to modify the group&#39;s settings -- like display picture etc.&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;unlocked&#39;)&#xA;// only allow admins to modify the group&#39;s settings&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;locked&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To leave a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupLeave(&#34;abcd-xyz@g.us&#34;) // (will throw error if it fails)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get the invite code for a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupInviteCode(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To revoke the invite code in a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupRevokeInvite(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;New group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To query the metadata of a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const metadata = await sock.groupMetadata(&#34;abcd-xyz@g.us&#34;) &#xA;console.log(metadata.id + &#34;, title: &#34; + metadata.subject + &#34;, description: &#34; + metadata.desc)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To join the group using the invitation code &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInvite(&#34;xxx&#34;)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/li&gt; &#xA; &lt;li&gt;To get group info by invite code &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupGetInviteInfo(&#34;xxx&#34;)&#xA;console.log(&#34;group information: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To join the group using groupInviteMessage &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInviteV4(&#34;abcd@s.whatsapp.net&#34;, groupInviteMessage)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Broadcast Lists &amp;amp; Stories&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; messages currently cannot be sent to broadcast lists from the MD version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can send messages to broadcast lists the same way you send messages to groups &amp;amp; individual chats.&lt;/li&gt; &#xA; &lt;li&gt;Right now, WA Web does not support creating broadcast lists, but you can still delete them.&lt;/li&gt; &#xA; &lt;li&gt;Broadcast IDs are in the format &lt;code&gt;12345678@broadcast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To query a broadcast list&#39;s recipients &amp;amp; name: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const bList = await sock.getBroadcastListInfo(&#34;1234@broadcast&#34;)&#xA;console.log (`list name: ${bList.name}, recps: ${bList.recipients}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writing Custom Functionality&lt;/h2&gt; &#xA;&lt;p&gt;Baileys is written with custom functionality in mind. Instead of forking the project &amp;amp; re-writing the internals, you can simply write your own extensions.&lt;/p&gt; &#xA;&lt;p&gt;First, enable the logging of unhandled messages from WhatsApp by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const sock = makeWASocket({&#xA;    logger: P({ level: &#39;debug&#39; }),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable you to see all sorts of messages WhatsApp sends in the console.&lt;/p&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Functionality to track the battery percentage of your phone. You enable logging and you&#39;ll see a message about your battery pop up in the console: &lt;code&gt;{&#34;level&#34;:10,&#34;fromMe&#34;:false,&#34;frame&#34;:{&#34;tag&#34;:&#34;ib&#34;,&#34;attrs&#34;:{&#34;from&#34;:&#34;@s.whatsapp.net&#34;},&#34;content&#34;:[{&#34;tag&#34;:&#34;edge_routing&#34;,&#34;attrs&#34;:{},&#34;content&#34;:[{&#34;tag&#34;:&#34;routing_info&#34;,&#34;attrs&#34;:{},&#34;content&#34;:{&#34;type&#34;:&#34;Buffer&#34;,&#34;data&#34;:[8,2,8,5]}}]}]},&#34;msg&#34;:&#34;communication&#34;} &lt;/code&gt;&lt;/p&gt; &lt;p&gt;The &#34;frame&#34; is what the message received is, it has three components:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tag&lt;/code&gt; -- what this frame is about (eg. message will have &#34;message&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;attrs&lt;/code&gt; -- a string key-value pair with some metadata (contains ID of the message usually)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;content&lt;/code&gt; -- the actual data (eg. a message node will have the actual message content in it)&lt;/li&gt; &#xA;   &lt;li&gt;read more about this format &lt;a href=&#34;https://raw.githubusercontent.com/adiwajshing/Baileys/master/src/WABinary/readme.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;You can register a callback for an event using the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for any message with tag &#39;edge_routing&#39;&#xA;sock.ws.on(`CB:edge_routing`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39; and id attribute = abcd&#xA;sock.ws.on(`CB:edge_routing,id:abcd`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39;, id attribute = abcd &amp;amp; first content node routing_info&#xA;sock.ws.on(`CB:edge_routing,id:abcd,routing_info`, (node: BinaryNode) =&amp;gt; { })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;This library was originally a project for &lt;strong&gt;CS-2362 at Ashoka University&lt;/strong&gt; and is in no way affiliated with WhatsApp. Use at your own discretion. Do not spam people with this.&lt;/p&gt; &#xA;&lt;p&gt;Also, this repo is now licenced under GPL 3 since it uses &lt;a href=&#34;https://git.questbook.io/backend/service-coderunner/-/merge_requests/1&#34;&gt;libsignal-node&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>adam-p/markdown-here</title>
    <updated>2022-07-24T02:00:54Z</updated>
    <id>tag:github.com,2022-07-24:/adam-p/markdown-here</id>
    <link href="https://github.com/adam-p/markdown-here" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Google Chrome, Firefox, and Thunderbird extension that lets you write email in Markdown and render it before sending.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.github.com/adam-p/markdown-here/master/src/common/images/icon48.png&#34; alt=&#34;Markdown Here logo&#34;&gt; Markdown Here&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://markdown-here.com&#34;&gt;&lt;strong&gt;Visit the website.&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/elifhakcjgalahccnjkneoccemfahfoa&#34;&gt;&lt;strong&gt;Get it for Chrome.&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/markdown-here/&#34;&gt;&lt;strong&gt;Get it for Firefox.&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://s3.amazonaws.com/markdown-here/markdown-here.safariextz&#34;&gt;&lt;strong&gt;Get it for Safari.&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://addons.mozilla.org/en-US/thunderbird/addon/markdown-here/&#34;&gt;&lt;strong&gt;Get it for Thunderbird and Postbox.&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://addons.opera.com/en/extensions/details/markdown-here/&#34;&gt;&lt;strong&gt;Get it for Opera.&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://groups.google.com/forum/?fromgroups#!forum/markdown-here/&#34;&gt;&lt;strong&gt;Discuss it and ask questions in the Google Group.&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Markdown Here&lt;/em&gt; is a Google Chrome, Firefox, Safari, Opera, and Thunderbird extension that lets you write email&lt;sup&gt;†&lt;/sup&gt; in Markdown&lt;sup&gt;‡&lt;/sup&gt; and render them before sending. It also supports syntax highlighting (just specify the language in a fenced code block).&lt;/p&gt; &#xA;&lt;p&gt;Writing email with code in it is pretty tedious. Writing Markdown with code in it is easy. I found myself writing email in Markdown in the Github in-browser editor, then copying the preview into email. This is a pretty absurd workflow, so I decided create a tool to write and render Markdown right in the email.&lt;/p&gt; &#xA;&lt;p&gt;To discover what can be done with Markdown in &lt;em&gt;Markdown Here&lt;/em&gt;, check out the &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Here-Cheatsheet&#34;&gt;Markdown Here Cheatsheet&lt;/a&gt; and the other &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki&#34;&gt;wiki pages&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;sup&gt;†: And Google Groups posts, and Blogger posts, and Evernote notes, and Wordpress posts! &lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#compatibility&#34;&gt;See more&lt;/a&gt;.&lt;/sup&gt;&lt;br&gt; &lt;sup&gt;‡: And TeX mathematical formulae!&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/adam-p/markdown-here/master/store-assets/markdown-here-image1.gimp.png&#34; alt=&#34;screenshot of conversion&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#installation-instructions&#34;&gt;Installation Instructions&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#usage-instructions&#34;&gt;Usage Instructions&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#notes-and-miscellaneous&#34;&gt;Notes and Miscellaneous&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#building-the-extension-bundles&#34;&gt;Building the Extension Bundles&lt;/a&gt;&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/#next-steps&#34;&gt;Next Steps, Credits, Feedback, License&lt;/a&gt;&lt;/strong&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;Chrome&lt;/h3&gt; &#xA;&lt;h4&gt;Chrome Web Store&lt;/h4&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://chrome.google.com/webstore/detail/elifhakcjgalahccnjkneoccemfahfoa&#34;&gt;Chrome Web Store page for &lt;em&gt;Markdown Here&lt;/em&gt;&lt;/a&gt; and install normally.&lt;/p&gt; &#xA;&lt;p&gt;After installing, make sure to reload your webmail or restart Chrome!&lt;/p&gt; &#xA;&lt;h4&gt;Manual/Development&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo.&lt;/li&gt; &#xA; &lt;li&gt;In Chrome, open the Extensions settings. (Wrench button, Tools, Extensions.)&lt;/li&gt; &#xA; &lt;li&gt;On the Extensions settings page, click the &#34;Developer Mode&#34; checkbox.&lt;/li&gt; &#xA; &lt;li&gt;Click the now-visible &#34;Load unpacked extension…&#34; button. Navigate to the directory where you cloned the repo, then the &lt;code&gt;src&lt;/code&gt; directory under that.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;em&gt;Markdown Here&lt;/em&gt; extension should now be visible in your extensions list.&lt;/li&gt; &#xA; &lt;li&gt;Reload your webmail page (and maybe application) before trying to convert an email.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Firefox and Thunderbird&lt;/h3&gt; &#xA;&lt;h4&gt;Mozilla Add-ons site&lt;/h4&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/markdown-here/&#34;&gt;Firefox Add-ons page for &lt;em&gt;Markdown Here&lt;/em&gt;&lt;/a&gt; and install normally.&lt;/p&gt; &#xA;&lt;p&gt;Or go to the &#34;Tools &amp;gt; Add-ons&#34; menu and then search for &#34;Markdown Here&#34;.&lt;/p&gt; &#xA;&lt;p&gt;After installing, make sure to restart Firefox/Thunderbird!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It takes up to a month for Mozilla to approve changes to the Firefox/Thunderbird extension, so updates (features, fixes) will lag behind what is shown here. You can manually choose to install the newest version before it&#39;s reviewed from the list of versions: &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/markdown-here/versions/&#34;&gt;https://addons.mozilla.org/en-US/firefox/addon/markdown-here/versions/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Manual/Development&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo.&lt;/li&gt; &#xA; &lt;li&gt;Follow the instructions in the MDN &lt;a href=&#34;https://developer.mozilla.org/en/Setting_up_extension_development_environment&#34;&gt;&#34;Setting up an extension development environment&#34;&lt;/a&gt; article.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Safari&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://s3.amazonaws.com/markdown-here/markdown-here.safariextz&#34;&gt;Download the extension directly.&lt;/a&gt; When it has finished downloading, double click it to install.&lt;/p&gt; &#xA;&lt;h4&gt;Preferences&lt;/h4&gt; &#xA;&lt;p&gt;To get to the Markdown Here preferences, open the Safari preferences and then go to the &#34;Extensions&#34; tab. Then click the &#34;Click me to show Markdown Here options&#34; box.&lt;/p&gt; &#xA;&lt;h3&gt;Opera&lt;/h3&gt; &#xA;&lt;p&gt;Note that &lt;em&gt;Markdown Here&lt;/em&gt; only works with Opera versions 16 and higher (i.e., the ones that are based on Chromium).&lt;/p&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://addons.opera.com/en/extensions/details/markdown-here/&#34;&gt;Opera Add-ons store page for &lt;em&gt;Markdown Here&lt;/em&gt;&lt;/a&gt; and install normally.&lt;/p&gt; &#xA;&lt;p&gt;After installing, make sure to reload your webmail or restart Chrome!&lt;/p&gt; &#xA;&lt;h2&gt;Usage Instructions&lt;/h2&gt; &#xA;&lt;p&gt;Install it, and then…&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In Chrome/Safari/Opera, &lt;em&gt;make sure&lt;/em&gt; you reload your web mail page before trying to use Markdown Here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In Chrome/Firefox/Safari/Opera, log into your Gmail, Hotmail, or Yahoo account and start a new email. In Thunderbird, start a new message.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure you&#39;re using the rich editor.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In Gmail, click the &#34;Rich formatting&#34; link, if it&#39;s visible.&lt;/li&gt; &#xA;   &lt;li&gt;In Thunderbird, make sure &#34;Compose messages in HTML format&#34; is enabled in your &#34;Account Settings&#34;, &#34;Composition &amp;amp; Addressing&#34; pane.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Compose an email in Markdown. For example:&lt;/p&gt; &lt;pre&gt;&#xA;**Hello** `world`.&#xA;&#xA;```javascript&#xA;alert(&#39;Hello syntax highlighting.&#39;);&#xA;```&#xA;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Right-click in the compose box and choose the &#34;Markdown Toggle&#34; item from the context menu. Or click the button that appears in your address bar. Or use the hotkey (&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;ALT&lt;/kbd&gt;+&lt;kbd&gt;M&lt;/kbd&gt; by default).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should see your email rendered correctly from Markdown into rich HTML.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Send your awesome email to everyone you know. It will appear to them the same way it looks to you.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Revert to Markdown&lt;/h3&gt; &#xA;&lt;p&gt;After rendering your Markdown to pretty HTML, you can still get back to your original Markdown. Just right-click anywhere in the newly rendered Markdown and click &#34;Markdown Toggle&#34; -- your email compose body will change back to the Markdown you had written.&lt;/p&gt; &#xA;&lt;p&gt;Note that any changes you make to the pretty HTML will be lost when you revert to Markdown.&lt;/p&gt; &#xA;&lt;p&gt;In Gmail, you can also use the browser&#39;s Undo command (&lt;kbd&gt;CTRL&lt;/kbd&gt;+&lt;kbd&gt;Z&lt;/kbd&gt; / &lt;kbd&gt;CMD&lt;/kbd&gt;+&lt;kbd&gt;Z&lt;/kbd&gt;, or from the Edit menu). Be warned that you might also lose the last few characters you entered.&lt;/p&gt; &#xA;&lt;h3&gt;Replies&lt;/h3&gt; &#xA;&lt;p&gt;In Gmail, Thunderbird, and Google Groups, you can use &#34;Markdown Toggle&#34; normally: just write your reply (top, bottom, inline, wherever) and then convert. The original email that you&#39;re replying to will be left alone. (Technically: Existing &lt;code&gt;blockquote&lt;/code&gt; blocks will be left intact.)&lt;/p&gt; &#xA;&lt;p&gt;In Hotmail and Yahoo (which don&#39;t put the original in a &lt;code&gt;blockquote&lt;/code&gt;), and optionally in Gmail, Thunderbird, and Google Groups, you can ensure that only the part of the reply that you wrote gets converted by selecting what you want to convert and then clicking &#34;Markdown Toggle&#34; -- see the next section.&lt;/p&gt; &#xA;&lt;h3&gt;Selection/Piecemeal Conversion&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you don&#39;t want to convert the entire email; sometimes your email isn&#39;t entirely Markdown. To convert only part of the email, select the text (with your mouse or keyboard), right-click on it, and click the &#34;Markdown Toggle&#34; menu item. Your selection is magically rendered into pretty HTML.&lt;/p&gt; &#xA;&lt;p&gt;To revert back to Markdown, just put your cursor anywhere in the block of converted text, right click, and click the &#34;Markdown Toggle&#34; menu item again. Now it&#39;s magically back to the original Markdown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/adam-p/markdown-here/master/store-assets/markdown-here-image2.gimp.png&#34; alt=&#34;screenshot of selection conversion&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Things to know about converting/reverting a selection&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you select only part of a block of text, only that text will be converted. The converted block will be wrapped in a paragraph element, so the original line will be broken up. You probably don&#39;t want to ever do this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can select and revert multiple converted blocks at the same time. One upshot of this is that you can select your entire email, click &#34;Markdown Toggle&#34;, and all portions of it that you had converted will be reverted.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t have anything selected when you click &#34;Markdown Toggle&#34;, &lt;em&gt;Markdown Here&lt;/em&gt; will check if there are converted blocks anywhere in the message and revert them. If there no converted blocks are found, it will convert the entire email.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;em&gt;Markdown Here&lt;/em&gt; Options page can be accessed via the Chrome, Firefox, Safari, or Thunderbird extensions list. The available options include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Styling modifications for the rendered Markdown.&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting theme selection and modification.&lt;/li&gt; &#xA; &lt;li&gt;TeX math formulae processing enabling and customization.&lt;/li&gt; &#xA; &lt;li&gt;What the hotkey should be.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For Chrome and Firefox, any changes made in the &lt;em&gt;Markdown Here&lt;/em&gt; Options are automatically synchronized between your other installations of that browser (if you have the sync feature enabled in the browser).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/adam-p/markdown-here/master/store-assets/markdown-here-chrome-options-1.gimp.png&#34; alt=&#34;screenshot of options&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Troubleshooting&#34;&gt;Troubleshooting wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Compatibility&#34;&gt;Compatibility wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Notes and Miscellaneous&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Markdown Here&lt;/em&gt; uses &lt;a href=&#34;http://github.github.com/github-flavored-markdown/&#34;&gt;Github Flavored Markdown&lt;/a&gt;, with the limitation that GFM special links are not supported (&lt;a href=&#34;https://github.com/adam-p/markdown-here/issues/11&#34;&gt;issue #11&lt;/a&gt;); nor will they be, as MDH is not Github-specific.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Available languages for syntax highlighting (and the way they should be written in the fenced code block) can be seen on the &lt;a href=&#34;http://softwaremaniacs.org/media/soft/highlight/test.html&#34;&gt;highlight.js demo page&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Images embedded inline in your Markdown will be retained when you &#34;Markdown Toggle&#34;. Gmail allows you to put images inline in your email -- this can be much easier than referencing an external image.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Email signatures are automatically excluded from conversion. Specifically, anything after the semi-standard &lt;code&gt;&#39;-- &#39;&lt;/code&gt; (note the trailing space) is left alone.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Note that Hotmail and Yahoo do &lt;em&gt;not&lt;/em&gt; automatically add the &lt;code&gt;&#39;-- &#39;&lt;/code&gt; to signatures, so you have to add it yourself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &#34;Markdown Toggle&#34; menu item shows up for more element types than it can correctly render. This is intended to help people realize that they&#39;re not using a rich editor. Otherwise they just don&#39;t see the menu item and don&#39;t know why.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Styling:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The use of browser-specific styles (-moz-, -webkit-) should be avoided. If used, they may not render correctly for people reading the email in a different browser from the one where the email was sent.&lt;/li&gt; &#xA;   &lt;li&gt;The use of state-dependent styles (like &lt;code&gt;a:hover&lt;/code&gt;) don&#39;t work because they don&#39;t match at the time the styles are made explicit. (In email, styles must be explicitly applied to all elements -- stylesheets get stripped.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For more tweaky features, visit the &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Tips-and-Tricks&#34;&gt;Tips and Tricks&lt;/a&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building the Extension Bundles&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd utils&#xA;node build.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Chrome and Opera extension&lt;/h3&gt; &#xA;&lt;p&gt;Create a file with a &lt;code&gt;.zip&lt;/code&gt; extension containing these files and directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;manifest.json&#xA;common/&#xA;chrome/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Firefox/Thunderbird extension&lt;/h3&gt; &#xA;&lt;p&gt;Create a file with a &lt;code&gt;.xpi&lt;/code&gt; extension containing these files and directories:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;chrome.manifest&#xA;install.rdf&#xA;common/&#xA;firefox/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Safari extension&lt;/h3&gt; &#xA;&lt;p&gt;The browser-specific code is located in the &lt;a href=&#34;https://github.com/adam-p/markdown-here-safari&#34;&gt;&lt;code&gt;markdown-here-safari&lt;/code&gt;&lt;/a&gt; project.&lt;/p&gt; &#xA;&lt;p&gt;Use the Safari Extension Builder.&lt;/p&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/adam-p/markdown-here/issues&#34;&gt;issues list&lt;/a&gt; and the &lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Development-Notes&#34;&gt;Notes Wiki&lt;/a&gt;. All ideas, bugs, plans, complaints, and dreams will end up in one of those two places.&lt;/p&gt; &#xA;&lt;p&gt;Feel free to create a feature request issue if what you want isn&#39;t already there. If you&#39;d prefer a less formal approach to floating an idea, post to the &lt;a href=&#34;https://groups.google.com/forum/?fromgroups=#!forum/markdown-here&#34;&gt;&#34;markdown-here&#34; Google Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It also takes a fair bit of work to stay up-to-date with the latest changes in all the applications and web sites where Markdown Here works.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Markdown Here&lt;/em&gt; was coded on the shoulders of giants.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Markdown-to-HTML: &lt;a href=&#34;https://github.com/chjj/marked&#34;&gt;chjj / marked&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Syntax highlighting: &lt;a href=&#34;https://github.com/isagalaev/highlight.js&#34;&gt;isagalaev / highlight.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HTML-to-text: &lt;a href=&#34;https://github.com/mtrimpe/jsHtmlToText&#34;&gt;mtrimpe / jsHtmlToText&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;All bugs, feature requests, pull requests, feedback, etc., are welcome. &lt;a href=&#34;https://github.com/adam-p/markdown-here/issues&#34;&gt;Create an issue&lt;/a&gt;. Or &lt;a href=&#34;https://groups.google.com/forum/?fromgroups=#!forum/markdown-here&#34;&gt;post to the &#34;markdown-here&#34; Google Group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;p&gt;MIT License: &lt;a href=&#34;http://adampritchard.mit-license.org/&#34;&gt;http://adampritchard.mit-license.org/&lt;/a&gt; or see &lt;a href=&#34;https://github.com/adam-p/markdown-here/raw/master/LICENSE&#34;&gt;the &lt;code&gt;LICENSE&lt;/code&gt; file&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Logo&lt;/h3&gt; &#xA;&lt;p&gt;Copyright 2015, &lt;a href=&#34;http://protractor.ninja/&#34;&gt;Austin Anderson&lt;/a&gt;. Licensed to Markdown Here under the &lt;a href=&#34;https://github.com/adam-p/markdown-here/raw/master/CLA-individual.md&#34;&gt;MDH contributor license agreement&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Other images&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://creativecommons.org/licenses/by/3.0/&#34;&gt;Creative Commons Attribution 3.0 Unported (CC BY 3.0) License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.github.com/adam-p/markdown-here/master/store-assets/dos-equis-MDH.jpg&#34; alt=&#34;Dos Equis man says&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>iamadamdev/bypass-paywalls-chrome</title>
    <updated>2022-07-24T02:00:54Z</updated>
    <id>tag:github.com,2022-07-24:/iamadamdev/bypass-paywalls-chrome</id>
    <link href="https://github.com/iamadamdev/bypass-paywalls-chrome" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bypass Paywalls web browser extension for Chrome and Firefox.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/iamadamdev/bypass-paywalls-chrome/raw/master/src/icons/bypass.png&#34; width=&#34;75&#34; height=&#34;75&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Bypass Paywalls&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Bypass Paywalls is a web browser extension to help bypass paywalls for selected sites.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation Instructions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Google Chrome / Microsoft Edge&lt;/strong&gt; (Custom sites supported)&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download this repo as a &lt;a href=&#34;https://github.com/iamadamdev/bypass-paywalls-chrome/archive/master.zip&#34;&gt;ZIP file from GitHub&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the file and you should have a folder named &lt;code&gt;bypass-paywalls-chrome-master&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;In Chrome/Edge go to the extensions page (&lt;code&gt;chrome://extensions&lt;/code&gt; or &lt;code&gt;edge://extensions&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Enable Developer Mode.&lt;/li&gt; &#xA; &lt;li&gt;Drag the &lt;code&gt;bypass-paywalls-chrome-master&lt;/code&gt; folder anywhere on the page to import it (do not delete the folder afterwards).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mozilla Firefox&lt;/strong&gt; (Custom sites not supported)&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iamadamdev/bypass-paywalls-chrome/releases/latest/download/bypass-paywalls-firefox.xpi&#34;&gt;Download and install the latest version&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every time you open Chrome it may warn you about running extensions in developer mode, just click ✕ to keep the extension enabled.&lt;/li&gt; &#xA; &lt;li&gt;You will be logged out for any site you have checked.&lt;/li&gt; &#xA; &lt;li&gt;This extension works best alongside the adblocker uBlock Origin.&lt;/li&gt; &#xA; &lt;li&gt;The Firefox version supports automatic updates.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bypass the following sites&#39; paywalls with this extension:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.adweek.com&#34;&gt;Adweek&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ad.nl&#34;&gt;Algemeen Dagblad&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.americanbanker.com&#34;&gt;American Banker&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ambito.com&#34;&gt;Ámbito&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.baltimoresun.com&#34;&gt;Baltimore Sun&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.barrons.com&#34;&gt;Barron&#39;s&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.bloombergquint.com&#34;&gt;Bloomberg Quint&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.bloomberg.com&#34;&gt;Bloomberg&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.bndestem.nl&#34;&gt;BN De Stem&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.bostonglobe.com&#34;&gt;Boston Globe&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.bd.nl&#34;&gt;Brabants Dagblad&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.brisbanetimes.com.au&#34;&gt;Brisbane Times&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.businessinsider.com&#34;&gt;Business Insider&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.caixinglobal.com&#34;&gt;Caixin&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.centralwesterndaily.com.au&#34;&gt;Central Western Daily&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://cen.acs.org&#34;&gt;Chemical &amp;amp; Engineering News&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.chicagotribune.com&#34;&gt;Chicago Tribune&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.corriere.it&#34;&gt;Corriere Della Sera&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.chicagobusiness.com&#34;&gt;Crain&#39;s Chicago Business&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.dailypress.com&#34;&gt;Daily Press&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.gelderlander.nl&#34;&gt;De Gelderlander&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.groene.nl&#34;&gt;De Groene Amsterdammer&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.destentor.nl&#34;&gt;De Stentor&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://speld.nl&#34;&gt;De Speld&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.tijd.be&#34;&gt;De Tijd&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.volkskrant.nl&#34;&gt;De Volkskrant&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.demorgen.be&#34;&gt;DeMorgen&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.denverpost.com&#34;&gt;Denver Post&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.df.cl&#34;&gt;Diario Financiero&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.editorialedomani.it&#34;&gt;Domani&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.dynamed.com&#34;&gt;Dynamed Plus&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ed.nl&#34;&gt;Eindhovens Dagblad&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.elmercurio.com&#34;&gt;El Mercurio&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.elpais.com&#34;&gt;El Pais&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.elperiodico.com&#34;&gt;El Periodico&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.elu24.ee&#34;&gt;Elu24&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.britannica.com&#34;&gt;Encyclopedia Britannica&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.estadao.com.br&#34;&gt;Estadão&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.examiner.com.au&#34;&gt;Examiner&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.expansion.com&#34;&gt;Expansión&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.fnlondon.com&#34;&gt;Financial News&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.financialpost.com&#34;&gt;Financial Post&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ft.com&#34;&gt;Financial Times&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.firstthings.com&#34;&gt;First Things&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.foreignpolicy.com&#34;&gt;Foreign Policy&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.fortune.com&#34;&gt;Fortune&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.genomeweb.com&#34;&gt;Genomeweb&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.glassdoor.com&#34;&gt;Glassdoor&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.globes.co.il&#34;&gt;Globes&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.grubstreet.com&#34;&gt;Grubstreet&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.haaretz.co.il&#34;&gt;Haaretz.co.il&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.haaretz.com&#34;&gt;Haaretz.com&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://harpers.org&#34;&gt;Harper&#39;s Magazine&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.courant.com&#34;&gt;Hartford Courant&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.hbr.org&#34;&gt;Harvard Business Review&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.hbrchina.org&#34;&gt;Harvard Business Review China&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.heraldsun.com.au&#34;&gt;Herald Sun&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://fd.nl&#34;&gt;Het Financieel Dagblad&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.historyextra.com&#34;&gt;History Extra&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.humo.be&#34;&gt;Humo&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ilmanifesto.it&#34;&gt;Il Manifesto&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.inc.com&#34;&gt;Inc.com&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.interest.co.nz&#34;&gt;Interest.co.nz&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.investorschronicle.co.uk&#34;&gt;Investors Chronicle&lt;/a&gt; &lt;a href=&#34;https://www.lecho.be&#34;&gt;L&#39;Écho&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://labusinessjournal.com&#34;&gt;L.A. Business Journal&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.lanacion.com.ar&#34;&gt;La Nación&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.repubblica.it&#34;&gt;La Repubblica&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.lastampa.it&#34;&gt;La Stampa&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.latercera.com&#34;&gt;La Tercera&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.lavoixdunord.fr&#34;&gt;La Voix du Nord&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ledevoir.com&#34;&gt;Le Devoir&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.leparisien.fr&#34;&gt;Le Parisien&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.lesechos.fr&#34;&gt;Les Échos&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.loebclassics.com&#34;&gt;Loeb Classical Library&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.lrb.co.uk&#34;&gt;London Review of Books&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.latimes.com&#34;&gt;Los Angeles Times&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://sloanreview.mit.edu&#34;&gt;MIT Sloan Management Review&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.technologyreview.com&#34;&gt;MIT Technology Review&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.medium.com&#34;&gt;Medium&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.medscape.com&#34;&gt;Medscape&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://mexiconewsdaily.com&#34;&gt;Mexicon News Daily&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.mv-voice.com&#34;&gt;Mountain View Voice&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nationalgeographic.com&#34;&gt;National Geographic&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nydailynews.com&#34;&gt;New York Daily News&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nrc.nl&#34;&gt;NRC Handelsblad&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ntnews.com.au&#34;&gt;NT News&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nationalpost.com&#34;&gt;National Post&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nzz.ch&#34;&gt;Neue Zürcher Zeitung&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nymag.com&#34;&gt;New York Magazine&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nzherald.co.nz&#34;&gt;New Zealand Herald&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.ocregister.com&#34;&gt;Orange County Register&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.orlandosentinel.com&#34;&gt;Orlando Sentinel&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.pzc.nl&#34;&gt;PZC&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.paloaltoonline.com&#34;&gt;Palo Alto Online&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.parool.nl&#34;&gt;Parool&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.postimees.ee&#34;&gt;Postimees&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://qz.com&#34;&gt;Quartz&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.quora.com&#34;&gt;Quora&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://quotidiani.gelocal.it&#34;&gt;Quotidiani Gelocal&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://republic.ru&#34;&gt;Republic.ru&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.reuters.com&#34;&gt;Reuters&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.sandiegouniontribune.com&#34;&gt;San Diego Union Tribune&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.sfchronicle.com&#34;&gt;San Francisco Chronicle&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.scientificamerican.com&#34;&gt;Scientific American&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://seekingalpha.com&#34;&gt;Seeking Alpha&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://slate.com&#34;&gt;Slate&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://sofrep.com&#34;&gt;SOFREP&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.statista.com&#34;&gt;Statista&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.startribune.com&#34;&gt;Star Tribune&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.stuff.co.nz&#34;&gt;Stuff&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.sun-sentinel.com&#34;&gt;SunSentinel&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.techinasia.com&#34;&gt;Tech in Asia&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.telegraaf.nl&#34;&gt;Telegraaf&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.adelaidenow.com.au&#34;&gt;The Advertiser&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theadvocate.com.au&#34;&gt;The Advocate&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theage.com.au&#34;&gt;The Age&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.the-american-interest.com&#34;&gt;The American Interest&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theathletic.com&#34;&gt;The Athletic&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theathletic.co.uk&#34;&gt;The Athletic (UK)&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theatlantic.com&#34;&gt;The Atlantic&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.afr.com&#34;&gt;The Australian Financial Review&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theaustralian.com.au&#34;&gt;The Australian&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.bizjournals.com&#34;&gt;The Business Journals&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.canberratimes.com.au&#34;&gt;The Canberra Times&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thecourier.com.au&#34;&gt;The Courier&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.couriermail.com.au&#34;&gt;The Courier Mail&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thecut.com&#34;&gt;The Cut&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.dailytelegraph.com.au&#34;&gt;The Daily Telegraph&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thediplomat.com&#34;&gt;The Diplomat&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.economist.com&#34;&gt;The Economist&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theglobeandmail.com&#34;&gt;The Globe and Mail&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theherald.com.au&#34;&gt;The Herald&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thehindu.com&#34;&gt;The Hindu&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.irishtimes.com&#34;&gt;The Irish Times&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.kansascity.com&#34;&gt;The Kansas City Star&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.mercurynews.com&#34;&gt;The Mercury News&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.themercury.com.au&#34;&gt;The Mercury Tasmania&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.mcall.com&#34;&gt;The Morning Call&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thenation.com&#34;&gt;The Nation&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thenational.scot&#34;&gt;The National&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.newstatesman.com&#34;&gt;The New Statesman&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.nytimes.com&#34;&gt;The New York Times&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.newyorker.com&#34;&gt;The New Yorker&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.news-gazette.com&#34;&gt;The News-Gazette&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.theolivepress.es&#34;&gt;The Olive Press&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.inquirer.com&#34;&gt;The Philadelphia Inquirer&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thesaturdaypaper.com.au&#34;&gt;The Saturday Paper&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.seattletimes.com&#34;&gt;The Seattle Times&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.spectator.com.au&#34;&gt;The Spectator Australia&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.spectator.co.uk&#34;&gt;The Spectator&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.smh.com.au&#34;&gt;The Sydney Morning Herald&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.telegraph.co.uk&#34;&gt;The Telegraph&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thestar.com&#34;&gt;The Toronto Star&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.wsj.com&#34;&gt;The Wall Street Journal&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.washingtonpost.com&#34;&gt;The Washington Post&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.thewrap.com&#34;&gt;The Wrap&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.themarker.com&#34;&gt;TheMarker&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.the-tls.co.uk&#34;&gt;Times Literary Supplement&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.towardsdatascience.com&#34;&gt;Towards Data Science&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.trouw.nl&#34;&gt;Trouw&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.tubantia.nl&#34;&gt;Tubantia&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.vanityfair.com&#34;&gt;Vanity Fair&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.vn.nl&#34;&gt;Vrij Nederland&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.vulture.com&#34;&gt;Vulture&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://journalnow.com&#34;&gt;Winston-Salem Journal&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.wired.com&#34;&gt;Wired&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.worldpoliticsreview.com&#34;&gt;World Politics Review&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.zeit.de&#34;&gt;Zeit Online&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sites with limited number of free articles&lt;/h3&gt; &#xA;&lt;p&gt;The free article limit can normally be bypassed by removing cookies for the site.*&lt;/p&gt; &#xA;&lt;p&gt;Install the Cookie Remover extension &lt;a href=&#34;https://chrome.google.com/webstore/detail/cookie-remover/kcgpggonjhmeaejebeoeomdlohicfhce&#34;&gt;for Google Chrome&lt;/a&gt; or &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/cookie-remover/&#34;&gt;for Mozilla Firefox&lt;/a&gt;. Please rate it 5 stars if you find it useful.&lt;/p&gt; &#xA;&lt;p&gt;When coming across a paywall click the cookie icon to remove the cookies then refresh the page.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;*May not always succeed&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;New site requests&lt;/h3&gt; &#xA;&lt;p&gt;Only large or major sites will be considered. Usually premium articles cannot be bypassed as they are behind a hard paywall.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install the uBlock Origin extension if it hasn&#39;t been installed already. See if you are still getting a paywall.&lt;/li&gt; &#xA; &lt;li&gt;Check if using Cookie Remover (&lt;a href=&#34;https://chrome.google.com/webstore/detail/cookie-remover/kcgpggonjhmeaejebeoeomdlohicfhce&#34;&gt;Google Chrome version&lt;/a&gt; or &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/cookie-remover/&#34;&gt;Mozilla Firefox version&lt;/a&gt;) can bypass the paywall. If not, continue to the next step.&lt;/li&gt; &#xA; &lt;li&gt;First search &lt;a href=&#34;https://github.com/iamadamdev/bypass-paywalls-chrome/issues&#34;&gt;Issues&lt;/a&gt; to see if the site has been requested already.&lt;/li&gt; &#xA; &lt;li&gt;Visit an article on the site you want to bypass the paywall for and copy the article title.&lt;/li&gt; &#xA; &lt;li&gt;Open up a new incognito window (Ctrl+Shift+N on Chrome) or Private window (Ctrl+Shift+P on Firefox), and paste the article title into Google.&lt;/li&gt; &#xA; &lt;li&gt;Click on the same article from the Google search results page.&lt;/li&gt; &#xA; &lt;li&gt;If it loads without a paywall you can &lt;a href=&#34;https://github.com/iamadamdev/bypass-paywalls-chrome/issues/new/choose&#34;&gt;submit a request&lt;/a&gt; and replace the entire template text with the word &#34;Confirmed&#34;. Otherwise please do not submit an issue as this extension cannot bypass it either.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Troubleshooting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This extension works best alongside uBlock Origin &lt;a href=&#34;https://chrome.google.com/webstore/detail/ublock-origin/cjpalhdlnbpafiamejdnhcphjbkeiagm&#34;&gt;for Google Chrome&lt;/a&gt; or &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ublock-origin/&#34;&gt;for Mozilla Firefox&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If a site doesn&#39;t work, try turning off uBlock and refreshing.&lt;/li&gt; &#xA; &lt;li&gt;Try clearing &lt;a href=&#34;https://chrome.google.com/webstore/detail/cookie-remover/kcgpggonjhmeaejebeoeomdlohicfhce&#34;&gt;cookies&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make sure you&#39;re running the latest version of Bypass Paywalls.&lt;/li&gt; &#xA; &lt;li&gt;If a site is having problems try unchecking &#34;*General Paywall Bypass*&#34; in Options.&lt;/li&gt; &#xA; &lt;li&gt;If none of these work, you can submit an issue &lt;a href=&#34;https://github.com/iamadamdev/bypass-paywalls-chrome/issues/new/choose&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing - Pull Requests&lt;/h3&gt; &#xA;&lt;p&gt;PRs are welcome.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;If making a PR to add a new site, confirm your changes actually bypass the paywall.&lt;/li&gt; &#xA; &lt;li&gt;At a minimum these files need to be updated: &lt;code&gt;README.md&lt;/code&gt;, &lt;code&gt;manifest-ff.json&lt;/code&gt;, &lt;code&gt;src/js/sites.js&lt;/code&gt;, and possibly &lt;code&gt;src/js/background.js&lt;/code&gt;, and/or &lt;code&gt;src/js/contentScript.js&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow existing code-style and use camelCase.&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://github.com/standard/semistandard&#34;&gt;JavaScript Semi-Standard Style linter&lt;/a&gt;. Don&#39;t need to follow it exactly. There will be some errors (e.g., do not use it on &lt;code&gt;sites.js&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Show your support&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow me on Twitter &lt;a href=&#34;https://twitter.com/iamadamdev&#34;&gt;@iamadamdev&lt;/a&gt; for updates.&lt;/li&gt; &#xA; &lt;li&gt;I do not ask for donations, all I ask is that you star this repo.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Disclaimer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This software is provided for educational purposes only and is provided &#34;AS IS&#34;, without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>