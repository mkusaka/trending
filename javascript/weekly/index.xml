<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-08T01:57:52Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MuhammedKalkan/OpenLens</title>
    <updated>2023-01-08T01:57:52Z</updated>
    <id>tag:github.com,2023-01-08:/MuhammedKalkan/OpenLens</id>
    <link href="https://github.com/MuhammedKalkan/OpenLens" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenLens Binary Build Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenLens Build Repo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MuhammedKalkan/OpenLens/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/MuhammedKalkan/OpenLens/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Lens&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Build Repo Only&lt;/h2&gt; &#xA;&lt;p&gt;This repo &lt;strong&gt;ONLY PROVIDES SIGNED BINARIES AND DOES NOT ALTER SOURCE CODE&lt;/strong&gt; for the OpenLens repo. For software issues regarding OpenLens or the Lens IDE, go to the &lt;a href=&#34;https://github.com/lensapp/lens/issues&#34;&gt;Lens repo&lt;/a&gt; and open an issue there.&lt;/p&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;Starting with 6.3.0 some extensions are removed from Lens. To install these most used extensions simply type &lt;strong&gt;@alebcay/openlens-node-pod-menu&lt;/strong&gt; into the Extensions UI in OpenLens Settings page and it should install automatically. For sources please refer &lt;a href=&#34;https://www.npmjs.com/package/@alebcay/openlens-node-pod-menu&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This is the Binary Build Repo for the &lt;a href=&#34;https://github.com/lensapp/lens.git&#34;&gt;Lens repository&lt;/a&gt; aka &lt;strong&gt;OpenLens&lt;/strong&gt;. This build only includes the open source part of the Lens IDE and does not require login. This repo was created due to lensapp/lens#5444.&lt;/p&gt; &#xA;&lt;p&gt;Download and use as is. If you have trouble about not seeing pod logs, remove old config files / extensions remaining from old Lens app.&lt;/p&gt; &#xA;&lt;p&gt;Auto Updater is now live starting with every binary downloaded with the &lt;code&gt;Latest&lt;/code&gt; tag or the corresponding release assets.&lt;/p&gt; &#xA;&lt;h3&gt;OpenLens vs Lens IDE&lt;/h3&gt; &#xA;&lt;p&gt;Paraphrasing from the &lt;a href=&#34;https://github.com/lensapp/lens#readme&#34;&gt;OpenLens README&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;OpenLens&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/lensapp/lens.git&#34;&gt;OpenLens repository&lt;/a&gt;, is where Team Lens (Mirantis) develops the &lt;a href=&#34;https://k8slens.dev/&#34;&gt;Lens IDE&lt;/a&gt; product together with the community. It is backed by a number of Kubernetes and cloud native ecosystem pioneers. This source code is available to everyone under the &lt;a href=&#34;https://github.com/lensapp/lens/raw/master/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Lens IDE&lt;/h4&gt; &#xA;&lt;p&gt;The Kubernetes management tool &lt;a href=&#34;https://k8slens.dev/&#34;&gt;Lens IDE&lt;/a&gt; is a distribution of the OpenLens repository with Team Lens specific customizations released under a traditional EULA.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Manual&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://github.com/MuhammedKalkan/OpenLens/releases&#34;&gt;Releases&lt;/a&gt; and download the relevant binary for your system.&lt;/p&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;h4&gt;Homebrew&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install --cask openlens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;p&gt;Download and install appropriate package (&lt;code&gt;.rpm&lt;/code&gt;, &lt;code&gt;.deb&lt;/code&gt; or &lt;code&gt;.AppImage&lt;/code&gt;) and install based on available package manager.&lt;/p&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Scoop&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop bucket add extras&#xA;scoop install openlens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Winget&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;winget install openlens&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;Big Thanks to &lt;a href=&#34;https://github.com/ebbypeter&#34;&gt;Ebby Peter&lt;/a&gt; , &lt;a href=&#34;https://github.com/xavierLowmiller&#34;&gt;Xaver Lohmüller&lt;/a&gt; and those who all supported to raise funds, for their contributions to signing the app for the community&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>6dylan6/jdpro</title>
    <updated>2023-01-08T01:57:52Z</updated>
    <id>tag:github.com,2023-01-08:/6dylan6/jdpro</id>
    <link href="https://github.com/6dylan6/jdpro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;青龙脚本库&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;DY&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;加密js审查，无重复，默认无加购，内部互助(可选模式);&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;欢迎大家issue、pr，会一一回复！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;上车注意安全，不用不明js，app，exe！&lt;/h3&gt; &#xA;&lt;h3&gt;防走失&lt;a href=&#34;https://t.me/dylan_jdpro&#34;&gt;TG频道&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;一键部署（2.11.3版本青龙，默认国内机拉库命令，建好后根据自己情况调整）&lt;/h3&gt; &#xA;&lt;p&gt;使用root用户运行下面一串命令，支持Centos/Ubuntu系统&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://js.dayplus.xyz/https://raw.githubusercontent.com/6dylan6/jdpro/main/docker/ql1key.sh -o install.sh &amp;amp;&amp;amp; bash install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;拉库指令&lt;/h2&gt; &#xA;&lt;p&gt;【注意】2.11.1前版本青龙config.sh配置把GithubProxyUrl=&#34;&lt;a href=&#34;https://ghproxy.com/&#34;&gt;https://ghproxy.com/&lt;/a&gt; （差不在多19行）&#34; 修改为GithubProxyUrl=&#34;&#34;，否则拉取失败，以上版本无需配置。&lt;/p&gt; &#xA;&lt;p&gt;2.13版本以上拉库方式变了，到订阅管理添加订阅，请看配置&lt;a href=&#34;https://github.com/6dylan6/jdpro/issues/251&#34;&gt;截图&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;国内机用下面指令（带代理）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://ghproxy.com/https://github.com/6dylan6/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如默认代理ghproxy.com 拉不动，换备用的 js.dayplus.xyz&lt;/p&gt; &#xA;&lt;p&gt;国外机用下面指令（无需代理）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://github.com/6dylan6/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Gitee版不能正常拉取，已停止维护！（20220711）&lt;/p&gt; &#xA;&lt;p&gt;任务定时建议 50 7-23/2 * * *&lt;/p&gt; &#xA;&lt;p&gt;线报监控类脚本已移除，需要的到 &lt;a href=&#34;https://github.com/6dylan6/jdm.git&#34;&gt;https://github.com/6dylan6/jdm.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;自动评价 需要的到 &lt;a href=&#34;https://github.com/6dylan6/auto_comment.git&#34;&gt;https://github.com/6dylan6/auto_comment.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用流程&lt;/h2&gt; &#xA;&lt;p&gt;1、青龙部署。&lt;/p&gt; &#xA;&lt;p&gt;2、修改青龙config.sh配置，差不多在17行（特别注意，没有修改此配置，任务拉不全，一键部署忽略此处）&lt;/p&gt; &#xA;&lt;p&gt;RepoFileExtensions=&#34;js py&#34;修改为 RepoFileExtensions=&#34;js py sh ts&#34; 保存&lt;/p&gt; &#xA;&lt;p&gt;3、新建拉库任务，并执行，刷新浏览器即可看到添加的任务。&lt;/p&gt; &#xA;&lt;p&gt;4、添加CK环境变量，多CK不要写在一起，每个都新建JD_COOKIE变量；&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;使用技巧与问题解答&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#xA;&lt;p&gt;1、涉及兑换或需要抢的可以配置任务并发，就是全部一起跑。&lt;/p&gt;&#xA;&lt;p&gt;并发配置方法：&lt;/p&gt;&#xA;&lt;p&gt;在任务后面加conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;如 task XXXXX.js conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;任务分组运行方法：&lt;/p&gt;&#xA;&lt;p&gt;在任务后面加desi JD_COOKIE 需要运行的ck序号&lt;/p&gt;&#xA;&lt;p&gt;如 task XXXX.js desi JD_COOKIE 1-10 前10个一组运行，2 8 9就是第2/8/9序号的ck执行，以此类推。&lt;/p&gt;&#xA;&lt;p&gt;2、极速版签到建议并发，号多跑很久的，一个号要30多分钟。。&lt;/p&gt;&#xA;&lt;p&gt;task 6dylan6_jdpro_jd_speed_sign.js conc JD_COOKIE （具体任务路径不同版本不一样，按自己的写）&lt;/p&gt;&#xA;&lt;p&gt;3、保价建议并发，否则可能前几个号正常跑，后面会报频繁！&lt;/p&gt;&#xA;&lt;p&gt;task 6dylan6_jdpro_jd_price.js conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;4、通知支持一对一推送和显示备注，还有分组通知等用法参考&lt;a href=&#34;https://raw.githubusercontent.com/6dylan6/jdpro/main/notify.md&#34;&gt;notify.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;备注显示变量如下&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;1&#34; 不做任何变动&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;2&#34; 效果是 : 账号名称：别名(备注)&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;3&#34; 效果是 : 账号名称：pin(备注)&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;4&#34; 效果是 : 账号名称：备注&lt;/p&gt;&#xA;&lt;p&gt;5、因为青龙有随机延时（可以在配置文件设置为0，默认300秒），所以涉及准点运行的任务，最后加now，如果是desi或conc不用加也会准时跑。&lt;/p&gt;&#xA;&lt;p&gt;6、青龙系统通知（新增删除任务、登录等通知），需把通知变量写到config.sh文件，在环境变量里只发脚本运行通知哈。&lt;/p&gt;&#xA;&lt;p&gt;7、如果通知文件发现和库里的不一致，那是被青龙自带的覆盖了，手动拷贝一份到deps目录下。&lt;/p&gt;&#xA;&lt;/code&gt;&lt;p&gt;&lt;code&gt;8、建议调整任务运行超时时间，青龙默认1小时有些脚本跑不完就被强制kill，config.sh里配置。CommandTimeoutTime=&#34;3h&#34; 即改为3小时，根据自己的号数量调整。 &lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;加密脚本说明&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;加密脚本，不放心可禁用&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#xA;加密的会在任务后添加加密标识&#xA;开卡系列都加密 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;互助模式使用说明&lt;/h2&gt; &#xA;&lt;p&gt;集成互助研究院taskbefore,code模块，可实现临时禁止某些CK参加所有活动或某些活动功能，实现重组CK顺序功能，包括随机、优先、轮换、组队、分段等功能&lt;/p&gt; &#xA;&lt;p&gt;常用变量举例：&lt;/p&gt; &#xA;&lt;p&gt;Recombin_CK_Mode=&#34;1&#34; 全部顺序随机&lt;/p&gt; &#xA;&lt;p&gt;Recombin_CK_Mode=&#34;2&#34; Recombin_CK_ARG1=&#34;15&#34; 假设有100个CK，前15个CK按正常顺序靠前，其余CK随机乱序&lt;/p&gt; &#xA;&lt;p&gt;Recombin_CK_Mode=&#34;3&#34; Recombin_CK_ARG1=&#34;5&#34; Recombin_CK_ARG2=&#34;5&#34; 假设有100个CK，希望前5个账号始终保持在前部，剩余95个账号按照轮换模式每天轮换5个&lt;/p&gt; &#xA;&lt;p&gt;其他用法具体参考&lt;a href=&#34;https://docs.qq.com/doc/DTXh6QUVjRXJ1TFdN&#34;&gt;文档&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;部分脚本环境变量&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Zy143L/wskey&#34;&gt;Wskey转换环境变量&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;归属&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;属性&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;PET_NOTIFY_CONTROL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;东东萌宠&lt;br&gt;推送开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制京东萌宠是否静默运行,&lt;br&gt;&lt;code&gt;false&lt;/code&gt;为否(发送推送通知消息),&lt;code&gt;true&lt;/code&gt;为是(即：不发送推送通知消息)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;FRUIT_NOTIFY_CONTROL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;东东农场&lt;br&gt;推送开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制京东农场是否静默运行,&lt;br&gt;&lt;code&gt;false&lt;/code&gt;为否(发送推送通知消息),&lt;code&gt;true&lt;/code&gt;为是(即：不发送推送通知消息)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;NOTIFY_AUTOCHECKCK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;自动禁用失效CK开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;有CK失效自动禁用并通知，true为自动禁用，false不自动禁用，默认false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JOY_FEED_COUNT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;宠汪汪喂食数量&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制&lt;code&gt;jd_joy_feedPets.js&lt;/code&gt;脚本喂食数量,可以填的数字10,20,40,80,其他数字不可.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;NOTIFY_SKIP_LIST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;控制关闭某些标题的通知&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;通知标题在此变量里面存在(&amp;amp;隔开),则屏蔽不发送通知.例 : export NOTIFY_SKIP_LIST=&#34;临期京豆换喜豆&amp;amp;京东资产统计&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;FRUIT_BEAN_CARD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;农场&lt;br&gt;使用水滴换豆卡&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;农场使用水滴换豆卡(如果出现限时活动时100g水换20豆,此时比浇水划算,推荐换豆),&lt;br&gt;&lt;code&gt;true&lt;/code&gt;表示换豆(不浇水),&lt;code&gt;false&lt;/code&gt;表示不换豆(继续浇水),脚本默认是浇水&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JD_UNSUB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;批量取消商品与店铺关注开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制jd_unsubscribe.js运行，默认为true取关，false不取关&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JD_CART_REMOVE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;清空购物车&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制jd_clean_car.js运行 ，默认false不清空，true清空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;WSKEY_DISCHECK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;wskey转换&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认为false检查，设置true为不检查直接转换&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;DPSTOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;店铺签到&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;多个&amp;amp;隔开&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>auth0/node-jsonwebtoken</title>
    <updated>2023-01-08T01:57:52Z</updated>
    <id>tag:github.com,2023-01-08:/auth0/node-jsonwebtoken</id>
    <link href="https://github.com/auth0/node-jsonwebtoken" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JsonWebToken implementation for node.js http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jsonwebtoken&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Dependency&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://travis-ci.org/auth0/node-jsonwebtoken&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/auth0/node-jsonwebtoken.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://david-dm.org/auth0/node-jsonwebtoken&#34;&gt;&lt;img src=&#34;https://david-dm.org/auth0/node-jsonwebtoken.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;An implementation of &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;JSON Web Tokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This was developed against &lt;code&gt;draft-ietf-oauth-json-web-token-08&lt;/code&gt;. It makes use of &lt;a href=&#34;https://github.com/brianloveswords/node-jws&#34;&gt;node-jws&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install jsonwebtoken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Migration notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/wiki/Migration-Notes:-v8-to-v9&#34;&gt;From v8 to v9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/wiki/Migration-Notes:-v7-to-v8&#34;&gt;From v7 to v8&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;jwt.sign(payload, secretOrPrivateKey, [options, callback])&lt;/h3&gt; &#xA;&lt;p&gt;(Asynchronous) If a callback is supplied, the callback is called with the &lt;code&gt;err&lt;/code&gt; or the JWT.&lt;/p&gt; &#xA;&lt;p&gt;(Synchronous) Returns the JsonWebToken as string&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;payload&lt;/code&gt; could be an object literal, buffer or string representing valid JSON.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Please &lt;em&gt;note&lt;/em&gt; that&lt;/strong&gt; &lt;code&gt;exp&lt;/code&gt; or any other claim is only set if the payload is an object literal. Buffer or string payloads are not checked for JSON validity.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If &lt;code&gt;payload&lt;/code&gt; is not a buffer or a string, it will be coerced into a string using &lt;code&gt;JSON.stringify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;secretOrPrivateKey&lt;/code&gt; is a string (utf-8 encoded), buffer, object, or KeyObject containing either the secret for HMAC algorithms or the PEM encoded private key for RSA and ECDSA. In case of a private key with passphrase an object &lt;code&gt;{ key, passphrase }&lt;/code&gt; can be used (based on &lt;a href=&#34;https://nodejs.org/api/crypto.html#crypto_sign_sign_private_key_output_format&#34;&gt;crypto documentation&lt;/a&gt;), in this case be sure you pass the &lt;code&gt;algorithm&lt;/code&gt; option. When signing with RSA algorithms the minimum modulus length is 2048 except when the allowInsecureKeySizes option is set to true. Private keys below this size will be rejected with an error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;options&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;algorithm&lt;/code&gt; (default: &lt;code&gt;HS256&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;expiresIn&lt;/code&gt;: expressed in seconds or a string describing a time span &lt;a href=&#34;https://github.com/vercel/ms&#34;&gt;vercel/ms&lt;/a&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;60&lt;/code&gt;, &lt;code&gt;&#34;2 days&#34;&lt;/code&gt;, &lt;code&gt;&#34;10h&#34;&lt;/code&gt;, &lt;code&gt;&#34;7d&#34;&lt;/code&gt;. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (&lt;code&gt;&#34;120&#34;&lt;/code&gt; is equal to &lt;code&gt;&#34;120ms&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notBefore&lt;/code&gt;: expressed in seconds or a string describing a time span &lt;a href=&#34;https://github.com/vercel/ms&#34;&gt;vercel/ms&lt;/a&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;60&lt;/code&gt;, &lt;code&gt;&#34;2 days&#34;&lt;/code&gt;, &lt;code&gt;&#34;10h&#34;&lt;/code&gt;, &lt;code&gt;&#34;7d&#34;&lt;/code&gt;. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (&lt;code&gt;&#34;120&#34;&lt;/code&gt; is equal to &lt;code&gt;&#34;120ms&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;audience&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issuer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jwtid&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;subject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;noTimestamp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;header&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keyid&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mutatePayload&lt;/code&gt;: if true, the sign function will modify the payload object directly. This is useful if you need a raw reference to the payload after claims have been applied to it but before it has been encoded into a token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowInsecureKeySizes&lt;/code&gt;: if true allows private keys with a modulus below 2048 to be used for RSA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowInvalidAsymmetricKeyTypes&lt;/code&gt;: if true, allows asymmetric keys which do not match the specified algorithm. This option is intended only for backwards compatability and should be avoided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There are no default values for &lt;code&gt;expiresIn&lt;/code&gt;, &lt;code&gt;notBefore&lt;/code&gt;, &lt;code&gt;audience&lt;/code&gt;, &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;issuer&lt;/code&gt;. These claims can also be provided in the payload directly with &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;nbf&lt;/code&gt;, &lt;code&gt;aud&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;iss&lt;/code&gt; respectively, but you &lt;strong&gt;&lt;em&gt;can&#39;t&lt;/em&gt;&lt;/strong&gt; include in both places.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Remember that &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;nbf&lt;/code&gt; and &lt;code&gt;iat&lt;/code&gt; are &lt;strong&gt;NumericDate&lt;/strong&gt;, see related &lt;a href=&#34;https://raw.githubusercontent.com/auth0/node-jsonwebtoken/master/#token-expiration-exp-claim&#34;&gt;Token Expiration (exp claim)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The header can be customized via the &lt;code&gt;options.header&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;Generated jwts will include an &lt;code&gt;iat&lt;/code&gt; (issued at) claim by default unless &lt;code&gt;noTimestamp&lt;/code&gt; is specified. If &lt;code&gt;iat&lt;/code&gt; is inserted in the payload, it will be used instead of the real timestamp for calculating other things like &lt;code&gt;exp&lt;/code&gt; given a timespan in &lt;code&gt;options.expiresIn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Synchronous Sign with default (HMAC SHA256)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var jwt = require(&#39;jsonwebtoken&#39;);&#xA;var token = jwt.sign({ foo: &#39;bar&#39; }, &#39;shhhhh&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Synchronous Sign with RSA SHA256&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// sign with RSA SHA256&#xA;var privateKey = fs.readFileSync(&#39;private.key&#39;);&#xA;var token = jwt.sign({ foo: &#39;bar&#39; }, privateKey, { algorithm: &#39;RS256&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sign asynchronously&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.sign({ foo: &#39;bar&#39; }, privateKey, { algorithm: &#39;RS256&#39; }, function(err, token) {&#xA;  console.log(token);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Backdate a jwt 30 seconds&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var older_token = jwt.sign({ foo: &#39;bar&#39;, iat: Math.floor(Date.now() / 1000) - 30 }, &#39;shhhhh&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Token Expiration (exp claim)&lt;/h4&gt; &#xA;&lt;p&gt;The standard for JWT defines an &lt;code&gt;exp&lt;/code&gt; claim for expiration. The expiration is represented as a &lt;strong&gt;NumericDate&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition &#34;Seconds Since the Epoch&#34;, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This means that the &lt;code&gt;exp&lt;/code&gt; field should contain the number of seconds since the epoch.&lt;/p&gt; &#xA;&lt;p&gt;Signing a token with 1 hour of expiration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jwt.sign({&#xA;  exp: Math.floor(Date.now() / 1000) + (60 * 60),&#xA;  data: &#39;foobar&#39;&#xA;}, &#39;secret&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to generate a token like this with this library is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jwt.sign({&#xA;  data: &#39;foobar&#39;&#xA;}, &#39;secret&#39;, { expiresIn: 60 * 60 });&#xA;&#xA;//or even better:&#xA;&#xA;jwt.sign({&#xA;  data: &#39;foobar&#39;&#xA;}, &#39;secret&#39;, { expiresIn: &#39;1h&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;jwt.verify(token, secretOrPublicKey, [options, callback])&lt;/h3&gt; &#xA;&lt;p&gt;(Asynchronous) If a callback is supplied, function acts asynchronously. The callback is called with the decoded payload if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will be called with the error.&lt;/p&gt; &#xA;&lt;p&gt;(Synchronous) If a callback is not supplied, function acts synchronously. Returns the payload decoded if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will throw the error.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; When the token comes from an untrusted source (e.g. user input or external requests), the returned decoded payload should be treated like any other user input; please make sure to sanitize and only work with properties that are expected&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;token&lt;/code&gt; is the JsonWebToken string&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;secretOrPublicKey&lt;/code&gt; is a string (utf-8 encoded), buffer, or KeyObject containing either the secret for HMAC algorithms, or the PEM encoded public key for RSA and ECDSA. If &lt;code&gt;jwt.verify&lt;/code&gt; is called asynchronous, &lt;code&gt;secretOrPublicKey&lt;/code&gt; can be a function that should fetch the secret or public key. See below for a detailed example&lt;/p&gt; &#xA;&lt;p&gt;As mentioned in &lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/issues/208#issuecomment-231861138&#34;&gt;this comment&lt;/a&gt;, there are other libraries that expect base64 encoded secrets (random bytes encoded using base64), if that is your case you can pass &lt;code&gt;Buffer.from(secret, &#39;base64&#39;)&lt;/code&gt;, by doing this the secret will be decoded using base64 and the token verification will use the original random bytes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;options&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;algorithms&lt;/code&gt;: List of strings with the names of the allowed algorithms. For instance, &lt;code&gt;[&#34;HS256&#34;, &#34;HS384&#34;]&lt;/code&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If not specified a defaults will be used based on the type of key provided&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;secret - [&#39;HS256&#39;, &#39;HS384&#39;, &#39;HS512&#39;]&lt;/li&gt; &#xA;    &lt;li&gt;rsa - [&#39;RS256&#39;, &#39;RS384&#39;, &#39;RS512&#39;]&lt;/li&gt; &#xA;    &lt;li&gt;ec - [&#39;ES256&#39;, &#39;ES384&#39;, &#39;ES512&#39;]&lt;/li&gt; &#xA;    &lt;li&gt;default - [&#39;RS256&#39;, &#39;RS384&#39;, &#39;RS512&#39;]&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;audience&lt;/code&gt;: if you want to check audience (&lt;code&gt;aud&lt;/code&gt;), provide a value here. The audience can be checked against a string, a regular expression or a list of strings and/or regular expressions. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;&#34;urn:foo&#34;&lt;/code&gt;, &lt;code&gt;/urn:f[o]{2}/&lt;/code&gt;, &lt;code&gt;[/urn:f[o]{2}/, &#34;urn:bar&#34;]&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complete&lt;/code&gt;: return an object with the decoded &lt;code&gt;{ payload, header, signature }&lt;/code&gt; instead of only the usual content of the payload.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issuer&lt;/code&gt; (optional): string or array of strings of valid values for the &lt;code&gt;iss&lt;/code&gt; field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jwtid&lt;/code&gt; (optional): if you want to check JWT ID (&lt;code&gt;jti&lt;/code&gt;), provide a string value here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignoreExpiration&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt; do not validate the expiration of the token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignoreNotBefore&lt;/code&gt;...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;subject&lt;/code&gt;: if you want to check subject (&lt;code&gt;sub&lt;/code&gt;), provide a value here&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clockTolerance&lt;/code&gt;: number of seconds to tolerate when checking the &lt;code&gt;nbf&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; claims, to deal with small clock differences among different servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxAge&lt;/code&gt;: the maximum allowed age for tokens to still be valid. It is expressed in seconds or a string describing a time span &lt;a href=&#34;https://github.com/vercel/ms&#34;&gt;vercel/ms&lt;/a&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;1000&lt;/code&gt;, &lt;code&gt;&#34;2 days&#34;&lt;/code&gt;, &lt;code&gt;&#34;10h&#34;&lt;/code&gt;, &lt;code&gt;&#34;7d&#34;&lt;/code&gt;. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (&lt;code&gt;&#34;120&#34;&lt;/code&gt; is equal to &lt;code&gt;&#34;120ms&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clockTimestamp&lt;/code&gt;: the time in seconds that should be used as the current time for all necessary comparisons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nonce&lt;/code&gt;: if you want to check &lt;code&gt;nonce&lt;/code&gt; claim, provide a string value here. It is used on Open ID for the ID Tokens. (&lt;a href=&#34;https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes&#34;&gt;Open ID implementation notes&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowInvalidAsymmetricKeyTypes&lt;/code&gt;: if true, allows asymmetric keys which do not match the specified algorithm. This option is intended only for backwards compatability and should be avoided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// verify a token symmetric - synchronous&#xA;var decoded = jwt.verify(token, &#39;shhhhh&#39;);&#xA;console.log(decoded.foo) // bar&#xA;&#xA;// verify a token symmetric&#xA;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  console.log(decoded.foo) // bar&#xA;});&#xA;&#xA;// invalid token - synchronous&#xA;try {&#xA;  var decoded = jwt.verify(token, &#39;wrong-secret&#39;);&#xA;} catch(err) {&#xA;  // err&#xA;}&#xA;&#xA;// invalid token&#xA;jwt.verify(token, &#39;wrong-secret&#39;, function(err, decoded) {&#xA;  // err&#xA;  // decoded undefined&#xA;});&#xA;&#xA;// verify a token asymmetric&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, function(err, decoded) {&#xA;  console.log(decoded.foo) // bar&#xA;});&#xA;&#xA;// verify audience&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39; }, function(err, decoded) {&#xA;  // if audience mismatch, err == invalid audience&#xA;});&#xA;&#xA;// verify issuer&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39;, issuer: &#39;urn:issuer&#39; }, function(err, decoded) {&#xA;  // if issuer mismatch, err == invalid issuer&#xA;});&#xA;&#xA;// verify jwt id&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39;, issuer: &#39;urn:issuer&#39;, jwtid: &#39;jwtid&#39; }, function(err, decoded) {&#xA;  // if jwt id mismatch, err == invalid jwt id&#xA;});&#xA;&#xA;// verify subject&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39;, issuer: &#39;urn:issuer&#39;, jwtid: &#39;jwtid&#39;, subject: &#39;subject&#39; }, function(err, decoded) {&#xA;  // if subject mismatch, err == invalid subject&#xA;});&#xA;&#xA;// alg mismatch&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;); // get public key&#xA;jwt.verify(token, cert, { algorithms: [&#39;RS256&#39;] }, function (err, payload) {&#xA;  // if token alg != RS256,  err == invalid signature&#xA;});&#xA;&#xA;// Verify using getKey callback&#xA;// Example uses https://github.com/auth0/node-jwks-rsa as a way to fetch the keys.&#xA;var jwksClient = require(&#39;jwks-rsa&#39;);&#xA;var client = jwksClient({&#xA;  jwksUri: &#39;https://sandrino.auth0.com/.well-known/jwks.json&#39;&#xA;});&#xA;function getKey(header, callback){&#xA;  client.getSigningKey(header.kid, function(err, key) {&#xA;    var signingKey = key.publicKey || key.rsaPublicKey;&#xA;    callback(null, signingKey);&#xA;  });&#xA;}&#xA;&#xA;jwt.verify(token, getKey, options, function(err, decoded) {&#xA;  console.log(decoded.foo) // bar&#xA;});&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;em&gt;&lt;/em&gt;Need to peek into a JWT without verifying it? (Click to expand)&lt;/summary&gt; &#xA; &lt;h3&gt;jwt.decode(token [, options])&lt;/h3&gt; &#xA; &lt;p&gt;(Synchronous) Returns the decoded payload without verifying if the signature is valid.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This will &lt;strong&gt;not&lt;/strong&gt; verify whether the signature is valid. You should &lt;strong&gt;not&lt;/strong&gt; use this for untrusted messages. You most likely want to use &lt;code&gt;jwt.verify&lt;/code&gt; instead.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; When the token comes from an untrusted source (e.g. user input or external request), the returned decoded payload should be treated like any other user input; please make sure to sanitize and only work with properties that are expected&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;token&lt;/code&gt; is the JsonWebToken string&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;options&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: force JSON.parse on the payload even if the header doesn&#39;t contain &lt;code&gt;&#34;typ&#34;:&#34;JWT&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;complete&lt;/code&gt;: return an object with the decoded payload and header.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// get the decoded payload ignoring signature, no secretOrPrivateKey needed&#xA;var decoded = jwt.decode(token);&#xA;&#xA;// get the decoded payload and header&#xA;var decoded = jwt.decode(token, {complete: true});&#xA;console.log(decoded.header);&#xA;console.log(decoded.payload)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Errors &amp;amp; Codes&lt;/h2&gt; &#xA;&lt;p&gt;Possible thrown errors during verification. Error is the first argument of the verification callback.&lt;/p&gt; &#xA;&lt;h3&gt;TokenExpiredError&lt;/h3&gt; &#xA;&lt;p&gt;Thrown error if the token is expired.&lt;/p&gt; &#xA;&lt;p&gt;Error object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &#39;TokenExpiredError&#39;&lt;/li&gt; &#xA; &lt;li&gt;message: &#39;jwt expired&#39;&lt;/li&gt; &#xA; &lt;li&gt;expiredAt: [ExpDate]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  if (err) {&#xA;    /*&#xA;      err = {&#xA;        name: &#39;TokenExpiredError&#39;,&#xA;        message: &#39;jwt expired&#39;,&#xA;        expiredAt: 1408621000&#xA;      }&#xA;    */&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JsonWebTokenError&lt;/h3&gt; &#xA;&lt;p&gt;Error object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &#39;JsonWebTokenError&#39;&lt;/li&gt; &#xA; &lt;li&gt;message: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#39;invalid token&#39; - the header or payload could not be parsed&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt malformed&#39; - the token does not have three components (delimited by a &lt;code&gt;.&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt signature is required&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;invalid signature&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt audience invalid. expected: [OPTIONS AUDIENCE]&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt issuer invalid. expected: [OPTIONS ISSUER]&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt id invalid. expected: [OPTIONS JWT ID]&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt subject invalid. expected: [OPTIONS SUBJECT]&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  if (err) {&#xA;    /*&#xA;      err = {&#xA;        name: &#39;JsonWebTokenError&#39;,&#xA;        message: &#39;jwt malformed&#39;&#xA;      }&#xA;    */&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NotBeforeError&lt;/h3&gt; &#xA;&lt;p&gt;Thrown if current time is before the nbf claim.&lt;/p&gt; &#xA;&lt;p&gt;Error object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &#39;NotBeforeError&#39;&lt;/li&gt; &#xA; &lt;li&gt;message: &#39;jwt not active&#39;&lt;/li&gt; &#xA; &lt;li&gt;date: 2018-10-04T16:10:44.000Z&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  if (err) {&#xA;    /*&#xA;      err = {&#xA;        name: &#39;NotBeforeError&#39;,&#xA;        message: &#39;jwt not active&#39;,&#xA;        date: 2018-10-04T16:10:44.000Z&#xA;      }&#xA;    */&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Algorithms supported&lt;/h2&gt; &#xA;&lt;p&gt;Array of supported algorithms. The following algorithms are currently supported.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;alg Parameter Value&lt;/th&gt; &#xA;   &lt;th&gt;Digital Signature or MAC Algorithm&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HS256&lt;/td&gt; &#xA;   &lt;td&gt;HMAC using SHA-256 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HS384&lt;/td&gt; &#xA;   &lt;td&gt;HMAC using SHA-384 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HS512&lt;/td&gt; &#xA;   &lt;td&gt;HMAC using SHA-512 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RS256&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-256 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RS384&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-384 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RS512&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-512 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PS256&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PSS using SHA-256 hash algorithm (only node ^6.12.0 OR &amp;gt;=8.0.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PS384&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PSS using SHA-384 hash algorithm (only node ^6.12.0 OR &amp;gt;=8.0.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PS512&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PSS using SHA-512 hash algorithm (only node ^6.12.0 OR &amp;gt;=8.0.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ES256&lt;/td&gt; &#xA;   &lt;td&gt;ECDSA using P-256 curve and SHA-256 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ES384&lt;/td&gt; &#xA;   &lt;td&gt;ECDSA using P-384 curve and SHA-384 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ES512&lt;/td&gt; &#xA;   &lt;td&gt;ECDSA using P-521 curve and SHA-512 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;No digital signature or MAC value included&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Refreshing JWTs&lt;/h2&gt; &#xA;&lt;p&gt;First of all, we recommend you to think carefully if auto-refreshing a JWT will not introduce any vulnerability in your system.&lt;/p&gt; &#xA;&lt;p&gt;We are not comfortable including this as part of the library, however, you can take a look at &lt;a href=&#34;https://gist.github.com/ziluvatar/a3feb505c4c0ec37059054537b38fc48&#34;&gt;this example&lt;/a&gt; to show how this could be accomplished. Apart from that example there are &lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/issues/122&#34;&gt;an issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/pull/172&#34;&gt;a pull request&lt;/a&gt; to get more knowledge about this topic.&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X.509 certificate chain is not checked&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issue Reporting&lt;/h2&gt; &#xA;&lt;p&gt;If you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The &lt;a href=&#34;https://auth0.com/whitehat&#34;&gt;Responsible Disclosure Program&lt;/a&gt; details the procedure for disclosing security issues.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://auth0.com&#34;&gt;Auth0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/auth0/node-jsonwebtoken/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
</feed>