<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-11T01:47:30Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>gchq/CyberChef</title>
    <updated>2024-02-11T01:47:30Z</updated>
    <id>tag:github.com,2024-02-11:/gchq/CyberChef</id>
    <link href="https://github.com/gchq/CyberChef" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Cyber Swiss Army Knife - a web app for encryption, encoding, compression and data analysis&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CyberChef&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gchq/CyberChef/actions?query=workflow%3A%22Master+Build%2C+Test+%26+Deploy%22&#34;&gt;&lt;img src=&#34;https://github.com/gchq/CyberChef/workflows/Master%20Build,%20Test%20&amp;amp;%20Deploy/badge.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cyberchef&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/cyberchef.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/gchq/CyberChef/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/gchq/CyberChef?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gchq/CyberChef.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;em&gt;The Cyber Swiss Army Knife&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;CyberChef is a simple, intuitive web app for carrying out all manner of &#34;cyber&#34; operations within a web browser. These operations include simple encoding like XOR and Base64, more complex encryption like AES, DES and Blowfish, creating binary and hexdumps, compression and decompression of data, calculating hashes and checksums, IPv6 and X.509 parsing, changing character encodings, and much more.&lt;/p&gt; &#xA;&lt;p&gt;The tool is designed to enable both technical and non-technical analysts to manipulate data in complex ways without having to deal with complex tools or algorithms. It was conceived, designed, built and incrementally improved by an analyst in their 10% innovation time over several years.&lt;/p&gt; &#xA;&lt;h2&gt;Live demo&lt;/h2&gt; &#xA;&lt;p&gt;CyberChef is still under active development. As a result, it shouldn&#39;t be considered a finished product. There is still testing and bug fixing to do, new features to be added and additional documentation to write. Please contribute!&lt;/p&gt; &#xA;&lt;p&gt;Cryptographic operations in CyberChef should not be relied upon to provide security in any situation. No guarantee is offered for their correctness.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef&#34;&gt;A live demo can be found here&lt;/a&gt; - have fun!&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;There are four main areas in CyberChef:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The &lt;strong&gt;input&lt;/strong&gt; box in the top right, where you can paste, type or drag the text or file you want to operate on.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;output&lt;/strong&gt; box in the bottom right, where the outcome of your processing will be displayed.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;operations&lt;/strong&gt; list on the far left, where you can find all the operations that CyberChef is capable of in categorised lists, or by searching.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;recipe&lt;/strong&gt; area in the middle, where you can drag the operations that you want to use and specify arguments and options.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can use as many operations as you like in simple or complex ways. Some examples are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=From_Base64(&#39;A-Za-z0-9%2B/%3D&#39;,true)&amp;amp;input=VTI4Z2JHOXVaeUJoYm1RZ2RHaGhibXR6SUdadmNpQmhiR3dnZEdobElHWnBjMmd1&#34;&gt;Decode a Base64-encoded string&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=Translate_DateTime_Format(&#39;Standard%20date%20and%20time&#39;,&#39;DD/MM/YYYY%20HH:mm:ss&#39;,&#39;UTC&#39;,&#39;dddd%20Do%20MMMM%20YYYY%20HH:mm:ss%20Z%20z&#39;,&#39;Australia/Queensland&#39;)&amp;amp;input=MTUvMDYvMjAxNSAyMDo0NTowMA&#34;&gt;Convert a date and time to a different time zone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=Parse_IPv6_address()&amp;amp;input=MjAwMTowMDAwOjQxMzY6ZTM3ODo4MDAwOjYzYmY6M2ZmZjpmZGQy&#34;&gt;Parse a Teredo IPv6 address&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=From_Hexdump()Gunzip()&amp;amp;input=MDAwMDAwMDAgIDFmIDhiIDA4IDAwIDEyIGJjIGYzIDU3IDAwIGZmIDBkIGM3IGMxIDA5IDAwIDIwICB8Li4uLi6881cu/y7HwS4uIHwKMDAwMDAwMTAgIDA4IDA1IGQwIDU1IGZlIDA0IDJkIGQzIDA0IDFmIGNhIDhjIDQ0IDIxIDViIGZmICB8Li7QVf4uLdMuLsouRCFb/3wKMDAwMDAwMjAgIDYwIGM3IGQ3IDAzIDE2IGJlIDQwIDFmIDc4IDRhIDNmIDA5IDg5IDBiIDlhIDdkICB8YMfXLi6%2BQC54Sj8uLi4ufXwKMDAwMDAwMzAgIDRlIGM4IDRlIDZkIDA1IDFlIDAxIDhiIDRjIDI0IDAwIDAwIDAwICAgICAgICAgICB8TshObS4uLi5MJC4uLnw&#34;&gt;Convert data from a hexdump, then decompress&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=RC4(%7B&#39;option&#39;:&#39;UTF8&#39;,&#39;string&#39;:&#39;secret&#39;%7D,&#39;Hex&#39;,&#39;Hex&#39;)Disassemble_x86(&#39;64&#39;,&#39;Full%20x86%20architecture&#39;,16,0,true,true)&amp;amp;input=MjFkZGQyNTQwMTYwZWU2NWZlMDc3NzEwM2YyYTM5ZmJlNWJjYjZhYTBhYWJkNDE0ZjkwYzZjYWY1MzEyNzU0YWY3NzRiNzZiM2JiY2QxOTNjYjNkZGZkYmM1YTI2NTMzYTY4NmI1OWI4ZmVkNGQzODBkNDc0NDIwMWFlYzIwNDA1MDcxMzhlMmZlMmIzOTUwNDQ2ZGIzMWQyYmM2MjliZTRkM2YyZWIwMDQzYzI5M2Q3YTVkMjk2MmMwMGZlNmRhMzAwNzJkOGM1YTZiNGZlN2Q4NTlhMDQwZWVhZjI5OTczMzYzMDJmNWEwZWMxOQ&#34;&gt;Decrypt and disassemble shellcode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=Fork(&#39;%5C%5Cn&#39;,&#39;%5C%5Cn&#39;,false)From_UNIX_Timestamp(&#39;Seconds%20(s)&#39;)&amp;amp;input=OTc4MzQ2ODAwCjEwMTI2NTEyMDAKMTA0NjY5NjQwMAoxMDgxMDg3MjAwCjExMTUzMDUyMDAKMTE0OTYwOTYwMA&#34;&gt;Display multiple timestamps as full dates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=Fork(&#39;%5C%5Cn&#39;,&#39;%5C%5Cn&#39;,false)Conditional_Jump(&#39;1&#39;,false,&#39;base64&#39;,10)To_Hex(&#39;Space&#39;)Return()Label(&#39;base64&#39;)To_Base64(&#39;A-Za-z0-9%2B/%3D&#39;)&amp;amp;input=U29tZSBkYXRhIHdpdGggYSAxIGluIGl0ClNvbWUgZGF0YSB3aXRoIGEgMiBpbiBpdA&#34;&gt;Carry out different operations on data of different types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=Register(&#39;key%3D(%5B%5C%5Cda-f%5D*)&#39;,true,false)Find_/_Replace(%7B&#39;option&#39;:&#39;Regex&#39;,&#39;string&#39;:&#39;.*data%3D(.*)&#39;%7D,&#39;$1&#39;,true,false,true)RC4(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;$R0&#39;%7D,&#39;Hex&#39;,&#39;Latin1&#39;)&amp;amp;input=aHR0cDovL21hbHdhcmV6LmJpei9iZWFjb24ucGhwP2tleT0wZTkzMmE1YyZkYXRhPThkYjdkNWViZTM4NjYzYTU0ZWNiYjMzNGUzZGIxMQ&#34;&gt;Use parts of the input as arguments to operations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=Register(&#39;(.%7B32%7D)&#39;,true,false)Drop_bytes(0,32,false)AES_Decrypt(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;1748e7179bd56570d51fa4ba287cc3e5&#39;%7D,%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;$R0&#39;%7D,&#39;CTR&#39;,&#39;Hex&#39;,&#39;Raw&#39;,%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;&#39;%7D)&amp;amp;input=NTFlMjAxZDQ2MzY5OGVmNWY3MTdmNzFmNWI0NzEyYWYyMGJlNjc0YjNiZmY1M2QzODU0NjM5NmVlNjFkYWFjNDkwOGUzMTljYTNmY2Y3MDg5YmZiNmIzOGVhOTllNzgxZDI2ZTU3N2JhOWRkNmYzMTFhMzk0MjBiODk3OGU5MzAxNGIwNDJkNDQ3MjZjYWVkZjU0MzZlYWY2NTI0MjljMGRmOTRiNTIxNjc2YzdjMmNlODEyMDk3YzI3NzI3M2M3YzcyY2Q4OWFlYzhkOWZiNGEyNzU4NmNjZjZhYTBhZWUyMjRjMzRiYTNiZmRmN2FlYjFkZGQ0Nzc2MjJiOTFlNzJjOWU3MDlhYjYwZjhkYWY3MzFlYzBjYzg1Y2UwZjc0NmZmMTU1NGE1YTNlYzI5MWNhNDBmOWU2MjlhODcyNTkyZDk4OGZkZDgzNDUzNGFiYTc5YzFhZDE2NzY3NjlhN2MwMTBiZjA0NzM5ZWNkYjY1ZDk1MzAyMzcxZDYyOWQ5ZTM3ZTdiNGEzNjFkYTQ2OGYxZWQ1MzU4OTIyZDJlYTc1MmRkMTFjMzY2ZjMwMTdiMTRhYTAxMWQyYWYwM2M0NGY5NTU3OTA5OGExNWUzY2Y5YjQ0ODZmOGZmZTljMjM5ZjM0ZGU3MTUxZjZjYTY1MDBmZTRiODUwYzNmMWMwMmU4MDFjYWYzYTI0NDY0NjE0ZTQyODAxNjE1YjhmZmFhMDdhYzgyNTE0OTNmZmRhN2RlNWRkZjMzNjg4ODBjMmI5NWIwMzBmNDFmOGYxNTA2NmFkZDA3MWE2NmNmNjBlNWY0NmYzYTIzMGQzOTdiNjUyOTYzYTIxYTUzZg&#34;&gt;Perform AES decryption, extracting the IV from the beginning of the cipher stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=Magic(3,false,false)&amp;amp;input=V1VhZ3dzaWFlNm1QOGdOdENDTFVGcENwQ0IyNlJtQkRvREQ4UGFjZEFtekF6QlZqa0syUXN0RlhhS2hwQzZpVVM3UkhxWHJKdEZpc29SU2dvSjR3aGptMWFybTg2NHFhTnE0UmNmVW1MSHJjc0FhWmM1VFhDWWlmTmRnUzgzZ0RlZWpHWDQ2Z2FpTXl1QlY2RXNrSHQxc2NnSjg4eDJ0TlNvdFFEd2JHWTFtbUNvYjJBUkdGdkNLWU5xaU45aXBNcTFaVTFtZ2tkYk51R2NiNzZhUnRZV2hDR1VjOGc5M1VKdWRoYjhodHNoZVpud1RwZ3FoeDgzU1ZKU1pYTVhVakpUMnptcEM3dVhXdHVtcW9rYmRTaTg4WXRrV0RBYzFUb291aDJvSDRENGRkbU5LSldVRHBNd21uZ1VtSzE0eHdtb21jY1BRRTloTTE3MkFQblNxd3hkS1ExNzJSa2NBc3lzbm1qNWdHdFJtVk5OaDJzMzU5d3I2bVMyUVJQ&#34;&gt;Automagically detect several layers of nested encoding&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Drag and drop &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Operations can be dragged in and out of the recipe list, or reorganised.&lt;/li&gt; &#xA;   &lt;li&gt;Files up to 2GB can be dragged over the input box to load them directly into the browser.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Auto Bake &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Whenever you modify the input or the recipe, CyberChef will automatically &#34;bake&#34; for you and produce the output immediately.&lt;/li&gt; &#xA;   &lt;li&gt;This can be turned off and operated manually if it is affecting performance (if the input is very large, for instance).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Automated encoding detection &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CyberChef uses &lt;a href=&#34;https://github.com/gchq/CyberChef/wiki/Automatic-detection-of-encoded-data-using-CyberChef-Magic&#34;&gt;a number of techniques&lt;/a&gt; to attempt to automatically detect which encodings your data is under. If it finds a suitable operation that make sense of your data, it displays the &#39;magic&#39; icon in the Output field which you can click to decode your data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Breakpoints &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can set breakpoints on any operation in your recipe to pause execution before running it.&lt;/li&gt; &#xA;   &lt;li&gt;You can also step through the recipe one operation at a time to see what the data looks like at each stage.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Save and load recipes &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you come up with an awesome recipe that you know you’ll want to use again, just click &#34;Save recipe&#34; and add it to your local storage. It&#39;ll be waiting for you next time you visit CyberChef.&lt;/li&gt; &#xA;   &lt;li&gt;You can also copy the URL, which includes your recipe and input, to easily share it with others.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Search &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you know the name of the operation you want or a word associated with it, start typing it into the search field and any matching operations will immediately be shown.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Highlighting &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When you highlight text in the input or output, the offset and length values will be displayed and, if possible, the corresponding data will be highlighted in the output or input respectively (example: &lt;a href=&#34;https://gchq.github.io/CyberChef/#recipe=XOR(%7B&#39;option&#39;:&#39;Hex&#39;,&#39;string&#39;:&#39;3a&#39;%7D,&#39;Standard&#39;,false)To_Hexdump(16,false,false)&amp;amp;input=VGhlIGFuc3dlciB0byB0aGUgdWx0aW1hdGUgcXVlc3Rpb24gb2YgbGlmZSwgdGhlIFVuaXZlcnNlLCBhbmQgZXZlcnl0aGluZyBpcyA0Mi4&#34;&gt;highlight the word &#39;question&#39; in the input to see where it appears in the output&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Save to file and load from file &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can save the output to a file at any time or load a file by dragging and dropping it into the input field. Files up to around 2GB are supported (depending on your browser), however, some operations may take a very long time to run over this much data.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CyberChef is entirely client-side &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It should be noted that none of your recipe configuration or input (either text or files) is ever sent to the CyberChef web server - all processing is carried out within your browser, on your own computer.&lt;/li&gt; &#xA;   &lt;li&gt;Due to this feature, CyberChef can be downloaded and run locally. You can use the link in the top left corner of the app to download a full copy of CyberChef and drop it into a virtual machine, share it with other people, or host it in a closed network.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deep linking&lt;/h2&gt; &#xA;&lt;p&gt;By manipulating CyberChef&#39;s URL hash, you can change the initial settings with which the page opens. The format is &lt;code&gt;https://gchq.github.io/CyberChef/#recipe=Operation()&amp;amp;input=...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supported arguments are &lt;code&gt;recipe&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt; (encoded in Base64), and &lt;code&gt;theme&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Browser support&lt;/h2&gt; &#xA;&lt;p&gt;CyberChef is built to support&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Google Chrome 50+&lt;/li&gt; &#xA; &lt;li&gt;Mozilla Firefox 38+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Node.js support&lt;/h2&gt; &#xA;&lt;p&gt;CyberChef is built to fully support Node.js &lt;code&gt;v16&lt;/code&gt;. For more information, see the &lt;a href=&#34;https://github.com/gchq/CyberChef/wiki/Node-API&#34;&gt;&#34;Node API&#34; wiki page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributing a new operation to CyberChef is super easy! The quickstart script will walk you through the process. If you can write basic JavaScript, you can write a CyberChef operation.&lt;/p&gt; &#xA;&lt;p&gt;An installation walkthrough, how-to guides for adding new operations and themes, descriptions of the repository structure, available data types and coding conventions can all be found in the &lt;a href=&#34;https://github.com/gchq/CyberChef/wiki/Contributing&#34;&gt;&#34;Contributing&#34; wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Push your changes to your fork.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request. If you are doing this for the first time, you will be prompted to sign the &lt;a href=&#34;https://cla-assistant.io/gchq/CyberChef&#34;&gt;GCHQ Contributor Licence Agreement&lt;/a&gt; via the CLA assistant on the pull request. This will also ask whether you are happy for GCHQ to contact you about a token of thanks for your contribution, or about job opportunities at GCHQ.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Licencing&lt;/h2&gt; &#xA;&lt;p&gt;CyberChef is released under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache 2.0 Licence&lt;/a&gt; and is covered by &lt;a href=&#34;https://www.nationalarchives.gov.uk/information-management/re-using-public-sector-information/uk-government-licensing-framework/crown-copyright/&#34;&gt;Crown Copyright&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TrueCarry/JettonGramGpuMiner</title>
    <updated>2024-02-11T01:47:30Z</updated>
    <id>tag:github.com,2024-02-11:/TrueCarry/JettonGramGpuMiner</id>
    <link href="https://github.com/TrueCarry/JettonGramGpuMiner" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;README&lt;/h1&gt; &#xA;&lt;p&gt;Сообщество - &lt;a href=&#34;https://t.me/blckbazars&#34;&gt;https://t.me/blckbazars&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Майнер для жетона GRAM. Нужна Windows и видеокарта с драйверами CUDA или OpenCL&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Создайте &lt;code&gt;config.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Напишите мнемоник в файле &lt;code&gt;config.txt&lt;/code&gt; в формате&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;SEED=word1 word2&#xA;TONAPI_TOKEN=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Активируйте v4r2 кошелек. Отправьте на него средства, а потом отправьте транзакцию самому себе.&lt;/li&gt; &#xA; &lt;li&gt;Установите NodeJs &lt;a href=&#34;https://nodejs.org/en&#34;&gt;https://nodejs.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Запустите майнер открыв &lt;code&gt;start_tonhub.bat&lt;/code&gt; (для AMD - &lt;code&gt;start_tonhub_amd.bat&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;TonApi&lt;/h2&gt; &#xA;&lt;p&gt;Так же вы можете использовать TonApi(tonconsole.com) как провайдер апи. Он дает повышенную стабильность, но не работает без ключа. На 1 майнера достаточно бесплатного токена. Для запуска майнера с tonapi используйте &lt;code&gt;start_tonapi_X.bat&lt;/code&gt; или &lt;code&gt;start_tonapi_X.sh&lt;/code&gt;(с суффиксом _amd для компьютеров без CUDA)&lt;/p&gt; &#xA;&lt;h2&gt;Multi GPU&lt;/h2&gt; &#xA;&lt;p&gt;Можно запустить несколько видеокарт одним скриптом. Пример в файле &lt;code&gt;start_multi_8.sh&lt;/code&gt;, &lt;code&gt;start_multi_8.bat&lt;/code&gt;. Чтобы превратить любой стартовый скрипт в мульти, надо заменить &lt;code&gt;send_universal&lt;/code&gt; на &lt;code&gt;send_multigpu&lt;/code&gt; &lt;code&gt;--gpu 0&lt;/code&gt; заменить на &lt;code&gt;--gpu-count X&lt;/code&gt;, где Х кол-во ваших GPU Больше ничего менять не нужно, можно запускать&lt;/p&gt; &#xA;&lt;h1&gt;EN&lt;/h1&gt; &#xA;&lt;p&gt;Community - &lt;a href=&#34;https://t.me/blckbazars&#34;&gt;https://t.me/blckbazars&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Miner for GRAM jetton. CUDA or OpenCL GPU needed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create &lt;code&gt;config.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter your mnemonic &lt;code&gt;config.txt&lt;/code&gt; in format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;SEED=word1 word2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Activate v4r2 wallet linked to mnemonic and send some funds there&lt;/li&gt; &#xA; &lt;li&gt;Install nodejs &lt;a href=&#34;https://nodejs.org/en&#34;&gt;https://nodejs.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Start miner by opening &lt;code&gt;start_tonhub.bat&lt;/code&gt; (for AMD - &lt;code&gt;start_tonhub_amd.bat&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;中文&lt;/h1&gt; &#xA;&lt;p&gt;社群 - &lt;a href=&#34;https://t.me/blckbazars&#34;&gt;https://t.me/blckbazars&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;目前挖礦 GRAM 以及其他近似的 Jetton 代幣，僅支持 CUDA 或 OpenCL 的顯卡。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;創建 &lt;code&gt;config.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;在 &lt;code&gt;config.txt&lt;/code&gt; 中輸入你的助記詞，格式如下 &lt;pre&gt;&lt;code&gt;SEED=word1 word2&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;啟用 v4r2 錢包，並將一些資金發送到錢包中&lt;/li&gt; &#xA; &lt;li&gt;安裝 NodeJs &lt;a href=&#34;https://nodejs.org/en&#34;&gt;https://nodejs.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;通過打開 &lt;code&gt;start_tonhub.bat&lt;/code&gt; 啟動挖礦（AMD 顯卡 - &lt;code&gt;start_tonhub_amd.bat&lt;/code&gt;）&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ai/nanoid</title>
    <updated>2024-02-11T01:47:30Z</updated>
    <id>tag:github.com,2024-02-11:/ai/nanoid</id>
    <link href="https://github.com/ai/nanoid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny (124 bytes), secure, URL-friendly, unique string ID generator for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nano ID&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ai.github.io/nanoid/logo.svg?sanitize=true&#34; align=&#34;right&#34; alt=&#34;Nano ID logo by Anton Lovchikov&#34; width=&#34;180&#34; height=&#34;94&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.ru.md&#34;&gt;Русский&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.id-ID.md&#34;&gt;Bahasa Indonesia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tiny, secure, URL-friendly, unique&amp;nbsp;string ID&amp;nbsp;generator for&amp;nbsp;JavaScript.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“An amazing level of senseless perfectionism, which is simply impossible not to respect.”&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Small.&lt;/strong&gt; 116 bytes (minified and brotlied). No&amp;nbsp;dependencies. &lt;a href=&#34;https://github.com/ai/size-limit&#34;&gt;Size Limit&lt;/a&gt; controls the size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safe.&lt;/strong&gt; It uses hardware random generator. Can be used in clusters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Short IDs.&lt;/strong&gt; It uses a&amp;nbsp;larger alphabet than UUID (&lt;code&gt;A-Za-z0-9_-&lt;/code&gt;). So ID size was reduced from&amp;nbsp;36&amp;nbsp;to&amp;nbsp;21&amp;nbsp;symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable.&lt;/strong&gt; Nano ID was ported to over &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.md#other-programming-languages&#34;&gt;20 programming languages&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid&#39;&#xA;model.id = nanoid() //=&amp;gt; &#34;V1StGXR8_Z5jdHi6B-myT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.evilmartians.com/badges/logo-no-label.svg?sanitize=true&#34; alt=&#34;&#34; width=&#34;22&#34; height=&#34;16&#34;&gt;&amp;nbsp;&amp;nbsp;Made in &lt;b&gt;&lt;a href=&#34;https://evilmartians.com/devtools?utm_source=nanoid&amp;amp;utm_campaign=devtools-button&amp;amp;utm_medium=github&#34;&gt;Evil Martians&lt;/a&gt;&lt;/b&gt;, product consulting for &lt;b&gt;developer tools&lt;/b&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#comparison-with-uuid&#34;&gt;Comparison with UUID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#blocking&#34;&gt;Blocking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#non-secure&#34;&gt;Non-Secure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-alphabet-or-size&#34;&gt;Custom Alphabet or Size&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-random-bytes-generator&#34;&gt;Custom Random Bytes Generator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#react&#34;&gt;React&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#react-native&#34;&gt;React Native&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#pouchdb-and-couchdb&#34;&gt;PouchDB and CouchDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#web-workers&#34;&gt;Web Workers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#other-programming-languages&#34;&gt;Other Programming Languages&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparison with UUID&lt;/h2&gt; &#xA;&lt;p&gt;Nano ID is quite comparable to UUID v4 (random-based). It has a similar number of random bits in the ID (126&amp;nbsp;in&amp;nbsp;Nano&amp;nbsp;ID&amp;nbsp;and&amp;nbsp;122&amp;nbsp;in&amp;nbsp;UUID), so&amp;nbsp;it&amp;nbsp;has&amp;nbsp;a similar&amp;nbsp;collision&amp;nbsp;probability:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For there to be a one in a billion chance of duplication, 103 trillion version 4 IDs must be generated.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are two main differences between Nano ID and UUID v4:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Nano ID uses a bigger alphabet, so a similar number of random bits are packed in just 21&amp;nbsp;symbols&amp;nbsp;instead of 36.&lt;/li&gt; &#xA; &lt;li&gt;Nano ID code is &lt;strong&gt;4 times smaller&lt;/strong&gt; than &lt;code&gt;uuid/v4&lt;/code&gt; package: 130 bytes instead of 423.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;$ node ./test/benchmark.js&#xA;crypto.randomUUID         21,119,429 ops/sec&#xA;uuid v4                   20,368,447 ops/sec&#xA;@napi-rs/uuid             11,493,890 ops/sec&#xA;uid/secure                 8,409,962 ops/sec&#xA;@lukeed/uuid               6,871,405 ops/sec&#xA;nanoid                     5,652,148 ops/sec&#xA;customAlphabet             3,565,656 ops/sec&#xA;secure-random-string         394,201 ops/sec&#xA;uid-safe.sync                393,176 ops/sec&#xA;shortid                       49,916 ops/sec&#xA;&#xA;Non-secure:&#xA;uid                       58,860,241 ops/sec&#xA;nanoid/non-secure          2,744,615 ops/sec&#xA;rndm                       2,718,063 ops/sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test configuration: ThinkPad X1 Carbon Gen 9, Fedora 36, Node.js 18.9.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;See a good article about random generators theory: &lt;a href=&#34;https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba&#34;&gt;Secure random values (in Node.js)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unpredictability.&lt;/strong&gt; Instead of using the unsafe &lt;code&gt;Math.random()&lt;/code&gt;, Nano ID uses the &lt;code&gt;crypto&lt;/code&gt; module in Node.js and&amp;nbsp;the&amp;nbsp;Web&amp;nbsp;Crypto&amp;nbsp;API&amp;nbsp;in&amp;nbsp;browsers. These modules use unpredictable hardware random generator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uniformity.&lt;/strong&gt; &lt;code&gt;random % alphabet&lt;/code&gt; is a popular mistake to make when coding an ID generator. The distribution will not be even; there&amp;nbsp;will be&amp;nbsp;a&amp;nbsp;lower chance for some symbols to appear compared to others. So, it will reduce the number of tries when&amp;nbsp;brute-forcing. Nano ID uses a &lt;a href=&#34;https://github.com/ai/nanoid/raw/main/index.js&#34;&gt;better algorithm&lt;/a&gt; and is tested for uniformity.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ai/nanoid/main/img/distribution.png&#34; alt=&#34;Nano ID uniformity&#34; width=&#34;340&#34; height=&#34;135&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Well-documented:&lt;/strong&gt; all Nano ID hacks are documented. See comments in &lt;a href=&#34;https://github.com/ai/nanoid/raw/main/index.js&#34;&gt;the source&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vulnerabilities:&lt;/strong&gt; to report a security vulnerability, please use the &lt;a href=&#34;https://tidelift.com/security&#34;&gt;Tidelift security contact&lt;/a&gt;. Tidelift&amp;nbsp;will&amp;nbsp;coordinate&amp;nbsp;the&amp;nbsp;fix&amp;nbsp;and&amp;nbsp;disclosure.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install nanoid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nano ID 5 works only with ESM projects, in tests or Node.js scripts. For CommonJS you need Nano ID 3.x (we still support it):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install nanoid@3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For quick hacks, you can load Nano ID from CDN. Though, it is not recommended to be used in production because of the lower loading performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;https://cdn.jsdelivr.net/npm/nanoid/nanoid.js&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Nano ID has 2 APIs: normal and non-secure.&lt;/p&gt; &#xA;&lt;p&gt;By default, Nano ID uses URL-friendly symbols (&lt;code&gt;A-Za-z0-9_-&lt;/code&gt;) and returns an ID with 21 characters (to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;collision&amp;nbsp;probability&amp;nbsp;similar to&amp;nbsp;UUID v4).&lt;/p&gt; &#xA;&lt;h3&gt;Blocking&lt;/h3&gt; &#xA;&lt;p&gt;The safe and easiest way to use Nano ID.&lt;/p&gt; &#xA;&lt;p&gt;In rare cases could block CPU from other work while noise collection for hardware random generator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid&#39;&#xA;model.id = nanoid() //=&amp;gt; &#34;V1StGXR8_Z5jdHi6B-myT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to reduce the ID size (and increase collisions probability), you can pass the size as&amp;nbsp;an&amp;nbsp;argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;nanoid(10) //=&amp;gt; &#34;IRFa-VaY2b&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don’t forget to check the&amp;nbsp;safety of your ID size in our &lt;a href=&#34;https://zelark.github.io/nano-id-cc/&#34;&gt;ID collision probability&lt;/a&gt; calculator.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-alphabet-or-size&#34;&gt;custom alphabet&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-random-bytes-generator&#34;&gt;random generator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Non-Secure&lt;/h3&gt; &#xA;&lt;p&gt;By default, Nano ID uses hardware random bytes generation for security and low collision probability. If you are not so concerned with security, you can use it for environments without hardware random generators.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid/non-secure&#39;&#xA;const id = nanoid() //=&amp;gt; &#34;Uakgb_J5m9g-0JDMbcJqLJ&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Alphabet or Size&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;customAlphabet&lt;/code&gt; returns a function that allows you to create &lt;code&gt;nanoid&lt;/code&gt; with your own alphabet and ID size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customAlphabet } from &#39;nanoid&#39;&#xA;const nanoid = customAlphabet(&#39;1234567890abcdef&#39;, 10)&#xA;model.id = nanoid() //=&amp;gt; &#34;4f90d13a42&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customAlphabet } from &#39;nanoid/non-secure&#39;&#xA;const nanoid = customAlphabet(&#39;1234567890abcdef&#39;, 10)&#xA;user.id = nanoid()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the&amp;nbsp;safety of your custom alphabet and ID size in our &lt;a href=&#34;https://zelark.github.io/nano-id-cc/&#34;&gt;ID collision probability&lt;/a&gt; calculator. For&amp;nbsp;more&amp;nbsp;alphabets,&amp;nbsp;check&amp;nbsp;out&amp;nbsp;the&amp;nbsp;options in&amp;nbsp;&lt;a href=&#34;https://github.com/CyberAP/nanoid-dictionary&#34;&gt;&lt;code&gt;nanoid-dictionary&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alphabet must contain 256 symbols or less. Otherwise, the security of the internal generator algorithm is not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;In addition to setting a default size, you can change the ID size when calling the function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customAlphabet } from &#39;nanoid&#39;&#xA;const nanoid = customAlphabet(&#39;1234567890abcdef&#39;, 10)&#xA;model.id = nanoid(5) //=&amp;gt; &#34;f01a2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Random Bytes Generator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;customRandom&lt;/code&gt; allows you to create a &lt;code&gt;nanoid&lt;/code&gt; and replace alphabet and the default random bytes generator.&lt;/p&gt; &#xA;&lt;p&gt;In&amp;nbsp;this&amp;nbsp;example,&amp;nbsp;a&amp;nbsp;seed-based&amp;nbsp;generator is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customRandom } from &#39;nanoid&#39;&#xA;&#xA;const rng = seedrandom(seed)&#xA;const nanoid = customRandom(&#39;abcdef&#39;, 10, size =&amp;gt; {&#xA;  return (new Uint8Array(size)).map(() =&amp;gt; 256 * rng())&#xA;})&#xA;&#xA;nanoid() //=&amp;gt; &#34;fbaefaadeb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;random&lt;/code&gt; callback must accept the array size and return an array with random numbers.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the same URL-friendly symbols with &lt;code&gt;customRandom&lt;/code&gt;, you can get the default alphabet using&amp;nbsp;the&amp;nbsp;&lt;code&gt;urlAlphabet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { customRandom, urlAlphabet } = require(&#39;nanoid&#39;)&#xA;const nanoid = customRandom(urlAlphabet, 10, random)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note, that between Nano ID versions we may change random generator call sequence. If you are using seed-based generators, we do not guarantee the same result.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;React&lt;/h3&gt; &#xA;&lt;p&gt;There’s no correct way to use Nano ID for React &lt;code&gt;key&lt;/code&gt; prop since it should be consistent among renders.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Todos({todos}) {&#xA;  return (&#xA;    &amp;lt;ul&amp;gt;&#xA;      {todos.map(todo =&amp;gt; (&#xA;        &amp;lt;li key={nanoid()}&amp;gt; /* DON’T DO IT */&#xA;          {todo.text}&#xA;        &amp;lt;/li&amp;gt;&#xA;      ))}&#xA;    &amp;lt;/ul&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should rather try to reach for stable ID inside your list item.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((todo) =&amp;gt;&#xA;  &amp;lt;li key={todo.id}&amp;gt;&#xA;    {todo.text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you don’t have stable IDs you&#39;d rather use index as &lt;code&gt;key&lt;/code&gt; instead of &lt;code&gt;nanoid()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((text, index) =&amp;gt;&#xA;  &amp;lt;li key={index}&amp;gt; /* Still not recommended but preferred over nanoid().&#xA;                      Only do this if items have no stable IDs. */&#xA;    {text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you just need random IDs to link elements like labels and input fields together, &lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html#useid&#34;&gt;&lt;code&gt;useId&lt;/code&gt;&lt;/a&gt; is recommended. That hook was added in React 18.&lt;/p&gt; &#xA;&lt;h3&gt;React Native&lt;/h3&gt; &#xA;&lt;p&gt;React Native does not have built-in random generator. The following polyfill works for plain React Native and Expo starting with &lt;code&gt;39.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/LinusU/react-native-get-random-values&#34;&gt;&lt;code&gt;react-native-get-random-values&lt;/code&gt;&lt;/a&gt; docs and install it.&lt;/li&gt; &#xA; &lt;li&gt;Import it before Nano ID.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;react-native-get-random-values&#39;&#xA;import { nanoid } from &#39;nanoid&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PouchDB and CouchDB&lt;/h3&gt; &#xA;&lt;p&gt;In PouchDB and CouchDB, IDs can’t start with an underscore &lt;code&gt;_&lt;/code&gt;. A prefix is required to prevent this issue, as Nano ID might use a &lt;code&gt;_&lt;/code&gt; at the start of the ID by default.&lt;/p&gt; &#xA;&lt;p&gt;Override the default ID with the following option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;db.put({&#xA;  _id: &#39;id&#39; + nanoid(),&#xA;  …&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web Workers&lt;/h3&gt; &#xA;&lt;p&gt;Web Workers do not have access to a secure random generator.&lt;/p&gt; &#xA;&lt;p&gt;Security is important in IDs when IDs should be unpredictable. For instance, in &#34;access by URL&#34; link generation. If you do not need unpredictable IDs, but you need to use Web Workers, you&amp;nbsp;can use the non‑secure&amp;nbsp;ID&amp;nbsp;generator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid/non-secure&#39;&#xA;nanoid() //=&amp;gt; &#34;Uakgb_J5m9g-0JDMbcJqLJ&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: non-secure IDs are more prone to collision attacks.&lt;/p&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;You can get unique ID in terminal by calling &lt;code&gt;npx nanoid&lt;/code&gt;. You need only Node.js in the system. You do not need Nano ID to be installed anywhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npx nanoid&#xA;npx: installed 1 in 0.63s&#xA;LZfXLFzPPR4NNrgjlWDxn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Size of generated ID can be specified with &lt;code&gt;--size&lt;/code&gt; (or &lt;code&gt;-s&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npx nanoid --size 10&#xA;L3til0JS4z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom alphabet can be specified with &lt;code&gt;--alphabet&lt;/code&gt; (or &lt;code&gt;-a&lt;/code&gt;) option (note that in this case &lt;code&gt;--size&lt;/code&gt; is required):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npx nanoid --alphabet abc --size 15&#xA;bccbcabaabaccab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Programming Languages&lt;/h3&gt; &#xA;&lt;p&gt;Nano ID was ported to many languages. You can use these ports to have the same ID generator on the client and server side.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codeyu/nanoid-net&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcmikecreations/nanoid_cpp&#34;&gt;C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zelark/nano-id&#34;&gt;Clojure and ClojureScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JamoCA/cfml-nanoid&#34;&gt;ColdFusion/CFML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mamantoha/nanoid.cr&#34;&gt;Crystal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pd4d10/nanoid-dart&#34;&gt;Dart &amp;amp; Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianfabs/nanoid&#34;&gt;Deno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/railsmechanic/nanoid&#34;&gt;Elixir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matoous/go-nanoid&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MichelBoucey/NanoID&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flashultra/uuid&#34;&gt;Haxe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sr.ht/~statianzo/janet-nanoid/&#34;&gt;Janet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aventrix/jnanoid&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/viascom/nanoid-kotlin&#34;&gt;Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/viascom/nanoid-mysql-mariadb&#34;&gt;MySQL/MariaDB&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/icyphox/nanoid.nim&#34;&gt;Nim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/routineco/ocaml-nanoid&#34;&gt;OCaml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tkzwtks/Nanoid-perl&#34;&gt;Perl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hidehalo/nanoid-php&#34;&gt;PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/puyuan/py-nanoid&#34;&gt;Python&lt;/a&gt; with &lt;a href=&#34;https://pypi.org/project/nanoid-dictionary&#34;&gt;dictionaries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postgres &lt;a href=&#34;https://github.com/spa5k/uids-postgres&#34;&gt;Extension&lt;/a&gt; and &lt;a href=&#34;https://github.com/viascom/nanoid-postgres&#34;&gt;Native Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/nanoid&#34;&gt;R&lt;/a&gt; (with dictionaries)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radeno/nanoid.rb&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nikolay-govorov/nanoid&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antiflasher/NanoID&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://share.unison-lang.org/latest/namespaces/hojberg/nanoid&#34;&gt;Unison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/invipal/nanoid&#34;&gt;V&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SasLuca/zig-nanoid&#34;&gt;Zig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For other environments, &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#cli&#34;&gt;CLI&lt;/a&gt; is available to generate IDs from a command line.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zelark.github.io/nano-id-cc/&#34;&gt;ID size calculator&lt;/a&gt; shows collision probability when adjusting the ID alphabet or size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CyberAP/nanoid-dictionary&#34;&gt;&lt;code&gt;nanoid-dictionary&lt;/code&gt;&lt;/a&gt; with popular alphabets to use with &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-alphabet-or-size&#34;&gt;&lt;code&gt;customAlphabet&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/y-gagar1n/nanoid-good&#34;&gt;&lt;code&gt;nanoid-good&lt;/code&gt;&lt;/a&gt; to be sure that your ID doesn’t contain any obscene words.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>