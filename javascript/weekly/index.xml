<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-13T01:46:39Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>leonardomso/33-js-concepts</title>
    <updated>2022-11-13T01:46:39Z</updated>
    <id>tag:github.com,2022-11-13:/leonardomso/33-js-concepts</id>
    <link href="https://github.com/leonardomso/33-js-concepts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📜 33 JavaScript concepts every developer should know.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/leonardomso/33&#34;&gt;&lt;img src=&#34;https://i.imgur.com/dsHmk6H.jpg&#34; alt=&#34;33 Concepts Every JS Developer Should Know&#34; width=&#34;200&amp;quot;&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; 33 Concepts Every JavaScript Developer Should Know &lt;br&gt;&lt;br&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/leonardomso&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/leonardomso.svg?style=for-the-badge&#34; alt=&#34;Follow me&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by &lt;a href=&#34;https://twitter.com/stephenthecurt&#34;&gt;Stephen Curtis&lt;/a&gt; and you can read it &lt;a href=&#34;https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🚀 Considered by GitHub as one of the &lt;a href=&#34;https://blog.github.com/2018-12-13-new-open-source-projects/&#34;&gt;top open source projects of 2018!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to submit a PR adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.&lt;/p&gt; &#xA;&lt;p&gt;All the translations for this repo will be listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amrsekilly/33-js-concepts&#34;&gt;اَلْعَرَبِيَّةُ(Arabic)&lt;/a&gt; — Amr Elsekilly&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stephentian/33-js-concepts&#34;&gt;汉语 (Chinese)&lt;/a&gt; — Re Tian&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiagoboeing/33-js-concepts&#34;&gt;Português do Brasil (Brazilian Portuguese)&lt;/a&gt; — Tiago Boeing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yjs03057/33-js-concepts.git&#34;&gt;한국어 (Korean)&lt;/a&gt; — Suin Lee&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adonismendozaperez/33-js-conceptos&#34;&gt;Español (Spanish)&lt;/a&gt; — Adonis Mendoza&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ilker0/33-js-concepts&#34;&gt;Türkçe (Turkish)&lt;/a&gt; — İlker Demir&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gumennii/33-js-concepts&#34;&gt;русский язык (Russian)&lt;/a&gt; — Mihail Gumennii&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nguyentranchung/33-js-concepts&#34;&gt;Tiếng Việt (Vietnamese)&lt;/a&gt; — Nguyễn Trần Chung&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lip3k/33-js-concepts&#34;&gt;Polski (Polish)&lt;/a&gt; — Dawid Lipinski&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/majidalavizadeh/33-js-concepts&#34;&gt;فارسی (Persian)&lt;/a&gt; — Majid Alavizadeh&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rijdz/33-js-concepts&#34;&gt;Bahasa Indonesia (Indonesian)&lt;/a&gt; — Rijdzuan Sampoerna&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robinmetral/33-concepts-js&#34;&gt;Français (French)&lt;/a&gt; — Robin Métral&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vikaschauhan/33-js-concepts&#34;&gt;हिन्दी (Hindi)&lt;/a&gt; — Vikas Chauhan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DimitrisZx/33-js-concepts&#34;&gt;Ελληνικά (Greek)&lt;/a&gt; — Dimitris Zarachanis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oimo23/33-js-concepts&#34;&gt;日本語 (Japanese)&lt;/a&gt; — oimo23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/burhannn/33-js-concepts&#34;&gt;Deutsch (German)&lt;/a&gt; — burhannn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndrewSavetchuk/33-js-concepts-ukrainian-translation&#34;&gt;украї́нська мо́ва (Ukrainian)&lt;/a&gt; — Andrew Savetchuk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ududsha/33-js-concepts&#34;&gt;සිංහල (Sinhala)&lt;/a&gt; — Udaya Shamendra&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Donearm/33-js-concepts&#34;&gt;Italiano (Italian)&lt;/a&gt; — Gianluca Fiore&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ninearif/33-js-concepts&#34;&gt;ภาษาไทย (Thai)&lt;/a&gt; — Arif Waram&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marioestradaf/33-js-concepts&#34;&gt;Català (Catalan)&lt;/a&gt; — Mario Estrada&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#1-call-stack&#34;&gt;Call Stack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#2-primitive-types&#34;&gt;Primitive Types&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#3-value-types-and-reference-types&#34;&gt;Value Types and Reference Types&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#4-implicit-explicit-nominal-structuring-and-duck-typing&#34;&gt;Implicit, Explicit, Nominal, Structuring and Duck Typing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#5--vs--vs-typeof&#34;&gt;== vs === vs typeof&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#6-function-scope-block-scope-and-lexical-scope&#34;&gt;Function Scope, Block Scope and Lexical Scope&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#7-expression-vs-statement&#34;&gt;Expression vs Statement&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#8-iife-modules-and-namespaces&#34;&gt;IIFE, Modules and Namespaces&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#9-message-queue-and-event-loop&#34;&gt;Message Queue and Event Loop&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#10-settimeout-setinterval-and-requestanimationframe&#34;&gt;setTimeout, setInterval and requestAnimationFrame&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#11-javascript-engines&#34;&gt;JavaScript Engines&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#12-bitwise-operators-type-arrays-and-array-buffers&#34;&gt;Bitwise Operators, Type Arrays and Array Buffers&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#13-dom-and-layout-trees&#34;&gt;DOM and Layout Trees&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#14-factories-and-classes&#34;&gt;Factories and Classes&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#15-this-call-apply-and-bind&#34;&gt;this, call, apply and bind&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#16-new-constructor-instanceof-and-instances&#34;&gt;new, Constructor, instanceof and Instances&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#17-prototype-inheritance-and-prototype-chain&#34;&gt;Prototype Inheritance and Prototype Chain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#18-objectcreate-and-objectassign&#34;&gt;Object.create and Object.assign&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#19-map-reduce-filter&#34;&gt;map, reduce, filter&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#20-pure-functions-side-effects-state-mutation-and-event-propagation&#34;&gt;Pure Functions, Side Effects, State Mutation and Event Propagation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#21-closures&#34;&gt;Closures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#22-high-order-functions&#34;&gt;High Order Functions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#23-recursion&#34;&gt;Recursion&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#24-collections-and-generators&#34;&gt;Collections and Generators&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#25-promises&#34;&gt;Promises&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#26-asyncawait&#34;&gt;async/await&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#27-data-structures&#34;&gt;Data Structures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#28-expensive-operation-and-big-o-notation&#34;&gt;Expensive Operation and Big O Notation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#29-algorithms&#34;&gt;Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#30-inheritance-polymorphism-and-code-reuse&#34;&gt;Inheritance, Polymorphism and Code Reuse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#31-design-patterns&#34;&gt;Design Patterns&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#32-partial-applications-currying-compose-and-pipe&#34;&gt;Partial Applications, Currying, Compose and Pipe&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#33-clean-code&#34;&gt;Clean Code&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1. Call Stack&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Call_stack&#34;&gt;Call Stack — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec&#34;&gt;Understanding Javascript Call Stack, Event Loops — Gaurav Pandvia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4&#34;&gt;Understanding the JavaScript Call Stack — Charles Freeborn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://web.archive.org/web/20180701233338/https://www.valentinog.com/blog/js-execution-context-call-stack/&#34;&gt;Javascript: What Is The Execution Context? What Is The Call Stack? — Valentino Gagliardi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gist.github.com/jesstelford/9a35d20a2aa044df8bf241e00d7bc2d0&#34;&gt;What is the JS Event Loop and Call Stack? — Jess Telford&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0&#34;&gt;Understanding Execution Context and Execution Stack in Javascript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf&#34;&gt;How JavaScript Works: An Overview of the Engine, the Runtime, and the Call Stack — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o&#34;&gt;How JavaScript Works Under The Hood: An Overview of JavaScript Engine, Heap and, Call Stack — Bipin Rajbhar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=w6QGEiQceOM&#34;&gt;Javascript: the Call Stack explained — Coding Blocks India&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=W8AeMrVtFLY&#34;&gt;The JS Call Stack Explained In 9 Minutes — Colt Steele&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=w7QWQlkLY_s&#34;&gt;What is the Call Stack? — Eric Traub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Q2sFmqvpBe0&#34;&gt;The Call Stack — Kevin Drumm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD&#34;&gt;Understanding JavaScript Execution — Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Nt-qa_LlUH0&#34;&gt;The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=8aGhZQkoFbQ&#34;&gt;What the heck is the event loop anyway? — Philip Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ygA5U7Wgsg8&#34;&gt;La PILA DE EJECUCIÓN (Call Stack) de JavaScript — La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=iLWTnMzWtj4&amp;amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&#34;&gt;How JavaScript Code is executed? ❤️&amp;amp; Call Stack — Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;2. Primitive Types&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values&#34;&gt;JavaScript data types and data structures — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://2ality.com/2012/04/number-encoding.html&#34;&gt;How numbers are encoded in JavaScript — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type&#34;&gt;What You Need to Know About JavaScript Number Type — Max Wizard K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/&#34;&gt;What Every JavaScript Developer Should Know About Floating Point Numbers — Chewxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/&#34;&gt;The Secret Life of JavaScript Primitives — Angus Croll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flow.org/en/docs/types/primitives/&#34;&gt;Primitive Types — Flow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/d4nyll/not-everything-in-javascript-is-an-object&#34;&gt;(Not) Everything in JavaScript is an Object — Daniel Li&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values&#34;&gt;JavaScript data types and data structures — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12&#34;&gt;Diving Deeper in JavaScripts Objects — Arfat Salman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c&#34;&gt;The differences between Object.freeze() vs Const in JavaScript — Bolaji Ayodeji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/object-toprimitive&#34;&gt;Object to primitive conversion — JavaScript.info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9ooYYRLdg_g&#34;&gt;JavaScript Reference vs Primitive Types — Academind&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=HsbWQsSCE5Y&#34;&gt;JavaScript Primitive Types — Simon Sez IT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=e-_mDyqm2oU&#34;&gt;Value Types and Reference Types in JavaScript — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qw3j0A3DIzQ&#34;&gt;JavaScript Primitive Data Types — Avelx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=MqHDDtVYJRI&#34;&gt;Everything you never wanted to know about JavaScript numbers — Bartek Szopka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=B4Bbmei_thw&#34;&gt;What are variables in Javascript? — JS For Everyone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=cC65D2q5f8I&#34;&gt;TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;3. Value Types and Reference Types&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&#34;&gt;Explaining Value vs. Reference in Javascript — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c&#34;&gt;Primitive Types &amp;amp; Reference Types in JavaScript — Bran van der Meer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851&#34;&gt;Value Types, Reference Types and Scope in JavaScript — Ben Aston&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18&#34;&gt;Back to roots: JavaScript Value vs Reference — Miro Koczka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293&#34;&gt;Grasp “By Value” and “By Reference” in JavaScript — Léna Faure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0&#34;&gt;JavaScript Reference and Copy Variables — Vítor Capretz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/&#34;&gt;JavaScript Primitive vs Reference Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value&#34;&gt;JavaScript by Reference vs. by Value — nrabinowitz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f&#34;&gt;JavaScript Interview Prep: Primitive vs. Reference Types — Mike Cronin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 [JavaScript map vs. forEach: When to Use Each One - Sajal Soni] (&lt;a href=&#34;https://code.tutsplus.com/tutorials/javascript-map-vs-foreach-when-to-use-each-one--cms-38365&#34;&gt;https://code.tutsplus.com/tutorials/javascript-map-vs-foreach-when-to-use-each-one--cms-38365&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=E-dAnFdq8k8&#34;&gt;Javascript Pass by Value vs Pass by Reference — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=fD0t_DKREbE&#34;&gt;JavaScript Value vs Reference Types — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AvkyOrWkuQc&#34;&gt;VALORES vs REFERENCIAS en JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;4. Implicit, Explicit, Nominal, Structuring and Duck Typing&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23&#34;&gt;What you need to know about Javascript&#39;s Implicit Coercion — Promise Tochi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839&#34;&gt;JavaScript Type Coercion Explained — Alexey Samoshkin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-coercion-explained-545c895213d3&#34;&gt;Javascript Coercion Explained — Ben Garrison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript&#34;&gt;What exactly is Type Coercion in Javascript? - Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qGyqzN0bjhc&amp;amp;t&#34;&gt;== ? === ??? ...#@^% - Shirmung Bielefeld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=b04Q_vyqEG8&#34;&gt;Coercion in Javascript - Hitesh Choudhary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=z4-8wMSPJyI&#34;&gt;JavaScript Questions: What is Coercion? - Steven Hancock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=C5fr0LZLMAs&#34;&gt;Typing: Static vs Dynamic, Weak vs. Strong - Codexpanse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=0ei4nb49GKo&#34;&gt;EL SISTEMA de TIPOS DE JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1st-ed&#34;&gt;You Don&#39;t Know JS, 1st Edition: Types &amp;amp; Grammar — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;5. == vs === vs typeof&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a&#34;&gt;JavaScript Double Equals vs. Triple Equals — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://bytearcher.com/articles/equality-comparison-operator-javascript/&#34;&gt;Should I use === or == equality comparison operator in JavaScript? — Panu Pitkamaki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript&#34;&gt;== vs === JavaScript: Double Equals and Coercion — AJ Meyghani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.impressivewebs.com/why-use-triple-equals-javascipt/&#34;&gt;Why Use the Triple-Equals Operator in JavaScript? — Louis Lazaris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript&#34;&gt;What is the difference between == and === in JavaScript? — Craig Buckler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object&#34;&gt;Why javascript&#39;s typeof always return &#34;object&#34;? — Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://tobyho.com/2011/01/28/checking-types-in-javascript/&#34;&gt;Checking Types in Javascript — Toby Ho&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://webbjocke.com/javascript-check-data-types/&#34;&gt;How to better check data types in JavaScript — Webbjocke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html&#34;&gt;Checking for the Absence of a Value in JavaScript — Tomer Aberbach&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ol_su88I3kw&#34;&gt;JavaScript - The typeof operator — Java Brains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qPYhTPt_SbQ&#34;&gt;Javascript typeof operator — DevDelight&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;6. Function Scope, Block Scope and Lexical Scope&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures&#34;&gt;You Don&#39;t Know JS Yet, 2nd Edition: Scope &amp;amp; Closures — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99&#34;&gt;JavaScript Functions — Understanding The Basics — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/&#34;&gt;The battle between Function Scope and Block Scope — Marius Herring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.scaler.com/topics/javascript/javascript-functions/&#34;&gt;Functions in JavaScript - Deepa Pandey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html&#34;&gt;Emulating Block Scope in JavaScript — Josh Clanton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe&#34;&gt;The Difference Between Function and Block Scope in JavaScript — Joseph Cardillo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7&#34;&gt;Function Scopes and Block Scopes in JavaScript — Samer Buna&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://ryanmorr.com/understanding-scope-and-context-in-javascript/&#34;&gt;Understanding Scope and Context in JavaScript — Ryan Morr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/javascript-scope-closures/&#34;&gt;JavaScript Scope and Closures — Zell Liew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/&#34;&gt;Understanding Scope in JavaScript — Wissam Abirached&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/understanding-scope-in-javascript&#34;&gt;Understanding Scope in JavaScript ― Hammad Ahmed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0&#34;&gt;When to use a function declaration vs. a function expression ― Amber Wilkie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai&#34;&gt;A JavaScript Fundamentals Cheat Sheet: Scope, Context, and “this” ― Alexandra Fren&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_scope&#34;&gt;Functions / Function scope ― MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=SBwoFkRjZvE&#34;&gt;What Makes Javascript Weird ... and Awesome pt. 4 — LearnCode.academy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=dhp57T3p760&#34;&gt;Variable Scope in JavaScript — Kirupa Chinnathambi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=aK_nuUAdr8E&#34;&gt;JavaScript Block Scope and Function Scope — mmtuts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=GhNA0r10MmA&#34;&gt;What the Heck is Lexical Scope? — NWCalvank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=FyWdrCZZavQ&#34;&gt;Variable Scope — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;7. Expression vs Statement&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/promhize/javascript-in-depth-all-you-need-to-know-about-expressions-statements-and-expression-statements-5k2&#34;&gt;All you need to know about Javascript&#39;s Expressions, Statements and Expression Statements — Promise Tochi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/function-expressions-vs-declarations/&#34;&gt;Function Expressions vs Function Declarations — Paul Wilkins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38&#34;&gt;JavaScript Function — Declaration vs Expression — Ravi Roshan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052&#34;&gt;Function Declarations vs. Function Expressions — Mandeep Singh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/&#34;&gt;Function Declarations vs. Function Expressions — Anguls Croll&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=WVyCrI1cHi8&#34;&gt;Expressions vs. Statements in JavaScript — Hexlet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=3jDpNGJkupA&#34;&gt;JavaScript - Expression vs. Statement — WebTunings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;8. IIFE, Modules and Namespaces&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6&#34;&gt;Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0&#34;&gt;Do ES6 Modules make the case of IIFEs obsolete?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/&#34;&gt;A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers ― Jurgen Van de Moere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://exploringjs.com/es6/ch_modules.html&#34;&gt;Modules ― Exploring JS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&#34;&gt;ES modules: A cartoon deep-dive — Lin Clark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/understanding-es6-modules/&#34;&gt;Understanding ES6 Modules — Craig Buckler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/&#34;&gt;An overview of ES6 Modules in JavaScript — Brent Graham&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-modules-in-depth&#34;&gt;ES6 Modules in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b&#34;&gt;ES6 modules, Node.js and the Michael Jackson Solution — Alberto Gimeno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&#34;&gt;JavaScript Modules: A Beginner’s Guide — Preethi Kasireddy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developers.google.com/web/fundamentals/primers/modules&#34;&gt;Using JavaScript modules on the web — Addy Osmani &amp;amp; Mathias Bynens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/bhagatparwinder/iife-immediately-invoked-function-expressions-49c5&#34;&gt;IIFE: Immediately Invoked Function Expressions — Parwinder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://sassy-butter-197.notion.site/Javascript-bundlers-016932b17b0744e983c2cc0db31e6f02&#34;&gt;Javascript Module Bundlers — Vanshu Hassija&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=3cbiZV4H22c&#34;&gt;Immediately Invoked Function Expression - Beau teaches JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=I5EntfMeIIQ&#34;&gt;Understanding JavaScript IIFE — Sheo Narayan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=_3oSWwapPKQ&#34;&gt;JavaScript Modules: ES6 Import and Export — Kyle Robinson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=aQr2bV1BPyE&#34;&gt;ES6 - Modules — Ryan Christiani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=fIP4pjAqCtQ&#34;&gt;ES6 Modules in the Real World — Sam Thorogood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=5P04OK6KlXA&#34;&gt;ES6 Modules — TempleCoding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Xd7zgPFwVX8&amp;amp;&#34;&gt;JavaScript IIFE (Immediately Invoked Function Expressions) — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;9. Message Queue and Event Loop&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/javascript-event-loop-explained-4cd26af121d4&#34;&gt;JavaScript Event Loop Explained — Anoop Raveendran&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/&#34;&gt;The JavaScript Event Loop: Explained — Erin Sweson-Healey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40&#34;&gt;Understanding JS: The Event Loop — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop&#34;&gt;Understanding the JavaScript Event Loop — Ashish Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flaviocopes.com/javascript-event-loop/&#34;&gt;The JavaScript Event Loop — Flavio Copes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5&#34;&gt;How JavaScript works: Event loop — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&#34;&gt;Tasks, microtasks, queues and schedules — Jake Archibald&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8&#34;&gt;Visualising the JavaScript Event Loop with a Pizza Restaurant analogy — Priyansh Jain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif&#34;&gt;JavaScript Visualized: Event Loop — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=8aGhZQkoFbQ&#34;&gt;What the heck is the event loop anyway? | JSConf EU — Philip Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XzXIMZMN9k4&#34;&gt;JavaScript Event Loop — ComScience Simplified&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=6MXRNXXgP_0&#34;&gt;I&#39;m stuck in an Event Loop — Philip Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=cCOL7MC4Pl0&#34;&gt;In The Loop - Jake Archibald | JSConf.Asia 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Eqq2Rb7LzYE&#34;&gt;Desmitificando el Event Loop (Spanish)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=6lbBaM18X3g&#34;&gt;Callbacks, Sincrono, Assíncrono e Event Loop (PT-BR)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;10. setTimeout, setInterval and requestAnimationFrame&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/settimeout-setinterval&#34;&gt;setTimeout and setInterval — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9&#34;&gt;Why not to use setInterval — Akanksha Sharma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://develoger.com/settimeout-vs-setinterval-cff85142555b&#34;&gt;setTimeout VS setInterval — Develoger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/using-requestanimationframe/&#34;&gt;Using requestAnimationFrame — Chris Coyier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.javascriptkit.com/javatutors/requestanimationframe.shtml&#34;&gt;Understanding JavaScript&#39;s requestAnimationFrame() — JavaScript Kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/&#34;&gt;Handling time intervals in JavaScript - Amit Merchant&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=6bPKyl8WYWI&#34;&gt;Javascript: How setTimeout and setInterval works — Coding Blocks India&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=TbCgGWe8LN8&#34;&gt;setTimeout and setInterval in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=0VVJSvlUgtg&#34;&gt;JavaScript Timers — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=mVKfrWCOB60&#34;&gt;JavaScript setTimeOut and setInterval Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;11. JavaScript Engines&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.softwaremag.com/javascript-engines/&#34;&gt;JavaScript Engines — Jen Looper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964&#34;&gt;Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code — DroidHead&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775&#34;&gt;Understanding V8’s Bytecode — Franziska Hinkelmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/&#34;&gt;A Brief History of Google’s V8 Javascript Engine — Clair Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553&#34;&gt;JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://mathiasbynens.be/notes/shapes-ics&#34;&gt;JavaScript engine fundamentals: Shapes and Inline Caches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://mathiasbynens.be/notes/prototypes&#34;&gt;JavaScript engine fundamentals: optimizing prototypes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://v8.dev/blog/elements-kinds&#34;&gt;How V8 optimizes array operations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=5nmpokoRaZI&#34;&gt;JavaScript Engines: The Good Parts™ — Mathias Bynens &amp;amp; Benedikt Meurer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=2WJL19wDH68&#34;&gt;JS Engine EXPOSED 🔥 Google&#39;s V8 Architecture 🚀 | Namaste JavaScript Ep. 16 - Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;12. Bitwise Operators, Type Arrays and Array Buffers&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4&#34;&gt;Programming with JS: Bitwise Operations — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5&#34;&gt;Using JavaScript’s Bitwise Operators in Real Life — ian m&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.w3resource.com/javascript/operators/bitwise-operator.php&#34;&gt;JavaScript Bitwise Operators — w3resource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3&#34;&gt;Bitwise Operators in Javascript — Joe Cha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04&#34;&gt;A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript — Paul Brown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript&#34;&gt;How can I understand Bitwise operation in JavaScript?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=mesu75PTDC8&#34;&gt;JavaScript Bitwise Operators — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;13. DOM and Layout Trees&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://eloquentjavascript.net/14_dom.html&#34;&gt;Eloquent JavaScript, 3rd Edition: Ch. 14 - The Document Object Model&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/introduction-to-the-dom&#34;&gt;How To Understand and Modify the DOM in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d&#34;&gt;What’s the Document Object Model, and why you should know how to use it — Leonardo Maldonado&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html&#34;&gt;JavaScript DOM Tutorial with Example — Guru99&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/dom/&#34;&gt;What is the DOM? — Chris Coyier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://zellwk.com/blog/dom-traversals/&#34;&gt;Traversing the DOM with JavaScript — Zell Liew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/dom-nodes&#34;&gt;DOM Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/how-to-traverse-the-dom-in-javascript-d6555c335b4e&#34;&gt;How to traverse the DOM in Javascript — Vojislav Grujić&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&#34;&gt;Render Tree Construction — Ilya Grigorik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://bitsofco.de/what-exactly-is-the-dom/&#34;&gt;What exactly is the DOM?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=FIORjGvT0kk&#34;&gt;JavaScript DOM — The Net Ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=0ik6X4DJKCc&#34;&gt;JavaScript DOM Crash Course — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;14. Factories and Classes&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript&#34;&gt;How To Use Classes in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677&#34;&gt;Javascript Classes — Under The Hood — Majid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes&#34;&gt;Better JavaScript with ES6, Pt. II: A Deep Dive into Classes ― Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd&#34;&gt;Understand the Factory Design Pattern in Plain JavaScript — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://atendesigngroup.com/blog/factory-functions-javascript&#34;&gt;Factory Functions in JavaScript — Josh Miller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9&#34;&gt;The Factory Pattern in JS ES6 — SnstsDev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15&#34;&gt;Class vs Factory function: exploring the way forward — Cristi Salcescu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a&#34;&gt;How ES6 classes really work and how to build your own — Robert Grosse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jordankasper.com/understanding-super-in-javascript&#34;&gt;Understanding &lt;code&gt;super&lt;/code&gt; in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lawrence_eagles/an-easy-guide-to-understanding-classes-in-javascript-3bcm&#34;&gt;An Easy Guide To Understanding Classes In JavaScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=jpegXpQpb3o&#34;&gt;JavaScript Factory Functions — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ImwrezYhw4w&#34;&gt;Factory Functions in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=R7-IwpH80UE&#34;&gt;Javascript Tutorial Function Factories — Crypto Chan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;15. this, call, apply and bind&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&#34;&gt;call() — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&#34;&gt;bind() — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&#34;&gt;apply() — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://levelup.gitconnected.com/grokking-call-apply-and-bind-methods-in-javascript-392351a4be8b&#34;&gt;Grokking call(), apply() and bind() methods in JavaScript — Aniket Kudale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp&#34;&gt;How-to: call() , apply() and bind() in JavaScript — Niladri Sekhar Dutta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/&#34;&gt;JavaScript’s Apply, Call, and Bind Methods are Essential for JavaScript Professionals — Richard Bovell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb&#34;&gt;Javascript: call(), apply() and bind() — Omer Goldberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b&#34;&gt;The difference between call / apply / bind — Ivan Sifrim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ritik_dev_js/what-the-hack-is-call-apply-bind-in-javascript-11ce&#34;&gt;What the hack is call, apply, bind in JavaScript — Ritik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/&#34;&gt;Mastering &#39;this&#39; in JavaScript: Callbacks and bind(), apply(), call() — Michelle Gienow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo&#34;&gt;JavaScript’s apply, call, and bind explained by hosting a cookout — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb&#34;&gt;How AND When to use bind, call, and apply in Javascript — Eigen X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja&#34;&gt;Let me explain to you what is &lt;code&gt;this&lt;/code&gt;. (Javascript) — Jason Yu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/quick-code/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8&#34;&gt;Understanding the “this” Keyword in JavaScript — Pavan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8&#34;&gt;How to understand the keyword this and context in JavaScript — Lukas Gisder-Dubé&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1&#34;&gt;What the heck is this in Javascript? — Hridayesh Sharma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam&#34;&gt;This and Bind In Javascript — Brian Barbour&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf&#34;&gt;3 Techniques for Maintaining Your Sanity Using &#34;This&#34; in JavaScript — Carl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa&#34;&gt;Mastering the JavaScript &#34;this&#34; Keyword — Aakash Srivastav&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/sargalias/this-binding-in-javascript-4-new-binding-2p1n&#34;&gt;This binding in JavaScript – 4. New binding — Spyros Argalias&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/thatgalnatalie/a-quick-intro-to-this-in-javascript-2mhp&#34;&gt;A quick intro to &#39;this&#39; in JavaScript — Natalie Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/cat__logic/explaining-javascript-this-to-my-cat-1kig&#34;&gt;Explaining JavaScript &#39;this&#39; to my cat — Andrey K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/developerkaren/a-conversation-with-the-this-keyword-in-javascript-3j6g&#34;&gt;A conversation with the &#39;this&#39; keyword in Javascript — Karen Efereyan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jscurious.com/what-are-call-apply-and-bind-in-javascript/&#34;&gt;What are call(), apply() and bind() in JavaScript — Amitav Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://yasemincidem.medium.com/understanding-this-binding-in-javascript-86687397c76d&#34;&gt;Understanding &#39;this&#39; binding in JavaScript — Yasemin Cidem&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=c0mLRpw-9rI&#34;&gt;JavaScript call, apply and bind — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AYVYxezrMWA&#34;&gt;JavaScript Practical Applications of Call, Apply and Bind functions— techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Uy0NOXLBraE&#34;&gt;JavaScript (call, bind, apply) — curious aatma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AOSYY1_np_4&#34;&gt;Understanding Functions and &#39;this&#39; In The World of ES2017 — Bryan Hughes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=GhbhD1HR5vk&#34;&gt;bind and this - Object Creation in JavaScript - FunFunFunction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=uBdH0iB1VDM&#34;&gt;JS Function Methods call(), apply(), and bind() — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;16. new, Constructor, instanceof and Instances&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e&#34;&gt;JavaScript For Beginners: the ‘new’ operator — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c&#34;&gt;Let’s demystify JavaScript’s ‘new’ keyword — Cynthia Lee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/constructor-new&#34;&gt;Constructor, operator &#34;new&#34; — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/understanding-javascript-constructors/&#34;&gt;Understanding JavaScript Constructors — Faraz Kelhini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://openclassrooms.com/en/courses/3523231-learn-to-code-with-javascript/4379006-use-constructor-functions&#34;&gt;Use Constructor Functions — Openclassrooms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://2ality.com/2017/08/type-right.html&#34;&gt;Beyond &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;: simplifying dynamic type checks — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/&#34;&gt;What Is the Instanceof Operator in JavaScript — appendTo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac&#34;&gt;Function and Object, instances of each other — Kiro Risk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;17. Prototype Inheritance and Prototype Chain&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&#34;&gt;Inheritance and the prototype chain — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b&#34;&gt;Javascript : Prototype vs Class — Valentin PARSY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://mathiasbynens.be/notes/prototypes&#34;&gt;JavaScript engine fundamentals: optimizing prototypes — Mathias Bynens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-prototype-cb29d82b8809&#34;&gt;JavaScript Prototype — NC Patro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo&#34;&gt;Prototype in Javascript — Sandeep Ranjan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/prototypes-in-javascript-5bba2990e04b&#34;&gt;Prototypes in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872&#34;&gt;Prototype in JavaScript: it’s quirky, but here’s how it works — Pranav Jindal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2&#34;&gt;Understanding JavaScript: Prototype and Inheritance — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d&#34;&gt;Understanding Classes (ES5) and Prototypal Inheritance in JavaScript — Hridayesh Sharma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl&#34;&gt;prototype, &lt;strong&gt;proto&lt;/strong&gt; and Prototypal inheritance in JavaScript — Varun Dey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/prototype-inheritance&#34;&gt;Prototypal Inheritance — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript&#34;&gt;How To Work with Prototypes and Inheritance in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e&#34;&gt;Master JavaScript Prototypes &amp;amp; Inheritance — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4&#34;&gt;JavaScript’s Prototypal Inheritance Explained Using CSS — Nash Vail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gist.github.com/derhuerst/a585c4916b1c361cc6f0&#34;&gt;Prototypal Inheritance in JavaScript — Jannis Redmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance&#34;&gt;Demystifying ES6 Classes And Prototypal Inheritance ― Neo Ighodaro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/danny/intro-to-prototypal-inheritance---js-9di&#34;&gt;Intro To Prototypal Inheritance — Dharani Jayakanthan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm&#34;&gt;Let’s Build Prototypal Inheritance in JS — var-che&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b&#34;&gt;Objects, Prototypes and Classes in JavaScript — Atta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg&#34;&gt;The magical world of JavaScript prototypes — Belén&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lawrence_eagles/understanding-prototypal-inheritance-in-javascript-4f31#chp-4&#34;&gt;Understanding Prototypal Inheritance In JavaScript — Lawrence Eagles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/irenejpopova/objects-and-prototypes-in-javascript-2eie&#34;&gt;Objects and Prototypes in JavaScript — Irena Popova&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=sOrtAjyk4lQ&#34;&gt;Javascript Prototype Inheritance — Avelx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=7oNWNlMrkpc&#34;&gt;JavaScript Prototype Inheritance Explained pt. I — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=uIlj6_z_wL8&#34;&gt;JavaScript Prototype Inheritance Explained pt. II — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qMO-LTOrJaE&#34;&gt;JavaScript Prototype Inheritance Explained — Kyle Robinson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=G6l5CHl67HQ&#34;&gt;Advanced Javascript - Prototypal Inheritance In 1 Minute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=phwzuiJJPpQ&#34;&gt;An Overview Of Classical Javascript Classes and Prototypal Inheritance — Pentacode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=4jb4AYEyhRc&#34;&gt;Object Oriented JavaScript - Prototype — The Net Ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=2rkEbcptR64&#34;&gt;Prototype in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=oCwCcNvaXAQ&#34;&gt;JavaScript Using Prototypes — O&#39;Reilly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XskMWBXNbp0&#34;&gt;A Beginner&#39;s Guide to Javascript&#39;s Prototype — Tyler Mcginnis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=hS_WqkyUah8&#34;&gt;Prototypes in Javascript - p5.js Tutorial — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1st-ed&#34;&gt;You Don&#39;t Know JS, 1st Edition: this &amp;amp; Object Prototypes — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;18. Object.create and Object.assign&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create&#34;&gt;Object.create() — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&#34;&gt;Object.assign() — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@happymishra66/object-create-in-javascript-fa8674df6ed2&#34;&gt;Object.create in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html&#34;&gt;Object.create(): the New Way to Create Objects in JavaScript — Rob Gravelle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html&#34;&gt;Basic Inheritance with Object.create — Joshua Clanton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.geeksforgeeks.org/object-create-javascript/&#34;&gt;Object.create() In JavaScript — GeeksforGeeks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358&#34;&gt;Understanding the difference between Object.create() and the new operator — Jonathan Voxland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/&#34;&gt;JavaScript Object Creation: Patterns and Best Practices — Jeff Mott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/bar-talk/copying-objects-in-javascript&#34;&gt;Copying Objects in JavaScript ― Orinami Olatunji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-object-assign-bc9696dcbb6e&#34;&gt;JavaScript: Object.assign() — Thiago S. Adriano&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flaviocopes.com/how-to-clone-javascript-object/&#34;&gt;How to deep clone a JavaScript Object — Flavio Copes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/vzing/object-create-when-and-why-to-use-20m9&#34;&gt;Object.create(): When and Why to Use — VZing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=aw7NfYhR5rc&#34;&gt;Object.assign() explained — Aaron Writes Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9Ky4X6inpi4&#34;&gt;Object.assign() Method — techsith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;19. map, reduce, filter&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d&#34;&gt;JavaScript Functional Programming — map, filter and reduce — Bojan Gvozderac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4&#34;&gt;Learn map, filter and reduce in Javascript — João Miguel Cunha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter&#34;&gt;JavaScript’s Map, Reduce, and Filter — Dan Martensen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209&#34;&gt;How to Use Map, Filter, &amp;amp; Reduce in JavaScript — Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4&#34;&gt;JavaScript — Learn to Chain Map, Filter, and Reduce — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/write-beautiful-javascript-with-%CE%BB-fp-es6-350cd64ab5bf&#34;&gt;Javascript data structure with map, reduce, filter and ES6 — Deepak Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464&#34;&gt;Understanding map, filter and reduce in Javascript — Luuk Gruijs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f&#34;&gt;Functional Programming in JS: map, filter, reduce (Pt. 5) — Omer Goldberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://wsvincent.com/functional-javascript-map-filter-reduce/&#34;&gt;JavaScript: Map, Filter, Reduce — William S. Vincent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/&#34;&gt;Arrow Functions: Fat and Concise Syntax in JavaScript — Kyle Pennell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc&#34;&gt;JavaScript: Arrow Functions for Beginners — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26&#34;&gt;When (and why) you should use ES6 arrow functions — and when you shouldn’t — Cynthia Lee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946&#34;&gt;JavaScript — Learn &amp;amp; Understand Arrow Functions — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83&#34;&gt;(JavaScript )=&amp;gt; Arrow functions — sigu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@panderson.dev/javascript-reduce-79aab078da23&#34;&gt;Javascript.reduce() — Paul Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gofore.com/en/why-you-should-replace-foreach/&#34;&gt;Why you should replace forEach with map and filter in JavaScript — Roope Hakulinen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d&#34;&gt;Simplify your JavaScript – Use .map(), .reduce(), and .filter() — Etienne Talbot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/&#34;&gt;JavaScript’s Reduce Method Explained By Going On a Diet — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160&#34;&gt;Difference between map, filter and reduce in JavaScript — Amirata Khodaparast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/map-filter-reduce-ebbed4be4201&#34;&gt;Map⇄Filter⇄Reduce↻ — ashay mandwarya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6&#34;&gt;Finding Your Way With .map() — Brandon Wozniewicz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26&#34;&gt;How to write your own map, filter and reduce functions in JavaScript — Hemand Nair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/&#34;&gt;How to Manipulate Arrays in JavaScript — Bolaji Ayodeji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/15-useful-javascript-examples-of-map-reduce-and-filter-74cbbb5e0a1f&#34;&gt;How to simplify your codebase with map(), reduce(), and filter() in JavaScript — Alex Permyakov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/pickleat/map-filter-and-reduce-2efb&#34;&gt;.map(), .filter(), and .reduce() — Andy Pickle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/chrisachard/map-filter-reduce-crash-course-5gan&#34;&gt;Map/Filter/Reduce Crash Course — Chris Achard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@js_tut/map-filter-and-reduce-animated-7fe391a35a47&#34;&gt;Map, Filter and Reduce – Animated — JavaScript Teacher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209&#34;&gt;Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard — Mauro Bono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24&#34;&gt;How to Use JavaScript’s .map, .filter, and .reduce — Avery Duffin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://towardsdatascience.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7&#34;&gt;Javascript performance test - for vs for each vs (map, reduce, filter, find) — Deepak Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/using-map-filter-and-reduce-properly-50e07f80c8b2&#34;&gt;Using .map(), .filter() and .reduce() properly — Sasanka Kudagoda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/sanderdebr/mastering-the-javascript-reduce-method-2foj&#34;&gt;Mastering the JavaScript Reduce method ✂️ — sanderdebr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/javascript-map-how-to-use-the-js-map-function-array-method/&#34;&gt;JavaScript Map – How to Use the JS .map() Function (Array Method) — FreeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=UXiYii0Y7Nw&#34;&gt;Map, Filter and Reduce — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=vytzLlY_wmU&#34;&gt;Functional JavaScript: Map, forEach, Reduce, Filter — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qTeeVd8hOFY&#34;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part I) — Michael Rosata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=gIm9xLYudL0&#34;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part 2) — Michael Rosata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=zYBeEPxNSbw&#34;&gt;JavaScript Higher Order Functions - Filter, Map, Sort &amp;amp; Reduce — Epicop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=4qWlqD0yYTU&#34;&gt;[Array Methods 2/3] .filter + .map + .reduce — CodeWithNick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=6sQDTgOqh-I&#34;&gt;Arrow functions in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=e-5obm1G_FY&amp;amp;t=1521s&#34;&gt;Learning Functional Programming with JavaScript — Anjana Vakil - JSUnconf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=bCqtb-Z5YGQ&amp;amp;t=17s&#34;&gt;Map - Parte 2 JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Wl98eZpkp-c&#34;&gt;Reduce basics - Part 3 of FP in JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=1DMolJ2FrNY&amp;amp;t=621s&#34;&gt;Reduce Advanced - Part 4 of FP in JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=IXp06KekEjM&#34;&gt;reduce Array Method | JavaScript Tutorial - Florin Pop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=P4RAFdZDn3M&#34;&gt;map Array Method | JavaScript Tutorial - Florin Pop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://youtu.be/Ah7-PPjQ5Ls&#34;&gt;Different array methods in 1 minute | Midudev (Spanish)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;20. Pure Functions, Side Effects, State Mutation and Event Propagation&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c&#34;&gt;Javascript and Functional Programming — Pure Functions — Omer Goldberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976&#34;&gt;Master the JavaScript Interview: What is a Pure Function? — Eric Elliott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c&#34;&gt;JavaScript: What Are Pure Functions And Why Use Them? — James Jeffery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/&#34;&gt;Pure functions in JavaScript — @nicoespeon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/functional-programming-pure-functions/&#34;&gt;Functional Programming: Pure Functions — Arne Brasseur&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://appdividend.com/2017/04/10/pure-functions-in-javascript/&#34;&gt;Pure Functions In Javascript — Krunal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://alistapart.com/article/making-your-javascript-pure&#34;&gt;Making your JavaScript Pure — Jack Franklin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa&#34;&gt;Arrays, Objects and Mutations — Federico Knüssel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310&#34;&gt;The State of Immutability — Maciej Sikora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/zurvin/hablemos-de-inmutabilidad-3dc65d290783&#34;&gt;Hablemos de Inmutabilidad — Kike Sanchez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/&#34;&gt;How to deal with dirty side effects in your pure functional JavaScript — James Sinclair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://davidwalsh.name/preventing-sideeffects-javascript&#34;&gt;Preventing Side Effects in JavaScript — David Walsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/wielding-pure-functions-in-javascript-and-function-composition&#34;&gt;Wielding Pure Functions in JavaScript and Function Composition — Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://wsvincent.com/javascript-pure-functions/&#34;&gt;JavaScript: Pure Functions — William S. Vincent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1&#34;&gt;Functional programming paradigms in modern JavaScript: Pure functions — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3&#34;&gt;Understanding Javascript Mutation and Pure Functions — Chidume Nnamdi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@bluepnume/functional-ish-javascript-205c05d0ed08&#34;&gt;Functional-ish JavaScript — Daniel Brain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events&#34;&gt;Event Propagation — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/bubbling-and-capturing&#34;&gt;Event Propagation — Bubbling and capturing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=dZ41D6LDSBg&#34;&gt;Pure Functions — Hexlet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Jh_Uzqzz_wM&#34;&gt;Pure Functions - Functional Programming in JavaScript — Paul McBride&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=frT3H-eBmPc&#34;&gt;JavaScript Pure Functions — Seth Alexander&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AHbRVJzpB54&#34;&gt;JavaScript Pure vs Impure Functions Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=BMUiFMZr7vk&#34;&gt;Pure Functions - Programação Funcional: Parte 1 - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=JYc7gr9Ehl0&#34;&gt;Event Propagation - JavaScript Event Bubbling and Propagation - Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;21. Closures&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&#34;&gt;Closures — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/closure&#34;&gt;Closure — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8&#34;&gt;I never understood JavaScript closures — Olivier De Meulder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://javascriptissexy.com/understand-javascript-closures-with-ease/&#34;&gt;Understand JavaScript Closures With Ease — Richard Bovell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/understanding-javascript-closures-da6aab330302&#34;&gt;Understanding JavaScript Closures — Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/understand-closures-in-javascript-d07852fa51e7&#34;&gt;Understand Closures in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4&#34;&gt;A simple guide to help you understand closures in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach&#34;&gt;Understanding JavaScript Closures: A Practical Approach — Paul Upendo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b&#34;&gt;Understanding JavaScript: Closures — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b&#34;&gt;How to use JavaScript closures with confidence — Léna Faure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example&#34;&gt;JavaScript closures by example — tyler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-closures-and-scope-3784c75b9290&#34;&gt;JavaScript — Closures and Scope — Alex Aitken&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7&#34;&gt;Discover the power of closures in JavaScript — Cristi Salcescu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://reallifejs.com/the-meat/getting-closure/&#34;&gt;Getting Closure — RealLifeJS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ritik_dev_js/what-the-hack-is-closure-currying-and-iife-in-javascript-32m9&#34;&gt;Closure, Currying and IIFE in JavaScript — Ritik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda&#34;&gt;Understanding Closures in JavaScript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e&#34;&gt;A basic guide to Closures in JavaScript — Parathan Thiyagalingam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/steelvoltage/closures-using-memoization-3597&#34;&gt;Closures: Using Memoization — Brian Barbour&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232&#34;&gt;A Brief Introduction to Closures and Lexical Scoping in JavaScript — Ashutosh K Singh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/stereobooster/demystify-closures-5g42&#34;&gt;Demystify Closures — stereobooster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/boywithsilverwings/scopes-and-closures-javascript-concepts-4dfj&#34;&gt;Scopes and Closures - JavaScript Concepts — Agney Menon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/mattpopovich/understanding-closures-in-javascript-3k0d&#34;&gt;Understanding Closures in JavaScript — Matt Popovich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://whatthefuck.is/closure&#34;&gt;whatthefuck.is · A Closure - Dan Abramov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/brandonleboeuf/closure-in-javascript-49n7&#34;&gt;Closures in JavaScript can... - Brandon LeBoeuf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XTAzsODSCsM&#34;&gt;JavaScript The Hard Parts: Closure, Scope &amp;amp; Execution Context - Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=71AtaJpJHw0&#34;&gt;Javascript Closure — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=CQqwU2Ixu-U&#34;&gt;Closures — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=-xqJo5VRP4A&#34;&gt;Closures in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=yiEeiMN2Khs&#34;&gt;JavaScript Closures 101: What is a closure? — JavaScript Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=1JsJx1x35c0&#34;&gt;Closures — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=-rLrGAXK8WE&#34;&gt;JavaScript Closures — CodeWorkr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qikxEIxsXco&#34;&gt;Closures in JS - Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://youtu.be/xa8lhVwQBw4&#34;&gt;CLOSURES en JavaScript: Qué son y cómo funcionan - Carlos Azaustre&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;22. High Order Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://eloquentjavascript.net/05_higher_order.html&#34;&gt;Eloquent JavaScript, 3rd Edition: Ch. 5 - Higher-order Functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/higher-order-functions-javascript/&#34;&gt;Higher-Order Functions in JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528&#34;&gt;Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code — Guido Schmitz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a&#34;&gt;First-class and Higher Order Functions: Effective Functional JavaScript — Hugo Di Francesco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.lullabot.com/articles/higher-order-functions-in-javascript&#34;&gt;Higher Order Functions in JavaScript — John Hannah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/pedroapfilho/high-order-functions&#34;&gt;Just a reminder on how to use high order functions — Pedro Filho&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad&#34;&gt;Understanding Higher-Order Functions in JavaScript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/nuel_ikwuoma/higher-order-functions-a-pragmatic-approach-51fb&#34;&gt;Higher Order Functions - A pragmatic approach — emmanuel ikwuoma&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=rRgD1yVwIvE&#34;&gt;JavaScript Higher Order Functions &amp;amp; Arrays — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=BMUiFMZr7vk&#34;&gt;Higher Order Functions — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=dTlpYnmBW9I&#34;&gt;Higher Order Functions in Javascript — Raja Yogan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=GYRMNp1SKXA&#34;&gt;Higher Order Iterators in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=H4awPsyugS0&#34;&gt;Higher Order Functions in JavaScript — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=7E8ctomPQJw&#34;&gt;Part 1: An Introduction to Callbacks and Higher Order Functions - Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=28MXziDZkE4&#34;&gt;Part 2: Understanding Why We Need Higher Order Functions - Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=HkWxvB1RJq0&#34;&gt;Higher-Order Functions ft. Functional Programming - Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;23. Recursion&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f&#34;&gt;Recursion in JavaScript — Kevin Ennis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03&#34;&gt;Understanding Recursion in JavaScript — Zak Frisch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea&#34;&gt;Learn and Understand Recursion in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/recursion-functional-javascript/&#34;&gt;Recursion in Functional JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/programming-with-js-recursion-31371e2bf808&#34;&gt;Programming with JS: Recursion — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/simov/anonymous-recursion-in-javascript&#34;&gt;Anonymous Recursion in JavaScript — simo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/&#34;&gt;Recursion, iteration and tail calls in JS — loverajoel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b&#34;&gt;Intro to Recursion — Brad Newman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/datadriveninvestor/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3&#34;&gt;Accio Recursion!: Your New Favorite JavaScript Spell — Leanne Cabey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/christinamcmahon/recursion-explained-with-examples-4k1m&#34;&gt;Recursion Explained (with Examples) — Christina&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=VtG0WAUvq2w&#34;&gt;Recursion In JavaScript — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=k7-N8R0-KY4&#34;&gt;Recursion — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=vLhHyGTkjCs&#34;&gt;Recursion and Recursive Functions — Hexlet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=kGXVsd8pBLw&#34;&gt;Recursion: Recursion() — JS Monthly — Lucas da Costa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=uyjsR9eNTIw&#34;&gt;Recursive Function in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Mv9NEXX1VHc&#34;&gt;What on Earth is Recursion? — Computerphile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9NO5dXSlbv8&#34;&gt;Javascript Tutorial 34: Introduction To Recursion — codedamn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=FmiQr4nfoPQ&#34;&gt;Recursion, Iteration, and JavaScript: A Love Story | JSHeroes 2018 — Anjana Vakil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=lMBVwYrmFZQ&amp;amp;ab_channel=ColtSteele&#34;&gt;Recursion crash course - Colt Steele&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;24. Collections and Generators&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator&#34;&gt;Generator — MDN web docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hacks.mozilla.org/2015/06/es6-in-depth-collections/&#34;&gt;ES6 In Depth: Collections — Jason Orendorff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/&#34;&gt;ES6 Collections: Using Map, Set, WeakMap, WeakSet — Kyle Pennell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth&#34;&gt;ES6 WeakMaps, Sets, and WeakSets in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/map-set-weakmap-weakset&#34;&gt;Map, Set, WeakMap and WeakSet — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk&#34;&gt;Maps in ES6 - A Quick Guide — Ben Mildren&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/es6-set-vs-array-what-and-when-efc055655e1a&#34;&gt;ES6 — Set vs Array — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373&#34;&gt;ES6 — Map vs Object — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.deadcoderising.com/es6-working-with-sets-in-javascript/&#34;&gt;ES6: Working with Sets in JavaScript — Dead Code Rising&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b&#34;&gt;Array vs Set vs Map vs Object — Real-time use cases in Javascript (ES6/ES7) — Rajesh Babu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6&#34;&gt;How to create an array of unique values in JavaScript using Sets — Claire Parker-Jones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e&#34;&gt;What You Should Know About ES6 Maps — Just Chris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-maps-in-depth&#34;&gt;ES6 Maps in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e&#34;&gt;What are JavaScript Generators and how to use them — Vladislav Stepanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5&#34;&gt;Understanding JavaScript Generators With Examples — Arfat Salman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://davidwalsh.name/es6-generators&#34;&gt;The Basics of ES6 Generators — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/kallaugher/an-introduction-to-javascript-generators-1224&#34;&gt;An Introduction to JavaScript Generators — Alice Kallaugher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ycohYSx5h9w&#34;&gt;JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=m4abICrldQI&#34;&gt;The Differences between ES6 Maps and Sets — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=QO07THdLWQo&#34;&gt;Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators — LearnCode.academy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;25. Promises&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/javascript-promises-for-dummies&#34;&gt;JavaScript Promises for Dummies ― Jecelyn Yeen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1&#34;&gt;Understanding promises in JavaScript — Gokul N K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261&#34;&gt;Master the JavaScript Interview: What is a Promise? — Eric Elliott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/overview-javascript-promises/&#34;&gt;An Overview of JavaScript Promises — Sandeep Panda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de&#34;&gt;How to use Promises in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51&#34;&gt;Implementing Promises In JavaScript — Maciej Cieslar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138&#34;&gt;JavaScript: Promises explained with simple real life analogies — Shruti Kapoor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://exploringjs.com/es6/ch_promises.html&#34;&gt;Promises for Asynchronous Programming — Exploring JS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/&#34;&gt;JavaScript Promises Explained By Gambling At A Casino — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918&#34;&gt;ES6 Promises: Patterns and Anti-Patterns — Bobby Brennan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a&#34;&gt;A Simple Guide to ES6 Promises — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/the-es6-promises-87a979ab27e4&#34;&gt;The ES6 Promises — Manoj Singh Negi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-promises-in-depth&#34;&gt;ES6 Promises in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3&#34;&gt;Playing with Javascript Promises: A Comprehensive Approach — Rajesh Babu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8&#34;&gt;How to Write a JavaScript Promise — Brandon Wozniewicz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@andrewly07/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c&#34;&gt;A Coding Writer’s Guide: An Introduction To ES6 Promises — Andrew Ly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/itnext/reverse-engineering-understand-promises-1jfc&#34;&gt;Understanding Promises in JavaScript — Chris Noring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/zellwk/converting-callbacks-to-promises-nhn&#34;&gt;Converting callbacks to promises — Zell Liew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa&#34;&gt;JavaScript Promises: Zero To Hero Plus Cheat Sheet — Joshua Saunders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/boywithsilverwings/promises-javascript-concepts-293c&#34;&gt;Promises - JavaScript concepts — Agney Menon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/iggredible/javascript-promise-101-3idl&#34;&gt;Javascript &lt;code&gt;Promise&lt;/code&gt; 101 — Igor Irianto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/sunnysingh/simplify-javascript-promises-4djb&#34;&gt;Simplify JavaScript Promises — Sunny Singh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/the-low-down-on-promises-af4a96bbb95f&#34;&gt;The Lowdown on Promises — Aphinya Dechalert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke&#34;&gt;JavaScript Visualized: Promises &amp;amp; Async/Await — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/peterklingelhofer/promises-in-javascript-3h5k&#34;&gt;Promises in JavaScript — Peter Klingelhofer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/somedood/best-practices-for-es6-promises-36da&#34;&gt;Best Practices for ES6 Promises — Basti Ortiz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/zurvin/lo-que-debemos-saber-de-escript-2020-5fc61da5e4cd&#34;&gt;Lo que debemos saber de EScript 2020 — Kike Sanchez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/promise-basics&#34;&gt;Promise Basics - javascript.info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=vQ3MoXnKfuQ&#34;&gt;Let&#39;s Learn ES6 - Promises — Ryan Christiani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XJEHuBZQ5dU&#34;&gt;JavaScript ES6 / ES2015 Promises — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=2d7s3spWAzo&#34;&gt;Promises — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=f8IgdnYIwOU&#34;&gt;Error Handling Promises in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=QO4NXhWo_NM&#34;&gt;Promises Part 1 - Topics of JavaScript/ES6 — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=RvYYCGs45L4&#34;&gt;JavaScript Promise in 100 Seconds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;26. async/await&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/async-await&#34;&gt;async/await — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://eloquentjavascript.net/11_async.html&#34;&gt;Eloquent JavaScript, 3rd Edition: Ch. 11 - Asynchronous Programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://exploringjs.com/es6/ch_async.html&#34;&gt;Exploring JS: Asynchronous Programming&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c&#34;&gt;Understanding async/await in Javascript — Gokul N K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/asynchronous-javascript-using-async-await&#34;&gt;Asynchronous Javascript using async/await — Joy Warugu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flaviocopes.com/javascript-async-await/&#34;&gt;Modern Asynchronous JavaScript with async/await — Flavio Copes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial&#34;&gt;Asynchronous JavaScript: From Callback Hell to Async and Await — Demir Selmanovic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a&#34;&gt;Javascript — ES8 Introducing async/await Functions — Ben Garrison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c&#34;&gt;How to escape async/await hell — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/understanding-javascript-async-await&#34;&gt;Understanding JavaScript’s async await — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://techbrij.com/javascript-async-await-parallel-sequence&#34;&gt;JavaScript Async/Await: Serial, Parallel and Complex Flow — TechBrij&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.pusher.com/promises-async-await/&#34;&gt;From JavaScript Promises to Async/Await: why bother? — Chris Nwamba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/flow-control-callbacks-promises-async-await/&#34;&gt;Flow Control in Modern JS: Callbacks to Promises to Async/Await — Craig Buckler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba&#34;&gt;JavaScript: Promises and Why Async/Await Wins the Battle — Nick Parsons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda&#34;&gt;How to improve your asynchronous Javascript code with async and await — Indrek Lasn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6&#34;&gt;Making Fetches Easy With Async Await — Mickey Sheridan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9&#34;&gt;7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises — Mostafa Gaafar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b&#34;&gt;Asynchronous Operations in JavaScript — Jscrambler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/should-i-use-promises-or-async-await-126ab5c98789&#34;&gt;JavaScript: Promises or async-await — Gokul N K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/zhiyuanamos/async-await-from-zero-to-hero-a22&#34;&gt;Async / Await: From Zero to Hero — Zhi Yuan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke&#34;&gt;JavaScript Visualized: Promises &amp;amp; Async/Await — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&#34;&gt;Making asynchronous programming easier with async and await — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/&#34;&gt;JavaScript Async/Await Tutorial – Learn Callbacks, Promises, and Async/Await in JS by Making Ice Cream&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9YkUCxvaLEk&#34;&gt;Async + Await — Wes Bos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=SrNQS8J67zc&#34;&gt;Asynchrony: Under the Hood — Shelley Vohr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=568g8hxJJp4&amp;amp;index=3&amp;amp;list=PL0zVEGEvSaeHJppaRLrqjeTPnCH6&#34;&gt;async/await in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XO77Fib9tSI&amp;amp;index=3&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&#34;&gt;async/await Part 1 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=chavThlNz3s&amp;amp;index=4&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&#34;&gt;async/await Part 2 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=krAYA4rvbdA&#34;&gt;Complete Guide to JS Async &amp;amp; Await ES2017/ES8 — Colt Steele&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=_9vgd9XKlDQ&#34;&gt;Tips for using async/await in JavaScript — James Q Quick&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;27. Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c&#34;&gt;Data Structures in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb&#34;&gt;Algorithms and Data Structures in JavaScript — Oleksii Trekhleb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays&#34;&gt;Data Structures: Objects and Arrays ― Chris Nwamba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/&#34;&gt;Data structures in JavaScript — Benoit Vallon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d&#34;&gt;Playing with Data Structures in Javascript — Anish K.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9&#34;&gt;The Little Guide of Queue in JavaScript — Germán Cutraro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/barretlee/algorithms&#34;&gt;All algorithms writing with JavaScript in the book &#39;Algorithms Fourth Edition&#39;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/nzakas/computer-science-in-javascript&#34;&gt;Collection of classic computer science paradigms in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/jamiebuilds/itsy-bitsy-data-structures&#34;&gt;All the things you didn&#39;t know you wanted to know about data structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/miku86/series/3259&#34;&gt;JavaScript Data Structures: 40 Part Series — miku86&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/data-structures-understanding-graphs-82509d35e6b5&#34;&gt;Data Structures: Understanding Graphs — Rachel Hawa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/freddieduffield/data-structures-two-ways-linked-list-2n61&#34;&gt;Data Structures Two Ways: Linked List (Pt 1) — Freddie Duffield&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/freddieduffield/data-structures-two-ways-linked-list-pt2-2i60&#34;&gt;Data Structures Two Ways: Linked List (Pt 2) — Freddie Duffield&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/amejiarosario/graph-data-structures-for-beginners-5edn&#34;&gt;Graph Data Structures Explained in JavaScript — Adrian Mejia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=H_EBPZgiAas&amp;amp;list=PLDmvslp_VR0zYUSth_8O69p4_cmvZEgLa&#34;&gt;Algorithms In Javascript | Ace Your Interview — Eduonix Learning Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Gj5qBheGOEo&amp;amp;list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ&#34;&gt;Data Structures and Algorithms in JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Ymh_AurrMbA&#34;&gt;Learning JavaScript Data Structures and Algorithms: Sorting — Packt Video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=41GSinwoMYA&amp;amp;ab_channel=Academind&#34;&gt;JavaScript Data Structures: Getting Started — Academind&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;28. Expensive Operation and Big O Notation&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b&#34;&gt;Big O Notation in Javascript — César Antón Dorantes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b&#34;&gt;Time Complexity/Big O Notation — Tim Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051&#34;&gt;Big O in JavaScript — Gabriela Medina&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html&#34;&gt;Big O Search Algorithms in JavaScript — Bradley Braithwaite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.jenniferbland.com/time-complexity-analysis-in-javascript/&#34;&gt;Time Complexity Analysis in JavaScript — Jennifer Bland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c&#34;&gt;Algorithms in plain English: time complexity and Big-O Notation — Michael Olorunnisola&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lofiandcode/an-introduction-to-big-o-notation-210o&#34;&gt;An Introduction to Big O Notation — Joseph Trettevik&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=HgA5VOFan5E&#34;&gt;JavaScript: Intro to Big O Notation and Function Runtime — Eric Traub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=KatlvCFHPRo&#34;&gt;Essential Big O for JavaScript Developers — Dave Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ALl86xJiTD8&#34;&gt;Big O Notation - Time Complexity Analysis — WebTunings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;29. Algorithms&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/Crizstian/data-structure-and-algorithms-with-ES6&#34;&gt;Data Structures and Algorithms using ES6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms&#34;&gt;Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.thatjsdude.com/interview/js1.html&#34;&gt;JS: Interview Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038&#34;&gt;Algorithms in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158&#34;&gt;JavaScript Objects, Square Brackets and Algorithms — Dmitri Grabov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/felipernb/algorithms.js&#34;&gt;Atwood&#39;s Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/yangshun/lago&#34;&gt;Data Structures and Algorithms library in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/idosela/algorithms-in-javascript&#34;&gt;Collection of computer science algorithms and data structures written in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/trekhleb/algorithms-and-data-structures-in-javascript-49i3&#34;&gt;Algorithms and Data Structures in JavaScript — Oleksii Trekhleb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;30. Inheritance, Polymorphism and Code Reuse&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance&#34;&gt;Inheritance in JavaScript — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/class-inheritance&#34;&gt;Class inheritance, super — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/inheritance-in-javascript-21d2b82ffa6f&#34;&gt;Inheritance in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/simple-inheritance-javascript/&#34;&gt;Simple Inheritance with JavaScript — David Catuhe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-inheritance-25fe61ab9f85&#34;&gt;JavaScript — Inheritance, delegation patterns and Object linking — NC Patro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/&#34;&gt;Object Oriented JavaScript: Polymorphism with examples — Knoldus Blogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/yld-engineering-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2&#34;&gt;Program Like Proteus — A beginner’s guide to polymorphism in Javascript — Sam Galson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/&#34;&gt;Object-oriented JavaScript: A Deep Dive into ES6 Classes — Jeff Mott&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=yXlFR81tDBM&#34;&gt;Inheritance in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=RBLIm5LMrmc&#34;&gt;JavaScript ES6 Classes and Inheritance — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=zdovG9cuEBA&#34;&gt;Polymorphism in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;31. Design Patterns&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&#34;&gt;Learning JavaScript Design Patterns — Addy Osmani&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know&#34;&gt;4 JavaScript Design Patterns You Should Know — Devan Patel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15&#34;&gt;JavaScript Design Patterns – Beginner&#39;s Guide to Mobile Web Development — Soumyajit Pathak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/javascript-design-patterns-ed9d4c144c81&#34;&gt;JavaScript Design Patterns — Akash Pal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://seesparkbox.com/foundry/javascript_design_patterns&#34;&gt;Javascript Design Patterns: What They Are &amp;amp; How To Use Them — Patrick Simpson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd&#34;&gt;JavaScript Design Patterns: Understanding Design Patterns in JavaScript - Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/fbeline/Design-Patterns-JS&#34;&gt;All the 23 (GoF) design patterns implemented in Javascript — Felipe Beline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8&#34;&gt;The Power of the Module Pattern in JavaScript — jsmanifest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e&#34;&gt;Design Patterns for Developers using JavaScript pt. I — Oliver Mensah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39&#34;&gt;Design Patterns for Developers using JavaScript pt. II — Oliver Mensah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca&#34;&gt;Design patterns in modern JavaScript development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd&#34;&gt;Understanding Design Patterns: Iterator using Dev.to and Medium social networks! — Carlos Caballero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p&#34;&gt;JavaScript Design Patterns - Factory Pattern — KristijanFištrek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/javascript-design-pattern-module-pattern-555737eccecd&#34;&gt;JavaScript Design Pattern — Module Pattern - Factory Pattern — Moon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/design-patterns-null-object-5ee839e37892&#34;&gt;Design Patterns: Null Object - Carlos Caballero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/francescoxx/strategy-pattern-5oh&#34;&gt;Strategy Pattern - Francesco Ciulla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/francescoxx/adapter-pattern-5bjk&#34;&gt;Adapter Pattern - Francesco Ciulla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/jsmanifest/the-power-of-composite-pattern-in-javascript-2732&#34;&gt;The Power of Composite Pattern in JavaScript - jsmanifest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/bytebodger/in-defense-of-defensive-programming-k45&#34;&gt;In Defense of Defensive Programming - Adam Nathaniel Davis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.udacity.com/course/javascript-design-patterns--ud989&#34;&gt;JavaScript Design Patterns — Udacity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=hO7mzO83N1Q&#34;&gt;JavaScript Patterns for 2017 — Scott Allen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;32. Partial Applications, Currying, Compose and Pipe&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/getify/Functional-Light-JS/raw/master/manuscript/ch3.md&#34;&gt;Functional-Light JavaScript: Ch. 3 - Managing Function Inputs — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj&#34;&gt;Use function composition in JavaScript — Rémi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400&#34;&gt;Currying in JavaScript ES6 — Adam Bene&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b&#34;&gt;Composition and Currying Elegance in JavaScript — Pragyan Das&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10&#34;&gt;Functional JavaScript: Function Composition For Every Day Use — Joel Thoms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f&#34;&gt;Functional Composition: compose() and pipe() — Anton Paras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://busypeoples.github.io/post/functional-composing-javascript/&#34;&gt;Why The Hipsters Compose Everything: Functional Composing In JavaScript — A. Sharif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/&#34;&gt;A Gentle Introduction to Functional JavaScript pt III: Functions for making functions — James Sinclair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/&#34;&gt;Curry And Compose (why you should be using something like ramda in your code) — jsanchesleao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://vanslaars.io/post/create-pipe-function/&#34;&gt;Function Composition in JavaScript with Pipe — Andy Van Slaars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.telerik.com/featured/practical-functional-javascript-ramda/&#34;&gt;Practical Functional JavaScript with Ramda — Andrew D&#39;Amelio, Yuri Takhteyev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574&#34;&gt;The beauty in Partial Application, Currying, and Function Composition — Joel Thoms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8&#34;&gt;Curry or Partial Application? — Eric Elliott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://benalman.com/news/2012/09/partial-application-in-javascript/&#34;&gt;Partial Application in JavaScript — Ben Alman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/partial-application-of-functions-dbe7d9b80760&#34;&gt;Partial Application of Functions — Functional Reactive Ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-currying-vs-partial-application-4db5b2442be8&#34;&gt;Currying vs Partial Application — Deepak Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://raganwald.com/2015/04/01/partial-application.html&#34;&gt;Partial Application in ECMAScript 2015 — Ragan Wald&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://joecortopassi.com/articles/functional-composition-in-javascript/&#34;&gt;Functional Composition in Javascript — Joe Cortopassi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536&#34;&gt;So You Want to be a Functional Programmer pt. I — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a&#34;&gt;So You Want to be a Functional Programmer pt. II — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7&#34;&gt;So You Want to be a Functional Programmer pt. III — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49&#34;&gt;So You Want to be a Functional Programmer pt. IV — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a&#34;&gt;So You Want to be a Functional Programmer pt. V — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84&#34;&gt;An introduction to the basic principles of Functional Programming — TK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa&#34;&gt;Concepts of Functional Programming in Javascript — TK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064&#34;&gt;An Introduction to Functional Programming Style in JavaScript — JavaScript Teacher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71&#34;&gt;A practical guide to writing more functional JavaScript — Nadeesha Cabral&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj&#34;&gt;A simple explanation of functional pipe in JavaScript — Ben Lesh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Wl2ejJOqHUU&#34;&gt;Compose vs Pipe: Functional Programming in JavaScript — Chyld Studios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=jigHxo9YR30&#34;&gt;JavaScript Functional Programing: Compose — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=mth5WpEc4Qs&#34;&gt;Function Composition - Functional JavaScript — NWCalvank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Uam37AlzPYw&#34;&gt;JavaScript Function Composition Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=VGB9HbL1GHk&#34;&gt;Let&#39;s code with function composition — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=DzLkRsUN2vE&#34;&gt;Partial Application vs. Currying — NWCalvank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=jkebgHEcvac&#34;&gt;JavaScript Partial Application — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=75W8UPQ5l7k&amp;amp;t=261s&#34;&gt;call, apply and bind method in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;33. Clean Code&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/clean-coding-for-beginners/&#34;&gt;Clean Code Explained – A Practical Introduction to Clean Coding for Beginners — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;Clean Code concepts adapted for JavaScript — Ryan McDermott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.atyantik.com/clean-code-practices-javascript/&#34;&gt;Clean Code Practice: How to write clean code — Tirth Bodawala&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&#34;&gt;JavaScript Clean Coding Best Practices — András Tóth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@kevin_peters/function-parameters-in-javascript-clean-code-4caac109159b&#34;&gt;Function parameters in JavaScript Clean Code — Kevin Peters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/keeping-your-code-clean-d30bcffd1a10&#34;&gt;Keeping your code clean — Samuel James&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/modern-javascript-best-practices/&#34;&gt;Best Practices for Using Modern JavaScript Syntax — M. David Green&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/cross-js/cross-js&#34;&gt;best practices for cross node/web development - Jimmy Wärting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ganderzz/on-writing-clean-code-57cm&#34;&gt;Writing Clean Code - Dylan Paulus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/nityeshaga/writing-clean-code-and-the-practice-of-programming-actionable-advice-for-beginners-5f0k&#34;&gt;Writing Clean Code and The Practice of Programming - Nityesh Agarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/d_ir/clean-code-dirty-code-human-code-6nm&#34;&gt;Clean code, dirty code, human code - Daniel Irvine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/taillogs/practical-ways-to-write-better-javascript-26d4&#34;&gt;Practical Ways to Write Better JavaScript - Ryland G&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/swlh/the-must-know-clean-code-principles-1371a14a2e75&#34;&gt;The Must-Know Clean Code Principles - Kesk on Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/&#34;&gt;The Clean Code Book - Robert C Martin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Mus_vwhTCq0&#34;&gt;JavaScript Pro Tips - Code This, NOT That&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=b9c5GmmS7ks&amp;amp;list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh&amp;amp;index=1&#34;&gt;Clean Code playlist - Beau teaches&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ryanmcdermott/clean-code-javascript</title>
    <updated>2022-11-13T01:46:39Z</updated>
    <id>tag:github.com,2022-11-13:/ryanmcdermott/clean-code-javascript</id>
    <link href="https://github.com/ryanmcdermott/clean-code-javascript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛁 Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-javascript&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid&#34;&gt;SOLID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.osnews.com/images/comics/wtfm.jpg&#34; alt=&#34;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for JavaScript. This is not a style guide. It&#39;s a guide to producing &lt;a href=&#34;https://github.com/ryanmcdermott/3rs-of-software-architecture&#34;&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.&lt;/p&gt; &#xA;&lt;p&gt;One more thing: knowing these won&#39;t immediately make you a better software developer, and working with them for many years doesn&#39;t mean you won&#39;t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don&#39;t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const yyyymmdstr = moment().format(&#34;YYYY/MM/DD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const currentDate = moment().format(&#34;YYYY/MM/DD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getUserInfo();&#xA;getClientData();&#xA;getCustomerRecord();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&#34;https://github.com/danielstjules/buddy.js&#34;&gt;buddy.js&lt;/a&gt; and &lt;a href=&#34;https://github.com/eslint/eslint/raw/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md&#34;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// What the heck is 86400000 for?&#xA;setTimeout(blastOff, 86400000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Declare them as capitalized named constants.&#xA;const MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;&#xA;&#xA;setTimeout(blastOff, MILLISECONDS_PER_DAY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;&#xA;saveCityZipCode(&#xA;  address.match(cityZipCodeRegex)[1],&#xA;  address.match(cityZipCodeRegex)[2]&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;&#xA;const [_, city, zipCode] = address.match(cityZipCodeRegex) || [];&#xA;saveCityZipCode(city, zipCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const locations = [&#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34;];&#xA;locations.forEach(l =&amp;gt; {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  // Wait, what is `l` for again?&#xA;  dispatch(l);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const locations = [&#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34;];&#xA;locations.forEach(location =&amp;gt; {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  dispatch(location);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Car = {&#xA;  carMake: &#34;Honda&#34;,&#xA;  carModel: &#34;Accord&#34;,&#xA;  carColor: &#34;Blue&#34;&#xA;};&#xA;&#xA;function paintCar(car, color) {&#xA;  car.carColor = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Car = {&#xA;  make: &#34;Honda&#34;,&#xA;  model: &#34;Accord&#34;,&#xA;  color: &#34;Blue&#34;&#xA;};&#xA;&#xA;function paintCar(car, color) {&#xA;  car.color = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use default parameters instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;Default parameters are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for &lt;code&gt;undefined&lt;/code&gt; arguments. Other &#34;falsy&#34; values such as &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&#34;&#34;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, will not be replaced by a default value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMicrobrewery(name) {&#xA;  const breweryName = name || &#34;Hipster Brew Co.&#34;;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMicrobrewery(name = &#34;Hipster Brew Co.&#34;) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.&lt;/p&gt; &#xA;&lt;p&gt;To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When someone looks at the function signature, it&#39;s immediately clear what properties are being used.&lt;/li&gt; &#xA; &lt;li&gt;It can be used to simulate named parameters.&lt;/li&gt; &#xA; &lt;li&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/li&gt; &#xA; &lt;li&gt;Linters can warn you about unused properties, which would be impossible without destructuring.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMenu(title, body, buttonText, cancellable) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu(&#34;Foo&#34;, &#34;Bar&#34;, &#34;Baz&#34;, true);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMenu({ title, body, buttonText, cancellable }) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({&#xA;  title: &#34;Foo&#34;,&#xA;  body: &#34;Bar&#34;,&#xA;  buttonText: &#34;Baz&#34;,&#xA;  cancellable: true&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should do one thing&lt;/h3&gt; &#xA;&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function emailClients(clients) {&#xA;  clients.forEach(client =&amp;gt; {&#xA;    const clientRecord = database.lookup(client);&#xA;    if (clientRecord.isActive()) {&#xA;      email(client);&#xA;    }&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function emailActiveClients(clients) {&#xA;  clients.filter(isActiveClient).forEach(email);&#xA;}&#xA;&#xA;function isActiveClient(client) {&#xA;  const clientRecord = database.lookup(client);&#xA;  return clientRecord.isActive();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function addToDate(date, month) {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;&#xA;// It&#39;s hard to tell from the function name what is added&#xA;addToDate(date, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function addMonthToDate(month, date) {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;addMonthToDate(1, date);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function parseBetterJSAlternative(code) {&#xA;  const REGEXES = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  const statements = code.split(&#34; &#34;);&#xA;  const tokens = [];&#xA;  REGEXES.forEach(REGEX =&amp;gt; {&#xA;    statements.forEach(statement =&amp;gt; {&#xA;      // ...&#xA;    });&#xA;  });&#xA;&#xA;  const ast = [];&#xA;  tokens.forEach(token =&amp;gt; {&#xA;    // lex...&#xA;  });&#xA;&#xA;  ast.forEach(node =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function parseBetterJSAlternative(code) {&#xA;  const tokens = tokenize(code);&#xA;  const syntaxTree = parse(tokens);&#xA;  syntaxTree.forEach(node =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&#xA;function tokenize(code) {&#xA;  const REGEXES = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  const statements = code.split(&#34; &#34;);&#xA;  const tokens = [];&#xA;  REGEXES.forEach(REGEX =&amp;gt; {&#xA;    statements.forEach(statement =&amp;gt; {&#xA;      tokens.push(/* ... */);&#xA;    });&#xA;  });&#xA;&#xA;  return tokens;&#xA;}&#xA;&#xA;function parse(tokens) {&#xA;  const syntaxTree = [];&#xA;  tokens.forEach(token =&amp;gt; {&#xA;    syntaxTree.push(/* ... */);&#xA;  });&#xA;&#xA;  return syntaxTree;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove duplicate code&lt;/h3&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function showDeveloperList(developers) {&#xA;  developers.forEach(developer =&amp;gt; {&#xA;    const expectedSalary = developer.calculateExpectedSalary();&#xA;    const experience = developer.getExperience();&#xA;    const githubLink = developer.getGithubLink();&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      githubLink&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&#xA;function showManagerList(managers) {&#xA;  managers.forEach(manager =&amp;gt; {&#xA;    const expectedSalary = manager.calculateExpectedSalary();&#xA;    const experience = manager.getExperience();&#xA;    const portfolio = manager.getMBAProjects();&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      portfolio&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function showEmployeeList(employees) {&#xA;  employees.forEach(employee =&amp;gt; {&#xA;    const expectedSalary = employee.calculateExpectedSalary();&#xA;    const experience = employee.getExperience();&#xA;&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience&#xA;    };&#xA;&#xA;    switch (employee.type) {&#xA;      case &#34;manager&#34;:&#xA;        data.portfolio = employee.getMBAProjects();&#xA;        break;&#xA;      case &#34;developer&#34;:&#xA;        data.githubLink = employee.getGithubLink();&#xA;        break;&#xA;    }&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Set default objects with Object.assign&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const menuConfig = {&#xA;  title: null,&#xA;  body: &#34;Bar&#34;,&#xA;  buttonText: null,&#xA;  cancellable: true&#xA;};&#xA;&#xA;function createMenu(config) {&#xA;  config.title = config.title || &#34;Foo&#34;;&#xA;  config.body = config.body || &#34;Bar&#34;;&#xA;  config.buttonText = config.buttonText || &#34;Baz&#34;;&#xA;  config.cancellable =&#xA;    config.cancellable !== undefined ? config.cancellable : true;&#xA;}&#xA;&#xA;createMenu(menuConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const menuConfig = {&#xA;  title: &#34;Order&#34;,&#xA;  // User did not include &#39;body&#39; key&#xA;  buttonText: &#34;Send&#34;,&#xA;  cancellable: true&#xA;};&#xA;&#xA;function createMenu(config) {&#xA;  let finalConfig = Object.assign(&#xA;    {&#xA;      title: &#34;Foo&#34;,&#xA;      body: &#34;Bar&#34;,&#xA;      buttonText: &#34;Baz&#34;,&#xA;      cancellable: true&#xA;    },&#xA;    config&#xA;  );&#xA;  return finalConfig&#xA;  // config now equals: {title: &#34;Order&#34;, body: &#34;Bar&#34;, buttonText: &#34;Send&#34;, cancellable: true}&#xA;  // ...&#xA;}&#xA;&#xA;createMenu(menuConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createFile(name, temp) {&#xA;  if (temp) {&#xA;    fs.create(`./temp/${name}`);&#xA;  } else {&#xA;    fs.create(name);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createFile(name) {&#xA;  fs.create(name);&#xA;}&#xA;&#xA;function createTempFile(name) {&#xA;  createFile(`./temp/${name}`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;let name = &#34;Ryan McDermott&#34;;&#xA;&#xA;function splitIntoFirstAndLastName() {&#xA;  name = name.split(&#34; &#34;);&#xA;}&#xA;&#xA;splitIntoFirstAndLastName();&#xA;&#xA;console.log(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function splitIntoFirstAndLastName(name) {&#xA;  return name.split(&#34; &#34;);&#xA;}&#xA;&#xA;const name = &#34;Ryan McDermott&#34;;&#xA;const newName = splitIntoFirstAndLastName(name);&#xA;&#xA;console.log(name); // &#39;Ryan McDermott&#39;;&#xA;console.log(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it&#39;s important to handle them carefully when they&#39;re passed as parameters to a function. A JavaScript function can change an object&#39;s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Suppose there&#39;s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let&#39;s imagine a bad situation:&lt;/p&gt; &#xA;&lt;p&gt;The user clicks the &#34;Purchase&#34; button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an &#34;Add to Cart&#34; button on an item they don&#39;t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; &#xA;&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn&#39;t be affected by the changes.&lt;/p&gt; &#xA;&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn&#39;t a big issue in practice because there are &lt;a href=&#34;https://facebook.github.io/immutable-js/&#34;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const addItemToCart = (cart, item) =&amp;gt; {&#xA;  cart.push({ item, date: Date.now() });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const addItemToCart = (cart, item) =&amp;gt; {&#xA;  return [...cart, { item, date: Date.now() }];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; &#xA;&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to extend JavaScript&#39;s native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Array.prototype.diff = function diff(comparisonArray) {&#xA;  const hash = new Set(comparisonArray);&#xA;  return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class SuperArray extends Array {&#xA;  diff(comparisonArray) {&#xA;    const hash = new Set(comparisonArray);&#xA;    return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript isn&#39;t a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const programmerOutput = [&#xA;  {&#xA;    name: &#34;Uncle Bobby&#34;,&#xA;    linesOfCode: 500&#xA;  },&#xA;  {&#xA;    name: &#34;Suzie Q&#34;,&#xA;    linesOfCode: 1500&#xA;  },&#xA;  {&#xA;    name: &#34;Jimmy Gosling&#34;,&#xA;    linesOfCode: 150&#xA;  },&#xA;  {&#xA;    name: &#34;Gracie Hopper&#34;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;let totalOutput = 0;&#xA;&#xA;for (let i = 0; i &amp;lt; programmerOutput.length; i++) {&#xA;  totalOutput += programmerOutput[i].linesOfCode;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const programmerOutput = [&#xA;  {&#xA;    name: &#34;Uncle Bobby&#34;,&#xA;    linesOfCode: 500&#xA;  },&#xA;  {&#xA;    name: &#34;Suzie Q&#34;,&#xA;    linesOfCode: 1500&#xA;  },&#xA;  {&#xA;    name: &#34;Jimmy Gosling&#34;,&#xA;    linesOfCode: 150&#xA;  },&#xA;  {&#xA;    name: &#34;Gracie Hopper&#34;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;const totalOutput = programmerOutput.reduce(&#xA;  (totalLines, output) =&amp;gt; totalLines + output.linesOfCode,&#xA;  0&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (fsm.state === &#34;fetching&#34; &amp;amp;&amp;amp; isEmpty(listNode)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function shouldShowSpinner(fsm, listNode) {&#xA;  return fsm.state === &#34;fetching&#34; &amp;amp;&amp;amp; isEmpty(listNode);&#xA;}&#xA;&#xA;if (shouldShowSpinner(fsmInstance, listNodeInstance)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isDOMNodeNotPresent(node) {&#xA;  // ...&#xA;}&#xA;&#xA;if (!isDOMNodeNotPresent(node)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isDOMNodePresent(node) {&#xA;  // ...&#xA;}&#xA;&#xA;if (isDOMNodePresent(node)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    switch (this.type) {&#xA;      case &#34;777&#34;:&#xA;        return this.getMaxAltitude() - this.getPassengerCount();&#xA;      case &#34;Air Force One&#34;:&#xA;        return this.getMaxAltitude();&#xA;      case &#34;Cessna&#34;:&#xA;        return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Airplane {&#xA;  // ...&#xA;}&#xA;&#xA;class Boeing777 extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getPassengerCount();&#xA;  }&#xA;}&#xA;&#xA;class AirForceOne extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude();&#xA;  }&#xA;}&#xA;&#xA;class Cessna extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function travelToTexas(vehicle) {&#xA;  if (vehicle instanceof Bicycle) {&#xA;    vehicle.pedal(this.currentLocation, new Location(&#34;texas&#34;));&#xA;  } else if (vehicle instanceof Car) {&#xA;    vehicle.drive(this.currentLocation, new Location(&#34;texas&#34;));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function travelToTexas(vehicle) {&#xA;  vehicle.move(this.currentLocation, new Location(&#34;texas&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;If you are working with basic primitive values like strings and integers, and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux &#34;type-safety&#34; you get doesn&#39;t make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(val1, val2) {&#xA;  if (&#xA;    (typeof val1 === &#34;number&#34; &amp;amp;&amp;amp; typeof val2 === &#34;number&#34;) ||&#xA;    (typeof val1 === &#34;string&#34; &amp;amp;&amp;amp; typeof val2 === &#34;string&#34;)&#xA;  ) {&#xA;    return val1 + val2;&#xA;  }&#xA;&#xA;  throw new Error(&#34;Must be of type String or Number&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(val1, val2) {&#xA;  return val1 + val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t over-optimize&lt;/h3&gt; &#xA;&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&#34;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&#34;&gt;There are good resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// On old browsers, each iteration with uncached `list.length` would be costly&#xA;// because of `list.length` recomputation. In modern browsers, this is optimized.&#xA;for (let i = 0, len = list.length; i &amp;lt; len; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;for (let i = 0; i &amp;lt; list.length; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function oldRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;function newRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = newRequestModule;&#xA;inventoryTracker(&#34;apples&#34;, req, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function newRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = newRequestModule;&#xA;inventoryTracker(&#34;apples&#34;, req, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use getters and setters&lt;/h3&gt; &#xA;&lt;p&gt;Using getters and setters to access data on objects could be better than simply looking for a property on an object. &#34;Why?&#34; you might ask. Well, here&#39;s an unorganized list of reasons why:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA; &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA; &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA; &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeBankAccount() {&#xA;  // ...&#xA;&#xA;  return {&#xA;    balance: 0&#xA;    // ...&#xA;  };&#xA;}&#xA;&#xA;const account = makeBankAccount();&#xA;account.balance = 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeBankAccount() {&#xA;  // this one is private&#xA;  let balance = 0;&#xA;&#xA;  // a &#34;getter&#34;, made public via the returned object below&#xA;  function getBalance() {&#xA;    return balance;&#xA;  }&#xA;&#xA;  // a &#34;setter&#34;, made public via the returned object below&#xA;  function setBalance(amount) {&#xA;    // ... validate before updating the balance&#xA;    balance = amount;&#xA;  }&#xA;&#xA;  return {&#xA;    // ...&#xA;    getBalance,&#xA;    setBalance&#xA;  };&#xA;}&#xA;&#xA;const account = makeBankAccount();&#xA;account.setBalance(100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make objects have private members&lt;/h3&gt; &#xA;&lt;p&gt;This can be accomplished through closures (for ES5 and below).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Employee = function(name) {&#xA;  this.name = name;&#xA;};&#xA;&#xA;Employee.prototype.getName = function getName() {&#xA;  return this.name;&#xA;};&#xA;&#xA;const employee = new Employee(&#34;John Doe&#34;);&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;delete employee.name;&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeEmployee(name) {&#xA;  return {&#xA;    getName() {&#xA;      return name;&#xA;    }&#xA;  };&#xA;}&#xA;&#xA;const employee = makeEmployee(&#34;John Doe&#34;);&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;delete employee.name;&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Prefer ES2015/ES6 classes over ES5 plain functions&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Animal = function(age) {&#xA;  if (!(this instanceof Animal)) {&#xA;    throw new Error(&#34;Instantiate Animal with `new`&#34;);&#xA;  }&#xA;&#xA;  this.age = age;&#xA;};&#xA;&#xA;Animal.prototype.move = function move() {};&#xA;&#xA;const Mammal = function(age, furColor) {&#xA;  if (!(this instanceof Mammal)) {&#xA;    throw new Error(&#34;Instantiate Mammal with `new`&#34;);&#xA;  }&#xA;&#xA;  Animal.call(this, age);&#xA;  this.furColor = furColor;&#xA;};&#xA;&#xA;Mammal.prototype = Object.create(Animal.prototype);&#xA;Mammal.prototype.constructor = Mammal;&#xA;Mammal.prototype.liveBirth = function liveBirth() {};&#xA;&#xA;const Human = function(age, furColor, languageSpoken) {&#xA;  if (!(this instanceof Human)) {&#xA;    throw new Error(&#34;Instantiate Human with `new`&#34;);&#xA;  }&#xA;&#xA;  Mammal.call(this, age, furColor);&#xA;  this.languageSpoken = languageSpoken;&#xA;};&#xA;&#xA;Human.prototype = Object.create(Mammal.prototype);&#xA;Human.prototype.constructor = Human;&#xA;Human.prototype.speak = function speak() {};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Animal {&#xA;  constructor(age) {&#xA;    this.age = age;&#xA;  }&#xA;&#xA;  move() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&#xA;class Mammal extends Animal {&#xA;  constructor(age, furColor) {&#xA;    super(age);&#xA;    this.furColor = furColor;&#xA;  }&#xA;&#xA;  liveBirth() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&#xA;class Human extends Mammal {&#xA;  constructor(age, furColor, languageSpoken) {&#xA;    super(age, furColor);&#xA;    this.languageSpoken = languageSpoken;&#xA;  }&#xA;&#xA;  speak() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use method chaining&lt;/h3&gt; &#xA;&lt;p&gt;This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return &lt;code&gt;this&lt;/code&gt; at the end of every function, and you can chain further class methods onto it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Car {&#xA;  constructor(make, model, color) {&#xA;    this.make = make;&#xA;    this.model = model;&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  setMake(make) {&#xA;    this.make = make;&#xA;  }&#xA;&#xA;  setModel(model) {&#xA;    this.model = model;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  save() {&#xA;    console.log(this.make, this.model, this.color);&#xA;  }&#xA;}&#xA;&#xA;const car = new Car(&#34;Ford&#34;, &#34;F-150&#34;, &#34;red&#34;);&#xA;car.setColor(&#34;pink&#34;);&#xA;car.save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Car {&#xA;  constructor(make, model, color) {&#xA;    this.make = make;&#xA;    this.model = model;&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  setMake(make) {&#xA;    this.make = make;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  setModel(model) {&#xA;    this.model = model;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    this.color = color;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  save() {&#xA;    console.log(this.make, this.model, this.color);&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;}&#xA;&#xA;const car = new Car(&#34;Ford&#34;, &#34;F-150&#34;, &#34;red&#34;).setColor(&#34;pink&#34;).save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA; &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA; &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Employee {&#xA;  constructor(name, email) {&#xA;    this.name = name;&#xA;    this.email = email;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data. EmployeeTaxData is not a type of Employee&#xA;class EmployeeTaxData extends Employee {&#xA;  constructor(ssn, salary) {&#xA;    super();&#xA;    this.ssn = ssn;&#xA;    this.salary = salary;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class EmployeeTaxData {&#xA;  constructor(ssn, salary) {&#xA;    this.ssn = ssn;&#xA;    this.salary = salary;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class Employee {&#xA;  constructor(name, email) {&#xA;    this.name = name;&#xA;    this.email = email;&#xA;  }&#xA;&#xA;  setTaxData(ssn, salary) {&#xA;    this.taxData = new EmployeeTaxData(ssn, salary);&#xA;  }&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserSettings {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;  }&#xA;&#xA;  changeSettings(settings) {&#xA;    if (this.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserAuth {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class UserSettings {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;    this.auth = new UserAuth(user);&#xA;  }&#xA;&#xA;  changeSettings(settings) {&#xA;    if (this.auth.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;ajaxAdapter&#34;;&#xA;  }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;nodeAdapter&#34;;&#xA;  }&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(adapter) {&#xA;    this.adapter = adapter;&#xA;  }&#xA;&#xA;  fetch(url) {&#xA;    if (this.adapter.name === &#34;ajaxAdapter&#34;) {&#xA;      return makeAjaxCall(url).then(response =&amp;gt; {&#xA;        // transform response and return&#xA;      });&#xA;    } else if (this.adapter.name === &#34;nodeAdapter&#34;) {&#xA;      return makeHttpCall(url).then(response =&amp;gt; {&#xA;        // transform response and return&#xA;      });&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;function makeAjaxCall(url) {&#xA;  // request and return promise&#xA;}&#xA;&#xA;function makeHttpCall(url) {&#xA;  // request and return promise&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;ajaxAdapter&#34;;&#xA;  }&#xA;&#xA;  request(url) {&#xA;    // request and return promise&#xA;  }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;nodeAdapter&#34;;&#xA;  }&#xA;&#xA;  request(url) {&#xA;    // request and return promise&#xA;  }&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(adapter) {&#xA;    this.adapter = adapter;&#xA;  }&#xA;&#xA;  fetch(url) {&#xA;    return this.adapter.request(url).then(response =&amp;gt; {&#xA;      // transform response and return&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Rectangle {&#xA;  constructor() {&#xA;    this.width = 0;&#xA;    this.height = 0;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area) {&#xA;    // ...&#xA;  }&#xA;&#xA;  setWidth(width) {&#xA;    this.width = width;&#xA;  }&#xA;&#xA;  setHeight(height) {&#xA;    this.height = height;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Rectangle {&#xA;  setWidth(width) {&#xA;    this.width = width;&#xA;    this.height = width;&#xA;  }&#xA;&#xA;  setHeight(height) {&#xA;    this.width = height;&#xA;    this.height = height;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeRectangles(rectangles) {&#xA;  rectangles.forEach(rectangle =&amp;gt; {&#xA;    rectangle.setWidth(4);&#xA;    rectangle.setHeight(5);&#xA;    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.&#xA;    rectangle.render(area);&#xA;  });&#xA;}&#xA;&#xA;const rectangles = [new Rectangle(), new Rectangle(), new Square()];&#xA;renderLargeRectangles(rectangles);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Shape {&#xA;  setColor(color) {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class Rectangle extends Shape {&#xA;  constructor(width, height) {&#xA;    super();&#xA;    this.width = width;&#xA;    this.height = height;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Shape {&#xA;  constructor(length) {&#xA;    super();&#xA;    this.length = length;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.length * this.length;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeShapes(shapes) {&#xA;  shapes.forEach(shape =&amp;gt; {&#xA;    const area = shape.getArea();&#xA;    shape.render(area);&#xA;  });&#xA;}&#xA;&#xA;const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];&#xA;renderLargeShapes(shapes);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript doesn&#39;t have interfaces so this principle doesn&#39;t apply as strictly as others. However, it&#39;s important and relevant even with JavaScript&#39;s lack of type system.&lt;/p&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34; Interfaces are implicit contracts in JavaScript because of duck typing.&lt;/p&gt; &#xA;&lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &#34;fat interface&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class DOMTraverser {&#xA;  constructor(settings) {&#xA;    this.settings = settings;&#xA;    this.setup();&#xA;  }&#xA;&#xA;  setup() {&#xA;    this.rootNode = this.settings.rootNode;&#xA;    this.settings.animationModule.setup();&#xA;  }&#xA;&#xA;  traverse() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const $ = new DOMTraverser({&#xA;  rootNode: document.getElementsByTagName(&#34;body&#34;),&#xA;  animationModule() {} // Most of the time, we won&#39;t need to animate when traversing.&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class DOMTraverser {&#xA;  constructor(settings) {&#xA;    this.settings = settings;&#xA;    this.options = settings.options;&#xA;    this.setup();&#xA;  }&#xA;&#xA;  setup() {&#xA;    this.rootNode = this.settings.rootNode;&#xA;    this.setupOptions();&#xA;  }&#xA;&#xA;  setupOptions() {&#xA;    if (this.options.animationModule) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  traverse() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const $ = new DOMTraverser({&#xA;  rootNode: document.getElementsByTagName(&#34;body&#34;),&#xA;  options: {&#xA;    animationModule() {}&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with AngularJS, you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;As stated previously, JavaScript doesn&#39;t have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code&gt;InventoryTracker&lt;/code&gt; will have a &lt;code&gt;requestItems&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class InventoryRequester {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;HTTP&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryTracker {&#xA;  constructor(items) {&#xA;    this.items = items;&#xA;&#xA;    // BAD: We have created a dependency on a specific request implementation.&#xA;    // We should just have requestItems depend on a request method: `request`&#xA;    this.requester = new InventoryRequester();&#xA;  }&#xA;&#xA;  requestItems() {&#xA;    this.items.forEach(item =&amp;gt; {&#xA;      this.requester.requestItem(item);&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;const inventoryTracker = new InventoryTracker([&#34;apples&#34;, &#34;bananas&#34;]);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class InventoryTracker {&#xA;  constructor(items, requester) {&#xA;    this.items = items;&#xA;    this.requester = requester;&#xA;  }&#xA;&#xA;  requestItems() {&#xA;    this.items.forEach(item =&amp;gt; {&#xA;      this.requester.requestItem(item);&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;class InventoryRequesterV1 {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;HTTP&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryRequesterV2 {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;WS&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;// By constructing our dependencies externally and injecting them, we can easily&#xA;// substitute our request module for a fancy new one that uses WebSockets.&#xA;const inventoryTracker = new InventoryTracker(&#xA;  [&#34;apples&#34;, &#34;bananas&#34;],&#xA;  new InventoryRequesterV2()&#xA;);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&#34;https://gotwarlost.github.io/istanbul/&#34;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no excuse to not write tests. There are &lt;a href=&#34;https://jstherightway.org/#testing-tools&#34;&gt;plenty of good JS test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; &#xA;&lt;h3&gt;Single concept per test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import assert from &#34;assert&#34;;&#xA;&#xA;describe(&#34;MomentJS&#34;, () =&amp;gt; {&#xA;  it(&#34;handles date boundaries&#34;, () =&amp;gt; {&#xA;    let date;&#xA;&#xA;    date = new MomentJS(&#34;1/1/2015&#34;);&#xA;    date.addDays(30);&#xA;    assert.equal(&#34;1/31/2015&#34;, date);&#xA;&#xA;    date = new MomentJS(&#34;2/1/2016&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;02/29/2016&#34;, date);&#xA;&#xA;    date = new MomentJS(&#34;2/1/2015&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;03/01/2015&#34;, date);&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import assert from &#34;assert&#34;;&#xA;&#xA;describe(&#34;MomentJS&#34;, () =&amp;gt; {&#xA;  it(&#34;handles 30-day months&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;1/1/2015&#34;);&#xA;    date.addDays(30);&#xA;    assert.equal(&#34;1/31/2015&#34;, date);&#xA;  });&#xA;&#xA;  it(&#34;handles leap year&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;2/1/2016&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;02/29/2016&#34;, date);&#xA;  });&#xA;&#xA;  it(&#34;handles non-leap year&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;2/1/2015&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;03/01/2015&#34;, date);&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use Promises, not callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Callbacks aren&#39;t clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request&#34;;&#xA;import { writeFile } from &#34;fs&#34;;&#xA;&#xA;get(&#xA;  &#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;,&#xA;  (requestErr, response, body) =&amp;gt; {&#xA;    if (requestErr) {&#xA;      console.error(requestErr);&#xA;    } else {&#xA;      writeFile(&#34;article.html&#34;, body, writeErr =&amp;gt; {&#xA;        if (writeErr) {&#xA;          console.error(writeErr);&#xA;        } else {&#xA;          console.log(&#34;File written&#34;);&#xA;        }&#xA;      });&#xA;    }&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;get(&#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;)&#xA;  .then(body =&amp;gt; {&#xA;    return writeFile(&#34;article.html&#34;, body);&#xA;  })&#xA;  .then(() =&amp;gt; {&#xA;    console.log(&#34;File written&#34;);&#xA;  })&#xA;  .catch(err =&amp;gt; {&#xA;    console.error(err);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; &#xA;&lt;p&gt;Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an &lt;code&gt;async&lt;/code&gt; keyword, and then you can write your logic imperatively without a &lt;code&gt;then&lt;/code&gt; chain of functions. Use this if you can take advantage of ES2017/ES8 features today!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;get(&#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;)&#xA;  .then(body =&amp;gt; {&#xA;    return writeFile(&#34;article.html&#34;, body);&#xA;  })&#xA;  .then(() =&amp;gt; {&#xA;    console.log(&#34;File written&#34;);&#xA;  })&#xA;  .catch(err =&amp;gt; {&#xA;    console.error(err);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;async function getCleanCodeArticle() {&#xA;  try {&#xA;    const body = await get(&#xA;      &#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;&#xA;    );&#xA;    await writeFile(&#34;article.html&#34;, body);&#xA;    console.log(&#34;File written&#34;);&#xA;  } catch (err) {&#xA;    console.error(err);&#xA;  }&#xA;}&#xA;&#xA;getCleanCodeArticle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t ignore caught errors&lt;/h3&gt; &#xA;&lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn&#39;t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  console.log(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  // One option (more noisy than console.log):&#xA;  console.error(error);&#xA;  // Another option:&#xA;  notifyUserOfError(error);&#xA;  // Another option:&#xA;  reportErrorToService(error);&#xA;  // OR do all three!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t ignore rejected promises&lt;/h3&gt; &#xA;&lt;p&gt;For the same reason you shouldn&#39;t ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getdata()&#xA;  .then(data =&amp;gt; {&#xA;    functionThatMightThrow(data);&#xA;  })&#xA;  .catch(error =&amp;gt; {&#xA;    console.log(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getdata()&#xA;  .then(data =&amp;gt; {&#xA;    functionThatMightThrow(data);&#xA;  })&#xA;  .catch(error =&amp;gt; {&#xA;    // One option (more noisy than console.log):&#xA;    console.error(error);&#xA;    // Another option:&#xA;    notifyUserOfError(error);&#xA;    // Another option:&#xA;    reportErrorToService(error);&#xA;    // OR do all three!&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are &lt;a href=&#34;https://standardjs.com/rules.html&#34;&gt;tons of tools&lt;/a&gt; to automate this. Use one! It&#39;s a waste of time and money for engineers to argue over formatting.&lt;/p&gt; &#xA;&lt;p&gt;For things that don&#39;t fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.&lt;/p&gt; &#xA;&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const daysInMonth = 30;&#xA;&#xA;const songs = [&#34;Back In Black&#34;, &#34;Stairway to Heaven&#34;, &#34;Hey Jude&#34;];&#xA;const Artists = [&#34;ACDC&#34;, &#34;Led Zeppelin&#34;, &#34;The Beatles&#34;];&#xA;&#xA;function eraseDatabase() {}&#xA;function restore_database() {}&#xA;&#xA;class animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const DAYS_IN_MONTH = 30;&#xA;&#xA;const SONGS = [&#34;Back In Black&#34;, &#34;Stairway to Heaven&#34;, &#34;Hey Jude&#34;];&#xA;const ARTISTS = [&#34;ACDC&#34;, &#34;Led Zeppelin&#34;, &#34;The Beatles&#34;];&#xA;&#xA;function eraseDatabase() {}&#xA;function restoreDatabase() {}&#xA;&#xA;class Animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; &#xA;&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class PerformanceReview {&#xA;  constructor(employee) {&#xA;    this.employee = employee;&#xA;  }&#xA;&#xA;  lookupPeers() {&#xA;    return db.lookup(this.employee, &#34;peers&#34;);&#xA;  }&#xA;&#xA;  lookupManager() {&#xA;    return db.lookup(this.employee, &#34;manager&#34;);&#xA;  }&#xA;&#xA;  getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  perfReview() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;  }&#xA;&#xA;  getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.perfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class PerformanceReview {&#xA;  constructor(employee) {&#xA;    this.employee = employee;&#xA;  }&#xA;&#xA;  perfReview() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;  }&#xA;&#xA;  getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  lookupPeers() {&#xA;    return db.lookup(this.employee, &#34;peers&#34;);&#xA;  }&#xA;&#xA;  getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  lookupManager() {&#xA;    return db.lookup(this.employee, &#34;manager&#34;);&#xA;  }&#xA;&#xA;  getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.perfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; &#xA;&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function hashIt(data) {&#xA;  // The hash&#xA;  let hash = 0;&#xA;&#xA;  // Length of string&#xA;  const length = data.length;&#xA;&#xA;  // Loop through every character in data&#xA;  for (let i = 0; i &amp;lt; length; i++) {&#xA;    // Get character code.&#xA;    const char = data.charCodeAt(i);&#xA;    // Make the hash&#xA;    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;&#xA;    // Convert to 32-bit integer&#xA;    hash &amp;amp;= hash;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function hashIt(data) {&#xA;  let hash = 0;&#xA;  const length = data.length;&#xA;&#xA;  for (let i = 0; i &amp;lt; length; i++) {&#xA;    const char = data.charCodeAt(i);&#xA;    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;&#xA;&#xA;    // Convert to 32-bit integer&#xA;    hash &amp;amp;= hash;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t leave commented out code in your codebase&lt;/h3&gt; &#xA;&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;doStuff();&#xA;// doOtherStuff();&#xA;// doSomeMoreStuff();&#xA;// doSoMuchStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;doStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t have journal comments&lt;/h3&gt; &#xA;&lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**&#xA; * 2016-12-20: Removed monads, didn&#39;t understand them (RM)&#xA; * 2016-10-01: Improved using special monads (JP)&#xA; * 2016-02-03: Removed type-checking (LI)&#xA; * 2015-03-14: Added combine with type-checking (JR)&#xA; */&#xA;function combine(a, b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(a, b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid positional markers&lt;/h3&gt; &#xA;&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;////////////////////////////////////////////////////////////////////////////////&#xA;// Scope Model Instantiation&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;$scope.model = {&#xA;  menu: &#34;foo&#34;,&#xA;  nav: &#34;bar&#34;&#xA;};&#xA;&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;// Action setup&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;const actions = function() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$scope.model = {&#xA;  menu: &#34;foo&#34;,&#xA;  nav: &#34;bar&#34;&#xA;};&#xA;&#xA;const actions = function() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Armenia.png&#34; alt=&#34;am&#34;&gt; &lt;strong&gt;Armenian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/hanumanum/clean-code-javascript&#34;&gt;hanumanum/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bangladesh.png&#34; alt=&#34;bd&#34;&gt; &lt;strong&gt;Bangla(বাংলা)&lt;/strong&gt;: &lt;a href=&#34;https://github.com/InsomniacSabbir/clean-code-javascript/&#34;&gt;InsomniacSabbir/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&#34; alt=&#34;br&#34;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/fesnt/clean-code-javascript&#34;&gt;fesnt/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&#34; alt=&#34;cn&#34;&gt; &lt;strong&gt;Simplified Chinese&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/alivebao/clean-code-js&#34;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/beginor/clean-code-javascript&#34;&gt;beginor/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png&#34; alt=&#34;tw&#34;&gt; &lt;strong&gt;Traditional Chinese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/AllJointTW/clean-code-javascript&#34;&gt;AllJointTW/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&#34; alt=&#34;fr&#34;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&#34;https://github.com/eugene-augier/clean-code-javascript-fr&#34;&gt;eugene-augier/clean-code-javascript-fr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&#34; alt=&#34;de&#34;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&#34;https://github.com/marcbruederlin/clean-code-javascript&#34;&gt;marcbruederlin/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png&#34; alt=&#34;id&#34;&gt; &lt;strong&gt;Indonesia&lt;/strong&gt;: &lt;a href=&#34;https://github.com/andirkh/clean-code-javascript/&#34;&gt;andirkh/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png&#34; alt=&#34;it&#34;&gt; &lt;strong&gt;Italian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/frappacchio/clean-code-javascript/&#34;&gt;frappacchio/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&#34; alt=&#34;ja&#34;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mitsuruog/clean-code-javascript/&#34;&gt;mitsuruog/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&#34; alt=&#34;kr&#34;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&#34;https://github.com/qkraudghgh/clean-code-javascript-ko&#34;&gt;qkraudghgh/clean-code-javascript-ko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png&#34; alt=&#34;pl&#34;&gt; &lt;strong&gt;Polish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/greg-dev/clean-code-javascript-pl&#34;&gt;greg-dev/clean-code-javascript-pl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&#34; alt=&#34;ru&#34;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BoryaMogila/clean-code-javascript-ru/&#34;&gt;BoryaMogila/clean-code-javascript-ru/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/maksugr/clean-code-javascript&#34;&gt;maksugr/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&#34; alt=&#34;es&#34;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tureey/clean-code-javascript&#34;&gt;tureey/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png&#34; alt=&#34;es&#34;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/andersontr15/clean-code-javascript-es&#34;&gt;andersontr15/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Serbia.png&#34; alt=&#34;rs&#34;&gt; &lt;strong&gt;Serbian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/doskovicmilos/clean-code-javascript&#34;&gt;doskovicmilos/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&#34; alt=&#34;tr&#34;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/bsonmez/clean-code-javascript/tree/turkish-translation&#34;&gt;bsonmez/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png&#34; alt=&#34;ua&#34;&gt; &lt;strong&gt;Ukrainian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mindfr1k/clean-code-javascript-ua&#34;&gt;mindfr1k/clean-code-javascript-ua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&#34; alt=&#34;vi&#34;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/hienvd/clean-code-javascript/&#34;&gt;hienvd/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>cruip/tailwind-landing-page-template</title>
    <updated>2022-11-13T01:46:39Z</updated>
    <id>tag:github.com,2022-11-13:/cruip/tailwind-landing-page-template</id>
    <link href="https://github.com/cruip/tailwind-landing-page-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Light is a free landing page template built on top of TailwindCSS and fully coded in React. Made by&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Free Tailwind landing page template&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2683512/96160974-f93aa780-0f16-11eb-9ce4-81d94b216be6.png&#34; alt=&#34;Simple TailwindCSS template preview&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Simple Light&lt;/strong&gt; is a free landing page template built on top of &lt;strong&gt;TailwindCSS&lt;/strong&gt; and fully coded in &lt;strong&gt;React&lt;/strong&gt;. Simple light is designed to provide all the basic components a developer need to create a landing page for SaaS products, online services, and more. Use it for whatever you want, and be sure to reach us out on Twitter if you build anything cool/useful with it. Created and maintained with ❤️ by &lt;a href=&#34;https://cruip.com/&#34;&gt;Cruip.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Live demo&lt;/h2&gt; &#xA;&lt;p&gt;Check the live demo here 👉️ &lt;a href=&#34;https://simple.cruip.com/&#34;&gt;https://simple.cruip.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Simple Pro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cruip.com/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2683512/151178282-fd81b300-349a-42c3-a30a-f70f6e711e74.png&#34; alt=&#34;Simple Pro&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Design files&lt;/h2&gt; &#xA;&lt;p&gt;If you need the design files, you can download them from Figma&#39;s Community 👉 &lt;a href=&#34;https://bit.ly/3HOZMpf&#34;&gt;https://bit.ly/3HOZMpf&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#project-setup&#34;&gt;Project setup&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#compiles-and-hot-reloads-for-development&#34;&gt;Compiles and hot-reloads for development&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#compiles-and-minifies-for-production&#34;&gt;Compiles and minifies for production&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#customize-configuration&#34;&gt;Customize configuration&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#support-notes&#34;&gt;Support notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#terms-and-license&#34;&gt;Terms and License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#about-us&#34;&gt;About Us&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/cruip/tailwind-landing-page-template/main/#stay-in-the-loop&#34;&gt;Stay in the loop&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;This project was bootstrapped with &lt;a href=&#34;https://vitejs.dev/&#34;&gt;Vite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Project setup&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compiles and hot-reloads for development&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Compiles and minifies for production&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Customize configuration&lt;/h4&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://vitejs.dev/guide/&#34;&gt;Configuration Reference&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Support notes&lt;/h3&gt; &#xA;&lt;p&gt;We are shipping our templates with a very basic React configuration to let you quickly get into the development process, but we don&#39;t discourage you from using any other configuration or framework built on the top of React. So, please note that any request dealing with React (e.g. extra features, customisations, et cetera) is to be considered out of the support scope.&lt;/p&gt; &#xA;&lt;p&gt;For more information about what support covers, please see our (FAQs)[https://cruip.com/faq/].&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nucleoapp.com/&#34;&gt;Nucleo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Terms and License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Released under the &lt;a href=&#34;https://www.gnu.org/licenses/gpl-3.0.html&#34;&gt;GPL&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copyright 2020 &lt;a href=&#34;https://cruip.com/&#34;&gt;Cruip&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Use it for personal and commercial projects, but please don’t republish, redistribute, or resell the template.&lt;/li&gt; &#xA; &lt;li&gt;Attribution is not required, although it is really appreciated.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Us&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re an Italian developer/designer duo creating high-quality design/code resources for developers, makers, and startups.&lt;/p&gt; &#xA;&lt;h2&gt;Stay in the loop&lt;/h2&gt; &#xA;&lt;p&gt;If you would like to know when we release new resources, you can follow us on &lt;a href=&#34;https://twitter.com/Cruip_com&#34;&gt;Twitter&lt;/a&gt;, or you can subscribe to our monthly &lt;a href=&#34;https://cruip.com/#subscribe&#34;&gt;newsletter&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>