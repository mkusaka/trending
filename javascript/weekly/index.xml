<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Weekly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-17T01:52:07Z</updated>
  <subtitle>Weekly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fanmingming/live</title>
    <updated>2023-09-17T01:52:07Z</updated>
    <id>tag:github.com,2023-09-17:/fanmingming/live</id>
    <link href="https://github.com/fanmingming/live" rel="alternate"></link>
    <summary type="html">&lt;p&gt;✯ 一个国内可直连的直播源分享项目 ✯ 🔕 永久免费 直连访问 完整开源 不含广告 完善的台标 直播源支持IPv4/IPv6双栈访问 🔕&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; ✯ 一个国内可直连的直播源分享项目 ✯ &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;🔕 永久免费 直连访问 完整开源 不含广告 完善的台标 直播源支持IPv4/IPv6双栈访问 🔕&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub Repo stars&#34; src=&#34;https://img.shields.io/github/stars/fanmingming/live&#34;&gt; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/fanmingming/live&#34;&gt; &lt;img alt=&#34;GitHub issues&#34; src=&#34;https://img.shields.io/github/issues/fanmingming/live&#34;&gt; &lt;img alt=&#34;GitHub watchers&#34; src=&#34;https://img.shields.io/github/watchers/fanmingming/live&#34;&gt; &lt;img alt=&#34;GitHub contributors&#34; src=&#34;https://img.shields.io/github/contributors/fanmingming/live&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/fanmingming/live&#34;&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;🤹‍♂️源地址:&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;直播源地址&lt;/th&gt; &#xA;   &lt;th&gt;频道数&lt;/th&gt; &#xA;   &lt;th&gt;更新时间&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🌏Global直播源&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://live.fanmingming.com/tv/m3u/global.m3u&#34;&gt;https://live.fanmingming.com/tv/m3u/global.m3u&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;204个&lt;/td&gt; &#xA;   &lt;td&gt;2023.9.8&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📺IPTV(IPV6专用)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://live.fanmingming.com/tv/m3u/ipv6.m3u&#34;&gt;https://live.fanmingming.com/tv/m3u/ipv6.m3u&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;120个&lt;/td&gt; &#xA;   &lt;td&gt;2023.8.28&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;📻Radio直播源&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://live.fanmingming.com/radio/m3u/index.m3u&#34;&gt;https://live.fanmingming.com/radio/m3u/index.m3u&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;304个&lt;/td&gt; &#xA;   &lt;td&gt;2023.8.27&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🛠️工具&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📆EPG接口地址： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://live.fanmingming.com/e.xml&#34;&gt;https://live.fanmingming.com/e.xml&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🆕Bing每日图片： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://fanmingming.com/bing&#34;&gt;https://fanmingming.com/bing&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🎞️m3u8下载工具： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://live.fanmingming.com/m3u8&#34;&gt;https://live.fanmingming.com/m3u8&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;📄M3U To TXT： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Demo🔗 &lt;a href=&#34;https://fanmingming.com/txt?url=https://live.fanmingming.com/tv/m3u/ipv6.m3u&#34;&gt;https://fanmingming.com/txt?url=https://live.fanmingming.com/tv/m3u/ipv6.m3u&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;🌐M3U8 Web Player &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Demo🔗 &lt;a href=&#34;https://live.fanmingming.com/player/?vurl=https://livedoc.cgtn.com/500d/prog_index.m3u8&#34;&gt;https://live.fanmingming.com/player/?vurl=https://livedoc.cgtn.com/500d/prog_index.m3u8&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖说明&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;所有播放源均收集于互联网，仅供测试研究使用，不得商用。&lt;/li&gt; &#xA; &lt;li&gt;通过M3U8 Web Player测试直播源需使用https协议的直播源链接。&lt;/li&gt; &#xA; &lt;li&gt;部分广播电台节目播出具有一定的时效性，需要在指定时段进行收听。&lt;/li&gt; &#xA; &lt;li&gt;本项目不存储任何的流媒体内容，所有的法律责任与后果应由使用者自行承担。&lt;/li&gt; &#xA; &lt;li&gt;您可以Fork本项目，但引用本项目内容到其他仓库的情况，务必要遵守开源协议。&lt;/li&gt; &#xA; &lt;li&gt;本项目不保证直播频道的有效性，直播内容可能受直播服务提供商因素影响而失效。&lt;/li&gt; &#xA; &lt;li&gt;所有文件均托管在&lt;a href=&#34;https://github.com/fanmingming/live&#34;&gt;GitHub&lt;/a&gt;且自动构建，由项目发起人公益维护，欢迎Star本项目或点击&lt;a href=&#34;https://github.com/fanmingming/live/issues/new/choose&#34;&gt;Issues&lt;/a&gt;反馈您的问题。&lt;/li&gt; &#xA; &lt;li&gt;您可以编辑本项目的m3u文件或上传缺失的频道Logo到&lt;code&gt;tv&lt;/code&gt;或&lt;code&gt;radio&lt;/code&gt;目录下并发起拉取请求，收到请求后我们会对您提交的内容进行验证，审核通过后会自动发布。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📔更新&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2023.9.16 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;🔥Global源大部分频道已支持节目回看功能(需播放器支持)。&lt;/li&gt; &#xA;   &lt;li&gt;工具新增bing每日图片接口。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;☕捐赠&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支持项目，赋予更多流量，共创更好体验，让服务更强大！ &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;自2022年10月创立以来，得益于大家的支持，项目已获得超过6K颗星星，在中文GitHub项目中名声鹊起。感激一路相伴，项目将持续免费。所有款项将透明公示于项目的&lt;a href=&#34;https://github.com/fanmingming/live/raw/main/Sponsor.MD&#34;&gt;Sponsor.MD&lt;/a&gt;。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img alt=&#34;Sponsor&#34; src=&#34;https://live.fanmingming.com/sponsor.png&#34;&gt;</summary>
  </entry>
  <entry>
    <title>typicode/json-server</title>
    <updated>2023-09-17T01:52:07Z</updated>
    <id>tag:github.com,2023-09-17:/typicode/json-server</id>
    <link href="https://github.com/typicode/json-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get a full fake REST API with zero coding in less than 30 seconds (seriously)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSON Server &lt;a href=&#34;https://github.com/typicode/json-server/actions/workflows/node.js.yml&#34;&gt;&lt;img src=&#34;https://github.com/typicode/json-server/actions/workflows/node.js.yml/badge.svg?branch=master&#34; alt=&#34;Node.js CI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Get a full fake REST API with &lt;strong&gt;zero coding&lt;/strong&gt; in &lt;strong&gt;less than 30 seconds&lt;/strong&gt; (seriously)&lt;/p&gt; &#xA;&lt;p&gt;Created with &amp;lt;3 for front-end developers who need a quick back-end for prototyping and mocking.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server&#34;&gt;Egghead.io free video tutorial - Creating demo APIs with json-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jsonplaceholder.typicode.com&#34;&gt;JSONPlaceholder - Live running version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://my-json-server.typicode.com&#34;&gt;&lt;strong&gt;My JSON Server&lt;/strong&gt; - no installation required, use your own data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;🐶&lt;/span&gt; &lt;a href=&#34;https://github.com/typicode/husky&#34;&gt;husky - Git hooks made easy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🦉&lt;/span&gt; &lt;a href=&#34;https://github.com/typicode/lowdb&#34;&gt;lowdb - local JSON database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;a href=&#34;https://github.com/typicode/xv&#34;&gt;xv - a beautifully simple and capable test runner&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Gold sponsors 🥇&lt;/h2&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tryretool.com/?utm_source=sponsor&amp;amp;utm_campaign=typicode&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://i.imgur.com/IBItATn.png&#34; height=&#34;70px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://mockend.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://jsonplaceholder.typicode.com/mockend.svg?sanitize=true&#34; height=&#34;70px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Silver sponsors 🥈&lt;/h2&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://cased.com&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/5502029/194441951-b7dca49d-efd6-496d-900b-288004717f11.png&#34; height=&#34;55px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/typicode/sponsorship&#34;&gt;Become a sponsor and have your company logo here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please help me build OSS&lt;/strong&gt; 👉 &lt;a href=&#34;https://github.com/sponsors/typicode&#34;&gt;GitHub Sponsors&lt;/a&gt; &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#routes&#34;&gt;Routes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#plural-routes&#34;&gt;Plural routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#singular-routes&#34;&gt;Singular routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#filter&#34;&gt;Filter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#paginate&#34;&gt;Paginate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#sort&#34;&gt;Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#slice&#34;&gt;Slice&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#full-text-search&#34;&gt;Full-text search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#relationships&#34;&gt;Relationships&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#homepage&#34;&gt;Homepage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#extras&#34;&gt;Extras&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#static-file-server&#34;&gt;Static file server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#alternative-port&#34;&gt;Alternative port&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#access-from-anywhere&#34;&gt;Access from anywhere&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#remote-schema&#34;&gt;Remote schema&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#generate-random-data&#34;&gt;Generate random data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#https&#34;&gt;HTTPS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-custom-routes&#34;&gt;Add custom routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-middlewares&#34;&gt;Add middlewares&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#cli-usage&#34;&gt;CLI usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#module&#34;&gt;Module&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#simple-example&#34;&gt;Simple example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#custom-routes-example&#34;&gt;Custom routes example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#access-control-example&#34;&gt;Access control example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#custom-output-example&#34;&gt;Custom output example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#rewriter-example&#34;&gt;Rewriter example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#mounting-json-server-on-another-endpoint-example&#34;&gt;Mounting JSON Server on another endpoint example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#links&#34;&gt;Links&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#video&#34;&gt;Video&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#articles&#34;&gt;Articles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#third-party-tools&#34;&gt;Third-party tools&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install JSON Server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g json-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;db.json&lt;/code&gt; file with some data&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;posts&#34;: [&#xA;    { &#34;id&#34;: 1, &#34;title&#34;: &#34;json-server&#34;, &#34;author&#34;: &#34;typicode&#34; }&#xA;  ],&#xA;  &#34;comments&#34;: [&#xA;    { &#34;id&#34;: 1, &#34;body&#34;: &#34;some comment&#34;, &#34;postId&#34;: 1 }&#xA;  ],&#xA;  &#34;profile&#34;: { &#34;name&#34;: &#34;typicode&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start JSON Server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server --watch db.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if you go to &lt;a href=&#34;http://localhost:3000/posts/1&#34;&gt;http://localhost:3000/posts/1&lt;/a&gt;, you&#39;ll get&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#34;id&#34;: 1, &#34;title&#34;: &#34;json-server&#34;, &#34;author&#34;: &#34;typicode&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also when doing requests, it&#39;s good to know that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to &lt;code&gt;db.json&lt;/code&gt; using &lt;a href=&#34;https://github.com/typicode/lowdb&#34;&gt;lowdb&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Your request body JSON should be object enclosed, just like the GET output. (for example &lt;code&gt;{&#34;name&#34;: &#34;Foobar&#34;}&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Id values are not mutable. Any &lt;code&gt;id&lt;/code&gt; value in the body of your PUT or PATCH request will be ignored. Only a value set in a POST request will be respected, but only if not already taken.&lt;/li&gt; &#xA; &lt;li&gt;A POST, PUT or PATCH request should include a &lt;code&gt;Content-Type: application/json&lt;/code&gt; header to use the JSON in the request body. Otherwise it will return a 2XX status code, but without changes being made to the data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;p&gt;Based on the previous &lt;code&gt;db.json&lt;/code&gt; file, here are all the default routes. You can also add &lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-custom-routes&#34;&gt;other routes&lt;/a&gt; using &lt;code&gt;--routes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Plural routes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET    /posts&#xA;GET    /posts/1&#xA;POST   /posts&#xA;PUT    /posts/1&#xA;PATCH  /posts/1&#xA;DELETE /posts/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Singular routes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET    /profile&#xA;POST   /profile&#xA;PUT    /profile&#xA;PATCH  /profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filter&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;.&lt;/code&gt; to access deep properties&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?title=json-server&amp;amp;author=typicode&#xA;GET /posts?id=1&amp;amp;id=2&#xA;GET /comments?author.name=typicode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Paginate&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;_page&lt;/code&gt; and optionally &lt;code&gt;_limit&lt;/code&gt; to paginate returned data.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;Link&lt;/code&gt; header you&#39;ll get &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;prev&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; links.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_page=7&#xA;GET /posts?_page=7&amp;amp;_limit=20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;10 items are returned by default&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sort&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_sort&lt;/code&gt; and &lt;code&gt;_order&lt;/code&gt; (ascending order by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_sort=views&amp;amp;_order=asc&#xA;GET /posts/1/comments?_sort=votes&amp;amp;_order=asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For multiple fields, use the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_sort=user,views&amp;amp;_order=desc,asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Slice&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_start&lt;/code&gt; and &lt;code&gt;_end&lt;/code&gt; or &lt;code&gt;_limit&lt;/code&gt; (an &lt;code&gt;X-Total-Count&lt;/code&gt; header is included in the response)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_start=20&amp;amp;_end=30&#xA;GET /posts/1/comments?_start=20&amp;amp;_end=30&#xA;GET /posts/1/comments?_start=20&amp;amp;_limit=10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Works exactly as &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&#34;&gt;Array.slice&lt;/a&gt; (i.e. &lt;code&gt;_start&lt;/code&gt; is inclusive and &lt;code&gt;_end&lt;/code&gt; exclusive)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Operators&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_gte&lt;/code&gt; or &lt;code&gt;_lte&lt;/code&gt; for getting a range&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?views_gte=10&amp;amp;views_lte=20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_ne&lt;/code&gt; to exclude a value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?id_ne=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_like&lt;/code&gt; to filter (RegExp supported)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?title_like=server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full-text search&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;q&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?q=internet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Relationships&lt;/h3&gt; &#xA;&lt;p&gt;To include children resources, add &lt;code&gt;_embed&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_embed=comments&#xA;GET /posts/1?_embed=comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To include parent resource, add &lt;code&gt;_expand&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /comments?_expand=post&#xA;GET /comments/1?_expand=post&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get or create nested resources (by default one level, &lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-custom-routes&#34;&gt;add custom routes&lt;/a&gt; for more)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET  /posts/1/comments&#xA;POST /posts/1/comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homepage&lt;/h3&gt; &#xA;&lt;p&gt;Returns default index file or serves &lt;code&gt;./public&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;h3&gt;Static file server&lt;/h3&gt; &#xA;&lt;p&gt;You can use JSON Server to serve your HTML, JS and CSS, simply create a &lt;code&gt;./public&lt;/code&gt; directory or use &lt;code&gt;--static&lt;/code&gt; to set a different static files directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir public&#xA;echo &#39;hello world&#39; &amp;gt; public/index.html&#xA;json-server db.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server db.json --static ./some-other-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alternative port&lt;/h3&gt; &#xA;&lt;p&gt;You can start JSON Server on other ports with the &lt;code&gt;--port&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ json-server --watch db.json --port 3004&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Access from anywhere&lt;/h3&gt; &#xA;&lt;p&gt;You can access your fake API from anywhere using CORS and JSONP.&lt;/p&gt; &#xA;&lt;h3&gt;Remote schema&lt;/h3&gt; &#xA;&lt;p&gt;You can load remote schemas.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ json-server http://example.com/file.json&#xA;$ json-server http://jsonplaceholder.typicode.com/db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate random data&lt;/h3&gt; &#xA;&lt;p&gt;Using JS instead of a JSON file, you can create data programmatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// index.js&#xA;module.exports = () =&amp;gt; {&#xA;  const data = { users: [] }&#xA;  // Create 1000 users&#xA;  for (let i = 0; i &amp;lt; 1000; i++) {&#xA;    data.users.push({ id: i, name: `user${i}` })&#xA;  }&#xA;  return data&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ json-server index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; use modules like &lt;a href=&#34;https://github.com/faker-js/faker&#34;&gt;Faker&lt;/a&gt;, &lt;a href=&#34;https://github.com/boo1ean/casual&#34;&gt;Casual&lt;/a&gt;, &lt;a href=&#34;https://github.com/victorquinn/chancejs&#34;&gt;Chance&lt;/a&gt; or &lt;a href=&#34;https://github.com/json-schema-faker/json-schema-faker&#34;&gt;JSON Schema Faker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;HTTPS&lt;/h3&gt; &#xA;&lt;p&gt;There are many ways to set up SSL in development. One simple way is to use &lt;a href=&#34;https://github.com/typicode/hotel&#34;&gt;hotel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Add custom routes&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;routes.json&lt;/code&gt; file. Pay attention to start every route with &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;/api/*&#34;: &#34;/$1&#34;,&#xA;  &#34;/:resource/:id/show&#34;: &#34;/:resource/:id&#34;,&#xA;  &#34;/posts/:category&#34;: &#34;/posts?category=:category&#34;,&#xA;  &#34;/articles?id=:id&#34;: &#34;/posts/:id&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start JSON Server with &lt;code&gt;--routes&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server db.json --routes routes.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can access resources using additional routes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/api/posts # → /posts&#xA;/api/posts/1  # → /posts/1&#xA;/posts/1/show # → /posts/1&#xA;/posts/javascript # → /posts?category=javascript&#xA;/articles?id=1 # → /posts/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add middlewares&lt;/h3&gt; &#xA;&lt;p&gt;You can add your middlewares from the CLI using &lt;code&gt;--middlewares&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// hello.js&#xA;module.exports = (req, res, next) =&amp;gt; {&#xA;  res.header(&#39;X-Hello&#39;, &#39;World&#39;)&#xA;  next()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server db.json --middlewares ./hello.js&#xA;json-server db.json --middlewares ./first.js ./second.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;json-server [options] &amp;lt;source&amp;gt;&#xA;&#xA;Options:&#xA;  --config, -c       Path to config file           [default: &#34;json-server.json&#34;]&#xA;  --port, -p         Set port                                    [default: 3000]&#xA;  --host, -H         Set host                             [default: &#34;localhost&#34;]&#xA;  --watch, -w        Watch file(s)                                     [boolean]&#xA;  --routes, -r       Path to routes file&#xA;  --middlewares, -m  Paths to middleware files                           [array]&#xA;  --static, -s       Set static files directory&#xA;  --read-only, --ro  Allow only GET requests                           [boolean]&#xA;  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]&#xA;  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]&#xA;  --snapshots, -S    Set snapshots directory                      [default: &#34;.&#34;]&#xA;  --delay, -d        Add delay to responses (ms)&#xA;  --id, -i           Set database id property (e.g. _id)         [default: &#34;id&#34;]&#xA;  --foreignKeySuffix, --fks  Set foreign key suffix, (e.g. _id as in post_id)&#xA;                                                                 [default: &#34;Id&#34;]&#xA;  --quiet, -q        Suppress log messages from output                 [boolean]&#xA;  --help, -h         Show help                                         [boolean]&#xA;  --version, -v      Show version number                               [boolean]&#xA;&#xA;Examples:&#xA;  json-server db.json&#xA;  json-server file.js&#xA;  json-server http://example.com/db.json&#xA;&#xA;https://github.com/typicode/json-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set options in a &lt;code&gt;json-server.json&lt;/code&gt; configuration file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;port&#34;: 3000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module&lt;/h3&gt; &#xA;&lt;p&gt;If you need to add authentication, validation, or &lt;strong&gt;any behavior&lt;/strong&gt;, you can use the project as a module in combination with other Express middlewares.&lt;/p&gt; &#xA;&lt;h4&gt;Simple example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install json-server --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// server.js&#xA;const jsonServer = require(&#39;json-server&#39;)&#xA;const server = jsonServer.create()&#xA;const router = jsonServer.router(&#39;db.json&#39;)&#xA;const middlewares = jsonServer.defaults()&#xA;&#xA;server.use(middlewares)&#xA;server.use(router)&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#39;JSON Server is running&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node server.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The path you provide to the &lt;code&gt;jsonServer.router&lt;/code&gt; function is relative to the directory from where you launch your node process. If you run the above code from another directory, it’s better to use an absolute path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const path = require(&#39;path&#39;)&#xA;const router = jsonServer.router(path.join(__dirname, &#39;db.json&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an in-memory database, simply pass an object to &lt;code&gt;jsonServer.router()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add custom options (eg. &lt;code&gt;foreginKeySuffix&lt;/code&gt;) pass in an object as the second argument to &lt;code&gt;jsonServer.router(&#39;db.json&#39;, { foreginKeySuffix: &#39;_id&#39; })&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note also that &lt;code&gt;jsonServer.router()&lt;/code&gt; can be used in existing Express projects.&lt;/p&gt; &#xA;&lt;h4&gt;Custom routes example&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s say you want a route that echoes query parameters and another one that set a timestamp on every resource created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const jsonServer = require(&#39;json-server&#39;)&#xA;const server = jsonServer.create()&#xA;const router = jsonServer.router(&#39;db.json&#39;)&#xA;const middlewares = jsonServer.defaults()&#xA;&#xA;// Set default middlewares (logger, static, cors and no-cache)&#xA;server.use(middlewares)&#xA;&#xA;// Add custom routes before JSON Server router&#xA;server.get(&#39;/echo&#39;, (req, res) =&amp;gt; {&#xA;  res.jsonp(req.query)&#xA;})&#xA;&#xA;// To handle POST, PUT and PATCH you need to use a body-parser&#xA;// You can use the one used by JSON Server&#xA;server.use(jsonServer.bodyParser)&#xA;server.use((req, res, next) =&amp;gt; {&#xA;  if (req.method === &#39;POST&#39;) {&#xA;    req.body.createdAt = Date.now()&#xA;  }&#xA;  // Continue to JSON Server router&#xA;  next()&#xA;})&#xA;&#xA;// Use default router&#xA;server.use(router)&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#39;JSON Server is running&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Access control example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const jsonServer = require(&#39;json-server&#39;)&#xA;const server = jsonServer.create()&#xA;const router = jsonServer.router(&#39;db.json&#39;)&#xA;const middlewares = jsonServer.defaults()&#xA;&#xA;server.use(middlewares)&#xA;server.use((req, res, next) =&amp;gt; {&#xA; if (isAuthorized(req)) { // add your authorization logic here&#xA;   next() // continue to JSON Server router&#xA; } else {&#xA;   res.sendStatus(401)&#xA; }&#xA;})&#xA;server.use(router)&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#39;JSON Server is running&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom output example&lt;/h4&gt; &#xA;&lt;p&gt;To modify responses, overwrite &lt;code&gt;router.render&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// In this example, returned resources will be wrapped in a body property&#xA;router.render = (req, res) =&amp;gt; {&#xA;  res.jsonp({&#xA;    body: res.locals.data&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set your own status code for the response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// In this example we simulate a server side error response&#xA;router.render = (req, res) =&amp;gt; {&#xA;  res.status(500).jsonp({&#xA;    error: &#34;error message here&#34;&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rewriter example&lt;/h4&gt; &#xA;&lt;p&gt;To add rewrite rules, use &lt;code&gt;jsonServer.rewriter()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add this before server.use(router)&#xA;server.use(jsonServer.rewriter({&#xA;  &#39;/api/*&#39;: &#39;/$1&#39;,&#xA;  &#39;/blog/:resource/:id/show&#39;: &#39;/:resource/:id&#39;&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mounting JSON Server on another endpoint example&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, you can also mount the router on &lt;code&gt;/api&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;server.use(&#39;/api&#39;, router)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;jsonServer.create()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns an Express server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;jsonServer.defaults([options])&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns middlewares used by JSON Server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; path to static files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;logger&lt;/code&gt; enable logger middleware (default: true)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bodyParser&lt;/code&gt; enable body-parser middleware (default: true)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;noCors&lt;/code&gt; disable CORS (default: false)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;readOnly&lt;/code&gt; accept only GET requests (default: false)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;jsonServer.router([path|object], [options])&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns JSON Server router.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options (see &lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#cli-usage&#34;&gt;CLI usage&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;You can deploy JSON Server. For example, &lt;a href=&#34;http://jsonplaceholder.typicode.com&#34;&gt;JSONPlaceholder&lt;/a&gt; is an online fake API powered by JSON Server and running on Heroku.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server&#34;&gt;Creating Demo APIs with json-server on egghead.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nmotw.in/json-server/&#34;&gt;Node Module Of The Week - json-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://marmelab.com/blog/2014/09/15/easy-backend-for-your-restful-api.html&#34;&gt;ng-admin: Add an AngularJS admin GUI to any RESTful API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://glebbahmutov.com/blog/fast-prototyping-restangular-and-json-server/&#34;&gt;Fast prototyping using Restangular and Json-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coligo.io/create-mock-rest-api-with-json-server/&#34;&gt;Create a Mock REST API in Seconds for Prototyping your Frontend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@housecor/rapid-development-via-mock-apis-e559087be066#.93d7w8oro&#34;&gt;No API? No Problem! Rapid Development via Mock APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/zero-code-rest-with-json-server&#34;&gt;Zero Code REST With json-server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Third-party tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tfiwm/grunt-json-server&#34;&gt;Grunt JSON Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clue/docker-json-server&#34;&gt;Docker JSON Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/naholyr/json-server-gui&#34;&gt;JSON Server GUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dfsq/json-server-init&#34;&gt;JSON file generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maty21/json-server-extension&#34;&gt;JSON Server extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thanks.typicode.com&#34;&gt;Supporters&lt;/a&gt; ✨&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>94xy/miniprogram-privacy</title>
    <updated>2023-09-17T01:52:07Z</updated>
    <id>tag:github.com,2023-09-17:/94xy/miniprogram-privacy</id>
    <link href="https://github.com/94xy/miniprogram-privacy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;小程序用户隐私保护授权弹窗组件&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;刚刚，微信发布最新公告（要求必须适配的最后日期的 3 个小时前），开发者可以无须修改，自动使用官方默认配置。&lt;/h1&gt;</summary>
  </entry>
</feed>