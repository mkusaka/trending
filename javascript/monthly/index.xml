<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-07-01T01:51:05Z</updated>
  <subtitle>Monthly Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>meshery/meshery</title>
    <updated>2025-07-01T01:51:05Z</updated>
    <id>tag:github.com,2025-07-01:/meshery/meshery</id>
    <link href="https://github.com/meshery/meshery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Meshery, the cloud native manager&lt;/p&gt;&lt;hr&gt;&lt;p style=&#34;text-align:center;&#34; align=&#34;center&#34;&gt;&lt;a href=&#34;https://meshery.io&#34;&gt;&#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-light-text-side.svg&#34;&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg&#34;&gt; &#xA;   &lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg?sanitize=true&#34; alt=&#34;Meshery Logo&#34; width=&#34;70%&#34;&gt;&#xA;  &lt;/picture&gt;&lt;/a&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hub.docker.com/r/meshery/meshery&#34; alt=&#34;Docker pulls&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/meshery/meshery.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/issues?q=is%3Aopen%20is%3Aissue%20archived%3Afalse%20(org%3Ameshery%20OR%20org%3Aservice-mesh-performance%20OR%20org%3Aservice-mesh-patterns%20OR%20org%3Ameshery-extensions)%20label%3A%22help%20wanted%22%20&#34; alt=&#34;GitHub issues by-label&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/meshery/meshery/help%20wanted.svg?color=informational&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/meshery/meshery/raw/master/LICENSE&#34; alt=&#34;LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/meshery/meshery?color=brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://artifacthub.io/packages/helm/meshery/meshery&#34; alt=&#34;Artifact Hub Meshery&#34;&gt; &lt;img src=&#34;https://img.shields.io/endpoint?color=brightgreen&amp;amp;label=Helm%20Chart&amp;amp;style=plastic&amp;amp;url=https%3A%2F%2Fartifacthub.io%2Fbadge%2Frepository%2Fartifact-hub&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/meshery/meshery&#34; alt=&#34;Go Report Card&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/meshery/meshery&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/meshery/meshery/actions&#34; alt=&#34;Build Status&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/actions/workflow/status/meshery/meshery/release-drafter.yml&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/3564&#34; alt=&#34;CLI Best Practices&#34;&gt; &lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/3564/badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://meshery.io/community#discussion-forums&#34; alt=&#34;Discuss Users&#34;&gt; &lt;img src=&#34;https://img.shields.io/discourse/users?label=discuss&amp;amp;logo=discourse&amp;amp;server=https%3A%2F%2Fmeshery.io/community&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://slack.meshery.io&#34; alt=&#34;Join Slack&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Slack-@meshery.svg?logo=slack&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=mesheryio&#34; alt=&#34;Twitter Follow&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/mesheryio.svg?label=Follow+Meshery&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/meshery/meshery/releases&#34; alt=&#34;Meshery Downloads&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/meshery/meshery/total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gurubase.io/g/meshery&#34; alt=&#34;Meshery Guru&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Gurubase-Ask%20Meshery%20Guru-006BFF&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fmeshery%2Fmeshery?ref=badge_shield&#34; alt=&#34;License Scan Report&#34;&gt;&#xA;  &lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fmeshery%2Fmeshery.svg?type=shield&#34;/&gt;&lt;/a&gt;  &#xA;  --&gt; &lt;/p&gt; &#xA;&lt;h5&gt;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;If you like Meshery, please &lt;a href=&#34;https://github.com/meshery/meshery/stargazers&#34;&gt;★&lt;/a&gt; this repository to show your support! 🤩&lt;/i&gt;&lt;/p&gt;&lt;/h5&gt; &#xA;&lt;p align=&#34;center&#34;&gt; MESHERY IS A CLOUD NATIVE COMPUTING FOUNDATION PROJECT &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34; width=&#34;100%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cncf-white.svg#gh-dark-mode-only&#34; width=&#34;30%&#34; align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cncf-black.svg#gh-light-mode-only&#34; width=&#34;30%&#34; align=&#34;center&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A self-service engineering platform, &lt;a href=&#34;https://meshery.io&#34;&gt;Meshery&lt;/a&gt;, is the open source, cloud native manager that enables the design and management of all Kubernetes-based infrastructure and applications (multi-cloud). Among other features, As an extensible platform, Meshery offers visual and collaborative GitOps, freeing you from the chains of YAML while managing Kubernetes multi-cluster deployments. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34; width=&#34;100%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-dashboard-hero-image.png&#34; width=&#34;800px&#34;&gt; &#xA; &lt;br&gt;Try Meshery in your browser using the &#xA; &lt;a href=&#34;https://play.meshery.io&#34;&gt;Cloud Native Playground&lt;/a&gt; (&#xA; &lt;a href=&#34;https://www.youtube.com/watch?v=034nVaQUyME&amp;amp;list=PL3A-A6hPO2IO_yzN83wSJJUNQActzCJvO&amp;amp;index=9&#34;&gt;teaser video&lt;/a&gt;) &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;!--&#xA;- [Functionality](#functionality)&#xA;  - [Meshery Architecture](#meshery-architecture)&#xA;  - [Join the Meshery community!](#join-the-meshery-community)&#xA;  - [Contributing](#contributing)&#xA;    - [Stargazers](#stargazers)&#xA;    - [License](#license)&#xA;--&gt; &#xA;&lt;!-- &lt;p style=&#34;clear:both;&#34;&gt;&amp;nbsp;&lt;/p&gt;&#xA;&lt;a href=&#34;https://meshery.io&#34;&gt;&lt;picture&gt;&#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-light-text-side.svg&#34;&gt;&#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg&#34;&gt;&#xA;  &lt;img alt=&#34;Meshery - the Cloud Native Manager&#34; src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-logo-dark-text-side.svg&#34; align=&#34;left&#34; width=&#34;45%&#34;&gt;&#xA;  &lt;/picture&gt;&lt;/a&gt; &#xA;&lt;a href=&#34;https://meshery.io&#34;&gt;&#xA;&lt;h3 style=&#34;margin:auto;&#34;&gt;&lt;br /&gt;&lt;br /&gt;&#xA;  &lt;a href=&#34;https://docs.google.com/presentation/d/14kxjwYSJ_FyE3K_6CDEd6oq2kqwn0OSE8RDJ4H-KlKU/edit?usp=sharing&#34;&gt;&lt;center&gt;&lt;i&gt;Project Overview Presentation&lt;/i&gt;&lt;/center&gt;&lt;/a&gt;&#xA;  &lt;br /&gt;&lt;br /&gt;&lt;br /&gt;&#xA;&lt;/h3&gt; --&gt; &#xA;&lt;p style=&#34;clear:both;&#34;&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Functionality&lt;/h1&gt; &#xA;&lt;h2&gt;Infrastructure Lifecycle Management&lt;/h2&gt; &#xA;&lt;p&gt;Meshery manages the configuration, deployment, and operation of your Cloud services and Kubernetes clusters while supporting hundreds of different types of cloud native infrastructure integrations. Meshery supports &lt;a href=&#34;https://raw.githubusercontent.com/meshery/meshery/master/https//meshery.io/integrations&#34;&gt;300+ integrations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!--&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=034nVaQUyME&#34;&gt;&lt;img alt=&#34;Meshery cloud native management&#34; src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshmap.gif&#34;  style=&#34;margin-left:10px; margin-bottom:10px;&#34; width=&#34;100%&#34; align=&#34;center&#34; /&gt;&lt;/a&gt;&#xA;&lt;br /&gt;&lt;br /&gt;--&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cloud-native-integrations.png&#34;&gt;&lt;img alt=&#34;Meshery Integrations&#34; src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/cloud-native-integrations.png&#34; style=&#34;margin-right:10px;margin-bottom:10px;&#34; width=&#34;100%&#34; align=&#34;center&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Find infrastructure configuration patterns in Meshery&#39;s &lt;a href=&#34;https://meshery.io/catalog&#34;&gt;catalog of curated design templates&lt;/a&gt; filled with configuration best practices.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple Kubernetes Clusters and Multiple Clouds&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://meshery.io/assets/images/screens/multi-cluster-management.gif&#34; width=&#34;50%&#34; alt=&#34;Multi-cluster Kubernetes Manager&#34; loading=&#34;lazy&#34; align=&#34;center&#34;&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Meshery provides a single pane of glass to manage multiple Kubernetes clusters across any infrastructure, including various cloud providers. Meshery enables consistent configuration, operation, and observability across your entire Kubernetes landscape.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h4&gt;Dry-run your deployments&lt;/h4&gt;&lt;/summary&gt; Meshery leverages Kubernetes&#39; built-in dry-run capabilities to allow you to simulate deployments without actually applying the changes to your cluster. This enables you to: &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Validate configurations: Ensure your deployment specifications (e.g., YAML manifests, Helm charts, Meshery Designs) are syntactically correct and will be accepted by the Kubernetes API server. &amp;nbsp;&lt;/li&gt; &#xA;  &lt;li&gt;Identify potential issues: Detect errors in your configurations, such as invalid resource definitions, missing fields, or API version mismatches, before they impact your live environment.&lt;/li&gt; &#xA;  &lt;li&gt;Preview changes: Understand the objects that Kubernetes would create or modify during a real deployment.&lt;/li&gt; &#xA;  &lt;li&gt;Integrate with CI/CD: Incorporate dry-run as a step in your continuous integration and continuous delivery pipelines to automate pre-deployment checks and prevent faulty deployments.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;By providing this dry-run functionality, Meshery helps you increase the reliability and stability of your Kubernetes deployments by catching potential problems early in the development and deployment process.&lt;/p&gt; &#xA; &lt;!-- &#xA;Assess your cloud native infrastructure configuration against deployment and operational best practices with Meshery&#39;s configuration validator. Manage your workloads with confidence. Check your Kubernetes configuration for anti-patterns and avoid common pitfalls. --&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Visually and collaboratively manage your infrastructure&lt;/h3&gt; &#xA;&lt;p&gt;Using a GitOps-centric approach, visually and collaboratively design and manage your infrastructure and microservices. Meshery intelligently infers the manner in which each resource &lt;a href=&#34;https://docs.meshery.io/concepts/logical/relationships&#34;&gt;interrelates&lt;/a&gt; with each other. Meshery supports a broad variety of built-in relationships between components, which you can use to create your own custom relationships.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/edge_mount_relationship_pod_persistent_volume.svg?sanitize=true&#34; width=&#34;50%&#34; alt=&#34;Multi-cluster Kubernetes Manager&#34; align=&#34;center&#34;&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;img alt=&#34;OPA Logo&#34; src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/opa-logo.svg?sanitize=true&#34; style=&#34;margin-right:10px;&#34; width=&#34;25px&#34; align=&#34;left&#34;&gt;&lt;h4&gt;Context-Aware Policies For Applications&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;img alt=&#34;Meshery and Open Policy Agent Integration&#34; src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-policies-2.png&#34; style=&#34;margin:auto;text-align:center&#34; width=&#34;50%&#34;&gt; &#xA; &lt;p&gt;Leverage built-in relationships to enforce configuration best practices consistently from code to Kubernetes. Customize Configure your infrastructure with confidence without needing to know or write Open Policy Agent&#39;s Rego query language.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Workspaces: Your team&#39;s Google Drive for cloud native projects&lt;/h2&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/workspace.gif&#34; width=&#34;50%&#34; alt=&#34;Multi-cluster Kubernetes Manager&#34; loading=&#34;lazy&#34;&gt; &#xA;&lt;p&gt;Workspaces let you organize your work and serve as the central point of collaboration for you and your teams and point of access control to Environments and their resources.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h4&gt;Manage your connections with Environments&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/environments.gif&#34; width=&#34;50%&#34; alt=&#34;Multi-cluster Kubernetes Manager&#34; loading=&#34;lazy&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.meshery.io/concepts/logical/environments&#34;&gt;Environments&lt;/a&gt; make it easier for you to manage, share, and work with a collection of resources as a group, instead of dealing with all your Connections and Credentials on an individual basis.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h4&gt;See changes to your infra before you merge&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-snapshot.png&#34; width=&#34;50%&#34; alt=&#34;Multi-cluster Kubernetes Manager&#34; loading=&#34;lazy&#34; align=&#34;center&#34;&gt; &#xA; &lt;p&gt;Get snapshots of your infrastructure directly in your PRs. Preview your deployment, view changes pull request-to-pull request and get infrastructure snapshots within your PRs by connecting Kanvas to your GitHub repositories.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;!-- &lt;h3&gt;Operate with configuration best practices&lt;/h3&gt;&#xA;&lt;br /&gt;&lt;br /&gt;&#xA;&lt;p&gt;Assess your configurations against deployment and operational best practices with Meshery&#39;s configuration validator.&lt;/p&gt;&#xA;&lt;br /&gt;&lt;br /&gt;&#xA;&#xA;&lt;h3&gt;Control all of your infrastructure with mesheryctl&lt;/h3&gt;&#xA;&lt;br /&gt;&lt;br /&gt;&#xA;&lt;p&gt;Whether managing multiple Meshery deployments, importing designs, discoverying Kubernetes clusters, do so with ease using Meshery CLI in your terminal.&lt;/p&gt;&#xA;&lt;br /&gt;&lt;br /&gt; --&gt; &#xA;&lt;h2&gt;Platform Engineering with Meshery&#39;s Extension Points&lt;/h2&gt; &#xA;&lt;p&gt;Extend Meshery as your self-service engineering platform by taking advantage of its &lt;a href=&#34;https://docs.meshery.io/extensibility&#34;&gt;vast set of extensibility features&lt;/a&gt;, including gRPC adapters, hot-loadable Reactjs packages and Golang plugins, subscriptions on NATS topics, consumable &lt;em&gt;and&lt;/em&gt; extendable API interfaces via REST and GraphQL.The great number of extension points in Meshery make it ideal as the foundation of your internal developer platform.&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;&lt;h4&gt;Access the Cloud Native Patterns for Kubernetes&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Design and manage all of your cloud native infrastructure using the design configurator in Meshery or start from a template using the patterns from the &lt;a href=&#34;https://meshery.io/catalog&#34;&gt;catalog&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;/details&gt; &#xA;&lt;p&gt;Meshery offers robust capabilities for managing multiple tenants within a shared Kubernetes infrastructure. Meshery provides the tools and integrations necessary to create a secure, isolated, and manageable multi-tenant environments, allowing multiple teams or organizations with granular control over their role-based access controls.&lt;/p&gt; &#xA;&lt;p&gt;Meshery&#39;s &#34;multi-player&#34; functionality refers to its collaborative features that enable multiple users to interact with and manage cloud native infrastructure simultaneously. This is primarily facilitated through Kanvas, a Meshery extension visual designer and management interface.&lt;/p&gt; &#xA;&lt;h2&gt;Performance Management&lt;/h2&gt; &#xA;&lt;p&gt;Meshery offers load generation and performance characterization to help you assess and optimize the performance of your applications and infrastructure.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/performance-metrics.gif&#34; alt=&#34;Multi-cluster Kubernetes Manager&#34; width=&#34;50%&#34;&gt; &#xA;&lt;p&gt;Create and reuse performance profiles for consistent characterization of the configuration of your infrastructure in context of how it performs.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt; Manage the performance of your infrastructure and its workloads&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/meshery-performance.gif&#34;&gt; &#xA; &lt;p&gt;Baseline and track your cloud native performance from release to release.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Use performance profiles to track the historical performance of your workloads.&lt;/li&gt; &#xA;  &lt;li&gt;Track your application performance from version to version.&lt;/li&gt; &#xA;  &lt;li&gt;Understand behavioral differences between cloud native network functions.&lt;/li&gt; &#xA;  &lt;li&gt;Compare performance across infrastructure deployments.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;h4&gt;Load Generation and Microservice Performance Characteristization&lt;/h4&gt;&lt;/summary&gt; &#xA; &lt;picture align=&#34;left&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/layer5io/layer5/master/src/assets/images/service-mesh-performance/stacked/smp-light-text.svg&#34; width=&#34;18%&#34; align=&#34;left&#34; style=&#34;margin-left:10px;&#34;&gt; &#xA;  &lt;img alt=&#34;Shows an illustrated light mode meshery logo in light color mode and a dark mode meshery logo dark color mode.&#34; src=&#34;https://raw.githubusercontent.com/layer5io/layer5/master/src/assets/images/service-mesh-performance/stacked/smp-light-text.svg?sanitize=true&#34; width=&#34;18%&#34; align=&#34;left&#34; style=&#34;margin-left:10px;&#34;&gt; &#xA; &lt;/picture&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Multiple Load Generators:&lt;/strong&gt; Meshery supports various load generators, including Fortio, Wrk2, and Nighthawk, allowing users to choose the tool that best suits your needs.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Configurable Performance Profiles:&lt;/strong&gt; Meshery provides a highly configurable set of load profiles with tunable facets, enabling users to generate TCP, gRPC, and HTTP load. You can customize parameters such as duration, concurrent threads, concurrent generators, and load generator type.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Statistical Analysis:&lt;/strong&gt; Meshery performs statistical analysis on the results of performance tests, presenting data in the form of histograms with latency buckets. Understand the distribution of response times and identify potential bottlenecks.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Comparison of Test Results:&lt;/strong&gt; Meshery enables you to compare the difference in request performance (latency and throughput) between independent performance tests. Save your load test configurations as Performance Profiles, making it easy to rerun tests with the same settings and track performance variations over time.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;strong&gt;Kubernetes Cluster and Workload Metrics:&lt;/strong&gt; - Meshery connects to one or more Prometheus servers to gather both cluster and application metrics. Meshery also integrates with Grafana, allowing you to import your existing dashboards and visualize performance data.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;In an effort to produce infrastructure agnostic tooling, Meshery uses the &lt;a href=&#34;https://smp-spec.io&#34;&gt;Cloud Native Performance&lt;/a&gt; specification as a common format to capture and measure your infrastructure&#39;s performance against a universal cloud native performance index. Meshery participates in advancing cloud native infrastructure adoption through the standardization of APIs. Meshery enables you to measure the value provided by Docker, Kubernetes, or other cloud native infrastructure in the context of the overhead incurred.&lt;/p&gt; &#xA; &lt;!-- &#xA;&#xA;SCREENSHOT / GIF NEEDED HERE&#xA;&#xA;--&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;running&#34;&gt;&lt;/a&gt;Get Started with Meshery&lt;/h2&gt; &#xA;&lt;p style=&#34;clear:both;&#34;&gt;&lt;/p&gt; &#xA;&lt;!-- &lt;img alt=&#34;Control Kubernetes and your workloads with mesheryctl&#34; src=&#34;.github/assets/images/readme/mesheryctl.png&#34;  style=&#34;margin-left:10px; margin-bottom:10px;&#34; width=&#34;50%&#34; align=&#34;right&#34; /&gt; --&gt; &#xA;&lt;h3&gt;Using `mesheryctl`&lt;/h3&gt; &#xA;&lt;p&gt;Meshery runs as a set of containers inside or outside of your Kubernetes clusters.&lt;/p&gt; &#xA;&lt;pre&gt;curl -L https://meshery.io/install | bash -&lt;/pre&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://docs.meshery.io/installation/quick-start&#34;&gt;quick start&lt;/a&gt; guide.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;See all supported platforms&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;See the &lt;a href=&#34;https://meshery.io/#getting-started&#34;&gt;getting started&lt;/a&gt; section to quickly deploy Meshery on any of these supported platforms:&lt;/p&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Platform&lt;/th&gt; &#xA;    &lt;th align=&#34;center&#34;&gt;Supported?&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/docker&#34;&gt;Docker&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/docker&#34;&gt;Docker - Docker App&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/docker/docker-extensiongit&#34;&gt;Docker - Docker Extension&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/kubernetes.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes&#34;&gt;Kubernetes&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/aks.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes/aks&#34;&gt;Kubernetes - AKS&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/docker.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation#mac-or-linux&#34;&gt;Kubernetes - Docker Desktop&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/eks.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes/eks&#34;&gt;Kubernetes - EKS&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/gke.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes/gke&#34;&gt;Kubernetes - GKE&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/helm.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes/helm&#34;&gt;Kubernetes - Helm&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/kind.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes/kind&#34;&gt;Kubernetes - kind&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/minikube.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes/minikube&#34;&gt;Kubernetes - Minikube&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/openshift.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes&#34;&gt;Kubernetes - OpenShift&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/kubernetes.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/kubernetes&#34;&gt;Kubernetes - Rancher&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/linux.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation#mac-or-linux&#34;&gt;Linux&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/apple.svg?sanitize=true&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation#mac-or-linux&#34;&gt;Mac&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/homebrew.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation#mac-or-linux&#34;&gt;Mac - Homebrew&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/wsl2.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation#windows&#34;&gt;Windows&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/wsl2.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation#windows&#34;&gt;Scoop&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/wsl2.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; &lt;a href=&#34;https://docs.meshery.io/installation/platforms/windows#wsl2&#34;&gt;WSL2&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;✔️&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;img src=&#34;https://docs.meshery.io/assets/img/platforms/raspberry-pi.png&#34; width=&#34;20&#34; height=&#34;20&#34; vertical-align=&#34;middle&#34;&gt; Raspberry Pi&lt;/td&gt; &#xA;    &lt;td align=&#34;center&#34;&gt;In Progress&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://docs.meshery.io/installation&#34;&gt;Meshery documentation&lt;/a&gt; offers thorough installation guides for your platform of choice.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p style=&#34;clear:both;&#34;&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Join the Meshery community&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;a name=&#34;community&#34;&gt;&lt;/a&gt; Our projects are community-built and welcome collaboration. 👍 Be sure to see the &lt;a href=&#34;https://meshery.io/community&#34;&gt;Contributor Journey Map&lt;/a&gt; and &lt;a href=&#34;https://meshery.io/community#handbook&#34;&gt;Community Handbook&lt;/a&gt; for a tour of resources available to you and the &lt;a href=&#34;https://meshery.io/community/#handbook/repository-overview&#34;&gt;Repository Overview&lt;/a&gt; for a cursory description of repository by technology and programming language. Jump into community &lt;a href=&#34;https://slack.meshery.io&#34;&gt;Slack&lt;/a&gt; or &lt;a href=&#34;https://meshery.io/community#discussion-forums&#34;&gt;discussion forum&lt;/a&gt; to participate.&lt;/p&gt; &#xA;&lt;p style=&#34;clear:both;&#34;&gt; &lt;/p&gt;&#xA;&lt;h3&gt;Find your MeshMate&lt;/h3&gt; &#xA;&lt;p&gt;MeshMates are experienced Meshery community members, who will help you learn your way around, discover live projects, and expand your community network. Connect with a MeshMate today!&lt;/p&gt; &#xA;&lt;p&gt;Learn more about the &lt;a href=&#34;https://meshery.io/community#meshmates&#34;&gt;MeshMates&lt;/a&gt; program. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;div style=&#34;display: flex; justify-content: center; align-items:center;&#34;&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://meshery.io/community&#34;&gt;&lt;img alt=&#34;Meshery Community&#34; src=&#34;https://docs.meshery.io/assets/img/readme/community.png&#34; width=&#34;140px&#34; style=&#34;margin-right:36px; margin-bottom:7px;&#34; align=&#34;left&#34;&gt;&lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;div style=&#34;width:60%; padding-left: 16px; padding-right: 16px&#34;&gt; &#xA;  &lt;p&gt; ✔️ &lt;em&gt;&lt;strong&gt;Join&lt;/strong&gt;&lt;/em&gt; any or all of the weekly meetings on &lt;a href=&#34;https://meshery.io/calendar&#34;&gt;community calendar&lt;/a&gt;.&lt;br&gt; ✔️ &lt;em&gt;&lt;strong&gt;Watch&lt;/strong&gt;&lt;/em&gt; community &lt;a href=&#34;https://www.youtube.com/@mesheryio?sub_confirmation=1&#34;&gt;meeting recordings&lt;/a&gt;.&lt;br&gt; ✔️ &lt;em&gt;&lt;strong&gt;Fill-in&lt;/strong&gt;&lt;/em&gt; a &lt;a href=&#34;https://meshery.io/newcomers&#34;&gt;member form&lt;/a&gt; and gain access to community resources. &lt;br&gt; ✔️ &lt;em&gt;&lt;strong&gt;Discuss&lt;/strong&gt;&lt;/em&gt; in the &lt;a href=&#34;https://meshery.io/community#discussion-forums&#34;&gt;community forum&lt;/a&gt;.&lt;br&gt; ✔️ &lt;em&gt;&lt;strong&gt;Explore more&lt;/strong&gt;&lt;/em&gt; in the &lt;a href=&#34;https://meshery.io/community#handbook&#34;&gt;community handbook&lt;/a&gt;.&lt;br&gt; &lt;/p&gt; &#xA; &lt;/div&gt;&#xA; &lt;br&gt;&#xA; &lt;br&gt; &#xA; &lt;div&gt; &#xA;  &lt;a href=&#34;https://slack.meshery.io&#34;&gt; &#xA;   &lt;picture&gt; &#xA;    &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/slack.svg&#34; width=&#34;110px&#34;&gt; &#xA;    &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/slack.svg&#34; width=&#34;110px&#34;&gt; &#xA;    &lt;img alt=&#34;Shows an illustrated light mode meshery logo in light color mode and a dark mode meshery logo dark color mode.&#34; src=&#34;https://raw.githubusercontent.com/meshery/meshery/master/.github/assets/images/readme/slack.svg?sanitize=true&#34; width=&#34;110px&#34; align=&#34;left&#34;&gt; &#xA;   &lt;/picture&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; &lt;i&gt;Not sure where to start?&lt;/i&gt; Grab an open issue with the &lt;a href=&#34;https://github.com/issues?q=is%3Aopen%20is%3Aissue%20archived%3Afalse%20(org%3Ameshery%20OR%20org%3Aservice-mesh-performance%20OR%20org%3Aservice-mesh-patterns%20OR%20org%3Ameshery-extensions)%20label%3A%22help%20wanted%22%20&#34;&gt;help-wanted label&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please do! We&#39;re a warm and welcoming community of open source contributors. Please join. All types of contributions are welcome. Be sure to read the &lt;a href=&#34;https://docs.meshery.io/project/contributing&#34;&gt;Contributor Guides&lt;/a&gt; for a tour of resources available to you and how to get started.&lt;/p&gt; &#xA;&lt;!-- &lt;a href=&#34;https://youtu.be/MXQV-i-Hkf8&#34;&gt;&lt;img alt=&#34;Deploying Linkerd with Meshery&#34; src=&#34;https://docs.meshery.io/assets/img/readme/deploying-linkerd-with-meshery.png&#34; width=&#34;100%&#34; align=&#34;center&#34; /&gt;&lt;/a&gt; --&gt; &#xA;&lt;div&gt;&#xA; &amp;nbsp;&#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Stargazers&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;i&gt;If you like Meshery, please &lt;a href=&#34;https://raw.githubusercontent.com/meshery/stargazers&#34;&gt;★&lt;/a&gt; star this repository to show your support! 🤩&lt;/i&gt; &lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/meshery/stargazers&#34;&gt; &lt;img align=&#34;center&#34; src=&#34;https://api.star-history.com/svg?repos=meshery/meshery&amp;amp;type=Date&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;This repository and site are available as open-source under the terms of the &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;Apache 2.0 License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HumanSignal/label-studio</title>
    <updated>2025-07-01T01:51:05Z</updated>
    <id>tag:github.com,2025-07-01:/HumanSignal/label-studio</id>
    <link href="https://github.com/HumanSignal/label-studio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Label Studio is a multi-type data labeling and annotation tool with standardized output format&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/12534576/192582340-4c9e4401-1fe6-4dbb-95bb-fdbba5493f61.png&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/license/heartexlabs/label-studio?logo=heartex&#34; alt=&#34;GitHub&#34;&gt; &lt;img src=&#34;https://github.com/HumanSignal/label-studio/workflows/label-studio:build/badge.svg?sanitize=true&#34; alt=&#34;label-studio:build&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/heartexlabs/label-studio?include_prereleases&#34; alt=&#34;GitHub release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://labelstud.io/&#34;&gt;Website&lt;/a&gt; • &lt;a href=&#34;https://labelstud.io/guide/&#34;&gt;Docs&lt;/a&gt; • &lt;a href=&#34;https://slack.labelstud.io/?source=github-1&#34;&gt;Join Slack Community &lt;img src=&#34;https://app.heartex.ai/docs/images/slack-mini.png&#34; width=&#34;18px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Label Studio?&lt;/h2&gt; &#xA;&lt;!-- &lt;a href=&#34;https://labelstud.io/blog/release-130.html&#34;&gt;&lt;img src=&#34;https://github.com/HumanSignal/label-studio/raw/master/docs/themes/htx/source/images/release-130/LS-Hits-v1.3.png&#34; align=&#34;right&#34; /&gt;&lt;/a&gt; --&gt; &#xA;&lt;p&gt;Label Studio is an open source data labeling tool. It lets you label data types like audio, text, images, videos, and time series with a simple and straightforward UI and export to various model formats. It can be used to prepare raw data or improve existing training data to get more accurate ML models.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#try-out-label-studio&#34;&gt;Try out Label Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#what-you-get-from-label-studio&#34;&gt;What you get from Label Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#included-templates-for-labeling-data-in-label-studio&#34;&gt;Included templates for labeling data in Label Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#set-up-machine-learning-models-with-Label-Studio&#34;&gt;Set up machine learning models with Label Studio&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#integrate-label-studio-with-your-existing-tools&#34;&gt;Integrate Label Studio with your existing tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/images/annotation_examples.gif&#34; alt=&#34;Gif of Label Studio annotating different types of data&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Have a custom dataset? You can customize Label Studio to fit your needs. Read an &lt;a href=&#34;https://towardsdatascience.com/introducing-label-studio-a-swiss-army-knife-of-data-labeling-140c1be92881&#34;&gt;introductory blog post&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Try out Label Studio&lt;/h2&gt; &#xA;&lt;p&gt;Install Label Studio locally or deploy it in a cloud instance. &lt;a href=&#34;https://humansignal.com/platform/starter-cloud/&#34;&gt;Or sign up for a free trial of our Starter Cloud edition!&lt;/a&gt; You can learn more about what each edition offers &lt;a href=&#34;https://labelstud.io/guide/label_studio_compare&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-docker&#34;&gt;Install locally with Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#run-with-docker-compose&#34;&gt;Run with Docker Compose (Label Studio + Nginx + PostgreSQL)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-pip&#34;&gt;Install locally with pip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-poetry&#34;&gt;Install locally with poetry&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-locally-with-anaconda&#34;&gt;Install locally with Anaconda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#install-for-local-development&#34;&gt;Install for local development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/#deploy-in-a-cloud-instance&#34;&gt;Deploy in a cloud instance&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install locally with Docker&lt;/h3&gt; &#xA;&lt;p&gt;Official Label Studio docker image is &lt;a href=&#34;https://hub.docker.com/r/heartexlabs/label-studio&#34;&gt;here&lt;/a&gt; and it can be downloaded with &lt;code&gt;docker pull&lt;/code&gt;. Run Label Studio in a Docker container and access it at &lt;code&gt;http://localhost:8080&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull heartexlabs/label-studio:latest&#xA;docker run -it -p 8080:8080 -v $(pwd)/mydata:/label-studio/data heartexlabs/label-studio:latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find all the generated assets, including SQLite3 database storage &lt;code&gt;label_studio.sqlite3&lt;/code&gt; and uploaded files, in the &lt;code&gt;./mydata&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h4&gt;Override default Docker install&lt;/h4&gt; &#xA;&lt;p&gt;You can override the default launch command by appending the new arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -it -p 8080:8080 -v $(pwd)/mydata:/label-studio/data heartexlabs/label-studio:latest label-studio --log-level DEBUG&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Build a local image with Docker&lt;/h4&gt; &#xA;&lt;p&gt;If you want to build a local image, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker build -t heartexlabs/label-studio:latest .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run with Docker Compose&lt;/h3&gt; &#xA;&lt;p&gt;Docker Compose script provides production-ready stack consisting of the following components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Label Studio&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nginx.com/&#34;&gt;Nginx&lt;/a&gt; - proxy web server used to load various static data, including uploaded audio, images, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt; - production-ready database that replaces less performant SQLite3.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To start using the app from &lt;code&gt;http://localhost&lt;/code&gt; run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run with Docker Compose + MinIO&lt;/h3&gt; &#xA;&lt;p&gt;You can also run it with an additional MinIO server for local S3 storage. This is particularly useful when you want to test the behavior with S3 storage on your local system. To start Label Studio in this way, you need to run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Add sudo on Linux if you are not a member of the docker group&#xA;docker compose -f docker-compose.yml -f docker-compose.minio.yml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not have a static IP address, you must create an entry in your hosts file so that both Label Studio and your browser can access the MinIO server. For more detailed instructions, please refer to &lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/docs/source/guide/storedata.md&#34;&gt;our guide on storing data&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Install locally with pip&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Requires Python &amp;gt;=3.8&#xA;pip install label-studio&#xA;&#xA;# Start the server at http://localhost:8080&#xA;label-studio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install locally with poetry&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;### install poetry&#xA;pip install poetry&#xA;&#xA;### set poetry environment&#xA;poetry new my-label-studio&#xA;cd my-label-studio&#xA;poetry add label-studio&#xA;&#xA;### activate poetry environment&#xA;poetry shell&#xA;&#xA;### Start the server at http://localhost:8080&#xA;label-studio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install locally with Anaconda&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create --name label-studio&#xA;conda activate label-studio&#xA;conda install psycopg2&#xA;pip install label-studio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install for local development&lt;/h3&gt; &#xA;&lt;p&gt;You can run the latest Label Studio version locally without installing the package from pypi.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install all package dependencies&#xA;pip install poetry&#xA;poetry install&#xA;# Run database migrations&#xA;python label_studio/manage.py migrate&#xA;python label_studio/manage.py collectstatic&#xA;# Start the server in development mode at http://localhost:8080&#xA;python label_studio/manage.py runserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploy in a cloud instance&lt;/h3&gt; &#xA;&lt;p&gt;You can deploy Label Studio with one click in Heroku, Microsoft Azure, or Google Cloud Platform:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.heroku.com/deploy?template=https://github.com/HumanSignal/label-studio/tree/heroku-persistent-pg&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy&#34; height=&#34;30px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3A%2F%2Fraw.githubusercontent.com%2Fhumansignal%2Flabel-studio%2Fdevelop%2Fazuredeploy.json&#34;&gt;&lt;img src=&#34;https://aka.ms/deploytoazurebutton&#34; height=&#34;30px&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deploy.cloud.run&#34;&gt;&lt;img src=&#34;https://deploy.cloud.run/button.svg?sanitize=true&#34; height=&#34;30px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Apply frontend changes&lt;/h4&gt; &#xA;&lt;p&gt;For information about updating the frontend, see &lt;a href=&#34;https://github.com/HumanSignal/label-studio/raw/develop/web/README.md#installation-instructions&#34;&gt;label-studio/web/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Install dependencies on Windows&lt;/h4&gt; &#xA;&lt;p&gt;To run Label Studio on Windows, download and install the following wheel packages from &lt;a href=&#34;https://www.lfd.uci.edu/~gohlke/pythonlibs&#34;&gt;Gohlke builds&lt;/a&gt; to ensure you&#39;re using the correct version of Python:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.lfd.uci.edu/~gohlke/pythonlibs/#lxml&#34;&gt;lxml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Upgrade pip &#xA;pip install -U pip&#xA;&#xA;# If you&#39;re running Win64 with Python 3.8, install the packages downloaded from Gohlke:&#xA;pip install lxml‑4.5.0‑cp38‑cp38‑win_amd64.whl&#xA;&#xA;# Install label studio&#xA;pip install label-studio&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run test suite&lt;/h3&gt; &#xA;&lt;p&gt;To add the tests&#39; dependencies to your local install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;poetry install --with test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, it is possible to run the unit tests from a Docker container in which the test dependencies are installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make build-testing-image&#xA;make docker-testing-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In either case, to run the unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd label_studio&#xA;&#xA;# sqlite3&#xA;DJANGO_DB=sqlite DJANGO_SETTINGS_MODULE=core.settings.label_studio pytest -vv&#xA;&#xA;# postgres (assumes default postgres user,db,pass. Will not work in Docker&#xA;# testing container without additional configuration)&#xA;DJANGO_DB=default DJANGO_SETTINGS_MODULE=core.settings.label_studio pytest -vv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What you get from Label Studio&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/525ad5ff-6904-4398-b507-7e8954268d69&#34;&gt;https://github.com/user-attachments/assets/525ad5ff-6904-4398-b507-7e8954268d69&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multi-user labeling&lt;/strong&gt; sign up and login, when you create an annotation it&#39;s tied to your account.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiple projects&lt;/strong&gt; to work on all your datasets in one instance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Streamlined design&lt;/strong&gt; helps you focus on your task, not how to use the software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Configurable label formats&lt;/strong&gt; let you customize the visual interface to meet your specific labeling needs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Support for multiple data types&lt;/strong&gt; including images, audio, text, HTML, time-series, and video.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Import from files or from cloud storage&lt;/strong&gt; in Amazon AWS S3, Google Cloud Storage, or JSON, CSV, TSV, RAR, and ZIP archives.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Integration with machine learning models&lt;/strong&gt; so that you can visualize and compare predictions from different models and perform pre-labeling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embed it in your data pipeline&lt;/strong&gt; REST API makes it easy to make it a part of your pipeline&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Included templates for labeling data in Label Studio&lt;/h2&gt; &#xA;&lt;p&gt;Label Studio includes a variety of templates to help you label your data, or you can create your own using specifically designed configuration language. The most common templates and use cases for labeling include the following cases:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/images/template-types.png&#34;&gt; &#xA;&lt;h2&gt;Set up machine learning models with Label Studio&lt;/h2&gt; &#xA;&lt;p&gt;Connect your favorite machine learning model using the Label Studio Machine Learning SDK. Follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start your own machine learning backend server. See &lt;a href=&#34;https://github.com/HumanSignal/label-studio-ml-backend&#34;&gt;more detailed instructions&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Connect Label Studio to the server on the model page found in project settings.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This lets you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pre-label&lt;/strong&gt; your data using model predictions.&lt;/li&gt; &#xA; &lt;li&gt;Do &lt;strong&gt;online learning&lt;/strong&gt; and retrain your model while new annotations are being created.&lt;/li&gt; &#xA; &lt;li&gt;Do &lt;strong&gt;active learning&lt;/strong&gt; by labeling only the most complex examples in your data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Integrate Label Studio with your existing tools&lt;/h2&gt; &#xA;&lt;p&gt;You can use Label Studio as an independent part of your machine learning workflow or integrate the frontend or backend into your existing tools.&lt;/p&gt; &#xA;&lt;h2&gt;Ecosystem&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;label-studio&lt;/td&gt; &#xA;   &lt;td&gt;Server, distributed as a pip package&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/web/libs/editor/&#34;&gt;Frontend library&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The Label Studio frontend library. This uses React to build the UI and mobx-state-tree for state management.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/web/libs/datamanager/&#34;&gt;Data Manager library&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A library for the Data Manager, our data exploration tool.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/HumanSignal/label-studio-sdk/tree/master/src/label_studio_sdk/converter&#34;&gt;label-studio-converter&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Encode labels in the format of your favorite machine learning library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/HumanSignal/label-studio-transformers&#34;&gt;label-studio-transformers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Transformers library connected and configured for use with Label Studio&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;Include a citation for Label Studio in the &lt;strong&gt;References&lt;/strong&gt; section of your articles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tex&#34;&gt;@misc{Label Studio,&#xA;  title={{Label Studio}: Data labeling software},&#xA;  url={https://github.com/HumanSignal/label-studio},&#xA;  note={Open source software available from https://github.com/HumanSignal/label-studio},&#xA;  author={&#xA;    Maxim Tkachenko and&#xA;    Mikhail Malyuk and&#xA;    Andrey Holmanyuk and&#xA;    Nikolai Liubimov},&#xA;  year={2020-2025},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This software is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/HumanSignal/label-studio/develop/LICENSE&#34;&gt;Apache 2.0 LICENSE&lt;/a&gt; © &lt;a href=&#34;https://www.heartex.com/&#34;&gt;Heartex&lt;/a&gt;. 2020-2025&lt;/p&gt; &#xA;&lt;img src=&#34;https://user-images.githubusercontent.com/12534576/192582529-cf628f58-abc5-479b-a0d4-8a3542a4b35e.png&#34; title=&#34;Hey everyone!&#34; width=&#34;180&#34;&gt;</summary>
  </entry>
  <entry>
    <title>danielmiessler/Fabric</title>
    <updated>2025-07-01T01:51:05Z</updated>
    <id>tag:github.com,2025-07-01:/danielmiessler/Fabric</id>
    <link href="https://github.com/danielmiessler/Fabric" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fabric is an open-source framework for augmenting humans using AI. It provides a modular system for solving specific problems using a crowdsourced set of AI prompts that can be used anywhere.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA;  Fabric is graciously supported by… &#xA; &lt;p&gt;&lt;a href=&#34;https://warp.dev/fabric&#34;&gt;&lt;img src=&#34;https://github.com/user-attachments/assets/96ab3d81-9b13-4df4-ba09-75dee7a5c3d2&#34; alt=&#34;Github Repo Tagline&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/images/fabric-logo-gif.gif&#34; alt=&#34;fabriclogo&#34; width=&#34;400&#34; height=&#34;400&#34;&gt; &#xA; &lt;h1&gt;&lt;code&gt;fabric&lt;/code&gt;&lt;/h1&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/mission-human_flourishing_via_AI_augmentation-purple&#34; alt=&#34;Static Badge&#34;&gt; &lt;br&gt; &lt;img src=&#34;https://img.shields.io/github/languages/top/danielmiessler/fabric&#34; alt=&#34;GitHub top language&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/last-commit/danielmiessler/fabric&#34; alt=&#34;GitHub last commit&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?sanitize=true&#34; alt=&#34;License: MIT&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepwiki.com/danielmiessler/fabric&#34;&gt;&lt;img src=&#34;https://deepwiki.com/badge.svg?sanitize=true&#34; alt=&#34;Ask DeepWiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;div align=&#34;center&#34;&gt; &#xA;  &lt;p class=&#34;align center&#34;&gt; &lt;/p&gt;&#xA;  &lt;h4&gt;&lt;code&gt;fabric&lt;/code&gt; is an open-source framework for augmenting humans using AI.&lt;/h4&gt; &#xA;  &lt;p&gt;&lt;/p&gt; &#xA; &lt;/div&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#updates&#34;&gt;Updates&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#what-and-why&#34;&gt;What and Why&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#philosophy&#34;&gt;Philosophy&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#usage&#34;&gt;Usage&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#examples&#34;&gt;Examples&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#just-use-the-patterns&#34;&gt;Just Use the Patterns&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#custom-patterns&#34;&gt;Custom Patterns&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#helper-apps&#34;&gt;Helper Apps&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#meta&#34;&gt;Meta&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/images/fabric-summarize.png&#34; alt=&#34;Screenshot of fabric&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What and why&lt;/h2&gt; &#xA;&lt;p&gt;Since the start of modern AI in late 2022 we&#39;ve seen an &lt;strong&gt;&lt;em&gt;extraordinary&lt;/em&gt;&lt;/strong&gt; number of AI applications for accomplishing tasks. There are thousands of websites, chat-bots, mobile apps, and other interfaces for using all the different AI out there.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s all really exciting and powerful, but &lt;em&gt;it&#39;s not easy to integrate this functionality into our lives.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p class=&#34;align center&#34;&gt; &lt;/p&gt;&#xA;&lt;h4&gt;In other words, AI doesn&#39;t have a capabilities problem—it has an &lt;em&gt;integration&lt;/em&gt; problem.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Fabric was created to address this by creating and organizing the fundamental units of AI—the prompts themselves!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fabric organizes prompts by real-world task, allowing people to create, collect, and organize their most important AI solutions in a single place for use in their favorite tools. And if you&#39;re command-line focused, you can use Fabric itself as the interface!&lt;/p&gt; &#xA;&lt;h2&gt;Intro videos&lt;/h2&gt; &#xA;&lt;p&gt;Keep in mind that many of these were recorded when Fabric was Python-based, so remember to use the current &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installation&#34;&gt;install instructions&lt;/a&gt; below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UbDyjIIGaxQ&#34;&gt;Network Chuck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=vF-MQmVxnCs&#34;&gt;David Bombal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=wPEyyigh10g&#34;&gt;My Own Intro to the Tool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/results?search_query=fabric+ai&#34;&gt;More Fabric YouTube Videos&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Navigation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#fabric&#34;&gt;&lt;code&gt;fabric&lt;/code&gt;&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#what-and-why&#34;&gt;What and why&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#intro-videos&#34;&gt;Intro videos&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#navigation&#34;&gt;Navigation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#updates&#34;&gt;Updates&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#philosophy&#34;&gt;Philosophy&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#breaking-problems-into-components&#34;&gt;Breaking problems into components&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#too-many-prompts&#34;&gt;Too many prompts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#get-latest-release-binaries&#34;&gt;Get Latest Release Binaries&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#macos-arm64&#34;&gt;macOS (arm64)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#macos-amd64&#34;&gt;macOS (amd64)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#linux-amd64&#34;&gt;Linux (amd64)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#linux-arm64&#34;&gt;Linux (arm64)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#using-package-managers&#34;&gt;Using package managers&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#macos-homebrew&#34;&gt;macOS (Homebrew)&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#arch-linux-aur&#34;&gt;Arch Linux (AUR)&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#from-source&#34;&gt;From Source&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#add-aliases-for-all-patterns&#34;&gt;Add aliases for all patterns&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#save-your-files-in-markdown-using-aliases&#34;&gt;Save your files in markdown using aliases&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#migration&#34;&gt;Migration&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#upgrading&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#shell-completions&#34;&gt;Shell Completions&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#zsh-completion&#34;&gt;Zsh Completion&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#bash-completion&#34;&gt;Bash Completion&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#fish-completion&#34;&gt;Fish Completion&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#our-approach-to-prompting&#34;&gt;Our approach to prompting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#just-use-the-patterns&#34;&gt;Just use the Patterns&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#prompt-strategies&#34;&gt;Prompt Strategies&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#custom-patterns&#34;&gt;Custom Patterns&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#helper-apps&#34;&gt;Helper Apps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#to_pdf&#34;&gt;&lt;code&gt;to_pdf&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#to_pdf-installation&#34;&gt;&lt;code&gt;to_pdf&lt;/code&gt; Installation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#code_helper&#34;&gt;&lt;code&gt;code_helper&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#pbpaste&#34;&gt;pbpaste&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#web-interface&#34;&gt;Web Interface&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#streamlit-ui&#34;&gt;Streamlit UI&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#clipboard-support&#34;&gt;Clipboard Support&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#meta&#34;&gt;Meta&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#primary-contributors&#34;&gt;Primary contributors&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Updates&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;/p&gt; &#xA; &lt;p&gt;June 17, 2025&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt; &lt;p&gt;Fabric now supports Perplexity AI. Configure it by using &lt;code&gt;fabric -S&lt;/code&gt; to add your Perplexity AI API Key, and then try:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -m sonar-pro &#34;What is the latest world news?&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;June 11, 2025&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Fabric&#39;s YouTube transcription now needs &lt;code&gt;yt-dlp&lt;/code&gt; to be installed. Make sure to install the latest version (2025.06.09 as of this note). The YouTube API key is only needed for comments (the &lt;code&gt;--comments&lt;/code&gt; flag) and metadata extraction (the &lt;code&gt;--metadata&lt;/code&gt; flag).&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;AI isn&#39;t a thing; it&#39;s a &lt;em&gt;magnifier&lt;/em&gt; of a thing. And that thing is &lt;strong&gt;human creativity&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We believe the purpose of technology is to help humans flourish, so when we talk about AI we start with the &lt;strong&gt;human&lt;/strong&gt; problems we want to solve.&lt;/p&gt; &#xA;&lt;h3&gt;Breaking problems into components&lt;/h3&gt; &#xA;&lt;p&gt;Our approach is to break problems into individual pieces (see below) and then apply AI to them one at a time. See below for some examples.&lt;/p&gt; &#xA;&lt;img width=&#34;2078&#34; alt=&#34;augmented_challenges&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/31997394-85a9-40c2-879b-b347e4701f06&#34;&gt; &#xA;&lt;h3&gt;Too many prompts&lt;/h3&gt; &#xA;&lt;p&gt;Prompts are good for this, but the biggest challenge I faced in 2023——which still exists today—is &lt;strong&gt;the sheer number of AI prompts out there&lt;/strong&gt;. We all have prompts that are useful, but it&#39;s hard to discover new ones, know if they are good or not, &lt;em&gt;and manage different versions of the ones we like&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;One of &lt;code&gt;fabric&lt;/code&gt;&#39;s primary features is helping people collect and integrate prompts, which we call &lt;em&gt;Patterns&lt;/em&gt;, into various parts of their lives.&lt;/p&gt; &#xA;&lt;p&gt;Fabric has Patterns for all sorts of life and work activities, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Extracting the most interesting parts of YouTube videos and podcasts&lt;/li&gt; &#xA; &lt;li&gt;Writing an essay in your own voice with just an idea as an input&lt;/li&gt; &#xA; &lt;li&gt;Summarizing opaque academic papers&lt;/li&gt; &#xA; &lt;li&gt;Creating perfectly matched AI art prompts for a piece of writing&lt;/li&gt; &#xA; &lt;li&gt;Rating the quality of content to see if you want to read/watch the whole thing&lt;/li&gt; &#xA; &lt;li&gt;Getting summaries of long, boring content&lt;/li&gt; &#xA; &lt;li&gt;Explaining code to you&lt;/li&gt; &#xA; &lt;li&gt;Turning bad documentation into usable documentation&lt;/li&gt; &#xA; &lt;li&gt;Creating social media posts from any content input&lt;/li&gt; &#xA; &lt;li&gt;And a million more…&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To install Fabric, you can use the latest release binaries or install it from the source.&lt;/p&gt; &#xA;&lt;h3&gt;Get Latest Release Binaries&lt;/h3&gt; &#xA;&lt;h4&gt;Windows&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;https://github.com/danielmiessler/fabric/releases/latest/download/fabric-windows-amd64.exe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;macOS (arm64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-darwin-arm64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;macOS (amd64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-darwin-amd64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Linux (amd64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-linux-amd64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Linux (arm64)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;curl -L https://github.com/danielmiessler/fabric/releases/latest/download/fabric-linux-arm64 &amp;gt; fabric &amp;amp;&amp;amp; chmod +x fabric &amp;amp;&amp;amp; ./fabric --version&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Using package managers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; using Homebrew or the Arch Linux package managers makes &lt;code&gt;fabric&lt;/code&gt; available as &lt;code&gt;fabric-ai&lt;/code&gt;, so add the following alias to your shell startup files to account for this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alias fabric=&#39;fabric-ai&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;macOS (Homebrew)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;brew install fabric-ai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Arch Linux (AUR)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;yay -S fabric-ai&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;From Source&lt;/h3&gt; &#xA;&lt;p&gt;To install Fabric, &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;make sure Go is installed&lt;/a&gt;, and then run the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install Fabric directly from the repo&#xA;go install github.com/danielmiessler/fabric@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Environment Variables&lt;/h3&gt; &#xA;&lt;p&gt;You may need to set some environment variables in your &lt;code&gt;~/.bashrc&lt;/code&gt; on linux or &lt;code&gt;~/.zshrc&lt;/code&gt; file on mac to be able to run the &lt;code&gt;fabric&lt;/code&gt; command. Here is an example of what you can add:&lt;/p&gt; &#xA;&lt;p&gt;For Intel based macs or linux&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Golang environment variables&#xA;export GOROOT=/usr/local/go&#xA;export GOPATH=$HOME/go&#xA;&#xA;# Update PATH to include GOPATH and GOROOT binaries&#xA;export PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for Apple Silicon based macs&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Golang environment variables&#xA;export GOROOT=$(brew --prefix go)/libexec&#xA;export GOPATH=$HOME/go&#xA;export PATH=$GOPATH/bin:$GOROOT/bin:$HOME/.local/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Now run the following command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the setup to set up your directories and keys&#xA;fabric --setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything works you are good to go.&lt;/p&gt; &#xA;&lt;h3&gt;Add aliases for all patterns&lt;/h3&gt; &#xA;&lt;p&gt;In order to add aliases for all your patterns and use them directly as commands ie. &lt;code&gt;summarize&lt;/code&gt; instead of &lt;code&gt;fabric --pattern summarize&lt;/code&gt; You can add the following to your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Loop through all files in the ~/.config/fabric/patterns directory&#xA;for pattern_file in $HOME/.config/fabric/patterns/*; do&#xA;    # Get the base name of the file (i.e., remove the directory path)&#xA;    pattern_name=$(basename &#34;$pattern_file&#34;)&#xA;&#xA;    # Create an alias in the form: alias pattern_name=&#34;fabric --pattern pattern_name&#34;&#xA;    alias_command=&#34;alias $pattern_name=&#39;fabric --pattern $pattern_name&#39;&#34;&#xA;&#xA;    # Evaluate the alias command to add it to the current shell&#xA;    eval &#34;$alias_command&#34;&#xA;done&#xA;&#xA;yt() {&#xA;    if [ &#34;$#&#34; -eq 0 ] || [ &#34;$#&#34; -gt 2 ]; then&#xA;        echo &#34;Usage: yt [-t | --timestamps] youtube-link&#34;&#xA;        echo &#34;Use the &#39;-t&#39; flag to get the transcript with timestamps.&#34;&#xA;        return 1&#xA;    fi&#xA;&#xA;    transcript_flag=&#34;--transcript&#34;&#xA;    if [ &#34;$1&#34; = &#34;-t&#34; ] || [ &#34;$1&#34; = &#34;--timestamps&#34; ]; then&#xA;        transcript_flag=&#34;--transcript-with-timestamps&#34;&#xA;        shift&#xA;    fi&#xA;    local video_link=&#34;$1&#34;&#xA;    fabric -y &#34;$video_link&#34; $transcript_flag&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add the below code for the equivalent aliases inside PowerShell by running &lt;code&gt;notepad $PROFILE&lt;/code&gt; inside a PowerShell window:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Path to the patterns directory&#xA;$patternsPath = Join-Path $HOME &#34;.config/fabric/patterns&#34;&#xA;foreach ($patternDir in Get-ChildItem -Path $patternsPath -Directory) {&#xA;    $patternName = $patternDir.Name&#xA;&#xA;    # Dynamically define a function for each pattern&#xA;    $functionDefinition = @&#34;&#xA;function $patternName {&#xA;    [CmdletBinding()]&#xA;    param(&#xA;        [Parameter(ValueFromPipeline = `$true)]&#xA;        [string] `$InputObject,&#xA;&#xA;        [Parameter(ValueFromRemainingArguments = `$true)]&#xA;        [String[]] `$patternArgs&#xA;    )&#xA;&#xA;    begin {&#xA;        # Initialize an array to collect pipeline input&#xA;        `$collector = @()&#xA;    }&#xA;&#xA;    process {&#xA;        # Collect pipeline input objects&#xA;        if (`$InputObject) {&#xA;            `$collector += `$InputObject&#xA;        }&#xA;    }&#xA;&#xA;    end {&#xA;        # Join all pipeline input into a single string, separated by newlines&#xA;        `$pipelineContent = `$collector -join &#34;`n&#34;&#xA;&#xA;        # If there&#39;s pipeline input, include it in the call to fabric&#xA;        if (`$pipelineContent) {&#xA;            `$pipelineContent | fabric --pattern $patternName `$patternArgs&#xA;        } else {&#xA;            # No pipeline input; just call fabric with the additional args&#xA;            fabric --pattern $patternName `$patternArgs&#xA;        }&#xA;    }&#xA;}&#xA;&#34;@&#xA;    # Add the function to the current session&#xA;    Invoke-Expression $functionDefinition&#xA;}&#xA;&#xA;# Define the &#39;yt&#39; function as well&#xA;function yt {&#xA;    [CmdletBinding()]&#xA;    param(&#xA;        [Parameter()]&#xA;        [Alias(&#34;timestamps&#34;)]&#xA;        [switch]$t,&#xA;&#xA;        [Parameter(Position = 0, ValueFromPipeline = $true)]&#xA;        [string]$videoLink&#xA;    )&#xA;&#xA;    begin {&#xA;        $transcriptFlag = &#34;--transcript&#34;&#xA;        if ($t) {&#xA;            $transcriptFlag = &#34;--transcript-with-timestamps&#34;&#xA;        }&#xA;    }&#xA;&#xA;    process {&#xA;        if (-not $videoLink) {&#xA;            Write-Error &#34;Usage: yt [-t | --timestamps] youtube-link&#34;&#xA;            return&#xA;        }&#xA;    }&#xA;&#xA;    end {&#xA;        if ($videoLink) {&#xA;            # Execute and allow output to flow through the pipeline&#xA;            fabric -y $videoLink $transcriptFlag&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This also creates a &lt;code&gt;yt&lt;/code&gt; alias that allows you to use &lt;code&gt;yt https://www.youtube.com/watch?v=4b0iet22VIk&lt;/code&gt; to get transcripts, comments, and metadata.&lt;/p&gt; &#xA;&lt;h4&gt;Save your files in markdown using aliases&lt;/h4&gt; &#xA;&lt;p&gt;If in addition to the above aliases you would like to have the option to save the output to your favorite markdown note vault like Obsidian then instead of the above add the following to your &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Define the base directory for Obsidian notes&#xA;obsidian_base=&#34;/path/to/obsidian&#34;&#xA;&#xA;# Loop through all files in the ~/.config/fabric/patterns directory&#xA;for pattern_file in ~/.config/fabric/patterns/*; do&#xA;    # Get the base name of the file (i.e., remove the directory path)&#xA;    pattern_name=$(basename &#34;$pattern_file&#34;)&#xA;&#xA;    # Remove any existing alias with the same name&#xA;    unalias &#34;$pattern_name&#34; 2&amp;gt;/dev/null&#xA;&#xA;    # Define a function dynamically for each pattern&#xA;    eval &#34;&#xA;    $pattern_name() {&#xA;        local title=\$1&#xA;        local date_stamp=\$(date +&#39;%Y-%m-%d&#39;)&#xA;        local output_path=\&#34;\$obsidian_base/\${date_stamp}-\${title}.md\&#34;&#xA;&#xA;        # Check if a title was provided&#xA;        if [ -n \&#34;\$title\&#34; ]; then&#xA;            # If a title is provided, use the output path&#xA;            fabric --pattern \&#34;$pattern_name\&#34; -o \&#34;\$output_path\&#34;&#xA;        else&#xA;            # If no title is provided, use --stream&#xA;            fabric --pattern \&#34;$pattern_name\&#34; --stream&#xA;        fi&#xA;    }&#xA;    &#34;&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will allow you to use the patterns as aliases like in the above for example &lt;code&gt;summarize&lt;/code&gt; instead of &lt;code&gt;fabric --pattern summarize --stream&lt;/code&gt;, however if you pass in an extra argument like this &lt;code&gt;summarize &#34;my_article_title&#34;&lt;/code&gt; your output will be saved in the destination that you set in &lt;code&gt;obsidian_base=&#34;/path/to/obsidian&#34;&lt;/code&gt; in the following format &lt;code&gt;YYYY-MM-DD-my_article_title.md&lt;/code&gt; where the date gets autogenerated for you. You can tweak the date format by tweaking the &lt;code&gt;date_stamp&lt;/code&gt; format.&lt;/p&gt; &#xA;&lt;h3&gt;Migration&lt;/h3&gt; &#xA;&lt;p&gt;If you have the Legacy (Python) version installed and want to migrate to the Go version, here&#39;s how you do it. It&#39;s basically two steps: 1) uninstall the Python version, and 2) install the Go version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Uninstall Legacy Fabric&#xA;pipx uninstall fabric&#xA;&#xA;# Clear any old Fabric aliases&#xA;(check your .bashrc, .zshrc, etc.)&#xA;# Install the Go version&#xA;go install github.com/danielmiessler/fabric@latest&#xA;# Run setup for the new version. Important because things have changed&#xA;fabric --setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#environment-variables&#34;&gt;set your environmental variables&lt;/a&gt; as shown above.&lt;/p&gt; &#xA;&lt;h3&gt;Upgrading&lt;/h3&gt; &#xA;&lt;p&gt;The great thing about Go is that it&#39;s super easy to upgrade. Just run the same command you used to install it in the first place and you&#39;ll always get the latest version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/danielmiessler/fabric@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shell Completions&lt;/h3&gt; &#xA;&lt;p&gt;Fabric provides shell completion scripts for Zsh, Bash, and Fish shells, making it easier to use the CLI by providing tab completion for commands and options.&lt;/p&gt; &#xA;&lt;h4&gt;Zsh Completion&lt;/h4&gt; &#xA;&lt;p&gt;To enable Zsh completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Copy the completion file to a directory in your $fpath&#xA;mkdir -p ~/.zsh/completions&#xA;cp completions/_fabric ~/.zsh/completions/&#xA;&#xA;# Add the directory to fpath in your .zshrc before compinit&#xA;echo &#39;fpath=(~/.zsh/completions $fpath)&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;echo &#39;autoload -Uz compinit &amp;amp;&amp;amp; compinit&#39; &amp;gt;&amp;gt; ~/.zshrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bash Completion&lt;/h4&gt; &#xA;&lt;p&gt;To enable Bash completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Source the completion script in your .bashrc&#xA;echo &#39;source /path/to/fabric/completions/fabric.bash&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&#xA;# Or copy to the system-wide bash completion directory&#xA;sudo cp completions/fabric.bash /etc/bash_completion.d/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Fish Completion&lt;/h4&gt; &#xA;&lt;p&gt;To enable Fish completion:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Copy the completion file to the fish completions directory&#xA;mkdir -p ~/.config/fish/completions&#xA;cp completions/fabric.fish ~/.config/fish/completions/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once you have it all set up, here&#39;s how to use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-plaintext&#34;&gt;&#xA;Usage:&#xA;  fabric [OPTIONS]&#xA;&#xA;Application Options:&#xA;  -p, --pattern=                    Choose a pattern from the available patterns&#xA;  -v, --variable=                   Values for pattern variables, e.g. -v=#role:expert -v=#points:30&#xA;  -C, --context=                    Choose a context from the available contexts&#xA;      --session=                    Choose a session from the available sessions&#xA;  -a, --attachment=                 Attachment path or URL (e.g. for OpenAI image recognition messages)&#xA;  -S, --setup                       Run setup for all reconfigurable parts of fabric&#xA;  -t, --temperature=                Set temperature (default: 0.7)&#xA;  -T, --topp=                       Set top P (default: 0.9)&#xA;  -s, --stream                      Stream&#xA;  -P, --presencepenalty=            Set presence penalty (default: 0.0)&#xA;  -r, --raw                         Use the defaults of the model without sending chat options (like temperature etc.) and use the user role instead of the system role for patterns.&#xA;  -F, --frequencypenalty=           Set frequency penalty (default: 0.0)&#xA;  -l, --listpatterns                List all patterns&#xA;  -L, --listmodels                  List all available models&#xA;  -x, --listcontexts                List all contexts&#xA;  -X, --listsessions                List all sessions&#xA;  -U, --updatepatterns              Update patterns&#xA;  -c, --copy                        Copy to clipboard&#xA;  -m, --model=                      Choose model&#xA;      --modelContextLength=         Model context length (only affects ollama)&#xA;  -o, --output=                     Output to file&#xA;      --output-session              Output the entire session (also a temporary one) to the output file&#xA;  -n, --latest=                     Number of latest patterns to list (default: 0)&#xA;  -d, --changeDefaultModel          Change default model&#xA;  -y, --youtube=                    YouTube video or play list &#34;URL&#34; to grab transcript, comments from it and send to chat or print it put to the console and store it in the output file&#xA;      --playlist                    Prefer playlist over video if both ids are present in the URL&#xA;      --transcript                  Grab transcript from YouTube video and send to chat (it is used per default).&#xA;      --transcript-with-timestamps  Grab transcript from YouTube video with timestamps and send to chat&#xA;      --comments                    Grab comments from YouTube video and send to chat&#xA;      --metadata                    Output video metadata&#xA;  -g, --language=                   Specify the Language Code for the chat, e.g. -g=en -g=zh&#xA;  -u, --scrape_url=                 Scrape website URL to markdown using Jina AI&#xA;  -q, --scrape_question=            Search question using Jina AI&#xA;  -e, --seed=                       Seed to be used for LMM generation&#xA;  -w, --wipecontext=                Wipe context&#xA;  -W, --wipesession=                Wipe session&#xA;      --printcontext=               Print context&#xA;      --printsession=               Print session&#xA;      --readability                 Convert HTML input into a clean, readable view&#xA;      --input-has-vars              Apply variables to user input&#xA;      --dry-run                     Show what would be sent to the model without actually sending it&#xA;      --serve                       Serve the Fabric Rest API&#xA;      --serveOllama                 Serve the Fabric Rest API with ollama endpoints&#xA;      --address=                    The address to bind the REST API (default: :8080)&#xA;      --api-key=                    API key used to secure server routes&#xA;      --config=                     Path to YAML config file&#xA;      --version                     Print current version&#xA;      --listextensions              List all registered extensions&#xA;      --addextension=               Register a new extension from config file path&#xA;      --rmextension=                Remove a registered extension by name&#xA;      --strategy=                   Choose a strategy from the available strategies&#xA;      --liststrategies              List all strategies&#xA;      --listvendors                 List all vendors&#xA;      --shell-complete-list         Output raw list without headers/formatting (for shell completion)&#xA;&#xA;Help Options:&#xA;  -h, --help                        Show this help message&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Our approach to prompting&lt;/h2&gt; &#xA;&lt;p&gt;Fabric &lt;em&gt;Patterns&lt;/em&gt; are different than most prompts you&#39;ll see.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;First, we use &lt;code&gt;Markdown&lt;/code&gt; to help ensure maximum readability and editability&lt;/strong&gt;. This not only helps the creator make a good one, but also anyone who wants to deeply understand what it does. &lt;em&gt;Importantly, this also includes the AI you&#39;re sending it to!&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of a Fabric Pattern.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://github.com/danielmiessler/fabric/blob/main/patterns/extract_wisdom/system.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;img width=&#34;1461&#34; alt=&#34;pattern-example&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/b910c551-9263-405f-9735-71ca69bbab6d&#34;&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Next, we are extremely clear in our instructions&lt;/strong&gt;, and we use the Markdown structure to emphasize what we want the AI to do, and in what order.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;And finally, we tend to use the System section of the prompt almost exclusively&lt;/strong&gt;. In over a year of being heads-down with this stuff, we&#39;ve just seen more efficacy from doing that. If that changes, or we&#39;re shown data that says otherwise, we will adjust.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following examples use the macOS &lt;code&gt;pbpaste&lt;/code&gt; to paste from the clipboard. See the &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#pbpaste&#34;&gt;pbpaste&lt;/a&gt; section below for Windows and Linux alternatives.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Now let&#39;s look at some things you can do with Fabric.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;summarize&lt;/code&gt; Pattern based on input from &lt;code&gt;stdin&lt;/code&gt;. In this case, the body of an article.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pbpaste | fabric --pattern summarize&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;analyze_claims&lt;/code&gt; Pattern with the &lt;code&gt;--stream&lt;/code&gt; option to get immediate and streaming results.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pbpaste | fabric --stream --pattern analyze_claims&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the &lt;code&gt;extract_wisdom&lt;/code&gt; Pattern with the &lt;code&gt;--stream&lt;/code&gt; option to get immediate and streaming results from any Youtube video (much like in the original introduction video).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -y &#34;https://youtube.com/watch?v=uXs-zPc63kM&#34; --stream --pattern extract_wisdom&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create patterns- you must create a .md file with the pattern and save it to &lt;code&gt;~/.config/fabric/patterns/[yourpatternname]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run a &lt;code&gt;analyze_claims&lt;/code&gt; pattern on a website. Fabric uses Jina AI to scrape the URL into markdown format before sending it to the model.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;fabric -u https://github.com/danielmiessler/fabric/ -p analyze_claims&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Just use the Patterns&lt;/h2&gt; &#xA;&lt;img width=&#34;1173&#34; alt=&#34;fabric-patterns-screenshot&#34; src=&#34;https://github.com/danielmiessler/fabric/assets/50654/9186a044-652b-4673-89f7-71cf066f32d8&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;If you&#39;re not looking to do anything fancy, and you just want a lot of great prompts, you can navigate to the &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main/patterns&#34;&gt;&lt;code&gt;/patterns&lt;/code&gt;&lt;/a&gt; directory and start exploring!&lt;/p&gt; &#xA;&lt;p&gt;We hope that if you used nothing else from Fabric, the Patterns by themselves will make the project useful.&lt;/p&gt; &#xA;&lt;p&gt;You can use any of the Patterns you see there in any AI application that you have, whether that&#39;s ChatGPT or some other app or website. Our plan and prediction is that people will soon be sharing many more than those we&#39;ve published, and they will be way better than ours.&lt;/p&gt; &#xA;&lt;p&gt;The wisdom of crowds for the win.&lt;/p&gt; &#xA;&lt;h3&gt;Prompt Strategies&lt;/h3&gt; &#xA;&lt;p&gt;Fabric also implements prompt strategies like &#34;Chain of Thought&#34; or &#34;Chain of Draft&#34; which can be used in addition to the basic patterns.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://arxiv.org/pdf/2502.18600&#34;&gt;Thinking Faster by Writing Less&lt;/a&gt; paper and the &lt;a href=&#34;https://learnprompting.org/docs/advanced/thought_generation/introduction&#34;&gt;Thought Generation section of Learn Prompting&lt;/a&gt; for examples of prompt strategies.&lt;/p&gt; &#xA;&lt;p&gt;Each strategy is available as a small &lt;code&gt;json&lt;/code&gt; file in the &lt;a href=&#34;https://github.com/danielmiessler/fabric/tree/main/strategies&#34;&gt;&lt;code&gt;/strategies&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;The prompt modification of the strategy is applied to the system prompt and passed on to the LLM in the chat session.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;fabric -S&lt;/code&gt; and select the option to install the strategies in your &lt;code&gt;~/.config/fabric&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Custom Patterns&lt;/h2&gt; &#xA;&lt;p&gt;You may want to use Fabric to create your own custom Patterns—but not share them with others. No problem!&lt;/p&gt; &#xA;&lt;p&gt;Just make a directory in &lt;code&gt;~/.config/custompatterns/&lt;/code&gt; (or wherever) and put your &lt;code&gt;.md&lt;/code&gt; files in there.&lt;/p&gt; &#xA;&lt;p&gt;When you&#39;re ready to use them, copy them into &lt;code&gt;~/.config/fabric/patterns/&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can then use them like any other Patterns, but they won&#39;t be public unless you explicitly submit them as Pull Requests to the Fabric project. So don&#39;t worry—they&#39;re private to you.&lt;/p&gt; &#xA;&lt;h2&gt;Helper Apps&lt;/h2&gt; &#xA;&lt;p&gt;Fabric also makes use of some core helper apps (tools) to make it easier to integrate with your various workflows. Here are some examples:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;to_pdf&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;to_pdf&lt;/code&gt; is a helper command that converts LaTeX files to PDF format. You can use it like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;to_pdf input.tex&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a PDF file from the input LaTeX file in the same directory.&lt;/p&gt; &#xA;&lt;p&gt;You can also use it with stdin which works perfectly with the &lt;code&gt;write_latex&lt;/code&gt; pattern:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;ai security primer&#34; | fabric --pattern write_latex | to_pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a PDF file named &lt;code&gt;output.pdf&lt;/code&gt; in the current directory.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;to_pdf&lt;/code&gt; Installation&lt;/h3&gt; &#xA;&lt;p&gt;To install &lt;code&gt;to_pdf&lt;/code&gt;, install it the same way as you install Fabric, just with a different repo name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/danielmiessler/fabric/plugins/tools/to_pdf@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have a LaTeX distribution (like TeX Live or MiKTeX) installed on your system, as &lt;code&gt;to_pdf&lt;/code&gt; requires &lt;code&gt;pdflatex&lt;/code&gt; to be available in your system&#39;s PATH.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;code_helper&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;code_helper&lt;/code&gt; is used in conjunction with the &lt;code&gt;create_coding_feature&lt;/code&gt; pattern. It generates a &lt;code&gt;json&lt;/code&gt; representation of a directory of code that can be fed into an AI model with instructions to create a new feature or edit the code in a specified way.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/patterns/create_coding_feature/README.md&#34;&gt;the Create Coding Feature Pattern README&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Install it first using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;go install github.com/danielmiessler/fabric/plugins/tools/code_helper@latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;pbpaste&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/danielmiessler/Fabric/main/#examples&#34;&gt;examples&lt;/a&gt; use the macOS program &lt;code&gt;pbpaste&lt;/code&gt; to paste content from the clipboard to pipe into &lt;code&gt;fabric&lt;/code&gt; as the input. &lt;code&gt;pbpaste&lt;/code&gt; is not available on Windows or Linux, but there are alternatives.&lt;/p&gt; &#xA;&lt;p&gt;On Windows, you can use the PowerShell command &lt;code&gt;Get-Clipboard&lt;/code&gt; from a PowerShell command prompt. If you like, you can also alias it to &lt;code&gt;pbpaste&lt;/code&gt;. If you are using classic PowerShell, edit the file &lt;code&gt;~\Documents\WindowsPowerShell\.profile.ps1&lt;/code&gt;, or if you are using PowerShell Core, edit &lt;code&gt;~\Documents\PowerShell\.profile.ps1&lt;/code&gt; and add the alias,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-Alias pbpaste Get-Clipboard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Linux, you can use &lt;code&gt;xclip -selection clipboard -o&lt;/code&gt; to paste from the clipboard. You will likely need to install &lt;code&gt;xclip&lt;/code&gt; with your package manager. For Debian based systems including Ubuntu,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;sudo apt update&#xA;sudo apt install xclip -y&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create an alias by editing &lt;code&gt;~/.bashrc&lt;/code&gt; or &lt;code&gt;~/.zshrc&lt;/code&gt; and adding the alias,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;alias pbpaste=&#39;xclip -selection clipboard -o&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Web Interface&lt;/h2&gt; &#xA;&lt;p&gt;Fabric now includes a built-in web interface that provides a GUI alternative to the command-line interface and an out-of-the-box website for those who want to get started with web development or blogging. You can use this app as a GUI interface for Fabric, a ready to go blog-site, or a website template for your own projects.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;web/src/lib/content&lt;/code&gt; directory includes starter &lt;code&gt;.obsidian/&lt;/code&gt; and &lt;code&gt;templates/&lt;/code&gt; directories, allowing you to open up the &lt;code&gt;web/src/lib/content/&lt;/code&gt; directory as an &lt;a href=&#34;https://obsidian.md&#34;&gt;Obsidian.md&lt;/a&gt; vault. You can place your posts in the posts directory when you&#39;re ready to publish.&lt;/p&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;The GUI can be installed by navigating to the &lt;code&gt;web&lt;/code&gt; directory and using &lt;code&gt;npm install&lt;/code&gt;, &lt;code&gt;pnpm install&lt;/code&gt;, or your favorite package manager. Then simply run the development server to start the app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;You will need to run fabric in a separate terminal with the &lt;code&gt;fabric --serve&lt;/code&gt; command.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;From the fabric project &lt;code&gt;web/&lt;/code&gt; directory:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run dev&#xA;&#xA;## or ##&#xA;&#xA;pnpm run dev&#xA;&#xA;## or your equivalent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streamlit UI&lt;/h3&gt; &#xA;&lt;p&gt;To run the Streamlit user interface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Install required dependencies&#xA;pip install -r requirements.txt&#xA;&#xA;# Or manually install dependencies&#xA;pip install streamlit pandas matplotlib seaborn numpy python-dotenv pyperclip&#xA;&#xA;# Run the Streamlit app&#xA;streamlit run streamlit.py&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Streamlit UI provides a user-friendly interface for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Running and chaining patterns&lt;/li&gt; &#xA; &lt;li&gt;Managing pattern outputs&lt;/li&gt; &#xA; &lt;li&gt;Creating and editing patterns&lt;/li&gt; &#xA; &lt;li&gt;Analyzing pattern results&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Clipboard Support&lt;/h4&gt; &#xA;&lt;p&gt;The Streamlit UI supports clipboard operations across different platforms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;macOS&lt;/strong&gt;: Uses &lt;code&gt;pbcopy&lt;/code&gt; and &lt;code&gt;pbpaste&lt;/code&gt; (built-in)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows&lt;/strong&gt;: Uses &lt;code&gt;pyperclip&lt;/code&gt; library (install with &lt;code&gt;pip install pyperclip&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linux&lt;/strong&gt;: Uses &lt;code&gt;xclip&lt;/code&gt; (install with &lt;code&gt;sudo apt-get install xclip&lt;/code&gt; or equivalent for your Linux distribution)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Meta&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Special thanks to the following people for their inspiration and contributions!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Jonathan Dunn&lt;/em&gt; for being the absolute MVP dev on the project, including spearheading the new Go version, as well as the GUI! All this while also being a full-time medical doctor!&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Caleb Sima&lt;/em&gt; for pushing me over the edge of whether to make this a public project or not.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Eugen Eisler&lt;/em&gt; and &lt;em&gt;Frederick Ros&lt;/em&gt; for their invaluable contributions to the Go version&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;David Peters&lt;/em&gt; for his work on the web interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Joel Parish&lt;/em&gt; for super useful input on the project&#39;s Github directory structure..&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Joseph Thacker&lt;/em&gt; for the idea of a &lt;code&gt;-c&lt;/code&gt; context flag that adds pre-created context in the &lt;code&gt;./config/fabric/&lt;/code&gt; directory to all Pattern queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Jason Haddix&lt;/em&gt; for the idea of a stitch (chained Pattern) to filter content using a local model before sending on to a cloud model, i.e., cleaning customer data using &lt;code&gt;llama2&lt;/code&gt; before sending on to &lt;code&gt;gpt-4&lt;/code&gt; for analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Andre Guerra&lt;/em&gt; for assisting with numerous components to make things simpler and more maintainable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Primary contributors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/danielmiessler&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/50654?v=4&#34; title=&#34;Daniel Miessler&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Daniel Miessler&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xssdoctor&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/9218431?v=4&#34; title=&#34;Jonathan Dunn&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Jonathan Dunn&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sbehrens&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/688589?v=4&#34; title=&#34;Scott Behrens&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Scott Behrens&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agu3rra&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/10410523?v=4&#34; title=&#34;Andre Guerra&#34; width=&#34;50&#34; height=&#34;50&#34; alt=&#34;Andre Guerra&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;a href=&#34;https://github.com/danielmiessler/fabric/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=danielmiessler/fabric&#34; alt=&#34;contrib.rocks&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contrib.rocks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fabric&lt;/code&gt; was created by &lt;a href=&#34;https://danielmiessler.com/subscribe&#34; target=&#34;_blank&#34;&gt;Daniel Miessler&lt;/a&gt; in January of 2024. &lt;br&gt;&lt;br&gt; &lt;a href=&#34;https://twitter.com/intent/user?screen_name=danielmiessler&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/danielmiessler&#34; alt=&#34;X (formerly Twitter) Follow&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>