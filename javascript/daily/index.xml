<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-31T01:35:36Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mashiAl/AIpredictionBot</title>
    <updated>2022-10-31T01:35:36Z</updated>
    <id>tag:github.com,2022-10-31:/mashiAl/AIpredictionBot</id>
    <link href="https://github.com/mashiAl/AIpredictionBot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pancakeswap prediction bot ai powered&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üîÆüöÄ PancakeSwap Prediction Bot (AI powered) v3.1&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mashiAl/AIpredictionBot/main/img/logo.jpg?raw=true&#34; alt=&#34;PancakeSwap-Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;PancakeSwap Prediction Bot using AI recomendations.&lt;/p&gt; &#xA;&lt;h2&gt;‚≠êPlease consider giving a &lt;strong&gt;star&lt;/strong&gt;.&lt;/h2&gt; &#xA;&lt;h2&gt;üê∞‚ö° Installation&lt;/h2&gt; &#xA;&lt;p&gt;Download and Install Node here: &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;https://nodejs.org/en/download/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then run the following commands in terminal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;git clone https://github.com/cryptobeast2/pancakeswap-prediction-bot-improved&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd pancakeswap-prediction-bot&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm i&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mashiAl/AIpredictionBot/main/img/setup.jpg?raw=true&#34; alt=&#34;enter image description here&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open the &lt;strong&gt;.env&lt;/strong&gt; file with any code/text editor and add your private key like so:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;PRIVATE_KEY=0xa2hjtjnhjputdavmarh3uqmntxevx6j6faui8sorcppyqmuekj54btyd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Open the &lt;strong&gt;bot.js&lt;/strong&gt; file and setup the following variables:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;BET_AMOUNT: 5, // Amount of each bet (In USD)&#xA;DAILY_GOAL: 20, // Total profit you are aiming to earn (In USD)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Start the bot using &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;üîÆ Enjoy!&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;üîì How to convert seed phrase to Private Key&lt;/h3&gt; &#xA;&lt;p&gt;A lot of wallets don&#39;t provide you the private key, but just the &lt;strong&gt;seed phrase&lt;/strong&gt; ( 12 words ). So here you will learn how to convert that to a private key:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Enter &lt;a href=&#34;https://youtu.be/eAXdLEZFbiw&#34;&gt;Here&lt;/a&gt; and follow the instructions. Website used is &lt;a href=&#34;https://iancoleman.io/bip39/&#34;&gt;this one&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mashiAl/AIpredictionBot/main/img/rate.jpg?raw=true&#34; alt=&#34;Winning rate&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ü§ñüìà Strategy&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The bot take a series of recomendations given by Trading View and proccess them together with the tendency of the rest of people betting. After the algorithm have complete, it choose to bet &lt;strong&gt;üü¢UP&lt;/strong&gt; or &lt;strong&gt;üî¥DOWN&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After all my testings in aprox 300 rounds I was able to achieve a &lt;strong&gt;~70% Win rate&lt;/strong&gt;. Of course it depends of a lot of variables, so I can&#39;t ensure that you will reproduce the same behavior. But I can tell that I make $20 - $70 daily with $3 Bets.&lt;/li&gt; &#xA; &lt;li&gt;Before every round the bot will check if you have enough balance in your wallet and if you have reached the daily goal.&lt;/li&gt; &#xA; &lt;li&gt;Also it will save the daily history in the &lt;strong&gt;/history&lt;/strong&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Be aware that after consecutive losses, statistically you have more chances to win in the next one.&lt;/li&gt; &#xA; &lt;li&gt;Inside &lt;strong&gt;bot.js&lt;/strong&gt; in the &lt;code&gt;THRESHOLD&lt;/code&gt; property of &lt;code&gt;GLOBAL_CONFIG&lt;/code&gt; variable, you can configure the minimum certainty with which the bot will bet. For default it&#39;s set to 50, which means that from 50% certainty the bot will bet. You can raise it (50-100) to bet only when the bot is more sure about its prediction.&lt;/li&gt; &#xA; &lt;li&gt;Its recomendable to have x10 - x50 the amount of bet to have an average of rounds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;üí∞You can check the history of rounds and claim rewards here: &lt;a href=&#34;https://pancakeswap.finance/prediction&#34;&gt;https://pancakeswap.finance/prediction&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚úîÔ∏è To Do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; USD Based bet&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Show real time profit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Show real time win rate&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Daily goal profit&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Improved algorithm v2.0 üî•&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; AI Driven bot üî•&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Stop Loss&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Simplify settings&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Auto collect winnings&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üëÅÔ∏è Disclaimers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please be aware of clones&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;üë∑&lt;strong&gt;Use it at your own risk.&lt;/strong&gt; If you are going to bet, please do it with money that you are willing to lose. And please try to bet with a low amount to gradually generate profit.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yyx990803/vite-vs-next-turbo-hmr</title>
    <updated>2022-10-31T01:35:36Z</updated>
    <id>tag:github.com,2022-10-31:/yyx990803/vite-vs-next-turbo-hmr</id>
    <link href="https://github.com/yyx990803/vite-vs-next-turbo-hmr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Benchmarking Vite vs. Next + turbopack HMR performance&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Vite vs. Next + turbopack HMR Benchmark&lt;/h1&gt; &#xA;&lt;h2&gt;Methodology&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The two projects are created from the following commands:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx create-next-app@latest&#xA;npm init vite@latest # select React preset&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genFiles.(m)js&lt;/code&gt; is run in each project to generate 1000 components. All components are imported in the app&#39;s root component (in Next&#39;s case, the root page component) and rendered together. This step is already done and the files are already checked in, but the script is included for reference.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Next, &lt;code&gt;app/page.js&lt;/code&gt; has the &lt;code&gt;&#39;use client&#39;&lt;/code&gt; directive so it renders in client mode. This is necessary to ensure proper comparison, since server components incurs non-trivial HMR overhead (4x slower).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Vite, we are using &lt;code&gt;vite-plugin-swc-react-refresh&lt;/code&gt; (with a pnpm patch to fix compat w/ latest vite) so that the React JSX &amp;amp; HMR transform are using swc instead of Babel. The reason Vite&#39;s default React plugin uses Babel is because using swc results in 58MB of extra install weight (when Vite itself is 19MB) for marginal HMR improvement. However, for the purpose of benchmarking, we should use the same transforms turbopack is using so that the comparison is focused on the HMR mechanisms of the two tools.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For each project, we run &lt;code&gt;watch.(m)js&lt;/code&gt; in a separate Node process to get the exact timestamp of file change. This is used to mark the start of HMR.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start the projects (&lt;code&gt;vite&lt;/code&gt; and &lt;code&gt;next dev --turbo&lt;/code&gt;), then edit the following files to test HMR:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Next: &lt;code&gt;app/page.js&lt;/code&gt; (root) and &lt;code&gt;app/comp0.jsx&lt;/code&gt; (leaf)&lt;/li&gt; &#xA;   &lt;li&gt;Vite: &lt;code&gt;src/App.jsx&lt;/code&gt; (root) and &lt;code&gt;src/components/comp0.jsx&lt;/code&gt; (leaf)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The edited components all render &lt;code&gt;Date.now()&lt;/code&gt; in their output. The final rendered timestamp in the DOM is used to mark the completion of HMR.&lt;/p&gt; &#xA;&lt;h2&gt;Numbers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recorded over 5 runs&lt;/li&gt; &#xA; &lt;li&gt;Time in ms&lt;/li&gt; &#xA; &lt;li&gt;Tested on M1 MacBook Pro&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Vite (root)&lt;/th&gt; &#xA;   &lt;th&gt;Vite (leaf)&lt;/th&gt; &#xA;   &lt;th&gt;Next (client root)&lt;/th&gt; &#xA;   &lt;th&gt;Next (client leaf)&lt;/th&gt; &#xA;   &lt;th&gt;Next (RSC root)&lt;/th&gt; &#xA;   &lt;th&gt;Next (RSC leaf)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;342&lt;/td&gt; &#xA;   &lt;td&gt;141&lt;/td&gt; &#xA;   &lt;td&gt;335&lt;/td&gt; &#xA;   &lt;td&gt;87&lt;/td&gt; &#xA;   &lt;td&gt;782&lt;/td&gt; &#xA;   &lt;td&gt;661&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;358&lt;/td&gt; &#xA;   &lt;td&gt;141&lt;/td&gt; &#xA;   &lt;td&gt;343&lt;/td&gt; &#xA;   &lt;td&gt;72&lt;/td&gt; &#xA;   &lt;td&gt;912&lt;/td&gt; &#xA;   &lt;td&gt;633&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;352&lt;/td&gt; &#xA;   &lt;td&gt;143&lt;/td&gt; &#xA;   &lt;td&gt;334&lt;/td&gt; &#xA;   &lt;td&gt;88&lt;/td&gt; &#xA;   &lt;td&gt;922&lt;/td&gt; &#xA;   &lt;td&gt;453&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;337&lt;/td&gt; &#xA;   &lt;td&gt;139&lt;/td&gt; &#xA;   &lt;td&gt;337&lt;/td&gt; &#xA;   &lt;td&gt;85&lt;/td&gt; &#xA;   &lt;td&gt;829&lt;/td&gt; &#xA;   &lt;td&gt;640&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;302&lt;/td&gt; &#xA;   &lt;td&gt;145&lt;/td&gt; &#xA;   &lt;td&gt;324&lt;/td&gt; &#xA;   &lt;td&gt;90&lt;/td&gt; &#xA;   &lt;td&gt;737&lt;/td&gt; &#xA;   &lt;td&gt;539&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Average&lt;/td&gt; &#xA;   &lt;td&gt;338.2&lt;/td&gt; &#xA;   &lt;td&gt;141.8&lt;/td&gt; &#xA;   &lt;td&gt;334.6&lt;/td&gt; &#xA;   &lt;td&gt;84.4&lt;/td&gt; &#xA;   &lt;td&gt;836.4&lt;/td&gt; &#xA;   &lt;td&gt;585.2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The Next RSC numbers are only included for reference (compare between server/client HMR in Next).&lt;/li&gt; &#xA; &lt;li&gt;For the root component (big with many imports and child components), Vite and Next + turbopack are almost equally fast.&lt;/li&gt; &#xA; &lt;li&gt;For the leaf component (small, no imports), Next + turbopack is about 68% faster.&lt;/li&gt; &#xA; &lt;li&gt;This is quite far from the claim that &#34;turbopack is 10x faster than Vite&#34; as we&#39;ve seen from Vercel&#39;s marketing materials.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>minbrowser/min</title>
    <updated>2022-10-31T01:35:36Z</updated>
    <id>tag:github.com,2022-10-31:/minbrowser/min</id>
    <link href="https://github.com/minbrowser/min" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast, minimal browser that protects your privacy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Min&lt;/h1&gt; &#xA;&lt;p&gt;Min is a fast, minimal browser that protects your privacy. It includes an interface designed to minimize distractions, and features such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Information from &lt;a href=&#34;https://duckduckgo.com&#34;&gt;DuckDuckGo&lt;/a&gt; in the search bar.&lt;/li&gt; &#xA; &lt;li&gt;Full-text search for visited pages&lt;/li&gt; &#xA; &lt;li&gt;Ad and tracker blocking&lt;/li&gt; &#xA; &lt;li&gt;Automatic reader view&lt;/li&gt; &#xA; &lt;li&gt;Tasks (tab groups)&lt;/li&gt; &#xA; &lt;li&gt;Password manager integration&lt;/li&gt; &#xA; &lt;li&gt;Dark theme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Download Min from the &lt;a href=&#34;https://github.com/minbrowser/min/releases&#34;&gt;releases page&lt;/a&gt;, or learn more on the &lt;a href=&#34;https://minbrowser.org/&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/minbrowser/min/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/minbrowser/min/total.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/bRpqjJ4&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/764269005195968512.svg?label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Min is made possible by these sponsors:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/ritterob&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/17785839?s=400&amp;amp;v=4&#34; width=&#34;40&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/blackgwe&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/6592155?s=460&amp;amp;v=4&#34; width=&#34;40&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/jonathanhuston&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/33535850?v=4&#34; width=&#34;40&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/JackGFuller&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/74563788?v=4&#34; width=&#34;40&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/flightmansam&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/34013162?v=4&#34; width=&#34;40&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/du64&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/65834069?v=4&#34; width=&#34;40&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ritterob&#34;&gt;@ritterob&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/blackgwe&#34;&gt;@blackgwe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jonathanhuston&#34;&gt;@jonathanhuston&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/JackGFuller&#34;&gt;@JackGFuller&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/flightmansam&#34;&gt;@flightmansam&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/du64&#34;&gt;@du64&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/PalmerAL&#34;&gt;Become a sponsor&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;img alt=&#34;The search bar, showing information from DuckDuckGo&#34; src=&#34;http://minbrowser.org/tour/img/searchbar_duckduckgo_answers.png&#34; width=&#34;650&#34;&gt; &#xA;&lt;img alt=&#34;The Tasks Overlay&#34; src=&#34;http://minbrowser.org/tour/img/tasks.png&#34; width=&#34;650&#34;&gt; &#xA;&lt;img alt=&#34;Reader View&#34; src=&#34;https://user-images.githubusercontent.com/10314059/53312382-67ca7d80-387a-11e9-9ccc-88ac592c9b1c.png&#34; width=&#34;650&#34;&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;You can find prebuilt binaries for Min &lt;a href=&#34;https://github.com/minbrowser/min/releases&#34;&gt;here&lt;/a&gt;. Alternatively, skip to the section below for instructions on how to build Min directly from source.&lt;/p&gt; &#xA;&lt;h3&gt;Installation on Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To install the .deb file, use &lt;code&gt;sudo dpkg -i /path/to/download&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To install the RPM build, use &lt;code&gt;sudo rpm -i /path/to/download --ignoreos&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Arch Linux it&#39;s in the community repository, use &lt;code&gt;sudo pacman -Sy min&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;On Raspberry Pi, you can install Min from &lt;a href=&#34;https://github.com/Botspot/pi-apps&#34;&gt;Pi-Apps&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;If you want to develop Min:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Start Min in development mode by running &lt;code&gt;npm run start&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;After you make changes, you can press &lt;code&gt;ctrl+r&lt;/code&gt; (or &lt;code&gt;cmd+r&lt;/code&gt; on Mac) twice to restart the browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building binaries&lt;/h3&gt; &#xA;&lt;p&gt;In order to build Min from source, follow the installation instructions above, then use one of the following commands to create binaries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run buildWindows&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run buildMacIntel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run buildMacArm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run buildDebian&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run buildRaspi&lt;/code&gt; (for 32-bit Raspberry Pi)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run buildLinuxArm64&lt;/code&gt; (for 64-bit Raspberry Pi or other ARM Linux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run buildRedhat&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Depending on the platform you are building for, you may need to install additional dependencies:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using macOS and building a package for Linux, install &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, then run &lt;code&gt;brew install fakeroot dpkg&lt;/code&gt; first.&lt;/li&gt; &#xA; &lt;li&gt;If you are using macOS or Linux and building a package for Windows, you will need to install &lt;a href=&#34;https://www.mono-project.com/&#34;&gt;Mono&lt;/a&gt; and &lt;a href=&#34;https://www.winehq.org/&#34;&gt;Wine&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;If you are building a macOS package, you&#39;ll need to install Xcode and the associated command-line tools. You may also need to set your default SDK to macOS 11.0 or higher, which you can do by running &lt;code&gt;export SDKROOT=/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX11.1.sdk&lt;/code&gt;. The exact command will depend on where Xcode is installed and which SDK version you&#39;re using.&lt;/li&gt; &#xA; &lt;li&gt;To build on Windows, you&#39;ll need to install Visual Studio. Once it&#39;s installed, you may also need to run &lt;code&gt;npm config set msvs_version 2019&lt;/code&gt; (or the appropriate version).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Min&lt;/h2&gt; &#xA;&lt;p&gt;Thanks for taking the time to contribute to Min!&lt;/p&gt; &#xA;&lt;h3&gt;Getting Help&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re experiencing a bug or have a suggestion for how to improve Min, please open a &lt;a href=&#34;https://github.com/minbrowser/min/issues/new/choose&#34;&gt;new issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions about using Min, need help getting started with development, or want to talk about what we&#39;re working on, join our &lt;a href=&#34;https://discord.gg/bRpqjJ4&#34;&gt;Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Start by following the development instructions listed above.&lt;/li&gt; &#xA; &lt;li&gt;The wiki has an &lt;a href=&#34;https://github.com/minbrowser/min/wiki/Architecture&#34;&gt;overview of Min&#39;s architecture&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Min uses the &lt;a href=&#34;https://github.com/feross/standard&#34;&gt;Standard&lt;/a&gt; code style; &lt;a href=&#34;https://standardjs.com/#are-there-text-editor-plugins&#34;&gt;most editors&lt;/a&gt; have plugins available to auto-format your code.&lt;/li&gt; &#xA; &lt;li&gt;If you see something that&#39;s missing, or run into any problems, please open an issue!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing Translations&lt;/h3&gt; &#xA;&lt;h4&gt;Adding a new language&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find the language code that goes with your language from &lt;a href=&#34;https://source.chromium.org/chromium/chromium/src/+/main:ui/base/l10n/l10n_util.cc;l=55&#34;&gt;this list&lt;/a&gt; (line 55 - 230).&lt;/li&gt; &#xA; &lt;li&gt;In the &lt;code&gt;localization/languages&lt;/code&gt; directory, create a new file, and name it &#34;[your language code].json&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Open your new file, and copy the contents of the &lt;a href=&#34;https://github.com/minbrowser/min/raw/master/localization/languages/en-US.json&#34;&gt;localization/languages/en-US.json&lt;/a&gt; file into your new file.&lt;/li&gt; &#xA; &lt;li&gt;Change the &#34;identifier&#34; field in the new file to the language code from step 1.&lt;/li&gt; &#xA; &lt;li&gt;Inside the file, replace each English string in the right-hand column with the equivalent translation.&lt;/li&gt; &#xA; &lt;li&gt;(Optional) See your translations live by following the &lt;a href=&#34;https://raw.githubusercontent.com/minbrowser/min/master/#installing&#34;&gt;development instructions&lt;/a&gt; above. Min will display in the same language as your operating system, so make sure your computer is set to the same language that you&#39;re translating.&lt;/li&gt; &#xA; &lt;li&gt;That&#39;s it! Make a pull request with your changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Updating an existing language&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find the language file for your language in the &lt;code&gt;localization/languages&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Look through the file for any items that have a value of &#34;null&#34;, or that have a comment saying &#34;missing translation&#34;.&lt;/li&gt; &#xA; &lt;li&gt;For each of these items, look for the item with the same name in the &lt;code&gt;en-US.json&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Translate the value from the English file, replace &#34;null&#34; with your translation, and remove the &#34;missing translation&#34; comment.&lt;/li&gt; &#xA; &lt;li&gt;Make a pull request with the updated file.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>