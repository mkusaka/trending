<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-06T01:33:43Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TechForPalestine/boycott-israeli-tech-companies-dataset</title>
    <updated>2024-01-06T01:33:43Z</updated>
    <id>tag:github.com,2024-01-06:/TechForPalestine/boycott-israeli-tech-companies-dataset</id>
    <link href="https://github.com/TechForPalestine/boycott-israeli-tech-companies-dataset" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://techforpalestine.org/learn-more&#34;&gt;&lt;img src=&#34;https://badge.techforpalestine.org/default&#34; alt=&#34;Ceasefire Now&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Boycott Israeli tech Companies Dataset&lt;/h1&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;This repository is dedicated to providing a comprehensive list of Israeli tech companies to boycott, categorized based on their respective industries.&lt;/p&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;YAML Files: Each category of companies is organized into separate YAML files. These files are easy to navigate and are regularly updated.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternative Companies: For every boycotted company, we provide a list of alternative companies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We welcome contributions from the community. If you wish to add a company to the boycott list or suggest an alternative, please follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new fork.&lt;/li&gt; &#xA; &lt;li&gt;Clone your fork repository.&lt;/li&gt; &#xA; &lt;li&gt;Make your changes in a new branch.&lt;/li&gt; &#xA; &lt;li&gt;Add a comprehensive commit message e.g. &#34;Added new trigger-happy company&#34;. Push.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request with a detailed description of your additions or changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Help! I&#39;m not a developer! How do I contribute?&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a &lt;a href=&#34;https://github.com/&#34;&gt;github account&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to &lt;a href=&#34;https://github.com/TechForPalestine/boycott-israeli-tech-companies-dataset&#34;&gt;the repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Browse the &lt;a href=&#34;https://github.com/TechForPalestine/boycott-israeli-tech-companies-dataset/tree/main/dataset/companies&#34;&gt;existing companies&lt;/a&gt;. Note they are organised by industry.&lt;/li&gt; &#xA; &lt;li&gt;Once you know what you want to add, navigate to the file you want to change e.g. Cloud.yaml.&lt;/li&gt; &#xA; &lt;li&gt;In the top right corner, click the Edit button. If it complains that you don&#39;t have a fork yet, Click create fork.&lt;/li&gt; &#xA; &lt;li&gt;Make the change(s) to the file.&lt;/li&gt; &#xA; &lt;li&gt;Once done, click the green button &#34;Commit Changes&#34;, visible near the top right corner.&lt;/li&gt; &#xA; &lt;li&gt;Add a comprehensive commit message e.g. &#34;Added new trigger-happy company&#34;, and click &#34;Propose changes&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Review your changes - if you are happy with them, click &#34;Create pull request&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Add a comprehensive description of the change you&#39;re making, then click &#34;Create pull request&#34;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Done! One of the project maintainers will review and merge your changes.&lt;/p&gt; &#xA;&lt;h3&gt;Data Schema&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TechForPalestine/boycott-israeli-tech-companies-dataset/main/validators/companies/company-schema.yaml&#34;&gt;Company Schema&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Available commands&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run validate&lt;/code&gt; Validate the companies yaml files&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>speer-technologies/aircall</title>
    <updated>2024-01-06T01:33:43Z</updated>
    <id>tag:github.com,2024-01-06:/speer-technologies/aircall</id>
    <link href="https://github.com/speer-technologies/aircall" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Frontend Hiring Challenge&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;The goal of this test is to make you code a small ReactJS app. We have prepared a skeleton app for you, but please change whatever you want (CSS files, HTML structure, JS structure, etc).&lt;/p&gt; &#xA;&lt;p&gt;The app will have the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Activity Feed&lt;/strong&gt; - simple list of calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Activity Detail&lt;/strong&gt; - detail of a call&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Archive&lt;/strong&gt; - the final user should be able to archive (and unarchive) a call. Archived calls will no longer be displayed on the Activity Feed and should have a separate Archived Tab.&lt;/li&gt; &#xA; &lt;li&gt;A button to archive all calls in the activity feed&lt;/li&gt; &#xA; &lt;li&gt;A button to unarchive all calls in the archived calls tab&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Show us what you can do in 48 hours. You will be assessed on the following parameters:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Focus on design (Pay attention to the UI/UX and transitions)&lt;/li&gt; &#xA; &lt;li&gt;Best React Practices&lt;/li&gt; &#xA; &lt;li&gt;Code Readability and Maintainability&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;re done with the assignment, please submit a link to the &lt;strong&gt;GitHub/Bitbucket repository&lt;/strong&gt; (make sure it&#39;s public) with your code &lt;strong&gt;AND&lt;/strong&gt; a deployment link where our recruiters can interact with the live version. You can use freely available tools like &lt;strong&gt;Netlify, Vercel, Heroku, etc&lt;/strong&gt; to deploy your React application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Submissions without a valid repository and deployment link will be removed from any further consideration.&lt;/p&gt; &#xA;&lt;p&gt;To give you an idea, here&#39;s what our app looks like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/630714/29357034-763d7216-8276-11e7-8bcb-e77d9645dfcc.png&#34; alt=&#34;app&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re using &lt;a href=&#34;https://yarnpkg.com&#34;&gt;yarn&lt;/a&gt; here (but you can use npm):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn install&#xA;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Routes&lt;/h3&gt; &#xA;&lt;p&gt;Here is the API address: &lt;a href=&#34;https://cerulean-marlin-wig.cyclic.app/&#34;&gt;https://cerulean-marlin-wig.cyclic.app/&lt;/a&gt; &lt;br&gt; If you run into a CORS error, please prepend the base URL with this CORS Anywhere server URL: &lt;a href=&#34;https://charming-bat-singlet.cyclic.app/&#34;&gt;https://charming-bat-singlet.cyclic.app/&lt;/a&gt; &lt;br&gt; The prepended base URL will look like this &lt;a href=&#34;https://charming-bat-singlet.cyclic.app/https://cerulean-marlin-wig.cyclic.app/&#34;&gt;https://charming-bat-singlet.cyclic.app/https://cerulean-marlin-wig.cyclic.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The API is hosted on a free server, which is why the first time you call the API, it will throw an error. The server goes to sleep if there hasn&#39;t been any activity for a while, but after 30-60 seconds of the first call, it should work as expected. Please reach out to us in case it doesn&#39;t.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; - BASE_URL/activities: get calls to display in the Activity Feed&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET&lt;/strong&gt; - BASE_URL/activities/&amp;lt;call_id&amp;gt; retrieve a specific call details&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt; - BASE_URL/activities/&amp;lt;call_id&amp;gt; update a call. The only field updatable is &lt;code&gt;is_archived (bool)&lt;/code&gt;. You&#39;ll need to send a JSON in the request body:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  is_archived: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;PATCH&lt;/strong&gt; - BASE_URL/reset: Reset all calls to initial state (usefull if you archived all calls).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Call object&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;id&lt;/strong&gt; - unique ID of call&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;created_at&lt;/strong&gt; - creation date&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;direction&lt;/strong&gt; - &lt;code&gt;inbound&lt;/code&gt; or &lt;code&gt;outbound&lt;/code&gt; call&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;from&lt;/strong&gt; - caller&#39;s number&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;to&lt;/strong&gt; - callee&#39;s number&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;via&lt;/strong&gt; - Aircall number used for the call&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;duration&lt;/strong&gt; - duration of a call (in seconds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;is_archived&lt;/strong&gt; - call is archived or not&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;call_type&lt;/strong&gt; - can be a &lt;code&gt;missed&lt;/code&gt;, &lt;code&gt;answered&lt;/code&gt; or &lt;code&gt;voicemail&lt;/code&gt; call.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>