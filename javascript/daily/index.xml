<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-23T01:33:02Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yaroslav-n/tweetGPT</title>
    <updated>2022-12-23T01:33:02Z</updated>
    <id>tag:github.com,2022-12-23:/yaroslav-n/tweetGPT</id>
    <link href="https://github.com/yaroslav-n/tweetGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TweetGPT is a chrome extension that generates tweets and replies using chatGPT&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/yaroslav-n/tweetGPT/main/docs/logo.png&#34; height=&#34;128&#34;&gt; &#xA;&lt;h1&gt;tweetGPT Chrome Extension&lt;/h1&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To use this extension, will you need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Twitter account&lt;/li&gt; &#xA; &lt;li&gt;OpenAI account&lt;/li&gt; &#xA; &lt;li&gt;Chrome browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Manual installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repo to your machine&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;chrome://extensions/&#34;&gt;chrome://extensions/&lt;/a&gt; in your browser&lt;/li&gt; &#xA; &lt;li&gt;Check the box for Developer mode in the top right&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;strong&gt;Load Unpacked&lt;/strong&gt; button and select the folder with the code&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can start using the extension now.&lt;/p&gt; &#xA;&lt;h2&gt;How to use tweetGPT&lt;/h2&gt; &#xA;&lt;p&gt;When you open a new tab with Twitter, you will see this icon under the tweet section:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yaroslav-n/tweetGPT/main/docs/screenshot.png&#34; height=&#34;120&#34;&gt; &#xA;&lt;p&gt;When you press it, it will let you select a type of tweet to generate. The types include positive, negative, controversial, etc.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yaroslav-n/tweetGPT/main/docs/options.png&#34; height=&#34;300&#34;&gt; &#xA;&lt;p&gt;Once selected, the extension will write a new tweet.&lt;/p&gt; &#xA;&lt;p&gt;For a reply, it will generate a tweet based on the original tweet. For a new tweet, it will write a tweet based on what&#39;s trending right now.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/yaroslav-n/tweetGPT/main/docs/reply.gif&#34; height=&#34;379&#34; width=&#34;609&#34;&gt; &#xA;&lt;h2&gt;⚠️ Warning&lt;/h2&gt; &#xA;&lt;p&gt;Depending on the tweet type, TweetGPT can sometimes generate controversial or even offensive tweets. Remember, this is like an L2 autopilot - the driver is responsible for the outcome. Don&#39;t tweet what you disagree with, just re-generate the tweet instead.&lt;/p&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;p&gt;If you have feedback, please create an issue in the repository or simply send me a DM in Twitter: &lt;a href=&#34;https://twitter.com/512x512&#34;&gt;@512x512&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>melonjs/melonJS</title>
    <updated>2022-12-23T01:33:02Z</updated>
    <id>tag:github.com,2022-12-23:/melonjs/melonJS</id>
    <link href="https://github.com/melonjs/melonJS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a fresh &amp; lightweight javascript game engine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;melonJS 2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/melonjs/melonJS/raw/master/media/Banner/Banner%20-%20Billboard%20-%20Original%20Logo%20-%20horizontal.png&#34; alt=&#34;melonJS Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/melonjs/melonJS&#34;&gt;&lt;img src=&#34;https://travis-ci.org/melonjs/melonJS.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/result?p=melonjs&#34;&gt;&lt;img src=&#34;https://badgen.net/bundlephobia/min/melonjs&#34; alt=&#34;Build Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/melonjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/melonjs&#34; alt=&#34;NPM Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdelivr.com/package/npm/melonjs&#34;&gt;&lt;img src=&#34;https://data.jsdelivr.com/v1/package/npm/melonjs/badge?style=rounded&#34; alt=&#34;jsDeliver&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.boss.dev/issues/repo/melonjs/melonJS&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint.svg?url=https://api.boss.dev/badge/enabled/melonjs/melonJS&#34; alt=&#34;Boss Bounty Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;A fresh, &lt;em&gt;modern&lt;/em&gt; &amp;amp; lightweight HTML5 game engine&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://melonjs.org/img/alex4-github.png&#34; alt=&#34;melonJS&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;melonJS 2 is a modern version of the melonJS game engine. It has been rebuilt almost entirely using ES6 class, inheritance and semantic, and is bundled using Rollup to provide modern features such as transpiling and tree-shaking.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: migrating an existing project to melonJS 2 (version 10.0 and higher) will definitely break your game (ES6 semantic, no more Jay inheritance, nodeJS event emitter, and no backward compatibility with deprecated legacy APIs), and you might want to read first this small step by step guide on &lt;a href=&#34;https://github.com/melonjs/melonJS/wiki/Upgrading-to-melonJS-2&#34;&gt;upgrading to melonJS 2&lt;/a&gt;. If you are looking at the legacy version (9.x and lower) of melonJS, you can find it &lt;a href=&#34;https://github.com/melonjs/melonJS/tree/legacy&#34;&gt;here&lt;/a&gt; under the &lt;em&gt;legacy&lt;/em&gt; branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melonjs.org/&#34;&gt;melonJS&lt;/a&gt; is open-source, licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/melonjs/melonJS/master/LICENSE.md&#34;&gt;MIT License&lt;/a&gt;, and actively developed and maintained with the help of a small team of enthusiasts at AltByte in Singapore.&lt;/p&gt; &#xA;&lt;h2&gt;About melonJS&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://melonjs.org/&#34;&gt;melonJS&lt;/a&gt; is a fully featured game engine :&lt;/p&gt; &#xA;&lt;p&gt;Compatibility&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Standalone library (does not rely on anything else, except a HTML5 capable browser)&lt;/li&gt; &#xA; &lt;li&gt;Compatible with all major browsers (Chrome, Safari, Firefox, Opera, Edge) and mobile devices&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Graphics&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2D sprite-based graphic engine&lt;/li&gt; &#xA; &lt;li&gt;Fast WebGL 1 &amp;amp; 2 renderer for desktop and mobile devices with fallback to Canvas rendering&lt;/li&gt; &#xA; &lt;li&gt;High DPI resolution &amp;amp; Canvas advanced auto scaling&lt;/li&gt; &#xA; &lt;li&gt;Sprite with 9-slice scaling option, and animation management&lt;/li&gt; &#xA; &lt;li&gt;built-in effects such as tinting and masking&lt;/li&gt; &#xA; &lt;li&gt;Standard spritesheet, single and multiple Packed Textures support&lt;/li&gt; &#xA; &lt;li&gt;System &amp;amp; Bitmap Text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sound&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Web Audio support with spatial audio or stereo panning based on &lt;a href=&#34;https://howlerjs.com&#34;&gt;Howler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;fallback to Multi-channel HTML5 audio for legacy browsers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Physic&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Polygon (SAT) based collision algorithm for accurate detection and response&lt;/li&gt; &#xA; &lt;li&gt;Fast Broad-phase collision detection using spatial partitioning&lt;/li&gt; &#xA; &lt;li&gt;Collision filtering for optimized automatic collision detection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Input&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mouse and Touch device support (with mouse emulation)&lt;/li&gt; &#xA; &lt;li&gt;Device motion &amp;amp; accelerometer support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Level Editor&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tiled map format version +1.0 integration for easy level design &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Uncompressed Plain, Base64, CSV and JSON encoded XML tilemap loading&lt;/li&gt; &#xA;   &lt;li&gt;Orthogonal, Isometric and Hexagonal maps (both normal and staggered)&lt;/li&gt; &#xA;   &lt;li&gt;Multiple layers (multiple background/foreground, collision and Image layers)&lt;/li&gt; &#xA;   &lt;li&gt;Animated and multiple Tileset support&lt;/li&gt; &#xA;   &lt;li&gt;Tileset transparency settings&lt;/li&gt; &#xA;   &lt;li&gt;Layers alpha and tinting settings&lt;/li&gt; &#xA;   &lt;li&gt;Rectangle, Ellipse, Polygon and Polyline objects support&lt;/li&gt; &#xA;   &lt;li&gt;Tiled Objects&lt;/li&gt; &#xA;   &lt;li&gt;Flipped &amp;amp; rotated Tiles&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic Layer and Object/Group ordering&lt;/li&gt; &#xA;   &lt;li&gt;Dynamic Entity loading&lt;/li&gt; &#xA;   &lt;li&gt;Shape based Tile collision support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Assets&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asynchronous asset loading&lt;/li&gt; &#xA; &lt;li&gt;A fully customizable preloader&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And Also&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A state manager (to easily manage loading, menu, options, in-game state)&lt;/li&gt; &#xA; &lt;li&gt;Tween Effects, Transition effects&lt;/li&gt; &#xA; &lt;li&gt;Pooling support for object recycling&lt;/li&gt; &#xA; &lt;li&gt;Basic Particle System&lt;/li&gt; &#xA; &lt;li&gt;nodeJS EventEmitter based event system&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tools integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://free-tex-packer.com&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136762061-1d3a0dfe-dbe0-4d3d-808d-47a49ecf5309.png&#34; alt=&#34;Free Texture Packer&#34; title=&#34;Free Texture Packer&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codeandweb.com/texturepacker&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136762472-bc55a638-c69b-4ff5-9d03-c684c8bea0ea.png&#34; alt=&#34;TexturePacker&#34; title=&#34;TexturePacker&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codeandweb.com/physicseditor&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136762890-b1010c7f-cb19-4d35-a3f1-f5048db07835.png&#34; alt=&#34;PhysicsEditor&#34; title=&#34;PhysicsEditor&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://renderhjs.net/shoebox/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136762705-92027d94-d87c-4a95-b051-26647410248d.png&#34; alt=&#34;ShoeBox&#34; title=&#34;ShoeBox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.mapeditor.org&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136762999-5a7f377b-4136-4205-9fe0-83728c90cb9b.png&#34; alt=&#34;Tiled&#34; title=&#34;Tiled&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cordova.apache.org&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136763147-6d157ce6-6921-437e-bb8f-0287b86109da.png&#34; alt=&#34;Cordova&#34; title=&#34;Cordova&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tools integration and usage with melonJS is documented in our &lt;a href=&#34;https://github.com/melonjs/melonJS/wiki#third-party-tools-usage&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Using melonJS&lt;/h1&gt; &#xA;&lt;h3&gt;For your first time using melonJS, this is where you start&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melonjs.org/tutorial/&#34;&gt;melonJS: Hacking a Platformer Game&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You may find it useful to skim the overview found at the wiki &lt;a href=&#34;https://github.com/melonjs/melonJS/wiki#details--usage&#34;&gt;Details &amp;amp; Usage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;When starting your own projects, checkout our &lt;a href=&#34;https://github.com/melonjs/es6-boilerplate&#34;&gt;es6 boilerplate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;A few demos of melonJS capabilities :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melonjs.github.io/examples/platformer/&#34;&gt;Platformer Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melonjs.github.io/examples/isometric_rpg/&#34;&gt;Isometric Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melonjs.github.io/examples/sprite/&#34;&gt;Sprite Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melonjs.github.io/examples/masking/&#34;&gt;Masking Demo&lt;/a&gt; (WARNING: may potentially trigger seizures for people with photosensitive epilepsy)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melonjs.github.io/examples/graphics/&#34;&gt;Primitive Drawing Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://melonjs.github.io/examples/UI/&#34;&gt;UI Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More examples are available &lt;a href=&#34;https://melonjs.github.io/examples/&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Basic &lt;a href=&#34;https://jsfiddle.net/obiot/4o9f02tc/&#34;&gt;Hello World&lt;/a&gt; Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;import * as me from &#34;https://esm.run/melonjs&#34;;&#xA;&#xA;me.device.onReady(function () {&#xA;    // initialize the display canvas once the device/browser is ready&#xA;    if (!me.video.init(1218, 562, {parent : &#34;screen&#34;, scale : &#34;auto&#34;})) {&#xA;        alert(&#34;Your browser does not support HTML5 canvas.&#34;);&#xA;        return;&#xA;    }&#xA;&#xA;    // add a gray background to the default Stage&#xA;    me.game.world.addChild(new me.ColorLayer(&#34;background&#34;, &#34;#202020&#34;));&#xA;&#xA;    // add a font text display object&#xA;    me.game.world.addChild(new me.Text(609, 281, {&#xA;        font: &#34;Arial&#34;,&#xA;        size: 160,&#xA;        fillStyle: &#34;#FFFFFF&#34;,&#xA;        textBaseline : &#34;middle&#34;,&#xA;        textAlign : &#34;center&#34;,&#xA;        text : &#34;Hello World !&#34;&#xA;    }));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Simple hello world using melonJS 2 (version 10.x or higher)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://melonjs.github.io/melonJS/docs/&#34;&gt;Online API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable an offline version of the documentation, navigate to the settings page and enable &lt;code&gt;offline storage&lt;/code&gt;: &lt;img width=&#34;297&#34; alt=&#34;186643536-854af31e-9c94-412e-a764-4bb7f93f15c3&#34; src=&#34;https://user-images.githubusercontent.com/4033090/187061867-cf8c4c8a-437b-4f76-9138-610adda0ca23.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Download melonJS&lt;/h2&gt; &#xA;&lt;p&gt;The latest builds with corresponding release note are available for direct download &lt;a href=&#34;https://github.com/melonjs/melonJS/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;melonJS 2 now only provides an ES6 Bundle :&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;build&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;melonjs.module.js&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;the ES6 Module (ESM) Bundle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;melonjs.mjs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;a tree-shakeable ES6 Module Directory&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;types/index.d.ts&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;typescript declaration files for the ES6 Module (ESM) Bundle&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: if you need your application to be compatible with ES5, refer to our &lt;a href=&#34;https://github.com/melonjs/es6-boilerplate&#34;&gt;boilerplate&lt;/a&gt; that provides automatic transpiling to ES5.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alternatively, the latest version of melonJS can be installed through &lt;a href=&#34;https://www.npmjs.com/package/melonjs&#34;&gt;NPM&lt;/a&gt; :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install melonjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need to import the ES6 module of melonjs (e.g. for Webpack):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ import * as me from &#39;melonjs/dist/melonjs.module.js&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or can simply be added to your html, using &lt;a href=&#34;https://www.jsdelivr.com/package/npm/melonjs&#34;&gt;jsDeliver&lt;/a&gt; content delivery network (CDN) :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- load the ES6 module bundle of melonJS v10.0 --&amp;gt;&#xA;&amp;lt;script type=&#34;module&#34; src=&#34;https://esm.run/melonjs@10.0&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;!-- omit the version completely to get the latest one --&amp;gt;&#xA;&amp;lt;!-- you should NOT use this in production --&amp;gt;&#xA;&amp;lt;script type=&#34;module&#34; src=&#34;https://esm.run/melonjs&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: starting from the 10.0.0 version, the debug plugin is no longer provided as part of the melonJS library release, and has been moved to the official &lt;a href=&#34;https://github.com/melonjs/es6-boilerplate&#34;&gt;boilerplate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Building melonJS&lt;/h2&gt; &#xA;&lt;p&gt;For most users, all you probably want is to use melonJS, and all you need then is just to download the latest built &lt;a href=&#34;https://github.com/melonjs/melonJS#download-melonjs&#34;&gt;release&lt;/a&gt; to get started. The only time you should need to build melonJS is if you want to contribute to the project and start developing on it.&lt;/p&gt; &#xA;&lt;p&gt;To build your own version of melonJS you will need to install :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;http://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; JavaScript runtime and the &lt;a href=&#34;https://npmjs.org/&#34;&gt;NPM&lt;/a&gt; package manager&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Once Node.js and NPM have been installed, you need to install build dependencies, by executing the following in the folder where you cloned the repository :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ [sudo] npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then build the melonJS source by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated files will be available under the &lt;code&gt;build&lt;/code&gt; directory :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;melonjs.module.js&lt;/code&gt; : plain ES6 module&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;melonjs.mjs&lt;/code&gt; : a ES6 chunk directory used for tree-shaking&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you need to create the corresponding typing you can use the follwing :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm run types&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will generate all the &lt;code&gt;.d.ts&lt;/code&gt; file under the &lt;code&gt;dist/types&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;To run the melonJS test suite simply use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm run test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the jasmine spec tests with the output displayed on the shell. Do note that the latest Chrome version is required, as the test unit will run the Browser in a headless mode (in case of failed tests, upgrade your browser).&lt;/p&gt; &#xA;&lt;p&gt;Last but not least, if you really want to contribute, but not sure how, you can always check our &lt;a href=&#34;https://github.com/melonjs/melonJS/discussions/categories/ideas&#34;&gt;discussions&lt;/a&gt; list to get some idea on where to start.&lt;/p&gt; &#xA;&lt;h2&gt;Building the documentation&lt;/h2&gt; &#xA;&lt;p&gt;Similarly, you can build your own copy of the docs locally by running :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm run doc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The generated documentation will be available in the &lt;code&gt;docs&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;h2&gt;WIP Builds&lt;/h2&gt; &#xA;&lt;p&gt;latest WIP builds are available under &lt;a href=&#34;https://raw.githubusercontent.com/melonjs/melonJS/master/dist/&#34;&gt;&lt;code&gt;dist&lt;/code&gt;&lt;/a&gt; in the &lt;a href=&#34;https://github.com/melonjs/melonJS/tree/master&#34;&gt;master&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Questions, need help ?&lt;/h2&gt; &#xA;&lt;p&gt;If you need technical support, you can contact us through the following channels :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Forums: with melonJS 2 we moved to a new discourse &lt;a href=&#34;https://melonjs.discourse.group&#34;&gt;forum&lt;/a&gt;, but we can still also find the previous one &lt;a href=&#34;http://www.html5gamedevs.com/forum/32-melonjs/&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chat: come and chat with us on &lt;a href=&#34;https://discord.gg/aur7JMk&#34;&gt;discord&lt;/a&gt;, or &lt;a href=&#34;https://gitter.im/melonjs/public&#34;&gt;gitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;we tried to keep our &lt;a href=&#34;https://github.com/melonjs/melonJS/wiki&#34;&gt;wikipage&lt;/a&gt; up-to-date with useful links, tutorials, and anything related melonJS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support the development of melonJS by &lt;a href=&#34;https://github.com/sponsors/melonjs&#34;&gt;becoming a sponsor&lt;/a&gt;. Get your logo in our README with a link to your site or become a backer and get your name in the &lt;a href=&#34;https://raw.githubusercontent.com/melonjs/melonJS/master/BACKERS.md&#34;&gt;BACKERS&lt;/a&gt; list. Any level of support is really appreciated and goes a long way !&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.melongaming.com&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136695857-d098c27d-f4b2-4c71-8574-b5f4291779cb.png&#34; alt=&#34;Melon Gaming&#34; title=&#34;Melon Gaming&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/4033090/136692693-35dca8aa-5012-4a37-9ea2-51640d2e6d73.png&#34; alt=&#34;Altbyte Pte Ltd&#34; title=&#34;AltByte&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>commitizen/cz-cli</title>
    <updated>2022-12-23T01:33:02Z</updated>
    <id>tag:github.com,2022-12-23:/commitizen/cz-cli</id>
    <link href="https://github.com/commitizen/cz-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The commitizen command line utility. #BlackLivesMatter&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Commitizen for contributors&lt;/h2&gt; &#xA;&lt;p&gt;When you commit with Commitizen, you&#39;ll be prompted to fill out any required commit fields at commit time. No more waiting until later for a git commit hook to run and reject your commit (though &lt;a href=&#34;https://github.com/kentcdodds/validate-commit-msg&#34;&gt;that&lt;/a&gt; can still be helpful). No more digging through &lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; to find what the preferred format is. Get instant feedback on your commit message formatting and be prompted for required fields.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/commitizen/cz-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/commitizen/cz-cli.svg?branch=master&#34; alt=&#34;travis.ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/commitizen/cz-cli/_build/latest?definitionId=2&#34;&gt;&lt;img src=&#34;https://dev.azure.com/commitizen/cz-cli/_apis/build/status/commitizen.cz-cli?branchName=master&#34; alt=&#34;Azure Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/commitizen/cz-cli?branch=master&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/commitizen/cz-cli.svg?sanitize=true&#34; alt=&#34;codecov.io&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/commitizen&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/commitizen.svg?sanitize=true&#34; alt=&#34;npm monthly downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/commitizen&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/commitizen.svg?sanitize=true&#34; alt=&#34;current version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%20%20%F0%9F%93%A6%F0%9F%9A%80-semantic--release-e10079.svg?sanitize=true&#34; alt=&#34;semantic-release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://stackoverflow.com/tags/commitizen&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/stackoverflow-community-orange.svg?longCache=true&amp;amp;logo=stackoverflow&#34; alt=&#34;commitizen on stackoverflow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installing the command line tool&lt;/h2&gt; &#xA;&lt;p&gt;Commitizen is currently tested against Node.js 12, 14, &amp;amp; 16, although it may work in older versions of Node.js. You should also have npm 6 or greater.&lt;/p&gt; &#xA;&lt;p&gt;Installation is as simple as running the following command (if you see &lt;code&gt;EACCES&lt;/code&gt; error, reading &lt;a href=&#34;https://docs.npmjs.com/getting-started/fixing-npm-permissions&#34;&gt;fixing npm permissions&lt;/a&gt; may help):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g commitizen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the command line tool&lt;/h2&gt; &#xA;&lt;h3&gt;If your repo is &lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/#making-your-repo-commitizen-friendly&#34;&gt;Commitizen friendly&lt;/a&gt;:&lt;/h3&gt; &#xA;&lt;p&gt;Simply use &lt;code&gt;git cz&lt;/code&gt; or just &lt;code&gt;cz&lt;/code&gt; instead of &lt;code&gt;git commit&lt;/code&gt; when committing. You can also use &lt;code&gt;git-cz&lt;/code&gt;, which is an alias for &lt;code&gt;cz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Alternatively&lt;/em&gt;, if you are using &lt;strong&gt;npm 5.2+&lt;/strong&gt; you can &lt;a href=&#34;https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b&#34;&gt;use &lt;code&gt;npx&lt;/code&gt;&lt;/a&gt; instead of installing globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npx cz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or as an npm script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  ...&#xA;  &#34;scripts&#34;: {&#xA;    &#34;commit&#34;: &#34;cz&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you&#39;re working in a Commitizen-friendly repository, you&#39;ll be prompted to fill in any required fields, and your commit messages will be formatted according to the standards defined by project maintainers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png&#34;&gt;&lt;img src=&#34;https://github.com/commitizen/cz-cli/raw/master/meta/screenshots/add-commit.png&#34; alt=&#34;Add and commit with Commitizen&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;If your repo is NOT Commitizen friendly:&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re &lt;strong&gt;not&lt;/strong&gt; working in a Commitizen-friendly repository, then &lt;code&gt;git cz&lt;/code&gt; will work just the same as &lt;code&gt;git commit&lt;/code&gt;, but &lt;code&gt;npx cz&lt;/code&gt; will use the &lt;a href=&#34;https://github.com/streamich/git-cz&#34;&gt;streamich/git-cz&lt;/a&gt; adapter. To fix this, you need to first &lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/#making-your-repo-commitizen-friendly&#34;&gt;make your repo Commitizen friendly&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Making your repo Commitizen friendly&lt;/h2&gt; &#xA;&lt;p&gt;For this example, we&#39;ll be setting up our repo to use &lt;a href=&#34;https://github.com/angular/angular.js/raw/master/DEVELOPERS.md#-git-commit-guidelines&#34;&gt;AngularJS&#39;s commit message convention&lt;/a&gt;, also known as &lt;a href=&#34;https://github.com/ajoslin/conventional-changelog&#34;&gt;conventional-changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;First, install the Commitizen CLI tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install commitizen -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, initialize your project to use the cz-conventional-changelog adapter by typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;commitizen init cz-conventional-changelog --save-dev --save-exact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you are using Yarn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;commitizen init cz-conventional-changelog --yarn --dev --exact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you want to force install over the top of an old adapter, you can apply the &lt;code&gt;--force&lt;/code&gt; argument. For more information on this, just run &lt;code&gt;commitizen help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The above command does three things for you:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Installs the cz-conventional-changelog adapter npm module&lt;/li&gt; &#xA; &lt;li&gt;Saves it to &lt;code&gt;package.json&lt;/code&gt;&#39;s &lt;code&gt;dependencies&lt;/code&gt; or &lt;code&gt;devDependencies&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Adds the &lt;code&gt;config.commitizen&lt;/code&gt; key to the root of your &lt;code&gt;package.json&lt;/code&gt; file as shown here:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;...&#xA;  &#34;config&#34;: {&#xA;    &#34;commitizen&#34;: {&#xA;      &#34;path&#34;: &#34;cz-conventional-changelog&#34;&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, Commitizen configs may be added to a &lt;code&gt;.czrc&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;path&#34;: &#34;cz-conventional-changelog&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This just tells Commitizen which adapter we actually want our contributors to use when they try to commit to this repo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;commitizen.path&lt;/code&gt; is resolved via &lt;a href=&#34;https://nodejs.org/api/globals.html#globals_require_resolve&#34;&gt;require.resolve&lt;/a&gt; and supports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;npm modules&lt;/li&gt; &#xA; &lt;li&gt;directories relative to &lt;code&gt;process.cwd()&lt;/code&gt; containing an &lt;code&gt;index.js&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;file base names relative to &lt;code&gt;process.cwd()&lt;/code&gt; with &lt;code&gt;.js&lt;/code&gt; extension&lt;/li&gt; &#xA; &lt;li&gt;full relative file names&lt;/li&gt; &#xA; &lt;li&gt;absolute paths&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that in the previous version of Commitizen we used czConfig. &lt;strong&gt;czConfig has been deprecated&lt;/strong&gt;, and you should migrate to the new format before Commitizen 3.0.0.&lt;/p&gt; &#xA;&lt;h3&gt;Optional: Install and run Commitizen locally&lt;/h3&gt; &#xA;&lt;p&gt;Installing and running Commitizen locally allows you to make sure that developers are running the exact same version of Commitizen on every machine.&lt;/p&gt; &#xA;&lt;p&gt;Install Commitizen with &lt;code&gt;npm install --save-dev commitizen&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On &lt;strong&gt;npm 5.2+&lt;/strong&gt; you can &lt;a href=&#34;https://medium.com/@maybekatz/introducing-npx-an-npm-package-runner-55f7d4bd282b&#34;&gt;use &lt;code&gt;npx&lt;/code&gt;&lt;/a&gt; to initialize the conventional changelog adapter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx commitizen init cz-conventional-changelog --save-dev --save-exact&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;strong&gt;previous versions of npm (&amp;lt; 5.2)&lt;/strong&gt; you can execute &lt;code&gt;./node_modules/.bin/commitizen&lt;/code&gt; or &lt;code&gt;./node_modules/.bin/cz&lt;/code&gt; in order to actually use the commands.&lt;/p&gt; &#xA;&lt;p&gt;You can then initialize the conventional changelog adapter using: &lt;code&gt;./node_modules/.bin/commitizen init cz-conventional-changelog --save-dev --save-exact&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;And you can then add some nice npm scripts in your &lt;code&gt;package.json&lt;/code&gt; file pointing to the local version of Commitizen:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  ...&#xA;  &#34;scripts&#34;: {&#xA;    &#34;commit&#34;: &#34;cz&#34;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will be more convenient for your users because then if they want to do a commit, all they need to do is run &lt;code&gt;npm run commit&lt;/code&gt; and they will get the prompts needed to start a commit!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; If you are using &lt;code&gt;precommit&lt;/code&gt; hooks thanks to something like &lt;a href=&#34;https://www.npmjs.com/package/husky&#34;&gt;&lt;code&gt;husky&lt;/code&gt;&lt;/a&gt;, you will need to name your script something other than &lt;code&gt;&#34;commit&#34;&lt;/code&gt; (e.g. &lt;code&gt;&#34;cm&#34;: &#34;cz&#34;&lt;/code&gt;). The reason is because npm scripts has a &#34;feature&#34; where it automatically runs scripts with the name &lt;em&gt;prexxx&lt;/em&gt; where &lt;em&gt;xxx&lt;/em&gt; is the name of another script. In essence, npm and husky will run &lt;code&gt;&#34;precommit&#34;&lt;/code&gt; scripts twice if you name the script &lt;code&gt;&#34;commit&#34;&lt;/code&gt;, and the workaround is to prevent the npm-triggered &lt;em&gt;precommit&lt;/em&gt; script.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Optional: Running Commitizen on &lt;code&gt;git commit&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This example shows how to incorporate Commitizen into the existing &lt;code&gt;git commit&lt;/code&gt; workflow by using git hooks and the &lt;code&gt;--hook&lt;/code&gt; command-line option. This is useful for project maintainers who wish to ensure the proper commit format is enforced on contributions from those unfamiliar with Commitizen.&lt;/p&gt; &#xA;&lt;p&gt;Once either of these methods is implemented, users running &lt;code&gt;git commit&lt;/code&gt; will be presented with an interactive Commitizen session that helps them write useful commit messages.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; This example assumes that the project has been set up to &lt;a href=&#34;https://github.com/commitizen/cz-cli#optional-install-and-run-commitizen-locally&#34;&gt;use Commitizen locally&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Traditional git hooks&lt;/h5&gt; &#xA;&lt;p&gt;Update &lt;code&gt;.git/hooks/prepare-commit-msg&lt;/code&gt; with the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#!/bin/bash&#xA;exec &amp;lt; /dev/tty &amp;amp;&amp;amp; node_modules/.bin/cz --hook || true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Husky&lt;/h5&gt; &#xA;&lt;p&gt;For &lt;code&gt;husky&lt;/code&gt; users, add the following configuration to the project&#39;s &lt;code&gt;package.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;husky&#34;: {&#xA;  &#34;hooks&#34;: {&#xA;    &#34;prepare-commit-msg&#34;: &#34;exec &amp;lt; /dev/tty &amp;amp;&amp;amp; npx cz --hook || true&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Why &lt;code&gt;exec &amp;lt; /dev/tty&lt;/code&gt;?&lt;/strong&gt; By default, git hooks are not interactive. This command allows the user to use their terminal to interact with Commitizen during the hook.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Congratulations! Your repo is Commitizen friendly. Time to flaunt it!&lt;/h4&gt; &#xA;&lt;p&gt;Add the &#34;Commitizen friendly&#34; badge to your README using the following markdown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[![Commitizen friendly](https://img.shields.io/badge/commitizen-friendly-brightgreen.svg)](http://commitizen.github.io/cz-cli/)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your badge will look like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://commitizen.github.io/cz-cli/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?sanitize=true&#34; alt=&#34;Commitizen friendly&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It may also make sense to change your &lt;code&gt;README.md&lt;/code&gt; or &lt;code&gt;CONTRIBUTING.md&lt;/code&gt; files to include or link to the Commitizen project so that your new contributors may learn more about installing and using Commitizen.&lt;/p&gt; &#xA;&lt;h2&gt;Conventional commit messages as a global utility&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;commitizen&lt;/code&gt; globally, if you have not already.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g commitizen&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install your preferred &lt;code&gt;commitizen&lt;/code&gt; adapter globally (for example &lt;a href=&#34;https://www.npmjs.com/package/cz-conventional-changelog&#34;&gt;&lt;code&gt;cz-conventional-changelog&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g cz-conventional-changelog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;.czrc&lt;/code&gt; file in your &lt;code&gt;home&lt;/code&gt; directory, with &lt;code&gt;path&lt;/code&gt; referring to the preferred, globally-installed, &lt;code&gt;commitizen&lt;/code&gt; adapter&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;{ &#34;path&#34;: &#34;cz-conventional-changelog&#34; }&#39; &amp;gt; ~/.czrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You are all set! Now &lt;code&gt;cd&lt;/code&gt; into any &lt;code&gt;git&lt;/code&gt; repository and use &lt;code&gt;git cz&lt;/code&gt; instead of &lt;code&gt;git commit&lt;/code&gt;, and you will find the &lt;code&gt;commitizen&lt;/code&gt; prompt.&lt;/p&gt; &#xA;&lt;p&gt;Pro tip: You can use all the &lt;code&gt;git commit&lt;/code&gt; &lt;code&gt;options&lt;/code&gt; with &lt;code&gt;git cz&lt;/code&gt;. For example: &lt;code&gt;git cz -a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If your repository is a &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; project, making it &lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/#making-your-repo-commitizen-friendly&#34;&gt;Commitizen friendly&lt;/a&gt; is super easy.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If your repository is already &lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/#making-your-repo-commitizen-friendly&#34;&gt;Commitizen friendly&lt;/a&gt;, the local &lt;code&gt;commitizen&lt;/code&gt; adapter will be used, instead of globally installed one.&lt;/p&gt; &#xA;&lt;h2&gt;Commitizen for multi-repo projects&lt;/h2&gt; &#xA;&lt;p&gt;As a project maintainer of many projects, you may want to standardize on a single commit message format for all of them. You can create your own node module which acts as a front-end for Commitizen.&lt;/p&gt; &#xA;&lt;h3&gt;1. Create your own entry point script&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// my-cli.js&#xA;&#xA;#!/usr/bin/env node&#xA;&#34;use strict&#34;;&#xA;&#xA;const path = require(&#39;path&#39;);&#xA;const bootstrap = require(&#39;commitizen/dist/cli/git-cz&#39;).bootstrap;&#xA;&#xA;bootstrap({&#xA;  cliPath: path.join(__dirname, &#39;../../node_modules/commitizen&#39;),&#xA;  // this is new&#xA;  config: {&#xA;    &#34;path&#34;: &#34;cz-conventional-changelog&#34;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Add the script to your &lt;code&gt;package.json&lt;/code&gt; file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// package.json&#xA;&#xA;{&#xA;  &#34;name&#34;: &#34;company-commit&#34;,&#xA;  &#34;bin&#34;: &#34;./my-cli.js&#34;,&#xA;  &#34;dependencies&#34;: {&#xA;    &#34;commitizen&#34;: &#34;^2.7.6&#34;,&#xA;    &#34;cz-conventional-changelog&#34;: &#34;^1.1.5&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Publish it to npm and use it!&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save-dev company-commit&#xA;&#xA;./node_modules/.bin/company-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;p&gt;We know that every project and build process has different requirements, so we&#39;ve tried to keep Commitizen open for extension. You can do this by choosing from any of the pre-built adapters or even by building your own. Here are some of the great adapters available to you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cz-conventional-changelog&#34;&gt;cz-conventional-changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@digitalroute/cz-conventional-changelog-for-jira&#34;&gt;cz-conventional-changelog-for-jira&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cz-conventional-changelog-with-jiraid-detection&#34;&gt;cz-conventional-changelog-with-jiraid-detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cz-jira-smart-commit&#34;&gt;cz-jira-smart-commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EndemolShineGroup/cz-jira-smart-commit&#34;&gt;@endemolshinegroup/cz-jira-smart-commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/EndemolShineGroup/cz-github&#34;&gt;@endemolshinegroup/cz-github&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/rb-conventional-changelog&#34;&gt;rb-conventional-changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/@mapbox/cz-mapbox-changelog&#34;&gt;@mapbox/cz-mapbox-changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/leonardoanalista/cz-customizable&#34;&gt;cz-customizable&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/cz-commitlint&#34;&gt;cz-commitlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conventional-changelog/commitlint/tree/master/@commitlint/prompt&#34;&gt;commitlint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KnisterPeter/vscode-commitizen&#34;&gt;vscode-commitizen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ngryman/cz-emoji&#34;&gt;cz-emoji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cz-adapter-eslint&#34;&gt;cz-adapter-eslint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/martinmcwhorter/commitiquette&#34;&gt;commitiquette&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tyankatsu0105/cz-format-extension&#34;&gt;cz-format-extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/cz-emoji-conventional&#34;&gt;cz-emoji-conventional&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Zhengqbbb/cz-git&#34;&gt;cz-git&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To create an adapter, just fork one of these great adapters and modify it to suit your needs. We pass you an instance of &lt;a href=&#34;https://github.com/SBoudrias/Inquirer.js/&#34;&gt;Inquirer.js&lt;/a&gt;, but you can capture input using whatever means necessary. Just call the &lt;code&gt;commit&lt;/code&gt; callback with a string and we&#39;ll be happy. Publish it to npm, and you&#39;ll be all set!&lt;/p&gt; &#xA;&lt;h2&gt;Retrying failed commits&lt;/h2&gt; &#xA;&lt;p&gt;As of version 2.7.1, you may attempt to retry the last commit using the &lt;code&gt;git cz --retry&lt;/code&gt; command. This can be helpful when you have tests set up to run via a git precommit hook. In this scenario, you may have attempted a Commitizen commit, painstakingly filled out all of the commitizen fields, but your tests fail. In previous Commitizen versions, after fixing your tests, you would be forced to fill out all of the fields again. Enter the retry command. Commitizen will retry the last commit that you attempted in this repo without you needing to fill out the fields again.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the retry cache may be cleared when upgrading Commitizen versions, upgrading adapters, or if you delete the &lt;code&gt;commitizen.json&lt;/code&gt; file in your home or temp directory. Additionally, the commit cache uses the filesystem path of the repo, so if you move a repo or change its path, you will not be able to retry a commit. This is an edge case but might be confusing if you have scenarios where you are moving folders that contain repos.&lt;/p&gt; &#xA;&lt;p&gt;It is important to note that if you are running &lt;code&gt;cz&lt;/code&gt; from an npm script (let&#39;s say it is called &lt;code&gt;commit&lt;/code&gt;) you will need to do one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pass &lt;code&gt;-- --retry&lt;/code&gt; as an argument for your script. i.e: &lt;code&gt;npm run commit -- --retry&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://www.npmjs.com/package/npx&#34;&gt;npx&lt;/a&gt; to find and call the &lt;code&gt;cz&lt;/code&gt; executable directly. i.e: &lt;code&gt;npx cz --retry&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note that the last two options &lt;strong&gt;do not&lt;/strong&gt; require you to pass &lt;code&gt;--&lt;/code&gt; before the args but the first &lt;strong&gt;does&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Commitizen for project maintainers&lt;/h2&gt; &#xA;&lt;p&gt;As a project maintainer, making your repo Commitizen friendly allows you to select pre-existing commit message conventions or to create your own custom commit message convention. When a contributor to your repo uses Commitizen, they will be prompted for the correct fields at commit time.&lt;/p&gt; &#xA;&lt;h2&gt;Go further&lt;/h2&gt; &#xA;&lt;p&gt;Commitizen is great on its own, but it shines when you use it with some other amazing open source tools. Kent C. Dodds shows you how to accomplish this in his Egghead.io series, &lt;a href=&#34;https://app.egghead.io/playlists/how-to-write-an-open-source-javascript-library&#34;&gt;How to Write an Open Source JavaScript Library&lt;/a&gt;. Many of the concepts can be applied to non-JavaScript projects as well.&lt;/p&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;h3&gt;About Commitizen&lt;/h3&gt; &#xA;&lt;p&gt;Commitizen is an open source project that helps contributors be good open source citizens. It accomplishes this by prompting them to follow commit message conventions at commit time. It also empowers project maintainers to create or use predefined commit message conventions in their repos to better communicate their expectations to potential contributors.&lt;/p&gt; &#xA;&lt;h3&gt;Commitizen or Commit Hooks&lt;/h3&gt; &#xA;&lt;p&gt;Both! Commitizen is not meant to be a replacement for git commit hooks. Rather, it is meant to work side-by-side with them to ensure a consistent and positive experience for your contributors. Commitizen treats the commit command as a declarative action. The contributor is declaring that they wish to contribute to your project. It is up to you as the maintainer to define what rules they should be following.&lt;/p&gt; &#xA;&lt;p&gt;We accomplish this by letting you define which adapter you&#39;d like to use in your project. Adapters just allow multiple projects to share the same commit message conventions. A good example of an adapter is the cz-conventional-changelog adapter.&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conventional-changelog/conventional-changelog&#34;&gt;conventional-changelog&lt;/a&gt; – Generate a changelog from conventional commit history&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/conventional-changelog/commitlint&#34;&gt;commitlint&lt;/a&gt; - Lint commit messages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Authors and Contributors&lt;/h2&gt; &#xA;&lt;p&gt;@JimTheDev (Jim Cummins, author) @kentcdodds @accraze @kytwb @Den-dp&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to @stevelacy, whose &lt;a href=&#34;https://www.npmjs.com/package/gulp-git&#34;&gt;gulp-git&lt;/a&gt; project makes commitizen possible.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://raw.githubusercontent.com/commitizen/cz-cli/master/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/commitizen#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/commitizen#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/commitizen#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/commitizen/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/commitizen/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/commitizen/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>