<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-28T01:37:10Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>RobinHerbots/Inputmask</title>
    <updated>2022-09-28T01:37:10Z</updated>
    <id>tag:github.com,2022-09-28:/RobinHerbots/Inputmask</id>
    <link href="https://github.com/RobinHerbots/Inputmask" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Input Mask plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Inputmask&lt;/h1&gt; &#xA;&lt;p&gt;Copyright (c) 2010 - 2021 Robin Herbots Licensed under the MIT license (&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;https://opensource.org/licenses/MIT&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;The Inputmask has a very permissive license and this will stay that way. But when you use the Inputmask in a commercial setting, be so honest to make a small donation. This will be appreciated very much.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=ZNR3EB6JTMMSS&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/npm/v/inputmask&#34; alt=&#34;npm&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/inputmask/next&#34; alt=&#34;npm (tag)&#34;&gt; &lt;img src=&#34;https://img.shields.io/librariesio/release/npm/inputmask&#34; alt=&#34;Libraries.io dependency status for latest release&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Inputmask is a javascript library that creates an input mask. Inputmask can run against vanilla javascript, jQuery, and jqlite.&lt;/p&gt; &#xA;&lt;p&gt;An inputmask helps the user with the input by ensuring a predefined format. This can be useful for dates, numerics, phone numbers, ...&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;easy to use&lt;/li&gt; &#xA; &lt;li&gt;optional parts anywhere in the mask&lt;/li&gt; &#xA; &lt;li&gt;possibility to define aliases which hide the complexity&lt;/li&gt; &#xA; &lt;li&gt;date / DateTime masks&lt;/li&gt; &#xA; &lt;li&gt;numeric masks&lt;/li&gt; &#xA; &lt;li&gt;lots of callbacks&lt;/li&gt; &#xA; &lt;li&gt;non-greedy masks&lt;/li&gt; &#xA; &lt;li&gt;many features can be enabled/disabled/configured by options&lt;/li&gt; &#xA; &lt;li&gt;supports read-only/disabled/dir=&#34;rtl&#34; attributes&lt;/li&gt; &#xA; &lt;li&gt;support data-inputmask attribute(s)&lt;/li&gt; &#xA; &lt;li&gt;alternator-mask&lt;/li&gt; &#xA; &lt;li&gt;regex-mask&lt;/li&gt; &#xA; &lt;li&gt;dynamic-mask&lt;/li&gt; &#xA; &lt;li&gt;preprocessing-mask&lt;/li&gt; &#xA; &lt;li&gt;JIT-masking&lt;/li&gt; &#xA; &lt;li&gt;value formatting / validating without input element&lt;/li&gt; &#xA; &lt;li&gt;AMD/CommonJS support&lt;/li&gt; &#xA; &lt;li&gt;dependencyLibs: vanilla javascript, jQuery, jqlite&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;input-mask&amp;gt; htmlelement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Demo page see &lt;a href=&#34;https://robinherbots.github.io/Inputmask/&#34;&gt;https://robinherbots.github.io/Inputmask/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.jetbrains.com/?from=inputmask&#34;&gt;Jetbrains&lt;/a&gt; for providing a free license for their excellent Webstorm IDE.&lt;br&gt; &lt;a href=&#34;https://www.jetbrains.com/?from=inputmask&#34;&gt; &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/1/1a/JetBrains_Logo_2016.svg?sanitize=true&#34; alt=&#34;Jetbrains&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://www.browserstack.com&#34;&gt;Browserstack&lt;/a&gt; for providing a free license, so we can automate testing in different browsers and devices.&lt;br&gt; &lt;a href=&#34;https://www.browserstack.com&#34;&gt; &lt;img src=&#34;https://www.browserstack.com/images/layout/browserstack-logo-600x315.png&#34; alt=&#34;Browserstack&#34; width=&#34;150&#34;&gt; &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;dependencyLibs&lt;/h3&gt; &#xA;&lt;p&gt;Inputmask can run against different javascript libraries. You can choose between:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;inputmask.dependencyLib (vanilla)&lt;/li&gt; &#xA; &lt;li&gt;inputmask.dependencyLib.jquery&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Classic web with &amp;lt;script&amp;gt; tag&lt;/h3&gt; &#xA;&lt;p&gt;Include the js-files which you can find in the &lt;code&gt;dist&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;Inputmask with jQuery as dependencylib.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;jquery.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;dist/jquery.inputmask.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inputmask with vanilla dependencylib.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;dist/inputmask.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you like to automatically bind the inputmask to the inputs marked with the data-inputmask- ... attributes you may also want to include the inputmask.binding.js&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;dist/bindings/inputmask.binding.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;webpack&lt;/h3&gt; &#xA;&lt;h4&gt;Install the package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install inputmask --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Install the latest beta version&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install inputmask@next --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;In your modules&lt;/h4&gt; &#xA;&lt;p&gt;If you want to include the Inputmask and all extensions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;var Inputmask = require(&#39;inputmask&#39;);&#xA;&#xA;//es6&#xA;import Inputmask from &#34;inputmask&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ES6&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;import Inputmask from &#34;inputmask.es6.js&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;via Inputmask class&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var selector = document.getElementById(&#34;selector&#34;);&#xA;&#xA;var im = new Inputmask(&#34;99-9999999&#34;);&#xA;im.mask(selector);&#xA;&#xA;//or&#xA;&#xA;Inputmask({&#34;mask&#34;: &#34;(999) 999-9999&#34;, ... other_options, ...}).mask(selector);&#xA;Inputmask(&#34;9-a{1,3}9{1,3}&#34;).mask(selector);&#xA;Inputmask(&#34;9&#34;, { repeat: 10 }).mask(selector);&#xA;&#xA;Inputmask({ regex: &#34;\\d*&#34; }).mask(selector);&#xA;Inputmask({ regex: String.raw`\d*` }).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;via jquery plugin&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(selector).inputmask(&#34;99-9999999&#34;);  //static mask&#xA;  $(selector).inputmask({&#34;mask&#34;: &#34;(999) 999-9999&#34;}); //specifying options&#xA;  $(selector).inputmask(&#34;9-a{1,3}9{1,3}&#34;); //mask with dynamic syntax&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;via data-inputmask attribute&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input data-inputmask=&#34;&#39;alias&#39;: &#39;datetime&#39;&#34; /&amp;gt;&#xA;&amp;lt;input data-inputmask=&#34;&#39;mask&#39;: &#39;9&#39;, &#39;repeat&#39;: 10, &#39;greedy&#39; : false&#34; /&amp;gt;&#xA;&amp;lt;input data-inputmask=&#34;&#39;mask&#39;: &#39;99-9999999&#39;&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;:input&#34;).inputmask();&#xA;  or&#xA;  Inputmask().mask(document.querySelectorAll(&#34;input&#34;));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Any option can also be passed through the use of a data attribute. Use data-inputmask-&amp;lt;&lt;strong&gt;&lt;em&gt;the name of the option&lt;/em&gt;&lt;/strong&gt;&amp;gt;=&#34;value&#34;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;example1&#34; data-inputmask-clearmaskonlostfocus=&#34;false&#34; /&amp;gt;&#xA;&amp;lt;input id=&#34;example2&#34; data-inputmask-regex=&#34;[a-za-zA-Z0-9!#$%&amp;amp;&#39;*+/=?^_`{|}~-]+(?:\.[a-zA-Z0-9!#$%&amp;amp;&#39;*+/=?^_`{|}~-]+)*@(?:[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?\.)+[a-zA-Z0-9](?:[a-zA-Z0-9-]*[a-zA-Z0-9])?&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#example1&#34;).inputmask(&#34;99-9999999&#34;);&#xA;  $(&#34;#example2&#34;).inputmask();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;via &amp;lt;input-mask&amp;gt; element&lt;/h3&gt; &#xA;&lt;p&gt;Use the input-mask element in your HTML code and set the options as attributes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input-mask alias=&#34;currency&#34;&amp;gt;&amp;lt;/input-mask&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Allowed HTML-elements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;text&#34;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;search&#34;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;tel&#34;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;url&#34;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;input type=&#34;password&#34;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;div contenteditable=&#34;true&#34;&amp;gt;&lt;/code&gt; (and all others supported by contenteditable)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;any html-element (mask text content or set maskedvalue with jQuery.val)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The allowed input types are defined in the supportsInputType option. Also see (&lt;a href=&#34;https://html.spec.whatwg.org/multipage/forms.html#do-not-apply&#34;&gt;input-type-ref&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;Default masking definitions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;9&lt;/code&gt; : numeric&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;a&lt;/code&gt; : alphabetical&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;*&lt;/code&gt; : alphanumeric&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are more definitions defined within the extensions.&lt;br&gt;You can find info within the js-files or by further exploring the options.&lt;/p&gt; &#xA;&lt;h6&gt;Note:&lt;/h6&gt; &#xA;&lt;p&gt;When your new mask is acting strange and replaces some static chars with the mask, then there is a definition that uses the char as a symbol. To solve this you need to &lt;a href=&#34;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#escape-special-mask-chars&#34;&gt;double escape the char&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Masking types&lt;/h2&gt; &#xA;&lt;h3&gt;Static masks&lt;/h3&gt; &#xA;&lt;p&gt;These are the very basics of masking. The mask is defined and will not change during the input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(selector).inputmask(&#34;aa-9999&#34;);  //static mask&#xA;  $(selector).inputmask({mask: &#34;aa-9999&#34;});  //static mask&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Optional masks&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to define some parts in the mask as optional. This is done by using [ ].&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;#test&#39;).inputmask(&#39;(99) 9999[9]-9999&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This mask will allow input like &lt;code&gt;(99) 99999-9999&lt;/code&gt; or &lt;code&gt;(99) 9999-9999&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Input =&amp;gt; 12123451234 mask =&amp;gt; (12) 12345-1234 (trigger complete)&lt;br&gt; Input =&amp;gt; 121234-1234 mask =&amp;gt; (12) 1234-1234 (trigger complete)&lt;br&gt; Input =&amp;gt; 1212341234 mask =&amp;gt; (12) 12341-234_ (trigger incomplete)&lt;/p&gt; &#xA;&lt;h4&gt;skipOptionalPartCharacter&lt;/h4&gt; &#xA;&lt;p&gt;As an extra, there is another configurable character which is used to skip an optional part in the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;skipOptionalPartCharacter: &#34; &#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Input =&amp;gt; 121234 1234 mask =&amp;gt; (12) 1234-1234 (trigger complete)&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;clearMaskOnLostFocus: true&lt;/code&gt; is set in the options (default), the mask will clear out the optional part when it is not filled in, and this only in case the optional part is at the end of the mask.&lt;/p&gt; &#xA;&lt;p&gt;For example, given:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#39;#test&#39;).inputmask(&#39;999[-AAA]&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While the field has focus and is blank, users will see the full mask &lt;code&gt;___-___&lt;/code&gt;. When the required part of the mask is filled and the field loses focus, the user will see &lt;code&gt;123&lt;/code&gt;. When both the required and optional parts of the mask are filled out and the field loses focus, the user will see &lt;code&gt;123-ABC&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Optional masks with greedy false&lt;/h4&gt; &#xA;&lt;p&gt;When defining an optional mask together with the greedy: false option, the inputmask will show the smallest possible mask as input first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask({ mask: &#34;9[-9999]&#34;, greedy: false });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The initial mask shown will be &#34;&lt;strong&gt;_&lt;/strong&gt;&#34; instead of &#34;&lt;strong&gt;_&lt;/strong&gt;-____&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;Dynamic masks&lt;/h3&gt; &#xA;&lt;p&gt;Dynamic masks can change during input. To define a dynamic part use { }.&lt;/p&gt; &#xA;&lt;p&gt;{n} =&amp;gt; n repeats {n|j} =&amp;gt; n repeats, with j jitmasking {n,m} =&amp;gt; from n to m repeats {n,m|j} =&amp;gt; from n to m repeats, with j jitmasking&lt;/p&gt; &#xA;&lt;p&gt;Also {+} and {*} is allowed. + start from 1 and * start from 0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(selector).inputmask(&#34;aa-9{4}&#34;);  //static mask with dynamic syntax&#xA;  $(selector).inputmask(&#34;aa-9{1,4}&#34;);  //dynamic mask ~ the 9 def can be occur 1 to 4 times&#xA;&#xA;  //email mask&#xA;  $(selector).inputmask({&#xA;    mask: &#34;*{1,20}[.*{1,20}][.*{1,20}][.*{1,20}]@*{1,20}[.*{2,6}][.*{1,2}]&#34;,&#xA;    greedy: false,&#xA;    onBeforePaste: function (pastedValue, opts) {&#xA;      pastedValue = pastedValue.toLowerCase();&#xA;      return pastedValue.replace(&#34;mailto:&#34;, &#34;&#34;);&#xA;    },&#xA;    definitions: {&#xA;      &#39;*&#39;: {&#xA;        validator: &#34;[0-9A-Za-z!#$%&amp;amp;&#39;*+/=?^_`{|}~\-]&#34;,&#xA;        casing: &#34;lower&#34;&#xA;      }&#xA;    }&#xA;  });&#xA;  //decimal mask&#xA;   Inputmask(&#34;(.999){+|1},00&#34;, {&#xA;        positionCaretOnClick: &#34;radixFocus&#34;,&#xA;        radixPoint: &#34;,&#34;,&#xA;        _radixDance: true,&#xA;        numericInput: true,&#xA;        placeholder: &#34;0&#34;,&#xA;        definitions: {&#xA;            &#34;0&#34;: {&#xA;                validator: &#34;[0-9\uFF11-\uFF19]&#34;&#xA;            }&#xA;        }&#xA;   }).mask(selector);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alternator masks&lt;/h3&gt; &#xA;&lt;p&gt;The alternator syntax is like an &lt;strong&gt;OR&lt;/strong&gt; statement. The mask can be one of the 3 choices specified in the alternator.&lt;/p&gt; &#xA;&lt;p&gt;To define an alternator use the |. ex: &#34;a|9&#34; =&amp;gt; a or 9 &#34;(aaa)|(999)&#34; =&amp;gt; aaa or 999 &#34;(aaa|999|9AA)&#34; =&amp;gt; aaa or 999 or 9AA&lt;br&gt; &#34;aaaa|9999&#34; =&amp;gt; aaa a or 9 999&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Also make sure to read about the &lt;a href=&#34;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#keepStatic&#34;&gt;keepStatic&lt;/a&gt; option.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;selector&#34;).inputmask(&#34;(99.9)|(X)&#34;, {&#xA;  definitions: {&#xA;    &#34;X&#34;: {&#xA;      validator: &#34;[xX]&#34;,&#xA;      casing: &#34;upper&#34;&#xA;    }&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;selector&#34;).inputmask({&#xA;  mask: [&#34;99.9&#34;, &#34;X&#34;],&#xA;  definitions: {&#xA;    &#34;X&#34;: {&#xA;      validator: &#34;[xX]&#34;,&#xA;      casing: &#34;upper&#34;&#xA;    }&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Preprocessing masks&lt;/h3&gt; &#xA;&lt;p&gt;You can define the mask as a function that can allow you to preprocess the resulting mask. Example sorting for multiple masks or retrieving mask definitions dynamically through ajax. The preprocessing fn should return a valid mask definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask({ mask: function () { /* do stuff */ return [&#34;[1-]AAA-999&#34;, &#34;[1-]999-AAA&#34;]; }});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JIT Masking&lt;/h3&gt; &#xA;&lt;p&gt;Just in time masking. With the jitMasking option, you can enable jit masking. The mask will only be visible for the user-entered characters. Default: false&lt;/p&gt; &#xA;&lt;p&gt;Value can be true or a threshold number or false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask(&#34;datetime&#34;, { jitMasking: true }).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Define custom definitions&lt;/h2&gt; &#xA;&lt;p&gt;You can define your own definitions to use in your mask.&lt;br&gt;Start by choosing a masksymbol.&lt;/p&gt; &#xA;&lt;h3&gt;validator(chrs, maskset, pos, strict, opts)&lt;/h3&gt; &#xA;&lt;p&gt;Next, define your validator. The validator can be a regular expression or a function.&lt;/p&gt; &#xA;&lt;p&gt;The return value of a validator can be true, false, or a command object.&lt;/p&gt; &#xA;&lt;h4&gt;Options of the command object&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;pos : position to insert&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;c : character to insert&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;caret : position of the caret&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;remove : position(s) to remove&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;pos or [pos1, pos2]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;insert : position(s) to add :&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;{ pos : position to insert, c : character to insert, fromIsValid : true/false, strict : true/false }&lt;/li&gt; &#xA;   &lt;li&gt;[{ pos : position to insert, c : character to insert, fromIsValid : true/false, strict : true/false }, { ...}, ... ]&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;fromIsValid &amp;amp; strict defaults to true.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;refreshFromBuffer :&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;true =&amp;gt; refresh validPositions from the complete buffer&lt;/li&gt; &#xA;   &lt;li&gt;{ start: , end: } =&amp;gt; refresh from start to end&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;rewritePosition: rewrite the maskPos within the isvalid function&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#preValidation&#34;&gt;preValidation option&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;definitionSymbol&lt;/h3&gt; &#xA;&lt;p&gt;When you insert or delete characters, they are only shifted when the definition type is the same. This behavior can be overridden by giving a definitionSymbol. (see example x, y, z, which can be used for IP-address masking, the validation is different, but it is allowed to shift the characters between the definitions)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask.extendDefinitions({&#xA;  &#39;f&#39;: {  //masksymbol&#xA;    &#34;validator&#34;: &#34;[0-9\(\)\.\+/ ]&#34;&#xA;  },&#xA;  &#39;g&#39;: {&#xA;    &#34;validator&#34;: function (chrs, buffer, pos, strict, opts) {&#xA;      //do some logic and return true, false, or { &#34;pos&#34;: new position, &#34;c&#34;: character to place }&#xA;    }&#xA;  },&#xA;  &#39;j&#39;: { //basic year&#xA;    validator: &#34;(19|20)\\d{2}&#34;&#xA;  },&#xA;  &#39;x&#39;: {&#xA;    validator: &#34;[0-2]&#34;,&#xA;    definitionSymbol: &#34;i&#34; //this allows shifting values from other definitions, with the same masksymbol or definitionSymbol&#xA;  },&#xA;  &#39;y&#39;: {&#xA;    validator: function (chrs, buffer, pos, strict, opts) {&#xA;      var valExp2 = new RegExp(&#34;2[0-5]|[01][0-9]&#34;);&#xA;      return valExp2.test(buffer[pos - 1] + chrs);&#xA;    },&#xA;    definitionSymbol: &#34;i&#34;&#xA;  },&#xA;  &#39;z&#39;: {&#xA;    validator: function (chrs, buffer, pos, strict, opts) {&#xA;      var valExp3 = new RegExp(&#34;25[0-5]|2[0-4][0-9]|[01][0-9][0-9]&#34;);&#xA;      return valExp3.test(buffer[pos - 2] + buffer[pos - 1] + chrs);&#xA;    },&#xA;    definitionSymbol: &#34;i&#34;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;placeholder&lt;/h3&gt; &#xA;&lt;p&gt;Specify a placeholder for a definition. This can also be a function.&lt;/p&gt; &#xA;&lt;h3&gt;optional&lt;/h3&gt; &#xA;&lt;p&gt;Mark the definition as optional&lt;/p&gt; &#xA;&lt;h3&gt;static&lt;/h3&gt; &#xA;&lt;p&gt;Mark the definition as static&lt;/p&gt; &#xA;&lt;h3&gt;casing (definition option)&lt;/h3&gt; &#xA;&lt;p&gt;Specify casing options.&lt;br&gt; The options are the same as the &lt;a href=&#34;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#casing&#34;&gt;Casing option&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;generated&lt;/h3&gt; &#xA;&lt;p&gt;Mark the definition as generated&lt;/p&gt; &#xA;&lt;h2&gt;set defaults&lt;/h2&gt; &#xA;&lt;p&gt;The defaults can be set as below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask.extendDefaults({&#xA;  &#39;autoUnmask&#39;: true&#xA;});&#xA;Inputmask.extendDefinitions({&#xA;  &#39;A&#39;: {&#xA;    validator: &#34;[A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]&#34;,&#xA;    casing: &#34;upper&#34; //auto uppercasing&#xA;  },&#xA;  &#39;+&#39;: {&#xA;    validator: &#34;[0-9A-Za-z\u0410-\u044F\u0401\u0451\u00C0-\u00FF\u00B5]&#34;,&#xA;    casing: &#34;upper&#34;&#xA;  }&#xA;});&#xA;Inputmask.extendAliases({&#xA;  &#39;numeric&#39;: {&#xA;    mask: &#34;r&#34;,&#xA;    greedy: false,&#xA;    ...&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;But if the property is defined within an alias you need to set it for the alias definition. This is also for default plugin options. If the alias definitions extend on default options, you can only override it at alias level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask.extendAliases({&#xA;  &#39;numeric&#39;: {&#xA;    autoUnmask: true,&#xA;    allowPlus: false,&#xA;    allowMinus: false&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, the preferred way to alter properties for an alias is by creating a new alias that inherits from the default alias definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask.extendAliases({&#xA;  &#39;myNum&#39;: {&#xA;    alias: &#34;numeric&#34;,&#xA;    placeholder: &#39;&#39;,&#xA;    allowPlus: false,&#xA;    allowMinus: false&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once defined, you can call the alias by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask(&#34;myNum&#34;).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All callbacks are implemented as options. This means that you can set general implementations for the callbacks by setting a default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask.extendDefaults({&#xA;  onKeyValidation: function(key, result){&#xA;    if (!result){&#xA;      alert(&#39;Your input is not valid&#39;)&#xA;    }&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Methods:&lt;/h2&gt; &#xA;&lt;h3&gt;mask(elems)&lt;/h3&gt; &#xA;&lt;p&gt;Create a mask for the input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask({ mask: &#34;99-999-99&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask({ mask: &#34;99-999-99&#34;}).mask(document.querySelectorAll(selector));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask(&#34;99-999-99&#34;).mask(document.querySelectorAll(selector));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var im = new Inputmask(&#34;99-999-99&#34;);&#xA;im.mask(document.querySelectorAll(selector));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask(&#34;99-999-99&#34;).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;unmaskedvalue&lt;/h3&gt; &#xA;&lt;p&gt;Get the &lt;code&gt;unmaskedvalue&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask(&#39;unmaskedvalue&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.getElementById(selector);&#xA;if (input.inputmask)&#xA;  input.inputmask.unmaskedvalue()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Value unmasking&lt;/h4&gt; &#xA;&lt;p&gt;Unmask a given value against the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var unformattedMask = Inputmask.unmask(&#34;123-45678-90&#34;, { mask: &#34;999-99999-99&#34; }); //1234567890&#xA;var unformattedDate = Inputmask.unmask(&#34;23/03/1973&#34;, { alias: &#34;datetime&#34;, inputFormat: &#34;dd/mm/yyyy&#34;, outputFormat: &#34;ddmmyyyy&#34;});//23031973&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;remove&lt;/h3&gt; &#xA;&lt;p&gt;Remove the &lt;code&gt;inputmask&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask(&#39;remove&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var input = document.getElementById(selector);&#xA;if (input.inputmask)&#xA;  input.inputmask.remove()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask.remove(document.getElementById(selector));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;getemptymask&lt;/h3&gt; &#xA;&lt;p&gt;return the default (empty) mask value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#test&#34;).inputmask(&#34;999-AAA&#34;);&#xA;  var initialValue = $(&#34;#test&#34;).inputmask(&#34;getemptymask&#34;);  // initialValue  =&amp;gt; &#34;___-___&#34;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;hasMaskedValue&lt;/h3&gt; &#xA;&lt;p&gt;Check whether the returned value is masked or not; currently only works reliably when using jquery.val fn to retrieve the value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  function validateMaskedValue(val){}&#xA;  function validateValue(val){}&#xA;&#xA;  var val = $(&#34;#test&#34;).val();&#xA;  if ($(&#34;#test&#34;).inputmask(&#34;hasMaskedValue&#34;))&#xA;    validateMaskedValue(val);&#xA;  else&#xA;    validateValue(val);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;isComplete&lt;/h3&gt; &#xA;&lt;p&gt;Verify whether the current value is complete or not.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  if ($(selector).inputmask(&#34;isComplete&#34;)){&#xA;    //do something&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;getmetadata&lt;/h3&gt; &#xA;&lt;p&gt;The metadata of the actual mask provided in the mask definitions can be obtained by calling getmetadata. If only a mask is provided the mask definition will be returned by the getmetadata.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask(&#34;getmetadata&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;setvalue&lt;/h3&gt; &#xA;&lt;p&gt;The setvalue functionality is to set a value to the inputmask like you would do with jQuery.val, BUT it will trigger the internal event used by the inputmask always, whatever the case. This is particular usefull when cloning an inputmask with jQuery.clone. Cloning an inputmask is not a fully functional clone. On the first event (mouseenter, focus, ...) the inputmask can detect if it were cloned and can reactivate the masking. However when setting the value with jQuery.val there is none of the events triggered in that case. The setvalue functionality does this for you.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$(selector).inputmask(&#34;setvalue&#34;, value);&#xA;&#xA;var selector = document.getElementById(&#34;selector&#34;);&#xA;selector.inputmask.setValue(value);&#xA;&#xA;Inputmask.setValue(selector, value);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;option(options, noremask)&lt;/h3&gt; &#xA;&lt;p&gt;Get or set an option on an existing inputmask. The option method is intented for adding extra options like callbacks, etc at a later time to the mask.&lt;/p&gt; &#xA;&lt;p&gt;When extra options are set the mask is automatically reapplied, unless you pas true for the noremask argument.&lt;/p&gt; &#xA;&lt;p&gt;Set an option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;document.querySelector(&#34;#CellPhone&#34;).inputmask.option({&#xA;  onBeforePaste: function (pastedValue, opts) {&#xA;    return phoneNumOnPaste(pastedValue, opts);&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;#CellPhone&#34;).inputmask(&#34;option&#34;, {&#xA;  onBeforePaste: function (pastedValue, opts) {&#xA;    return phoneNumOnPaste(pastedValue, opts);&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;format&lt;/h3&gt; &#xA;&lt;p&gt;Instead of masking an input element, it is also possible to use the inputmask for formatting given values. Think of formatting values to show in jqGrid or on other elements then inputs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var formattedDate = Inputmask.format(&#34;2331973&#34;, { alias: &#34;datetime&#34;, inputFormat: &#34;dd/mm/yyyy&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;isValid&lt;/h3&gt; &#xA;&lt;p&gt;Validate a given value against the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var isValid = Inputmask.isValid(&#34;23/03/1973&#34;, { alias: &#34;datetime&#34;, inputFormat: &#34;dd/mm/yyyy&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options:&lt;/h2&gt; &#xA;&lt;h3&gt;placeholder&lt;/h3&gt; &#xA;&lt;p&gt;Change the mask placeholder. Default: &#34;_&#34;&lt;/p&gt; &#xA;&lt;p&gt;Instead of &#34;_&#34;, you can change the unfilled characters mask as you like, simply by adding the &lt;code&gt;placeholder&lt;/code&gt; option.&lt;br&gt; For example, &lt;code&gt;placeholder: &#34; &#34;&lt;/code&gt; will change the default autofill with empty values&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#date&#34;).inputmask(&#34;99/99/9999&#34;,{ &#34;placeholder&#34;: &#34;*&#34; });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or a multi-char placeholder&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#date&#34;).inputmask(&#34;99/99/9999&#34;,{ &#34;placeholder&#34;: &#34;dd/mm/yyyy&#34; });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;optionalmarker&lt;/h3&gt; &#xA;&lt;p&gt;Definition of the symbols used to indicate an optional part in the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;optionalmarker: { start: &#34;[&#34;, end: &#34;]&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;quantifiermarker&lt;/h3&gt; &#xA;&lt;p&gt;Definition of the symbols used to indicate a quantifier in the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;quantifiermarker: { start: &#34;{&#34;, end: &#34;}&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;groupmarker&lt;/h3&gt; &#xA;&lt;p&gt;Definition of the symbols used to indicate a group in the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;groupmarker: { start: &#34;(&#34;, end: &#34;)&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;alternatormarker&lt;/h3&gt; &#xA;&lt;p&gt;Definition of the symbols used to indicate an alternator part in the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;alternatormarker: &#34;|&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;escapeChar&lt;/h3&gt; &#xA;&lt;p&gt;Definition of the symbols used to escape a part in the mask.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;escapeChar: &#34;\\&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#escape-special-mask-chars&#34;&gt;escape special mask chars&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;mask&lt;/h3&gt; &#xA;&lt;p&gt;The mask to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Inputmask({ mask: &#34;9{*}&#34;).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;regex&lt;/h3&gt; &#xA;&lt;p&gt;Use a regular expression as a mask&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Inputmask({ regex: &#34;[0-9]*&#34; }).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using shorthands be aware that you need to double escape or use String.raw with a string literal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Inputmask({ regex: &#34;\\d*&#34; }).mask(selector);&#xA;~&#xA;Inputmask({ regex: String.raw`\d*` }).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;oncomplete&lt;/h3&gt; &#xA;&lt;p&gt;Execute a function when the mask is completed&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#date&#34;).inputmask(&#34;99/99/9999&#34;,{ &#34;oncomplete&#34;: function(){ alert(&#39;inputmask complete&#39;); } });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;onincomplete&lt;/h3&gt; &#xA;&lt;p&gt;Execute a function when the mask is incomplete. Executes on blur.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#date&#34;).inputmask(&#34;99/99/9999&#34;,{ &#34;onincomplete&#34;: function(){ alert(&#39;inputmask incomplete&#39;); } });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;oncleared&lt;/h3&gt; &#xA;&lt;p&gt;Execute a function when the mask is cleared.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#date&#34;).inputmask(&#34;99/99/9999&#34;,{ &#34;oncleared&#34;: function(){ alert(&#39;inputmask cleared&#39;); } });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;repeat&lt;/h3&gt; &#xA;&lt;p&gt;Mask repeat function. Repeat the mask definition x-times.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#number&#34;).inputmask({ &#34;mask&#34;: &#34;9&#34;, &#34;repeat&#34;: 10 });  // ~ mask &#34;9999999999&#34;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;greedy&lt;/h3&gt; &#xA;&lt;p&gt;Default: false Toggle to allocate as much possible or the opposite. Non-greedy repeat function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#number&#34;).inputmask({ &#34;mask&#34;: &#34;9&#34;, &#34;repeat&#34;: 10, &#34;greedy&#34;: false });  // ~ mask &#34;9&#34; or mask &#34;99&#34; or ... mask &#34;9999999999&#34;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the non-greedy option set to false, you can specify * as repeat. This makes an endless repeat.&lt;/p&gt; &#xA;&lt;h3&gt;autoUnmask&lt;/h3&gt; &#xA;&lt;p&gt;Automatically unmask the value when retrieved.&lt;br&gt;Default: false.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;When setting this option to true the plugin also expects the initial value from the server to be unmasked.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;removeMaskOnSubmit&lt;/h3&gt; &#xA;&lt;p&gt;Remove the mask before submitting the form.&lt;br&gt;Default: false&lt;/p&gt; &#xA;&lt;h3&gt;clearMaskOnLostFocus&lt;/h3&gt; &#xA;&lt;p&gt;Remove the empty mask on blur or when not empty remove the optional trailing part Default: true&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#ssn&#34;).inputmask(&#34;999-99-9999&#34;,{placeholder:&#34; &#34;, clearMaskOnLostFocus: true }); //default&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;insertMode&lt;/h3&gt; &#xA;&lt;p&gt;Toggle to insert or overwrite input.&lt;br&gt;Default: true.&lt;br&gt;This option can be altered by pressing the Insert key.&lt;/p&gt; &#xA;&lt;h4&gt;insertModeVisual&lt;/h4&gt; &#xA;&lt;p&gt;Show selected caret when insertmode = false.&lt;/p&gt; &#xA;&lt;h3&gt;clearIncomplete&lt;/h3&gt; &#xA;&lt;p&gt;Clear the incomplete input on blur&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#date&#34;).inputmask(&#34;99/99/9999&#34;,{ &#34;clearIncomplete&#34;: true });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;aliases&lt;/h3&gt; &#xA;&lt;p&gt;Definitions of aliases.&lt;/p&gt; &#xA;&lt;p&gt;With an alias, you can define a complex mask definition and call it by using an alias name. So this is mainly to simplify the use of your masks. Some aliases found in the extensions are email, currency, decimal, integer, date, DateTime, dd/mm/yyyy, etc.&lt;/p&gt; &#xA;&lt;p&gt;First, you have to create an alias definition. The alias definition can contain options for the mask, custom definitions, the mask to use, etc.&lt;/p&gt; &#xA;&lt;p&gt;When you pass in an alias, the alias is first resolved and then the other options are applied. So you can call an alias and pass another mask to be applied over the alias. This also means that you can write aliases that &#34;inherit&#34; from another alias.&lt;/p&gt; &#xA;&lt;p&gt;Some examples can be found in jquery.inputmask.xxx.extensions.js&lt;/p&gt; &#xA;&lt;p&gt;use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;#date&#34;).inputmask(&#34;datetime&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;#date&#34;).inputmask({ alias: &#34;datetime&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also call an alias and extend it with some more options&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;#date&#34;).inputmask(&#34;datetime&#34;, { &#34;clearIncomplete&#34;: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;#date&#34;).inputmask({ alias: &#34;datetime&#34;, &#34;clearIncomplete&#34;: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;alias&lt;/h3&gt; &#xA;&lt;p&gt;The alias to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;#date&#34;).inputmask({ alias: &#34;email&#34;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;onKeyDown&lt;/h3&gt; &#xA;&lt;p&gt;Callback to implement autocomplete on certain keys for example&lt;/p&gt; &#xA;&lt;p&gt;Function arguments: event, buffer, caretPos, opts&lt;br&gt;Function return:&lt;/p&gt; &#xA;&lt;h3&gt;onBeforeMask&lt;/h3&gt; &#xA;&lt;p&gt;Executes before masking the initial value to allow preprocessing of the initial value.&lt;/p&gt; &#xA;&lt;p&gt;Function arguments: initialValue, opts&lt;br&gt;Function return: processedValue&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask({&#xA;  alias: &#39;phonebe&#39;,&#xA;  onBeforeMask: function (value, opts) {&#xA;    var processedValue = value.replace(/^0/g, &#34;&#34;);&#xA;    if (processedValue.indexOf(&#34;32&#34;) &amp;gt; 1 ||     processedValue.indexOf(&#34;32&#34;) == -1) {&#xA;      processedValue = &#34;32&#34; + processedValue;&#xA;    }&#xA;&#xA;    return processedValue;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;onBeforePaste&lt;/h3&gt; &#xA;&lt;p&gt;This callback allows for preprocessing the pasted value before actually handling the value for masking. This can be useful for stripping away some characters before processing.&lt;/p&gt; &#xA;&lt;p&gt;Function arguments: pastedValue, opts&lt;br&gt;Function return: processedValue&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask({&#xA;  mask: &#39;9999 9999 9999 9999&#39;,&#xA;  placeholder: &#39; &#39;,&#xA;  showMaskOnHover: false,&#xA;  showMaskOnFocus: false,&#xA;  onBeforePaste: function (pastedValue, opts) {&#xA;    var processedValue = pastedValue;&#xA;&#xA;    //do something with it&#xA;&#xA;    return processedValue;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also disable pasting a value by returning false in the onBeforePaste call.&lt;/p&gt; &#xA;&lt;p&gt;Default: Calls the onBeforeMask&lt;/p&gt; &#xA;&lt;h3&gt;onBeforeWrite&lt;/h3&gt; &#xA;&lt;p&gt;Executes before writing to the masked element&lt;/p&gt; &#xA;&lt;p&gt;Use this to do some extra processing of the input. This can be useful when implementing an alias, ex. decimal alias, autofill the digits when leaving the inputfield.&lt;/p&gt; &#xA;&lt;p&gt;Function arguments: event, buffer, caretPos, opts&lt;br&gt;Function return: command object (see &lt;a href=&#34;https://raw.githubusercontent.com/RobinHerbots/Inputmask/5.x/#define-custom-definitions&#34;&gt;Define custom definitions&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;onUnMask&lt;/h3&gt; &#xA;&lt;p&gt;Executes after unmasking to allow post-processing of the unmaskedvalue.&lt;/p&gt; &#xA;&lt;p&gt;Function arguments: maskedValue, unmaskedValue&lt;br&gt;Function return: processedValue&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#number&#34;).inputmask(&#34;decimal&#34;, { onUnMask: function(maskedValue, unmaskedValue) {&#xA;    //do something with the value&#xA;    return unmaskedValue;&#xA;  }});&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;showMaskOnFocus&lt;/h3&gt; &#xA;&lt;p&gt;Shows the mask when the input gets focus. (default = true)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#ssn&#34;).inputmask(&#34;999-99-9999&#34;,{ showMaskOnFocus: true }); //default&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To make sure no mask is visible on focus also set the showMaskOnHover to false. Otherwise hovering with the mouse will set the mask and will stay on focus.&lt;/p&gt; &#xA;&lt;h3&gt;showMaskOnHover&lt;/h3&gt; &#xA;&lt;p&gt;Shows the mask when hovering the mouse. (default = true)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#ssn&#34;).inputmask(&#34;999-99-9999&#34;,{ showMaskOnHover: true }); //default&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;onKeyValidation&lt;/h3&gt; &#xA;&lt;p&gt;Callback function is executed on every keyvalidation with the key, result as the parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#ssn&#34;).inputmask(&#34;999-99-9999&#34;, {&#xA;    onKeyValidation: function (key, result) {&#xA;      console.log(key + &#34; - &#34; + result);&#xA;    }&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;skipOptionalPartCharacter&lt;/h3&gt; &#xA;&lt;h3&gt;numericInput&lt;/h3&gt; &#xA;&lt;p&gt;Numeric input direction. Keeps the caret at the end.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(selector).inputmask(&#39;€ 999.999.999,99&#39;, { numericInput: true });    //123456  =&amp;gt;  € ___.__1.234,56&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rightAlign&lt;/h3&gt; &#xA;&lt;p&gt;Align the input to the right&lt;/p&gt; &#xA;&lt;p&gt;By setting the rightAlign you can specify to right-align an inputmask. This is only applied in combination op the numericInput option or the dir-attribute. The default is true.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(selector).inputmask(&#39;decimal&#39;, { rightAlign: false });  //disables the right alignment of the decimal input&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;undoOnEscape&lt;/h3&gt; &#xA;&lt;p&gt;Make escape behave like undo. (ctrl-Z)&lt;br&gt;Pressing escape reverts the value to the value before focus.&lt;br&gt;Default: true&lt;/p&gt; &#xA;&lt;h3&gt;radixPoint (numerics)&lt;/h3&gt; &#xA;&lt;p&gt;Define the radixpoint (decimal separator)&lt;br&gt;Default: &#34;&#34;&lt;/p&gt; &#xA;&lt;h3&gt;groupSeparator (numerics)&lt;/h3&gt; &#xA;&lt;p&gt;Define the groupseparator&lt;br&gt;Default: &#34;&#34;&lt;/p&gt; &#xA;&lt;h3&gt;keepStatic&lt;/h3&gt; &#xA;&lt;p&gt;Default: null (~false) Use in combination with the alternator syntax Try to keep the mask static while typing. Decisions to alter the mask will be postponed if possible.&lt;/p&gt; &#xA;&lt;p&gt;ex. $(selector).inputmask({ mask: [&#34;+55-99-9999-9999&#34;, &#34;+55-99-99999-9999&#34;, ], keepStatic: true });&lt;/p&gt; &#xA;&lt;p&gt;typing 1212345123 =&amp;gt; should result in +55-12-1234-5123 type extra 4 =&amp;gt; switch to +55-12-12345-1234&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;When the option is not set, it will default to false.&lt;/strong&gt;&lt;br&gt; &lt;strong&gt;Except:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;for multiple masks it will default to true&lt;/li&gt; &#xA; &lt;li&gt;when the first alternation is shorter then the next it will also default to true. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ex: (9|999), (99)|(aaaa)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;positionCaretOnTab&lt;/h3&gt; &#xA;&lt;p&gt;When enabled the caret position is set after the latest valid position on TAB Default: true&lt;/p&gt; &#xA;&lt;h3&gt;tabThrough&lt;/h3&gt; &#xA;&lt;p&gt;Allows for tabbing through the different parts of the masked field.&lt;br&gt;Default: false&lt;/p&gt; &#xA;&lt;h3&gt;definitions&lt;/h3&gt; &#xA;&lt;p&gt;Pass custom definitions directly in the options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#x9;Inputmask({&#xA;&#x9;&#x9;&#x9;mask: &#34;V{13}9{4}&#34;,&#xA;&#x9;&#x9;&#x9;definitions: {&#xA;&#x9;&#x9;&#x9;&#x9;&#34;V&#34;: {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;validator: &#34;[A-HJ-NPR-Za-hj-npr-z\\d]&#34;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;casing: &#34;upper&#34;&#xA;&#x9;&#x9;&#x9;&#x9;}&#xA;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;clearIncomplete: true,&#xA;&#x9;&#x9;&#x9;autoUnmask: true&#xA;&#x9;&#x9;}).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;isComplete&lt;/h3&gt; &#xA;&lt;p&gt;With this call-in (hook) you can override the default implementation of the isComplete function.&lt;br&gt;Args =&amp;gt; buffer, opts Return =&amp;gt; true|false&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(selector).inputmask({&#xA;  regex: &#34;[0-9]*&#34;,&#xA;  isComplete: function(buffer, opts) {&#xA;    return new RegExp(opts.regex).test(buffer.join(&#39;&#39;));&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;postValidation&lt;/h3&gt; &#xA;&lt;p&gt;Hook to postValidate the result from isValid. Usefull for validating the entry as a whole. Args =&amp;gt; buffer, pos, c, currentResult, opts, maskset, strict, fromCheckval&lt;br&gt;Return =&amp;gt; true|false|command object&lt;/p&gt; &#xA;&lt;h3&gt;preValidation&lt;/h3&gt; &#xA;&lt;p&gt;Hook to preValidate the input. Useful for validating regardless of the definition. Args =&amp;gt; buffer, pos, char, isSelection, opts, maskset, caretPos, strict =&amp;gt; return true/false/command object When returning true, the normal validation kicks in, otherwise, it is skipped.&lt;/p&gt; &#xA;&lt;p&gt;When returning a command object the actions are executed and further validation is stopped.&lt;br&gt; If you want to continue further validation, you need to add the rewritePosition action.&lt;/p&gt; &#xA;&lt;h3&gt;staticDefinitionSymbol&lt;/h3&gt; &#xA;&lt;p&gt;The staticDefinitionSymbol option is used to indicate that the static entries in the mask can match a certain definition. Especially useful with alternators so that the static element in the mask can match another alternation.&lt;/p&gt; &#xA;&lt;p&gt;In the example below, we mark the spaces as a possible match for the &#34;i&#34; definition. By doing so the mask can alternate to the second mask even when we typed already &#34;12 3&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask(&#34;(99 99 999999)|(i{+})&#34;, {&#xA;  definitions: {&#xA;    &#34;i&#34;: {&#xA;      validator: &#34;.&#34;,&#xA;      definitionSymbol: &#34;*&#34;&#xA;    }&#xA;  },&#xA;  staticDefinitionSymbol: &#34;*&#34;&#xA;}).mask(selector);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nullable&lt;/h3&gt; &#xA;&lt;p&gt;Return nothing when the user hasn&#39;t entered anything. Default: true&lt;/p&gt; &#xA;&lt;h3&gt;noValuePatching&lt;/h3&gt; &#xA;&lt;p&gt;Disable value property patching Default: false&lt;/p&gt; &#xA;&lt;h3&gt;positionCaretOnClick&lt;/h3&gt; &#xA;&lt;p&gt;Positioning of the caret on click.&lt;/p&gt; &#xA;&lt;p&gt;Options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;none&lt;/li&gt; &#xA; &lt;li&gt;lvp (based on the last valid position (default)&lt;/li&gt; &#xA; &lt;li&gt;radixFocus (position caret to radixpoint on initial click)&lt;/li&gt; &#xA; &lt;li&gt;select (select the whole input)&lt;/li&gt; &#xA; &lt;li&gt;ignore (ignore the click and continue the mask)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Default: &#34;lvp&#34;&lt;/p&gt; &#xA;&lt;h3&gt;casing&lt;/h3&gt; &#xA;&lt;p&gt;Apply casing at the mask-level. Options: null, &#34;upper&#34;, &#34;lower&#34; or &#34;title&#34; or callback args =&amp;gt; elem, test, pos, validPositions return charValue&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;casing: function(elem, test, pos, validPositions) {&#xA;&#x9;do some processing || upper/lower input property in the validPositions&#xA;&#x9;return elem; //upper/lower element&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default: null&lt;/p&gt; &#xA;&lt;h3&gt;inputmode&lt;/h3&gt; &#xA;&lt;p&gt;Default: &#34;text&#34;&lt;br&gt; The inputmode hints at the type of data that might be entered by the user while editing the element or its contents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode&#34;&gt;https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/inputmode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;importDataAttributes&lt;/h3&gt; &#xA;&lt;p&gt;Specify to use the data-inputmask attributes or to ignore them.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use data attributes you can disable the import by specifying importDataAttributes: false.&lt;/p&gt; &#xA;&lt;p&gt;Default: true&lt;/p&gt; &#xA;&lt;h3&gt;shiftPositions&lt;/h3&gt; &#xA;&lt;p&gt;Alter the behavior of the char shifting on entry or deletion.&lt;/p&gt; &#xA;&lt;p&gt;In some cases shifting the mask entries or deletion should be more restrictive.&lt;br&gt; Ex. date masks. Shifting month to day makes no sense&lt;/p&gt; &#xA;&lt;p&gt;Default: true&lt;/p&gt; &#xA;&lt;p&gt;true = shift on the &#34;def&#34; match false = shift on the &#34;nativeDef&#34; match&lt;/p&gt; &#xA;&lt;h3&gt;usePrototypeDefinitions&lt;/h3&gt; &#xA;&lt;p&gt;Use the default defined definitions from the prototype.&lt;/p&gt; &#xA;&lt;p&gt;Default: true&lt;/p&gt; &#xA;&lt;h3&gt;validationEventTimeOut&lt;/h3&gt; &#xA;&lt;p&gt;Time to show html5 validation error on form submit.&lt;/p&gt; &#xA;&lt;p&gt;Default: 3000&lt;/p&gt; &#xA;&lt;h3&gt;substitutes&lt;/h3&gt; &#xA;&lt;p&gt;Define character substitutes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substitutes: {&#xA;  &#34;,&#34;: &#34;.&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default: {}&lt;/p&gt; &#xA;&lt;h2&gt;General&lt;/h2&gt; &#xA;&lt;h3&gt;set a value and apply the mask&lt;/h3&gt; &#xA;&lt;p&gt;this can be done with the traditional jquery.val function (all browsers) or JavaScript value property for browsers which implement lookupGetter or getOwnPropertyDescriptor&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#number&#34;).val(12345);&#xA;&#xA;  var number = document.getElementById(&#34;number&#34;);&#xA;  number.value = 12345;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with the autoUnmaskoption you can change the return of $.fn.val (or value property) to unmaskedvalue or the maskedvalue&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#39;#&amp;lt;%= tbDate.ClientID%&amp;gt;&#39;).inputmask({ &#34;mask&#34;: &#34;99/99/9999&#34;, &#39;autoUnmask&#39; : true});    //  value: 23/03/1973&#xA;  alert($(&#39;#&amp;lt;%= tbDate.ClientID%&amp;gt;&#39;).val());    // shows 23031973     (autoUnmask: true)&#xA;&#xA;  var tbDate = document.getElementById(&#34;&amp;lt;%= tbDate.ClientID%&amp;gt;&#34;);&#xA;  alert(tbDate.value);    // shows 23031973     (autoUnmask: true)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;escape special mask chars&lt;/h3&gt; &#xA;&lt;p&gt;If you want a mask element to appear as a static element you can escape them by \&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#months&#34;).inputmask(&#34;m \\months&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extra example see &lt;a href=&#34;https://github.com/RobinHerbots/Inputmask/issues/2251&#34;&gt;https://github.com/RobinHerbots/Inputmask/issues/2251&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;auto-casing inputmask&lt;/h3&gt; &#xA;&lt;p&gt;You can define within a definition to automatically apply some casing on the entry in input by giving the casing.&lt;br&gt;Casing can be null, &#34;upper&#34;, &#34;lower&#34; or &#34;title&#34;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Inputmask.extendDefinitions({&#xA;  &#39;A&#39;: {&#xA;    validator: &#34;[A-Za-z]&#34;,&#xA;    casing: &#34;upper&#34; //auto uppercasing&#xA;  },&#xA;  &#39;+&#39;: {&#xA;    validator: &#34;[A-Za-z\u0410-\u044F\u0401\u04510-9]&#34;,&#xA;    casing: &#34;upper&#34;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include jquery.inputmask.extensions.js for using the A and # definitions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;#test&#34;).inputmask(&#34;999-AAA&#34;);    //   =&amp;gt; 123abc ===&amp;gt; 123-ABC&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported markup options&lt;/h2&gt; &#xA;&lt;h3&gt;RTL attribute&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;test&#34; dir=&#34;rtl&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;readonly attribute&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;test&#34; readonly=&#34;readonly&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;disabled attribute&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;test&#34; disabled=&#34;disabled&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;maxlength attribute&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input id=&#34;test&#34; maxlength=&#34;4&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;data-inputmask attribute&lt;/h3&gt; &#xA;&lt;p&gt;You can also apply an inputmask by using the data-inputmask attribute. In the attribute, you specify the options wanted for the inputmask. This gets parsed with $.parseJSON (for the moment), so be sure to use a well-formed JSON-string without the {}.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input data-inputmask=&#34;&#39;alias&#39;: &#39;datetime&#39;&#34; /&amp;gt;&#xA;&amp;lt;input data-inputmask=&#34;&#39;mask&#39;: &#39;9&#39;, &#39;repeat&#39;: 10, &#39;greedy&#39; : false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;:input&#34;).inputmask();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;data-inputmask-&amp;lt;option&amp;gt; attribute&lt;/h3&gt; &#xA;&lt;p&gt;All options can also be passed through data-attributes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;input data-inputmask-mask=&#34;9&#34; data-inputmask-repeat=&#34;10&#34; data-inputmask-greedy=&#34;false&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(document).ready(function(){&#xA;  $(&#34;:input&#34;).inputmask();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;jQuery.clone&lt;/h2&gt; &#xA;&lt;p&gt;When cloning a inputmask, the inputmask reactivates on the first event (mouseenter, focus, ...) that happens to the input. If you want to set a value on the cloned inputmask and you want to directly reactivate the masking you have to use $(input).inputmask(&#34;setvalue&#34;, value)&lt;/p&gt; &#xA;&lt;p&gt;Be sure to pass true in the jQuery.clone fn to clone with data and events and use jQuery as dependencyLib (&lt;a href=&#34;https://api.jquery.com/clone/&#34;&gt;https://api.jquery.com/clone/&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>naptha/tesseract.js</title>
    <updated>2022-09-28T01:37:10Z</updated>
    <id>tag:github.com,2022-09-28:/naptha/tesseract.js</id>
    <link href="https://github.com/naptha/tesseract.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pure Javascript OCR for more than 100 Languages 📖🎉🖥&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tesseract.projectnaptha.com/&#34;&gt;&lt;img width=&#34;256px&#34; height=&#34;256px&#34; alt=&#34;Tesseract.js&#34; src=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/images/tesseract.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/naptha/tesseract.js/workflows/Node.js%20CI/badge.svg?sanitize=true&#34; alt=&#34;Lint &amp;amp; Test&#34;&gt; &lt;img src=&#34;https://github.com/naptha/tesseract.js/workflows/CodeQL/badge.svg?sanitize=true&#34; alt=&#34;CodeQL&#34;&gt; &lt;a href=&#34;https://github.com/naptha/tesseract.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/all/badge.svg?label=financial+contributors&#34; alt=&#34;Financial Contributors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://badge.fury.io/js/tesseract.js&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/tesseract.js.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/naptha/tesseract.js/graphs/commit-activity&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Maintained%3F-yes-green.svg?sanitize=true&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/airbnb/javascript&#34;&gt;&lt;img src=&#34;https://badgen.net/badge/code%20style/airbnb/ff5a5f?icon=airbnb&#34; alt=&#34;Code Style&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/tesseract.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/tesseract.js.svg?sanitize=true&#34; alt=&#34;Downloads Total&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/tesseract.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/tesseract.js.svg?sanitize=true&#34; alt=&#34;Downloads Month&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Tesseract.js is a javascript library that gets words in &lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/tesseract_lang_list.md&#34;&gt;almost any language&lt;/a&gt; out of images. (&lt;a href=&#34;http://tesseract.projectnaptha.com/&#34;&gt;Demo&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;Image Recognition&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://tesseract.projectnaptha.com&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/images/demo.gif&#34; alt=&#34;fancy demo gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Video Real-time Recognition&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-video&#34;&gt;&lt;img alt=&#34;Tesseract.js Video&#34; src=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/images/video-demo.gif&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;Tesseract.js wraps an &lt;a href=&#34;https://github.com/kripken/emscripten&#34;&gt;emscripten&lt;/a&gt; &lt;a href=&#34;https://github.com/naptha/tesseract.js-core&#34;&gt;port&lt;/a&gt; of the &lt;a href=&#34;https://github.com/tesseract-ocr/tesseract&#34;&gt;Tesseract&lt;/a&gt; &lt;a href=&#34;https://en.wikipedia.org/wiki/Optical_character_recognition&#34;&gt;OCR&lt;/a&gt; Engine. It works in the browser using &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt; or plain script tags with a &lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/#CDN&#34;&gt;CDN&lt;/a&gt; and on the server with &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;. After you &lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/#installation&#34;&gt;install it&lt;/a&gt;, using it is as simple as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import Tesseract from &#39;tesseract.js&#39;;&#xA;&#xA;Tesseract.recognize(&#xA;  &#39;https://tesseract.projectnaptha.com/img/eng_bw.png&#39;,&#xA;  &#39;eng&#39;,&#xA;  { logger: m =&amp;gt; console.log(m) }&#xA;).then(({ data: { text } }) =&amp;gt; {&#xA;  console.log(text);&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or more imperative&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createWorker } from &#39;tesseract.js&#39;;&#xA;&#xA;const worker = createWorker({&#xA;  logger: m =&amp;gt; console.log(m)&#xA;});&#xA;&#xA;(async () =&amp;gt; {&#xA;  await worker.load();&#xA;  await worker.loadLanguage(&#39;eng&#39;);&#xA;  await worker.initialize(&#39;eng&#39;);&#xA;  const { data: { text } } = await worker.recognize(&#39;https://tesseract.projectnaptha.com/img/eng_bw.png&#39;);&#xA;  console.log(text);&#xA;  await worker.terminate();&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/#documentation&#34;&gt;Check out the docs&lt;/a&gt; for a full explanation of the API.&lt;/p&gt; &#xA;&lt;h2&gt;Major changes in v3&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Significantly faster performance &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Runtime reduction of 84% for Browser and 96% for Node.js when recognizing the &lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/examples/data&#34;&gt;example images&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Upgrade to Tesseract v5.1.0 (using emscripten 3.1.18)&lt;/li&gt; &#xA; &lt;li&gt;Added SIMD-enabled build for supported devices&lt;/li&gt; &#xA; &lt;li&gt;Added support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Node.js version 18&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Removed support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ASM.js version, any other old versions of Tesseract.js-core (&amp;lt;3.0.0)&lt;/li&gt; &#xA;   &lt;li&gt;Node.js versions 10 and 12&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Major changes in v2&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upgrade to tesseract v4.1.1 (using emscripten 1.39.10 upstream)&lt;/li&gt; &#xA; &lt;li&gt;Support multiple languages at the same time, eg: eng+chi_tra for English and Traditional Chinese&lt;/li&gt; &#xA; &lt;li&gt;Supported image formats: png, jpg, bmp, pbm&lt;/li&gt; &#xA; &lt;li&gt;Support WebAssembly (fallback to ASM.js when browser doesn&#39;t support)&lt;/li&gt; &#xA; &lt;li&gt;Support Typescript&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read a story about v2: &lt;a href=&#34;https://jeromewu.github.io/why-i-refactor-tesseract.js-v2/&#34;&gt;Why I refactor tesseract.js v2?&lt;/a&gt;&lt;br&gt; Check the &lt;a href=&#34;https://github.com/naptha/tesseract.js/tree/support/1.x&#34;&gt;support/1.x&lt;/a&gt; branch for version 1&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Tesseract.js works with a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag via local copy or CDN, with webpack via &lt;code&gt;npm&lt;/code&gt; and on Node.js with &lt;code&gt;npm/yarn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- v2 --&amp;gt;&#xA;&amp;lt;script src=&#39;https://unpkg.com/tesseract.js@v2.1.0/dist/tesseract.min.js&#39;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;!-- v1 --&amp;gt;&#xA;&amp;lt;script src=&#39;https://unpkg.com/tesseract.js@1.0.19/src/index.js&#39;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After including the script the &lt;code&gt;Tesseract&lt;/code&gt; variable will be globally available.&lt;/p&gt; &#xA;&lt;h3&gt;Node.js&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tesseract.js v3 requires Node.js v14 or higher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# For v3&#xA;npm install tesseract.js&#xA;yarn add tesseract.js&#xA;&#xA;# For v2&#xA;npm install tesseract.js@2&#xA;yarn add tesseract.js@2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/examples.md&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/image-format.md&#34;&gt;Image Format&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/api.md&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/local-installation.md&#34;&gt;Local Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use tesseract.js the way you like!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Offline Version: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-offline&#34;&gt;https://github.com/jeromewu/tesseract.js-offline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Electron Version: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-electron&#34;&gt;https://github.com/jeromewu/tesseract.js-electron&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Custom Traineddata: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-custom-traineddata&#34;&gt;https://github.com/jeromewu/tesseract.js-custom-traineddata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chrome Extension #1: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-chrome-extension&#34;&gt;https://github.com/jeromewu/tesseract.js-chrome-extension&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Chrome Extension #2: &lt;a href=&#34;https://github.com/fxnoob/image-to-text&#34;&gt;https://github.com/fxnoob/image-to-text&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Firefox Extension: &lt;a href=&#34;https://github.com/gnonio/korporize&#34;&gt;https://github.com/gnonio/korporize&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With Vue: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-vue-app&#34;&gt;https://github.com/jeromewu/tesseract.js-vue-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With Angular: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-angular-app&#34;&gt;https://github.com/jeromewu/tesseract.js-angular-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;With React: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-react-app&#34;&gt;https://github.com/jeromewu/tesseract.js-react-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Typescript: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-typescript&#34;&gt;https://github.com/jeromewu/tesseract.js-typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Video Real-time Recognition: &lt;a href=&#34;https://github.com/jeromewu/tesseract.js-video&#34;&gt;https://github.com/jeromewu/tesseract.js-video&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;To run a development copy of Tesseract.js do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# First we clone the repository&#xA;git clone https://github.com/naptha/tesseract.js.git&#xA;cd tesseract.js&#xA;&#xA;# Then we install the dependencies&#xA;npm install&#xA;&#xA;# And finally we start the development server&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The development server will be available at &lt;a href=&#34;http://localhost:3000/examples/browser/demo.html&#34;&gt;http://localhost:3000/examples/browser/demo.html&lt;/a&gt; in your favorite browser. It will automatically rebuild &lt;code&gt;tesseract.dev.js&lt;/code&gt; and &lt;code&gt;worker.dev.js&lt;/code&gt; when you change files in the &lt;strong&gt;src&lt;/strong&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Online Setup with a single Click&lt;/h3&gt; &#xA;&lt;p&gt;You can use Gitpod(A free online VS Code like IDE) for contributing. With a single click it will launch a ready to code workspace with the build &amp;amp; start scripts already in process and within a few seconds it will spin up the dev server so that you can start contributing straight away without wasting any time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/naptha/tesseract.js/raw/master/examples/browser/demo.html&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Building Static Files&lt;/h3&gt; &#xA;&lt;p&gt;To build the compiled static files just execute the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will output the files into the &lt;code&gt;dist&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/naptha/tesseract.js/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/naptha/tesseract.js/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://opencollective.com/tesseractjs/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Individuals&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tesseractjs&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Organizations&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/tesseractjs/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tesseractjs/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tesseractjs/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/tesseractjs/organization/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thapatechnical/thapareactecom</title>
    <updated>2022-09-28T01:37:10Z</updated>
    <id>tag:github.com,2022-09-28:/thapatechnical/thapareactecom</id>
    <link href="https://github.com/thapatechnical/thapareactecom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to Thapa Technical React Ecommerce Website Series&lt;/h1&gt; &#xA;&lt;h2&gt;Follow the 3 Steps and you are good to go.&lt;/h2&gt; &#xA;&lt;p&gt;1: Clone the Project&lt;/p&gt; &#xA;&lt;p&gt;2: simply run the command &lt;code&gt;npm install&lt;/code&gt; - First to install all the packages&lt;/p&gt; &#xA;&lt;p&gt;3: run the project using &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;To get the source code guy&#39;s please check the &lt;code&gt;Switch branches/tags&lt;/code&gt; and select the respective video branch for the source code ok..&lt;/h3&gt; &#xA;&lt;h3&gt;Also I am creating a List of the video with the Link to the respective video code, you can checkout below 👇&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/thapatechnical/thapareactecom/raw/main/README.md&#34;&gt;Main Starter Files of React Ecom Source Code&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/thapatechnical/thapareactecom/tree/react_ecom_navbar_v6&#34;&gt;Till Video 6 Source Code - Responsive Navbar&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/thapatechnical/thapareactecom/raw/react_ecom_HomeAboutPage_v7/src/components/HeroSection.js&#34;&gt;Video 7 Source Code - Hero Section, Home &amp;amp; About Page&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>