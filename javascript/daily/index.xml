<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-22T01:30:46Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>metaskills/experts</title>
    <updated>2024-05-22T01:30:46Z</updated>
    <id>tag:github.com,2024-05-22:/metaskills/experts</id>
    <link href="https://github.com/metaskills/experts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experts.js is the easiest way to create and deploy OpenAI&#39;s Assistants and link them together as Tools to create advanced Multi AI Agent Systems with expanded memory and attention to detail.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/experts&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/experts?logo=npm&amp;amp;color=yellow&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/metaskills/experts/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/metaskills/experts/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Multi AI Agent Systems &lt;br&gt;using OpenAI&#39;s Assistants API (Experts.js)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/metaskills/experts/main/docs/images/logo.png&#34; alt=&#34;Experts.js&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Experts.js is the easiest way to create and deploy &lt;a href=&#34;https://platform.openai.com/docs/assistants/how-it-works&#34;&gt;OpenAI&#39;s Assistants&lt;/a&gt; and link them together as Tools to create a Panel of Experts system with expanded memory and attention to detail.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The new Assistants API from OpenAI sets a new industry standard, significantly advancing beyond the widely adopted Chat Completions API. It represents a major leap in the usability of AI agents and the way engineers interact with LLMs. Paired with the cutting-edge &lt;a href=&#34;https://openai.com/index/hello-gpt-4o/&#34;&gt;GPT-4o&lt;/a&gt; model, Assistants can now reference attached files &amp;amp; images as knowledge sources within a managed context window called a &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#threads&#34;&gt;Thread&lt;/a&gt;. Unlike &lt;a href=&#34;https://openai.com/index/introducing-gpts/&#34;&gt;Custom GPTs&lt;/a&gt;, Assistants support instructions up to 256,000 characters, integrate with 128 tools, and utilize the innovative &lt;a href=&#34;https://platform.openai.com/docs/assistants/tools/file-search/vector-stores&#34;&gt;Vector Store&lt;/a&gt; API for efficient file search on up to 10,000 files per assistant.&lt;/p&gt; &#xA;&lt;p&gt;Experts.js aims to simplify the usage of this new API by removing the complexity of managing &lt;a href=&#34;https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps&#34;&gt;Run&lt;/a&gt; objects and allowing Assistants to be linked together as Tools.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const thread = await Thread.create();&#xA;const assistant = await MyAssistant.create();&#xA;const output = await assistant.ask(&#34;Say hello.&#34;, thread.id);&#xA;console.log(output) // Hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More importantly, Experts.js introduces Assistants as &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#tools&#34;&gt;Tools&lt;/a&gt;, enabling the creation of &lt;a href=&#34;https://www.youtube.com/watch?v=sal78ACtGTc&#34;&gt;Multi AI Agent Systems&lt;/a&gt;. Each Tool is an LLM-backed Assistant that can take on specialized roles or fulfill complex tasks on behalf of their parent &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#assistants&#34;&gt;Assistant&lt;/a&gt; or Tool. Allowing for complex orchestration workflows or choreographing a series of tightly knit tasks. Shown here is an example of a company assistant with a product catalog tool which itself has a LLM backed tool to create OpenSearch queries.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/metaskills/experts/main/docs/images/panel-of-experts-company-apparel-after.webp&#34; alt=&#34;Multi AI Agent Systems with OpenAI Assistants API&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install via npm. Usage is very simple, there are only three objects to import.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install experts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Assistant, Tool, Thread } from &#34;experts&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#assistants&#34;&gt;Assistants&lt;/a&gt; - The main object that represents an AI agent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#tools&#34;&gt;Tools&lt;/a&gt; - An Assistant that can be used by other Assistants.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#threads&#34;&gt;Threads&lt;/a&gt; - A managed context window for your agents.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Assistants&lt;/h2&gt; &#xA;&lt;p&gt;The constructor of our &lt;a href=&#34;https://platform.openai.com/docs/assistants/how-it-works/creating-assistants&#34;&gt;Assistant&lt;/a&gt; facade object requires a name, description, and instructions. The third argument is a set of options which directly maps to all the request body options outlined in the &lt;a href=&#34;https://platform.openai.com/docs/api-reference/assistants/createAssistant&#34;&gt;create assistant&lt;/a&gt; documentation. All examples in Experts.js are written in ES6 classes for simplicity. The default model is &lt;code&gt;gpt-4o&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyAssistant extends Assistant {&#xA;  constructor() {&#xA;    const name = &#34;My Assistant&#34;;&#xA;    const description = &#34;...&#34;;&#xA;    const instructions = &#34;...&#34;&#xA;    super(name, description, instructions, {&#xA;      model: &#34;gpt-4-turbo&#34;,&#xA;      tools: [{ type: &#34;file_search&#34; }],&#xA;      temperature: 0.1,&#xA;      tool_resources: {&#xA;        file_search: {&#xA;          vector_store_ids: [process.env.VECTOR_STORE_ID],&#xA;        },&#xA;      },&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;const assistant = await MyAssistant.create();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Experts.js async &lt;code&gt;create()&lt;/code&gt; function will:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Find or create your assistant by name.&lt;/li&gt; &#xA; &lt;li&gt;Updates the assistants configurations to latest.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Simple Ask Interface&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ask()&lt;/code&gt; function is a simple interface to ask or instruct your assistant(s). It requires a message and a thread identifier. More on &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#threads&#34;&gt;Threads&lt;/a&gt; below. The message can be a string or native OpenAI message object. This is where Experts.js really shines. You never have to manage &lt;a href=&#34;https://platform.openai.com/docs/assistants/how-it-works/runs-and-run-steps&#34;&gt;Run&lt;/a&gt; objects or their &lt;a href=&#34;https://platform.openai.com/docs/assistants/how-it-works/run-steps&#34;&gt;Run Steps&lt;/a&gt; directly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const output = await assistant.ask(&#34;...&#34;, threadID)&#xA;const output = await assistant.ask({ role: &#34;user&#34;, content: &#34;...&#34; }, threadID);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adding Tools&lt;/h3&gt; &#xA;&lt;p&gt;Normal OpenAI &lt;a href=&#34;https://platform.openai.com/docs/assistants/tools/function-calling&#34;&gt;tools and function calling&lt;/a&gt; are supported via our constructors options object via &lt;code&gt;tools&lt;/code&gt; and &lt;code&gt;tool_resources&lt;/code&gt;. Experts.js also supports adding &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#assistants&#34;&gt;Assistants&lt;/a&gt; as Tools. More information on using Assistants as &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#tools&#34;&gt;Tools&lt;/a&gt; can be found in the next section. Use the &lt;code&gt;addAssistantTool&lt;/code&gt; function to add an Assistant as a Tool. This must happen after &lt;code&gt;super()&lt;/code&gt; in your Assistant&#39;s constructor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MainAssistant extends Assistant {&#xA;  constructor() {&#xA;    const name = &#34;Company Assistant;&#xA;    const description = &#34;...&#34;;&#xA;    const instructions = &#34;...&#34;;&#xA;    super(name, description, instructions);&#xA;    this.addAssistantTool(ProductsTools);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streaming &amp;amp; Events&lt;/h3&gt; &#xA;&lt;p&gt;By default, Experts.js leverages the &lt;a href=&#34;https://platform.openai.com/docs/api-reference/assistants-streaming/events&#34;&gt;Assistants Streaming Events&lt;/a&gt;. These allow your applications to receive text, image, and tool outputs via OpenAI&#39;s server-send events. We leverage &lt;a href=&#34;https://github.com/openai/openai-node/raw/master/helpers.md&#34;&gt;openai-node&#39;s&lt;/a&gt; stream helpers and surface these events along with a few custom ones giving your assistants to tap into the complete lifecycle of a Run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const assistant = await MainAssistant.create();&#xA;assistant.on(&#34;textDelta&#34;, (delta, _snapshot) =&amp;gt; {&#xA;  process.stdout.write(delta.value)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All openai-node &lt;a href=&#34;https://github.com/openai/openai-node/raw/master/helpers.md&#34;&gt;streaming events&lt;/a&gt; are supported via our Assistant&#39;s &lt;code&gt;on()&lt;/code&gt; function. The available event names are: &lt;code&gt;event&lt;/code&gt;, &lt;code&gt;textDelta&lt;/code&gt;, &lt;code&gt;textDone&lt;/code&gt;, &lt;code&gt;imageFileDone&lt;/code&gt;, &lt;code&gt;toolCallDelta&lt;/code&gt;, &lt;code&gt;runStepDone&lt;/code&gt;, &lt;code&gt;toolCallDone&lt;/code&gt;, and &lt;code&gt;end&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT]&lt;br&gt; OpenAI&#39;s server-send events are not async/await friendly.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If your listeners need to perform work in an async fashion, such as redirecting tool outputs, consider using our extensions to these events. They are called in this order after the Run has been completed. The available async event names are: &lt;code&gt;textDoneAsync&lt;/code&gt;, &lt;code&gt;imageFileDoneAsync&lt;/code&gt;, &lt;code&gt;runStepDoneAsync&lt;/code&gt;, &lt;code&gt;toolCallDoneAsync&lt;/code&gt;, and &lt;code&gt;endAsync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Features&lt;/h3&gt; &#xA;&lt;p&gt;If you want to lazily standup additional resources when an assistant&#39;s &lt;code&gt;create()&lt;/code&gt; function is called, implement the &lt;code&gt;beforeInit()&lt;/code&gt; function in your class. This is an async method that will be called before the assistant is created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;async beforeInit() {&#xA;  await this.#createFileSearch();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All Assistant events receive an extra Experts&#39;js metadata argument. An object that contains the Run&#39;s &lt;code&gt;stream&lt;/code&gt;. This allows you to use the &lt;a href=&#34;https://github.com/openai/openai-node/raw/master/helpers.md#assistant-methods&#34;&gt;openai-node&#39;s helper functions&lt;/a&gt; such as &lt;code&gt;currentEvent&lt;/code&gt;, &lt;code&gt;finalMessages&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;assistant.on(&#34;endAsync&#34;, async (metadata) =&amp;gt; {&#xA;  await metadata.stream.finalMessages();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;p&gt;Using an &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#assistants&#34;&gt;Assistant&lt;/a&gt; as a Tool is central focal point of the Experts.js framework. Tools are a subclass of Assistant and encapsulate the interface for their parent objects. In this way Experts.js tools are reusable components in your agentic architecture. Our examples illustrate a basic message passing pattern, for brevity. You should leverage all of OpenAI&#39;s &lt;a href=&#34;https://platform.openai.com/docs/assistants/tools/function-calling&#34;&gt;tool and function calling&lt;/a&gt; features to their fullest.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class EchoTool extends Tool {&#xA;  constructor() {&#xA;    const name = &#34;Echo Tool&#34;;&#xA;    const description = &#34;Echo&#34;;&#xA;    const instructions = &#34;Echo the same text back to the user&#34;;&#xA;    super(name, description, instructions, {&#xA;      parentsTools: [&#xA;        {&#xA;          type: &#34;function&#34;,&#xA;          function: {&#xA;            name: EchoTool.toolName,&#xA;            description: description,&#xA;            parameters: {&#xA;              type: &#34;object&#34;,&#xA;              properties: { message: { type: &#34;string&#34; } },&#xA;              required: [&#34;message&#34;],&#xA;            },&#xA;          },&#xA;        },&#xA;      ],&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] It is critical that your tool&#39;s function name use the &lt;code&gt;toolName&lt;/code&gt; getter. Experts.js converts this to a snake_case string and uses the name to find the the right tool and call it.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;As such, Tool class names are important and help OpenAI&#39;s models decide which tool to call. So pick a good name for your tool class. For example, &lt;code&gt;ProductsOpenSearchTool&lt;/code&gt; will be &lt;code&gt;products_open_search&lt;/code&gt; and clearly helps the model infer along with the tool&#39;s description what role it performs.&lt;/p&gt; &#xA;&lt;p&gt;Tools are added to your &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#assistants&#34;&gt;Assistant&lt;/a&gt; via the &lt;code&gt;addAssistantTool&lt;/code&gt; function. This function will add the tool to the assistant&#39;s tools array and update the assistant&#39;s configuration. This must happen after &lt;code&gt;super()&lt;/code&gt; in your Assistant&#39;s constructor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MainAssistant extends Assistant {&#xA;  constructor() {&#xA;    const name = &#34;Company Assistant;&#xA;    const description = &#34;...&#34;;&#xA;    const instructions = &#34;...&#34;;&#xA;    super(name, description, instructions);&#xA;    this.addAssistantTool(EchoTool);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Your Tool assistant response will automatically be submitted as the output for the parent Assistant or Tool.&lt;/p&gt; &#xA;&lt;h3&gt;Non-LLM Tools&lt;/h3&gt; &#xA;&lt;p&gt;By default Tools are backed by an LLM &lt;code&gt;model&lt;/code&gt; and perform all the same lifecycles events, runs, etc as Assistants. However, you can create a Tool that does not use any of the core Assistant&#39;s features by setting the &lt;code&gt;llm&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt;. When doing so, you must implement the &lt;code&gt;ask()&lt;/code&gt; function in your Tool. The return value will be submitted as the tool&#39;s output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class AnswerTwoTool extends Tool {&#xA;  constructor() {&#xA;    // ...&#xA;    super(name, description, instructions, {&#xA;      llm: false,&#xA;      parentsTools: [...],&#xA;    });&#xA;  }&#xA;  async ask(message) {&#xA;    return ...;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Controlling Output&lt;/h3&gt; &#xA;&lt;p&gt;In complex workflows, a LLM backed Tool can be used to convert human or other LLM instructions into executable code and the result of that code (not the LLM output) would need to be submitted for your Tool&#39;s parent&#39;s outputs. For example, the &lt;code&gt;ProductsOpenSearchTool&lt;/code&gt; could convert messages into OpenSearch queries, execute them, and return the results. Sub classes can implement the &lt;code&gt;answered()&lt;/code&gt; function to control the output. In this case, the &lt;code&gt;output&lt;/code&gt; would be an OpenSearch query and the tools outputs now contain the results of that LLM-generated query.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;async answered(output) {&#xA;  const args = JSON.parse(output);&#xA;  return await this.opensearchQuery(args);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, LLM backed Tools could opt to redirect their own tool outputs back to their parent Assistant or Tool. Thus ignoring the LLM output. This also allows for all of a Tools tool outputs to be submitted as the parent&#39;s output. More on why this is important in the &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#product-catalog&#34;&gt;product catalog&lt;/a&gt; example below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class ProductsTool extends Tool {&#xA;  constructor() {&#xA;    // ...&#xA;    super(name, description, instructions, {&#xA;      temperature: 0.1,&#xA;      tools: [{ type: &#34;code_interpreter&#34; }],&#xA;      outputs: &#34;tools&#34;,&#xA;      parentsTools: [...],&#xA;    });&#xA;    this.addAssistantTool(ProductsOpenSearchTool);&#xA;    this.on(&#34;imageFileDoneAsync&#34;, this.imageFileDoneAsync.bind(this));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Threads&lt;/h2&gt; &#xA;&lt;p&gt;OpenAI&#39;s Assistants API introduces a new resource called &lt;a href=&#34;https://platform.openai.com/docs/assistants/how-it-works/managing-threads-and-messages&#34;&gt;Threads&lt;/a&gt; which messages &amp;amp; files are stored within. Essentially, threads are a managed context window (memory) for your agents. Creating a new thread with Experts.js is as easy as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const thread = Thread.create();&#xA;console.log(thread.id) // thread_abc123&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also create a thread with messages, files, or tool resources to start a conversation. We support OpenAI&#39;s thread create request body outlined in their &lt;a href=&#34;https://platform.openai.com/docs/api-reference/threads&#34;&gt;Threads API&lt;/a&gt; reference.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const thread = await Thread.create({&#xA;  messages: [&#xA;    { role: &#34;user&#34;, content: &#34;My name is Ken&#34; },&#xA;    { role: &#34;user&#34;, content: &#34;Oh, my last name is Collins&#34; },&#xA;  ],&#xA;});&#xA;const output = await assistant.ask(&#34;What is my full name?&#34;, thread.id);&#xA;console.log(output) // Ken Collins&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Thread Management &amp;amp; Locks&lt;/h3&gt; &#xA;&lt;p&gt;By default, each &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#tools&#34;&gt;Tool&lt;/a&gt; in Experts.js has its own thread &amp;amp; context. This avoids a potential &lt;a href=&#34;https://platform.openai.com/docs/assistants/how-it-works/thread-locks&#34;&gt;thread locking&lt;/a&gt; issue which happens if a &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#tools&#34;&gt;Tool&lt;/a&gt; were to share an &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#assistants&#34;&gt;Assistant&#39;s&lt;/a&gt; thread still waiting for tool outputs to be submitted. The following diagram illustrates how Experts.js manages threads on your behalf to avoid this problem:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/metaskills/experts/main/docs/images/panel-of-experts-thread-management.webp&#34; alt=&#34;Panel of Experts Thread Management&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All questions to your experts require a thread ID. For chat applications, the ID would be stored on the client. Such as a URL path parameter. With Expert.js, no other client-side IDs are needed. As each &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#assistants&#34;&gt;Assistant&lt;/a&gt; calls an LLM backed &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#tools&#34;&gt;Tool&lt;/a&gt;, it will find or create a thread for that tool as needed. Experts.js stores this parent -&amp;gt; child thread relationship for you using OpenAI&#39;s &lt;a href=&#34;https://platform.openai.com/docs/api-reference/threads/modifyThread&#34;&gt;thread metadata&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;To see code examples of these and more in action, please take a look at our &lt;a href=&#34;https://github.com/metaskills/experts/tree/main/test/uat&#34;&gt;test suite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Product Catalog&lt;/h3&gt; &#xA;&lt;p&gt;In the &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#overview&#34;&gt;Overview&lt;/a&gt; section we showed a three-tiered agent system that can answer the following types of questions. The examples uses most, if not all, the features of the Experts.js framework.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is the total amount of products available?&lt;/li&gt; &#xA; &lt;li&gt;Show me a bar chart image with totals of all top level categories.&lt;/li&gt; &#xA; &lt;li&gt;Find men&#39;s accessories for a sophisticated comic book enthusiast.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Streaming From Express&lt;/h3&gt; &#xA;&lt;p&gt;Basic example using the &lt;code&gt;textDelta&lt;/code&gt; event to stream responses from an Express route.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import express from &#34;express&#34;;&#xA;import { MainAssistant } from &#34;../experts/main.js&#34;;&#xA;&#xA;const assistant = await MainAssistant.create();&#xA;&#xA;messagesRouter.post(&#34;&#34;, async (req, res, next) =&amp;gt; {&#xA;  res.setHeader(&#34;Content-Type&#34;, &#34;text/plain&#34;);&#xA;  res.setHeader(&#34;Transfer-Encoding&#34;, &#34;chunked&#34;);&#xA;  assistant.on(&#34;textDelta&#34;, (delta, _snapshot) =&amp;gt; {&#xA;    res.write(delta.value);&#xA;  });&#xA;  await assistant.ask(req.body.message.content, req.body.threadID);&#xA;  res.end();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Messages With Images&lt;/h3&gt; &#xA;&lt;p&gt;The Assistant&#39;s API supports messages with images using either the &lt;code&gt;image_url&lt;/code&gt; or &lt;code&gt;image_file&lt;/code&gt; content types. Since our &lt;code&gt;ask()&lt;/code&gt; function supports strings or native OpenAI message objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const output = await assistant.ask(&#xA;  { &#xA;    role: &#34;user&#34;, &#xA;    content: [&#xA;      { type: &#34;text&#34;, text: &#34;Tell me about this image.&#34; },&#xA;      { type: &#34;image_file&#34;, image_file: { file_id: file.id detail: &#34;high&#34; } },&#xA;    ],&#xA;  },&#xA;  threadID&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Vector Store&lt;/h3&gt; &#xA;&lt;p&gt;Using a &lt;a href=&#34;https://platform.openai.com/docs/assistants/tools/file-search/vector-stores&#34;&gt;Vector Store&lt;/a&gt; for file search is easy using OpenAI&#39;s interface via our third configuration option. You could alternatively create your vector store on-demand using our &lt;code&gt;beforeInit()&lt;/code&gt; function described in &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#advanced-features&#34;&gt;Advanced Features&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;class VectorSearchAssistant extends Assistant {&#xA;  constructor() {&#xA;    const name = &#34;Vector Search Assistant&#34;;&#xA;    const description = &#34;...&#34;;&#xA;    const instructions = &#34;...&#34;&#xA;    super(name, description, instructions, {&#xA;      tools: [{ type: &#34;file_search&#34; }],&#xA;      temperature: 0.1,&#xA;      tool_resources: {&#xA;        file_search: {&#xA;          vector_store_ids: [process.env.VECTOR_STORE_ID],&#xA;        },&#xA;      },&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Token Usage Metrics&lt;/h3&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://raw.githubusercontent.com/metaskills/experts/main/#streaming--events&#34;&gt;Streaming &amp;amp; Events&lt;/a&gt; feature to report token usage allows you to have per-assistant metrics.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyAssistant extends Assistant {&#xA;  constructor() {&#xA;    // ...&#xA;    super(name, description, instructions);&#xA;    this.on(&#34;runStepDone&#34;, this.#reportUsage.bind(this));&#xA;  }&#xA;&#xA;  #reportUsage(runStep) {&#xA;    if (!runStep?.usage?.total_tokens) return;&#xA;    const iT = runStep.usage.prompt_tokens;&#xA;    const oT = runStep.usage.completion_tokens;&#xA;    const tT = runStep.usage.total_tokens;&#xA;    console.log({ InTokens: iT, OutTokens: oT, TotalTokens: tT });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;h3&gt;Global Model Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can globally set the model for all Assistants using the &lt;code&gt;EXPERTS_DEFAULT_MODEL&lt;/code&gt; environment variable. This only works if you have not explicitly set the model in your Assistant&#39;s constructor.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging API Calls &amp;amp; Events&lt;/h3&gt; &#xA;&lt;p&gt;To debug your assistant, you can set the &lt;code&gt;DEBUG=1&lt;/code&gt; environment variable. This will output verbose logging of all API calls and server-send events. Delta events can be somewhat verbose and are disabled by default. Please also use the &lt;code&gt;DEBUG_DELTAS=1&lt;/code&gt; environment variable to turn those on.&lt;/p&gt; &#xA;&lt;h2&gt;Development Setup&lt;/h2&gt; &#xA;&lt;p&gt;This project leverages &lt;a href=&#34;https://containers.dev/&#34;&gt;Dev Containers&lt;/a&gt; meaning you can open it in any supporting IDE to get started right away. This includes using &lt;a href=&#34;https://www.youtube.com/watch?v=b1RavPr_878&#34;&gt;VS Code with Dev Containers&lt;/a&gt; which is the recommended approach.&lt;/p&gt; &#xA;&lt;p&gt;Once opened in your development container, create a &lt;code&gt;.env.development.local&lt;/code&gt; file with your OpenAI API key and &lt;a href=&#34;https://postimages.org&#34;&gt;postimage.org&lt;/a&gt; API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;OPENAI_API_KEY=sk-...&#xA;POST_IMAGES_API_KEY=...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./bin/setup&#xA;./bin/test&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>songquanpeng/message-pusher</title>
    <updated>2024-05-22T01:30:46Z</updated>
    <id>tag:github.com,2024-05-22:/songquanpeng/message-pusher</id>
    <link href="https://github.com/songquanpeng/message-pusher" rel="alternate"></link>
    <summary type="html">&lt;p&gt;搭建专属于你的消息推送服务，支持多种消息推送方式，支持 Markdown，基于 Golang 仅单可执行文件，开箱即用&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/songquanpeng/message-pusher&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/songquanpeng/message-pusher/master/web/public/logo.png&#34; width=&#34;150&#34; height=&#34;150&#34; alt=&#34;message-pusher logo&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;消息推送服务&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;✨ 搭建专属于你的消息推送服务，支持多种消息推送方式，支持 Markdown，仅单可执行文件，开箱即用✨&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/songquanpeng/message-pusher/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/songquanpeng/message-pusher?color=brightgreen&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/songquanpeng/message-pusher/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/v/release/songquanpeng/message-pusher?color=brightgreen&amp;amp;include_prereleases&#34; alt=&#34;release&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/repository/docker/justsong/message-pusher&#34;&gt; &lt;img src=&#34;https://img.shields.io/docker/pulls/justsong/message-pusher?color=brightgreen&#34; alt=&#34;docker pull&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/songquanpeng/message-pusher/releases/latest&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/songquanpeng/message-pusher/total?color=brightgreen&amp;amp;include_prereleases&#34; alt=&#34;release&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/songquanpeng/message-pusher&#34;&gt; &lt;img src=&#34;https://goreportcard.com/badge/github.com/songquanpeng/message-pusher&#34; alt=&#34;GoReportCard&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/songquanpeng/message-pusher/releases&#34;&gt;程序下载&lt;/a&gt; · &lt;a href=&#34;#部署&#34;&gt;部署教程&lt;/a&gt; · &lt;a href=&#34;#用法&#34;&gt;使用教程&lt;/a&gt; · &lt;a href=&#34;https://github.com/songquanpeng/message-pusher/issues&#34;&gt;意见反馈&lt;/a&gt; · &lt;a href=&#34;https://message-pusher.onrender.com/&#34;&gt;在线演示&lt;/a&gt; &lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;：官方部署站 &lt;a href=&#34;https://msgpusher.com&#34;&gt;https://msgpusher.com&lt;/a&gt; 现已上线，当前开放注册，欢迎使用。如果收到积极反馈未来可以考虑换用延迟更低的服务器。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;：从 &lt;code&gt;v0.3&lt;/code&gt; 版本升级到 &lt;code&gt;v0.4&lt;/code&gt; 版本需要手动迁移数据库，具体方法见&lt;a href=&#34;https://raw.githubusercontent.com/songquanpeng/message-pusher/master/#%E8%BF%81%E7%A7%BB%E6%95%B0%E6%8D%AE%E5%BA%93&#34;&gt;迁移数据库&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;描述&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;多种消息推送方式&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;邮件消息，&lt;/li&gt; &#xA;   &lt;li&gt;微信测试号，&lt;/li&gt; &#xA;   &lt;li&gt;QQ，&lt;/li&gt; &#xA;   &lt;li&gt;企业微信应用号，&lt;/li&gt; &#xA;   &lt;li&gt;企业微信群机器人&lt;/li&gt; &#xA;   &lt;li&gt;飞书自建应用&lt;/li&gt; &#xA;   &lt;li&gt;飞书群机器人，&lt;/li&gt; &#xA;   &lt;li&gt;钉钉群机器人，&lt;/li&gt; &#xA;   &lt;li&gt;Bark App,&lt;/li&gt; &#xA;   &lt;li&gt;WebSocket 客户端（&lt;a href=&#34;https://github.com/songquanpeng/personal-assistant&#34;&gt;官方客户端&lt;/a&gt;，&lt;a href=&#34;https://raw.githubusercontent.com/songquanpeng/message-pusher/master/docs/API.md#websocket-%E5%AE%A2%E6%88%B7%E7%AB%AF&#34;&gt;接入文档&lt;/a&gt;），&lt;/li&gt; &#xA;   &lt;li&gt;Telegram 机器人，&lt;/li&gt; &#xA;   &lt;li&gt;Discord 群机器人，&lt;/li&gt; &#xA;   &lt;li&gt;腾讯云自定义告警：免费的短信提醒，&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;群组消息&lt;/strong&gt;：可以将多个推送通道组合成一个群组，然后向群组发送消息，可以实现一次性推送到多个渠道的功能，&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;自定义消息&lt;/strong&gt;：可以自定义消息请求 URL 和请求体格式，实现与其他服务的对接，支持&lt;a href=&#34;https://iamazing.cn/page/message-pusher-common-custom-templates&#34;&gt;众多第三方服务&lt;/a&gt;。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;支持&lt;strong&gt;自定义 Webhook，反向适配各种调用平台&lt;/strong&gt;，你可以接入各种已有的系统，而无需修改其代码。&lt;/li&gt; &#xA; &lt;li&gt;支持在 Web 端编辑 &amp;amp; 管理发送的消息，新消息发送后 Web 端&lt;strong&gt;即时刷新&lt;/strong&gt;。&lt;/li&gt; &#xA; &lt;li&gt;支持&lt;strong&gt;异步&lt;/strong&gt;消息发送。&lt;/li&gt; &#xA; &lt;li&gt;支持用户管理，支持多种用户登录注册方式： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;邮箱登录注册以及通过邮箱进行密码重置。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/settings/applications/new&#34;&gt;GitHub 开放授权&lt;/a&gt;。&lt;/li&gt; &#xA;   &lt;li&gt;微信公众号授权（需要额外部署 &lt;a href=&#34;https://github.com/songquanpeng/wechat-server&#34;&gt;WeChat Server&lt;/a&gt;）。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;支持 Markdown。&lt;/li&gt; &#xA; &lt;li&gt;支持 Cloudflare Turnstile 用户校验。&lt;/li&gt; &#xA; &lt;li&gt;支持在线发布公告，设置关于界面以及页脚。&lt;/li&gt; &#xA; &lt;li&gt;API &lt;strong&gt;兼容&lt;/strong&gt;其他消息推送服务，例如 &lt;a href=&#34;https://sct.ftqq.com/&#34;&gt;Server 酱&lt;/a&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;用途&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/songquanpeng/blog/raw/486d63e96ef7906a6c767653a20ec2d3278e9a4a/routes/user.js#L27&#34;&gt;整合进自己的博客系统，每当有人登录时发微信消息提醒&lt;/a&gt;。&lt;/li&gt; &#xA; &lt;li&gt;在进行深度学习模型训练时，在每个 epoch 结束后&lt;a href=&#34;https://github.com/songquanpeng/pytorch-template/raw/b2ba113659056080d3009b3014a67e977e2851bf/solver/solver.py#L223&#34;&gt;将关键数据发送到微信&lt;/a&gt;以方便及时监控。&lt;/li&gt; &#xA; &lt;li&gt;在各种脚本运行结束后发消息提醒，例如&lt;a href=&#34;https://github.com/songquanpeng/scripts/raw/main/star_watcher.py&#34;&gt;监控 GitHub Star 数量的脚本&lt;/a&gt;，又例如&lt;a href=&#34;https://github.com/songquanpeng/daily-report&#34;&gt;自动健康填报的脚本&lt;/a&gt;，用来通知运行结果。&lt;/li&gt; &#xA; &lt;li&gt;为&lt;a href=&#34;https://github.com/songquanpeng/personal-assistant#%E4%B8%AA%E4%BA%BA%E5%8A%A9%E7%90%86%E5%BA%94%E7%94%A8&#34;&gt;其他系统&lt;/a&gt;提供消息推送功能。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;部署&lt;/h2&gt; &#xA;&lt;h3&gt;通过 Docker 部署&lt;/h3&gt; &#xA;&lt;p&gt;部署：&lt;code&gt;docker run -d --restart always --name message-pusher -p 3000:3000 -e TZ=Asia/Shanghai -v /home/ubuntu/data/message-pusher:/data justsong/message-pusher&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;更新：&lt;code&gt;docker run --rm -v /var/run/docker.sock:/var/run/docker.sock containrrr/watchtower -cR&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;开放的端口号为 3000，之后用 Nginx 配置域名，反代以及 SSL 证书即可，具体参考&lt;a href=&#34;https://iamazing.cn/page/how-to-deploy-a-website&#34;&gt;详细部署教程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;p&gt;数据将会保存在宿主机的 &lt;code&gt;/home/ubuntu/data/message-pusher&lt;/code&gt; 目录（只有一个 SQLite 数据库文件），请确保该目录存在且具有写入权限，或者更改为合适的目录。&lt;/p&gt; &#xA;&lt;p&gt;Nginx 的参考配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;server{&#xA;   server_name msgpusher.com;  # 请根据实际情况修改你的域名&#xA;   &#xA;   location / {&#xA;          client_max_body_size  64m;&#xA;          proxy_http_version 1.1;&#xA;          proxy_pass http://localhost:3000;  # 请根据实际情况修改你的端口&#xA;          proxy_set_header Host $host;&#xA;          proxy_set_header X-Forwarded-For $remote_addr;&#xA;          proxy_cache_bypass $http_upgrade;&#xA;          proxy_set_header Accept-Encoding gzip;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;之后使用 Let&#39;s Encrypt 的 certbot 配置 HTTPS：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Ubuntu 安装 certbot：&#xA;sudo snap install --classic certbot&#xA;sudo ln -s /snap/bin/certbot /usr/bin/certbot&#xA;# 生成证书 &amp;amp; 修改 Nginx 配置&#xA;sudo certbot --nginx&#xA;# 根据指示进行操作&#xA;# 重启 Nginx&#xA;sudo service nginx restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;手动部署&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;从 &lt;a href=&#34;https://github.com/songquanpeng/message-pusher/releases/latest&#34;&gt;GitHub Releases&lt;/a&gt; 下载可执行文件或者从源码编译： &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/songquanpeng/message-pusher.git&#xA;cd message-pusher/web&#xA;npm install&#xA;npm run build&#xA;cd ..&#xA;go mod download&#xA;go build -ldflags &#34;-s -w&#34; -o message-pusher&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;运行： &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;chmod u+x message-pusher&#xA;./message-pusher --port 3000 --log-dir ./logs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;访问 &lt;a href=&#34;http://localhost:3000/&#34;&gt;http://localhost:3000/&lt;/a&gt; 并登录。初始账号用户名为 &lt;code&gt;root&lt;/code&gt;，密码为 &lt;code&gt;123456&lt;/code&gt;。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;如果服务需要长久运行，只是单纯地启动是不够的，&lt;a href=&#34;https://iamazing.cn/page/how-to-deploy-a-website&#34;&gt;详细部署教程&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;注意&lt;/h3&gt; &#xA;&lt;p&gt;如果需要使用 WebSocket 客户端推送功能，则 Nginx 的配置文件中 &lt;code&gt;proxy_read_timeout&lt;/code&gt; 和 &lt;code&gt;proxy_send_timeout&lt;/code&gt; 务必设置超过 1 分钟。&lt;/p&gt; &#xA;&lt;p&gt;推荐设置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;proxy_read_timeout 300s;&#xA;proxy_send_timeout 300s;   &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;配置&lt;/h2&gt; &#xA;&lt;p&gt;系统本身仅需要下载一个可执行文件即可开始使用，无其他依赖。&lt;/p&gt; &#xA;&lt;p&gt;你可以通过设置环境变量或者命令行参数进行配置。&lt;/p&gt; &#xA;&lt;p&gt;等到系统启动后，使用 &lt;code&gt;root&lt;/code&gt; 用户登录系统并做进一步的配置，默认密码为 &lt;code&gt;123456&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;环境变量&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;REDIS_CONN_STRING&lt;/code&gt;：设置之后将使用 Redis 作为请求频率限制的存储，而非使用内存存储。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例子：&lt;code&gt;REDIS_CONN_STRING=redis://default:redispw@localhost:49153&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SESSION_SECRET&lt;/code&gt;：设置之后将使用固定的会话密钥，这样系统重新启动后已登录用户的 cookie 将依旧有效。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例子：&lt;code&gt;SESSION_SECRET=random_string&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SQL_DSN&lt;/code&gt;：设置之后将使用指定数据库而非 SQLite。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例子：&lt;code&gt;SQL_DSN=root:123456@tcp(localhost:3306)/message-pusher&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;注意：使用 Docker 部署时，请使用 &lt;code&gt;-e key=value&lt;/code&gt; 设置环境变量。&lt;/p&gt; &#xA;&lt;p&gt;例子：&lt;code&gt;docker run -e SESSION_SECRET=random_string ...&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;命令行参数&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;--port &amp;lt;port_number&amp;gt;&lt;/code&gt;: 指定服务器监听的端口号，默认为 &lt;code&gt;3000&lt;/code&gt;。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例子：&lt;code&gt;--port 3000&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--log-dir &amp;lt;log_dir&amp;gt;&lt;/code&gt;: 指定日志文件夹，如果没有设置，日志将不会被保存。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;例子：&lt;code&gt;--log-dir ./logs&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt;: 打印系统版本号并退出。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;进一步的配置&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;系统设置： &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;填写服务器地址。&lt;/li&gt; &#xA;   &lt;li&gt;配置登录注册选项，如果系统不对外开放，请取消选择&lt;code&gt;允许新用户注册&lt;/code&gt;。&lt;/li&gt; &#xA;   &lt;li&gt;配置 SMTP 服务，可以使用 QQ 邮箱的 SMTP 服务。&lt;/li&gt; &#xA;   &lt;li&gt;其他配置可选，请按照页面上的指示完成配置。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;个人设置： &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;点击&lt;code&gt;更新用户信息&lt;/code&gt;更改默认用户名和密码。&lt;/li&gt; &#xA;   &lt;li&gt;点击&lt;code&gt;绑定邮箱地址&lt;/code&gt;绑定邮箱以启用邮件消息推送方式。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;推送设置： &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;设置&lt;code&gt;默认推送方式&lt;/code&gt;，默认为通过邮件进行推送。&lt;/li&gt; &#xA;   &lt;li&gt;设置&lt;code&gt;推送 token&lt;/code&gt;，用以推送 API 调用鉴权，如果不需要留空即可。&lt;/li&gt; &#xA;   &lt;li&gt;设置其他推送方式，按照页面上的指示即可，完成配置后点击对应的&lt;code&gt;测试&lt;/code&gt;按钮即可测试配置是否成功。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;其他设置：如果系统对外提供服务，本系统也提供了一定的个性化设置功能，你可以设置关于界面和页脚，以及发布公告。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;用法&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;消息推送 API URL：&lt;code&gt;https://&amp;lt;domain&amp;gt;/push/&amp;lt;username&amp;gt;&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;将上面的 &lt;code&gt;&amp;lt;domain&amp;gt;&lt;/code&gt; 以及 &lt;code&gt;&amp;lt;username&amp;gt;&lt;/code&gt; 替换为真实值，例如：&lt;code&gt;https://push.mydomain.cn/push/admin&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; 请求方式：&lt;code&gt;https://&amp;lt;domain&amp;gt;/push/&amp;lt;username&amp;gt;?title=&amp;lt;标题&amp;gt;&amp;amp;description=&amp;lt;描述&amp;gt;&amp;amp;content=&amp;lt;Markdown 文本&amp;gt;&amp;amp;channel=&amp;lt;推送方式&amp;gt;&amp;amp;token=&amp;lt;推送 token&amp;gt;&lt;/code&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;title&lt;/code&gt;：选填，受限于具体的消息推送方式，其可能被忽略。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;description&lt;/code&gt;：必填，可以替换为 &lt;code&gt;desp&lt;/code&gt;。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;content&lt;/code&gt;：选填，受限于具体的消息推送方式，Markdown 语法的支持有所区别。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;channel&lt;/code&gt;：选填，如果不填则系统使用你在后台设置的默认推送通道。注意，此处填的是消息通道的名称，而非类型。可选的推送通道类型有： &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;code&gt;email&lt;/code&gt;：通过发送邮件的方式进行推送（使用 &lt;code&gt;title&lt;/code&gt; 或 &lt;code&gt;description&lt;/code&gt; 字段设置邮件主题，使用 &lt;code&gt;content&lt;/code&gt; 字段设置正文，支持完整的 Markdown 语法）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;test&lt;/code&gt;：通过微信测试号进行推送（使用 &lt;code&gt;description&lt;/code&gt; 字段设置模板消息内容，不支持 Markdown）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;corp_app&lt;/code&gt;：通过企业微信应用号进行推送（仅当使用企业微信 APP 时，如果设置了 &lt;code&gt;content&lt;/code&gt; 字段，&lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;description&lt;/code&gt; 字段会被忽略；使用微信中的企业微信插件时正常）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;lark_app&lt;/code&gt;：通过飞书自建应用进行推送。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;corp&lt;/code&gt;：通过企业微信群机器人推送（设置 &lt;code&gt;content&lt;/code&gt; 字段则将渲染 Markdown 消息，支持 Markdown 的子集；设置 &lt;code&gt;description&lt;/code&gt; 字段则为普通文本消息）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;lark&lt;/code&gt;：通过飞书群机器人进行推送（注意事项同上）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;ding&lt;/code&gt;：通过钉钉群机器人进行推送（注意事项同上）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;bark&lt;/code&gt;：通过 Bark 进行推送（支持 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;description&lt;/code&gt; 字段）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;client&lt;/code&gt;：通过 WebSocket 客户端进行推送（支持 &lt;code&gt;title&lt;/code&gt; 和 &lt;code&gt;description&lt;/code&gt; 字段）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;telegram&lt;/code&gt;：通过 Telegram 机器人进行推送（&lt;code&gt;description&lt;/code&gt; 或 &lt;code&gt;content&lt;/code&gt; 字段二选一，支持 Markdown 的子集）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;discord&lt;/code&gt;：通过 Discord 群机器人进行推送（注意事项同上）。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;one_api&lt;/code&gt;：通过 OneAPI 协议推送消息到 QQ。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;group&lt;/code&gt;：通过预先配置的消息推送通道群组进行推送。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;custom&lt;/code&gt;：通过预先配置好的自定义推送通道进行推送。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;tencent_alarm&lt;/code&gt;：通过腾讯云监控告警进行推送，仅支持 &lt;code&gt;description&lt;/code&gt; 字段。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;none&lt;/code&gt;：仅保存到数据库，不做推送。&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;token&lt;/code&gt;：如果你在后台设置了推送 token，则此项必填。另外可以通过设置 HTTP &lt;code&gt;Authorization&lt;/code&gt; 头部设置此项。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;url&lt;/code&gt;：选填，如果不填则系统自动为消息生成 URL，其内容为消息详情。&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;to&lt;/code&gt;：选填，推送给指定用户，如果不填则默认推送给自己，受限于具体的消息推送方式，有些推送方式不支持此项。 &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;&lt;code&gt;@all&lt;/code&gt;：推送给所有用户。&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;user1|user2|user3&lt;/code&gt;：推送给多个用户，用户之间使用 &lt;code&gt;|&lt;/code&gt; 分隔。&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;async&lt;/code&gt;：选填，如果设置为 &lt;code&gt;true&lt;/code&gt; 则消息推送将在后台异步进行，返回结果包含 &lt;code&gt;uuid&lt;/code&gt; 字段，可用于后续[获取消息发送状态](./docs/API.md#通过消息 UUID 获取消息发送状态)。&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; 请求方式：字段与上面 &lt;code&gt;GET&lt;/code&gt; 请求方式保持一致。 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;如果发送的是 JSON，HTTP Header &lt;code&gt;Content-Type&lt;/code&gt; 请务必设置为 &lt;code&gt;application/json&lt;/code&gt;，否则一律按 Form 处理。&lt;/li&gt; &#xA;   &lt;li&gt;POST 请求方式下的 &lt;code&gt;token&lt;/code&gt; 字段也可以通过 URL 查询参数进行设置。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;各种通道的支持程度：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;通道类型&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;title&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;description&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;content&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;url&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;code&gt;to&lt;/code&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Markdown 支持&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;test&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;corp_app&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;corp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;lark&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;lark_app&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;ding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;bark&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;client&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;telegram&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;discord&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;tencent_alarm&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;注意：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;对于大部分通道，&lt;code&gt;description&lt;/code&gt; 字段和 &lt;code&gt;content&lt;/code&gt; 是不能同时存在的，如果你只需要文字消息，请使用 &lt;code&gt;description&lt;/code&gt; 字段，如果你需要发送 Markdown 消息，请使用 &lt;code&gt;content&lt;/code&gt; 字段。&lt;/li&gt; &#xA; &lt;li&gt;部分通道的 Markdown 支持实际上是通过 URL 跳转到本系统所渲染的消息详情实现的，其他通道的 Markdown 支持受限于具体的通道，支持的语法并不统一。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;示例：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Bash 示例 &lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;#!/bin/bash&#xA;&#xA;MESSAGE_PUSHER_SERVER=&#34;https://msgpusher.com&#34;&#xA;MESSAGE_PUSHER_USERNAME=&#34;test&#34;&#xA;MESSAGE_PUSHER_TOKEN=&#34;666&#34;&#xA;&#xA;function send_message {&#xA;  # POST Form&#xA;  curl -s -X POST &#34;$MESSAGE_PUSHER_SERVER/push/$MESSAGE_PUSHER_USERNAME&#34; \&#xA;    -d &#34;title=$1&amp;amp;description=$2&amp;amp;content=$3&amp;amp;token=$MESSAGE_PUSHER_TOKEN&#34; \&#xA;    &amp;gt;/dev/null&#xA;}&#xA;&#xA;function send_message_with_json {&#xA;  # POST JSON&#xA;  curl -s -X POST &#34;$MESSAGE_PUSHER_SERVER/push/$MESSAGE_PUSHER_USERNAME&#34; \&#xA;    -H &#39;Content-Type: application/json&#39; \&#xA;    -d &#39;{&#34;title&#34;:&#34;&#39;&#34;$1&#34;&#39;&#34;,&#34;desp&#34;:&#34;&#39;&#34;$2&#34;&#39;&#34;, &#34;content&#34;:&#34;&#39;&#34;$3&#34;&#39;&#34;, &#34;token&#34;:&#34;&#39;&#34;$MESSAGE_PUSHER_TOKEN&#34;&#39;&#34;}&#39; \&#xA;    &amp;gt;/dev/null&#xA;}&#xA;&#xA;send_message &#39;title&#39; &#39;description&#39; &#39;content&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Python 示例 &lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import requests&#xA;&#xA;SERVER = &#34;https://msgpusher.com&#34;&#xA;USERNAME = &#34;test&#34;&#xA;TOKEN = &#34;666&#34;&#xA;&#xA;&#xA;def send_message(title, description, content):&#xA;    # GET 方式&#xA;    # res = requests.get(f&#34;{SERVER}/push/{USERNAME}?title={title}&#34;&#xA;    #                    f&#34;&amp;amp;description={description}&amp;amp;content={content}&amp;amp;token={TOKEN}&#34;)&#xA;&#xA;    # POST 方式&#xA;    res = requests.post(f&#34;{SERVER}/push/{USERNAME}&#34;, json={&#xA;        &#34;title&#34;: title,&#xA;        &#34;description&#34;: description,&#xA;        &#34;content&#34;: content,&#xA;        &#34;token&#34;: TOKEN&#xA;    })&#xA;    res = res.json()&#xA;    if res[&#34;success&#34;]:&#xA;        return None&#xA;    else:&#xA;        return res[&#34;message&#34;]&#xA;&#xA;&#xA;error = send_message(&#34;标题&#34;, &#34;描述&#34;, &#34;**Markdown 内容**&#34;)&#xA;if error:&#xA;    print(error)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Go 示例 &lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main&#xA;&#xA;import (&#xA;   &#34;bytes&#34;&#xA;   &#34;encoding/json&#34;&#xA;   &#34;errors&#34;&#xA;   &#34;fmt&#34;&#xA;   &#34;net/http&#34;&#xA;   &#34;net/url&#34;&#xA;)&#xA;&#xA;var serverAddress = &#34;https://msgpusher.com&#34;&#xA;var username = &#34;test&#34;&#xA;var token = &#34;666&#34;&#xA;&#xA;type request struct {&#xA;   Title       string `json:&#34;title&#34;`&#xA;   Description string `json:&#34;description&#34;`&#xA;   Content     string `json:&#34;content&#34;`&#xA;   URL         string `json:&#34;url&#34;`&#xA;   Channel     string `json:&#34;channel&#34;`&#xA;   Token       string `json:&#34;token&#34;`&#xA;}&#xA;&#xA;type response struct {&#xA;   Success bool   `json:&#34;success&#34;`&#xA;   Message string `json:&#34;message&#34;`&#xA;}&#xA;&#xA;func SendMessage(title string, description string, content string) error {&#xA;   req := request{&#xA;      Title:       title,&#xA;      Description: description,&#xA;      Content:     content,&#xA;      Token:       token,&#xA;   }&#xA;   data, err := json.Marshal(req)&#xA;   if err != nil {&#xA;      return err&#xA;   }&#xA;   resp, err := http.Post(fmt.Sprintf(&#34;%s/push/%s&#34;, serverAddress, username),&#xA;      &#34;application/json&#34;, bytes.NewBuffer(data))&#xA;   if err != nil {&#xA;      return err&#xA;   }&#xA;   var res response&#xA;   err = json.NewDecoder(resp.Body).Decode(&amp;amp;res)&#xA;   if err != nil {&#xA;      return err&#xA;   }&#xA;   if !res.Success {&#xA;      return errors.New(res.Message)&#xA;   }&#xA;   return nil&#xA;}&#xA;&#xA;func SendMessageWithForm(title string, description string, content string) error {&#xA;   resp, err := http.PostForm(fmt.Sprintf(&#34;%s/push/%s&#34;, serverAddress, username),&#xA;      url.Values{&#34;title&#34;: {title}, &#34;description&#34;: {description}, &#34;content&#34;: {content}, &#34;token&#34;: {token}})&#xA;   if err != nil {&#xA;      return err&#xA;   }&#xA;   var res response&#xA;   err = json.NewDecoder(resp.Body).Decode(&amp;amp;res)&#xA;   if err != nil {&#xA;      return err&#xA;   }&#xA;   if !res.Success {&#xA;      return errors.New(res.Message)&#xA;   }&#xA;   return nil&#xA;}&#xA;&#xA;func main() {&#xA;   //err := SendMessage(&#34;标题&#34;, &#34;描述&#34;, &#34;**Markdown 内容**&#34;)&#xA;   err := SendMessageWithForm(&#34;标题&#34;, &#34;描述&#34;, &#34;**Markdown 内容**&#34;)&#xA;   if err != nil {&#xA;      fmt.Println(&#34;推送失败：&#34; + err.Error())&#xA;   } else {&#xA;      fmt.Println(&#34;推送成功！&#34;)&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;C# 示例 &lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-csharp&#34;&gt;using Newtonsoft.Json;&#xA;using RestSharp;&#xA;&#xA;namespace Demo&#xA;{&#xA;    public class Program&#xA;    {&#xA;        public static void Main(string[] args)&#xA;        {&#xA;            //推送消息&#xA;            var sendMsg = MessagePusherTool.SendMessage(&#34;标题&#34;, &#34;描述&#34;, &#34;**Markdown 内容**&#34;);&#xA;            if(sendMsg.Success)&#xA;            {&#xA;                Console.WriteLine($&#34;推送成功！&#34;);&#xA;            }&#xA;            else&#xA;            {&#xA;                Console.WriteLine($&#34;推送失败：{sendMsg.Message}&#34;);&#xA;            }&#xA;        }&#xA;    }&#xA;&#xA;    /// &amp;lt;summary&amp;gt;&#xA;    /// 消息推送工具&#xA;    /// &#xA;    /// &amp;lt;para&amp;gt;开源地址：https://github.com/songquanpeng/message-pusher&amp;lt;/para&amp;gt;&#xA;    /// &amp;lt;para&amp;gt;支持：Framework、Net3.1、Net5、Net6&amp;lt;/para&amp;gt;&#xA;    /// &amp;lt;para&amp;gt;引用包：&amp;lt;/para&amp;gt;&#xA;    /// &amp;lt;para&amp;gt;dotnet add package Newtonsoft.Json -v 13.0.2&amp;lt;/para&amp;gt;&#xA;    /// &amp;lt;para&amp;gt;dotnet add package RestSharp -v 108.0.3&amp;lt;/para&amp;gt;&#xA;    /// &amp;lt;/summary&amp;gt;&#xA;    public class MessagePusherTool&#xA;    {&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// ServerAddress&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        public const string ServerAddress = &#34;https://msgpusher.com&#34;;&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// UserName&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        public const string UserName = &#34;test&#34;;&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// Token&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        public const string Token = &#34;666&#34;;&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// SendMessage&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        /// &amp;lt;param name=&#34;title&#34;&amp;gt;title&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;param name=&#34;description&#34;&amp;gt;description&amp;lt;/param&amp;gt;&#xA;        /// &amp;lt;param name=&#34;content&#34;&amp;gt;content&amp;lt;/param&amp;gt;&#xA;        public static Response SendMessage(string title, string description, string content)&#xA;        {&#xA;            var requestData = new Request()&#xA;            {&#xA;                Title = title,&#xA;                Description = description,&#xA;                Content = content,&#xA;                Token = Token,&#xA;            };&#xA;            var url = $&#34;{ServerAddress}&#34;;&#xA;            var client = new RestClient(url);&#xA;            var request = new RestRequest($&#34;push/{UserName}&#34;, Method.Post);&#xA;            request.AddJsonBody(requestData);&#xA;            var response = client.Execute(request);&#xA;            var responseData = response.Content;&#xA;            var responseJson = JsonConvert.DeserializeObject&amp;lt;Response&amp;gt;(responseData);&#xA;            return responseJson;&#xA;        }&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// Request&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        public class Request&#xA;        {&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// Title&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;title&#34;)]&#xA;            public string Title { get; set; }&#xA;&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// Description&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;description&#34;)]&#xA;            public string Description { get; set; }&#xA;&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// Content&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;content&#34;)]&#xA;            public string Content { get; set; }&#xA;&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// URL&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;url&#34;)]&#xA;            public string URL { get; set; }&#xA;&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// Channel&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;channel&#34;)]&#xA;            public string Channel { get; set; }&#xA;&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// Token&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;token&#34;)]&#xA;            public string Token { get; set; }&#xA;        }&#xA;&#xA;        /// &amp;lt;summary&amp;gt;&#xA;        /// Response&#xA;        /// &amp;lt;/summary&amp;gt;&#xA;        public class Response&#xA;        {&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// Success&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;success&#34;)]&#xA;            public bool Success { get; set; }&#xA;&#xA;            /// &amp;lt;summary&amp;gt;&#xA;            /// Message&#xA;            /// &amp;lt;/summary&amp;gt;&#xA;            [JsonProperty(PropertyName = &#34;message&#34;)]&#xA;            public string Message { get; set; }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;Node.js 示例 &lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;div&gt; &#xA;  &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const axios = require(&#39;axios&#39;);&#xA;const querystring = require(&#39;querystring&#39;);&#xA;&#xA;const MESSAGE_PUSHER_SERVER = &#39;https://msgpusher.com&#39;&#xA;const MESSAGE_PUSHER_USERNAME = &#39;test&#39;&#xA;const MESSAGE_PUSHER_TOKEN = &#39;666&#39;&#xA;&#xA;async function send_message(title, description, content) {&#xA;  try {&#xA;    const postData = querystring.stringify({&#xA;      title: title,&#xA;      desp: description,&#xA;      content: content,&#xA;      token: MESSAGE_PUSHER_TOKEN,&#xA;    })&#xA;&#xA;    const response = await axios.post(`${MESSAGE_PUSHER_SERVER}/push/${MESSAGE_PUSHER_USERNAME}`, postData, {&#xA;      headers: {&#xA;        &#39;Content-Type&#39;: &#39;application/x-www-form-urlencoded&#39;,&#xA;      },&#xA;    })&#xA;    if (response.data.success) {&#xA;      return response.data&#xA;    }&#xA;  } catch (error) {&#xA;    if (error.response) {&#xA;      return error.response.data&#xA;    } else {&#xA;      throw error&#xA;    }&#xA;&#xA;  }&#xA;}&#xA;&#xA;send_message(&#39;标题&#39;, &#39;描述&#39;, &#39;**Markdown 内容**&#39;)&#xA;  .then((response) =&amp;gt; {&#xA;    if (response.success) {&#xA;      console.log(&#39;推送成功:&#39;, response)&#xA;    } else {&#xA;      console.log(&#39;推送失败:&#39;, response)&#xA;    }&#xA;  }, (error) =&amp;gt; {&#xA;    console.log(error.message);&#xA;  })&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;/div&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;欢迎 PR 添加更多语言的示例。&lt;/p&gt; &#xA;&lt;h2&gt;迁移数据库&lt;/h2&gt; &#xA;&lt;p&gt;此处均以 SQLite 为例，其他数据库请自行修改。我已经让 ChatGPT 翻译成对应的 SQL 版本，见 &lt;code&gt;bin&lt;/code&gt; 文件夹，供参考。&lt;/p&gt; &#xA;&lt;h3&gt;从 &lt;code&gt;v0.3&lt;/code&gt; 迁移到 &lt;code&gt;v0.4&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;首先备份你的数据库文件。&lt;/li&gt; &#xA; &lt;li&gt;下载最新的 &lt;code&gt;v0.4&lt;/code&gt; 版本，启动程序，程序会自动进行数据库表结构的迁移。&lt;/li&gt; &#xA; &lt;li&gt;终止程序。&lt;/li&gt; &#xA; &lt;li&gt;之后执行脚本：&lt;code&gt;./bin/migrate_v3_to_v4.py&lt;/code&gt;，进行数据的迁移。&lt;/li&gt; &#xA; &lt;li&gt;重新启动程序即可。&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;注意，执行前请确保数据库中 &lt;code&gt;users&lt;/code&gt; 表中字段的顺序和脚本中的一致，否则会出现数据错乱的情况。&lt;/p&gt; &#xA;&lt;h2&gt;其他&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;v0.3&lt;/code&gt; 之前的版本基于 Node.js，你可以切换到 &lt;a href=&#34;https://github.com/songquanpeng/message-pusher/tree/nodejs&#34;&gt;&lt;code&gt;nodejs&lt;/code&gt;&lt;/a&gt; 分支查看，该版本不再有功能性更新。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v0.3&lt;/code&gt; 以及后续版本基于 Gin Template &lt;a href=&#34;https://github.com/songquanpeng/gin-template&#34;&gt;&lt;code&gt;v0.2.1&lt;/code&gt;&lt;/a&gt; 版本开发。&lt;/li&gt; &#xA; &lt;li&gt;如果想要自行编译，请首先&lt;a href=&#34;https://raw.githubusercontent.com/songquanpeng/message-pusher/master/web/README.md&#34;&gt;编译前端&lt;/a&gt;，之后再编译后端，否则会遇到 &lt;code&gt;pattern web/build: no matching files found&lt;/code&gt; 问题。&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>V2RaySSR/Free-VLESS</title>
    <updated>2024-05-22T01:30:46Z</updated>
    <id>tag:github.com,2024-05-22:/V2RaySSR/Free-VLESS</id>
    <link href="https://github.com/V2RaySSR/Free-VLESS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;通过 Cloudflare，免费部署 VLESS节点&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;前言&lt;/h2&gt; &#xA;&lt;p&gt;zizifn 大佬的一个开源项目 &lt;a href=&#34;https://github.com/zizifn/edgetunnel&#34;&gt;edgetunnel&lt;/a&gt; ，使得我们可以免费的在 Cloudflare 上面通过部署 Worker ，来创建一个免费 VLESS 节点！&lt;/p&gt; &#xA;&lt;h3&gt;何为 Cloudflare Worker?&lt;/h3&gt; &#xA;&lt;p&gt;Cloudflare Worker 是 Cloudflare 提供的一种服务，它允许开发者在全球分布的边缘服务器上运行自定义的 JavaScript 代码。&lt;/p&gt; &#xA;&lt;p&gt;Cloudflare Worker 可以用来处理 HTTP 请求，从而允许开发者通过编写 JavaScript 代码来实现各种功能，例如路由请求、修改请求和响应、执行身份验证、实现缓存策略等。&lt;/p&gt; &#xA;&lt;h2&gt;准备工作&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;注册 Cloudflare 账号，&lt;a href=&#34;https://dash.cloudflare.com/sign-up&#34;&gt;注册地址&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;购买注册域名一个&lt;/p&gt; &lt;p&gt;推荐在 Namesilo 进行购买，因为他的 WHOIS 隐私 是免费的，可以适当的进行一下隐私保护，而且域名还都挺便宜的。&lt;/p&gt; &lt;p&gt;购买地址：&lt;a href=&#34;https://www.namesilo.com/?rid=6254266mw&#34;&gt;点击访问&lt;/a&gt; （1.88刀/年 起）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;托管域名到 Cloudflare&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;详细教程请访问&lt;/h2&gt; &#xA;&lt;p&gt;V2raySSR综合网，&lt;a href=&#34;https://v2rayssr.com/worker-vless.html&#34;&gt;详情地址&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>