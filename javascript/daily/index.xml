<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-14T01:35:51Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jsx-eslint/eslint-plugin-react</title>
    <updated>2022-10-14T01:35:51Z</updated>
    <id>tag:github.com,2022-10-14:/jsx-eslint/eslint-plugin-react</id>
    <link href="https://github.com/jsx-eslint/eslint-plugin-react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React-specific linting rules for ESLint&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;eslint-plugin-react&lt;/code&gt; &lt;sup&gt;&lt;a href=&#34;https://npmjs.org/package/eslint-plugin-react&#34;&gt;&lt;img src=&#34;https://versionbadg.es/jsx-eslint/eslint-plugin-react.svg?sanitize=true&#34; alt=&#34;Version Badge&#34;&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/h1&gt; &#xA;&lt;p&gt;===================&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jsx-eslint/eslint-plugin-react/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/jsx-eslint/eslint-plugin-react&#34; alt=&#34;github actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jsx-eslint/eslint-plugin-react/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/jsx-eslint/eslint-plugin-react.svg?sanitize=true&#34; alt=&#34;Maintenance Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/eslint-plugin-react&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/eslint-plugin-react.svg?sanitize=true&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tidelift.com/subscription/pkg/npm-eslint-plugin-react?utm_source=npm-eslint-plugin-react&amp;amp;utm_medium=referral&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://tidelift.com/badges/package/npm/eslint-plugin-react?style=flat&#34; alt=&#34;Tidelift&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;React specific linting rules for &lt;code&gt;eslint&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install eslint eslint-plugin-react --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also possible to install ESLint globally rather than locally (using &lt;code&gt;npm install -g eslint&lt;/code&gt;). However, this is not recommended, and any plugins or shareable configs that you use must be installed locally in either case.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration (legacy: &lt;code&gt;.eslintrc*&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/#recommended&#34;&gt;our preset&lt;/a&gt; to get reasonable defaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;extends&#34;: [&#xA;    &#34;eslint:recommended&#34;,&#xA;    &#34;plugin:react/recommended&#34;&#xA;  ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;a href=&#34;https://reactjs.org/blog/2020/09/22/introducing-the-new-jsx-transform.html#removing-unused-react-imports&#34;&gt;new JSX transform from React 17&lt;/a&gt;, extend &lt;a href=&#34;https://github.com/jsx-eslint/eslint-plugin-react/raw/c8917b0885094b5e4cc2a6f613f7fb6f16fe932e/index.js#L163-L176&#34;&gt;&lt;code&gt;react/jsx-runtime&lt;/code&gt;&lt;/a&gt; in your eslint config (add &lt;code&gt;&#34;plugin:react/jsx-runtime&#34;&lt;/code&gt; to &lt;code&gt;&#34;extends&#34;&lt;/code&gt;) to disable the relevant rules.&lt;/p&gt; &#xA;&lt;p&gt;You should also specify settings that will be shared across all the plugin rules. (&lt;a href=&#34;https://eslint.org/docs/user-guide/configuring/configuration-files#adding-shared-settings&#34;&gt;More about eslint shared settings&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json5&#34;&gt;{&#xA;  &#34;settings&#34;: {&#xA;    &#34;react&#34;: {&#xA;      &#34;createClass&#34;: &#34;createReactClass&#34;, // Regex for Component Factory to use,&#xA;                                         // default to &#34;createReactClass&#34;&#xA;      &#34;pragma&#34;: &#34;React&#34;,  // Pragma to use, default to &#34;React&#34;&#xA;      &#34;fragment&#34;: &#34;Fragment&#34;,  // Fragment to use (may be a property of &amp;lt;pragma&amp;gt;), default to &#34;Fragment&#34;&#xA;      &#34;version&#34;: &#34;detect&#34;, // React version. &#34;detect&#34; automatically picks the version you have installed.&#xA;                           // You can also use `16.0`, `16.3`, etc, if you want to override the detected value.&#xA;                           // It will default to &#34;latest&#34; and warn if missing, and to &#34;detect&#34; in the future&#xA;      &#34;flowVersion&#34;: &#34;0.53&#34; // Flow version&#xA;    },&#xA;    &#34;propWrapperFunctions&#34;: [&#xA;        // The names of any function used to wrap propTypes, e.g. `forbidExtraProps`. If this isn&#39;t set, any propTypes wrapped in a function will be skipped.&#xA;        &#34;forbidExtraProps&#34;,&#xA;        {&#34;property&#34;: &#34;freeze&#34;, &#34;object&#34;: &#34;Object&#34;},&#xA;        {&#34;property&#34;: &#34;myFavoriteWrapper&#34;},&#xA;        // for rules that check exact prop wrappers&#xA;        {&#34;property&#34;: &#34;forbidExtraProps&#34;, &#34;exact&#34;: true}&#xA;    ],&#xA;    &#34;componentWrapperFunctions&#34;: [&#xA;        // The name of any function used to wrap components, e.g. Mobx `observer` function. If this isn&#39;t set, components wrapped by these functions will be skipped.&#xA;        &#34;observer&#34;, // `property`&#xA;        {&#34;property&#34;: &#34;styled&#34;}, // `object` is optional&#xA;        {&#34;property&#34;: &#34;observer&#34;, &#34;object&#34;: &#34;Mobx&#34;},&#xA;        {&#34;property&#34;: &#34;observer&#34;, &#34;object&#34;: &#34;&amp;lt;pragma&amp;gt;&#34;} // sets `object` to whatever value `settings.react.pragma` is set to&#xA;    ],&#xA;    &#34;formComponents&#34;: [&#xA;      // Components used as alternatives to &amp;lt;form&amp;gt; for forms, eg. &amp;lt;Form endpoint={ url } /&amp;gt;&#xA;      &#34;CustomForm&#34;,&#xA;      {&#34;name&#34;: &#34;Form&#34;, &#34;formAttribute&#34;: &#34;endpoint&#34;}&#xA;    ],&#xA;    &#34;linkComponents&#34;: [&#xA;      // Components used as alternatives to &amp;lt;a&amp;gt; for linking, eg. &amp;lt;Link to={ url } /&amp;gt;&#xA;      &#34;Hyperlink&#34;,&#xA;      {&#34;name&#34;: &#34;Link&#34;, &#34;linkAttribute&#34;: &#34;to&#34;}&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not use a preset you will need to specify individual rules and add extra configuration.&lt;/p&gt; &#xA;&lt;p&gt;Add &#34;react&#34; to the plugins section.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;plugins&#34;: [&#xA;    &#34;react&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable JSX support.&lt;/p&gt; &#xA;&lt;p&gt;With &lt;code&gt;eslint&lt;/code&gt; 2+&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;parserOptions&#34;: {&#xA;    &#34;ecmaFeatures&#34;: {&#xA;      &#34;jsx&#34;: true&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable the rules that you would like to use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;  &#34;rules&#34;: {&#xA;    &#34;react/jsx-uses-react&#34;: &#34;error&#34;,&#xA;    &#34;react/jsx-uses-vars&#34;: &#34;error&#34;,&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Shareable configs&lt;/h3&gt; &#xA;&lt;h4&gt;Recommended&lt;/h4&gt; &#xA;&lt;p&gt;This plugin exports a &lt;code&gt;recommended&lt;/code&gt; configuration that enforces React good practices.&lt;/p&gt; &#xA;&lt;p&gt;To enable this configuration use the &lt;code&gt;extends&lt;/code&gt; property in your &lt;code&gt;.eslintrc&lt;/code&gt; config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;extends&#34;: [&#34;eslint:recommended&#34;, &#34;plugin:react/recommended&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://eslint.org/docs/user-guide/configuring/configuration-files#extending-configuration-files&#34;&gt;&lt;code&gt;eslint&lt;/code&gt; documentation&lt;/a&gt; for more information about extending configuration files.&lt;/p&gt; &#xA;&lt;h4&gt;All&lt;/h4&gt; &#xA;&lt;p&gt;This plugin also exports an &lt;code&gt;all&lt;/code&gt; configuration that includes every available rule. This pairs well with the &lt;code&gt;eslint:all&lt;/code&gt; rule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;plugins&#34;: [&#xA;    &#34;react&#34;&#xA;  ],&#xA;  &#34;extends&#34;: [&#34;eslint:all&#34;, &#34;plugin:react/all&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These configurations will import &lt;code&gt;eslint-plugin-react&lt;/code&gt; and enable JSX in &lt;a href=&#34;https://eslint.org/docs/user-guide/configuring/language-options#specifying-parser-options&#34;&gt;parser options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration (new: &lt;code&gt;eslint.config.js&lt;/code&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://github.com/eslint/eslint/releases/tag/v8.21.0&#34;&gt;&lt;code&gt;v8.21.0&lt;/code&gt;&lt;/a&gt;, eslint announced a new config system. In the new system, &lt;code&gt;.eslintrc*&lt;/code&gt; is no longer used. &lt;code&gt;eslint.config.js&lt;/code&gt; would be the default config file name. In eslint &lt;code&gt;v8&lt;/code&gt;, the legacy system (&lt;code&gt;.eslintrc*&lt;/code&gt;) would still be supported, while in eslint &lt;code&gt;v9&lt;/code&gt;, only the new system would be supported.&lt;/p&gt; &#xA;&lt;p&gt;And from &lt;a href=&#34;https://github.com/eslint/eslint/releases/tag/v8.23.0&#34;&gt;&lt;code&gt;v8.23.0&lt;/code&gt;&lt;/a&gt;, eslint CLI starts to look up &lt;code&gt;eslint.config.js&lt;/code&gt;. &lt;strong&gt;So, if your eslint is &lt;code&gt;&amp;gt;=8.23.0&lt;/code&gt;, you&#39;re 100% ready to use the new config system.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You might want to check out the official blog posts,&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eslint.org/blog/2022/08/new-config-system-part-1/&#34;&gt;https://eslint.org/blog/2022/08/new-config-system-part-1/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eslint.org/blog/2022/08/new-config-system-part-2/&#34;&gt;https://eslint.org/blog/2022/08/new-config-system-part-2/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eslint.org/blog/2022/08/new-config-system-part-3/&#34;&gt;https://eslint.org/blog/2022/08/new-config-system-part-3/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and the &lt;a href=&#34;https://eslint.org/docs/latest/user-guide/configuring/configuration-files-new&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Plugin&lt;/h3&gt; &#xA;&lt;p&gt;The default export of &lt;code&gt;eslint-plugin-react&lt;/code&gt; is a plugin object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const react = require(&#39;eslint-plugin-react&#39;);&#xA;const globals = require(&#39;globals&#39;);&#xA;&#xA;module.exports = [&#xA;  …&#xA;  {&#xA;    files: [&#39;**/*.{js,jsx,mjs,cjs,ts,tsx}&#39;],&#xA;    plugins: {&#xA;      react,&#xA;    },&#xA;    languageOptions: {&#xA;      parserOptions: {&#xA;        ecmaFeatures: {&#xA;          jsx: true,&#xA;        },&#xA;      },&#xA;      globals: {&#xA;        ...globals.browser,&#xA;      },&#xA;    },&#xA;    rules: {&#xA;      // ... any rules you want&#xA;      &#39;react/jsx-uses-react&#39;: &#39;error&#39;,&#xA;      &#39;react/jsx-uses-vars&#39;: &#39;error&#39;,&#xA;     },&#xA;    // ... others are omitted for brevity&#xA;  },&#xA;  …&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Configuring shared settings&lt;/h3&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://eslint.org/docs/latest/user-guide/configuring/configuration-files-new#configuring-shared-settings&#34;&gt;official docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The schema of the &lt;code&gt;settings.react&lt;/code&gt; object would be identical to that of what&#39;s already described above in the legacy config section.&lt;/p&gt; &#xA;&lt;!-- markdownlint-disable-next-line no-duplicate-heading --&gt; &#xA;&lt;h3&gt;Shareable configs&lt;/h3&gt; &#xA;&lt;p&gt;There&#39;re also 3 shareable configs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;eslint-plugin-react/configs/all&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eslint-plugin-react/configs/recommended&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eslint-plugin-react/configs/jsx-runtime&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If your eslint.config.js is ESM, include the &lt;code&gt;.js&lt;/code&gt; extension (e.g. &lt;code&gt;eslint-plugin-react/recommended.js&lt;/code&gt;). Note that the next semver-major will require omitting the extension for these imports.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These configurations will import &lt;code&gt;eslint-plugin-react&lt;/code&gt; and enable JSX in &lt;a href=&#34;https://eslint.org/docs/latest/user-guide/configuring/configuration-files-new#configuration-objects&#34;&gt;&lt;code&gt;languageOptions.parserOptions&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the new config system, &lt;code&gt;plugin:&lt;/code&gt; protocol(e.g. &lt;code&gt;plugin:react/recommended&lt;/code&gt;) is no longer valid. As eslint does not automatically import the preset config (shareable config), you explicitly do it by yourself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const reactRecommended = require(&#39;eslint-plugin-react/configs/recommended&#39;);&#xA;&#xA;module.exports = [&#xA;  …&#xA;  reactRecommended, // This is not a plugin object, but a shareable config object&#xA;  …&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can of course add/override some properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Our shareable configs does not preconfigure &lt;code&gt;files&lt;/code&gt; or &lt;a href=&#34;https://eslint.org/docs/latest/user-guide/configuring/configuration-files-new#configuration-objects&#34;&gt;&lt;code&gt;languageOptions.globals&lt;/code&gt;&lt;/a&gt;. For most of the cases, you probably want to configure some properties by yourself.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const reactRecommended = require(&#39;eslint-plugin-react/configs/recommended&#39;);&#xA;const globals = require(&#39;globals&#39;);&#xA;&#xA;module.exports = [&#xA;  …&#xA;  {&#xA;    files: [&#39;**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}&#39;],&#xA;    ...reactRecommended,&#xA;    languageOptions: {&#xA;      ...reactRecommended.languageOptions,&#xA;      globals: {&#xA;        ...globals.serviceworker,&#xA;        ...globals.browser;&#xA;      },&#xA;    },&#xA;  },&#xA;  …&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above example is same as the example below, as the new config system is based on chaining.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const reactRecommended = require(&#39;eslint-plugin-react/configs/recommended&#39;);&#xA;const globals = require(&#39;globals&#39;);&#xA;&#xA;module.exports = [&#xA;  …&#xA;  {&#xA;    files: [&#39;**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}&#39;],&#xA;    ...reactRecommended,&#xA;  },&#xA;  {&#xA;    files: [&#39;**/*.{js,mjs,cjs,jsx,mjsx,ts,tsx,mtsx}&#39;],&#xA;    languageOptions: {&#xA;      globals: {&#xA;        ...globals.serviceworker,&#xA;        ...globals.browser,&#xA;      },&#xA;    },&#xA;  },&#xA;  …&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List of supported rules&lt;/h2&gt; &#xA;&lt;p&gt;✔: Enabled in the &lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/#recommended&#34;&gt;&lt;code&gt;recommended&lt;/code&gt;&lt;/a&gt; configuration.&lt;br&gt; 🔧: Fixable with &lt;a href=&#34;https://eslint.org/docs/user-guide/command-line-interface#fixing-problems&#34;&gt;&lt;code&gt;eslint --fix&lt;/code&gt;&lt;/a&gt;.&lt;br&gt; 💡: Provides editor &lt;a href=&#34;https://eslint.org/docs/developer-guide/working-with-rules#providing-suggestions&#34;&gt;suggestions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:START (BASIC_RULES) --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;✔&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;🔧&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;💡&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rule&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/boolean-prop-naming.md&#34;&gt;react/boolean-prop-naming&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforces consistent naming for boolean props&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/button-has-type.md&#34;&gt;react/button-has-type&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of &lt;code&gt;button&lt;/code&gt; elements without an explicit &lt;code&gt;type&lt;/code&gt; attribute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/default-props-match-prop-types.md&#34;&gt;react/default-props-match-prop-types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce all defaultProps have a corresponding non-required PropType&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/destructuring-assignment.md&#34;&gt;react/destructuring-assignment&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce consistent usage of destructuring assignment of props, state, and context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/display-name.md&#34;&gt;react/display-name&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow missing displayName in a React component definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/forbid-component-props.md&#34;&gt;react/forbid-component-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow certain props on components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/forbid-dom-props.md&#34;&gt;react/forbid-dom-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow certain props on DOM Nodes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/forbid-elements.md&#34;&gt;react/forbid-elements&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow certain elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/forbid-foreign-prop-types.md&#34;&gt;react/forbid-foreign-prop-types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow using another component&#39;s propTypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/forbid-prop-types.md&#34;&gt;react/forbid-prop-types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow certain propTypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/function-component-definition.md&#34;&gt;react/function-component-definition&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce a specific function type for function components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;💡&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/hook-use-state.md&#34;&gt;react/hook-use-state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure destructuring and symmetric naming of useState hook value and setter variables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/iframe-missing-sandbox.md&#34;&gt;react/iframe-missing-sandbox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce sandbox attribute on iframe elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-access-state-in-setstate.md&#34;&gt;react/no-access-state-in-setstate&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow when this.state is accessed within setState&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-adjacent-inline-elements.md&#34;&gt;react/no-adjacent-inline-elements&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow adjacent inline elements not separated by whitespace.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-array-index-key.md&#34;&gt;react/no-array-index-key&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of Array index in keys&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-arrow-function-lifecycle.md&#34;&gt;react/no-arrow-function-lifecycle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Lifecycle methods should be methods on the prototype, not class fields&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-children-prop.md&#34;&gt;react/no-children-prop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow passing of children as props&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-danger.md&#34;&gt;react/no-danger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of dangerous JSX properties&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-danger-with-children.md&#34;&gt;react/no-danger-with-children&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow when a DOM element is using both children and dangerouslySetInnerHTML&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-deprecated.md&#34;&gt;react/no-deprecated&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of deprecated methods&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-did-mount-set-state.md&#34;&gt;react/no-did-mount-set-state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of setState in componentDidMount&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-did-update-set-state.md&#34;&gt;react/no-did-update-set-state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of setState in componentDidUpdate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-direct-mutation-state.md&#34;&gt;react/no-direct-mutation-state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow direct mutation of this.state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-find-dom-node.md&#34;&gt;react/no-find-dom-node&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of findDOMNode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-invalid-html-attribute.md&#34;&gt;react/no-invalid-html-attribute&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of invalid attributes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-is-mounted.md&#34;&gt;react/no-is-mounted&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of isMounted&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-multi-comp.md&#34;&gt;react/no-multi-comp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow multiple component definition per file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-namespace.md&#34;&gt;react/no-namespace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce that namespaces are not used in React elements&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-redundant-should-component-update.md&#34;&gt;react/no-redundant-should-component-update&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of shouldComponentUpdate when extending React.PureComponent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-render-return-value.md&#34;&gt;react/no-render-return-value&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of the return value of ReactDOM.render&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-set-state.md&#34;&gt;react/no-set-state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of setState&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-string-refs.md&#34;&gt;react/no-string-refs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow using string references&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-this-in-sfc.md&#34;&gt;react/no-this-in-sfc&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow &lt;code&gt;this&lt;/code&gt; from being used in stateless functional components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-typos.md&#34;&gt;react/no-typos&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow common typos&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-unescaped-entities.md&#34;&gt;react/no-unescaped-entities&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow unescaped HTML entities from appearing in markup&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-unknown-property.md&#34;&gt;react/no-unknown-property&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of unknown DOM property&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-unsafe.md&#34;&gt;react/no-unsafe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of unsafe lifecycle methods&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-unstable-nested-components.md&#34;&gt;react/no-unstable-nested-components&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow creating unstable components inside components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-unused-class-component-methods.md&#34;&gt;react/no-unused-class-component-methods&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow declaring unused methods of component class&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-unused-prop-types.md&#34;&gt;react/no-unused-prop-types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow definitions of unused propTypes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-unused-state.md&#34;&gt;react/no-unused-state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow definitions of unused state&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/no-will-update-set-state.md&#34;&gt;react/no-will-update-set-state&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of setState in componentWillUpdate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/prefer-es6-class.md&#34;&gt;react/prefer-es6-class&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce ES5 or ES6 class for React Components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/prefer-exact-props.md&#34;&gt;react/prefer-exact-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prefer exact proptype definitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/prefer-read-only-props.md&#34;&gt;react/prefer-read-only-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce that props are read-only&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/prefer-stateless-function.md&#34;&gt;react/prefer-stateless-function&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce stateless components to be written as a pure function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/prop-types.md&#34;&gt;react/prop-types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow missing props validation in a React component definition&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/react-in-jsx-scope.md&#34;&gt;react/react-in-jsx-scope&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow missing React when using JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/require-default-props.md&#34;&gt;react/require-default-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce a defaultProps definition for every prop that is not a required prop&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/require-optimization.md&#34;&gt;react/require-optimization&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce React components to have a shouldComponentUpdate method&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/require-render-return.md&#34;&gt;react/require-render-return&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce ES5 or ES6 class for returning value in render function&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/self-closing-comp.md&#34;&gt;react/self-closing-comp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow extra closing tags for components without children&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/sort-comp.md&#34;&gt;react/sort-comp&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce component methods order&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/sort-default-props.md&#34;&gt;react/sort-default-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce defaultProps declarations alphabetical sorting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/sort-prop-types.md&#34;&gt;react/sort-prop-types&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce propTypes declarations alphabetical sorting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/state-in-constructor.md&#34;&gt;react/state-in-constructor&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce class component state initialization style&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/static-property-placement.md&#34;&gt;react/static-property-placement&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforces where React component static properties should be positioned.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/style-prop-object.md&#34;&gt;react/style-prop-object&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce style prop value is an object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/void-dom-elements-no-children.md&#34;&gt;react/void-dom-elements-no-children&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow void DOM elements (e.g. &lt;code&gt;&amp;lt;img /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;br /&amp;gt;&lt;/code&gt;) from receiving children&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:END --&gt; &#xA;&lt;h3&gt;JSX-specific rules&lt;/h3&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:START (JSX_RULES) --&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;✔&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;🔧&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;💡&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rule&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-boolean-value.md&#34;&gt;react/jsx-boolean-value&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce boolean attributes notation in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-child-element-spacing.md&#34;&gt;react/jsx-child-element-spacing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce or disallow spaces inside of curly braces in JSX attributes and expressions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-closing-bracket-location.md&#34;&gt;react/jsx-closing-bracket-location&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce closing bracket location in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-closing-tag-location.md&#34;&gt;react/jsx-closing-tag-location&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce closing tag location for multiline JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-curly-brace-presence.md&#34;&gt;react/jsx-curly-brace-presence&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow unnecessary JSX expressions when literals alone are sufficient or enforce JSX expressions on literals in JSX children or attributes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-curly-newline.md&#34;&gt;react/jsx-curly-newline&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce consistent linebreaks in curly braces in JSX attributes and expressions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-curly-spacing.md&#34;&gt;react/jsx-curly-spacing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce or disallow spaces inside of curly braces in JSX attributes and expressions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-equals-spacing.md&#34;&gt;react/jsx-equals-spacing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce or disallow spaces around equal signs in JSX attributes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-filename-extension.md&#34;&gt;react/jsx-filename-extension&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow file extensions that may contain JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-first-prop-new-line.md&#34;&gt;react/jsx-first-prop-new-line&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce proper position of the first property in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-fragments.md&#34;&gt;react/jsx-fragments&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce shorthand or standard form for React fragments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-handler-names.md&#34;&gt;react/jsx-handler-names&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce event handler naming conventions in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-indent.md&#34;&gt;react/jsx-indent&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce JSX indentation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-indent-props.md&#34;&gt;react/jsx-indent-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce props indentation in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-key.md&#34;&gt;react/jsx-key&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow missing &lt;code&gt;key&lt;/code&gt; props in iterators/collection literals&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-max-depth.md&#34;&gt;react/jsx-max-depth&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce JSX maximum depth&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-max-props-per-line.md&#34;&gt;react/jsx-max-props-per-line&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce maximum of props on a single line in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-newline.md&#34;&gt;react/jsx-newline&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Require or prevent a new line after jsx elements and expressions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-bind.md&#34;&gt;react/jsx-no-bind&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow &lt;code&gt;.bind()&lt;/code&gt; or arrow functions in JSX props&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-comment-textnodes.md&#34;&gt;react/jsx-no-comment-textnodes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow comments from being inserted as text nodes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-constructed-context-values.md&#34;&gt;react/jsx-no-constructed-context-values&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallows JSX context provider values from taking values that will cause needless rerenders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-duplicate-props.md&#34;&gt;react/jsx-no-duplicate-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow duplicate properties in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-leaked-render.md&#34;&gt;react/jsx-no-leaked-render&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow problematic leaked values from being rendered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-literals.md&#34;&gt;react/jsx-no-literals&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of string literals in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-script-url.md&#34;&gt;react/jsx-no-script-url&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow usage of &lt;code&gt;javascript:&lt;/code&gt; URLs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-target-blank.md&#34;&gt;react/jsx-no-target-blank&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow &lt;code&gt;target=&#34;_blank&#34;&lt;/code&gt; attribute without &lt;code&gt;rel=&#34;noreferrer&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-undef.md&#34;&gt;react/jsx-no-undef&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow undeclared variables in JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-no-useless-fragment.md&#34;&gt;react/jsx-no-useless-fragment&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow unnecessary fragments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-one-expression-per-line.md&#34;&gt;react/jsx-one-expression-per-line&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Require one JSX element per line&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-pascal-case.md&#34;&gt;react/jsx-pascal-case&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce PascalCase for user-defined JSX components&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-props-no-multi-spaces.md&#34;&gt;react/jsx-props-no-multi-spaces&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow multiple spaces between inline JSX props&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-props-no-spreading.md&#34;&gt;react/jsx-props-no-spreading&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow JSX prop spreading&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-sort-default-props.md&#34;&gt;react/jsx-sort-default-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce defaultProps declarations alphabetical sorting. ❌ This rule is deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-sort-props.md&#34;&gt;react/jsx-sort-props&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce props alphabetical sorting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-space-before-closing.md&#34;&gt;react/jsx-space-before-closing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce spacing before closing bracket in JSX. ❌ This rule is deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-tag-spacing.md&#34;&gt;react/jsx-tag-spacing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce whitespace in and around the JSX opening and closing brackets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-uses-react.md&#34;&gt;react/jsx-uses-react&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow React to be incorrectly marked as unused&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✔&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-uses-vars.md&#34;&gt;react/jsx-uses-vars&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow variables used in JSX to be incorrectly marked as unused&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/jsx-eslint/eslint-plugin-react/master/docs/rules/jsx-wrap-multilines.md&#34;&gt;react/jsx-wrap-multilines&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Disallow missing parentheses around multiline JSX&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- AUTO-GENERATED-CONTENT:END --&gt; &#xA;&lt;h2&gt;Other useful plugins&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Rules of Hooks: &lt;a href=&#34;https://github.com/facebook/react/tree/master/packages/eslint-plugin-react-hooks&#34;&gt;eslint-plugin-react-hooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;JSX accessibility: &lt;a href=&#34;https://github.com/evcohen/eslint-plugin-jsx-a11y&#34;&gt;eslint-plugin-jsx-a11y&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React Native: &lt;a href=&#34;https://github.com/Intellicode/eslint-plugin-react-native&#34;&gt;eslint-plugin-react-native&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;eslint-plugin-react&lt;/code&gt; is licensed under the &lt;a href=&#34;https://opensource.org/licenses/mit-license.php&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dunwu/nginx-tutorial</title>
    <updated>2022-10-14T01:35:51Z</updated>
    <id>tag:github.com,2022-10-14:/dunwu/nginx-tutorial</id>
    <link href="https://github.com/dunwu/nginx-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;这是一个 Nginx 极简教程，目的在于帮助新手快速入门 Nginx。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nginx 极简教程&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;本项目是一个 Nginx 极简教程，目的在于帮助新手快速入门 Nginx。&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/dunwu/nginx-tutorial/tree/master/examples&#34;&gt;&lt;strong&gt;examples&lt;/strong&gt;&lt;/a&gt; 目录中的示例模拟了工作中的一些常用实战场景，并且都可以通过脚本一键式启动，让您可以快速看到演示效果。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;!-- TOC depthFrom:2 depthTo:3 --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E4%B8%80nginx-%E7%AE%80%E4%BB%8B&#34;&gt;一、Nginx 简介&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E4%BA%8Cnginx-%E5%85%A5%E9%97%A8&#34;&gt;二、Nginx 入门&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E4%B8%89nginx-%E5%AE%9E%E6%88%98&#34;&gt;三、Nginx 实战&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#http-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86&#34;&gt;Http 反向代理&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#https-%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86&#34;&gt;Https 反向代理&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1&#34;&gt;负载均衡&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E7%BD%91%E7%AB%99%E6%9C%89%E5%A4%9A%E4%B8%AA-webapp-%E7%9A%84%E9%85%8D%E7%BD%AE&#34;&gt;网站有多个 webapp 的配置&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E9%9D%99%E6%80%81%E7%AB%99%E7%82%B9&#34;&gt;静态站点&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E6%90%AD%E5%BB%BA%E6%96%87%E4%BB%B6%E6%9C%8D%E5%8A%A1%E5%99%A8&#34;&gt;搭建文件服务器&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F&#34;&gt;解决跨域&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/#%E8%B5%84%E6%BA%90&#34;&gt;资源&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;一、Nginx 简介&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;什么是 Nginx?&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Nginx (engine x)&lt;/strong&gt; 是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dunwu/images/dev/cs/web/nginx/nginx.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;什么是反向代理？&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;反向代理（Reverse Proxy）方式是指以代理服务器来接受 internet 上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给 internet 上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dunwu/images/dev/cs/web/nginx/reverse-proxy.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;二、Nginx 入门&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;详细安装方法请参考：&lt;a href=&#34;https://raw.githubusercontent.com/dunwu/nginx-tutorial/master/docs/nginx-ops.md&#34;&gt;Nginx 运维&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;nginx 的使用比较简单，就是几条命令。&lt;/p&gt; &#xA;&lt;p&gt;常用到的命令如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;nginx -s stop       快速关闭Nginx，可能不保存相关信息，并迅速终止web服务。&#xA;nginx -s quit       平稳关闭Nginx，保存相关信息，有安排的结束web服务。&#xA;nginx -s reload     因改变了Nginx相关配置，需要重新加载配置而重载。&#xA;nginx -s reopen     重新打开日志文件。&#xA;nginx -c filename   为 Nginx 指定一个配置文件，来代替缺省的。&#xA;nginx -t            不运行，仅仅测试配置文件。nginx 将检查配置文件的语法的正确性，并尝试打开配置文件中所引用到的文件。&#xA;nginx -v            显示 nginx 的版本。&#xA;nginx -V            显示 nginx 的版本，编译器版本和配置参数。&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果不想每次都敲命令，可以在 nginx 安装目录下新添一个启动批处理文件&lt;strong&gt;startup.bat&lt;/strong&gt;，双击即可运行。内容如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;@echo off&#xA;rem 如果启动前已经启动nginx并记录下pid文件，会kill指定进程&#xA;nginx.exe -s stop&#xA;&#xA;rem 测试配置文件语法正确性&#xA;nginx.exe -t -c conf/nginx.conf&#xA;&#xA;rem 显示版本信息&#xA;nginx.exe -v&#xA;&#xA;rem 按照指定配置去启动nginx&#xA;nginx.exe -c conf/nginx.conf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果是运行在 Linux 下，写一个 shell 脚本，大同小异。&lt;/p&gt; &#xA;&lt;h2&gt;三、Nginx 实战&lt;/h2&gt; &#xA;&lt;p&gt;我始终认为，各种开发工具的配置还是结合实战来讲述，会让人更易理解。&lt;/p&gt; &#xA;&lt;h3&gt;Http 反向代理&lt;/h3&gt; &#xA;&lt;p&gt;我们先实现一个小目标：不考虑复杂的配置，仅仅是完成一个 http 反向代理。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nginx.conf&lt;/code&gt; 配置文件如下：&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;em&gt;注：&lt;code&gt;conf/nginx.conf&lt;/code&gt; 是 nginx 的默认配置文件。你也可以使用 nginx -c 指定你的配置文件&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;#运行用户&#xA;#user somebody;&#xA;&#xA;#启动进程,通常设置成和cpu的数量相等&#xA;worker_processes  1;&#xA;&#xA;#全局错误日志&#xA;error_log  D:/Tools/nginx-1.10.1/logs/error.log;&#xA;error_log  D:/Tools/nginx-1.10.1/logs/notice.log  notice;&#xA;error_log  D:/Tools/nginx-1.10.1/logs/info.log  info;&#xA;&#xA;#PID文件，记录当前启动的nginx的进程ID&#xA;pid        D:/Tools/nginx-1.10.1/logs/nginx.pid;&#xA;&#xA;#工作模式及连接数上限&#xA;events {&#xA;    worker_connections 1024;    #单个后台worker process进程的最大并发链接数&#xA;}&#xA;&#xA;#设定http服务器，利用它的反向代理功能提供负载均衡支持&#xA;http {&#xA;    #设定mime类型(邮件支持类型),类型由mime.types文件定义&#xA;    include       D:/Tools/nginx-1.10.1/conf/mime.types;&#xA;    default_type  application/octet-stream;&#xA;&#xA;    #设定日志&#xA;&#x9;log_format  main  &#39;[$remote_addr] - [$remote_user] [$time_local] &#34;$request&#34; &#39;&#xA;                      &#39;$status $body_bytes_sent &#34;$http_referer&#34; &#39;&#xA;                      &#39;&#34;$http_user_agent&#34; &#34;$http_x_forwarded_for&#34;&#39;;&#xA;&#xA;    access_log    D:/Tools/nginx-1.10.1/logs/access.log main;&#xA;    rewrite_log     on;&#xA;&#xA;    #sendfile 指令指定 nginx 是否调用 sendfile 函数（zero copy 方式）来输出文件，对于普通应用，&#xA;    #必须设为 on,如果用来进行下载等应用磁盘IO重负载应用，可设置为 off，以平衡磁盘与网络I/O处理速度，降低系统的uptime.&#xA;    sendfile        on;&#xA;    #tcp_nopush     on;&#xA;&#xA;    #连接超时时间&#xA;    keepalive_timeout  120;&#xA;    tcp_nodelay        on;&#xA;&#xA;&#x9;#gzip压缩开关&#xA;&#x9;#gzip  on;&#xA;&#xA;    #设定实际的服务器列表&#xA;    upstream zp_server1{&#xA;        server 127.0.0.1:8089;&#xA;    }&#xA;&#xA;    #HTTP服务器&#xA;    server {&#xA;        #监听80端口，80端口是知名端口号，用于HTTP协议&#xA;        listen       80;&#xA;&#xA;        #定义使用www.xx.com访问&#xA;        server_name  www.helloworld.com;&#xA;&#xA;&#x9;&#x9;#首页&#xA;&#x9;&#x9;index index.html&#xA;&#xA;&#x9;&#x9;#指向webapp的目录&#xA;&#x9;&#x9;root D:\01_Workspace\Project\github\zp\SpringNotes\spring-security\spring-shiro\src\main\webapp;&#xA;&#xA;&#x9;&#x9;#编码格式&#xA;&#x9;&#x9;charset utf-8;&#xA;&#xA;&#x9;&#x9;#代理配置参数&#xA;        proxy_connect_timeout 180;&#xA;        proxy_send_timeout 180;&#xA;        proxy_read_timeout 180;&#xA;        proxy_set_header Host $host;&#xA;        proxy_set_header X-Forwarder-For $remote_addr;&#xA;&#xA;        #反向代理的路径（和upstream绑定），location 后面设置映射的路径&#xA;        location / {&#xA;            proxy_pass http://zp_server1;&#xA;        }&#xA;&#xA;        #静态文件，nginx自己处理&#xA;        location ~ ^/(images|javascript|js|css|flash|media|static)/ {&#xA;            root D:\01_Workspace\Project\github\zp\SpringNotes\spring-security\spring-shiro\src\main\webapp\views;&#xA;            #过期30天，静态文件不怎么更新，过期可以设大一点，如果频繁更新，则可以设置得小一点。&#xA;            expires 30d;&#xA;        }&#xA;&#xA;        #设定查看Nginx状态的地址&#xA;        location /NginxStatus {&#xA;            stub_status           on;&#xA;            access_log            on;&#xA;            auth_basic            &#34;NginxStatus&#34;;&#xA;            auth_basic_user_file  conf/htpasswd;&#xA;        }&#xA;&#xA;        #禁止访问 .htxxx 文件&#xA;        location ~ /\.ht {&#xA;            deny all;&#xA;        }&#xA;&#xA;&#x9;&#x9;#错误处理页面（可选择性配置）&#xA;&#x9;&#x9;#error_page   404              /404.html;&#xA;&#x9;&#x9;#error_page   500 502 503 504  /50x.html;&#xA;        #location = /50x.html {&#xA;        #    root   html;&#xA;        #}&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;好了，让我们来试试吧：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;启动 webapp，注意启动绑定的端口要和 nginx 中的 &lt;code&gt;upstream&lt;/code&gt; 设置的端口保持一致。&lt;/li&gt; &#xA; &lt;li&gt;更改 host：在 C:\Windows\System32\drivers\etc 目录下的 host 文件中添加一条 DNS 记录&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;127.0.0.1 www.helloworld.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;启动前文中 startup.bat 的命令&lt;/li&gt; &#xA; &lt;li&gt;在浏览器中访问 &lt;a href=&#34;http://www.helloworld.com%EF%BC%8C%E4%B8%8D%E5%87%BA%E6%84%8F%E5%A4%96%EF%BC%8C%E5%B7%B2%E7%BB%8F%E5%8F%AF%E4%BB%A5%E8%AE%BF%E9%97%AE%E4%BA%86%E3%80%82&#34;&gt;www.helloworld.com，不出意外，已经可以访问了。&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Https 反向代理&lt;/h3&gt; &#xA;&lt;p&gt;一些对安全性要求比较高的站点，可能会使用 HTTPS（一种使用 ssl 通信标准的安全 HTTP 协议）。&lt;/p&gt; &#xA;&lt;p&gt;这里不科普 HTTP 协议和 SSL 标准。但是，使用 nginx 配置 https 需要知道几点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;HTTPS 的固定端口号是 443，不同于 HTTP 的 80 端口&lt;/li&gt; &#xA; &lt;li&gt;SSL 标准需要引入安全证书，所以在 nginx.conf 中你需要指定证书和它对应的 key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;其他和 http 反向代理基本一样，只是在 &lt;code&gt;Server&lt;/code&gt; 部分配置有些不同。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;  #HTTP服务器&#xA;  server {&#xA;      #监听443端口。443为知名端口号，主要用于HTTPS协议&#xA;      listen       443 ssl;&#xA;&#xA;      #定义使用www.xx.com访问&#xA;      server_name  www.helloworld.com;&#xA;&#xA;      #ssl证书文件位置(常见证书文件格式为：crt/pem)&#xA;      ssl_certificate      cert.pem;&#xA;      #ssl证书key位置&#xA;      ssl_certificate_key  cert.key;&#xA;&#xA;      #ssl配置参数（选择性配置）&#xA;      ssl_session_cache    shared:SSL:1m;&#xA;      ssl_session_timeout  5m;&#xA;      #数字签名，此处使用MD5&#xA;      ssl_ciphers  HIGH:!aNULL:!MD5;&#xA;      ssl_prefer_server_ciphers  on;&#xA;&#xA;      location / {&#xA;          root   /root;&#xA;          index  index.html index.htm;&#xA;      }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;负载均衡&lt;/h3&gt; &#xA;&lt;p&gt;前面的例子中，代理仅仅指向一个服务器。&lt;/p&gt; &#xA;&lt;p&gt;但是，网站在实际运营过程中，大部分都是以集群的方式运行，这时需要使用负载均衡来分流。&lt;/p&gt; &#xA;&lt;p&gt;nginx 也可以实现简单的负载均衡功能。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/dunwu/images/dev/cs/web/nginx/nginx-load-balance.png&#34; alt=&#34;img&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;假设这样一个应用场景：将应用部署在 192.168.1.11:80、192.168.1.12:80、192.168.1.13:80 三台 linux 环境的服务器上。网站域名叫 &lt;a href=&#34;http://www.helloworld.com%EF%BC%8C%E5%85%AC%E7%BD%91&#34;&gt;www.helloworld.com，公网&lt;/a&gt; IP 为 192.168.1.11。在公网 IP 所在的服务器上部署 nginx，对所有请求做负载均衡处理（下面例子中使用的是加权轮询策略）。&lt;/p&gt; &#xA;&lt;p&gt;nginx.conf 配置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;http {&#xA;     #设定mime类型,类型由mime.type文件定义&#xA;    include       /etc/nginx/mime.types;&#xA;    default_type  application/octet-stream;&#xA;    #设定日志格式&#xA;    access_log    /var/log/nginx/access.log;&#xA;&#xA;    #设定负载均衡的服务器列表&#xA;    upstream load_balance_server {&#xA;        #weigth参数表示权值，权值越高被分配到的几率越大&#xA;        server 192.168.1.11:80   weight=5;&#xA;        server 192.168.1.12:80   weight=1;&#xA;        server 192.168.1.13:80   weight=6;&#xA;    }&#xA;&#xA;   #HTTP服务器&#xA;   server {&#xA;        #侦听80端口&#xA;        listen       80;&#xA;&#xA;        #定义使用www.xx.com访问&#xA;        server_name  www.helloworld.com;&#xA;&#xA;        #对所有请求进行负载均衡请求&#xA;        location / {&#xA;            root        /root;                 #定义服务器的默认网站根目录位置&#xA;            index       index.html index.htm;  #定义首页索引文件的名称&#xA;            proxy_pass  http://load_balance_server ;#请求转向load_balance_server 定义的服务器列表&#xA;&#xA;            #以下是一些反向代理的配置(可选择性配置)&#xA;            #proxy_redirect off;&#xA;            proxy_set_header Host $host;&#xA;            proxy_set_header X-Real-IP $remote_addr;&#xA;            #后端的Web服务器可以通过X-Forwarded-For获取用户真实IP&#xA;            proxy_set_header X-Forwarded-For $remote_addr;&#xA;            proxy_connect_timeout 90;          #nginx跟后端服务器连接超时时间(代理连接超时)&#xA;            proxy_send_timeout 90;             #后端服务器数据回传时间(代理发送超时)&#xA;            proxy_read_timeout 90;             #连接成功后，后端服务器响应时间(代理接收超时)&#xA;            proxy_buffer_size 4k;              #设置代理服务器（nginx）保存用户头信息的缓冲区大小&#xA;            proxy_buffers 4 32k;               #proxy_buffers缓冲区，网页平均在32k以下的话，这样设置&#xA;            proxy_busy_buffers_size 64k;       #高负荷下缓冲大小（proxy_buffers*2）&#xA;            proxy_temp_file_write_size 64k;    #设定缓存文件夹大小，大于这个值，将从upstream服务器传&#xA;&#xA;            client_max_body_size 10m;          #允许客户端请求的最大单文件字节数&#xA;            client_body_buffer_size 128k;      #缓冲区代理缓冲用户端请求的最大字节数&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;负载均衡策略&lt;/h4&gt; &#xA;&lt;p&gt;Nginx 提供了多种负载均衡策略，让我们来一一了解一下：&lt;/p&gt; &#xA;&lt;p&gt;负载均衡策略在各种分布式系统中基本上原理一致，对于原理有兴趣，不妨参考 &lt;a href=&#34;https://dunwu.github.io/blog/design/theory/load-balance-theory/&#34;&gt;负载均衡&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;轮询&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream bck_testing_01 {&#xA;  # 默认所有服务器权重为 1&#xA;  server 192.168.250.220:8080&#xA;  server 192.168.250.221:8080&#xA;  server 192.168.250.222:8080&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;加权轮询&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream bck_testing_01 {&#xA;  server 192.168.250.220:8080   weight=3&#xA;  server 192.168.250.221:8080              # default weight=1&#xA;  server 192.168.250.222:8080              # default weight=1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;最少连接&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream bck_testing_01 {&#xA;  least_conn;&#xA;&#xA;  # with default weight for all (weight=1)&#xA;  server 192.168.250.220:8080&#xA;  server 192.168.250.221:8080&#xA;  server 192.168.250.222:8080&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;加权最少连接&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream bck_testing_01 {&#xA;  least_conn;&#xA;&#xA;  server 192.168.250.220:8080   weight=3&#xA;  server 192.168.250.221:8080              # default weight=1&#xA;  server 192.168.250.222:8080              # default weight=1&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;IP Hash&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream bck_testing_01 {&#xA;&#xA;  ip_hash;&#xA;&#xA;  # with default weight for all (weight=1)&#xA;  server 192.168.250.220:8080&#xA;  server 192.168.250.221:8080&#xA;  server 192.168.250.222:8080&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;普通 Hash&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;upstream bck_testing_01 {&#xA;&#xA;  hash $request_uri;&#xA;&#xA;  # with default weight for all (weight=1)&#xA;  server 192.168.250.220:8080&#xA;  server 192.168.250.221:8080&#xA;  server 192.168.250.222:8080&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;网站有多个 webapp 的配置&lt;/h3&gt; &#xA;&lt;p&gt;当一个网站功能越来越丰富时，往往需要将一些功能相对独立的模块剥离出来，独立维护。这样的话，通常，会有多个 webapp。&lt;/p&gt; &#xA;&lt;p&gt;举个例子：假如 &lt;a href=&#34;http://www.helloworld.com&#34;&gt;www.helloworld.com&lt;/a&gt; 站点有好几个 webapp，finance（金融）、product（产品）、admin（用户中心）。访问这些应用的方式通过上下文(context)来进行区分:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.helloworld.com/finance/&#34;&gt;www.helloworld.com/finance/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.helloworld.com/product/&#34;&gt;www.helloworld.com/product/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.helloworld.com/admin/&#34;&gt;www.helloworld.com/admin/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;我们知道，http 的默认端口号是 80，如果在一台服务器上同时启动这 3 个 webapp 应用，都用 80 端口，肯定是不成的。所以，这三个应用需要分别绑定不同的端口号。&lt;/p&gt; &#xA;&lt;p&gt;那么，问题来了，用户在实际访问 &lt;a href=&#34;http://www.helloworld.com&#34;&gt;www.helloworld.com&lt;/a&gt; 站点时，访问不同 webapp，总不会还带着对应的端口号去访问吧。所以，你再次需要用到反向代理来做处理。&lt;/p&gt; &#xA;&lt;p&gt;配置也不难，来看看怎么做吧：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;http {&#xA;&#x9;#此处省略一些基本配置&#xA;&#xA;&#x9;upstream product_server{&#xA;&#x9;&#x9;server www.helloworld.com:8081;&#xA;&#x9;}&#xA;&#xA;&#x9;upstream admin_server{&#xA;&#x9;&#x9;server www.helloworld.com:8082;&#xA;&#x9;}&#xA;&#xA;&#x9;upstream finance_server{&#xA;&#x9;&#x9;server www.helloworld.com:8083;&#xA;&#x9;}&#xA;&#xA;&#x9;server {&#xA;&#x9;&#x9;#此处省略一些基本配置&#xA;&#x9;&#x9;#默认指向product的server&#xA;&#x9;&#x9;location / {&#xA;&#x9;&#x9;&#x9;proxy_pass http://product_server;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;location /product/{&#xA;&#x9;&#x9;&#x9;proxy_pass http://product_server;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;location /admin/ {&#xA;&#x9;&#x9;&#x9;proxy_pass http://admin_server;&#xA;&#x9;&#x9;}&#xA;&#xA;&#x9;&#x9;location /finance/ {&#xA;&#x9;&#x9;&#x9;proxy_pass http://finance_server;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;静态站点&lt;/h3&gt; &#xA;&lt;p&gt;有时候，我们需要配置静态站点(即 html 文件和一堆静态资源)。&lt;/p&gt; &#xA;&lt;p&gt;举例来说：如果所有的静态资源都放在了 &lt;code&gt;/app/dist&lt;/code&gt; 目录下，我们只需要在 &lt;code&gt;nginx.conf&lt;/code&gt; 中指定首页以及这个站点的 host 即可。&lt;/p&gt; &#xA;&lt;p&gt;配置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;worker_processes  1;&#xA;&#xA;events {&#xA;&#x9;worker_connections  1024;&#xA;}&#xA;&#xA;http {&#xA;    include       mime.types;&#xA;    default_type  application/octet-stream;&#xA;    sendfile        on;&#xA;    keepalive_timeout  65;&#xA;&#xA;    gzip on;&#xA;    gzip_types text/plain application/x-javascript text/css application/xml text/javascript application/javascript image/jpeg image/gif image/png;&#xA;    gzip_vary on;&#xA;&#xA;    server {&#xA;&#x9;&#x9;listen       80;&#xA;&#x9;&#x9;server_name  static.zp.cn;&#xA;&#xA;&#x9;&#x9;location / {&#xA;&#x9;&#x9;&#x9;root /app/dist;&#xA;&#x9;&#x9;&#x9;index index.html;&#xA;&#x9;&#x9;&#x9;#转发任何请求到 index.html&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后，添加 HOST：&lt;/p&gt; &#xA;&lt;p&gt;127.0.0.1 static.zp.cn&lt;/p&gt; &#xA;&lt;p&gt;此时，在本地浏览器访问 static.zp.cn ，就可以访问静态站点了。&lt;/p&gt; &#xA;&lt;h3&gt;搭建文件服务器&lt;/h3&gt; &#xA;&lt;p&gt;有时候，团队需要归档一些数据或资料，那么文件服务器必不可少。使用 Nginx 可以非常快速便捷的搭建一个简易的文件服务。&lt;/p&gt; &#xA;&lt;p&gt;Nginx 中的配置要点：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;将 autoindex 开启可以显示目录，默认不开启。&lt;/li&gt; &#xA; &lt;li&gt;将 autoindex_exact_size 开启可以显示文件的大小。&lt;/li&gt; &#xA; &lt;li&gt;将 autoindex_localtime 开启可以显示文件的修改时间。&lt;/li&gt; &#xA; &lt;li&gt;root 用来设置开放为文件服务的根路径。&lt;/li&gt; &#xA; &lt;li&gt;charset 设置为 &lt;code&gt;charset utf-8,gbk;&lt;/code&gt;，可以避免中文乱码问题（windows 服务器下设置后，依然乱码，本人暂时没有找到解决方法）。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;一个最简化的配置如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;autoindex on;# 显示目录&#xA;autoindex_exact_size on;# 显示文件大小&#xA;autoindex_localtime on;# 显示文件时间&#xA;&#xA;server {&#xA;    charset      utf-8,gbk; # windows 服务器下设置后，依然乱码，暂时无解&#xA;    listen       9050 default_server;&#xA;    listen       [::]:9050 default_server;&#xA;    server_name  _;&#xA;    root         /share/fs;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;解决跨域&lt;/h3&gt; &#xA;&lt;p&gt;web 领域开发中，经常采用前后端分离模式。这种模式下，前端和后端分别是独立的 web 应用程序，例如：后端是 Java 程序，前端是 React 或 Vue 应用。&lt;/p&gt; &#xA;&lt;p&gt;各自独立的 web app 在互相访问时，势必存在跨域问题。解决跨域问题一般有两种思路：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;CORS&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;在后端服务器设置 HTTP 响应头，把你需要允许访问的域名加入 &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; 中。&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;jsonp&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;把后端根据请求，构造 json 数据，并返回，前端用 jsonp 跨域。&lt;/p&gt; &#xA;&lt;p&gt;这两种思路，本文不展开讨论。&lt;/p&gt; &#xA;&lt;p&gt;需要说明的是，nginx 根据第一种思路，也提供了一种解决跨域的解决方案。&lt;/p&gt; &#xA;&lt;p&gt;举例：www.helloworld.com 网站是由一个前端 app ，一个后端 app 组成的。前端端口号为 9000， 后端端口号为 8080。&lt;/p&gt; &#xA;&lt;p&gt;前端和后端如果使用 http 进行交互时，请求会被拒绝，因为存在跨域问题。来看看，nginx 是怎么解决的吧：&lt;/p&gt; &#xA;&lt;p&gt;首先，在 enable-cors.conf 文件中设置 cors ：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;# allow origin list&#xA;set $ACAO &#39;*&#39;;&#xA;&#xA;# set single origin&#xA;if ($http_origin ~* (www.helloworld.com)$) {&#xA;  set $ACAO $http_origin;&#xA;}&#xA;&#xA;if ($cors = &#34;trueget&#34;) {&#xA;&#x9;add_header &#39;Access-Control-Allow-Origin&#39; &#34;$http_origin&#34;;&#xA;&#x9;add_header &#39;Access-Control-Allow-Credentials&#39; &#39;true&#39;;&#xA;&#x9;add_header &#39;Access-Control-Allow-Methods&#39; &#39;GET, POST, OPTIONS&#39;;&#xA;&#x9;add_header &#39;Access-Control-Allow-Headers&#39; &#39;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type&#39;;&#xA;}&#xA;&#xA;if ($request_method = &#39;OPTIONS&#39;) {&#xA;  set $cors &#34;${cors}options&#34;;&#xA;}&#xA;&#xA;if ($request_method = &#39;GET&#39;) {&#xA;  set $cors &#34;${cors}get&#34;;&#xA;}&#xA;&#xA;if ($request_method = &#39;POST&#39;) {&#xA;  set $cors &#34;${cors}post&#34;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;接下来，在你的服务器中 &lt;code&gt;include enable-cors.conf&lt;/code&gt; 来引入跨域配置：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;# ----------------------------------------------------&#xA;# 此文件为项目 nginx 配置片段&#xA;# 可以直接在 nginx config 中 include（推荐）&#xA;# 或者 copy 到现有 nginx 中，自行配置&#xA;# www.helloworld.com 域名需配合 dns hosts 进行配置&#xA;# 其中，api 开启了 cors，需配合本目录下另一份配置文件&#xA;# ----------------------------------------------------&#xA;upstream front_server{&#xA;  server www.helloworld.com:9000;&#xA;}&#xA;upstream api_server{&#xA;  server www.helloworld.com:8080;&#xA;}&#xA;&#xA;server {&#xA;  listen       80;&#xA;  server_name  www.helloworld.com;&#xA;&#xA;  location ~ ^/api/ {&#xA;    include enable-cors.conf;&#xA;    proxy_pass http://api_server;&#xA;    rewrite &#34;^/api/(.*)$&#34; /$1 break;&#xA;  }&#xA;&#xA;  location ~ ^/ {&#xA;    proxy_pass http://front_server;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;到此，就完成了。&lt;/p&gt; &#xA;&lt;h2&gt;资源&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tool.oschina.net/apidocs/apidoc?api=nginx-zh&#34;&gt;Nginx 的中文维基&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://tengine.taobao.org/book/index.html&#34;&gt;Nginx 开发从入门到精通&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/trimstray/nginx-admins-handbook&#34;&gt;nginx-admins-handbook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nginxconfig.io/&#34;&gt;nginxconfig.io&lt;/a&gt; - 一款 Nginx 配置生成器&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learning-zone/nodejs-interview-questions</title>
    <updated>2022-10-14T01:35:51Z</updated>
    <id>tag:github.com,2022-10-14:/learning-zone/nodejs-interview-questions</id>
    <link href="https://github.com/learning-zone/nodejs-interview-questions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js Interview Questions ( v16.x )&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Interview Questions&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Click &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/star.png&#34; width=&#34;18&#34; height=&#34;18&#34; align=&#34;absmiddle&#34; title=&#34;Star&#34;&gt; if you like the project. Your contributions are heartily ♡ welcome.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Related Interview Questions&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/learning-zone/html-interview-questions&#34;&gt;HTML5 Interview Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/learning-zone/css-interview-questions&#34;&gt;CSS Interview Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/learning-zone/javascript-interview-questions&#34;&gt;JavaScript Interview Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/learning-zone/sql-interview-questions&#34;&gt;SQL Interview Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/learning-zone/mongodb-interview-questions&#34;&gt;MongoDB Interview Questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-api.md&#34;&gt;Node.js APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-programming.md&#34;&gt;Node.js Coding Practice&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/nodejs-commands.md&#34;&gt;Node.js Commands&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-1-introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-2-nodejs-setup&#34;&gt;Node.js Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-3-nodejs-data-types&#34;&gt;Node.js Data Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-4-nodejs-architecture&#34;&gt;Node.js Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-5-nodejs-events&#34;&gt;Node.js Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-6-nodejs-file-system&#34;&gt;Node.js File System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-7-nodejs-streams&#34;&gt;Node.js Streams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-8-nodejs-multithreading&#34;&gt;Node.js Multithreading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-9-nodejs-web-module&#34;&gt;Node.js Web Module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-10-nodejs-middleware&#34;&gt;Node.js Middleware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-11-nodejs-restful-api&#34;&gt;Node.js RESTFul API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-12-nodejs-routing&#34;&gt;Node.js Routing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-13-nodejs-caching&#34;&gt;Node.js Caching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-14-nodejs-error-handling&#34;&gt;Node.js Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-15-nodejs-logging&#34;&gt;Node.js Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-16-nodejs-internationalization&#34;&gt;Node.js Internationalization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-17-nodejs-testing&#34;&gt;Node.js Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#-18-nodejs-miscellaneous&#34;&gt;Node.js Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;# 1. INTRODUCTION&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is an open-source server side runtime environment built on Chrome&#39;s V8 JavaScript engine. It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is Node.js Process Model?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js runs in a single process and the application code runs in a single thread and thereby needs less resources than other platforms.&lt;/p&gt; &#xA;&lt;p&gt;All the user requests to your web application will be handled by a single thread and all the I/O work or long running job is performed asynchronously for a particular request. So, this single thread doesn&#39;t have to wait for the request to complete and is free to handle the next request. When asynchronous I/O work completes then it processes the request further and sends the response.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the key features of Node.js?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Asynchronous and Event driven&lt;/strong&gt; – All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. Thus it will not wait for the response from the previous requests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast in Code execution&lt;/strong&gt; – Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Single Threaded but Highly Scalable&lt;/strong&gt; – Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Node.js library uses JavaScript&lt;/strong&gt; – This is another important aspect of Node.js from the developer&#39;s point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;There is an Active and vibrant community for the Node.js framework&lt;/strong&gt; – The active community always keeps the framework updated with the latest trends in the web development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Buffering&lt;/strong&gt; – Node.js applications never buffer any data. They simply output the data in chunks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain how does Node.js work?&lt;/h2&gt; &#xA;&lt;p&gt;A Node.js application creates a single thread on its invocation. Whenever Node.js receives a request, it first completes its processing before moving on to the next request.&lt;/p&gt; &#xA;&lt;p&gt;Node.js works asynchronously by using the event loop and callback functions, to handle multiple requests coming in parallel. An Event Loop is a functionality which handles and processes all your external events and just converts them to a callback function. It invokes all the event handlers at a proper time. Thus, lots of work is done on the back-end, while processing a single request, so that the new incoming request doesn&#39;t have to wait if the processing is not complete.&lt;/p&gt; &#xA;&lt;p&gt;While processing a request, Node.js attaches a callback function to it and moves it to the back-end. Now, whenever its response is ready, an event is called which triggers the associated callback function to send this response.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 2. NODE.JS SETUP&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to create a simple server in Node.js that returns Hello World?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 01&lt;/strong&gt;: Create a project directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;mkdir myapp&#xA;cd myapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 02&lt;/strong&gt;: Initialize project and link it to npm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a &lt;code&gt;package.json&lt;/code&gt; file in your myapp folder. The file contains references for all npm packages you have downloaded to your project. The command will prompt you to enter a number of things. You can enter your way through all of them EXCEPT this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;entry point: (index.js)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rename this to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 03&lt;/strong&gt;: Install Express in the myapp directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install express --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 04&lt;/strong&gt;: app.js&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Express.js&#xA; */&#xA;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;Hello World!&#39;);&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(&#39;App listening on port 3000!&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 05&lt;/strong&gt;: Run the app&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bah&#34;&gt;node app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚝ &lt;a href=&#34;https://codesandbox.io/s/hello-world-in-nodejs-ue3cs3&#34;&gt;Try this example on CodeSandbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain the concept of URL module in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The URL module in Node.js splits up a web address into readable parts. Use &lt;code&gt;require()&lt;/code&gt; to include the module. Then parse an address with the &lt;code&gt;url.parse()&lt;/code&gt; method, and it will return a URL object with each part of the address as properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * URL Module in Node.js&#xA; */&#xA;const url = require(&#39;url&#39;);&#xA;const adr = &#39;http://localhost:8080/default.htm?year=2022&amp;amp;month=september&#39;;&#xA;const q = url.parse(adr, true);&#xA;&#xA;console.log(q.host); // localhost:8080&#xA;console.log(q.pathname); // &#34;/default.htm&#34;&#xA;console.log(q.search); // &#34;?year=2022&amp;amp;month=september&#34;&#xA;&#xA;const qdata = q.query; // { year: 2022, month: &#39;september&#39; }&#xA;console.log(qdata.month); // &#34;september&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 3. NODE.JS DATA TYPES&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What are the data types in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Just like JS, there are two categories of data types in Node: Primitives and Objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Primitives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Number&lt;/li&gt; &#xA; &lt;li&gt;BigInt&lt;/li&gt; &#xA; &lt;li&gt;Boolean&lt;/li&gt; &#xA; &lt;li&gt;Undefined&lt;/li&gt; &#xA; &lt;li&gt;Null&lt;/li&gt; &#xA; &lt;li&gt;Symbol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Objects:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Function&lt;/li&gt; &#xA; &lt;li&gt;Array&lt;/li&gt; &#xA; &lt;li&gt;Buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain String data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Strings in Node.js are sequences of unicode characters. Strings can be wrapped in a single or double quotation marks. Javascript provide many functions to operate on string, like indexOf(), split(), substr(), length.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;String functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;charAt()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to find a specific character present in a string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Concat()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to concat more than one string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;indexOf()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to get the index of a specified character or a part of the string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Match()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to match multiple strings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Split()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to split the string and return an array of string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Join()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to join the array of strings and those are separated by comma (,) operator.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/** &#xA; * String Data Type&#xA; */&#xA;const str1 = &#34;Hello&#34;;&#xA;const str2 = &#39;World&#39;;&#xA;&#xA;console.log(&#34;Concat Using (+) :&#34; , (str1 + &#39; &#39; + str2));&#xA;console.log(&#34;Concat Using Function :&#34; , (str1.concat(str2)));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Number data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The number data type in Node.js is 64 bits floating point number both positive and negative. The parseInt() and parseFloat() functions are used to convert to number, if it fails to convert into a number then it returns &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Number Data Type&#xA; */&#xA;// Example 01:&#xA;const num1 = 10;&#xA;const num2 = 20;&#xA;&#xA;console.log(`sum: ${num1 + num2}`); &#xA;&#xA;// Example 02:&#xA;console.log(parseInt(&#34;32&#34;));  // 32&#xA;console.log(parseFloat(&#34;8.24&#34;)); // 8.24&#xA;console.log(parseInt(&#34;234.12345&#34;)); // 234&#xA;console.log(parseFloat(&#34;10&#34;)); // 10&#xA;&#xA;// Example 03:&#xA;console.log(isFinite(10/5)); // true&#xA;console.log(isFinite(10/0)); // false&#xA;&#xA;// Example 04:&#xA;console.log(5 / 0); // Infinity&#xA;console.log(-5 / 0); // -Infinity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain BigInt data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending &lt;strong&gt;n&lt;/strong&gt; to the end of an integer literal, or by calling the BigInt() function ( without the new operator ) and giving it an integer value or string value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * BigInt Data Type&#xA; */&#xA;const maxSafeInteger = 99n; // This is a BigInt&#xA;const num2 = BigInt(&#39;99&#39;); // This is equivalent&#xA;const num3 = BigInt(99); // Also works&#xA;&#xA;typeof 1n === &#39;bigint&#39;           // true&#xA;typeof BigInt(&#39;1&#39;) === &#39;bigint&#39;  // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Boolean data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Boolean data type is a data type that has one of two possible values, either true or false. In programming, it is used in logical representation or to control program structure.&lt;/p&gt; &#xA;&lt;p&gt;The boolean() function is used to convert any data type to a boolean value. According to the rules, false, 0, NaN, null, undefined, empty string evaluate to false and other values evaluates to true.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Boolean Data Type&#xA; */&#xA;// Example 01:&#xA;const isValid = true; &#xA;console.log(isValid); // true &#xA;&#xA;// Example 02:&#xA;console.log(true &amp;amp;&amp;amp; true); // true &#xA;console.log(true &amp;amp;&amp;amp; false); // false &#xA;console.log(true || false); // true &#xA;console.log(false || false); // false &#xA;console.log(!true); // false &#xA;console.log(!false); // true &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain &lt;code&gt;Undefined&lt;/code&gt; and &lt;code&gt;Null&lt;/code&gt; data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;In node.js, if a variable is defined without assigning any value, then that will take &lt;strong&gt;undefined&lt;/strong&gt; as value. If we assign a null value to the variable, then the value of the variable becomes &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * NULL and UNDEFINED Data Type&#xA; */&#xA;let x;&#xA;console.log(x); // undefined&#xA;&#xA;let y = null;&#xA;console.log(y); // null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Symbol data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Symbol is an immutable primitive value that is unique. It&#39;s a very peculiar data type. Once you create a symbol, its value is kept private and for internal use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Symbol Data Type&#xA; */&#xA;const NAME = Symbol()&#xA;const person = {&#xA;  [NAME]: &#39;Ritika Bhavsar&#39;&#xA;}&#xA;&#xA;person[NAME] // &#39;Ritika Bhavsar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain function in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Functions are first class citizens in Node&#39;s JavaScript, similar to the browser&#39;s JavaScript. A function can have attributes and properties also. It can be treated like a class in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Function in Node.js&#xA; */&#xA;function Messsage(name) {&#xA; console.log(&#34;Hello &#34;+name);&#xA;}&#xA;&#xA;Messsage(&#34;World&#34;); // Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Buffer data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js includes an additional data type called Buffer ( not available in browser&#39;s JavaScript ). Buffer is mainly used to store binary data, while reading from a file or receiving packets over the network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Buffer Data Type&#xA; */&#xA;let b = new Buffer(10000);&#xA;let str = &#34;----------&#34;;&#xA;&#xA;b.write(str); &#xA;console.log( str.length ); // 10&#xA;console.log( b.length ); // 10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Buffer() is deprecated due to security and usability issues.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 4. NODE.JS ARCHITECTURE&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How does Node.js works?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is completely event-driven. Basically the server consists of one thread processing one event after another.&lt;/p&gt; &#xA;&lt;p&gt;A new request coming in is one kind of event. The server starts processing it and when there is a blocking IO operation, it does not wait until it completes and instead registers a callback function. The server then immediately starts to process another event ( maybe another request ). When the IO operation is finished, that is another kind of event, and the server will process it ( i.e. continue working on the request ) by executing the callback as soon as it has time.&lt;/p&gt; &#xA;&lt;p&gt;Node.js Platform does not follow Request/Response Multi-Threaded Stateless Model. It follows Single Threaded with Event Loop Model. Node.js Processing model mainly based on Javascript Event based model with Javascript callback mechanism.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/event-loop.png&#34; alt=&#34;Node Architecture&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Single Threaded Event Loop Model Processing Steps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clients Send request to Web Server.&lt;/li&gt; &#xA; &lt;li&gt;Node.js Web Server internally maintains a Limited Thread pool to provide services to the Client Requests.&lt;/li&gt; &#xA; &lt;li&gt;Node.js Web Server receives those requests and places them into a Queue. It is known as &lt;strong&gt;Event Queue&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Node.js Web Server internally has a Component, known as &lt;strong&gt;Event Loop&lt;/strong&gt;. Why it got this name is that it uses indefinite loop to receive requests and process them.&lt;/li&gt; &#xA; &lt;li&gt;Event Loop uses Single Thread only. It is main heart of Node.js Platform Processing Model.&lt;/li&gt; &#xA; &lt;li&gt;Event Loop checks any Client Request is placed in Event Queue. If no, then wait for incoming requests for indefinitely.&lt;/li&gt; &#xA; &lt;li&gt;If yes, then pick up one Client Request from Event Queue &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Starts process that Client Request&lt;/li&gt; &#xA;   &lt;li&gt;If that Client Request Does Not requires any Blocking IO Operations, then process everything, prepare response and send it back to client.&lt;/li&gt; &#xA;   &lt;li&gt;If that Client Request requires some Blocking IO Operations like interacting with Database, File System, External Services then it will follow different approach &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Checks Threads availability from Internal Thread Pool&lt;/li&gt; &#xA;     &lt;li&gt;Picks up one Thread and assign this Client Request to that thread.&lt;/li&gt; &#xA;     &lt;li&gt;That Thread is responsible for taking that request, process it, perform Blocking IO operations, prepare response and send it back to the Event Loop&lt;/li&gt; &#xA;     &lt;li&gt;Event Loop in turn, sends that Response to the respective Client.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the core modules of Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js has a set of core modules that are part of the platform and come with the Node.js installation. These modules can be loaded into the program by using the require function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const module = require(&#39;module_name&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const http = require(&#39;http&#39;);&#xA;&#xA;http.createServer(function (req, res) {&#xA;  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});&#xA;  res.write(&#39;Welcome to Node.js!&#39;);&#xA;  res.end();&#xA;}).listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following table lists some of the important core modules in Node.js.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Core Module&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;assert&lt;/td&gt; &#xA;   &lt;td&gt;provides a set of assertion functions useful for testing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;console&lt;/td&gt; &#xA;   &lt;td&gt;provides a simple debugging console&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;crypto&lt;/td&gt; &#xA;   &lt;td&gt;provides cryptographic functionality&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;http&lt;/td&gt; &#xA;   &lt;td&gt;http module includes classes, methods and events to create Node.js http server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;url&lt;/td&gt; &#xA;   &lt;td&gt;url module includes methods for URL resolution and parsing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;querystring&lt;/td&gt; &#xA;   &lt;td&gt;querystring module includes methods to deal with query string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;path module includes methods to deal with file paths.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fs&lt;/td&gt; &#xA;   &lt;td&gt;fs module includes classes, methods, and events to work with file I/O.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;util&lt;/td&gt; &#xA;   &lt;td&gt;util module includes utility functions useful for programmers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What do you understand by Reactor Pattern in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reactor Pattern&lt;/strong&gt; is used to avoid the blocking of the Input/Output operations. It provides us with a handler that is associated with I/O operations. When the I/O requests are to be generated, they get submitted to a demultiplexer, which handles concurrency in avoiding the blocking of the I/O mode and collects the requests in form of an event and queues those events.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There are two ways in which I/O operations are performed:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Blocking I/O:&lt;/strong&gt; Application will make a function call and pause its execution at a point until the data is received. It is called as &#34;Synchronous&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Non-Blocking I/O:&lt;/strong&gt; Application will make a function call, and, without waiting for the results it continues its execution. It is called as &#34;Asynchronous&#34;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/reactor-pattern.jpg&#34; alt=&#34;Reactor Pattern&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reactor Pattern comprises of:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Resources:&lt;/strong&gt; They are shared by multiple applications for I/O operations, generally slower in executions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Synchronous Event De-multiplexer/Event Notifier:&lt;/strong&gt; This uses Event Loop for blocking on all resources. When a set of I/O operations completes, the Event De-multiplexer pushes the new events into the Event Queue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Event Loop and Event Queue:&lt;/strong&gt; Event Queue queues up the new events that occurred along with its event-handler, pair.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Request Handler/Application:&lt;/strong&gt; This is, generally, the application that provides the handler to be executed for registered events on resources.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the global objects of node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js Global Objects are the objects that are available in all modules. Global Objects are built-in objects that are part of the JavaScript and can be used directly in the application without importing any particular module.&lt;/p&gt; &#xA;&lt;p&gt;These objects are modules, functions, strings and object itself as explained below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. global:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a global namespace. Defining a variable within this namespace makes it globally accessible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var myvar;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. process:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is an inbuilt global object that is an instance of EventEmitter used to get information on current process. It can also be accessed using require() explicitly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. console:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is an inbuilt global object used to print to stdout and stderr.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#34;Hello World&#34;); // Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. setTimeout(), clearTimeout(), setInterval(), clearInterval():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The built-in timer functions are globals&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function printHello() {&#xA;   console.log( &#34;Hello, World!&#34;);&#xA;}&#xA;&#xA;// Now call above function after 2 seconds&#xA;var timeoutObj = setTimeout(printHello, 2000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. __dirname:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a string. It specifies the name of the directory that currently contains the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(__dirname);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. __filename:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It specifies the filename of the code being executed. This is the resolved absolute path of this code file. The value inside a module is the path to that module file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(__filename);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is chrome v8 engine?&lt;/h2&gt; &#xA;&lt;p&gt;V8 is a C++ based open-source JavaScript engine developed by Google. It was originally designed for Google Chrome and Chromium-based browsers ( such as Brave ) in 2008, but it was later utilized to create Node.js for server-side coding.&lt;/p&gt; &#xA;&lt;p&gt;V8 is the JavaScript engine i.e. it parses and executes JavaScript code. The DOM, and the other Web Platform APIs ( they all makeup runtime environment ) are provided by the browser.&lt;/p&gt; &#xA;&lt;p&gt;V8 is known to be a JavaScript engine because it takes JavaScript code and executes it while browsing in Chrome. It provides a runtime environment for the execution of JavaScript code. The best part is that the JavaScript engine is completely independent of the browser in which it runs.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why is LIBUV needed in Node JS?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;libuv&lt;/strong&gt; is a C library originally written for Node.js to abstract non-blocking I/O operations. It provide the below features&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It allows the CPU and other resources to be used simultaneously while still performing I/O operations, thereby resulting in efficient use of resources and network.&lt;/li&gt; &#xA; &lt;li&gt;It facilitates an event-driven approach wherein I/O and other activities are performed using callback-based notifications.&lt;/li&gt; &#xA; &lt;li&gt;It provides mechanisms to handle file system, DNS, network, child processes, pipes, signal handling, polling and streaming&lt;/li&gt; &#xA; &lt;li&gt;It also includes a thread pool for offloading work for some things that can&#39;t be done asynchronously at the operating system level.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How V8 compiles JavaScript code?&lt;/h2&gt; &#xA;&lt;p&gt;Compilation is the process of converting human-readable code to machine code. There are two ways to compile the code&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Using an Interpreter&lt;/strong&gt;: The interpreter scans the code line by line and converts it into byte code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Using a Compiler&lt;/strong&gt;: The Compiler scans the entire document and compiles it into highly optimized byte code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The V8 engine uses both a compiler and an interpreter and follows &lt;strong&gt;just-in-time (JIT)&lt;/strong&gt; compilation to speed up the execution. JIT compiling works by compiling small portions of code that are just about to be executed. This prevents long compilation time and the code being compiles is only that which is highly likely to run.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 5. NODE.JS EVENTS&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is EventEmitter in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The EventEmitter is a class that facilitates communication/interaction between objects in Node.js. The EventEmitter class can be used to create and handle custom events.&lt;/p&gt; &#xA;&lt;p&gt;EventEmitter is at the core of Node asynchronous event-driven architecture. Many of Node&#39;s built-in modules inherit from EventEmitter including prominent frameworks like Express.js. An emitter object basically has two main features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emitting name events.&lt;/li&gt; &#xA; &lt;li&gt;Registering and unregistering listener functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 01:&lt;/strong&gt; Create an event emitter instance and register a couple of callbacks&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callbacks Events&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;function listenerOne() {&#xA;   console.log(&#39;First Listener Executed&#39;);&#xA;}&#xA;&#xA;function listenerTwo() {&#xA;   console.log(&#39;Second Listener Executed&#39;);&#xA;}&#xA;&#xA;eventEmitter.on(&#39;listenerOne&#39;, listenerOne); // Register for listenerOne&#xA;eventEmitter.on(&#39;listenerOne&#39;, listenerTwo); // Register for listenerOne&#xA;&#xA;// When the event &#34;listenerOne&#34; is emitted, both the above callbacks should be invoked.&#xA;eventEmitter.emit(&#39;listenerOne&#39;);&#xA;&#xA;// Output&#xA;First Listener Executed&#xA;Second Listener Executed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 02:&lt;/strong&gt; Registering for the event to be fired only one time using &lt;strong&gt;once&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Emit Events Once&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;function listenerOnce() {&#xA;   console.log(&#39;listenerOnce fired once&#39;);&#xA;}&#xA;&#xA;eventEmitter.once(&#39;listenerOne&#39;, listenerOnce); // Register listenerOnce&#xA;eventEmitter.emit(&#39;listenerOne&#39;);&#xA;&#xA;// Output&#xA;listenerOnce fired once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 03:&lt;/strong&gt; Registering for the event with callback parameters&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Events with Parameters&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;function listener(code, msg) {&#xA;   console.log(`status ${code} and ${msg}`);&#xA;}&#xA;&#xA;eventEmitter.on(&#39;status&#39;, listener); // Register listener&#xA;eventEmitter.emit(&#39;status&#39;, 200, &#39;ok&#39;);&#xA;&#xA;// Output&#xA;status 200 and ok&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How the Event Loop Works in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;event loop&lt;/strong&gt; allows Node.js to perform non-blocking I/O operations despite the fact that JavaScript is single-threaded. It is done by offloading operations to the system kernel whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;Node.js is a single-threaded application, but it can support &lt;strong&gt;concurrency&lt;/strong&gt; via the concept of &lt;strong&gt;event&lt;/strong&gt; and &lt;strong&gt;callbacks&lt;/strong&gt;. Every API of Node.js is asynchronous and being single-threaded, they use &lt;strong&gt;async function calls&lt;/strong&gt; to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features of Event Loop:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Event loop is an endless loop, which waits for tasks, executes them and then sleeps until it receives more tasks.&lt;/li&gt; &#xA; &lt;li&gt;The event loop executes tasks from the event queue only when the call stack is empty i.e. there is no ongoing task.&lt;/li&gt; &#xA; &lt;li&gt;The event loop allows us to use callbacks and promises.&lt;/li&gt; &#xA; &lt;li&gt;The event loop executes the tasks starting from the oldest first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/nodejs-event-loop.png&#34; alt=&#34;Event Loop&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Event loop in Node.js&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;// Create an event handler as follows&#xA;const connectHandler = function connected() {&#xA;   console.log(&#39;connection succesful.&#39;);&#xA;   eventEmitter.emit(&#39;data_received&#39;);&#xA;}&#xA;&#xA;// Bind the connection event with the handler&#xA;eventEmitter.on(&#39;connection&#39;, connectHandler);&#xA; &#xA;// Bind the data_received event with the anonymous function&#xA;eventEmitter.on(&#39;data_received&#39;, function() {&#xA;   console.log(&#39;data received succesfully.&#39;);&#xA;});&#xA;&#xA;// Fire the connection event &#xA;eventEmitter.emit(&#39;connection&#39;);&#xA;console.log(&#34;Program Ended.&#34;);&#xA;&#xA;// Output&#xA;Connection succesful.&#xA;Data received succesfully.&#xA;Program Ended.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the difference between process.nextTick() and setImmediate()?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. process.nextTick():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The process.nextTick() method adds the callback function to the start of the next event queue. It is to be noted that, at the start of the program process.nextTick() method is called for the first time before the event loop is processed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. setImmdeiate():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The setImmediate() method is used to execute a function right after the current event loop finishes. It is callback function is placed in the check phase of the next event queue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * setImmediate() and process.nextTick()&#xA; */&#xA;setImmediate(() =&amp;gt; {&#xA;  console.log(&#34;1st Immediate&#34;);&#xA;});&#xA;&#xA;setImmediate(() =&amp;gt; {&#xA;  console.log(&#34;2nd Immediate&#34;);&#xA;});&#xA;&#xA;process.nextTick(() =&amp;gt; {&#xA;  console.log(&#34;1st Process&#34;);&#xA;});&#xA;&#xA;process.nextTick(() =&amp;gt; {&#xA;  console.log(&#34;2nd Process&#34;);&#xA;});&#xA;&#xA;// First event queue ends here&#xA;console.log(&#34;Program Started&#34;);&#xA;&#xA;// Output&#xA;Program Started&#xA;1st Process&#xA;2nd Process&#xA;1st Immediate&#xA;2nd Immediate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is callback function in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A callback is a function which is called when a task is completed, thus helps in preventing any kind of blocking and a callback function allows other code to run in the meantime.&lt;/p&gt; &#xA;&lt;p&gt;Callback is called when task get completed and is asynchronous equivalent for a function. Using Callback concept, Node.js can process a large number of requests without waiting for any function to return the result which makes Node.js highly scalable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Function&#xA; */&#xA;function myAsync(a, b, callback) {&#xA;  setTimeout(function () {&#xA;    callback(a + b);&#xA;  }, 100);&#xA;}&#xA;console.log(&#34;Before Asynchronous Call&#34;);&#xA;&#xA;myAsync(10, 20, function (result) {&#xA;  console.log(&#34;Sum: &#34; + result);&#xA;});&#xA;console.log(&#34;After Asynchronous Call&#34;);&#xA;&#xA;// Output&#xA;Before Asynchronous Call&#xA;After Asynchronous Call&#xA;Sum: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the difference between Events and Callbacks?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Events:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js &lt;strong&gt;events&lt;/strong&gt; module which emits named events that can cause corresponding functions or callbacks to be called. Functions ( callbacks ) listen or subscribe to a particular event to occur and when that event triggers, all the callbacks subscribed to that event are fired one by one in order to which they were registered.&lt;/p&gt; &#xA;&lt;p&gt;All objects that emit events are instances of the &lt;strong&gt;EventEmitter&lt;/strong&gt; class. The event can be emitted or listen to an event with the help of EventEmitter&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Events Module&#xA; */&#xA;const event = require(&#39;events&#39;);  &#xA;const eventEmitter = new event.EventEmitter();  &#xA;  &#xA;// add listener function for Sum event  &#xA;eventEmitter.on(&#39;Sum&#39;, function(num1, num2) {  &#xA;    console.log(&#39;Total: &#39; + (num1 + num2));  &#xA;});  &#xA;&#xA;// call event  &#xA;eventEmitter.emit(&#39;Sum&#39;, 10, 20);&#xA;&#xA;// Output&#xA;Total: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Callbacks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callbacks&#xA; */&#xA;function sum(number) {&#xA;  console.log(&#39;Total: &#39; + number);&#xA;}&#xA;&#xA;function calculator(num1, num2, callback) {&#xA;  let total = num1 + num2;&#xA;  callback(total);&#xA;}&#xA;&#xA;calculator(10, 20, sum);&#xA;&#xA;// Output&#xA;Total: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Callback functions are called when an asynchronous function returns its result, whereas event handling works on the &lt;strong&gt;observer pattern&lt;/strong&gt;. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is an error-first callback?&lt;/h2&gt; &#xA;&lt;p&gt;The pattern used across all the asynchronous methods in Node.js is called &lt;em&gt;Error-first Callback&lt;/em&gt;. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fs.readFile( &#34;file.json&#34;, function ( err, data ) {&#xA;  if ( err ) {&#xA;    console.error( err );&#xA;  }&#xA;  console.log( data );&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any asynchronous method expects one of the arguments to be a callback. The full callback argument list depends on the caller method, but the first argument is always an error object or null. When we go for the asynchronous method, an exception thrown during function execution cannot be detected in a try/catch statement. The event happens after the JavaScript engine leaves the try block.&lt;/p&gt; &#xA;&lt;p&gt;In the preceding example, if any exception is thrown during the reading of the file, it lands on the callback function as the first and mandatory parameter.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is callback hell in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The callback hell contains complex nested callbacks. Here, every callback takes an argument that is a result of the previous callbacks. In this way, the code structure looks like a pyramid, making it difficult to read and maintain. Also, if there is an error in one function, then all other functions get affected.&lt;/p&gt; &#xA;&lt;p&gt;An asynchronous function is one where some external activity must complete before a result can be processed; it is &#34;asynchronous&#34; in the sense that there is an unpredictable amount of time before a result becomes available. Such functions require a callback function to handle errors and process the result.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Hell&#xA; */&#xA;getData(function(a){&#xA;    getMoreData(a, function(b){&#xA;        getMoreData(b, function(c){ &#xA;            getMoreData(c, function(d){ &#xA;&#x9;            getMoreData(d, function(e){ &#xA;&#x9;&#x9;            ...&#xA;&#x9;&#x9;        });&#xA;&#x9;        });&#xA;        });&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to avoid callback hell in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Managing callbacks using Async.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Async&lt;/code&gt; is a really powerful npm module for managing asynchronous nature of JavaScript. Along with Node.js, it also works for JavaScript written for browsers.&lt;/p&gt; &#xA;&lt;p&gt;Async provides lots of powerful utilities to work with asynchronous processes under different scenarios.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install --save async&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Managing callbacks hell using promises:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Promises are alternative to callbacks while dealing with asynchronous code. Promises return the value of the result or an error exception. The core of the promises is the &lt;code&gt;.then()&lt;/code&gt; function, which waits for the promise object to be returned.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;.then()&lt;/code&gt; function takes two optional functions as arguments and depending on the state of the promise only one will ever be called. The first function is called when the promise if fulfilled (A successful result). The second function is called when the promise is rejected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Promises&#xA; */&#xA;const myPromise = new Promise((resolve, reject) =&amp;gt; {&#xA;  setTimeout(() =&amp;gt; {&#xA;    resolve(&#34;Successful!&#34;);&#xA;  }, 300);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Using Async Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Async await makes asynchronous code look like it&#39;s synchronous. This has only been possible because of the reintroduction of promises into node.js. Async-Await only works with functions that return a promise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Async Await&#xA; */&#xA;const getrandomnumber = function(){&#xA;    return new Promise((resolve, reject)=&amp;gt;{&#xA;        setTimeout(() =&amp;gt; {&#xA;            resolve(Math.floor(Math.random() * 20));&#xA;        }, 1000);&#xA;    });&#xA;}&#xA;&#xA;const addRandomNumber = async function(){&#xA;    const sum = await getrandomnumber() + await getrandomnumber();&#xA;    console.log(sum);&#xA;}&#xA;&#xA;addRandomNumber();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is typically the first argument passed to a callback handler?&lt;/h2&gt; &#xA;&lt;p&gt;The first parameter of the callback is the &lt;strong&gt;error&lt;/strong&gt; value. If the function hits an error, then they typically call the &lt;strong&gt;callback&lt;/strong&gt; with the first parameter being an Error object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Handler&#xA; */&#xA;const Division = (numerator, denominator, callback) =&amp;gt; {&#xA;    if (denominator === 0) {&#xA;      callback(new Error(&#39;Divide by zero error!&#39;));&#xA;    } else {&#xA;      callback(null, numerator / denominator);&#xA;    }&#xA;};&#xA;&#xA;// Function Call&#xA;Division(5, 0, (err, result) =&amp;gt; {&#xA;  if (err) {&#xA;    return console.log(err.message);&#xA;  }&#xA;  console.log(`Result: ${result}`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the timing features of Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The Timers module in Node.js contains functions that execute code after a set period of time. Timers do not need to be imported via require(), since all the methods are available globally to emulate the browser JavaScript API.&lt;/p&gt; &#xA;&lt;p&gt;Some of the functions provided in this module are&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. setTimeout():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function schedules code execution after the assigned amount of time ( in milliseconds ). Only after the timeout has occurred, the code will be executed. This method returns an ID that can be used in &lt;strong&gt;clearTimeout()&lt;/strong&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(callback, delay, args )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function printMessage(arg) {&#xA;  console.log(`${arg}`);&#xA;}&#xA;&#xA;setTimeout(printMessage, 1000, &#39;Display this Message after 1 seconds!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. setImmediate():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The setImmediate() method executes the code at the end of the current event loop cycle. The function passed in the setImmediate() argument is a function that will be executed in the next iteration of the event loop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setImmediate(callback, args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Setting timeout for the function&#xA;setTimeout(function () {&#xA;    console.log(&#39;setTimeout() function running...&#39;);&#xA;}, 500);&#xA;&#xA;// Running this function immediately before any other&#xA;setImmediate(function () {&#xA;   console.log(&#39;setImmediate() function running...&#39;);&#xA;});&#xA;&#xA;// Directly printing the statement&#xA;console.log(&#39;Normal statement in the event loop&#39;);&#xA;&#xA;// Output&#xA;// Normal statement in the event loop&#xA;// setImmediate() function running...&#xA;// setTimeout() function running...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. setInterval():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The setInterval() method executes the code after the specified interval. The function is executed multiple times after the interval has passed. The function will keep on calling until the process is stopped externally or using code after specified time period. The clearInterval() method can be used to prevent the function from running.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setInterval(callback, delay, args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setInterval(function() {&#xA;    console.log(&#39;Display this Message intervals of 1 seconds!&#39;);&#xA;}, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 6. NODE.JS FILE SYSTEM&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How Node.js read the content of a file?&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;normal&#34; way in Node.js is probably to read in the content of a file in a non-blocking, asynchronous way. That is, to tell Node to read in the file, and then to get a callback when the file-reading has been finished. That would allow us to hand several requests in parallel.&lt;/p&gt; &#xA;&lt;p&gt;Common use for the File System module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read files&lt;/li&gt; &#xA; &lt;li&gt;Create files&lt;/li&gt; &#xA; &lt;li&gt;Update files&lt;/li&gt; &#xA; &lt;li&gt;Delete files&lt;/li&gt; &#xA; &lt;li&gt;Rename files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read Files&lt;/strong&gt;&lt;br&gt; index.html&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;html&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;  &amp;lt;h1&amp;gt;My Header&amp;lt;/h1&amp;gt;&#xA;  &amp;lt;p&amp;gt;My paragraph.&amp;lt;/p&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * read_file.js&#xA; */&#xA;const http = require(&#39;http&#39;);&#xA;const fs = require(&#39;fs&#39;);&#xA;http.createServer(function (req, res) {&#xA;  fs.readFile(&#39;index.html&#39;, function(err, data) {&#xA;    res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});&#xA;    res.write(data);&#xA;    res.end();&#xA;  });&#xA;}).listen(8080);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Initiate read_file.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;node read_file.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 7. NODE.JS STREAMS&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How many types of streams are present in node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Streams are objects that let you read data from a source or write data to a destination in continuous fashion. There are four types of streams&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Readable&lt;/strong&gt; − Stream which is used for read operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Writable&lt;/strong&gt; − Stream which is used for write operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Duplex&lt;/strong&gt; − Stream which can be used for both read and write operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt; − A type of duplex stream where the output is computed based on input.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each type of Stream is an EventEmitter instance and throws several events at different instance of times.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt; − This event is fired when there is data is available to read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt; − This event is fired when there is no more data to read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;error&lt;/strong&gt; − This event is fired when there is any error receiving or writing data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;finish&lt;/strong&gt; − This event is fired when all the data has been flushed to underlying system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reading from a Stream:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;const data = &#39;&#39;;&#xA;&#xA;// Create a readable stream&#xA;const readerStream = fs.createReadStream(&#39;input.txt&#39;);&#xA;&#xA;// Set the encoding to be utf8. &#xA;readerStream.setEncoding(&#39;UTF8&#39;);&#xA;&#xA;// Handle stream events --&amp;gt; data, end, and error&#xA;readerStream.on(&#39;data&#39;, function(chunk) {&#xA;   data += chunk;&#xA;});&#xA;&#xA;readerStream.on(&#39;end&#39;,function() {&#xA;   console.log(data);&#xA;});&#xA;&#xA;readerStream.on(&#39;error&#39;, function(err) {&#xA;   console.log(err.stack);&#xA;});&#xA;&#xA;console.log(&#34;Program Ended&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Writing to a Stream:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;const data = &#39;Simply Easy Learning&#39;;&#xA;&#xA;// Create a writable stream&#xA;const writerStream = fs.createWriteStream(&#39;output.txt&#39;);&#xA;&#xA;// Write the data to stream with encoding to be utf8&#xA;writerStream.write(data,&#39;UTF8&#39;);&#xA;&#xA;// Mark the end of file&#xA;writerStream.end();&#xA;&#xA;// Handle stream events --&amp;gt; finish, and error&#xA;writerStream.on(&#39;finish&#39;, function() {&#xA;   console.log(&#34;Write completed.&#34;);&#xA;});&#xA;&#xA;writerStream.on(&#39;error&#39;, function(err) {&#xA;   console.log(err.stack);&#xA;});&#xA;&#xA;console.log(&#34;Program Ended&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Piping the Streams:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Piping is a mechanism where we provide the output of one stream as the input to another stream. It is normally used to get data from one stream and to pass the output of that stream to another stream. There is no limit on piping operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;&#xA;// Create a readable stream&#xA;const readerStream = fs.createReadStream(&#39;input.txt&#39;);&#xA;&#xA;// Create a writable stream&#xA;const writerStream = fs.createWriteStream(&#39;output.txt&#39;);&#xA;&#xA;// Pipe the read and write operations&#xA;// read input.txt and write data to output.txt&#xA;readerStream.pipe(writerStream);&#xA;&#xA;console.log(&#34;Program Ended&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Chaining the Streams:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;const zlib = require(&#39;zlib&#39;);&#xA;&#xA;// Compress the file input.txt to input.txt.gz&#xA;fs.createReadStream(&#39;input.txt&#39;)&#xA;   .pipe(zlib.createGzip())&#xA;   .pipe(fs.createWriteStream(&#39;input.txt.gz&#39;));&#xA;  &#xA;console.log(&#34;File Compressed.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 8. NODE.JS MULTITHREADING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. Is Node.js entirely based on a single-thread?&lt;/h2&gt; &#xA;&lt;p&gt;Yes, it is true that Node.js processes all requests on a single thread. But it is just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.&lt;/p&gt; &#xA;&lt;p&gt;To explain it practically, let&#39;s assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How does Node.js handle child threads?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nodejs Primary application runs in an event loop, which is in a single thread.&lt;/li&gt; &#xA; &lt;li&gt;Background I/O is running in a thread pool that is only accessible to C/C++ or other compiled/native modules and mostly transparent to the JS.&lt;/li&gt; &#xA; &lt;li&gt;Node v11/12 now has experimental worker_threads, which is another option.&lt;/li&gt; &#xA; &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; &#xA; &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; &#xA; &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/h2&gt; &#xA;&lt;p&gt;Since Node.js is by default a single thread application, it will run on a single processor core and will not take full advantage of multiple core resources. However, Node.js provides support for deployment on multiple-core systems, to take greater advantage of the hardware. The Cluster module is one of the core Node.js modules and it allows running multiple Node.js worker processes that will share the same port.&lt;/p&gt; &#xA;&lt;p&gt;The cluster module helps to spawn new processes on the operating system. Each process works independently, so you cannot use shared state between child processes. Each process communicates with the main process by IPC and pass server handles back and forth.&lt;/p&gt; &#xA;&lt;p&gt;Cluster supports two types of load distribution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The main process listens on a port, accepts new connection and assigns it to a child process in a round robin fashion.&lt;/li&gt; &#xA; &lt;li&gt;The main process assigns the port to a child process and child process itself listen the port.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Since node is a single threaded process, how to make use of all CPUs?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; &#xA; &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; &#xA; &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A single instance of Node.js runs in a single thread. To take advantage of multi-core systems, the user will sometimes want to launch a cluster of Node.js processes to handle the load. The cluster module allows easy creation of child processes that all share server ports.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const cluster = require(&#39;cluster&#39;);&#xA;const http = require(&#39;http&#39;);&#xA;const numCPUs = require(&#39;os&#39;).cpus().length;&#xA;&#xA;if (cluster.isMaster) {&#xA;  console.log(`Master ${process.pid} is running`);&#xA;&#xA;  // Fork workers.&#xA;  for (let i = 0; i &amp;lt; numCPUs; i++) {&#xA;    cluster.fork();&#xA;  }&#xA;&#xA;  cluster.on(&#39;exit&#39;, (worker, code, signal) =&amp;gt; {&#xA;    console.log(`worker ${worker.process.pid} died`);&#xA;  });&#xA;} else {&#xA;  // Workers can share any TCP connection&#xA;  // In this case it is an HTTP server&#xA;  http.createServer((req, res) =&amp;gt; {&#xA;    res.writeHead(200);&#xA;    res.end(&#39;hello world\n&#39;);&#xA;  }).listen(8000);&#xA;&#xA;  console.log(`Worker ${process.pid} started`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running Node.js will now share port 8000 between the workers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$ node server.js&#xA;Master 3596 is running&#xA;Worker 4324 started&#xA;Worker 4520 started&#xA;Worker 6056 started&#xA;Worker 5644 started&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The worker processes are spawned using the &lt;code&gt;child_process.fork()&lt;/code&gt; method, so that they can communicate with the parent via IPC and pass server handles back and forth.&lt;/p&gt; &#xA;&lt;p&gt;The cluster module supports two methods of distributing incoming connections.&lt;/p&gt; &#xA;&lt;p&gt;The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.&lt;/p&gt; &#xA;&lt;p&gt;The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. If Node.js is single threaded then how it handles concurrency?&lt;/h2&gt; &#xA;&lt;p&gt;Node js despite being single-threaded is the asynchronous nature that makes it possible to handle concurrency and perform multiple I/O operations at the same time. Node js uses an event loop to maintain concurrency and perform non-blocking I/O operations.&lt;/p&gt; &#xA;&lt;p&gt;As soon as Node js starts, it initializes an event loop. The event loop works on a queue (which is called an event queue) and performs tasks in FIFO (First In First Out) order. It executes a task only when there is no ongoing task in the call stack. The call stack works in LIFO(Last In First Out) order. The event loop continuously checks the call stack to check if there is any task that needs to be run. Now whenever the event loop finds any function, it adds it to the stack and runs in order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Concurrency&#xA; */&#xA;function add(a, b) {&#xA;  return a + b;&#xA;}&#xA;&#xA;function print(n) {&#xA;  console.log(`Two times the number ${n} is ` + add(n, n));&#xA;}&#xA;&#xA;print(5);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the function &lt;strong&gt;print(5)&lt;/strong&gt; will be invoked and will push into the call stack. When the function is called, it starts consoling the statement inside it but before consoling the whole statement it encounters another function add(n,n) and suspends its current execution, and pushes the add function into the top of the call stack.&lt;/p&gt; &#xA;&lt;p&gt;Now the function will return the addition &lt;strong&gt;a+b&lt;/strong&gt; and then popped out from the stack and now the previously suspended function will start running and will log the output to console and then this function too will get pop from the stack and now the stack is empty. So this is how a call stack works.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to kill child processes that spawn their own child processes in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;If a child process in Node.js spawn their own child processes, kill() method will not kill the child process&#39;s own child processes. For example, if I start a process that starts it&#39;s own child processes via child_process module, killing that child process will not make my program to quit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const spawn = require(&#39;child_process&#39;).spawn;&#xA;const child = spawn(&#39;my-command&#39;);&#xA;&#xA;child.kill();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The program above will not quit if &lt;code&gt;my-command&lt;/code&gt; spins up some more processes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PID range hack:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can start child processes with {detached: true} option so those processes will not be attached to main process but they will go to a new group of processes. Then using process.kill(-pid) method on main process we can kill all processes that are in the same group of a child process with the same pid group. In my case, I only have one processes in this group.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const spawn = require(&#39;child_process&#39;).spawn;&#xA;const child = spawn(&#39;my-command&#39;, {detached: true});&#xA;&#xA;process.kill(-child.pid);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note - before pid. This converts a pid to a group of pids for process kill() method.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to synchronize data between multiple clients on node.js server?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 9. NODE.JS WEB MODULE&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to use JSON Web Token (JWT) for authentication in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;JSON Web Token (JWT) is an open standard that defines a compact and self-contained way of securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.&lt;/p&gt; &#xA;&lt;p&gt;There are some advantages of using JWT for authorization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Purely stateless. No additional server or infra required to store session information.&lt;/li&gt; &#xA; &lt;li&gt;It can be easily shared among services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.sign(payload, secretOrPrivateKey, [options, callback])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt; - Consists of two parts: the type of token (i.e., JWT) and the signing algorithm (i.e., HS512)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payload&lt;/strong&gt; - Contains the claims that provide information about a user who has been authenticated along with other information such as token expiration time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt; - Final part of a token that wraps in the encoded header and payload, along with the algorithm and a secret&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install jsonwebtoken bcryptjs --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * AuthController.js&#xA; */&#xA;const express = require(&#39;express&#39;);&#xA;const router = express.Router();&#xA;const bodyParser = require(&#39;body-parser&#39;);&#xA;const User = require(&#39;../user/User&#39;);&#xA;&#xA;const jwt = require(&#39;jsonwebtoken&#39;);&#xA;const bcrypt = require(&#39;bcryptjs&#39;);&#xA;const config = require(&#39;../config&#39;);&#xA;&#xA;&#xA;router.use(bodyParser.urlencoded({ extended: false }));&#xA;router.use(bodyParser.json());&#xA;&#xA;router.post(&#39;/register&#39;, function(req, res) {&#xA;  &#xA;  let hashedPassword = bcrypt.hashSync(req.body.password, 8);&#xA;  &#xA;  User.create({&#xA;    name : req.body.name,&#xA;    email : req.body.email,&#xA;    password : hashedPassword&#xA;  },&#xA;  function (err, user) {&#xA;    if (err) return res.status(500).send(&#34;There was a problem registering the user.&#34;)&#xA;    // create a token&#xA;    let token = jwt.sign({ id: user._id }, config.secret, {&#xA;      expiresIn: 86400 // expires in 24 hours&#xA;    });&#xA;    res.status(200).send({ auth: true, token: token });&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;config.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * config.js&#xA; */&#xA;module.exports = {&#xA;  &#39;secret&#39;: &#39;supersecret&#39;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;jwt.sign()&lt;/code&gt; method takes a payload and the secret key defined in &lt;code&gt;config.js&lt;/code&gt; as parameters. It creates a unique string of characters representing the payload. In our case, the payload is an object containing only the id of the user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.npmjs.com/package/jsonwebtoken&#34;&gt;https://www.npmjs.com/package/jsonwebtoken&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to build a microservices architecture with Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Microservices are a style of &lt;strong&gt;Service Oriented Architecture (SOA)&lt;/strong&gt; where the app is structured on an assembly of interconnected services. With microservices, the application architecture is built with lightweight protocols. The services are finely seeded in the architecture. Microservices disintegrate the app into smaller services and enable improved modularity.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/monolithic-and-microservices-architecture.jpg&#34; alt=&#34;Microservices&#34; width=&#34;400px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;There are few things worth emphasizing about the superiority of microservices, and distributed systems generally, over monolithic architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt; — responsibility for specific operations is assigned to separate pieces of the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Uniformity&lt;/strong&gt; — microservices interfaces (API endpoints) consist of a base URI identifying a data object and standard HTTP methods (GET, POST, PUT, PATCH and DELETE) used to manipulate the object&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robustness&lt;/strong&gt; — component failures cause only the absence or reduction of a specific unit of functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt; — system components can be modified and deployed independently&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt; — instances of a service can be added or removed to respond to changes in demand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt; — new features can be added to the system while maintaining 100% availability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testability&lt;/strong&gt; — new solutions can be tested directly in the production environment by implementing them for restricted segments of users to see how they behave in real life.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Creating Microservices with Node.js&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 01:&lt;/strong&gt; Creating a Server to Accept Requests&lt;/p&gt; &#xA;&lt;p&gt;This file is creating our server and assigns routes to process all requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//  server.js&#xA;&#xA;const express = require(&#39;express&#39;)&#xA;const app = express();&#xA;const port = process.env.PORT || 3000;&#xA;&#xA;const routes = require(&#39;./api/routes&#39;);&#xA;routes(app);&#xA;app.listen(port, function() {&#xA;   console.log(&#39;Server started on port: &#39; + port);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 02:&lt;/strong&gt; Defining the routes&lt;/p&gt; &#xA;&lt;p&gt;The next step is to define the routes for the microservices and then assign each to a target in the controller. We have two endpoints. One endpoint called &#34;about&#34; that returns information about the application. And a &#34;distance&#34; endpoint that includes two path parameters, both Zip Codes of the Lego store. This endpoint returns the distance, in miles, between these two Zip Codes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const controller = require(&#39;./controller&#39;);&#xA;&#xA;module.exports = function(app) {&#xA;   app.route(&#39;/about&#39;)&#xA;       .get(controller.about);&#xA;   app.route(&#39;/distance/:zipcode1/:zipcode2&#39;)&#xA;       .get(controller.getDistance);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 03:&lt;/strong&gt; Adding Controller Logic&lt;/p&gt; &#xA;&lt;p&gt;Within the controller file, we are going to create a controller object with two properties. Those properties are the functions to handle the requests we defined in the routes module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const properties = require(&#39;../package.json&#39;)&#xA;const distance = require(&#39;../service/distance&#39;);&#xA;&#xA;const controllers = {&#xA;   about: function(req, res) {&#xA;       let aboutInfo = {&#xA;           name: properties.name,&#xA;           version: properties.version&#xA;       }&#xA;       res.json(aboutInfo);&#xA;   },&#xA;   getDistance: function(req, res) {&#xA;           distance.find(req, res, function(err, dist) {&#xA;               if (err)&#xA;                   res.send(err);&#xA;               res.json(dist);&#xA;           });&#xA;       },&#xA;};&#xA;&#xA;module.exports = controllers;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How microservices communicate with each other in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 10. NODE.JS MIDDLEWARE&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What are the middleware functions in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Middleware functions are functions that have access to the &lt;strong&gt;request object (req)&lt;/strong&gt;, the &lt;strong&gt;response object (res)&lt;/strong&gt;, and the &lt;code&gt;next&lt;/code&gt; function in the application&#39;s request-response cycle.&lt;/p&gt; &#xA;&lt;p&gt;Middleware functions can perform the following tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute any code.&lt;/li&gt; &#xA; &lt;li&gt;Make changes to the request and the response objects.&lt;/li&gt; &#xA; &lt;li&gt;End the request-response cycle.&lt;/li&gt; &#xA; &lt;li&gt;Call the next middleware in the stack.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the current middleware function does not end the request-response cycle, it must call &lt;code&gt;next()&lt;/code&gt; to pass control to the next middleware function. Otherwise, the request will be left hanging.&lt;/p&gt; &#xA;&lt;p&gt;The following figure shows the elements of a middleware function call:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/express-mw.png&#34; alt=&#34;Middleware functions&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Middleware functions that return a Promise will call &lt;code&gt;next(value)&lt;/code&gt; when they reject or throw an error. &lt;code&gt;next&lt;/code&gt; will be called with either the rejected value or the thrown Error.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain the use of next in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;next&lt;/strong&gt; is a function in the Express router which executes the middleware succeeding the current middleware.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To load the middleware function, call &lt;code&gt;app.use()&lt;/code&gt;, specifying the middleware function. For example, the following code loads the &lt;strong&gt;myLogger&lt;/strong&gt; middleware function before the route to the root path (/).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * myLogger&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const app = express();&#xA;&#xA;const myLogger = function (req, res, next) {&#xA;  console.log(&#34;LOGGED&#34;);&#xA;  next();&#xA;};&#xA;&#xA;app.use(myLogger);&#xA;&#xA;app.get(&#34;/&#34;, (req, res) =&amp;gt; {&#xA;  res.send(&#34;Hello World!&#34;);&#xA;});&#xA;&#xA;app.listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚝ &lt;a href=&#34;https://codesandbox.io/s/next-function-nq042s&#34;&gt;Try this example on CodeSandbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;next()&lt;/code&gt; function is not a part of the Node.js or Express API, but is the third argument that is passed to the middleware function. The &lt;code&gt;next()&lt;/code&gt; function could be named anything, but by convention it is always named “next”. To avoid confusion, always use this convention.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why to use Express.js?&lt;/h2&gt; &#xA;&lt;p&gt;Express.js is a Node.js web application framework that provides broad features for building web and mobile applications. It is used to build a single page, multipage, and hybrid web application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features of Express.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast Server-Side Development:&lt;/strong&gt; The features of node js help express saving a lot of time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Middleware:&lt;/strong&gt; Middleware is a request handler that has access to the application&#39;s request-response cycle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Routing:&lt;/strong&gt; It refers to how an application&#39;s endpoint&#39;s URLs respond to client requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Templating:&lt;/strong&gt; It provides templating engines to build dynamic content on the web pages by creating HTML templates on the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging:&lt;/strong&gt; Express makes it easier as it identifies the exact part where bugs are.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Express.js framework makes it very easy to develop an application which can be used to handle multiple types of requests like the GET, PUT, and POST and DELETE requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Simple server using Express.js&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const app = express();&#xA;&#xA;app.get(&#34;/&#34;, function (req, res) {&#xA;  res.send(&#34;Hello World!&#34;);&#xA;});&#xA;&#xA;const server = app.listen(3000, function () {});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/h2&gt; &#xA;&lt;p&gt;Keeping the API declaration separated from the network related configuration (port, protocol, etc) allows testing the API in-process, without performing network calls, with all the benefits that it brings to the table: fast testing execution and getting coverage metrics of the code. It also allows deploying the same API under flexible and different network conditions.&lt;/p&gt; &#xA;&lt;p&gt;API declaration, should reside in app.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * app.js&#xA; */&#xA;const app = express();&#xA;&#xA;app.use(bodyParser.json());&#xA;app.use(&#34;/api/events&#34;, events.API);&#xA;app.use(&#34;/api/forms&#34;, forms);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Server network declaration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * server.js&#xA; */&#xA;const app = require(&#39;../app&#39;);&#xA;const http = require(&#39;http&#39;);&#xA;&#xA;&#xA;// Get port from environment and store in Express.&#xA;const port = normalizePort(process.env.PORT || &#39;3000&#39;);&#xA;app.set(&#39;port&#39;, port);&#xA;&#xA;&#xA;// Create HTTP server.&#xA;const server = http.createServer(app);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are some of the most popular packages of Node.js?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Async&lt;/td&gt; &#xA;   &lt;td&gt;Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Browserify&lt;/td&gt; &#xA;   &lt;td&gt;Browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bower&lt;/td&gt; &#xA;   &lt;td&gt;Bower is a package manager for the web It works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you&#39;re looking for&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Csv&lt;/td&gt; &#xA;   &lt;td&gt;csv module has four sub modules which provides CSV generation, parsing, transformation and serialization for Node.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Debug&lt;/td&gt; &#xA;   &lt;td&gt;Debug is a tiny node.js debugging utility modelled after node core&#39;s debugging technique&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Express&lt;/td&gt; &#xA;   &lt;td&gt;Express is a fast, un-opinionated, minimalist web framework. It provides small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Grunt&lt;/td&gt; &#xA;   &lt;td&gt;is a JavaScript Task Runner that facilitates creating new projects and makes performing repetitive but necessary tasks such as linting, unit testing, concatenating and minifying files (among other things) trivial&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gulp&lt;/td&gt; &#xA;   &lt;td&gt;is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Hapi&lt;/td&gt; &#xA;   &lt;td&gt;is a streaming build system that helps you automate painful or time-consuming tasks in your development workflow&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Http-server&lt;/td&gt; &#xA;   &lt;td&gt;is a simple, zero-configuration command-line http server. It is powerful enough for production usage, but it&#39;s simple and hackable enough to be used for testing, local development, and learning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Inquirer&lt;/td&gt; &#xA;   &lt;td&gt;A collection of common interactive command line user interfaces&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jquery&lt;/td&gt; &#xA;   &lt;td&gt;jQuery is a fast, small, and feature-rich JavaScript library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jshint&lt;/td&gt; &#xA;   &lt;td&gt;Static analysis tool to detect errors and potential problems in JavaScript code and to enforce your team&#39;s coding conventions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Koa&lt;/td&gt; &#xA;   &lt;td&gt;Koa is web app framework. It is an expressive HTTP middleware for node.js to make web applications and APIs more enjoyable to write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lodash&lt;/td&gt; &#xA;   &lt;td&gt;The lodash library exported as a node module. Lodash is a modern JavaScript utility library delivering modularity, performance, &amp;amp; extras&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Less&lt;/td&gt; &#xA;   &lt;td&gt;The less library exported as a node module&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Moment&lt;/td&gt; &#xA;   &lt;td&gt;A lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mongoose&lt;/td&gt; &#xA;   &lt;td&gt;It is a MongoDB object modeling tool designed to work in an asynchronous environment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB&lt;/td&gt; &#xA;   &lt;td&gt;The official MongoDB driver for Node.js. It provides a high-level API on top of mongodb-core that is meant for end users&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Npm&lt;/td&gt; &#xA;   &lt;td&gt;is package manager for javascript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nodemon&lt;/td&gt; &#xA;   &lt;td&gt;It is a simple monitor script for use during development of a node.js app, It will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Nodemailer&lt;/td&gt; &#xA;   &lt;td&gt;This module enables e-mail sending from a Node.js applications&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Optimist&lt;/td&gt; &#xA;   &lt;td&gt;is a node.js library for option parsing with an argv hash&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Phantomjs&lt;/td&gt; &#xA;   &lt;td&gt;An NPM installer for PhantomJS, headless webkit with JS API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Passport&lt;/td&gt; &#xA;   &lt;td&gt;A simple, unobtrusive authentication middleware for Node.js. Passport uses the strategies to authenticate requests. Strategies can range from verifying username and password credentials or authentication using OAuth or OpenID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Q&lt;/td&gt; &#xA;   &lt;td&gt;Q is a library for promises. A promise is an object that represents the return value or the thrown exception that the function may eventually provide&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Request&lt;/td&gt; &#xA;   &lt;td&gt;Request is Simplified HTTP request client make it possible to make http calls. It supports HTTPS and follows redirects by default&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Socket.io&lt;/td&gt; &#xA;   &lt;td&gt;Its a node.js realtime framework server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sails&lt;/td&gt; &#xA;   &lt;td&gt;Sails is a API-driven framework for building realtime apps, using MVC conventions (based on Express and Socket.io)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Through&lt;/td&gt; &#xA;   &lt;td&gt;It enables simplified stream construction. It is easy way to create a stream that is both readable and writable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Underscore&lt;/td&gt; &#xA;   &lt;td&gt;Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Validator&lt;/td&gt; &#xA;   &lt;td&gt;A nodejs module for a library of string validators and sanitizers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Winston&lt;/td&gt; &#xA;   &lt;td&gt;A multi-transport async logging library for Node.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Ws&lt;/td&gt; &#xA;   &lt;td&gt;A simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Xml2js&lt;/td&gt; &#xA;   &lt;td&gt;A Simple XML to JavaScript object converter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yo&lt;/td&gt; &#xA;   &lt;td&gt;A CLI tool for running Yeoman generators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zmq&lt;/td&gt; &#xA;   &lt;td&gt;Bindings for node.js and io.js to ZeroMQ. It is a high-performance asynchronous messaging library, aimed at use in distributed or concurrent applications&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How can you make sure your dependencies are safe?&lt;/h2&gt; &#xA;&lt;p&gt;The only option is to automate the update / security audit of your dependencies. For that there are free and paid options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;npm outdated&lt;/li&gt; &#xA; &lt;li&gt;Trace by RisingStack&lt;/li&gt; &#xA; &lt;li&gt;NSP&lt;/li&gt; &#xA; &lt;li&gt;GreenKeeper&lt;/li&gt; &#xA; &lt;li&gt;Snyk&lt;/li&gt; &#xA; &lt;li&gt;npm audit&lt;/li&gt; &#xA; &lt;li&gt;npm audit fix&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the security mechanisms available in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Helmet module:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/helmet&#34;&gt;Helmet&lt;/a&gt; helps to secure your Express applications by setting various HTTP headers, like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X-Frame-Options to mitigates clickjacking attacks,&lt;/li&gt; &#xA; &lt;li&gt;Strict-Transport-Security to keep your users on HTTPS,&lt;/li&gt; &#xA; &lt;li&gt;X-XSS-Protection to prevent reflected XSS attacks,&lt;/li&gt; &#xA; &lt;li&gt;X-DNS-Prefetch-Control to disable browsers DNS prefetching.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Helmet&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const helmet = require(&#39;helmet&#39;)&#xA;const app = express()&#xA;&#xA;app.use(helmet())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. JOI module:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Validating user input is one of the most important things to do when it comes to the security of your application. Failing to do it correctly can open up your application and users to a wide range of attacks, including command injection, SQL injection or stored cross-site scripting.&lt;/p&gt; &#xA;&lt;p&gt;To validate user input, one of the best libraries you can pick is joi. &lt;a href=&#34;https://www.npmjs.com/package/joi&#34;&gt;Joi&lt;/a&gt; is an object schema description language and validator for JavaScript objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Joi&#xA; */&#xA;const Joi = require(&#39;joi&#39;);&#xA;&#xA;const schema = Joi.object().keys({&#xA;    username: Joi.string().alphanum().min(3).max(30).required(),&#xA;    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),&#xA;    access_token: [Joi.string(), Joi.number()],&#xA;    birthyear: Joi.number().integer().min(1900).max(2013),&#xA;    email: Joi.string().email()&#xA;}).with(&#39;username&#39;, &#39;birthyear&#39;).without(&#39;password&#39;, &#39;access_token&#39;)&#xA;&#xA;// Return result&#xA;const result = Joi.validate({&#xA;    username: &#39;abc&#39;,&#xA;    birthyear: 1994&#xA;}, schema)&#xA;// result.error === null -&amp;gt; valid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Regular Expressions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Regular Expressions are a great way to manipulate texts and get the parts that you need from them. However, there is an attack vector called Regular Expression Denial of Service attack, which exposes the fact that most Regular Expression implementations may reach extreme situations for specially crafted input, that cause them to work extremely slowly.&lt;/p&gt; &#xA;&lt;p&gt;The Regular Expressions that can do such a thing are commonly referred as Evil Regexes. These expressions contain: *grouping with repetition, *inside the repeated group: *repetition, or *alternation with overlapping&lt;/p&gt; &#xA;&lt;p&gt;Examples of Evil Regular Expressions patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(a+)+&#xA;([a-zA-Z]+)*&#xA;(a|aa)+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Security.txt:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Security.txt defines a standard to help organizations define the process for security researchers to securely disclose security vulnerabilities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;)&#xA;const securityTxt = require(&#39;express-security.txt&#39;)&#xA;&#xA;const app = express()&#xA;&#xA;app.get(&#39;/security.txt&#39;, securityTxt({&#xA;  // your security address&#xA;  contact: &#39;email@example.com&#39;,&#xA;  // your pgp key&#xA;  encryption: &#39;encryption&#39;,&#xA;  // if you have a hall of fame for securty resourcers, include the link here&#xA;  acknowledgements: &#39;http://acknowledgements.example.com&#39;&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is npm in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;NPM stands for Node Package Manager. It provides following two main functionalities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It works as an Online repository for node.js packages/modules which are present at &amp;lt;nodejs.org&amp;gt;.&lt;/li&gt; &#xA; &lt;li&gt;It works as Command line utility to install packages, do version management and dependency management of Node.js packages. NPM comes bundled along with Node.js installable. We can verify its version using the following command-&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NPM helps to install any Node.js module using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install &amp;lt;Module Name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, following is the command to install a famous Node.js web framework module called express-&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install express&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why npm shrinkwrap is useful?&lt;/h2&gt; &#xA;&lt;p&gt;NPM shrinkwrap lets you lock down the ver­sions of installed pack­ages and their descen­dant pack­ages. It helps you use same package versions on all environments (development, staging, production) and also improve download and installation speed.&lt;/p&gt; &#xA;&lt;p&gt;After installing packages using npm install or npm install &lt;code&gt;&amp;lt;package-name&amp;gt;&lt;/code&gt; and updating your &lt;strong&gt;node_modules&lt;/strong&gt; folder, you should run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm shrinkwrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should create new &lt;strong&gt;npm-shrinkwrap.json&lt;/strong&gt; file with information about all packages you use. Next time, when someone calls &lt;strong&gt;npm install&lt;/strong&gt;, it will install packages from &lt;strong&gt;npm-shrinkwrap.json&lt;/strong&gt; and you will have the same environment on all machines.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to handle file upload in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;File can be uploaded to the server using Multer module. Multer is a Node.js middleware which is used for handling multipart/form-data, which is mostly used library for uploading files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Installing the dependencies:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install express body-parser multer --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. server.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * File Upload in Node.js&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const bodyParser = require(&#34;body-parser&#34;);&#xA;const multer = require(&#34;multer&#34;);&#xA;const app = express();&#xA;&#xA;// for text/number data transfer between clientg and server&#xA;app.use(bodyParser());&#xA;&#xA;const storage = multer.diskStorage({&#xA;  destination: function (req, file, callback) {&#xA;    callback(null, &#34;./uploads&#34;);&#xA;  },&#xA;  filename: function (req, file, callback) {&#xA;    callback(null, file.fieldname + &#34;-&#34; + Date.now());&#xA;  },&#xA;});&#xA;&#xA;const upload = multer({ storage: storage }).single(&#34;userPhoto&#34;);&#xA;&#xA;app.get(&#34;/&#34;, function (req, res) {&#xA;  res.sendFile(__dirname + &#34;/index.html&#34;);&#xA;});&#xA;&#xA;// POST: upload for single file upload&#xA;app.post(&#34;/api/photo&#34;, function (req, res) {&#xA;  upload(req, res, function (err) {&#xA;    if (err) {&#xA;      return res.end(&#34;Error uploading file.&#34;);&#xA;    }&#xA;    res.end(&#34;File is uploaded&#34;);&#xA;  });&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(&#34;Listening on port 3000&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. index.html:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;Multer-File-Upload&amp;lt;/title&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;h1&amp;gt;MULTER File Upload | Single File Upload&amp;lt;/h1&amp;gt; &#xA;&#xA;    &amp;lt;form id = &#34;uploadForm&#34;&#xA;         enctype = &#34;multipart/form-data&#34;&#xA;         action = &#34;/api/photo&#34;&#xA;         method = &#34;post&#34;&#xA;    &amp;gt;&#xA;      &amp;lt;input type=&#34;file&#34; name=&#34;userPhoto&#34; /&amp;gt;&#xA;      &amp;lt;input type=&#34;submit&#34; value=&#34;Upload Image&#34; name=&#34;submit&#34;&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain the terms body-parser, cookie-parser, morgan, nodemon, pm2, serve-favicon, cors, dotenv, fs-extra, moment in Express.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. body-parser:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;body-parser&lt;/code&gt; extract the entire body portion of an incoming request stream and exposes it on &lt;code&gt;req.body&lt;/code&gt;. The body-parser module parses the JSON, buffer, string and URL encoded data submitted using HTTP POST request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install body-parser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * body-parser&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const bodyParser = require(&#34;body-parser&#34;);&#xA;&#xA;const app = express();&#xA;&#xA;// create application/json parser&#xA;const jsonParser = bodyParser.json();&#xA;&#xA;// create application/x-www-form-urlencoded parser&#xA;const urlencodedParser = bodyParser.urlencoded({ extended: false });&#xA;&#xA;// POST /login gets urlencoded bodies&#xA;app.post(&#34;/login&#34;, urlencodedParser, function (req, res) {&#xA;  res.send(&#34;welcome, &#34; + req.body.username);&#xA;});&#xA;&#xA;// POST /api/users gets JSON bodies&#xA;app.post(&#34;/api/users&#34;, jsonParser, function (req, res) {&#xA;  // create user in req.body&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. cookie-parser:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A cookie is a piece of data that is sent to the client-side with a request and is stored on the client-side itself by the Web Browser the user is currently using.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cookie-parser&lt;/code&gt; middleware&#39;s cookieParser function takes a &lt;code&gt;secret&lt;/code&gt; string or array of strings as the first argument and an &lt;code&gt;options&lt;/code&gt; object as the second argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install cookie-parser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * cookie-parser&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const cookieParser = require(&#39;cookie-parser&#39;)&#xA;&#xA;const app = express()&#xA;app.use(cookieParser())&#xA;&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  // Cookies that have not been signed&#xA;  console.log(&#39;Cookies: &#39;, req.cookies)&#xA;&#xA;  // Cookies that have been signed&#xA;  console.log(&#39;Signed Cookies: &#39;, req.signedCookies)&#xA;})&#xA;&#xA;app.listen(3000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. morgan:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;HTTP request logger middleware for node.js.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install morgan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Writing logs to a file&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const fs = require(&#39;fs&#39;)&#xA;const morgan = require(&#39;morgan&#39;)&#xA;const path = require(&#39;path&#39;)&#xA;&#xA;const app = express()&#xA;&#xA;// create a write stream (in append mode)&#xA;const accessLogStream = fs.createWriteStream(path.join(__dirname, &#39;access.log&#39;), { flags: &#39;a&#39; })&#xA;&#xA;// setup the logger&#xA;app.use(morgan(&#39;combined&#39;, { stream: accessLogStream }))&#xA;&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;hello, world!&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. nodemon:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nodemon is a utility that will monitor for any changes in source and automatically restart your server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install -g nodemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  // ...&#xA;  &#34;scripts&#34;: {&#xA;    &#34;start&#34;: &#34;nodemon server.js&#34;&#xA;  },&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. pm2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;(rocess) &lt;strong&gt;M&lt;/strong&gt;(anager) &lt;strong&gt;2&lt;/strong&gt; (pm2) is a production process manager for Node.js applications with a built-in load balancer. It allows to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install pm2 -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Start an application:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;pm2 start app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://pm2.keymetrics.io/docs/usage/quick-start/&#34;&gt;https://pm2.keymetrics.io/docs/usage/quick-start/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. serve-favicon:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js middleware for serving a favicon. It create new middleware to serve a favicon from the given path to a favicon file. &lt;strong&gt;path&lt;/strong&gt; may also be a Buffer of the icon to serve.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install serve-favicon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * serve-favicon&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const favicon = require(&#39;serve-favicon&#39;)&#xA;const path = require(&#39;path&#39;)&#xA;&#xA;const app = express()&#xA;app.use(favicon(path.join(__dirname, &#39;public&#39;, &#39;favicon.ico&#39;)))&#xA;&#xA;// Add your routes here, etc.&#xA;&#xA;app.listen(3000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;7. cors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ross-&lt;strong&gt;O&lt;/strong&gt;rigin &lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;S&lt;/strong&gt;haring (CORS) headers allow apps running in the browser to make requests to servers on different domains (also known as origins). CORS headers are set on the server side - the HTTP server is responsible for indicating that a given HTTP request can be cross-origin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install cors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Enable CORS for a Single Route&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const cors = require(&#39;cors&#39;)&#xA;const app = express()&#xA;&#xA;app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) {&#xA;  res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;})&#xA;})&#xA;&#xA;app.listen(8080, function () {&#xA;  console.log(&#39;CORS-enabled web server listening on port 80&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;8. dotenv:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a NodeJs application runs, it injects a global variable called &lt;code&gt;process.env&lt;/code&gt; which contains information about the state of environment in which the application is running. The &lt;code&gt;dotenv&lt;/code&gt; loads environment variables stored in the &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install dotenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// .env&#xA;&#xA;DB_HOST=localhost&#xA;DB_USER=admin&#xA;DB_PASS=root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * config.js&#xA; */&#xA;const db = require(&#39;db&#39;)&#xA;&#xA;db.connect({&#xA;  host: process.env.DB_HOST,&#xA;  username: process.env.DB_USER,&#xA;  password: process.env.DB_PASS&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;9. fs-extra:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fs-extra&lt;/code&gt; contains methods that aren&#39;t included in the vanilla Node.js fs package. Such as recursive &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt;. It also uses graceful-fs to prevent &lt;code&gt;EMFILE&lt;/code&gt; errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install fs-extra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * fs-extra&#xA; */&#xA;const fs = require(&#39;fs-extra&#39;)&#xA;&#xA;// Async with callbacks:&#xA;fs.copy(&#39;/tmp/myfile&#39;, &#39;/tmp/mynewfile&#39;, err =&amp;gt; {&#xA;  if (err) return console.error(err)&#xA;  console.log(&#39;success!&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;10. moment:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install moment --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format Dates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const moment = require(&#39;moment&#39;);&#xA;&#xA;moment().format(&#39;MMMM Do YYYY, h:mm:ss a&#39;); // October 24th 2022, 3:15:22 pm&#xA;moment().format(&#39;dddd&#39;);                    // Saturday&#xA;moment().format(&#34;MMM Do YY&#34;);               // Oct 24th 22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Relative Time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const moment = require(&#39;moment&#39;);&#xA;&#xA;moment(&#34;20111031&#34;, &#34;YYYYMMDD&#34;).fromNow(); // 9 years ago&#xA;moment(&#34;20120620&#34;, &#34;YYYYMMDD&#34;).fromNow(); // 8 years ago&#xA;moment().startOf(&#39;day&#39;).fromNow();        // 15 hours ago&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Calendar Time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const moment = require(&#39;moment&#39;);&#xA;&#xA;moment().subtract(10, &#39;days&#39;).calendar(); // 10/14/2022&#xA;moment().subtract(6, &#39;days&#39;).calendar();  // Last Sunday at 3:18 PM&#xA;moment().subtract(3, &#39;days&#39;).calendar();  // Last Wednesday at 3:18 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 11. NODE.JS RESTFUL API&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. Explain RESTful Web Services in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It is an architectural style as well as an approach for communications purposes that is often used in various web services development. A REST Server simply provides access to resources and REST client accesses and modifies the resources using HTTP protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTTP methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; − Provides read-only access to a resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; − Updates an existing resource or creates a new resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; − Removes a resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; − Creates a new resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;− Update/modify a resource&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// users.json&#xA;{&#xA;   &#34;user1&#34; : {&#xA;      &#34;id&#34;: 1,&#xA;      &#34;name&#34; : &#34;Ehsan Philip&#34;,&#xA;      &#34;age&#34; : 24&#xA;   },&#xA;&#xA;   &#34;user2&#34; : {&#xA;      &#34;id&#34;: 2,&#xA;      &#34;name&#34; : &#34;Karim Jimenez&#34;,&#xA;      &#34;age&#34; : 22&#xA;   },&#xA;&#xA;   &#34;user3&#34; : {&#xA;      &#34;id&#34;: 3,&#xA;      &#34;name&#34; : &#34;Giacomo Weir&#34;,&#xA;      &#34;age&#34; : 18&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;List Users&lt;/strong&gt; ( &lt;code&gt;GET&lt;/code&gt; method)&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s implement our first RESTful API listUsers using the following code in a server.js file −&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;const fs = require(&#34;fs&#34;);&#xA;&#xA;app.get(&#39;/listUsers&#39;, function (req, res) {&#xA;   fs.readFile( __dirname + &#34;/&#34; + &#34;users.json&#34;, &#39;utf8&#39;, function (err, data) {&#xA;      console.log( data );&#xA;      res.end( data );&#xA;   });&#xA;})&#xA;&#xA;const server = app.listen(3000, function () {&#xA;   const host = server.address().address&#xA;   const port = server.address().port&#xA;   console.log(&#34;App listening at http://%s:%s&#34;, host, port)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add User&lt;/strong&gt; ( &lt;code&gt;POST&lt;/code&gt; method )&lt;/p&gt; &#xA;&lt;p&gt;Following API will show you how to add new user in the list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;const fs = require(&#34;fs&#34;);&#xA;&#xA;const user = {&#xA;   &#34;user4&#34; : {&#xA;      &#34;id&#34;: 4,&#xA;      &#34;name&#34; : &#34;Spencer Amos&#34;,&#xA;      &#34;age&#34; : 28&#xA;   }&#xA;}&#xA;&#xA;app.post(&#39;/addUser&#39;, function (req, res) {&#xA;   // First read existing users.&#xA;   fs.readFile( __dirname + &#34;/&#34; + &#34;users.json&#34;, &#39;utf8&#39;, function (err, data) {&#xA;      data = JSON.parse( data );&#xA;      data[&#34;user4&#34;] = user[&#34;user4&#34;];&#xA;      console.log( data );&#xA;      res.end( JSON.stringify(data));&#xA;   });&#xA;})&#xA;&#xA;const server = app.listen(3000, function () {&#xA;   const host = server.address().address&#xA;   const port = server.address().port&#xA;   console.log(&#34;App listening at http://%s:%s&#34;, host, port)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delete User:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;const fs = require(&#34;fs&#34;);&#xA;&#xA;const id = 2;&#xA;&#xA;app.delete(&#39;/deleteUser&#39;, function (req, res) {&#xA;   // First read existing users.&#xA;   fs.readFile( __dirname + &#34;/&#34; + &#34;users.json&#34;, &#39;utf8&#39;, function (err, data) {&#xA;      data = JSON.parse( data );&#xA;      delete data[&#34;user&#34; + 2];&#xA;      console.log( data );&#xA;      res.end( JSON.stringify(data));&#xA;   });&#xA;})&#xA;&#xA;const server = app.listen(3000, function () {&#xA;   const host = server.address().address&#xA;   const port = server.address().port&#xA;   console.log(&#34;App listening at http://%s:%s&#34;, host, port)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the difference between req.params and req.query?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;req.params&lt;/strong&gt; are a part of a path in URL and they&#39;re also known as URL variables. for example, if you have the route &lt;strong&gt;/books/:id&lt;/strong&gt;, then the &lt;strong&gt;id&lt;/strong&gt; property will be available as &lt;strong&gt;req.params.id&lt;/strong&gt;. req.params default value is an empty object {}.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;req.query&lt;/strong&gt; is a part of a URL that assigns values to specified parameters. A query string commonly includes fields added to a base URL by a Web browser or other client application, for example as part of an HTML form. A query is the last part of URL&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 01:&lt;/strong&gt; req.params&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * req.params&#xA; */&#xA;&#xA;// GET  http://localhost:3000/employees/10&#xA;&#xA;app.get(&#39;/employees/:id&#39;, (req, res, next) =&amp;gt; {&#xA;   console.log(req.params.id); // 10&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 02:&lt;/strong&gt; req.query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * req.query&#xA; */&#xA;&#xA;// GET  http://localhost:3000/employees?page=20&#xA;&#xA;app.get(&#39;/employees&#39;, (req, res, next) =&amp;gt; {&#xA;  console.log(req.query.page) // 20&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to make post request in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Following code snippet can be used to make a Post Request in Node.js.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * POST Request&#xA; */&#xA;const request = require(&#34;request&#34;);&#xA;&#xA;request.post(&#34;http://localhost:3000/action&#34;,  { form: { key: &#34;value&#34; } },&#xA;  function (error, response, body) {&#xA;    if (!error &amp;amp;&amp;amp; response.statusCode === 200) {&#xA;      console.log(body);&#xA;    }&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are Promises in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;It allows to associate handlers to an asynchronous action&#39;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a promise for the value at some point in the future.&lt;/p&gt; &#xA;&lt;p&gt;Promises in node.js promised to do some work and then had separate callbacks that would be executed for success and failure as well as handling timeouts. Another way to think of promises in node.js was that they were emitters that could emit only two events: success and error.The cool thing about promises is you can combine them into dependency chains (do Promise C only when Promise A and Promise B complete).&lt;/p&gt; &#xA;&lt;p&gt;The core idea behind promises is that a promise represents the result of an asynchronous operation. A promise is in one of three different states:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pending - The initial state of a promise.&lt;/li&gt; &#xA; &lt;li&gt;fulfilled - The state of a promise representing a successful operation.&lt;/li&gt; &#xA; &lt;li&gt;rejected - The state of a promise representing a failed operation. Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Creating a Promise:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const myPromise = new Promise(function(resolve, reject){&#xA;   ....&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How can you secure your HTTP cookies against XSS attacks?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; When the web server sets cookies, it can provide some additional attributes to make sure the cookies won&#39;t be accessible by using malicious JavaScript. One such attribute is HttpOnly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Set-Cookie: [name]=[value]; HttpOnly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HttpOnly makes sure the cookies will be submitted only to the domain they originated from.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The &#34;Secure&#34; attribute can make sure the cookies are sent over secured channel only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Set-Cookie: [name]=[value]; Secure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The web server can use X-XSS-Protection response header to make sure pages do not load when they detect reflected cross-site scripting (XSS) attacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;X-XSS-Protection: 1; mode=block&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; The web server can use HTTP Content-Security-Policy response header to control what resources a user agent is allowed to load for a certain page. It can help to prevent various types of attacks like Cross Site Scripting (XSS) and data injection attacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Content-Security-Policy: default-src &#39;self&#39; *.http://sometrustedwebsite.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to make an HTTP POST request using Node.js?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const https = require(&#39;https&#39;)&#xA;&#xA;&#xA;const obj = {&#xA;    &#34;userId&#34;:1,&#xA;    &#34;id&#34;:1,&#xA;    &#34;title&#34;:&#34;whatever&#34;,&#xA;    &#34;completed&#34;:false&#xA;}&#xA;&#xA;const data = JSON.stringify(obj)&#xA;&#xA;const options = {&#xA;  hostname: &#39;jsonplaceholder.typicode.com&#39;,&#xA;  port: 443,&#xA;  path: &#39;/todos&#39;,&#xA;  method: &#39;POST&#39;,&#xA;  headers: {&#xA;    &#39;Content-Type&#39;: &#39;application/json&#39;,&#xA;    &#39;Content-Length&#39;: data.length&#xA;  }&#xA;}&#xA;&#xA;const req = https.request(options, res =&amp;gt; {&#xA;  console.log(`statusCode: ${res.statusCode}`)&#xA;&#xA;  res.on(&#39;data&#39;, d =&amp;gt; {&#xA;    process.stdout.write(d)&#xA;  })&#xA;})&#xA;&#xA;req.on(&#39;error&#39;, error =&amp;gt; {&#xA;  console.error(error)&#xA;})&#xA;&#xA;req.write(data)&#xA;req.end()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is asynchronous programming in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Asynchronous programming is a form of parallel programming that allows a unit of work to run separately from the primary application thread. When the work is complete, it notifies the main thread (as well as whether the work was completed or failed). There are numerous benefits to using it, such as improved application performance and enhanced responsiveness.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the difference between Asynchronous and Non-blocking?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Asynchronous:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The architecture of asynchronous explains that the message sent will not give the reply on immediate basis just like we send the mail but do not get the reply on an immediate basis. It does not have any dependency or order. Hence improving the system efficiency and performance. The server stores the information and when the action is done it will be notified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Non-Blocking:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nonblocking immediately responses with whatever data available. Moreover, it does not block any execution and keeps on running as per the requests. If an answer could not be retrieved then in those cases API returns immediately with an error. Nonblocking is mostly used with I/O(input/output). Node.js is itself based on nonblocking I/O model. There are few ways of communication that a nonblocking I/O has completed. The callback function is to be called when the operation is completed. Nonblocking call uses the help of javascript which provides a callback function.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How node.js prevents blocking code?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blocking vs Non-blocking:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blocking&lt;/strong&gt; is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes. This happens because the event loop is unable to continue running JavaScript while a &lt;strong&gt;blocking&lt;/strong&gt; operation is occurring.&lt;/p&gt; &#xA;&lt;p&gt;Synchronous methods in the Node.js standard library that use &lt;strong&gt;libuv&lt;/strong&gt; are the most commonly used blocking operations. Native modules may also have blocking methods. Blocking methods execute &lt;code&gt;synchronously&lt;/code&gt; and non-blocking methods execute &lt;code&gt;asynchronously&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Blocking&#xA;const fs = require(&#39;fs&#39;);&#xA;const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read&#xA;console.log(data);&#xA;moreWork(); // will run after console.log&#xA;&#xA;// Non-blocking&#xA;const fs = require(&#39;fs&#39;);&#xA;fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {&#xA;  if (err) throw err;&#xA;  console.log(data);&#xA;});&#xA;moreWork(); // will run before console.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Name the types of API functions in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;There are two types of API functions in Node.js:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asynchronous, Non-blocking functions&lt;/li&gt; &#xA; &lt;li&gt;Synchronous, Blocking functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Blocking functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In a blocking operation, all other code is blocked from executing until an I/O event that is being waited on occurs. Blocking functions execute synchronously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read&#xA;console.log(data);&#xA;// moreWork(); will run after console.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second line of code blocks the execution of additional JavaScript until the entire file is read. moreWork () will only be called after Console.log&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Non-blocking functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In a non-blocking operation, multiple I/O calls can be performed without the execution of the program being halted. Non-blocking functions execute asynchronously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {&#xA;  if (err) throw err;&#xA;  console.log(data);&#xA;});&#xA;// moreWork(); will run before console.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;fs.readFile()&lt;/code&gt; is non-blocking, moreWork() does not have to wait for the file read to complete before being called. This allows for higher throughput.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is difference between put and patch?&lt;/h2&gt; &#xA;&lt;p&gt;PUT and PATCH are HTTP verbs and they both relate to updating a resource. The main difference between PUT and PATCH requests are in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.&lt;/p&gt; &#xA;&lt;p&gt;In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced.&lt;/p&gt; &#xA;&lt;p&gt;With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.&lt;/p&gt; &#xA;&lt;p&gt;Also, another difference is that when you want to update a resource with PUT request, you have to send the full payload as the request whereas with PATCH, you only send the parameters which you want to update.&lt;/p&gt; &#xA;&lt;p&gt;The most commonly used HTTP verbs POST, GET, PUT, DELETE are similar to CRUD (Create, Read, Update and Delete) operations in database. We specify these HTTP verbs in the capital case. So, the below is the comparison between them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; - create&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; - read&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; - update&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; - delete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: Submits a partial modification to a resource. If you only need to update one field for the resource, you may want to use the PATCH method.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. List types of Http requests supported by Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The HTTP core module is a key module to Node.js networking.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const http = require(&#39;http&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;http.METHODS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;http&#39;).METHODS&#xA;[ &#39;ACL&#39;,&#xA;  &#39;BIND&#39;,&#xA;  &#39;CHECKOUT&#39;,&#xA;  &#39;CONNECT&#39;,&#xA;  &#39;COPY&#39;,&#xA;  &#39;DELETE&#39;,&#xA;  &#39;GET&#39;,&#xA;  &#39;HEAD&#39;,&#xA;  &#39;LINK&#39;,&#xA;  &#39;LOCK&#39;,&#xA;  &#39;M-SEARCH&#39;,&#xA;  &#39;MERGE&#39;,&#xA;  &#39;MKACTIVITY&#39;,&#xA;  &#39;MKCALENDAR&#39;,&#xA;  &#39;MKCOL&#39;,&#xA;  &#39;MOVE&#39;,&#xA;  &#39;NOTIFY&#39;,&#xA;  &#39;OPTIONS&#39;,&#xA;  &#39;PATCH&#39;,&#xA;  &#39;POST&#39;,&#xA;  &#39;PROPFIND&#39;,&#xA;  &#39;PROPPATCH&#39;,&#xA;  &#39;PURGE&#39;,&#xA;  &#39;PUT&#39;,&#xA;  &#39;REBIND&#39;,&#xA;  &#39;REPORT&#39;,&#xA;  &#39;SEARCH&#39;,&#xA;  &#39;SUBSCRIBE&#39;,&#xA;  &#39;TRACE&#39;,&#xA;  &#39;UNBIND&#39;,&#xA;  &#39;UNLINK&#39;,&#xA;  &#39;UNLOCK&#39;,&#xA;  &#39;UNSUBSCRIBE&#39; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;http.STATUS_CODES&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;http&#39;).STATUS_CODES&#xA;{ &#39;100&#39;: &#39;Continue&#39;,&#xA;&#39;101&#39;: &#39;Switching Protocols&#39;,&#xA;&#39;102&#39;: &#39;Processing&#39;,&#xA;&#39;200&#39;: &#39;OK&#39;,&#xA;&#39;201&#39;: &#39;Created&#39;,&#xA;&#39;202&#39;: &#39;Accepted&#39;,&#xA;&#39;203&#39;: &#39;Non-Authoritative Information&#39;,&#xA;&#39;204&#39;: &#39;No Content&#39;,&#xA;&#39;205&#39;: &#39;Reset Content&#39;,&#xA;&#39;206&#39;: &#39;Partial Content&#39;,&#xA;&#39;207&#39;: &#39;Multi-Status&#39;,&#xA;&#39;208&#39;: &#39;Already Reported&#39;,&#xA;&#39;226&#39;: &#39;IM Used&#39;,&#xA;&#39;300&#39;: &#39;Multiple Choices&#39;,&#xA;&#39;301&#39;: &#39;Moved Permanently&#39;,&#xA;&#39;302&#39;: &#39;Found&#39;,&#xA;&#39;303&#39;: &#39;See Other&#39;,&#xA;&#39;304&#39;: &#39;Not Modified&#39;,&#xA;&#39;305&#39;: &#39;Use Proxy&#39;,&#xA;&#39;307&#39;: &#39;Temporary Redirect&#39;,&#xA;&#39;308&#39;: &#39;Permanent Redirect&#39;,&#xA;&#39;400&#39;: &#39;Bad Request&#39;,&#xA;&#39;401&#39;: &#39;Unauthorized&#39;,&#xA;&#39;402&#39;: &#39;Payment Required&#39;,&#xA;&#39;403&#39;: &#39;Forbidden&#39;,&#xA;&#39;404&#39;: &#39;Not Found&#39;,&#xA;&#39;405&#39;: &#39;Method Not Allowed&#39;,&#xA;&#39;406&#39;: &#39;Not Acceptable&#39;,&#xA;&#39;407&#39;: &#39;Proxy Authentication Required&#39;,&#xA;&#39;408&#39;: &#39;Request Timeout&#39;,&#xA;&#39;409&#39;: &#39;Conflict&#39;,&#xA;&#39;410&#39;: &#39;Gone&#39;,&#xA;&#39;411&#39;: &#39;Length Required&#39;,&#xA;&#39;412&#39;: &#39;Precondition Failed&#39;,&#xA;&#39;413&#39;: &#39;Payload Too Large&#39;,&#xA;&#39;414&#39;: &#39;URI Too Long&#39;,&#xA;&#39;415&#39;: &#39;Unsupported Media Type&#39;,&#xA;&#39;416&#39;: &#39;Range Not Satisfiable&#39;,&#xA;&#39;417&#39;: &#39;Expectation Failed&#39;,&#xA;&#39;418&#39;: &#39;I\&#39;m a teapot&#39;,&#xA;&#39;421&#39;: &#39;Misdirected Request&#39;,&#xA;&#39;422&#39;: &#39;Unprocessable Entity&#39;,&#xA;&#39;423&#39;: &#39;Locked&#39;,&#xA;&#39;424&#39;: &#39;Failed Dependency&#39;,&#xA;&#39;425&#39;: &#39;Unordered Collection&#39;,&#xA;&#39;426&#39;: &#39;Upgrade Required&#39;,&#xA;&#39;428&#39;: &#39;Precondition Required&#39;,&#xA;&#39;429&#39;: &#39;Too Many Requests&#39;,&#xA;&#39;431&#39;: &#39;Request Header Fields Too Large&#39;,&#xA;&#39;451&#39;: &#39;Unavailable For Legal Reasons&#39;,&#xA;&#39;500&#39;: &#39;Internal Server Error&#39;,&#xA;&#39;501&#39;: &#39;Not Implemented&#39;,&#xA;&#39;502&#39;: &#39;Bad Gateway&#39;,&#xA;&#39;503&#39;: &#39;Service Unavailable&#39;,&#xA;&#39;504&#39;: &#39;Gateway Timeout&#39;,&#xA;&#39;505&#39;: &#39;HTTP Version Not Supported&#39;,&#xA;&#39;506&#39;: &#39;Variant Also Negotiates&#39;,&#xA;&#39;507&#39;: &#39;Insufficient Storage&#39;,&#xA;&#39;508&#39;: &#39;Loop Detected&#39;,&#xA;&#39;509&#39;: &#39;Bandwidth Limit Exceeded&#39;,&#xA;&#39;510&#39;: &#39;Not Extended&#39;,&#xA;&#39;511&#39;: &#39;Network Authentication Required&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Making HTTP Requests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const request = require(&#39;request&#39;);&#xA;&#xA;request(&#39;https://nodejs.org/&#39;, function(err, res, body) {&#xA;    console.log(body);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument to request can either be a URL string, or an object of options. Here are some of the more common options you&#39;ll encounter in your applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt;: The destination URL of the HTTP request&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt;: The HTTP method to be used (GET, POST, DELETE, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt;: An object of HTTP headers (key-value) to be set in the request&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;form&lt;/strong&gt;: An object containing key-value form data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const request = require(&#39;request&#39;);&#xA;&#xA;const options = {&#xA;    url: &#39;https://nodejs.org/file.json&#39;,&#xA;    method: &#39;GET&#39;,&#xA;    headers: {&#xA;        &#39;Accept&#39;: &#39;application/json&#39;,&#xA;        &#39;Accept-Charset&#39;: &#39;utf-8&#39;,&#xA;        &#39;User-Agent&#39;: &#39;my-reddit-client&#39;&#xA;    }&#xA;};&#xA;&#xA;request(options, function(err, res, body) {&#xA;    let json = JSON.parse(body);&#xA;    console.log(json);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the options object, this request uses the GET method to retrieve JSON data directly from Reddit, which is returned as a string in the body field. From here, you can use &lt;code&gt;JSON.parse&lt;/code&gt; and use the data as a normal JavaScript object.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is difference between promises and async-await in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Promises:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A promise is used to handle the asynchronous result of an operation. JavaScript is designed to not wait for an asynchronous block of code to completely execute before other synchronous parts of the code can run. With Promises, we can defer the execution of a code block until an async request is completed. This way, other operations can keep running without interruption.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;States of Promises:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Pending&lt;/code&gt;: Initial State, before the Promise succeeds or fails.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Resolved&lt;/code&gt;: Completed Promise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Rejected&lt;/code&gt;: Failed Promise, throw an error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function logFetch(url) {&#xA;  return fetch(url)&#xA;    .then(response =&amp;gt; {&#xA;      console.log(response);&#xA;    })&#xA;    .catch(err =&amp;gt; {&#xA;      console.error(&#39;fetch failed&#39;, err);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Async-Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Await&lt;/code&gt; is basically syntactic sugar for &lt;strong&gt;Promises&lt;/strong&gt;. It makes asynchronous code look more like synchronous/procedural code, which is easier for humans to understand.&lt;/p&gt; &#xA;&lt;p&gt;Putting the keyword &lt;code&gt;async&lt;/code&gt; before a function tells the function to return a Promise. If the code returns something that is not a &lt;code&gt;Promise&lt;/code&gt;, then JavaScript automatically wraps it into a resolved promise with that value. The &lt;code&gt;await&lt;/code&gt; keyword simply makes JavaScript wait until that &lt;code&gt;Promise&lt;/code&gt; settles and then returns its result.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;async function logFetch(url) {&#xA;  try {&#xA;    const response = await fetch(url);&#xA;    console.log(response);&#xA;  }&#xA;  catch (err) {&#xA;    console.log(&#39;fetch failed&#39;, err);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Mention the steps by which you can async in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;ES 2017 introduced Asynchronous functions. Async functions are essentially a cleaner way to work with asynchronous code in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Async/Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The newest way to write asynchronous code in JavaScript.&lt;/li&gt; &#xA; &lt;li&gt;It is non blocking (just like promises and callbacks).&lt;/li&gt; &#xA; &lt;li&gt;Async/Await was created to simplify the process of working with and writing chained promises.&lt;/li&gt; &#xA; &lt;li&gt;Async functions return a Promise. If the function throws an error, the Promise will be rejected. If the function returns a value, the Promise will be resolved.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Syntax&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Normal Function&#xA;function add(x,y){&#xA;  return x + y;&#xA;}&#xA;// Async Function&#xA;async function add(x,y){&#xA;  return x + y;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Async functions can make use of the await expression. This will pause the async function and wait for the Promise to resolve prior to moving on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function doubleAfter2Seconds(x) {&#xA;  return new Promise(resolve =&amp;gt; {&#xA;    setTimeout(() =&amp;gt; {&#xA;      resolve(x * 2);&#xA;    }, 2000);&#xA;  });&#xA;}&#xA;&#xA;async function addAsync(x) {&#xA;  const a = await doubleAfter2Seconds(10);&#xA;  const b = await doubleAfter2Seconds(20);&#xA;  const c = await doubleAfter2Seconds(30);&#xA;  return x + a + b + c;&#xA;}&#xA;&#xA;&#xA;addAsync(10).then((sum) =&amp;gt; {&#xA;  console.log(sum);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to use Q promise in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A promise is an object that represents the return value or the thrown exception that the function may eventually provide. A promise can also be used as a proxy for a remote object to overcome latency.&lt;/p&gt; &#xA;&lt;p&gt;Promise is relatively an easy implementation for asynchronous operation. The promise object returned from the function represents an operation which is not completed yet, but it guarantees to the caller of the operation that the operation will be completed in future.&lt;/p&gt; &#xA;&lt;p&gt;Promise has the following states:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pending&lt;/strong&gt; - asynchronous operation is not yet completed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fulfilled&lt;/strong&gt; - asynchronous operation is completed successfully.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rejected&lt;/strong&gt; - asynchronous operation is terminated with an error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Settled&lt;/strong&gt; - asynchronous operation is either fulfilled or rejected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Callback&lt;/strong&gt; - function is executed if the promise is executed with value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Errback&lt;/strong&gt; - function is executed if the promise is rejected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Moving to Promises from Callback&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the first pass, promises can mitigate the &lt;strong&gt;Pyramid of Doom&lt;/strong&gt;: the situation where code marches to the right faster than it marches forward.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;step1(function (value1) {&#xA;    step2(value1, function(value2) {&#xA;        step3(value2, function(value3) {&#xA;            step4(value3, function(value4) {&#xA;                // Do something with value4&#xA;            });&#xA;        });&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a promise library, it can flatten the pyramid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Q.fcall(promisedStep1)&#xA;.then(promisedStep2)&#xA;.then(promisedStep3)&#xA;.then(promisedStep4)&#xA;.then(function (value4) {&#xA;    // Do something with value4&#xA;})&#xA;.catch(function (error) {&#xA;    // Handle any error from all above steps&#xA;})&#xA;.done();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.npmjs.com/package/q&#34;&gt;https://www.npmjs.com/package/q&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are async functions in Node?&lt;/h2&gt; &#xA;&lt;h4&gt;Q. How do you convert an existing callback API to promises?&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 12. NODE.JS ROUTING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How does routing work in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Routing defines the way in which the client requests are handled by the application endpoints. We define routing using methods of the Express app object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle &lt;code&gt;GET&lt;/code&gt; requests and &lt;code&gt;app.post&lt;/code&gt; to handle &lt;code&gt;POST&lt;/code&gt; requests, &lt;code&gt;app.all()&lt;/code&gt; to handle all HTTP methods and &lt;code&gt;app.use()&lt;/code&gt; to specify middleware as the callback function.&lt;/p&gt; &#xA;&lt;p&gt;These routing methods &#34;listens&#34; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.METHOD(PATH, HANDLER)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;app is an instance of express.&lt;/li&gt; &#xA; &lt;li&gt;METHOD is an &lt;code&gt;HTTP request method&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PATH is a path on the server.&lt;/li&gt; &#xA; &lt;li&gt;HANDLER is the function executed when the route is matched.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;a) Route methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// GET method route&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;GET request&#39;)&#xA;})&#xA;&#xA;// POST method route&#xA;app.post(&#39;/login&#39;, function (req, res) {&#xA;  res.send(&#39;POST request&#39;)&#xA;})&#xA;&#xA;// ALL method route&#xA;app.all(&#39;/secret&#39;, function (req, res, next) {&#xA;  console.log(&#39;Accessing the secret section ...&#39;)&#xA;  next() // pass control to the next handler&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;b) Route paths:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Route paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.&lt;/p&gt; &#xA;&lt;p&gt;The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen &lt;code&gt;(-)&lt;/code&gt; and the dot &lt;code&gt;(.)&lt;/code&gt; are interpreted literally by string-based paths.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// This route path will match requests to /about.&#xA;app.get(&#39;/about&#39;, function (req, res) {&#xA;  res.send(&#39;about&#39;)&#xA;})&#xA;&#xA;&#xA;// This route path will match acd and abcd.&#xA;app.get(&#39;/ab?cd&#39;, function (req, res) {&#xA;  res.send(&#39;ab?cd&#39;)&#xA;})&#xA;&#xA;&#xA;// This route path will match butterfly and dragonfly&#xA;app.get(/.*fly$/, function (req, res) {&#xA;  res.send(&#39;/.*fly$/&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;c) Route parameters:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the &lt;code&gt;req.params&lt;/code&gt; object, with the name of the route parameter specified in the path as their respective keys.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.get(&#39;/users/:userId&#39;, function (req, res) {&#xA;  res.send(req.params)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.download()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt a file to be downloaded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.end()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;End the response process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.json()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a JSON response.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.jsonp()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a JSON response with JSONP support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.redirect()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redirect a request.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.render()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Render a view template.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.send()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a response of various types.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.sendFile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a file as an octet stream.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.sendStatus()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the response status code and send its string representation as the response body.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;d) Router method:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;)&#xA;const router = express.Router()&#xA;&#xA;// middleware that is specific to this router&#xA;router.use(function timeLog (req, res, next) {&#xA;  console.log(&#39;Time: &#39;, Date.now())&#xA;  next()&#xA;})&#xA;&#xA;// define the home page route&#xA;router.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;Birds home page&#39;)&#xA;})&#xA;&#xA;// define the about route&#xA;router.get(&#39;/about&#39;, function (req, res) {&#xA;  res.send(&#39;About birds&#39;)&#xA;})&#xA;&#xA;module.exports = router&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 13. NODE.JS CACHING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;# 14. NODE.JS ERROR HANDLING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Unhandled exceptions in Node.js can be caught at the Process level by attaching a handler for uncaughtException event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;process.on(&#39;uncaughtException&#39;, function(err) {&#xA;    console.log(&#39;Caught exception: &#39; + err);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Process is a global object that provides information about the current Node.js process. Process is a listener function that is always listening to events.&lt;/p&gt; &#xA;&lt;p&gt;Few events are :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Exit&lt;/li&gt; &#xA; &lt;li&gt;disconnect&lt;/li&gt; &#xA; &lt;li&gt;unhandledException&lt;/li&gt; &#xA; &lt;li&gt;rejectionHandled&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Q. Explain Error Handling approaches in Node.js?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. How would you handle errors for async code in Node.js?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. How to solve &#34;Process out of Memory Exception&#34; in Node.js?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. What are the types of memory leaks in node.js&lt;/h4&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 15. NODE.JS LOGGING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to debug an application in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. node-inspector:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install -g node-inspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;node-debug app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Debugging:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugger&lt;/li&gt; &#xA; &lt;li&gt;Node Inspector&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio Code&lt;/li&gt; &#xA; &lt;li&gt;Cloud9&lt;/li&gt; &#xA; &lt;li&gt;Brackets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Profiling:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1. node --prof ./app.js&#xA;2. node --prof-process ./the-generated-log-file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Heapdumps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;node-heapdump with Chrome Developer Tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Tracing:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive Stack Traces with TraceGL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Logging:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Libraries that output debugging information&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Caterpillar&lt;/li&gt; &#xA; &lt;li&gt;Tracer&lt;/li&gt; &#xA; &lt;li&gt;scribbles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libraries that enhance stack trace information&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Longjohn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 16. NODE.JS INTERNATIONALIZATION&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Q. How to use locale (i18n) in Node.js?&lt;/h4&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 17. NODE.JS TESTING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is a stub?&lt;/h2&gt; &#xA;&lt;p&gt;Stubbing and verification for node.js tests. Enables you to validate and override behaviour of nested pieces of code such as methods, require() and npm modules or even instances of classes. This library is inspired on node-gently, MockJS and mock-require.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features of Stub:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Produces simple, lightweight Objects capable of extending down their tree&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Nodejs&lt;/li&gt; &#xA; &lt;li&gt;Easily extendable directly or through an ExtensionManager&lt;/li&gt; &#xA; &lt;li&gt;Comes with predefined, usable extensions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Stubs are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.&lt;/p&gt; &#xA;&lt;p&gt;A use-case can be a file read, when you do not want to read an actual file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;&#xA;const readFileStub = sinon.stub(fs, &#39;readFile&#39;, function (path, cb) {  &#xA;  return cb(null, &#39;filecontent&#39;);&#xA;});&#xA;&#xA;expect(readFileStub).to.be.called;  &#xA;readFileStub.restore();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is a test pyramid?&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;Test Pyramid&#34; is a metaphor that tells us to group software tests into buckets of different granularity. It also gives an idea of how many tests we should have in each of these groups. It shows which kinds of tests you should be looking for in the different levels of the pyramid and gives practical examples on how these can be implemented.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/assets/testPyramid.png&#34; alt=&#34;Test Pyramid&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Mike Cohn&#39;s original test pyramid consists of three layers that your test suite should consist of (bottom to top):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unit Tests&lt;/li&gt; &#xA; &lt;li&gt;Service Tests&lt;/li&gt; &#xA; &lt;li&gt;User Interface Tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to use Joi module for schema validation in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Joi module is a popular module for data validation. This module validates the data based on schemas. There are various functions like optional(), required(), min(), max(), etc which make it easy to use and a user-friendly module for validating the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Joi = require(&#34;joi&#34;);&#xA;&#xA;// User-defined function to validate the user&#xA;&#xA;function validateUser(user) {&#xA;&#xA;  const JoiSchema = Joi.object({&#xA;&#xA;    username: Joi.string().min(5).max(30).required(),&#xA;&#xA;    email: Joi.string().email().min(5).max(50).optional(),&#xA;&#xA;    date_of_birth: Joi.date().optional(),&#xA;&#xA;    account_status: Joi.string()&#xA;      .valid(&#34;activated&#34;)&#xA;      .valid(&#34;unactivated&#34;)&#xA;      .optional(),&#xA;  }).options({ abortEarly: false });&#xA;&#xA;  return JoiSchema.validate(user);&#xA;}&#xA;&#xA;const user = {&#xA;  username: &#34;Deepak Lucky&#34;,&#xA;  email: &#34;deepak.lucky@gmail.com&#34;,&#xA;  date_of_birth: &#34;2000-07-07&#34;,&#xA;  account_status: &#34;activated&#34;,&#xA;};&#xA;&#xA;let response = validateUser(user);&#xA;&#xA;if (response.error) {&#xA;  console.log(response.error.details);&#xA;} else {&#xA;  console.log(&#34;Validated Data&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚝ &lt;a href=&#34;https://codesandbox.io/s/schema-validation-using-joi-s2nhzs&#34;&gt;Try this example on CodeSandbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 18. NODE.JS MISCELLANEOUS&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is crypto in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The Node.js Crypto module supports cryptography. It provides cryptographic functionality that includes a set of wrappers for open SSL&#39;s hash HMAC, cipher, decipher, sign and verify functions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hash&lt;/strong&gt;: A hash is a fixed-length string of bits i.e. procedurally and deterministically generated from some arbitrary block of source data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HMAC&lt;/strong&gt;: HMAC stands for Hash-based Message Authentication Code. It is a process for applying a hash algorithm to both data and a secret key that results in a single final hash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Encryption Example using Hash and HMAC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);  &#xA;const secret = &#39;abcdefg&#39;;  &#xA;const hash = crypto.createHmac(&#39;sha256&#39;, secret)  &#xA;                   .update(&#39;Welcome to Node.js&#39;)  &#xA;                   .digest(&#39;hex&#39;);  &#xA;console.log(hash);  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encryption example using Cipher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);  &#xA;const cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);  &#xA;&#xA;const encrypted = cipher.update(&#39;Hello Node.js&#39;, &#39;utf8&#39;, &#39;hex&#39;);  &#xA;encrypted += cipher.final(&#39;hex&#39;);  &#xA;&#xA;console.log(encrypted);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decryption example using Decipher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);  &#xA;const decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);  &#xA;&#xA;const encrypted = &#39;4ce3b761d58398aed30d5af898a0656a3174d9c7d7502e781e83cf6b9fb836d5&#39;;  &#xA;const decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);  &#xA;decrypted += decipher.final(&#39;utf8&#39;);  &#xA;&#xA;console.log(decrypted);  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to execute an external program from within Node.js?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { exec } = require(&#39;child_process&#39;);&#xA;&#xA;exec(&#39;&#34;/path/to/test file/test.sh&#34; arg1 arg2&#39;);&#xA;&#xA;exec(&#39;echo &#34;The \\$HOME variable is $HOME&#34;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is REPL?&lt;/h2&gt; &#xA;&lt;p&gt;REPL (READ, EVAL, PRINT, LOOP) is a computer environment similar to Shell (Unix/Linux) and command prompt. Node comes with the REPL environment when it is installed. System interacts with the user through outputs of commands/expressions used. It is useful in writing and debugging the codes. The work of REPL can be understood from its full form:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt;: It reads the inputs from users and parses it into JavaScript data structure. It is then stored to memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Eval&lt;/strong&gt;: The parsed JavaScript data structure is evaluated for the results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Print&lt;/strong&gt;: The result is printed after the evaluation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Loop&lt;/strong&gt;: Loops the input command. To come out of NODE REPL, press ctrl+c twice&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Simple Expression&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$ node&#xA;&amp;gt; 10 + 20&#xA;30&#xA;&amp;gt; 10 + ( 20 * 30 ) - 40&#xA;570&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What does the runtime environment mean in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The Node.js runtime is the software stack responsible for installing your web service&#39;s code and its dependencies and running your service.&lt;/p&gt; &#xA;&lt;p&gt;The Node.js runtime for App Engine in the standard environment is declared in the &lt;code&gt;app.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;runtime: nodejs10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The runtime environment is literally just the environment your application is running in. This can be used to describe both the hardware and the software that is running your application. How much RAM, what version of node, what operating system, how much CPU cores, can all be referenced when talking about a runtime environment.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain usage of NODE_ENV?&lt;/h2&gt; &#xA;&lt;p&gt;NODE_ENV is an environment variable made popular by the express web server framework. When a node application is run, it can check the value of the environment variable and do different things based on the value.&lt;/p&gt; &#xA;&lt;p&gt;For example, when we work on a project and there are production and development environments. We don&#39;t need to use caching in the development env. So we set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;NODE_ENV=development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use the code below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (process.env.NODE_ENV === &#39;development&#39;)&#xA;    useCaching = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon that, if the project runs on production it will use caching.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How assert works in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The assert module provides a way of testing expressions. If the expression evaluates to 0, or false, an assertion failure is being caused, and the program is terminated.&lt;/p&gt; &#xA;&lt;p&gt;This module was built to be used internally by Node.js.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Sample usage&#xA;&#xA;const assert = require(&#39;assert&#39;);&#xA;assert(50 &amp;gt; 70, &#34;50 is less than 70.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the use of DNS module in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;DNS is a node module used to do name resolution facility which is provided by the operating system as well as used to do an actual DNS lookup. No need for memorising IP addresses – DNS servers provide a nifty solution of converting domain or subdomain names to IP addresses. This module provides an asynchronous network wrapper and can be imported using the following syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);  &#xA;dns.lookup(&#39;www.google.com&#39;, (err, addresses, family) =&amp;gt; {  &#xA;  console.log(&#39;addresses:&#39;, addresses);  &#xA;  console.log(&#39;family:&#39;,family);  &#xA;});  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;resolve4()&lt;/code&gt; and &lt;code&gt;reverse()&lt;/code&gt; functions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);  &#xA;dns.resolve4(&#39;www.google.com&#39;, (err, addresses) =&amp;gt; {  &#xA;  if (err) throw err;  &#xA;  console.log(`addresses: ${JSON.stringify(addresses)}`);  &#xA;  addresses.forEach((a) =&amp;gt; {  &#xA;    dns.reverse(a, (err, hostnames) =&amp;gt; {  &#xA;      if (err) {  &#xA;        throw err;  &#xA;      }  &#xA;      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);  &#xA;    });  &#xA;  });  &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Print the localhost name using &lt;code&gt;lookupService()&lt;/code&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);  &#xA;dns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&amp;gt; {  &#xA;  console.log(hostname, service);  &#xA;    // Prints: localhost  &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is JIT and how is it related to Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js has depended on the V8 JavaScript engine to provide code execution in the language. The V8 is a JavaScript engine built at the google development center, in Germany. It is open source and written in C++. It is used for both client side (Google Chrome) and server side (node.js) JavaScript applications. A central piece of the V8 engine that allows it to execute JavaScript at high speed is the JIT (Just In Time) compiler. This is a dynamic compiler that can optimize code during runtime. When V8 was first built the JIT Compiler was dubbed FullCodegen. Then, the V8 team implemented Crankshaft, which included many performance optimizations that FullCodegen did not implement.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;V8&lt;/code&gt; was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn&#39;t produce bytecode or any intermediate code.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to access cache data in Node.js ?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to implement caching in Node.js using Redis?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;ToDo&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to implement Memcached in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Memcached&lt;/strong&gt; is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached is free and open-source software, licensed under the Revised BSD licence. Memcached runs on Unix-like operating systems (at least LINUX and OS X) and on Microsoft windows.&lt;/p&gt; &#xA;&lt;p&gt;We can store data to memcached server in key pair format. So whenever any request come from the app can be matched with memcached server without any query from mysql/Nosql server. This increases the performance of the application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install memcached&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setting up the client:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The constructor of the memcached client take 2 different arguments server locations and options. Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Memcached = require(&#39;memcached&#39;);&#xA;const memcached = new Memcached(Server locations, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Memcached&#xA; */&#xA;const Memcached = require(&#39;memcached&#39;);&#xA;// all global configurations should be applied to the .config object of the Client.&#xA;Memcached.config.poolSize = 25;&#xA;&#xA;const memcached = new Memcached(&#39;localhost:11211&#39;, { retries:10, retry:10000, remove:true, failOverServers:[&#39;192.168.0.103:11211&#39;]});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.npmjs.com/package/memcached&#34;&gt;https://www.npmjs.com/package/memcached&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to generate and verify checksum of the given string in Nodejs&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;checksum&lt;/strong&gt; (aka &lt;strong&gt;hash sum&lt;/strong&gt;) calculation is a one-way process of mapping an extensive data set of variable length (e.g., message, file), to a smaller data set of a fixed length (hash). The length depends on a hashing algorithm.&lt;/p&gt; &#xA;&lt;p&gt;For the checksum generation, we can use node &lt;code&gt;crypto()&lt;/code&gt; module. The module uses &lt;code&gt;createHash(algorithm)&lt;/code&gt; to create a checksum (hash) generator. The algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);&#xA;&#xA;// To get a list of all available hash algorithms&#xA;crypto.getHashes() // [ &#39;md5&#39;, &#39;sha1&#39;, &#39;sha3-256&#39;, ... ]&#xA;&#xA;  &#xA;// Create hash of SHA1 type&#xA;const key = &#34;MY_SECRET_KEY&#34;;&#xA;&#xA;&#xA;// &#39;digest&#39; is the output of hash function containing  &#xA;// only hexadecimal digits&#xA;hashPwd = crypto.createHash(&#39;sha1&#39;).update(key).digest(&#39;hex&#39;);&#xA;  &#xA;console.log(hashPwd); //ef5225a03e4f9cc953ab3c4dd41f5c4db7dc2e5b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Q. What are the use cases for the Node.js &#34;vm&#34; core module?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. Explain the concept of Domain in Node.js?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. What is Node-API (N-API)?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. How to implement a Sleep function?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. How does the cluster load balance work in node.js?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. What is daemon process? how to implement it in node.js?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. How would you scale Node application?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. How does the cluster module work? What is the difference between it and a load balancer?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. Why do we need C++ Addons in Node.js?&lt;/h4&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-interview-questions/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>