<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-29T01:30:56Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jason5ng32/OhEarningsCal</title>
    <updated>2024-02-29T01:30:56Z</updated>
    <id>tag:github.com,2024-02-29:/jason5ng32/OhEarningsCal</id>
    <link href="https://github.com/jason5ng32/OhEarningsCal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;使用日历软件订阅美股的财报日期&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OhEarningsCal&lt;/h1&gt; &#xA;&lt;p&gt;这个项目本来是我自用的一个小工具，功能是，将我关注的美股公司的财报日程，自动导入到我的日历（比如 Google Calendar）中。&lt;/p&gt; &#xA;&lt;p&gt;啊，我就是不喜欢打开炒股 app 看，我就是喜欢在日历中看。&lt;/p&gt; &#xA;&lt;p&gt;或许这个工具对你也有用，所以我把它开源了。&lt;/p&gt; &#xA;&lt;p&gt;代码很粗糙的，但是能用（毕竟我是个产品经理啊）。&lt;/p&gt; &#xA;&lt;h2&gt;直接使用&lt;/h2&gt; &#xA;&lt;p&gt;打开 &lt;a href=&#34;https://stock.retire.money/&#34;&gt;https://stock.retire.money/&lt;/a&gt;，找到已经生成的 ics 文件，复制链接，然后在你的日历软件中，添加一个新的日历，输入这个链接，就可以了。&lt;/p&gt; &#xA;&lt;p&gt;备注：仅仅包含美国市场的财报日历。日历内容只包含当天前后 30 天的，再多其实没有意义。&lt;/p&gt; &#xA;&lt;h2&gt;关于更新&lt;/h2&gt; &#xA;&lt;p&gt;项目已经设置了使用 Github Actions 自动更新：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;每天 2 次从纳斯达克定时抓取未来 30 天的财报日历&lt;/li&gt; &#xA; &lt;li&gt;每天 2 次生成对应的 ics 订阅文件&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;通常，更新会自动执行。不过，实测发现，有时候 Github Actions 会出现延迟，有时候甚至可能因为高负荷而错过执行。&lt;/p&gt; &#xA;&lt;p&gt;如果你发现了这种情况，可以通过 Github API 触发手动执行。&lt;/p&gt; &#xA;&lt;h2&gt;关于 ics 清单&lt;/h2&gt; &#xA;&lt;p&gt;默认情况下，程序会生成 6 个 ics 文件，分别是：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;all.ics&lt;/code&gt;: 包含所有公司的财报日历&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nasdaq100.ics&lt;/code&gt;: 包含纳斯达克 100 指数成分股的财报日历&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sp500.ics&lt;/code&gt;: 包含标普 500 指数成分股的财报日历&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dow30.ics&lt;/code&gt;: 包含道琼斯 30 指数成分股的财报日历&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;customstock.ics&lt;/code&gt;: 项目作者，也就是我自己，关注的一些个股的财报日历&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;selected.ics&lt;/code&gt;: 2-5 的合集&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;自己部署&lt;/h2&gt; &#xA;&lt;p&gt;如果你想自己部署这个项目，可以参考以下步骤：&lt;/p&gt; &#xA;&lt;p&gt;实际上，程序本身是可以在本地使用 npm 进行部署到，这部分代码我也已经写了，不过我还是比较鼓励使用 Github 进行部署并执行自动化。&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork 这个项目&lt;/li&gt; &#xA; &lt;li&gt;自行修改 &lt;code&gt;api/datas/cusomstock.json&lt;/code&gt; 文件，将你关注的个股代码添加进去&lt;/li&gt; &#xA; &lt;li&gt;在 Github 项目的环境变量中，根据 &lt;code&gt;env.example&lt;/code&gt; 创建对应的环境变量&lt;/li&gt; &#xA; &lt;li&gt;看看你创建的名称和 &lt;code&gt;github/workflows&lt;/code&gt; 的 yml 文件中环境名称和对应的环境变量名称是否一致&lt;/li&gt; &#xA; &lt;li&gt;然后就可以了&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>polyfillpolyfill/polyfill-library</title>
    <updated>2024-02-29T01:30:56Z</updated>
    <id>tag:github.com,2024-02-29:/polyfillpolyfill/polyfill-library</id>
    <link href="https://github.com/polyfillpolyfill/polyfill-library" rel="alternate"></link>
    <summary type="html">&lt;p&gt;NodeJS module to create polyfill bundles tailored to individual user-agents.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Polyfill-library · &lt;a href=&#34;https://github.com/Financial-Times/polyfill-library/raw/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Financial-Times/polyfill-library/raw/master/.github/contributing.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NodeJS module to create polyfill bundles tailored to individual user-agents&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install polyfill-library --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const polyfillLibrary = require(&#39;polyfill-library&#39;);&#xA;&#xA;const polyfillBundle = polyfillLibrary.getPolyfillString({&#xA;&#x9;uaString: &#39;Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 6.0; en-US)&#39;,&#xA;&#x9;minify: true,&#xA;&#x9;features: {&#xA;&#x9;&#x9;&#39;es6&#39;: { flags: [&#39;gated&#39;] }&#xA;&#x9;}&#xA;}).then(function(bundleString) {&#xA;&#x9;console.log(bundleString);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;polyfillLibrary.listAllPolyfills()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Get a list of all the polyfills which exist within the collection of polyfill sources.&lt;/p&gt; &#xA;&lt;p&gt;Returns a Promise which resolves with an array of all the polyfills within the collection.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;polyfillLibrary.describePolyfill(featureName)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Get the metadata for a specific polyfill within the collection of polyfill sources.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {String} featureName&lt;/code&gt; - The name of a polyfill whose metadata should be returned.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns a Promise which resolves with the metadata or with &lt;code&gt;undefined&lt;/code&gt; if no metadata exists for the polyfill.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;polyfillLibrary.getOptions(opts = {})&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Create an options object for use with &lt;code&gt;getPolyfills&lt;/code&gt; or &lt;code&gt;getPolyfillString&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {object} opts&lt;/code&gt; - Valid keys are uaString, minify, unknown, excludes, rum and features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Boolean} [opts.minify=true]&lt;/code&gt; - Whether to return the minified or raw implementation of the polyfills.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {&#39;ignore&#39;|&#39;polyfill&#39;} [opts.unknown=&#39;polyfill&#39;]&lt;/code&gt; - Whether to return all polyfills or no polyfills if the user-agent is unknown or unsupported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Object} [opts.features={}]&lt;/code&gt; - Which features should be returned if the user-agent does not support them natively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Array&amp;lt;String&amp;gt;} [opts.excludes=[]]&lt;/code&gt; - Which features should be excluded from the returned object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {String} [opts.uaString=&#39;&#39;]&lt;/code&gt; - The user-agent string to check each feature against.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Boolean} [opts.rum=false]&lt;/code&gt; - Whether to include a script that reports anonymous usage data in the polyfill bundle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns an object which has merged &lt;code&gt;opts&lt;/code&gt; with the defaults option values.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;polyfillLibrary.getPolyfills(opts)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Given a set of features that should be polyfilled in &#39;opts.features&#39; (with flags i.e. &lt;code&gt;{&amp;lt;featurename&amp;gt;: {flags:Set[&amp;lt;flaglist&amp;gt;]}, ...}&lt;/code&gt;), determine which have a configuration valid for the given opts.uaString, and return a promise of set of canonical (unaliased) features (with flags) and polyfills.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {object} opts&lt;/code&gt; - Valid keys are uaString, minify, unknown, excludes, rum and features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Boolean} [opts.minify=true]&lt;/code&gt; - Whether to return the minified or raw implementation of the polyfills.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {&#39;ignore&#39;|&#39;polyfill&#39;} [opts.unknown=&#39;polyfill&#39;]&lt;/code&gt; - Whether to return all polyfills or no polyfills if the user-agent is unknown or unsupported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Object} [opts.features={}]&lt;/code&gt; - Which features should be returned if the user-agent does not support them natively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Array&amp;lt;String&amp;gt;} [opts.excludes=[]]&lt;/code&gt; - Which features should be excluded from the returned object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {String} [opts.uaString=&#39;&#39;]&lt;/code&gt; - The user-agent string to check each feature against.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Boolean} [opts.rum=false]&lt;/code&gt; - Whether to include a script that reports anonymous usage data in the polyfill bundle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns a Promise which resolves to an Object which contains the canonicalised feature definitions filtered for UA.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;polyfillLibrary.getPolyfillString(opts)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Create a polyfill bundle.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {object} opts&lt;/code&gt; - Valid keys are uaString, minify, unknown, excludes, rum and features.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Boolean} [opts.minify=true]&lt;/code&gt; - Whether to return the minified or raw implementation of the polyfills.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {&#39;ignore&#39;|&#39;polyfill&#39;} [opts.unknown=&#39;polyfill&#39;]&lt;/code&gt; - Whether to return all polyfills or no polyfills if the user-agent is unknown or unsupported.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Object} [opts.features={}]&lt;/code&gt; - Which features should be returned if the user-agent does not support them natively.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Array&amp;lt;String&amp;gt;} [opts.excludes=[]]&lt;/code&gt; - Which features should be excluded from the returned object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {String} [opts.uaString=&#39;&#39;]&lt;/code&gt; - The user-agent string to check each feature against.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Boolean} [opts.rum=false]&lt;/code&gt; - Whether to include a script that reports anonymous usage data in the polyfill bundle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;@param {Boolean} [opts.stream=false]&lt;/code&gt; - Whether to return a stream or a string of the polyfill bundle.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Returns a polyfill bundle as either a utf-8 ReadStream or as a Promise of a utf-8 String.&lt;/p&gt; &#xA;&lt;h2&gt;AWS Lambda&lt;/h2&gt; &#xA;&lt;p&gt;To use this package in an AWS Lambda function, you need to include the distribution Polyfills located in &lt;code&gt;./node_modules/polyfill-library/polyfills/__dist&lt;/code&gt; in the root directory of your Lambda. In AWS, Lambdas are executed in the &lt;code&gt;/var/task/...&lt;/code&gt; directory. Therefore, during execution, the directory where the polyfills will be located will be &lt;code&gt;/var/task/polyfill-library/__dist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Example of a script to copy files&lt;/h3&gt; &#xA;&lt;p&gt;The following snippet will allow us to copy the polyfills to our already compiled Lambda. To do this, we will first install the necessary dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add -D make-dir fs-extra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the dependencies are installed, we will create the file with the script at &lt;code&gt;/scripts/polyfills-serverless.mjs&lt;/code&gt; and replace &lt;code&gt;YOUR_BUNDELED_LAMBDA_DIRECTORY&lt;/code&gt; with the directory that contains our packaged Lambda.&lt;/p&gt; &#xA;&lt;p&gt;In the example, we will use the directory &lt;code&gt;./.serverless_nextjs/api-lambda&lt;/code&gt;, which is the one used when using Serverless Next.js.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { copySync } from &#39;fs-extra/esm&#39;;&#xA;import makeDir from &#39;make-dir&#39;;&#xA;&#xA;const DIR_POLYFILLS = &#39;./node_modules/polyfill-library/polyfills/__dist&#39;;&#xA;// const DIR_SERVERLESS = &#39;YOUR_BUNDELED_LAMBDA_DIRECTORY/polyfills/__dist&#39;;&#xA;const DIR_SERVERLESS = &#39;./.serverless_nextjs/api-lambda/polyfills/__dist&#39;;&#xA;&#xA;const paths = await makeDir(DIR_SERVERLESS);&#xA;console.log(`The directory ${paths} is created successfully.`);&#xA;&#xA;try {&#xA;  console.log(&#39;Copying polyfills to serverless directory...&#39;);&#xA;  copySync(DIR_POLYFILLS, DIR_SERVERLESS, { overwrite: false });&#xA;  console.log(&#39;Polyfills copied successfully!&#39;);&#xA;} catch (err) {&#xA;  console.error(err);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To execute the script, you will need to run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node ./scripts/polyfills-serverless.mjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Development of polyfill-library happens on GitHub. Read below to learn how you can take part in contributing to Polyfill.io.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Financial-Times/polyfill-library/raw/master/.github/contributing.md&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://github.com/Financial-Times/polyfill-library/raw/master/.github/contributing.md&#34;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# To test on BrowserStack you will need to have a BrowserStack account&#xA;# We test pull-requests using BrowserStack&#xA;npm run test-all-polyfills # Run the tests for all polyfills using BrowserStack&#xA;npm run test-polyfills -- --features=Array.from # Run the tests for Array.from&#xA;npm run test-polyfills -- --features=Array.from --browserstack # Run the tests for Array.from using BrowserStack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Polyfill-library is &lt;a href=&#34;https://github.com/Financial-Times/polyfill-library/raw/master/LICENSE.md&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>