<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-10T01:34:30Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GAIR-NLP/MathPile</title>
    <updated>2024-01-10T01:34:30Z</updated>
    <id>tag:github.com,2024-01-10:/GAIR-NLP/MathPile</id>
    <link href="https://github.com/GAIR-NLP/MathPile" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generative AI for Math: MathPile&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Generative AI for Math: &lt;em&gt;MathPile&lt;/em&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This is the official repository for &lt;a href=&#34;https://huggingface.co/papers/2312.17120&#34;&gt;Generative AI for Math: Part I - MathPile: A Billion-Token-Scale Pretraining Corpus for Math&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gair-nlp.github.io/MathPile/&#34;&gt;&lt;strong&gt;Homepage&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/datasets/GAIR/MathPile&#34;&gt;&lt;strong&gt;Datasets&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://huggingface.co/papers/2312.17120&#34;&gt;&lt;strong&gt;Paper&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/GAIR-NLP/MathPile?tab=readme-ov-file#limitations&#34;&gt;&lt;strong&gt;Limitations&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/GAIR-NLP/MathPile?tab=readme-ov-file#statements--license&#34;&gt;&lt;strong&gt;Statement &amp;amp; License&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://github.com/GAIR-NLP/MathPile?tab=readme-ov-file#citation&#34;&gt;&lt;strong&gt;Citation&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/_akhaliq/status/1740571256234057798&#34;&gt;&lt;strong&gt;Featured By AK&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Please be aware that our corpus could be updated (we will notify upon release). It is advisable to use the latest version.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🔥News&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[2024/01/06] We released the commercial-use version of MathPile, namely &lt;a href=&#34;https://huggingface.co/datasets/GAIR/MathPile_Commercial&#34;&gt;MathPile_Commercial&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;[2024/01/06] We released a new version (&lt;code&gt;v0.2&lt;/code&gt;, a cleaner version) of MathPile. See our &lt;a href=&#34;https://huggingface.co/datasets/GAIR/MathPile&#34;&gt;HF dataset homepage&lt;/a&gt; for more details.&lt;/li&gt; &#xA; &lt;li&gt;[2023/12/30] MathPile was featured on the Hugging Face Datasets trending list. &lt;a href=&#34;https://raw.githubusercontent.com/GAIR-NLP/MathPile/main/static/images/hf-dataset-trending.png&#34;&gt;[snapshot]&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[2023/12/29] We released the &lt;a href=&#34;https://huggingface.co/datasets/GAIR/MathPile&#34;&gt;MathPile&lt;/a&gt;, a 9.5B high-quality and diverse math-centric pre-training corpus.&lt;/li&gt; &#xA; &lt;li&gt;[2023/12/28] We released the &lt;a href=&#34;https://huggingface.co/papers/2312.17120&#34;&gt;technical report&lt;/a&gt; of MathPile.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀Introduction&lt;/h2&gt; &#xA;&lt;p&gt;High-quality, large-scale corpora are the cornerstone of building powerful foundation models. In this work, we introduce &lt;strong&gt;MathPile&lt;/strong&gt; a diverse and high-quality math-centric corpus comprising about 9.5 billion tokens. our work is significantly different from the previous work in the following characteristics:&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- &lt;img src=https://github.com/GAIR-NLP/MathPile/assets/46218454/028361f3-c70b-4787-b718-6af9e06aafa8 width=45%/&gt; --&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/GAIR-NLP/MathPile/main/static/images/mathpile-features.png&#34; width=&#34;45%/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Math-centric&lt;/strong&gt;: MathPile uniquely caters to the math domain, unlike general domain-focused corpora like Pile and RedPajama, or multilingual-focused ones like ROOTS and The Stack. While there are math-centric corpora, they&#39;re often either closed-sourced, like Google&#39;s Minerva and OpenAI&#39;s MathMix, or lack diversity, such as ProofPile and OpenWebMath.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Diversity&lt;/strong&gt;: MathPile draws from a wide range of sources: &lt;strong&gt;Textbooks&lt;/strong&gt; (including lecture notes), &lt;strong&gt;arXiv&lt;/strong&gt;, &lt;strong&gt;Wikipedia&lt;/strong&gt;, &lt;strong&gt;ProofWiki&lt;/strong&gt;, &lt;strong&gt;StackExchange&lt;/strong&gt;, and &lt;strong&gt;Web Pages&lt;/strong&gt;. It encompasses mathematical content suitable for K-12, college, postgraduate levels, and math competitions. &lt;strong&gt;This diversity is a first, especially with our release of a significant collection of high-quality textbooks (~0.19B tokens).&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;High-Quality&lt;/strong&gt;: We adhered to the principle of &lt;em&gt;less is more&lt;/em&gt;, firmly believing in the supremacy of data quality over quantity, even in the pre-training phase. Our meticulous data collection and processing efforts included a complex suite of preprocessing, prefiltering, cleaning, filtering, and deduplication, ensuring the high quality of our corpus.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Data Documentation&lt;/strong&gt;: To enhance transparency, we&#39;ve extensively documented MathPile. This includes a &lt;strong&gt;dataset sheet&lt;/strong&gt; (see Table 5 in our paper) and &lt;strong&gt;quality annotations&lt;/strong&gt; for web-sourced documents, like language identification scores and symbol-to-word ratios. This gives users flexibility to tailor the data to their needs. We&#39;ve also performed &lt;strong&gt;data contamination detection&lt;/strong&gt; to eliminate duplicates from benchmark test sets like MATH and MMLU-STEM.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;!-- &lt;img src=https://github.com/GAIR-NLP/MathPile/assets/46218454/8486ce7a-3036-4ede-867f-9e61038dcc70 width=70%/&gt; --&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/GAIR-NLP/MathPile/main/static/images/mathpile-overview.png&#34; width=&#34;75%/&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p&gt;We hope our MathPile can help to enhance the mathematical reasoning abilities of language models. See our paper for more technical details.&lt;/p&gt; &#xA;&lt;h2&gt;😋Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The decisions made during the data collection and processing phases might not always be optimal.&lt;/li&gt; &#xA; &lt;li&gt;Some documents in MathPile may not always be of the highest quality. We are committed to continually refining and optimizing this corpus.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👊Statements &amp;amp; License&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;These invaluable corpora are the culmination of human intellect and should be utilized for the betterment of humanity, aiding in the improvement of human life. &lt;strong&gt;We strongly urge all users to refrain from using our corpus for any activities that may harm national or social security or violate the law.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We have done our utmost to ensure the high quality and lawful use of the data. However, unforeseen issues may still arise, including but not limited to data security concerns and any risks or problems stemming from misuse. We shall not be held responsible for any such issues.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the source data of MathPile is governed by a license more restrictive than &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt;, MathPile adheres to that stricter licensing. In all other cases, it operates under the &lt;a href=&#34;https://creativecommons.org/licenses/by-nc-sa/4.0/deed.en&#34;&gt;CC BY-NC-SA 4.0&lt;/a&gt; license. We also plan to release a commercially usable version of the dataset soon.&lt;/p&gt; &#xA;&lt;h2&gt;🥳Citation&lt;/h2&gt; &#xA;&lt;p&gt;If you find our work useful or use MathPile, please cite our paper:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@article{wang2023mathpile,&#xA;      title={Generative AI for Math: Part I -- MathPile: A Billion-Token-Scale Pretraining Corpus for Math},&#xA;      author={Wang, Zengzhi and Xia, Rui and Liu Pengfei},&#xA;      journal={arXiv preprint arXiv:2312.17120},&#xA;      year={2023}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>Everduin94/better-commits</title>
    <updated>2024-01-10T01:34:30Z</updated>
    <id>tag:github.com,2024-01-10:/Everduin94/better-commits</id>
    <link href="https://github.com/Everduin94/better-commits" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A CLI for creating better commits following the conventional commit guidelines. Written with Typescript | ZOD | Clack&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/Everduin94/better-commits/assets/14320878/2f94e6ea-a40f-4f3e-b0b2-5cc7d83a9a7d&#34; alt=&#34;bc-gradient&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Everduin94/better-commits&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/better--commits-enabled?style=for-the-badge&amp;amp;logo=git&amp;amp;color=a6e3a1&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34; alt=&#34;better commits is enabled&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/better-commits&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/better-commits.svg?style=for-the-badge&amp;amp;logo=npm&amp;amp;color=74c7ec&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/everduin94/better-commits/issues&#34;&gt; &lt;img alt=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/everduin94/better-commits?style=for-the-badge&amp;amp;logo=gitbook&amp;amp;color=cba6f7&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A CLI for writing better commits, following the conventional commit guidelines. &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Everduin94/better-commits/assets/14320878/8fb15d46-17c4-4e5d-80d9-79abe0a2a00a&#34;&gt;https://github.com/Everduin94/better-commits/assets/14320878/8fb15d46-17c4-4e5d-80d9-79abe0a2a00a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;✨ Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Generate conventional commits through a series of prompts&lt;/li&gt; &#xA; &lt;li&gt;Highly configurable with sane defaults&lt;/li&gt; &#xA; &lt;li&gt;Infers ticket and commit-type from branch for consistent &amp;amp; fast commits&lt;/li&gt; &#xA; &lt;li&gt;Consistent branch creation with flexible workflow hooks via &lt;code&gt;better-branch&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Interactive git status/add on commit&lt;/li&gt; &#xA; &lt;li&gt;Preview commit messages in color&lt;/li&gt; &#xA; &lt;li&gt;Support for git emojis per commit-type&lt;/li&gt; &#xA; &lt;li&gt;Configure globally or per repository&lt;/li&gt; &#xA; &lt;li&gt;Config validation and error messaging&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📦 Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g better-commits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🚀 Usage&lt;/h2&gt; &#xA;&lt;p&gt;When you&#39;re ready to commit. To run the CLI in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;better-commits&#xA;# or&#xA;npx better-commits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will prompt a series of questions. These prompts will build a commit message, which you can preview, before confirming the commit. Some of the values in these prompts will be infered by your branch name and auto populated. You can adjust this in your &lt;code&gt;.better-commits.json&lt;/code&gt; configuration file.&lt;/p&gt; &#xA;&lt;p&gt;To better understand these prompts and their intention, read &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0-beta.4/#summary&#34;&gt;Conventional Commits Summary&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;⚙️ Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Global&lt;/h3&gt; &#xA;&lt;p&gt;Your first time running &lt;code&gt;better-commits&lt;/code&gt;, a default config will be generated in your &lt;code&gt;$HOME&lt;/code&gt; directory, named &lt;code&gt;.better-commits.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This config will be used if a repository-specific config cannot be found.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Repository&lt;/h3&gt; &#xA;&lt;p&gt;To create a &lt;strong&gt;repository-specific config&lt;/strong&gt;, navigate to the root of your project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run &lt;code&gt;better-commits-init&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;This will create a default config named &lt;code&gt;.better-commits.json&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Better-commits (&amp;amp; better-branch) are highly flexible with sane defaults. These options allow you specify whats best for your workflow.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; All properties are optional and can be removed from the config. It will be replaced by the default at run-time.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;See &lt;code&gt;.better-commits.json&lt;/code&gt; in this repository as an example&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;💫 Default JSON Config&lt;/h3&gt; &#xA;&lt;details open&gt; &#xA; &lt;summary&gt;Expand / Collapse&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;check_status&#34;: true,&#xA;   &#34;commit_type&#34;: {&#xA;       &#34;enable&#34;: true,&#xA;       &#34;initial_value&#34;: &#34;feat&#34;,&#xA;       &#34;infer_type_from_branch&#34;: true,&#xA;       &#34;append_emoji_to_label&#34;: false,&#xA;       &#34;append_emoji_to_commit&#34;: false,&#xA;       &#34;options&#34;: [&#xA;           {&#xA;               &#34;value&#34;: &#34;feat&#34;,&#xA;               &#34;label&#34;: &#34;feat&#34;,&#xA;               &#34;hint&#34;: &#34;A new feature&#34;,&#xA;               &#34;emoji&#34;: &#34;✨&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;fix&#34;,&#xA;               &#34;label&#34;: &#34;fix&#34;,&#xA;               &#34;hint&#34;: &#34;A bug fix&#34;,&#xA;               &#34;emoji&#34;: &#34;🐛&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;docs&#34;,&#xA;               &#34;label&#34;: &#34;docs&#34;,&#xA;               &#34;hint&#34;: &#34;Documentation only changes&#34;,&#xA;               &#34;emoji&#34;: &#34;📚&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;refactor&#34;,&#xA;               &#34;label&#34;: &#34;refactor&#34;,&#xA;               &#34;hint&#34;: &#34;A code change that neither fixes a bug nor adds a feature&#34;,&#xA;               &#34;emoji&#34;: &#34;🔨&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;perf&#34;,&#xA;               &#34;label&#34;: &#34;perf&#34;,&#xA;               &#34;hint&#34;: &#34;A code change that improves performance&#34;,&#xA;               &#34;emoji&#34;: &#34;🚀&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;test&#34;,&#xA;               &#34;label&#34;: &#34;test&#34;,&#xA;               &#34;hint&#34;: &#34;Adding missing tests or correcting existing tests&#34;,&#xA;               &#34;emoji&#34;: &#34;🚨&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;build&#34;,&#xA;               &#34;label&#34;: &#34;build&#34;,&#xA;               &#34;hint&#34;: &#34;Changes that affect the build system or external dependencies&#34;,&#xA;               &#34;emoji&#34;: &#34;🚧&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;ci&#34;,&#xA;               &#34;label&#34;: &#34;ci&#34;,&#xA;               &#34;hint&#34;: &#34;Changes to our CI configuration files and scripts&#34;,&#xA;               &#34;emoji&#34;: &#34;🤖&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;chore&#34;,&#xA;               &#34;label&#34;: &#34;chore&#34;,&#xA;               &#34;hint&#34;: &#34;Other changes that do not modify src or test files&#34;,&#xA;               &#34;emoji&#34;: &#34;🧹&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;&#34;,&#xA;               &#34;label&#34;: &#34;none&#34;&#xA;           }&#xA;       ]&#xA;   },&#xA;   &#34;commit_scope&#34;: {&#xA;       &#34;enable&#34;: true,&#xA;       &#34;custom_scope&#34;: false,&#xA;       &#34;initial_value&#34;: &#34;app&#34;,&#xA;       &#34;options&#34;: [&#xA;           {&#xA;               &#34;value&#34;: &#34;app&#34;,&#xA;               &#34;label&#34;: &#34;app&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;shared&#34;,&#xA;               &#34;label&#34;: &#34;shared&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;server&#34;,&#xA;               &#34;label&#34;: &#34;server&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;tools&#34;,&#xA;               &#34;label&#34;: &#34;tools&#34;&#xA;           },&#xA;           {&#xA;               &#34;value&#34;: &#34;&#34;,&#xA;               &#34;label&#34;: &#34;none&#34;&#xA;           }&#xA;       ]&#xA;   },&#xA;   &#34;check_ticket&#34;: {&#xA;       &#34;infer_ticket&#34;: true,&#xA;       &#34;confirm_ticket&#34;: true,&#xA;       &#34;add_to_title&#34;: true,&#xA;       &#34;append_hashtag&#34;: false,&#xA;       &#34;title_position&#34;: &#34;start&#34;&#xA;   },&#xA;   &#34;commit_title&#34;: {&#xA;       &#34;max_size&#34;: 70&#xA;   },&#xA;   &#34;commit_body&#34;: {&#xA;       &#34;enable&#34;: true,&#xA;       &#34;required&#34;: false&#xA;   },&#xA;   &#34;commit_footer&#34;: {&#xA;       &#34;enable&#34;: true,&#xA;       &#34;initial_value&#34;: [],&#xA;       &#34;options&#34;: [&#xA;           &#34;closes&#34;,&#xA;           &#34;breaking-change&#34;,&#xA;           &#34;deprecated&#34;,&#xA;           &#34;custom&#34;&#xA;       ]&#xA;   },&#xA;   &#34;breaking_change&#34;: {&#xA;       &#34;add_exclamation_to_title&#34;: true&#xA;   },&#xA;   &#34;confirm_commit&#34;: true,&#xA;   &#34;print_commit_output&#34;: true,&#xA;   &#34;branch_pre_commands&#34;: [],&#xA;   &#34;branch_post_commands&#34;: [],&#xA;   &#34;worktree_pre_commands&#34;: [],&#xA;   &#34;worktree_post_commands&#34;: [],&#xA;   &#34;branch_user&#34;: {&#xA;       &#34;enable&#34;: true,&#xA;       &#34;required&#34;: false,&#xA;       &#34;separator&#34;: &#34;/&#34;&#xA;   },&#xA;   &#34;branch_type&#34;: {&#xA;       &#34;enable&#34;: true,&#xA;       &#34;separator&#34;: &#34;/&#34;&#xA;   },&#xA;   &#34;branch_ticket&#34;: {&#xA;       &#34;enable&#34;: true,&#xA;       &#34;required&#34;: false,&#xA;       &#34;separator&#34;: &#34;-&#34;&#xA;   },&#xA;   &#34;branch_description&#34;: {&#xA;       &#34;max_length&#34;: 70&#xA;   },&#xA;   &#34;branch_action_default&#34;: &#34;branch&#34;,&#xA;   &#34;enable_worktrees&#34;: true,&#xA;   &#34;overrides&#34;: {&#xA;       &#34;shell&#34;: &#34;/bin/sh&#34;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;🔭 Config File Explanations&lt;/h3&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Expand / Collapse&lt;/summary&gt; &#xA; &lt;p&gt;&lt;code&gt;.&lt;/code&gt; refers to nesting. i.e. if a property is &lt;code&gt;commit_type.enable&lt;/code&gt; then expect in the config for it to be:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;commit_type&#34;: {&#xA;  &#34;enable&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;Property&lt;/th&gt; &#xA;    &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;check_status&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true run interactive &lt;code&gt;git status&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.enable&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true include commit type&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.initial_value&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Initial selection of commit type&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.infer_type_from_branch&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true infer type from branch name&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.append_emoji_to_label&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true append emoji to prompt&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.append_emoji_to_commit&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true append emoji to commit&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.options.value&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Commit type prompt value&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.options.label&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Commit type prompt label&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.options.hint&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Commit type inline hint (like this)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_type.options.emoji&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Commit type emoji&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_scope.enable&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true include commit scope&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_scope.custom_scope&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true allow custom scope at run-time&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_scope.initial_value&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Default commit scope selected&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_scope.options.value&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Commit scope value&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_scope.options.label&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Commit scope label&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;check_ticket.infer_ticket&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true infer ticket from branch name&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;check_ticket.confirm_ticket&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true manually confirm inference&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;check_ticket.add_to_title&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true add ticket to title&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;check_ticket.append_hashtag&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true add hashtag to ticket (Ideal for Github Issues)&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;check_ticket.title_position&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If &#34;start&#34; ticket at start if &#34;end&#34; ticket at end&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_title.max_size&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max size of title including scope, type, etc...&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_body.enable&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true include body&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_body.required&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true body is required&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_footer.enable&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true include footer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_footer.initial_value&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Initial values selected in footer&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;commit_footer.options&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Footer options&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;breaking_change.add_exclamation_to_title&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true adds exclamation mark to title for breaking changes&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;confirm_commit&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true manually confirm commit at end&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;print_commit_output&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If true pretty print commit preview&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;branch_pre_commands&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Array of shell commands to run before branching&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;branch_post_commands&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Array of shell commands to run after branching&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;worktree_pre_commands&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Array of shell commands to run before creating worktree&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;worktree_post_commands&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Array of shell commands to run after creating worktree&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;branch_user.enable&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If enabled include user name&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;branch_user.required&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If enabled require user name&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;branch_user.separator&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Branch delimeter&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;branch_description.max_length&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Max length branch name&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;branch_action_default&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&#39;branch&#39; or &#39;worktree&#39;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;enable_worktrees&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;If false, always default to branch action&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;overrides.shell&lt;/code&gt;&lt;/td&gt; &#xA;    &lt;td&gt;Override default shell, useful for windows users&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;🔎 Inference&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;better-commits&lt;/code&gt; will attempt to infer the ticket/issue and the commit-type from your branch name. It will auto populate the corresponding field if found.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Ticket / Issue-Number&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a &lt;code&gt;STRING-NUMBER&lt;/code&gt; or &lt;code&gt;NUMBER&lt;/code&gt; are at the start of the branch name or after a &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Commit Type&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a type is at the start of the branch or is followed by a &lt;code&gt;/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌳 Better Branch&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; Using &lt;code&gt;better-branch&lt;/code&gt; with &lt;code&gt;better-commits&lt;/code&gt; can supercharge your git workflow. Make sure to try it out!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Better branch is a secondary feature that works with better commits&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports consistent branch naming conventions&lt;/li&gt; &#xA; &lt;li&gt;Uses same type-list/prompt from your config&lt;/li&gt; &#xA; &lt;li&gt;Enables better-commits to infer type &amp;amp; ticket&lt;/li&gt; &#xA; &lt;li&gt;Caches your username for speedy branching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To run the CLI in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;better-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Worktree Support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;better-branch&lt;/code&gt; will prompt for &lt;strong&gt;Branch&lt;/strong&gt; or &lt;strong&gt;Worktree&lt;/strong&gt;. Creating a &lt;strong&gt;Worktree&lt;/strong&gt; with &lt;code&gt;better-branch&lt;/code&gt; is a great way to create worktrees while maintaining consistent branch naming conventions.&lt;/p&gt; &#xA;&lt;p&gt;The worktree flow creates a folder/worktree with your &lt;strong&gt;branch description&lt;/strong&gt; and a git branch inside with your &lt;strong&gt;full branch name&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br&gt; Creating a worktree named &lt;code&gt;everduin94/feat/TAC-123-add-worktrees&lt;/code&gt; with the native git command would create a nested folder for each &lt;code&gt;/&lt;/code&gt;. &lt;code&gt;better-branch&lt;/code&gt; removes the hassle by creating 1 folder while still using the full name for the branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Pre/Post Branch Checkout Hooks&lt;/h3&gt; &#xA;&lt;p&gt;Optionally configure pre and post checkout commands, for example:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;checkout and rebase main before branching&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;npm install&lt;/code&gt; before branching&lt;/li&gt; &#xA; &lt;li&gt;run &lt;code&gt;npm run dev&lt;/code&gt; after branching&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;em&gt;branch_pre_commands&lt;/em&gt; and &lt;em&gt;branch_post_commands&lt;/em&gt; in default config. (or &lt;em&gt;worktree_pre_commands&lt;/em&gt; and &lt;em&gt;worktree_post_commands&lt;/em&gt; for creating worktrees)&lt;/p&gt; &#xA;&lt;h2&gt;🌌 Mildly Interesting&lt;/h2&gt; &#xA;&lt;h3&gt;Building / Versioning&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;better-commits&lt;/code&gt; works with &lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;Semantic Release&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;em&gt;package.json&lt;/em&gt; and &lt;em&gt;.github/workflows/publish.yml&lt;/em&gt; for example&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Github&lt;/h3&gt; &#xA;&lt;p&gt;If you use &lt;code&gt;better-commits&lt;/code&gt; to create your &lt;em&gt;first&lt;/em&gt; commit on a new branch&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you open a PR for that branch, it will properly &lt;strong&gt;auto-populate the title and body&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;When you squash/merge, all later commits like &#34;addressing comments&#34; or &#34;fixing mistake&#34;. Will be prefixed with an asterisk for easy deletion. This way, you &lt;strong&gt;maintain your pretty commit even when squashing&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re using Github issues to track your work, and select the &lt;code&gt;closes&lt;/code&gt; footer option when writing your commit. Github will &lt;strong&gt;automatically link and close&lt;/strong&gt; that issue when your &lt;strong&gt;pr is merged&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Fun Facts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://packagephobia.com/result?p=better-commits&#34;&gt;better-commits&lt;/a&gt; is much smaller than its alternative &lt;a href=&#34;https://packagephobia.com/result?p=commitizen&#34;&gt;commitizen&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;better-commits&lt;/code&gt; uses native &lt;code&gt;git&lt;/code&gt; commands under the hood. So any hooks, tools, or staging should work as if it was a normal commit.&lt;/p&gt; &#xA;&lt;p&gt;You can add this badge to your repository to display that you&#39;re using a better-commits repository config&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Markdown&lt;/th&gt; &#xA;   &lt;th&gt;Result&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;[![better commits is enabled](https://img.shields.io/badge/better--commits-enabled?style=for-the-badge&amp;amp;logo=git&amp;amp;color=a6e3a1&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41)](https://github.com/Everduin94/better-commits)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Everduin94/better-commits&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/better--commits-enabled?style=for-the-badge&amp;amp;logo=git&amp;amp;color=a6e3a1&amp;amp;logoColor=D9E0EE&amp;amp;labelColor=302D41&#34; alt=&#34;better commits is enabled&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🪟 Troubleshooting Windows&lt;/h3&gt; &#xA;&lt;h4&gt;Git Bash&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;TTY initialization failed: uv_tty_init returned EBADF (bad file descriptor)&lt;/code&gt;. This may happen because you&#39;re running something like git-bash on Windows. Try another terminal/command-prompt or &lt;code&gt;winpty&lt;/code&gt; to see if its still an issue.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-line&lt;/h4&gt; &#xA;&lt;p&gt;If your are having issues with multilines for commits on windows, you can override the shell via your &lt;code&gt;.better-commits.json&lt;/code&gt; config.&lt;/p&gt; &#xA;&lt;p&gt;Example&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;overrides&#34;: {&#xA;   &#34;shell&#34;: &#34;c:\\Program Files\\Git\\bin\\bash.exe&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>phaserjs/phaser</title>
    <updated>2024-01-10T01:34:30Z</updated>
    <id>tag:github.com,2024-01-10:/phaserjs/phaser</id>
    <link href="https://github.com/phaserjs/phaser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Phaser is a fun, free and fast 2D game framework for making HTML5 games for desktop and mobile web browsers, supporting Canvas and WebGL rendering.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Phaser - HTML5 Game Framework&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/300/phaser-header.png&#34; alt=&#34;Phaser Header&#34; title=&#34;Phaser 3 Header Banner&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/phaser&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/244245946873937922?style=for-the-badge&#34; alt=&#34;Discord chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/phaser_&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/phaser_?style=for-the-badge&#34; alt=&#34;Twitter Follow&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/jsdelivr/npm/hm/phaser?style=for-the-badge&#34; alt=&#34;npm&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/photonstorm/phaser/total?style=for-the-badge&#34; alt=&#34;GitHub&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Phaser is a fast, free, and fun open source HTML5 game framework that offers WebGL and Canvas rendering across desktop and mobile web browsers. Games can be compiled to iOS, Android and native apps by using 3rd party tools. You can use JavaScript or TypeScript for development.&lt;/p&gt; &#xA;&lt;p&gt;Along with the fantastic open source community, Phaser is actively developed and maintained by &lt;a href=&#34;http://www.photonstorm.com&#34;&gt;Photon Storm&lt;/a&gt;. As a result of rapid support, and a developer friendly API, Phaser is currently one of the &lt;a href=&#34;https://github.com/collections/javascript-game-engines&#34;&gt;most starred&lt;/a&gt; game frameworks on GitHub.&lt;/p&gt; &#xA;&lt;p&gt;Thousands of developers from indie and multi-national digital agencies, and universities worldwide use Phaser. Take a look at their incredible &lt;a href=&#34;https://phaser.io/games/&#34;&gt;games&lt;/a&gt; in our showcase video:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=gnfgwkVg7vc&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/gnfgwkVg7vc/maxresdefault.jpg&#34; alt=&#34;Phaser Games Showcase video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Visit:&lt;/strong&gt; The &lt;a href=&#34;https://phaser.io&#34;&gt;Phaser website&lt;/a&gt; and follow on &lt;a href=&#34;https://twitter.com/phaser_&#34;&gt;Phaser Twitter&lt;/a&gt;&lt;br&gt; &lt;strong&gt;Play:&lt;/strong&gt; Some of the amazing games &lt;a href=&#34;https://twitter.com/search?q=%23madewithphaser&amp;amp;src=typed_query&amp;amp;f=live&#34;&gt;#madewithphaser&lt;/a&gt;&lt;br&gt; &lt;strong&gt;Learn:&lt;/strong&gt; &lt;a href=&#34;https://newdocs.phaser.io&#34;&gt;API Docs&lt;/a&gt;, &lt;a href=&#34;https://phaser.discourse.group/&#34;&gt;Support Forum&lt;/a&gt; and &lt;a href=&#34;https://stackoverflow.com/questions/tagged/phaser-framework&#34;&gt;StackOverflow&lt;/a&gt;&lt;br&gt; &lt;strong&gt;Code:&lt;/strong&gt; 2000+ &lt;a href=&#34;https://phaser.io/examples&#34;&gt;Examples&lt;/a&gt; (source available in this &lt;a href=&#34;https://github.com/photonstorm/phaser3-examples&#34;&gt;repo&lt;/a&gt;)&lt;br&gt; &lt;strong&gt;Read:&lt;/strong&gt; The &lt;a href=&#34;https://raw.githubusercontent.com/phaserjs/phaser/master/#newsletter&#34;&gt;Phaser World&lt;/a&gt; Newsletter&lt;br&gt; &lt;strong&gt;Discord:&lt;/strong&gt; Join us on &lt;a href=&#34;https://discord.gg/phaser&#34;&gt;Discord&lt;/a&gt;&lt;br&gt; &lt;strong&gt;Extend:&lt;/strong&gt; With &lt;a href=&#34;https://phaser.io/shop/plugins&#34;&gt;Phaser Plugins&lt;/a&gt;&lt;br&gt; &lt;strong&gt;Be awesome:&lt;/strong&gt; &lt;a href=&#34;https://raw.githubusercontent.com/phaserjs/phaser/master/#support&#34;&gt;Support&lt;/a&gt; the future of Phaser&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Grab the source and join the fun!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-whats-new.png&#34; alt=&#34;What&#39;s New&#34; title=&#34;What&#39;s New&#34;&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://phaser.io/images/github/news.jpg&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;10th November 2023&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The release of Phaser v3.60 in April 2023 was a huge deal for us. The culmination of 10 years of hard work. Even so, we didn&#39;t sit still 🙂 and after 5 heavily tested beta versions, we&#39;re back with v3.70!&lt;/p&gt; &#xA;&lt;p&gt;Although feature-packed this release doesn&#39;t contain any major API breaking changes, so should be an easy upgrade from v3.60. The headliners are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Texture Packer Nine Slice Support&lt;/strong&gt; - We added the Nine Slice Game Object in version 3.60 but now Phaser can load Nine Slice data directly from a &lt;a href=&#34;https://www.codeandweb.com/texturepacker/tutorials/how-to-create-sprite-sheets-for-phaser3?utm_source=ad&amp;amp;utm_medium=banner&amp;amp;utm_campaign=phaser-2018-10-16&#34;&gt;Texture Packer&lt;/a&gt; 7.1 atlas file. This makes it much easier to visually configure your Nine Slice sprites.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Arcade Physics Updates&lt;/strong&gt; - Arcade Physics bodies can now be set to be under &#39;direct control&#39;. When enabled, they&#39;ll automatically calculate their velocity based on positional changes. This allows you to directly move a Body around the physics world by just changing its position, without having to use acceleration or velocity. This is really useful if you want to move it via a Tween, or have it follow a Pointer, or a Path. Because its velocity is calculated based on this movement it will still resolve collisions with other bodies. We also added in support for Collision Groups into Arcade Physics, which allows for very fast filtering of groups of bodies and also the option to set the &#39;slide&#39; factor of a moving body, great for Sokoban style games.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Round Pixels&lt;/strong&gt; - We&#39;ve now moved all of the &#39;round pixels&#39; calculations off the CPU and onto the GPU. This means far less impact on performance when using this feature, which is great for pixel-art style games, or those that want to avoid sub-pixel rendering.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;FX Updates&lt;/strong&gt; - In v3.60 we introduced lots of really nice built-in FX, such as Bloom, Blur and Glow. In v3.70 you&#39;ll find several fixes related to these as well as the new ability to disable them via the game config. If you know you don&#39;t need to use them, disabling them saves boot-up time and memory, especially on mobile devices, as there are less shaders to compile and textures to prepare.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll also find over 100 fixes and updates as well as more new features not listed here. As usual, please check our detailed &lt;a href=&#34;https://github.com/photonstorm/phaser/raw/master/changelog/3.70/CHANGELOG-v3.70.md&#34;&gt;Change Log&lt;/a&gt; for v3.70.&lt;/p&gt; &#xA;&lt;p&gt;v3.70 is available now from the &lt;a href=&#34;https://github.com/photonstorm/phaser/releases&#34;&gt;Releases page&lt;/a&gt; and npm.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll find up to date TypeScript defs that align with this release in the &lt;code&gt;types&lt;/code&gt; folder of this repository.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you find any problems please report them in GitHub issues.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;As usual, I&#39;d like to send my thanks to the Phaser community for their help in both reporting issues and submitting pull requests to fix them 🙂&lt;/p&gt; &#xA;&lt;p&gt;I&#39;d like to send a massive thank-you to everyone who supports &lt;a href=&#34;https://www.patreon.com/photonstorm&#34;&gt;Phaser on Patreon&lt;/a&gt;, GitHub Sponsors and our corporate backers. Your continued funding allows me to keep working on Phaser full-time and this monster of a new release is the very real result of that. If you&#39;ve ever considered becoming a backer, now is the perfect time!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;d like to stay abreast of developments then I&#39;m now publishing them to the &lt;a href=&#34;https://www.patreon.com/photonstorm&#34;&gt;Phaser Patreon&lt;/a&gt;. Here you can find the latest development reports including the concepts behind Phaser 4.&lt;/p&gt; &#xA;&lt;p&gt;You can also follow Phaser on &lt;a href=&#34;https://twitter.com/phaser_&#34;&gt;Twitter&lt;/a&gt; and chat with fellow Phaser devs in our &lt;a href=&#34;https://discord.gg/phaser&#34;&gt;Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Phaser 3 wouldn&#39;t have been possible without the fantastic support of the community and Patreon. Thank you to everyone who supports our work, who shares our belief in the future of HTML5 gaming, and Phaser&#39;s role in that.&lt;/p&gt; &#xA;&lt;p&gt;Happy coding everyone!&lt;/p&gt; &#xA;&lt;p&gt;Cheers,&lt;/p&gt; &#xA;&lt;p&gt;Rich - &lt;a href=&#34;https://twitter.com/photonstorm&#34;&gt;@photonstorm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.phaser.io/images/spacedancer.gif&#34; alt=&#34;boogie&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-support-phaser.png&#34; alt=&#34;Support Phaser&#34; title=&#34;Support Phaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Because Phaser is an open source project, we cannot charge for it in the same way as traditional retail software. What&#39;s more, we don&#39;t ever want to. After all, it&#39;s built on, and was born from, open web standards. It&#39;s part of our manifesto that the core framework will always be free, even if you use it commercially, as many of you do.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You may not realize it, but because of this, we rely 100% on community backing to fund development.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Those funds allow Phaser to improve, and when it improves, everyone involved benefits. Your support helps secure a constant cycle of updates, fixes, new features and planning for the future.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://www.patreon.com/photonstorm&#34;&gt;Patreon&lt;/a&gt; to manage the backing and you can &lt;a href=&#34;https://www.patreon.com/join/photonstorm?&#34;&gt;support Phaser&lt;/a&gt; from $1 per month. The amount you pledge is entirely up to you and can be changed as often as you like. Patreon renews monthly, just like Netflix. You can, of course, cancel at any point. Tears will be shed on this end, but that&#39;s not your concern.&lt;/p&gt; &#xA;&lt;p&gt;Extra special thanks to the following companies whose support makes Phaser possible:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;💖&lt;/th&gt; &#xA;   &lt;th&gt;💖&lt;/th&gt; &#xA;   &lt;th&gt;💖&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hathora.dev&#34;&gt;Hathora&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cerebralfix.com&#34;&gt;Cerebral Fix&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mopub.com/en&#34;&gt;MoPub&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.facebook.com&#34;&gt;Facebook&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://gamedistribution.com&#34;&gt;Game Distribution&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.gamecommerce.com&#34;&gt;GameCommerce&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.mozilla.org&#34;&gt;Mozilla&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.codeandweb.com/texturepacker/tutorials/how-to-create-sprite-sheets-for-phaser3?utm_source=ad&amp;amp;utm_medium=banner&amp;amp;utm_campaign=phaser-2018-10-16&#34;&gt;Texture Packer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.twilio.com/blog/unlock-your-power-to-teach-with-twilioquest?utm_source=github&amp;amp;utm_medium=banner&amp;amp;utm_campaign=phaser&#34;&gt;TwilioQuest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://developers.poki.com/&#34;&gt;Poki&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.crazygames.com&#34;&gt;CrazyGames&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.lagged.com&#34;&gt;Lagged&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://heroiclabs.com/phaserjs/&#34;&gt;Nakama&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://https://www.opgames.org/&#34;&gt;OP Games&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;You?!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/sponsors-2021-08.png&#34; alt=&#34;Sponsors&#34; title=&#34;Our Awesome Sponsors&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-download.png&#34; alt=&#34;Download Phaser&#34; title=&#34;Download Phaser&#34;&gt; &lt;a name=&#34;download&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Phaser 3 is available via GitHub, npm and CDNs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the git repository via &lt;a href=&#34;https://github.com/photonstorm/phaser.git&#34;&gt;https&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/phaserjs/phaser/master/git@github.com:photonstorm/phaser.git&#34;&gt;ssh&lt;/a&gt; or with the GitHub &lt;a href=&#34;github-windows://openRepo/https://github.com/photonstorm/phaser&#34;&gt;Windows&lt;/a&gt; or &lt;a href=&#34;github-mac://openRepo/https://github.com/photonstorm/phaser&#34;&gt;Mac&lt;/a&gt; clients.&lt;/li&gt; &#xA; &lt;li&gt;Download as &lt;a href=&#34;https://github.com/photonstorm/phaser/archive/master.zip&#34;&gt;zip&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Download the build files: &lt;a href=&#34;https://github.com/photonstorm/phaser/releases/download/v3.70.0/phaser.js&#34;&gt;phaser.js&lt;/a&gt; and &lt;a href=&#34;https://github.com/photonstorm/phaser/releases/download/v3.70.0/phaser.min.js&#34;&gt;phaser.min.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;NPM&lt;/h3&gt; &#xA;&lt;p&gt;Install via &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install phaser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jsdelivr.com/package/npm/phaser&#34;&gt;&lt;img src=&#34;https://data.jsdelivr.com/v1/package/npm/phaser/badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.jsdelivr.com/package/npm/phaser&#34;&gt;Phaser is on jsDelivr&lt;/a&gt; which is a &#34;super-fast CDN for developers&#34;. Include the following in your html:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;//cdn.jsdelivr.net/npm/phaser@3.70.0/dist/phaser.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the minified version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;//cdn.jsdelivr.net/npm/phaser@3.70.0/dist/phaser.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API Documentation&lt;/h3&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://newdocs.phaser.io/&#34;&gt;https://newdocs.phaser.io/&lt;/a&gt; to read the docs online using our brand new interface. Use the links to navigate the namespaces, classes and Game Objects lists and also use the new search box.&lt;/p&gt; &#xA;&lt;p&gt;The documentation for Phaser 3 is an on-going project. Please help us by contributing improved docs and examples.&lt;/p&gt; &#xA;&lt;h3&gt;TypeScript Definitions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/photonstorm/phaser/tree/master/types&#34;&gt;TypeScript definitions&lt;/a&gt; can be found inside the &lt;code&gt;types&lt;/code&gt; folder. They are also referenced in the &lt;code&gt;types&lt;/code&gt; entry in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your project, you may need to add the following to your &lt;code&gt;tsconfig.json&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;lib&#34;: [&#34;es6&#34;, &#34;dom&#34;, &#34;dom.iterable&#34;, &#34;scripthost&#34;],&#xA;&#34;typeRoots&#34;: [&#34;./node_modules/phaser/types&#34;],&#xA;&#34;types&#34;: [&#34;Phaser&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We recently updated our &lt;a href=&#34;https://github.com/photonstorm/phaser3-typescript-project-template&#34;&gt;Phaser 3 TypeScript Project Template&lt;/a&gt;, which you can use to get started with. This now uses TypeScript 5 and Phaser v3.60.&lt;/p&gt; &#xA;&lt;p&gt;The TS defs are automatically generated from the JSDoc comments found in the Phaser source code. If you wish to help refine them then you must edit the Phaser JSDoc blocks directly, not the defs file. You can find more details about the parser we built in the &lt;code&gt;scripts/tsgen&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h3&gt;Webpack&lt;/h3&gt; &#xA;&lt;p&gt;We use Webpack to build Phaser and we take advantage of its conditional build flag feature to handle renderer swapping. If you wish to use Webpack with Phaser then please use our &lt;a href=&#34;https://github.com/photonstorm/phaser3-project-template&#34;&gt;Phaser 3 Project Template&lt;/a&gt; as it&#39;s already set-up to handle the build conditions Phaser needs. Recent changes to our build steps mean you should now be able to use any other packager, like Parcel, without any config changes.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Phaser is released under the &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-getting-started.png&#34; alt=&#34;Getting Started&#34; title=&#34;Getting Started&#34;&gt; &lt;a name=&#34;getting-started&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://phaser.io/images/github/learn.jpg&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;Tutorials and guides on Phaser 3 development are being published every week.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phaser.io/tutorials/getting-started-phaser3&#34;&gt;Getting Started with Phaser 3&lt;/a&gt; (useful if you are completely new to Phaser)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phaser.io/tutorials/making-your-first-phaser-3-game&#34;&gt;Making your first Phaser 3 Game&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://academy.zenva.com/product/html5-game-phaser-mini-degree/?a=13&#34;&gt;Complete Phaser 3 Game Development course&lt;/a&gt; contains over 15 hours of videos covering all kinds of important topics.&lt;/li&gt; &#xA; &lt;li&gt;Plus, there are &lt;a href=&#34;https://phaser.io/learn&#34;&gt;over 700 Phaser tutorials&lt;/a&gt; listed on the official website.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;ve 3 tutorials related specifically to creating &lt;strong&gt;Facebook Instant Games&lt;/strong&gt; with Phaser:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phaser.io/news/2018/10/facebook-instant-games-phaser-tutorial&#34;&gt;Getting Started with Facebook Instant Games&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phaser.io/news/2018/11/facebook-instant-games-leaderboards-tutorial&#34;&gt;Facebook Instant Games Leaderboards Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://phaser.io/news/2018/12/facebook-instant-games-ads-tutorial&#34;&gt;Displaying Ads in your Instant Games&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Source Code Examples&lt;/h3&gt; &#xA;&lt;p&gt;During our development of Phaser 3, we created hundreds of examples with the full source code and assets ready available. These examples can be browsed on the &lt;a href=&#34;https://labs.phaser.io&#34;&gt;Phaser 3 Labs&lt;/a&gt;, or clone the &lt;a href=&#34;https://github.com/photonstorm/phaser3-examples&#34;&gt;examples repo&lt;/a&gt;. We are constantly adding to and refining these examples.&lt;/p&gt; &#xA;&lt;h3&gt;Hathora&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hathora.dev/docs&#34;&gt;Hathora Cloud&lt;/a&gt; is a scalable hosting platform for online multiplayer games. You upload your server project using the Hathora console or CLI, and then dynamically create server instances in 10+ regions around the world. You get charged only for the duration of active matches/sessions. It&#39;s perfect for nodejs servers handling WebSocket connections, and takes care of SSL termination (for wss) and DDoS protection.&lt;/p&gt; &#xA;&lt;p&gt;They have also published a &lt;a href=&#34;https://bullet-mania.vercel.app/&#34;&gt;brand-new tutorial&lt;/a&gt; on creating a scalable multiplayer Phaser game. If you think this could be useful for your hosting needs, join their &lt;a href=&#34;https://discord.gg/hathora&#34;&gt;Discord server&lt;/a&gt; to get in touch.&lt;/p&gt; &#xA;&lt;h3&gt;Huge list of Phaser 3 Plugins&lt;/h3&gt; &#xA;&lt;p&gt;Super community member RexRainbow has been publishing Phaser 3 content for years, building up an impressive catalogue in that time. You&#39;ll find &lt;a href=&#34;https://rexrainbow.github.io/phaser3-rex-notes/docs/site/index.html#list-of-my-plugins&#34;&gt;loads of plugins&lt;/a&gt;, from UI controls such as text input boxes, to Firebase support, Finite State Machines and lots more. As well as the plugins there is also a comprehensive set of &#39;Notes&#39; about Phaser 3, going into great detail about how the various systems work. It&#39;s an invaluable resource and well worth checking out at &lt;a href=&#34;https://rexrainbow.github.io/phaser3-rex-notes/docs/site/index.html&#34;&gt;https://rexrainbow.github.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Create Your First Phaser 3 Example&lt;/h3&gt; &#xA;&lt;p&gt;Create an &lt;code&gt;index.html&lt;/code&gt; page locally and paste the following code into it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/phaser@3.70.0/dist/phaser-arcade-physics.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt; &#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;&#xA;    &amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a standard empty webpage. You&#39;ll notice there&#39;s a script tag that is pulling in a build of Phaser 3, but otherwise this webpage doesn&#39;t do anything yet. Now let&#39;s set-up the game config. Paste the following between the &lt;code&gt;&amp;lt;script&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; tags:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const config = {&#xA;    type: Phaser.AUTO,&#xA;    width: 800,&#xA;    height: 600,&#xA;    physics: {&#xA;        default: &#39;arcade&#39;,&#xA;        arcade: {&#xA;            gravity: { y: 200 }&#xA;        }&#xA;    },&#xA;    scene: Example&#xA;};&#xA;&#xA;const game = new Phaser.Game(config);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;config&lt;/code&gt; is a pretty standard Phaser 3 Game Configuration object. We tell &lt;code&gt;config&lt;/code&gt; to use the WebGL renderer if it can, set the canvas to a size of 800 x 600 pixels, enable Arcade Physics, and finally we tell it to use the Example Scene. This hasn&#39;t been implemented yet, so if you run this JavaScript code now you will have an error. Add the following above the &lt;code&gt;config&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Example extends Phaser.Scene&#xA;{&#xA;    constructor ()&#xA;    {&#xA;        super();&#xA;    }&#xA;&#xA;    preload ()&#xA;    {&#xA;        this.load.setBaseURL(&#39;https://labs.phaser.io&#39;);&#xA;&#xA;        this.load.image(&#39;sky&#39;, &#39;assets/skies/space3.png&#39;);&#xA;        this.load.image(&#39;logo&#39;, &#39;assets/sprites/phaser3-logo.png&#39;);&#xA;        this.load.image(&#39;red&#39;, &#39;assets/particles/red.png&#39;);&#xA;    }&#xA;&#xA;    create ()&#xA;    {&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we create a Scene called &lt;code&gt;Example&lt;/code&gt;. We&#39;ve given it 2 functions. The &lt;code&gt;preload&lt;/code&gt; function is where you load assets into your game. In &lt;code&gt;preload&lt;/code&gt;, we set the Base URL to be the Phaser server and load 3 PNG files.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;create&lt;/code&gt; function is empty, so it&#39;s time to fill it in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;create ()&#xA;{&#xA;    this.add.image(400, 300, &#39;sky&#39;);&#xA;&#xA;    const particles = this.add.particles(0, 0, &#39;red&#39;, {&#xA;        speed: 100,&#xA;        scale: { start: 1, end: 0 },&#xA;        blendMode: &#39;ADD&#39;&#xA;    });&#xA;&#xA;    const logo = this.physics.add.image(400, 100, &#39;logo&#39;);&#xA;&#xA;    logo.setVelocity(100, 200);&#xA;    logo.setBounce(1, 1);&#xA;    logo.setCollideWorldBounds(true);&#xA;&#xA;    particles.startFollow(logo);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we add a sky image into the game and create a Particle Emitter. The &lt;code&gt;scale&lt;/code&gt; value means that the particles will initially be large and will shrink to nothing as their lifespan progresses.&lt;/p&gt; &#xA;&lt;p&gt;After creating the &lt;code&gt;emitter&lt;/code&gt;, we add a logo image called &lt;code&gt;logo&lt;/code&gt;. Since &lt;code&gt;logo&lt;/code&gt; is a Physics Image, &lt;code&gt;logo&lt;/code&gt; is given a physics body by default. We set some properties for &lt;code&gt;logo&lt;/code&gt;: velocity, bounce (or restitution), and collision with the world bounds. These properties will make our logo bounce around the screen. Finally, we tell the particle emitter to follow the logo - so as the logo moves, the particles will flow from it.&lt;/p&gt; &#xA;&lt;p&gt;Run it in your browser and you&#39;ll see the following:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/300/sample1.png&#34; alt=&#34;Phaser 3 Demo&#34; title=&#34;Phaser 3 Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;(Got an error? Here&#39;s the &lt;a href=&#34;https://gist.github.com/photonstorm/46cb8fb4b19fc7717dcad514cdcec064&#34;&gt;full code&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;This is a tiny example, and there are hundreds more for you to explore, but hopefully it shows how expressive and quick Phaser is to use. With just a few easily readable lines of code, we&#39;ve got something pretty impressive up on screen!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://blog.ourcade.co&#34;&gt;&lt;img src=&#34;https://phaser.io/images/github/ourcade.jpg&#34; alt=&#34;Ourcade&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ourcade have published &lt;a href=&#34;https://blog.ourcade.co&#34;&gt;two great Phaser 3 books&lt;/a&gt;. They&#39;ll take you from getting set-up, through to finishing your first game using modern JavaScript or TypeScript and they&#39;re both completely free! They also publish a huge range of quality tutorials and videos, so be sure to check out their site every week.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gumroad.com/a/244184179&#34;&gt;&lt;img src=&#34;https://phaser.io/images/github/feronato.png&#34; alt=&#34;HTML5 Cross Platform Game Development with Phaser 3&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Learn the secrets of HTML5 game development with Phaser 3.50 while building a cross platform endless runner game. Designed both for beginners and skilled programmers, the course guides you from an empty folder introducing the bare bones of JavaScript to advanced Phaser 3 features. Find out more details about &lt;a href=&#34;https://gumroad.com/a/244184179&#34;&gt;HTML5 Cross Platform Game Development with Phaser&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-building-phaser.png&#34; alt=&#34;Building Phaser&#34; title=&#34;Building Phaser&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are both plain and minified compiled versions of Phaser in the &lt;code&gt;dist&lt;/code&gt; folder of the repository. The plain version is for use during development, and the minified version is for production use. You can and should also create your own builds.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Builds&lt;/h3&gt; &#xA;&lt;p&gt;Phaser 3 is built using Webpack and we take advantage of the Webpack definePlugin feature to allow for conditional building of the Canvas and WebGL renderers and extra plugins. You can custom the build process to only include the features you require. Doing so can cut the main build file size down to just 70KB.&lt;/p&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://github.com/photonstorm/phaser3-custom-build#creating-custom-phaser-3-builds&#34;&gt;comprehensive guide&lt;/a&gt; on creating Custom Builds of Phaser 3 for full details.&lt;/p&gt; &#xA;&lt;h3&gt;Building from Source&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to build Phaser 3 from source, ensure you have the required packages by cloning the repository and then running &lt;code&gt;npm install&lt;/code&gt; on your source directory.&lt;/p&gt; &#xA;&lt;p&gt;You can then run &lt;code&gt;webpack&lt;/code&gt; to create a development build in the &lt;code&gt;build&lt;/code&gt; folder which includes source maps for local testing. You can also &lt;code&gt;npm run dist&lt;/code&gt; to create a minified packaged build in the &lt;code&gt;dist&lt;/code&gt; folder. For a list of all commands available use &lt;code&gt;npm run help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-change-log.png&#34; alt=&#34;Change Log&#34; title=&#34;Change Log&#34;&gt; &lt;a name=&#34;changelog&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Change Log&lt;/h1&gt; &#xA;&lt;p&gt;Due to the increasing size of our Change Logs we have now split them up, one version per folder.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaserjs/phaser/master/changelog/3.70/CHANGELOG-v3.70.md&#34;&gt;v3.70.0 Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/phaserjs/phaser/master/CHANGELOG.md&#34;&gt;v3.0.0 to v3.60.0. Change Logs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We&#39;ve organized the Change Logs into commonly themed sections to make it more digestible, but we appreciate there is a lot in there. Please don&#39;t feel overwhelmed! If you need clarification about something, join us on the Phaser Discord and ask.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-contributing.png&#34; alt=&#34;Contributing&#34; title=&#34;Contributing&#34;&gt; &lt;a name=&#34;contributing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/photonstorm/phaser/raw/master/.github/CONTRIBUTING.md&#34;&gt;Contributors Guide&lt;/a&gt; contains full details on how to help with Phaser development. The main points are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Found a bug? Report it on &lt;a href=&#34;https://github.com/photonstorm/phaser/issues&#34;&gt;GitHub Issues&lt;/a&gt; and include a code sample. Please state which version of Phaser you are using! This is vitally important.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before submitting a Pull Request run your code through &lt;a href=&#34;https://eslint.org/&#34;&gt;ES Lint&lt;/a&gt; using our &lt;a href=&#34;https://github.com/photonstorm/phaser/raw/master/.eslintrc.json&#34;&gt;config&lt;/a&gt; and respect our &lt;a href=&#34;https://github.com/photonstorm/phaser/raw/master/.editorconfig&#34;&gt;Editor Config&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before contributing read the &lt;a href=&#34;https://github.com/photonstorm/phaser/raw/master/.github/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Written something cool in Phaser? Please tell us about it in the &lt;a href=&#34;https://phaser.discourse.group/&#34;&gt;forum&lt;/a&gt;, or email &lt;a href=&#34;mailto:support@phaser.io&#34;&gt;support@phaser.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://phaser.io/images/github/div-created-by.png&#34; alt=&#34;Created by&#34; title=&#34;Created by&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Phaser is a &lt;a href=&#34;http://www.photonstorm.com&#34;&gt;Photon Storm&lt;/a&gt; production.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.phaser.io/images/github/photonstorm-x2.png&#34; alt=&#34;storm&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;mailto:rich@photonstorm.com&#34;&gt;Richard Davey&lt;/a&gt;. Powered by coffee, anime, pixels and love.&lt;/p&gt; &#xA;&lt;p&gt;The Phaser logo and characters are © 2011 - 2023 Photon Storm Limited.&lt;/p&gt; &#xA;&lt;p&gt;All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Above all, video games are meant to be just one thing: fun. Fun for everyone.&#34; - Satoru Iwata&lt;/p&gt;</summary>
  </entry>
</feed>