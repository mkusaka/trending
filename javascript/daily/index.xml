<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-22T01:36:27Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>shahriarsajeeb/Eshop-tutorial</title>
    <updated>2023-04-22T01:36:27Z</updated>
    <id>tag:github.com,2023-04-22:/shahriarsajeeb/Eshop-tutorial</id>
    <link href="https://github.com/shahriarsajeeb/Eshop-tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;##&lt;em&gt;&lt;strong&gt;DISCLAIMER&lt;/strong&gt;&lt;/em&gt; This project has moved maintainers and is no longer developed here. The up to date template can be found &lt;a href=&#34;https://github.com/rennemannd/MERN-Template&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;em&gt;&lt;strong&gt;IMPORTANT NOTE&lt;/strong&gt;&lt;/em&gt; -&lt;/h4&gt; &#xA;&lt;p&gt;This project does not have a mongoDB connection setup. Setup the connection based on the environments below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;local development: create a config file (make sure to name it config.js) in the config folder, which exports your db.uri connection. An example is provided, config/config.example.js. This file will be ignored by git so your db credentials will be kept safe when the app is deployed.&lt;/li&gt; &#xA; &lt;li&gt;production: Since the config file is not pushed when you deploy your app, you must specifiy your db uri in heorku. Set the uri in heroku as specified in &lt;a href=&#34;https://devcenter.heroku.com/articles/config-vars&#34;&gt;this&lt;/a&gt; resource. Make sure you name the environement variable &#34;DB_URI&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository aims to assist you in beginning work on a MERN stack application with a solid file structure as a foundation. To get started make a copy of this template repo for your project teams.&lt;/p&gt; &#xA;&lt;p&gt;Since this project will hold both the client application and the server application there will be node modules in two different places. First run &lt;code&gt;npm install&lt;/code&gt; from the root. After this you will run &lt;code&gt;npm run-script install-all&lt;/code&gt; from the root. From now on run this command anytime you want to install all modules again. This is a script we have defined in package.json .&lt;/p&gt; &#xA;&lt;p&gt;This app can be deployed directly to heroku since there is a script defined in package.json which will automatically handle building and deploying the app. For more information on deploying to heroku reference the extra resources at the bottom of this file.&lt;/p&gt; &#xA;&lt;h2&gt;File structure&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;code&gt;client&lt;/code&gt; - Holds the client application&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;public&lt;/code&gt; - This holds all of our static files&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;src&lt;/code&gt;&lt;/h4&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;h4&gt;&lt;code&gt;assets&lt;/code&gt; - This folder holds assets such as images, docs, and fonts&lt;/h4&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;h4&gt;&lt;code&gt;components&lt;/code&gt; - This folder holds all of the different components that will make up our views&lt;/h4&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;h4&gt;&lt;code&gt;views&lt;/code&gt; - These represent a unique page on the website i.e. Home or About. These are still normal react components.&lt;/h4&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;h4&gt;&lt;code&gt;App.js&lt;/code&gt; - This is what renders all of our browser routes and different views&lt;/h4&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;h4&gt;&lt;code&gt;index.js&lt;/code&gt; - This is what renders the react app by rendering App.js, should not change&lt;/h4&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;package.json&lt;/code&gt; - Defines npm behaviors and packages for the client&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;server&lt;/code&gt; - Holds the server application&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;config&lt;/code&gt; - This holds our configuration files, like mongoDB uri&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;controllers&lt;/code&gt; - These hold all of the callback functions that each route will call&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;models&lt;/code&gt; - This holds all of our data models&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;routes&lt;/code&gt; - This holds all of our HTTP to URL path associations for each unique url&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;tests&lt;/code&gt; - This holds all of our server tests that we have defined&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;&lt;code&gt;server.js&lt;/code&gt; - Defines npm behaviors and packages for the client&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;package.json&lt;/code&gt; - Defines npm behaviors like the scripts defined in the next section of the README&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;code&gt;.gitignore&lt;/code&gt; - Tells git which files to ignore&lt;/h4&gt; &#xA;&lt;h4&gt;&lt;code&gt;README&lt;/code&gt; - This file!&lt;/h4&gt; &#xA;&lt;h2&gt;Available Scripts&lt;/h2&gt; &#xA;&lt;p&gt;In the project directory, you can run:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run-script dev&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs both the client app and the server app in development mode.&lt;br&gt; Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view the client in the browser.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run-script client&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs just the client app in development mode.&lt;br&gt; Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view the client in the browser.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run-script server&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs just the server in development mode.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt; It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt; &#xA;&lt;p&gt;If deploying to heroku this does not need to be run since it is handled by the heroku-postbuild script&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/deployment&#34;&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more in the &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/getting-started&#34;&gt;Create React App documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn how to setup a local MongoDB instance for testing, check out how to &lt;a href=&#34;https://docs.mongodb.com/guides/server/drivers/&#34;&gt;Connect to MongoDB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn how to deploy a full-stack web app to heroku, check out &lt;a href=&#34;https://daveceddia.com/deploy-react-express-app-heroku/&#34;&gt;this great guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn React, check out the &lt;a href=&#34;https://reactjs.org/&#34;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;npm run build&lt;/code&gt; fails to minify&lt;/h3&gt; &#xA;&lt;p&gt;This section has moved here: &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify&#34;&gt;https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>titaniumnetwork-dev/Ultraviolet</title>
    <updated>2023-04-22T01:36:27Z</updated>
    <id>tag:github.com,2023-04-22:/titaniumnetwork-dev/Ultraviolet</id>
    <link href="https://github.com/titaniumnetwork-dev/Ultraviolet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A highly sophisticated proxy used for evading internet censorship or accessing websites in a controlled sandbox using the power of service-workers. Works by intercepting HTTP requests with a service worker script that follows the TompHTTP specifications.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/titaniumnetwork-dev/Ultraviolet-Static/main/public/uv.png&#34; height=&#34;250&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Ultraviolet&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@titaniumnetwork-dev/ultraviolet&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@titaniumnetwork-dev/ultraviolet.svg?maxAge=3600&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ultraviolet is a highly advanced web proxy used for evading internet censorship or accessing websites in a controlled sandbox. It is designed with security and performance in mind. Ultraviolet intercepts HTTP requests with a service worker, while adhering to the &lt;a href=&#34;https://github.com/tomphttp&#34;&gt;TompHTTP specifications&lt;/a&gt; and is a leader in innovative web proxy technologies.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Ultraviolet offers several features that set it apart from its predecessors, including CAPTCHA and hCAPTCHA support, URL encoding settings for added security, client-side configuration via service-workers, high speed compared to other web proxies, blacklist settings and more for easy hosting, leak prevention, regular updates, and improved resource usage and speed for better setups with a dedicated server instance.&lt;/p&gt; &#xA;&lt;h2&gt;Supported Sites&lt;/h2&gt; &#xA;&lt;p&gt;Some of the popular websites that Ultraviolet supports include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://google.com&#34;&gt;Google&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com&#34;&gt;Youtube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spotify.com&#34;&gt;Spotify&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reddit.com&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://play.geforcenow.com/&#34;&gt;GeForce NOW&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://now.gg&#34;&gt;now.gg&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Used by&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/holy-unblocker/website&#34;&gt;Holy Unblocker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hypertabs.cc/&#34;&gt;Hypertabs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TerbiumOS/webOS&#34;&gt;Terbium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/caracal-js/Incognito&#34;&gt;Incognito&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NebulaServices/Nebula&#34;&gt;Nebula&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Metallic-Web/Metallic&#34;&gt;Metallic&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Changelog&lt;/h2&gt; &#xA;&lt;p&gt;Changes are documented in the &lt;a href=&#34;https://raw.githubusercontent.com/titaniumnetwork-dev/Ultraviolet/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;This repository can be built, but it can&#39;t be deployed to any services. See &lt;a href=&#34;https://github.com/titaniumnetwork-dev/Ultraviolet-App&#34;&gt;Ultraviolet-App&lt;/a&gt; for a complete and customizable Ultraviolet setup that you can deploy.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation can be found in the &lt;a href=&#34;https://github.com/titaniumnetwork-dev/Ultraviolet/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>patriksimek/vm2</title>
    <updated>2023-04-22T01:36:27Z</updated>
    <id>tag:github.com,2023-04-22:/patriksimek/vm2</id>
    <link href="https://github.com/patriksimek/vm2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advanced vm/sandbox for Node.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;vm2 &lt;a href=&#34;https://www.npmjs.com/package/vm2&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/vm2.svg?style=flat-square&#34; alt=&#34;NPM Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/vm2&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/vm2.svg?style=flat-square&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://packagequality.com/#?package=vm2&#34;&gt;&lt;img src=&#34;http://npm.packagequality.com/shield/vm2.svg?style=flat-square&#34; alt=&#34;Package Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/patriksimek/vm2/actions/workflows/node-test.yml&#34;&gt;&lt;img src=&#34;https://github.com/patriksimek/vm2/actions/workflows/node-test.yml/badge.svg?sanitize=true&#34; alt=&#34;Node.js CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/patriksimek/vm2&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/patriksimek/vm2/badge.svg?sanitize=true&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;vm2 is a sandbox that can run untrusted code with whitelisted Node&#39;s built-in modules. Securely!&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runs untrusted code securely in a single process with your code side by side&lt;/li&gt; &#xA; &lt;li&gt;Full control over the sandbox&#39;s console output&lt;/li&gt; &#xA; &lt;li&gt;The sandbox has limited access to the process&#39;s methods&lt;/li&gt; &#xA; &lt;li&gt;It is possible to require modules (built-in and external) from the sandbox&lt;/li&gt; &#xA; &lt;li&gt;You can limit access to certain (or all) built-in modules&lt;/li&gt; &#xA; &lt;li&gt;You can securely call methods and exchange data and callbacks between sandboxes&lt;/li&gt; &#xA; &lt;li&gt;Is immune to all known methods of attacks&lt;/li&gt; &#xA; &lt;li&gt;Transpiler support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How does it work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It uses the internal VM module to create a secure context.&lt;/li&gt; &#xA; &lt;li&gt;It uses &lt;a href=&#34;https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Proxy&#34;&gt;Proxies&lt;/a&gt; to prevent escaping from the sandbox.&lt;/li&gt; &#xA; &lt;li&gt;It overrides the built-in require to control access to modules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the difference between Node&#39;s vm and vm2?&lt;/h2&gt; &#xA;&lt;p&gt;Try it yourself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const vm = require(&#39;vm&#39;);&#xA;vm.runInNewContext(&#39;this.constructor.constructor(&#34;return process&#34;)().exit()&#39;);&#xA;console.log(&#39;Never gets executed.&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {VM} = require(&#39;vm2&#39;);&#xA;new VM().run(&#39;this.constructor.constructor(&#34;return process&#34;)().exit()&#39;);&#xA;// Throws ReferenceError: process is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: VM2 requires Node.js 6 or newer.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install vm2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {VM} = require(&#39;vm2&#39;);&#xA;const vm = new VM();&#xA;&#xA;vm.run(`process.exit()`); // TypeError: process.exit is not a function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {NodeVM} = require(&#39;vm2&#39;);&#xA;const vm = new NodeVM({&#xA;    require: {&#xA;        external: true,&#xA;        root: &#39;./&#39;&#xA;    }&#xA;});&#xA;&#xA;vm.run(`&#xA;    var request = require(&#39;request&#39;);&#xA;    request(&#39;http://www.google.com&#39;, function (error, response, body) {&#xA;        console.error(error);&#xA;        if (!error &amp;amp;&amp;amp; response.statusCode == 200) {&#xA;            console.log(body); // Show the HTML for the Google homepage.&#xA;        }&#xA;    });&#xA;`, &#39;vm.js&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#vm&#34;&gt;VM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#nodevm&#34;&gt;NodeVM&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#vmscript&#34;&gt;VMScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#error-handling&#34;&gt;Error handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#debugging-a-sandboxed-code&#34;&gt;Debugging a sandboxed code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#read-only-objects-experimental&#34;&gt;Read-only objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#protected-objects-experimental&#34;&gt;Protected objects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#cross-sandbox-relationships&#34;&gt;Cross-sandbox relationships&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/patriksimek/vm2/master/#cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patriksimek/vm2/wiki/2.x-to-3.x-changes&#34;&gt;2.x to 3.x changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patriksimek/vm2/wiki/1.x-and-2.x-docs&#34;&gt;1.x and 2.x docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/patriksimek/vm2/wiki/Contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;VM&lt;/h2&gt; &#xA;&lt;p&gt;VM is a simple sandbox to synchronously run untrusted code without the &lt;code&gt;require&lt;/code&gt; feature. Only JavaScript built-in objects and Node&#39;s &lt;code&gt;Buffer&lt;/code&gt; are available. Scheduling functions (&lt;code&gt;setInterval&lt;/code&gt;, &lt;code&gt;setTimeout&lt;/code&gt; and &lt;code&gt;setImmediate&lt;/code&gt;) are not available by default.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;timeout&lt;/code&gt; - Script timeout in milliseconds. &lt;strong&gt;WARNING&lt;/strong&gt;: You might want to use this option together with &lt;code&gt;allowAsync=false&lt;/code&gt;. Further, operating on returned objects from the sandbox can run arbitrary code and circumvent the timeout. One should test if the returned object is a primitive with &lt;code&gt;typeof&lt;/code&gt; and fully discard it (doing logging or creating error messages with such an object might also run arbitrary code again) in the other case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sandbox&lt;/code&gt; - VM&#39;s global object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compiler&lt;/code&gt; - &lt;code&gt;javascript&lt;/code&gt; (default) or &lt;code&gt;coffeescript&lt;/code&gt; or custom compiler function. The library expects you to have coffee-script pre-installed if the compiler is set to &lt;code&gt;coffeescript&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eval&lt;/code&gt; - If set to &lt;code&gt;false&lt;/code&gt; any calls to &lt;code&gt;eval&lt;/code&gt; or function constructors (&lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;GeneratorFunction&lt;/code&gt;, etc.) will throw an &lt;code&gt;EvalError&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wasm&lt;/code&gt; - If set to &lt;code&gt;false&lt;/code&gt; any attempt to compile a WebAssembly module will throw a &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowAsync&lt;/code&gt; - If set to &lt;code&gt;false&lt;/code&gt; any attempt to run code using &lt;code&gt;async&lt;/code&gt; will throw a &lt;code&gt;VMError&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Timeout is only effective on synchronous code that you run through &lt;code&gt;run&lt;/code&gt;. Timeout does &lt;strong&gt;NOT&lt;/strong&gt; work on any method returned by VM. There are some situations when timeout doesn&#39;t work - see &lt;a href=&#34;https://github.com/patriksimek/vm2/pull/244&#34;&gt;#244&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {VM} = require(&#39;vm2&#39;);&#xA;&#xA;const vm = new VM({&#xA;    timeout: 1000,&#xA;    allowAsync: false,&#xA;    sandbox: {}&#xA;});&#xA;&#xA;vm.run(&#39;process.exit()&#39;); // throws ReferenceError: process is not defined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also retrieve values from VM.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let number = vm.run(&#39;1337&#39;); // returns 1337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: See tests for more usage examples.&lt;/p&gt; &#xA;&lt;h2&gt;NodeVM&lt;/h2&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;VM&lt;/code&gt;, &lt;code&gt;NodeVM&lt;/code&gt; allows you to require modules in the same way that you would in the regular Node&#39;s context.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Options:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;console&lt;/code&gt; - &lt;code&gt;inherit&lt;/code&gt; to enable console, &lt;code&gt;redirect&lt;/code&gt; to redirect to events, &lt;code&gt;off&lt;/code&gt; to disable console (default: &lt;code&gt;inherit&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sandbox&lt;/code&gt; - VM&#39;s global object.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compiler&lt;/code&gt; - &lt;code&gt;javascript&lt;/code&gt; (default) or &lt;code&gt;coffeescript&lt;/code&gt; or custom compiler function (which receives the code, and it&#39;s file path). The library expects you to have coffee-script pre-installed if the compiler is set to &lt;code&gt;coffeescript&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;eval&lt;/code&gt; - If set to &lt;code&gt;false&lt;/code&gt; any calls to &lt;code&gt;eval&lt;/code&gt; or function constructors (&lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;GeneratorFunction&lt;/code&gt;, etc.) will throw an &lt;code&gt;EvalError&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wasm&lt;/code&gt; - If set to &lt;code&gt;false&lt;/code&gt; any attempt to compile a WebAssembly module will throw a &lt;code&gt;WebAssembly.CompileError&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sourceExtensions&lt;/code&gt; - Array of file extensions to treat as source code (default: &lt;code&gt;[&#39;js&#39;]&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; or object to enable &lt;code&gt;require&lt;/code&gt; method (default: &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.external&lt;/code&gt; - Values can be &lt;code&gt;true&lt;/code&gt;, an array of allowed external modules, or an object (default: &lt;code&gt;false&lt;/code&gt;). All paths matching &lt;code&gt;/node_modules/${any_allowed_external_module}/(?!/node_modules/)&lt;/code&gt; are allowed to be required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.external.modules&lt;/code&gt; - Array of allowed external modules. Also supports wildcards, so specifying &lt;code&gt;[&#39;@scope/*-ver-??]&lt;/code&gt;, for instance, will allow using all modules having a name of the form &lt;code&gt;@scope/something-ver-aa&lt;/code&gt;, &lt;code&gt;@scope/other-ver-11&lt;/code&gt;, etc. The &lt;code&gt;*&lt;/code&gt; wildcard does not match path separators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.external.transitive&lt;/code&gt; - Boolean which indicates if transitive dependencies of external modules are allowed (default: &lt;code&gt;false&lt;/code&gt;). &lt;strong&gt;WARNING&lt;/strong&gt;: When a module is required transitively, any module is then able to require it normally, even if this was not possible before it was loaded.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.builtin&lt;/code&gt; - Array of allowed built-in modules, accepts [&#34;*&#34;] for all (default: none). &lt;strong&gt;WARNING&lt;/strong&gt;: &#34;*&#34; can be dangerous as new built-ins can be added.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.root&lt;/code&gt; - Restricted path(s) where local modules can be required (default: every path).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.mock&lt;/code&gt; - Collection of mock modules (both external or built-in).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.context&lt;/code&gt; - &lt;code&gt;host&lt;/code&gt; (default) to require modules in the host and proxy them into the sandbox. &lt;code&gt;sandbox&lt;/code&gt; to load, compile, and require modules in the sandbox. Except for &lt;code&gt;events&lt;/code&gt;, built-in modules are always required in the host and proxied into the sandbox.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.import&lt;/code&gt; - An array of modules to be loaded into NodeVM on start.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.resolve&lt;/code&gt; - An additional lookup function in case a module wasn&#39;t found in one of the traditional node lookup paths.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.customRequire&lt;/code&gt; - Use instead of the &lt;code&gt;require&lt;/code&gt; function to load modules from the host.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.strict&lt;/code&gt; - &lt;code&gt;false&lt;/code&gt; to not force strict mode on modules loaded by require (default: &lt;code&gt;true&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;require.fs&lt;/code&gt; - Custom file system implementation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nesting&lt;/code&gt; - &lt;strong&gt;WARNING&lt;/strong&gt;: Allowing this is a security risk as scripts can create a NodeVM which can require any host module. &lt;code&gt;true&lt;/code&gt; to enable VMs nesting (default: &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wrapper&lt;/code&gt; - &lt;code&gt;commonjs&lt;/code&gt; (default) to wrap script into CommonJS wrapper, &lt;code&gt;none&lt;/code&gt; to retrieve value returned by the script.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;argv&lt;/code&gt; - Array to be passed to &lt;code&gt;process.argv&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;env&lt;/code&gt; - Object to be passed to &lt;code&gt;process.env&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;strict&lt;/code&gt; - &lt;code&gt;true&lt;/code&gt; to loaded modules in strict mode (default: &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT&lt;/strong&gt;: Timeout is not effective for NodeVM so it is not immune to &lt;code&gt;while (true) {}&lt;/code&gt; or similar evil.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;REMEMBER&lt;/strong&gt;: The more modules you allow, the more fragile your sandbox becomes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {NodeVM} = require(&#39;vm2&#39;);&#xA;&#xA;const vm = new NodeVM({&#xA;    console: &#39;inherit&#39;,&#xA;    sandbox: {},&#xA;    require: {&#xA;        external: true,&#xA;        builtin: [&#39;fs&#39;, &#39;path&#39;],&#xA;        root: &#39;./&#39;,&#xA;        mock: {&#xA;            fs: {&#xA;                readFileSync: () =&amp;gt; &#39;Nice try!&#39;&#xA;            }&#xA;        }&#xA;    }&#xA;});&#xA;&#xA;// Sync&#xA;&#xA;let functionInSandbox = vm.run(&#39;module.exports = function(who) { console.log(&#34;hello &#34;+ who); }&#39;);&#xA;functionInSandbox(&#39;world&#39;);&#xA;&#xA;// Async&#xA;&#xA;let functionWithCallbackInSandbox = vm.run(&#39;module.exports = function(who, callback) { callback(&#34;hello &#34;+ who); }&#39;);&#xA;functionWithCallbackInSandbox(&#39;world&#39;, (greeting) =&amp;gt; {&#xA;    console.log(greeting);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When &lt;code&gt;wrapper&lt;/code&gt; is set to &lt;code&gt;none&lt;/code&gt;, &lt;code&gt;NodeVM&lt;/code&gt; behaves more like &lt;code&gt;VM&lt;/code&gt; for synchronous code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;assert.ok(vm.run(&#39;return true&#39;) === true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;TIP&lt;/strong&gt;: See tests for more usage examples.&lt;/p&gt; &#xA;&lt;h3&gt;Loading modules by relative path&lt;/h3&gt; &#xA;&lt;p&gt;To load modules by relative path, you must pass the full path of the script you&#39;re running as a second argument to vm&#39;s &lt;code&gt;run&lt;/code&gt; method if the script is a string. The filename is then displayed in any stack traces generated by the script.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;vm.run(&#39;require(&#34;foobar&#34;)&#39;, &#39;/data/myvmscript.js&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the script you are running is a VMScript, the path is given in the VMScript constructor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const script = new VMScript(&#39;require(&#34;foobar&#34;)&#39;, {filename: &#39;/data/myvmscript.js&#39;});&#xA;vm.run(script);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;VMScript&lt;/h2&gt; &#xA;&lt;p&gt;You can increase performance by using precompiled scripts. The precompiled VMScript can be run multiple times. It is important to note that the code is not bound to any VM (context); rather, it is bound before each run, just for that run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {VM, VMScript} = require(&#39;vm2&#39;);&#xA;&#xA;const vm = new VM();&#xA;const script = new VMScript(&#39;Math.random()&#39;);&#xA;console.log(vm.run(script));&#xA;console.log(vm.run(script));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It works for both &lt;code&gt;VM&lt;/code&gt; and &lt;code&gt;NodeVM&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {NodeVM, VMScript} = require(&#39;vm2&#39;);&#xA;&#xA;const vm = new NodeVM();&#xA;const script = new VMScript(&#39;module.exports = Math.random()&#39;);&#xA;console.log(vm.run(script));&#xA;console.log(vm.run(script));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Code is compiled automatically the first time it runs. One can compile the code anytime with &lt;code&gt;script.compile()&lt;/code&gt;. Once the code is compiled, the method has no effect.&lt;/p&gt; &#xA;&lt;h2&gt;Error handling&lt;/h2&gt; &#xA;&lt;p&gt;Errors in code compilation and synchronous code execution can be handled by &lt;code&gt;try-catch&lt;/code&gt;. Errors in asynchronous code execution can be handled by attaching &lt;code&gt;uncaughtException&lt;/code&gt; event handler to Node&#39;s &lt;code&gt;process&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;try {&#xA;    var script = new VMScript(&#39;Math.random()&#39;).compile();&#xA;} catch (err) {&#xA;    console.error(&#39;Failed to compile script.&#39;, err);&#xA;}&#xA;&#xA;try {&#xA;    vm.run(script);&#xA;} catch (err) {&#xA;    console.error(&#39;Failed to execute script.&#39;, err);&#xA;}&#xA;&#xA;process.on(&#39;uncaughtException&#39;, (err) =&amp;gt; {&#xA;    console.error(&#39;Asynchronous error caught.&#39;, err);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Debugging a sandboxed code&lt;/h2&gt; &#xA;&lt;p&gt;You can debug or inspect code running in the sandbox as if it was running in a normal process.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can use breakpoints (which requires you to specify a script file name)&lt;/li&gt; &#xA; &lt;li&gt;You can use &lt;code&gt;debugger&lt;/code&gt; keyword.&lt;/li&gt; &#xA; &lt;li&gt;You can use step-in to step inside the code running in the sandbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;/tmp/main.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {VM, VMScript} = require(&#39;.&#39;);&#xA;const fs = require(&#39;fs&#39;);&#xA;const file = `${__dirname}/sandbox.js`;&#xA;&#xA;// By providing a file name as second argument you enable breakpoints&#xA;const script = new VMScript(fs.readFileSync(file), file);&#xA;&#xA;new VM().run(script);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;/tmp/sandbox.js&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const foo = &#39;ahoj&#39;;&#xA;&#xA;// The debugger keyword works just fine everywhere.&#xA;// Even without specifying a file name to the VMScript object.&#xA;debugger;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Read-only objects (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;To prevent sandboxed scripts from adding, changing, or deleting properties from the proxied objects, you can use &lt;code&gt;freeze&lt;/code&gt; methods to make the object read-only. This is only effective inside VM. Frozen objects are affected deeply. Primitive types cannot be frozen.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example without using &lt;code&gt;freeze&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const util = {&#xA;    add: (a, b) =&amp;gt; a + b&#xA;}&#xA;&#xA;const vm = new VM({&#xA;    sandbox: {util}&#xA;});&#xA;&#xA;vm.run(&#39;util.add = (a, b) =&amp;gt; a - b&#39;);&#xA;console.log(util.add(1, 1)); // returns 0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example with using &lt;code&gt;freeze&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const vm = new VM(); // Objects specified in the sandbox cannot be frozen.&#xA;vm.freeze(util, &#39;util&#39;); // Second argument adds object to global.&#xA;&#xA;vm.run(&#39;util.add = (a, b) =&amp;gt; a - b&#39;); // Fails silently when not in strict mode.&#xA;console.log(util.add(1, 1)); // returns 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; It is not possible to freeze objects that have already been proxied to the VM.&lt;/p&gt; &#xA;&lt;h2&gt;Protected objects (experimental)&lt;/h2&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;freeze&lt;/code&gt;, this method allows sandboxed scripts to add, change, or delete properties on objects, with one exception - it is not possible to attach functions. Sandboxed scripts are therefore not able to modify methods like &lt;code&gt;toJSON&lt;/code&gt;, &lt;code&gt;toString&lt;/code&gt; or &lt;code&gt;inspect&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; It is not possible to protect objects that have already been proxied to the VM.&lt;/p&gt; &#xA;&lt;h2&gt;Cross-sandbox relationships&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const assert = require(&#39;assert&#39;);&#xA;const {VM} = require(&#39;vm2&#39;);&#xA;&#xA;const sandbox = {&#xA;    object: new Object(),&#xA;    func: new Function(),&#xA;    buffer: new Buffer([0x01, 0x05])&#xA;}&#xA;&#xA;const vm = new VM({sandbox});&#xA;&#xA;assert.ok(vm.run(`object`) === sandbox.object);&#xA;assert.ok(vm.run(`object instanceof Object`));&#xA;assert.ok(vm.run(`object`) instanceof Object);&#xA;assert.ok(vm.run(`object.__proto__ === Object.prototype`));&#xA;assert.ok(vm.run(`object`).__proto__ === Object.prototype);&#xA;&#xA;assert.ok(vm.run(`func`) === sandbox.func);&#xA;assert.ok(vm.run(`func instanceof Function`));&#xA;assert.ok(vm.run(`func`) instanceof Function);&#xA;assert.ok(vm.run(`func.__proto__ === Function.prototype`));&#xA;assert.ok(vm.run(`func`).__proto__ === Function.prototype);&#xA;&#xA;assert.ok(vm.run(`new func() instanceof func`));&#xA;assert.ok(vm.run(`new func()`) instanceof sandbox.func);&#xA;assert.ok(vm.run(`new func().__proto__ === func.prototype`));&#xA;assert.ok(vm.run(`new func()`).__proto__ === sandbox.func.prototype);&#xA;&#xA;assert.ok(vm.run(`buffer`) === sandbox.buffer);&#xA;assert.ok(vm.run(`buffer instanceof Buffer`));&#xA;assert.ok(vm.run(`buffer`) instanceof Buffer);&#xA;assert.ok(vm.run(`buffer.__proto__ === Buffer.prototype`));&#xA;assert.ok(vm.run(`buffer`).__proto__ === Buffer.prototype);&#xA;assert.ok(vm.run(`buffer.slice(0, 1) instanceof Buffer`));&#xA;assert.ok(vm.run(`buffer.slice(0, 1)`) instanceof Buffer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;p&gt;Before you can use vm2 in the command line, install it globally with &lt;code&gt;npm install vm2 -g&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;vm2 ./script.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Known Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It is not possible to define a class that extends a proxied class. This includes using a proxied class in &lt;code&gt;Object.create&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Direct eval does not work.&lt;/li&gt; &#xA; &lt;li&gt;Logging sandbox arrays will repeat the array part in the properties.&lt;/li&gt; &#xA; &lt;li&gt;Source code transformations can result a different source string for a function.&lt;/li&gt; &#xA; &lt;li&gt;There are ways to crash the node process from inside the sandbox.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;CHANGELOG.md&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;package.json&lt;/code&gt; version number&lt;/li&gt; &#xA; &lt;li&gt;Commit the changes&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm publish&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.integromat.com&#34;&gt;&lt;img src=&#34;https://static.integromat.com/logo/45_text.png&#34; alt=&#34;Integromat&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>