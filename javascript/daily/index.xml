<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-10T01:35:12Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bradtraversy/traversy-js-challenges</title>
    <updated>2023-09-10T01:35:12Z</updated>
    <id>tag:github.com,2023-09-10:/bradtraversy/traversy-js-challenges</id>
    <link href="https://github.com/bradtraversy/traversy-js-challenges" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Challenges &amp; docs from JS Algorithms &amp; Data Structures course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Traversy JS Challenges: Data Structures &amp;amp; Algorithms&lt;/h1&gt; &#xA;&lt;p&gt;This is the sandbox for my &lt;a href=&#34;https://www.traversymedia.com/javascript-challeges&#34;&gt;70+ JS Challenges: Data Structures &amp;amp; Algorithms Course&lt;/a&gt;. Just about all of the concepts that are included, also exist in other languages. So, if you are not a JavaScript developer, you can still follow along and learn from this course/repo.&lt;/p&gt; &#xA;&lt;p&gt;This course/repo goes over everything from basic loop challenges, high order array methods, recursion, time &amp;amp; space complexity, data structures such as stacks, queues, linked lists, trees, graphs, and we touch on sorting algorithms like bubble sort, insertion and merge sort. You should already know the basics of JavaScript before doing any of the challenges or taking the course.&lt;/p&gt; &#xA;&lt;p&gt;Please do not make any PRs to this repo as it goes along with a specific course. I may open another one for student solutions and new challenges.&lt;/p&gt; &#xA;&lt;h2&gt;File Structure&lt;/h2&gt; &#xA;&lt;p&gt;Each folder includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;readme.md&lt;/code&gt; - The challenge/code instructions. This also includes hints, tests and a dropdown with the solution code as well as the explanation of the solution code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[name].js&lt;/code&gt; - This is your working file. It has the name of the function and the function is exported. No parameters are passed to the function. That is up to you to add.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[name]-run.js&lt;/code&gt; - File to run the code manually. The function is already imported and called with expected parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[name]-solution.js&lt;/code&gt; The solution code with heavy commenting. Some challenges have multiple solutions. If you want the solution without comments, look in the &lt;code&gt;readme.md&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[name]-test.js&lt;/code&gt; - Jest tests for the solution code. You will need to rename this file to &lt;code&gt;[name].test.js&lt;/code&gt; to run the tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Learning Modules/Lessons&lt;/h2&gt; &#xA;&lt;p&gt;Some lessons/modules are not challenges, they are more like mini-lessons. I don&#39;t just throw you a challenge using a new concept (Trees, Stacks, Bubble Sorts, etc) without explaining it first. I try to explain the concept and then give you a challenge to practice or implement it. So some folders will not have a challenge, just a readme file.&lt;/p&gt; &#xA;&lt;h2&gt;Running Tests&lt;/h2&gt; &#xA;&lt;p&gt;In order for the Jest tests to run, you need to rename the test file to &lt;code&gt;[name].test.js&lt;/code&gt;. For example, if you are working on the &lt;code&gt;hello-world&lt;/code&gt; challenge, you need to rename the &lt;code&gt;hello-world-test.js&lt;/code&gt; file to &lt;code&gt;hello-world.test.js&lt;/code&gt;. This is because Jest looks for files with the &lt;code&gt;.test.js&lt;/code&gt; extension.&lt;/p&gt; &#xA;&lt;p&gt;Run the command &lt;code&gt;npm run test&lt;/code&gt; from the root directory and it will run all the tests.&lt;/p&gt; &#xA;&lt;h2&gt;These Don&#39;t Have to be &#34;Challenges&#34;&lt;/h2&gt; &#xA;&lt;p&gt;Some people, such as myself are not great at doing this stuff off the top of their head. Even though most of the code is setup as a challenge, you can certainly just follow along with the course and/or just study the solutions and learn from them.&lt;/p&gt; &#xA;&lt;p&gt;You can use the tests to see if your code passes, but use the &lt;code&gt;run&lt;/code&gt; files to run the code manually. This is so that you can experiment, console.log, etc.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repo&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run test&lt;/code&gt; to run the tests. Again, you will need to rename the test files and replace the &lt;code&gt;-test&lt;/code&gt; with &lt;code&gt;.test&lt;/code&gt; to run the tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Index of Challenges/Lessons&lt;/h2&gt; &#xA;&lt;h4&gt;01. Basic Challenges 1&lt;/h4&gt; &#xA;&lt;p&gt;These are mostly challenges that have to do with loops, conditionals, and string manipulation. I do not go over fundamentals like &#34;what is a for loop&#34;. You should already know the basics of JavaScript.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/01-hello-world/readme.md&#34;&gt;Hello World Test Challenge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/02-get-sum/readme.md&#34;&gt;Get Sum Test Challenge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/03-calculator/readme.md&#34;&gt;Calculator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/04-count-occurrences/readme.md&#34;&gt;Count Occurrences&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/05-find-max-number/readme.md&#34;&gt;Find Max Number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/06-title-case/readme.md&#34;&gt;Title Case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/07-reverse-string/readme.md&#34;&gt;Reverse String&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/08-palindrome/readme.md&#34;&gt;Palindrome&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/09-count-vowels/readme.md&#34;&gt;Count Vowels&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/01-basic-challenges-1/10-remove-duplicates/readme.md&#34;&gt;Remove Duplicates&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;02. Basic Challenges 2&lt;/h4&gt; &#xA;&lt;p&gt;These are more challenges that have to do with iteration. They are slightly harder than the first set of challenges.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/01-fizzbuzz-array/readme.md&#34;&gt;FizzBuzz Array&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/02-array-intersection/readme.md&#34;&gt;Array Intersection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/03-display-likes/readme.md&#34;&gt;Display Likes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/04-find-missing-number/readme.md&#34;&gt;Find Missing Number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/05-find-missing-letter/readme.md&#34;&gt;Find Missing Letter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/06-are-all-chars-unique/readme.md&#34;&gt;Are All Characters Unique&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/07-first-non-repeating/readme.md&#34;&gt;First Non-Repeating Character&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/08-dice-game/readme.md&#34;&gt;Dice Game Simulation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/09-format-phone-number/readme.md&#34;&gt;Format Phone Number&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/02-basic-challenges-2/10-validate-email/readme.md&#34;&gt;Validate Email&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;03. High Order Array Methods&lt;/h4&gt; &#xA;&lt;p&gt;The next set of challenges/lessons will have to do with high order array methods such as &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, &lt;code&gt;reduce&lt;/code&gt;, &lt;code&gt;sort&lt;/code&gt;, etc. Even though most of these can be done with a for loop, I want you to practice using these methods.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/01-simple-examples/readme.md&#34;&gt;Simple Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/02-sum-of-even-squares/readme.md&#34;&gt;Sum Of Even Squares&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/03-calculate-total-sales/readme.md&#34;&gt;Calculate Total Sales&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/04-highest-scoring-word/readme.md&#34;&gt;Highest Scoring Word&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/05-valid-anagrams/readme.md&#34;&gt;Valid Anagrams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/06-hashtag-generator/readme.md&#34;&gt;HashTag Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/07-valid-ipv4/readme.md&#34;&gt;Valid IPv4 Address&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/08-analyze-car-milage/readme.md&#34;&gt;Analyze Car Milage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/09-password-validator/readme.md&#34;&gt;Password Validator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/03-high-order-array-methods/10-find-missing-letter-refactor/readme.md&#34;&gt;Find Missing Letter Refactor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;04. Recursion&lt;/h4&gt; &#xA;&lt;p&gt;The next batch of challenges/lessons will have to do with recursion. We will first talk about what recursion is and then we can look at some challenges.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/01-count-down/readme.md&#34;&gt;Recursion Intro (Count Down)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/02-unwinding/readme.md&#34;&gt;Unwinding (Sum Up To)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/03-reverse-string-recursion/readme.md&#34;&gt;Reverse String Recursion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/04-fibonacci-sequence/readme.md&#34;&gt;Fibonacci Sequence&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/05-factorial/readme.md&#34;&gt;Factorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/06-power/readme.md&#34;&gt;Power&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/07-array-sum/readme.md&#34;&gt;Array Sum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/08-number-range/readme.md&#34;&gt;Number Range&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/09-flatten-array/readme.md&#34;&gt;Flatten Array&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/04-recursion/10-permutations/readme.md&#34;&gt;Permutations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;05. Complexity&lt;/h4&gt; &#xA;&lt;p&gt;This is more of a learning section than a challenge section. We will talk about Big O notation and how to calculate the time complexity of an algorithm. We will also talk about space complexity and how to calculate that as well. We will talk about the different types of complexity such as constant, linear, quadratic, etc.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/01-what-is-time-complexity/readme.md&#34;&gt;What Is Time Complexity?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/02-big-o-notation/readme.md&#34;&gt;Big O Notation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/03-constant-time-complexity/readme.md&#34;&gt;Constant Time Complexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/04-linear-time-complexity/readme.md&#34;&gt;Linear Time Complexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/05-quadratic-time-complexity/readme.md&#34;&gt;Quadratic Time Complexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/06-logarithmic-time-complexity/readme.md&#34;&gt;Logarithmic Time Complexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/07-space-complexity/readme.md&#34;&gt;Space Complexity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/08-max-subarray-quadratic/readme.md&#34;&gt;Max Subarray Quadratic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/09-sliding-window-technique/readme.md&#34;&gt;Sliding Window Technique&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/05-complexity/10-max-subarray-linear/readme.md&#34;&gt;Space Complexity&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;06. Hash Tables, Maps &amp;amp; Sets&lt;/h4&gt; &#xA;&lt;p&gt;In this section, we will start to look at &lt;code&gt;data structures&lt;/code&gt;. We will start with a data structure called a &lt;code&gt;hash table&lt;/code&gt;. This will include &lt;code&gt;maps&lt;/code&gt; and &lt;code&gt;sets&lt;/code&gt;, which are built-in JavaScript data structures that are similar to hash tables. We will also create a custom hash table class and use it in a couple challenges.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/01-what-are-data-structures/readme.md&#34;&gt;What Are Data Structures?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/02-hash-table-intro/readme.md&#34;&gt;Hash Table Intro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/03-maps/readme.md&#34;&gt;Maps&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/04-word-frequency-counter/readme.md&#34;&gt;Word Frequency Counter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/05-phone-number-directory/readme.md&#34;&gt;Phone Number Directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/06-anagram-grouping/readme.md&#34;&gt;Anagram Grouping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/07-sets/readme.md&#34;&gt;Sets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/08-symmetric-difference/readme.md&#34;&gt;Symmetric Difference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/09-two-sum/readme.md&#34;&gt;Two Sum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/10-longest-consecutive/readme.md&#34;&gt;Longest Consecutive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/11-custom-hash-table/readme.md&#34;&gt;Custom Hash Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/12-word-instance-counter/readme.md&#34;&gt;Word Instance Counter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/13-add-get-values-method/readme.md&#34;&gt;Add getValues() Method&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/06-hash-tables-maps-sets/14-custom-anagram-grouping/readme.md&#34;&gt;Add getValues() Method&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;07. Stacks, Queues &amp;amp; Linked Lists&lt;/h4&gt; &#xA;&lt;p&gt;In this section, we will look at working with data structures such as &lt;code&gt;stacks&lt;/code&gt;, &lt;code&gt;queues&lt;/code&gt;, and &lt;code&gt;linked lists&lt;/code&gt;. We will also look at &lt;code&gt;fast&lt;/code&gt; and &lt;code&gt;slow&lt;/code&gt; pointers.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/01-what-is-a-stack/readme.md&#34;&gt;What Is A Stack?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/02-stack-implementation/readme.md&#34;&gt;Stack Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/03-reverse-string-stack/readme.md&#34;&gt;Reverse String With Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/04-balanced-parenthesis/readme.md&#34;&gt;Balanced Parentheses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/05-what-is-a-queue/readme.md&#34;&gt;What Is A Queue?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/06-queue-implementation/readme.md&#34;&gt;Queue Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/07-reverse-string-queue/readme.md&#34;&gt;Reverse String With Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/08-palindrome-queue-stack/readme.md&#34;&gt;Palindrome With Queue &amp;amp; Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/09-what-is-a-linked-list/readme.md&#34;&gt;What Is A Linked List?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/10-linked-list-implementation/readme.md&#34;&gt;Linked List Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/11-reverse-string-linked-list/readme.md&#34;&gt;Reverse String With Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/12-fast-slow-pointers/readme.md&#34;&gt;Fast &amp;amp; Slow Pointers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/13-find-middle/readme.md&#34;&gt;Find Middle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/14-what-is-a-doubly-linked-list/readme.md&#34;&gt;What Is A Doubly Linked List?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/15-doubly-linked-list-implementation/readme.md&#34;&gt;Doubly Linked List Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/07-stacks-queues-linked-lists/16-find-pair-sum/readme.md&#34;&gt;Find Pair Sum&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;08. Binary Trees &amp;amp; Binary Search Trees &amp;amp; Graphs&lt;/h4&gt; &#xA;&lt;p&gt;In this section, we will look at &lt;code&gt;trees&lt;/code&gt; and &lt;code&gt;graphs&lt;/code&gt;. We will start with &lt;code&gt;binary trees&lt;/code&gt; and &lt;code&gt;binary search trees&lt;/code&gt;. We will also look at &lt;code&gt;graphs&lt;/code&gt; and &lt;code&gt;graph traversal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/01-what-is-a-tree/readme.md&#34;&gt;What Is A Tree?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/02-tree-node-class/readme.md&#34;&gt;Tree Node Class&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/03-depth-first-traversal/readme.md&#34;&gt;Depth First Traversal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/04-depth-first-traversal-recursive/readme.md&#34;&gt;Depth First Traversal Recursive&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/05-breadth-first-traversal/readme.md&#34;&gt;Breadth First Traversal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/06-maximum-depth/readme.md&#34;&gt;Maximum Depth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/07-what-is-a-binary-search-tree/readme.md&#34;&gt;What Is A Binary Search Tree?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/08-binary-search-tree-implementation/readme.md&#34;&gt;Binary Search Tree Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/09-validate-bst/readme.md&#34;&gt;Validate BST&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/10-what-is-a-graph/readme.md&#34;&gt;What is a Graph?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/11-adjacency-matrix-adjacency-list/readme.md&#34;&gt;Adjacency Matrix &amp;amp; Adjacency List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/12-graph-implementation/readme.md&#34;&gt;Graph Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/13-graph-traversal/readme.md&#34;&gt;Graph Traversal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/14-graph-depth-first-traversal/readme.md&#34;&gt;Graph Depth First Traversal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/08-binary-trees-graphs/15-graph-breadth-first-traversal/readme.md&#34;&gt;Graph Breadth First Traversal&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;09. Sorting Algorithms&lt;/h4&gt; &#xA;&lt;p&gt;In this section, we will get into sorting algorithms. We will start with &lt;code&gt;bubble sort&lt;/code&gt;, which is very popular in interviews. We will also look at &lt;code&gt;selection sort&lt;/code&gt;, &lt;code&gt;insertion sort&lt;/code&gt;, &lt;code&gt;merge sort&lt;/code&gt;, and &lt;code&gt;quick sort&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/01-what-are-sorting-algorithms/readme.md&#34;&gt;What Are Sorting Algorithms?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/02-bubble-sort-algorithm/readme.md&#34;&gt;Bubble Sort Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/03-bubble-sort-implementation/readme.md&#34;&gt;Bubble Sort Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/04-insertion-sort-algorithm/readme.md&#34;&gt;Insertion Sort Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/05-insertion-sort-implementation/readme.md&#34;&gt;Insertion Sort Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/06-selection-sort-algorithm/readme.md&#34;&gt;Selection Sort Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/07-selection-sort-implementation/readme.md&#34;&gt;Selection Sort Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/08-merge-sort-algorithm/readme.md&#34;&gt;Merge Sort Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/09-merge-sort-implementation/readme.md&#34;&gt;Merge Sort Implementation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/10-quick-sort-algorithm/readme.md&#34;&gt;Quick Sort Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bradtraversy/traversy-js-challenges/main/09-sorting-algorithms/11-quick-sort-implementation/readme.md&#34;&gt;Quick Sort Implementation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>ckolderup/postmarks</title>
    <updated>2023-09-10T01:35:12Z</updated>
    <id>tag:github.com,2023-09-10:/ckolderup/postmarks</id>
    <link href="https://github.com/ckolderup/postmarks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a single-user bookmarking website designed to live on the Fediverse&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Postmarks&lt;/h1&gt; &#xA;&lt;h2&gt;About this project&lt;/h2&gt; &#xA;&lt;p&gt;Postmarks is a bookmarking site that you own yourself and can connect the Fediverse, interacting with other Postmarks sites as well as Mastodon/FireFish/any text-based ActivityPub platform. You can read more about it here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://casey.kolderup.org/notes/b059694f5064c6c6285075c894a72317.html&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://casey.kolderup.org/notes/edf3a659f52528da103ea4dcbb09f66f.html&#34;&gt;Ethos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://casey.kolderup.org/notes/9307f6d67bbfedbd215ae2d09caeab39.html&#34;&gt;Future Ideas&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The site allows the owner to add, edit and delete bookmarks, but only if a valid login is provided. Check the setup below to understand how to do that!&lt;/p&gt; &#xA;&lt;h2&gt;Setting up your site&lt;/h2&gt; &#xA;&lt;p&gt;To set your app up:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re using Glitch: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rename your project immediately in the project settings, if you intend to be called something else. This determines the domain that your site lives at, which also determines the second half of your &lt;code&gt;@username@project-name.glitch.me&lt;/code&gt; identity on the fediverse. NOTE: If you change this later, you will break the connection any existing followers have to your site, they&#39;ll have to re-follow the account on its new domain (and depending on the software they&#39;re following from, may even prevent them from unfollowing the old URL 😱)&lt;/li&gt; &#xA;   &lt;li&gt;In your &lt;code&gt;.env&lt;/code&gt; editor, create a key &lt;code&gt;ADMIN_KEY&lt;/code&gt; and give it a text string as a value. This is your &#34;password&#34; when your browser prompts you, so make it as secure as you need to protect your data.&lt;/li&gt; &#xA;   &lt;li&gt;Add another key to your .env called &lt;code&gt;SESSION_SECRET&lt;/code&gt; and generate a random string for its value. This is your &lt;a href=&#34;http://expressjs.com/en/resources/middleware/session.html#secret&#34;&gt;session secret&lt;/a&gt;, used to generate the hashed version of your session that gets encoded with the cookies used to store your login. If you make this string too easily guessable, you make it easier for someone to hijack your session and gain unauthorized login. Also, if you ever change this string, it will invalidate all existing cookies.&lt;/li&gt; &#xA;   &lt;li&gt;Edit the contents of &lt;code&gt;account.json.example&lt;/code&gt; to set your &lt;code&gt;@username&lt;/code&gt;, display name, bio, and avatar. (If you don&#39;t set a username, your default actor name will be &#39;bookmarks&#39;, so people will find you on the fediverse &lt;code&gt;@bookmarks@project-name.glitch.me&lt;/code&gt;.)&lt;/li&gt; &#xA;   &lt;li&gt;THEN: either rename &lt;code&gt;account.json.example&lt;/code&gt; to &lt;code&gt;account.json&lt;/code&gt;, or copy the contents into a new file called &lt;code&gt;account.json&lt;/code&gt;. Whatever &lt;code&gt;username&lt;/code&gt; you have in this file when the project first starts you&#39;ll need to retain or else you&#39;ll break your followers&#39; connection to this account.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Otherwise: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Set up your domain by editing &lt;code&gt;src/util.js&lt;/code&gt; and making the definition of &lt;code&gt;export const domain&lt;/code&gt; return a string that is your domain. Fun, huh?&lt;/li&gt; &#xA;   &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the root of the project.&lt;/li&gt; &#xA;   &lt;li&gt;Add the line &lt;code&gt;ADMIN_KEY=&amp;lt;key&amp;gt;&lt;/code&gt; to your .env where &amp;lt;key&amp;gt; is the password you&#39;ll enter when the browser prompts you, and another line for &lt;code&gt;SESSION_SECRET=&amp;lt;secret&amp;gt;&lt;/code&gt; where &amp;lt;secret&amp;gt; is a random string used when hashing your session for use in a secure cookie.&lt;/li&gt; &#xA;   &lt;li&gt;Make a file called &lt;code&gt;account.json&lt;/code&gt; in the project root. Copy the contents of &lt;code&gt;account.json.example&lt;/code&gt; into it and edit the values to set your &lt;code&gt;@username&lt;/code&gt;, display name, bio, and avatar. (If you don&#39;t set a username, your default actor name will be &#39;bookmarks&#39;, so people will find you on the fediverse &lt;code&gt;@bookmarks@project-name.glitch.me&lt;/code&gt;.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you&#39;re using Glitch, you should be done! If you&#39;re running this yourself, run &lt;code&gt;npm run start&lt;/code&gt; via whatever mechanism you choose to use to host this website.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;strong&gt;Admin&lt;/strong&gt; link in the footer, and enter the password (whatever you set ADMIN_KEY to in the .env).&lt;/li&gt; &#xA; &lt;li&gt;You should be logged in, at which point you can configure various settings, import bookmarks, and use the &#34;Add&#34; links in the header and footer (as well as the bookmarklet, available in the Admin section) to save new bookmarks.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developing Postmarks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To automatically log all requests to a text file, set add &lt;code&gt;LOGGING_ENABLED=true&lt;/code&gt; to your .env file. This will cause all incoming requests to append to &lt;code&gt;request_log.txt&lt;/code&gt; in your project folder.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &#34;Postmarks&#34; name is compliments of &lt;a href=&#34;https://sowe.li&#34;&gt;Casey C&lt;/a&gt; (no relation to Casey K), who brainstormed dozens of ideas for the name when Casey was first trying to rename the project. Thank you!&lt;/li&gt; &#xA; &lt;li&gt;Postmarks (in its default configuration) uses an edited version of Eynav Raphael&#39;s &lt;a href=&#34;https://thenounproject.com/icon/postmark-stamp-928917/&#34;&gt;&#34;Postmark Stamp&#34;&lt;/a&gt; icon from The Noun Project.&lt;/li&gt; &#xA; &lt;li&gt;It also makes use of free fonts including &lt;a href=&#34;http://iotic.com/averia/&#34;&gt;Averia Sans&lt;/a&gt; and &lt;a href=&#34;https://public-sans.digital.gov/&#34;&gt;Public Sans&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Much of the original form of the site&#39;s frontend is lifted from the starter projects available on &lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt;. Thank you to all the people who have contributed to those projects over the years!&lt;/li&gt; &#xA; &lt;li&gt;Much of the original backend of the site is based off of Darius Kazemi&#39;s &lt;a href=&#34;https://github.com/dariusk/express-activitypub&#34;&gt;express-activitypub&lt;/a&gt; repo. I made a point not to just clone his repo from the start, but then ended up retyping most of it as I learned how things work. While some pieces have been upgraded, much of Darius&#39; work creates the foundation for Postmarks&#39; ActivityPub functionality.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;We built this with Glitch!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://glitch.com&#34;&gt;Glitch&lt;/a&gt; is a friendly community where millions of people come together to build web apps and websites.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Need more help? &lt;a href=&#34;https://help.glitch.com/&#34;&gt;Check out the Help Center&lt;/a&gt; for answers to any common questions.&lt;/li&gt; &#xA; &lt;li&gt;Ready to make it official? &lt;a href=&#34;https://glitch.com/pricing&#34;&gt;Become a paid Glitch member&lt;/a&gt; to boost your app with private sharing, more storage and memory, domains and more.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AllJavi/tartarus-startpage</title>
    <updated>2023-09-10T01:35:12Z</updated>
    <id>tag:github.com,2023-09-10:/AllJavi/tartarus-startpage</id>
    <link href="https://github.com/AllJavi/tartarus-startpage" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clean and functional startpage for firefox and chrome with material gruvbox style&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/img/README-decorator.png&#34; width=&#34;300/&#34;&gt;&#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://github.com/AllJavi/tartarus-startpage/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/AllJavi/tartarus-startpage?color=a9b665&amp;amp;style=for-the-badge&amp;amp;logo=starship&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/AllJavi/tartarus-startpage/issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/AllJavi/tartarus-startpage?color=ea6962&amp;amp;style=for-the-badge&amp;amp;logo=codecov&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/AllJavi/tartarus-startpage/network/members&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/AllJavi/tartarus-startpage?color=7daea3&amp;amp;style=for-the-badge&amp;amp;logo=jfrog-bintray&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/AllJavi/tartarus-startpage/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-orange.svg?color=d4be98&amp;amp;style=for-the-badge&amp;amp;logo=archlinux&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/AllJavi/tartarus-startpage/assets/49349604/9a2a3f4c-33ef-4eb3-9243-cc160a56a181&#34;&gt;https://github.com/AllJavi/tartarus-startpage/assets/49349604/9a2a3f4c-33ef-4eb3-9243-cc160a56a181&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This start page is based on the &lt;a href=&#34;https://github.com/b-coimbra/dawn&#34;&gt;dawn&lt;/a&gt; repository, which has even more functionality. I&#39;ve tweaked the page&#39;s style a bit to match my &lt;a href=&#34;https://github.com/AllJavi/tartarus-dotfiles&#34;&gt;dotfiles&lt;/a&gt;, and I&#39;ve added some features to make it more comfortable.&lt;/p&gt; &#xA;&lt;h2&gt;Keybindings&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Hotkey&lt;/th&gt; &#xA;   &lt;th&gt;Action&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Numrow&lt;/kbd&gt; | &lt;kbd&gt;MouseWheel&lt;/kbd&gt; | &lt;kbd&gt;Click&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Switch tabs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;s&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Search Dialog&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;q&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Config Dialog (new)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;kbd&gt;Esc&lt;/kbd&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Close Dialogs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Configuration Dialog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AllJavi/tartarus-startpage/assets/49349604/3b42c650-b5bb-4a7d-a358-cfa5a8915966&#34; alt=&#34;config-dialog&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default configuration file is &lt;a href=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/userconfig.js&#34;&gt;userconfig.js&lt;/a&gt;, but you can change it in the configuration dialog. You can find more information about how the file works in the &lt;a href=&#34;https://github.com/b-coimbra/dawn&#34;&gt;original repository&lt;/a&gt;. The available components are tabs, a clock, and weather.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, there&#39;s a new option called &lt;code&gt;fastlink&lt;/code&gt; to set the link of the Pokéball button.&lt;/p&gt; &#xA;&lt;h2&gt;Search Dialog&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/AllJavi/tartarus-startpage/assets/49349604/3f76323d-88c4-41b6-b93d-e4cceb1780b7&#34; alt=&#34;search-dialog&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The search dialog allows you to display a search bar with various search engines defined in the configuration. To select each one, you simply need to prefix the query with the corresponding &lt;code&gt;!&amp;lt;id&amp;gt;&lt;/code&gt;. By default, the defined search engines are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;!g&lt;/code&gt;: google&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!d&lt;/code&gt;: duckduckgo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!y&lt;/code&gt;: youtube&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!r&lt;/code&gt;: reddit&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;!p&lt;/code&gt;: pinterest&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Available banners&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;cbg-2&lt;/th&gt; &#xA;   &lt;th&gt;cbg-3&lt;/th&gt; &#xA;   &lt;th&gt;cbg-4&lt;/th&gt; &#xA;   &lt;th&gt;cbg-5&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-2.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-3.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-4.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-5.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;cbg-6&lt;/th&gt; &#xA;   &lt;th&gt;cbg-7&lt;/th&gt; &#xA;   &lt;th&gt;cbg-8&lt;/th&gt; &#xA;   &lt;th&gt;cbg-9&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-6.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-7.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-8.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/src/img/banners/cbg-9.gif&#34; width=&#34;175&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/b-coimbra/dawn&#34;&gt;Dawn Startpage&lt;/a&gt; (&lt;a href=&#34;https://startpage.metaphoric.dev/&#34;&gt;preview&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/AllJavi/tartarus-startpage/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>