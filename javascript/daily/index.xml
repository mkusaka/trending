<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-13T01:36:55Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ivan-sincek/ios-penetration-testing-cheat-sheet</title>
    <updated>2023-04-13T01:36:55Z</updated>
    <id>tag:github.com,2023-04-13:/ivan-sincek/ios-penetration-testing-cheat-sheet</id>
    <link href="https://github.com/ivan-sincek/ios-penetration-testing-cheat-sheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Work in progress...&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;iOS Penetration Testing Cheat Sheet&lt;/h1&gt; &#xA;&lt;p&gt;This is more of a checklist for myself. May contain useful tips and tricks.&lt;/p&gt; &#xA;&lt;p&gt;Everything was tested on Kali Linux v2023.1 (64-bit) and iPhone 7 with iOS v13.4.1 and unc0ver jailbreak v8.0.2.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://www.3u.com&#34;&gt;3uTools&lt;/a&gt; if you want to jailbreak your iOS device. I have no &lt;a href=&#34;https://github.com/ivan-sincek/ios-penetration-testing-cheat-sheet/raw/main/LICENSE&#34;&gt;liability&lt;/a&gt; over your actions.&lt;/p&gt; &#xA;&lt;p&gt;For help with any of the tools type &lt;code&gt;&amp;lt;tool_name&amp;gt; [-h | -hh | --help]&lt;/code&gt; or &lt;code&gt;man &amp;lt;tool_name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you didn&#39;t already, read &lt;a href=&#34;https://github.com/OWASP/owasp-mastg&#34;&gt;OWASP MSTG&lt;/a&gt; and &lt;a href=&#34;https://github.com/OWASP/owasp-masvs&#34;&gt;OWASP MASVS&lt;/a&gt;. You can download OWASP MSTG checklist from &lt;a href=&#34;https://github.com/OWASP/owasp-mastg/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Highly recommend reading &lt;a href=&#34;https://web.securityinnovation.com/hubfs/iOS%20Hacking%20Guide.pdf&#34;&gt;Hacking iOS Applications&lt;/a&gt; and &lt;a href=&#34;https://book.hacktricks.xyz/mobile-apps-pentesting/ios-pentesting&#34;&gt;HackTricks - iOS Pentesting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Websites that you should use while writing the report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cwe.mitre.org/data&#34;&gt;cwe.mitre.org/data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/projects&#34;&gt;owasp.org/projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/www-project-mobile-top-10&#34;&gt;owasp.org/www-project-mobile-top-10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/Glossary.html&#34;&gt;cheatsheetseries.owasp.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator&#34;&gt;nvd.nist.gov/vuln-metrics/cvss/v3-calculator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/ncp/repository&#34;&gt;nvd.nist.gov/ncp/repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://attack.mitre.org&#34;&gt;attack.mitre.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;My other cheat sheets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ivan-sincek/android-penetration-testing-cheat-sheet&#34;&gt;Android Testing Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ivan-sincek/penetration-testing-cheat-sheet&#34;&gt;Penetration Testing Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ivan-sincek/wifi-penetration-testing-cheat-sheet&#34;&gt;WiFi Penetration Testing Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Future plans:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;install Burp Proxy and ZAP certificates,&lt;/li&gt; &#xA; &lt;li&gt;test widgets, push notifications, app extensions, and Firebase,&lt;/li&gt; &#xA; &lt;li&gt;disassemble, reverse engineer, and resign IPA,&lt;/li&gt; &#xA; &lt;li&gt;restore from a backup,&lt;/li&gt; &#xA; &lt;li&gt;future downgrades using SHSH BLOBS.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;0. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#0-install-tools&#34;&gt;Install Tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#cydia-sources-and-tools&#34;&gt;Cydia Sources and Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssl-kill-switch-2&#34;&gt;SSL Kill Switch 2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#kali-linux-tools&#34;&gt;Kali Linux Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#mobile-security-framework-mobsf&#34;&gt;Mobile Security Framework (MobSF)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#1-basics&#34;&gt;Basics&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#installuninstall-an-ipa&#34;&gt;Install/Uninstall an IPA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssh-to-your-ios-device&#34;&gt;SSH to Your iOS Device&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;Download/Upload Files and Directories&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#2-inspect-an-ipa&#34;&gt;Inspect an IPA&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#pull-a-decrypted-ipa&#34;&gt;Pull a Decrypted IPA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#binary&#34;&gt;Binary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#infoplist&#34;&gt;Info.plist&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#3-search-for-files-and-directories&#34;&gt;Search for Files and Directories&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#nsuserdefaults&#34;&gt;NSUserDefaults&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;Inspect Files&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#single-file&#34;&gt;Single File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#multiple-files&#34;&gt;Multiple Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#sqlite-3&#34;&gt;SQLite 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#backups&#34;&gt;Backups&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#5-property-lister&#34;&gt;Property Lister&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#cachedb&#34;&gt;Cache.db&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#find-all--dump-all&#34;&gt;Find All / Dump All&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#6-deeplinks&#34;&gt;Deeplinks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;7. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#7-frida&#34;&gt;Frida&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#frida-scripts&#34;&gt;Frida Scripts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;8. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#8-objection&#34;&gt;Objection&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#bypasses&#34;&gt;Bypasses&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;9. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#9-repackage-an-ipa&#34;&gt;Repackage an IPA&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;10. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#10-miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#monitor-the-system-log&#34;&gt;Monitor the System Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#monitor-file-changes&#34;&gt;Monitor File Changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#dump-the-pasteboard&#34;&gt;Dump the Pasteboard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#get-the-provisioning-profile&#34;&gt;Get the Provisioning Profile&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;11. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#11-tips-and-security-best-practices&#34;&gt;Tips and Security Best Practices&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;12. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#12-useful-websites-and-tools&#34;&gt;Useful Websites and Tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#imazing&#34;&gt;iMazing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;0. Install Tools&lt;/h2&gt; &#xA;&lt;h3&gt;Cydia Sources and Tools&lt;/h3&gt; &#xA;&lt;p&gt;Add the following sources to Cydia:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://build.frida.re&#34;&gt;build.frida.re&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cydia.akemi.ai&#34;&gt;cydia.akemi.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repo.co.kr&#34;&gt;repo.co.kr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://havoc.app&#34;&gt;havoc.app&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Install required tools on your iOS device using Cydia:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A-Bypass&lt;/li&gt; &#xA; &lt;li&gt;AppSync Unified&lt;/li&gt; &#xA; &lt;li&gt;Cycript&lt;/li&gt; &#xA; &lt;li&gt;Cydia Substrate&lt;/li&gt; &#xA; &lt;li&gt;Debian Packager&lt;/li&gt; &#xA; &lt;li&gt;Frida (&lt;a href=&#34;https://github.com/frida/frida/issues/2355#issuecomment-1386757290&#34;&gt;fix v16+ installation issue&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;nano&lt;/li&gt; &#xA; &lt;li&gt;PreferenceLoader&lt;/li&gt; &#xA; &lt;li&gt;ReProvision Reborn&lt;/li&gt; &#xA; &lt;li&gt;SQLite 3.x&lt;/li&gt; &#xA; &lt;li&gt;wget&lt;/li&gt; &#xA; &lt;li&gt;zip&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;SSL Kill Switch 2&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssh-to-your-ios-device&#34;&gt;SSH&lt;/a&gt; to your iOS device, then, download and install &lt;a href=&#34;https://github.com/nabla-c0d3/ssl-kill-switch2/releases&#34;&gt;SSL Kill Switch 2&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;wget https://github.com/nabla-c0d3/ssl-kill-switch2/releases/download/0.14/com.nablac0d3.sslkillswitch2_0.14.deb&#xA;&#xA;dpkg -i com.nablac0d3.sslkillswitch2_0.14.deb&#xA;&#xA;killall -HUP SpringBoard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uninstall SSL Kill Switch 2:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;dpkg -r --force-all com.nablac0d3.sslkillswitch2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Kali Linux Tools&lt;/h3&gt; &#xA;&lt;p&gt;Install required tools on your Kali Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;apt-get -y install docker.io&#xA;&#xA;systemctl start docker&#xA;&#xA;apt-get -y install ideviceinstaller libimobiledevice-utils libplist-utils radare2 sqlite3 sqlitebrowser xmlstarlet&#xA;&#xA;pip3 install frida-tools objection property-lister&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are interested in my tool, check &lt;a href=&#34;https://github.com/ivan-sincek/property-lister&#34;&gt;/ivan-sincek/property-lister&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure that Frida and Objection are always up to date:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;pip3 install frida-tools objection property-lister --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mobile Security Framework (MobSF)&lt;/h3&gt; &#xA;&lt;p&gt;Install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker pull opensecurity/mobile-security-framework-mobsf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker run -it --rm --name mobsf -p 8000:8000 opensecurity/mobile-security-framework-mobsf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;http://localhost:8000&lt;/code&gt; using your preferred web browser.&lt;/p&gt; &#xA;&lt;p&gt;Uninstall:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker image rm opensecurity/mobile-security-framework-mobsf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1. Basics&lt;/h2&gt; &#xA;&lt;h3&gt;Install/Uninstall an IPA&lt;/h3&gt; &#xA;&lt;p&gt;Install an IPA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ideviceinstaller -i someapp.ipa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uninstall an IPA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ideviceinstaller -U com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Install an IPA using &lt;a href=&#34;https://www.3u.com&#34;&gt;3uTools&lt;/a&gt; desktop app. Jailbreak is required.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ivan-sincek/ios-penetration-testing-cheat-sheet/raw/main/img/3uTools_sideloading.jpg&#34; alt=&#34;Sideloading an IPA using 3uTools&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Figure 1 - Sideloading an IPA using 3uTools&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;On your Kali Linux, start a local web server, and put an IPA in the web root directory (e.g. &lt;code&gt;somedir&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;mkdir somedir&#xA;&#xA;python3 -m http.server 9000 --directory somedir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On your iOS device, download the IPA, long press on it, choose &#34;Share&#34;, and install it using &lt;a href=&#34;https://havoc.app/package/rpr&#34;&gt;ReProvision Reborn&lt;/a&gt; iOS app. Jailbreak is required.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ivan-sincek/ios-penetration-testing-cheat-sheet/raw/main/img/ReProvision_Reborn_sideloading.jpg&#34; alt=&#34;Sideloading an IPA using ReProvision Reborn&#34; height=&#34;600em&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Figure 2 - Sideloading an IPA using ReProvision Reborn&lt;/p&gt; &#xA;&lt;h3&gt;SSH to Your iOS Device&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ssh root@192.168.1.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Default password is &lt;code&gt;alpine&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Download/Upload Files and Directories&lt;/h3&gt; &#xA;&lt;p&gt;Tilde &lt;code&gt;~&lt;/code&gt; is short for the root directory.&lt;/p&gt; &#xA;&lt;p&gt;Download a file or directory from your iOS device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;scp root@192.168.1.10:~/somefile.txt ./&#xA;&#xA;scp -r root@192.168.1.10:~/somedir ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upload a file or directory to your iOS device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;scp somefile.txt root@192.168.1.10:~/&#xA;&#xA;scp -r somedir root@192.168.1.10:~/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;nano&lt;/code&gt; to edit files directly on your iOS device.&lt;/p&gt; &#xA;&lt;h2&gt;2. Inspect an IPA&lt;/h2&gt; &#xA;&lt;h3&gt;Pull a Decrypted IPA&lt;/h3&gt; &#xA;&lt;p&gt;Pull a decrypted IPA from your iOS device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/AloneMonkey/frida-ios-dump &amp;amp;&amp;amp; cd frida-ios-dump &amp;amp;&amp;amp; pip3 install -r requirements.txt&#xA;&#xA;python3 dump.py -o decrypted.ipa -P alpine -p 22 -H 192.168.1.10 com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pull an encrypted IPA from your iOS device, see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#9-repackage-an-ipa&#34;&gt;8. Repackage an IPA&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#imazing&#34;&gt;iMazing&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To unpack e.g. &lt;code&gt;someapp.ipa&lt;/code&gt; or &lt;code&gt;decrypted.ipa&lt;/code&gt; (preferred), run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;unzip decrypted.ipa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should now see the unpacked &lt;code&gt;Payload&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Binary&lt;/h3&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;/Payload/someapp.app/&lt;/code&gt; directory. There, you will find a binary which have the same name and no file type (i.e. &lt;code&gt;someapp&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Search the binary for specific keywords:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rabin2 -zzzqq someapp | grep -Pi &#39;keyword&#39;&#xA;&#xA;rabin2 -zzzqq someapp | grep -Pi &#39;hasOnlySecureContent|javaScriptEnabled|UIWebView|WKWebView&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;WebViews can sometimes be very subtle, e.g. they could be hidden as a link to terms of agreement, privacy policy, about the software, referral, etc.&lt;/p&gt; &#xA;&lt;p&gt;Search the binary for endpoints, deeplinks, sensitive data, comments, etc. For more examples, see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;4. Inspect Files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Search the binary for weak hash algorithms, insecure random functions, insecure memory allocation functions, etc. For the best results, use &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#mobile-security-framework-mobsf&#34;&gt;MobSF&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Download the latest &lt;a href=&#34;https://github.com/kelvinBen/AppInfoScanner/releases&#34;&gt;AppInfoScanner&lt;/a&gt;, install the requirements, and then extract and resolve endpoints from the binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;pip3 install -r requirements.txt&#xA;&#xA;python3 app.py ios -i someapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Info.plist&lt;/h3&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;/Payload/someapp.app/&lt;/code&gt; directory. There, you will find a property list file with the name &lt;code&gt;Info.plist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Extract URL schemes from the property list file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;xmlstarlet sel -t -v &#39;plist/dict/array/dict[key = &#34;CFBundleURLSchemes&#34;]/array/string&#39; -nl Info.plist | sort -uf | tee url_schemes.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search the property list file for endpoints, sensitive data [in Base64 encoding], etc. For more examples, see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;4. Inspect Files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;3. Search for Files and Directories&lt;/h2&gt; &#xA;&lt;p&gt;Search for files and directories from the root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find / -iname &#39;*keyword*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search for files and directories in the app specific directories (run &lt;code&gt;env&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#8-objection&#34;&gt;Objection&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /private/var/containers/Bundle/Application/XXX...XXX/&#xA;&#xA;cd /var/mobile/Containers/Data/Application/YYY...YYY/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to download a whole directory from your iOS device, see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;Download/Upload Files and Directories&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I preffer downloading the app specific directories, and then doing the &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;file inspection&lt;/a&gt; on my Kali Linux.&lt;/p&gt; &#xA;&lt;p&gt;Search for files and directories from the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -iname &#39;*keyword*&#39;&#xA;&#xA;for keyword in &#39;access&#39; &#39;account&#39; &#39;admin&#39; &#39;card&#39; &#39;cer&#39; &#39;conf&#39; &#39;cred&#39; &#39;customer&#39; &#39;email&#39; &#39;history&#39; &#39;info&#39; &#39;json&#39; &#39;jwt&#39; &#39;key&#39; &#39;kyc&#39; &#39;log&#39; &#39;otp&#39; &#39;pass&#39; &#39;pem&#39; &#39;pin&#39; &#39;plist&#39; &#39;priv&#39; &#39;refresh&#39; &#39;salt&#39; &#39;secret&#39; &#39;seed&#39; &#39;setting&#39; &#39;sign&#39; &#39;sql&#39; &#39;token&#39; &#39;transaction&#39; &#39;transfer&#39; &#39;tar&#39; &#39;txt&#39; &#39;user&#39; &#39;zip&#39; &#39;xml&#39;; do find . -iname &#34;*${keyword}*&#34;; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NSUserDefaults&lt;/h3&gt; &#xA;&lt;p&gt;Search for files and directories in NSUserDefaults insecure storage directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /var/mobile/Containers/Data/Application/YYY...YYY/Library/Preferences/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search for sensitive data in property list files inside NSUserDefaults insecure storage directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;scp root@192.168.1.10:/var/mobile/Containers/Data/Application/YYY...YYY/Library/Preferences/com.someapp.dev.plist ./&#xA;&#xA;plistutil -f xml -i com.someapp.dev.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Inspect Files&lt;/h2&gt; &#xA;&lt;p&gt;Inspect memory dumps, binaries, files inside &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#pull-a-decrypted-ipa&#34;&gt;an unpacked IPA&lt;/a&gt;, files inside the app specific directories, or any other files.&lt;/p&gt; &#xA;&lt;p&gt;After you finish testing [and logout], don&#39;t forget to &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;download&lt;/a&gt; the app specific directories and inspect all the files inside. Inspect what is new and what still persists after logout.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Don&#39;t forget to extract Base64 strings from property list files as you might find sensitive data.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;There will be some false positive results since the regular expressions are not perfect. I prefer to use &lt;code&gt;rabin2&lt;/code&gt; over &lt;code&gt;strings&lt;/code&gt; because it can read Unicode characters.&lt;/p&gt; &#xA;&lt;p&gt;On your iOS device, try to modify app&#39;s files to test the filesystem checksum validation, i.e. to test the file integrity validation.&lt;/p&gt; &#xA;&lt;h3&gt;Single File&lt;/h3&gt; &#xA;&lt;p&gt;Extract hardcoded sensitive data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rabin2 -zzzqq somefile | grep -Pi &#39;[^\w\d]+(basic|bearer)\ .+&#39;&#xA;&#xA;rabin2 -zzzqq somefile | grep -Pi &#39;(access|account|admin|basic|bearer|card|conf|cred|customer|email|history|id|info|jwt|key|kyc|log|otp|pass|pin|priv|refresh|salt|secret|seed|setting|sign|token|transaction|transfer|user)\w*(?:\&#34;\ *\:|\ *\=).+&#39;&#xA;&#xA;rabin2 -zzzqq somefile | grep -Pi &#39;([^\w\d]+(to(\_|\ )do|todo|note)\ |\/\/|\/\*|\*\/).+&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract URLs, deeplinks, IPs, etc.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rabin2 -zzzqq somefile | grep -Po &#39;\w+\:\/\/[\w\-\.\@\:\/\?\=\%\&amp;amp;\#]+&#39; | grep -Piv &#39;\.(css|gif|jpeg|jpg|ogg|otf|png|svg|ttf|woff|woff2)&#39; | sort -uf | tee urls.txt&#xA;&#xA;rabin2 -zzzqq somefile | grep -Po &#39;(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}&#39; | sort -uf | tee ips.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract all strings and decode Base64 strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rabin2 -zzzqq somefile | sort -uf &amp;gt; strings.txt&#xA;&#xA;grep -Po &#39;(?:([a-zA-Z0-9\+\/]){4})*(?:(?1){4}|(?1){3}\=|(?1){2}\=\=)&#39; strings.txt | sort -uf &amp;gt; base64.txt&#xA;&#xA;for string in $(cat base64.txt); do res=$(echo &#34;${string}&#34; | base64 -d 2&amp;gt;/dev/null | grep -PI &#39;[\s\S]+&#39;); if [[ ! -z $res ]]; then echo -n &#34;${string}\n${res}\n\n&#34;; fi; done | tee base64_decoded.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Files&lt;/h3&gt; &#xA;&lt;p&gt;Extract hardcoded sensitive data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IFS=$&#39;\n&#39;; for file in $(find . -type f); do echo -n &#34;\nFILE: \&#34;${file}\&#34;\n&#34;; rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null | grep -Pi &#39;[^\w\d]+(basic|bearer)\ .+&#39;; done&#xA;&#xA;IFS=$&#39;\n&#39;; for file in $(find . -type f); do echo -n &#34;\nFILE: \&#34;${file}\&#34;\n&#34;; rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null | grep -Pi &#39;(access|account|admin|basic|bearer|card|conf|cred|customer|email|history|id|info|jwt|key|kyc|log|otp|pass|pin|priv|refresh|salt|secret|seed|setting|sign|token|transaction|transfer|user)\w*(?:\&#34;\ *\:|\ *\=).+&#39;; done&#xA;&#xA;IFS=$&#39;\n&#39;; for file in $(find . -type f); do echo -n &#34;\nFILE: \&#34;${file}\&#34;\n&#34;; rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null | grep -Pi &#39;([^\w\d]+(to(\_|\ )do|todo|note)\ |\/\/|\/\*|\*\/).+&#39;; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract URLs, deeplinks, IPs, etc.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IFS=$&#39;\n&#39;; for file in $(find . -type f); do rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null; done | grep -Po &#39;\w+\:\/\/[\w\-\.\@\:\/\?\=\%\&amp;amp;\#]+&#39; | grep -Piv &#39;\.(css|gif|jpeg|jpg|ogg|otf|png|svg|ttf|woff|woff2)&#39; | sort -uf | tee urls.txt&#xA;&#xA;IFS=$&#39;\n&#39;; for file in $(find . -type f); do rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null; done | grep -Po &#39;(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}&#39; | sort -uf | tee ips.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract all strings and decode Base64 strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IFS=$&#39;\n&#39;; for file in $(find . -type f); do rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null; done | sort -uf &amp;gt; strings.txt&#xA;&#xA;grep -Po &#39;(?:([a-zA-Z0-9\+\/]){4})*(?:(?1){4}|(?1){3}\=|(?1){2}\=\=)&#39; strings.txt | sort -uf &amp;gt; base64.txt&#xA;&#xA;for string in $(cat base64.txt); do res=$(echo &#34;${string}&#34; | base64 -d 2&amp;gt;/dev/null | grep -PI &#39;[\s\S]+&#39;); if [[ ! -z $res ]]; then echo -n &#34;${string}\n${res}\n\n&#34;; fi; done | tee base64_decoded.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite 3&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;SCP&lt;/a&gt; to download database files, and then open them using &lt;a href=&#34;https://sqlitebrowser.org&#34;&gt;DB Browser for SQLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To inspect the content, navigate to &lt;code&gt;Browse Data&lt;/code&gt; tab, expand &lt;code&gt;Table&lt;/code&gt; dropdown menu, and select the desired table.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ivan-sincek/ios-penetration-testing-cheat-sheet/raw/main/img/sqlite.png&#34; alt=&#34;SQLite&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Figure 3 - DB Browser for SQLite&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;To inspect/edit database files on your iOS device, use &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#cydia-sources-and-tools&#34;&gt;SQLite 3&lt;/a&gt;; &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssh-to-your-ios-device&#34;&gt;SSH&lt;/a&gt; to your iOS device and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite3 somefile&#xA;&#xA;.dump&#xA;&#xA;.tables&#xA;&#xA;SELECT * FROM sometable;&#xA;&#xA;.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can automate such tasks with &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#5-property-lister&#34;&gt;Property Lister&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Backups&lt;/h3&gt; &#xA;&lt;p&gt;Get your iOS device UDID:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;idevice_id -l&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a backup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;idevicebackup2 backup --full --source someudid --udid someudid ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5. Property Lister&lt;/h2&gt; &#xA;&lt;h3&gt;Cache.db&lt;/h3&gt; &#xA;&lt;p&gt;By default, NSURLSession class stores data such as HTTP requests and responses in Cache.db unencrypted database file.&lt;/p&gt; &#xA;&lt;p&gt;Search for sensitive data in property list files inside Cache.db unencrypted database file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;scp root@192.168.1.10:/var/mobile/Containers/Data/Application/YYY...YYY/Library/Caches/com.someapp.dev/Cache.db ./&#xA;&#xA;property-lister -db Cache.db -o plists&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Cache.db is unencrypted and backed up by default, and as such, should not contain any sensitive data after user logs out - it should be cleared by calling &lt;a href=&#34;https://developer.apple.com/documentation/foundation/urlcache/1417802-removeallcachedresponses&#34;&gt;removeAllCachedResponses()&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Find All / Dump All&lt;/h3&gt; &#xA;&lt;p&gt;Unpack e.g. &lt;code&gt;someapp.ipa&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#pull-a-decrypted-ipa&#34;&gt;decrypted.ipa&lt;/a&gt; (preferred).&lt;/p&gt; &#xA;&lt;p&gt;Dump all the databases, and extract and convert all the property list files inside an IPA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;property-lister -db Payload -o results_db&#xA;&#xA;property-lister -pl Payload -o results_pl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Repeat the same for &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#3-search-for-files-and-directories&#34;&gt;the app specific directories&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;6. Deeplinks&lt;/h2&gt; &#xA;&lt;p&gt;Create an HTML template to manually test deeplinks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir ios_deeplinks&#xA;&#xA;# multiple URL schemes&#xA;&#xA;for scheme in $(cat url_schemes.txt); do for url in $(cat urls.txt | grep -Poi &#34;${scheme}\:\/\/.+&#34;); do if [[ ! -z $url ]]; then echo -n &#34;&amp;lt;a href=&#39;${url}&#39;&amp;gt;${url}&amp;lt;/a&amp;gt;\n&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;\n&#34; | tee &#34;ios_deeplinks/${scheme}_deeplinks.html&#34;; fi; done; done&#xA;&#xA;# single URL scheme&#xA;&#xA;scheme=&#34;somescheme&#34;; for string in $(cat urls.txt | grep -Poi &#34;${scheme}\:\/\/.+&#34;); do echo -n &#34;&amp;lt;a href=&#39;${string}&#39;&amp;gt;${string}&amp;lt;/a&amp;gt;\n&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;\n&#34;; done | tee &#34;ios_deeplinks/${scheme}_deeplinks.html&#34;&#xA;&#xA;python3 -m http.server 9000 --directory ios_deeplinks&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;code&gt;url_schemes.txt&lt;/code&gt; see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#infoplist&#34;&gt;Info.plist&lt;/a&gt;, and for &lt;code&gt;urls.txt&lt;/code&gt; see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;4. Inspect Files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Fuzz deeplinks using &lt;a href=&#34;https://codeshare.frida.re/@ivan-sincek/ios-url-scheme-fuzzing&#34;&gt;ios-url-scheme-fuzzing&lt;/a&gt; script with &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#7-frida&#34;&gt;Frida&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;frida -U -no-pause -l ios-url-scheme-fuzzing.js -f com.someapp.dev&#xA;&#xA;frida -U -no-pause --codeshare ivan-sincek/ios-url-scheme-fuzzing -f com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the source code for more instructions. You can also paste the whole source code directly into Frida and call the methods as you prefer.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Sometimes, deeplinks can bypass biometrics.&lt;/p&gt; &#xA;&lt;h2&gt;7. Frida&lt;/h2&gt; &#xA;&lt;p&gt;Useful resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://frida.re/docs/home&#34;&gt;frida.re&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learnfrida.info&#34;&gt;learnfrida.info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeshare.frida.re&#34;&gt;codeshare.frida.re&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dweinstein/awesome-frida&#34;&gt;github.com/dweinstein/awesome-frida&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/interference-security/frida-scripts&#34;&gt;github.com/interference-security/frida-scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m0bilesecurity/Frida-Mobile-Scripts&#34;&gt;github.com/m0bilesecurity/Frida-Mobile-Scripts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;List processes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-ps -Uai&#xA;&#xA;frida-ps -Uai | grep -i &#39;keyword&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get PID for a specified keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-ps -Uai | grep -i &#39;keyword&#39; | cut -d &#39; &#39; -f 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Discover internal methods/calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-discover -U -f com.someapp.dev | tee frida_discover.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Trace internal methods/calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-trace -U -p 1337&#xA;&#xA;frida-trace -U -p 1337 -i &#39;recv*&#39; -i &#39;send*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frida Scripts&lt;/h3&gt; &#xA;&lt;p&gt;Bypass biometrics using &lt;a href=&#34;https://codeshare.frida.re/@ivan-sincek/ios-touch-id-bypass&#34;&gt;ios-touch-id-bypass&lt;/a&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;frida -U -no-pause -l ios-touch-id-bypass.js -f com.someapp.dev&#xA;&#xA;frida -U -no-pause --codeshare ivan-sincek/ios-touch-id-bypass -f com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the touch ID prompt, press &lt;code&gt;Cancel&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;I prefer to use the built-in method in &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#bypasses&#34;&gt;Objection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Hook all classes and methods using &lt;a href=&#34;https://codeshare.frida.re/@ivan-sincek/ios-hook-classes-methods&#34;&gt;ios-hook-classes-methods&lt;/a&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;frida -U -no-pause -l ios-hook-classes-methods.js -f com.someapp.dev&#xA;&#xA;frida -U -no-pause --codeshare ivan-sincek/ios-hook-classes-methods -f com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;8. Objection&lt;/h2&gt; &#xA;&lt;p&gt;Useful resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sensepost/objection&#34;&gt;github.com/sensepost/objection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;objection -g com.someapp.dev explore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#7-frida&#34;&gt;Frida&lt;/a&gt; script in Objection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;import somescript.js&#xA;&#xA;objection -g com.someapp.dev explore --startup-script somescript.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ios info binary&#xA;&#xA;ios plist cat Info.plist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get HTTP cookies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ios cookies get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump Keychain, NSURLCredentialStorage, and NSUserDefaults:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ios keychain dump&#xA;&#xA;ios nsurlcredentialstorage dump&#xA;&#xA;ios nsuserdefaults get&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sensitive data such as app&#39;s PIN, password, etc. should not be stored as a plain-text in the keychain; instead, they should be hashed as an additional level of protection.&lt;/p&gt; &#xA;&lt;p&gt;Dump app&#39;s memory to a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;memory dump all mem.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump app&#39;s memory after e.g. 10 minutes of inactivity, then, check if sensitive data is still in the memory, see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;4. Inspect Files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Search app&#39;s memory directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;memory search &#39;somestring&#39; --string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List classes and methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios hooking list classes&#xA;ios hooking search classes &#39;keyword&#39;&#xA;&#xA;ios hooking list class_methods &#39;someclass&#39;&#xA;ios hooking search methods &#39;keyword&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hook on a class or method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios hooking watch class &#39;someclass&#39;&#xA;&#xA;ios hooking watch method &#39;-[someclass somemethod]&#39; --dump-args --dump-backtrace --dump-return&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the method&#39;s return value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios hooking set return_value &#39;-[someclass somemethod]&#39; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Monitor crypto libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ios monitor crypto&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Monitor the pasteboard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;ios pasteboard monitor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also dump the pasteboard using &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#dump-the-pasteboard&#34;&gt;cycript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Bypasses&lt;/h3&gt; &#xA;&lt;p&gt;Bypass a jailbreak detection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios jailbreak disable --quiet&#xA;&#xA;objection -g com.someapp.dev explore --startup-command &#39;ios jailbreak disable --quiet&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, on your iOS device, check &lt;code&gt;A-Bypass&lt;/code&gt; in &lt;code&gt;Settings&lt;/code&gt; app.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Bypass SSL pinning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios sslpinning disable --quiet&#xA;&#xA;objection -g com.someapp.dev explore --startup-command &#39;ios sslpinning disable --quiet&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, on your iOS device, check &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssl-kill-switch-2&#34;&gt;SSL Kill Switch 2&lt;/a&gt; in &lt;code&gt;Settings&lt;/code&gt; app.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Bypass biometrics:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;ios ui biometrics_bypass --quiet&#xA;&#xA;objection -g com.someapp.dev explore --startup-command &#39;ios ui biometrics_bypass --quiet&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can import &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#frida-scripts&#34;&gt;Frida&lt;/a&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;9. Repackage an IPA&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssh-to-your-ios-device&#34;&gt;SSH&lt;/a&gt; to your iOS device and run the following commands.&lt;/p&gt; &#xA;&lt;p&gt;Navigate to the app specific directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /private/var/containers/Bundle/Application/XXX...XXX/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Repackage the IPA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;mkdir Payload&#xA;&#xA;cp -r someapp.app Payload&#xA;&#xA;zip -r repackaged.ipa Payload&#xA;&#xA;rm -rf Payload&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On your Kali Linux, download the repackaged IPA:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;scp root@192.168.1.10:/private/var/containers/Bundle/Application/XXX...XXX/repackaged.ipa ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to pull a decrypted IPA from your iOS device, see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#pull-a-decrypted-ipa&#34;&gt;Pull a Decrypted IPA&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;10. Miscellaneous&lt;/h2&gt; &#xA;&lt;h3&gt;Monitor the System Log&lt;/h3&gt; &#xA;&lt;p&gt;On your Kali Linux, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;idevicesyslog -p 1337&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Monitor File Changes&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssh-to-your-ios-device&#34;&gt;SSH&lt;/a&gt; to your iOS device, then, download and run &lt;a href=&#34;http://www.newosxbook.com&#34;&gt;Filemon&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget http://www.newosxbook.com/tools/filemon.tgz &amp;amp;&amp;amp; tar zxvf filemon.tgz &amp;amp;&amp;amp; chmod 777 filemon&#xA;&#xA;./filemon -c -f com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Always look for created or cached files, images/screenshots, etc. Use &lt;code&gt;nano&lt;/code&gt; to edit files directly on your iOS device.&lt;/p&gt; &#xA;&lt;p&gt;Sensitive files such as know your customer (KYC) and similar, should not persists in the app specific directories on the user device after the file upload.&lt;/p&gt; &#xA;&lt;p&gt;Images/screenshots path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;cd /var/mobile/Containers/Data/Application/YYY...YYY/Library/SplashBoard/Snapshots&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dump the Pasteboard&lt;/h3&gt; &#xA;&lt;p&gt;After copying sensitive data, the app should wipe the pasteboard after a short period of time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#ssh-to-your-ios-device&#34;&gt;SSH&lt;/a&gt; to your iOS device and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;cycript -p 1337&#xA;&#xA;[UIPasteboard generalPasteboard].items&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Press &lt;code&gt;CTRL + D&lt;/code&gt; to exit.&lt;/p&gt; &#xA;&lt;p&gt;You can also monitor the pasteboard in &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/ios-penetration-testing-cheat-sheet/main/#8-objection&#34;&gt;Objection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Get the Provisioning Profile&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;scp root@192.168.1.10:/private/var/containers/Bundle/Application/XXX...XXX/*.app/embedded.mobileprovision ./&#xA;&#xA;openssl smime -inform der -verify -noverify -in embedded.mobileprovision&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;11. Tips and Security Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;Bypass any keyboard restriction by copying and pasting data into an input field.&lt;/p&gt; &#xA;&lt;p&gt;Access tokens should be short lived, and if possible, invalidated on logout.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to test widgets, push notifications, app extensions, and Firebase.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;App should not disclose sensitive data in the predictive text (due to incorrectly defined input field type), app switcher, and push notifications.&lt;/p&gt; &#xA;&lt;p&gt;App should warn a user when taking a screenshot of sensitive data, as well as, that it is trivial to bypass biometrics authentication if iOS device is jailbroken.&lt;/p&gt; &#xA;&lt;p&gt;Production app (i.e. build) should never be debuggable.&lt;/p&gt; &#xA;&lt;h2&gt;12. Useful Websites and Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing.org/w/decode.jspx&#34;&gt;zxing.org/w/decode.jspx&lt;/a&gt; (decode QR codes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/account&#34;&gt;developer.apple.com/account&lt;/a&gt; (code signing certificates, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.apple.com/apple-pay/sandbox-testing&#34;&gt;developer.apple.com/apple-pay/sandbox-testing&lt;/a&gt; (test debit/credit cards for Apple Pay)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/@iDeviceMovies&#34;&gt;youtube.com/@iDeviceMovies&lt;/a&gt; (useful videos about jailbreaking, etc.)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://altstore.io&#34;&gt;altstore.io&lt;/a&gt; (&lt;a href=&#34;https://github.com/altstoreio/AltStore/issues/156#issuecomment-717133644&#34;&gt;fix for installation issue&lt;/a&gt;) (alt. app store | jailbreak is not required)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.imobie.com/anytrans&#34;&gt;imobie.com/anytrans&lt;/a&gt; (iOS backups)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;iMazing&lt;/h3&gt; &#xA;&lt;p&gt;Export IPA using &lt;a href=&#34;https://imazing.com&#34;&gt;iMazing&lt;/a&gt; (free trial). Jailbreak is not required.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ivan-sincek/ios-penetration-testing-cheat-sheet/raw/main/img/imazing.jpg&#34; alt=&#34;iMazing&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Figure 4 - iMazing&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ItsPi3141/alpaca-electron</title>
    <updated>2023-04-13T01:36:55Z</updated>
    <id>tag:github.com,2023-04-13:/ItsPi3141/alpaca-electron</id>
    <link href="https://github.com/ItsPi3141/alpaca-electron" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An even simpler way to run Alpaca&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;sub&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ItsPi3141/alpaca-electron/main/icon/alpaca-chat-logo.png?raw=true&#34; height=&#34;144&#34;&gt; &lt;/sub&gt; &lt;br&gt; Alpaca Electron &lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://nodejs.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/node.js-6DA55F?style=for-the-badge&amp;amp;logo=node.js&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.electronjs.org/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Electron-191970?style=for-the-badge&amp;amp;logo=Electron&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/antimatter15/alpaca.cpp/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Alpaca.cpp-%2300599C.svg?style=for-the-badge&amp;amp;logo=c%2B%2B&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/W7xwHpPWth&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Discord-%235865F2.svg?style=for-the-badge&amp;amp;logo=discord&amp;amp;logoColor=white&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;i&gt;Alpaca Electron is built from the ground-up to be the easiest way to chat with the alpaca AI models. No command line or compiling needed!&lt;/i&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;📃 Features + to-do&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Runs locally on your computer, internet connection is not needed except when downloading models&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compact and efficient since it uses &lt;a href=&#34;https://github.com/antimatter15/alpaca.cpp&#34;&gt;alpaca.cpp&lt;/a&gt; as it&#39;s backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Runs on CPU, anyone can run it without an expensive graphics card&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; No external dependencies required, everything is included in the installer&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &#34;Borrowed&#34; UI from &lt;em&gt;that&lt;/em&gt; popular chat AI &lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Supports Windows, MacOS, and Linux (untested)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Docker-ized 🐋&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Context memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Chat history&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Integration with Stable Diffusion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🎞 Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/ItsPi3141/alpaca-electron/raw/main/demo.gif&#34; alt=&#34;Demonstration&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Quick Start Guide&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download an Alpaca model (7B native is recommended) and place it somewhere on your computer where it&#39;s easy to find.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt; Download links will not be provided in this repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the latest installer from the &lt;a href=&#34;https://github.com/ItsPi3141/alpaca-electron/releases&#34;&gt;releases page&lt;/a&gt; section.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the installer and wait for it to install.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once done installing, it&#39;ll ask for a valid path to a model. Now, go to where you placed the model, hold shift, right click on the file, and then click on &#34;Copy as Path&#34;. Then, paste this into that dialog box and click &lt;code&gt;Confirm&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The program will automatically restart. Now you can begin chatting!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;br&gt; The program will also accept any other 4 bit quantized .bin model files. If you can find other .bin Alpaca model files, you can use them instead of the one recommended in the Quick Start Guide to experiment with different models. As always, be careful about what you download from the internet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;🔧 Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;General&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you get an error that says &#34;Invalid file path&#34; when pasting the path to the model file, you probably have some sort of misspelling in there. Try copying the path again or using the file picker.&lt;/li&gt; &#xA; &lt;li&gt;If you get an error that says &#34;Couldn&#39;t load model&#34;, your model is probably corrupted or incompatible. Try downloading the model again.&lt;/li&gt; &#xA; &lt;li&gt;If you face other problems or issues not listed here, create an issue in the &#34;Issues&#34; tab at the top of this page. Describe in detail what happens, and include screenshots.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If the model has been loaded into RAM but text generation doesn&#39;t seem start, &lt;a href=&#34;https://ark.intel.com/content/www/us/en/ark.html#@Processors&#34;&gt;check&lt;/a&gt; to see if your CPU is compatible with the &lt;a href=&#34;https://edc.intel.com/content/www/us/en/design/ipla/software-development-platforms/client/platforms/alder-lake-desktop/12th-generation-intel-core-processors-datasheet-volume-1-of-2/002/intel-advanced-vector-extensions-2-intel-avx2/&#34;&gt;AVX2&lt;/a&gt; instruction set. If it does not support AVX2, Alpaca Electron will use AVX instead, which is much slower so be patient.&lt;/li&gt; &#xA; &lt;li&gt;If you get an error saying &#34;vcruntime140_1.dll is missing&#34; or nothing happens at all and the model was not loaded into RAM, try installing the &lt;a href=&#34;https://aka.ms/vs/17/release/vc_redist.x64.exe&#34;&gt;Microsoft Visual C++ Redistributable&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you get an error that says &#34;App can&#39;t be opened because it is from an unidentified developer.&#34;, go to the Applications folder. Then, hold the control key and click on the app. Then click &#34;Open&#34;, then click &#34;Open&#34; when it gives you a warning. Your preference will be saved and MacOS will let you open the app normally from now on.&lt;/li&gt; &#xA; &lt;li&gt;If the above method does not work, try running the following command in terminal: &lt;code&gt;xattr -cr /Applications/Alpaca\ Electron.app/&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can either download the prebuilt binary (packaged as tar.gz), extract it and execute it with &lt;code&gt;./alpaca-electron&lt;/code&gt; or build the application on yourself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to build the application yourself:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Clone the repository:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;git clone https://github.com/ItsPi3141/alpaca-electron.git&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Change your current directory to alpaca-electron:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;cd alpaca-electron&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Install application specific dependencies:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;npm install --save-dev&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Build the application:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;npm run linux-x64&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Change your current directory to the build target:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;cd release-builds/alpaca-electron-linux-x64&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run the application with &lt;code&gt;./alpaca-electron&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Docker Compose&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can run this electron application with docker compose. Therefore you need to compelete the following steps:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Clone the repository:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;git clone https://github.com/ItsPi3141/alpaca-electron.git&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Change your current directory to alpaca-electron:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;cd alpaca-electron&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Build the container image:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;docker compose build&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;Run the application container:&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;docker compose up -d&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If no window opens up run &lt;code&gt;docker compose up&lt;/code&gt; (without the -d). If there is an error like &lt;code&gt;Authorization required, but no authorization protocol specified&lt;/code&gt; run &lt;code&gt;xhost local:root&lt;/code&gt; on your docker host.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;👨‍💻 Credits&lt;/h2&gt; &#xA;&lt;p&gt;Credits go to &lt;a href=&#34;https://github.com/antimatter15/alpaca.cpp&#34;&gt;@antimatter15&lt;/a&gt; for creating alpaca.cpp and to &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;@ggerganov&lt;/a&gt; for creating llama.cpp, the backbones behind alpaca.cpp. Finally, credits go to Meta and Stanford for creating the LLaMA and Alpaca models, respectively.&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to &lt;a href=&#34;https://github.com/keldenl&#34;&gt;@keldenl&lt;/a&gt; for providing arm64 builds for MacOS and &lt;a href=&#34;https://github.com/W48B1T&#34;&gt;@W48B1T&lt;/a&gt; for providing Linux builds&lt;/p&gt;</summary>
  </entry>
</feed>