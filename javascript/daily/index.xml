<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-01T01:37:47Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>node-red/node-red</title>
    <updated>2023-02-01T01:37:47Z</updated>
    <id>tag:github.com,2023-02-01:/node-red/node-red</id>
    <link href="https://github.com/node-red/node-red" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low-code programming for event-driven applications&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node-RED&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://nodered.org&#34;&gt;http://nodered.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/node-red/node-red&#34;&gt;&lt;img src=&#34;https://travis-ci.org/node-red/node-red.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/node-red/node-red?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/node-red/node-red/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Low-code programming for event-driven applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://nodered.org/images/node-red-screenshot.png&#34; alt=&#34;Node-RED: Low-code programming for event-driven applications&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;http://nodered.org/docs/getting-started/&#34;&gt;http://nodered.org/docs/getting-started/&lt;/a&gt; for full instructions on getting started.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;sudo npm install -g --unsafe-perm node-red&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node-red&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;a href=&#34;http://localhost:1880&#34;&gt;http://localhost:1880&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;p&gt;More documentation can be found &lt;a href=&#34;http://nodered.org/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For further help, or general discussion, please use the &lt;a href=&#34;https://discourse.nodered.org&#34;&gt;Node-RED Forum&lt;/a&gt; or &lt;a href=&#34;https://nodered.org/slack&#34;&gt;slack team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Developers&lt;/h2&gt; &#xA;&lt;p&gt;If you want to run the latest code from git, here&#39;s how to get started:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the code:&lt;/p&gt; &lt;pre&gt;&lt;code&gt; git clone https://github.com/node-red/node-red.git&#xA; cd node-red&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the node-red dependencies&lt;/p&gt; &lt;pre&gt;&lt;code&gt; npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the code&lt;/p&gt; &lt;pre&gt;&lt;code&gt; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run&lt;/p&gt; &lt;pre&gt;&lt;code&gt; npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Before raising a pull-request, please read our &lt;a href=&#34;https://github.com/node-red/node-red/raw/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This project adheres to the &lt;a href=&#34;http://contributor-covenant.org/version/1/4/&#34;&gt;Contributor Covenant 1.4&lt;/a&gt;. By participating, you are expected to uphold this code. Please report unacceptable behavior to any of the project&#39;s core team at &lt;a href=&#34;mailto:team@nodered.org&#34;&gt;team@nodered.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Node-RED is a project of the &lt;a href=&#34;http://openjsf.org&#34;&gt;OpenJS Foundation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is maintained by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nick O&#39;Leary &lt;a href=&#34;http://twitter.com/knolleary&#34;&gt;@knolleary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Dave Conway-Jones &lt;a href=&#34;http://twitter.com/ceejay&#34;&gt;@ceejay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;And many others...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Copyright and license&lt;/h2&gt; &#xA;&lt;p&gt;Copyright OpenJS Foundation and other contributors, &lt;a href=&#34;https://openjsf.org&#34;&gt;https://openjsf.org&lt;/a&gt; under &lt;a href=&#34;https://raw.githubusercontent.com/node-red/node-red/master/LICENSE&#34;&gt;the Apache 2.0 license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dcloudio/uni-app</title>
    <updated>2023-02-01T01:37:47Z</updated>
    <id>tag:github.com,2023-02-01:/dcloudio/uni-app</id>
    <link href="https://github.com/dcloudio/uni-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A cross-platform framework using Vue.js&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uni-app&lt;/h1&gt; &#xA;&lt;p&gt; 简体中文 | &lt;a href=&#34;https://github.com/dcloudio/uni-app/raw/dev/README_en-US.md&#34;&gt;English&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;uni-app&lt;/code&gt; 是一个使用 &lt;code&gt;Vue.js&lt;/code&gt; 开发小程序、H5、App的统一前端框架。官网地址：&lt;a href=&#34;https://uniapp.dcloud.io&#34;&gt;https://uniapp.dcloud.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;开发者使用 &lt;code&gt;Vue&lt;/code&gt; 语法编写代码，&lt;code&gt;uni-app&lt;/code&gt; 框架将其编译到 小程序（微信/支付宝/百度/字节跳动/QQ/快手/钉钉/小红书）、App（iOS/Android）、H5等多个平台，保证其正确运行并达到优秀体验。&lt;/p&gt; &#xA;&lt;h1&gt;uni-app的特点&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;开发者和案例更多：HBuilder装机量800万台，开发者社区月活百万，70多个QQ微信群承载10万人。案例众多，uni统计月活超10亿（&lt;a href=&#34;https://uniapp.dcloud.io/case&#34;&gt;详见&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;性能更高（见&lt;a href=&#34;https://juejin.im/post/5ca1736af265da30ae314248&#34;&gt;评测&lt;/a&gt;）&lt;/li&gt; &#xA; &lt;li&gt;更丰富的周边生态，&lt;a href=&#34;https://ext.dcloud.net.cn/&#34;&gt;插件市场&lt;/a&gt;数千款插件&lt;/li&gt; &#xA; &lt;li&gt;提供比小程序原生开发更好的开发体验、更高的工程化效率&lt;/li&gt; &#xA; &lt;li&gt;跨端抹平度更完善，且各端特色发挥更灵活，可真正实现一套代码多端覆盖，无需各端多头维护升级&lt;/li&gt; &#xA; &lt;li&gt;权威认可：阿里小程序官方工具内置uni-app（&lt;a href=&#34;https://docs.alipay.com/mini/ide/0.70-stable&#34;&gt;详见&lt;/a&gt;）、腾讯课堂官方自制uni-app培训视频（&lt;a href=&#34;https://ask.dcloud.net.cn/article/35640&#34;&gt;详见&lt;/a&gt;）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;扫码体验&lt;/h2&gt; &#xA;&lt;p&gt;开发一次，编译到14个平台。依次扫描14个二维码，亲自体验最全面的跨平台效果！&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://vkceyugu.cdn.bspapp.com/VKCEYUGU-a90b5f95-90ba-4d30-a6a7-cd4d057327db/cf5727bc-fbe6-4d7e-bd92-e0d16e6f53b0.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;em&gt;注： 某些平台不能提交简单demo，补充了一些其他功能。&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;uni-app&lt;/code&gt;支持通过&lt;code&gt;vue-cli&lt;/code&gt;命令行、&lt;code&gt;HBuilderX&lt;/code&gt;可视化界面两种方式快速创建项目：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uniapp.dcloud.io/quickstart?id=_2-%E9%80%9A%E8%BF%87vue-cli%E5%91%BD%E4%BB%A4%E8%A1%8C&#34;&gt;vue-cli命令行方式&lt;/a&gt;：不限IDE，适合对node熟悉的开发者，扩展阅读：&lt;a href=&#34;https://ask.dcloud.net.cn/article/36286&#34;&gt;在vscode中开发uni-app&lt;/a&gt;、&lt;a href=&#34;https://ask.dcloud.net.cn/article/36307&#34;&gt;在 WebStorm 中开发 uni-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uniapp.dcloud.io/quickstart?id=_1-%E9%80%9A%E8%BF%87-hbuilderx-%E5%8F%AF%E8%A7%86%E5%8C%96%E7%95%8C%E9%9D%A2&#34;&gt;HBuilderX可视化界面&lt;/a&gt;：专用IDE，内置相关环境，开箱即用，开发效率更高。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;项目案例&lt;/h2&gt; &#xA;&lt;p&gt;案例展示：&lt;a href=&#34;https://uniapp.dcloud.io/case&#34;&gt;uniapp.dcloud.io/case&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;欢迎提交你的应用，&lt;a href=&#34;https://github.com/dcloudio/uni-app/issues/6&#34;&gt;uni-app案例征集&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;需求墙&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;uni-app&lt;/code&gt;计划支持的功能点，会在需求墙上进行展示，征集开发者的投票意见，&lt;a href=&#34;https://dev.dcloud.net.cn/wish/&#34;&gt;前往投票&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;uni-app&lt;/code&gt;一直保持高频的更新迭代，详见&lt;a href=&#34;https://uniapp.dcloud.net.cn/release&#34;&gt;正式版更新日志&lt;/a&gt;、&lt;a href=&#34;https://uniapp.dcloud.net.cn/release-note-alpha&#34;&gt;Alpha版更新日志&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;论坛&lt;/h2&gt; &#xA;&lt;p&gt;由于&lt;code&gt;DCloud&lt;/code&gt;有70多个QQ、微信群，官方已无法维护更多交流群。请开发者到官方论坛交流：&lt;a href=&#34;https://ask.dcloud.net.cn/explore/&#34;&gt;https://ask.dcloud.net.cn/explore/&lt;/a&gt; 。论坛提供了比issues更专业的工具服务。&lt;/p&gt; &#xA;&lt;h2&gt;插件市场&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;uni-app&lt;/code&gt;有丰富的插件生态，众多开发者提交了数千款组件、sdk、项目模板，详见：&lt;a href=&#34;https://ext.dcloud.net.cn/&#34;&gt;https://ext.dcloud.net.cn/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;除了众多三方ui库，官方还提供了uni-ui，在性能和跨端兼容方面有更强的优势。详见：&lt;a href=&#34;https://ext.dcloud.net.cn/plugin?id=55&#34;&gt;https://ext.dcloud.net.cn/plugin?id=55&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;现有项目如何迁移到uni-app体系&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;微信小程序转换uni-app指南及转换器：&lt;a href=&#34;https://ask.dcloud.net.cn/article/35786&#34;&gt;https://ask.dcloud.net.cn/article/35786&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;vue h5项目转换uni-app指南：&lt;a href=&#34;https://ask.dcloud.net.cn/article/36174&#34;&gt;https://ask.dcloud.net.cn/article/36174&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;mpvue 项目（组件）迁移指南、示例及资源汇总： &lt;a href=&#34;https://ask.dcloud.net.cn/article/34945&#34;&gt;https://ask.dcloud.net.cn/article/34945&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;wepy转uni-app转换器：&lt;a href=&#34;https://github.com/zhangdaren/wepy-to-uniapp&#34;&gt;https://github.com/zhangdaren/wepy-to-uniapp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;常见疑问&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;问：不同端有不同的需求、不同的特色，登录支付也不一样，如何统一？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;答：差异部分使用条件编译。uni-app提供了灵活强大的&lt;a href=&#34;https://uniapp.dcloud.io/platform&#34;&gt;条件编译&lt;/a&gt;。可以完美处理复用部分和差异部分。真正一套工程源码。当业务升级时，不再需要多端维护。如果多端维护，经常会因为某些端的流量不大，就一直拖延无法让那些用户享受到最新服务。另外登录支付在客户端部分，已经被uni-app统一成一样的api了。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;问：多端是不是一种妥协，是否会造成性能下降？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;答：good question。多端且不影响性能，确实很难，但uni-app做到了。在h5端，它的性能、包体积与直接使用vue.js开发一致； 在小程序端，它的性能比大多数开发框架更好，uni-app底层自动处理的setdata差量同步机制，比开发者手动写setdata更好，就像使用vue.js更新界面比手动写js修改dom更高效一样； 在App，uni-app支持webview渲染和原生渲染双引擎，启用原生渲染时，css写法受限，但性能是很接近原生开发的效果的，在当前的手机环境下，千万日活以下的应用在App使用uni-app也不会遇到任何压力。当然也可以在已经做好的原生App中将部分页面改为uni-app实现; 此外，我们会把很多跨端处理放在编译期完成的，这样会减少对运行期的效率影响。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;问：不做多端，是不是不需要uni-app？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;答：不是。大量开发者用uni-app只做一个端，详见&lt;a href=&#34;https://uniapp.dcloud.io/case&#34;&gt;案例&lt;/a&gt;。对于开发者而言，一个优秀工具在手，做什么都不愁。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;问：uni-app以后会不会变更开源协议，转向收费？&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;答：官方承诺永远不会变更开源协议。无论HBuilderX、uni-app、App，面向中国人永久免费。&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;更多资料&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;评测：&lt;a href=&#34;https://juejin.im/post/5e8e8d5a6fb9a03c6d3d9f42&#34;&gt;跨端开发框架深度横评之2020版&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;评测：&lt;a href=&#34;https://mp.weixin.qq.com/s/jIDEHfuMnED6HTfNgjsW4w&#34;&gt;深入测试一周，主流多端框架大比武&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ask.dcloud.net.cn/article/36083&#34;&gt;uni-app在App端和flutter、react native的比较&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>learning-zone/nodejs-basics</title>
    <updated>2023-02-01T01:37:47Z</updated>
    <id>tag:github.com,2023-02-01:/learning-zone/nodejs-basics</id>
    <link href="https://github.com/learning-zone/nodejs-basics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Node.js Basics ( v18.x )&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js Basics&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Click ★ if you like the project. Your contributions are heartily ♡ welcome.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Related Topics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/learning-zone/html-basics&#34;&gt;HTML Basics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/learning-zone/css-basics&#34;&gt;CSS Basics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/learning-zone/javascript-basics&#34;&gt;JavaScript Basics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/learning-zone/sql-basics&#34;&gt;SQL Basics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/learning-zone/mongodb-basics&#34;&gt;MongoDB Basics&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/nodejs-api.md&#34;&gt;Node.js APIs&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/nodejs-commands.md&#34;&gt;Node.js Commands&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/nodejs-programming.md&#34;&gt;Node.js Coding Practice&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-1-introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-2-nodejs-setup&#34;&gt;Node.js Setup&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-3-nodejs-data-types&#34;&gt;Node.js Data Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-4-nodejs-architecture&#34;&gt;Node.js Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-5-nodejs-events&#34;&gt;Node.js Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-6-nodejs-file-system&#34;&gt;Node.js File System&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-7-nodejs-streams&#34;&gt;Node.js Streams&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-8-nodejs-multithreading&#34;&gt;Node.js Multithreading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-9-nodejs-web-module&#34;&gt;Node.js Web Module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-10-nodejs-middleware&#34;&gt;Node.js Middleware&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-11-nodejs-restful-api&#34;&gt;Node.js RESTFul API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-12-nodejs-routing&#34;&gt;Node.js Routing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-13-nodejs-caching&#34;&gt;Node.js Caching&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-14-nodejs-error-handling&#34;&gt;Node.js Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-15-nodejs-logging&#34;&gt;Node.js Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-16-nodejs-internationalization&#34;&gt;Node.js Internationalization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-17-nodejs-testing&#34;&gt;Node.js Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#-18-nodejs-miscellaneous&#34;&gt;Node.js Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;# 1. INTRODUCTION&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is an open-source server side runtime environment built on Chrome&#39;s V8 JavaScript engine. It provides an event driven, non-blocking (asynchronous) I/O and cross-platform runtime environment for building highly scalable server-side applications using JavaScript.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is Node.js Process Model?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js runs in a single process and the application code runs in a single thread and thereby needs less resources than other platforms.&lt;/p&gt; &#xA;&lt;p&gt;All the user requests to your web application will be handled by a single thread and all the I/O work or long running job is performed asynchronously for a particular request. So, this single thread doesn&#39;t have to wait for the request to complete and is free to handle the next request. When asynchronous I/O work completes then it processes the request further and sends the response.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the key features of Node.js?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Asynchronous and Event driven&lt;/strong&gt; – All APIs of Node.js are asynchronous. This feature means that if a Node receives a request for some Input/Output operation, it will execute that operation in the background and continue with the processing of other requests. Thus it will not wait for the response from the previous requests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fast in Code execution&lt;/strong&gt; – Node.js uses the V8 JavaScript Runtime engine, the one which is used by Google Chrome. Node has a wrapper over the JavaScript engine which makes the runtime engine much faster and hence processing of requests within Node.js also become faster.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Single Threaded but Highly Scalable&lt;/strong&gt; – Node.js uses a single thread model for event looping. The response from these events may or may not reach the server immediately. However, this does not block other operations. Thus making Node.js highly scalable. Traditional servers create limited threads to handle requests while Node.js creates a single thread that provides service to much larger numbers of such requests.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Node.js library uses JavaScript&lt;/strong&gt; – This is another important aspect of Node.js from the developer&#39;s point of view. The majority of developers are already well-versed in JavaScript. Hence, development in Node.js becomes easier for a developer who knows JavaScript.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;There is an Active and vibrant community for the Node.js framework&lt;/strong&gt; – The active community always keeps the framework updated with the latest trends in the web development.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No Buffering&lt;/strong&gt; – Node.js applications never buffer any data. They simply output the data in chunks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How does Node.js work?&lt;/h2&gt; &#xA;&lt;p&gt;A Node.js application creates a single thread on its invocation. Whenever Node.js receives a request, it first completes its processing before moving on to the next request.&lt;/p&gt; &#xA;&lt;p&gt;Node.js works asynchronously by using the event loop and callback functions, to handle multiple requests coming in parallel. An Event Loop is a functionality which handles and processes all your external events and just converts them to a callback function. It invokes all the event handlers at a proper time. Thus, lots of work is done on the back-end, while processing a single request, so that the new incoming request doesn&#39;t have to wait if the processing is not complete.&lt;/p&gt; &#xA;&lt;p&gt;While processing a request, Node.js attaches a callback function to it and moves it to the back-end. Now, whenever its response is ready, an event is called which triggers the associated callback function to send this response.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is difference between process and threads in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Process:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Processes are basically the programs that are dispatched from the ready state and are scheduled in the CPU for execution. PCB (Process Control Block) holds the concept of process. A process can create other processes which are known as Child Processes. The process takes more time to terminate and it is isolated means it does not share the memory with any other process.&lt;/p&gt; &#xA;&lt;p&gt;The process can have the following states new, ready, running, waiting, terminated, and suspended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Thread:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thread is the segment of a process which means a process can have multiple threads and these multiple threads are contained within a process. A thread has three states: Running, Ready, and Blocked.&lt;/p&gt; &#xA;&lt;p&gt;The thread takes less time to terminate as compared to the process but unlike the process, threads do not isolate.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 2. NODE.JS SETUP&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to create a simple server in Node.js that returns Hello World?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 01&lt;/strong&gt;: Create a project directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;mkdir myapp&#xA;cd myapp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 02&lt;/strong&gt;: Initialize project and link it to npm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a &lt;code&gt;package.json&lt;/code&gt; file in your myapp folder. The file contains references for all npm packages you have downloaded to your project. The command will prompt you to enter a number of things. You can enter your way through all of them EXCEPT this one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;entry point: (index.js)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Rename this to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 03&lt;/strong&gt;: Install Express in the myapp directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install express --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 04&lt;/strong&gt;: app.js&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Express.js&#xA; */&#xA;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;Hello World!&#39;);&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(&#39;App listening on port 3000!&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 05&lt;/strong&gt;: Run the app&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bah&#34;&gt;node app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚝ &lt;a href=&#34;https://codesandbox.io/s/hello-world-in-nodejs-ue3cs3&#34;&gt;Try this example on CodeSandbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain the concept of URL module in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The URL module in Node.js splits up a web address into readable parts. Use &lt;code&gt;require()&lt;/code&gt; to include the module. Then parse an address with the &lt;code&gt;url.parse()&lt;/code&gt; method, and it will return a URL object with each part of the address as properties.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * URL Module in Node.js&#xA; */&#xA;const url = require(&#39;url&#39;);&#xA;const adr = &#39;http://localhost:8080/default.htm?year=2022&amp;amp;month=september&#39;;&#xA;const q = url.parse(adr, true);&#xA;&#xA;console.log(q.host); // localhost:8080&#xA;console.log(q.pathname); // &#34;/default.htm&#34;&#xA;console.log(q.search); // &#34;?year=2022&amp;amp;month=september&#34;&#xA;&#xA;const qdata = q.query; // { year: 2022, month: &#39;september&#39; }&#xA;console.log(qdata.month); // &#34;september&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 3. NODE.JS DATA TYPES&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What are the data types in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Just like JS, there are two categories of data types in Node: Primitives and Objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Primitives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Number&lt;/li&gt; &#xA; &lt;li&gt;BigInt&lt;/li&gt; &#xA; &lt;li&gt;Boolean&lt;/li&gt; &#xA; &lt;li&gt;Undefined&lt;/li&gt; &#xA; &lt;li&gt;Null&lt;/li&gt; &#xA; &lt;li&gt;Symbol&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Objects:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Function&lt;/li&gt; &#xA; &lt;li&gt;Array&lt;/li&gt; &#xA; &lt;li&gt;Buffer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain String data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Strings in Node.js are sequences of unicode characters. Strings can be wrapped in a single or double quotation marks. Javascript provide many functions to operate on string, like indexOf(), split(), substr(), length.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;String functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Function&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;charAt()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to find a specific character present in a string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Concat()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to concat more than one string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;indexOf()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to get the index of a specified character or a part of the string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Match()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to match multiple strings.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Split()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to split the string and return an array of string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Join()&lt;/td&gt; &#xA;   &lt;td&gt;It is useful to join the array of strings and those are separated by comma (,) operator.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/** &#xA; * String Data Type&#xA; */&#xA;const str1 = &#34;Hello&#34;;&#xA;const str2 = &#39;World&#39;;&#xA;&#xA;console.log(&#34;Concat Using (+) :&#34; , (str1 + &#39; &#39; + str2));&#xA;console.log(&#34;Concat Using Function :&#34; , (str1.concat(str2)));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Number data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The number data type in Node.js is 64 bits floating point number both positive and negative. The parseInt() and parseFloat() functions are used to convert to number, if it fails to convert into a number then it returns &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Number Data Type&#xA; */&#xA;// Example 01:&#xA;const num1 = 10;&#xA;const num2 = 20;&#xA;&#xA;console.log(`sum: ${num1 + num2}`); &#xA;&#xA;// Example 02:&#xA;console.log(parseInt(&#34;32&#34;));  // 32&#xA;console.log(parseFloat(&#34;8.24&#34;)); // 8.24&#xA;console.log(parseInt(&#34;234.12345&#34;)); // 234&#xA;console.log(parseFloat(&#34;10&#34;)); // 10&#xA;&#xA;// Example 03:&#xA;console.log(isFinite(10/5)); // true&#xA;console.log(isFinite(10/0)); // false&#xA;&#xA;// Example 04:&#xA;console.log(5 / 0); // Infinity&#xA;console.log(-5 / 0); // -Infinity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain BigInt data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A BigInt value, also sometimes just called a BigInt, is a bigint primitive, created by appending &lt;strong&gt;n&lt;/strong&gt; to the end of an integer literal, or by calling the BigInt() function ( without the new operator ) and giving it an integer value or string value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * BigInt Data Type&#xA; */&#xA;const maxSafeInteger = 99n; // This is a BigInt&#xA;const num2 = BigInt(&#39;99&#39;); // This is equivalent&#xA;const num3 = BigInt(99); // Also works&#xA;&#xA;typeof 1n === &#39;bigint&#39;           // true&#xA;typeof BigInt(&#39;1&#39;) === &#39;bigint&#39;  // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Boolean data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Boolean data type is a data type that has one of two possible values, either true or false. In programming, it is used in logical representation or to control program structure.&lt;/p&gt; &#xA;&lt;p&gt;The boolean() function is used to convert any data type to a boolean value. According to the rules, false, 0, NaN, null, undefined, empty string evaluate to false and other values evaluates to true.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Boolean Data Type&#xA; */&#xA;// Example 01:&#xA;const isValid = true; &#xA;console.log(isValid); // true &#xA;&#xA;// Example 02:&#xA;console.log(true &amp;amp;&amp;amp; true); // true &#xA;console.log(true &amp;amp;&amp;amp; false); // false &#xA;console.log(true || false); // true &#xA;console.log(false || false); // false &#xA;console.log(!true); // false &#xA;console.log(!false); // true &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain &lt;code&gt;Undefined&lt;/code&gt; and &lt;code&gt;Null&lt;/code&gt; data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;In node.js, if a variable is defined without assigning any value, then that will take &lt;strong&gt;undefined&lt;/strong&gt; as value. If we assign a null value to the variable, then the value of the variable becomes &lt;strong&gt;null&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * NULL and UNDEFINED Data Type&#xA; */&#xA;let x;&#xA;console.log(x); // undefined&#xA;&#xA;let y = null;&#xA;console.log(y); // null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Symbol data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Symbol is an immutable primitive value that is unique. It&#39;s a very peculiar data type. Once you create a symbol, its value is kept private and for internal use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Symbol Data Type&#xA; */&#xA;const NAME = Symbol()&#xA;const person = {&#xA;  [NAME]: &#39;Ritika Bhavsar&#39;&#xA;}&#xA;&#xA;person[NAME] // &#39;Ritika Bhavsar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain function in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Functions are first class citizens in Node&#39;s JavaScript, similar to the browser&#39;s JavaScript. A function can have attributes and properties also. It can be treated like a class in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Function in Node.js&#xA; */&#xA;function Messsage(name) {&#xA; console.log(&#34;Hello &#34;+name);&#xA;}&#xA;&#xA;Messsage(&#34;World&#34;); // Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Buffer data type in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js includes an additional data type called Buffer ( not available in browser&#39;s JavaScript ). Buffer is mainly used to store &lt;strong&gt;binary data&lt;/strong&gt;, while reading from a file or receiving packets over the network.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Buffer Data Type&#xA; */&#xA;let b = new Buffer(10000);&#xA;let str = &#34;----------&#34;;&#xA;&#xA;b.write(str); &#xA;console.log( str.length ); // 10&#xA;console.log( b.length ); // 10000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: Buffer() is deprecated due to security and usability issues.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 4. NODE.JS ARCHITECTURE&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How does Node.js works?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is completely event-driven. Basically the server consists of one thread processing one event after another.&lt;/p&gt; &#xA;&lt;p&gt;A new request coming in is one kind of event. The server starts processing it and when there is a blocking IO operation, it does not wait until it completes and instead registers a callback function. The server then immediately starts to process another event ( maybe another request ). When the IO operation is finished, that is another kind of event, and the server will process it ( i.e. continue working on the request ) by executing the callback as soon as it has time.&lt;/p&gt; &#xA;&lt;p&gt;Node.js Platform does not follow Request/Response Multi-Threaded Stateless Model. It follows Single Threaded with Event Loop Model. Node.js Processing model mainly based on Javascript Event based model with Javascript callback mechanism.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/event-loop.png&#34; alt=&#34;Node Architecture&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Single Threaded Event Loop Model Processing Steps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clients Send request to Web Server.&lt;/li&gt; &#xA; &lt;li&gt;Node.js Web Server internally maintains a Limited Thread pool to provide services to the Client Requests.&lt;/li&gt; &#xA; &lt;li&gt;Node.js Web Server receives those requests and places them into a Queue. It is known as &lt;strong&gt;Event Queue&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Node.js Web Server internally has a Component, known as &lt;strong&gt;Event Loop&lt;/strong&gt;. Why it got this name is that it uses indefinite loop to receive requests and process them.&lt;/li&gt; &#xA; &lt;li&gt;Event Loop uses Single Thread only. It is main heart of Node.js Platform Processing Model.&lt;/li&gt; &#xA; &lt;li&gt;Event Loop checks any Client Request is placed in Event Queue. If no, then wait for incoming requests for indefinitely.&lt;/li&gt; &#xA; &lt;li&gt;If yes, then pick up one Client Request from Event Queue &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Starts process that Client Request&lt;/li&gt; &#xA;   &lt;li&gt;If that Client Request Does Not requires any Blocking IO Operations, then process everything, prepare response and send it back to client.&lt;/li&gt; &#xA;   &lt;li&gt;If that Client Request requires some Blocking IO Operations like interacting with Database, File System, External Services then it will follow different approach &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Checks Threads availability from Internal Thread Pool&lt;/li&gt; &#xA;     &lt;li&gt;Picks up one Thread and assign this Client Request to that thread.&lt;/li&gt; &#xA;     &lt;li&gt;That Thread is responsible for taking that request, process it, perform Blocking IO operations, prepare response and send it back to the Event Loop&lt;/li&gt; &#xA;     &lt;li&gt;Event Loop in turn, sends that Response to the respective Client.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the core modules of Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js has a set of core modules that are part of the platform and come with the Node.js installation. These modules can be loaded into the program by using the require function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const module = require(&#39;module_name&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const http = require(&#39;http&#39;);&#xA;&#xA;http.createServer(function (req, res) {&#xA;  res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});&#xA;  res.write(&#39;Welcome to Node.js!&#39;);&#xA;  res.end();&#xA;}).listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following table lists some of the important core modules in Node.js.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Assert&lt;/td&gt; &#xA;   &lt;td&gt;It is used by Node.js for testing itself. It can be accessed with require(&#39;assert&#39;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Buffer&lt;/td&gt; &#xA;   &lt;td&gt;It is used to perform operations on raw bytes of data which reside in memory. It can be accessed with require(&#39;buffer&#39;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Child Process&lt;/td&gt; &#xA;   &lt;td&gt;It is used by node.js for managing child processes. It can be accessed with require(&#39;child_process&#39;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cluster&lt;/td&gt; &#xA;   &lt;td&gt;This module is used by Node.js to take advantage of multi-core systems, so that it can handle more load. It can be accessed with require(&#39;cluster&#39;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Console&lt;/td&gt; &#xA;   &lt;td&gt;It is used to write data to console. Node.js has a Console object which contains functions to write data to console. It can be accessed with require(&#39;console&#39;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Crypto&lt;/td&gt; &#xA;   &lt;td&gt;It is used to support cryptography for encryption and decryption. It can be accessed with require(&#39;crypto&#39;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HTTP&lt;/td&gt; &#xA;   &lt;td&gt;It includes classes, methods and events to create Node.js http server.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;URL&lt;/td&gt; &#xA;   &lt;td&gt;It includes methods for URL resolution and parsing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Query String&lt;/td&gt; &#xA;   &lt;td&gt;It includes methods to deal with query string.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Path&lt;/td&gt; &#xA;   &lt;td&gt;It includes methods to deal with file paths.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;File System&lt;/td&gt; &#xA;   &lt;td&gt;It includes classes, methods, and events to work with file I/O.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Util&lt;/td&gt; &#xA;   &lt;td&gt;It includes utility functions useful for programmers.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Zlib&lt;/td&gt; &#xA;   &lt;td&gt;It is used to compress and decompress data. It can be accessed with require(&#39;zlib&#39;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What do you understand by Reactor Pattern in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reactor Pattern&lt;/strong&gt; is used to avoid the blocking of the Input/Output operations. It provides us with a handler that is associated with I/O operations. When the I/O requests are to be generated, they get submitted to a demultiplexer, which handles concurrency in avoiding the blocking of the I/O mode and collects the requests in form of an event and queues those events.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There are two ways in which I/O operations are performed:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Blocking I/O:&lt;/strong&gt; Application will make a function call and pause its execution at a point until the data is received. It is called as &#34;Synchronous&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Non-Blocking I/O:&lt;/strong&gt; Application will make a function call, and, without waiting for the results it continues its execution. It is called as &#34;Asynchronous&#34;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/reactor-pattern.jpg&#34; alt=&#34;Reactor Pattern&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reactor Pattern comprises of:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Resources:&lt;/strong&gt; They are shared by multiple applications for I/O operations, generally slower in executions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Synchronous Event De-multiplexer/Event Notifier:&lt;/strong&gt; This uses Event Loop for blocking on all resources. When a set of I/O operations completes, the Event De-multiplexer pushes the new events into the Event Queue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Event Loop and Event Queue:&lt;/strong&gt; Event Queue queues up the new events that occurred along with its event-handler, pair.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Request Handler/Application:&lt;/strong&gt; This is, generally, the application that provides the handler to be executed for registered events on resources.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the global objects of Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js Global Objects are the objects that are available in all modules. Global Objects are built-in objects that are part of the JavaScript and can be used directly in the application without importing any particular module.&lt;/p&gt; &#xA;&lt;p&gt;These objects are modules, functions, strings and object itself as explained below.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. global:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a global namespace. Defining a variable within this namespace makes it globally accessible.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var myvar;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. process:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is an inbuilt global object that is an instance of EventEmitter used to get information on current process. It can also be accessed using require() explicitly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. console:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is an inbuilt global object used to print to stdout and stderr.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#34;Hello World&#34;); // Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. setTimeout(), clearTimeout(), setInterval(), clearInterval():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The built-in timer functions are globals&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function printHello() {&#xA;   console.log( &#34;Hello, World!&#34;);&#xA;}&#xA;&#xA;// Now call above function after 2 seconds&#xA;var timeoutObj = setTimeout(printHello, 2000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. __dirname:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is a string. It specifies the name of the directory that currently contains the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(__dirname);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. __filename:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It specifies the filename of the code being executed. This is the resolved absolute path of this code file. The value inside a module is the path to that module file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(__filename);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is chrome v8 engine?&lt;/h2&gt; &#xA;&lt;p&gt;V8 is a C++ based open-source JavaScript engine developed by Google. It was originally designed for Google Chrome and Chromium-based browsers ( such as Brave ) in 2008, but it was later utilized to create Node.js for server-side coding.&lt;/p&gt; &#xA;&lt;p&gt;V8 is the JavaScript engine i.e. it parses and executes JavaScript code. The DOM, and the other Web Platform APIs ( they all makeup runtime environment ) are provided by the browser.&lt;/p&gt; &#xA;&lt;p&gt;V8 is known to be a JavaScript engine because it takes JavaScript code and executes it while browsing in Chrome. It provides a runtime environment for the execution of JavaScript code. The best part is that the JavaScript engine is completely independent of the browser in which it runs.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why is LIBUV needed in Node JS?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;libuv&lt;/strong&gt; is a C library originally written for Node.js to abstract non-blocking I/O operations. It provides the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It allows the CPU and other resources to be used simultaneously while still performing I/O operations, thereby resulting in efficient use of resources and network.&lt;/li&gt; &#xA; &lt;li&gt;It facilitates an event-driven approach wherein I/O and other activities are performed using callback-based notifications.&lt;/li&gt; &#xA; &lt;li&gt;It provides mechanisms to handle file system, DNS, network, child processes, pipes, signal handling, polling and streaming&lt;/li&gt; &#xA; &lt;li&gt;It also includes a thread pool for offloading work for some things that can&#39;t be done asynchronously at the operating system level.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How V8 compiles JavaScript code?&lt;/h2&gt; &#xA;&lt;p&gt;Compilation is the process of converting human-readable code to machine code. There are two ways to compile the code&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Using an Interpreter&lt;/strong&gt;: The interpreter scans the code line by line and converts it into byte code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Using a Compiler&lt;/strong&gt;: The Compiler scans the entire document and compiles it into highly optimized byte code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The V8 engine uses both a compiler and an interpreter and follows &lt;strong&gt;just-in-time (JIT)&lt;/strong&gt; compilation to speed up the execution. JIT compiling works by compiling small portions of code that are just about to be executed. This prevents long compilation time and the code being compiles is only that which is highly likely to run.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 5. NODE.JS EVENTS&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is EventEmitter in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The EventEmitter is a class that facilitates communication/interaction between objects in Node.js. The EventEmitter class can be used to create and handle custom events.&lt;/p&gt; &#xA;&lt;p&gt;EventEmitter is at the core of Node asynchronous event-driven architecture. Many of Node&#39;s built-in modules inherit from EventEmitter including prominent frameworks like Express.js. An emitter object basically has two main features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emitting name events.&lt;/li&gt; &#xA; &lt;li&gt;Registering and unregistering listener functions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Events with Parameters&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;function listener(code, msg) {&#xA;   console.log(`status ${code} and ${msg}`);&#xA;}&#xA;&#xA;eventEmitter.on(&#39;status&#39;, listener); // Register listener&#xA;eventEmitter.emit(&#39;status&#39;, 200, &#39;ok&#39;);&#xA;&#xA;// Output&#xA;status 200 and ok&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How does the EventEmitter works in Node.js?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Event Emitter emits the data in an event called message&lt;/li&gt; &#xA; &lt;li&gt;A Listened is registered on the event message&lt;/li&gt; &#xA; &lt;li&gt;when the message event emits some data, the listener will get the data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/eventEmitter_works.png&#34; alt=&#34;EventEmitter&#34; width=&#34;400px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Building Blocks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;.emit()&lt;/strong&gt; - this method in event emitter is to emit an event in module&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.on()&lt;/strong&gt; - this method is to listen to data on a registered event in node.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.once()&lt;/strong&gt; - it listen to data on a registered event only once.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.addListener()&lt;/strong&gt; - it checks if the listener is registered for an event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.removeListener()&lt;/strong&gt; - it removes the listener for an event.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/eventemiitter.png&#34; alt=&#34;Building Blocks&#34; width=&#34;400px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 01:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callbacks Events&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;function listenerOne() {&#xA;   console.log(&#39;First Listener Executed&#39;);&#xA;}&#xA;&#xA;function listenerTwo() {&#xA;   console.log(&#39;Second Listener Executed&#39;);&#xA;}&#xA;&#xA;eventEmitter.on(&#39;listenerOne&#39;, listenerOne); // Register for listenerOne&#xA;eventEmitter.on(&#39;listenerOne&#39;, listenerTwo); // Register for listenerOne&#xA;&#xA;// When the event &#34;listenerOne&#34; is emitted, both the above callbacks should be invoked.&#xA;eventEmitter.emit(&#39;listenerOne&#39;);&#xA;&#xA;// Output&#xA;First Listener Executed&#xA;Second Listener Executed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 02:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Emit Events Once&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;function listenerOnce() {&#xA;   console.log(&#39;listenerOnce fired once&#39;);&#xA;}&#xA;&#xA;eventEmitter.once(&#39;listenerOne&#39;, listenerOnce); // Register listenerOnce&#xA;eventEmitter.emit(&#39;listenerOne&#39;);&#xA;&#xA;// Output&#xA;listenerOnce fired once&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the EventEmitter methods available in Node.js?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;EventEmitter Methods&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.addListener(event, listener)&lt;/td&gt; &#xA;   &lt;td&gt;Adds a listener to the end of the listeners array for the specified event.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.on(event, listener)&lt;/td&gt; &#xA;   &lt;td&gt;Adds a listener to the end of the listeners array for the specified event. It can also be called as an alias of emitter.addListener()&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.once(event, listener)&lt;/td&gt; &#xA;   &lt;td&gt;This listener is invoked only the next time the event is fired, after which it is removed.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.removeListener(event, listener)&lt;/td&gt; &#xA;   &lt;td&gt;Removes a listener from the listener array for the specified event.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.removeAllListeners([event])&lt;/td&gt; &#xA;   &lt;td&gt;Removes all listeners, or those of the specified event.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.setMaxListeners(n)&lt;/td&gt; &#xA;   &lt;td&gt;By default EventEmitters will print a warning if more than 10 listeners are added for a particular event.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.getMaxListeners()&lt;/td&gt; &#xA;   &lt;td&gt;Returns the current maximum listener value for the emitter which is either set by emitter.setMaxListeners(n) or defaults to EventEmitter.defaultMaxListeners.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.listeners(event)&lt;/td&gt; &#xA;   &lt;td&gt;Returns a copy of the array of listeners for the specified event.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.emit(event[, arg1][, arg2][, ...])&lt;/td&gt; &#xA;   &lt;td&gt;Raise the specified events with the supplied arguments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.listenerCount(type)&lt;/td&gt; &#xA;   &lt;td&gt;Returns the number of listeners listening to the type of event.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How the Event Loop Works in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;event loop&lt;/strong&gt; allows Node.js to perform non-blocking I/O operations despite the fact that JavaScript is single-threaded. It is done by offloading operations to the system kernel whenever possible.&lt;/p&gt; &#xA;&lt;p&gt;Node.js is a single-threaded application, but it can support &lt;strong&gt;concurrency&lt;/strong&gt; via the concept of &lt;strong&gt;event&lt;/strong&gt; and &lt;strong&gt;callbacks&lt;/strong&gt;. Every API of Node.js is asynchronous and being single-threaded, they use &lt;strong&gt;async function calls&lt;/strong&gt; to maintain concurrency. Node uses observer pattern. Node thread keeps an event loop and whenever a task gets completed, it fires the corresponding event which signals the event-listener function to execute.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features of Event Loop:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Event loop is an endless loop, which waits for tasks, executes them and then sleeps until it receives more tasks.&lt;/li&gt; &#xA; &lt;li&gt;The event loop executes tasks from the event queue only when the call stack is empty i.e. there is no ongoing task.&lt;/li&gt; &#xA; &lt;li&gt;The event loop allows us to use callbacks and promises.&lt;/li&gt; &#xA; &lt;li&gt;The event loop executes the tasks starting from the oldest first.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/nodejs-event-loop.png&#34; alt=&#34;Event Loop&#34; width=&#34;600px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Event loop in Node.js&#xA; */&#xA;const events = require(&#39;events&#39;);&#xA;const eventEmitter = new events.EventEmitter();&#xA;&#xA;// Create an event handler as follows&#xA;const connectHandler = function connected() {&#xA;   console.log(&#39;connection succesful.&#39;);&#xA;   eventEmitter.emit(&#39;data_received&#39;);&#xA;}&#xA;&#xA;// Bind the connection event with the handler&#xA;eventEmitter.on(&#39;connection&#39;, connectHandler);&#xA; &#xA;// Bind the data_received event with the anonymous function&#xA;eventEmitter.on(&#39;data_received&#39;, function() {&#xA;   console.log(&#39;data received succesfully.&#39;);&#xA;});&#xA;&#xA;// Fire the connection event &#xA;eventEmitter.emit(&#39;connection&#39;);&#xA;console.log(&#34;Program Ended.&#34;);&#xA;&#xA;// Output&#xA;Connection succesful.&#xA;Data received succesfully.&#xA;Program Ended.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How are event listeners created in Node.JS?&lt;/h2&gt; &#xA;&lt;p&gt;An array containing all eventListeners is maintained by Node. Each time &lt;strong&gt;.on()&lt;/strong&gt; function is executed, a new event listener is added to that array. When the concerned event is emitted, each &lt;strong&gt;eventListener&lt;/strong&gt; that is present in the array is called in a sequential or synchronous manner.&lt;/p&gt; &#xA;&lt;p&gt;The event listeners are called in a synchronous manner to avoid logical errors, race conditions etc. The total number of listeners that can be registered for a particular event, is controlled by &lt;strong&gt;.setMaxListeners(n)&lt;/strong&gt;. The default number of listeners is 10.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;emitter.setMaxlisteners(12);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an event Listener once registered, exists throughout the life cycle of the program. It is important to detach an event Listener once its no longer needed to avoid memory leaks. Functions like &lt;strong&gt;.removeListener()&lt;/strong&gt;, &lt;strong&gt;.removeAllListeners()&lt;/strong&gt; enable the removal of listeners from the listeners Array.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the difference between process.nextTick() and setImmediate()?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. process.nextTick():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The process.nextTick() method adds the callback function to the start of the next event queue. It is to be noted that, at the start of the program process.nextTick() method is called for the first time before the event loop is processed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. setImmediate():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The setImmediate() method is used to execute a function right after the current event loop finishes. It is callback function is placed in the check phase of the next event queue.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * setImmediate() and process.nextTick()&#xA; */&#xA;setImmediate(() =&amp;gt; {&#xA;  console.log(&#34;1st Immediate&#34;);&#xA;});&#xA;&#xA;setImmediate(() =&amp;gt; {&#xA;  console.log(&#34;2nd Immediate&#34;);&#xA;});&#xA;&#xA;process.nextTick(() =&amp;gt; {&#xA;  console.log(&#34;1st Process&#34;);&#xA;});&#xA;&#xA;process.nextTick(() =&amp;gt; {&#xA;  console.log(&#34;2nd Process&#34;);&#xA;});&#xA;&#xA;// First event queue ends here&#xA;console.log(&#34;Program Started&#34;);&#xA;&#xA;// Output&#xA;Program Started&#xA;1st Process&#xA;2nd Process&#xA;1st Immediate&#xA;2nd Immediate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is callback function in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A callback is a function which is called when a task is completed, thus helps in preventing any kind of blocking and a callback function allows other code to run in the meantime.&lt;/p&gt; &#xA;&lt;p&gt;Callback is called when task get completed and is asynchronous equivalent for a function. Using Callback concept, Node.js can process a large number of requests without waiting for any function to return the result which makes Node.js highly scalable.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Function&#xA; */&#xA;function message(name, callback) {&#xA;  console.log(&#34;Hi&#34; + &#34; &#34; + name);&#xA;  callback();&#xA;}&#xA;&#xA;// Callback function&#xA;function callMe() {&#xA;  console.log(&#34;I am callback function&#34;);&#xA;}&#xA;&#xA;// Passing function as an argument&#xA;message(&#34;Node.JS&#34;, callMe);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Hi Node.JS&#xA;I am callback function&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the difference between Events and Callbacks?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Events:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js &lt;strong&gt;events&lt;/strong&gt; module which emits named events that can cause corresponding functions or callbacks to be called. Functions ( callbacks ) listen or subscribe to a particular event to occur and when that event triggers, all the callbacks subscribed to that event are fired one by one in order to which they were registered.&lt;/p&gt; &#xA;&lt;p&gt;All objects that emit events are instances of the &lt;strong&gt;EventEmitter&lt;/strong&gt; class. The event can be emitted or listen to an event with the help of EventEmitter&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Events Module&#xA; */&#xA;const event = require(&#39;events&#39;);  &#xA;const eventEmitter = new event.EventEmitter();  &#xA;  &#xA;// add listener function for Sum event  &#xA;eventEmitter.on(&#39;Sum&#39;, function(num1, num2) {  &#xA;    console.log(&#39;Total: &#39; + (num1 + num2));  &#xA;});  &#xA;&#xA;// call event  &#xA;eventEmitter.emit(&#39;Sum&#39;, 10, 20);&#xA;&#xA;// Output&#xA;Total: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Callbacks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A callback function is a function passed into another function as an argument, which is then invoked inside the outer function to complete some kind of routine or action.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callbacks&#xA; */&#xA;function sum(number) {&#xA;  console.log(&#39;Total: &#39; + number);&#xA;}&#xA;&#xA;function calculator(num1, num2, callback) {&#xA;  let total = num1 + num2;&#xA;  callback(total);&#xA;}&#xA;&#xA;calculator(10, 20, sum);&#xA;&#xA;// Output&#xA;Total: 30&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Callback functions are called when an asynchronous function returns its result, whereas event handling works on the &lt;strong&gt;observer pattern&lt;/strong&gt;. The functions that listen to events act as Observers. Whenever an event gets fired, its listener function starts executing. Node.js has multiple in-built events available through events module and EventEmitter class which are used to bind events and event-listeners&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is an error-first callback?&lt;/h2&gt; &#xA;&lt;p&gt;The pattern used across all the asynchronous methods in Node.js is called &lt;em&gt;Error-first Callback&lt;/em&gt;. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fs.readFile( &#34;file.json&#34;, function ( err, data ) {&#xA;  if ( err ) {&#xA;    console.error( err );&#xA;  }&#xA;  console.log( data );&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Any asynchronous method expects one of the arguments to be a callback. The full callback argument list depends on the caller method, but the first argument is always an error object or null. When we go for the asynchronous method, an exception thrown during function execution cannot be detected in a try/catch statement. The event happens after the JavaScript engine leaves the try block.&lt;/p&gt; &#xA;&lt;p&gt;In the preceding example, if any exception is thrown during the reading of the file, it lands on the callback function as the first and mandatory parameter.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is callback hell in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The callback hell contains complex nested callbacks. Here, every callback takes an argument that is a result of the previous callbacks. In this way, the code structure looks like a pyramid, making it difficult to read and maintain. Also, if there is an error in one function, then all other functions get affected.&lt;/p&gt; &#xA;&lt;p&gt;An asynchronous function is one where some external activity must complete before a result can be processed; it is &#34;asynchronous&#34; in the sense that there is an unpredictable amount of time before a result becomes available. Such functions require a callback function to handle errors and process the result.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Hell&#xA; */&#xA;firstFunction(function (a) {&#xA;  secondFunction(a, function (b) {&#xA;    thirdFunction(b, function (c) {&#xA;      // And so on…&#xA;    });&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to avoid callback hell in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Managing callbacks using Async.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Async&lt;/code&gt; is a really powerful npm module for managing asynchronous nature of JavaScript. Along with Node.js, it also works for JavaScript written for browsers.&lt;/p&gt; &#xA;&lt;p&gt;Async provides lots of powerful utilities to work with asynchronous processes under different scenarios.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install --save async&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Managing callbacks hell using promises:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Promises are alternative to callbacks while dealing with asynchronous code. Promises return the value of the result or an error exception. The core of the promises is the &lt;code&gt;.then()&lt;/code&gt; function, which waits for the promise object to be returned.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;.then()&lt;/code&gt; function takes two optional functions as arguments and depending on the state of the promise only one will ever be called. The first function is called when the promise if fulfilled (A successful result). The second function is called when the promise is rejected.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Promises&#xA; */&#xA;const myPromise = new Promise((resolve, reject) =&amp;gt; {&#xA;  setTimeout(() =&amp;gt; {&#xA;    resolve(&#34;Successful!&#34;);&#xA;  }, 300);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Using Async Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Async await makes asynchronous code look like it&#39;s synchronous. This has only been possible because of the reintroduction of promises into node.js. Async-Await only works with functions that return a promise.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Async Await&#xA; */&#xA;const getrandomnumber = function(){&#xA;    return new Promise((resolve, reject)=&amp;gt;{&#xA;        setTimeout(() =&amp;gt; {&#xA;            resolve(Math.floor(Math.random() * 20));&#xA;        }, 1000);&#xA;    });&#xA;}&#xA;&#xA;const addRandomNumber = async function(){&#xA;    const sum = await getrandomnumber() + await getrandomnumber();&#xA;    console.log(sum);&#xA;}&#xA;&#xA;addRandomNumber();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is typically the first argument passed to a callback handler?&lt;/h2&gt; &#xA;&lt;p&gt;The first parameter of the callback is the &lt;strong&gt;error&lt;/strong&gt; value. If the function hits an error, then they typically call the &lt;strong&gt;callback&lt;/strong&gt; with the first parameter being an Error object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Callback Handler&#xA; */&#xA;const Division = (numerator, denominator, callback) =&amp;gt; {&#xA;    if (denominator === 0) {&#xA;      callback(new Error(&#39;Divide by zero error!&#39;));&#xA;    } else {&#xA;      callback(null, numerator / denominator);&#xA;    }&#xA;};&#xA;&#xA;// Function Call&#xA;Division(5, 0, (err, result) =&amp;gt; {&#xA;  if (err) {&#xA;    return console.log(err.message);&#xA;  }&#xA;  console.log(`Result: ${result}`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the timing features of Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The Timers module in Node.js contains functions that execute code after a set period of time. Timers do not need to be imported via require(), since all the methods are available globally to emulate the browser JavaScript API.&lt;/p&gt; &#xA;&lt;p&gt;Some of the functions provided in this module are&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. setTimeout():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This function schedules code execution after the assigned amount of time ( in milliseconds ). Only after the timeout has occurred, the code will be executed. This method returns an ID that can be used in &lt;strong&gt;clearTimeout()&lt;/strong&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setTimeout(callback, delay, args )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function printMessage(arg) {&#xA;  console.log(`${arg}`);&#xA;}&#xA;&#xA;setTimeout(printMessage, 1000, &#39;Display this Message after 1 seconds!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. setImmediate():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The setImmediate() method executes the code at the end of the current event loop cycle. The function passed in the setImmediate() argument is a function that will be executed in the next iteration of the event loop.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setImmediate(callback, args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Setting timeout for the function&#xA;setTimeout(function () {&#xA;    console.log(&#39;setTimeout() function running...&#39;);&#xA;}, 500);&#xA;&#xA;// Running this function immediately before any other&#xA;setImmediate(function () {&#xA;   console.log(&#39;setImmediate() function running...&#39;);&#xA;});&#xA;&#xA;// Directly printing the statement&#xA;console.log(&#39;Normal statement in the event loop&#39;);&#xA;&#xA;// Output&#xA;// Normal statement in the event loop&#xA;// setImmediate() function running...&#xA;// setTimeout() function running...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. setInterval():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The setInterval() method executes the code after the specified interval. The function is executed multiple times after the interval has passed. The function will keep on calling until the process is stopped externally or using code after specified time period. The clearInterval() method can be used to prevent the function from running.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setInterval(callback, delay, args)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;setInterval(function() {&#xA;    console.log(&#39;Display this Message intervals of 1 seconds!&#39;);&#xA;}, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to implement a sleep function in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;One way to delay execution of a function in Node.js is to use async/await with promises to delay execution without callbacks function. Just put the code you want to delay in the callback. For example, below is how you can wait 1 second before executing some code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function delay(time) {&#xA;  return new Promise((resolve) =&amp;gt; setTimeout(resolve, time));&#xA;}&#xA;&#xA;async function run() {&#xA;  await delay(1000);&#xA;  console.log(&#34;This printed after about 1 second&#34;);&#xA;}&#xA;&#xA;run();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 6. NODE.JS FILE SYSTEM&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How Node.js read the content of a file?&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;normal&#34; way in Node.js is probably to read in the content of a file in a non-blocking, asynchronous way. That is, to tell Node to read in the file, and then to get a callback when the file-reading has been finished. That would allow us to handle several requests in parallel.&lt;/p&gt; &#xA;&lt;p&gt;Common use for the File System module:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Read files&lt;/li&gt; &#xA; &lt;li&gt;Create files&lt;/li&gt; &#xA; &lt;li&gt;Update files&lt;/li&gt; &#xA; &lt;li&gt;Delete files&lt;/li&gt; &#xA; &lt;li&gt;Rename files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Read Files&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- index.html --&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;  &amp;lt;h1&amp;gt;File Header&amp;lt;/h1&amp;gt;&#xA;  &amp;lt;p&amp;gt;File Paragraph.&amp;lt;/p&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * read_file.js&#xA; */&#xA;const http = require(&#39;http&#39;);&#xA;const fs = require(&#39;fs&#39;);&#xA;&#xA;http.createServer(function (req, res) {&#xA;  fs.readFile(&#39;index.html&#39;, function(err, data) {&#xA;    res.writeHead(200, {&#39;Content-Type&#39;: &#39;text/html&#39;});&#xA;    res.write(data);&#xA;    res.end();&#xA;  });&#xA;}).listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 7. NODE.JS STREAMS&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How many types of streams are present in node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Streams are objects that let you read data from a source or write data to a destination in continuous fashion. There are four types of streams&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Readable&lt;/strong&gt; − Stream which is used for read operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Writable&lt;/strong&gt; − Stream which is used for write operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Duplex&lt;/strong&gt; − Stream which can be used for both read and write operation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Transform&lt;/strong&gt; − A type of duplex stream where the output is computed based on input.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Each type of Stream is an EventEmitter instance and throws several events at different instance of times.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt; − This event is fired when there is data is available to read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;end&lt;/strong&gt; − This event is fired when there is no more data to read.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;error&lt;/strong&gt; − This event is fired when there is any error receiving or writing data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;finish&lt;/strong&gt; − This event is fired when all the data has been flushed to underlying system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Reading from a Stream:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;let data = &#34;&#34;;&#xA;&#xA;// Create a readable stream&#xA;const readerStream = fs.createReadStream(&#34;file.txt&#34;);&#xA;&#xA;// Set the encoding to be utf8.&#xA;readerStream.setEncoding(&#34;UTF8&#34;);&#xA;&#xA;// Handle stream events --&amp;gt; data, end, and error&#xA;readerStream.on(&#34;data&#34;, function (chunk) {&#xA;  data += chunk;&#xA;});&#xA;&#xA;readerStream.on(&#34;end&#34;, function () {&#xA;  console.log(data);&#xA;});&#xA;&#xA;readerStream.on(&#34;error&#34;, function (err) {&#xA;  console.log(err.stack);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Writing to a Stream:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;const data = &#34;File writing to a stream example&#34;;&#xA;&#xA;// Create a writable stream&#xA;const writerStream = fs.createWriteStream(&#34;file.txt&#34;);&#xA;&#xA;// Write the data to stream with encoding to be utf8&#xA;writerStream.write(data, &#34;UTF8&#34;);&#xA;&#xA;// Mark the end of file&#xA;writerStream.end();&#xA;&#xA;// Handle stream events --&amp;gt; finish, and error&#xA;writerStream.on(&#34;finish&#34;, function () {&#xA;  console.log(&#34;Write completed.&#34;);&#xA;});&#xA;&#xA;writerStream.on(&#34;error&#34;, function (err) {&#xA;  console.log(err.stack);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Piping the Streams:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Piping is a mechanism where we provide the output of one stream as the input to another stream. It is normally used to get data from one stream and to pass the output of that stream to another stream. There is no limit on piping operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;&#xA;// Create a readable stream&#xA;const readerStream = fs.createReadStream(&#39;input.txt&#39;);&#xA;&#xA;// Create a writable stream&#xA;const writerStream = fs.createWriteStream(&#39;output.txt&#39;);&#xA;&#xA;// Pipe the read and write operations&#xA;// read input.txt and write data to output.txt&#xA;readerStream.pipe(writerStream);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Chaining the Streams:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chaining is a mechanism to connect the output of one stream to another stream and create a chain of multiple stream operations. It is normally used with piping operations.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#34;fs&#34;);&#xA;const zlib = require(&#39;zlib&#39;);&#xA;&#xA;// Compress the file input.txt to input.txt.gz&#xA;fs.createReadStream(&#39;input.txt&#39;)&#xA;   .pipe(zlib.createGzip())&#xA;   .pipe(fs.createWriteStream(&#39;input.txt.gz&#39;));&#xA;  &#xA;console.log(&#34;File Compressed.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to handle large data in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The Node.js stream feature makes it possible to process large data continuously in smaller chunks without keeping it all in memory. One benefit of using streams is that it saves time, since you don&#39;t have to wait for all the data to load before you start processing. This also makes the process less memory-intensive.&lt;/p&gt; &#xA;&lt;p&gt;Some of the use cases of Node.js streams include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Reading a file that&#39;s larger than the free memory space, because it&#39;s broken into smaller chunks and processed by streams. For example, a browser processes videos from streaming platforms like Netflix in small chunks, making it possible to watch videos immediately without having to download them all at once.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reading large log files and writing selected parts directly to another file without downloading the source file. For example, you can go through traffic records spanning multiple years to extract the busiest day in a given year and save that data to a new file.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 8. NODE.JS MULTITHREADING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. Is Node.js entirely based on a single-thread?&lt;/h2&gt; &#xA;&lt;p&gt;Yes, it is true that Node.js processes all requests on a single thread. But it is just a part of the theory behind Node.js design. In fact, more than the single thread mechanism, it makes use of events and callbacks to handle a large no. of requests asynchronously.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, Node.js has an optimized design which utilizes both JavaScript and C++ to guarantee maximum performance. JavaScript executes at the server-side by Google Chrome v8 engine. And the C++ lib UV library takes care of the non-sequential I/O via background workers.&lt;/p&gt; &#xA;&lt;p&gt;To explain it practically, let&#39;s assume there are 100s of requests lined up in Node.js queue. As per design, the main thread of Node.js event loop will receive all of them and forwards to background workers for execution. Once the workers finish processing requests, the registered callbacks get notified on event loop thread to pass the result back to the user.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How does Node.js handle child threads?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is a single threaded language which in background uses multiple threads to execute asynchronous code. Node.js is non-blocking which means that all functions ( callbacks ) are delegated to the event loop and they are ( or can be ) executed by different threads. That is handled by Node.js run-time.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nodejs Primary application runs in an event loop, which is in a single thread.&lt;/li&gt; &#xA; &lt;li&gt;Background I/O is running in a thread pool that is only accessible to C/C++ or other compiled/native modules and mostly transparent to the JS.&lt;/li&gt; &#xA; &lt;li&gt;Node v11/12 now has experimental worker_threads, which is another option.&lt;/li&gt; &#xA; &lt;li&gt;Node.js does support forking multiple processes ( which are executed on different cores ).&lt;/li&gt; &#xA; &lt;li&gt;It is important to know that state is not shared between master and forked process.&lt;/li&gt; &#xA; &lt;li&gt;We can pass messages to forked process ( which is different script ) and to master process from forked process with function send.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How does Node.js support multi-processor platforms, and does it fully utilize all processor resources?&lt;/h2&gt; &#xA;&lt;p&gt;Since Node.js is by default a single thread application, it will run on a single processor core and will not take full advantage of multiple core resources. However, Node.js provides support for deployment on multiple-core systems, to take greater advantage of the hardware. The Cluster module is one of the core Node.js modules and it allows running multiple Node.js worker processes that will share the same port.&lt;/p&gt; &#xA;&lt;p&gt;The cluster module helps to spawn new processes on the operating system. Each process works independently, so you cannot use shared state between child processes. Each process communicates with the main process by IPC and pass server handles back and forth.&lt;/p&gt; &#xA;&lt;p&gt;Cluster supports two types of load distribution:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The main process listens on a port, accepts new connection and assigns it to a child process in a round robin fashion.&lt;/li&gt; &#xA; &lt;li&gt;The main process assigns the port to a child process and child process itself listen the port.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How does the cluster module work in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The cluster module provides a way of creating child processes that runs simultaneously and share the same server port.&lt;/p&gt; &#xA;&lt;p&gt;Node.js runs single threaded programming, which is very memory efficient, but to take advantage of computers multi-core systems, the Cluster module allows you to easily create child processes that each runs on their own single thread, to handle the load.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/nodejs_cluster.png&#34; alt=&#34;Load Balancer&#34; width=&#34;400px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Cluster Module&#xA; */&#xA;const cluster = require(&#34;cluster&#34;);&#xA;&#xA;if (cluster.isMaster) {&#xA;  console.log(`Master process is running...`);&#xA;  cluster.fork();&#xA;  cluster.fork();&#xA;} else {&#xA;  console.log(`Worker process started running`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Master process is running...&#xA;Worker process started running&#xA;Worker process started running&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain cluster methods supported by Node.js?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fork()&lt;/td&gt; &#xA;   &lt;td&gt;Creates a new worker, from a master&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isMaster&lt;/td&gt; &#xA;   &lt;td&gt;Returns true if the current process is master, otherwise false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isWorker&lt;/td&gt; &#xA;   &lt;td&gt;Returns true if the current process is worker, otherwise false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;id&lt;/td&gt; &#xA;   &lt;td&gt;A unique id for a worker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;process&lt;/td&gt; &#xA;   &lt;td&gt;Returns the global Child Process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;send()&lt;/td&gt; &#xA;   &lt;td&gt;sends a message to a master or a worker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kill()&lt;/td&gt; &#xA;   &lt;td&gt;Kills the current worker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isDead&lt;/td&gt; &#xA;   &lt;td&gt;Returns true if the worker&#39;s process is dead, otherwise false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;settings&lt;/td&gt; &#xA;   &lt;td&gt;Returns an object containing the cluster&#39;s settings&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;worker&lt;/td&gt; &#xA;   &lt;td&gt;Returns the current worker object&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;workers&lt;/td&gt; &#xA;   &lt;td&gt;Returns all workers of a master&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;exitedAfterDisconnect&lt;/td&gt; &#xA;   &lt;td&gt;Returns true if a worker was exited after disconnect, or the kill method&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isConnected&lt;/td&gt; &#xA;   &lt;td&gt;Returns true if the worker is connected to its master, otherwise false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;disconnect()&lt;/td&gt; &#xA;   &lt;td&gt;Disconnects all workers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to make use of all CPUs in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A single instance of Node.js runs in a single thread. To take advantage of multi-core systems, the user will sometimes want to launch a &lt;strong&gt;cluster&lt;/strong&gt; of Node.js processes to handle the load. The cluster module allows easy creation of child processes that all share server ports.&lt;/p&gt; &#xA;&lt;p&gt;The cluster module supports two methods of distributing incoming connections.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The first one (and the default one on all platforms except Windows), is the round-robin approach, where the master process listens on a port, accepts new connections and distributes them across the workers in a round-robin fashion, with some built-in smarts to avoid overloading a worker process.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The second approach is where the master process creates the listen socket and sends it to interested workers. The workers then accept incoming connections directly.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Server Load Balancing in Node.js&#xA; */&#xA;const cluster = require(&#34;cluster&#34;);&#xA;const express = require(&#34;express&#34;);&#xA;const os = require(&#34;os&#34;);&#xA;&#xA;if (cluster.isMaster) {&#xA;  console.log(`Master PID ${process.pid} is running`);&#xA;&#xA;  // Get the number of available cpu cores&#xA;  const nCPUs = os.cpus().length;&#xA;  // Fork worker processes for each available CPU core&#xA;  for (let i = 0; i &amp;lt; nCPUs; i++) {&#xA;    cluster.fork();&#xA;  }&#xA;&#xA;  cluster.on(&#34;exit&#34;, (worker, code, signal) =&amp;gt; {&#xA;    console.log(`Worker PID ${worker.process.pid} died`);&#xA;  });&#xA;} else {&#xA;  // Workers can share any TCP connection&#xA;  // In this case it is an Express server&#xA;  const app = express();&#xA;  app.get(&#34;/&#34;, (req, res) =&amp;gt; {&#xA;    res.send(&#34;Node is Running...&#34;);&#xA;  });&#xA;&#xA;  app.listen(3000, () =&amp;gt; {&#xA;    console.log(`App listening at http://localhost:3000/`);&#xA;  });&#xA;&#xA;  console.log(`Worker PID ${process.pid} started`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running Node.js will now share port 3000 between the workers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Master PID 13972 is running&#xA;Worker PID 5680 started&#xA;App listening at http://localhost:3000/&#xA;Worker PID 14796 started&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. If Node.js is single threaded then how it handles concurrency?&lt;/h2&gt; &#xA;&lt;p&gt;Node js despite being single-threaded is the asynchronous nature that makes it possible to handle concurrency and perform multiple I/O operations at the same time. Node js uses an event loop to maintain concurrency and perform non-blocking I/O operations.&lt;/p&gt; &#xA;&lt;p&gt;As soon as Node js starts, it initializes an event loop. The event loop works on a queue (which is called an event queue) and performs tasks in FIFO (First In First Out) order. It executes a task only when there is no ongoing task in the call stack. The call stack works in LIFO(Last In First Out) order. The event loop continuously checks the call stack to check if there is any task that needs to be run. Now whenever the event loop finds any function, it adds it to the stack and runs in order.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Concurrency&#xA; */&#xA;function add(a, b) {&#xA;  return a + b;&#xA;}&#xA;&#xA;function print(n) {&#xA;  console.log(`Two times the number ${n} is ` + add(n, n));&#xA;}&#xA;&#xA;print(5);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here, the function &lt;strong&gt;print(5)&lt;/strong&gt; will be invoked and will push into the call stack. When the function is called, it starts consoling the statement inside it but before consoling the whole statement it encounters another function add(n,n) and suspends its current execution, and pushes the add function into the top of the call stack.&lt;/p&gt; &#xA;&lt;p&gt;Now the function will return the addition &lt;strong&gt;a+b&lt;/strong&gt; and then popped out from the stack and now the previously suspended function will start running and will log the output to console and then this function too will get pop from the stack and now the stack is empty. So this is how a call stack works.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to kill child processes that spawn their own child processes in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;If a child process in Node.js spawn their own child processes, kill() method will not kill the child process&#39;s own child processes. For example, if I start a process that starts it&#39;s own child processes via child_process module, killing that child process will not make my program to quit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const spawn = require(&#39;child_process&#39;).spawn;&#xA;const child = spawn(&#39;my-command&#39;);&#xA;&#xA;child.kill();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The program above will not quit if &lt;code&gt;my-command&lt;/code&gt; spins up some more processes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;PID range hack:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can start child processes with {detached: true} option so those processes will not be attached to main process but they will go to a new group of processes. Then using process.kill(-pid) method on main process we can kill all processes that are in the same group of a child process with the same pid group. In my case, I only have one processes in this group.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const spawn = require(&#39;child_process&#39;).spawn;&#xA;const child = spawn(&#39;my-command&#39;, {detached: true});&#xA;&#xA;process.kill(-child.pid);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note - before pid. This converts a pid to a group of pids for process kill() method.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is load balancer and how it works?&lt;/h2&gt; &#xA;&lt;p&gt;A load balancer is a process that takes in HTTP requests and forwards these HTTP requests to one of a collection of servers. Load balancers are usually used for performance purposes: if a server needs to do a lot of work for each request, one server might not be enough, but 2 servers alternating handling incoming requests might.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Using cluster module:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;NodeJS has a built-in module called Cluster Module to take the advantage of a multi-core system. Using this module you can launch NodeJS instances to each core of your system. Master process listening on a port to accept client requests and distribute across the worker using some intelligent fashion. So, using this module you can utilize the working ability of your system.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Using PM2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;PM2 is a production process manager for Node.js applications with a built-in load balancer. It allows you to keep applications alive forever, to reload them without the downtime and to facilitate common system admin tasks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$ pm2 start app.js -i max --name &#34;Balancer&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will run the app.js file on the cluster mode to the total no of core available on your server.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/pm2-load-balancer.png&#34; alt=&#34;Load Balancing using PM2&#34; width=&#34;500px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Using Express module:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The below code basically creates two Express Servers to handle the request&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const body = require(&#39;body-parser&#39;);&#xA;const express = require(&#39;express&#39;);&#xA;&#xA;const app1 = express();&#xA;const app2 = express();&#xA;&#xA;// Parse the request body as JSON&#xA;app1.use(body.json());&#xA;app2.use(body.json());&#xA;&#xA;const handler = serverNum =&amp;gt; (req, res) =&amp;gt; {&#xA;  console.log(`server ${serverNum}`, req.method, req.url, req.body);&#xA;  res.send(`Hello from server ${serverNum}!`);&#xA;};&#xA;&#xA;// Only handle GET and POST requests&#xA;app1.get(&#39;*&#39;, handler(1)).post(&#39;*&#39;, handler(1));&#xA;app2.get(&#39;*&#39;, handler(2)).post(&#39;*&#39;, handler(2));&#xA;&#xA;app1.listen(3000);&#xA;app2.listen(3001);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is difference between &lt;code&gt;spawn()&lt;/code&gt; and &lt;code&gt;fork()&lt;/code&gt; methods in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. spawn():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In Node.js, spawn() launches a new process with the available set of commands. This doesn&#39;t generate a new V8 instance only a single copy of the node module is active on the processor. It is used when we want the child process to return a large amount of data back to the parent process.&lt;/p&gt; &#xA;&lt;p&gt;When spawn is called, it creates a &lt;strong&gt;streaming interface&lt;/strong&gt; between the parent and child process. Streaming Interface — one-time buffering of data in a binary format.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * The spawn() method&#xA; */&#xA;const { spawn } = require(&#34;child_process&#34;);&#xA;const child = spawn(&#34;dir&#34;, [&#34;D:\\empty&#34;], { shell: true });&#xA;&#xA;child.stdout.on(&#34;data&#34;, (data) =&amp;gt; {&#xA;  console.log(`stdout ${data}`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;stdout  Volume in drive D is Windows&#xA; Volume Serial Number is 76EA-3749&#xA;&#xA;stdout&#xA; Directory of D:\&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. fork():&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;fork()&lt;/strong&gt; is a particular case of &lt;strong&gt;spawn()&lt;/strong&gt; which generates a new V8 engines instance. Through this method, multiple workers run on a single node code base for multiple tasks. It is used to separate computation-intensive tasks from the main event loop.&lt;/p&gt; &#xA;&lt;p&gt;When fork is called, it creates a &lt;strong&gt;communication channel&lt;/strong&gt; between the parent and child process Communication Channel — messaging&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * The fork() method&#xA; */&#xA;const { fork } = require(&#34;child_process&#34;);&#xA;&#xA;const forked = fork(&#34;child.js&#34;);&#xA;&#xA;forked.on(&#34;message&#34;, (msg) =&amp;gt; {&#xA;  console.log(&#34;Message from child&#34;, msg);&#xA;});&#xA;&#xA;forked.send({ message: &#34;fork() method&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * child.js&#xA; */&#xA;process.on(&#34;message&#34;, (msg) =&amp;gt; {&#xA;  console.log(&#34;Message from parent:&#34;, msg);&#xA;});&#xA;&#xA;let counter = 0;&#xA;&#xA;setInterval(() =&amp;gt; {&#xA;  process.send({ counter: counter++ });&#xA;}, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Message from parent: { message: &#39;fork() method&#39; }&#xA;Message from child { counter: 0 }&#xA;Message from child { counter: 1 }&#xA;Message from child { counter: 2 }&#xA;...&#xA;...&#xA;Message from child { counter: n }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is daemon process?&lt;/h2&gt; &#xA;&lt;p&gt;A daemon is a program that runs in background and has no controlling terminal. They are often used to provide background services. For example, a web-server or a database server can run as a daemon.&lt;/p&gt; &#xA;&lt;p&gt;When a daemon process is initialized:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It creates a child of itself and proceeds to shut down all standard descriptors (error, input, and output) from this particular copy.&lt;/li&gt; &#xA; &lt;li&gt;It closes the parent process when the user closes the session/terminal window.&lt;/li&gt; &#xA; &lt;li&gt;Leaves the child process running as a daemon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Daemonize Node.js process:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/foreversd/forever&#34;&gt;Forever&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Unitech/pm2&#34;&gt;PM2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remy/nodemon/&#34;&gt;Nodemon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Supervisor/supervisor&#34;&gt;Supervisor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docker&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Using an instance of Forever from Node.js&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const forever = require(&#34;forever&#34;);&#xA;&#xA;const child = new forever.Forever(&#34;your-filename.js&#34;, {&#xA;  max: 3,&#xA;  silent: true,&#xA;  args: [],&#xA;});&#xA;&#xA;child.on(&#34;exit&#34;, this.callback);&#xA;child.start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 9. NODE.JS WEB MODULE&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to use JSON Web Token (JWT) for authentication in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;JSON Web Token (JWT) is an open standard that defines a compact and self-contained way of securely transmitting information between parties as a JSON object. This information can be verified and trusted because it is digitally signed.&lt;/p&gt; &#xA;&lt;p&gt;There are some advantages of using JWT for authorization:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Purely stateless. No additional server or infra required to store session information.&lt;/li&gt; &#xA; &lt;li&gt;It can be easily shared among services.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.sign(payload, secretOrPrivateKey, [options, callback])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Header&lt;/strong&gt; - Consists of two parts: the type of token (i.e., JWT) and the signing algorithm (i.e., HS512)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Payload&lt;/strong&gt; - Contains the claims that provide information about a user who has been authenticated along with other information such as token expiration time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Signature&lt;/strong&gt; - Final part of a token that wraps in the encoded header and payload, along with the algorithm and a secret&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install jsonwebtoken bcryptjs --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * AuthController.js&#xA; */&#xA;const express = require(&#39;express&#39;);&#xA;const router = express.Router();&#xA;const bodyParser = require(&#39;body-parser&#39;);&#xA;const User = require(&#39;../user/User&#39;);&#xA;&#xA;const jwt = require(&#39;jsonwebtoken&#39;);&#xA;const bcrypt = require(&#39;bcryptjs&#39;);&#xA;const config = require(&#39;../config&#39;);&#xA;&#xA;&#xA;router.use(bodyParser.urlencoded({ extended: false }));&#xA;router.use(bodyParser.json());&#xA;&#xA;router.post(&#39;/register&#39;, function(req, res) {&#xA;  &#xA;  let hashedPassword = bcrypt.hashSync(req.body.password, 8);&#xA;  &#xA;  User.create({&#xA;    name : req.body.name,&#xA;    email : req.body.email,&#xA;    password : hashedPassword&#xA;  },&#xA;  function (err, user) {&#xA;    if (err) return res.status(500).send(&#34;There was a problem registering the user.&#34;)&#xA;    // create a token&#xA;    let token = jwt.sign({ id: user._id }, config.secret, {&#xA;      expiresIn: 86400 // expires in 24 hours&#xA;    });&#xA;    res.status(200).send({ auth: true, token: token });&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;config.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * config.js&#xA; */&#xA;module.exports = {&#xA;  &#39;secret&#39;: &#39;supersecret&#39;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;jwt.sign()&lt;/code&gt; method takes a payload and the secret key defined in &lt;code&gt;config.js&lt;/code&gt; as parameters. It creates a unique string of characters representing the payload. In our case, the payload is an object containing only the id of the user.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.npmjs.com/package/jsonwebtoken&#34;&gt;https://www.npmjs.com/package/jsonwebtoken&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to build a microservices architecture with Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Microservices are a style of &lt;strong&gt;Service Oriented Architecture (SOA)&lt;/strong&gt; where the app is structured on an assembly of interconnected services. With microservices, the application architecture is built with lightweight protocols. The services are finely seeded in the architecture. Microservices disintegrate the app into smaller services and enable improved modularity.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/monolithic-and-microservices-architecture.jpg&#34; alt=&#34;Microservices&#34; width=&#34;400px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;There are few things worth emphasizing about the superiority of microservices, and distributed systems generally, over monolithic architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modularity&lt;/strong&gt; — responsibility for specific operations is assigned to separate pieces of the application&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Uniformity&lt;/strong&gt; — microservices interfaces (API endpoints) consist of a base URI identifying a data object and standard HTTP methods (GET, POST, PUT, PATCH and DELETE) used to manipulate the object&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Robustness&lt;/strong&gt; — component failures cause only the absence or reduction of a specific unit of functionality&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Maintainability&lt;/strong&gt; — system components can be modified and deployed independently&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scalability&lt;/strong&gt; — instances of a service can be added or removed to respond to changes in demand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Availability&lt;/strong&gt; — new features can be added to the system while maintaining 100% availability.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testability&lt;/strong&gt; — new solutions can be tested directly in the production environment by implementing them for restricted segments of users to see how they behave in real life.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Creating Microservices with Node.js&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 01:&lt;/strong&gt; Creating a Server to Accept Requests&lt;/p&gt; &#xA;&lt;p&gt;This file is creating our server and assigns routes to process all requests.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//  server.js&#xA;&#xA;const express = require(&#39;express&#39;)&#xA;const app = express();&#xA;const port = process.env.PORT || 3000;&#xA;&#xA;const routes = require(&#39;./api/routes&#39;);&#xA;routes(app);&#xA;app.listen(port, function() {&#xA;   console.log(&#39;Server started on port: &#39; + port);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 02:&lt;/strong&gt; Defining the routes&lt;/p&gt; &#xA;&lt;p&gt;The next step is to define the routes for the microservices and then assign each to a target in the controller. We have two endpoints. One endpoint called &#34;about&#34; that returns information about the application. And a &#34;distance&#34; endpoint that includes two path parameters, both Zip Codes of the Lego store. This endpoint returns the distance, in miles, between these two Zip Codes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const controller = require(&#39;./controller&#39;);&#xA;&#xA;module.exports = function(app) {&#xA;   app.route(&#39;/about&#39;)&#xA;       .get(controller.about);&#xA;   app.route(&#39;/distance/:zipcode1/:zipcode2&#39;)&#xA;       .get(controller.getDistance);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 03:&lt;/strong&gt; Adding Controller Logic&lt;/p&gt; &#xA;&lt;p&gt;Within the controller file, we are going to create a controller object with two properties. Those properties are the functions to handle the requests we defined in the routes module.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const properties = require(&#39;../package.json&#39;)&#xA;const distance = require(&#39;../service/distance&#39;);&#xA;&#xA;const controllers = {&#xA;   about: function(req, res) {&#xA;       let aboutInfo = {&#xA;           name: properties.name,&#xA;           version: properties.version&#xA;       }&#xA;       res.json(aboutInfo);&#xA;   },&#xA;   getDistance: function(req, res) {&#xA;           distance.find(req, res, function(err, dist) {&#xA;               if (err)&#xA;                   res.send(err);&#xA;               res.json(dist);&#xA;           });&#xA;       },&#xA;};&#xA;&#xA;module.exports = controllers;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How microservices communicate with each other?&lt;/h2&gt; &#xA;&lt;p&gt;Microservices are an architectural style and comprises of small modules/elements which are independent of each other. At times they are interdependent on other microservices or even a database. Breaking down applications into smaller elements brings scalability and efficiency to the structure.&lt;/p&gt; &#xA;&lt;p&gt;The microservices are distributed and communicate with each other by inter-service communication on network level. Each microservice has its own instance and process. Therefore, services must interact using an inter-service communication protocols like HTTP, gRPC or message brokers AMQP protocol.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/microservices-communication.png&#34; alt=&#34;Microservices Communication&#34; width=&#34;500px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Client and services communicate with each other with many different types of communication. Mainly, those types of communications can be classified in two axes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Synchronous Communication:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Synchronous communication is using HTTP or gRPC protocol for returning sync response. The client sends a request and waits for a response from the service. So that means client code block their thread, until the response reach from the server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Asynchronous Communication:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In Asynchronous communication, the client sends a request but it doesn&#39;t wait for a response from the service. The most popular protocol for this Asynchronous communications is AMQP (Advanced Message Queuing Protocol). So with using AMQP protocols, the client sends the message with using message broker systems like Kafka and RabbitMQ queue. The message producer usually does not wait for a response. This message consume from the subscriber systems in async way, and no one waiting for response suddenly.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 10. NODE.JS MIDDLEWARE&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What are the middleware functions in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Middleware functions are functions that have access to the &lt;strong&gt;request object (req)&lt;/strong&gt;, the &lt;strong&gt;response object (res)&lt;/strong&gt;, and the &lt;code&gt;next&lt;/code&gt; function in the application&#39;s request-response cycle.&lt;/p&gt; &#xA;&lt;p&gt;Middleware functions can perform the following tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Execute any code.&lt;/li&gt; &#xA; &lt;li&gt;Make changes to the request and the response objects.&lt;/li&gt; &#xA; &lt;li&gt;End the request-response cycle.&lt;/li&gt; &#xA; &lt;li&gt;Call the next middleware in the stack.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the current middleware function does not end the request-response cycle, it must call &lt;code&gt;next()&lt;/code&gt; to pass control to the next middleware function. Otherwise, the request will be left hanging.&lt;/p&gt; &#xA;&lt;p&gt;The following figure shows the elements of a middleware function call:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/express-mw.png&#34; alt=&#34;Middleware functions&#34; width=&#34;800px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Middleware functions that return a Promise will call &lt;code&gt;next(value)&lt;/code&gt; when they reject or throw an error. &lt;code&gt;next&lt;/code&gt; will be called with either the rejected value or the thrown Error.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain the use of next in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;next&lt;/strong&gt; is a function in the Express router which executes the middleware succeeding the current middleware.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;To load the middleware function, call &lt;code&gt;app.use()&lt;/code&gt;, specifying the middleware function. For example, the following code loads the &lt;strong&gt;myLogger&lt;/strong&gt; middleware function before the route to the root path (/).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * myLogger&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const app = express();&#xA;&#xA;const myLogger = function (req, res, next) {&#xA;  console.log(&#34;LOGGED&#34;);&#xA;  next();&#xA;};&#xA;&#xA;app.use(myLogger);&#xA;&#xA;app.get(&#34;/&#34;, (req, res) =&amp;gt; {&#xA;  res.send(&#34;Hello World!&#34;);&#xA;});&#xA;&#xA;app.listen(3000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚝ &lt;a href=&#34;https://codesandbox.io/s/next-function-nq042s&#34;&gt;Try this example on CodeSandbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The &lt;code&gt;next()&lt;/code&gt; function is not a part of the Node.js or Express API, but is the third argument that is passed to the middleware function. The &lt;code&gt;next()&lt;/code&gt; function could be named anything, but by convention it is always named “next”. To avoid confusion, always use this convention.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why to use Express.js?&lt;/h2&gt; &#xA;&lt;p&gt;Express.js is a Node.js web application framework that provides broad features for building web and mobile applications. It is used to build a single page, multipage, and hybrid web application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features of Express.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast Server-Side Development:&lt;/strong&gt; The features of node js help express saving a lot of time.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Middleware:&lt;/strong&gt; Middleware is a request handler that has access to the application&#39;s request-response cycle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Routing:&lt;/strong&gt; It refers to how an application&#39;s endpoint&#39;s URLs respond to client requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Templating:&lt;/strong&gt; It provides templating engines to build dynamic content on the web pages by creating HTML templates on the server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Debugging:&lt;/strong&gt; Express makes it easier as it identifies the exact part where bugs are.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Express.js framework makes it very easy to develop an application which can be used to handle multiple types of requests like the GET, PUT, and POST and DELETE requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Simple server using Express.js&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const app = express();&#xA;&#xA;app.get(&#34;/&#34;, function (req, res) {&#xA;  res.send(&#34;Hello World!&#34;);&#xA;});&#xA;&#xA;const server = app.listen(3000, function () {});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why should you separate Express &#39;app&#39; and &#39;server&#39;?&lt;/h2&gt; &#xA;&lt;p&gt;Keeping the API declaration separated from the network related configuration (port, protocol, etc) allows testing the API in-process, without performing network calls, with all the benefits that it brings to the table: fast testing execution and getting coverage metrics of the code. It also allows deploying the same API under flexible and different network conditions.&lt;/p&gt; &#xA;&lt;p&gt;API declaration, should reside in app.js:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * app.js&#xA; */&#xA;const app = express();&#xA;&#xA;app.use(bodyParser.json());&#xA;app.use(&#34;/api/events&#34;, events.API);&#xA;app.use(&#34;/api/forms&#34;, forms);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Server network declaration&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * server.js&#xA; */&#xA;const app = require(&#39;../app&#39;);&#xA;const http = require(&#39;http&#39;);&#xA;&#xA;&#xA;// Get port from environment and store in Express.&#xA;const port = normalizePort(process.env.PORT || &#39;3000&#39;);&#xA;app.set(&#39;port&#39;, port);&#xA;&#xA;&#xA;// Create HTTP server.&#xA;const server = http.createServer(app);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are some of the most popular packages of Node.js?&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;async&lt;/td&gt; &#xA;   &lt;td&gt;Async is a utility module which provides straight-forward, powerful functions for working with asynchronous JavaScript&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;axios&lt;/td&gt; &#xA;   &lt;td&gt;Axios is a promise-based HTTP Client for node.js and the browser.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autocannon&lt;/td&gt; &#xA;   &lt;td&gt;AutoCannon is a tool for performance testing and a tool for benchmarking.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;browserify&lt;/td&gt; &#xA;   &lt;td&gt;Browserify will recursively analyze all the require() calls in your app in order to build a bundle you can serve up to the browser in a single &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bower&lt;/td&gt; &#xA;   &lt;td&gt;Bower is a package manager for the web It works by fetching and installing packages from all over, taking care of hunting, finding, downloading, and saving the stuff you&#39;re looking for&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;csv&lt;/td&gt; &#xA;   &lt;td&gt;csv module has four sub modules which provides CSV generation, parsing, transformation and serialization for Node.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;debug&lt;/td&gt; &#xA;   &lt;td&gt;Debug is a tiny node.js debugging utility modelled after node core&#39;s debugging technique&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;express&lt;/td&gt; &#xA;   &lt;td&gt;Express is a fast, un-opinionated, minimalist web framework. It provides small, robust tooling for HTTP servers, making it a great solution for single page applications, web sites, hybrids, or public HTTP APIs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;grunt&lt;/td&gt; &#xA;   &lt;td&gt;is a JavaScript Task Runner that facilitates creating new projects and makes performing repetitive but necessary tasks such as linting, unit testing, concatenating and minifying files (among other things) trivial&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;http-server&lt;/td&gt; &#xA;   &lt;td&gt;is a simple, zero-configuration command-line http server. It is powerful enough for production usage, but it&#39;s simple and hackable enough to be used for testing, local development, and learning&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;inquirer&lt;/td&gt; &#xA;   &lt;td&gt;A collection of common interactive command line user interfaces&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jshint&lt;/td&gt; &#xA;   &lt;td&gt;Static analysis tool to detect errors and potential problems in JavaScript code and to enforce your team&#39;s coding conventions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;koa&lt;/td&gt; &#xA;   &lt;td&gt;Koa is web app framework. It is an expressive HTTP middleware for node.js to make web applications and APIs more enjoyable to write&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lodash&lt;/td&gt; &#xA;   &lt;td&gt;The lodash library exported as a node module. Lodash is a modern JavaScript utility library delivering modularity, performance, &amp;amp; extras&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;less&lt;/td&gt; &#xA;   &lt;td&gt;The less library exported as a node module&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;moment&lt;/td&gt; &#xA;   &lt;td&gt;A lightweight JavaScript date library for parsing, validating, manipulating, and formatting dates&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mongoose&lt;/td&gt; &#xA;   &lt;td&gt;It is a MongoDB object modeling tool designed to work in an asynchronous environment&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mongoDB&lt;/td&gt; &#xA;   &lt;td&gt;The official MongoDB driver for Node.js. It provides a high-level API on top of mongodb-core that is meant for end users&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nodemon&lt;/td&gt; &#xA;   &lt;td&gt;It is a simple monitor script for use during development of a node.js app, It will watch the files in the directory in which nodemon was started, and if any files change, nodemon will automatically restart your node application&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nodemailer&lt;/td&gt; &#xA;   &lt;td&gt;This module enables e-mail sending from a Node.js applications&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;passport&lt;/td&gt; &#xA;   &lt;td&gt;A simple, unobtrusive authentication middleware for Node.js. Passport uses the strategies to authenticate requests. Strategies can range from verifying username and password credentials or authentication using OAuth or OpenID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;socket.io&lt;/td&gt; &#xA;   &lt;td&gt;Its a node.js realtime framework server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;sails&lt;/td&gt; &#xA;   &lt;td&gt;Sails is a API-driven framework for building realtime apps, using MVC conventions (based on Express and Socket.io)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;underscore&lt;/td&gt; &#xA;   &lt;td&gt;Underscore.js is a utility-belt library for JavaScript that provides support for the usual functional suspects (each, map, reduce, filter...) without extending any core JavaScript objects&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;validator&lt;/td&gt; &#xA;   &lt;td&gt;A nodejs module for a library of string validators and sanitizers&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;winston&lt;/td&gt; &#xA;   &lt;td&gt;A multi-transport async logging library for Node.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ws&lt;/td&gt; &#xA;   &lt;td&gt;A simple to use, blazing fast and thoroughly tested websocket client, server and console for node.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;xml2js&lt;/td&gt; &#xA;   &lt;td&gt;A Simple XML to JavaScript object converter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yo&lt;/td&gt; &#xA;   &lt;td&gt;A CLI tool for running Yeoman generators&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How can you make sure your dependencies are safe?&lt;/h2&gt; &#xA;&lt;p&gt;The only option is to automate the update / security audit of your dependencies. For that there are free and paid options:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;npm outdated&lt;/li&gt; &#xA; &lt;li&gt;Trace by RisingStack&lt;/li&gt; &#xA; &lt;li&gt;NSP&lt;/li&gt; &#xA; &lt;li&gt;GreenKeeper&lt;/li&gt; &#xA; &lt;li&gt;Snyk&lt;/li&gt; &#xA; &lt;li&gt;npm audit&lt;/li&gt; &#xA; &lt;li&gt;npm audit fix&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the security mechanisms available in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Helmet module:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/helmet&#34;&gt;Helmet&lt;/a&gt; helps to secure your Express applications by setting various HTTP headers, like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X-Frame-Options to mitigates clickjacking attacks,&lt;/li&gt; &#xA; &lt;li&gt;Strict-Transport-Security to keep your users on HTTPS,&lt;/li&gt; &#xA; &lt;li&gt;X-XSS-Protection to prevent reflected XSS attacks,&lt;/li&gt; &#xA; &lt;li&gt;X-DNS-Prefetch-Control to disable browsers DNS prefetching.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Helmet&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const helmet = require(&#39;helmet&#39;)&#xA;const app = express()&#xA;&#xA;app.use(helmet())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. JOI module:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Validating user input is one of the most important things to do when it comes to the security of your application. Failing to do it correctly can open up your application and users to a wide range of attacks, including command injection, SQL injection or stored cross-site scripting.&lt;/p&gt; &#xA;&lt;p&gt;To validate user input, one of the best libraries you can pick is joi. &lt;a href=&#34;https://www.npmjs.com/package/joi&#34;&gt;Joi&lt;/a&gt; is an object schema description language and validator for JavaScript objects.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Joi&#xA; */&#xA;const Joi = require(&#39;joi&#39;);&#xA;&#xA;const schema = Joi.object().keys({&#xA;    username: Joi.string().alphanum().min(3).max(30).required(),&#xA;    password: Joi.string().regex(/^[a-zA-Z0-9]{3,30}$/),&#xA;    access_token: [Joi.string(), Joi.number()],&#xA;    birthyear: Joi.number().integer().min(1900).max(2013),&#xA;    email: Joi.string().email()&#xA;}).with(&#39;username&#39;, &#39;birthyear&#39;).without(&#39;password&#39;, &#39;access_token&#39;)&#xA;&#xA;// Return result&#xA;const result = Joi.validate({&#xA;    username: &#39;abc&#39;,&#xA;    birthyear: 1994&#xA;}, schema)&#xA;// result.error === null -&amp;gt; valid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Regular Expressions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Regular Expressions are a great way to manipulate texts and get the parts that you need from them. However, there is an attack vector called Regular Expression Denial of Service attack, which exposes the fact that most Regular Expression implementations may reach extreme situations for specially crafted input, that cause them to work extremely slowly.&lt;/p&gt; &#xA;&lt;p&gt;The Regular Expressions that can do such a thing are commonly referred as Evil Regexes. These expressions contain: *grouping with repetition, *inside the repeated group: *repetition, or *alternation with overlapping&lt;/p&gt; &#xA;&lt;p&gt;Examples of Evil Regular Expressions patterns:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(a+)+&#xA;([a-zA-Z]+)*&#xA;(a|aa)+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Security.txt:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Security.txt defines a standard to help organizations define the process for security researchers to securely disclose security vulnerabilities.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;)&#xA;const securityTxt = require(&#39;express-security.txt&#39;)&#xA;&#xA;const app = express()&#xA;&#xA;app.get(&#39;/security.txt&#39;, securityTxt({&#xA;  // your security address&#xA;  contact: &#39;email@example.com&#39;,&#xA;  // your pgp key&#xA;  encryption: &#39;encryption&#39;,&#xA;  // if you have a hall of fame for securty resourcers, include the link here&#xA;  acknowledgements: &#39;http://acknowledgements.example.com&#39;&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is npm in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;NPM stands for Node Package Manager. It provides following two main functionalities.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It works as an Online repository for node.js packages/modules which are present at &amp;lt;nodejs.org&amp;gt;.&lt;/li&gt; &#xA; &lt;li&gt;It works as Command line utility to install packages, do version management and dependency management of Node.js packages. NPM comes bundled along with Node.js installable. We can verify its version using the following command-&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NPM helps to install any Node.js module using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install &amp;lt;Module Name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, following is the command to install a famous Node.js web framework module called express-&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install express&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Why npm shrinkwrap is useful?&lt;/h2&gt; &#xA;&lt;p&gt;NPM shrinkwrap lets you lock down the ver­sions of installed pack­ages and their descen­dant pack­ages. It helps you use same package versions on all environments (development, staging, production) and also improve download and installation speed.&lt;/p&gt; &#xA;&lt;p&gt;After installing packages using npm install or npm install &lt;code&gt;&amp;lt;package-name&amp;gt;&lt;/code&gt; and updating your &lt;strong&gt;node_modules&lt;/strong&gt; folder, you should run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm shrinkwrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should create new &lt;strong&gt;npm-shrinkwrap.json&lt;/strong&gt; file with information about all packages you use. Next time, when someone calls &lt;strong&gt;npm install&lt;/strong&gt;, it will install packages from &lt;strong&gt;npm-shrinkwrap.json&lt;/strong&gt; and you will have the same environment on all machines.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to handle file upload in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;File can be uploaded to the server using Multer module. Multer is a Node.js middleware which is used for handling multipart/form-data, which is mostly used library for uploading files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Installing the dependencies:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install express body-parser multer --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. server.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * File Upload in Node.js&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const bodyParser = require(&#34;body-parser&#34;);&#xA;const multer = require(&#34;multer&#34;);&#xA;const app = express();&#xA;&#xA;// for text/number data transfer between clientg and server&#xA;app.use(bodyParser());&#xA;&#xA;const storage = multer.diskStorage({&#xA;  destination: function (req, file, callback) {&#xA;    callback(null, &#34;./uploads&#34;);&#xA;  },&#xA;  filename: function (req, file, callback) {&#xA;    callback(null, file.fieldname + &#34;-&#34; + Date.now());&#xA;  },&#xA;});&#xA;&#xA;const upload = multer({ storage: storage }).single(&#34;userPhoto&#34;);&#xA;&#xA;app.get(&#34;/&#34;, function (req, res) {&#xA;  res.sendFile(__dirname + &#34;/index.html&#34;);&#xA;});&#xA;&#xA;// POST: upload for single file upload&#xA;app.post(&#34;/api/photo&#34;, function (req, res) {&#xA;  upload(req, res, function (err) {&#xA;    if (err) {&#xA;      return res.end(&#34;Error uploading file.&#34;);&#xA;    }&#xA;    res.end(&#34;File is uploaded&#34;);&#xA;  });&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(&#34;Listening on port 3000&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. index.html:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;title&amp;gt;Multer-File-Upload&amp;lt;/title&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;h1&amp;gt;MULTER File Upload | Single File Upload&amp;lt;/h1&amp;gt; &#xA;&#xA;    &amp;lt;form id = &#34;uploadForm&#34;&#xA;         enctype = &#34;multipart/form-data&#34;&#xA;         action = &#34;/api/photo&#34;&#xA;         method = &#34;post&#34;&#xA;    &amp;gt;&#xA;      &amp;lt;input type=&#34;file&#34; name=&#34;userPhoto&#34; /&amp;gt;&#xA;      &amp;lt;input type=&#34;submit&#34; value=&#34;Upload Image&#34; name=&#34;submit&#34;&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain the terms body-parser, cookie-parser, morgan, nodemon, pm2, serve-favicon, cors, dotenv, fs-extra, moment in Express.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. body-parser:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;body-parser&lt;/code&gt; extract the entire body portion of an incoming request stream and exposes it on &lt;code&gt;req.body&lt;/code&gt;. The body-parser module parses the JSON, buffer, string and URL encoded data submitted using HTTP POST request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install body-parser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * body-parser&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const bodyParser = require(&#34;body-parser&#34;);&#xA;&#xA;const app = express();&#xA;&#xA;// create application/json parser&#xA;const jsonParser = bodyParser.json();&#xA;&#xA;// create application/x-www-form-urlencoded parser&#xA;const urlencodedParser = bodyParser.urlencoded({ extended: false });&#xA;&#xA;// POST /login gets urlencoded bodies&#xA;app.post(&#34;/login&#34;, urlencodedParser, function (req, res) {&#xA;  res.send(&#34;welcome, &#34; + req.body.username);&#xA;});&#xA;&#xA;// POST /api/users gets JSON bodies&#xA;app.post(&#34;/api/users&#34;, jsonParser, function (req, res) {&#xA;  // create user in req.body&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. cookie-parser:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A cookie is a piece of data that is sent to the client-side with a request and is stored on the client-side itself by the Web Browser the user is currently using.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cookie-parser&lt;/code&gt; middleware&#39;s cookieParser function takes a &lt;code&gt;secret&lt;/code&gt; string or array of strings as the first argument and an &lt;code&gt;options&lt;/code&gt; object as the second argument.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install cookie-parser&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * cookie-parser&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const cookieParser = require(&#39;cookie-parser&#39;)&#xA;&#xA;const app = express()&#xA;app.use(cookieParser())&#xA;&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  // Cookies that have not been signed&#xA;  console.log(&#39;Cookies: &#39;, req.cookies)&#xA;&#xA;  // Cookies that have been signed&#xA;  console.log(&#39;Signed Cookies: &#39;, req.signedCookies)&#xA;})&#xA;&#xA;app.listen(3000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. morgan:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;HTTP request logger middleware for node.js.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install morgan&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Writing logs to a file&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const fs = require(&#39;fs&#39;)&#xA;const morgan = require(&#39;morgan&#39;)&#xA;const path = require(&#39;path&#39;)&#xA;&#xA;const app = express()&#xA;&#xA;// create a write stream (in append mode)&#xA;const accessLogStream = fs.createWriteStream(path.join(__dirname, &#39;access.log&#39;), { flags: &#39;a&#39; })&#xA;&#xA;// setup the logger&#xA;app.use(morgan(&#39;combined&#39;, { stream: accessLogStream }))&#xA;&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;hello, world!&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. nodemon:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nodemon is a utility that will monitor for any changes in source and automatically restart your server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install -g nodemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  // ...&#xA;  &#34;scripts&#34;: {&#xA;    &#34;start&#34;: &#34;nodemon server.js&#34;&#xA;  },&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. pm2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;P&lt;/strong&gt;(rocess) &lt;strong&gt;M&lt;/strong&gt;(anager) &lt;strong&gt;2&lt;/strong&gt; (pm2) is a production process manager for Node.js applications with a built-in load balancer. It allows to keep applications alive forever, to reload them without downtime and to facilitate common system admin tasks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install pm2 -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Start an application:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;pm2 start app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://pm2.keymetrics.io/docs/usage/quick-start/&#34;&gt;https://pm2.keymetrics.io/docs/usage/quick-start/&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. serve-favicon:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js middleware for serving a favicon. It create new middleware to serve a favicon from the given path to a favicon file. &lt;strong&gt;path&lt;/strong&gt; may also be a Buffer of the icon to serve.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install serve-favicon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * serve-favicon&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const favicon = require(&#39;serve-favicon&#39;)&#xA;const path = require(&#39;path&#39;)&#xA;&#xA;const app = express()&#xA;app.use(favicon(path.join(__dirname, &#39;public&#39;, &#39;favicon.ico&#39;)))&#xA;&#xA;// Add your routes here, etc.&#xA;&#xA;app.listen(3000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;7. cors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;C&lt;/strong&gt;ross-&lt;strong&gt;O&lt;/strong&gt;rigin &lt;strong&gt;R&lt;/strong&gt;esource &lt;strong&gt;S&lt;/strong&gt;haring (CORS) headers allow apps running in the browser to make requests to servers on different domains (also known as origins). CORS headers are set on the server side - the HTTP server is responsible for indicating that a given HTTP request can be cross-origin.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install cors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Enable CORS for a Single Route&#xA; */&#xA;const express = require(&#39;express&#39;)&#xA;const cors = require(&#39;cors&#39;)&#xA;const app = express()&#xA;&#xA;app.get(&#39;/products/:id&#39;, cors(), function (req, res, next) {&#xA;  res.json({msg: &#39;This is CORS-enabled for a Single Route&#39;})&#xA;})&#xA;&#xA;app.listen(8080, function () {&#xA;  console.log(&#39;CORS-enabled web server listening on port 80&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;8. dotenv:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When a NodeJs application runs, it injects a global variable called &lt;code&gt;process.env&lt;/code&gt; which contains information about the state of environment in which the application is running. The &lt;code&gt;dotenv&lt;/code&gt; loads environment variables stored in the &lt;code&gt;.env&lt;/code&gt; file into &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install dotenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// .env&#xA;&#xA;DB_HOST=localhost&#xA;DB_USER=admin&#xA;DB_PASS=root&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * config.js&#xA; */&#xA;const db = require(&#39;db&#39;)&#xA;&#xA;db.connect({&#xA;  host: process.env.DB_HOST,&#xA;  username: process.env.DB_USER,&#xA;  password: process.env.DB_PASS&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;9. fs-extra:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;fs-extra&lt;/code&gt; contains methods that aren&#39;t included in the vanilla Node.js fs package. Such as recursive &lt;code&gt;mkdir&lt;/code&gt;, &lt;code&gt;copy&lt;/code&gt;, and &lt;code&gt;remove&lt;/code&gt;. It also uses graceful-fs to prevent &lt;code&gt;EMFILE&lt;/code&gt; errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install fs-extra&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * fs-extra&#xA; */&#xA;const fs = require(&#39;fs-extra&#39;)&#xA;&#xA;// Async with callbacks:&#xA;fs.copy(&#39;/tmp/myfile&#39;, &#39;/tmp/mynewfile&#39;, err =&amp;gt; {&#xA;  if (err) return console.error(err)&#xA;  console.log(&#39;success!&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;10. moment:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A JavaScript date library for parsing, validating, manipulating, and formatting dates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install moment --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Usage:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format Dates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const moment = require(&#39;moment&#39;);&#xA;&#xA;moment().format(&#39;MMMM Do YYYY, h:mm:ss a&#39;); // October 24th 2022, 3:15:22 pm&#xA;moment().format(&#39;dddd&#39;);                    // Saturday&#xA;moment().format(&#34;MMM Do YY&#34;);               // Oct 24th 22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Relative Time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const moment = require(&#39;moment&#39;);&#xA;&#xA;moment(&#34;20111031&#34;, &#34;YYYYMMDD&#34;).fromNow(); // 9 years ago&#xA;moment(&#34;20120620&#34;, &#34;YYYYMMDD&#34;).fromNow(); // 8 years ago&#xA;moment().startOf(&#39;day&#39;).fromNow();        // 15 hours ago&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Calendar Time&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const moment = require(&#39;moment&#39;);&#xA;&#xA;moment().subtract(10, &#39;days&#39;).calendar(); // 10/14/2022&#xA;moment().subtract(6, &#39;days&#39;).calendar();  // Last Sunday at 3:18 PM&#xA;moment().subtract(3, &#39;days&#39;).calendar();  // Last Wednesday at 3:18 PM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 11. NODE.JS RESTFUL API&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. Explain RESTful Web Services in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;REST stands for REpresentational State Transfer. REST is web standards based architecture and uses HTTP Protocol. It is an architectural style as well as an approach for communications purposes that is often used in various web services development. A REST Server simply provides access to resources and REST client accesses and modifies the resources using HTTP protocol.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;HTTP methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; − Provides read-only access to a resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; − Updates an existing resource or creates a new resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; − Removes a resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; − Creates a new resource.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PATCH&lt;/code&gt;− Update/modify a resource&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; users.json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;user1&#34; : {&#xA;      &#34;id&#34;: 1,&#xA;      &#34;name&#34; : &#34;Ehsan Philip&#34;,&#xA;      &#34;age&#34; : 24&#xA;   },&#xA;&#xA;   &#34;user2&#34; : {&#xA;      &#34;id&#34;: 2,&#xA;      &#34;name&#34; : &#34;Karim Jimenez&#34;,&#xA;      &#34;age&#34; : 22&#xA;   },&#xA;&#xA;   &#34;user3&#34; : {&#xA;      &#34;id&#34;: 3,&#xA;      &#34;name&#34; : &#34;Giacomo Weir&#34;,&#xA;      &#34;age&#34; : 18&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;List Users&lt;/strong&gt; ( &lt;code&gt;GET&lt;/code&gt; method)&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s implement our first RESTful API listUsers using the following code in a server.js file −&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;const fs = require(&#34;fs&#34;);&#xA;&#xA;app.get(&#39;/listUsers&#39;, function (req, res) {&#xA;   fs.readFile( __dirname + &#34;/&#34; + &#34;users.json&#34;, &#39;utf8&#39;, function (err, data) {&#xA;      console.log( data );&#xA;      res.end( data );&#xA;   });&#xA;})&#xA;&#xA;const server = app.listen(3000, function () {&#xA;   const host = server.address().address&#xA;   const port = server.address().port&#xA;   console.log(&#34;App listening at http://%s:%s&#34;, host, port)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Add User&lt;/strong&gt; ( &lt;code&gt;POST&lt;/code&gt; method )&lt;/p&gt; &#xA;&lt;p&gt;Following API will show you how to add new user in the list.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;const fs = require(&#34;fs&#34;);&#xA;&#xA;const user = {&#xA;   &#34;user4&#34; : {&#xA;      &#34;id&#34;: 4,&#xA;      &#34;name&#34; : &#34;Spencer Amos&#34;,&#xA;      &#34;age&#34; : 28&#xA;   }&#xA;}&#xA;&#xA;app.post(&#39;/addUser&#39;, function (req, res) {&#xA;   // First read existing users.&#xA;   fs.readFile( __dirname + &#34;/&#34; + &#34;users.json&#34;, &#39;utf8&#39;, function (err, data) {&#xA;      data = JSON.parse( data );&#xA;      data[&#34;user4&#34;] = user[&#34;user4&#34;];&#xA;      console.log( data );&#xA;      res.end( JSON.stringify(data));&#xA;   });&#xA;})&#xA;&#xA;const server = app.listen(3000, function () {&#xA;   const host = server.address().address&#xA;   const port = server.address().port&#xA;   console.log(&#34;App listening at http://%s:%s&#34;, host, port)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Delete User:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;);&#xA;const app = express();&#xA;const fs = require(&#34;fs&#34;);&#xA;&#xA;const id = 2;&#xA;&#xA;app.delete(&#39;/deleteUser&#39;, function (req, res) {&#xA;   // First read existing users.&#xA;   fs.readFile( __dirname + &#34;/&#34; + &#34;users.json&#34;, &#39;utf8&#39;, function (err, data) {&#xA;      data = JSON.parse( data );&#xA;      delete data[&#34;user&#34; + 2];&#xA;      console.log( data );&#xA;      res.end( JSON.stringify(data));&#xA;   });&#xA;})&#xA;&#xA;const server = app.listen(3000, function () {&#xA;   const host = server.address().address&#xA;   const port = server.address().port&#xA;   console.log(&#34;App listening at http://%s:%s&#34;, host, port)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the difference between req.params and req.query?&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;req.params&lt;/strong&gt; are a part of a path in URL and they&#39;re also known as URL variables. for example, if you have the route &lt;strong&gt;/books/:id&lt;/strong&gt;, then the &lt;strong&gt;id&lt;/strong&gt; property will be available as &lt;strong&gt;req.params.id&lt;/strong&gt;. req.params default value is an empty object {}.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;strong&gt;req.query&lt;/strong&gt; is a part of a URL that assigns values to specified parameters. A query string commonly includes fields added to a base URL by a Web browser or other client application, for example as part of an HTML form. A query is the last part of URL&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 01:&lt;/strong&gt; req.params&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * req.params&#xA; */&#xA;&#xA;// GET  http://localhost:3000/employees/10&#xA;&#xA;app.get(&#39;/employees/:id&#39;, (req, res, next) =&amp;gt; {&#xA;   console.log(req.params.id); // 10&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example 02:&lt;/strong&gt; req.query&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * req.query&#xA; */&#xA;&#xA;// GET  http://localhost:3000/employees?page=20&#xA;&#xA;app.get(&#39;/employees&#39;, (req, res, next) =&amp;gt; {&#xA;  console.log(req.query.page) // 20&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to make post request in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Following code snippet can be used to make a Post Request in Node.js.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * POST Request&#xA; */&#xA;const request = require(&#34;request&#34;);&#xA;&#xA;request.post(&#34;http://localhost:3000/action&#34;,  { form: { key: &#34;value&#34; } },&#xA;  function (error, response, body) {&#xA;    if (!error &amp;amp;&amp;amp; response.statusCode === 200) {&#xA;      console.log(body);&#xA;    }&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are Promises in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;It allows to associate handlers to an asynchronous action&#39;s eventual success value or failure reason. This lets asynchronous methods return values like synchronous methods: instead of the final value, the asynchronous method returns a promise for the value at some point in the future.&lt;/p&gt; &#xA;&lt;p&gt;Promises in node.js promised to do some work and then had separate callbacks that would be executed for success and failure as well as handling timeouts. Another way to think of promises in node.js was that they were emitters that could emit only two events: success and error.The cool thing about promises is you can combine them into dependency chains (do Promise C only when Promise A and Promise B complete).&lt;/p&gt; &#xA;&lt;p&gt;The core idea behind promises is that a promise represents the result of an asynchronous operation. A promise is in one of three different states:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pending - The initial state of a promise.&lt;/li&gt; &#xA; &lt;li&gt;fulfilled - The state of a promise representing a successful operation.&lt;/li&gt; &#xA; &lt;li&gt;rejected - The state of a promise representing a failed operation. Once a promise is fulfilled or rejected, it is immutable (i.e. it can never change again).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Promise&#xA; */&#xA;function getSum(num1, num2) {&#xA;  const myPromise = new Promise((resolve, reject) =&amp;gt; {&#xA;    if (!isNaN(num1) &amp;amp;&amp;amp; !isNaN(num2)) {&#xA;      resolve(num1 + num2);&#xA;    } else {&#xA;      reject(new Error(&#34;Not a valid number&#34;));&#xA;    }&#xA;  });&#xA;&#xA;  return myPromise;&#xA;}&#xA;&#xA;console.log(getSum(10, 20)); // Promise { 30 }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How can you secure your HTTP cookies against XSS attacks?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1.&lt;/strong&gt; When the web server sets cookies, it can provide some additional attributes to make sure the cookies won&#39;t be accessible by using malicious JavaScript. One such attribute is HttpOnly.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Set-Cookie: [name]=[value]; HttpOnly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;HttpOnly makes sure the cookies will be submitted only to the domain they originated from.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; The &#34;Secure&#34; attribute can make sure the cookies are sent over secured channel only.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Set-Cookie: [name]=[value]; Secure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3.&lt;/strong&gt; The web server can use X-XSS-Protection response header to make sure pages do not load when they detect reflected cross-site scripting (XSS) attacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;X-XSS-Protection: 1; mode=block&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4.&lt;/strong&gt; The web server can use HTTP Content-Security-Policy response header to control what resources a user agent is allowed to load for a certain page. It can help to prevent various types of attacks like Cross Site Scripting (XSS) and data injection attacks.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Content-Security-Policy: default-src &#39;self&#39; *.http://sometrustedwebsite.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to make an HTTP POST request using axios in Node.js?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * POST Request using Axios&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const app = express();&#xA;const axios = require(&#34;axios&#34;);&#xA;&#xA;app.post(&#34;/user&#34;, async (req, res) =&amp;gt; {&#xA;  try {&#xA;    const payload = { name: &#34;Aashita Iyer&#34;, email: &#34;aashita.iyer@email.com&#34; };&#xA;    const response = await axios.post(&#34;http://httpbin.org/post&#34;, payload);&#xA;    console.log(response.data);&#xA;    res.status(200).json(response.data);&#xA;  } catch (err) {&#xA;    res.status(500).json({ message: err });&#xA;  }&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(`App listening at http://localhost:3000/`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  args: {},&#xA;  data: &#39;{&#34;name&#34;:&#34;Aashita Iyer&#34;,&#34;email&#34;:&#34;aashita.iyer@email.com&#34;}&#39;,&#xA;  files: {},&#xA;  form: {},&#xA;  headers: {&#xA;    Accept: &#39;application/json, text/plain, */*&#39;,&#xA;    &#39;Accept-Encoding&#39;: &#39;gzip, deflate, br&#39;,&#xA;    &#39;Content-Length&#39;: &#39;56&#39;,&#xA;    &#39;Content-Type&#39;: &#39;application/json&#39;,&#xA;    Host: &#39;httpbin.org&#39;,&#xA;    &#39;User-Agent&#39;: &#39;axios/1.1.3&#39;,&#xA;    &#39;X-Amzn-Trace-Id&#39;: &#39;Root=1-635cd3d3-1f13ea981467e6371ce3a740&#39;&#xA;  },&#xA;  json: { email: &#39;aashita.iyer@email.com&#39;, name: &#39;Aashita Iyer&#39; },&#xA;  origin: &#39;xx.xx.xx.xx&#39;,&#xA;  url: &#39;http://httpbin.org/post&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is asynchronous programming in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Asynchronous programming is a form of parallel programming that allows a unit of work to run separately from the primary application thread. When the work is complete, it notifies the main thread (as well as whether the work was completed or failed). There are numerous benefits to using it, such as improved application performance and enhanced responsiveness.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the difference between Asynchronous and Non-blocking?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Asynchronous:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The architecture of asynchronous explains that the message sent will not give the reply on immediate basis just like we send the mail but do not get the reply on an immediate basis. It does not have any dependency or order. Hence improving the system efficiency and performance. The server stores the information and when the action is done it will be notified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Non-Blocking:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nonblocking immediately responses with whatever data available. Moreover, it does not block any execution and keeps on running as per the requests. If an answer could not be retrieved then in those cases API returns immediately with an error. Nonblocking is mostly used with I/O(input/output). Node.js is itself based on nonblocking I/O model. There are few ways of communication that a nonblocking I/O has completed. The callback function is to be called when the operation is completed. Nonblocking call uses the help of javascript which provides a callback function.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How node.js prevents blocking code?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blocking vs Non-blocking:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Blocking&lt;/strong&gt; is when the execution of additional JavaScript in the Node.js process must wait until a non-JavaScript operation completes. This happens because the event loop is unable to continue running JavaScript while a &lt;strong&gt;blocking&lt;/strong&gt; operation is occurring.&lt;/p&gt; &#xA;&lt;p&gt;Synchronous methods in the Node.js standard library that use &lt;strong&gt;libuv&lt;/strong&gt; are the most commonly used blocking operations. Native modules may also have blocking methods. Blocking methods execute &lt;code&gt;synchronously&lt;/code&gt; and non-blocking methods execute &lt;code&gt;asynchronously&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Blocking&#xA;const fs = require(&#39;fs&#39;);&#xA;const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read&#xA;console.log(data);&#xA;moreWork(); // will run after console.log&#xA;&#xA;// Non-blocking&#xA;const fs = require(&#39;fs&#39;);&#xA;fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {&#xA;  if (err) throw err;&#xA;  console.log(data);&#xA;});&#xA;moreWork(); // will run before console.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Name the types of API functions in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;There are two types of API functions in Node.js:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Asynchronous, Non-blocking functions&lt;/li&gt; &#xA; &lt;li&gt;Synchronous, Blocking functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Blocking functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In a blocking operation, all other code is blocked from executing until an I/O event that is being waited on occurs. Blocking functions execute synchronously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;const data = fs.readFileSync(&#39;/file.md&#39;); // blocks here until file is read&#xA;console.log(data);&#xA;// moreWork(); will run after console.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second line of code blocks the execution of additional JavaScript until the entire file is read. moreWork () will only be called after Console.log&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Non-blocking functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In a non-blocking operation, multiple I/O calls can be performed without the execution of the program being halted. Non-blocking functions execute asynchronously.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;fs.readFile(&#39;/file.md&#39;, (err, data) =&amp;gt; {&#xA;  if (err) throw err;&#xA;  console.log(data);&#xA;});&#xA;// moreWork(); will run before console.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;fs.readFile()&lt;/code&gt; is non-blocking, moreWork() does not have to wait for the file read to complete before being called. This allows for higher throughput.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is difference between put and patch?&lt;/h2&gt; &#xA;&lt;p&gt;PUT and PATCH are HTTP verbs and they both relate to updating a resource. The main difference between PUT and PATCH requests are in the way the server processes the enclosed entity to modify the resource identified by the Request-URI.&lt;/p&gt; &#xA;&lt;p&gt;In a PUT request, the enclosed entity is considered to be a modified version of the resource stored on the origin server, and the client is requesting that the stored version be replaced.&lt;/p&gt; &#xA;&lt;p&gt;With PATCH, however, the enclosed entity contains a set of instructions describing how a resource currently residing on the origin server should be modified to produce a new version.&lt;/p&gt; &#xA;&lt;p&gt;Also, another difference is that when you want to update a resource with PUT request, you have to send the full payload as the request whereas with PATCH, you only send the parameters which you want to update.&lt;/p&gt; &#xA;&lt;p&gt;The most commonly used HTTP verbs POST, GET, PUT, DELETE are similar to CRUD (Create, Read, Update and Delete) operations in database. We specify these HTTP verbs in the capital case. So, the below is the comparison between them.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;POST&lt;/code&gt; - create&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GET&lt;/code&gt; - read&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PUT&lt;/code&gt; - update&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;DELETE&lt;/code&gt; - delete&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;PATCH&lt;/strong&gt;: Submits a partial modification to a resource. If you only need to update one field for the resource, you may want to use the PATCH method.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. List types of Http requests supported by Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The HTTP core module is a key module to Node.js networking.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const http = require(&#39;http&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;http.METHODS&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;http&#39;).METHODS&#xA;[ &#39;ACL&#39;,&#xA;  &#39;BIND&#39;,&#xA;  &#39;CHECKOUT&#39;,&#xA;  &#39;CONNECT&#39;,&#xA;  &#39;COPY&#39;,&#xA;  &#39;DELETE&#39;,&#xA;  &#39;GET&#39;,&#xA;  &#39;HEAD&#39;,&#xA;  &#39;LINK&#39;,&#xA;  &#39;LOCK&#39;,&#xA;  &#39;M-SEARCH&#39;,&#xA;  &#39;MERGE&#39;,&#xA;  &#39;MKACTIVITY&#39;,&#xA;  &#39;MKCALENDAR&#39;,&#xA;  &#39;MKCOL&#39;,&#xA;  &#39;MOVE&#39;,&#xA;  &#39;NOTIFY&#39;,&#xA;  &#39;OPTIONS&#39;,&#xA;  &#39;PATCH&#39;,&#xA;  &#39;POST&#39;,&#xA;  &#39;PROPFIND&#39;,&#xA;  &#39;PROPPATCH&#39;,&#xA;  &#39;PURGE&#39;,&#xA;  &#39;PUT&#39;,&#xA;  &#39;REBIND&#39;,&#xA;  &#39;REPORT&#39;,&#xA;  &#39;SEARCH&#39;,&#xA;  &#39;SUBSCRIBE&#39;,&#xA;  &#39;TRACE&#39;,&#xA;  &#39;UNBIND&#39;,&#xA;  &#39;UNLINK&#39;,&#xA;  &#39;UNLOCK&#39;,&#xA;  &#39;UNSUBSCRIBE&#39; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;http.STATUS_CODES&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;require(&#39;http&#39;).STATUS_CODES&#xA;{ &#39;100&#39;: &#39;Continue&#39;,&#xA;&#39;101&#39;: &#39;Switching Protocols&#39;,&#xA;&#39;102&#39;: &#39;Processing&#39;,&#xA;&#39;200&#39;: &#39;OK&#39;,&#xA;&#39;201&#39;: &#39;Created&#39;,&#xA;&#39;202&#39;: &#39;Accepted&#39;,&#xA;&#39;203&#39;: &#39;Non-Authoritative Information&#39;,&#xA;&#39;204&#39;: &#39;No Content&#39;,&#xA;&#39;205&#39;: &#39;Reset Content&#39;,&#xA;&#39;206&#39;: &#39;Partial Content&#39;,&#xA;&#39;207&#39;: &#39;Multi-Status&#39;,&#xA;&#39;208&#39;: &#39;Already Reported&#39;,&#xA;&#39;226&#39;: &#39;IM Used&#39;,&#xA;&#39;300&#39;: &#39;Multiple Choices&#39;,&#xA;&#39;301&#39;: &#39;Moved Permanently&#39;,&#xA;&#39;302&#39;: &#39;Found&#39;,&#xA;&#39;303&#39;: &#39;See Other&#39;,&#xA;&#39;304&#39;: &#39;Not Modified&#39;,&#xA;&#39;305&#39;: &#39;Use Proxy&#39;,&#xA;&#39;307&#39;: &#39;Temporary Redirect&#39;,&#xA;&#39;308&#39;: &#39;Permanent Redirect&#39;,&#xA;&#39;400&#39;: &#39;Bad Request&#39;,&#xA;&#39;401&#39;: &#39;Unauthorized&#39;,&#xA;&#39;402&#39;: &#39;Payment Required&#39;,&#xA;&#39;403&#39;: &#39;Forbidden&#39;,&#xA;&#39;404&#39;: &#39;Not Found&#39;,&#xA;&#39;405&#39;: &#39;Method Not Allowed&#39;,&#xA;&#39;406&#39;: &#39;Not Acceptable&#39;,&#xA;&#39;407&#39;: &#39;Proxy Authentication Required&#39;,&#xA;&#39;408&#39;: &#39;Request Timeout&#39;,&#xA;&#39;409&#39;: &#39;Conflict&#39;,&#xA;&#39;410&#39;: &#39;Gone&#39;,&#xA;&#39;411&#39;: &#39;Length Required&#39;,&#xA;&#39;412&#39;: &#39;Precondition Failed&#39;,&#xA;&#39;413&#39;: &#39;Payload Too Large&#39;,&#xA;&#39;414&#39;: &#39;URI Too Long&#39;,&#xA;&#39;415&#39;: &#39;Unsupported Media Type&#39;,&#xA;&#39;416&#39;: &#39;Range Not Satisfiable&#39;,&#xA;&#39;417&#39;: &#39;Expectation Failed&#39;,&#xA;&#39;418&#39;: &#39;I\&#39;m a teapot&#39;,&#xA;&#39;421&#39;: &#39;Misdirected Request&#39;,&#xA;&#39;422&#39;: &#39;Unprocessable Entity&#39;,&#xA;&#39;423&#39;: &#39;Locked&#39;,&#xA;&#39;424&#39;: &#39;Failed Dependency&#39;,&#xA;&#39;425&#39;: &#39;Unordered Collection&#39;,&#xA;&#39;426&#39;: &#39;Upgrade Required&#39;,&#xA;&#39;428&#39;: &#39;Precondition Required&#39;,&#xA;&#39;429&#39;: &#39;Too Many Requests&#39;,&#xA;&#39;431&#39;: &#39;Request Header Fields Too Large&#39;,&#xA;&#39;451&#39;: &#39;Unavailable For Legal Reasons&#39;,&#xA;&#39;500&#39;: &#39;Internal Server Error&#39;,&#xA;&#39;501&#39;: &#39;Not Implemented&#39;,&#xA;&#39;502&#39;: &#39;Bad Gateway&#39;,&#xA;&#39;503&#39;: &#39;Service Unavailable&#39;,&#xA;&#39;504&#39;: &#39;Gateway Timeout&#39;,&#xA;&#39;505&#39;: &#39;HTTP Version Not Supported&#39;,&#xA;&#39;506&#39;: &#39;Variant Also Negotiates&#39;,&#xA;&#39;507&#39;: &#39;Insufficient Storage&#39;,&#xA;&#39;508&#39;: &#39;Loop Detected&#39;,&#xA;&#39;509&#39;: &#39;Bandwidth Limit Exceeded&#39;,&#xA;&#39;510&#39;: &#39;Not Extended&#39;,&#xA;&#39;511&#39;: &#39;Network Authentication Required&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Making HTTP Requests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const request = require(&#39;request&#39;);&#xA;&#xA;request(&#39;https://nodejs.org/&#39;, function(err, res, body) {&#xA;    console.log(body);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first argument to request can either be a URL string, or an object of options. Here are some of the more common options you&#39;ll encounter in your applications:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;url&lt;/strong&gt;: The destination URL of the HTTP request&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;method&lt;/strong&gt;: The HTTP method to be used (GET, POST, DELETE, etc)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;headers&lt;/strong&gt;: An object of HTTP headers (key-value) to be set in the request&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;form&lt;/strong&gt;: An object containing key-value form data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const request = require(&#39;request&#39;);&#xA;&#xA;const options = {&#xA;    url: &#39;https://nodejs.org/file.json&#39;,&#xA;    method: &#39;GET&#39;,&#xA;    headers: {&#xA;        &#39;Accept&#39;: &#39;application/json&#39;,&#xA;        &#39;Accept-Charset&#39;: &#39;utf-8&#39;,&#xA;        &#39;User-Agent&#39;: &#39;my-reddit-client&#39;&#xA;    }&#xA;};&#xA;&#xA;request(options, function(err, res, body) {&#xA;    let json = JSON.parse(body);&#xA;    console.log(json);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using the options object, this request uses the GET method to retrieve JSON data directly from Reddit, which is returned as a string in the body field. From here, you can use &lt;code&gt;JSON.parse&lt;/code&gt; and use the data as a normal JavaScript object.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is difference between promises and async-await in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Promises:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A promise is used to handle the asynchronous result of an operation. JavaScript is designed to not wait for an asynchronous block of code to completely execute before other synchronous parts of the code can run. With Promises, we can defer the execution of a code block until an async request is completed. This way, other operations can keep running without interruption.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;States of Promises:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Pending&lt;/code&gt;: Initial State, before the Promise succeeds or fails.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Resolved&lt;/code&gt;: Completed Promise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Rejected&lt;/code&gt;: Failed Promise, throw an error&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function logFetch(url) {&#xA;  return fetch(url)&#xA;    .then(response =&amp;gt; {&#xA;      console.log(response);&#xA;    })&#xA;    .catch(err =&amp;gt; {&#xA;      console.error(&#39;fetch failed&#39;, err);&#xA;    });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Async-Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Await&lt;/code&gt; is basically syntactic sugar for &lt;strong&gt;Promises&lt;/strong&gt;. It makes asynchronous code look more like synchronous/procedural code, which is easier for humans to understand.&lt;/p&gt; &#xA;&lt;p&gt;Putting the keyword &lt;code&gt;async&lt;/code&gt; before a function tells the function to return a Promise. If the code returns something that is not a &lt;code&gt;Promise&lt;/code&gt;, then JavaScript automatically wraps it into a resolved promise with that value. The &lt;code&gt;await&lt;/code&gt; keyword simply makes JavaScript wait until that &lt;code&gt;Promise&lt;/code&gt; settles and then returns its result.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;async function logFetch(url) {&#xA;  try {&#xA;    const response = await fetch(url);&#xA;    console.log(response);&#xA;  }&#xA;  catch (err) {&#xA;    console.log(&#39;fetch failed&#39;, err);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Mention the steps by which you can async in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;ES 2017 introduced Asynchronous functions. Async functions are essentially a cleaner way to work with asynchronous code in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Async/Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The newest way to write asynchronous code in JavaScript.&lt;/li&gt; &#xA; &lt;li&gt;It is non blocking (just like promises and callbacks).&lt;/li&gt; &#xA; &lt;li&gt;Async/Await was created to simplify the process of working with and writing chained promises.&lt;/li&gt; &#xA; &lt;li&gt;Async functions return a Promise. If the function throws an error, the Promise will be rejected. If the function returns a value, the Promise will be resolved.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Syntax&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Normal Function&#xA;function add(x,y){&#xA;  return x + y;&#xA;}&#xA;// Async Function&#xA;async function add(x,y){&#xA;  return x + y;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Await:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Async functions can make use of the await expression. This will pause the async function and wait for the Promise to resolve prior to moving on.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function doubleAfter2Seconds(x) {&#xA;  return new Promise(resolve =&amp;gt; {&#xA;    setTimeout(() =&amp;gt; {&#xA;      resolve(x * 2);&#xA;    }, 2000);&#xA;  });&#xA;}&#xA;&#xA;async function addAsync(x) {&#xA;  const a = await doubleAfter2Seconds(10);&#xA;  const b = await doubleAfter2Seconds(20);&#xA;  const c = await doubleAfter2Seconds(30);&#xA;  return x + a + b + c;&#xA;}&#xA;&#xA;&#xA;addAsync(10).then((sum) =&amp;gt; {&#xA;  console.log(sum);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to use promise in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A promise is an object that represents the return value or the thrown exception that the function may eventually provide. A promise can also be used as a proxy for a remote object to overcome latency.&lt;/p&gt; &#xA;&lt;p&gt;Promise is relatively an easy implementation for asynchronous operation. The promise object returned from the function represents an operation which is not completed yet, but it guarantees to the caller of the operation that the operation will be completed in future.&lt;/p&gt; &#xA;&lt;p&gt;Promise has the following states:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Pending&lt;/strong&gt; - asynchronous operation is not yet completed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fulfilled&lt;/strong&gt; - asynchronous operation is completed successfully.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Rejected&lt;/strong&gt; - asynchronous operation is terminated with an error.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Settled&lt;/strong&gt; - asynchronous operation is either fulfilled or rejected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Callback&lt;/strong&gt; - function is executed if the promise is executed with value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Errback&lt;/strong&gt; - function is executed if the promise is rejected.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Moving to Promises from Callback:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the first pass, promises can mitigate the &lt;strong&gt;Pyramid of Doom&lt;/strong&gt;: the situation where code marches to the right faster than it marches forward.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;step1(function (value1) {&#xA;    step2(value1, function(value2) {&#xA;        step3(value2, function(value3) {&#xA;            step4(value3, function(value4) {&#xA;                // Do something with value4&#xA;            });&#xA;        });&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With a promise library, it can flatten the pyramid.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const myPromise = new Promise((resolve, reject) =&amp;gt; {&#xA;  setTimeout(() =&amp;gt; {&#xA;    resolve(&#34;successful&#34;);&#xA;  }, 100);&#xA;});&#xA;&#xA;myPromise&#xA;  .then(handleFulfilledA)&#xA;  .then(handleFulfilledB)&#xA;  .then(handleFulfilledC)&#xA;  .catch(handleRejectedAny);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to perform get request using axios in nodejs?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Get Request using Axios&#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const app = express();&#xA;const axios = require(&#34;axios&#34;);&#xA;&#xA;app.get(&#34;/async&#34;, async (req, res) =&amp;gt; {&#xA;  try {&#xA;    const response = await axios.get(&#34;https://jsonplaceholder.typicode.com/todos/1&#34;);&#xA;    res.status(200).json(response.data);&#xA;  } catch (err) {&#xA;    res.status(500).json({ message: err });&#xA;  }&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(`App listening at http://localhost:3000/`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 12. NODE.JS ROUTING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How does routing work in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Routing defines the way in which the client requests are handled by the application endpoints. We define routing using methods of the Express app object that correspond to HTTP methods; for example, &lt;code&gt;app.get()&lt;/code&gt; to handle &lt;code&gt;GET&lt;/code&gt; requests and &lt;code&gt;app.post&lt;/code&gt; to handle &lt;code&gt;POST&lt;/code&gt; requests, &lt;code&gt;app.all()&lt;/code&gt; to handle all HTTP methods and &lt;code&gt;app.use()&lt;/code&gt; to specify middleware as the callback function.&lt;/p&gt; &#xA;&lt;p&gt;These routing methods &#34;listens&#34; for requests that match the specified route(s) and method(s), and when it detects a match, it calls the specified callback function.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Syntax&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.METHOD(PATH, HANDLER)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;app is an instance of express.&lt;/li&gt; &#xA; &lt;li&gt;METHOD is an &lt;code&gt;HTTP request method&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;PATH is a path on the server.&lt;/li&gt; &#xA; &lt;li&gt;HANDLER is the function executed when the route is matched.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;a) Route methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// GET method route&#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;GET request&#39;)&#xA;})&#xA;&#xA;// POST method route&#xA;app.post(&#39;/login&#39;, function (req, res) {&#xA;  res.send(&#39;POST request&#39;)&#xA;})&#xA;&#xA;// ALL method route&#xA;app.all(&#39;/secret&#39;, function (req, res, next) {&#xA;  console.log(&#39;Accessing the secret section ...&#39;)&#xA;  next() // pass control to the next handler&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;b) Route paths:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Route paths, in combination with a request method, define the endpoints at which requests can be made. Route paths can be strings, string patterns, or regular expressions.&lt;/p&gt; &#xA;&lt;p&gt;The characters &lt;code&gt;?&lt;/code&gt;, &lt;code&gt;+&lt;/code&gt;, &lt;code&gt;*&lt;/code&gt;, and &lt;code&gt;()&lt;/code&gt; are subsets of their regular expression counterparts. The hyphen &lt;code&gt;(-)&lt;/code&gt; and the dot &lt;code&gt;(.)&lt;/code&gt; are interpreted literally by string-based paths.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// This route path will match requests to /about.&#xA;app.get(&#39;/about&#39;, function (req, res) {&#xA;  res.send(&#39;about&#39;)&#xA;})&#xA;&#xA;&#xA;// This route path will match acd and abcd.&#xA;app.get(&#39;/ab?cd&#39;, function (req, res) {&#xA;  res.send(&#39;ab?cd&#39;)&#xA;})&#xA;&#xA;&#xA;// This route path will match butterfly and dragonfly&#xA;app.get(/.*fly$/, function (req, res) {&#xA;  res.send(&#39;/.*fly$/&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;c) Route parameters:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Route parameters are named URL segments that are used to capture the values specified at their position in the URL. The captured values are populated in the &lt;code&gt;req.params&lt;/code&gt; object, with the name of the route parameter specified in the path as their respective keys.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.get(&#39;/users/:userId&#39;, function (req, res) {&#xA;  res.send(req.params)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.download()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prompt a file to be downloaded.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.end()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;End the response process.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.json()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a JSON response.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.jsonp()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a JSON response with JSONP support.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.redirect()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Redirect a request.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.render()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Render a view template.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.send()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a response of various types.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.sendFile()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Send a file as an octet stream.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;res.sendStatus()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the response status code and send its string representation as the response body.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;d) Router method:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;)&#xA;const router = express.Router()&#xA;&#xA;// middleware that is specific to this router&#xA;router.use(function timeLog (req, res, next) {&#xA;  console.log(&#39;Time: &#39;, Date.now())&#xA;  next()&#xA;})&#xA;&#xA;// define the home page route&#xA;router.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;Birds home page&#39;)&#xA;})&#xA;&#xA;// define the about route&#xA;router.get(&#39;/about&#39;, function (req, res) {&#xA;  res.send(&#39;About birds&#39;)&#xA;})&#xA;&#xA;module.exports = router&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 13. NODE.JS CACHING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to access cache data in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Caching is a technique used in web development to handle performance bottlenecks related to how data is managed, stored, and retrieved. A cache layer or server acts as a secondary storage layer, usually faster and highly performant to temporarily store a subset of data. It is expected that data stored in a cache does not change often. Cache can be stored using various techniques like in-memory cache, file cache or a separate cache database.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install express node-cache axios&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Node-cache has following major functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;.set(key, val, [ ttl ]):&lt;/strong&gt; Used to set some value corresponding to a particular key in the cache. This same key must be used to retrieve this value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;.get(key):&lt;/strong&gt; Used to get value set to specified key. It returns undefined, if the key is not already present.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;has(key):&lt;/strong&gt; Used to check if the cache already has some value set for specified key. Returns true if present otherwise false.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Implement in-memory cache with following approach:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On API request, check if the cache has key already set using has(key) function&lt;/li&gt; &#xA; &lt;li&gt;If the cache has the key, retrieve the cached value by get(key) function and use it instead of performing operation again. (This saves time)&lt;/li&gt; &#xA; &lt;li&gt;If the cache doesn&#39;t have a key, perform the operations required, and before sending the response, set the value for that key so that further requests can be responded to directly through cached data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * In-Memory Cache &#xA; */&#xA;const express = require(&#34;express&#34;);&#xA;const NodeCache = require(&#34;node-cache&#34;);&#xA;const axios = require(&#34;axios&#34;);&#xA;&#xA;const app = express();&#xA;const cache = new NodeCache({ stdTTL: 15 });&#xA;&#xA;/**&#xA; * GET Cached Data&#xA; */&#xA;const verifyCache = (req, res, next) =&amp;gt; {&#xA;  try {&#xA;    const { id } = req.params;&#xA;    if (cache.has(id)) {&#xA;      return res.status(200).json(cache.get(id));&#xA;    }&#xA;    return next();&#xA;  } catch (err) {&#xA;    throw new Error(err);&#xA;  }&#xA;};&#xA;&#xA;app.get(&#34;/&#34;, (req, res) =&amp;gt; {&#xA;  return res.json({ message: &#34;Hello World&#34; });&#xA;});&#xA;&#xA;/**&#xA; * GET ToDo Items&#xA; */&#xA;app.get(&#34;/todos/:id&#34;, verifyCache, async (req, res) =&amp;gt; {&#xA;  try {&#xA;    const { id } = req.params;&#xA;    const { data } = await axios.get(`https://jsonplaceholder.typicode.com/todos/${id}`);&#xA;    cache.set(id, data);&#xA;    return res.status(200).json(data);&#xA;  } catch ({ response }) {&#xA;    return res.sendStatus(response.status);&#xA;  }&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(`App listening at http://localhost:3000/`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to implement caching using Redis in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Redis is an open-source (BSD licensed), in-memory data structure store used as a database, cache, and message broker. Redis also supports disk-persistent data storage.&lt;/p&gt; &#xA;&lt;p&gt;Its key-value data storage system is another plus because it makes storage and retrieval much simpler. Using Redis, we can store and retrieve data in the cache using the SET and GET methods, respectively.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install -save redis&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#34;express&#34;);&#xA;const axios = require(&#34;axios&#34;);&#xA;const redis = require(&#34;redis&#34;);&#xA;const app = express();&#xA;&#xA;const client = redis.createClient(6379);&#xA;&#xA;client.on(&#34;error&#34;, (error) =&amp;gt; {&#xA;  console.error(error);&#xA;});&#xA;&#xA;app.get(&#34;/&#34;, (req, res) =&amp;gt; {&#xA;  return res.json({ message: &#34;Hello World&#34; });&#xA;});&#xA;&#xA;const cache = (req, res, next) =&amp;gt; {&#xA;  try {&#xA;    const { id } = req.params;&#xA;    client.get(id, (error, result) =&amp;gt; {&#xA;      if (error) throw error;&#xA;      if (result !== null) {&#xA;        return res.json(JSON.parse(result));&#xA;      } else {&#xA;        return next();&#xA;      }&#xA;    });&#xA;  } catch (err) {&#xA;    throw new Error(err);&#xA;  }&#xA;};&#xA;&#xA;app.get(&#34;/todos/:id&#34;, cache, async (req, res) =&amp;gt; {&#xA;  try {&#xA;    const { id } = req.params;&#xA;    const data = await axios.get(`https://jsonplaceholder.typicode.com/todos/${id}`);&#xA;    client.set(id, JSON.stringify(data), &#34;ex&#34;, 15);&#xA;    return res.status(200).json(data);&#xA;  } catch ({ response }) {&#xA;    return res.sendStatus(response.status);&#xA;  }&#xA;});&#xA;&#xA;app.listen(3000, function () {&#xA;  console.log(`App listening at http://localhost:3000/`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to implement Memcached in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Memcached&lt;/strong&gt; is a general-purpose distributed memory caching system. It is often used to speed up dynamic database-driven websites by caching data and objects in RAM to reduce the number of times an external data source (such as a database or API) must be read. Memcached is free and open-source software, licensed under the Revised BSD licence. Memcached runs on Unix-like operating systems (at least LINUX and OS X) and on Microsoft windows.&lt;/p&gt; &#xA;&lt;p&gt;We can store data to memcached server in key pair format. So whenever any request come from the app can be matched with memcached server without any query from mysql/Nosql server. This increases the performance of the application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install memcached&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Setting up the client:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The constructor of the memcached client take 2 different arguments server locations and options. Syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Memcached = require(&#39;memcached&#39;);&#xA;const memcached = new Memcached(Server locations, options);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * Memcached&#xA; */&#xA;const Memcached = require(&#39;memcached&#39;);&#xA;// all global configurations should be applied to the .config object of the Client.&#xA;Memcached.config.poolSize = 25;&#xA;&#xA;const memcached = new Memcached(&#39;localhost:11211&#39;, { retries:10, retry:10000, remove:true, failOverServers:[&#39;192.168.0.103:11211&#39;]});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;&lt;a href=&#34;https://www.npmjs.com/package/memcached&#34;&gt;https://www.npmjs.com/package/memcached&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 14. NODE.JS ERROR HANDLING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is the preferred method of resolving unhandled exceptions in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Unhandled exceptions in Node.js can be caught at the Process level by attaching a handler for uncaughtException event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;process.on(&#39;uncaughtException&#39;, function(err) {&#xA;    console.log(&#39;Caught exception: &#39; + err);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Process is a global object that provides information about the current Node.js process. Process is a listener function that is always listening to events.&lt;/p&gt; &#xA;&lt;p&gt;Few events are :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Exit&lt;/li&gt; &#xA; &lt;li&gt;disconnect&lt;/li&gt; &#xA; &lt;li&gt;unhandledException&lt;/li&gt; &#xA; &lt;li&gt;rejectionHandled&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is Error Handling in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;An error is any problem given out by the program due to a number of factors such as logic, syntax, timeout, etc. An error in Node.js is any instance of the Error object. Common examples include built-in error classes, such as ReferenceError, RangeError, TypeError, URIError, EvalError, and SyntaxError.&lt;/p&gt; &#xA;&lt;p&gt;User-defined errors can also be created by extending the base Error object, a built-in error class, or another custom error. In general, Node.js errors are divided into two distinct categories: operational errors and programmer errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Operational Errors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Operational errors represent runtime problems. These errors are expected in the Node.js runtime and should be dealt with in a proper way. Here&#39;s a list of common operational errors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;failed to connect to server&lt;/li&gt; &#xA; &lt;li&gt;failed to resolve hostname&lt;/li&gt; &#xA; &lt;li&gt;invalid user input&lt;/li&gt; &#xA; &lt;li&gt;request timeout&lt;/li&gt; &#xA; &lt;li&gt;server returned a 500 response&lt;/li&gt; &#xA; &lt;li&gt;socket hang-up&lt;/li&gt; &#xA; &lt;li&gt;system is out of memory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Programmer Errors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Programmer errors are what we call bugs. They represent issues in the code itself. Here&#39;s a common one for Node.js, when you try reading a property of an undefined object. It&#39;s a classic case of programmer error. Here are a few more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;called an asynchronous function without a callback&lt;/li&gt; &#xA; &lt;li&gt;did not resolve a promise&lt;/li&gt; &#xA; &lt;li&gt;did not catch a rejected promise&lt;/li&gt; &#xA; &lt;li&gt;passed a string where an object was expected&lt;/li&gt; &#xA; &lt;li&gt;passed an object where a string was expected&lt;/li&gt; &#xA; &lt;li&gt;passed incorrect parameters in a function&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain Error Handling approaches in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Using try-catch block:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Try-catch declaration is basically used to handle runtime errors in node.js. If the code in the try block throws an exception, the code in the catch block will be executed. It can be extended using finally clause. The finally clause is statements that are executed after the try statement completes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function square(num) {&#xA;  if (typeof num !== &#34;number&#34;) {&#xA;    throw new TypeError(`Expected number but got: ${typeof num}`);&#xA;  }&#xA;&#xA;  return num * num;&#xA;}&#xA;&#xA;try {&#xA;  square(&#34;10&#34;);&#xA;} catch (err) {&#xA;  console.log(err.message); // Expected number but got: string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Using promises:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Promise in Node.js is a contemporary way to handle errors, and it is usually preferred compared to callbacks. In the function, we will return a promise, which is a wrapper to our primary logic. We pass two arguments while defining the Promise object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;resolve — used to resolve promises and provide results&lt;/li&gt; &#xA; &lt;li&gt;reject — used to report/throw errors&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function square(num) {&#xA;  return new Promise((resolve, reject) =&amp;gt; {&#xA;    setTimeout(() =&amp;gt; {&#xA;      if (typeof num !== &#34;number&#34;) {&#xA;        reject(new TypeError(`Expected number but got: ${typeof num}`));&#xA;      }&#xA;&#xA;      const result = num * num;&#xA;      resolve(result);&#xA;    }, 100);&#xA;  });&#xA;}&#xA;&#xA;square(&#34;10&#34;)&#xA;  .then((result) =&amp;gt; console.log(result))&#xA;  .catch((err) =&amp;gt; console.error(err));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;TypeError: Expected number but got: string&#xA;    at Timeout._onTimeout (C:\node\index.js:5:16)&#xA;    at listOnTimeout (internal/timers.js:554:17)&#xA;    at processTimers (internal/timers.js:497:7)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Error-first callbacks:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js uses an error-first callback convention in most of its asynchronous methods to ensure that errors are checked properly before the results of an operation are used. This callback function is usually the last argument to the function that initiates an asynchronous operation, and it is called once when an error occurs or a result is available from the operation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;&#xA;fs.readFile(&#39;/path/to/file.txt&#39;, (err, result) =&amp;gt; {&#xA;  if (err) {&#xA;    console.error(err);&#xA;    return;&#xA;  }&#xA;&#xA;  // Log the file contents if no error&#xA;  console.log(result);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[Error: ENOENT: no such file or directory, open &#39;D:\path\to\file.txt&#39;] {&#xA;  errno: -4058,&#xA;  code: &#39;ENOENT&#39;,&#xA;  syscall: &#39;open&#39;,&#xA;  path: &#39;D:\\path\\to\\file.txt&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Using the async/await approach:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Async/await is just syntactic sugar that is meant to augment promises. It provides a synchronous structure to asynchronous code. The return value of an async function is a Promise. The await waits for the promise to be resolved or rejected.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;const util = require(&#39;util&#39;);&#xA;&#xA;const readFile = util.promisify(fs.readFile);&#xA;&#xA;const read = async () =&amp;gt; {&#xA;  try {&#xA;    const result = await readFile(&#39;/path/to/file.txt&#39;);&#xA;    console.log(result);&#xA;  } catch (err) {&#xA;    console.error(err);&#xA;  }&#xA;};&#xA;&#xA;read();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[Error: ENOENT: no such file or directory, open &#39;D:\path\to\file.txt&#39;] {&#xA;  errno: -4058,&#xA;  code: &#39;ENOENT&#39;,&#xA;  syscall: &#39;open&#39;,&#xA;  path: &#39;D:\\path\\to\\file.txt&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Use Middleware:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is usually a good idea to build a centralized error-handling component in order to avoid possible code duplications when handling errors. The error-handling component is in charge of making the caught errors understandable by, for example, sending notifications to system admins (if necessary), transferring events to a monitoring service like Sentry.io, and logging them.&lt;/p&gt; &#xA;&lt;p&gt;It is a good decision to employ a customizable logger like winston or morgan. Here is a customized winston logger:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const winston = require(&#34;winston&#34;);&#xA;&#xA;const logger = winston.createLogger({&#xA;  level: &#34;debug&#34;,&#xA;  format: winston.format.json(),&#xA;  transports: [new winston.transports.Console()],&#xA;});&#xA;&#xA;module.exports = logger;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#34;express&#34;);&#xA;const logger = require(&#34;./logger&#34;);&#xA;const app = express();&#xA;&#xA;app.get(&#34;/event&#34;, (req, res, next) =&amp;gt; {&#xA;  try {&#xA;    throw new Error(&#34;Not User!&#34;);&#xA;  } catch (error) {&#xA;    logger.error(&#34;Events Error: Unauthenticated user&#34;);&#xA;    res.status(500).send(&#34;Error!&#34;);&#xA;  }&#xA;});&#xA;&#xA;app.listen(3000, () =&amp;gt; {&#xA;  logger.info(&#34;Server Listening On Port 3000&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to solve &#34;Process out of Memory Exception&#34; in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Process out of Memory Exception is an exception that occurs when your node.js program gets out of memory. This happens when the default memory allocated to our program gets exceeded by our program while execution.&lt;/p&gt; &#xA;&lt;p&gt;This exception can be solved by increasing the default memory allocated to our program to the required memory by using the following command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;node --max-old-space-size=&amp;lt;NEW_SIZE_IN_MB&amp;gt; index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * OutOfMemory Exception&#xA; */&#xA;let items = [];&#xA;&#xA;for (let i = 0; i &amp;lt; 999999999; i++) {&#xA;  items.push(i);&#xA;}&#xA;&#xA;console.log(items);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;--- Last few GCs ---&amp;gt;&#xA;&#xA;[11652:000001DA4373BE50]      581 ms: Scavenge 765.9 (799.0) -&amp;gt; 765.9 (799.0) MB, 29.6 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure    &#xA;[11652:000001DA4373BE50]      844 ms: Scavenge 1148.4 (1181.6) -&amp;gt; 1148.4 (1181.6) MB, 44.7 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure&#xA;&#xA;[11652:000001DA4373BE50]     1239 ms: Scavenge 1722.2 (1755.4) -&amp;gt; 1722.2 (1755.4) MB, 67.5 / 0.0 ms  (average mu = 1.000, current mu = 1.000) allocation failure&#xA;&#xA;&#xA;&amp;lt;--- JS stacktrace ---&amp;gt;&#xA;&#xA;FATAL ERROR: invalid array length Allocation failed - JavaScript heap out of memory&#xA; 1: 00007FF784AA052F napi_wrap+109311&#xA; 2: 00007FF784A45256 v8::internal::OrderedHashTable&amp;lt;v8::internal::OrderedHashSet,1&amp;gt;::NumberOfElementsOffset+33302&#xA; 3: 00007FF784A46026 node::OnFatalError+294&#xA; 4: 00007FF78531163E v8::Isolate::ReportExternalAllocationLimitReached+94&#xA; 5: 00007FF7852F64BD v8::SharedArrayBuffer::Externalize+781&#xA; 6: 00007FF7851A094C v8::internal::Heap::EphemeronKeyWriteBarrierFromCode+1516&#xA; 7: 00007FF7851C547F v8::internal::Factory::NewUninitializedFixedArray+111&#xA; 8: 00007FF78508B3C0 v8::Object::GetIsolate+8128&#xA; 9: 00007FF784F151F7 v8::internal::interpreter::JumpTableTargetOffsets::iterator::operator=+169671&#xA;10: 00007FF785399FED v8::internal::SetupIsolateDelegate::SetupHeap+463949&#xA;11: 000003EC8D443246&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default memory allocated to a node.js program is 512MB on 32-bit systems and 1024MB on 64-bit systems. In the below example, we have increased the memory space requirements to 2048MB or 2GB. Use the following command to run the JS file(index.js).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;node --max-old-space-size=2048 index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the types of memory leaks in node.js?&lt;/h2&gt; &#xA;&lt;p&gt;A memory leak is a condition that occurs when a program doesn&#39;t release the memory it allocates. For instance, the system assigns memory locations to store values for the variables that we declare inside our program.&lt;/p&gt; &#xA;&lt;p&gt;High-level programming languages such as JavaScript utilize automatic memory management, known as garbage collection. Garbage collection allocates the memory to a variable once we declare it and reclaims the memory once it is no longer needed. Unfortunately, even though JavaScript uses a garbage collector to release the memory, sometimes determining whether to free the memory or not is undecidable.&lt;/p&gt; &#xA;&lt;p&gt;The common causes of Memory Leaks in Node.JS are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Global variables:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is one of the most common causes of leaks in Node. Due to the nature of JavaScript as a language, it is very easy to add to global variables and resources. If these are not cleaned over time, they keep adding up and eventually crash the application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const http = require(&#34;http&#34;);&#xA;&#xA;const requestLogs = []; // causing the memory leak&#xA;const server = http.createServer((req, res) =&amp;gt; {&#xA;    requestLogs.push({ url: req.url, array: new Array(10000).join(&#34;*&#34;)&#xA;    res.end(JSON.stringify(requestLogs));&#xA;});&#xA;&#xA;server.listen(3000);&#xA;console.log(&#34;Server listening to port 3000. Press Ctrl+C to stop it.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Closures:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Closures memorize their surrounding context. When a closure holds a reference to a large object in heap, it keeps the object in memory as long as the closure is in use.&lt;/p&gt; &#xA;&lt;p&gt;This implies easily ending up in situations where a closure holding such a reference can be improperly used leading to a memory leak.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Timers &amp;amp; Events:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The use of setTimeout, setInterval, Observers, and event listeners can cause memory leaks when heavy object references are kept in their callbacks without proper handling.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Multiple references:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you reference the same object from multiple objects, it can lead to a memory leak if one of the references is garbage collected while the other one is left dangling.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to prevent memory leaks in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Tools to help debug memory leaks:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Node-heapdump:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The node-heapdump module is good for post-mortem debugging. It generates heap dumps on your SIGUSR2. To help catch bugs easily in a development environment, add node-heapdump as a dependency to your project like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const heapdump = require(&#34;heapdump&#34;);&#xA;&#xA;heapdump.writeSnapshot(function (err, filename) {&#xA;  console.log(&#34;Sample dump written to&#34;, filename);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Clinic.js:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clinic.js is a handy toolset to diagnose and pinpoint performance bottlenecks in your Node applications. The Clinic.js HeapProfiler uses flame graphs to highlight memory allocations. You can use it with tools such as AutoCannon to simulate HTTP load when profiling.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. The process.memoryUsage method:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The process.memoryUsage method provides a simple way of monitoring memory usage in your Node applications.&lt;/p&gt; &#xA;&lt;p&gt;The method returns an object with the following properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;rss:&lt;/strong&gt;, or resident set size, refers to the amount of space occupied in the main memory for the process, which includes code segment, heap, and stack. If your RSS is going up, there is a likelihood your application is leaking memory&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;heapTotal:&lt;/strong&gt;, the total amount of memory available for JavaScript objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;heapUsed:&lt;/strong&gt;, the total amount of memory occupied by JavaScript objects&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;external:&lt;/strong&gt;, the amount of memory consumed by off-heap data (buffers) used by Node; this is where objects, strings, and closures are stored&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;arrayBuffers:&lt;/strong&gt;, the amount of memory allocation for ArrayBuffers and SharedArrayBuffers (the external memory size also includes this memory value)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(process.memoryUsage());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  rss: 4935680,&#xA;  heapTotal:1826816,&#xA;  heapUsed:650472,&#xA;  external: 49879,&#xA;  arrayBuffers: 17310,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Node Inspector:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node Inspector is a debugger interface for Node applications. Run Node with the --inspect flag to use it, and it starts listening for a debugging client. It is one of the simplest ways of capturing heap snapshots with Chrome DevTools.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Chrome DevTools:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chrome offers a range of tools to help debug your memory and performance issues, including allocation timelines, sampling heap profiler, and heap snapshots etc.&lt;/p&gt; &#xA;&lt;h2&gt;Q. How Garbage collection works in Node.JS?&lt;/h2&gt; &#xA;&lt;p&gt;The V8 uses a scheme similar to the Java Virtual Machine and divides the memory into segments. The thing that wraps the scheme concept is known as Resident Set, which refers to the portion of memory occupied by a process that is held in the RAM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;: Stores static data, method and function frames, primitive values, and pointers to stored objects. The stack is managed by the operating system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Heap&lt;/strong&gt;: Stores objects. Because everything in JavaScript is an object this means all dynamic data like arrays, closures, etc. The heap is the biggest block of memory and it&#39;s where Garbage Collection (GC) happens.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Code Segment&lt;/strong&gt;: the actual code is being executed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/memory-scheme.png&#34; alt=&#34;Memory Segments&#34; width=&#34;200px&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Garbage collection frees up memory in the Heap used by objects that are no longer referenced from the Stack, either directly or indirectly. The goal is to create free space for creating new objects. Garbage collection is generational. Objects in the Heap are grouped by age and cleared at different stages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mark-and-sweep algorithm:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In JavaScript, the root is the global object. The garbage collector start from these roots, find all objects that are referenced from these roots, then all objects referenced from these, etc. Starting from the roots, the garbage collector will thus find all reachable objects and collect all non-reachable objects.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 15. NODE.JS LOGGING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to debug an application in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. node-inspector:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm install -g node-inspector&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;node-debug app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Debugging:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Debugger&lt;/li&gt; &#xA; &lt;li&gt;Node Inspector&lt;/li&gt; &#xA; &lt;li&gt;Visual Studio Code&lt;/li&gt; &#xA; &lt;li&gt;Cloud9&lt;/li&gt; &#xA; &lt;li&gt;Brackets&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Profiling:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;1. node --prof ./app.js&#xA;2. node --prof-process ./the-generated-log-file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Heapdumps:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;node-heapdump with Chrome Developer Tools&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Tracing:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Interactive Stack Traces with TraceGL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Logging:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Libraries that output debugging information&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Caterpillar&lt;/li&gt; &#xA; &lt;li&gt;Tracer&lt;/li&gt; &#xA; &lt;li&gt;scribbles&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Libraries that enhance stack trace information&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Longjohn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 16. NODE.JS INTERNATIONALIZATION&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h4&gt;Q. How to use locale (i18n) in Node.js?&lt;/h4&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 17. NODE.JS TESTING&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. What is a stub?&lt;/h2&gt; &#xA;&lt;p&gt;Stubbing and verification for node.js tests. Enables you to validate and override behaviour of nested pieces of code such as methods, require() and npm modules or even instances of classes. This library is inspired on node-gently, MockJS and mock-require.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features of Stub:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Produces simple, lightweight Objects capable of extending down their tree&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Nodejs&lt;/li&gt; &#xA; &lt;li&gt;Easily extendable directly or through an ExtensionManager&lt;/li&gt; &#xA; &lt;li&gt;Comes with predefined, usable extensions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Stubs are functions/programs that simulate the behaviours of components/modules. Stubs provide canned answers to function calls made during test cases. Also, you can assert on with what these stubs were called.&lt;/p&gt; &#xA;&lt;p&gt;A use-case can be a file read, when you do not want to read an actual file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;&#xA;const readFileStub = sinon.stub(fs, &#39;readFile&#39;, function (path, cb) {  &#xA;  return cb(null, &#39;filecontent&#39;);&#xA;});&#xA;&#xA;expect(readFileStub).to.be.called;  &#xA;readFileStub.restore();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is a test pyramid?&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;Test Pyramid&#34; is a metaphor that tells us to group software tests into buckets of different granularity. It also gives an idea of how many tests we should have in each of these groups. It shows which kinds of tests you should be looking for in the different levels of the pyramid and gives practical examples on how these can be implemented.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/assets/testPyramid.png&#34; alt=&#34;Test Pyramid&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Mike Cohn&#39;s original test pyramid consists of three layers that your test suite should consist of (bottom to top):&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Unit Tests&lt;/li&gt; &#xA; &lt;li&gt;Service Tests&lt;/li&gt; &#xA; &lt;li&gt;User Interface Tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to use Joi module for schema validation in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Joi module is a popular module for data validation. This module validates the data based on schemas. There are various functions like optional(), required(), min(), max(), etc which make it easy to use and a user-friendly module for validating the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Joi = require(&#34;joi&#34;);&#xA;&#xA;// User-defined function to validate the user&#xA;&#xA;function validateUser(user) {&#xA;&#xA;  const JoiSchema = Joi.object({&#xA;&#xA;    username: Joi.string().min(5).max(30).required(),&#xA;&#xA;    email: Joi.string().email().min(5).max(50).optional(),&#xA;&#xA;    date_of_birth: Joi.date().optional(),&#xA;&#xA;    account_status: Joi.string()&#xA;      .valid(&#34;activated&#34;)&#xA;      .valid(&#34;unactivated&#34;)&#xA;      .optional(),&#xA;  }).options({ abortEarly: false });&#xA;&#xA;  return JoiSchema.validate(user);&#xA;}&#xA;&#xA;const user = {&#xA;  username: &#34;Deepak Lucky&#34;,&#xA;  email: &#34;deepak.lucky@gmail.com&#34;,&#xA;  date_of_birth: &#34;2000-07-07&#34;,&#xA;  account_status: &#34;activated&#34;,&#xA;};&#xA;&#xA;let response = validateUser(user);&#xA;&#xA;if (response.error) {&#xA;  console.log(response.error.details);&#xA;} else {&#xA;  console.log(&#34;Validated Data&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;⚝ &lt;a href=&#34;https://codesandbox.io/s/schema-validation-using-joi-s2nhzs&#34;&gt;Try this example on CodeSandbox&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;# 18. NODE.JS MISCELLANEOUS&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Q. How to improve Node.js performance?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Asynchronous Functions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Using asynchronous functions in an application that heavily uses I/O operations will improve it. This is because the CPU will be able to handle multiple requests simultaneously due to non-blocking I/O, while one of these requests is making an Input/Output operation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fs = require(&#39;fs&#39;);&#xA;&#xA;// Performing a blocking I/O&#xA;var file = fs.readFileSync(&#39;/etc/file.txt&#39;);&#xA;console.log(file);&#xA;&#xA;// Performing a non-blocking I/O&#xA;fs.readFile(&#39;/etc/file.txt&#39;, function(err, file) {&#xA;    if (err) return err;&#xA;    console.log(file);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Query Optimization:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Basic tips to improve your database performance/optimization overview&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Indexing&lt;/strong&gt; - Indexing is an approach to optimize the performance of a database by minimizing the number of disk accesses required when a query is processed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Avoid SELECT&lt;/strong&gt; - Use the SELECT statement to query only the data you need and avoid extra fetching loads to your database.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- query1&#xA;SELECT * FROM Customers&#xA;&#xA;-- query2 (optimized)&#xA;SELECT FirstName, LastName, Address, City, State, Zip FROM Customers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Use LIMIT&lt;/strong&gt; - LIMIT will return only the specified number of records.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;SELECT FirstName, LastName, Address, City, State, Zip FROM Customers LIMIT 100&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Wildcard (%)&lt;/strong&gt; - Use wildcard (%) character appropriately&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- SELECT customers whose first names start with &#34;Avi&#34;&#xA;&#xA;-- query1&#xA;SELECT FirstName from Customers where FirstName like &#39;%avi%&#39;&#xA;&#xA;-- query2 (optimized)&#xA;SELECT FirstName from Customers where FirstName like &#39;avi%&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Caching:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Caching is one of the common ways of improving the Node Js performance. A cache is a memory buffer where frequently accessed data is temporarily stored to be accessed quicker. Cached data is then retrieved without having to access the origin. Caching will improve your app response time and even reduce some costs such as bandwidth and data volumes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Redis cache&lt;/strong&gt; is entirely asynchronous with optimal performance to handle cached data requests in a single thread.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Memcached&lt;/strong&gt; stores data across different nodes. It uses a hashing schema that provides a hash table functionality. These ensure that adding, or removing a server node does not significantly change the mapping of the keys to server nodes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Node-cache&lt;/strong&gt; works almost like Memcached with the set, get, and delete methods. It has a timeout that deletes data from the cache when the timeout expires.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Nginx&lt;/strong&gt; will help maintain load balance. Nginx will help cache static files, that will drastically offload the work of the application server. It offers low memory usage and high concurrency.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. Load Balancing:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a typical challenge to create performant applications that can handle a huge number of incoming connections. Load balancing is the term for this method. The cluster module to allow load balancing and distribute incoming connections across all workers in an environment&#39;s numerous CPU cores using a &lt;strong&gt;round-robin&lt;/strong&gt; technique.&lt;/p&gt; &#xA;&lt;p&gt;Using the PM2 process manager to keep applications alive indefinitely is another option. PM2 includes a cluster feature that allows you to run numerous processes over all cores without having to worry about changing the code to use the native cluster module.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. Real-time Monitoring:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gauging the current level of performance of an application may require running different kinds of tests, such as the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Load testing:&lt;/strong&gt; refers to the practice of simulating the expected usage of a system and measuring its response as the workload increases.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Stress testing:&lt;/strong&gt; designed to measure how a system performs beyond the limits of normal working conditions. Its goal is to determine how much the system can handle before it fails and how it attempts to recover from a failure.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Spike testing:&lt;/strong&gt; helps to test the behavior of an application when it receives a drastic increase or decrease in load.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scalability testing:&lt;/strong&gt; used to find the point at which the application stops scaling and identify the reasons behind it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Volume testing:&lt;/strong&gt; determines if a system can cope with large amounts of data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Endurance testing:&lt;/strong&gt; helps evaluate the behavior of a software application under sustained load for a long period, to catch problems such as memory leaks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. Use HTTP/2:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The HTTP/2 in a Node.js application make web browsing faster and easier while reducing bandwidth usage. HTTP/2 is aimed at increasing performance and addressing concerns with HTTP/1.x.&lt;/p&gt; &#xA;&lt;p&gt;HTTP/2 has the following features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Header Compression&lt;/strong&gt; - This disables unnecessary headers and compels all HTTP headers to be sent compressed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Multiplexing&lt;/strong&gt; - This allows multiple requests to simultaneously retrieve resources and response messages over a single TCP connection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;7. Stateless Authentication:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stateless authentication on the client-side with the help of JSON Web Token ( &lt;strong&gt;JWT&lt;/strong&gt; ) provides great speed to the application. In this Stateless Authentication procedure, a web token is created whenever the user login into the website. It contains all the required user information, which is sent back to the respective user for authenticating all API requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;8. Module bundlers and task runners:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Module bundlers are build tools for processing groups of modules and their dependencies into a file or group of files. This especially includes images, JavaScript, and CSS files. The process that makes this possible involves module bundlers (e.g., webpack, Parcel, Rollup) and task runners (e.g., Gulp, Grunt, etc.).&lt;/p&gt; &#xA;&lt;p&gt;This allows for complex transforms, such as shortening multicharacter variable names or using a shorter syntax that&#39;s equivalent to the original code and combining several JavaScript files into one to reduce the number of network requests.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;9. Script Tracing and Logging:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Logging helps track your application activities and traffic. When an app is running, it is possible to get fatal errors (even though your app was running properly after production testing).&lt;/p&gt; &#xA;&lt;p&gt;Commonly used methods for logging in Node.js are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Winston&lt;/strong&gt; - is a multi-transport async logger, which is simple, universal, and extremely versatile. It makes logging more flexible and extensible. It is the most popular logger based on NPM stats. Winston has different transports with different default levels that indicate message priority. These levels include ( error, warn, info, http, verbose, debug, silly )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Morgan&lt;/strong&gt; - Morgan is an HTTP request logger middleware for Node.js applications. Morgan gives insight on how your app is being used and alerts you on potential errors and issues that could be threats to your application.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;)&#xA;const fs = require(&#39;fs&#39;)&#xA;const morgan = require(&#39;morgan&#39;)&#xA;const path = require(&#39;path&#39;)&#xA; &#xA;const app = express()&#xA; &#xA;// create a write stream (in append mode)&#xA;const accessLogStream = fs.createWriteStream(path.join(__dirname, &#39;access.log&#39;), { flags: &#39;a&#39; })&#xA; &#xA;// setup the logger&#xA;app.use(morgan(&#39;combined&#39;, { stream: accessLogStream }))&#xA; &#xA;app.get(&#39;/&#39;, function (req, res) {&#xA;  res.send(&#39;hello, world!&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;10. Gzip Compression:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Gzip compresses HTTP requests and responses. Gzip compresses responses before sending them to the browser, thus, the browser takes a shorter time to fetch them. Gzip also compresses the request to the remote server, which significantly increases web performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const compression = require(&#34;compression&#34;);&#xA;const express = require(&#34;express&#34;);&#xA;const app = express();&#xA;&#xA;// compress all responses&#xA;app.use(compression());&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is crypto in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The Node.js Crypto module supports cryptography. It provides cryptographic functionality that includes a set of wrappers for open SSL&#39;s hash HMAC, cipher, decipher, sign and verify functions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Hash&lt;/strong&gt;: A hash is a fixed-length string of bits i.e. procedurally and deterministically generated from some arbitrary block of source data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;HMAC&lt;/strong&gt;: HMAC stands for Hash-based Message Authentication Code. It is a process for applying a hash algorithm to both data and a secret key that results in a single final hash.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Encryption Example using Hash and HMAC&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);  &#xA;const secret = &#39;abcdefg&#39;;  &#xA;const hash = crypto.createHmac(&#39;sha256&#39;, secret)  &#xA;                   .update(&#39;Welcome to Node.js&#39;)  &#xA;                   .digest(&#39;hex&#39;);  &#xA;console.log(hash);  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Encryption example using Cipher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);  &#xA;const cipher = crypto.createCipher(&#39;aes192&#39;, &#39;a password&#39;);  &#xA;&#xA;const encrypted = cipher.update(&#39;Hello Node.js&#39;, &#39;utf8&#39;, &#39;hex&#39;);  &#xA;encrypted += cipher.final(&#39;hex&#39;);  &#xA;&#xA;console.log(encrypted);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decryption example using Decipher&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);  &#xA;const decipher = crypto.createDecipher(&#39;aes192&#39;, &#39;a password&#39;);  &#xA;&#xA;const encrypted = &#39;4ce3b761d58398aed30d5af898a0656a3174d9c7d7502e781e83cf6b9fb836d5&#39;;  &#xA;const decrypted = decipher.update(encrypted, &#39;hex&#39;, &#39;utf8&#39;);  &#xA;decrypted += decipher.final(&#39;utf8&#39;);  &#xA;&#xA;console.log(decrypted);  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to execute an external program from within Node.js?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { exec } = require(&#39;child_process&#39;);&#xA;&#xA;exec(&#39;&#34;/path/to/test file/test.sh&#34; arg1 arg2&#39;);&#xA;&#xA;exec(&#39;echo &#34;The \\$HOME variable is $HOME&#34;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is REPL?&lt;/h2&gt; &#xA;&lt;p&gt;REPL (READ, EVAL, PRINT, LOOP) is a computer environment similar to Shell (Unix/Linux) and command prompt. Node comes with the REPL environment when it is installed. System interacts with the user through outputs of commands/expressions used. It is useful in writing and debugging the codes. The work of REPL can be understood from its full form:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Read&lt;/strong&gt;: It reads the inputs from users and parses it into JavaScript data structure. It is then stored to memory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Eval&lt;/strong&gt;: The parsed JavaScript data structure is evaluated for the results.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Print&lt;/strong&gt;: The result is printed after the evaluation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Loop&lt;/strong&gt;: Loops the input command. To come out of NODE REPL, press ctrl+c twice&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Simple Expression&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;$ node&#xA;&amp;gt; 10 + 20&#xA;30&#xA;&amp;gt; 10 + ( 20 * 30 ) - 40&#xA;570&#xA;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What does the runtime environment mean in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The Node.js runtime is the software stack responsible for installing your web service&#39;s code and its dependencies and running your service.&lt;/p&gt; &#xA;&lt;p&gt;The Node.js runtime for App Engine in the standard environment is declared in the &lt;code&gt;app.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;runtime: nodejs10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The runtime environment is literally just the environment your application is running in. This can be used to describe both the hardware and the software that is running your application. How much RAM, what version of node, what operating system, how much CPU cores, can all be referenced when talking about a runtime environment.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. Explain usage of NODE_ENV?&lt;/h2&gt; &#xA;&lt;p&gt;NODE_ENV is an environment variable made popular by the express web server framework. When a node application is run, it can check the value of the environment variable and do different things based on the value.&lt;/p&gt; &#xA;&lt;p&gt;For example, when we work on a project and there are production and development environments. We don&#39;t need to use caching in the development env. So we set&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;NODE_ENV=development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and use the code below&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;if (process.env.NODE_ENV === &#39;development&#39;)&#xA;    useCaching = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon that, if the project runs on production it will use caching.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How assert works in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;The assert module provides a way of testing expressions. If the expression evaluates to 0, or false, an assertion failure is being caused, and the program is terminated.&lt;/p&gt; &#xA;&lt;p&gt;This module was built to be used internally by Node.js.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Sample usage&#xA;&#xA;const assert = require(&#39;assert&#39;);&#xA;assert(50 &amp;gt; 70, &#34;50 is less than 70.&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is the use of DNS module in Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;DNS is a node module used to do name resolution facility which is provided by the operating system as well as used to do an actual DNS lookup. No need for memorising IP addresses – DNS servers provide a nifty solution of converting domain or subdomain names to IP addresses. This module provides an asynchronous network wrapper and can be imported using the following syntax.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;dns.lookup()&lt;/code&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);  &#xA;dns.lookup(&#39;www.google.com&#39;, (err, addresses, family) =&amp;gt; {  &#xA;  console.log(&#39;addresses:&#39;, addresses);  &#xA;  console.log(&#39;family:&#39;,family);  &#xA;});  &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; &lt;code&gt;resolve4()&lt;/code&gt; and &lt;code&gt;reverse()&lt;/code&gt; functions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);  &#xA;dns.resolve4(&#39;www.google.com&#39;, (err, addresses) =&amp;gt; {  &#xA;  if (err) throw err;  &#xA;  console.log(`addresses: ${JSON.stringify(addresses)}`);  &#xA;  addresses.forEach((a) =&amp;gt; {  &#xA;    dns.reverse(a, (err, hostnames) =&amp;gt; {  &#xA;      if (err) {  &#xA;        throw err;  &#xA;      }  &#xA;      console.log(`reverse for ${a}: ${JSON.stringify(hostnames)}`);  &#xA;    });  &#xA;  });  &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt; Print the localhost name using &lt;code&gt;lookupService()&lt;/code&gt; function&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const dns = require(&#39;dns&#39;);  &#xA;dns.lookupService(&#39;127.0.0.1&#39;, 22, (err, hostname, service) =&amp;gt; {  &#xA;  console.log(hostname, service);  &#xA;    // Prints: localhost  &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What is JIT and how is it related to Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js has depended on the V8 JavaScript engine to provide code execution in the language. The V8 is a JavaScript engine built at the google development center, in Germany. It is open source and written in C++. It is used for both client side (Google Chrome) and server side (node.js) JavaScript applications. A central piece of the V8 engine that allows it to execute JavaScript at high speed is the JIT (Just In Time) compiler. This is a dynamic compiler that can optimize code during runtime. When V8 was first built the JIT Compiler was dubbed FullCodegen. Then, the V8 team implemented Crankshaft, which included many performance optimizations that FullCodegen did not implement.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;V8&lt;/code&gt; was first designed to increase the performance of the JavaScript execution inside web browsers. In order to obtain speed, V8 translates JavaScript code into more efficient machine code instead of using an interpreter. It compiles JavaScript code into machine code at execution by implementing a JIT (Just-In-Time) compiler like a lot of modern JavaScript engines such as SpiderMonkey or Rhino (Mozilla) are doing. The main difference with V8 is that it doesn&#39;t produce bytecode or any intermediate code.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to generate and verify checksum of the given string in Nodejs&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;checksum&lt;/strong&gt; (aka &lt;strong&gt;hash sum&lt;/strong&gt;) calculation is a one-way process of mapping an extensive data set of variable length (e.g., message, file), to a smaller data set of a fixed length (hash). The length depends on a hashing algorithm.&lt;/p&gt; &#xA;&lt;p&gt;For the checksum generation, we can use node &lt;code&gt;crypto()&lt;/code&gt; module. The module uses &lt;code&gt;createHash(algorithm)&lt;/code&gt; to create a checksum (hash) generator. The algorithm is dependent on the available algorithms supported by the version of OpenSSL on the platform.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const crypto = require(&#39;crypto&#39;);&#xA;&#xA;// To get a list of all available hash algorithms&#xA;crypto.getHashes() // [ &#39;md5&#39;, &#39;sha1&#39;, &#39;sha3-256&#39;, ... ]&#xA;&#xA;  &#xA;// Create hash of SHA1 type&#xA;const key = &#34;MY_SECRET_KEY&#34;;&#xA;&#xA;&#xA;// &#39;digest&#39; is the output of hash function containing  &#xA;// only hexadecimal digits&#xA;hashPwd = crypto.createHash(&#39;sha1&#39;).update(key).digest(&#39;hex&#39;);&#xA;  &#xA;console.log(hashPwd); //ef5225a03e4f9cc953ab3c4dd41f5c4db7dc2e5b&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. How to gracefully shutdown Node.js Server?&lt;/h2&gt; &#xA;&lt;p&gt;The graceful shutdown of our application indicates when all of the resources it used and all of the traffic and/or data processing what it handled are closed and released properly. It means that no database connection remains open and no ongoing request fails because we stop our application.&lt;/p&gt; &#xA;&lt;p&gt;Possible scenarios for a graceful web server shutdown:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handle process kill signal&lt;/li&gt; &#xA; &lt;li&gt;Stop new requests from client&lt;/li&gt; &#xA; &lt;li&gt;Close all data process&lt;/li&gt; &#xA; &lt;li&gt;Exit from process&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function shutdown() {&#xA;  server.close(function onServerClosed(err) {&#xA;    if (err) {&#xA;      console.error(err);&#xA;      process.exit(1);&#xA;    }&#xA;&#xA;    closeMyResources(function onResourcesClosed(err) {&#xA;      // error handling&#xA;      process.exit();&#xA;    });&#xA;  });&#xA;}&#xA;&#xA;process.on(&#34;SIGTERM&#34;, function onSigterm() {&#xA;  console.info(&#34;Got SIGTERM. Graceful shutdown start&#34;,  new Date().toISOString());&#xA;  // start graceul shutdown here&#xA;  shutdown();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What kind of web application should never be built by using Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js development has many benefits, but it won&#39;t provide the best performance for some application&#39;s needs or processes. Here are the points for which developers or businesses must avoid Node.js:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. A CPU-Heavy Application:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js uses an event-based, non-blocking I/O architecture and only has one CPU – all of that intensive CPU processing would block incoming requests. As a result of the high-end number crunching, the thread might get stuck.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. A Relational Database-Backed Server-Side App:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can also develop a standard web application on the server using Node.js and express.js. However, the responsiveness of Node.js will be hampered if these web applications consume a lot of CPU power. Because Node.js Relational DB tool is still in beta, it&#39;s best to use other environments to conduct relational operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. Developing simple CRUD application:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use Node.js for such applications, but the performance and power for which Node.js is known would remain useless. Hence, it is strongly recommended to go for other frameworks or environments for developing simple HTML application instead of Node.js.&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the types of applications you can build with Node.js?&lt;/h2&gt; &#xA;&lt;p&gt;Node.js is a JavaScript runtime environment built upon event-driven programming that enables non-blocking I/O (Input/Output) capable of serving multiple concurrent events in a single thread. Non-blocking I/O makes Node.js very fast, lightweight, scalable, and efficient in handling data-heavy and I/O-heavy workloads characteristic of several types of web applications.&lt;/p&gt; &#xA;&lt;p&gt;Types of applications you can build with Node.js&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IoT (Internet of Things)&lt;/li&gt; &#xA; &lt;li&gt;Real-Time Chat Application&lt;/li&gt; &#xA; &lt;li&gt;Single-Page Application&lt;/li&gt; &#xA; &lt;li&gt;Social Media Platform&lt;/li&gt; &#xA; &lt;li&gt;Streaming App&lt;/li&gt; &#xA; &lt;li&gt;Online Payment Processor&lt;/li&gt; &#xA; &lt;li&gt;Remote Collaboration Tool&lt;/li&gt; &#xA; &lt;li&gt;CRM Tool&lt;/li&gt; &#xA; &lt;li&gt;Advanced Fintech App&lt;/li&gt; &#xA; &lt;li&gt;Content Management System&lt;/li&gt; &#xA; &lt;li&gt;E-Learning Platform&lt;/li&gt; &#xA; &lt;li&gt;E-Commerce Platform&lt;/li&gt; &#xA; &lt;li&gt;Ridesharing App&lt;/li&gt; &#xA; &lt;li&gt;Project Management Tools&lt;/li&gt; &#xA; &lt;li&gt;Location-Based App&lt;/li&gt; &#xA; &lt;li&gt;Online Publishing Platforms&lt;/li&gt; &#xA; &lt;li&gt;ERP Tool&lt;/li&gt; &#xA; &lt;li&gt;Websites With Server-Side Rendering&lt;/li&gt; &#xA; &lt;li&gt;FastCGI Servers&lt;/li&gt; &#xA; &lt;li&gt;Command Line Tools&lt;/li&gt; &#xA; &lt;li&gt;API Servers&lt;/li&gt; &#xA; &lt;li&gt;Desktop Apps&lt;/li&gt; &#xA; &lt;li&gt;Backend for Mobile Apps&lt;/li&gt; &#xA; &lt;li&gt;Server Management Services&lt;/li&gt; &#xA; &lt;li&gt;Notification Centre&lt;/li&gt; &#xA; &lt;li&gt;Custom DNS Server&lt;/li&gt; &#xA; &lt;li&gt;Static Site Generator&lt;/li&gt; &#xA; &lt;li&gt;Game Servers, Game Clients&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Q. What are the use cases for the Node.js &#34;vm&#34; core module?&lt;/h2&gt; &#xA;&lt;p&gt;The &#34;VM&#34; module enables compiling and running code within V8 Virtual Machine contexts. JavaScript code can be compiled and run immediately or compiled, saved, and run later. It provides a way of executing JavaScript on a virtual machine.&lt;/p&gt; &#xA;&lt;p&gt;A common use case is to run the code in a different V8 Context. This means invoked code has a different global object than the invoking code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Syntax:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const vm = require(&#39;vm&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;VM Methods:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;createContext()&lt;/td&gt; &#xA;   &lt;td&gt;Prepares a virtual machine, or sandbox, where you can execute scripts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;isContext()&lt;/td&gt; &#xA;   &lt;td&gt;Returns true if the specified sandbox has been created by the createContext() method&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;runInContext()&lt;/td&gt; &#xA;   &lt;td&gt;Executes JavaScript code in the specified context, and returns the result&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;runInDebug()&lt;/td&gt; &#xA;   &lt;td&gt;Executes JavaScript inside the debug context&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;runInNewContext()&lt;/td&gt; &#xA;   &lt;td&gt;Executes JavaScript code in a new context, and returns the result&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;runInThisContext()&lt;/td&gt; &#xA;   &lt;td&gt;Executes JavaScript code in the global context, and returns the result&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const vm = require(&#34;vm&#34;);&#xA;&#xA;const x = 10;&#xA;const context = { x: 20 };&#xA;&#xA;vm.createContext(context); // Contextify the object.&#xA;&#xA;const code = &#34;x += 10&#34;;&#xA;// Initially, x has the value 20 because that is the value of &#34;context.x&#34;&#xA;vm.runInContext(code, context);&#xA;&#xA;console.log(context.x); // 30&#xA;console.log(x); // 10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: The vm module is not a security mechanism. Do not use it to run untrusted code.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt; &#xA;&lt;h4&gt;Q. What is Distributed Denial of Service (DDoS) attacks and how to secure NodeJS REST API from it?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. What are SOLID principles?&lt;/h4&gt; &#xA;&lt;h4&gt;Q. How to develop Node.js app using SOLID principles?&lt;/h4&gt; &#xA;&lt;div align=&#34;right&#34;&gt; &#xA; &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/learning-zone/nodejs-basics/master/#table-of-contents&#34;&gt;↥ back to top&lt;/a&gt;&lt;/b&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
</feed>