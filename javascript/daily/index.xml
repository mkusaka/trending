<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-12-07T01:31:52Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>netptop/siteproxy</title>
    <updated>2024-12-07T01:31:52Z</updated>
    <id>tag:github.com,2024-12-07:/netptop/siteproxy</id>
    <link href="https://github.com/netptop/siteproxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;reverse proxy, online proxy, 反向代理,免翻墙访问Youtube/twitter/Google, 支持github和telegram web登录(请注意不要通过不信任的代理进行登录)。支持DuckDuckGo AI Chat(可免费访问chatGPT3.5和Claude3)&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;SiteProxy 2.0&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/netptop/siteproxy/master/README_english.md&#34;&gt;English ver&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;SiteProxy 是一个&lt;strong&gt;功能强大的在线代理工具&lt;/strong&gt;，采用了最新的技术，提升了代理的稳定性和兼容性。我们致力于提供 &lt;strong&gt;简单、高效、安全&lt;/strong&gt; 的代理服务，为用户提供最佳的互联网访问体验。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;超高速性能&lt;/strong&gt;：采用 Hono 替代传统的Express 服务器，性能提升 4 倍，带来更流畅的使用体验。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;云端部署&lt;/strong&gt;：完美支持 Cloudflare Worker 部署，快速且高效。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;AI 智能聊天&lt;/strong&gt;：集成 DuckDuckGo AI Chat，免费提供 GPT-3.5 和 Claude 3，让你的代理服务更加智能。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;高级安全保护&lt;/strong&gt;：支持密码控制代理，只有授权用户才能访问，大幅提升安全性。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;零配置使用&lt;/strong&gt;：用户无需进行任何客户端配置，只需访问代理网址即可畅游全球互联网。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;便捷登录&lt;/strong&gt;：全面支持 GitHub 和 Telegram Web 登录，操作简单快捷。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;强力加密&lt;/strong&gt;：采用 &lt;code&gt;RSA + AES&lt;/code&gt; 双重加密技术，保护用户登录密码，防止中间人攻击。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;隐私保护&lt;/strong&gt;：通过代理网址访问全球互联网，同时隐藏用户真实 IP，保护隐私。&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;无缝体验&lt;/strong&gt;：无需任何软件安装和浏览器配置，即可立即使用，提供极致便利的用户体验。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;查看原理&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;                                                 +----&amp;gt; google/youtube&#xA;                             +----------------+  |&#xA;                             |                |  |&#xA;user browser +--------------&amp;gt;+ siteproxy      +-------&amp;gt; wikipedia&#xA;                             |                |  |&#xA;                             +----------------+  |&#xA;                                                 +----&amp;gt; chinese forums&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!CAUTION] 严禁将本项目用于任何非法用途，否则后果自负&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] 由于支持多个网站的 Login，为了减少钓鱼风险，Siteproxy 在 2.0 版本对代码进行了混淆，同时禁止了默认主页网址的修改。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;展示&lt;/h2&gt; &#xA;&lt;p&gt;来自 Telegram 的网友的展示 Siteproxy 部署后，加上优选IP的速度测试： &lt;img src=&#34;https://raw.githubusercontent.com/netptop/siteproxy/master/test.png&#34; alt=&#34;Download Speed test&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;部署到 Cloudflare Pages&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;确保域名管理&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;确保你的域名已经在 Cloudflare 名下进行管理。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;克隆仓库&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;git clone https://github.com/netptop/siteproxy.git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;编辑配置文件&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;使用文本编辑器打开 &lt;code&gt;siteproxy/build/cf_page/_worker.js&lt;/code&gt; 文件。&lt;/li&gt; &#xA;   &lt;li&gt;搜索并替换字符串 &lt;code&gt;http://localhost:5006&lt;/code&gt; 为你的代理服务器域名, 必须替换为HTTPS，例如 &lt;code&gt;https://your-proxy-domain.com&lt;/code&gt;（请使用 &lt;code&gt;https&lt;/code&gt;）。&lt;/li&gt; &#xA;   &lt;li&gt;搜索并替换字符串 &lt;code&gt;user22334455&lt;/code&gt; 为你想设置的访问密码。如果密码为空，则表示不需要密码即可访问。保存文件。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;登录 Cloudflare&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;进入 &lt;strong&gt;Workers 和 Pages&lt;/strong&gt; 部分，选择 &lt;strong&gt;使用直接上传创建&lt;/strong&gt; 一个 Page，上传 &lt;code&gt;siteproxy/build/cf_page&lt;/code&gt; 目录进行部署。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;配置自定义域&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;在 &lt;strong&gt;Workers &amp;amp; Pages&lt;/strong&gt; 页面，打开刚才部署的 Page。&lt;/li&gt; &#xA;   &lt;li&gt;点击顶部的 &lt;strong&gt;自定义域&lt;/strong&gt;，然后选择 &lt;strong&gt;添加自定义域&lt;/strong&gt;，设置为你的代理域名并激活域名。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;访问代理服务&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;现在可以通过 &lt;code&gt;https://your-proxy-domain.com/your-password/&lt;/code&gt; 访问代理服务（确保最后的斜杠存在）。注意将域名和密码替换为你自己的。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;部署到 Cloudflare Workers&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;确保域名管理&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;确保你的域名已经在 Cloudflare 名下进行管理。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;下载并编辑 Worker 文件&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;下载 &lt;code&gt;build/worker.js&lt;/code&gt; 文件：&lt;a href=&#34;https://raw.githubusercontent.com/netptop/siteproxy/master/build/worker.js&#34;&gt;链接&lt;/a&gt;，并使用文本编辑器打开。&lt;/li&gt; &#xA;   &lt;li&gt;搜索并替换字符串 &lt;code&gt;http://localhost:5006&lt;/code&gt; 为你的代理服务器域名，必须替换为HTTPS，例如 &lt;code&gt;https://your-worker-domain.com&lt;/code&gt;（请使用 &lt;code&gt;https&lt;/code&gt;）。&lt;/li&gt; &#xA;   &lt;li&gt;搜索并替换字符串 &lt;code&gt;user22334455&lt;/code&gt; 为你想设置的访问密码。如果密码为空，则表示不需要密码即可访问。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;创建 Worker&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;登录 Cloudflare，进入 &lt;strong&gt;Workers 和 Pages&lt;/strong&gt; 部分，创建一个 Worker。&lt;/li&gt; &#xA;   &lt;li&gt;编辑刚才创建的 Worker，将编辑过的 &lt;code&gt;worker.js&lt;/code&gt; 文件内容复制粘贴到 Worker 内部，保存并部署。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;配置自定义域&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;在 &lt;strong&gt;Workers &amp;amp; Pages&lt;/strong&gt; 页面，打开刚才保存的 Worker。&lt;/li&gt; &#xA;   &lt;li&gt;点击顶部的 &lt;strong&gt;设置 -&amp;gt; 触发器&lt;/strong&gt;，然后选择 &lt;strong&gt;添加自定义域&lt;/strong&gt;，设置为你的代理域名。自定义域名设置成功后，DNS 页面应显示对应的 DNS 类型为 Worker。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;访问代理服务&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;现在可以通过 &lt;code&gt;https://your-worker-domain.com/your-password/&lt;/code&gt; 访问代理服务（确保最后的斜杠存在，并替换为你自己的域名和密码）。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;部署到 VPS 或者云服务器&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;创建 SSL 网站&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;使用 &lt;code&gt;certbot&lt;/code&gt; 和 &lt;code&gt;nginx&lt;/code&gt; 创建 SSL 网站。具体用法可以 Google 搜索。&lt;/li&gt; &#xA;   &lt;li&gt;配置 &lt;code&gt;nginx&lt;/code&gt;，确保 &lt;code&gt;/etc/nginx/conf.d/default.conf&lt;/code&gt; 文件包含以下内容： &lt;pre&gt;&lt;code class=&#34;language-nginx&#34;&gt;server {&#xA;   server_name your-proxy.domain.name; #请替换为你的实际域名&#xA;   location / {&#xA;     proxy_pass http://localhost:5006;&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;重启 nginx&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;sudo systemctl restart nginx&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;安装 Node.js v21 或更高版本&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行以下命令： &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash&#xA;source ~/.bashrc&#xA;nvm install v21&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;克隆仓库&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;git clone https://github.com/netptop/siteproxy.git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;进入项目目录&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;cd siteproxy&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;测试运行&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;node bundle.js&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;如果没有错误，按 &lt;code&gt;Ctrl+C&lt;/code&gt; 结束程序。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;配置文件修改&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;打开并修改 &lt;code&gt;config.json&lt;/code&gt; 文件，内容如下： &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;proxy_url&#34;: &#34;https://your-proxy.domain.name&#34;, // 替换为HTTPS加你的代理服务器域名，确保使用 https&#xA;   &#34;token_prefix&#34;: &#34;/user-SetYourPasswordHere/&#34;,  // 设置网站密码，用于防止非法访问，保留首尾的斜杠。为空表示不设置密码&#xA;   &#34;local_listen_port&#34;: 5006, // 不要修改，以确保与 nginx 配置一致&#xA;   &#34;description&#34;: &#34;注意：token_prefix 相当于网站密码，请谨慎设置。 proxy_url 和 token_prefix 合起来就是访问网址。&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;安装 Forever&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;npm install -g forever&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;启动应用&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;forever stopall &amp;amp;&amp;amp; forever start bundle.js&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;访问代理服务&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;在浏览器中访问你的域名，网址为 &lt;code&gt;proxy_url&lt;/code&gt; 加 &lt;code&gt;token_prefix&lt;/code&gt;。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;使用 Cloudflare 加速（可选）&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;参考 Cloudflare 的官方说明进行设置。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;现在，你的代理服务已经成功部署并可以通过浏览器访问。&lt;/p&gt; &#xA;&lt;h2&gt;Docker 部署&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;配置 SSL 证书和 Nginx&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;配置域名对应的 SSL 证书和 Nginx，将其指向本地的 5006 端口。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;克隆仓库&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;git clone https://github.com/netptop/siteproxy.git&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;编辑配置文件&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;打开并修改 &lt;code&gt;config.json&lt;/code&gt; 文件，内容如下： &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;   &#34;proxy_url&#34;: &#34;https://your-proxy-domain.com&#34;, // 替换为你申请到的代理服务器域名&#xA;   &#34;token_prefix&#34;: &#34;/user-SetYourPasswordHere/&#34;,  // 设置网站密码，用于防止非法访问，保留首尾的斜杠&#xA;   &#34;description&#34;: &#34;注意：token_prefix 相当于网站密码，请谨慎设置。 proxy_url 和 token_prefix 合起来就是访问网址。&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;保存文件。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;启动 Docker 容器&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;进入 &lt;code&gt;docker-node&lt;/code&gt; 子目录。&lt;/li&gt; &#xA;   &lt;li&gt;执行命令：&lt;code&gt;sudo docker compose up&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;访问代理服务&lt;/strong&gt;： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;现在可以通过 &lt;code&gt;https://your-proxy-domain.com/user-your-password/&lt;/code&gt; 访问代理服务。请将域名和密码替换为你自己的域名和密码。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;感谢&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;netptop.com 默认主页由 Telgram 网友 SenZyo 设计, 感谢贡献！&lt;/li&gt; &#xA; &lt;li&gt;文档由 &lt;a href=&#34;https://github.com/SNESNya&#34;&gt;LAGSNES&lt;/a&gt; 编写&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;联系方式&lt;/h2&gt; &#xA;&lt;p&gt;Telegram群: &lt;a href=&#34;https://siteproxy.t.me&#34;&gt;https://siteproxy.t.me&lt;/a&gt; E-mail: &lt;a href=&#34;mailto:netptop@gmail.com&#34;&gt;netptop@gmail.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>