<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-20T01:36:47Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ErickWendel/processing-large-reports-in-the-browser</title>
    <updated>2023-07-20T01:36:47Z</updated>
    <id>tag:github.com,2023-07-20:/ErickWendel/processing-large-reports-in-the-browser</id>
    <link href="https://github.com/ErickWendel/processing-large-reports-in-the-browser" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Examples from my video about processing large reports in the browser without any backend&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;processing-large-reports-in-the-browser&lt;/h1&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;This is the examples shown in my live screen about &lt;a href=&#34;https://www.youtube.com/live/-wXPxJYhZeI?feature=share&#34;&gt;Performance and multithreading in browsers + ECMAScript Modules in Web Workers (pt-br)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;First of all, leave your star 🌟 on this repo.&lt;/p&gt; &#xA;&lt;p&gt;Access our &lt;a href=&#34;https://bit.ly/canalerickwendel&#34;&gt;&lt;strong&gt;exclusive telegram channel&lt;/strong&gt;&lt;/a&gt; so I&#39;ll let you know about all the content I&#39;ve been producing&lt;/p&gt; &#xA;&lt;h2&gt;Complete source code&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Access it in &lt;a href=&#34;https://raw.githubusercontent.com/ErickWendel/processing-large-reports-in-the-browser/main/recorded/&#34;&gt;app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Checkout the &lt;a href=&#34;https://erickwendel.github.io/processing-large-reports-in-the-browser/recorded&#34;&gt;live demo&lt;/a&gt; (preferentially on Chrome browser) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Upload the file &lt;a href=&#34;https://raw.githubusercontent.com/ErickWendel/processing-large-reports-in-the-browser/main/recorded/assets/database-small.csv&#34;&gt;database-small.csv&lt;/a&gt; or download the &lt;a href=&#34;https://www.kaggle.com/datasets/foenix/slc-crime?select=SLC_Police_Calls_2013__2016_cleaned_geocoded.csv&#34;&gt;SLC_Police_Calls_2013__2016_cleaned_geocoded.csv(210.83 MB)&lt;/a&gt;on Kaggle.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Have fun!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/8060102/221061262-f9425071-0080-48ff-b69c-55d9036937ba.jpg&#34; alt=&#34;Erick_Wendel_-_Thumbnail_Performance_e_multithreading&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;References:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://caniuse.com/?search=workers&#34;&gt;https://caniuse.com/?search=workers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>yokoffing/Betterfox</title>
    <updated>2023-07-20T01:36:47Z</updated>
    <id>tag:github.com,2023-07-20:/yokoffing/Betterfox</id>
    <link href="https://github.com/yokoffing/Betterfox" rel="alternate"></link>
    <summary type="html">&lt;p&gt;user.js file to harden Firefox and optimize privacy, security, and speed&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/open%20source-yes-orange&#34; alt=&#34;GitHub Maintained&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/maintained-yes-yellow&#34; alt=&#34;GitHub Maintained&#34;&gt; &lt;a href=&#34;https://hits.seeyoufarm.com&#34;&gt;&lt;img src=&#34;https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2Fyokoffing%2FBetter-Fox&amp;amp;count_bg=%2379C83D&amp;amp;title_bg=%23555555&amp;amp;icon=&amp;amp;icon_color=%23E7E7E7&amp;amp;title=visitors&amp;amp;edge_flat=false&#34; alt=&#34;Visitors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Betterfox&lt;/h1&gt; &#xA;&lt;p&gt;about:config tweaks to enhance &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34; title=&#34;Firefox Homepage&#34;&gt;Mozilla Firefox&lt;/a&gt;. Files are updated as needed for your &lt;a href=&#34;http://kb.mozillazine.org/User.js_file&#34;&gt;user.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Made for everyday browsing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;A secure, blazing fast browsing experience. Without breakage.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Betterfox is inspired by the &lt;a href=&#34;https://pmctraining.com/site/wp-content/uploads/2018/04/Law-of-Diminishing-Returns-CHART.png&#34;&gt;law of diminishing returns&lt;/a&gt; and the &lt;a href=&#34;https://medium.com/the-mission/less-is-more-the-minimum-effective-dose-e6d56625931e&#34;&gt;minimum effective dose&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The objective is to make the browser&#39;s defaults sufficient enough for privacy-minded users, but remain trouble-free enough that my grandmother could use it. &#xA; &lt;strike&gt;&#xA;  (That puts a whole new twist on being a foxy grandma!)&#xA; &lt;/strike&gt; Edit: Sorry for the dad joke 😓&lt;/p&gt; &#xA;&lt;h2&gt;Simple goals&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimalism:&lt;/strong&gt; get what isn&#39;t needed out of the way&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Efficiency:&lt;/strong&gt; unleash Firefox&#39;s ability to be fast and performant&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Privacy:&lt;/strong&gt; protect your data without causing site breakage&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Simple configs&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;List&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yokoffing/Betterfox/raw/master/Fastfox.js&#34;&gt;Fastfox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Immensely increase Firefox&#39;s browsing speed. Give Chrome a run for its money!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yokoffing/Betterfox/raw/master/Securefox.js&#34;&gt;Securefox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Telemetry blocked. &lt;a href=&#34;https://blog.mozilla.org/security/2021/08/10/firefox-91-introduces-https-by-default-in-private-browsing/&#34;&gt;HTTPS-by-Default&lt;/a&gt;. &lt;a href=&#34;https://blog.mozilla.org/security/2021/02/23/total-cookie-protection/&#34;&gt;Total Cookie Protection&lt;/a&gt; with &lt;a href=&#34;https://blog.mozilla.org/security/2021/05/18/introducing-site-isolation-in-firefox/&#34;&gt;site isolation&lt;/a&gt;. Enhanced &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Privacy/State_Partitioning&#34;&gt;state&lt;/a&gt; and &lt;a href=&#34;https://blog.mozilla.org/security/2021/01/26/supercookie-protections/&#34;&gt;network&lt;/a&gt; partitioning. Various other enhancements.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yokoffing/Betterfox/raw/master/Peskyfox.js&#34;&gt;Peskyfox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Unclutter the new tab page. Remove &lt;a href=&#34;https://support.mozilla.org/en-US/kb/what-pocket&#34;&gt;Pocket&lt;/a&gt;. Restore &lt;a href=&#34;https://support.mozilla.org/en-US/kb/compact-mode-workaround-firefox&#34;&gt;compact mode&lt;/a&gt; as an option. Stop webpage notifications, pop-ups, and other annoyances.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yokoffing/Betterfox/raw/master/Smoothfox.js&#34;&gt;Smoothfox&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Get Edge-like smooth scrolling on your favorite browser — or choose something more your style.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/yokoffing/Betterfox/raw/master/user.js&#34;&gt;user.js&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;All the essentials. None of the breakage. This is your &lt;code&gt;user.js&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;span&gt;💡&lt;/span&gt; &lt;code&gt;Fastfox&lt;/code&gt;, &lt;code&gt;Securefox&lt;/code&gt;, &lt;code&gt;Peskyfox&lt;/code&gt;, and &lt;code&gt;Smoothfox&lt;/code&gt; are guides to relevant prefs in Firefox. The &lt;code&gt;user.js&lt;/code&gt; is curated from the options located in these documents. Please read the guides to understand the various options hidden in Firefox.&lt;/p&gt; &#xA;&lt;p&gt;While Betterfox is designed to &lt;a href=&#34;https://glosbe.com/en/en/set-and-forget&#34;&gt;set-and-forget&lt;/a&gt;, it contains plenty of options for those who like to tinker.&lt;/p&gt; &#xA;&lt;h2&gt;about:Privacy&lt;/h2&gt; &#xA;&lt;p&gt;Most projects have niche concerns with no regard for speed, annoyances, or mainstream use. But for us, features like WebGL and DRM are still enabled, and you won&#39;t find a setting like &lt;code&gt;privacy.resistFingerprinting&lt;/code&gt; mentioned here.&lt;sup&gt;^&lt;a href=&#34;https://old.reddit.com/r/firefox/comments/wuqpgi/are_there_any_aboutconfig_tweaks_to_get_smooth/ile3whx/?context=3&#34;&gt;&lt;em&gt;why?&lt;/em&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fingerprinting is a high &lt;a href=&#34;https://thenewoil.org/en/guides/prologue/threatmodel/&#34;&gt;threat model&lt;/a&gt; issue that is only reasonably &lt;a href=&#34;https://github.com/arkenfox/user.js/wiki/3.3-Overrides-%5BTo-RFP-or-Not%5D&#34;&gt;addressed by Tor&lt;/a&gt;.&lt;sup&gt;&lt;a href=&#34;https://youtu.be/5NrbdO4yWek?t=4334&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; If your context calls for &lt;em&gt;anonymity&lt;/em&gt; and not just reasonable &lt;em&gt;privacy&lt;/em&gt;, then please use the &lt;a href=&#34;https://www.torproject.org&#34;&gt;Tor Browser&lt;/a&gt;.&lt;sup&gt;^&lt;a href=&#34;https://thenewoil.org/en/guides/prologue/secprivanon/&#34;&gt;&lt;em&gt;what&#39;s the difference?&lt;/em&gt;&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Assumptions&lt;/h2&gt; &#xA;&lt;p&gt;Apply preferences from the &lt;a href=&#34;https://github.com/yokoffing/Betterfox/issues/87&#34;&gt;common overrides&lt;/a&gt; sticky if you want to revert the following behavior:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Firefox &lt;strong&gt;Accessibility Service&lt;/strong&gt; is disabled to improve resource utilization and security. Override this if you use assistive software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Embedded tweets, instagram, reddit posts, and tiktoks&lt;/strong&gt; load on webpages, even though these requests are usually blocked when using &lt;a href=&#34;https://support.mozilla.org/en-US/kb/enhanced-tracking-protection-firefox-desktop#w_strict-enhanced-tracking-protection&#34;&gt;Strict&lt;/a&gt; Enhanced Tracking Protection.&lt;/li&gt; &#xA; &lt;li&gt;The native &lt;strong&gt;password manager&lt;/strong&gt; is disabled. We recommend using &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/keepassxc-browser/&#34;&gt;KeePass&lt;/a&gt;, &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/bitwarden-password-manager/&#34;&gt;Bitwarden&lt;/a&gt;, or &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/1password-x-password-manager&#34;&gt;1Password&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Firefox Sync&lt;/strong&gt; and &lt;strong&gt;Firefox View&lt;/strong&gt; are disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Location requests&lt;/strong&gt; are rejected and &lt;strong&gt;site notifications&lt;/strong&gt; are disabled.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Privacy Suggestions&lt;/h2&gt; &#xA;&lt;p&gt;After applying the &lt;code&gt;user.js&lt;/code&gt; and restarting Firefox:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Change your default search engine. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can also choose a different search engine for Private Windows only: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Go to &lt;em&gt;Settings → Search → Default Search Engine&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Change your default search engine to DuckDuckGo, or &lt;a href=&#34;https://github.com/yokoffing/Betterfox/raw/04c3184359c83d7b58411c3b68f40f3e9d95c373/Securefox.js#L600-L604&#34;&gt;add&lt;/a&gt; a premium search engine like &lt;a href=&#34;https://kagi.com/&#34;&gt;Kagi&lt;/a&gt;.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Enable &lt;strong&gt;sanitize on close&lt;/strong&gt; (&lt;a href=&#34;https://github.com/yokoffing/Betterfox/raw/99f2e860633f307781ddb73d792358ad1bec6af5/Securefox.js#L409-L434&#34;&gt;clear browsing data on shutdown&lt;/a&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can &lt;strong&gt;allow exceptions&lt;/strong&gt; if you want to stay logged in to some sites: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Go to &lt;em&gt;Settings → Privacy &amp;amp; Security → Cookies and Site Data → Manage Exceptions&lt;/em&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Check &lt;em&gt;Delete cookies and site data when Firefox is closed&lt;/em&gt;.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://addons.mozilla.org/blog/ublock-origin-everything-you-need-to-know-about-the-ad-blocker/&#34;&gt;uBlock Origin&lt;/a&gt; to block ads and trackers with our &lt;a href=&#34;https://github.com/yokoffing/filterlists&#34;&gt;custom filters&lt;/a&gt;. For a quick and easy solution, use &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/ghostery/&#34;&gt;Ghostery&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add DNS-level protection like &lt;a href=&#34;https://nextdns.io/?from=xujj63g5&#34;&gt;NextDNS&lt;/a&gt;, and check out the configuration &lt;a href=&#34;https://github.com/yokoffing/NextDNS-Config&#34;&gt;guide&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Recognition&lt;/h2&gt; &#xA;&lt;h3&gt;User Comments&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://old.reddit.com/r/firefox/comments/xsw0zt/comment/iqo0dbv/?context=3&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/browsers/comments/y7w57n/which_browser_do_you_use_on_your_devices/it30hqi/?context=3&#34;&gt;2&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/firefox/comments/z5auzi/firefox_not_properly_usingrecognizing_gpu_poor/iy0kru3&#34;&gt;3&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/firefox/comments/z5auzi/firefox_not_properly_usingrecognizing_gpu_poor/iy36hyz&#34;&gt;4&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/firefox/comments/1030fri/why_does_firefox_feel_slowchoppy/j2wu4ow/&#34;&gt;5&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/pcmasterrace/comments/zwioe1/what_browser_will_you_be_using_in_2023_please/j1wmbxo/&#34;&gt;6&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/firefox/comments/zodxzx/performance_optimizations_for_firefox/j0memta/?context=2&#34;&gt;7&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/browsers/comments/106qwyk/in_contrast_to_previous_post_what_do_you_like/j3irpx0/?context=2&#34;&gt;8&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/firefox/comments/115va7d/list_of_aboutconfiguserjs_privacy_tweaks/j9700bc/?context=2&#34;&gt;9&lt;/a&gt; &lt;a href=&#34;https://old.reddit.com/r/browsers/comments/11q6je7/is_block_or_snoof_browser_fingerprint_better/jc2mhcx/?context=2&#34;&gt;10&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Browser Integration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Floorp-Projects/Floorp#-betterfox&#34;&gt;Floorp Browser&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://github.com/Floorp-Projects/Floorp/issues/233#issuecomment-1543557167&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;https://blog.ablaze.one/3135/2023-04-01/&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; | &lt;a href=&#34;https://github.com/Floorp-Projects/Floorp/raw/f63e87016d88535aafa2b57d690442b9a69cbaa5/toolkit/content/license.html#L200-L224&#34;&gt;files&lt;/a&gt; (April 2023)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pulse-browser/browser#%EF%B8%8F-credits&#34;&gt;Pulse Browser&lt;/a&gt; | &lt;a href=&#34;https://github.com/pulse-browser/browser/tree/alpha/src/browser/app/profile&#34;&gt;files&lt;/a&gt; (Dec 2021)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ghostery/user-agent-desktop#community&#34;&gt;Ghostery Private Browser&lt;/a&gt; &lt;sup&gt;&lt;a href=&#34;https://web.archive.org/web/20210509171835/https://www.ghostery.com/ghostery-dawn-update-more/&#34;&gt;1&lt;/a&gt; &lt;a href=&#34;https://web.archive.org/web/20210921114333/https://www.ghostery.com/ghostery-dawn-product-update/&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; | &lt;a href=&#34;https://github.com/ghostery/user-agent-desktop/tree/main/brands/ghostery/branding/pref&#34;&gt;files&lt;/a&gt; (Feb 2021)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;YouTube&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/Fr8UFJzpNls&#34;&gt;Firefox is NOT private. Here&#39;s how to fix it.&lt;/a&gt; (April 2023)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/j5r6jFE8gic&#34;&gt;The ULTIMATE Browser Tier List&lt;/a&gt; (Mar 2023)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://youtu.be/w0SJFED5xK0?t=220&#34;&gt;I Hate Firefox. But I&#39;m Still Switching Back to It.&lt;/a&gt; (Nov 2022)&lt;/li&gt; &#xA; &lt;li&gt;[Español] &lt;a href=&#34;https://www.youtube.com/watch?v=3XtoONmq5_Q&#34;&gt;Optimize and Accelerate Firefox&lt;/a&gt; (Nov 2022)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=N8IOJiOFVEk&#34;&gt;How To Improve Firefox Performance&lt;/a&gt; (Dec 2021)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Podcasts&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://anchor.fm/ghostories/episodes/S2E6-We-Talking-Ghostery-Dawn----Again-er0q02/a-a4o5vmh&#34;&gt;GhoSTORIES with Franz &amp;amp; Pete&lt;/a&gt;, S2|E6, 17:05-18:40 (Feb 2021)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dl.fullcirclemagazine.org/issue193_en.pdf&#34;&gt;Full Circle Magazine&lt;/a&gt; (May 2023)&lt;/li&gt; &#xA; &lt;li&gt;[Russian] &lt;a href=&#34;https://www.opennet.ru/opennews/art.shtml?num=59076&#34;&gt;The Pulse Browser project develops an experimental fork of Firefox&lt;/a&gt; (May 2023)&lt;/li&gt; &#xA; &lt;li&gt;[German] &lt;a href=&#34;https://www.computerbild.de/artikel/cb-Tipps-Software-Pulse-Browser-Review-ein-Firefox-Fork-mit-Seitenleiste-wie-bei-Opera-35644139.html#:~:text=Noch%20mehr%20Speed%2DFeatures&#34;&gt;Pulse Browser Review: Firefox fork with Turbo tweaks and Opera sidebar&lt;/a&gt; (April 2023)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.appdate.lk/technology/2023-browser-showdown/&#34;&gt;2023 Browser Showdown: Comparing Chrome, Brave, Firefox, Vivaldi, and Opera&lt;/a&gt; (Jan 2023)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Guides&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/FREEMEDIAHECKYEAH/wiki/storage/#wiki_privacy_hardened_firefox&#34;&gt;FMHY Browser Tools: Privacy Hardened Firefox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/black7375/Firefox-UI-Fix/wiki/Tips#privacy&#34;&gt;Firefox-UI-Fix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git.nixnet.services/Narsil/desktop_user.js#thanks&#34;&gt;Narsil/desktop_user.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pyllyukko/user.js&#34;&gt;pyllyukko/user.js&lt;/a&gt; &lt;a href=&#34;https://jm42.github.io/compare-user.js/&#34;&gt;comparator&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributions&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ghostery/user-agent-desktop/issues?q=is%3Apr+is%3Aissue+author%3Ayokoffing+&#34;&gt;Ghostery Private Browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://orionfeedback.org/?author=yokoffing&#34;&gt;Orion Browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kagifeedback.org/?author=yokoffing&#34;&gt;Kagi Search Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yokoffing/filterlists#contributions&#34;&gt;Various blocklists&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credit&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Many thanks to the &lt;a href=&#34;https://www.mozilla.org/en-US/firefox/new/&#34;&gt;Firefox&lt;/a&gt; team and to the people working on &lt;a href=&#34;https://bugzilla.mozilla.org/home&#34;&gt;Bugzilla&lt;/a&gt;, fighting for the &lt;a href=&#34;https://builtin.com/software-engineering-perspectives/open-web&#34;&gt;open web&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;This repository benefits from the ongoing research provided by &lt;a href=&#34;https://github.com/arkenfox/user.js&#34;&gt;arkenfox&lt;/a&gt;. They are the foundation to any worthwhile &lt;code&gt;user.js&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;a href=&#34;https://www.websitecounterfree.com&#34;&gt;&lt;img src=&#34;https://www.websitecounterfree.com/c.php?d=9&amp;amp;id=19653&amp;amp;s=1&#34; border=&#34;0&#34; alt=&#34;Free Website Counter&#34;&gt;&lt;/a&gt;&#xA; &lt;br&gt; &#xA; &lt;div align=&#34;center&#34;&gt;&#xA;  since 23 July 2022&#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>oblador/react-native-vector-icons</title>
    <updated>2023-07-20T01:36:47Z</updated>
    <id>tag:github.com,2023-07-20:/oblador/react-native-vector-icons</id>
    <link href="https://github.com/oblador/react-native-vector-icons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Customizable Icons for React Native with support for image source and full styling.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/378279/12009887/33f4ae1c-ac8d-11e5-8666-7a87458753ee.png&#34; alt=&#34;Vector Icons for React Native&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/oblador/react-native-vector-icons&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/oblador/react-native-vector-icons.svg?sanitize=true&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/react-native-vector-icons&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-vector-icons.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.com/package/react-native-vector-icons&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/react-native-vector-icons.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Perfect for buttons, logos and nav/tab bars. Easy to extend, style and integrate into your project.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use &lt;code&gt;.svg&lt;/code&gt; files natively – try &lt;a href=&#34;https://github.com/oblador/react-native-vector-image&#34;&gt;&lt;code&gt;react-native-vector-image&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#bundled-icon-sets&#34;&gt;Bundled Icon Sets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#ios&#34;&gt;iOS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#android&#34;&gt;Android&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#osx-via-react-native-desktop&#34;&gt;OSX&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#windows-via-react-native-windows&#34;&gt;Windows&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#web-with-webpack&#34;&gt;Web&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#upgrading&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#icon-component&#34;&gt;Icon Component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#iconbutton-component&#34;&gt;Icon.Button Component&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#usage-as-png-imagesource-object&#34;&gt;Usage as PNG image/source object&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#tabbar&#34;&gt;TabBar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#multi-style-fonts&#34;&gt;Multi-style fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#custom-fonts&#34;&gt;Custom Fonts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#animation&#34;&gt;Animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#generating-your-own-icon-set-from-a-css-file&#34;&gt;Generating your own icon set from a CSS file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#changelog&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsoring&lt;/h2&gt; &#xA;&lt;p&gt;If you find the library useful, please consider &lt;a href=&#34;https://github.com/sponsors/oblador&#34;&gt;sponsoring&lt;/a&gt;. Things I have planned is to split up the repo into a monorepo, that would enable individual versioning of icon sets, better performance, smaller bundle and easier for the community to publish their own.&lt;/p&gt; &#xA;&lt;h2&gt;Bundled Icon Sets&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://oblador.github.io/react-native-vector-icons/&#34;&gt;Browse all&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ant.design/&#34;&gt;&lt;code&gt;AntDesign&lt;/code&gt;&lt;/a&gt; by AntFinance (&lt;strong&gt;298&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://entypo.com&#34;&gt;&lt;code&gt;Entypo&lt;/code&gt;&lt;/a&gt; by Daniel Bruce (v1.0.1 &lt;strong&gt;411&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://evil-icons.io&#34;&gt;&lt;code&gt;EvilIcons&lt;/code&gt;&lt;/a&gt; by Alexander Madyankin &amp;amp; Roman Shamin (v1.10.1, &lt;strong&gt;70&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://feathericons.com&#34;&gt;&lt;code&gt;Feather&lt;/code&gt;&lt;/a&gt; by Cole Bemis &amp;amp; Contributors (v4.28.0, &lt;strong&gt;286&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://fortawesome.github.io/Font-Awesome/icons/&#34;&gt;&lt;code&gt;FontAwesome&lt;/code&gt;&lt;/a&gt; by Dave Gandy (v4.7.0, &lt;strong&gt;675&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fontawesome.com/v5/icons/&#34;&gt;&lt;code&gt;FontAwesome 5&lt;/code&gt;&lt;/a&gt; by Fonticons, Inc. (v5.15.3, 1598 (free) &lt;strong&gt;7848&lt;/strong&gt; (pro) icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fontawesome.com&#34;&gt;&lt;code&gt;FontAwesome 6&lt;/code&gt;&lt;/a&gt; by Fonticons, Inc. (v6.1.2, 2016 (free) &lt;strong&gt;16150&lt;/strong&gt; (pro) icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kenangundogan/fontisto&#34;&gt;&lt;code&gt;Fontisto&lt;/code&gt;&lt;/a&gt; by Kenan Gündoğan (v3.0.4, &lt;strong&gt;615&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zurb.com/playground/foundation-icon-fonts-3&#34;&gt;&lt;code&gt;Foundation&lt;/code&gt;&lt;/a&gt; by ZURB, Inc. (v3.0, &lt;strong&gt;283&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ionicons.com/&#34;&gt;&lt;code&gt;Ionicons&lt;/code&gt;&lt;/a&gt; by Ionic (v7.1.0, &lt;strong&gt;1338&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.google.com/design/icons/&#34;&gt;&lt;code&gt;MaterialIcons&lt;/code&gt;&lt;/a&gt; by Google, Inc. (v4.0.0, &lt;strong&gt;2189&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://materialdesignicons.com/&#34;&gt;&lt;code&gt;MaterialCommunityIcons&lt;/code&gt;&lt;/a&gt; by MaterialDesignIcons.com (v6.5.95, &lt;strong&gt;6596&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://octicons.github.com&#34;&gt;&lt;code&gt;Octicons&lt;/code&gt;&lt;/a&gt; by Github, Inc. (v16.3.1, &lt;strong&gt;250&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://zocial.smcllns.com/&#34;&gt;&lt;code&gt;Zocial&lt;/code&gt;&lt;/a&gt; by Sam Collins (v1.4.0, &lt;strong&gt;100&lt;/strong&gt; icons)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://simplelineicons.github.io/&#34;&gt;&lt;code&gt;SimpleLineIcons&lt;/code&gt;&lt;/a&gt; by Sabbir &amp;amp; Contributors (v2.5.5, &lt;strong&gt;189&lt;/strong&gt; icons)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run: &lt;code&gt;$ npm install --save react-native-vector-icons&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For each platform (iOS/Android/Windows) you plan to use, follow one of the options for the corresponding platform.&lt;/li&gt; &#xA; &lt;li&gt;Check out these guides if you intend to use FontAwesome 5 or 6 to get you started: &lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/FONTAWESOME5.md&#34;&gt;&lt;code&gt;FontAwesome 5&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/FONTAWESOME6.md&#34;&gt;&lt;code&gt;FontAwesome 6&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;iOS&lt;/h3&gt; &#xA;&lt;p&gt;If you want to use any of the bundled icons, you need to add the icon fonts to your Xcode project. Just follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browse to &lt;code&gt;node_modules/react-native-vector-icons&lt;/code&gt; and drag the folder &lt;code&gt;Fonts&lt;/code&gt; (or just the ones you want) to your project in Xcode. &lt;strong&gt;Make sure your app is checked under &#34;Add to targets&#34; and that &#34;Create groups&#34; is checked if you add the whole folder&lt;/strong&gt;. Not familiar with Xcode? Try &lt;a href=&#34;https://medium.com/@vimniky/how-to-use-vector-icons-in-your-react-native-project-8212ac6a8f06&#34;&gt;this article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;Info.plist&lt;/code&gt; and add a property called &lt;strong&gt;Fonts provided by application&lt;/strong&gt; (or &lt;code&gt;UIAppFonts&lt;/code&gt; if Xcode won&#39;t autocomplete/not using Xcode) and type in the files you just added. It will look something like this:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/378279/12421498/2db1f93a-be88-11e5-89c8-2e563ba6251a.png&#34; alt=&#34;XCode screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;List of all available fonts to copy &amp;amp; paste in Info.plist&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;UIAppFonts&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;  &amp;lt;string&amp;gt;AntDesign.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;Entypo.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;EvilIcons.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;Feather.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;FontAwesome.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;FontAwesome5_Brands.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;FontAwesome5_Regular.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;FontAwesome5_Solid.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;FontAwesome6_Brands.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;FontAwesome6_Regular.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;FontAwesome6_Solid.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;Foundation.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;Ionicons.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;MaterialIcons.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;MaterialCommunityIcons.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;SimpleLineIcons.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;Octicons.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;Zocial.ttf&amp;lt;/string&amp;gt;&#xA;  &amp;lt;string&amp;gt;Fontisto.ttf&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;In your XCode Settings, in the &lt;strong&gt;Build Phases&lt;/strong&gt; tab, under &lt;strong&gt;Copy Bundle Resources&lt;/strong&gt; add the fonts you have copied in the &lt;code&gt;Fonts&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When using auto linking, it will automatically add all fonts to the &lt;strong&gt;Build Phases&lt;/strong&gt;, &lt;strong&gt;Copy Pods Resources&lt;/strong&gt;. Which will end up in your bundle. To avoid that, create a &lt;code&gt;react-native.config.js&lt;/code&gt; file at the root of your react-native project with:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;  dependencies: {&#xA;    &#39;react-native-vector-icons&#39;: {&#xA;      platforms: {&#xA;        ios: null,&#xA;      },&#xA;    },&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: you need to recompile your project after adding new fonts.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Android&lt;/h3&gt; &#xA;&lt;h4&gt;Option: With Gradle (recommended)&lt;/h4&gt; &#xA;&lt;p&gt;This method has the advantage of fonts being copied from this module at build time so that the fonts and JS are always in sync, making upgrades painless.&lt;/p&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;android/app/build.gradle&lt;/code&gt; ( NOT &lt;code&gt;android/build.gradle&lt;/code&gt; ) and add the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;apply from: file(&#34;../../node_modules/react-native-vector-icons/fonts.gradle&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To customize the files being copied, add the following instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-gradle&#34;&gt;project.ext.vectoricons = [&#xA;    iconFontNames: [ &#39;MaterialIcons.ttf&#39;, &#39;EvilIcons.ttf&#39; ] // Name of the font files you want to copy&#xA;]&#xA;&#xA;apply from: file(&#34;../../node_modules/react-native-vector-icons/fonts.gradle&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Monorepo configuration&lt;/summary&gt; &#xA; &lt;!-- ##### Monorepo configuration --&gt; &#xA; &lt;br&gt; If you are working in a monorepo, you&#39;ll need to point to the correct location of the `fonts.gradle` script and of the Font files, **relative to the android/app/build.gradle file**. For example if your repo uses this common structure: &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;your-monorepo/&#xA;├─ node_modules/&#xA;│  ├─ react-native-vector-icons&#xA;├─ apps/&#xA;│  ├─ YourApp/&#xA;│  │  ├─ android/&#xA;│  │  │  ├─ app/&#xA;│  │  │  │  ├─ build.gradle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;you will need to update the paths to:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;project.ext.vectoricons = [&#xA;+ iconFontsDir: &#34;../../../../node_modules/react-native-vector-icons/Fonts&#34;,&#xA;  iconFontNames: [&#34;WhateverFonts&#34;, &#34;...&#34;]&#xA;]&#xA;&#xA;- apply from: &#34;../../node_modules/react-native-vector-icons/fonts.gradle&#34;&#xA;+ apply from: &#34;../../../../node_modules/react-native-vector-icons/fonts.gradle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;⚠️ There have been &lt;a href=&#34;https://github.com/oblador/react-native-vector-icons/issues/1281#issuecomment-1363201537&#34;&gt;reported issues&lt;/a&gt; when using RNVI &amp;lt; 9.0.0 in a monorepo, so make sure you are on 9+.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;Option: Manually&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Copy the contents in the &lt;code&gt;Fonts&lt;/code&gt; folder to &lt;code&gt;android/app/src/main/assets/fonts&lt;/code&gt; (&lt;em&gt;note lowercase fonts folder&lt;/em&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Integrating library for &lt;code&gt;getImageSource&lt;/code&gt; support&lt;/h5&gt; &#xA;&lt;p&gt;These steps are optional and only needed if you want to use the &lt;code&gt;Icon.getImageSource&lt;/code&gt; function.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;android/settings.gradle&lt;/code&gt; to look like this (without the +):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;rootProject.name = &#39;MyApp&#39;&#xA;&#xA;include &#39;:app&#39;&#xA;&#xA;+ include &#39;:react-native-vector-icons&#39;&#xA;+ project(&#39;:react-native-vector-icons&#39;).projectDir = new File(rootProject.projectDir, &#39;../node_modules/react-native-vector-icons/android&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit &lt;code&gt;android/app/build.gradle&lt;/code&gt; (note: &lt;strong&gt;app&lt;/strong&gt; folder) to look like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;apply plugin: &#39;com.android.application&#39;&#xA;&#xA;android {&#xA;  ...&#xA;}&#xA;&#xA;dependencies {&#xA;  implementation fileTree(dir: &#34;libs&#34;, include: [&#34;*.jar&#34;])&#xA;  //noinspection GradleDynamicVersion&#xA;  implementation &#34;com.facebook.react:react-native:+&#34;  // From node_modules&#xA;&#xA;+ implementation project(&#39;:react-native-vector-icons&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit your &lt;code&gt;MainApplication.java&lt;/code&gt; (deep in &lt;code&gt;android/app/src/main/java/...&lt;/code&gt;) to look like this (note &lt;strong&gt;two&lt;/strong&gt; places to edit):&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Note: this is optional step, it&#39;s necessary only and only if your &lt;strong&gt;react-native app doesn&#39;t support auto-linking&lt;/strong&gt; otherwise you can ignore this.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;package com.myapp;&#xA;&#xA;+ import com.oblador.vectoricons.VectorIconsPackage;&#xA;&#xA;....&#xA;&#xA;  @Override&#xA;  protected List&amp;lt;ReactPackage&amp;gt; getPackages() {&#xA;    return Arrays.&amp;lt;ReactPackage&amp;gt;asList(&#xA;      new MainReactPackage()&#xA;+   , new VectorIconsPackage()&#xA;    );&#xA;  }&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;macOS via &lt;a href=&#34;https://github.com/microsoft/react-native-macos&#34;&gt;&lt;code&gt;react-native-macos&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Browse to &lt;code&gt;node_modules/react-native-vector-icons&lt;/code&gt; and drag the folder &lt;code&gt;Fonts&lt;/code&gt; to your project in Xcode. &lt;strong&gt;Make sure your app is checked under &#34;Add to targets&#34; and that &#34;Create folder references&#34; is checked&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Edit &lt;code&gt;Info.plist&lt;/code&gt; and add a property called &lt;strong&gt;Application fonts resource path&lt;/strong&gt; (or &lt;code&gt;ATSApplicationFontsPath&lt;/code&gt; if Xcode won&#39;t autocomplete/not using Xcode) and type &lt;code&gt;Fonts&lt;/code&gt; as the value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: you need to recompile your project after adding new fonts, also ensure that the &lt;code&gt;Fonts&lt;/code&gt; folder also appear under &lt;strong&gt;Copy Bundle Resources&lt;/strong&gt; in &lt;strong&gt;Build Phases&lt;/strong&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Windows via &lt;a href=&#34;https://github.com/microsoft/react-native-windows&#34;&gt;&lt;code&gt;react-native-windows&lt;/code&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In the top level projects (/windows/project-name/Assets), copy and paste the font files.&lt;/li&gt; &#xA; &lt;li&gt;Open your solution in Visual Studio, right click the Assets folder in your solution, click &lt;strong&gt;Add &amp;gt; Existing Item&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the fonts that were into /windows/project-name/assets and click &lt;strong&gt;Add&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: you need to recompile your project after adding new fonts.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Web (with &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;In your webpack configuration file, add a section to handle ttf files using url-loader (or file-loader)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  test: /\.ttf$/,&#xA;  loader: &#34;url-loader&#34;, // or directly file-loader&#xA;  include: path.resolve(__dirname, &#34;node_modules/react-native-vector-icons&#34;),&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then consume those files in your JavaScript entry point to get the bundled url and inject a style tag in your page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Use prebuilt version of RNVI in dist folder&#xA;import Icon from &#39;react-native-vector-icons/dist/FontAwesome&#39;;&#xA;&#xA;// Generate required css&#xA;import iconFont from &#39;react-native-vector-icons/Fonts/FontAwesome.ttf&#39;;&#xA;const iconFontStyles = `@font-face {&#xA;  src: url(${iconFont});&#xA;  font-family: FontAwesome;&#xA;}`;&#xA;&#xA;// Create stylesheet&#xA;const style = document.createElement(&#39;style&#39;);&#xA;style.type = &#39;text/css&#39;;&#xA;if (style.styleSheet) {&#xA;  style.styleSheet.cssText = iconFontStyles;&#xA;} else {&#xA;  style.appendChild(document.createTextNode(iconFontStyles));&#xA;}&#xA;&#xA;// Inject stylesheet&#xA;document.head.appendChild(style);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;Upgrading this package often requires the font files linked to your projects to be updated as well. If the automatic linking works for you, running this again should update the fonts. Otherwise you need to follow the steps outlined in the &lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#installation&#34;&gt;installation&lt;/a&gt; section.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Icon&lt;/code&gt; Component&lt;/h2&gt; &#xA;&lt;p&gt;You can either use one of the bundled icons above or roll your own custom font.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Icon from &#39;react-native-vector-icons/FontAwesome&#39;;&#xA;const myIcon = &amp;lt;Icon name=&#34;rocket&#34; size={30} color=&#34;#900&#34; /&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Properties&lt;/h3&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://reactnative.dev/docs/text.html&#34;&gt;Text property&lt;/a&gt; and the following:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;size&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Size of the icon, can also be passed as &lt;code&gt;fontSize&lt;/code&gt; in the style object.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;12&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;name&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;What icon to show, see Icon Explorer app or one of the links above.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;None&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;color&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Color of the icon.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Inherited&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Static Methods&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getFontFamily&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the font family that is currently used to retrieve icons as text. Usage: &lt;code&gt;const fontFamily = Icon.getFontFamily()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getImageSource&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a promise that resolving to the source of a bitmap version of the icon for use with &lt;code&gt;Image&lt;/code&gt; component et al. Usage: &lt;code&gt;const source = await Icon.getImageSource(name, size, color)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getImageSourceSync&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Same as &lt;code&gt;getImageSource&lt;/code&gt; but synchronous. Usage: &lt;code&gt;const source = Icon.getImageSourceSync(name, size, color)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getRawGlyphMap&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the raw glyph map of the icon set. Usage: &lt;code&gt;const glyphMap = Icon.getRawGlyphMap()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;hasIcon&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the name is valid in current icon set. Usage: &lt;code&gt;const isNameValid = Icon.hasIcon(name)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Styling&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;code&gt;Icon&lt;/code&gt; builds on top of the &lt;code&gt;Text&lt;/code&gt; component, most &lt;a href=&#34;https://reactnative.dev/docs/style.html&#34;&gt;style properties&lt;/a&gt; will work as expected, you might find it useful to play around with these:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;borderWidth&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;borderColor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;borderRadius&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;padding&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;margin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;color&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fontSize&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;NOTE: On android &lt;code&gt;Text&lt;/code&gt; doesn&#39;t currently support &lt;code&gt;border*&lt;/code&gt; styles, to circumvent this simply wrap your &lt;code&gt;Icon&lt;/code&gt; with a &lt;code&gt;View&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By combining some of these you can create for example :&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/378279/7667570/33817554-fc0d-11e4-9ad7-4eb60139cfb7.png&#34; alt=&#34;type&#34;&gt; &lt;img src=&#34;https://cloud.githubusercontent.com/assets/378279/7667569/3010dd7e-fc0d-11e4-9696-cb721fe8e98d.png&#34; alt=&#34;star&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;Icon.Button&lt;/code&gt; Component&lt;/h2&gt; &#xA;&lt;p&gt;A convenience component for creating buttons with an icon on the left side.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Icon from &#39;react-native-vector-icons/FontAwesome&#39;;&#xA;const myButton = (&#xA;  &amp;lt;Icon.Button&#xA;    name=&#34;facebook&#34;&#xA;    backgroundColor=&#34;#3b5998&#34;&#xA;    onPress={this.loginWithFacebook}&#xA;  &amp;gt;&#xA;    Login with Facebook&#xA;  &amp;lt;/Icon.Button&amp;gt;&#xA;);&#xA;&#xA;const customTextButton = (&#xA;  &amp;lt;Icon.Button name=&#34;facebook&#34; backgroundColor=&#34;#3b5998&#34;&amp;gt;&#xA;    &amp;lt;Text style={{ fontFamily: &#39;Arial&#39;, fontSize: 15 }}&amp;gt;&#xA;      Login with Facebook&#xA;    &amp;lt;/Text&amp;gt;&#xA;  &amp;lt;/Icon.Button&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/378279/7667568/2e9021b2-fc0d-11e4-8e68-cf91c329a6f4.png&#34; alt=&#34;buttons&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Properties&lt;/h3&gt; &#xA;&lt;p&gt;Any &lt;a href=&#34;https://reactnative.dev/docs/text.html&#34;&gt;&lt;code&gt;Text&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://reactnative.dev/docs/touchablehighlight.html&#34;&gt;&lt;code&gt;TouchableHighlight&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://reactnative.dev/docs/touchablewithoutfeedback.html&#34;&gt;&lt;code&gt;TouchableWithoutFeedback&lt;/code&gt;&lt;/a&gt; property in addition to these:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;color&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Text and icon color, use &lt;code&gt;iconStyle&lt;/code&gt; or nest a &lt;code&gt;Text&lt;/code&gt; component if you need different colors.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;white&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;size&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Icon size.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;20&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;iconStyle&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Styles applied to the icon only, good for setting margins or a different color. &lt;em&gt;Note: use &lt;code&gt;iconStyle&lt;/code&gt; for margins or expect unstable behaviour.&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{marginRight: 10}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;backgroundColor&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Background color of the button.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#007AFF&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;borderRadius&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Border radius of the button, set to &lt;code&gt;0&lt;/code&gt; to disable.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;5&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;onPress&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A function called when the button is pressed.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;None&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage as PNG image/source object&lt;/h2&gt; &#xA;&lt;p&gt;Convenient way to plug this in into other components that rely on bitmap images rather than scalable vector icons. Takes the arguments &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;size&lt;/code&gt; and &lt;code&gt;color&lt;/code&gt; as described above.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;Icon.getImageSource(&#39;user&#39;, 20, &#39;red&#39;).then(source =&amp;gt;&#xA;  this.setState({ userIcon: source })&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you may use the synchronous method &lt;code&gt;Icon.getImageSourceSync&lt;/code&gt; to avoid rendering glitches. Keep in mind that this method is blocking and might incur performance penalties. Subsequent calls will use cache however.&lt;/p&gt; &#xA;&lt;h1&gt;Multi-style fonts&lt;/h1&gt; &#xA;&lt;p&gt;Some fonts today use multiple styles, FontAwesome 5 for example, which is supported by this library. The usage is pretty much the same as the standard &lt;code&gt;Icon&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import Icon from &#39;react-native-vector-icons/FontAwesome5&#39;;&#xA;&#xA;const myIcon1 = &amp;lt;Icon name=&#34;comments&#34; size={30} color=&#34;#900&#34; /&amp;gt;; // Defaults to regular&#xA;const myIcon2 = &amp;lt;Icon name=&#34;comments&#34; size={30} color=&#34;#900&#34; solid /&amp;gt;;&#xA;const myIcon3 = &amp;lt;Icon name=&#34;comments&#34; size={30} color=&#34;#900&#34; light /&amp;gt;; // Only in FA5 Pro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Static methods&lt;/h3&gt; &#xA;&lt;p&gt;All static methods from &lt;code&gt;Icon&lt;/code&gt; is supported by multi-styled fonts.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getFontFamily&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the font family that is currently used to retrieve icons as text. Usage: &lt;code&gt;const fontFamily = Icon.getFontFamily(style)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getImageSource&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns a promise that resolving to the source of a bitmap version of the icon for use with &lt;code&gt;Image&lt;/code&gt; component et al. Usage: &lt;code&gt;const source = await Icon.getImageSource(name, size, color)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getImageSourceSync&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Same as &lt;code&gt;getImageSource&lt;/code&gt; but synchronous. Usage: &lt;code&gt;const source = Icon.getImageSourceSync(name, size, color)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getRawGlyphMap&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the raw glyph map of the icon set. Usage: &lt;code&gt;const glyphMap = Icon.getRawGlyphMap(style)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;hasIcon&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checks if the name is valid in current icon set. Usage: &lt;code&gt;const isNameValid = Icon.hasIcon(name, style)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;&lt;code&gt;getStyledIconSet&lt;/code&gt;&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use this to get a &lt;code&gt;Icon&lt;/code&gt; component for a single style. Usage. &lt;code&gt;const StyledIcon = Icon.getStyledIconSet(style)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;If no style argument is passed (or if it&#39;s invalid) the methods will default to a pre-defineds fallback.&lt;/p&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Icon.Button&lt;/code&gt; is supported, usage is just like &lt;code&gt;Icon&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import Icon from &#39;react-native-vector-icons/FontAwesome5&#39;;&#xA;const myButton = (&#xA;  &amp;lt;Icon.Button name=&#34;facebook&#34; onPress={this.loginWithFacebook} solid&amp;gt;&#xA;    Login with Facebook&#xA;  &amp;lt;/Icon.Button&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Fonts&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;code&gt;createIconSet(glyphMap, fontFamily[, fontFile])&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Returns your own custom font based on the &lt;code&gt;glyphMap&lt;/code&gt; where the key is the icon name and the value is either a UTF-8 character or it&#39;s character code. &lt;code&gt;fontFamily&lt;/code&gt; is the name of the font &lt;strong&gt;NOT&lt;/strong&gt; the filename. Open the font in Font Book.app or similar to learn the name. Optionally pass the third &lt;code&gt;fontFile&lt;/code&gt; argument for android support, it should be the custom font file name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createIconSet } from &#39;react-native-vector-icons&#39;;&#xA;const glyphMap = { &#39;icon-name&#39;: 1234, test: &#39;∆&#39; };&#xA;const Icon = createIconSet(glyphMap, &#39;FontName&#39;, &#39;font-name.ttf&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;createIconSetFromFontello(config[, fontFamily[, fontFile]])&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Convenience method to create a custom font based on a &lt;a href=&#34;http://fontello.com&#34;&gt;fontello&lt;/a&gt; config file. Don&#39;t forget to import the font as described above and drop the &lt;code&gt;config.json&lt;/code&gt; somewhere convenient in your project.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createIconSetFromFontello } from &#39;react-native-vector-icons&#39;;&#xA;import fontelloConfig from &#39;./config.json&#39;;&#xA;const Icon = createIconSetFromFontello(fontelloConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;createIconSetFromIcoMoon(config[, fontFamily[, fontFile]])&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createIconSetFromIcoMoon } from &#39;react-native-vector-icons&#39;;&#xA;import icoMoonConfig from &#39;./selection.json&#39;;&#xA;const Icon = createIconSetFromIcoMoon(&#xA;  icoMoonConfig,&#xA;  &#39;LineAwesome&#39;,&#xA;  &#39;line-awesome.ttf&#39;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you&#39;re using the &lt;em&gt;Download&lt;/em&gt; option in &lt;a href=&#34;https://icomoon.io/app&#34;&gt;IcoMoon&lt;/a&gt;, and use the &lt;code&gt;.json&lt;/code&gt; file that&#39;s included in the &lt;code&gt;.zip&lt;/code&gt; you&#39;ve downloaded. You&#39;ll also need to import the &lt;code&gt;.ttf&lt;/code&gt; font file into your project, following the instructions above.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;createMultiStyleIconSet(styles [, options])&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { createMultiStyleIconSet } from &#39;react-native-vector-icons&#39;;&#xA;&#xA;/*&#xA; * This is just example code, you are free to&#xA; * design your glyphmap and styles to your liking&#xA; */&#xA;&#xA;import glyphmap from &#39;./glyphmap.json&#39;;&#xA;/*&#xA; * glyphmap = {&#xA; *   &#34;style1&#34;: [&#xA; *     &#34;hello&#34;,&#xA; *     &#34;world&#34;&#xA; *   ],&#xA; *   &#34;style2&#34;: [&#xA; *     &#34;foo&#34;,&#xA; *     &#34;bar&#34;&#xA; *   ]&#xA; * }&#xA; */&#xA;&#xA;const glyphKeys = Object.keys(glyphmap); /* [&#34;style1&#34;, &#34;style2&#34;] */&#xA;const options = {&#xA;  defaultStyle: &#39;style1&#39;,&#xA;  glyphValidator: (name, style) =&amp;gt; glyphKeys.indexOf(name) !== -1,&#xA;  fallbackFamily: (name) =&amp;gt; {&#xA;    for (let i = 0; i &amp;lt; glyphKeys.length; i++) {&#xA;      const style = glyphKeys[i];&#xA;      if (glyphmap[style].indexOf(name) !== -1) {&#xA;        return style;&#xA;      }&#xA;    }&#xA;&#xA;    /* Always return some family */&#xA;    return glyphKeys[0];&#xA;  }&#xA;};&#xA;&#xA;/*&#xA; * The styles object consits of keys, which will be&#xA; * used as the styles later, and objects which are&#xA; * used as style objects for the font. The style&#xA; * should have unique characteristics for each font&#xA; * in order to ensure that the right one will be&#xA; * chosen. FontAwesome 5 uses font weight since&#xA; * 5.7.0 in order to diffirentiate the styles but&#xA; * other properties (like fontFamily) can be used.&#xA; * It&#39;s just a standard RN style object.&#xA; */&#xA;const styles = {&#xA;  style1: {&#xA;    fontWeight: &#39;700&#39;&#xA;  },&#xA;  style2: {&#xA;    fontWeight: &#39;100&#39;&#xA;  }&#xA;};&#xA;&#xA;const Icon = createMultiStyleIconSet(styles, options);&#xA;&#xA;/* Uses default style (style1) */&#xA;&amp;lt;Icon name={&#39;hello&#39;} /&amp;gt;&#xA;&amp;lt;Icon name={&#39;world&#39;} style1 /&amp;gt;&#xA;/* Default style is style1 but this will fall back to style2 */&#xA;&amp;lt;Icon name={&#39;foo&#39;} /&amp;gt;&#xA;/* This will also fall back to style2 */&#xA;&amp;lt;Icon name={&#39;foo&#39;} style1 /&amp;gt;&#xA;/* Regular use of style2 */&#xA;&amp;lt;Icon name={&#39;bar&#39;} style2 /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;defaultStyle&lt;/td&gt; &#xA;   &lt;td&gt;The name of the style to be used if no style is supplied during rendering.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object.keys(styles)[0]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fallbackFamily&lt;/td&gt; &#xA;   &lt;td&gt;Function for selecting a family if a glyph is not available. The function should accept the &lt;code&gt;name&lt;/code&gt; of the glyph as a parameter. Returns the name if the family.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(name) =&amp;gt; Object.keys(styles)[0]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;glyphValidator&lt;/td&gt; &#xA;   &lt;td&gt;Function for validating that a glyph is available for a chosen style. It has &lt;code&gt;name&lt;/code&gt; and &lt;code&gt;style&lt;/code&gt; as parameters, in that order. Returns &lt;code&gt;true&lt;/code&gt; if the glyph is valid or &lt;code&gt;false&lt;/code&gt; if it&#39;s not.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(name, style) =&amp;gt; true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;You have to manually make a reference of your &lt;code&gt;.ttf&lt;/code&gt; on your xcodeproj &lt;code&gt;Resources&lt;/code&gt; folder and in &lt;code&gt;Info.plist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Animation&lt;/h2&gt; &#xA;&lt;p&gt;React Native comes with an amazing animation library called &lt;a href=&#34;https://reactnative.dev/docs/animated.html&#34;&gt;&lt;code&gt;Animated&lt;/code&gt;&lt;/a&gt;. To use it with an icon, simply create an animated component with this line: &lt;code&gt;const AnimatedIcon = Animated.createAnimatedComponent(Icon)&lt;/code&gt;. You can also use the higher level animation library &lt;a href=&#34;https://github.com/oblador/react-native-animatable&#34;&gt;react-native-animatable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;IconExplorer&lt;/h3&gt; &#xA;&lt;p&gt;Try the &lt;code&gt;IconExplorer&lt;/code&gt; project in &lt;code&gt;Examples/IconExplorer&lt;/code&gt; folder, there you can also search for any icon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/378279/8903470/a9fe6b46-3458-11e5-901f-98b7b676d0d3.png&#34; alt=&#34;Screenshot of IconExplorer&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Basic Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Icon from &#39;react-native-vector-icons/Ionicons&#39;;&#xA;&#xA;function ExampleView(props) {&#xA;  return &amp;lt;Icon name=&#34;ios-person&#34; size={30} color=&#34;#4F8EF7&#34; /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TabBar&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;a href=&#34;https://reactnative.dev/docs/tabbarios.html&#34;&gt;&lt;code&gt;TabBarIOS&lt;/code&gt;&lt;/a&gt; was removed from core in favor of &lt;a href=&#34;https://reactnative.dev/docs/tabbarios.html&#34;&gt;@react-navigation/bottom-tabs&lt;/a&gt;, it is also removed as a convenience component from this library. Simply use the &lt;code&gt;Icon&lt;/code&gt; instead, but don&#39;t forget to import and link to this project as described above first.&lt;/p&gt; &#xA;&lt;p&gt;Below is an &lt;a href=&#34;https://reactnavigation.org/docs/bottom-tab-navigator/#example&#34;&gt;example&lt;/a&gt; taken from &lt;code&gt;react-navigation&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { createBottomTabNavigator } from &#39;@react-navigation/bottom-tabs&#39;;&#xA;import MaterialCommunityIcons from &#39;react-native-vector-icons/MaterialCommunityIcons&#39;;&#xA;&#xA;const Tab = createBottomTabNavigator();&#xA;&#xA;function MyTabs() {&#xA;  return (&#xA;    &amp;lt;Tab.Navigator&#xA;      initialRouteName=&#34;Feed&#34;&#xA;      screenOptions={{&#xA;        activeTintColor: &#39;#e91e63&#39;,&#xA;      }}&#xA;    &amp;gt;&#xA;      &amp;lt;Tab.Screen&#xA;        name=&#34;Feed&#34;&#xA;        component={Feed}&#xA;        options={{&#xA;          tabBarLabel: &#39;Home&#39;,&#xA;          tabBarIcon: ({ color, size }) =&amp;gt; (&#xA;            &amp;lt;MaterialCommunityIcons name=&#34;home&#34; color={color} size={size} /&amp;gt;&#xA;          ),&#xA;        }}&#xA;      /&amp;gt;&#xA;      &amp;lt;Tab.Screen&#xA;        name=&#34;Notifications&#34;&#xA;        component={Notifications}&#xA;        options={{&#xA;          tabBarLabel: &#39;Updates&#39;,&#xA;          tabBarIcon: ({ color, size }) =&amp;gt; (&#xA;            &amp;lt;MaterialCommunityIcons name=&#34;bell&#34; color={color} size={size} /&amp;gt;&#xA;          ),&#xA;          tabBarBadge: 3,&#xA;        }}&#xA;      /&amp;gt;&#xA;      &amp;lt;Tab.Screen&#xA;        name=&#34;Profile&#34;&#xA;        component={Profile}&#xA;        options={{&#xA;          tabBarLabel: &#39;Profile&#39;,&#xA;          tabBarIcon: ({ color, size }) =&amp;gt; (&#xA;            &amp;lt;MaterialCommunityIcons name=&#34;account&#34; color={color} size={size} /&amp;gt;&#xA;          ),&#xA;        }}&#xA;      /&amp;gt;&#xA;    &amp;lt;/Tab.Navigator&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ToolbarAndroid&lt;/h3&gt; &#xA;&lt;p&gt;Since &lt;a href=&#34;https://github.com/react-native-community/toolbar-android&#34;&gt;&lt;code&gt;ToolbarAndroid&lt;/code&gt;&lt;/a&gt; was removed from core, it is also removed as a convenience component from this library. Simply use &lt;code&gt;getImageSourceSync&lt;/code&gt; instead, but don&#39;t forget to import and link to this project as described above first.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import ToolbarAndroid from &#39;@react-native-community/toolbar-android&#39;;&#xA;import Icon from &#39;react-native-vector-icons/Ionicons&#39;;&#xA;&#xA;const navIcon = Icon.getImageSourceSync(&#39;md-arrow-back&#39;, 24, &#39;white&#39;);&#xA;const overflowIcon = Icon.getImageSourceSync(&#39;md-more&#39;, 24, &#39;white&#39;);&#xA;const settingsIcon = Icon.getImageSourceSync(&#39;md-settings&#39;, 30, &#39;white&#39;);&#xA;const twitterIcon = Icon.getImageSourceSync(&#39;logo-twitter&#39;, 25, &#39;#4099FF&#39;);&#xA;&#xA;function ToolbarView(props) {&#xA;  return (&#xA;    &amp;lt;ToolbarAndroid&#xA;      title=&#34;Home&#34;&#xA;      titleColor=&#34;white&#34;&#xA;      navIcon={navIcon}&#xA;      onIconClicked={props.navigator.pop}&#xA;      actions={[&#xA;        {&#xA;          title: &#39;Settings&#39;,&#xA;          icon: settingsIcon,&#xA;          show: &#39;always&#39;,&#xA;        },&#xA;        {&#xA;          title: &#39;Follow me on Twitter&#39;,&#xA;          icon: twitterIcon,&#xA;          show: &#39;ifRoom&#39;,&#xA;        },&#xA;      ]}&#xA;      overflowIcon={overflowIcon}&#xA;    /&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inline Icons&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Text } from &#39;react-native&#39;;&#xA;import Icon from &#39;react-native-vector-icons/Ionicons&#39;;&#xA;&#xA;function ExampleView(props) {&#xA;  return (&#xA;    &amp;lt;Text&amp;gt;&#xA;      Lorem &amp;lt;Icon name=&#34;ios-book&#34; color=&#34;#4F8EF7&#34; /&amp;gt; Ipsum&#xA;    &amp;lt;/Text&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generating your own icon set from a CSS file&lt;/h2&gt; &#xA;&lt;p&gt;If you already have an icon font with associated CSS file then you can easily generate a icon set with the &lt;code&gt;generate-icon&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h3&gt;Example usage:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;./node_modules/.bin/generate-icon path/to/styles.css --componentName=MyIcon --fontFamily=myicon &amp;gt; Components/MyIcon.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Any flags not listed below, like &lt;code&gt;--componentName&lt;/code&gt; and &lt;code&gt;--fontFamily&lt;/code&gt;, will be passed on to the template.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;-p&lt;/code&gt;, &lt;code&gt;--prefix&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;CSS selector prefix [default: &#34;.icon-&#34;]&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;-t&lt;/code&gt;, &lt;code&gt;--template&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Template in JS template string format [default: &#34;./template/iconSet.tpl&#34;]&lt;/p&gt; &#xA;&lt;p&gt;For default template please provide &lt;code&gt;--componentName&lt;/code&gt; and &lt;code&gt;--fontFamily&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;-o&lt;/code&gt;, &lt;code&gt;--output&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Save output to file, defaults to STDOUT&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/oblador/react-native-vector-icons/releases&#34;&gt;Changelog&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h4&gt;The icons show up as a crossed out box on Android&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you&#39;ve copied the font to &lt;code&gt;android/app/src/main/assets/fonts&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Delete the build folder with &lt;code&gt;rm -rf android/app/build&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Recompile the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Red screen with &#34;Unrecognized font family&#34; error on iOS&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure you&#39;ve added manually the reference of your &lt;code&gt;.ttf&lt;/code&gt; on your xcodeproj &lt;code&gt;Resources&lt;/code&gt; folder.&lt;/li&gt; &#xA; &lt;li&gt;Check that the font you are trying to use appears in &lt;code&gt;Info.plist&lt;/code&gt;, if you&#39;ve added the whole folder and it&#39;s blue in color, then you need to add it to the path.&lt;/li&gt; &#xA; &lt;li&gt;Check that the font is copied in the &lt;em&gt;Copy Bundle Resources&lt;/em&gt; in &lt;em&gt;Build Phases&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Delete the build folder with &lt;code&gt;rm -rf ios/build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Recompile the project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Android build fails on Windows for no good reason&lt;/h4&gt; &#xA;&lt;p&gt;Both npm and android file hierarchies tend to get very deep and even worse when you combine them. Since Windows file system has a max length, long file name addresses will result in numerous errors including &lt;code&gt;Execution failed for task &#39;:react-native-vector-icons:processReleaseResources&#39;&lt;/code&gt;. So try to keep the path to your project folder as short as possible.&lt;/p&gt; &#xA;&lt;h4&gt;Wrong icons are shown after upgrading this package&lt;/h4&gt; &#xA;&lt;p&gt;You probably didn&#39;t update the font files linked to your native project after upgrading. However, this only applies to Android targets since iOS bundles the fonts when building the app (try to clean your build from Xcode if the problem exists). On android you can relink the project or you manually update the fonts. To have them automatically synced use the &lt;a href=&#34;https://github.com/oblador/react-native-vector-icons#option-with-gradle-recommended&#34;&gt;gradle approach&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Some icons are missing after upgrading this package&lt;/h4&gt; &#xA;&lt;p&gt;Sometimes vendors decides to remove some icons from newer releases, this has nothing to do with this package. If you depend on an older version of a font you can add it as a &lt;a href=&#34;https://raw.githubusercontent.com/oblador/react-native-vector-icons/master/#custom-fonts&#34;&gt;custom font&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licenced under the &lt;a href=&#34;http://opensource.org/licenses/mit-license.html&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Any bundled fonts are copyright to their respective authors and mostly under MIT or &lt;a href=&#34;http://scripts.sil.org/OFL&#34;&gt;SIL OFL&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>