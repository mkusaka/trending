<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-26T01:37:46Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Rob--W/cors-anywhere</title>
    <updated>2023-02-26T01:37:46Z</updated>
    <id>tag:github.com,2023-02-26:/Rob--W/cors-anywhere</id>
    <link href="https://github.com/Rob--W/cors-anywhere" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CORS Anywhere is a NodeJS reverse proxy which adds CORS headers to the proxied request.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/Rob--W/cors-anywhere&#34;&gt;&lt;img src=&#34;https://travis-ci.com/Rob--W/cors-anywhere.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/Rob--W/cors-anywhere?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/Rob--W/cors-anywhere/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;CORS Anywhere&lt;/strong&gt; is a NodeJS proxy which adds CORS headers to the proxied request.&lt;/p&gt; &#xA;&lt;p&gt;The url to proxy is literally taken from the path, validated and proxied. The protocol part of the proxied URI is optional, and defaults to &#34;http&#34;. If port 443 is specified, the protocol defaults to &#34;https&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This package does not put any restrictions on the http methods or headers, except for cookies. Requesting &lt;a href=&#34;http://www.w3.org/TR/cors/#user-credentials&#34;&gt;user credentials&lt;/a&gt; is disallowed. The app can be configured to require a header for proxying a request, for example to avoid a direct visit from the browser.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Listen on a specific host via the HOST environment variable&#xA;var host = process.env.HOST || &#39;0.0.0.0&#39;;&#xA;// Listen on a specific port via the PORT environment variable&#xA;var port = process.env.PORT || 8080;&#xA;&#xA;var cors_proxy = require(&#39;cors-anywhere&#39;);&#xA;cors_proxy.createServer({&#xA;    originWhitelist: [], // Allow all origins&#xA;    requireHeader: [&#39;origin&#39;, &#39;x-requested-with&#39;],&#xA;    removeHeaders: [&#39;cookie&#39;, &#39;cookie2&#39;]&#xA;}).listen(port, host, function() {&#xA;    console.log(&#39;Running CORS Anywhere on &#39; + host + &#39;:&#39; + port);&#xA;});&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Request examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8080/http://google.com/&lt;/code&gt; - Google.com with CORS headers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8080/google.com&lt;/code&gt; - Same as previous.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8080/google.com:443&lt;/code&gt; - Proxies &lt;code&gt;https://google.com/&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8080/&lt;/code&gt; - Shows usage text, as defined in &lt;code&gt;lib/help.txt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;http://localhost:8080/favicon.ico&lt;/code&gt; - Replies 404 Not found&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Live examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cors-anywhere.herokuapp.com/&#34;&gt;https://cors-anywhere.herokuapp.com/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://robwu.nl/cors-anywhere.html&#34;&gt;https://robwu.nl/cors-anywhere.html&lt;/a&gt; - This demo shows how to use the API.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;To use the API, just prefix the URL with the API URL. Take a look at &lt;a href=&#34;https://raw.githubusercontent.com/Rob--W/cors-anywhere/master/demo.html&#34;&gt;demo.html&lt;/a&gt; for an example. A concise summary of the documentation is provided at &lt;a href=&#34;https://raw.githubusercontent.com/Rob--W/cors-anywhere/master/lib/help.txt&#34;&gt;lib/help.txt&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: as of February 2021, access to the demo server requires an opt-in&lt;/strong&gt;, see: &lt;a href=&#34;https://github.com/Rob--W/cors-anywhere/issues/301&#34;&gt;https://github.com/Rob--W/cors-anywhere/issues/301&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to automatically enable cross-domain requests when needed, use the following snippet:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(function() {&#xA;    var cors_api_host = &#39;cors-anywhere.herokuapp.com&#39;;&#xA;    var cors_api_url = &#39;https://&#39; + cors_api_host + &#39;/&#39;;&#xA;    var slice = [].slice;&#xA;    var origin = window.location.protocol + &#39;//&#39; + window.location.host;&#xA;    var open = XMLHttpRequest.prototype.open;&#xA;    XMLHttpRequest.prototype.open = function() {&#xA;        var args = slice.call(arguments);&#xA;        var targetOrigin = /^https?:\/\/([^\/]+)/i.exec(args[1]);&#xA;        if (targetOrigin &amp;amp;&amp;amp; targetOrigin[0].toLowerCase() !== origin &amp;amp;&amp;amp;&#xA;            targetOrigin[1] !== cors_api_host) {&#xA;            args[1] = cors_api_url + args[1];&#xA;        }&#xA;        return open.apply(this, args);&#xA;    };&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using jQuery, you can also use the following code &lt;strong&gt;instead of&lt;/strong&gt; the previous one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jQuery.ajaxPrefilter(function(options) {&#xA;    if (options.crossDomain &amp;amp;&amp;amp; jQuery.support.cors) {&#xA;        options.url = &#39;https://cors-anywhere.herokuapp.com/&#39; + options.url;&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;The module exports &lt;code&gt;createServer(options)&lt;/code&gt;, which creates a server that handles proxy requests. The following options are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;function &lt;code&gt;getProxyForUrl&lt;/code&gt; - If set, specifies which intermediate proxy to use for a given URL. If the return value is void, a direct request is sent. The default implementation is &lt;a href=&#34;https://github.com/Rob--W/proxy-from-env&#34;&gt;&lt;code&gt;proxy-from-env&lt;/code&gt;&lt;/a&gt;, which respects the standard proxy environment variables (e.g. &lt;code&gt;https_proxy&lt;/code&gt;, &lt;code&gt;no_proxy&lt;/code&gt;, etc.).&lt;/li&gt; &#xA; &lt;li&gt;array of strings &lt;code&gt;originBlacklist&lt;/code&gt; - If set, requests whose origin is listed are blocked.&lt;br&gt; Example: &lt;code&gt;[&#39;https://bad.example.com&#39;, &#39;http://bad.example.com&#39;]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;array of strings &lt;code&gt;originWhitelist&lt;/code&gt; - If set, requests whose origin is not listed are blocked.&lt;br&gt; If this list is empty, all origins are allowed. Example: &lt;code&gt;[&#39;https://good.example.com&#39;, &#39;http://good.example.com&#39;]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;function &lt;code&gt;handleInitialRequest&lt;/code&gt; - If set, it is called with the request, response and a parsed URL of the requested destination (null if unavailable). If the function returns true, the request will not be handled further. Then the function is responsible for handling the request. This feature can be used to passively monitor requests, for example for logging (return false).&lt;/li&gt; &#xA; &lt;li&gt;function &lt;code&gt;checkRateLimit&lt;/code&gt; - If set, it is called with the origin (string) of the request. If this function returns a non-empty string, the request is rejected and the string is send to the client.&lt;/li&gt; &#xA; &lt;li&gt;boolean &lt;code&gt;redirectSameOrigin&lt;/code&gt; - If true, requests to URLs from the same origin will not be proxied but redirected. The primary purpose for this option is to save server resources by delegating the request to the client (since same-origin requests should always succeed, even without proxying).&lt;/li&gt; &#xA; &lt;li&gt;array of strings &lt;code&gt;requireHeader&lt;/code&gt; - If set, the request must include this header or the API will refuse to proxy.&lt;br&gt; Recommended if you want to prevent users from using the proxy for normal browsing.&lt;br&gt; Example: &lt;code&gt;[&#39;Origin&#39;, &#39;X-Requested-With&#39;]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;array of lowercase strings &lt;code&gt;removeHeaders&lt;/code&gt; - Exclude certain headers from being included in the request.&lt;br&gt; Example: &lt;code&gt;[&#34;cookie&#34;]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;dictionary of lowercase strings &lt;code&gt;setHeaders&lt;/code&gt; - Set headers for the request (overwrites existing ones).&lt;br&gt; Example: &lt;code&gt;{&#34;x-powered-by&#34;: &#34;CORS Anywhere&#34;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;number &lt;code&gt;corsMaxAge&lt;/code&gt; - If set, an Access-Control-Max-Age request header with this value (in seconds) will be added.&lt;br&gt; Example: &lt;code&gt;600&lt;/code&gt; - Allow CORS preflight request to be cached by the browser for 10 minutes.&lt;/li&gt; &#xA; &lt;li&gt;string &lt;code&gt;helpFile&lt;/code&gt; - Set the help file (shown at the homepage).&lt;br&gt; Example: &lt;code&gt;&#34;myCustomHelpText.txt&#34;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For advanced users, the following options are also provided.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;httpProxyOptions&lt;/code&gt; - Under the hood, &lt;a href=&#34;https://github.com/nodejitsu/node-http-proxy&#34;&gt;http-proxy&lt;/a&gt; is used to proxy requests. Use this option if you really need to pass options to http-proxy. The documentation for these options can be found &lt;a href=&#34;https://github.com/nodejitsu/node-http-proxy#options&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;httpsOptions&lt;/code&gt; - If set, a &lt;code&gt;https.Server&lt;/code&gt; will be created. The given options are passed to the &lt;a href=&#34;https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener&#34;&gt;&lt;code&gt;https.createServer&lt;/code&gt;&lt;/a&gt; method.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For even more advanced usage (building upon CORS Anywhere), see the sample code in &lt;a href=&#34;https://raw.githubusercontent.com/Rob--W/cors-anywhere/master/test/test-examples.js&#34;&gt;test/test-examples.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Demo server&lt;/h3&gt; &#xA;&lt;p&gt;A public demo of CORS Anywhere is available at &lt;a href=&#34;https://cors-anywhere.herokuapp.com&#34;&gt;https://cors-anywhere.herokuapp.com&lt;/a&gt;. This server is only provided so that you can easily and quickly try out CORS Anywhere. To ensure that the service stays available to everyone, the number of requests per period is limited, except for requests from some explicitly whitelisted origins.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: as of February 2021, access to the demo server requires an opt-in&lt;/strong&gt;, see: &lt;a href=&#34;https://github.com/Rob--W/cors-anywhere/issues/301&#34;&gt;https://github.com/Rob--W/cors-anywhere/issues/301&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you expect lots of traffic, please host your own instance of CORS Anywhere, and make sure that the CORS Anywhere server only whitelists your site to prevent others from using your instance of CORS Anywhere as an open proxy.&lt;/p&gt; &#xA;&lt;p&gt;For instance, to run a CORS Anywhere server that accepts any request from some example.com sites on port 8080, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PORT=8080&#xA;export CORSANYWHERE_WHITELIST=https://example.com,http://example.com,http://example.com:8080&#xA;node server.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This application can immediately be run on Heroku, see &lt;a href=&#34;https://devcenter.heroku.com/articles/nodejs&#34;&gt;https://devcenter.heroku.com/articles/nodejs&lt;/a&gt; for instructions. Note that their &lt;a href=&#34;https://www.heroku.com/policy/aup&#34;&gt;Acceptable Use Policy&lt;/a&gt; forbids the use of Heroku for operating an open proxy, so make sure that you either enforce a whitelist as shown above, or severly rate-limit the number of requests.&lt;/p&gt; &#xA;&lt;p&gt;For example, to blacklist abuse.example.com and rate-limit everything to 50 requests per 3 minutes, except for my.example.com and my2.example.com (which may be unlimited), use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export PORT=8080&#xA;export CORSANYWHERE_BLACKLIST=https://abuse.example.com,http://abuse.example.com&#xA;export CORSANYWHERE_RATELIMIT=&#39;50 3 my.example.com my2.example.com&#39;&#xA;node server.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Copyright (C) 2013 - 2021 Rob Wu &lt;a href=&#34;mailto:rob@robwu.nl&#34;&gt;rob@robwu.nl&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>CollaboraOnline/online</title>
    <updated>2023-02-26T01:37:46Z</updated>
    <id>tag:github.com,2023-02-26:/CollaboraOnline/online</id>
    <link href="https://github.com/CollaboraOnline/online" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Collabora Online is a collaborative online office suite based on LibreOffice technology. This is also the source for the Collabora Office apps for iOS and Android.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Gerrit/job/Gerrit%20for%20core%20(co-2021)%20side%20of%20online%20co-21-11/&#34;&gt;&lt;img src=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Gerrit/job/Gerrit%20for%20core%20(co-2021)%20side%20of%20online%20co-21-11/badge/icon?subject=Gerrit%20core%20co-2021&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Gerrit/job/Gerrit%20for%20core%20(co-22.05)%20side%20of%20online%20master/&#34;&gt;&lt;img src=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Gerrit/job/Gerrit%20for%20core%20(co-22.05)%20side%20of%20online%20master/badge/icon?subject=Gerrit%20core%20co-22.05&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Tinderbox/job/Tinderbox%20for%20online%20co-21-11/&#34;&gt;&lt;img src=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Tinderbox/job/Tinderbox%20for%20online%20co-21-11//badge/icon?subject=co-21-11%20vs%20co-2021&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Gerrit/job/Tinderbox%20for%20online%20master%20against%20co-22.05/&#34;&gt;&lt;img src=&#34;https://cpci.cbg.collabora.co.uk:8080/view/Gerrit/job/Tinderbox%20for%20online%20master%20against%20co-22.05/badge/icon?subject=master%20vs%20co-22.05&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;right&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CollaboraOnline/online/master/#gitpod&#34;&gt;&lt;img alt=&#34;Open in Gitpod&#34; src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Collabora Online&lt;/h1&gt; &#xA;&lt;!--&#xA;[![Master: Pull request policy](https://img.shields.io/badge/Master-PRs%20can%20be%20merge%20without%20approval-42BC00?logoColor=42BC00&amp;logo=git &#34;Main release is still distant. Thanks for your support and contributions! :)&#34;)](https://github.com/CollaboraOnline/online/blob/master/CONTRIBUTING.md#contributing-to-source-code)&#xA;--&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CollaboraOnline/online/raw/master/CONTRIBUTING.md#contributing-to-source-code&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Master-protected%2C%20PRs%20need%20approval-red?logoColor=lightred&amp;amp;logo=git&#34; alt=&#34;Master: Pull request policy&#34; title=&#34;Collabora Team is preparing for the next release, therefore &#39;master&#39; branch is protected now, PRs need 1 review before merging. Thanks for your support and contributions! :)&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://web.libera.chat/?channels=cool-dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/IRC-%23cool--dev%20on%20libera-orange.svg?sanitize=true&#34; alt=&#34;irc&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://t.me/CollaboraOnline&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Telegram-Collabora%20Online-green.svg?sanitize=true&#34; alt=&#34;Telegram&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://forum.collaboraonline.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Forum-Discourse-blue.svg?sanitize=true&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://collaboraonline.github.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Website-collaboraonline.github.io-blueviolet.svg?sanitize=true&#34; alt=&#34;Website&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hosted.weblate.org/projects/collabora-online/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/L10n-Weblate-lightgrey.svg?sanitize=true&#34; alt=&#34;L10n&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/CollaboraOnline/online&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Gitpod-ready--to--code-blue?logo=gitpod&#34; alt=&#34;Gitpod Ready-to-Code&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Your own private Office in the Cloud&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CollaboraOnline/CollaboraOnline.github.io/master/static/images/homepage-image.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Get in touch 💬&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CollaboraOnline/online/master/forum.collaboraonline.com/&#34;&gt;📋 Forum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/collaboraoffice/&#34;&gt;👥 Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/CollaboraOffice&#34;&gt;🐣 Twitter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mastodon.social/@CollaboraOffice&#34;&gt;🐘 Mastodon&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Key features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;View and edit text documents, spreadsheets, presentations &amp;amp; more&lt;/li&gt; &#xA; &lt;li&gt;Collaborative editing features&lt;/li&gt; &#xA; &lt;li&gt;Works in any modern browser – no plugin needed&lt;/li&gt; &#xA; &lt;li&gt;Open Source – primarily under the &lt;a href=&#34;http://mozilla.org/MPL/2.0/&#34;&gt;MPLv2&lt;/a&gt; license. Some parts are under other open source licences, see e.g. &lt;a href=&#34;https://github.com/CollaboraOnline/online/raw/master/browser/LICENSE&#34;&gt;browser/LICENSE&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Website&lt;/h2&gt; &#xA;&lt;p&gt;For many more details, build instructions, downloads and more please visit &lt;a href=&#34;https://collaboraonline.github.io/&#34;&gt;https://collaboraonline.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developer assistance&lt;/h2&gt; &#xA;&lt;p&gt;Please ask your questions on any of the bridged IRC/Matrix/Telegram rooms&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IRC: &lt;code&gt;#cool-dev&lt;/code&gt; on &lt;code&gt;irc.libera.chat&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Matrix: &lt;a href=&#34;https://app.element.io/#/room/#cool-dev:libera.chat&#34;&gt;#cool-dev:libera.chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Telegram: &lt;a href=&#34;https://t.me/CollaboraOnline&#34;&gt;CollaboraOnline&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Join the conversation on our Discourse server at &lt;a href=&#34;https://forum.collaboraonline.com/&#34;&gt;https://forum.collaboraonline.com/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Watch the tinderbox status (if it&#39;s green) at &lt;a href=&#34;https://cpci.cbg.collabora.co.uk:8080/job/Tinderbox%20for%20online%20master%20against%20co-22.05/&#34;&gt;https://cpci.cbg.collabora.co.uk:8080/job/Tinderbox%20for%20online%20master%20against%20co-22.05/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Development bits&lt;/h2&gt; &#xA;&lt;p&gt;This project has several components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;wsd/&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The Web Services Daemon - which accepts external connections&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;kit/&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The client which lives in its own chroot and renders documents&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;common/&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Shared code between these processes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;browser/&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The client side JavaScript component&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;test/&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;C++ based unit tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;cypress_test/&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JavaScript based integration tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Further recommended reading with build details&lt;/h2&gt; &#xA;&lt;p&gt;Please consult the README files in the component&#39;s directory for more details:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CollaboraOnline/online/master/wsd&#34;&gt;wsd/README&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CollaboraOnline/online/master/browser&#34;&gt;browser/README&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;iOS and Android apps&lt;/h2&gt; &#xA;&lt;p&gt;See the corresponding READMEs:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CollaboraOnline/online/master/ios&#34;&gt;ios/README&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/CollaboraOnline/online/master/android&#34;&gt;android/README&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;GitPod&lt;/h2&gt; &#xA;&lt;p&gt;Head over to &lt;a href=&#34;https://collaboraonline.github.io/post/build-code/&#34;&gt;https://collaboraonline.github.io/post/build-code/&lt;/a&gt; select gitpod from the dropdown and follow the steps.&lt;/p&gt; &#xA;&lt;p&gt;Interesting things to keep in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure your browser is not blocking windows/tabs from opening from the gitpod workspace URL (maybe add &lt;code&gt;*.gitpod.io&lt;/code&gt; to your browser&#39;s whitelist) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The GitPod tasks will run automatically and further instructions will be printed out right in the terminal&lt;/li&gt; &#xA;   &lt;li&gt;VNC tab will open automatically if not just click in the left icon &lt;code&gt;Remote explorer&lt;/code&gt; and click &lt;code&gt;6080&lt;/code&gt;. You will see a tab completly black, that&#39;s normal.&lt;/li&gt; &#xA;   &lt;li&gt;As mentioned in those instructions if you are not using the VS Code desktop and if you are only relying on your browser please: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Do not try to click the URL from the make run out put instead copy that URL and execute &lt;code&gt;firefox [paste URL here]&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Head over to the tab where the VNC is opened (black page), you will see Firefox opening there, maximize and have fun.&lt;/li&gt; &#xA;     &lt;li&gt;You can also run cypress tests via GitPod but you will need to use Firefox, for that just prepend &lt;code&gt;CYPRESS_BROWSER=&#34;firefox&#34;&lt;/code&gt; to the desired command. Example: &lt;code&gt;CYPRESS_BROWSER=&#34;firefox&#34; make check&lt;/code&gt; for every test or &lt;code&gt;CYPRESS_BROWSER=&#34;firefox&#34; make check-desktop spec=impress/scrolling_spec.js&lt;/code&gt; for one specific test on desktop&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Enjoy!&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>proxyplu/Nullify</title>
    <updated>2023-02-26T01:37:46Z</updated>
    <id>tag:github.com,2023-02-26:/proxyplu/Nullify</id>
    <link href="https://github.com/proxyplu/Nullify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One of the BEST up to date iReady hacks. Similar to iReady Overload.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Nullify&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;The BEST i-Ready hack.&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;By &lt;a href=&#34;https://github.com/wang-fr&#34;&gt;wang-fr&lt;/a&gt;, &lt;a href=&#34;https://github.com/proxyplu&#34;&gt;proxyplu&lt;/a&gt;, &lt;a href=&#34;https://github.com/TonicGaro&#34;&gt;TonicGaro&lt;/a&gt;, and &lt;a href=&#34;https://github.com/flowingsalt&#34;&gt;flowingsalt&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;a href=&#34;https://discord.gg/nullify&#34;&gt;Nullify Discord&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;212&#34; height=&#34;212&#34; src=&#34;https://res.cloudinary.com/dodofguiy/image/upload/v1671071889/icon_f6pwnj.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Welcome to Nullify, the best i-Ready hack!&lt;br&gt;&lt;br&gt; With this hack you can completely remove the stress and torture that comes with i-Ready and breeze through your lessons with ease.&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;How to setup:&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Copy the code below and login to i-Ready.&lt;br&gt;&lt;br&gt; Do Ctrl + Shift + J to open the console and paste the code, then hit Enter to run it.&lt;br&gt;&lt;br&gt; If your school blocks the console then make a new bookmark and in the URL section paste the code there. Click the bookmark anytime to run the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;javascript:fetch(&#39;https://raw.githubusercontent.com/proxyplu/Nullify/main/Data/main.js&#39;).then(r =&amp;gt; r.text()).then(r =&amp;gt; eval(r))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Misc&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Credits to ArjhanToteck, cupiditys, and wang for originally making this, (but some deleted their repo).&lt;br&gt;&lt;br&gt; HUGE credit to wang-fr and flowingsalt for creating the Lesson Skipper. This hack wouldn&#39;t be as great as it is without their help.&lt;br&gt;&lt;br&gt; Nullify is under the GNU General Public License v3.0. Learn more &lt;a href=&#34;https://github.com/notplu/Nullify/raw/main/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>