<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-30T01:34:36Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ajayns/react-projects</title>
    <updated>2022-11-30T01:34:36Z</updated>
    <id>tag:github.com,2022-11-30:/ajayns/react-projects</id>
    <link href="https://github.com/ajayns/react-projects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of projects built on the React library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Projects&lt;/h1&gt; &#xA;&lt;p&gt;(not maintained, was just for practice earlier) A couple of projects to get familiar with the React framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://media.giphy.com/media/l0HUhhAtb86vYAHkY/giphy.gif&#34; alt=&#34;Giphy&#34;&gt; &lt;img src=&#34;https://media.giphy.com/media/26gN147Cy7zF1Mv7y/giphy.gif&#34; alt=&#34;Giphy&#34;&gt; &lt;img src=&#34;https://media.giphy.com/media/26DNeo2xDmfj3plbW/giphy.gif&#34; alt=&#34;Giphy&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;todo&lt;/strong&gt;: Basic todo app to get started.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;tictactoe&lt;/strong&gt;: A tic-tac-toe game uses states and props.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;markdown-editor&lt;/strong&gt;: A real-time markdown editor SPA. &lt;a href=&#34;https://react-markdown-editor.firebaseapp.com&#34;&gt;(Live Demo)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;basic-react-redux&lt;/strong&gt;: Basic react-redux project which handles articles in its store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;basic-redux-thunk&lt;/strong&gt;: Basic react-redux-thunk project which handles items from an API using thunk, uses redux for store.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;book-store [WIP]&lt;/strong&gt;: Online book store built over react-redux and Bootstrap for UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;trip-mate&lt;/strong&gt;: Manage and keep track of your trips with this simple, smooth webapp. Uses react-router, custom styling. &lt;a href=&#34;https://react-trip-mate.firebaseapp.com&#34;&gt;(Live Demo)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;property-finder&lt;/strong&gt;: Search for and list properties. Built on React-Native, uses react-navigation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;todo-pwa&lt;/strong&gt;: The classic Todos Tracker as a Progressive Web App. Built using React, Redux, leveraging styled-components, PaperCSS, Service Worker tools. Data is retained using localStorage &lt;a href=&#34;https://paper-todo.firebaseapp.com&#34;&gt;(Live Demo)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;gatsbyjs-markdown-blog&lt;/strong&gt;: GatsbyJS blog which fetches markdown blog posts, lists them and displays each post wrapped up as a static site. Based on the tutorials in the official docs, uses GraphQL, Typography.js, Remark plugin, Glamor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;reddit-clone&lt;/strong&gt;: react-redux-thunk project that calls the RedditAPI to fetch posts from selected subreddits. &lt;a href=&#34;https://github.com/ajayns/frontend-dev-talk&#34;&gt;(Live Demo)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Projects such as &lt;em&gt;create-react-app&lt;/em&gt;, &lt;em&gt;nwb&lt;/em&gt; and &lt;em&gt;react-slingshot&lt;/em&gt; have been used to setup development envs.&lt;/p&gt; &#xA;&lt;p&gt;Install all the required packages/dependencies using yarn&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Serve the app to browser&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn start&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Tutorials/References&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reactjs.org/tutorial/tutorial.html&#34;&gt;https://reactjs.org/tutorial/tutorial.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://egghead.io/courses/the-beginner-s-guide-to-reactjs&#34;&gt;https://egghead.io/courses/the-beginner-s-guide-to-reactjs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.valentinog.com/blog/react-redux-tutorial-beginners/&#34;&gt;https://www.valentinog.com/blog/react-redux-tutorial-beginners/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@stowball/a-dummys-guide-to-redux-and-thunk-in-react-d8904a7005d3&#34;&gt;https://medium.com/@stowball/a-dummys-guide-to-redux-and-thunk-in-react-d8904a7005d3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.raywenderlich.com/178012/react-native-tutorial-building-android-apps-javascript&#34;&gt;https://www.raywenderlich.com/178012/react-native-tutorial-building-android-apps-javascript&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://medium.com/@rajaraodv/step-by-step-guide-to-building-react-redux-apps-using-mocks-48ca0f47f9a&#34;&gt;https://medium.com/@rajaraodv/step-by-step-guide-to-building-react-redux-apps-using-mocks-48ca0f47f9a&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gatsbyjs.org/tutorial/part-four/&#34;&gt;https://www.gatsbyjs.org/tutorial/part-four/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://redux.js.org/advanced/example-reddit-api&#34;&gt;https://redux.js.org/advanced/example-reddit-api&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Sorry, as this was a practice repo and no longer maintained, will not be updating the repo nor looking into issues/PRs.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>bilibili/flv.js</title>
    <updated>2022-11-30T01:34:36Z</updated>
    <id>tag:github.com,2022-11-30:/bilibili/flv.js</id>
    <link href="https://github.com/bilibili/flv.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTML5 FLV Player&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;flv.js &lt;a href=&#34;https://www.npmjs.com/package/flv.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/flv.js.svg?style=flat&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;An HTML5 Flash Video (FLV) Player written in pure JavaScript without Flash. LONG LIVE FLV!&lt;/p&gt; &#xA;&lt;p&gt;This project relies on &lt;a href=&#34;https://w3c.github.io/media-source/&#34;&gt;Media Source Extensions&lt;/a&gt; to work.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For FLV live stream playback, please consider &lt;a href=&#34;https://github.com/xqq/mpegts.js&#34;&gt;mpegts.js&lt;/a&gt; which is under active development.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This project will become rarely maintained.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;flv.js works by transmuxing FLV file stream into ISO BMFF (Fragmented MP4) segments, followed by feeding mp4 segments into an HTML5 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element through &lt;a href=&#34;https://w3c.github.io/media-source/&#34;&gt;Media Source Extensions&lt;/a&gt; API.&lt;/p&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://bilibili.github.io/flv.js/demo/&#34;&gt;http://bilibili.github.io/flv.js/demo/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FLV container with H.264 + AAC / MP3 codec playback&lt;/li&gt; &#xA; &lt;li&gt;Multipart segmented video playback&lt;/li&gt; &#xA; &lt;li&gt;HTTP FLV low latency live stream playback&lt;/li&gt; &#xA; &lt;li&gt;FLV over WebSocket live stream playback&lt;/li&gt; &#xA; &lt;li&gt;Compatible with Chrome, FireFox, Safari 10, IE11 and Edge&lt;/li&gt; &#xA; &lt;li&gt;Extremely low overhead, and hardware accelerated by your browser!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --save flv.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci                 # install dependencies / dev-dependences&#xA;npm run build:debug    # debug version flv.js will be emitted to /dist&#xA;npm run build          # minimized release version flv.min.js will be emitted to /dist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cnpm/cnpm&#34;&gt;cnpm&lt;/a&gt; mirror is recommended if you are in Mainland China.&lt;/p&gt; &#xA;&lt;h2&gt;CORS&lt;/h2&gt; &#xA;&lt;p&gt;If you use standalone video server for FLV stream, &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; header must be configured correctly on video server for cross-origin resource fetching.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bilibili/flv.js/master/docs/cors.md&#34;&gt;cors.md&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;flv.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;video id=&#34;videoElement&#34;&amp;gt;&amp;lt;/video&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;    if (flvjs.isSupported()) {&#xA;        var videoElement = document.getElementById(&#39;videoElement&#39;);&#xA;        var flvPlayer = flvjs.createPlayer({&#xA;            type: &#39;flv&#39;,&#xA;            url: &#39;http://example.com/flv/video.flv&#39;&#xA;        });&#xA;        flvPlayer.attachMediaElement(videoElement);&#xA;        flvPlayer.load();&#xA;        flvPlayer.play();&#xA;    }&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MP3 audio codec is currently not working on IE11 / Edge&lt;/li&gt; &#xA; &lt;li&gt;HTTP FLV live stream is not currently working on all browsers, see &lt;a href=&#34;https://raw.githubusercontent.com/bilibili/flv.js/master/docs/livestream.md&#34;&gt;livestream.md&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multipart playback&lt;/h2&gt; &#xA;&lt;p&gt;You only have to provide a playlist for &lt;code&gt;MediaDataSource&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/bilibili/flv.js/master/docs/multipart.md&#34;&gt;multipart.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Livestream playback&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bilibili/flv.js/master/docs/livestream.md&#34;&gt;livestream.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;API and Configuration&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bilibili/flv.js/master/docs/api.md&#34;&gt;api.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debug&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm ci         # install dependencies / dev-dependences&#xA;npm run dev    # watch file changes and build debug version on the fly&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Design&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/bilibili/flv.js/master/docs/design.md&#34;&gt;design.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (C) 2016 Bilibili. All Rights Reserved.&#xA;&#xA;Licensed under the Apache License, Version 2.0 (the &#34;License&#34;);&#xA;you may not use this file except in compliance with the License.&#xA;You may obtain a copy of the License at&#xA;&#xA;    http://www.apache.org/licenses/LICENSE-2.0&#xA;&#xA;Unless required by applicable law or agreed to in writing, software&#xA;distributed under the License is distributed on an &#34;AS IS&#34; BASIS,&#xA;WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#xA;See the License for the specific language governing permissions and&#xA;limitations under the License.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>chvin/react-tetris</title>
    <updated>2022-11-30T01:34:36Z</updated>
    <id>tag:github.com,2022-11-30:/chvin/react-tetris</id>
    <link href="https://github.com/chvin/react-tetris" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use React, Redux, Immutable to code Tetris. 🎮&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;English introduction&lt;/h3&gt; &#xA;&lt;p&gt;Please view &lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/README-EN.md&#34;&gt;README-EN.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;用React、Redux、Immutable做俄罗斯方块&lt;/h2&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;俄罗斯方块是一直各类程序语言热衷实现的经典游戏，JavaScript的实现版本也有很多，用React 做好俄罗斯方块则成了我一个目标。&lt;/p&gt; &#xA;&lt;p&gt;戳：&lt;a href=&#34;https://chvin.github.io/react-tetris/&#34;&gt;https://chvin.github.io/react-tetris/&lt;/a&gt; 玩一玩！&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;效果预览&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1Ag7CNXXXXXaoXXXXXXXXXXXX-320-483.gif&#34; alt=&#34;效果预览&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;正常速度的录制，体验流畅。&lt;/p&gt; &#xA;&lt;h3&gt;响应式&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1AdjZNXXXXXcCapXXXXXXXXXX-480-343.gif&#34; alt=&#34;响应式&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;不仅指屏幕的自适应，而是&lt;code&gt;在PC使用键盘、在手机使用手指的响应式操作&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1kvJyOVXXXXbhaFXXXXXXXXXX-320-555.gif&#34; alt=&#34;手机&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;数据持久化&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1EY7cNXXXXXXraXXXXXXXXXXX-320-399.gif&#34; alt=&#34;数据持久化&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;玩单机游戏最怕什么？断电。通过订阅 &lt;code&gt;store.subscribe&lt;/code&gt;，将state储存在localStorage，精确记录所有状态。网页关了刷新了、程序崩溃了、手机没电了，重新打开连接，都可以继续。&lt;/p&gt; &#xA;&lt;h3&gt;Redux 状态预览（&lt;a href=&#34;https://github.com/zalmoxisus/redux-devtools-extension&#34;&gt;Redux DevTools extension&lt;/a&gt;）&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1hGQqNXXXXXX3XFXXXXXXXXXX-640-381.gif&#34; alt=&#34;Redux状态预览&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Redux设计管理了所有应存的状态，这是上面持久化的保证。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;游戏框架使用的是 React + Redux，其中再加入了 Immutable，用它的实例来做来Redux的state。（有关React和Redux的介绍可以看：&lt;a href=&#34;http://www.ruanyifeng.com/blog/2015/03/react.html&#34;&gt;React入门实例&lt;/a&gt;、&lt;a href=&#34;https://camsong.github.io/redux-in-chinese/index.html&#34;&gt;Redux中文文档&lt;/a&gt;）&lt;/p&gt; &#xA;&lt;h2&gt;1、什么是 Immutable？&lt;/h2&gt; &#xA;&lt;p&gt;Immutable 是一旦创建，就不能再被更改的数据。对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象。&lt;/p&gt; &#xA;&lt;h3&gt;初识：&lt;/h3&gt; &#xA;&lt;p&gt;让我们看下面一段代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function keyLog(touchFn) {&#xA;  let data = { key: &#39;value&#39; };&#xA;  f(data);&#xA;  console.log(data.key); // 猜猜会打印什么？&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;不查看f，不知道它对 &lt;code&gt;data&lt;/code&gt; 做了什么，无法确认会打印什么。但如果 &lt;code&gt;data&lt;/code&gt; 是 Immutable，你可以确定打印的是 &lt;code&gt;value&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;function keyLog(touchFn) {&#xA;  let data = Immutable.Map({ key: &#39;value&#39; });&#xA;  f(data);&#xA;  console.log(data.get(&#39;key&#39;));  // value&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JavaScript 中的&lt;code&gt;Object&lt;/code&gt;与&lt;code&gt;Array&lt;/code&gt;等使用的是引用赋值，新的对象简单的引用了原始对象，改变新也将影响旧的：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;foo = {a: 1};  bar = foo;  bar.a = 2;&#xA;foo.a // 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;虽然这样做可以节约内存，但当应用复杂后，造成了状态不可控，是很大的隐患，节约的内存优点变得得不偿失。&lt;/p&gt; &#xA;&lt;p&gt;Immutable则不一样，相应的：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;foo = Immutable.Map({ a: 1 });  bar = foo.set(&#39;a&#39;, 2);&#xA;foo.get(&#39;a&#39;) // 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;简洁：&lt;/h3&gt; &#xA;&lt;p&gt;在&lt;code&gt;Redux&lt;/code&gt;中，它的最优做法是每个&lt;code&gt;reducer&lt;/code&gt;都返回一个新的对象（数组），所以我们常常会看到这样的代码：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// reducer&#xA;...&#xA;return [&#xA;   ...oldArr.slice(0, 3),&#xA;   newValue,&#xA;   ...oldArr.slice(4)&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;为了返回新的对象（数组），不得不有上面奇怪的样子，而在使用更深的数据结构时会变的更棘手。 让我们看看Immutable的做法：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// reducer&#xA;...&#xA;return oldArr.set(4, newValue);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;是不是很简洁？&lt;/p&gt; &#xA;&lt;h3&gt;关于 “===”：&lt;/h3&gt; &#xA;&lt;p&gt;我们知道对于&lt;code&gt;Object&lt;/code&gt;与&lt;code&gt;Array&lt;/code&gt;的&lt;code&gt;===&lt;/code&gt;比较，是对引用地址的比较而不是“值比较”，如：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;{a:1, b:2, c:3} === {a:1, b:2, c:3}; // false&#xA;[1, 2, [3, 4]] === [1, 2, [3, 4]]; // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;对于上面只能采用 &lt;code&gt;deepCopy&lt;/code&gt;、&lt;code&gt;deepCompare&lt;/code&gt;来遍历比较，不仅麻烦且好性能。&lt;/p&gt; &#xA;&lt;p&gt;我们感受来一下&lt;code&gt;Immutable&lt;/code&gt;的做法！&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;map1 = Immutable.Map({a:1, b:2, c:3});&#xA;map2 = Immutable.Map({a:1, b:2, c:3});&#xA;Immutable.is(map1, map2); // true&#xA;&#xA;// List1 = Immutable.List([1, 2, Immutable.List[3, 4]]);&#xA;List1 = Immutable.fromJS([1, 2, [3, 4]]);&#xA;List2 = Immutable.fromJS([1, 2, [3, 4]]);&#xA;Immutable.is(List1, List2); // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;似乎有阵清风吹过。&lt;/p&gt; &#xA;&lt;p&gt;React 做性能优化时有一个&lt;code&gt;大招&lt;/code&gt;，就是使用 &lt;code&gt;shouldComponentUpdate()&lt;/code&gt;，但它默认返回 &lt;code&gt;true&lt;/code&gt;，即始终会执行 &lt;code&gt;render()&lt;/code&gt; 方法，后面做 Virtual DOM 比较。&lt;/p&gt; &#xA;&lt;p&gt;在使用原生属性时，为了得出shouldComponentUpdate正确的&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;，不得不用deepCopy、deepCompare来算出答案，消耗的性能很不划算。而在有了Immutable之后，使用上面的方法对深层结构的比较就变的易如反掌。&lt;/p&gt; &#xA;&lt;p&gt;对于「俄罗斯方块」，试想棋盘是一个&lt;code&gt;二维数组&lt;/code&gt;，可以移动的方块则是&lt;code&gt;形状(也是二维数组)&lt;/code&gt;+&lt;code&gt;坐标&lt;/code&gt;。棋盘与方块的叠加则组成了最后的结果&lt;code&gt;Matrix&lt;/code&gt;。游戏中上面的属性都由&lt;code&gt;Immutable&lt;/code&gt;构建，通过它的比较方法，可以轻松写好&lt;code&gt;shouldComponentUpdate&lt;/code&gt;。源代码：&lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/src/components/matrix/index.js#L35&#34;&gt;/src/components/matrix/index.js#L35&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Immutable学习资料：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://facebook.github.io/immutable-js/&#34;&gt;Immutable.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/camsong/blog/issues/3&#34;&gt;Immutable 详解及 React 中实践&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;2、如何在Redux中使用Immutable&lt;/h2&gt; &#xA;&lt;p&gt;目标：将&lt;code&gt;state&lt;/code&gt; -&amp;gt; Immutable化。 关键的库：&lt;a href=&#34;https://github.com/gajus/redux-immutable&#34;&gt;gajus/redux-immutable&lt;/a&gt; 将原来 Redux提供的combineReducers改由上面的库提供：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;// rootReducers.js&#xA;// import { combineReducers } from &#39;redux&#39;; // 旧的方法&#xA;import { combineReducers } from &#39;redux-immutable&#39;; // 新的方法&#xA;&#xA;import prop1 from &#39;./prop1&#39;;&#xA;import prop2 from &#39;./prop2&#39;;&#xA;import prop3 from &#39;./prop3&#39;;&#xA;&#xA;const rootReducer = combineReducers({&#xA;  prop1, prop2, prop3,&#xA;});&#xA;&#xA;&#xA;// store.js&#xA;// 创建store的方法和常规一样&#xA;import { createStore } from &#39;redux&#39;;&#xA;import rootReducer from &#39;./reducers&#39;;&#xA;&#xA;const store = createStore(rootReducer);&#xA;export default store;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;通过新的&lt;code&gt;combineReducers&lt;/code&gt;将把store对象转化成Immutable，在container中使用时也会略有不同（但这正是我们想要的）：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JavaScript&#34;&gt;const mapStateToProps = (state) =&amp;gt; ({&#xA;  prop1: state.get(&#39;prop1&#39;),&#xA;  prop2: state.get(&#39;prop2&#39;),&#xA;  prop3: state.get(&#39;prop3&#39;),&#xA;  next: state.get(&#39;next&#39;),&#xA;});&#xA;export default connect(mapStateToProps)(App);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;3、Web Audio Api&lt;/h2&gt; &#xA;&lt;p&gt;游戏里有很多不同的音效，而实际上只引用了一个音效文件：&lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/build/music.mp3&#34;&gt;/build/music.mp3&lt;/a&gt;。借助&lt;code&gt;Web Audio Api&lt;/code&gt;能够以毫秒级精确、高频率的播放音效，这是&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;标签所做不到的。在游戏进行中按住方向键移动方块，便可以听到高频率的音效。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1fYgzNXXXXXXnXpXXXXXXXXXX-633-358.png&#34; alt=&#34;网页音效进阶&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WAA&lt;/code&gt; 是一套全新的相对独立的接口系统，对音频文件拥有更高的处理权限以及更专业的内置音频效果，是W3C的推荐接口，能专业处理“音速、音量、环境、音色可视化、高频、音向”等需求，下图介绍了WAA的使用流程。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB1nBf1NXXXXXagapXXXXXXXXXX-520-371.png&#34; alt=&#34;流程&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;其中Source代表一个音频源，Destination代表最终的输出，多个Source合成出了Destination。 源代码：&lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/src/unit/music.js&#34;&gt;/src/unit/music.js&lt;/a&gt; 实现了ajax加载mp3，并转为WAA，控制播放的过程。&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WAA&lt;/code&gt; 在各个浏览器的最新2个版本下的支持情况（&lt;a href=&#34;http://caniuse.com/#search=webaudio&#34;&gt;CanIUse&lt;/a&gt;）&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tps/TB15z4VOVXXXXahaXXXXXXXXXXX-679-133.png&#34; alt=&#34;浏览器兼容&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;可以看到IE阵营与大部分安卓机不能使用，其他ok。&lt;/p&gt; &#xA;&lt;p&gt;Web Audio Api 学习资料：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Web_Audio_API&#34;&gt;Web API 接口| MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.html5rocks.com/en/tutorials/webaudio/intro/&#34;&gt;Getting Started with Web Audio API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;4、游戏在体验上的优化&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;技术： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;按下方向键水平移动和竖直移动的触发频率是不同的，游戏可以定义触发频率，代替原生的事件频率，源代码：&lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/src/unit/event.js&#34;&gt;/src/unit/event.js&lt;/a&gt; ；&lt;/li&gt; &#xA;   &lt;li&gt;左右移动可以 delay 掉落的速度，但在撞墙移动的时候 delay 的稍小；在速度为6级时 通过delay 会保证在一行内水平完整移动一次；&lt;/li&gt; &#xA;   &lt;li&gt;对按钮同时注册&lt;code&gt;touchstart&lt;/code&gt;和&lt;code&gt;mousedown&lt;/code&gt;事件，以供响应式游戏。当&lt;code&gt;touchstart&lt;/code&gt;发生时，不会触发&lt;code&gt;mousedown&lt;/code&gt;，而当&lt;code&gt;mousedown&lt;/code&gt;发生时，由于鼠标移开事件元素可以不触发&lt;code&gt;mouseup&lt;/code&gt;，将同时监听&lt;code&gt;mouseout&lt;/code&gt; 模拟 &lt;code&gt;mouseup&lt;/code&gt;。源代码：&lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/src/components/keyboard/index.js&#34;&gt;/src/components/keyboard/index.js&lt;/a&gt;；&lt;/li&gt; &#xA;   &lt;li&gt;监听了 &lt;code&gt;visibilitychange&lt;/code&gt; 事件，当页面被隐藏\切换的时候，游戏将不会进行，切换回来将继续，这个&lt;code&gt;focus&lt;/code&gt;状态也被写进了Redux中。所以当用手机玩来&lt;code&gt;电话&lt;/code&gt;时，游戏进度将保存；PC开着游戏干别的也不会听到gameover，这有点像 &lt;code&gt;ios&lt;/code&gt; 应用的切换。&lt;/li&gt; &#xA;   &lt;li&gt;在&lt;code&gt;任意&lt;/code&gt;时刻刷新网页，（比如消除方块时、游戏结束时）也能还原当前状态；&lt;/li&gt; &#xA;   &lt;li&gt;游戏中唯一用到的图片是&lt;img src=&#34;https://img.alicdn.com/tps/TB1qq7kNXXXXXacXFXXXXXXXXXX-400-186.png&#34; alt=&#34;image&#34;&gt;，其他都是CSS；&lt;/li&gt; &#xA;   &lt;li&gt;游戏兼容 Chrome、Firefox、IE9+、Edge等；&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;玩法： &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;可以在游戏未开始时制定初始的棋盘（十个级别）和速度（六个级别）；&lt;/li&gt; &#xA;   &lt;li&gt;一次消除1行得100分、2行得300分、3行得700分、4行得1500分；&lt;/li&gt; &#xA;   &lt;li&gt;方块掉落速度会随着消除的行数增加（每20行增加一个级别）；&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;5、开发中的经验梳理&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;为所有的&lt;code&gt;component&lt;/code&gt;都编写了&lt;code&gt;shouldComponentUpdate&lt;/code&gt;，在手机上的性能相对有显著的提升。中大型应用在遇到性能上的问题的时候，写好shouldComponentUpdate 一定会帮你一把。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;无状态组件&lt;/code&gt;（&lt;a href=&#34;https://medium.com/@joshblack/stateless-components-in-react-0-14-f9798f8b992d#.xjqnbfx4e&#34;&gt;Stateless Functional Components&lt;/a&gt;）是没有生命周期的。而因为上条因素，所有组件都需要生命周期 shouldComponentUpdate，所以未使用无状态组件。&lt;/li&gt; &#xA; &lt;li&gt;在 &lt;code&gt;webpack.config.js&lt;/code&gt; 中的 devServer属性写入&lt;code&gt;host: &#39;0.0.0.0&#39;&lt;/code&gt;，可以在开发时用ip访问，不局限在localhost；&lt;/li&gt; &#xA; &lt;li&gt;redux中的&lt;code&gt;store&lt;/code&gt;并非只能通过connect将方法传递给&lt;code&gt;container&lt;/code&gt;，可以跳出组件，在别的文件拿出来做流程控制(dispatch)，源代码：&lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/src/control/states.js&#34;&gt;/src/control/states.js&lt;/a&gt;；&lt;/li&gt; &#xA; &lt;li&gt;用 react+redux 做持久化非常的方便，只要将redux状态储存，在每一个reduers做初始化的时候读取就好。&lt;/li&gt; &#xA; &lt;li&gt;通过配置 .eslintrc.js&lt;code&gt; 与 webpack.config.js&lt;/code&gt; ，项目中集成了 &lt;code&gt;ESLint&lt;/code&gt; 检验。使用 ESLint 可以使编码按规范编写，有效地控制代码质量。不符规范的代码在开发时（或build时）都能通过IDE与控制台发现错误。 参考：&lt;a href=&#34;https://github.com/dwqs/react-style-guide&#34;&gt;Airbnb: React使用规范&lt;/a&gt;；&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;6、总结&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;作为一个 React 的练手应用，在实现的过程中发现小小的“方块”还是有很多的细节可以优化和打磨，这时就是考验一名前端工程师的细心和功力的时候。&lt;/li&gt; &#xA; &lt;li&gt;优化的方向既有 React 的本身，比如哪些状态由 Redux存，哪些状态给组件的state就好；而跳出框架又有产品的很多特点可以玩，为了达到你的需求，这些都将自然的推进技术的发展。&lt;/li&gt; &#xA; &lt;li&gt;一个项目从零开始，功能一点一滴慢慢累积，就会盖成高楼，不要畏难，有想法就敲起来吧。 ^_^&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;7、控制流程&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.alicdn.com/tfs/TB1B6ODRXXXXXXHaFXXXXXXXXXX-1920-1080.png&#34; alt=&#34;控制流程&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;8、开发&lt;/h2&gt; &#xA;&lt;h3&gt;安装&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;运行&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;浏览自动打开 &lt;a href=&#34;http://127.0.0.1:8080/&#34;&gt;http://127.0.0.1:8080/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;多语言&lt;/h3&gt; &#xA;&lt;p&gt;在 &lt;a href=&#34;https://github.com/chvin/react-tetris/raw/master/i18n.json&#34;&gt;i18n.json&lt;/a&gt; 配置多语言环境，使用&#34;lan&#34;参数匹配语言如：&lt;code&gt;https://chvin.github.io/react-tetris/?lan=en&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;打包编译&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;在build文件夹下生成结果。&lt;/p&gt;</summary>
  </entry>
</feed>