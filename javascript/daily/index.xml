<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-06T01:38:48Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>antfu/sd-webui-qrcode-toolkit</title>
    <updated>2023-07-06T01:38:48Z</updated>
    <id>tag:github.com,2023-07-06:/antfu/sd-webui-qrcode-toolkit</id>
    <link href="https://github.com/antfu/sd-webui-qrcode-toolkit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Anthony&#39;s QR Toolkit for Stable Diffusion WebUI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Anthony&#39;s QR Toolkit for Stable Diffusion WebUI&lt;/h1&gt; &#xA;&lt;p&gt;Extension for AUTOMATIC1111&#39;s &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Stable Diffusion web UI&lt;/a&gt;, provides integration with &lt;a href=&#34;https://github.com/antfu/qrcode-toolkit&#34;&gt;Anthony&#39;s QR Toolkit&lt;/a&gt; for easy image sending.&lt;/p&gt; &#xA;&lt;img width=&#34;1074&#34; alt=&#34;Screenshot&#34; src=&#34;https://github.com/antfu/sd-webui-qrcode-toolkit/assets/11247099/d19b6cc8-e2e9-499e-b538-d5c0510942ce&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Extensions&lt;/code&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;Install from URL&lt;/code&gt; tab in the tab.&lt;/li&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;https://github.com/antfu/sd-webui-qrcode-toolkit.git&lt;/code&gt; to &lt;code&gt;URL for extension&#39;s git repository&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Press &lt;code&gt;Install&lt;/code&gt; button.&lt;/li&gt; &#xA; &lt;li&gt;Wait for 5 seconds, and you will see the message &lt;code&gt;Use Installed tab to restart&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Go to the &lt;code&gt;Installed&lt;/code&gt; tab, and then click &lt;code&gt;Apply and restart UI&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fluid-dev/hexo-theme-fluid</title>
    <updated>2023-07-06T01:38:48Z</updated>
    <id>tag:github.com,2023-07-06:/fluid-dev/hexo-theme-fluid</id>
    <link href="https://github.com/fluid-dev/hexo-theme-fluid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🌊 一款 Material Design 风格的 Hexo 主题 / An elegant Material-Design theme for Hexo&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Fluid Logo&#34; src=&#34;https://avatars2.githubusercontent.com/t/3419353?s=280&amp;amp;v=4&#34; width=&#34;128&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;一款 Material Design 风格的主题&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;An elegant Material-Design theme for Hexo&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.jsdelivr.net/gh/fluid-dev/static@master/hexo-theme-fluid/screenshots/index.png&#34; alt=&#34;ScreenShot&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a title=&#34;Hexo Version&#34; target=&#34;_blank&#34; href=&#34;https://hexo.io/zh-cn/&#34;&gt;&lt;img alt=&#34;Hexo Version&#34; src=&#34;https://img.shields.io/badge/Hexo-%3E%3D%205.0-orange?style=flat&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Node Version&#34; target=&#34;_blank&#34; href=&#34;https://nodejs.org/zh-cn/&#34;&gt;&lt;img alt=&#34;Node Version&#34; src=&#34;https://img.shields.io/badge/Node-%3E%3D%2010.13.0-yellowgreen?style=flat&#34;&gt;&lt;/a&gt; &lt;a title=&#34;License&#34; target=&#34;_blank&#34; href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/raw/master/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/fluid-dev/hexo-theme-fluid.svg?style=flat&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a title=&#34;GitHub Release&#34; target=&#34;_blank&#34; href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/releases&#34;&gt;&lt;img alt=&#34;GitHub Release&#34; src=&#34;https://img.shields.io/github/v/release/fluid-dev/hexo-theme-fluid?style=flat&#34;&gt;&lt;/a&gt; &lt;a title=&#34;Npm Downloads&#34; target=&#34;_blank&#34; href=&#34;https://www.npmjs.com/package/hexo-theme-fluid&#34;&gt;&lt;img alt=&#34;Npm Downloads&#34; src=&#34;https://img.shields.io/npm/dt/hexo-theme-fluid?color=red&amp;amp;label=npm&#34;&gt;&lt;/a&gt; &lt;a title=&#34;GitHub Commits&#34; target=&#34;_blank&#34; href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/commits/master&#34;&gt;&lt;img alt=&#34;GitHub Commits&#34; src=&#34;https://img.shields.io/github/commit-activity/m/fluid-dev/hexo-theme-fluid.svg?style=flat&amp;amp;color=brightgreen&amp;amp;label=commits&#34;&gt;&lt;/a&gt; &lt;br&gt;&lt;br&gt; &lt;a title=&#34;GitHub Watchers&#34; target=&#34;_blank&#34; href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/watchers&#34;&gt;&lt;img alt=&#34;GitHub Watchers&#34; src=&#34;https://img.shields.io/github/watchers/fluid-dev/hexo-theme-fluid.svg?label=Watchers&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;a title=&#34;GitHub Stars&#34; target=&#34;_blank&#34; href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/stargazers&#34;&gt;&lt;img alt=&#34;GitHub Stars&#34; src=&#34;https://img.shields.io/github/stars/fluid-dev/hexo-theme-fluid.svg?label=Stars&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;a title=&#34;GitHub Forks&#34; target=&#34;_blank&#34; href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/network/members&#34;&gt;&lt;img alt=&#34;GitHub Forks&#34; src=&#34;https://img.shields.io/github/forks/fluid-dev/hexo-theme-fluid.svg?label=Forks&amp;amp;style=social&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;🇨🇳 中文简体 | &lt;a title=&#34;English&#34; href=&#34;https://raw.githubusercontent.com/fluid-dev/hexo-theme-fluid/master/README_en.md&#34;&gt;🇬🇧 English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;span&gt;文档：&lt;/span&gt; &lt;a href=&#34;https://hexo.fluid-dev.com/docs/guide/&#34;&gt;主题配置&lt;/a&gt; | &lt;a href=&#34;https://hexo.io/zh-cn/docs/front-matter&#34;&gt;文章配置&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;span&gt;预览：&lt;/span&gt; &lt;a href=&#34;https://hexo.fluid-dev.com/&#34;&gt;Fluid&#39;s blog&lt;/a&gt; | &lt;a href=&#34;https://zkqiang.cn&#34;&gt;zkqiang&#39;s blog&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;快速开始&lt;/h2&gt; &#xA;&lt;h4&gt;1. 搭建 Hexo 博客&lt;/h4&gt; &#xA;&lt;p&gt;如果你还没有 Hexo 博客，请按照 &lt;a href=&#34;https://hexo.io/zh-cn/docs/&#34;&gt;Hexo 官方文档&lt;/a&gt; 进行安装、建站。&lt;/p&gt; &#xA;&lt;h4&gt;2. 获取主题最新版本&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;方式一：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hexo 5.0.0 版本以上，推荐通过 npm 直接安装，进入博客目录执行命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save hexo-theme-fluid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后在博客目录下创建 &lt;code&gt;_config.fluid.yml&lt;/code&gt;，将主题的 &lt;a href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/raw/master/_config.yml&#34;&gt;_config.yml&lt;/a&gt; 内容复制进去。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;方式二：&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;下载 &lt;a href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/releases&#34;&gt;最新 release 版本&lt;/a&gt; 解压到 themes 目录，并将解压出的文件夹重命名为 &lt;code&gt;fluid&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;h4&gt;3. 指定主题&lt;/h4&gt; &#xA;&lt;p&gt;如下修改 Hexo 博客目录中的 &lt;code&gt;_config.yml&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;theme: fluid  # 指定主题&#xA;&#xA;language: zh-CN  # 指定语言，会影响主题显示的语言，按需修改&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. 创建「关于页」&lt;/h4&gt; &#xA;&lt;p&gt;首次使用主题的「关于页」需要手动创建：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hexo new page about&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;创建成功后，编辑博客目录下 &lt;code&gt;/source/about/index.md&lt;/code&gt;，添加 &lt;code&gt;layout&lt;/code&gt; 属性。&lt;/p&gt; &#xA;&lt;p&gt;修改后的文件示例如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;title: about&#xA;layout: about&#xA;---&#xA;&#xA;这里写关于页的正文，支持 Markdown, HTML&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;更新主题&lt;/h2&gt; &#xA;&lt;p&gt;更新主题的方式&lt;a href=&#34;https://hexo.fluid-dev.com/docs/start/#%E6%9B%B4%E6%96%B0%E4%B8%BB%E9%A2%98&#34;&gt;参照这里&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;功能特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 无比详实的&lt;a href=&#34;https://hexo.fluid-dev.com/docs/&#34;&gt;用户文档&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 页面组件懒加载&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 多种代码高亮方案&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 多语言配置&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 内置多款评论插件&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 内置网页访问统计&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 内置文章本地搜索&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持暗色模式&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持脚注语法&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持 LaTeX 数学公式&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 支持 mermaid 流程图&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;鸣谢&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34; style=&#34;width: 240px;&#34;&gt; &lt;a href=&#34;https://flowus.cn/share/eebf2144-8db7-4d68-b31e-bc2c116871de&#34;&gt; &lt;img src=&#34;https://github-production-user-asset-6210df.s3.amazonaws.com/32983588/243899272-092eeb46-9172-4c10-9e72-53561ff37a00.png&#34; height=&#34;200px&#34;&gt;&lt;br&gt; &lt;sub&gt;首席赞助商 ORENCEAI&lt;/sub&gt;&lt;br&gt; &lt;sub&gt;全新的 ChatGPT 人工智能对话平台&lt;/sub&gt; &lt;/a&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34; style=&#34;width: 240px;&#34;&gt; &lt;a href=&#34;https://www.jetbrains.com/?from=hexo-theme-fluid&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/fluid-dev/static/690616966f34a58d66aa15ac7b550dd7bbc03967/hexo-theme-fluid/jetbrains.svg?sanitize=true&#34; height=&#34;200px&#34;&gt;&lt;br&gt; &lt;sub&gt;免费开发工具提供方 JetBrains&lt;/sub&gt;&lt;br&gt; &lt;sub&gt;专注于创建智能开发工具&lt;/sub&gt; &lt;/a&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;贡献者&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fluid-dev/hexo-theme-fluid/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/hexo-theme-fluid/contributors.svg?width=890&amp;amp;button=false&#34; alt=&#34;contributors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;英文文档翻译：&lt;a href=&#34;https://eatrice.top/&#34;&gt;@EatRice&lt;/a&gt; &lt;a href=&#34;https://ruru.eatrice.top&#34;&gt;@橙子杀手&lt;/a&gt; &lt;a href=&#34;https://sinetian.github.io/&#34;&gt;@Sinetian&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;其他贡献：&lt;a href=&#34;https://github.com/zhugaoqi&#34;&gt;@zhugaoqi&lt;/a&gt; &lt;a href=&#34;https://github.com/julydate&#34;&gt;@julydate&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如你也想贡献代码，可参照&lt;a href=&#34;https://hexo.fluid-dev.com/docs/contribute/&#34;&gt;贡献指南&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;支持我们&lt;/h2&gt; &#xA;&lt;p&gt;如果你觉得这个项目有帮助，并愿意支持它的发展，可以通过以下方式支持我们的开源创作：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34; style=&#34;width: 240px;&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;img src=&#34;https://github.com/fluid-dev/static/raw/master/hexo-theme-fluid/sponsor.png?s=200&amp;amp;v=4&#34; height=&#34;200px&#34; alt=&#34;微信赞赏码&#34;&gt;&#xA;     &lt;br&gt; &#xA;     &lt;sub&gt;微信赞赏码&lt;/sub&gt; &#xA;    &lt;/div&gt; &lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34; style=&#34;width: 240px;&#34;&gt; &#xA;    &lt;div&gt; &#xA;     &lt;a href=&#34;https://etherscan.io/address/0x0021395954710be29c0BFDCB3f98f4D2fa5A1448&#34;&gt; &lt;img src=&#34;https://avatars.githubusercontent.com/u/6250754?s=200&amp;amp;v=4&#34; height=&#34;200px&#34; alt=&#34;ERC20 Token&#34;&gt; &lt;/a&gt; &#xA;     &lt;br&gt; &#xA;     &lt;sub&gt;ERC20 Token: 0x0021395954710&lt;br&gt;be29c0BFDCB3f98f4D2fa5A1448&lt;/sub&gt; &#xA;    &lt;/div&gt; &lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;同时我们正在&lt;strong&gt;寻求商业赞助&lt;/strong&gt;，如果贵司想在本页显著位置展示广告位（每月 6K+ Views 定向流量曝光），或者有其他赞助形式，可将联系方式发送邮件至 zkqiang#126.com (#替换为@)。&lt;/p&gt; &#xA;&lt;h2&gt;Star 趋势&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://starchart.cc/fluid-dev/hexo-theme-fluid&#34;&gt;&lt;img src=&#34;https://starchart.cc/fluid-dev/hexo-theme-fluid.svg?sanitize=true&#34; alt=&#34;Stargazers over time&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>protobufjs/protobuf.js</title>
    <updated>2023-07-06T01:38:48Z</updated>
    <id>tag:github.com,2023-07-06:/protobufjs/protobuf.js</id>
    <link href="https://github.com/protobufjs/protobuf.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Protocol Buffers for JavaScript (&amp; TypeScript).&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;protobuf.js&#34; src=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/pbjs.png&#34; width=&#34;120&#34; height=&#34;104&#34;&gt;&lt;/p&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://npmjs.org/package/protobufjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/protobufjs.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/dcodeIO/protobuf.js&#34;&gt;&lt;img src=&#34;https://travis-ci.org/dcodeIO/protobuf.js.svg?branch=master&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/protobufjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/protobufjs.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_donations&amp;amp;business=dcode%40dcode.io&amp;amp;item_name=Open%20Source%20Software%20Donation&amp;amp;item_number=dcodeIO%2Fprotobuf.js&#34;&gt;&lt;img alt=&#34;donate ❤&#34; src=&#34;https://img.shields.io/badge/donate-❤-ff2244.svg&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Protocol Buffers&lt;/strong&gt; are a language-neutral, platform-neutral, extensible way of serializing structured data for use in communications protocols, data storage, and more, originally designed at Google (&lt;a href=&#34;https://developers.google.com/protocol-buffers/&#34;&gt;see&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;protobuf.js&lt;/strong&gt; is a pure JavaScript implementation with &lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt; support for &lt;a href=&#34;https://nodejs.org&#34;&gt;node.js&lt;/a&gt; and the browser. It&#39;s easy to use, blazingly fast and works out of the box with &lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/proto&#34;&gt;.proto&lt;/a&gt; files!&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;br&gt; How to include protobuf.js in your project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;br&gt; A brief introduction to using the toolset.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#valid-message&#34;&gt;Valid Message&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#toolset&#34;&gt;Toolset&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#examples&#34;&gt;Examples&lt;/a&gt;&lt;br&gt; A few examples to get you started.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-proto-files&#34;&gt;Using .proto files&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-json-descriptors&#34;&gt;Using JSON descriptors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-reflection-only&#34;&gt;Using reflection only&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-custom-classes&#34;&gt;Using custom classes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#using-services&#34;&gt;Using services&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#usage-with-typescript&#34;&gt;Usage with TypeScript&lt;/a&gt;&lt;br&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#additional-documentation&#34;&gt;Additional documentation&lt;/a&gt;&lt;br&gt; A list of available documentation resources.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;br&gt; A few internals and a benchmark on performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;br&gt; Notes on compatibility regarding browsers and optional libraries.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#building&#34;&gt;Building&lt;/a&gt;&lt;br&gt; How to build the library and its components yourself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;node.js&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; npm install protobufjs [--save --save-prefix=~]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var protobuf = require(&#34;protobufjs&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The command line utility lives in the protobufjs-cli package and must be installed separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; npm install protobufjs-cli [--save --save-prefix=~]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that this library&#39;s versioning scheme is not semver-compatible for historical reasons. For guaranteed backward compatibility, always depend on &lt;code&gt;~6.A.B&lt;/code&gt; instead of &lt;code&gt;^6.A.B&lt;/code&gt; (hence the &lt;code&gt;--save-prefix&lt;/code&gt; above).&lt;/p&gt; &#xA;&lt;h3&gt;Browsers&lt;/h3&gt; &#xA;&lt;p&gt;Development:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&#34;//cdn.jsdelivr.net/npm/protobufjs@7.X.X/dist/protobuf.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Production:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;script src=&#34;//cdn.jsdelivr.net/npm/protobufjs@7.X.X/dist/protobuf.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Remember&lt;/strong&gt; to replace the version tag with the exact &lt;a href=&#34;https://github.com/protobufjs/protobuf.js/tags&#34;&gt;release&lt;/a&gt; your project depends upon.&lt;/p&gt; &#xA;&lt;p&gt;The library supports CommonJS and AMD loaders and also exports globally as &lt;code&gt;protobuf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Distributions&lt;/h3&gt; &#xA;&lt;p&gt;Where bundle size is a factor, there are additional stripped-down versions of the [full library][dist-full] (~19kb gzipped) available that exclude certain functionality:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;When working with JSON descriptors (i.e. generated by &lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/cli/README.md#pbjs-for-javascript&#34;&gt;pbjs&lt;/a&gt;) and/or reflection only, see the [light library][dist-light] (~16kb gzipped) that excludes the parser. CommonJS entry point is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var protobuf = require(&#34;protobufjs/light&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;When working with statically generated code only, see the [minimal library][dist-minimal] (~6.5kb gzipped) that also excludes reflection. CommonJS entry point is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var protobuf = require(&#34;protobufjs/minimal&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Distribution&lt;/th&gt; &#xA;   &lt;th&gt;Location&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Full&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cdn.jsdelivr.net/npm/protobufjs/dist/&#34;&gt;https://cdn.jsdelivr.net/npm/protobufjs/dist/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Light&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cdn.jsdelivr.net/npm/protobufjs/dist/light/&#34;&gt;https://cdn.jsdelivr.net/npm/protobufjs/dist/light/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Minimal&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://cdn.jsdelivr.net/npm/protobufjs/dist/minimal/&#34;&gt;https://cdn.jsdelivr.net/npm/protobufjs/dist/minimal/&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Because JavaScript is a dynamically typed language, protobuf.js introduces the concept of a &lt;strong&gt;valid message&lt;/strong&gt; in order to provide the best possible &lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#performance&#34;&gt;performance&lt;/a&gt; (and, as a side product, proper typings):&lt;/p&gt; &#xA;&lt;h3&gt;Valid message&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A valid message is an object (1) not missing any required fields and (2) exclusively composed of JS types understood by the wire format writer.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are two possible types of valid messages and the encoder is able to work with both of these for convenience:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Message instances&lt;/strong&gt; (explicit instances of message classes with default values on their prototype) always (have to) satisfy the requirements of a valid message by design and&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plain JavaScript objects&lt;/strong&gt; that just so happen to be composed in a way satisfying the requirements of a valid message as well.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In a nutshell, the wire format writer understands the following types:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Field type&lt;/th&gt; &#xA;   &lt;th&gt;Expected JS type (create, encode)&lt;/th&gt; &#xA;   &lt;th&gt;Conversion (fromObject)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s-/u-/int32&lt;br&gt;s-/fixed32&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt; (32 bit integer)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;value | 0&lt;/code&gt; if signed&lt;br&gt;&lt;code&gt;value &amp;gt;&amp;gt;&amp;gt; 0&lt;/code&gt; if unsigned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;s-/u-/int64&lt;br&gt;s-/fixed64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Long&lt;/code&gt;-like (optimal)&lt;br&gt;&lt;code&gt;number&lt;/code&gt; (53 bit integer)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Long.fromValue(value)&lt;/code&gt; with long.js&lt;br&gt;&lt;code&gt;parseInt(value, 10)&lt;/code&gt; otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;float&lt;br&gt;double&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number(value)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean(value)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String(value)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;bytes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Uint8Array&lt;/code&gt; (optimal)&lt;br&gt;&lt;code&gt;Buffer&lt;/code&gt; (optimal under node)&lt;br&gt;&lt;code&gt;Array.&amp;lt;number&amp;gt;&lt;/code&gt; (8 bit integers)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;base64.decode(value)&lt;/code&gt; if a &lt;code&gt;string&lt;/code&gt;&lt;br&gt;&lt;code&gt;Object&lt;/code&gt; with non-zero &lt;code&gt;.length&lt;/code&gt; is assumed to be buffer-like&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;number&lt;/code&gt; (32 bit integer)&lt;/td&gt; &#xA;   &lt;td&gt;Looks up the numeric id if a &lt;code&gt;string&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;message&lt;/td&gt; &#xA;   &lt;td&gt;Valid message&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Message.fromObject(value)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Explicit &lt;code&gt;undefined&lt;/code&gt; and &lt;code&gt;null&lt;/code&gt; are considered as not set if the field is optional.&lt;/li&gt; &#xA; &lt;li&gt;Repeated fields are &lt;code&gt;Array.&amp;lt;T&amp;gt;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Map fields are &lt;code&gt;Object.&amp;lt;string,T&amp;gt;&lt;/code&gt; with the key being the string representation of the respective value or an 8 characters long binary hash string for &lt;code&gt;Long&lt;/code&gt;-likes.&lt;/li&gt; &#xA; &lt;li&gt;Types marked as &lt;em&gt;optimal&lt;/em&gt; provide the best performance because no conversion step (i.e. number to low and high bits or base64 string to buffer) is required.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Toolset&lt;/h3&gt; &#xA;&lt;p&gt;With that in mind and again for performance reasons, each message class provides a distinct set of methods with each method doing just one thing. This avoids unnecessary assertions / redundant operations where performance is a concern but also forces a user to perform verification (of plain JavaScript objects that &lt;em&gt;might&lt;/em&gt; just so happen to be a valid message) explicitly where necessary - for example when dealing with user input.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that &lt;code&gt;Message&lt;/code&gt; below refers to any message class.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.verify&lt;/strong&gt;(message: &lt;code&gt;Object&lt;/code&gt;): &lt;code&gt;null|string&lt;/code&gt;&lt;br&gt; verifies that a &lt;strong&gt;plain JavaScript object&lt;/strong&gt; satisfies the requirements of a valid message and thus can be encoded without issues. Instead of throwing, it returns the error message as a string, if any.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var payload = &#34;invalid (not an object)&#34;;&#xA;var err = AwesomeMessage.verify(payload);&#xA;if (err)&#xA;  throw Error(err);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.encode&lt;/strong&gt;(message: &lt;code&gt;Message|Object&lt;/code&gt; [, writer: &lt;code&gt;Writer&lt;/code&gt;]): &lt;code&gt;Writer&lt;/code&gt;&lt;br&gt; encodes a &lt;strong&gt;message instance&lt;/strong&gt; or valid &lt;strong&gt;plain JavaScript object&lt;/strong&gt;. This method does not implicitly verify the message and it&#39;s up to the user to make sure that the payload is a valid message.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var buffer = AwesomeMessage.encode(message).finish();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.encodeDelimited&lt;/strong&gt;(message: &lt;code&gt;Message|Object&lt;/code&gt; [, writer: &lt;code&gt;Writer&lt;/code&gt;]): &lt;code&gt;Writer&lt;/code&gt;&lt;br&gt; works like &lt;code&gt;Message.encode&lt;/code&gt; but additionally prepends the length of the message as a varint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.decode&lt;/strong&gt;(reader: &lt;code&gt;Reader|Uint8Array&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;&lt;br&gt; decodes a buffer to a &lt;strong&gt;message instance&lt;/strong&gt;. If required fields are missing, it throws a &lt;code&gt;util.ProtocolError&lt;/code&gt; with an &lt;code&gt;instance&lt;/code&gt; property set to the so far decoded message. If the wire format is invalid, it throws an &lt;code&gt;Error&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;try {&#xA;  var decodedMessage = AwesomeMessage.decode(buffer);&#xA;} catch (e) {&#xA;    if (e instanceof protobuf.util.ProtocolError) {&#xA;      // e.instance holds the so far decoded message with missing required fields&#xA;    } else {&#xA;      // wire format is invalid&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.decodeDelimited&lt;/strong&gt;(reader: &lt;code&gt;Reader|Uint8Array&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;&lt;br&gt; works like &lt;code&gt;Message.decode&lt;/code&gt; but additionally reads the length of the message prepended as a varint.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.create&lt;/strong&gt;(properties: &lt;code&gt;Object&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;&lt;br&gt; creates a new &lt;strong&gt;message instance&lt;/strong&gt; from a set of properties that satisfy the requirements of a valid message. Where applicable, it is recommended to prefer &lt;code&gt;Message.create&lt;/code&gt; over &lt;code&gt;Message.fromObject&lt;/code&gt; because it doesn&#39;t perform possibly redundant conversion.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var message = AwesomeMessage.create({ awesomeField: &#34;AwesomeString&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.fromObject&lt;/strong&gt;(object: &lt;code&gt;Object&lt;/code&gt;): &lt;code&gt;Message&lt;/code&gt;&lt;br&gt; converts any non-valid &lt;strong&gt;plain JavaScript object&lt;/strong&gt; to a &lt;strong&gt;message instance&lt;/strong&gt; using the conversion steps outlined within the table above.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var message = AwesomeMessage.fromObject({ awesomeField: 42 });&#xA;// converts awesomeField to a string&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Message.toObject&lt;/strong&gt;(message: &lt;code&gt;Message&lt;/code&gt; [, options: &lt;code&gt;ConversionOptions&lt;/code&gt;]): &lt;code&gt;Object&lt;/code&gt;&lt;br&gt; converts a &lt;strong&gt;message instance&lt;/strong&gt; to an arbitrary &lt;strong&gt;plain JavaScript object&lt;/strong&gt; for interoperability with other libraries or storage. The resulting plain JavaScript object &lt;em&gt;might&lt;/em&gt; still satisfy the requirements of a valid message depending on the actual conversion options specified, but most of the time it does not.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var object = AwesomeMessage.toObject(message, {&#xA;  enums: String,  // enums as string names&#xA;  longs: String,  // longs as strings (requires long.js)&#xA;  bytes: String,  // bytes as base64 encoded strings&#xA;  defaults: true, // includes default values&#xA;  arrays: true,   // populates empty arrays (repeated fields) even if defaults=false&#xA;  objects: true,  // populates empty objects (map fields) even if defaults=false&#xA;  oneofs: true    // includes virtual oneof fields set to the present field&#39;s name&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For reference, the following diagram aims to display relationships between the different methods and the concept of a valid message:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img alt=&#34;Toolset Diagram&#34; src=&#34;https://protobufjs.github.io/protobuf.js/toolset.svg?sanitize=true&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;In other words: &lt;code&gt;verify&lt;/code&gt; indicates that calling &lt;code&gt;create&lt;/code&gt; or &lt;code&gt;encode&lt;/code&gt; directly on the plain object will [result in a valid message respectively] succeed. &lt;code&gt;fromObject&lt;/code&gt;, on the other hand, does conversion from a broader range of plain objects to create valid messages. (&lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/issues/748#issuecomment-291925749&#34;&gt;ref&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Using .proto files&lt;/h3&gt; &#xA;&lt;p&gt;It is possible to load existing .proto files using the full library, which parses and compiles the definitions to ready to use (reflection-based) message classes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// awesome.proto&#xA;package awesomepackage;&#xA;syntax = &#34;proto3&#34;;&#xA;&#xA;message AwesomeMessage {&#xA;    string awesome_field = 1; // becomes awesomeField&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;protobuf.load(&#34;awesome.proto&#34;, function(err, root) {&#xA;    if (err)&#xA;        throw err;&#xA;&#xA;    // Obtain a message type&#xA;    var AwesomeMessage = root.lookupType(&#34;awesomepackage.AwesomeMessage&#34;);&#xA;&#xA;    // Exemplary payload&#xA;    var payload = { awesomeField: &#34;AwesomeString&#34; };&#xA;&#xA;    // Verify the payload if necessary (i.e. when possibly incomplete or invalid)&#xA;    var errMsg = AwesomeMessage.verify(payload);&#xA;    if (errMsg)&#xA;        throw Error(errMsg);&#xA;&#xA;    // Create a new message&#xA;    var message = AwesomeMessage.create(payload); // or use .fromObject if conversion is necessary&#xA;&#xA;    // Encode a message to an Uint8Array (browser) or Buffer (node)&#xA;    var buffer = AwesomeMessage.encode(message).finish();&#xA;    // ... do something with buffer&#xA;&#xA;    // Decode an Uint8Array (browser) or Buffer (node) to a message&#xA;    var message = AwesomeMessage.decode(buffer);&#xA;    // ... do something with message&#xA;&#xA;    // If the application uses length-delimited buffers, there is also encodeDelimited and decodeDelimited.&#xA;&#xA;    // Maybe convert the message back to a plain object&#xA;    var object = AwesomeMessage.toObject(message, {&#xA;        longs: String,&#xA;        enums: String,&#xA;        bytes: String,&#xA;        // see ConversionOptions&#xA;    });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, promise syntax can be used by omitting the callback, if preferred:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;protobuf.load(&#34;awesome.proto&#34;)&#xA;    .then(function(root) {&#xA;       ...&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using JSON descriptors&lt;/h3&gt; &#xA;&lt;p&gt;The library utilizes JSON descriptors that are equivalent to a .proto definition. For example, the following is identical to the .proto definition seen above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// awesome.json&#xA;{&#xA;  &#34;nested&#34;: {&#xA;    &#34;awesomepackage&#34;: {&#xA;      &#34;nested&#34;: {&#xA;        &#34;AwesomeMessage&#34;: {&#xA;          &#34;fields&#34;: {&#xA;            &#34;awesomeField&#34;: {&#xA;              &#34;type&#34;: &#34;string&#34;,&#xA;              &#34;id&#34;: 1&#xA;            }&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;JSON descriptors closely resemble the internal reflection structure:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Type (T)&lt;/th&gt; &#xA;   &lt;th&gt;Extends&lt;/th&gt; &#xA;   &lt;th&gt;Type-specific properties&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;ReflectionObject&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;Namespace&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;ReflectionObject&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;nested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Root&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Namespace&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;nested&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Type&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Namespace&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;fields&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Enum&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;ReflectionObject&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;values&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Field&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;ReflectionObject&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;rule, &lt;strong&gt;type&lt;/strong&gt;, &lt;strong&gt;id&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MapField&lt;/td&gt; &#xA;   &lt;td&gt;Field&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;keyType&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OneOf&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;ReflectionObject&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;oneof&lt;/strong&gt; (array of field names)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Service&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;Namespace&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;methods&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Method&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;ReflectionObject&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;type, &lt;strong&gt;requestType&lt;/strong&gt;, &lt;strong&gt;responseType&lt;/strong&gt;, requestStream, responseStream&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Bold properties&lt;/strong&gt; are required. &lt;em&gt;Italic types&lt;/em&gt; are abstract.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;T.fromJSON(name, json)&lt;/code&gt; creates the respective reflection object from a JSON descriptor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;T#toJSON()&lt;/code&gt; creates a JSON descriptor from the respective reflection object (its name is used as the key within the parent)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Exclusively using JSON descriptors instead of .proto files enables the use of just the light library (the parser isn&#39;t required in this case).&lt;/p&gt; &#xA;&lt;p&gt;A JSON descriptor can either be loaded the usual way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;protobuf.load(&#34;awesome.json&#34;, function(err, root) {&#xA;    if (err) throw err;&#xA;&#xA;    // Continue at &#34;Obtain a message type&#34; above&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or it can be loaded inline:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var jsonDescriptor = require(&#34;./awesome.json&#34;); // exemplary for node&#xA;&#xA;var root = protobuf.Root.fromJSON(jsonDescriptor);&#xA;&#xA;// Continue at &#34;Obtain a message type&#34; above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using reflection only&lt;/h3&gt; &#xA;&lt;p&gt;Both the full and the light library include full reflection support. One could, for example, define the .proto definitions seen in the examples above using just reflection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;var Root  = protobuf.Root,&#xA;    Type  = protobuf.Type,&#xA;    Field = protobuf.Field;&#xA;&#xA;var AwesomeMessage = new Type(&#34;AwesomeMessage&#34;).add(new Field(&#34;awesomeField&#34;, 1, &#34;string&#34;));&#xA;&#xA;var root = new Root().define(&#34;awesomepackage&#34;).add(AwesomeMessage);&#xA;&#xA;// Continue at &#34;Create a new message&#34; above&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed information on the reflection structure is available within the &lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#additional-documentation&#34;&gt;API documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using custom classes&lt;/h3&gt; &#xA;&lt;p&gt;Message classes can also be extended with custom functionality and it is also possible to register a custom constructor with a reflected message type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;&#xA;// Define a custom constructor&#xA;function AwesomeMessage(properties) {&#xA;    // custom initialization code&#xA;    ...&#xA;}&#xA;&#xA;// Register the custom constructor with its reflected type (*)&#xA;root.lookupType(&#34;awesomepackage.AwesomeMessage&#34;).ctor = AwesomeMessage;&#xA;&#xA;// Define custom functionality&#xA;AwesomeMessage.customStaticMethod = function() { ... };&#xA;AwesomeMessage.prototype.customInstanceMethod = function() { ... };&#xA;&#xA;// Continue at &#34;Create a new message&#34; above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(*) Besides referencing its reflected type through &lt;code&gt;AwesomeMessage.$type&lt;/code&gt; and &lt;code&gt;AwesomeMesage#$type&lt;/code&gt;, the respective custom class is automatically populated with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;AwesomeMessage.create&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AwesomeMessage.encode&lt;/code&gt; and &lt;code&gt;AwesomeMessage.encodeDelimited&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AwesomeMessage.decode&lt;/code&gt; and &lt;code&gt;AwesomeMessage.decodeDelimited&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AwesomeMessage.verify&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AwesomeMessage.fromObject&lt;/code&gt;, &lt;code&gt;AwesomeMessage.toObject&lt;/code&gt; and &lt;code&gt;AwesomeMessage#toJSON&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Afterwards, decoded messages of this type are &lt;code&gt;instanceof AwesomeMessage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, it is also possible to reuse and extend the internal constructor if custom initialization code is not required:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;&#xA;// Reuse the internal constructor&#xA;var AwesomeMessage = root.lookupType(&#34;awesomepackage.AwesomeMessage&#34;).ctor;&#xA;&#xA;// Define custom functionality&#xA;AwesomeMessage.customStaticMethod = function() { ... };&#xA;AwesomeMessage.prototype.customInstanceMethod = function() { ... };&#xA;&#xA;// Continue at &#34;Create a new message&#34; above&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using services&lt;/h3&gt; &#xA;&lt;p&gt;The library also supports consuming services but it doesn&#39;t make any assumptions about the actual transport channel. Instead, a user must provide a suitable RPC implementation, which is an asynchronous function that takes the reflected service method, the binary request and a node-style callback as its parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function rpcImpl(method, requestData, callback) {&#xA;    // perform the request using an HTTP request or a WebSocket for example&#xA;    var responseData = ...;&#xA;    // and call the callback with the binary response afterwards:&#xA;    callback(null, responseData);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Below is a working example with a typescript implementation using grpc npm package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const grpc = require(&#39;grpc&#39;)&#xA;&#xA;const Client = grpc.makeGenericClientConstructor({})&#xA;const client = new Client(&#xA;  grpcServerUrl,&#xA;  grpc.credentials.createInsecure()&#xA;)&#xA;&#xA;const rpcImpl = function(method, requestData, callback) {&#xA;  client.makeUnaryRequest(&#xA;    method.name,&#xA;    arg =&amp;gt; arg,&#xA;    arg =&amp;gt; arg,&#xA;    requestData,&#xA;    callback&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-protobuf&#34;&gt;// greeter.proto&#xA;syntax = &#34;proto3&#34;;&#xA;&#xA;service Greeter {&#xA;    rpc SayHello (HelloRequest) returns (HelloReply) {}&#xA;}&#xA;&#xA;message HelloRequest {&#xA;    string name = 1;&#xA;}&#xA;&#xA;message HelloReply {&#xA;    string message = 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;var Greeter = root.lookup(&#34;Greeter&#34;);&#xA;var greeter = Greeter.create(/* see above */ rpcImpl, /* request delimited? */ false, /* response delimited? */ false);&#xA;&#xA;greeter.sayHello({ name: &#39;you&#39; }, function(err, response) {&#xA;    console.log(&#39;Greeting:&#39;, response.message);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services also support promises:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;greeter.sayHello({ name: &#39;you&#39; })&#xA;    .then(function(response) {&#xA;        console.log(&#39;Greeting:&#39;, response.message);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also an &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/examples/streaming-rpc.js&#34;&gt;example for streaming RPC&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the service API is meant for clients. Implementing a server-side endpoint pretty much always requires transport channel (i.e. http, websocket, etc.) specific code with the only common denominator being that it decodes and encodes messages.&lt;/p&gt; &#xA;&lt;h3&gt;Usage with TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;The library ships with its own &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/index.d.ts&#34;&gt;type definitions&lt;/a&gt; and modern editors like &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt; will automatically detect and use them for code completion.&lt;/p&gt; &#xA;&lt;p&gt;The npm package depends on &lt;a href=&#34;https://www.npmjs.com/package/@types/node&#34;&gt;@types/node&lt;/a&gt; because of &lt;code&gt;Buffer&lt;/code&gt; and &lt;a href=&#34;https://www.npmjs.com/package/@types/long&#34;&gt;@types/long&lt;/a&gt; because of &lt;code&gt;Long&lt;/code&gt;. If you are not building for node and/or not using long.js, it should be safe to exclude them manually.&lt;/p&gt; &#xA;&lt;h4&gt;Using the JS API&lt;/h4&gt; &#xA;&lt;p&gt;The API shown above works pretty much the same with TypeScript. However, because everything is typed, accessing fields on instances of dynamically generated message classes requires either using bracket-notation (i.e. &lt;code&gt;message[&#34;awesomeField&#34;]&lt;/code&gt;) or explicit casts. Alternatively, it is possible to use a &lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#pbts-for-typescript&#34;&gt;typings file generated for its static counterpart&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { load } from &#34;protobufjs&#34;; // respectively &#34;./node_modules/protobufjs&#34;&#xA;&#xA;load(&#34;awesome.proto&#34;, function(err, root) {&#xA;  if (err)&#xA;    throw err;&#xA;&#xA;  // example code&#xA;  const AwesomeMessage = root.lookupType(&#34;awesomepackage.AwesomeMessage&#34;);&#xA;&#xA;  let message = AwesomeMessage.create({ awesomeField: &#34;hello&#34; });&#xA;  console.log(`message = ${JSON.stringify(message)}`);&#xA;&#xA;  let buffer = AwesomeMessage.encode(message).finish();&#xA;  console.log(`buffer = ${Array.prototype.toString.call(buffer)}`);&#xA;&#xA;  let decoded = AwesomeMessage.decode(buffer);&#xA;  console.log(`decoded = ${JSON.stringify(decoded)}`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using generated static code&lt;/h4&gt; &#xA;&lt;p&gt;If you generated static code to &lt;code&gt;bundle.js&lt;/code&gt; using the CLI and its type definitions to &lt;code&gt;bundle.d.ts&lt;/code&gt;, then you can just do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { AwesomeMessage } from &#34;./bundle.js&#34;;&#xA;&#xA;// example code&#xA;let message = AwesomeMessage.create({ awesomeField: &#34;hello&#34; });&#xA;let buffer  = AwesomeMessage.encode(message).finish();&#xA;let decoded = AwesomeMessage.decode(buffer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using decorators&lt;/h4&gt; &#xA;&lt;p&gt;The library also includes an early implementation of &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/decorators.html&#34;&gt;decorators&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; that decorators are an experimental feature in TypeScript and that declaration order is important depending on the JS target. For example, &lt;code&gt;@Field.d(2, AwesomeArrayMessage)&lt;/code&gt; requires that &lt;code&gt;AwesomeArrayMessage&lt;/code&gt; has been defined earlier when targeting &lt;code&gt;ES5&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { Message, Type, Field, OneOf } from &#34;protobufjs/light&#34;; // respectively &#34;./node_modules/protobufjs/light.js&#34;&#xA;&#xA;export class AwesomeSubMessage extends Message&amp;lt;AwesomeSubMessage&amp;gt; {&#xA;&#xA;  @Field.d(1, &#34;string&#34;)&#xA;  public awesomeString: string;&#xA;&#xA;}&#xA;&#xA;export enum AwesomeEnum {&#xA;  ONE = 1,&#xA;  TWO = 2&#xA;}&#xA;&#xA;@Type.d(&#34;SuperAwesomeMessage&#34;)&#xA;export class AwesomeMessage extends Message&amp;lt;AwesomeMessage&amp;gt; {&#xA;&#xA;  @Field.d(1, &#34;string&#34;, &#34;optional&#34;, &#34;awesome default string&#34;)&#xA;  public awesomeField: string;&#xA;&#xA;  @Field.d(2, AwesomeSubMessage)&#xA;  public awesomeSubMessage: AwesomeSubMessage;&#xA;&#xA;  @Field.d(3, AwesomeEnum, &#34;optional&#34;, AwesomeEnum.ONE)&#xA;  public awesomeEnum: AwesomeEnum;&#xA;&#xA;  @OneOf.d(&#34;awesomeSubMessage&#34;, &#34;awesomeEnum&#34;)&#xA;  public which: string;&#xA;&#xA;}&#xA;&#xA;// example code&#xA;let message = new AwesomeMessage({ awesomeField: &#34;hello&#34; });&#xA;let buffer  = AwesomeMessage.encode(message).finish();&#xA;let decoded = AwesomeMessage.decode(buffer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supported decorators are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Type.d(typeName?: &lt;code&gt;string&lt;/code&gt;)&lt;/strong&gt; &amp;nbsp; &lt;em&gt;(optional)&lt;/em&gt;&lt;br&gt; annotates a class as a protobuf message type. If &lt;code&gt;typeName&lt;/code&gt; is not specified, the constructor&#39;s runtime function name is used for the reflected type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Field.d&amp;lt;T&amp;gt;(fieldId: &lt;code&gt;number&lt;/code&gt;, fieldType: &lt;code&gt;string | Constructor&amp;lt;T&amp;gt;&lt;/code&gt;, fieldRule?: &lt;code&gt;&#34;optional&#34; | &#34;required&#34; | &#34;repeated&#34;&lt;/code&gt;, defaultValue?: &lt;code&gt;T&lt;/code&gt;)&lt;/strong&gt;&lt;br&gt; annotates a property as a protobuf field with the specified id and protobuf type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;MapField.d&amp;lt;T extends { [key: string]: any }&amp;gt;(fieldId: &lt;code&gt;number&lt;/code&gt;, fieldKeyType: &lt;code&gt;string&lt;/code&gt;, fieldValueType. &lt;code&gt;string | Constructor&amp;lt;{}&amp;gt;&lt;/code&gt;)&lt;/strong&gt;&lt;br&gt; annotates a property as a protobuf map field with the specified id, protobuf key and value type.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;OneOf.d&amp;lt;T extends string&amp;gt;(...fieldNames: &lt;code&gt;string[]&lt;/code&gt;)&lt;/strong&gt;&lt;br&gt; annotates a property as a protobuf oneof covering the specified fields.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Other notes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Decorated types reside in &lt;code&gt;protobuf.roots[&#34;decorated&#34;]&lt;/code&gt; using a flat structure, so no duplicate names.&lt;/li&gt; &#xA; &lt;li&gt;Enums are copied to a reflected enum with a generic name on decorator evaluation because referenced enum objects have no runtime name the decorator could use.&lt;/li&gt; &#xA; &lt;li&gt;Default values must be specified as arguments to the decorator instead of using a property initializer for proper prototype behavior.&lt;/li&gt; &#xA; &lt;li&gt;Property names on decorated classes must not be renamed on compile time (i.e. by a minifier) because decorators just receive the original field name as a string.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;ProTip!&lt;/strong&gt; Not as pretty, but you can &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/examples/js-decorators.js&#34;&gt;use decorators in plain JavaScript&lt;/a&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;Additional documentation&lt;/h2&gt; &#xA;&lt;h4&gt;Protocol Buffers&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developers.google.com/protocol-buffers/docs/overview&#34;&gt;Google&#39;s Developer Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;protobuf.js&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://protobufjs.github.io/protobuf.js&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/wiki&#34;&gt;Frequently asked questions&lt;/a&gt; on our wiki&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Community&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/search?tab=newest&amp;amp;q=protobuf.js&#34;&gt;Questions and answers&lt;/a&gt; on StackOverflow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;The package includes a benchmark that compares protobuf.js performance to native JSON (as far as this is possible) and &lt;a href=&#34;https://github.com/google/protobuf/tree/master/js&#34;&gt;Google&#39;s JS implementation&lt;/a&gt;. On an i7-2600K running node 6.9.1 it yields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;benchmarking encoding performance ...&#xA;&#xA;protobuf.js (reflect) x 541,707 ops/sec ±1.13% (87 runs sampled)&#xA;protobuf.js (static) x 548,134 ops/sec ±1.38% (89 runs sampled)&#xA;JSON (string) x 318,076 ops/sec ±0.63% (93 runs sampled)&#xA;JSON (buffer) x 179,165 ops/sec ±2.26% (91 runs sampled)&#xA;google-protobuf x 74,406 ops/sec ±0.85% (86 runs sampled)&#xA;&#xA;   protobuf.js (static) was fastest&#xA;  protobuf.js (reflect) was 0.9% ops/sec slower (factor 1.0)&#xA;          JSON (string) was 41.5% ops/sec slower (factor 1.7)&#xA;          JSON (buffer) was 67.6% ops/sec slower (factor 3.1)&#xA;        google-protobuf was 86.4% ops/sec slower (factor 7.3)&#xA;&#xA;benchmarking decoding performance ...&#xA;&#xA;protobuf.js (reflect) x 1,383,981 ops/sec ±0.88% (93 runs sampled)&#xA;protobuf.js (static) x 1,378,925 ops/sec ±0.81% (93 runs sampled)&#xA;JSON (string) x 302,444 ops/sec ±0.81% (93 runs sampled)&#xA;JSON (buffer) x 264,882 ops/sec ±0.81% (93 runs sampled)&#xA;google-protobuf x 179,180 ops/sec ±0.64% (94 runs sampled)&#xA;&#xA;  protobuf.js (reflect) was fastest&#xA;   protobuf.js (static) was 0.3% ops/sec slower (factor 1.0)&#xA;          JSON (string) was 78.1% ops/sec slower (factor 4.6)&#xA;          JSON (buffer) was 80.8% ops/sec slower (factor 5.2)&#xA;        google-protobuf was 87.0% ops/sec slower (factor 7.7)&#xA;&#xA;benchmarking combined performance ...&#xA;&#xA;protobuf.js (reflect) x 275,900 ops/sec ±0.78% (90 runs sampled)&#xA;protobuf.js (static) x 290,096 ops/sec ±0.96% (90 runs sampled)&#xA;JSON (string) x 129,381 ops/sec ±0.77% (90 runs sampled)&#xA;JSON (buffer) x 91,051 ops/sec ±0.94% (90 runs sampled)&#xA;google-protobuf x 42,050 ops/sec ±0.85% (91 runs sampled)&#xA;&#xA;   protobuf.js (static) was fastest&#xA;  protobuf.js (reflect) was 4.7% ops/sec slower (factor 1.0)&#xA;          JSON (string) was 55.3% ops/sec slower (factor 2.2)&#xA;          JSON (buffer) was 68.6% ops/sec slower (factor 3.2)&#xA;        google-protobuf was 85.5% ops/sec slower (factor 6.9)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These results are achieved by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;generating type-specific encoders, decoders, verifiers and converters at runtime&lt;/li&gt; &#xA; &lt;li&gt;configuring the reader/writer interface according to the environment&lt;/li&gt; &#xA; &lt;li&gt;using node-specific functionality where beneficial and, of course&lt;/li&gt; &#xA; &lt;li&gt;avoiding unnecessary operations through splitting up &lt;a href=&#34;https://raw.githubusercontent.com/protobufjs/protobuf.js/master/#toolset&#34;&gt;the toolset&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also run &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/bench/index.js&#34;&gt;the benchmark&lt;/a&gt; ...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/bench/prof.js&#34;&gt;the profiler&lt;/a&gt; yourself (the latter requires a recent version of node):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run prof &amp;lt;encode|decode|encode-browser|decode-browser&amp;gt; [iterations=10000000]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that as of this writing, the benchmark suite performs significantly slower on node 7.2.0 compared to 6.9.1 because moths.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Works in all modern and not-so-modern browsers except IE8.&lt;/li&gt; &#xA; &lt;li&gt;Because the internals of this package do not rely on &lt;code&gt;google/protobuf/descriptor.proto&lt;/code&gt;, options are parsed and presented literally.&lt;/li&gt; &#xA; &lt;li&gt;If typed arrays are not supported by the environment, plain arrays will be used instead.&lt;/li&gt; &#xA; &lt;li&gt;Support for pre-ES5 environments (except IE8) can be achieved by &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/scripts/polyfill.js&#34;&gt;using a polyfill&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Support for &lt;a href=&#34;https://w3c.github.io/webappsec-csp/&#34;&gt;Content Security Policy&lt;/a&gt;-restricted environments (like Chrome extensions without &lt;a href=&#34;https://developer.chrome.com/extensions/contentSecurityPolicy#relaxing-eval&#34;&gt;unsafe-eval&lt;/a&gt;) can be achieved by generating and using static code instead.&lt;/li&gt; &#xA; &lt;li&gt;If a proper way to work with 64 bit values (uint64, int64 etc.) is required, just install &lt;a href=&#34;https://github.com/dcodeIO/long.js&#34;&gt;long.js&lt;/a&gt; alongside this library. All 64 bit numbers will then be returned as a &lt;code&gt;Long&lt;/code&gt; instance instead of a possibly unsafe JavaScript number (&lt;a href=&#34;https://github.com/dcodeIO/long.js&#34;&gt;see&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;For descriptor.proto interoperability, see &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/tree/master/ext/descriptor&#34;&gt;ext/descriptor&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build the library or its components yourself, clone it from GitHub and install the development dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; git clone https://github.com/dcodeIO/protobuf.js.git&#xA;$&amp;gt; cd protobuf.js&#xA;$&amp;gt; npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the respective development and production versions with their respective source maps to &lt;code&gt;dist/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the documentation to &lt;code&gt;docs/&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run docs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Building the TypeScript definition to &lt;code&gt;index.d.ts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$&amp;gt; npm run types&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browserify integration&lt;/h3&gt; &#xA;&lt;p&gt;By default, protobuf.js integrates into any browserify build-process without requiring any optional modules. Hence:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If int64 support is required, explicitly require the &lt;code&gt;long&lt;/code&gt; module somewhere in your project as it will be excluded otherwise. This assumes that a global &lt;code&gt;require&lt;/code&gt; function is present that protobuf.js can call to obtain the long module.&lt;/p&gt; &lt;p&gt;If there is no global &lt;code&gt;require&lt;/code&gt; function present after bundling, it&#39;s also possible to assign the long module programmatically:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var Long = ...;&#xA;&#xA;protobuf.util.Long = Long;&#xA;protobuf.configure();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have any special requirements, there is &lt;a href=&#34;https://github.com/dcodeIO/protobuf.js/raw/master/scripts/bundle.js&#34;&gt;the bundler&lt;/a&gt; for reference.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;License:&lt;/strong&gt; &lt;a href=&#34;https://opensource.org/licenses/BSD-3-Clause&#34;&gt;BSD 3-Clause License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>