<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-04T01:35:29Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>DustinWin/clash-tools</title>
    <updated>2023-12-04T01:35:29Z</updated>
    <id>tag:github.com,2023-12-04:/DustinWin/clash-tools</id>
    <link href="https://github.com/DustinWin/clash-tools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;自动同步 Clash Premium 内核、Clash.Meta 内核、Clash dashboard 面板和 AdGuardHome 最新版&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;请低调使用，Clash.Meta 内核已正常更新&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;更新 &lt;a href=&#34;https://github.com/Dreamacro/clash/releases/tag/premium&#34;&gt;Clash Premium 内核&lt;/a&gt;、&lt;a href=&#34;https://github.com/MetaCubeX/Clash.Meta&#34;&gt;Clash.Meta 内核&lt;/a&gt;、&lt;a href=&#34;https://github.com/Dreamacro/clash&#34;&gt;Clash&lt;/a&gt; dashboard 面板和 &lt;a href=&#34;https://github.com/AdguardTeam/AdGuardHome&#34;&gt;AdGuardHome&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;h1&gt;一、 说明&lt;/h1&gt; &#xA;&lt;p&gt;每天凌晨 0-3 点（北京时间）自动构建生成：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clash Premium Latest 版和 Release 版内核&lt;/li&gt; &#xA; &lt;li&gt;Clash.Meta Alpha 版和 Release 版内核&lt;/li&gt; &#xA; &lt;li&gt;Clash dashboard 面板：&lt;a href=&#34;https://github.com/Dreamacro/clash-dashboard&#34;&gt;Clash 官方面板&lt;/a&gt;、&lt;a href=&#34;https://github.com/MetaCubeX/Razord-meta&#34;&gt;Razord-meta 面板&lt;/a&gt;、&lt;a href=&#34;https://github.com/haishanh/yacd&#34;&gt;yacd 面板&lt;/a&gt;、&lt;a href=&#34;https://github.com/MetaCubeX/Yacd-meta&#34;&gt;Yacd-meta 面板&lt;/a&gt;和 &lt;a href=&#34;https://github.com/MetaCubeX/metacubexd&#34;&gt;metacubexd 面板&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;面板类型&lt;/th&gt; &#xA;   &lt;th&gt;在线地址&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clash 官方面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://clash.razord.top&#34;&gt;http://clash.razord.top&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Razord-meta 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://clash.metacubex.one&#34;&gt;http://clash.metacubex.one&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yacd 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://yacd.haishan.me&#34;&gt;http://yacd.haishan.me&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yacd-meta 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://yacd.metacubex.one&#34;&gt;http://yacd.metacubex.one&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;metacubexd 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://d.metacubex.one&#34;&gt;http://d.metacubex.one&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;AdGuardHome Pre-release 版和 Release 版&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;注：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;本教程中的下载链接以 CPU 架构 ARMv8 为例，请注意修改链接后缀&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;查看 CPU 架构可连接 SSH 后执行命令 &lt;code&gt;uname -ms&lt;/code&gt;，若执行结果是“linux aarch64”，就是搭载的 ARMv8 架构&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;二、 使用方法&lt;/h1&gt; &#xA;&lt;h2&gt;1. 导入内核 Linux 版（以 &lt;a href=&#34;https://github.com/juewuy/ShellClash&#34;&gt;ShellClash&lt;/a&gt; 导入 Clash.Meta 内核为例）&lt;/h2&gt; &#xA;&lt;p&gt;CPU 架构和内核下载链接后缀对应关系如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CPU 架构&lt;/th&gt; &#xA;   &lt;th&gt;AMD64&lt;/th&gt; &#xA;   &lt;th&gt;ARMv5&lt;/th&gt; &#xA;   &lt;th&gt;ARMv6&lt;/th&gt; &#xA;   &lt;th&gt;ARMv7&lt;/th&gt; &#xA;   &lt;th&gt;ARMv8&lt;/th&gt; &#xA;   &lt;th&gt;mips-softfloat&lt;/th&gt; &#xA;   &lt;th&gt;mipsle-hardfloat&lt;/th&gt; &#xA;   &lt;th&gt;mipsle-softfloat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;链接后缀&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv7&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mips-softfloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mipsle-hardfloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mipsle-softfloat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;如 CPU 架构为 ARMv7，则下载链接须修改为：&lt;code&gt;https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash.Meta-release/clash.meta-linux-armv7&lt;/code&gt; 和 &lt;code&gt;https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash.Meta-alpha/clash.meta-linux-armv7&lt;/code&gt;&lt;br&gt; 连接 SSH 后执行如下命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Release 版&#xA;curl -o $clashdir/clash -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash.Meta-release/clash.meta-linux-armv8&#xA;# Alpha 版&#xA;curl -o $clashdir/clash -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash.Meta-alpha/clash.meta-linux-armv8&#xA;chmod +x $clashdir/clash &amp;amp;&amp;amp; $clashdir/start.sh restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2. 导入内核 Windows 版（以 &lt;a href=&#34;https://github.com/zzzgydi/clash-verge&#34;&gt;Clash Verge&lt;/a&gt; 导入 Clash.Meta 内核为例）&lt;/h2&gt; &#xA;&lt;p&gt;编辑文本文档，粘贴如下内容：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;taskkill /f /t /im &#34;Clash Verge*&#34;&#xA;taskkill /f /t /im clash-meta*&#xA;# Release 版&#xA;curl -o %PROGRAMFILES%\Clash Verge\clash-meta.exe -L https://mirror.ghproxy.com/https://raw.githubusercontent.com/DustinWin/clash-tools/main/Clash.Meta-release/clash.meta-windows-amd64.exe&#xA;# Pre-release 版&#xA;curl -o %PROGRAMFILES%\Clash Verge\clash-meta.exe -L https://mirror.ghproxy.com/https://raw.githubusercontent.com/DustinWin/clash-tools/main/Clash.Meta-alpha/clash.meta-windows-amd64.exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;另存为 .bat 文件，右击并选择以管理员身份运行&lt;/p&gt; &#xA;&lt;h2&gt;3. 安装 Clash dashboard 面板（以 ShellClash 安装 metacubexd 面板为例）&lt;/h2&gt; &#xA;&lt;p&gt;Clash dashboard 面板类型和文件名对应关系如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;面板类型&lt;/th&gt; &#xA;   &lt;th&gt;文件名&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clash 官方面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;clash-dashboard.tar.gz&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Razord-meta 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Razord-meta.tar.gz&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yacd 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;yacd.tar.gz&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yacd-meta 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Yacd-meta.tar.gz&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;metacubexd 面板&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;metacubexd.tar.gz&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;如需要安装 Yacd-meta 面板，则命令中的文件名须修改为 &lt;code&gt;Yacd-meta.tar.gz&lt;/code&gt; 且下载链接修改为 &lt;code&gt;https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash-dashboard/Yacd-meta.tar.gz&lt;/code&gt;&lt;br&gt; 连接 SSH 后执行如下命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -o /tmp/metacubexd.tar.gz -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash-dashboard/metacubexd.tar.gz&#xA;mkdir -p $clashdir/ui &amp;amp;&amp;amp; tar -zxf /tmp/metacubexd.tar.gz -C $clashdir/ui &amp;amp;&amp;amp; rm -f /tmp/metacubexd.tar.gz&#xA;$clashdir/start.sh restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. 安装 AdGuardHome&lt;/h2&gt; &#xA;&lt;p&gt;AdGuardHome CPU 架构和链接后缀对应关系如下：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;CPU 架构&lt;/th&gt; &#xA;   &lt;th&gt;AMD64&lt;/th&gt; &#xA;   &lt;th&gt;ARMv5&lt;/th&gt; &#xA;   &lt;th&gt;ARMv6&lt;/th&gt; &#xA;   &lt;th&gt;ARMv7&lt;/th&gt; &#xA;   &lt;th&gt;ARMv8&lt;/th&gt; &#xA;   &lt;th&gt;mips-softfloat&lt;/th&gt; &#xA;   &lt;th&gt;mipsle-softfloat&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;链接后缀&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;amd64&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv6&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv7&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;armv8&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mips-softfloat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;mipsle-softfloat&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;如 CPU 架构为 ARMv7，则下载链接须修改为：&lt;br&gt; &lt;code&gt;https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/AdGuardHome-release/AdGuardHome_linux_armv7&lt;/code&gt; 和 &lt;code&gt;https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/AdGuardHome-prerelease/AdGuardHome_linux_armv7&lt;/code&gt;&lt;br&gt; ① 安装 AdGuardHome&lt;br&gt; 连接 SSH 后执行如下命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mkdir -p /data/AdGuardHome&#xA;# Release 版&#xA;curl -o /data/AdGuardHome/AdGuardHome -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/AdGuardHome-release/AdGuardHome_linux_armv8&#xA;# Pre-release 版&#xA;curl -o /data/AdGuardHome/AdGuardHome -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/AdGuardHome-prerelease/AdGuardHome_linux_armv8&#xA;chmod +x /data/AdGuardHome/AdGuardHome&#xA;/data/AdGuardHome/AdGuardHome -s install&#xA;/data/AdGuardHome/AdGuardHome -s start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;② 升级 AdGuardHome&lt;br&gt; 连接 SSH 后执行如下命令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Release 版&#xA;curl -o /data/AdGuardHome/AdGuardHome -L https://mirror.ghproxy.com/https://raw.githubusercontent.com/DustinWin/clash-tools/main/AdGuardHome-release/AdGuardHome_linux_armv8&#xA;# Pre-release 版&#xA;curl -o /data/AdGuardHome/AdGuardHome -L https://mirror.ghproxy.com/https://raw.githubusercontent.com/DustinWin/clash-tools/main/AdGuardHome-prerelease/AdGuardHome_linux_armv8&#xA;chmod +x /data/AdGuardHome/AdGuardHome&#xA;/data/AdGuardHome/AdGuardHome -s restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;三、 配置 ShellClash 定时任务&lt;/h1&gt; &#xA;&lt;p&gt;可以在 ShellClash 里添加定时更新 Clash.Meta 内核、Yacd-meta 面板和 AdGuardHome 的任务，连接 SSH 后运行 &lt;code&gt;crontab -e&lt;/code&gt;，按一下 Ins 键（Insert 键），在最下方粘贴如下内容：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;注：留意链接后缀是否与 CPU 架构匹配&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;30 3 * * * curl -o /data/clash/clash -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash.Meta-release/clash.meta-linux-armv8 &amp;amp;&amp;amp; chmod +x /data/clash/clash &amp;amp;&amp;amp; /data/clash/start.sh restart &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 #每天早上 3 点半更新 Clash.Meta 内核&#xA;0 4 * * 1,3,5 curl -o /tmp/Yacd-meta.tar.gz -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/Clash-dashboard/metacubexd.tar.gz &amp;amp;&amp;amp; rm -rf /data/clash/ui/* &amp;amp;&amp;amp; tar -zxf /tmp/metacubexd.tar.gz -C /data/clash/ui &amp;amp;&amp;amp; rm -f /tmp/metacubexd.tar.gz &amp;amp;&amp;amp; /data/clash/start.sh restart &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 #每周一、三、五早上 4 点更新 metacubexd 面板&#xA;30 4 * * 2,4,6 curl -o /data/AdGuardHome/AdGuardHome -L https://cdn.jsdelivr.net/gh/DustinWin/clash-tools@main/AdGuardHome-release/AdGuardHome_linux_armv8 &amp;amp;&amp;amp; chmod +x /data/AdGuardHome/AdGuardHome &amp;amp;&amp;amp; /data/AdGuardHome/AdGuardHome -s restart &amp;gt;/dev/null 2&amp;gt;&amp;amp;1 #每周二、四、六早上 4 点半更新 AdGuardHome 并重启路由器&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;按一下 Esc 键（退出键），输入英文冒号&lt;code&gt;:&lt;/code&gt;，继续输入 &lt;code&gt;wq&lt;/code&gt; 并回车，再运行 &lt;code&gt;/etc/init.d/cron restart&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>caolan/async</title>
    <updated>2023-12-04T01:35:29Z</updated>
    <id>tag:github.com,2023-12-04:/caolan/async</id>
    <link href="https://github.com/caolan/async" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Async utilities for node and the browser&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/caolan/async/master/logo/async-logo_readme.jpg&#34; alt=&#34;Async Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/caolan/async/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Actions CI status&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/async&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/async.svg?sanitize=true&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/caolan/async?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/caolan/async/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/caolan/async?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/caolan/async&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdelivr.com/package/npm/async&#34;&gt;&lt;img src=&#34;https://data.jsdelivr.com/v1/package/npm/async/badge?style=rounded&#34; alt=&#34;jsDelivr Hits&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;|Linux|Windows|MacOS|&#xA;|-|-|-|&#xA;|[![Linux Build Status](https://dev.azure.com/caolanmcmahon/async/_apis/build/status/caolan.async?branchName=master&amp;jobName=Linux&amp;configuration=Linux%20node_10_x)](https://dev.azure.com/caolanmcmahon/async/_build/latest?definitionId=1&amp;branchName=master) | [![Windows Build Status](https://dev.azure.com/caolanmcmahon/async/_apis/build/status/caolan.async?branchName=master&amp;jobName=Windows&amp;configuration=Windows%20node_10_x)](https://dev.azure.com/caolanmcmahon/async/_build/latest?definitionId=1&amp;branchName=master) | [![MacOS Build Status](https://dev.azure.com/caolanmcmahon/async/_apis/build/status/caolan.async?branchName=master&amp;jobName=OSX&amp;configuration=OSX%20node_10_x)](https://dev.azure.com/caolanmcmahon/async/_build/latest?definitionId=1&amp;branchName=master)| --&gt; &#xA;&lt;p&gt;Async is a utility module which provides straight-forward, powerful functions for working with &lt;a href=&#34;http://caolan.github.io/async/v3/global.html&#34;&gt;asynchronous JavaScript&lt;/a&gt;. Although originally designed for use with &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; and installable via &lt;code&gt;npm i async&lt;/code&gt;, it can also be used directly in the browser. A ESM/MJS version is included in the main &lt;code&gt;async&lt;/code&gt; package that should automatically be used with compatible bundlers such as Webpack and Rollup.&lt;/p&gt; &#xA;&lt;p&gt;A pure ESM version of Async is available as &lt;a href=&#34;https://www.npmjs.com/package/async-es&#34;&gt;&lt;code&gt;async-es&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Documentation, visit &lt;a href=&#34;https://caolan.github.io/async/&#34;&gt;https://caolan.github.io/async/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For Async v1.5.x documentation, go &lt;a href=&#34;https://github.com/caolan/async/raw/v1.5.2/README.md&#34;&gt;HERE&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// for use with Node-style callbacks...&#xA;var async = require(&#34;async&#34;);&#xA;&#xA;var obj = {dev: &#34;/dev.json&#34;, test: &#34;/test.json&#34;, prod: &#34;/prod.json&#34;};&#xA;var configs = {};&#xA;&#xA;async.forEachOf(obj, (value, key, callback) =&amp;gt; {&#xA;    fs.readFile(__dirname + value, &#34;utf8&#34;, (err, data) =&amp;gt; {&#xA;        if (err) return callback(err);&#xA;        try {&#xA;            configs[key] = JSON.parse(data);&#xA;        } catch (e) {&#xA;            return callback(e);&#xA;        }&#xA;        callback();&#xA;    });&#xA;}, err =&amp;gt; {&#xA;    if (err) console.error(err.message);&#xA;    // configs is now a map of JSON data&#xA;    doSomethingWith(configs);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var async = require(&#34;async&#34;);&#xA;&#xA;// ...or ES2017 async functions&#xA;async.mapLimit(urls, 5, async function(url) {&#xA;    const response = await fetch(url)&#xA;    return response.body&#xA;}, (err, results) =&amp;gt; {&#xA;    if (err) throw err&#xA;    // results is now an array of the response bodies&#xA;    console.log(results)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>shadowcz007/comfyui-mixlab-nodes</title>
    <updated>2023-12-04T01:35:29Z</updated>
    <id>tag:github.com,2023-12-04:/shadowcz007/comfyui-mixlab-nodes</id>
    <link href="https://github.com/shadowcz007/comfyui-mixlab-nodes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/screenshare.png&#34; alt=&#34;screenshare&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;ScreenShareNode &amp;amp; FloatingVideoNode&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Now comfyui supports capturing screen pixel streams from any software and can be used for LCM-Lora integration. Let&#39;s get started with implementation and design! 💻🌐&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadowcz007/comfyui-mixlab-nodes/assets/12645064/e7e77f90-e43e-410a-ab3a-1952b7b4e7da&#34;&gt;https://github.com/shadowcz007/comfyui-mixlab-nodes/assets/12645064/e7e77f90-e43e-410a-ab3a-1952b7b4e7da&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- [ScreenShareNode](./workflow/2-screeshare.json) --&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/workflow/3-FloatVideo-workflow.json&#34;&gt;ScreenShareNode &amp;amp; FloatingVideoNode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;!! Please use the address with HTTPS (&lt;a href=&#34;https://127.0.0.1&#34;&gt;https://127.0.0.1&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;manually install, simply clone the repo into the custom_nodes directory with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ComfyUI/custom_nodes&#xA;&#xA;git clone https://github.com/shadowcz007/comfyui-mixlab-nodes.git&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the requirements:&lt;/p&gt; &#xA;&lt;p&gt;run directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ComfyUI_Mixlab&#xA;install.bat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or install the requirements using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;../../../python_embeded/python.exe -s -m pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using a venv, make sure you have it activated before installation and use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pip3 install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nodes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/all.png&#34; alt=&#34;main&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/detect-face-all.png&#34; alt=&#34;main2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/workflow/1-workflow.json&#34;&gt;workflow-1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;randomPrompt&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/randomPrompt.png&#34; alt=&#34;randomPrompt&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;TransparentImage&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/TransparentImage.png&#34; alt=&#34;TransparentImage&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;LoadImagesFromLocal&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/load-watch.png&#34; alt=&#34;watch&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/workflow/4-loadfromlocal-watcher-workflow.json&#34;&gt;workflow-4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Consistency Decoder&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openai/consistencydecoder&#34;&gt;openai Consistency Decoder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/consistency.png&#34; alt=&#34;Consistency&#34;&gt; After downloading the OpenAI VAE model, place it in the &#34;model/vae&#34; directory for use. &lt;a href=&#34;https://openaipublic.azureedge.net/diff-vae/c9cebd3132dd9c42936d803e33424145a748843c8f716c0814838bdc8a2fe7cb/decoder.pt&#34;&gt;https://openaipublic.azureedge.net/diff-vae/c9cebd3132dd9c42936d803e33424145a748843c8f716c0814838bdc8a2fe7cb/decoder.pt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;FeatheredMask、SmoothMask&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Add edges to an image.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/FlVou_Y6kaGWYoEj1Tn0aTd4AjMI.jpg&#34; alt=&#34;FeatheredMask&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Improvement&lt;/h3&gt; &#xA;&lt;p&gt;An improvement has been made to directly redirect to GitHub to search for missing nodes when loading the graph.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/shadowcz007/comfyui-mixlab-nodes/main/assets/node-not-found.png&#34; alt=&#34;node-not-found&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Models&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://huggingface.co/CIDAS/clipseg-rd64-refined/tree/main&#34;&gt;Download CLIPSeg&lt;/a&gt;, move to : model/clipseg&lt;/p&gt; &#xA;&lt;!-- ### Workflow&#xA;[Workflow](./workflow.md) --&gt; &#xA;&lt;h4&gt;Thanks:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/biegert/ComfyUI-CLIPSeg/tree/main&#34;&gt;ComfyUI-CLIPSeg&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;discussions:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/shadowcz007/comfyui-mixlab-nodes/discussions&#34;&gt;discussions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;vector &lt;a href=&#34;https://github.com/GeorgLegato/stable-diffusion-webui-vectorstudio&#34;&gt;https://github.com/GeorgLegato/stable-diffusion-webui-vectorstudio&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>