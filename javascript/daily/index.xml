<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-07T01:34:30Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>OverflowCat/zhihu-watermark-remover</title>
    <updated>2022-09-07T01:34:30Z</updated>
    <id>tag:github.com,2022-09-07:/OverflowCat/zhihu-watermark-remover</id>
    <link href="https://github.com/OverflowCat/zhihu-watermark-remover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Userscript that removes or fakes blind watermarks on Zhihu&#39;s webpages&lt;/p&gt;&lt;hr&gt;&lt;p&gt;h1. Zhihu Watermark Remover / Faker&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of the watermarks:&lt;/p&gt; &#xA;&lt;p&gt;!&lt;a href=&#34;http://telegra.ph/file/d4799aa018801db3ff098.png(Example&#34;&gt;http://telegra.ph/file/d4799aa018801db3ff098.png(Example&lt;/a&gt; of a webpage full of watermarks)!&lt;/p&gt; &#xA;&lt;p&gt;Using &#34;@userscript.js@&#34;:&lt;a href=&#34;https://github.com/OverflowCat/zhihu-watermark-remover/raw/neko/userscript.js&#34;&gt;https://github.com/OverflowCat/zhihu-watermark-remover/blob/neko/userscript.js&lt;/a&gt;, the watermarks will be removed; using &#34;@fake.js@&#34;:&lt;a href=&#34;https://github.com/OverflowCat/zhihu-watermark-remover/raw/neko/fake.js&#34;&gt;https://github.com/OverflowCat/zhihu-watermark-remover/blob/neko/fake.js&lt;/a&gt;, the watermarks will be faked:&lt;/p&gt; &#xA;&lt;p&gt;!&lt;a href=&#34;http://telegra.ph/file/ccb454212a36c7c671afe.png(Example&#34;&gt;http://telegra.ph/file/ccb454212a36c7c671afe.png(Example&lt;/a&gt; of faked watermarks)!&lt;/p&gt; &#xA;&lt;p&gt;h2. Install&lt;/p&gt; &#xA;&lt;p&gt;h3. GreasyFork&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&#34;Remover&#34;:&lt;a href=&#34;https://greasyfork.org/zh-CN/scripts/450717-zhihu-watermark-remover&#34;&gt;https://greasyfork.org/zh-CN/scripts/450717-zhihu-watermark-remover&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;&#34;Faker&#34;:&lt;a href=&#34;https://greasyfork.org/zh-CN/scripts/450732-%E5%81%87%E7%9A%84%E7%9F%A5%E4%B9%8E%E7%9B%B2%E6%B0%B4%E5%8D%B0&#34;&gt;https://greasyfork.org/zh-CN/scripts/450732-%E5%81%87%E7%9A%84%E7%9F%A5%E4%B9%8E%E7%9B%B2%E6%B0%B4%E5%8D%B0&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;h2. Disclaimer&lt;/p&gt; &#xA;&lt;p&gt;It is not guaranteed that this userscript will always work. Please use with caution.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vitmalina/w2ui</title>
    <updated>2022-09-07T01:34:30Z</updated>
    <id>tag:github.com,2022-09-07:/vitmalina/w2ui</id>
    <link href="https://github.com/vitmalina/w2ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UI widgets for modern apps. Data table, forms, toolbars, sidebar, tabs, tooltips, popups. All under 120kb (gzipped).&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Road to 2.0&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;master&lt;/code&gt; branch has a new, in-progress version of w2ui. You might want to consider &lt;a href=&#34;https://github.com/vitmalina/w2ui/tree/w2ui-1.5&#34;&gt;1.5 branch&lt;/a&gt; that is stable and supports older browsers. Here are the goals for the new version of w2ui.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vitmalina/w2ui/discussions/1955&#34;&gt;Road to 2.0 discussion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About W2UI&lt;/h2&gt; &#xA;&lt;p&gt;W2UI is a modern JavaScript UI library for building rich web applications. It aims to let you define your UI in a declarative way via JSON data structures.&lt;/p&gt; &#xA;&lt;p&gt;The library has a small footprint (115KB gzipped) and has only one dependency: jQuery (though removing it is a goal of 2.0). W2UI can be used in Vanilla JS projects, ES6 modules, as well as in Angular, React, and Vue based projects.&lt;/p&gt; &#xA;&lt;p&gt;The library implements the following UI controls:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/layout/grid&#34;&gt;w2grid&lt;/a&gt;&lt;/strong&gt; - an advanced Grid component - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/grid/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/toolbar&#34;&gt;w2toolbar&lt;/a&gt;&lt;/strong&gt; - a Toolbar component - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/toolbar/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/sidebar&#34;&gt;w2sidebar&lt;/a&gt;&lt;/strong&gt; - a Tree/Sidebar component - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/sidebar/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/tabs&#34;&gt;w2tabs&lt;/a&gt;&lt;/strong&gt; - Tabs - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/tabs/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/form&#34;&gt;w2form&lt;/a&gt;&lt;/strong&gt; - Forms - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/form/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/fields&#34;&gt;w2fields&lt;/a&gt;&lt;/strong&gt; - various Fields - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/fields/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/popup&#34;&gt;w2popup&lt;/a&gt;&lt;/strong&gt; - a Popup component - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/popup/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/layout&#34;&gt;w2layout&lt;/a&gt;&lt;/strong&gt; - a Layout component - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/layout/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;http://w2ui.com/web/docs/1.5/utils&#34;&gt;w2utils&lt;/a&gt;&lt;/strong&gt; - various utilities - &lt;em&gt;&lt;a href=&#34;http://w2ui.com/web/demos/#/utils/1&#34;&gt;demo&lt;/a&gt;&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The complete library is under &lt;strong&gt;100Kb&lt;/strong&gt; (minified &amp;amp; gzipped).&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;Current stable version is 1.5 (supports older browsers). Current development version is 2.0.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://w2ui.com/web/get-started&#34;&gt;Getting Started Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can download latest stable version here: &lt;a href=&#34;http://w2ui.com&#34;&gt;http://w2ui.com&lt;/a&gt;. If you want to use the dev version, see the &lt;code&gt;dist/&lt;/code&gt; folder in the master branch.&lt;/p&gt; &#xA;&lt;p&gt;To start using the library you need to include into your page:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;w2ui.js (or w2ui.min.js)&lt;/li&gt; &#xA; &lt;li&gt;w2ui.css (or w2ui.min.css)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All the controls and their css classes are defined inside of these two files. There are no image dependencies. Some images and font icons are embedded into the CSS file.&lt;/p&gt; &#xA;&lt;p&gt;There is no requirement for a server side language. Node, Java, PHP, ASP, Perl or .NET will all work, as long as you can return JSON format from the server (or write a converter into JSON format on the client). Some server side example implementations can be found &lt;a href=&#34;https://github.com/vitmalina/w2ui/tree/master/server&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation &amp;amp; Demos&lt;/h2&gt; &#xA;&lt;p&gt;You can find documentation and demos here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://w2ui.com/web/docs&#34;&gt;http://w2ui.com/web/docs&lt;/a&gt; - documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://w2ui.com/web/demos&#34;&gt;http://w2ui.com/web/demos&lt;/a&gt; - detailed demos&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bug Tracking&lt;/h2&gt; &#xA;&lt;p&gt;Have a bug or a feature request? Please open an issue here &lt;a href=&#34;https://github.com/vitmalina/w2ui/issues&#34;&gt;https://github.com/vitmalina/w2ui/issues&lt;/a&gt;. Please make sure that the same issue was not previously submitted by someone else.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;It is a Node.JS repository, so you need to have node installed to install all dependencies and compile w2ui.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile JS and CSS, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;gulp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will bundle all necessary files into &lt;code&gt;dist/w2ui.min.js&lt;/code&gt; and &lt;code&gt;dist/w2ui.min.css&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;File Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;- demos       - all demos, same as on w2ui.com&#xA;- dist        - compiled JS and CSS files&#xA;- docs        - stand alone documentation, same as on w2ui.com&#xA;- es6mods     - ES6 modules playground&#xA;- libs        - external libs, some used in demos, etc.&#xA;- server      - server api samples (to get you started)&#xA;- specs       - test automation&#xA;- src         - source JS files&#xA;  - less      - LESS files (source for css)&#xA;  - locale    - int18n - translation to other languages&#xA;- test        - manual testing files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Who Is Using W2UI&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/vitmalina/w2ui/wiki/Projects-that-use-w2ui&#34;&gt;List of projects that use &lt;strong&gt;&lt;code&gt;w2ui&lt;/code&gt;&lt;/strong&gt;&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;strong&gt;&lt;code&gt;w2ui&lt;/code&gt;&lt;/strong&gt;, I&#39;d love to hear about it, please email to &lt;code&gt;vitmalina@gmail.com&lt;/code&gt; the name of your project and a link to a public website or demo, and I will add it to the list.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Your contributions are welcome. However, a few things you need to know before contributing:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Please check out the latest code before changing anything. It is harder to merge if your changes will not merge cleanly.&lt;/li&gt; &#xA; &lt;li&gt;If you are changing JS files - do all changes in /src folder&lt;/li&gt; &#xA; &lt;li&gt;If you are changing CSS files - do all changes in LESS in /src/less/src&lt;/li&gt; &#xA; &lt;li&gt;If you want to help with unit test - do all changes in /qa&lt;/li&gt; &#xA; &lt;li&gt;If you want to change documentation - do all changes in /docs&lt;/li&gt; &#xA; &lt;li&gt;If you want to add demos - do all changes in /demos&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>cookpete/react-player</title>
    <updated>2022-09-07T01:34:30Z</updated>
    <id>tag:github.com,2022-09-07:/cookpete/react-player</id>
    <link href="https://github.com/cookpete/react-player" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A React component for playing a variety of URLs, including file paths, YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia and DailyMotion&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; ReactPlayer &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-player&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/react-player.svg?sanitize=true&#34; alt=&#34;Latest npm version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/CookPete/react-player&#34;&gt; &lt;img src=&#34;https://img.shields.io/travis/CookPete/react-player/master.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/CookPete/react-player&#34;&gt; &lt;img src=&#34;https://img.shields.io/codecov/c/github/cookpete/react-player.svg?sanitize=true&#34; alt=&#34;Test Coverage&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.patreon.com/cookpete&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/sponsor-patreon-fa6854.svg?sanitize=true&#34; alt=&#34;Become a sponsor on Patreon&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A React component for playing a variety of URLs, including file paths, YouTube, Facebook, Twitch, SoundCloud, Streamable, Vimeo, Wistia, Mixcloud, DailyMotion and Kaltura. Not using React? &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#standalone-player&#34;&gt;No problem.&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Migrating to ReactPlayer &lt;code&gt;v2.0&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;ReactPlayer &lt;code&gt;v2.0&lt;/code&gt; changes single player imports and adds lazy loading players. Support for &lt;code&gt;preload&lt;/code&gt; has also been removed, plus some other changes. See &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/MIGRATING.md&#34;&gt;&lt;code&gt;MIGRATING.md&lt;/code&gt;&lt;/a&gt; for information.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install react-player # or yarn add react-player&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import ReactPlayer from &#39;react-player&#39;&#xA;&#xA;// Render a YouTube video player&#xA;&amp;lt;ReactPlayer url=&#39;https://www.youtube.com/watch?v=ysz5S6PUM-U&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, ReactPlayer supports &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#supported-media&#34;&gt;many different types&lt;/a&gt; of &lt;code&gt;url&lt;/code&gt;. If you only ever use one type, use imports such as &lt;code&gt;react-player/youtube&lt;/code&gt; to reduce your bundle size. See &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#config-prop&#34;&gt;config keys&lt;/a&gt; for all player keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import ReactPlayer from &#39;react-player/youtube&#39;&#xA;&#xA;// Only loads the YouTube player&#xA;&amp;lt;ReactPlayer url=&#39;https://www.youtube.com/watch?v=ysz5S6PUM-U&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your build system supports &lt;code&gt;import()&lt;/code&gt; statements, use &lt;code&gt;react-player/lazy&lt;/code&gt; to lazy load the appropriate player for the &lt;code&gt;url&lt;/code&gt; you pass in. This adds several &lt;code&gt;reactPlayer&lt;/code&gt; chunks to your output, but reduces your main bundle size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import ReactPlayer from &#39;react-player/lazy&#39;&#xA;&#xA;// Lazy load the YouTube player&#xA;&amp;lt;ReactPlayer url=&#39;https://www.youtube.com/watch?v=ysz5S6PUM-U&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Demo page: &lt;a href=&#34;https://cookpete.com/react-player&#34;&gt;&lt;code&gt;https://cookpete.com/react-player&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The component parses a URL and loads in the appropriate markup and external SDKs to play media from &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#supported-media&#34;&gt;various sources&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#props&#34;&gt;Props&lt;/a&gt; can be passed in to control playback and react to events such as buffering or media ending. See &lt;a href=&#34;https://github.com/CookPete/react-player/raw/master/src/demo/App.js&#34;&gt;the demo source&lt;/a&gt; for a full example.&lt;/p&gt; &#xA;&lt;p&gt;For platforms without direct use of &lt;code&gt;npm&lt;/code&gt; modules, a minified version of &lt;code&gt;ReactPlayer&lt;/code&gt; is located in &lt;code&gt;dist&lt;/code&gt; after installing. To generate this file yourself, checkout the repo and run &lt;code&gt;npm run build:dist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Polyfills&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using &lt;code&gt;npm&lt;/code&gt; and need to support &lt;a href=&#34;http://caniuse.com/#feat=promises&#34;&gt;browsers without &lt;code&gt;Promise&lt;/code&gt;&lt;/a&gt; you will need a &lt;a href=&#34;https://github.com/stefanpenner/es6-promise&#34;&gt;&lt;code&gt;Promise&lt;/code&gt; polyfill&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;To support IE11 you will need to use &lt;a href=&#34;https://babeljs.io/docs/usage/polyfill&#34;&gt;&lt;code&gt;babel-polyfill&lt;/code&gt;&lt;/a&gt; or a similar ES2015+ polyfill.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Autoplay&lt;/h4&gt; &#xA;&lt;p&gt;As of Chrome 66, &lt;a href=&#34;https://www.theverge.com/2018/3/22/17150870/google-chrome-autoplay-videos-sound-mute-update&#34;&gt;videos must be &lt;code&gt;muted&lt;/code&gt; in order to play automatically&lt;/a&gt;. Some players, like Facebook, cannot be unmuted until the user interacts with the video, so you may want to enable &lt;code&gt;controls&lt;/code&gt; to allow users to unmute videos themselves. Please set &lt;code&gt;muted={true}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Props&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The url of a video or song to play&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Can be an &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#multiple-sources-and-tracks&#34;&gt;array&lt;/a&gt; or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/MediaStream&#34;&gt;&lt;code&gt;MediaStream&lt;/code&gt;&lt;/a&gt; object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;playing&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to pause or play the media&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;loop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to loop the media&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;controls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to display native player controls.&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;For Vimeo videos, hiding controls must be enabled by the video owner.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;light&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; to show just the video thumbnail, which loads the full player on click&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Pass in an image URL to override the preview image&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;volume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the volume of the player, between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;&lt;code&gt;null&lt;/code&gt; uses default volume on all players &lt;a href=&#34;https://github.com/CookPete/react-player/issues/357&#34;&gt;&lt;code&gt;#357&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;muted&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Mutes the player&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Only works if &lt;code&gt;volume&lt;/code&gt; is set&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;playbackRate&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the playback rate of the player&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Only supported by YouTube, Wistia, and file paths&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;width&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the width of the player&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;640px&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;height&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the height of the player&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;360px&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;style&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add &lt;a href=&#34;https://facebook.github.io/react/tips/inline-styles.html&#34;&gt;inline styles&lt;/a&gt; to the root element&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;progressInterval&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The time between &lt;code&gt;onProgress&lt;/code&gt; callbacks, in milliseconds&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;playsinline&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Applies the &lt;code&gt;playsinline&lt;/code&gt; attribute where supported&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt; to enable or disable &lt;a href=&#34;https://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture&#34;&gt;picture-in-picture mode&lt;/a&gt;&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Only available when playing file URLs in &lt;a href=&#34;https://caniuse.com/#feat=picture-in-picture&#34;&gt;certain browsers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stopOnUnmount&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If you are using &lt;code&gt;pip&lt;/code&gt; you may want to use &lt;code&gt;stopOnUnmount={false}&lt;/code&gt; to continue playing in picture-in-picture mode even after ReactPlayer unmounts&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fallback&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Element or component to use as a fallback if you are using lazy loading&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;null&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;wrapper&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Element or component to use as the container element&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;div&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;playIcon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Element or component to use as the play icon in light mode&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;previewTabIndex&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set the tab index to be used on light mode&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;config&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Override options for the various players, see &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#config-prop&#34;&gt;config prop&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Callback props&lt;/h4&gt; &#xA;&lt;p&gt;Callback props take a function that gets fired on various player events:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Prop&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onReady&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media is loaded and ready to play. If &lt;code&gt;playing&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, media will play immediately&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onStart&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media starts playing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onPlay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media starts or resumes playing after pausing or buffering&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onProgress&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback containing &lt;code&gt;played&lt;/code&gt; and &lt;code&gt;loaded&lt;/code&gt; progress as a fraction, and &lt;code&gt;playedSeconds&lt;/code&gt; and &lt;code&gt;loadedSeconds&lt;/code&gt; in seconds&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;eg &lt;code&gt;{ played: 0.12, playedSeconds: 11.3, loaded: 0.34, loadedSeconds: 16.7 }&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onDuration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback containing duration of the media, in seconds&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onPause&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media is paused&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onBuffer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media starts buffering&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onBufferEnd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media has finished buffering&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Works for files, YouTube and Facebook&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onSeek&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media seeks with &lt;code&gt;seconds&lt;/code&gt; parameter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onPlaybackRateChange&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when playback rate of the player changed&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Only supported by YouTube, Wistia, and file paths&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onEnded&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when media finishes playing&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Does not fire when &lt;code&gt;loop&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onError&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when an error occurs whilst attempting to play media&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onClickPreview&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when user clicks the &lt;code&gt;light&lt;/code&gt; mode preview&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onEnablePIP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when picture-in-picture mode is enabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;onDisablePIP&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Called when picture-in-picture mode is disabled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Config prop&lt;/h4&gt; &#xA;&lt;p&gt;There is a single &lt;code&gt;config&lt;/code&gt; prop to override settings for each type of player:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ReactPlayer&#xA;  url={url}&#xA;  config={{&#xA;    youtube: {&#xA;      playerVars: { showinfo: 1 }&#xA;    },&#xA;    facebook: {&#xA;      appId: &#39;12345&#39;&#xA;    }&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Settings for each player live under different keys:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Key&lt;/th&gt; &#xA;   &lt;th&gt;Options&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;youtube&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;playerVars&lt;/code&gt;: Override the &lt;a href=&#34;https://developers.google.com/youtube/player_parameters?playerVersion=HTML5&#34;&gt;default player vars&lt;/a&gt;&lt;br&gt;&lt;code&gt;embedOptions&lt;/code&gt;: Override the &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player&#34;&gt;default embed options&lt;/a&gt;&lt;br&gt;&lt;code&gt;onUnstarted&lt;/code&gt;: Called when state changes to &lt;code&gt;unstarted&lt;/code&gt; (usually when video fails to autoplay)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;facebook&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;appId&lt;/code&gt;: Your own &lt;a href=&#34;https://developers.facebook.com/docs/apps/register#app-id&#34;&gt;Facebook app ID&lt;/a&gt;&lt;br&gt;&lt;code&gt;version&lt;/code&gt;: Facebook SDK version&lt;br&gt;&lt;code&gt;playerId&lt;/code&gt;: Override player ID for consistent server-side rendering (use with &lt;a href=&#34;https://github.com/thearnica/react-uid&#34;&gt;&lt;code&gt;react-uid&lt;/code&gt;&lt;/a&gt;)&lt;br&gt;&lt;code&gt;attributes&lt;/code&gt;: Extra data attributes to pass to the &lt;code&gt;fb-video&lt;/code&gt; element&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;soundcloud&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;: Override the &lt;a href=&#34;https://developers.soundcloud.com/docs/api/html5-widget#params&#34;&gt;default player options&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;vimeo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;playerOptions&lt;/code&gt;: Override the &lt;a href=&#34;https://developer.vimeo.com/player/sdk/embed&#34;&gt;default params&lt;/a&gt;&lt;br&gt;&lt;code&gt;title&lt;/code&gt;: Set the player &lt;code&gt;iframe&lt;/code&gt; title attribute&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;wistia&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;: Override the &lt;a href=&#34;https://wistia.com/doc/embed-options#options_list&#34;&gt;default player options&lt;/a&gt;&lt;br&gt;&lt;code&gt;playerId&lt;/code&gt;: Override player ID for consistent server-side rendering (use with &lt;a href=&#34;https://github.com/thearnica/react-uid&#34;&gt;&lt;code&gt;react-uid&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mixcloud&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;: Override the &lt;a href=&#34;https://www.mixcloud.com/developers/widget/#methods&#34;&gt;default player options&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;dailymotion&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;params&lt;/code&gt;: Override the &lt;a href=&#34;https://developer.dailymotion.com/player#player-parameters&#34;&gt;default player vars&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;twitch&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;options&lt;/code&gt;: Override the &lt;a href=&#34;https://dev.twitch.tv/docs/embed&#34;&gt;default player options&lt;/a&gt;&lt;br&gt;&lt;code&gt;playerId&lt;/code&gt;: Override player ID for consistent server-side rendering (use with &lt;a href=&#34;https://github.com/thearnica/react-uid&#34;&gt;&lt;code&gt;react-uid&lt;/code&gt;&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;file&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;attributes&lt;/code&gt;: Apply &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/HTML/Element/video#Attributes&#34;&gt;element attributes&lt;/a&gt;&lt;br&gt;&lt;code&gt;forceVideo&lt;/code&gt;: Always render a &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element&lt;br&gt;&lt;code&gt;forceAudio&lt;/code&gt;: Always render an &lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt; element&lt;br&gt;&lt;code&gt;forceHLS&lt;/code&gt;: Use &lt;a href=&#34;https://github.com/video-dev/hls.js&#34;&gt;hls.js&lt;/a&gt; for HLS streams&lt;br&gt;&lt;code&gt;forceDASH&lt;/code&gt;: Always use &lt;a href=&#34;https://github.com/Dash-Industry-Forum/dash.js&#34;&gt;dash.js&lt;/a&gt; for DASH streams&lt;br&gt;&lt;code&gt;forceFLV&lt;/code&gt;: Always use &lt;a href=&#34;https://github.com/Bilibili/flv.js&#34;&gt;flv.js&lt;/a&gt;&lt;br&gt;&lt;code&gt;hlsOptions&lt;/code&gt;: Override the &lt;a href=&#34;https://github.com/video-dev/hls.js/raw/master/docs/API.md#fine-tuning&#34;&gt;default &lt;code&gt;hls.js&lt;/code&gt; options&lt;/a&gt;&lt;br&gt;&lt;code&gt;hlsVersion&lt;/code&gt;: Override the &lt;a href=&#34;https://github.com/video-dev/hls.js&#34;&gt;&lt;code&gt;hls.js&lt;/code&gt;&lt;/a&gt; version loaded from &lt;a href=&#34;https://www.jsdelivr.com/package/npm/hls.js&#34;&gt;&lt;code&gt;jsdelivr&lt;/code&gt;&lt;/a&gt;, default: &lt;code&gt;0.13.1&lt;/code&gt;&lt;br&gt;&lt;code&gt;dashVersion&lt;/code&gt;: Override the &lt;a href=&#34;https://github.com/Dash-Industry-Forum/dash.js&#34;&gt;&lt;code&gt;dash.js&lt;/code&gt;&lt;/a&gt; version loaded from &lt;a href=&#34;https://cdnjs.com/libraries/dashjs&#34;&gt;&lt;code&gt;cdnjs&lt;/code&gt;&lt;/a&gt;, default: &lt;code&gt;2.9.2&lt;/code&gt;&lt;br&gt;&lt;code&gt;flvVersion&lt;/code&gt;: Override the &lt;a href=&#34;https://github.com/Bilibili/flv.js&#34;&gt;&lt;code&gt;flv.js&lt;/code&gt;&lt;/a&gt; version loaded from &lt;a href=&#34;https://www.jsdelivr.com/package/npm/flv.js&#34;&gt;&lt;code&gt;jsdelivr&lt;/code&gt;&lt;/a&gt;, default: &lt;code&gt;1.5.0&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;h4&gt;Static Methods&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ReactPlayer.canPlay(url)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine if a URL can be played. This does &lt;em&gt;not&lt;/em&gt; detect media that is unplayable due to privacy settings, streaming permissions, etc. In that case, the &lt;code&gt;onError&lt;/code&gt; prop will be invoked after attemping to play. Any URL that does not match any patterns will fall back to a native HTML5 media player.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ReactPlayer.canEnablePiP(url)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determine if a URL can be played in &lt;a href=&#34;https://developers.google.com/web/updates/2018/10/watch-video-using-picture-in-picture&#34;&gt;picture-in-picture mode&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ReactPlayer.addCustomPlayer(CustomPlayer)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add a custom player. See &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/#adding-custom-players&#34;&gt;Adding custom players&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ReactPlayer.removeCustomPlayers()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Remove any players that have been added using &lt;code&gt;addCustomPlayer()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Instance Methods&lt;/h4&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://facebook.github.io/react/docs/refs-and-the-dom.html&#34;&gt;&lt;code&gt;ref&lt;/code&gt;&lt;/a&gt; to call instance methods on the player. See &lt;a href=&#34;https://raw.githubusercontent.com/cookpete/react-player/master/src/demo/App.js&#34;&gt;the demo app&lt;/a&gt; for an example of this.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;seekTo(amount, type)&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Seek to the given number of seconds, or fraction if &lt;code&gt;amount&lt;/code&gt; is between &lt;code&gt;0&lt;/code&gt; and &lt;code&gt;1&lt;/code&gt;&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;&lt;code&gt;type&lt;/code&gt; parameter lets you specify &lt;code&gt;&#39;seconds&#39;&lt;/code&gt; or &lt;code&gt;&#39;fraction&#39;&lt;/code&gt; to override default behaviour&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getCurrentTime()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the number of seconds that have been played&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Returns &lt;code&gt;null&lt;/code&gt; if unavailable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getSecondsLoaded()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the number of seconds that have been loaded&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Returns &lt;code&gt;null&lt;/code&gt; if unavailable or unsupported&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getDuration()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the duration (in seconds) of the currently playing media&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Returns &lt;code&gt;null&lt;/code&gt; if duration is unavailable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;getInternalPlayer()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the internal player of whatever is currently playing&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;eg the &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference#Loading_a_Video_Player&#34;&gt;YouTube player instance&lt;/a&gt;, or the &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/HTML/Element/video&#34;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; element when playing a video file&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Use &lt;code&gt;getInternalPlayer(&#39;hls&#39;)&lt;/code&gt; to get the &lt;a href=&#34;https://github.com/video-dev/hls.js&#34;&gt;hls.js&lt;/a&gt; player&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Use &lt;code&gt;getInternalPlayer(&#39;dash&#39;)&lt;/code&gt; to get the &lt;a href=&#34;https://github.com/Dash-Industry-Forum/dash.js&#34;&gt;dash.js&lt;/a&gt; player&lt;br&gt;&amp;nbsp; ◦ &amp;nbsp;Returns &lt;code&gt;null&lt;/code&gt; if the internal player is unavailable&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;showPreview()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When using &lt;code&gt;light&lt;/code&gt; mode, returns to the preview overlay&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Advanced Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Light player&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;light&lt;/code&gt; prop will render a video thumbnail with simple play icon, and only load the full player once a user has interacted with the image. &lt;a href=&#34;https://noembed.com&#34;&gt;Noembed&lt;/a&gt; is used to fetch thumbnails for a video URL. Note that automatic thumbnail fetching for Facebook, Wistia, Mixcloud and file URLs are not supported, and ongoing support for other URLs is not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;If you want to pass in your own thumbnail to use, set &lt;code&gt;light&lt;/code&gt; to the image URL rather than &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The styles for the preview image and play icon can be overridden by targeting the CSS classes &lt;code&gt;react-player__preview&lt;/code&gt;, &lt;code&gt;react-player__shadow&lt;/code&gt; and &lt;code&gt;react-player__play-icon&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Responsive player&lt;/h4&gt; &#xA;&lt;p&gt;Set &lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; to &lt;code&gt;100%&lt;/code&gt; and wrap the player in a &lt;a href=&#34;https://css-tricks.com/aspect-ratio-boxes&#34;&gt;fixed aspect ratio box&lt;/a&gt; to get a responsive player:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class ResponsivePlayer extends Component {&#xA;  render () {&#xA;    return (&#xA;      &amp;lt;div className=&#39;player-wrapper&#39;&amp;gt;&#xA;        &amp;lt;ReactPlayer&#xA;          className=&#39;react-player&#39;&#xA;          url=&#39;https://www.youtube.com/watch?v=ysz5S6PUM-U&#39;&#xA;          width=&#39;100%&#39;&#xA;          height=&#39;100%&#39;&#xA;        /&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.player-wrapper {&#xA;  position: relative;&#xA;  padding-top: 56.25% /* Player ratio: 100 / (1280 / 720) */&#xA;}&#xA;&#xA;.react-player {&#xA;  position: absolute;&#xA;  top: 0;&#xA;  left: 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://jsfiddle.net/e6w3rtj1/&#34;&gt;&lt;code&gt;jsFiddle&lt;/code&gt; example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;SDK Overrides&lt;/h4&gt; &#xA;&lt;p&gt;You can use your own version of any player SDK, assuming the correct &lt;code&gt;window&lt;/code&gt; global is set before the player mounts. For example, to use a local version of &lt;a href=&#34;https://cdnjs.com/libraries/hls.js&#34;&gt;&lt;code&gt;hls.js&lt;/code&gt;&lt;/a&gt;, add &lt;code&gt;&amp;lt;script src=&#39;/path/hls.js&#39;&amp;gt;&amp;lt;/script&amp;gt;&lt;/code&gt; to your app. If &lt;code&gt;window.Hls&lt;/code&gt; is available when ReactPlayer mounts, it will use that instead of loading &lt;code&gt;hls.js&lt;/code&gt; from &lt;code&gt;cdnjs&lt;/code&gt;. See &lt;a href=&#34;https://github.com/CookPete/react-player/issues/605#issuecomment-492561909&#34;&gt;#605&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Standalone player&lt;/h4&gt; &#xA;&lt;p&gt;If you aren’t using React, you can still render a player using the standalone library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#39;https://unpkg.com/react-player/dist/ReactPlayer.standalone.js&#39;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  const container = document.getElementById(&#39;container&#39;)&#xA;  const url = &#39;https://www.youtube.com/watch?v=d46Azg3Pm4c&#39;&#xA;&#xA;  renderReactPlayer(container, { url, playing: true })&#xA;&#xA;  function pausePlayer () {&#xA;    renderReactPlayer(container, { url, playing: false })&#xA;  }&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://jsfiddle.net/krkcvx9s/&#34;&gt;&lt;code&gt;jsFiddle&lt;/code&gt; example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Adding custom players&lt;/h4&gt; &#xA;&lt;p&gt;If you have your own player that is compatible with ReactPlayer’s internal architecture, you can add it using &lt;code&gt;addCustomPlayer&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import YourOwnPlayer from &#39;./somewhere&#39;;&#xA;ReactPlayer.addCustomPlayer(YourOwnPlayer);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;removeCustomPlayers&lt;/code&gt; to clear all custom players:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ReactPlayer.removeCustomPlayers();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is your responsibility to ensure that custom players keep up with any internal changes to ReactPlayer in later versions.&lt;/p&gt; &#xA;&lt;h4&gt;Mobile considerations&lt;/h4&gt; &#xA;&lt;p&gt;Due to various restrictions, &lt;code&gt;ReactPlayer&lt;/code&gt; is not guaranteed to function properly on mobile devices. The &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference&#34;&gt;YouTube player documentation&lt;/a&gt;, for example, explains that &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference#Mobile_considerations&#34;&gt;certain mobile browsers require user interaction&lt;/a&gt; before playing:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The HTML5 &lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt; element, in certain mobile browsers (such as Chrome and Safari), only allows playback to take place if it’s initiated by a user interaction (such as tapping on the player).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Multiple Sources and Tracks&lt;/h4&gt; &#xA;&lt;p&gt;Passing an array of YouTube URLs to the &lt;code&gt;url&lt;/code&gt; prop will load them as an untitled playlist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ReactPlayer&#xA;  url={[&#xA;    &#39;https://www.youtube.com/watch?v=oUFJJNQGwhk&#39;,&#xA;    &#39;https://www.youtube.com/watch?v=jNgP6d9HraI&#39;&#xA;  ]}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When playing file paths, an array of sources can be passed to the &lt;code&gt;url&lt;/code&gt; prop to render multiple &lt;code&gt;&amp;lt;source&amp;gt;&lt;/code&gt; tags.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ReactPlayer playing url={[&#39;foo.webm&#39;, &#39;foo.ogg&#39;]} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also specify a &lt;code&gt;type&lt;/code&gt; for each source by using objects with &lt;code&gt;src&lt;/code&gt; and &lt;code&gt;type&lt;/code&gt; properties.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ReactPlayer&#xA;  playing&#xA;  url={[&#xA;    {src: &#39;foo.webm&#39;, type: &#39;video/webm&#39;},&#xA;    {src: &#39;foo.ogg&#39;, type: &#39;video/ogg&#39;}&#xA;  ]}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Element/track&#34;&gt;&lt;code&gt;&amp;lt;track&amp;gt;&lt;/code&gt;&lt;/a&gt; elements for subtitles can be added using &lt;code&gt;config.file&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ReactPlayer&#xA;  playing&#xA;  url=&#39;foo.webm&#39;&#xA;  config={{ file: {&#xA;    tracks: [&#xA;      {kind: &#39;subtitles&#39;, src: &#39;subs/subtitles.en.vtt&#39;, srcLang: &#39;en&#39;, default: true},&#xA;      {kind: &#39;subtitles&#39;, src: &#39;subs/subtitles.ja.vtt&#39;, srcLang: &#39;ja&#39;},&#xA;      {kind: &#39;subtitles&#39;, src: &#39;subs/subtitles.de.vtt&#39;, srcLang: &#39;de&#39;}&#xA;    ]&#xA;  }}}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported media&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;YouTube videos use the &lt;a href=&#34;https://developers.google.com/youtube/iframe_api_reference&#34;&gt;YouTube iFrame Player API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Facebook videos use the &lt;a href=&#34;https://developers.facebook.com/docs/plugins/embedded-video-player/api&#34;&gt;Facebook Embedded Video Player API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;SoundCloud tracks use the &lt;a href=&#34;https://developers.soundcloud.com/docs/api/html5-widget&#34;&gt;SoundCloud Widget API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Streamable videos use &lt;a href=&#34;https://github.com/embedly/player.js&#34;&gt;&lt;code&gt;Player.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vidme videos are &lt;a href=&#34;https://medium.com/vidme/goodbye-for-now-120b40becafa&#34;&gt;no longer supported&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vimeo videos use the &lt;a href=&#34;https://developer.vimeo.com/player/sdk&#34;&gt;Vimeo Player API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Wistia videos use the &lt;a href=&#34;https://wistia.com/doc/player-api&#34;&gt;Wistia Player API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Twitch videos use the &lt;a href=&#34;https://dev.twitch.tv/docs/embed#interactive-frames-for-live-streams-and-vods&#34;&gt;Twitch Interactive Frames API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;DailyMotion videos use the &lt;a href=&#34;https://developer.dailymotion.com/player&#34;&gt;DailyMotion Player API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vidyard videos use the &lt;a href=&#34;https://knowledge.vidyard.com/hc/en-us/articles/360019034753-Using-the-Vidyard-Player-API&#34;&gt;Vidyard Player API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Kaltura&#39;s &lt;code&gt;react-player&lt;/code&gt; implementation uses the embed.ly &lt;a href=&#34;https://github.com/embedly/player.js&#34;&gt;&lt;code&gt;Player.js&lt;/code&gt;&lt;/a&gt; API but Kaltura specific APIs are also available, see &lt;a href=&#34;http://player.kaltura.com/docs/index.php?path=kwidget&#34;&gt;Kaltura Player API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/Supported_media_formats&#34;&gt;Supported file types&lt;/a&gt; are playing using &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/HTML/Element/video&#34;&gt;&lt;code&gt;&amp;lt;video&amp;gt;&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/HTML/Element/audio&#34;&gt;&lt;code&gt;&amp;lt;audio&amp;gt;&lt;/code&gt;&lt;/a&gt; elements &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;HLS streams are played using &lt;a href=&#34;https://github.com/video-dev/hls.js&#34;&gt;&lt;code&gt;hls.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;DASH streams are played using &lt;a href=&#34;https://github.com/Dash-Industry-Forum/dash.js&#34;&gt;&lt;code&gt;dash.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/CookPete/react-player/raw/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; before creating a pull request.&lt;/p&gt; &#xA;&lt;h3&gt;Thanks&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to anyone who has &lt;a href=&#34;https://github.com/CookPete/react-player/graphs/contributors&#34;&gt;contributed&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Anyone who has supported me on &lt;a href=&#34;https://patreon.com/cookpete&#34;&gt;Patreon&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;&lt;table&gt;&#xA;  &lt;tr&gt;&#xA;    &lt;td align=&#39;center&#39;&gt;&#xA;      &lt;a href=&#39;https://github.com/josephfung&#39;&gt;&lt;img src=&#39;https://avatars3.githubusercontent.com/u/114566?s=120&amp;v=4&#39; /&gt;&lt;br /&gt;Joseph Fung&lt;/a&gt;&#xA;    &lt;/td&gt;&#xA;  &lt;/tr&gt;&#xA;&lt;/table&gt;&#xA;--&gt;</summary>
  </entry>
</feed>