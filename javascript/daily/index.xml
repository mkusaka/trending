<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-24T01:36:48Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NateCC0902/holdyourfork</title>
    <updated>2023-04-24T01:36:48Z</updated>
    <id>tag:github.com,2023-04-24:/NateCC0902/holdyourfork</id>
    <link href="https://github.com/NateCC0902/holdyourfork" rel="alternate"></link>
    <summary type="html">&lt;p&gt;REM script that helps you re-add course automatically.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prerequisite&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Node&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;LINK: &lt;a href=&#34;https://nodejs.org/en&#34;&gt;https://nodejs.org/en&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Git&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;LINK: &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;https://git-scm.com/downloads&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How to use it&lt;/h1&gt; &#xA;&lt;h3&gt;Step 1. open your terminal and&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/NateCC0902/holdyourfork&#xA;cd holdyourfork&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2. Run it (in terminal).&lt;/h3&gt; &#xA;&lt;p&gt;Replace username, password, duo_code and course_code. and presses ENTER.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node main.js &amp;lt;USERNAME&amp;gt; &amp;lt;PASSWORD&amp;gt; &amp;lt;DUO_CODE&amp;gt; &amp;lt;COURSE_CODE&amp;gt;&#xA;// i.e &#xA;//node main.js imhuman password 123089 AA3QCD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Reminder&lt;/h1&gt; &#xA;&lt;p&gt;This script re add course every 1 hours. DONT make it shorter you may block by school.&lt;/p&gt; &#xA;&lt;p&gt;DUO passcode is one time use.&lt;/p&gt; &#xA;&lt;p&gt;headless: false // this is for show you how the script run it. and set it true will run the script background.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>WhiskeySockets/Baileys</title>
    <updated>2023-04-24T01:36:48Z</updated>
    <id>tag:github.com,2023-04-24:/WhiskeySockets/Baileys</id>
    <link href="https://github.com/WhiskeySockets/Baileys" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight full-featured typescript/javascript WhatsApp Web API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Baileys - Typescript/Javascript WhatsApp Web API&lt;/h1&gt; &#xA;&lt;p&gt;Baileys does not require Selenium or any other browser to be interface with WhatsApp Web, it does so directly using a &lt;strong&gt;WebSocket&lt;/strong&gt;. Not running Selenium or Chromimum saves you like &lt;strong&gt;half a gig&lt;/strong&gt; of ram :/ Baileys supports interacting with the multi-device &amp;amp; web versions of WhatsApp. Thank you to &lt;a href=&#34;https://github.com/pokearaujo/multidevice&#34;&gt;@pokearaujo&lt;/a&gt; for writing his observations on the workings of WhatsApp Multi-Device. Also, thank you to &lt;a href=&#34;https://github.com/sigalor/whatsapp-web-reveng&#34;&gt;@Sigalor&lt;/a&gt; for writing his observations on the workings of WhatsApp Web and thanks to &lt;a href=&#34;https://github.com/Rhymen/go-whatsapp/&#34;&gt;@Rhymen&lt;/a&gt; for the &lt;strong&gt;go&lt;/strong&gt; implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Please Read&lt;/h2&gt; &#xA;&lt;p&gt;The original repository had to be removed by the original author - we now continue development in this repository here. This is the only official repository and is maintained by the community. &lt;strong&gt;Join the Discord &lt;a href=&#34;https://discord.gg/WeJM5FP9GG&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Do check out &amp;amp; run &lt;a href=&#34;https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/blob/master/Example/example.ts&#34;&gt;example.ts&lt;/a&gt; to see an example usage of the library. The script covers most common use cases. To run the example script, download or clone the repo and then type the following in a terminal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd path/to/Baileys&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn example&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use the stable version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;temporarily unavailable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the edge version (no guarantee of stability, but latest fixes + features)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add github:WhiskeySockets/Baileys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import your code using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket from &#39;@adiwajshing/baileys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Connecting&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { DisconnectReason } from &#39;@adiwajshing/baileys&#39;&#xA;import { Boom } from &#39;@hapi/boom&#39;&#xA;&#xA;async function connectToWhatsApp () {&#xA;    const sock = makeWASocket({&#xA;        // can provide additional config here&#xA;        printQRInTerminal: true&#xA;    })&#xA;    sock.ev.on(&#39;connection.update&#39;, (update) =&amp;gt; {&#xA;        const { connection, lastDisconnect } = update&#xA;        if(connection === &#39;close&#39;) {&#xA;            const shouldReconnect = (lastDisconnect.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut&#xA;            console.log(&#39;connection closed due to &#39;, lastDisconnect.error, &#39;, reconnecting &#39;, shouldReconnect)&#xA;            // reconnect if not logged out&#xA;            if(shouldReconnect) {&#xA;                connectToWhatsApp()&#xA;            }&#xA;        } else if(connection === &#39;open&#39;) {&#xA;            console.log(&#39;opened connection&#39;)&#xA;        }&#xA;    })&#xA;    sock.ev.on(&#39;messages.upsert&#39;, m =&amp;gt; {&#xA;        console.log(JSON.stringify(m, undefined, 2))&#xA;&#xA;        console.log(&#39;replying to&#39;, m.messages[0].key.remoteJid)&#xA;        await sock.sendMessage(m.messages[0].key.remoteJid!, { text: &#39;Hello there!&#39; })&#xA;    })&#xA;}&#xA;// run in main file&#xA;connectToWhatsApp()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the connection is successful, you will see a QR code printed on your terminal screen, scan it with WhatsApp on your phone and you&#39;ll be logged in!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; install &lt;code&gt;qrcode-terminal&lt;/code&gt; using &lt;code&gt;yarn add qrcode-terminal&lt;/code&gt; to auto-print the QR to the terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; the code to support the legacy version of WA Web (pre multi-device) has been removed in v5. Only the standard multi-device connection is now supported. This is done as WA seems to have completely dropped support for the legacy version.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring the Connection&lt;/h2&gt; &#xA;&lt;p&gt;You can configure the connection by passing a &lt;code&gt;SocketConfig&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;The entire &lt;code&gt;SocketConfig&lt;/code&gt; structure is mentioned here with default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type SocketConfig = {&#xA;    /** the WS url to connect to WA */&#xA;    waWebSocketUrl: string | URL&#xA;    /** Fails the connection if the socket times out in this interval */&#xA;&#x9;connectTimeoutMs: number&#xA;    /** Default timeout for queries, undefined for no timeout */&#xA;    defaultQueryTimeoutMs: number | undefined&#xA;    /** ping-pong interval for WS connection */&#xA;    keepAliveIntervalMs: number&#xA;    /** proxy agent */&#xA;&#x9;agent?: Agent&#xA;    /** pino logger */&#xA;&#x9;logger: Logger&#xA;    /** version to connect with */&#xA;    version: WAVersion&#xA;    /** override browser config */&#xA;&#x9;browser: WABrowserDescription&#xA;&#x9;/** agent used for fetch requests -- uploading/downloading media */&#xA;&#x9;fetchAgent?: Agent&#xA;    /** should the QR be printed in the terminal */&#xA;    printQRInTerminal: boolean&#xA;    /** should events be emitted for actions done by this socket connection */&#xA;    emitOwnEvents: boolean&#xA;    /** provide a cache to store media, so does not have to be re-uploaded */&#xA;    mediaCache?: NodeCache&#xA;    /** custom upload hosts to upload media to */&#xA;    customUploadHosts: MediaConnInfo[&#39;hosts&#39;]&#xA;    /** time to wait between sending new retry requests */&#xA;    retryRequestDelayMs: number&#xA;    /** time to wait for the generation of the next QR in ms */&#xA;    qrTimeout?: number;&#xA;    /** provide an auth state object to maintain the auth state */&#xA;    auth: AuthenticationState&#xA;    /** manage history processing with this control; by default will sync up everything */&#xA;    shouldSyncHistoryMessage: (msg: proto.Message.IHistorySyncNotification) =&amp;gt; boolean&#xA;    /** transaction capability options for SignalKeyStore */&#xA;    transactionOpts: TransactionCapabilityOptions&#xA;    /** provide a cache to store a user&#39;s device list */&#xA;    userDevicesCache?: NodeCache&#xA;    /** marks the client as online whenever the socket successfully connects */&#xA;    markOnlineOnConnect: boolean&#xA;    /**&#xA;     * map to store the retry counts for failed messages;&#xA;     * used to determine whether to retry a message or not */&#xA;    msgRetryCounterMap?: MessageRetryMap&#xA;    /** width for link preview images */&#xA;    linkPreviewImageThumbnailWidth: number&#xA;    /** Should Baileys ask the phone for full history, will be received async */&#xA;    syncFullHistory: boolean&#xA;    /** Should baileys fire init queries automatically, default true */&#xA;    fireInitQueries: boolean&#xA;    /**&#xA;     * generate a high quality link preview,&#xA;     * entails uploading the jpegThumbnail to WA&#xA;     * */&#xA;    generateHighQualityLinkPreview: boolean&#xA;&#xA;    /** options for axios */&#xA;    options: AxiosRequestConfig&amp;lt;any&amp;gt;&#xA;    /**&#xA;     * fetch a message from your store&#xA;     * implement this so that messages failed to send (solves the &#34;this message can take a while&#34; issue) can be retried&#xA;     * */&#xA;    getMessage: (key: proto.IMessageKey) =&amp;gt; Promise&amp;lt;proto.IMessage | undefined&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Emulating the Desktop app instead of the web&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Baileys, by default, emulates a chrome web session&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;d like to emulate a desktop connection (and receive more message history), add this to your Socket config: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const conn = makeWASocket({&#xA;    ...otherOpts,&#xA;    // can use Windows, Ubuntu here too&#xA;    browser: Browsers.macOS(&#39;Desktop&#39;),&#xA;    syncFullHistory: true&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Saving &amp;amp; Restoring Sessions&lt;/h2&gt; &#xA;&lt;p&gt;You obviously don&#39;t want to keep scanning the QR code every time you want to connect.&lt;/p&gt; &#xA;&lt;p&gt;So, you can load the credentials to log back in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { BufferJSON, useMultiFileAuthState } from &#39;@adiwajshing/baileys&#39;&#xA;import * as fs from &#39;fs&#39;&#xA;&#xA;// utility function to help save the auth state in a single folder&#xA;// this function serves as a good guide to help write auth &amp;amp; key states for SQL/no-SQL databases, which I would recommend in any production grade system&#xA;const { state, saveCreds } = await useMultiFileAuthState(&#39;auth_info_baileys&#39;)&#xA;// will use the given state to connect&#xA;// so if valid credentials are available -- it&#39;ll connect without QR&#xA;const conn = makeWASocket({ auth: state }) &#xA;// this will be called as soon as the credentials are updated&#xA;conn.ev.on (&#39;creds.update&#39;, saveCreds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; When a message is received/sent, due to signal sessions needing updating, the auth keys (&lt;code&gt;authState.keys&lt;/code&gt;) will update. Whenever that happens, you must save the updated keys (&lt;code&gt;authState.keys.set()&lt;/code&gt; is called). Not doing so will prevent your messages from reaching the recipient &amp;amp; cause other unexpected consequences. The &lt;code&gt;useMultiFileAuthState&lt;/code&gt; function automatically takes care of that, but for any other serious implementation -- you will need to be very careful with the key state management.&lt;/p&gt; &#xA;&lt;h2&gt;Listening to Connection Updates&lt;/h2&gt; &#xA;&lt;p&gt;Baileys now fires the &lt;code&gt;connection.update&lt;/code&gt; event to let you know something has updated in the connection. This data has the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type ConnectionState = {&#xA;&#x9;/** connection is now open, connecting or closed */&#xA;&#x9;connection: WAConnectionState&#xA;&#x9;/** the error that caused the connection to close */&#xA;&#x9;lastDisconnect?: {&#xA;&#x9;&#x9;error: Error&#xA;&#x9;&#x9;date: Date&#xA;&#x9;}&#xA;&#x9;/** is this a new login */&#xA;&#x9;isNewLogin?: boolean&#xA;&#x9;/** the current QR code */&#xA;&#x9;qr?: string&#xA;&#x9;/** has the device received all pending notifications while it was offline */&#xA;&#x9;receivedPendingNotifications?: boolean &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; this also offers any updates to the QR&lt;/p&gt; &#xA;&lt;h2&gt;Handling Events&lt;/h2&gt; &#xA;&lt;p&gt;Baileys uses the EventEmitter syntax for events. They&#39;re all nicely typed up, so you shouldn&#39;t have any issues with an Intellisense editor like VS Code.&lt;/p&gt; &#xA;&lt;p&gt;The events are typed as mentioned here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;export type BaileysEventMap = {&#xA;    /** connection state has been updated -- WS closed, opened, connecting etc. */&#xA;&#x9;&#39;connection.update&#39;: Partial&amp;lt;ConnectionState&amp;gt;&#xA;    /** credentials updated -- some metadata, keys or something */&#xA;    &#39;creds.update&#39;: Partial&amp;lt;AuthenticationCreds&amp;gt;&#xA;    /** history sync, everything is reverse chronologically sorted */&#xA;    &#39;messaging-history.set&#39;: {&#xA;        chats: Chat[]&#xA;        contacts: Contact[]&#xA;        messages: WAMessage[]&#xA;        isLatest: boolean&#xA;    }&#xA;    /** upsert chats */&#xA;    &#39;chats.upsert&#39;: Chat[]&#xA;    /** update the given chats */&#xA;    &#39;chats.update&#39;: Partial&amp;lt;Chat&amp;gt;[]&#xA;    /** delete chats with given ID */&#xA;    &#39;chats.delete&#39;: string[]&#xA;    /** presence of contact in a chat updated */&#xA;    &#39;presence.update&#39;: { id: string, presences: { [participant: string]: PresenceData } }&#xA;&#xA;    &#39;contacts.upsert&#39;: Contact[]&#xA;    &#39;contacts.update&#39;: Partial&amp;lt;Contact&amp;gt;[]&#xA;&#xA;    &#39;messages.delete&#39;: { keys: WAMessageKey[] } | { jid: string, all: true }&#xA;    &#39;messages.update&#39;: WAMessageUpdate[]&#xA;    &#39;messages.media-update&#39;: { key: WAMessageKey, media?: { ciphertext: Uint8Array, iv: Uint8Array }, error?: Boom }[]&#xA;    /**&#xA;     * add/update the given messages. If they were received while the connection was online,&#xA;     * the update will have type: &#34;notify&#34;&#xA;     *  */&#xA;    &#39;messages.upsert&#39;: { messages: WAMessage[], type: MessageUpsertType }&#xA;    /** message was reacted to. If reaction was removed -- then &#34;reaction.text&#34; will be falsey */&#xA;    &#39;messages.reaction&#39;: { key: WAMessageKey, reaction: proto.IReaction }[]&#xA;&#xA;    &#39;message-receipt.update&#39;: MessageUserReceiptUpdate[]&#xA;&#xA;    &#39;groups.upsert&#39;: GroupMetadata[]&#xA;    &#39;groups.update&#39;: Partial&amp;lt;GroupMetadata&amp;gt;[]&#xA;    /** apply an action to participants in a group */&#xA;    &#39;group-participants.update&#39;: { id: string, participants: string[], action: ParticipantAction }&#xA;&#xA;    &#39;blocklist.set&#39;: { blocklist: string[] }&#xA;    &#39;blocklist.update&#39;: { blocklist: string[], type: &#39;add&#39; | &#39;remove&#39; }&#xA;    /** Receive an update on a call, including when the call was received, rejected, accepted */&#xA;    &#39;call&#39;: WACallEvent[]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can listen to these events like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;const sock = makeWASocket()&#xA;sock.ev.on(&#39;messages.upsert&#39;, ({ messages }) =&amp;gt; {&#xA;    console.log(&#39;got messages&#39;, messages)&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementing a Data Store&lt;/h2&gt; &#xA;&lt;p&gt;Baileys does not come with a defacto storage for chats, contacts, or messages. However, a simple in-memory implementation has been provided. The store listens for chat updates, new messages, message updates, etc., to always have an up-to-date version of the data.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { makeInMemoryStore } from &#39;@adiwajshing/baileys&#39;&#xA;// the store maintains the data of the WA connection in memory&#xA;// can be written out to a file &amp;amp; read from it&#xA;const store = makeInMemoryStore({ })&#xA;// can be read from a file&#xA;store.readFromFile(&#39;./baileys_store.json&#39;)&#xA;// saves the state to a file every 10s&#xA;setInterval(() =&amp;gt; {&#xA;    store.writeToFile(&#39;./baileys_store.json&#39;)&#xA;}, 10_000)&#xA;&#xA;const sock = makeWASocket({ })&#xA;// will listen from this socket&#xA;// the store can listen from a new socket once the current socket outlives its lifetime&#xA;store.bind(sock.ev)&#xA;&#xA;sock.ev.on(&#39;chats.set&#39;, () =&amp;gt; {&#xA;    // can use &#34;store.chats&#34; however you want, even after the socket dies out&#xA;    // &#34;chats&#34; =&amp;gt; a KeyedDB instance&#xA;    console.log(&#39;got chats&#39;, store.chats.all())&#xA;})&#xA;&#xA;sock.ev.on(&#39;contacts.set&#39;, () =&amp;gt; {&#xA;    console.log(&#39;got contacts&#39;, Object.values(store.contacts))&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The store also provides some simple functions such as &lt;code&gt;loadMessages&lt;/code&gt; that utilize the store to speed up data retrieval.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I highly recommend building your own data store especially for MD connections, as storing someone&#39;s entire chat history in memory is a terrible waste of RAM.&lt;/p&gt; &#xA;&lt;h2&gt;Sending Messages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Send all types of messages with a single function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Non-Media Messages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;const id = &#39;abcd@s.whatsapp.net&#39; // the WhatsApp ID &#xA;// send a simple text!&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; })&#xA;// send a reply messagge&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; }, { quoted: message })&#xA;// send a mentions message&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;@12345678901&#39;, mentions: [&#39;12345678901@s.whatsapp.net&#39;] })&#xA;// send a location!&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id, &#xA;    { location: { degreesLatitude: 24.121231, degreesLongitude: 55.1121221 } }&#xA;)&#xA;// send a contact!&#xA;const vcard = &#39;BEGIN:VCARD\n&#39; // metadata of the contact card&#xA;            + &#39;VERSION:3.0\n&#39; &#xA;            + &#39;FN:Jeff Singh\n&#39; // full name&#xA;            + &#39;ORG:Ashoka Uni;\n&#39; // the organization of the contact&#xA;            + &#39;TEL;type=CELL;type=VOICE;waid=911234567890:+91 12345 67890\n&#39; // WhatsApp ID + phone number&#xA;            + &#39;END:VCARD&#39;&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id,&#xA;    { &#xA;        contacts: { &#xA;            displayName: &#39;Jeff&#39;, &#xA;            contacts: [{ vcard }] &#xA;        }&#xA;    }&#xA;)&#xA;&#xA;// send a buttons message!&#xA;const buttons = [&#xA;  {buttonId: &#39;id1&#39;, buttonText: {displayText: &#39;Button 1&#39;}, type: 1},&#xA;  {buttonId: &#39;id2&#39;, buttonText: {displayText: &#39;Button 2&#39;}, type: 1},&#xA;  {buttonId: &#39;id3&#39;, buttonText: {displayText: &#39;Button 3&#39;}, type: 1}&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    text: &#34;Hi it&#39;s button message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    buttons: buttons,&#xA;    headerType: 1&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, buttonMessage)&#xA;&#xA;//send a template message!&#xA;const templateButtons = [&#xA;    {index: 1, urlButton: {displayText: &#39;⭐ Star Baileys on GitHub!&#39;, url: &#39;https://github.com/adiwajshing/Baileys&#39;}},&#xA;    {index: 2, callButton: {displayText: &#39;Call me!&#39;, phoneNumber: &#39;+1 (234) 5678-901&#39;}},&#xA;    {index: 3, quickReplyButton: {displayText: &#39;This is a reply, just like normal buttons!&#39;, id: &#39;id-like-buttons-message&#39;}},&#xA;]&#xA;&#xA;const templateMessage = {&#xA;    text: &#34;Hi it&#39;s a template message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    templateButtons: templateButtons&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, templateMessage)&#xA;&#xA;// send a list message!&#xA;const sections = [&#xA;    {&#xA;&#x9;title: &#34;Section 1&#34;,&#xA;&#x9;rows: [&#xA;&#x9;    {title: &#34;Option 1&#34;, rowId: &#34;option1&#34;},&#xA;&#x9;    {title: &#34;Option 2&#34;, rowId: &#34;option2&#34;, description: &#34;This is a description&#34;}&#xA;&#x9;]&#xA;    },&#xA;   {&#xA;&#x9;title: &#34;Section 2&#34;,&#xA;&#x9;rows: [&#xA;&#x9;    {title: &#34;Option 3&#34;, rowId: &#34;option3&#34;},&#xA;&#x9;    {title: &#34;Option 4&#34;, rowId: &#34;option4&#34;, description: &#34;This is a description V2&#34;}&#xA;&#x9;]&#xA;    },&#xA;]&#xA;&#xA;const listMessage = {&#xA;  text: &#34;This is a list&#34;,&#xA;  footer: &#34;nice footer, link: https://google.com&#34;,&#xA;  title: &#34;Amazing boldfaced list title&#34;,&#xA;  buttonText: &#34;Required, text on the button to view the list&#34;,&#xA;  sections&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, listMessage)&#xA;&#xA;const reactionMessage = {&#xA;    react: {&#xA;        text: &#34;💖&#34;, // use an empty string to remove the reaction&#xA;        key: message.key&#xA;    }&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, reactionMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending messages with link previews&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By default, WA MD does not have link generation when sent from the web&lt;/li&gt; &#xA; &lt;li&gt;Baileys has a function to generate the content for these link previews&lt;/li&gt; &#xA; &lt;li&gt;To enable this function&#39;s usage, add &lt;code&gt;link-preview-js&lt;/code&gt; as a dependency to your project with &lt;code&gt;yarn add link-preview-js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send a link:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// send a link&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;Hi, this was sent using https://github.com/adiwajshing/baileys&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Media Messages&lt;/h3&gt; &#xA;&lt;p&gt;Sending media (video, stickers, images) is easier &amp;amp; more efficient than ever.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can specify a buffer, a local url or even a remote url.&lt;/li&gt; &#xA; &lt;li&gt;When specifying a media url, Baileys never loads the entire buffer into memory; it even encrypts the media as a readable stream.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@adiwajshing/baileys&#39;&#xA;// Sending gifs&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: fs.readFileSync(&#34;Media/ma_gif.mp4&#34;), &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: &#34;./Media/ma_gif.mp4&#34;, &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;// send an audio file&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { audio: { url: &#34;./Media/audio.mp3&#34; }, mimetype: &#39;audio/mp4&#39; }&#xA;    { url: &#34;Media/audio.mp3&#34; }, // can send mp3, mp4, &amp;amp; ogg&#xA;)&#xA;&#xA;// send a buttons message with image header!&#xA;const buttons = [&#xA;  {buttonId: &#39;id1&#39;, buttonText: {displayText: &#39;Button 1&#39;}, type: 1},&#xA;  {buttonId: &#39;id2&#39;, buttonText: {displayText: &#39;Button 2&#39;}, type: 1},&#xA;  {buttonId: &#39;id3&#39;, buttonText: {displayText: &#39;Button 3&#39;}, type: 1}&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    image: {url: &#39;https://example.com/image.jpeg&#39;},&#xA;    caption: &#34;Hi it&#39;s button message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    buttons: buttons,&#xA;    headerType: 4&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, buttonMessage)&#xA;&#xA;//send a template message with an image **attached**!&#xA;const templateButtons = [&#xA;  {index: 1, urlButton: {displayText: &#39;⭐ Star Baileys on GitHub!&#39;, url: &#39;https://github.com/adiwajshing/Baileys&#39;}},&#xA;  {index: 2, callButton: {displayText: &#39;Call me!&#39;, phoneNumber: &#39;+1 (234) 5678-901&#39;}},&#xA;  {index: 3, quickReplyButton: {displayText: &#39;This is a reply, just like normal buttons!&#39;, id: &#39;id-like-buttons-message&#39;}},&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    text: &#34;Hi it&#39;s a template message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    templateButtons: templateButtons,&#xA;    image: {url: &#39;https://example.com/image.jpeg&#39;}&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, templateMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; is the WhatsApp ID of the person or group you&#39;re sending the message to. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It must be in the format &lt;code&gt;[country code][phone number]@s.whatsapp.net&lt;/code&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;Example for people: &lt;code&gt;+19999999999@s.whatsapp.net&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;For groups, it must be in the format &lt;code&gt;123456789-123345@g.us&lt;/code&gt;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;For broadcast lists, it&#39;s &lt;code&gt;[timestamp of creation]@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For stories, the ID is &lt;code&gt;status@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For media messages, the thumbnail can be generated automatically for images &amp;amp; stickers provided you add &lt;code&gt;jimp&lt;/code&gt; or &lt;code&gt;sharp&lt;/code&gt; as a dependency in your project using &lt;code&gt;yarn add jimp&lt;/code&gt; or &lt;code&gt;yarn add sharp&lt;/code&gt;. Thumbnails for videos can also be generated automatically, though, you need to have &lt;code&gt;ffmpeg&lt;/code&gt; installed on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MiscGenerationOptions&lt;/strong&gt;: some extra info about the message. It can have the following &lt;strong&gt;optional&lt;/strong&gt; values: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const info: MessageOptions = {&#xA;    quoted: quotedMessage, // the message you want to quote&#xA;    contextInfo: { forwardingScore: 2, isForwarded: true }, // some random context info (can show a forwarded message with this too)&#xA;    timestamp: Date(), // optional, if you want to manually set the timestamp of the message&#xA;    caption: &#34;hello there!&#34;, // (for media messages) the caption to send with the media (cannot be sent with stickers though)&#xA;    jpegThumbnail: &#34;23GD#4/==&#34;, /*  (for location &amp;amp; media messages) has to be a base 64 encoded JPEG if you want to send a custom thumb, &#xA;                                or set to null if you don&#39;t want to send a thumbnail.&#xA;                                Do not enter this field if you want to automatically generate a thumb&#xA;                            */&#xA;    mimetype: Mimetype.pdf, /* (for media messages) specify the type of media (optional for all media types except documents),&#xA;                                import {Mimetype} from &#39;@adiwajshing/baileys&#39;&#xA;                            */&#xA;    fileName: &#39;somefile.pdf&#39;, // (for media messages) file name for the media&#xA;    /* will send audio messages as voice notes, if set to true */&#xA;    ptt: true,&#xA;    /** Should it send as a disappearing messages. &#xA;     * By default &#39;chat&#39; -- which follows the setting of the chat */&#xA;    ephemeralExpiration: WA_DEFAULT_EPHEMERAL&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forwarding Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const msg = getMessageFromStore(&#39;455@s.whatsapp.net&#39;, &#39;HSJHJWH7323HSJSJ&#39;) // implement this on your end&#xA;await sock.sendMessage(&#39;1234@s.whatsapp.net&#39;, { forward: msg }) // WA forward the message!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reading Messages&lt;/h2&gt; &#xA;&lt;p&gt;A set of message keys must be explicitly marked read now. In multi-device, you cannot mark an entire &#34;chat&#34; read as it were with Baileys Web. This means you have to keep track of unread messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const key = {&#xA;    remoteJid: &#39;1234-123@g.us&#39;,&#xA;    id: &#39;AHASHH123123AHGA&#39;, // id of the message you want to read&#xA;    participant: &#39;912121232@s.whatsapp.net&#39; // the ID of the user that sent the  message (undefined for individual chats)&#xA;}&#xA;// pass to readMessages function&#xA;// can pass multiple keys to read multiple messages as well&#xA;await sock.readMessages([key])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The message ID is the unique identifier of the message that you are marking as read. On a &lt;code&gt;WAMessage&lt;/code&gt;, the &lt;code&gt;messageID&lt;/code&gt; can be accessed using &lt;code&gt;messageID = message.key.id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Update Presence&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.sendPresenceUpdate(&#39;available&#39;, id) &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This lets the person/group with &lt;code&gt;id&lt;/code&gt; know whether you&#39;re online, offline, typing etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;presence&lt;/code&gt; can be one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type WAPresence = &#39;unavailable&#39; | &#39;available&#39; | &#39;composing&#39; | &#39;recording&#39; | &#39;paused&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The presence expires after about 10 seconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the multi-device version of WhatsApp -- if a desktop client is active, WA doesn&#39;t send push notifications to the device. If you would like to receive said notifications -- mark your Baileys client offline using &lt;code&gt;sock.sendPresenceUpdate(&#39;unavailable&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloading Media Messages&lt;/h2&gt; &#xA;&lt;p&gt;If you want to save the media you received&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { writeFile } from &#39;fs/promises&#39;&#xA;import { downloadMediaMessage } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;sock.ev.on(&#39;messages.upsert&#39;, async ({ messages }) =&amp;gt; {&#xA;    const m = messages[0]&#xA;&#xA;    if (!m.message) return // if there is no text or media message&#xA;    const messageType = Object.keys (m.message)[0]// get what type of message it is -- text, image, video&#xA;    // if the message is an image&#xA;    if (messageType === &#39;imageMessage&#39;) {&#xA;        // download the message&#xA;        const buffer = await downloadMediaMessage(&#xA;            m,&#xA;            &#39;buffer&#39;,&#xA;            { },&#xA;            { &#xA;                logger,&#xA;                // pass this so that baileys can request a reupload of media&#xA;                // that has been deleted&#xA;                reuploadRequest: sock.updateMediaMessage&#xA;            }&#xA;        )&#xA;        // save to file&#xA;        await writeFile(&#39;./my-download.jpeg&#39;, buffer)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; WhatsApp automatically removes old media from their servers. For the device to access said media -- a re-upload is required by another device that has it. This can be accomplished using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const updatedMediaMsg = await sock.updateMediaMessage(msg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deleting Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;const response = await sock.sendMessage(jid, { text: &#39;hello!&#39; }) // send a message&#xA;// sends a message to delete the given message&#xA;// this deletes the message for everyone&#xA;await sock.sendMessage(jid, { delete: response.key })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; deleting for oneself is supported via &lt;code&gt;chatModify&lt;/code&gt; (next section)&lt;/p&gt; &#xA;&lt;h2&gt;Modifying Chats&lt;/h2&gt; &#xA;&lt;p&gt;WA uses an encrypted form of communication to send chat/app updates. This has been implemented mostly and you can send the following updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Archive a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;await sock.chatModify({ archive: true, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mute/unmute a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// mute for 8 hours&#xA;await sock.chatModify({ mute: 8*60*60*1000 }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;// unmute&#xA;await sock.chatModify({ mute: null }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mark a chat read/unread&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;// mark it unread&#xA;await sock.chatModify({ markRead: false, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete a message for me&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.chatModify(&#xA;  { clear: { messages: [{ id: &#39;ATWYHDNNWU81732J&#39;, fromMe: true, timestamp: &#34;1654823909&#34; }] } }, &#xA;  &#39;123456@s.whatsapp.net&#39;, &#xA;  []&#xA;  )&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;await sock.chatModify({&#xA;  delete: true,&#xA;  lastMessages: [{ key: lastMsgInChat.key, messageTimestamp: lastMsgInChat.messageTimestamp }]&#xA;},&#xA;&#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pin/unpin a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.chatModify({&#xA;  pin: true // or `false` to unpin&#xA;},&#xA;&#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; if you mess up one of your updates, WA can log you out of all your devices and you&#39;ll have to log in again.&lt;/p&gt; &#xA;&lt;h2&gt;Disappearing Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;// turn on disappearing messages&#xA;await sock.sendMessage(&#xA;    jid, &#xA;    // this is 1 week in seconds -- how long you want messages to appear for&#xA;    { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL }&#xA;)&#xA;// will send as a disappearing message&#xA;await sock.sendMessage(jid, { text: &#39;hello&#39; }, { ephemeralExpiration: WA_DEFAULT_EPHEMERAL })&#xA;// turn off disappearing messages&#xA;await sock.sendMessage(&#xA;    jid, &#xA;    { disappearingMessagesInChat: false }&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To check if a given ID is on WhatsApp &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const id = &#39;123456&#39;&#xA;const [result] = await sock.onWhatsApp(id)&#xA;if (result.exists) console.log (`${id} exists on WhatsApp, as jid: ${result.jid}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To query chat history on a group or with someone TODO, if possible&lt;/li&gt; &#xA; &lt;li&gt;To get the status of some person &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const status = await sock.fetchStatus(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;status: &#34; + status)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your profile status &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const status = &#39;Hello World!&#39;&#xA;await sock.updateProfileStatus(status)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your profile name &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const name = &#39;My name&#39;&#xA;await sock.updateProfileName(name)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get the display picture of some person/group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for low res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;)&#xA;console.log(&#34;download profile picture from: &#34; + ppUrl)&#xA;// for high res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;, &#39;image&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your display picture or a group&#39;s &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;111234567890-1594482450@g.us&#39; // can be your own too&#xA;await sock.updateProfilePicture(jid, { url: &#39;./new-profile-picture.jpeg&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get someone&#39;s presence (if they&#39;re typing or online) &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// the presence update is fetched and called here&#xA;sock.ev.on(&#39;presence-update&#39;, json =&amp;gt; console.log(json))&#xA;// request updates for a chat&#xA;await sock.presenceSubscribe(&#34;xyz@s.whatsapp.net&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To block or unblock user &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;block&#34;) // Block user&#xA;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;unblock&#34;) // Unblock user&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get a business profile, such as description or category &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const profile = await sock.getBusinessProfile(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;business description: &#34; + profile.description + &#34;, category: &#34; + profile.category)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course, replace &lt;code&gt;xyz&lt;/code&gt; with an actual ID.&lt;/p&gt; &#xA;&lt;h2&gt;Groups&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To create a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// title &amp;amp; participants&#xA;const group = await sock.groupCreate(&#34;My Fab Group&#34;, [&#34;1234@s.whatsapp.net&#34;, &#34;4564@s.whatsapp.net&#34;])&#xA;console.log (&#34;created group with id: &#34; + group.gid)&#xA;sock.sendMessage(group.id, { text: &#39;hello there&#39; }) // say hello to everyone on the group&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To add/remove people to a group or demote/promote people &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// id &amp;amp; people to add to the group (will throw error if it fails)&#xA;const response = await sock.groupParticipantsUpdate(&#xA;    &#34;abcd-xyz@g.us&#34;, &#xA;    [&#34;abcd@s.whatsapp.net&#34;, &#34;efgh@s.whatsapp.net&#34;],&#xA;    &#34;add&#34; // replace this parameter with &#34;remove&#34;, &#34;demote&#34; or &#34;promote&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change the group&#39;s subject &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateSubject(&#34;abcd-xyz@g.us&#34;, &#34;New Subject!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change the group&#39;s description &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateDescription(&#34;abcd-xyz@g.us&#34;, &#34;New Description!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change group settings &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// only allow admins to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;announcement&#39;)&#xA;// allow everyone to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;not_announcement&#39;)&#xA;// allow everyone to modify the group&#39;s settings -- like display picture etc.&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;unlocked&#39;)&#xA;// only allow admins to modify the group&#39;s settings&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;locked&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To leave a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupLeave(&#34;abcd-xyz@g.us&#34;) // (will throw error if it fails)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get the invite code for a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupInviteCode(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To revoke the invite code in a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupRevokeInvite(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;New group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To query the metadata of a group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const metadata = await sock.groupMetadata(&#34;abcd-xyz@g.us&#34;) &#xA;console.log(metadata.id + &#34;, title: &#34; + metadata.subject + &#34;, description: &#34; + metadata.desc)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To join the group using the invitation code &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInvite(&#34;xxx&#34;)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/li&gt; &#xA; &lt;li&gt;To get group info by invite code &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupGetInviteInfo(&#34;xxx&#34;)&#xA;console.log(&#34;group information: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To join the group using groupInviteMessage &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInviteV4(&#34;abcd@s.whatsapp.net&#34;, groupInviteMessage)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Broadcast Lists &amp;amp; Stories&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; messages currently cannot be sent to broadcast lists from the MD version.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can send messages to broadcast lists the same way you send messages to groups &amp;amp; individual chats.&lt;/li&gt; &#xA; &lt;li&gt;Right now, WA Web does not support creating broadcast lists, but you can still delete them.&lt;/li&gt; &#xA; &lt;li&gt;Broadcast IDs are in the format &lt;code&gt;12345678@broadcast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To query a broadcast list&#39;s recipients &amp;amp; name: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const bList = await sock.getBroadcastListInfo(&#34;1234@broadcast&#34;)&#xA;console.log (`list name: ${bList.name}, recps: ${bList.recipients}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writing Custom Functionality&lt;/h2&gt; &#xA;&lt;p&gt;Baileys is written with custom functionality in mind. Instead of forking the project &amp;amp; re-writing the internals, you can simply write your own extensions.&lt;/p&gt; &#xA;&lt;p&gt;First, enable the logging of unhandled messages from WhatsApp by setting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const sock = makeWASocket({&#xA;    logger: P({ level: &#39;debug&#39; }),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable you to see all sorts of messages WhatsApp sends in the console.&lt;/p&gt; &#xA;&lt;p&gt;Some examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Functionality to track the battery percentage of your phone. You enable logging and you&#39;ll see a message about your battery pop up in the console: &lt;code&gt;{&#34;level&#34;:10,&#34;fromMe&#34;:false,&#34;frame&#34;:{&#34;tag&#34;:&#34;ib&#34;,&#34;attrs&#34;:{&#34;from&#34;:&#34;@s.whatsapp.net&#34;},&#34;content&#34;:[{&#34;tag&#34;:&#34;edge_routing&#34;,&#34;attrs&#34;:{},&#34;content&#34;:[{&#34;tag&#34;:&#34;routing_info&#34;,&#34;attrs&#34;:{},&#34;content&#34;:{&#34;type&#34;:&#34;Buffer&#34;,&#34;data&#34;:[8,2,8,5]}}]}]},&#34;msg&#34;:&#34;communication&#34;} &lt;/code&gt;&lt;/p&gt; &lt;p&gt;The &#34;frame&#34; is what the message received is, it has three components:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tag&lt;/code&gt; -- what this frame is about (eg. message will have &#34;message&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;attrs&lt;/code&gt; -- a string key-value pair with some metadata (contains ID of the message usually)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;content&lt;/code&gt; -- the actual data (eg. a message node will have the actual message content in it)&lt;/li&gt; &#xA;   &lt;li&gt;read more about this format &lt;a href=&#34;https://raw.githubusercontent.com/WhiskeySockets/Baileys/master/src/WABinary/readme.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;You can register a callback for an event using the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for any message with tag &#39;edge_routing&#39;&#xA;sock.ws.on(`CB:edge_routing`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39; and id attribute = abcd&#xA;sock.ws.on(`CB:edge_routing,id:abcd`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39;, id attribute = abcd &amp;amp; first content node routing_info&#xA;sock.ws.on(`CB:edge_routing,id:abcd,routing_info`, (node: BinaryNode) =&amp;gt; { })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;This library was originally a project for &lt;strong&gt;CS-2362 at Ashoka University&lt;/strong&gt; and is in no way affiliated with WhatsApp. Use at your own discretion. Do not spam people with this.&lt;/p&gt; &#xA;&lt;p&gt;Also, this repo is now licenced under GPL 3 since it uses &lt;a href=&#34;https://git.questbook.io/backend/service-coderunner/-/merge_requests/1&#34;&gt;libsignal-node&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>UnblockNeteaseMusic/server</title>
    <updated>2023-04-24T01:36:48Z</updated>
    <id>tag:github.com,2023-04-24:/UnblockNeteaseMusic/server</id>
    <link href="https://github.com/UnblockNeteaseMusic/server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Revive unavailable songs for Netease Cloud Music (Refactored &amp; Enhanced version)&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/26399680/47980314-0e3f1700-e102-11e8-8857-e3436ecc8beb.png&#34; alt=&#34;logo&#34; width=&#34;140&#34; height=&#34;140&#34; align=&#34;right&#34;&gt; &#xA;&lt;h1&gt;UnblockNeteaseMusic&lt;/h1&gt; &#xA;&lt;p&gt;解锁网易云音乐客户端变灰歌曲&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2FUnblockNeteaseMusic%2Fserver?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2FUnblockNeteaseMusic%2Fserver.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;特性&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;支援多个音源，替换变灰歌曲链接 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;支援的完整音源清单可以见下方〈音源清单〉处。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;为请求增加 &lt;code&gt;X-Real-IP&lt;/code&gt; 参数解锁海外限制，支持指定网易云服务器 IP，支持设置上游 HTTP / HTTPS 代理&lt;/li&gt; &#xA; &lt;li&gt;完整的流量代理功能 (HTTP / HTTPS)，可直接作为系统代理 (同时支持 PAC)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;运行&lt;/h2&gt; &#xA;&lt;h3&gt;直接打开可运行文件&lt;/h3&gt; &#xA;&lt;p&gt;去右侧的 Releases 找到最新版本，然后在下方的 Assets 找到符合你系统架构的可运行文件。下载回来后点两下即可使用。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;macOS 因为签名问题，暂时不提供可运行文件。请先按照其他做法使用。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;NPM 安装&lt;/h3&gt; &#xA;&lt;h4&gt;安装成依赖&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @unblockneteasemusic/server&#xA;yarn add @unblockneteasemusic/server # for Yarn users&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;用 NPX 运行&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -p @unblockneteasemusic/server unblockneteasemusic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;注册成 Windows 服务&lt;/h3&gt; &#xA;&lt;h4&gt;安装服务&lt;/h4&gt; &#xA;&lt;p&gt;直接 &lt;code&gt;clone&lt;/code&gt; 或下载本项目，在项目根目录运行 &lt;code&gt;node ./nw.js&lt;/code&gt;。会有弹窗，直接确定即可。如果有安全管家等软件可能会阻止，直接允许即可。运行成功后可在电脑服务中看到该服务。&lt;/p&gt; &#xA;&lt;h4&gt;配置&lt;/h4&gt; &#xA;&lt;p&gt;http 代理使用 &lt;code&gt;127.0.0.1&lt;/code&gt;，端口默认使用 &lt;code&gt;8080&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;p&gt;如果想要添加启动参数和环境变量，请在项目根目录中的 &lt;code&gt;nw.js&lt;/code&gt; 中配置 &lt;code&gt;scriptOptions&lt;/code&gt; 和 &lt;code&gt;env&lt;/code&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;如果想要卸载已安装的服务，请再次运行 &lt;code&gt;node ./nw.js&lt;/code&gt;。&lt;/p&gt; &#xA; &lt;p&gt;安装服务后，会在项目根目录生成 &lt;code&gt;daemon&lt;/code&gt; 文件夹。可在这里查看日志。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Docker 作法&lt;/h3&gt; &#xA;&lt;h4&gt;Docker Hub&lt;/h4&gt; &#xA;&lt;p&gt;见 &lt;a href=&#34;https://hub.docker.com/repository/docker/pan93412/unblock-netease-music-enhanced&#34;&gt;pan93412/unblock-netease-music-enhanced&lt;/a&gt; 。&lt;code&gt;latest&lt;/code&gt; 是从 &lt;code&gt;enhanced&lt;/code&gt; 组建的最新版本；&lt;code&gt;release&lt;/code&gt; 是最新 tag 的版本。&lt;/p&gt; &#xA;&lt;p&gt;直接运行 &lt;code&gt;pan93412/unblock-netease-music-enhanced&lt;/code&gt; 的命令如下：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run pan93412/unblock-netease-music-enhanced&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若要更新 UnblockNeteaseMusic，请运行以下命令后重新 &lt;code&gt;run&lt;/code&gt;：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull pan93412/unblock-netease-music-enhanced&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若要指定环境变量，您可以往 &lt;code&gt;docker run&lt;/code&gt; 传入 &lt;code&gt;-e&lt;/code&gt;，就像这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run -e JSON_LOG=true -e LOG_LEVEL=debug pan93412/unblock-netease-music-enhanced&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;若要传入配置参数，只要在 &lt;code&gt;docker run&lt;/code&gt; 的 image 之后传入参数即可：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run pan93412/unblock-netease-music-enhanced -o bilibili -p 1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;自行编译&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/UnblockNeteaseMusic/server.git UnblockNeteaseMusic&#xA;cd UnblockNeteaseMusic&#xA;docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;直接使用 Repo 最新版本&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/UnblockNeteaseMusic/server.git UnblockNeteaseMusic&#xA;cd UnblockNeteaseMusic&#xA;node app.js # 建议使用 screen / tmux 把 app.js 挂后台&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;更新：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;编译最新的 package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn&#xA;yarn build&#xA;node app.js # 即可使用 repo 的最新开发内容&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;采用（而不编译）最新的 package&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn&#xA;DEVELOPMENT=true yarn node app.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;BetterNCM 一键安装器&lt;/h3&gt; &#xA;&lt;p&gt;请移步至 &lt;a href=&#34;https://github.com/ReviveUnblockNCMInstaller/RevivedUnblockInstaller&#34;&gt;RevivedUnblockInstaller&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;Android Xposed 模块&lt;/h3&gt; &#xA;&lt;p&gt;请移步至 &lt;a href=&#34;https://github.com/nining377/dolby_beta&#34;&gt;杜比大喇叭 β 版&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;OpenWrt LuCI 插件&lt;/h3&gt; &#xA;&lt;p&gt;请移步至 &lt;a href=&#34;https://github.com/UnblockNeteaseMusic/luci-app-unblockneteasemusic&#34;&gt;luci-app-unblockneteasemusic&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;配置参数&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ unblockneteasemusic -h&#xA;usage: unblockneteasemusic [-v] [-p http[:https]] [-a address] [-u url] [-f host]&#xA;                           [-o source [source ...]] [-t token] [-e url] [-s]&#xA;                           [-h]&#xA;&#xA;optional arguments:&#xA;  -v, --version                   output the version number&#xA;  -p port, --port http[:https]    specify server port&#xA;  -a address, --address address   specify server host&#xA;  -u url, --proxy-url url         request through upstream proxy&#xA;  -f host, --force-host host      force the netease server ip&#xA;  -o source [source ...], --match-order source [source ...]&#xA;                                  set priority of sources&#xA;  -t token, --token token         set up proxy authentication&#xA;  -e url, --endpoint url          replace virtual endpoint with public host&#xA;  -s, --strict                    enable proxy limitation&#xA;  -c, --cnrelay host:port         Mainland China relay to get music url&#xA;  -h, --help                      output usage information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;音源清单&lt;/h3&gt; &#xA;&lt;p&gt;将有兴趣的音源代号用 &lt;code&gt;-o&lt;/code&gt; 传入 UNM 即可使用，像这样：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node app.js -o bilibili ytdlp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;名称&lt;/th&gt; &#xA;   &lt;th&gt;代号&lt;/th&gt; &#xA;   &lt;th&gt;默认启用&lt;/th&gt; &#xA;   &lt;th&gt;注意事项&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QQ 音乐&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;qq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;需要准备自己的 &lt;code&gt;QQ_COOKIE&lt;/code&gt;（请参阅下方〈环境变量〉处）。必须使用 QQ 登录。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;酷狗音乐&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kugou&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;酷我音乐&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;kuwo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;咪咕音乐&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;migu&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;需要准备自己的 &lt;code&gt;MIGU_COOKIE&lt;/code&gt;（请参阅下方〈环境变量〉处）。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JOOX&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;joox&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;需要准备自己的 &lt;code&gt;JOOX_COOKIE&lt;/code&gt;（请参阅下方〈环境变量〉处）。似乎有严格地区限制。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YouTube（纯 JS 解析方式）&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;youtube&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;需要 Google 认定的&lt;strong&gt;非中国大陆区域&lt;/strong&gt; IP 地址。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;yt-download&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ytdownload&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;似乎不能使用&lt;/strong&gt;。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YouTube（通过 &lt;code&gt;youtube-dl&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;youtubedl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;需要自行安装 &lt;code&gt;youtube-dl&lt;/code&gt;。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YouTube（通过 &lt;code&gt;yt-dlp&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ytdlp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;需要自行安装 &lt;code&gt;yt-dlp&lt;/code&gt;（&lt;code&gt;youtube-dl&lt;/code&gt; 仍在活跃维护的 fork）。&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;B 站音乐&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;bilibili&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;第三方网易云 API&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;pyncmd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;环境变量&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;变量名称&lt;/th&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;示例&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_FLAC&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;激活无损音质获取&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_FLAC=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_LOCAL_VIP&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;激活本地黑胶 VIP，可选值：&lt;code&gt;true&lt;/code&gt;（等同于 CVIP）、&lt;code&gt;cvip&lt;/code&gt; 和 &lt;code&gt;svip&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_LOCAL_VIP=svip&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LOCAL_VIP_UID&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;仅对这些 UID 激活本地黑胶 VIP，默认为对全部用户生效&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOCAL_VIP_UID=123456789,1234,123456&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ENABLE_HTTPDNS&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;激活故障的 Netease HTTPDNS 查询（不建议）&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ENABLE_HTTPDNS=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BLOCK_ADS&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;屏蔽应用内部分广告&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;BLOCK_ADS=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DISABLE_UPGRADE_CHECK&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;禁用更新检测&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DISABLE_UPGRADE_CHECK=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DEVELOPMENT&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;激活开发模式。需要自己用 &lt;code&gt;yarn&lt;/code&gt; 安装依赖 (dependencies)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;DEVELOPMENT=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FOLLOW_SOURCE_ORDER&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;严格按照配置音源的顺序进行查询&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;FOLLOW_SOURCE_ORDER=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JSON_LOG&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;输出机器可读的 JSON 记录格式&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;JSON_LOG=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NO_CACHE&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;停用 cache&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_CACHE=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MIN_BR&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;允许的最低源音质，小于该值将被替换&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;MIN_BR=320000&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SELECT_MAX_BR&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;选择所有音源中的最高码率替换音频&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SELECT_MAX_BR=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LOG_LEVEL&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;日志输出等级。请见〈日志等级〉部分。&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOG_LEVEL=debug&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LOG_FILE&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;从 Pino 端设置日志输出的文件位置。也可以用 &lt;code&gt;*sh&lt;/code&gt; 的输出重导向功能 (&lt;code&gt;node app.js &amp;gt;&amp;gt; app.log&lt;/code&gt;) 代替&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LOG_FILE=app.log&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JOOX_COOKIE&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;JOOX 音源的 wmid 和 session_key cookie&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;JOOX_COOKIE=&#34;wmid=&amp;lt;your_wmid&amp;gt;; session_key=&amp;lt;your_session_key&amp;gt;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MIGU_COOKIE&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;咪咕音源的 aversionid cookie&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;MIGU_COOKIE=&#34;&amp;lt;your_aversionid&amp;gt;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;QQ_COOKIE&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;QQ 音源的 uin 和 qm_keyst cookie&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;QQ_COOKIE=&#34;uin=&amp;lt;your_uin&amp;gt;; qm_keyst=&amp;lt;your_qm_keyst&amp;gt;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;YOUTUBE_KEY&lt;/td&gt; &#xA;   &lt;td&gt;str&lt;/td&gt; &#xA;   &lt;td&gt;Youtube 音源的 Data API v3 Key&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;YOUTUBE_KEY=&#34;&amp;lt;your_data_api_key&amp;gt;&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIGN_CERT&lt;/td&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;自定义证书文件&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SIGN_CERT=&#34;./server.crt&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SIGN_KEY&lt;/td&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;自定义密钥文件&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SIGN_KEY=&#34;./server.key&#34;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SEARCH_ALBUM&lt;/td&gt; &#xA;   &lt;td&gt;bool&lt;/td&gt; &#xA;   &lt;td&gt;在其他音源搜索歌曲时携带专辑名称（默认搜索条件 &lt;code&gt;歌曲名 - 歌手&lt;/code&gt;，启用后搜索条件 &lt;code&gt;歌曲名 - 歌手 专辑名&lt;/code&gt;）&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;SEARCH_ALBUM=true&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;日志等级 (&lt;code&gt;LOG_LEVEL&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;这些是常用的值：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;: 输出所有记录（调试用）&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;info&lt;/code&gt;: 只输出一般资讯（默认值）&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;error&lt;/code&gt;: 只在出严重问题时输出&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;详细请参见 &lt;a href=&#34;https://github.com/pinojs/pino/raw/master/docs/api.md#level-string&#34;&gt;Pino 对此的说明&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;h2&gt;使用&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;警告&lt;/strong&gt;：本项目不提供在线 demo，请不要轻易信任使用他人提供的公开代理服务，以免发生安全问题&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;若将服务部署到公网，强烈建议使用严格模式 (此模式下仅放行网易云音乐所属域名的请求) &lt;code&gt;-s&lt;/code&gt; 限制代理范围 (需使用 PAC 或 hosts)，&lt;del&gt;或激活 Proxy Authentication &lt;code&gt;-t &amp;lt;name&amp;gt;:&amp;lt;password&amp;gt;&lt;/code&gt; 设置代理用户名密码&lt;/del&gt; (目前密码认证在 Windows 客户端设置和 macOS 系统设置都无法生效，请不要使用)，以防代理被他人滥用&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;支持 Windows 客户端，UWP 客户端，Android 客户端，Linux 客户端 (1.2 版本以上需要自签证书 MITM，启动客户端需要增加 &lt;code&gt;--ignore-certificate-errors&lt;/code&gt; 参数)，macOS 客户端 (726 版本以上需要自签证书)，iOS 客户端 (配置 https endpoint 或使用自签证书) 和网页版 (需要自签证书，需要脚本配合)&lt;/p&gt; &#xA;&lt;p&gt;目前除 UWP 外其它客户端均优先请求 HTTPS 接口，&lt;del&gt;默认配置下本代理对网易云所有 HTTPS API 连接返回空数据，促使客户端降级使用 HTTP 接口&lt;/del&gt; (新版 Linux 客户端和 macOS 客户端已无法降级)&lt;/p&gt; &#xA;&lt;p&gt;因 UWP 应用存在网络隔离，限制流量发送到本机，若使用的代理在 localhost，或修改的 hosts 指向 localhost，需为 &#34;网易云音乐 UWP&#34; 手工开启 loopback 才能使用，请以&lt;strong&gt;管理员身份&lt;/strong&gt;运行命令&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;checknetisolation loopbackexempt -a -n=&#34;1F8B0F94.122165AE053F_j2p0p5q0044a6&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;方法 1. 修改 hosts&lt;/h3&gt; &#xA;&lt;p&gt;向 hosts 文件添加两条规则&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hosts&#34;&gt;&amp;lt;Server IP&amp;gt; music.163.com&#xA;&amp;lt;Server IP&amp;gt; interface.music.163.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;使用此方法必须监听 80 端口 &lt;code&gt;-p 80&lt;/code&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;若在本机运行程序&lt;/strong&gt;，请指定网易云服务器 IP &lt;code&gt;-f xxx.xxx.xxx.xxx&lt;/code&gt; (可在修改 hosts 前通过 &lt;code&gt;ping music.163.com&lt;/code&gt; 获得) &lt;strong&gt;或&lt;/strong&gt; 使用代理 &lt;code&gt;-u http(s)://xxx.xxx.xxx.xxx:xxx&lt;/code&gt;，以防请求死循环&lt;/p&gt; &#xA; &lt;p&gt;&lt;strong&gt;Android 客户端下修改 hosts 无法直接使用&lt;/strong&gt;，原因和解决方法详见&lt;a href=&#34;https://jixun.moe/post/netease-android-hosts-bypass/&#34;&gt;云音乐安卓又搞事啦&lt;/a&gt;，&lt;a href=&#34;https://jixun.moe/post/android-block-netease-without-root/&#34;&gt;安卓免 root 绕过网易云音乐 IP 限制&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;方法 2. 设置代理&lt;/h3&gt; &#xA;&lt;p&gt;PAC 自动代理脚本地址 &lt;code&gt;http://&amp;lt;Server Name:PORT&amp;gt;/proxy.pac&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;全局代理地址填写服务器地址和端口号即可&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;平台&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;基础设置&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;设置 &amp;gt; 工具 &amp;gt; 自定义代理 (客户端内)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UWP&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Windows 设置 &amp;gt; 网络和 Internet &amp;gt; 代理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Linux&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;系统设置 &amp;gt; 网络 &amp;gt; 网络代理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;macOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;系统偏好设置 &amp;gt; 网络 &amp;gt; 高级 &amp;gt; 代理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;WLAN &amp;gt; 修改网络 &amp;gt; 高级选项 &amp;gt; 代理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;iOS&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;无线局域网 &amp;gt; HTTP 代理 &amp;gt; 配置代理&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;代理工具和方法有很多请自行探索，欢迎在 issues 讨论&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;✳ 方法 3. 调用接口&lt;/h3&gt; &#xA;&lt;p&gt;作为依赖库使用&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const match = require(&#39;@unblockneteasemusic/server&#39;);&#xA;&#xA;/**&#xA; * Set proxy or hosts if needed&#xA; */&#xA;global.proxy = require(&#39;url&#39;).parse(&#39;http://127.0.0.1:1080&#39;);&#xA;global.hosts = { &#39;i.y.qq.com&#39;: &#39;59.37.96.220&#39; };&#xA;&#xA;/**&#xA; * Find matching song from other platforms&#xA; * @param {Number} id netease song id&#xA; * @param {Array&amp;lt;String&amp;gt;||undefined} source support qq, xiami, baidu, kugou, kuwo, migu, joox&#xA; * @return {Promise&amp;lt;Object&amp;gt;}&#xA; */&#xA;match(418602084, [&#39;qq&#39;, &#39;kuwo&#39;, &#39;migu&#39;]).then(console.log);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;設定 HTTPS 憑證&lt;/h3&gt; &#xA;&lt;p&gt;新版的 NeteaseMusic 需要 HTTPS 才能使用。证书的设置教学可参阅&lt;a href=&#34;https://github.com/UnblockNeteaseMusic/server/discussions/426&#34;&gt;《安裝 UNM 的 HTTPS 憑證》&lt;/a&gt;一文。&lt;/p&gt; &#xA;&lt;h2&gt;效果&lt;/h2&gt; &#xA;&lt;h3&gt;Windows 客户端&lt;/h3&gt; &#xA;&lt;img alt=&#34;Windows 客户端&#34; src=&#34;https://user-images.githubusercontent.com/26399680/60316017-87de8a80-999b-11e9-9381-16d40efbe7f6.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;UWP 客户端&lt;/h3&gt; &#xA;&lt;img alt=&#34;UWP 客户端&#34; src=&#34;https://user-images.githubusercontent.com/26399680/52215123-5a028780-28ce-11e9-8491-08c4c5dac3b4.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;Linux 客户端&lt;/h3&gt; &#xA;&lt;img alt=&#34;Linux 客户端&#34; src=&#34;https://user-images.githubusercontent.com/26399680/60316169-18b56600-999c-11e9-8ae5-5cd168b0edae.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;macOS 客户端&lt;/h3&gt; &#xA;&lt;img alt=&#34;macOS 客户端&#34; src=&#34;https://user-images.githubusercontent.com/26399680/52196035-51418f80-2895-11e9-8f33-78a631cdf151.png&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h3&gt;Android 客户端&lt;/h3&gt; &#xA;&lt;img alt=&#34;Android 客户端&#34; src=&#34;https://user-images.githubusercontent.com/26399680/57972549-eabd2900-79ce-11e9-8fef-95cb60906298.png&#34; width=&#34;50%&#34;&gt; &#xA;&lt;h3&gt;iOS 客户端&lt;/h3&gt; &#xA;&lt;img alt=&#34;iOS 客户端&#34; src=&#34;https://user-images.githubusercontent.com/26399680/57972440-f90a4580-79cc-11e9-8dbf-6150ee299b9c.jpg&#34; width=&#34;50%&#34;&gt; &#xA;&lt;h2&gt;致谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢大佬们为逆向 eapi 所做的努力&lt;/p&gt; &#xA;&lt;p&gt;使用的其它平台音源 API 出自&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trazyn/ieaseMusic&#34;&gt;trazyn/ieaseMusic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/listen1/listen1_chrome_extension&#34;&gt;listen1/listen1_chrome_extension&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;向所有同类项目致敬&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EraserKing/CloudMusicGear&#34;&gt;EraserKing/CloudMusicGear&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/EraserKing/Unblock163MusicClient&#34;&gt;EraserKing/Unblock163MusicClient&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ITJesse/UnblockNeteaseMusic/&#34;&gt;ITJesse/UnblockNeteaseMusic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/bin456789/Unblock163MusicClient-Xposed&#34;&gt;bin456789/Unblock163MusicClient-Xposed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/YiuChoi/Unlock163Music&#34;&gt;YiuChoi/Unlock163Music&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yi-ji/NeteaseMusicAbroad&#34;&gt;yi-ji/NeteaseMusicAbroad&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/stomakun/NeteaseReverseLadder/&#34;&gt;stomakun/NeteaseReverseLadder&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fengjueming/unblock-NetEaseMusic&#34;&gt;fengjueming/unblock-NetEaseMusic&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/acgotaku/NetEaseMusicWorld&#34;&gt;acgotaku/NetEaseMusicWorld&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mengskysama/163-Cloud-Music-Unlock&#34;&gt;mengskysama/163-Cloud-Music-Unlock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/azureplus/163-music-unlock&#34;&gt;azureplus/163-music-unlock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/typcn/163music-mac-client-unlock&#34;&gt;typcn/163music-mac-client-unlock&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;许可&lt;/h2&gt; &#xA;&lt;p&gt;(Original project) &lt;a href=&#34;https://github.com/nondanee/UnblockNeteaseMusic&#34;&gt;nondanee/UnblockNeteaseMusic&lt;/a&gt;: &lt;a href=&#34;https://github.com/nondanee/UnblockNeteaseMusic/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;(This project) &lt;a href=&#34;https://github.com/UnblockNeteaseMusic/server&#34;&gt;UnblockNeteaseMusic/server&lt;/a&gt;: &lt;a href=&#34;https://spdx.org/licenses/LGPL-3.0-only.html&#34;&gt;LGPL-3.0-only&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2FUnblockNeteaseMusic%2Fserver?ref=badge_large&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2FUnblockNeteaseMusic%2Fserver.svg?type=large&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>