<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-02T01:35:19Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>servetgulnaroglu/pacman-js</title>
    <updated>2022-12-02T01:35:19Z</updated>
    <id>tag:github.com,2022-12-02:/servetgulnaroglu/pacman-js</id>
    <link href="https://github.com/servetgulnaroglu/pacman-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>OneBitCodeBlog/onebitlife</title>
    <updated>2022-12-02T01:35:19Z</updated>
    <id>tag:github.com,2022-12-02:/OneBitCodeBlog/onebitlife</id>
    <link href="https://github.com/OneBitCodeBlog/onebitlife" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Aplicativo desenvolvido na Semana Mobile do OneBitCode&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/29529757/204114760-f461dab9-1e8c-434d-a8d2-7f8bc03f0549.jpg&#34; alt=&#34;semobile-bannernotion&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Aplicativo desenvolvido durante a Semana Mobile do OneBitCode&lt;/h1&gt; &#xA;&lt;h2&gt;‚öõÔ∏è Sobre a Semana Mobile do OneBitCode&lt;/h2&gt; &#xA;&lt;p&gt;Evento do OneBitCode, que acontece do dia 28/11 at√© 04/12, onde voc√™ vai poder criar o seu primeiro projeto Mobile com React Native e dar o primeiro passo em uma das √°reas de alta remunera√ß√£o da Programa√ß√£o! Acesse o cronograma do evento e todas as informa√ß√µes importantes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lp.onebitcode.com/semana-mobile-onebitcode/?utm_source=fs&#34;&gt;https://lp.onebitcode.com/semana-mobile-onebitcode/?utm_source=fs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìñ Descri√ß√£o&lt;/h2&gt; &#xA;&lt;p&gt;O aplicativo &lt;strong&gt;OneBitLife&lt;/strong&gt; √© um projeto desenvolvido durante a &lt;strong&gt;Semana Mobile do OneBitCode&lt;/strong&gt;. O objetivo dele √© fazer um gerenciamento de tarefas, que ajudam o usu√°rio a fixar h√°bitos melhores e mais saud√°veis em sua vida. De uma forma bem visual, o BIT, nosso rob√¥, alerta o usu√°rio caso ele n√£o esteja cumprindo suas tarefas da forma que foi planejada. O rob√¥ vai mudando de humor e a barrinha que indica que ele est√° progredindo, vai diminuindo, at√© que ele pode morrer, caso as tarefas n√£o sejam cumpridas.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/29529757/204116603-3c3297be-95b9-479c-9964-2b52ec186a01.png&#34; alt=&#34;appOBL&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Funcionalidades&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Criar os h√°bitos que deseja melhorar&lt;/li&gt; &#xA; &lt;li&gt;Criar notifica√ß√µes&lt;/li&gt; &#xA; &lt;li&gt;Editar os h√°bitos&lt;/li&gt; &#xA; &lt;li&gt;Excluir os h√°bitos&lt;/li&gt; &#xA; &lt;li&gt;Marcar a tarefa como conclu√≠da&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üì° Tecnologias utilizadas&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img align=&#34;left&#34; alt=&#34;NodeJs&#34; height=&#34;30&#34; width=&#34;30&#34; src=&#34;https://raw.githubusercontent.com/devicons/devicon/master/icons/nodejs/nodejs-original.svg?sanitize=true&#34;&gt; &#xA; &lt;img align=&#34;left&#34; alt=&#34;Javascript&#34; height=&#34;30&#34; width=&#34;30&#34; src=&#34;https://cdn.jsdelivr.net/gh/devicons/devicon/icons/javascript/javascript-original.svg?sanitize=true&#34;&gt; &#xA; &lt;img align=&#34;left&#34; alt=&#34;React&#34; height=&#34;30&#34; width=&#34;30&#34; src=&#34;https://cdn.jsdelivr.net/gh/devicons/devicon/icons/react/react-original.svg?sanitize=true&#34;&gt; &#xA; &lt;img align=&#34;left&#34; alt=&#34;SQLite&#34; height=&#34;30&#34; width=&#34;30&#34; src=&#34;https://cdn.jsdelivr.net/gh/devicons/devicon/icons/sqlite/sqlite-original.svg?sanitize=true&#34;&gt; &#xA; &lt;img align=&#34;left&#34; alt=&#34;SQLite&#34; height=&#34;30&#34; width=&#34;30&#34; src=&#34;https://github.com/devicons/devicon/raw/master/icons/androidstudio/androidstudio-original.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt;&#xA;&lt;br&gt; &#xA;&lt;h2&gt;‚è≥ Inicializa√ß√£o&lt;/h2&gt; &#xA;&lt;p&gt;Esse projeto foi desenvolvido em ambiente &lt;strong&gt;Linux&lt;/strong&gt;, utilizando o &lt;strong&gt;Ubuntu 22&lt;/strong&gt; e as tecnologias citadas anteriormente. Utilizamos o &lt;strong&gt;Expo&lt;/strong&gt;, como fremework do &lt;strong&gt;React Native&lt;/strong&gt; e o &lt;strong&gt;Visual Studio Code&lt;/strong&gt; como editor de c√≥digos no desenvolvimento. Para fazer a pr√©-visualiza√ß√£o do projeto, utilizamos o &lt;strong&gt;Android Studio&lt;/strong&gt;. Caso voc√™ utilize outro sistema operacional, a configura√ß√£o inicial do projeto pode ser um pouco diferente, por isso sugerimos que voc√™ acesse os links indicados abaixo: &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Preparamos 4 tutoriais para voc√™ aprender a preparar seu ambiente no Linux, no Windows e 2 v√≠deos de como come√ßar com o React Native:&lt;/p&gt; &#xA;&lt;p&gt;Preparando seu ambiente no Linux: &lt;a href=&#34;https://www.youtube.com/watch?v=s833JrzkfII&#34;&gt;https://www.youtube.com/watch?v=s833JrzkfII&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Preparando seu ambiente no Windows: &lt;a href=&#34;https://www.youtube.com/watch?v=ZUni0cMtozI&amp;amp;t=300s&#34;&gt;https://www.youtube.com/watch?v=ZUni0cMtozI&amp;amp;t=300s&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Primeiros passos com React Native - Parte 1: &lt;a href=&#34;https://www.youtube.com/watch?v=JKg_WtEBFwc&amp;amp;t=1s&#34;&gt;https://www.youtube.com/watch?v=JKg_WtEBFwc&amp;amp;t=1s&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Primeiros passos com React Native - Parte 2: &lt;a href=&#34;https://www.youtube.com/watch?v=ke-98gORAMw&amp;amp;t=1s&#34;&gt;https://www.youtube.com/watch?v=ke-98gORAMw&amp;amp;t=1s&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Temos tamb√©m a documenta√ß√£o de acompanhamento que possui instru√ß√µes para as instala√ß√µes.&lt;/p&gt; &#xA;&lt;p&gt;A prepara√ß√£o do ambiente consiste em instalar as tecnologias citadas anteriormente de acordo com seu sistema operacional.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Voc√™ pode come√ßar instalando essas depend√™ncias (os comandos abaixo est√£o considerando sistema operacional Linux) &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;O cURL precisa ser instalado, caso ainda n√£o esteja no seu sistema - Download: &lt;a href=&#34;https://curl.se/download.html&#34;&gt;https://curl.se/download.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install curl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Para instalar o Node.js, acesse: &lt;a href=&#34;https://nodejs.org/pt-br/download/package-manager/&#34;&gt;https://nodejs.org/pt-br/download/package-manager/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL https://deb.nodesource.com/setup_16.x | sudo -E bash -&#xA;&#xA;sudo apt-get install -y nodejs&#xA;&#xA;node -v (Verificar a vers√£o do Node.js e se ele foi instalado corretamente)&#xA;npm -v (Verificar a vers√£o do npm e se ele est√° instalado)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; Instala√ß√£o do expo-cli - Documenta√ß√£o: https://docs.expo.dev/get-started/installation/ &#xA;&lt;br&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g expo-cli&#xA;&#xA;expo --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;git (provavelmente voc√™ j√° tem instalado) - Se n√£o tiver instalado: &lt;a href=&#34;https://git-scm.com/book/pt-br/v2/Come%C3%A7ando-Instalando-o-Git&#34;&gt;https://git-scm.com/book/pt-br/v2/Come√ßando-Instalando-o-Git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt-get install git&#xA;&#xA;git --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Android Studio, como emulador do App. Voc√™ pode baixar por esse link: &lt;a href=&#34;https://developer.android.com/studio&#34;&gt;https://developer.android.com/studio&lt;/a&gt; . Aqui voc√™ vai encontrar as vers√µes para todos os sistemas operacionais.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;üîÆ Implementa√ß√µes futuras&lt;/h2&gt; &#xA;&lt;p&gt;O projeto ter√° novas funcionalidades e os alunos do nosso novo curso Desenvolvimento Mobile com React Native ter√£o acesso a ele!&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;ü§µü§µ‚Äç‚ôÄÔ∏è Colaboradores&lt;/h2&gt; &#xA;&lt;p&gt;Os colaboradores desse projeto s√£o os Instrutores da OneBitCode: &lt;strong&gt;Lucas Queiroga&lt;/strong&gt;, &lt;strong&gt;Juliana Conde&lt;/strong&gt; e &lt;strong&gt;Isaac Pontes&lt;/strong&gt;. Al√©m de todos que participaram do evento ‚ù§Ô∏è&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;üîé Status do Projeto&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Status-Em%20Desenvolvimento-green&#34; alt=&#34;Badge em Desenvolvimento&#34;&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;üìë Refer√™ncias&lt;/h2&gt; &#xA;&lt;p&gt;Visite o site da OneBitCode para conhecer os cursos e projetos &lt;a href=&#34;https://onebitcode.com/lp/&#34;&gt;https://onebitcode.com/lp/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Siga nossa p√°gina no instagram: @onebitcode&lt;/p&gt; &#xA;&lt;p&gt;Se inscreva no nosso canal do YouTube: &lt;a href=&#34;https://www.youtube.com/c/OneBitCode&#34;&gt;https://www.youtube.com/c/OneBitCode&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Acesse a p√°gina do evento: &lt;a href=&#34;https://lp.onebitcode.com/semana-mobile-onebitcode/?utm_source=fs&#34;&gt;https://lp.onebitcode.com/semana-mobile-onebitcode/?utm_source=fs&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>airbnb/lottie-web</title>
    <updated>2022-12-02T01:35:19Z</updated>
    <id>tag:github.com,2022-12-02:/airbnb/lottie-web</id>
    <link href="https://github.com/airbnb/lottie-web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Render After Effects animations natively on Web, Android and iOS, and React Native. http://airbnb.io/lottie/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lottie for Web, &lt;a href=&#34;https://github.com/airbnb/lottie-android&#34;&gt;Android&lt;/a&gt;, &lt;a href=&#34;https://github.com/airbnb/lottie-ios&#34;&gt;iOS&lt;/a&gt;, &lt;a href=&#34;https://github.com/airbnb/lottie-react-native&#34;&gt;React Native&lt;/a&gt;, and &lt;a href=&#34;https://aka.ms/lottie&#34;&gt;Windows&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Lottie is a mobile library for Web, and iOS that parses &lt;a href=&#34;http://www.adobe.com/products/aftereffects.html&#34;&gt;Adobe After Effects&lt;/a&gt; animations exported as json with &lt;a href=&#34;https://github.com/airbnb/lottie-web&#34;&gt;Bodymovin&lt;/a&gt; and renders them natively on mobile!&lt;/p&gt; &#xA;&lt;p&gt;For the first time, designers can create &lt;strong&gt;and ship&lt;/strong&gt; beautiful animations without an engineer painstakingly recreating it by hand. They say a picture is worth 1,000 words so here are 13,000:&lt;/p&gt; &#xA;&lt;h1&gt;View documentation, FAQ, help, examples, and more at &lt;a href=&#34;http://airbnb.io/lottie/&#34;&gt;airbnb.io/lottie&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-web/master/gifs/Example1.gif&#34; alt=&#34;Example1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-web/master/gifs/Example2.gif&#34; alt=&#34;Example2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-web/master/gifs/Example3.gif&#34; alt=&#34;Example3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-web/master/gifs/Community%202_3.gif&#34; alt=&#34;Community&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/airbnb/lottie-web/master/gifs/Example4.gif&#34; alt=&#34;Example4&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Plugin installation&lt;/h1&gt; &#xA;&lt;h3&gt;Option 1 (Recommended):&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Download it from from aescripts + aeplugins:&lt;/strong&gt; &lt;a href=&#34;http://aescripts.com/bodymovin/&#34;&gt;http://aescripts.com/bodymovin/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Option 2:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Or get it from the adobe store&lt;/strong&gt; &lt;a href=&#34;https://exchange.adobe.com/creativecloud.details.12557.html&#34;&gt;https://exchange.adobe.com/creativecloud.details.12557.html&lt;/a&gt; CC 2014 and up.&lt;/p&gt; &#xA;&lt;h2&gt;Other installation options:&lt;/h2&gt; &#xA;&lt;h3&gt;Option 3:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;download the ZIP from the repo.&lt;/li&gt; &#xA; &lt;li&gt;Extract content and get the .zxp file from &#39;/build/extension&#39;&lt;/li&gt; &#xA; &lt;li&gt;Use the &lt;a href=&#34;http://aescripts.com/learn/zxp-installer/&#34;&gt;ZXP installer&lt;/a&gt; from aescripts.com.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Option 4:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Close After Effects&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Extract the zipped file on &lt;code&gt;build/extension/bodymovin.zxp&lt;/code&gt; to the adobe CEP folder:&lt;br&gt; WINDOWS:&lt;br&gt; &lt;code&gt;C:\Program Files (x86)\Common Files\Adobe\CEP\extensions or&lt;/code&gt;&lt;br&gt; &lt;code&gt;C:\&amp;lt;username&amp;gt;\AppData\Roaming\Adobe\CEP\extensions&lt;/code&gt;&lt;br&gt; MAC:&lt;br&gt; &lt;code&gt;/Library/Application\ Support/Adobe/CEP/extensions/bodymovin&lt;/code&gt;&lt;br&gt; (you can open the terminal and type:&lt;br&gt; &lt;code&gt;$ cp -R YOURUNZIPEDFOLDERPATH/extension /Library/Application\ Support/Adobe/CEP/extensions/bodymovin&lt;/code&gt;&lt;br&gt; then type:&lt;br&gt; &lt;code&gt;$ ls /Library/Application\ Support/Adobe/CEP/extensions/bodymovin&lt;/code&gt;&lt;br&gt; to make sure it was copied correctly type)&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit the registry key:&lt;br&gt; WINDOWS:&lt;br&gt; open the registry key &lt;code&gt;HKEY_CURRENT_USER/Software/Adobe/CSXS.6&lt;/code&gt; and add a key named &lt;code&gt;PlayerDebugMode&lt;/code&gt;, of type String, and value &lt;code&gt;1&lt;/code&gt;.&lt;br&gt; MAC:&lt;br&gt; open the file &lt;code&gt;~/Library/Preferences/com.adobe.CSXS.6.plist&lt;/code&gt; and add a row with key &lt;code&gt;PlayerDebugMode&lt;/code&gt;, of type String, and value &lt;code&gt;1&lt;/code&gt;.&lt;br&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Option 5:&lt;/h3&gt; &#xA;&lt;p&gt;Install the zxp manually following the instructions here: &lt;a href=&#34;https://helpx.adobe.com/x-productkb/global/installingextensionsandaddons.html&#34;&gt;https://helpx.adobe.com/x-productkb/global/installingextensionsandaddons.html&lt;/a&gt; Skip directly to &#34;Install third-party extensions&#34;&lt;/p&gt; &#xA;&lt;h3&gt;Option 6:&lt;/h3&gt; &#xA;&lt;p&gt;Install with &lt;a href=&#34;http://brew.sh&#34;&gt;Homebrew&lt;/a&gt;-&lt;a href=&#34;https://github.com/danielbayley/homebrew-adobe&#34;&gt;adobe&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew tap danielbayley/adobe&#xA;brew cask install lottie&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;After installing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Go to Edit &amp;gt; Preferences &amp;gt; Scripting &amp;amp; Expressions... &amp;gt; and check on &#34;Allow Scripts to Write Files and Access Network&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac:&lt;/strong&gt; Go to Adobe After Effects &amp;gt; Preferences &amp;gt; Scripting &amp;amp; Expressions... &amp;gt; and check on &#34;Allow Scripts to Write Files and Access Network&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Old Versions&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Windows:&lt;/strong&gt; Go to Edit &amp;gt; Preferences &amp;gt; General &amp;gt; and check on &#34;Allow Scripts to Write Files and Access Network&#34;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mac:&lt;/strong&gt; Go to Adobe After Effects &amp;gt; Preferences &amp;gt; General &amp;gt; and check on &#34;Allow Scripts to Write Files and Access Network&#34;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;HTML player installation&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# with npm&#xA;npm install lottie-web&#xA;&#xA;# with bower&#xA;bower install bodymovin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can use the script file from here: &lt;a href=&#34;https://cdnjs.com/libraries/bodymovin&#34;&gt;https://cdnjs.com/libraries/bodymovin&lt;/a&gt; Or get it directly from the AE plugin clicking on Get Player&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codepen.io/airnan/project/editor/ZeNONO/&#34;&gt;See a basic implementation here.&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://codepen.io/collection/nVYWZR/&#34;&gt;See examples on codepen.&lt;/a&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=5XMUJdjI0L8&#34;&gt;Here&#39;s&lt;/a&gt; a video tutorial explaining how to export a basic animation and load it in an html page &lt;br&gt;&lt;/p&gt; &#xA;&lt;h3&gt;After Effects&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open your AE project and select the bodymovin extension on Window &amp;gt; Extensions &amp;gt; bodymovin&lt;/li&gt; &#xA; &lt;li&gt;A Panel will open with a Compositions tab listing all of your Project Compositions.&lt;/li&gt; &#xA; &lt;li&gt;Select the composition you want to export.&lt;/li&gt; &#xA; &lt;li&gt;Select a Destination Folder.&lt;/li&gt; &#xA; &lt;li&gt;Click Render&lt;/li&gt; &#xA; &lt;li&gt;look for the exported json file (if you had images or AI layers on your animation, there will be an images folder with the exported files)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;HTML&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;get the lottie.js file from the build/player/ folder for the latest build&lt;/li&gt; &#xA; &lt;li&gt;include the .js file on your html (remember to gzip it for production)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;js/lottie.js&#34; type=&#34;text/javascript&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can call lottie.loadAnimation() to start an animation. It takes an object as a unique param with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;animationData: an Object with the exported animation data. &lt;strong&gt;Note:&lt;/strong&gt; If your animation contains repeaters and you plan to call loadAnimation multiple times with the same animation, please deep clone the object before passing it (see &lt;a href=&#34;https://github.com/airbnb/lottie-web/issues/1159&#34;&gt;#1159&lt;/a&gt; and &lt;a href=&#34;https://github.com/airbnb/lottie-web/issues/2151&#34;&gt;#2151&lt;/a&gt;.)&lt;/li&gt; &#xA; &lt;li&gt;path: the relative path to the animation object. (animationData and path are mutually exclusive)&lt;/li&gt; &#xA; &lt;li&gt;loop: true / false / number&lt;/li&gt; &#xA; &lt;li&gt;autoplay: true / false it will start playing as soon as it is ready&lt;/li&gt; &#xA; &lt;li&gt;name: animation name for future reference&lt;/li&gt; &#xA; &lt;li&gt;renderer: &#39;svg&#39; / &#39;canvas&#39; / &#39;html&#39; to set the renderer&lt;/li&gt; &#xA; &lt;li&gt;container: the dom element on which to render the animation&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It returns the animation instance you can control with play, pause, setSpeed, etc.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;lottie.loadAnimation({&#xA;  container: element, // the dom element that will contain the animation&#xA;  renderer: &#39;svg&#39;,&#xA;  loop: true,&#xA;  autoplay: true,&#xA;  path: &#39;data.json&#39; // the path to the animation json&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Composition Settings:&lt;/h4&gt; &#xA;&lt;p&gt;Check this wiki page for an explanation for each setting. &lt;a href=&#34;https://github.com/airbnb/lottie-web/wiki/Composition-Settings&#34;&gt;https://github.com/airbnb/lottie-web/wiki/Composition-Settings&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Animation instances have these main methods:&lt;/p&gt; &#xA;&lt;h3&gt;play&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;stop&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;pause&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;setSpeed(speed)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;speed&lt;/code&gt;: 1 is normal speed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;goToAndStop(value, isFrame)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt;: numeric value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isFrame&lt;/code&gt;: defines if first argument is a time based value or a frame based (default false).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;goToAndPlay(value, isFrame)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;value&lt;/code&gt;: numeric value.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;isFrame&lt;/code&gt;: defines if first argument is a time based value or a frame based (default false).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;setDirection(direction)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;direction&lt;/code&gt;: 1 is forward, -1 is reverse.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;playSegments(segments, forceFlag)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;segments&lt;/code&gt;: array. Can contain 2 numeric values that will be used as first and last frame of the animation. Or can contain a sequence of arrays each with 2 numeric values.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;forceFlag&lt;/code&gt;: boolean. If set to false, it will wait until the current segment is complete. If true, it will update values immediately.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;setSubframe(useSubFrames)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;useSubFrames&lt;/code&gt;: If false, it will respect the original AE fps. If true, it will update on every requestAnimationFrame with intermediate values. Default is true.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;destroy()&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;getDuration(inFrames)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;inFrames&lt;/code&gt;: If true, returns duration in frames, if false, in seconds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Additional methods:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;updateDocumentData -- updates a text layer&#39;s data &lt;a href=&#34;https://github.com/airbnb/lottie-web/wiki/TextLayer.updateDocumentData&#34;&gt;More Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Lottie has several global methods that will affect all animations:&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;lottie.play()&lt;/strong&gt; -- with 1 optional parameter &lt;strong&gt;name&lt;/strong&gt; to target a specific animation &lt;br&gt; &lt;strong&gt;lottie.stop()&lt;/strong&gt; -- with 1 optional parameter &lt;strong&gt;name&lt;/strong&gt; to target a specific animation &lt;br&gt; &lt;strong&gt;lottie.goToAndStop(value, isFrame, name)&lt;/strong&gt; -- Moves an animation with the specified name playback to the defined time. If name is omitted, moves all animation instances.&lt;br&gt; &lt;strong&gt;lottie.setSpeed()&lt;/strong&gt; -- first argument speed (1 is normal speed) -- with 1 optional parameter &lt;strong&gt;name&lt;/strong&gt; to target a specific animation &lt;br&gt; &lt;strong&gt;lottie.setDirection()&lt;/strong&gt; -- first argument direction (1 is normal direction.) -- with 1 optional parameter &lt;strong&gt;name&lt;/strong&gt; to target a specific animation &lt;br&gt; &lt;strong&gt;lottie.searchAnimations()&lt;/strong&gt; -- looks for elements with class &#34;lottie&#34; or &#34;bodymovin&#34; &lt;br&gt; &lt;strong&gt;lottie.loadAnimation()&lt;/strong&gt; -- Explained above. returns an animation instance to control individually. &lt;br&gt; &lt;strong&gt;lottie.destroy(name)&lt;/strong&gt; -- Destroys an animation with the specified name. If name is omitted, destroys all animation instances. The DOM element will be emptied.&lt;br&gt; &lt;strong&gt;lottie.registerAnimation()&lt;/strong&gt; -- you can register an element directly with registerAnimation. It must have the &#34;data-animation-path&#34; attribute pointing at the data.json url&lt;br&gt; &lt;strong&gt;lottie.getRegisteredAnimations()&lt;/strong&gt; -- returns all animations instances&lt;br&gt; &lt;strong&gt;lottie.setQuality()&lt;/strong&gt; -- default &#39;high&#39;, set &#39;high&#39;,&#39;medium&#39;,&#39;low&#39;, or a number &amp;gt; 1 to improve player performance. In some animations as low as 2 won&#39;t show any difference.&lt;br&gt; &lt;strong&gt;lottie.setLocationHref()&lt;/strong&gt; -- Sets the relative location from where svg elements with ids are referenced. It&#39;s useful when you experience mask issues in Safari.&lt;br&gt; &lt;strong&gt;lottie.freeze()&lt;/strong&gt; -- Freezes all playing animations or animations that will be loaded&lt;br&gt; &lt;strong&gt;lottie.unfreeze()&lt;/strong&gt; -- Unfreezes all animations&lt;br&gt; &lt;strong&gt;lottie.inBrowser()&lt;/strong&gt; -- true if the library is being run in a browser&lt;br&gt; &lt;strong&gt;lottie.resize()&lt;/strong&gt; -- Resizes all animation instances&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;onComplete&lt;/li&gt; &#xA; &lt;li&gt;onLoopComplete&lt;/li&gt; &#xA; &lt;li&gt;onEnterFrame&lt;/li&gt; &#xA; &lt;li&gt;onSegmentStart&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;you can also use addEventListener with the following events:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;complete&lt;/li&gt; &#xA; &lt;li&gt;loopComplete&lt;/li&gt; &#xA; &lt;li&gt;enterFrame&lt;/li&gt; &#xA; &lt;li&gt;segmentStart&lt;/li&gt; &#xA; &lt;li&gt;config_ready (when initial config is done)&lt;/li&gt; &#xA; &lt;li&gt;data_ready (when all parts of the animation have been loaded)&lt;/li&gt; &#xA; &lt;li&gt;data_failed (when part of the animation can not be loaded)&lt;/li&gt; &#xA; &lt;li&gt;loaded_images (when all image loads have either succeeded or errored)&lt;/li&gt; &#xA; &lt;li&gt;DOMLoaded (when elements have been added to the DOM)&lt;/li&gt; &#xA; &lt;li&gt;destroy&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Other loading options&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;if you want to use an existing canvas to draw, you can pass an extra object: &#39;rendererSettings&#39; with the following configuration:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;lottie.loadAnimation({&#xA;  container: element, // the dom element&#xA;  renderer: &#39;svg&#39;,&#xA;  loop: true,&#xA;  autoplay: true,&#xA;  animationData: animationData, // the animation data&#xA;  // ...or if your animation contains repeaters:&#xA;  // animationData: cloneDeep(animationData), // e.g. lodash.clonedeep&#xA;  rendererSettings: {&#xA;    context: canvasContext, // the canvas context, only support &#34;2d&#34; context&#xA;    preserveAspectRatio: &#39;xMinYMin slice&#39;, // Supports the same options as the svg element&#39;s preserveAspectRatio property&#xA;    clearCanvas: false,&#xA;    progressiveLoad: false, // Boolean, only svg renderer, loads dom elements when needed. Might speed up initialization for large number of elements.&#xA;    hideOnTransparent: true, //Boolean, only svg renderer, hides elements when opacity reaches 0 (defaults to true)&#xA;    className: &#39;some-css-class-name&#39;,&#xA;    id: &#39;some-id&#39;,&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Doing this you will have to handle the canvas clearing after each frame &lt;br&gt; Another way to load animations is adding specific attributes to a dom element. You have to include a div and set it&#39;s class to &#34;lottie&#34;. If you do it before page load, it will automatically search for all tags with the class &#34;lottie&#34;. Or you can call &lt;code&gt;lottie.searchAnimations()&lt;/code&gt; after page load and it will search all elements with the class &#34;lottie&#34;. &lt;br&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add the data.json to a folder relative to the html&lt;/li&gt; &#xA; &lt;li&gt;Create a div that will contain the animation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Required&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A class called &#34;lottie&#34;&lt;/li&gt; &#xA;   &lt;li&gt;A &#34;data-animation-path&#34; attribute with relative path to the data.json&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Optional&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A &#34;data-anim-loop&#34; attribute&lt;/li&gt; &#xA;   &lt;li&gt;A &#34;data-name&#34; attribute to specify a name to target play controls specifically&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt; &amp;lt;div style=&#34;width:1067px;height:600px&#34;  class=&#34;lottie&#34; data-animation-path=&#34;animation/&#34; data-anim-loop=&#34;true&#34; data-name=&#34;ninja&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p&gt;You can preview or take an svg snapshot of the animation to use as poster. After you render your animation, you can take a snapshot of any frame in the animation and save it to your disk. I recommend to pass the svg through an svg optimizer like &lt;a href=&#34;https://jakearchibald.github.io/svgomg/&#34;&gt;https://jakearchibald.github.io/svgomg/&lt;/a&gt; and play around with their settings.&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Recommendations&lt;/h2&gt; &#xA;&lt;h3&gt;Files&lt;/h3&gt; &#xA;&lt;p&gt;If you have any images or AI layers that you haven&#39;t converted to shapes (I recommend that you convert them, so they get exported as vectors, right click each layer and do: &#34;Create shapes from Vector Layers&#34;), they will be saved to an images folder relative to the destination json folder. Beware not to overwrite an existing folder on that same location.&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;This is real time rendering. Although it is pretty optimized, it always helps if you keep your AE project to what is necessary&lt;br&gt; More optimizations are on their way, but try not to use huge shapes in AE only to mask a small part of it.&lt;br&gt; Too many nodes will also affect performance.&lt;/p&gt; &#xA;&lt;h3&gt;Help&lt;/h3&gt; &#xA;&lt;p&gt;If you have any animations that don&#39;t work or want me to export them, don&#39;t hesitate to write. &lt;br&gt; I&#39;m really interested in seeing what kind of problems the plugin has. &lt;br&gt; my email is &lt;strong&gt;&lt;a href=&#34;mailto:hernantorrisi@gmail.com&#34;&gt;hernantorrisi@gmail.com&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;AE Feature Support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The script supports precomps, shapes, solids, images, null objects, texts&lt;/li&gt; &#xA; &lt;li&gt;It supports masks and inverted masks. Maybe other modes will come but it has a huge performance hit.&lt;/li&gt; &#xA; &lt;li&gt;It supports time remapping&lt;/li&gt; &#xA; &lt;li&gt;The script supports shapes, rectangles, ellipses and stars.&lt;/li&gt; &#xA; &lt;li&gt;Expressions. Check the wiki page for &lt;a href=&#34;https://github.com/bodymovin/bodymovin/wiki/Expressions&#34;&gt;more info.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Not supported: image sequences, videos and audio are not supported&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No negative layer stretching&lt;/strong&gt;! No idea why, but stretching a layer messes with all the data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;bower install&lt;/code&gt; first &lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to modify the parser or the player, there are some gulp commands that can simplify the task&lt;/li&gt; &#xA; &lt;li&gt;look at the great animations exported on codepen &lt;a href=&#34;http://codepen.io/collection/nVYWZR/&#34;&gt;See examples on codepen.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;gzipping the animation jsons and the player have a huge reduction on the filesize. I recommend doing it if you use it for a project.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issues&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For missing mask in Safari browser, please call lottie.setLocationHref(locationHref) before animation is generated. It usually caused by usage of base tag in html. (see above for description of setLocationHref)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;h3&gt;Code Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute. [&lt;a href=&#34;https://raw.githubusercontent.com/airbnb/lottie-web/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/airbnb/lottie-web/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Financial Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Become a financial contributor and help us sustain our community. [&lt;a href=&#34;https://opencollective.com/lottie/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;h4&gt;Individuals&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/lottie&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/individuals.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Organizations&lt;/h4&gt; &#xA;&lt;p&gt;Support this project with your organization. Your logo will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/lottie/contribute&#34;&gt;Contribute&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/lottie/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/lottie/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/lottie/organization/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>