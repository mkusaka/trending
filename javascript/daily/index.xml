<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-10T01:31:39Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>midudev/tailwind-animations</title>
    <updated>2024-02-10T01:31:39Z</updated>
    <id>tag:github.com,2024-02-10:/midudev/tailwind-animations</id>
    <link href="https://github.com/midudev/tailwind-animations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Easy peasy animations for your Tailwind project&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Awesome Tailwind Animations&lt;/h1&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midudev/tailwind-animations/main/README.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-en-red.svg?sanitize=true&#34; alt=&#34;en&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/midudev/tailwind-animations/main/README.es.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/lang-es-yellow.svg?sanitize=true&#34; alt=&#34;es&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/midudev/tailwind-animations&#34; alt=&#34;GitHub stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/forks/midudev/tailwind-animations&#34; alt=&#34;GitHub Forks&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/midudev/tailwind-animations&#34; alt=&#34;GitHub PRs&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/midudev/tailwind-animations&#34; alt=&#34;GitHub issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/midudev/tailwind-animations&#34; alt=&#34;GitHub Contributors&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/midudev/tailwind-animations/main/lib/imgs/web.jpg&#34; alt=&#34;web&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/Tailwind%20CSS-3.4.1-blue?style=for-the-badge&amp;amp;logo=tailwind-css&#34; alt=&#34;Tailwind CSS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Astro-4.3.3-orange?style=for-the-badge&amp;amp;logo=astro&#34; alt=&#34;Astro&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;Get your animations easily done with only Tailwind CSS classes.&lt;/p&gt; &#xA; &lt;p&gt;Visit the &lt;a href=&#34;https://tailwindcss-animations.vercel.app/&#34;&gt;website&lt;/a&gt; to get more information.&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Installation &lt;span&gt;ðŸ“–&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;Package install&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Install the package with your favorite package manager:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;npm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install @midudev/tailwind-animations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pnpm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ pnpm install @midudev/tailwind-animations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;yarn&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn add @midudev/tailwind-animations&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Plugin Implementation&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Use the plugin in your Tailwind CSS project:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// tailwind.config.mjs&#xA;import animations from &#39;@midudev/tailwind-animations&#39;&#xA;&#xA;export default {&#xA;  // rest of the options&#xA;  plugins: [&#xA;    animations&#xA;  ],&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage &lt;span&gt;âš™&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Here are some simple examples of how to use this plugin and its animations:&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;animate-fade-in&#34;&amp;gt;&#xA;  Fade in box&#xA;&amp;lt;/div&amp;gt;&#xA;&#xA;&amp;lt;div class=&#34;animate-slide-in-bottom animate-delay-300 animate-duration-slow&#34;&amp;gt;&#xA;  Slow animation after 300ms to slide in from bottom&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors ðŸ‘‘&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/midudev/tailwind-animations/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=midudev/tailwind-animations&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>snyk-workshops/EH-Patch-Todo-App</title>
    <updated>2024-02-10T01:31:39Z</updated>
    <id>tag:github.com,2024-02-10:/snyk-workshops/EH-Patch-Todo-App</id>
    <link href="https://github.com/snyk-workshops/EH-Patch-Todo-App" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Goof - Snyk&#39;s vulnerable demo app&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snyk.io/test/github/snyk/goof&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/snyk/goof/badge.svg?style=flat-square&#34; alt=&#34;Known Vulnerabilities&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A vulnerable Node.js demo application, based on the &lt;a href=&#34;http://dreamerslab.com/blog/en/write-a-todo-list-with-express-and-mongodb/&#34;&gt;Dreamers Lab tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;This vulnerable app includes the following capabilities to experiment with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snyk-workshops/EH-Patch-Todo-App/main/#exploiting-the-vulnerabilities&#34;&gt;Exploitable packages&lt;/a&gt; with known vulnerabilities&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snyk-workshops/EH-Patch-Todo-App/main/#docker-image-scanning&#34;&gt;Docker Image Scanning&lt;/a&gt; for base images with known vulnerabilities in system libraries&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/snyk-workshops/EH-Patch-Todo-App/main/#runtime-alerts&#34;&gt;Runtime alerts&lt;/a&gt; for detecting an invocation of vulnerable functions in open source dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can run the MongoDB server individually via Docker, such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -p 27017:27017 mongo:3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running with docker-compose&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up --build&#xA;docker-compose down&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exploiting the vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;This app uses npm dependencies holding known vulnerabilities, as well as insecure code that introduces code-level vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;exploits/&lt;/code&gt; directory includes a series of steps to demonstrate each one.&lt;/p&gt; &#xA;&lt;h3&gt;Vulnerabilities in open source dependencies&lt;/h3&gt; &#xA;&lt;p&gt;Here are the exploitable vulnerable packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/vuln/npm:mongoose:20160116&#34;&gt;Mongoose - Buffer Memory Exposure&lt;/a&gt; - requires a version &amp;lt;= Node.js 8. For the exploit demo purposes, one can update the Dockerfile &lt;code&gt;node&lt;/code&gt; base image to use &lt;code&gt;FROM node:6-stretch&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/vuln/npm:st:20140206&#34;&gt;st - Directory Traversal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/vuln/npm:ms:20151024&#34;&gt;ms - ReDoS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snyk.io/vuln/npm:marked:20150520&#34;&gt;marked - XSS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Vulnerabilities in code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open Redirect&lt;/li&gt; &#xA; &lt;li&gt;NoSQL Injection&lt;/li&gt; &#xA; &lt;li&gt;Code Injection&lt;/li&gt; &#xA; &lt;li&gt;Command execution&lt;/li&gt; &#xA; &lt;li&gt;Cross-site Scripting (XSS)&lt;/li&gt; &#xA; &lt;li&gt;Information exposure via Hardcoded values in code&lt;/li&gt; &#xA; &lt;li&gt;Security misconfiguration exposes server information&lt;/li&gt; &#xA; &lt;li&gt;Insecure protocol (HTTP) communication&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Code injection&lt;/h4&gt; &#xA;&lt;p&gt;The page at &lt;code&gt;/account_details&lt;/code&gt; is rendered as an Handlebars view.&lt;/p&gt; &#xA;&lt;p&gt;The same view is used for both the GET request which shows the account details, as well as the form itself for a POST request which updates the account details. A so-called Server-side Rendering.&lt;/p&gt; &#xA;&lt;p&gt;The form is completely functional. The way it works is, it receives the profile information from the &lt;code&gt;req.body&lt;/code&gt; and passes it, as-is to the template. This however means, that the attacker is able to control a variable that flows directly from the request into the view template library.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;d think that what&#39;s the worst that can happen because we use a validation to confirm the expected input, however the validation doesn&#39;t take into account a new field that can be added to the object, such as &lt;code&gt;layout&lt;/code&gt;, which when passed to a template language, could lead to Local File Inclusion (Path Traversal) vulnerabilities. Here is a proof-of-concept showing it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X &#39;POST&#39; --cookie c.txt --cookie-jar c.txt -H &#39;Content-Type: application/json&#39; --data-binary &#39;{&#34;username&#34;: &#34;admin@snyk.io&#34;, &#34;password&#34;: &#34;SuperSecretPassword&#34;}&#39; &#39;http://localhost:3001/login&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X &#39;POST&#39; --cookie c.txt --cookie-jar c.txt -H &#39;Content-Type: application/json&#39; --data-binary &#39;{&#34;email&#34;: &#34;admin@snyk.io&#34;, &#34;firstname&#34;: &#34;admin&#34;, &#34;lastname&#34;: &#34;admin&#34;, &#34;country&#34;: &#34;IL&#34;, &#34;phone&#34;: &#34;+972551234123&#34;,  &#34;layout&#34;: &#34;./../package.json&#34;}&#39; &#39;http://localhost:3001/account_details&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Actually, there&#39;s even another vulnerability in this code. The &lt;code&gt;validator&lt;/code&gt; library that we use has several known regular expression denial of service vulnerabilities. One of them, is associated with the email regex, which if validated with the &lt;code&gt;{allow_display_name: true}&lt;/code&gt; option then we can trigger a denial of service for this route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X &#39;POST&#39; -H &#39;Content-Type: application/json&#39; --data-binary &#34;{\&#34;email\&#34;: \&#34;`seq -s &#34;&#34; -f &#34;&amp;lt;&#34; 100000`\&#34;}&#34; &#39;http://localhost:3001/account_details&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;validator.rtrim()&lt;/code&gt; sanitizer is also vulnerable, and we can use this to create a similar denial of service attack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -X &#39;POST&#39; -H &#39;Content-Type: application/json&#39; --data-binary &#34;{\&#34;email\&#34;: \&#34;someone@example.com\&#34;, \&#34;country\&#34;: \&#34;nop\&#34;, \&#34;phone\&#34;: \&#34;0501234123\&#34;, \&#34;lastname\&#34;: \&#34;nop\&#34;, \&#34;firstname\&#34;: \&#34;`node -e &#39;console.log(&#34; &#34;.repeat(100000) + &#34;!&#34;)&#39;`\&#34;}&#34; &#39;http://localhost:3001/account_details&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NoSQL injection&lt;/h4&gt; &#xA;&lt;p&gt;A POST request to &lt;code&gt;/login&lt;/code&gt; will allow for authentication and signing-in to the system as an administrator user. It works by exposing &lt;code&gt;loginHandler&lt;/code&gt; as a controller in &lt;code&gt;routes/index.js&lt;/code&gt; and uses a MongoDB database and the &lt;code&gt;User.find()&lt;/code&gt; query to look up the user&#39;s details (email as a username and password). One issue is that it indeed stores passwords in plaintext and not hashing them. However, there are other issues in play here.&lt;/p&gt; &#xA;&lt;p&gt;We can send a request with an incorrect password to see that we get a failed attempt&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;{&#34;username&#34;:&#34;admin@snyk.io&#34;, &#34;password&#34;:&#34;WrongPassword&#34;}&#39; | http --json $GOOF_HOST/login -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And another request, as denoted with the following JSON request to sign-in as the admin user works as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;{&#34;username&#34;:&#34;admin@snyk.io&#34;, &#34;password&#34;:&#34;SuperSecretPassword&#34;}&#39; | http --json $GOOF_HOST/login -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, what if the password wasn&#39;t a string? what if it was an object? Why would an object be harmful or even considered an issue? Consider the following request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#39;{&#34;username&#34;: &#34;admin@snyk.io&#34;, &#34;password&#34;: {&#34;$gt&#34;: &#34;&#34;}}&#39; | http --json $GOOF_HOST/login -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We know the username, and we pass on what seems to be an object of some sort. That object structure is passed as-is to the &lt;code&gt;password&lt;/code&gt; property and has a specific meaning to MongoDB - it uses the &lt;code&gt;$gt&lt;/code&gt; operation which stands for &lt;code&gt;greater than&lt;/code&gt;. So, we in essence tell MongoDB to match that username with any record that has a password that is greater than &lt;code&gt;empty string&lt;/code&gt; which is bound to hit a record. This introduces the NoSQL Injection vector.&lt;/p&gt; &#xA;&lt;h4&gt;Open redirect&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;/admin&lt;/code&gt; view introduces a &lt;code&gt;redirectPage&lt;/code&gt; query path, as follows in the admin view:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;input type=&#34;hidden&#34; name=&#34;redirectPage&#34; value=&#34;&amp;lt;%- redirectPage %&amp;gt;&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;One fault here is that the &lt;code&gt;redirectPage&lt;/code&gt; is rendered as raw HTML and not properly escaped, because it uses &lt;code&gt;&amp;lt;%- &amp;gt;&lt;/code&gt; instead of &lt;code&gt;&amp;lt;%= &amp;gt;&lt;/code&gt;. That itself, introduces a Cross-site Scripting (XSS) vulnerability via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3001/login?redirectPage=&#34;&amp;gt;&amp;lt;script&amp;gt;alert(1)&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To exploit the open redirect, simply provide a URL such as &lt;code&gt;redirectPage=https://google.com&lt;/code&gt; which exploits the fact that the code doesn&#39;t enforce local URLs in &lt;code&gt;index.js:72&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Hardcoded values - session information&lt;/h4&gt; &#xA;&lt;p&gt;The application initializes a cookie-based session on &lt;code&gt;app.js:40&lt;/code&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;app.use(session({&#xA;  secret: &#39;keyboard cat&#39;,&#xA;  name: &#39;connect.sid&#39;,&#xA;  cookie: { secure: true }&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see, the session &lt;code&gt;secret&lt;/code&gt; used to sign the session is a hardcoded sensitive information inside the code.&lt;/p&gt; &#xA;&lt;p&gt;First attempt to fix it, can be to move it out to a config file such as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = {&#xA;    cookieSecret: `keyboard cat`&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And then require the configuration file and use it to initialize the session. However, that still maintains the secret information inside another file, and Snyk Code will warn you about it.&lt;/p&gt; &#xA;&lt;p&gt;Another case we can discuss here in session management, is that the cookie setting is initialized with &lt;code&gt;secure: true&lt;/code&gt; which means it will only be transmitted over HTTPS connections. However, there&#39;s no &lt;code&gt;httpOnly&lt;/code&gt; flag set to true, which means that the default false value of it makes the cookie accessible via JavaScript. Snyk Code highlights this potential security misconfiguration so we can fix it. We can note that Snyk Code shows this as a quality information, and not as a security error.&lt;/p&gt; &#xA;&lt;p&gt;Snyk Code will also find hardcoded secrets in source code that isn&#39;t part of the application logic, such as &lt;code&gt;tests/&lt;/code&gt; or &lt;code&gt;examples/&lt;/code&gt; folders. We have a case of that in this application with the &lt;code&gt;tests/authentication.component.spec.js&lt;/code&gt; file. In the finding, Snyk Code will tag it as &lt;code&gt;InTest&lt;/code&gt;, &lt;code&gt;Tests&lt;/code&gt;, or &lt;code&gt;Mock&lt;/code&gt;, which help us easily triage it and indeed ignore this finding as it isn&#39;t actually a case of information exposure.&lt;/p&gt; &#xA;&lt;h2&gt;Docker Image Scanning&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Dockerfile&lt;/code&gt; makes use of a base image (&lt;code&gt;node:6-stretch&lt;/code&gt;) that is known to have system libraries with vulnerabilities.&lt;/p&gt; &#xA;&lt;p&gt;To scan the image for vulnerabilities, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk test --docker node:6-stretch --file=Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To monitor this image and receive alerts with Snyk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snyk monitor --docker node:6-stretch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Runtime Alerts&lt;/h2&gt; &#xA;&lt;p&gt;Snyk provides the ability to monitor application runtime behavior and detect an invocation of a function is known to be vulnerable and used within open source dependencies that the application makes use of.&lt;/p&gt; &#xA;&lt;p&gt;The agent is installed and initialized in &lt;a href=&#34;https://raw.githubusercontent.com/snyk-workshops/EH-Patch-Todo-App/main/app.js#L5&#34;&gt;app.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the agent to report back to your snyk account on the vulnerabilities it detected it needs to know which project on Snyk to associate with the monitoring. Due to that, we need to provide it with the project id through an environment variable &lt;code&gt;SNYK_PROJECT_ID&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To run the Node.js app with runtime monitoring:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;SNYK_PROJECT_ID=&amp;lt;PROJECT_ID&amp;gt; npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;** The app will continue to work normally even if it&#39;s not provided a project id&lt;/p&gt; &#xA;&lt;h2&gt;Fixing the issues&lt;/h2&gt; &#xA;&lt;p&gt;To find these flaws in this application (and in your own apps), run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g snyk&#xA;snyk wizard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this application, the default &lt;code&gt;snyk wizard&lt;/code&gt; answers will fix all the issues. When the wizard is done, restart the application and run the exploits again to confirm they are fixed.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TheOdinProject/curriculum</title>
    <updated>2024-02-10T01:31:39Z</updated>
    <id>tag:github.com,2024-02-10:/TheOdinProject/curriculum</id>
    <link href="https://github.com/TheOdinProject/curriculum" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The open curriculum for learning web development&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Odin Project Curriculum&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.theodinproject.com/&#34;&gt;The Odin Project&lt;/a&gt; (TOP) is an open-source curriculum for learning full-stack web development. Our curriculum is divided into distinct courses, each covering the subject language in depth. Each course contains a listing of lessons interspersed with multiple projects. These projects give users the opportunity to practice what they are learning, thereby reinforcing and solidifying the theoretical knowledge learned in the lessons. Completed projects may then be included in the user&#39;s portfolio.&lt;/p&gt; &#xA;&lt;p&gt;Lessons are structured through a combination of original written content and a compilation of carefully curated resources from the web. This is where the contributing happens!&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the actual lesson files used on our website. For the actual TOP app that pulls in this lesson content and contains our front-end and back-end code, please go to the &lt;a href=&#34;https://github.com/TheOdinProject/theodinproject&#34;&gt;main TOP repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our community can be found on the &lt;a href=&#34;https://discord.gg/fbFCkYabZB&#34;&gt;TOP Discord server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The Odin Project depends on open-source contributions to improve, grow, and thrive. We welcome contributors of all experience levels and backgrounds to help maintain this awesome curriculum and community. If you would like to contribute to our curriculum, be sure to thoroughly read our &lt;a href=&#34;https://github.com/TheOdinProject/.github/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some of the things you can do to contribute to our curriculum include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Correct typos and other grammar errors.&lt;/li&gt; &#xA; &lt;li&gt;Rewrite parts of existing lessons to make them clearer and easier to understand.&lt;/li&gt; &#xA; &lt;li&gt;Fix broken links.&lt;/li&gt; &#xA; &lt;li&gt;Add new resource links you think would make a lesson better.&lt;/li&gt; &#xA; &lt;li&gt;Work on entirely new lessons after getting approval.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Happy Coding!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;* See &lt;a href=&#34;https://github.com/TheOdinProject/curriculum/raw/main/license.md&#34;&gt;license.md&lt;/a&gt; for usage details.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Created by &lt;a href=&#34;http://www.github.com/eriktrautman&#34;&gt;Erik Trautman&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>