<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-06-22T01:33:31Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sonnylazuardi/cursor-talk-to-figma-mcp</title>
    <updated>2025-06-22T01:33:31Z</updated>
    <id>tag:github.com,2025-06-22:/sonnylazuardi/cursor-talk-to-figma-mcp</id>
    <link href="https://github.com/sonnylazuardi/cursor-talk-to-figma-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cursor Talk To Figma MCP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cursor Talk to Figma MCP&lt;/h1&gt; &#xA;&lt;p&gt;This project implements a Model Context Protocol (MCP) integration between Cursor AI and Figma, allowing Cursor to communicate with Figma for reading designs and modifying them programmatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/129a14d2-ed73-470f-9a4c-2240b2a4885c&#34;&gt;https://github.com/user-attachments/assets/129a14d2-ed73-470f-9a4c-2240b2a4885c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/talk_to_figma_mcp/&lt;/code&gt; - TypeScript MCP server for Figma integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/cursor_mcp_plugin/&lt;/code&gt; - Figma plugin for communicating with Cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/socket.ts&lt;/code&gt; - WebSocket server that facilitates communication between the MCP server and Figma plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Bun if you haven&#39;t already:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://bun.sh/install | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run setup, this will also install MCP in your Cursor&#39;s active project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start the Websocket server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;MCP server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bunx cursor-talk-to-figma-mcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEW&lt;/strong&gt; Install Figma plugin from &lt;a href=&#34;https://www.figma.com/community/plugin/1485687494525374295/cursor-talk-to-figma-mcp-plugin&#34;&gt;Figma community page&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/sonnylazuardi/cursor-talk-to-figma-mcp/main/#figma-plugin&#34;&gt;install locally&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick Video Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/posts/sonnylazuardi_just-wanted-to-share-my-latest-experiment-activity-7307821553654657024-yrh8&#34;&gt;Video Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Design Automation Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bulk text content replacement&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/dusskapark&#34;&gt;@dusskapark&lt;/a&gt; for contributing the bulk text replacement feature. Here is the &lt;a href=&#34;https://www.youtube.com/watch?v=j05gGT3xfCs&#34;&gt;demo video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instance Override Propagation&lt;/strong&gt; Another contribution from &lt;a href=&#34;https://github.com/dusskapark&#34;&gt;@dusskapark&lt;/a&gt; Propagate component instance overrides from a source instance to multiple target instances with a single command. This feature dramatically reduces repetitive design work when working with component instances that need similar customizations. Check out our &lt;a href=&#34;https://youtu.be/uvuT8LByroI&#34;&gt;demo video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Manual Setup and Installation&lt;/h2&gt; &#xA;&lt;h3&gt;MCP Server: Integration with Cursor&lt;/h3&gt; &#xA;&lt;p&gt;Add the server to your Cursor MCP configuration in &lt;code&gt;~/.cursor/mcp.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;TalkToFigma&#34;: {&#xA;      &#34;command&#34;: &#34;bunx&#34;,&#xA;      &#34;args&#34;: [&#34;cursor-talk-to-figma-mcp@latest&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebSocket Server&lt;/h3&gt; &#xA;&lt;p&gt;Start the WebSocket server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Figma Plugin&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Figma, go to Plugins &amp;gt; Development &amp;gt; New Plugin&lt;/li&gt; &#xA; &lt;li&gt;Choose &#34;Link existing plugin&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;src/cursor_mcp_plugin/manifest.json&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;The plugin should now be available in your Figma development plugins&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Windows + WSL Guide&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install bun via powershell&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;powershell -c &#34;irm bun.sh/install.ps1|iex&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Uncomment the hostname &lt;code&gt;0.0.0.0&lt;/code&gt; in &lt;code&gt;src/socket.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// uncomment this to allow connections in windows wsl&#xA;hostname: &#34;0.0.0.0&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start the websocket&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the WebSocket server&lt;/li&gt; &#xA; &lt;li&gt;Install the MCP server in Cursor&lt;/li&gt; &#xA; &lt;li&gt;Open Figma and run the Cursor MCP Plugin&lt;/li&gt; &#xA; &lt;li&gt;Connect the plugin to the WebSocket server by joining a channel using &lt;code&gt;join_channel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use Cursor to communicate with Figma using the MCP tools&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;MCP Tools&lt;/h2&gt; &#xA;&lt;p&gt;The MCP server provides the following tools for interacting with Figma:&lt;/p&gt; &#xA;&lt;h3&gt;Document &amp;amp; Selection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_document_info&lt;/code&gt; - Get information about the current Figma document&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_selection&lt;/code&gt; - Get information about the current selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_my_design&lt;/code&gt; - Get detailed node information about the current selection without parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_node_info&lt;/code&gt; - Get detailed information about a specific node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_nodes_info&lt;/code&gt; - Get detailed information about multiple nodes by providing an array of node IDs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Annotations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_annotations&lt;/code&gt; - Get all annotations in the current document or specific node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_annotation&lt;/code&gt; - Create or update an annotation with markdown support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_multiple_annotations&lt;/code&gt; - Batch create/update multiple annotations efficiently&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scan_nodes_by_types&lt;/code&gt; - Scan for nodes with specific types (useful for finding annotation targets)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prototyping &amp;amp; Connections&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_reactions&lt;/code&gt; - Get all prototype reactions from nodes with visual highlight animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_default_connector&lt;/code&gt; - Set a copied FigJam connector as the default connector style for creating connections (must be set before creating connections)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_connections&lt;/code&gt; - Create FigJam connector lines between nodes, based on prototype flows or custom mapping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creating Elements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;create_rectangle&lt;/code&gt; - Create a new rectangle with position, size, and optional name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_frame&lt;/code&gt; - Create a new frame with position, size, and optional name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_text&lt;/code&gt; - Create a new text node with customizable font properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modifying text content&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scan_text_nodes&lt;/code&gt; - Scan text nodes with intelligent chunking for large designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_text_content&lt;/code&gt; - Set the text content of a single text node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_multiple_text_contents&lt;/code&gt; - Batch update multiple text nodes efficiently&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Auto Layout &amp;amp; Spacing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;set_layout_mode&lt;/code&gt; - Set the layout mode and wrap behavior of a frame (NONE, HORIZONTAL, VERTICAL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_padding&lt;/code&gt; - Set padding values for an auto-layout frame (top, right, bottom, left)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_axis_align&lt;/code&gt; - Set primary and counter axis alignment for auto-layout frames&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_layout_sizing&lt;/code&gt; - Set horizontal and vertical sizing modes for auto-layout frames (FIXED, HUG, FILL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_item_spacing&lt;/code&gt; - Set distance between children in an auto-layout frame&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Styling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;set_fill_color&lt;/code&gt; - Set the fill color of a node (RGBA)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_stroke_color&lt;/code&gt; - Set the stroke color and weight of a node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_corner_radius&lt;/code&gt; - Set the corner radius of a node with optional per-corner control&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Layout &amp;amp; Organization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;move_node&lt;/code&gt; - Move a node to a new position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resize_node&lt;/code&gt; - Resize a node with new dimensions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_node&lt;/code&gt; - Delete a node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_multiple_nodes&lt;/code&gt; - Delete multiple nodes at once efficiently&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clone_node&lt;/code&gt; - Create a copy of an existing node with optional position offset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Components &amp;amp; Styles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_styles&lt;/code&gt; - Get information about local styles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_local_components&lt;/code&gt; - Get information about local components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_component_instance&lt;/code&gt; - Create an instance of a component&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_instance_overrides&lt;/code&gt; - Extract override properties from a selected component instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_instance_overrides&lt;/code&gt; - Apply extracted overrides to target instances&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Export &amp;amp; Advanced&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;export_node_as_image&lt;/code&gt; - Export a node as an image (PNG, JPG, SVG, or PDF) - limited support on image currently returning base64 as text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Connection Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;join_channel&lt;/code&gt; - Join a specific channel to communicate with Figma&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MCP Prompts&lt;/h3&gt; &#xA;&lt;p&gt;The MCP server includes several helper prompts to guide you through complex design tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;design_strategy&lt;/code&gt; - Best practices for working with Figma designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_design_strategy&lt;/code&gt; - Best practices for reading Figma designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text_replacement_strategy&lt;/code&gt; - Systematic approach for replacing text in Figma designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;annotation_conversion_strategy&lt;/code&gt; - Strategy for converting manual annotations to Figma&#39;s native annotations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;swap_overrides_instances&lt;/code&gt; - Strategy for transferring overrides between component instances in Figma&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reaction_to_connector_strategy&lt;/code&gt; - Strategy for converting Figma prototype reactions to connector lines using the output of &#39;get_reactions&#39;, and guiding the use &#39;create_connections&#39; in sequence&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Building the Figma Plugin&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the Figma plugin directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd src/cursor_mcp_plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit code.js and ui.html&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;When working with the Figma MCP:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Always join a channel before sending commands&lt;/li&gt; &#xA; &lt;li&gt;Get document overview using &lt;code&gt;get_document_info&lt;/code&gt; first&lt;/li&gt; &#xA; &lt;li&gt;Check current selection with &lt;code&gt;get_selection&lt;/code&gt; before modifications&lt;/li&gt; &#xA; &lt;li&gt;Use appropriate creation tools based on needs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;create_frame&lt;/code&gt; for containers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create_rectangle&lt;/code&gt; for basic shapes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create_text&lt;/code&gt; for text elements&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Verify changes using &lt;code&gt;get_node_info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use component instances when possible for consistency&lt;/li&gt; &#xA; &lt;li&gt;Handle errors appropriately as all commands can throw exceptions&lt;/li&gt; &#xA; &lt;li&gt;For large designs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use chunking parameters in &lt;code&gt;scan_text_nodes&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Monitor progress through WebSocket updates&lt;/li&gt; &#xA;   &lt;li&gt;Implement appropriate error handling&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For text operations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use batch operations when possible&lt;/li&gt; &#xA;   &lt;li&gt;Consider structural relationships&lt;/li&gt; &#xA;   &lt;li&gt;Verify changes with targeted exports&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For converting legacy annotations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scan text nodes to identify numbered markers and descriptions&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;scan_nodes_by_types&lt;/code&gt; to find UI elements that annotations refer to&lt;/li&gt; &#xA;   &lt;li&gt;Match markers with their target elements using path, name, or proximity&lt;/li&gt; &#xA;   &lt;li&gt;Categorize annotations appropriately with &lt;code&gt;get_annotations&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create native annotations with &lt;code&gt;set_multiple_annotations&lt;/code&gt; in batches&lt;/li&gt; &#xA;   &lt;li&gt;Verify all annotations are properly linked to their targets&lt;/li&gt; &#xA;   &lt;li&gt;Delete legacy annotation nodes after successful conversion&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Visualize prototype noodles as FigJam connectors:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;get_reactions&lt;/code&gt; to extract prototype flows,&lt;/li&gt; &#xA; &lt;li&gt;set a default connector with &lt;code&gt;set_default_connector&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;and generate connector lines with &lt;code&gt;create_connections&lt;/code&gt; for clear visual flow mapping.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>franceking1/Flash-Md-V2</title>
    <updated>2025-06-22T01:33:31Z</updated>
    <id>tag:github.com,2025-06-22:/franceking1/Flash-Md-V2</id>
    <link href="https://github.com/franceking1/Flash-Md-V2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Feel Free To Use FLASH-MD, Remember To STAR🌟 The Repo before Forking&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FLASH-MD-V2: The Ultimate WhatsApp Bot&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;FLASH-MD-V2&lt;/strong&gt; is a powerful and customizable WhatsApp bot built with &lt;strong&gt;Node.js&lt;/strong&gt; and &lt;strong&gt;WhatsApp Web API&lt;/strong&gt;. Automate WhatsApp tasks, manage groups, and much more!&lt;/p&gt; &#xA;&lt;h2&gt;CONNECT TO WHATSAPP:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;STAR REPO AND THEN&lt;/strong&gt; &lt;a href=&#34;https://github.com/franceking1/Flash-Md-V2/fork&#34;&gt;FORK IT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GET SESSION ID USING&lt;/strong&gt; &lt;a href=&#34;https://my-sessions.onrender.com/pair&#34;&gt;PAIRING CODE&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IF YOU&#39;RE HOSTING ON PANELS,&lt;/strong&gt; &lt;a href=&#34;https://github.com/franceking1/Flash-Md-V2/archive/refs/heads/main.zip&#34;&gt;GET THE ZIP FILE HERE&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🚀 Deployment Platforms:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Platform&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Instructions&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Koyeb&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1. Sign up at &lt;a href=&#34;https://www.koyeb.com&#34;&gt;Koyeb&lt;/a&gt; &amp;amp; link GitHub.&lt;br&gt; 2. Set up environment variables like (&lt;code&gt;OWNER_NUMBER&lt;/code&gt;, &lt;code&gt;OWNER_NAME&lt;/code&gt;, &lt;code&gt;SESSION&lt;/code&gt;).&lt;br&gt; 3. Deploy using Node.js auto-detect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Railway&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1. Sign up at &lt;a href=&#34;https://railway.app&#34;&gt;Railway&lt;/a&gt; &amp;amp; link GitHub.&lt;br&gt; 2. Set Build Command as &lt;code&gt;npm install&lt;/code&gt; &amp;amp; Start Command as &lt;code&gt;npm start&lt;/code&gt;.&lt;br&gt; 3. Add environment variables like (&lt;code&gt;YOUR_NUMBER&lt;/code&gt;, &lt;code&gt;YOUR_NAME&lt;/code&gt;, &lt;code&gt;SESSION&lt;/code&gt;).&lt;br&gt; 4. Deploy &amp;amp; your bot is live!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Render&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;1. Sign up at &lt;a href=&#34;https://render.com&#34;&gt;Render&lt;/a&gt; &amp;amp; link GitHub.&lt;br&gt; 2. Set Build Command as &lt;code&gt;npm install&lt;/code&gt; &amp;amp; Start Command as &lt;code&gt;npm start&lt;/code&gt;.&lt;br&gt; 3. Make sure you deploy without putting session id in env file .&lt;br&gt; 4. Come back to your repo and put session in env file and in &lt;code&gt;.env&lt;/code&gt;, paste your app URL or render link For the bot to run 24/7&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Termux&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Termux Setup Instructions&lt;/strong&gt;:&lt;br&gt; 1. Install &lt;a href=&#34;https://f-droid.org/packages/com.termux/&#34;&gt;Termux&lt;/a&gt; on Android.&lt;br&gt; 2. Clone the repo and navigate into the folder.&lt;br&gt; 3. Install dependencies and run the bot with the commands below.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Heroku&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Heroku deployment guide&lt;/strong&gt;:&lt;br&gt; 1. Create an account on &lt;a href=&#34;https://signup.heroku.com&#34;&gt;Heroku&lt;/a&gt;&lt;br&gt; 2. After creating an account, add credit card and &lt;a href=&#34;https://france-king.vercel.app/&#34;&gt;DEPLOY FLASH-MD V2&lt;/a&gt; &lt;br&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;📚 TERMUX Setup Instructions:&lt;/h3&gt; &#xA;&lt;h4&gt;1. Clone the repository:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/franceking1/FLASH-MD-V2.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd FLASH-MD-V2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🙏 Credits &amp;amp; Licensing&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Contributor&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Role&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/WhiskeySockets/Baileys&#34;&gt;Baileys&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Core WhatsApp Web API Library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/franceking1&#34;&gt;FranceKing1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Developer &amp;amp; Maintainer of FLASH-MD-V2&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;⚠️ Warning&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Do NOT copy, modify, or redistribute&lt;/strong&gt; this bot without &lt;strong&gt;proper permission&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;FLASH-MD-V2 is an &lt;strong&gt;open-source project&lt;/strong&gt;, but it is protected by its license and community standards.&lt;/li&gt; &#xA; &lt;li&gt;Give &lt;strong&gt;proper credits&lt;/strong&gt; to the original authors and libraries used.&lt;/li&gt; &#xA; &lt;li&gt;Any misuse or abuse of this bot is &lt;strong&gt;strictly prohibited&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;HELP :&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;IF you need any help&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://messages-snowy.vercel.app&#34;&gt;&lt;strong&gt;CLICK HERE&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://suggestions-phi.vercel.app&#34;&gt;&lt;strong&gt;Click here to send suggestions or queries&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;⭐ Support This Project&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Action&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Purpose&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/franceking1/FLASH-MD-V2/generate&#34;&gt;Use This Template&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create your own working bot easily. Eg, for hosting on render ‼️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/franceking1/FLASH-MD-V2/fork&#34;&gt;Fork This Repo&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Show your support and boost visibility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Every ⭐ star and fork makes a big difference — thank you for supporting &lt;strong&gt;FLASH-MD-V2&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Powered by France King&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
</feed>