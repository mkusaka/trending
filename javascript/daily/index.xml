<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-30T01:37:06Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>100xDevs-hkirat/all-assignments</title>
    <updated>2023-06-30T01:37:06Z</updated>
    <id>tag:github.com,2023-06-30:/100xDevs-hkirat/all-assignments</id>
    <link href="https://github.com/100xDevs-hkirat/all-assignments" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>cytoscape/cytoscape.js</title>
    <updated>2023-06-30T01:37:06Z</updated>
    <id>tag:github.com,2023-06-30:/cytoscape/cytoscape.js</id>
    <link href="https://github.com/cytoscape/cytoscape.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Graph theory (network) library for visualisation and analysis&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img style=&#34;width: 200px; height: 200px;&#34; src=&#34;https://raw.githubusercontent.com/cytoscape/cytoscape.js/unstable/documentation/img/cytoscape-logo.png&#34; width=&#34;200&#34; height=&#34;200&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cytoscape/cytoscape.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Repo-GitHub-yellow.svg?sanitize=true&#34; alt=&#34;GitHub repo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.phind.com/search?c=I%27m%20using%20the%20Cytoscape.js%20graph%20theory%20JS%20library.&amp;amp;q=How%20do%20I%20create%20a%20graph%20in%20my%20HTML%20page&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Get%20help-Phind-yellow.svg?sanitize=true&#34; alt=&#34;Ask a question with Phind&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://blog.js.cytoscape.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/News%20%26%20tutorials-Blog-yellow.svg?sanitize=true&#34; alt=&#34;News and tutorials&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/cytoscape/cytoscape.js/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cytoscape&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/cytoscape.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://zenodo.org/badge/latestdoi/2255947&#34;&gt;&lt;img src=&#34;https://zenodo.org/badge/2255947.svg?sanitize=true&#34; alt=&#34;DOI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cytoscape&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/cytoscape.svg?label=npm%20installs&#34; alt=&#34;npm installs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cytoscape/cytoscape.js/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/cytoscape/cytoscape.js/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Automated tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://js.cytoscape.org/#extensions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Extensions-67-brightgreen.svg?sanitize=true&#34; alt=&#34;Extensions&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Created at the &lt;a href=&#34;https://utoronto.ca&#34;&gt;University of Toronto&lt;/a&gt; and published in &lt;a href=&#34;https://js.cytoscape.org/#introduction/citation&#34;&gt;Oxford Bioinformatics&lt;/a&gt; (&lt;a href=&#34;https://academic.oup.com/bioinformatics/article/32/2/309/1744007&#34;&gt;2016&lt;/a&gt;, &lt;a href=&#34;https://academic.oup.com/bioinformatics/article/39/1/btad031/6988031&#34;&gt;2023&lt;/a&gt;). &lt;br&gt; Authored by: &lt;a href=&#34;https://github.com/maxkfranz&#34;&gt;Max Franz&lt;/a&gt;, &lt;a href=&#34;https://github.com/chrtannus&#34;&gt;Christian Lopes&lt;/a&gt;, &lt;a href=&#34;https://github.com/d2fong&#34;&gt;Dylan Fong&lt;/a&gt;, &lt;a href=&#34;https://github.com/mikekucera&#34;&gt;Mike Kucera&lt;/a&gt;, ..., &lt;a href=&#34;https://baderlab.org&#34;&gt;Gary Bader&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Cytoscape.js&lt;/h1&gt; &#xA;&lt;p&gt;Graph theory (network) library for visualisation and analysis : &lt;a href=&#34;https://js.cytoscape.org&#34;&gt;https://js.cytoscape.org&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Cytoscape.js is a fully featured &lt;a href=&#34;https://en.wikipedia.org/wiki/Graph_theory&#34;&gt;graph theory&lt;/a&gt; library. Do you need to model and/or visualise relational data, like biological data or social networks? If so, Cytoscape.js is just what you need.&lt;/p&gt; &#xA;&lt;p&gt;Cytoscape.js contains a graph theory model and an optional renderer to display interactive graphs. This library was designed to make it as easy as possible for programmers and scientists to use graph theory in their apps, whether it&#39;s for server-side analysis in a Node.js app or for a rich user interface.&lt;/p&gt; &#xA;&lt;p&gt;You can get started with Cytoscape.js with one line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var cy = cytoscape({ elements: myElements, container: myDiv });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Learn more about the features of Cytoscape.js by reading &lt;a href=&#34;https://js.cytoscape.org&#34;&gt;its documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;The Tokyo railway stations network can be visualised with Cytoscape:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img style=&#34;width: 300px; height: 126px;&#34; src=&#34;https://raw.githubusercontent.com/cytoscape/cytoscape.js/unstable/documentation/img/tokyo-big.png&#34; width=&#34;300&#34; height=&#34;126&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img style=&#34;width: 300px; height: 126px;&#34; src=&#34;https://raw.githubusercontent.com/cytoscape/cytoscape.js/unstable/documentation/img/tokyo-big-zoomed-in.png&#34; width=&#34;300&#34; height=&#34;126&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://js.cytoscape.org/demos/tokyo-railways/&#34;&gt;live demo&lt;/a&gt; and &lt;a href=&#34;https://github.com/cytoscape/cytoscape.js/tree/master/documentation/demos/tokyo-railways&#34;&gt;source code&lt;/a&gt; are available for the Tokyo railway stations graph. More demos are available in the &lt;a href=&#34;https://js.cytoscape.org/#demos&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the documentation and downloads on the &lt;a href=&#34;https://js.cytoscape.org&#34;&gt;project website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Future versions of Cytoscape.js are planned in the &lt;a href=&#34;https://github.com/cytoscape/cytoscape.js/milestones&#34;&gt;milestones of the Github issue tracker&lt;/a&gt;. You can use the milestones to see what&#39;s currently planned for future releases.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing to Cytoscape.js&lt;/h2&gt; &#xA;&lt;p&gt;Would you like to become a Cytoscape.js contributor? You can contribute in technical roles (e.g. features, testing) or non-technical roles (e.g. documentation, outreach), depending on your interests. &lt;a href=&#34;https://github.com/cytoscape/cytoscape.js/discussions&#34;&gt;Get in touch with us by posting a GitHub discussion&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For the mechanics of contributing a pull request, refer to &lt;a href=&#34;https://raw.githubusercontent.com/cytoscape/cytoscape.js/unstable/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Feature releases are made monthly, while patch releases are made weekly. This allows for rapid releases of first- and third-party contributions.&lt;/p&gt; &#xA;&lt;h2&gt;Citation&lt;/h2&gt; &#xA;&lt;p&gt;To cite Cytoscape.js in a paper, please cite the Oxford Bioinformatics issue:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Cytoscape.js: a graph theory library for visualisation and analysis&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Franz M, Lopes CT, Huck G, Dong Y, Sumer O, Bader GD&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://bioinformatics.oxfordjournals.org/content/32/2/309&#34;&gt;Bioinformatics (2016) 32 (2): 309-311 first published online September 28, 2015 doi:10.1093/bioinformatics/btv557&lt;/a&gt; &lt;a href=&#34;http://bioinformatics.oxfordjournals.org/content/32/2/309.full.pdf&#34;&gt;(PDF)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ncbi.nlm.nih.gov/pubmed/26415722&#34;&gt;PubMed abstract for the original 2016 article&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pubmed.ncbi.nlm.nih.gov/36645249&#34;&gt;PubMed abstract for the 2023 update article&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Build dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;. Run &lt;code&gt;npm install&lt;/code&gt; before using &lt;code&gt;npm run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Build instructions&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;npm run &amp;lt;target&amp;gt;&lt;/code&gt; in the console. The main targets are:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Building:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;build&lt;/code&gt;: do all builds of the library (umd, min, umd, esm)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build:min&lt;/code&gt; : do the unminified build with bundled dependencies (for simple html pages, good for novices)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build:umd&lt;/code&gt; : do the umd (cjs/amd/globals) build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;build:esm&lt;/code&gt; : do the esm (ES 2015 modules) build&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clean&lt;/code&gt; : clean the &lt;code&gt;build&lt;/code&gt; directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;docs&lt;/code&gt; : build the docs into &lt;code&gt;documentation&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;release&lt;/code&gt; : build all release artifacts&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watch&lt;/code&gt; : automatically build lib for debugging (with sourcemap, no babel, very quick) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;good for general testing on &lt;code&gt;debug/index.html&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;served on &lt;code&gt;http://localhost:8080&lt;/code&gt; or the first available port thereafter, with livereload on &lt;code&gt;debug/index.html&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watch:babel&lt;/code&gt; : automatically build lib for debugging (with sourcemap, with babel, a bit slower) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;good for testing performance or for testing out of date browsers&lt;/li&gt; &#xA;   &lt;li&gt;served on &lt;code&gt;http://localhost:8080&lt;/code&gt; or the first available port thereafter, with livereload on &lt;code&gt;debug/index.html&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;watch:umd&lt;/code&gt; : automatically build prod umd bundle (no sourcemap, with babel) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;good for testing cytoscape in another project (with a &lt;code&gt;&#34;cytoscape&#34;: &#34;file:./path/to/cytoscape&#34;&lt;/code&gt; reference in your project&#39;s &lt;code&gt;package.json&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;no http server&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dist&lt;/code&gt; : update the distribution js for npm etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Testing:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default test scripts run directly against the source code. Tests can alternatively be run on a built bundle. The library can be built on &lt;code&gt;node&amp;gt;=6&lt;/code&gt;, but the library&#39;s bundle can be tested on &lt;code&gt;node&amp;gt;=0.10&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;test&lt;/code&gt; : run all testing &amp;amp; linting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test:js&lt;/code&gt; : run the mocha tests on the public API of the lib (directly on source files) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test:js -- -g &#34;my test name&#34;&lt;/code&gt; runs tests on only the matching test cases&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test:build&lt;/code&gt; : run the mocha tests on the public API of the lib (on a built bundle) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt; should be run beforehand on a recent version of node&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test:build -- -g &#34;my test name&#34;&lt;/code&gt; runs build tests on only the matching test cases&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;test:modules&lt;/code&gt; : run unit tests on private, internal API &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test:modules -- -g &#34;my test name&#34;&lt;/code&gt; runs modules tests on only the matching test cases&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lint&lt;/code&gt; : lint the js sources via eslint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;benchmark&lt;/code&gt; : run all benchmarks&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;benchmark:single&lt;/code&gt; : run benchmarks only for the suite specified in &lt;code&gt;benchmark/single&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Release instructions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Ensure the docs are updated with the list of releases you would like to make in &lt;code&gt;documentation/md/intro.md&lt;/code&gt; (on both &lt;code&gt;master&lt;/code&gt; and &lt;code&gt;unstable&lt;/code&gt; branches). Push the changes.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that &lt;a href=&#34;https://github.com/cytoscape/cytoscape.js/milestones&#34;&gt;milestones&lt;/a&gt; exist for the releases that you would like to make. Each milestone should contain its corresponding issues and pull requests.&lt;/li&gt; &#xA; &lt;li&gt;For patch releases, do the back-port patch release before the corresponding current release. This ensures that npm lists the current version as the latest one. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;git checkout 1.1.x&lt;/code&gt;, e.g. if the previous feature release is 1.1&lt;/li&gt; &#xA;   &lt;li&gt;Follow the remaining ordinary release steps (step 5 and onward).&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Current releases are based on the &lt;code&gt;master&lt;/code&gt; branch: &lt;code&gt;git checkout master&lt;/code&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If you are making a patch release, you can just release &lt;code&gt;master&lt;/code&gt; with its new patches.&lt;/li&gt; &#xA;   &lt;li&gt;If you are making a feature release, you need to merge &lt;code&gt;unstable&lt;/code&gt; onto &lt;code&gt;master&lt;/code&gt;. Since there can be conflicts, it&#39;s easiest to use the &#39;ours&#39; strategy which will allow you to use the state of &lt;code&gt;unstable&lt;/code&gt; as-is (i.e. no conflict resolution necessary): &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;Make sure your local &lt;code&gt;master&lt;/code&gt; is up-to-date: &lt;code&gt;git checkout master &amp;amp;&amp;amp; git pull&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Make sure your local &lt;code&gt;unstable&lt;/code&gt; is up-to-date: &lt;code&gt;git checkout unstable &amp;amp;&amp;amp; git pull&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Create a merge commit that selects the state of &lt;code&gt;unstable&lt;/code&gt; and push it: &lt;code&gt;git merge -s ours master &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Fast-forward &lt;code&gt;master&lt;/code&gt; to the merge commit: &lt;code&gt;git checkout master &amp;amp;&amp;amp; git merge unstable &amp;amp;&amp;amp; git push&lt;/code&gt;&lt;/li&gt; &#xA;     &lt;li&gt;Update the version number in &lt;code&gt;package.json&lt;/code&gt; and &lt;code&gt;package-lock.json&lt;/code&gt; on &lt;code&gt;unstable&lt;/code&gt; to some provisional new version number, and push it.&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Update the &lt;code&gt;VERSION&lt;/code&gt; environment variable for the release number you want to make, e.g. &lt;code&gt;export VERSION=1.2.3&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Confirm all the tests are passing: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run test&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;See also &lt;code&gt;test/index.html&lt;/code&gt; for browser testing (optional)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Confirm all the tests are passing in IE9 (for feature releases): &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run watch:umd&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Open an &lt;a href=&#34;https://developer.microsoft.com/en-us/microsoft-edge/tools/vms/&#34;&gt;IE9 VM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Open &lt;code&gt;http://yourip:8081/test/ie.html&lt;/code&gt; in IE&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Prepare a release: &lt;code&gt;npm run release&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Review the files that were just built in the previous step. &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;There should be a series of updated files in the &lt;code&gt;dist&lt;/code&gt; directory and the &lt;code&gt;documentation&lt;/code&gt; directory, identified with &lt;code&gt;git status&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Try out the newly-built docs and demos in your browser.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the the release to git: &lt;code&gt;git add . &amp;amp;&amp;amp; git commit -m &#34;Build $VERSION&#34;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Update the package version and tag the release: &lt;code&gt;npm version $VERSION&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push the release changes: &lt;code&gt;git push &amp;amp;&amp;amp; git push --tags&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Publish the release to npm: &lt;code&gt;npm publish&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cytoscape/cytoscape.js/releases/new&#34;&gt;Create a release&lt;/a&gt; for Zenodo from the latest tag. Make sure you wait at least 5 minutes since the last time that you made a release in order for Zenodo to work properly.&lt;/li&gt; &#xA; &lt;li&gt;For feature releases: Create a release announcement on the &lt;a href=&#34;https://github.com/cytoscape/cytoscape.js-blog&#34;&gt;blog&lt;/a&gt;. Share the announcement on mailing lists and social media.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Mocha tests are found in the &lt;a href=&#34;https://github.com/cytoscape/cytoscape.js/tree/master/test&#34;&gt;test directory&lt;/a&gt;. The tests can be run in the browser or they can be run via Node.js (&lt;code&gt;npm run test:js&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>uuidjs/uuid</title>
    <updated>2023-06-30T01:37:06Z</updated>
    <id>tag:github.com,2023-06-30:/uuidjs/uuid</id>
    <link href="https://github.com/uuidjs/uuid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate RFC-compliant UUIDs in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;uuid &lt;a href=&#34;https://github.com/uuidjs/uuid/actions?query=workflow%3ACI&#34;&gt;&lt;img src=&#34;https://github.com/uuidjs/uuid/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/uuidjs/uuid/actions?query=workflow%3ABrowser&#34;&gt;&lt;img src=&#34;https://github.com/uuidjs/uuid/workflows/Browser/badge.svg?sanitize=true&#34; alt=&#34;Browser&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;For the creation of &lt;a href=&#34;https://www.ietf.org/rfc/rfc4122.txt&#34;&gt;RFC4122&lt;/a&gt; UUIDs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Complete&lt;/strong&gt; - Support for RFC4122 version 1, 3, 4, and 5 UUIDs&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cross-platform&lt;/strong&gt; - Support for ... &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;CommonJS, &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#ecmascript-modules&#34;&gt;ECMAScript Modules&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#cdn-builds&#34;&gt;CDN builds&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Node 12, 14, 16, 18&lt;/li&gt; &#xA;   &lt;li&gt;Chrome, Safari, Firefox, Edge browsers&lt;/li&gt; &#xA;   &lt;li&gt;Webpack and rollup.js module bundlers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#react-native--expo&#34;&gt;React Native / Expo&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure&lt;/strong&gt; - Cryptographically-strong random values&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Small&lt;/strong&gt; - Zero-dependency, small footprint, plays nice with &#34;tree shaking&#34; packagers&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CLI&lt;/strong&gt; - Includes the &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#command-line&#34;&gt;&lt;code&gt;uuid&lt;/code&gt; command line&lt;/a&gt; utility&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Upgrading from &lt;code&gt;uuid@3&lt;/code&gt;? Your code is probably okay, but check out &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#upgrading-from-uuid3&#34;&gt;Upgrading From &lt;code&gt;uuid@3&lt;/code&gt;&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; Only interested in creating a version 4 UUID? You might be able to use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Crypto/randomUUID&#34;&gt;&lt;code&gt;crypto.randomUUID()&lt;/code&gt;&lt;/a&gt;, eliminating the need to install this library.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To create a random UUID...&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. Install&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install uuid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2. Create a UUID&lt;/strong&gt; (ES6 module syntax)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v4 as uuidv4 } from &#39;uuid&#39;;&#xA;uuidv4(); // ⇨ &#39;9b1deb4d-3b7d-4bad-9bdd-2b0d7b3dcb6d&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or using CommonJS syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { v4: uuidv4 } = require(&#39;uuid&#39;);&#xA;uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For timestamp UUIDs, namespace UUIDs, and other options read on ...&lt;/p&gt; &#xA;&lt;h2&gt;API Summary&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidnil&#34;&gt;&lt;code&gt;uuid.NIL&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The nil UUID string (all zeros)&lt;/td&gt; &#xA;   &lt;td&gt;New in &lt;code&gt;uuid@8.3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidparsestr&#34;&gt;&lt;code&gt;uuid.parse()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert UUID string to array of bytes&lt;/td&gt; &#xA;   &lt;td&gt;New in &lt;code&gt;uuid@8.3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidstringifyarr-offset&#34;&gt;&lt;code&gt;uuid.stringify()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Convert array of bytes to UUID string&lt;/td&gt; &#xA;   &lt;td&gt;New in &lt;code&gt;uuid@8.3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidv1options-buffer-offset&#34;&gt;&lt;code&gt;uuid.v1()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create a version 1 (timestamp) UUID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidv3name-namespace-buffer-offset&#34;&gt;&lt;code&gt;uuid.v3()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create a version 3 (namespace w/ MD5) UUID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidv4options-buffer-offset&#34;&gt;&lt;code&gt;uuid.v4()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create a version 4 (random) UUID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidv5name-namespace-buffer-offset&#34;&gt;&lt;code&gt;uuid.v5()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Create a version 5 (namespace w/ SHA-1) UUID&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidvalidatestr&#34;&gt;&lt;code&gt;uuid.validate()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Test a string to see if it is a valid UUID&lt;/td&gt; &#xA;   &lt;td&gt;New in &lt;code&gt;uuid@8.3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidversionstr&#34;&gt;&lt;code&gt;uuid.version()&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Detect RFC version of a UUID&lt;/td&gt; &#xA;   &lt;td&gt;New in &lt;code&gt;uuid@8.3&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;uuid.NIL&lt;/h3&gt; &#xA;&lt;p&gt;The nil UUID string (all zeros).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { NIL as NIL_UUID } from &#39;uuid&#39;;&#xA;&#xA;NIL_UUID; // ⇨ &#39;00000000-0000-0000-0000-000000000000&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid.parse(str)&lt;/h3&gt; &#xA;&lt;p&gt;Convert UUID string to array of bytes&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A valid UUID &lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;returns&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Uint8Array[16]&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;throws&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TypeError&lt;/code&gt; if &lt;code&gt;str&lt;/code&gt; is not a valid UUID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: Ordering of values in the byte arrays used by &lt;code&gt;parse()&lt;/code&gt; and &lt;code&gt;stringify()&lt;/code&gt; follows the left ↠ right order of hex-pairs in UUID strings. As shown in the example below.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { parse as uuidParse } from &#39;uuid&#39;;&#xA;&#xA;// Parse a UUID&#xA;const bytes = uuidParse(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;);&#xA;&#xA;// Convert to hex strings to show byte order (for documentation purposes)&#xA;[...bytes].map((v) =&amp;gt; v.toString(16).padStart(2, &#39;0&#39;)); // ⇨ &#xA;  // [&#xA;  //   &#39;6e&#39;, &#39;c0&#39;, &#39;bd&#39;, &#39;7f&#39;,&#xA;  //   &#39;11&#39;, &#39;c0&#39;, &#39;43&#39;, &#39;da&#39;,&#xA;  //   &#39;97&#39;, &#39;5e&#39;, &#39;2a&#39;, &#39;8a&#39;,&#xA;  //   &#39;d9&#39;, &#39;eb&#39;, &#39;ae&#39;, &#39;0b&#39;&#xA;  // ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid.stringify(arr[, offset])&lt;/h3&gt; &#xA;&lt;p&gt;Convert array of bytes to UUID string&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;arr&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array&lt;/code&gt;-like collection of 16 values (starting from &lt;code&gt;offset&lt;/code&gt;) between 0-255.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;offset&lt;/code&gt; = 0]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt; Starting index in the Array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;returns&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;throws&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TypeError&lt;/code&gt; if a valid UUID string cannot be generated&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: Ordering of values in the byte arrays used by &lt;code&gt;parse()&lt;/code&gt; and &lt;code&gt;stringify()&lt;/code&gt; follows the left ↠ right order of hex-pairs in UUID strings. As shown in the example below.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { stringify as uuidStringify } from &#39;uuid&#39;;&#xA;&#xA;const uuidBytes = [&#xA;  0x6e, 0xc0, 0xbd, 0x7f, 0x11, 0xc0, 0x43, 0xda, 0x97, 0x5e, 0x2a, 0x8a, 0xd9, 0xeb, 0xae, 0x0b,&#xA;];&#xA;&#xA;uuidStringify(uuidBytes); // ⇨ &#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid.v1([options[, buffer[, offset]]])&lt;/h3&gt; &#xA;&lt;p&gt;Create an RFC version 1 (timestamp) UUID&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt; with one or more of the following properties:&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.node&lt;/code&gt; ]&lt;/td&gt; &#xA;   &lt;td&gt;RFC &#34;node&#34; field as an &lt;code&gt;Array[6]&lt;/code&gt; of byte values (per 4.1.6)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.clockseq&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;RFC &#34;clock sequence&#34; as a &lt;code&gt;Number&lt;/code&gt; between 0 - 0x3fff&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.msecs&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;RFC &#34;timestamp&#34; field (&lt;code&gt;Number&lt;/code&gt; of milliseconds, unix epoch)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.nsecs&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;RFC &#34;timestamp&#34; field (&lt;code&gt;Number&lt;/code&gt; of nanoseconds to add to &lt;code&gt;msecs&lt;/code&gt;, should be 0-10,000)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.random&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array&lt;/code&gt; of 16 random bytes (0-255)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.rng&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;Alternative to &lt;code&gt;options.random&lt;/code&gt;, a &lt;code&gt;Function&lt;/code&gt; that returns an &lt;code&gt;Array&lt;/code&gt; of 16 random bytes (0-255)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;buffer&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array | Buffer&lt;/code&gt; If specified, uuid will be written here in byte-form, starting at &lt;code&gt;offset&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;offset&lt;/code&gt; = 0]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt; Index to start writing UUID bytes in &lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;returns&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UUID &lt;code&gt;String&lt;/code&gt; if no &lt;code&gt;buffer&lt;/code&gt; is specified, otherwise returns &lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;throws&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Error&lt;/code&gt; if more than 10M UUIDs/sec are requested&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: The default &lt;a href=&#34;https://tools.ietf.org/html/rfc4122#section-4.1.6&#34;&gt;node id&lt;/a&gt; (the last 12 digits in the UUID) is generated once, randomly, on process startup, and then remains unchanged for the duration of the process.&lt;/p&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;options.random&lt;/code&gt; and &lt;code&gt;options.rng&lt;/code&gt; are only meaningful on the very first call to &lt;code&gt;v1()&lt;/code&gt;, where they may be passed to initialize the internal &lt;code&gt;node&lt;/code&gt; and &lt;code&gt;clockseq&lt;/code&gt; fields.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v1 as uuidv1 } from &#39;uuid&#39;;&#xA;&#xA;uuidv1(); // ⇨ &#39;2c5ea4c0-4067-11e9-8bad-9b1deb4d3b7d&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using &lt;code&gt;options&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v1 as uuidv1 } from &#39;uuid&#39;;&#xA;&#xA;const v1options = {&#xA;  node: [0x01, 0x23, 0x45, 0x67, 0x89, 0xab],&#xA;  clockseq: 0x1234,&#xA;  msecs: new Date(&#39;2011-11-01&#39;).getTime(),&#xA;  nsecs: 5678,&#xA;};&#xA;uuidv1(v1options); // ⇨ &#39;710b962e-041c-11e1-9234-0123456789ab&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid.v3(name, namespace[, buffer[, offset]])&lt;/h3&gt; &#xA;&lt;p&gt;Create an RFC version 3 (namespace w/ MD5) UUID&lt;/p&gt; &#xA;&lt;p&gt;API is identical to &lt;code&gt;v5()&lt;/code&gt;, but uses &#34;v3&#34; instead.&lt;/p&gt; &#xA;&lt;p&gt;⚠️ Note: Per the RFC, &#34;&lt;em&gt;If backward compatibility is not an issue, SHA-1 [Version 5] is preferred&lt;/em&gt;.&#34;&lt;/p&gt; &#xA;&lt;h3&gt;uuid.v4([options[, buffer[, offset]]])&lt;/h3&gt; &#xA;&lt;p&gt;Create an RFC version 4 (random) UUID&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt; with one or more of the following properties:&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.random&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array&lt;/code&gt; of 16 random bytes (0-255)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;options.rng&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;Alternative to &lt;code&gt;options.random&lt;/code&gt;, a &lt;code&gt;Function&lt;/code&gt; that returns an &lt;code&gt;Array&lt;/code&gt; of 16 random bytes (0-255)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;buffer&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array | Buffer&lt;/code&gt; If specified, uuid will be written here in byte-form, starting at &lt;code&gt;offset&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;offset&lt;/code&gt; = 0]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt; Index to start writing UUID bytes in &lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;returns&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UUID &lt;code&gt;String&lt;/code&gt; if no &lt;code&gt;buffer&lt;/code&gt; is specified, otherwise returns &lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v4 as uuidv4 } from &#39;uuid&#39;;&#xA;&#xA;uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example using predefined &lt;code&gt;random&lt;/code&gt; values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v4 as uuidv4 } from &#39;uuid&#39;;&#xA;&#xA;const v4options = {&#xA;  random: [&#xA;    0x10, 0x91, 0x56, 0xbe, 0xc4, 0xfb, 0xc1, 0xea, 0x71, 0xb4, 0xef, 0xe1, 0x67, 0x1c, 0x58, 0x36,&#xA;  ],&#xA;};&#xA;uuidv4(v4options); // ⇨ &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid.v5(name, namespace[, buffer[, offset]])&lt;/h3&gt; &#xA;&lt;p&gt;Create an RFC version 5 (namespace w/ SHA-1) UUID&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String | Array&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;namespace&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String | Array[16]&lt;/code&gt; Namespace UUID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;buffer&lt;/code&gt;]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array | Buffer&lt;/code&gt; If specified, uuid will be written here in byte-form, starting at &lt;code&gt;offset&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;[&lt;code&gt;offset&lt;/code&gt; = 0]&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt; Index to start writing UUID bytes in &lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;returns&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;UUID &lt;code&gt;String&lt;/code&gt; if no &lt;code&gt;buffer&lt;/code&gt; is specified, otherwise returns &lt;code&gt;buffer&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: The RFC &lt;code&gt;DNS&lt;/code&gt; and &lt;code&gt;URL&lt;/code&gt; namespaces are available as &lt;code&gt;v5.DNS&lt;/code&gt; and &lt;code&gt;v5.URL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Example with custom namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v5 as uuidv5 } from &#39;uuid&#39;;&#xA;&#xA;// Define a custom namespace.  Readers, create your own using something like&#xA;// https://www.uuidgenerator.net/&#xA;const MY_NAMESPACE = &#39;1b671a64-40d5-491e-99b0-da01ff1f3341&#39;;&#xA;&#xA;uuidv5(&#39;Hello, World!&#39;, MY_NAMESPACE); // ⇨ &#39;630eb68f-e0fa-5ecc-887a-7c7a62614681&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example with RFC &lt;code&gt;URL&lt;/code&gt; namespace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v5 as uuidv5 } from &#39;uuid&#39;;&#xA;&#xA;uuidv5(&#39;https://www.w3.org/&#39;, uuidv5.URL); // ⇨ &#39;c106a26a-21bb-5538-8bf2-57095d1976c1&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid.validate(str)&lt;/h3&gt; &#xA;&lt;p&gt;Test a string to see if it is a valid UUID&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; to validate&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;returns&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; if string is a valid UUID, &lt;code&gt;false&lt;/code&gt; otherwise&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { validate as uuidValidate } from &#39;uuid&#39;;&#xA;&#xA;uuidValidate(&#39;not a UUID&#39;); // ⇨ false&#xA;uuidValidate(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;validate&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; together it is possible to do per-version validation, e.g. validate for only v4 UUIds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { version as uuidVersion } from &#39;uuid&#39;;&#xA;import { validate as uuidValidate } from &#39;uuid&#39;;&#xA;&#xA;function uuidValidateV4(uuid) {&#xA;  return uuidValidate(uuid) &amp;amp;&amp;amp; uuidVersion(uuid) === 4;&#xA;}&#xA;&#xA;const v1Uuid = &#39;d9428888-122b-11e1-b85c-61cd3cbb3210&#39;;&#xA;const v4Uuid = &#39;109156be-c4fb-41ea-b1b4-efe1671c5836&#39;;&#xA;&#xA;uuidValidateV4(v4Uuid); // ⇨ true&#xA;uuidValidateV4(v1Uuid); // ⇨ false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;uuid.version(str)&lt;/h3&gt; &#xA;&lt;p&gt;Detect RFC version of a UUID&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;str&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A valid UUID &lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;returns&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Number&lt;/code&gt; The RFC version of the UUID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;em&gt;throws&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;TypeError&lt;/code&gt; if &lt;code&gt;str&lt;/code&gt; is not a valid UUID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { version as uuidVersion } from &#39;uuid&#39;;&#xA;&#xA;uuidVersion(&#39;45637ec4-c85f-11ea-87d0-0242ac130003&#39;); // ⇨ 1&#xA;uuidVersion(&#39;6ec0bd7f-11c0-43da-975e-2a8ad9ebae0b&#39;); // ⇨ 4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Command Line&lt;/h2&gt; &#xA;&lt;p&gt;UUIDs can be generated from the command line using &lt;code&gt;uuid&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npx uuid&#xA;ddeb27fb-d9a0-4624-be4d-4615062daed4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default is to generate version 4 UUIDS, however the other versions are supported. Type &lt;code&gt;uuid --help&lt;/code&gt; for details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;$ npx uuid --help&#xA;&#xA;Usage:&#xA;  uuid&#xA;  uuid v1&#xA;  uuid v3 &amp;lt;name&amp;gt; &amp;lt;namespace uuid&amp;gt;&#xA;  uuid v4&#xA;  uuid v5 &amp;lt;name&amp;gt; &amp;lt;namespace uuid&amp;gt;&#xA;  uuid --help&#xA;&#xA;Note: &amp;lt;namespace uuid&amp;gt; may be &#34;URL&#34; or &#34;DNS&#34; to use the corresponding UUIDs&#xA;defined by RFC4122&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;ECMAScript Modules&lt;/h2&gt; &#xA;&lt;p&gt;This library comes with &lt;a href=&#34;https://www.ecma-international.org/ecma-262/6.0/#sec-modules&#34;&gt;ECMAScript Modules&lt;/a&gt; (ESM) support for Node.js versions that support it (&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/examples/node-esmodules/&#34;&gt;example&lt;/a&gt;) as well as bundlers like &lt;a href=&#34;https://rollupjs.org/guide/en/#tree-shaking&#34;&gt;rollup.js&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/examples/browser-rollup/&#34;&gt;example&lt;/a&gt;) and &lt;a href=&#34;https://webpack.js.org/guides/tree-shaking/&#34;&gt;webpack&lt;/a&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/examples/browser-webpack/&#34;&gt;example&lt;/a&gt;) (targeting both, Node.js and browser environments).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v4 as uuidv4 } from &#39;uuid&#39;;&#xA;uuidv4(); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the examples you must first create a dist build of this library in the module root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CDN Builds&lt;/h2&gt; &#xA;&lt;h3&gt;ECMAScript Modules&lt;/h3&gt; &#xA;&lt;p&gt;To load this module directly into modern browsers that &lt;a href=&#34;https://caniuse.com/#feat=es6-module&#34;&gt;support loading ECMAScript Modules&lt;/a&gt; you can make use of &lt;a href=&#34;https://jspm.org/&#34;&gt;jspm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&#34;module&#34;&amp;gt;&#xA;  import { v4 as uuidv4 } from &#39;https://jspm.dev/uuid&#39;;&#xA;  console.log(uuidv4()); // ⇨ &#39;1b9d6bcd-bbfd-4b2d-9b5d-ab8dfbbd4bed&#39;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;UMD&lt;/h3&gt; &#xA;&lt;p&gt;As of &lt;code&gt;uuid@9&lt;/code&gt; &lt;a href=&#34;https://github.com/umdjs/umd&#34;&gt;UMD (Universal Module Definition)&lt;/a&gt; builds are no longer shipped with this library.&lt;/p&gt; &#xA;&lt;p&gt;If you need a UMD build of this library, use a bundler like Webpack or Rollup. Alternatively, refer to the documentation of &lt;a href=&#34;https://github.com/uuidjs/uuid/raw/v8.3.2/README.md#umd&#34;&gt;&lt;code&gt;uuid@8.3.2&lt;/code&gt;&lt;/a&gt; which was the last version that shipped UMD builds.&lt;/p&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;h3&gt;Duplicate UUIDs (Googlebot)&lt;/h3&gt; &#xA;&lt;p&gt;This module may generate duplicate UUIDs when run in clients with &lt;em&gt;deterministic&lt;/em&gt; random number generators, such as &lt;a href=&#34;https://developers.google.com/search/docs/advanced/crawling/overview-google-crawlers&#34;&gt;Googlebot crawlers&lt;/a&gt;. This can cause problems for apps that expect client-generated UUIDs to always be unique. Developers should be prepared for this and have a strategy for dealing with possible collisions, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Check for duplicate UUIDs, fail gracefully&lt;/li&gt; &#xA; &lt;li&gt;Disable write operations for Googlebot clients&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&#34;getRandomValues() not supported&#34;&lt;/h3&gt; &#xA;&lt;p&gt;This error occurs in environments where the standard &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues&#34;&gt;&lt;code&gt;crypto.getRandomValues()&lt;/code&gt;&lt;/a&gt; API is not supported. This issue can be resolved by adding an appropriate polyfill:&lt;/p&gt; &#xA;&lt;h3&gt;React Native / Expo&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://github.com/LinusU/react-native-get-random-values#readme&#34;&gt;&lt;code&gt;react-native-get-random-values&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Import it &lt;em&gt;before&lt;/em&gt; &lt;code&gt;uuid&lt;/code&gt;. Since &lt;code&gt;uuid&lt;/code&gt; might also appear as a transitive dependency of some other imports it&#39;s safest to just import &lt;code&gt;react-native-get-random-values&lt;/code&gt; as the very first thing in your entry point:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;react-native-get-random-values&#39;;&#xA;import { v4 as uuidv4 } from &#39;uuid&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: If you are using Expo, you must be using at least &lt;code&gt;react-native-get-random-values@1.5.0&lt;/code&gt; and &lt;code&gt;expo@39.0.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Web Workers / Service Workers (Edge &amp;lt;= 18)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://caniuse.com/#feat=cryptography&#34;&gt;In Edge &amp;lt;= 18, Web Crypto is not supported in Web Workers or Service Workers&lt;/a&gt; and we are not aware of a polyfill (let us know if you find one, please).&lt;/p&gt; &#xA;&lt;h3&gt;IE 11 (Internet Explorer)&lt;/h3&gt; &#xA;&lt;p&gt;Support for IE11 and other legacy browsers has been dropped as of &lt;code&gt;uuid@9&lt;/code&gt;. If you need to support legacy browsers, you can always transpile the uuid module source yourself (e.g. using &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading From &lt;code&gt;uuid@7&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Only Named Exports Supported When Using with Node.js ESM&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;uuid@7&lt;/code&gt; did not come with native ECMAScript Module (ESM) support for Node.js. Importing it in Node.js ESM consequently imported the CommonJS source with a default export. This library now comes with true Node.js ESM support and only provides named exports.&lt;/p&gt; &#xA;&lt;p&gt;Instead of doing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import uuid from &#39;uuid&#39;;&#xA;uuid.v4();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you will now have to use the named exports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v4 as uuidv4 } from &#39;uuid&#39;;&#xA;uuidv4();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deep Requires No Longer Supported&lt;/h3&gt; &#xA;&lt;p&gt;Deep requires like &lt;code&gt;require(&#39;uuid/v4&#39;)&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#deep-requires-now-deprecated&#34;&gt;which have been deprecated in &lt;code&gt;uuid@7&lt;/code&gt;&lt;/a&gt; are no longer supported.&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading From &lt;code&gt;uuid@3&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&#34;&lt;em&gt;Wait... what happened to &lt;code&gt;uuid@4&lt;/code&gt; thru &lt;code&gt;uuid@6&lt;/code&gt;?!?&lt;/em&gt;&#34;&lt;/p&gt; &#xA;&lt;p&gt;In order to avoid confusion with RFC &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidv4options-buffer-offset&#34;&gt;version 4&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/#uuidv5name-namespace-buffer-offset&#34;&gt;version 5&lt;/a&gt; UUIDs, and a possible &lt;a href=&#34;http://gh.peabody.io/uuidv6/&#34;&gt;version 6&lt;/a&gt;, releases 4 thru 6 of this module have been skipped.&lt;/p&gt; &#xA;&lt;h3&gt;Deep Requires Now Deprecated&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;uuid@3&lt;/code&gt; encouraged the use of deep requires to minimize the bundle size of browser builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const uuidv4 = require(&#39;uuid/v4&#39;); // &amp;lt;== NOW DEPRECATED!&#xA;uuidv4();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As of &lt;code&gt;uuid@7&lt;/code&gt; this library now provides ECMAScript modules builds, which allow packagers like Webpack and Rollup to do &#34;tree-shaking&#34; to remove dead code. Instead, use the &lt;code&gt;import&lt;/code&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { v4 as uuidv4 } from &#39;uuid&#39;;&#xA;uuidv4();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or for CommonJS:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const { v4: uuidv4 } = require(&#39;uuid&#39;);&#xA;uuidv4();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Default Export Removed&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;uuid@3&lt;/code&gt; was exporting the Version 4 UUID method as a default export:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const uuid = require(&#39;uuid&#39;); // &amp;lt;== REMOVED!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This usage pattern was already discouraged in &lt;code&gt;uuid@3&lt;/code&gt; and has been removed in &lt;code&gt;uuid@7&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Markdown generated from &lt;a href=&#34;https://raw.githubusercontent.com/uuidjs/uuid/main/README_js.md&#34;&gt;README_js.md&lt;/a&gt; by &lt;a href=&#34;https://github.com/broofa/runmd&#34;&gt;&lt;img height=&#34;12px&#34; src=&#34;https://camo.githubusercontent.com/5c7c603cd1e6a43370b0a5063d457e0dabb74cf317adc7baba183acb686ee8d0/687474703a2f2f692e696d6775722e636f6d2f634a4b6f3662552e706e67&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>