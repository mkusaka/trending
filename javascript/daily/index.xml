<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-20T01:36:16Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HashLips/hashlips_art_engine</title>
    <updated>2022-09-20T01:36:16Z</updated>
    <id>tag:github.com,2022-09-20:/HashLips/hashlips_art_engine</id>
    <link href="https://github.com/HashLips/hashlips_art_engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HashLips Art Engine is a tool used to create multiple different instances of artworks based on provided layers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to HashLips üëÑ&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/HashLips/hashlips_art_engine/raw/main/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All the code in these repos was created and explained by HashLips on the main YouTube channel.&lt;/p&gt; &#xA;&lt;p&gt;To find out more please visit:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC1LV4_VQGBJHTJjEWUmy8nA&#34;&gt;üì∫ YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/qh6MWhMJDN&#34;&gt;üëÑ Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/hashlipsnft&#34;&gt;üí¨ Telegram&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashlipsnft&#34;&gt;üê¶ Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hashlips.online/HashLips&#34;&gt;‚ÑπÔ∏è Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HashLips Art Engine üî•&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/HashLips/hashlips_art_engine/raw/main/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create generative art by using the canvas api and node js. Before you use the generation engine, make sure you have node.js(v10.18.0) installed.&lt;/p&gt; &#xA;&lt;h2&gt;Installation üõ†Ô∏è&lt;/h2&gt; &#xA;&lt;p&gt;If you are cloning the project then run this first, otherwise you can download the source code on the release page and skip this step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/HashLips/hashlips_art_engine.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to the root of your folder and run this command if you have yarn installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can run this command if you have node installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage ‚ÑπÔ∏è&lt;/h2&gt; &#xA;&lt;p&gt;Create your different layers as folders in the &#39;layers&#39; directory, and add all the layer assets in these directories. You can name the assets anything as long as it has a rarity weight attached in the file name like so: &lt;code&gt;example element#70.png&lt;/code&gt;. You can optionally change the delimiter &lt;code&gt;#&lt;/code&gt; to anything you would like to use in the variable &lt;code&gt;rarityDelimiter&lt;/code&gt; in the &lt;code&gt;src/config.js&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Once you have all your layers, go into &lt;code&gt;src/config.js&lt;/code&gt; and update the &lt;code&gt;layerConfigurations&lt;/code&gt; objects &lt;code&gt;layersOrder&lt;/code&gt; array to be your layer folders name in order of the back layer to the front layer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; If you were creating a portrait design, you might have a background, then a head, a mouth, eyes, eyewear, and then headwear, so your &lt;code&gt;layersOrder&lt;/code&gt; would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const layerConfigurations = [&#xA;  {&#xA;    growEditionSizeTo: 100,&#xA;    layersOrder: [&#xA;      { name: &#34;Head&#34; },&#xA;      { name: &#34;Mouth&#34; },&#xA;      { name: &#34;Eyes&#34; },&#xA;      { name: &#34;Eyeswear&#34; },&#xA;      { name: &#34;Headwear&#34; },&#xA;    ],&#xA;  },&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; of each layer object represents the name of the folder (in &lt;code&gt;/layers/&lt;/code&gt;) that the images reside in.&lt;/p&gt; &#xA;&lt;p&gt;Optionally you can now add multiple different &lt;code&gt;layerConfigurations&lt;/code&gt; to your collection. Each configuration can be unique and have different layer orders, use the same layers or introduce new ones. This gives the artist flexibility when it comes to fine tuning their collections to their needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; If you were creating a portrait design, you might have a background, then a head, a mouth, eyes, eyewear, and then headwear and you want to create a new race or just simple re-order the layers or even introduce new layers, then you&#39;re &lt;code&gt;layerConfigurations&lt;/code&gt; and &lt;code&gt;layersOrder&lt;/code&gt; would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const layerConfigurations = [&#xA;  {&#xA;    // Creates up to 50 artworks&#xA;    growEditionSizeTo: 50,&#xA;    layersOrder: [&#xA;      { name: &#34;Background&#34; },&#xA;      { name: &#34;Head&#34; },&#xA;      { name: &#34;Mouth&#34; },&#xA;      { name: &#34;Eyes&#34; },&#xA;      { name: &#34;Eyeswear&#34; },&#xA;      { name: &#34;Headwear&#34; },&#xA;    ],&#xA;  },&#xA;  {&#xA;    // Creates an additional 100 artworks&#xA;    growEditionSizeTo: 150,&#xA;    layersOrder: [&#xA;      { name: &#34;Background&#34; },&#xA;      { name: &#34;Head&#34; },&#xA;      { name: &#34;Eyes&#34; },&#xA;      { name: &#34;Mouth&#34; },&#xA;      { name: &#34;Eyeswear&#34; },&#xA;      { name: &#34;Headwear&#34; },&#xA;      { name: &#34;AlienHeadwear&#34; },&#xA;    ],&#xA;  },&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;format&lt;/code&gt; size, ie the outputted image size, and the &lt;code&gt;growEditionSizeTo&lt;/code&gt; on each &lt;code&gt;layerConfigurations&lt;/code&gt; object, which is the amount of variation outputted.&lt;/p&gt; &#xA;&lt;p&gt;You can mix up the &lt;code&gt;layerConfigurations&lt;/code&gt; order on how the images are saved by setting the variable &lt;code&gt;shuffleLayerConfigurations&lt;/code&gt; in the &lt;code&gt;config.js&lt;/code&gt; file to true. It is false by default and will save all images in numerical order.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have logs to debug and see what is happening when you generate images you can set the variable &lt;code&gt;debugLogs&lt;/code&gt; in the &lt;code&gt;config.js&lt;/code&gt; file to true. It is false by default, so you will only see general logs.&lt;/p&gt; &#xA;&lt;p&gt;If you want to play around with different blending modes, you can add a &lt;code&gt;blend: MODE.colorBurn&lt;/code&gt; field to the layersOrder &lt;code&gt;options&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;If you need a layers to have a different opacity then you can add the &lt;code&gt;opacity: 0.7&lt;/code&gt; field to the layersOrder &lt;code&gt;options&lt;/code&gt; object as well.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a layer &lt;em&gt;ignored&lt;/em&gt; in the DNA uniqueness check, you can set &lt;code&gt;bypassDNA: true&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; object. This has the effect of making sure the rest of the traits are unique while not considering the &lt;code&gt;Background&lt;/code&gt; Layers as traits, for example. The layers &lt;em&gt;are&lt;/em&gt; included in the final image.&lt;/p&gt; &#xA;&lt;p&gt;To use a different metadata attribute name you can add the &lt;code&gt;displayName: &#34;Awesome Eye Color&#34;&lt;/code&gt; to the &lt;code&gt;options&lt;/code&gt; object. All options are optional and can be addes on the same layer if you want to.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example on how you can play around with both filter fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const layerConfigurations = [&#xA;  {&#xA;    growEditionSizeTo: 5,&#xA;    layersOrder: [&#xA;      { name: &#34;Background&#34; , {&#xA;        options: {&#xA;          bypassDNA: false;&#xA;        }&#xA;      }},&#xA;      { name: &#34;Eyeball&#34; },&#xA;      {&#xA;        name: &#34;Eye color&#34;,&#xA;        options: {&#xA;          blend: MODE.destinationIn,&#xA;          opacity: 0.2,&#xA;          displayName: &#34;Awesome Eye Color&#34;,&#xA;        },&#xA;      },&#xA;      { name: &#34;Iris&#34; },&#xA;      { name: &#34;Shine&#34; },&#xA;      { name: &#34;Bottom lid&#34;, options: { blend: MODE.overlay, opacity: 0.7 } },&#xA;      { name: &#34;Top lid&#34; },&#xA;    ],&#xA;  },&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a list of the different blending modes that you can optionally use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const MODE = {&#xA;  sourceOver: &#34;source-over&#34;,&#xA;  sourceIn: &#34;source-in&#34;,&#xA;  sourceOut: &#34;source-out&#34;,&#xA;  sourceAtop: &#34;source-out&#34;,&#xA;  destinationOver: &#34;destination-over&#34;,&#xA;  destinationIn: &#34;destination-in&#34;,&#xA;  destinationOut: &#34;destination-out&#34;,&#xA;  destinationAtop: &#34;destination-atop&#34;,&#xA;  lighter: &#34;lighter&#34;,&#xA;  copy: &#34;copy&#34;,&#xA;  xor: &#34;xor&#34;,&#xA;  multiply: &#34;multiply&#34;,&#xA;  screen: &#34;screen&#34;,&#xA;  overlay: &#34;overlay&#34;,&#xA;  darken: &#34;darken&#34;,&#xA;  lighten: &#34;lighten&#34;,&#xA;  colorDodge: &#34;color-dodge&#34;,&#xA;  colorBurn: &#34;color-burn&#34;,&#xA;  hardLight: &#34;hard-light&#34;,&#xA;  softLight: &#34;soft-light&#34;,&#xA;  difference: &#34;difference&#34;,&#xA;  exclusion: &#34;exclusion&#34;,&#xA;  hue: &#34;hue&#34;,&#xA;  saturation: &#34;saturation&#34;,&#xA;  color: &#34;color&#34;,&#xA;  luminosity: &#34;luminosity&#34;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you are ready, run the following command and your outputted art will be in the &lt;code&gt;build/images&lt;/code&gt; directory and the json in the &lt;code&gt;build/json&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;node index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The program will output all the images in the &lt;code&gt;build/images&lt;/code&gt; directory along with the metadata files in the &lt;code&gt;build/json&lt;/code&gt; directory. Each collection will have a &lt;code&gt;_metadata.json&lt;/code&gt; file that consists of all the metadata in the collection inside the &lt;code&gt;build/json&lt;/code&gt; directory. The &lt;code&gt;build/json&lt;/code&gt; folder also will contain all the single json files that represent each image file. The single json file of a image will look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;dna&#34;: &#34;d956cdf4e460508b5ff90c21974124f68d6edc34&#34;,&#xA;  &#34;name&#34;: &#34;#1&#34;,&#xA;  &#34;description&#34;: &#34;This is the description of your NFT project&#34;,&#xA;  &#34;image&#34;: &#34;https://hashlips/nft/1.png&#34;,&#xA;  &#34;edition&#34;: 1,&#xA;  &#34;date&#34;: 1731990799975,&#xA;  &#34;attributes&#34;: [&#xA;    { &#34;trait_type&#34;: &#34;Background&#34;, &#34;value&#34;: &#34;Black&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Eyeball&#34;, &#34;value&#34;: &#34;Red&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Eye color&#34;, &#34;value&#34;: &#34;Yellow&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Iris&#34;, &#34;value&#34;: &#34;Small&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Shine&#34;, &#34;value&#34;: &#34;Shapes&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Bottom lid&#34;, &#34;value&#34;: &#34;Low&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Top lid&#34;, &#34;value&#34;: &#34;Middle&#34; }&#xA;  ],&#xA;  &#34;compiler&#34;: &#34;HashLips Art Engine&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add extra metadata to each metadata file by adding your extra items, (key: value) pairs to the &lt;code&gt;extraMetadata&lt;/code&gt; object variable in the &lt;code&gt;config.js&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const extraMetadata = {&#xA;  creator: &#34;Daniel Eugene Botha&#34;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t need extra metadata, simply leave the object empty. It is empty by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const extraMetadata = {};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, you&#39;re done.&lt;/p&gt; &#xA;&lt;h2&gt;Utils&lt;/h2&gt; &#xA;&lt;h3&gt;Updating baseUri for IPFS and description&lt;/h3&gt; &#xA;&lt;p&gt;You might possibly want to update the baseUri and description after you have ran your collection. To update the baseUri and description simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run update_info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a preview image&lt;/h3&gt; &#xA;&lt;p&gt;Create a preview image collage of your collection, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate pixelated images from collection&lt;/h3&gt; &#xA;&lt;p&gt;In order to convert images into pixelated images you would need a list of images that you want to convert. So run the generator first.&lt;/p&gt; &#xA;&lt;p&gt;Then simply run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run pixelate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All your images will be outputted in the &lt;code&gt;/build/pixel_images&lt;/code&gt; directory. If you want to change the ratio of the pixelation then you can update the ratio property on the &lt;code&gt;pixelFormat&lt;/code&gt; object in the &lt;code&gt;src/config.js&lt;/code&gt; file. The lower the number on the left, the more pixelated the image will be.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const pixelFormat = {&#xA;  ratio: 5 / 128,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate GIF images from collection&lt;/h3&gt; &#xA;&lt;p&gt;In order to export gifs based on the layers created, you just need to set the export on the &lt;code&gt;gif&lt;/code&gt; object in the &lt;code&gt;src/config.js&lt;/code&gt; file to &lt;code&gt;true&lt;/code&gt;. You can also play around with the &lt;code&gt;repeat&lt;/code&gt;, &lt;code&gt;quality&lt;/code&gt; and the &lt;code&gt;delay&lt;/code&gt; of the exported gif.&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;repeat: -1&lt;/code&gt; will produce a one time render and &lt;code&gt;repeat: 0&lt;/code&gt; will loop forever.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const gif = {&#xA;  export: true,&#xA;  repeat: 0,&#xA;  quality: 100,&#xA;  delay: 500,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Printing rarity data (Experimental feature)&lt;/h3&gt; &#xA;&lt;p&gt;To see the percentages of each attribute across your collection, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run rarity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Trait type: Top lid&#xA;{&#xA;  trait: &#39;High&#39;,&#xA;  chance: &#39;30&#39;,&#xA;  occurrence: &#39;3 in 20 editions (15.00 %)&#39;&#xA;}&#xA;{&#xA;  trait: &#39;Low&#39;,&#xA;  chance: &#39;20&#39;,&#xA;  occurrence: &#39;3 in 20 editions (15.00 %)&#39;&#xA;}&#xA;{&#xA;  trait: &#39;Middle&#39;,&#xA;  chance: &#39;50&#39;,&#xA;  occurrence: &#39;14 in 20 editions (70.00 %)&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hope you create some awesome artworks with this code üëÑ&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jonasschmedtmann/complete-node-bootcamp</title>
    <updated>2022-09-20T01:36:16Z</updated>
    <id>tag:github.com,2022-09-20:/jonasschmedtmann/complete-node-bootcamp</id>
    <link href="https://github.com/jonasschmedtmann/complete-node-bootcamp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter files, final projects and FAQ for my Complete Node.js Bootcamp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Course Material and FAQ for my Complete Node.js, Express and MongoDB Bootcamp&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains starter files and the finished project files for all the projects contained in the course (complete repo size is &lt;strong&gt;288MB&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Use starter code to start each section, and &lt;strong&gt;final code to compare it with your own code whenever something doesn&#39;t work&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Plus, I made all the &lt;a href=&#34;https://raw.githubusercontent.com/jonasschmedtmann/complete-node-bootcamp/master/theory-lectures.pdf&#34;&gt;course slides available for download&lt;/a&gt;, to make it easier to follow along the theory videos.&lt;/p&gt; &#xA;&lt;p&gt;üëá &lt;strong&gt;&lt;em&gt;Please read the following Frequently Asked Questions (FAQ) carefully before starting the course&lt;/em&gt;&lt;/strong&gt; üëá&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Q1: How do I download the files?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; If you&#39;re new to GitHub and just want to download the entire code, hit the green button saying &#34;Code&#34;, and then choose the &#34;Download ZIP&#34; option.&lt;/p&gt; &#xA;&lt;h3&gt;Q2: I&#39;m stuck in one of the projects. Where do I get help?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Have you actually tried to fix the problem on your own? Have you compared your code to the final code? If you failed fixing your problem, please &lt;strong&gt;post a detailed description of the problem to the Q&amp;amp;A area of that video over at Udemy&lt;/strong&gt;, along with a &lt;a href=&#34;https://codepen.io/pen/&#34;&gt;codepen&lt;/a&gt; containing your code. You will get help there. Please don&#39;t send me a personal message or email to fix coding problems.&lt;/p&gt; &#xA;&lt;h3&gt;Q3: What VSCode theme are you using?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; I use Oceanic Next (dimmed bg) for all my coding and course production. &lt;a href=&#34;https://raw.githubusercontent.com/jonasschmedtmann/complete-node-bootcamp/master/vscode-setup.md&#34;&gt;Here is my complete VSCode setup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q4: Can I see a final version of the course projects?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Absolutely! The main project is &lt;a href=&#34;https://www.natours.dev/&#34;&gt;Natours&lt;/a&gt; (it even got its own domain üòé). You can log in with &lt;code&gt;laura@example.com&lt;/code&gt; and password &lt;code&gt;test1234&lt;/code&gt;. There is also an API at &lt;code&gt;/api&lt;/code&gt;, with &lt;a href=&#34;https://documenter.getpostman.com/view/4237486/S1LwxnaE?version=latest&#34;&gt;documentation available here&lt;/a&gt; (incomplete). The small Node.js introduction project is &lt;a href=&#34;https://node-farm.herokuapp.com/&#34;&gt;Node Farm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q5: Videos don&#39;t load, can you fix it?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Unfortunately, there is nothing I can do about it. The course is hosted on Udemy, and sometimes they have technical issues like this. Please just come back a bit later or &lt;a href=&#34;https://support.udemy.com/hc/en-us&#34;&gt;contact their support team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q6: Videos are blurred / have low quality, can you fix it?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Please open video settings and change the quality from &#39;Auto&#39; to another value, for example 720p. If that doesn&#39;t help, please &lt;a href=&#34;https://support.udemy.com/hc/en-us&#34;&gt;contact the Udemy support team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q7: Are the videos downloadable?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Yes! I made all videos downloadable from Udemy so you can learn even without an internet connection. To download a video, use the settings icon in the right bottom corner of the video player. Videos have to be downloaded individually.&lt;/p&gt; &#xA;&lt;h3&gt;Q8: I want to put the project in my portfolio. Is that allowed?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; Absolutely! Just make sure you actually built it yourself by following the course, and that you understand what you did. What is &lt;strong&gt;not allowed&lt;/strong&gt; is that you create your own course/videos/articles based on this course&#39;s content!&lt;/p&gt; &#xA;&lt;h3&gt;Q9: I love your courses and want to get updates on new courses. How?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; First, you can subscribe to my email list &lt;a href=&#34;http://codingheroes.io/resources&#34;&gt;at my website&lt;/a&gt;. Plus, I make important announcements on twitter &lt;a href=&#34;https://twitter.com/jonasschmedtman&#34;&gt;@jonasschmedtman&lt;/a&gt;, so you should definitely follow me there üî•&lt;/p&gt; &#xA;&lt;h3&gt;Q10: How do I get my certificate of completion?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; A certificate of completion is provided by Udemy after you complete 100% of the course. After completing the course, just click on the &#34;Your progress&#34; indicator in the top right-hand corner of the course page. If you want to change your name on the certificate, please &lt;a href=&#34;https://support.udemy.com/hc/en-us&#34;&gt;contact the Udemy support team&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Q11: Do you accept pull requests?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;A:&lt;/strong&gt; No, for the simple reason that I want this repository to contain the &lt;em&gt;exact&lt;/em&gt; same code that is shown in the videos. However, please feel free to add an issue if you found one.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>djerryz/Sheep_Sheep_Ni</title>
    <updated>2022-09-20T01:36:16Z</updated>
    <id>tag:github.com,2022-09-20:/djerryz/Sheep_Sheep_Ni</id>
    <link href="https://github.com/djerryz/Sheep_Sheep_Ni" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Áæä‰∫Ü‰∏™Áæä- ÂâçÁ´ØÊ∫êÁ†Å‰∏éÊé•Âè£ÂàÜÊûê&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt;&#xA; &lt;img src=&#34;https://raw.githubusercontent.com/djerryz/Sheep_Sheep_Ni/main/pic/logo.png&#34;&gt;&#xA;&lt;/div&gt; &#xA;&lt;p&gt;üêç &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/djerryz/Sheep_Sheep_Ni/main/v1/README.md&#34;&gt;Êü•Áúãv1ÁâàÊú¨&lt;/a&gt;&lt;/strong&gt; üêç&lt;/p&gt; &#xA;&lt;h1&gt;üêè‰∫Ü‰∏™üêè - v2&lt;/h1&gt; &#xA;&lt;h2&gt;‰∏Ä„ÄÅÂÆåÊàê‰∏ÄÊ¨°ÊåëÊàò&lt;/h2&gt; &#xA;&lt;h3&gt;Ê≠£Â∏∏ÊµÅÁ®ã&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;GET /sheep/v1/game/map_info_ex?matchType=3&lt;/p&gt; &lt;p&gt;ÊãøÂà∞ map_md5 Âíå map_seed&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;POST /sheep/v1/game/game_over_ex?&lt;/p&gt; &lt;p&gt;Êèê‰∫§ MatchPlayInfo&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Áî®Êà∑ÂÆåÊàêÊ∏∏ÊàèÔºåÂ∞èÁ®ãÂ∫èÁÆóÂá∫MatchPlayInfoÁöÑÂêéÔºåÂèëËµ∑game_overËØ∑Ê±Ç&lt;/p&gt; &#xA;&lt;h3&gt;ÂàÜÊûêÁÆóÊ≥ï&lt;/h3&gt; &#xA;&lt;p&gt;‰ª£Á†ÅÂ∑≤ÁªèÊèêÂèñÂà∞v2/index.js, ÂàÜÊûê MatchPlayInfo ÊòØÂ¶Ç‰ΩïÁÆóÂá∫Êù•ÁöÑÔºå‰∏ç‰∏ÄÂÆöÊ≠£Á°ÆÔºå‰ªÖ‰æõÂèÇËÄÉÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 1. ËøõÂÖ•Ê∏∏Êàè -&amp;gt; Ë∞ÉÁî®Âä†ËΩΩÂú∞ÂõæÁöÑ‰∏§‰∏™ÂáΩÊï∞ getTodayMap , getLevelMapData, -&amp;gt; ÂÜçË∞ÉÁî®‰∫Ü beginGameData&#xA;e.prototype.beginGame = function() {&#xA;    var t = this;&#xA;    cc.game.emit(s.EMITKEY.TTSTARTRECORD), this.gameLayer.activeInHierarchy ? console.log(&#34;Â∑≤ÁªèÊâìÂºÄ mainLayer 1&#34;) : c.default.getTodayMap(h.default.getInstance().gameType, function() {&#xA;        for (var e = h.default.getInstance().mapMd5s, o = [], n = 0, i = function(i) {&#xA;            c.default.getLevelMapData(e[i], function(a) {&#xA;                n++, o[i] = a, n == e.length &amp;amp;&amp;amp; (t.beginGameData(o), d.default.setGameLevelData(o));&#xA;            });&#xA;        }, a = 0; a &amp;lt; e.length; a++) i(a);&#xA;    });&#xA;}&#xA;&#xA;// 2.1 Âä†ËΩΩÂú∞Âõæ&#xA;// getLevelMapData-&amp;gt;&#xA;t.loadMapDataFromLocalStorageOrNetWork = function(e) {&#xA;    return new Promise(function(o, n) {&#xA;        var i = s.STORAGEKEY.GAMEMAP + e, a = t.getItem(i);&#xA;        if (a) o(a); else {&#xA;            var r = &#34;https://cat-match-static.easygame2021.com/maps/&#34; + e + &#34;.txt&#34;;&#xA;            cc.assetManager.loadRemote(r, {&#xA;                ext: &#34;.txt&#34;&#xA;            }, function(e, a) {&#xA;                e ? n() : (t.setItem(i, a.text, 604800), o(a.text));&#xA;            });&#xA;        }&#xA;    });&#xA;}&#xA;// 2.2 Âä†ËΩΩÂú∞Âõæ&#xA;// getTodayMap-&amp;gt;&#xA;t.getTodayMap = function(t, e) {&#xA;    p.default.get({&#xA;        url: &#34;/sheep/v1/game/map_info_ex&#34;,&#xA;        params: {&#xA;            matchType: t&#xA;        },&#xA;        success: function(t) {&#xA;            0 == t.err_code ? (i.default.getInstance().mapMd5s = t.data.map_md5, i.default.getInstance().seed = t.data.map_seed, &#xA;                               r.XorShift.instance.setSeed(t.data.map_seed), r.XorShift.instance.random(), e &amp;amp;&amp;amp; e()) : cc.game.emit(&#34;showTips&#34;, &#34;ËØªÂèñÂú∞ÂõæÂ§±Ë¥•&#34;);&#xA;        }&#xA;    });&#xA;}&#xA;&#xA;// 3. Â§ÑÁêÜÊ∏∏ÊàèÊï∞ÊçÆ --&amp;gt; Ë∞ÉÁî®initLevelLayer&#xA;e.prototype.beginGameData = function(t) {&#xA;    var e = this;&#xA;    cc.game.emit(s.EMITKEY.SHOWTRANSITLAYER, function(o) {&#xA;        e.gameLayer.activeInHierarchy ? console.log(&#34;Â∑≤ÁªèÊâìÂºÄ mainLayer 2&#34;) : (console.log(&#34;ÂèØ‰ª•ÊâìÂºÄ‰∫Ü mainLayer&#34;), &#xA;                                                                           e.gameLayer.getComponent(p.default).initLevelLayer(t), e.node.active = !1, o());&#xA;    });&#xA;},&#xA;     &#xA;// 4. ÂàùÂßãÁ≠âÁ∫ßÂ±Ç? --&amp;gt; ÂàùÂßãÂåñlevelDataArray&#xA;e.prototype.initLevelLayer = function(t) {&#xA;&#x9;this.levelDataArray = JSON.parse(JSON.stringify(t));&#xA;&#xA;// 5. ÂºÄÂßãÊåëÊàò --&amp;gt; ‰ΩøÁî® levelDataArray, Âπ∂Ë∞ÉÁî®initNextLevelMap&#xA;e.prototype.playNextLevelMap = function() {&#xA;&#x9;var e = JSON.parse(JSON.stringify(this.levelDataArray))[this.playLevelNum];&#xA;&#x9;this.gameIsWin = !1, this.gameIsStopFunc(!1), this.adaptScreen(), this.chessboard.getComponent(u.default).initNextLevelMap(e, this),&#xA;&#xA;// 6. ‰∏ãÁ∫ßÂú∞Âõæ --&amp;gt; Ë∞ÉÁî®initBlockNodeLayer&#xA;e.prototype.initNextLevelMap = function(t, e) {&#xA;    this.initBlockNodeLayer(!1), cc.game.emit(l.EMITKEY.SHOWMASKLAYER, 3), this.refreshIndex(), &#xA;&#xA;// 7. initBlockNodeLayer --&amp;gt; ËÆæÁΩÆcardId&#xA;e.prototype.initBlockNodeLayer = function(t) {&#xA;&#x9;var e = this.nowLevelData.levelData, o = 0;&#xA;    for (var n in e) for (var i in e[n]) e[n][i].cardId = o, o++, t ? this.addBlockFunc(e[n][i], cc.winSize.height) : this.addBlockFunc(e[n][i], 0);&#xA;&#xA;// 8. addOp --&amp;gt; ‰ΩøÁî®cardId&#xA;addOp(t.cardDataObj.cardId)&#xA;&#xA;// 9. addOpÂä®‰ΩúÂ°´ÂÖÖ operationList&#xA;t.prototype.addOp = function(t, e) {&#xA;                void 0 === e &amp;amp;&amp;amp; (e = -100);&#xA;                var o = {&#xA;                    id: t,&#xA;                    time: Date.now()&#xA;                };&#xA;                this.operationList.push(o);&#xA;            }&#xA;&#xA;//10. operationListÁÆóÂá∫p&#xA;for (var u = g.default.getInstance().operationList, p = [], d = 0, h = 0; h &amp;lt; u.length; h++) &#xA;    p.push({&#xA;        chessIndex: u[h].id,&#xA;        timeTag: 0 == d ? 0 : u[h].time - d&#xA;    })&#xA;    d = u[h].time;&#xA;&#xA;// 11. pÁÆóÂá∫f&#xA;var f = {&#xA;    gameType: g.default.getInstance().gameType,&#xA;    stepInfoList: p&#xA;},&#xA;                     &#xA;// 12. fÂàùÂßãÂåñMatchPlayInfo(), ÂæóÂà∞ v&#xA;v = k.protocol.MatchPlayInfo.encode(k.protocol.MatchPlayInfo.create(f)).finish()&#xA;‰ª§f_c = create(f) = new t(e) = function t(t) {if (this.stepInfoList = [], t) for (var e = Object.keys(t), o = 0; o &amp;lt; e.length; ++o) null != t[e[o]] &amp;amp;&amp;amp; (this[e[o]] = t[e[o]]);}&#xA;encode(f_c) = for (var o = 0; o &amp;lt; t.stepInfoList.length; ++o) c.protocol.MatchStepInfo.encode(t.stepInfoList[o], e.uint32(34).fork()).ldelim();&#xA;        &#xA;// 13. ÈÄöËøávÁÆóÂá∫b&#xA;b = &#34;&#34;, _ = 0; _ &amp;lt; v.length; _++) b += String.fromCharCode(v[_]);&#xA;&#xA;// 14. base64ÁºñÁ†Åb,ÂæóÂà∞ MatchPlayInfo&#xA;MatchPlayInfo: S.default.base64_encode(b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Âä®ÊÄÅË∞ÉËØïÔºåÂú®Ê≠•È™§11ÊâìÊñ≠ÁÇπÔºåËßÇÂØü10ÁîüÊàêÁöÑpÂ∫îËØ•ÊòØÊúâËßÑÂæãÁöÑÔºåËÉΩÁ°ÆËÆ§pÂç≥ÂèØÁ°ÆËÆ§MatchPlayInfo„ÄÇ&lt;/p&gt;</summary>
  </entry>
</feed>