<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-20T01:39:04Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>copy/v86</title>
    <updated>2022-08-20T01:39:04Z</updated>
    <id>tag:github.com,2022-08-20:/copy/v86</id>
    <link href="https://github.com/copy/v86" rel="alternate"></link>
    <summary type="html">&lt;p&gt;x86 virtualization in your browser, recompiling x86 to wasm on the fly&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://gitter.im/copy/v86&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/copy/v86&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;v86 emulates an x86-compatible CPU and hardware. Machine code is translated to WebAssembly modules at runtime in order to achieve decent performance. Here&#39;s a list of emulated hardware:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An x86-compatible CPU. The instruction set is around Pentium III level, including full SSE2 support. Some features are missing, in particular: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Task gates, far calls in protected mode&lt;/li&gt; &#xA;   &lt;li&gt;Some 16 bit protected mode features&lt;/li&gt; &#xA;   &lt;li&gt;Single stepping (trap flag, debug registers)&lt;/li&gt; &#xA;   &lt;li&gt;Some exceptions, especially floating point and SSE&lt;/li&gt; &#xA;   &lt;li&gt;Multicore&lt;/li&gt; &#xA;   &lt;li&gt;64-bit extensions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;A floating point unit (FPU). Calculations are done using the Berkeley SoftFloat library and therefore should be precise (but slow). Trigonometric and log functions are emulated using 64-bit floats and may be less precise. Not all FPU exceptions are supported.&lt;/li&gt; &#xA; &lt;li&gt;A floppy disk controller (8272A).&lt;/li&gt; &#xA; &lt;li&gt;An 8042 Keyboard Controller, PS2. With mouse support.&lt;/li&gt; &#xA; &lt;li&gt;An 8254 Programmable Interval Timer (PIT).&lt;/li&gt; &#xA; &lt;li&gt;An 8259 Programmable Interrupt Controller (PIC).&lt;/li&gt; &#xA; &lt;li&gt;Partial APIC support.&lt;/li&gt; &#xA; &lt;li&gt;A CMOS Real Time Clock (RTC).&lt;/li&gt; &#xA; &lt;li&gt;A generic VGA card with SVGA support and Bochs VBE Extensions.&lt;/li&gt; &#xA; &lt;li&gt;A PCI bus. This one is partly incomplete and not used by every device.&lt;/li&gt; &#xA; &lt;li&gt;An IDE disk controller.&lt;/li&gt; &#xA; &lt;li&gt;An NE2000 (8390) PCI network card.&lt;/li&gt; &#xA; &lt;li&gt;A virtio filesystem.&lt;/li&gt; &#xA; &lt;li&gt;A SoundBlaster 16 sound card.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://copy.sh/v86/?profile=archlinux&#34;&gt;Arch Linux&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=dsl&#34;&gt;Damn Small Linux&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=buildroot&#34;&gt;Buildroot Linux&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=reactos&#34;&gt;ReactOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows2000&#34;&gt;Windows 2000&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows98&#34;&gt;Windows 98&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows95&#34;&gt;Windows 95&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=windows1&#34;&gt;Windows 1.01&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=msdos&#34;&gt;MS-DOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=freedos&#34;&gt;FreeDOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=freebsd&#34;&gt;FreeBSD&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=openbsd&#34;&gt;OpenBSD&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=9front&#34;&gt;9front&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=haiku&#34;&gt;Haiku&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=oberon&#34;&gt;Oberon&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=kolibrios&#34;&gt;KolibriOS&lt;/a&gt; — &lt;a href=&#34;https://copy.sh/v86/?profile=qnx&#34;&gt;QNX&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an overview of the operating systems supported in v86:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux works pretty well. 64-bit kernels are not supported. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Damn Small Linux (2.4 Kernel) works.&lt;/li&gt; &#xA;   &lt;li&gt;All tested versions of TinyCore work.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://buildroot.uclibc.org&#34;&gt;Buildroot&lt;/a&gt; can be used to build a minimal image. &lt;a href=&#34;https://github.com/humphd/browser-vm&#34;&gt;humphd/browser-vm&lt;/a&gt; and &lt;a href=&#34;https://github.com/Darin755/browser-buildroot&#34;&gt;darin755/browser-buildroot&lt;/a&gt; have some useful scripts for building one.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/skiffos/SkiffOS/tree/master/configs/browser/v86&#34;&gt;SkiffOS&lt;/a&gt; (based on Buildroot) can cross-compile a custom image.&lt;/li&gt; &#xA;   &lt;li&gt;Archlinux works. See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/docs/archlinux.md&#34;&gt;archlinux.md&lt;/a&gt; for building an image.&lt;/li&gt; &#xA;   &lt;li&gt;Debian works. An image can be built from a Dockerfile, see &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tools/docker/debian/&#34;&gt;tools/docker/debian/&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Ubuntu up to 16.04 works.&lt;/li&gt; &#xA;   &lt;li&gt;Alpine Linux works.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;ReactOS works.&lt;/li&gt; &#xA; &lt;li&gt;FreeDOS, Windows 1.01 and MS-DOS run very well.&lt;/li&gt; &#xA; &lt;li&gt;KolibriOS works.&lt;/li&gt; &#xA; &lt;li&gt;Haiku works.&lt;/li&gt; &#xA; &lt;li&gt;Android x86 1.6-r2 works if one selects VESA mode at the boot prompt. Newer versions may work if compiled without SSE3. See &lt;a href=&#34;https://github.com/copy/v86/issues/224&#34;&gt;#224&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Windows 1, 3.0, 95, 98, ME and 2000 work. Other versions currently don&#39;t (see &lt;a href=&#34;https://github.com/copy/v86/issues/86&#34;&gt;#86&lt;/a&gt;, &lt;a href=&#34;https://github.com/copy/v86/issues/208&#34;&gt;#208&lt;/a&gt;). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In Windows 2000 and higher the PC type has to be changed from ACPI PC to Standard PC&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Many hobby operating systems work.&lt;/li&gt; &#xA; &lt;li&gt;9front works.&lt;/li&gt; &#xA; &lt;li&gt;Plan 9 doesn&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;QNX works.&lt;/li&gt; &#xA; &lt;li&gt;OS/2 doesn&#39;t work.&lt;/li&gt; &#xA; &lt;li&gt;FreeBSD works.&lt;/li&gt; &#xA; &lt;li&gt;OpenBSD works with a specific boot configuration. At the &lt;code&gt;boot&amp;gt;&lt;/code&gt; prompt type &lt;code&gt;boot -c&lt;/code&gt;, then at the &lt;code&gt;UKC&amp;gt;&lt;/code&gt; prompt &lt;code&gt;disable mpbios&lt;/code&gt; and &lt;code&gt;exit&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;NetBSD works only with a custom kernel, see &lt;a href=&#34;https://github.com/copy/v86/issues/350&#34;&gt;#350&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Older versions of SerenityOS work (1.0.gc460f4a is a known working version).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can get some infos on the disk images here: &lt;a href=&#34;https://github.com/copy/images&#34;&gt;https://github.com/copy/images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to build, run and embed?&lt;/h2&gt; &#xA;&lt;p&gt;You need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;Rust with the wasm32-unknown-unknown target&lt;/li&gt; &#xA; &lt;li&gt;A version of clang compatible with Rust&lt;/li&gt; &#xA; &lt;li&gt;java (for Closure Compiler, not necessary when using &lt;code&gt;debug.html&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;nodejs (a recent version is required, v16.11.1 is known to be working)&lt;/li&gt; &#xA; &lt;li&gt;To run tests: nasm, gdb, qemu-system, gcc, libc-i386 and rustfmt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tools/docker/test-image/Dockerfile&#34;&gt;tools/docker/test-image/Dockerfile&lt;/a&gt; for a full setup on Debian or &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/wsl/install&#34;&gt;WSL&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make&lt;/code&gt; to build the debug build (at &lt;code&gt;debug.html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make all&lt;/code&gt; to build the optimized build (at &lt;code&gt;index.html&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;ROM and disk images are loaded via XHR, so if you want to try out &lt;code&gt;index.html&lt;/code&gt; locally, make sure to serve it from a local webserver. You can use &lt;code&gt;make run&lt;/code&gt; to serve the files using Python&#39;s http module.&lt;/li&gt; &#xA; &lt;li&gt;If you only want to embed v86 in a webpage you can use libv86.js. For usage, check out the &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/&#34;&gt;examples&lt;/a&gt;. You can download it from the release section.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Alternatively, to build using docker&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you have docker installed, you can run the whole system inside a container.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;code&gt;tools/docker/exec&lt;/code&gt; to find Dockerfile required for this.&lt;/li&gt; &#xA; &lt;li&gt;You can run &lt;code&gt;docker build -f tools/docker/exec/Dockerfile -t v86:alpine-3.14 .&lt;/code&gt; from the root directory to generate docker image.&lt;/li&gt; &#xA; &lt;li&gt;Then you can simply run &lt;code&gt;docker run -it -p 8000:8000 v86:alpine-3.14&lt;/code&gt; to start the server.&lt;/li&gt; &#xA; &lt;li&gt;Check &lt;code&gt;localhost:8000&lt;/code&gt; for hosted server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;The disk images for testing are not included in this repository. You can download them directly from the website using:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;wget -P images/ https://k.copy.sh/{linux.iso,linux4.iso,buildroot-bzimage.bin,openbsd-floppy.img,kolibri.img,windows101.img,os8.img,freedos722.img}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Run all tests: &lt;code&gt;make jshint rustfmt kvm-unit-test nasmtests nasmtests-force-jit expect-tests jitpagingtests qemutests rust-test tests&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tests/Readme.md&#34;&gt;tests/Readme.md&lt;/a&gt; for more infos.&lt;/p&gt; &#xA;&lt;h2&gt;API examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/basic.html&#34;&gt;Basic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/serial.html&#34;&gt;Programatically using the serial terminal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/lua.html&#34;&gt;A Lua interpreter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/two_instances.html&#34;&gt;Two instances in one window&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/examples/save_restore.html&#34;&gt;Saving and restoring emulator state&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Using v86 for your own purposes is as easy as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var emulator = new V86Starter({&#xA;    screen_container: document.getElementById(&#34;screen_container&#34;),&#xA;    bios: {&#xA;        url: &#34;../../bios/seabios.bin&#34;,&#xA;    },&#xA;    vga_bios: {&#xA;        url: &#34;../../bios/vgabios.bin&#34;,&#xA;    },&#xA;    cdrom: {&#xA;        url: &#34;../../images/linux.iso&#34;,&#xA;    },&#xA;    autostart: true,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/src/browser/starter.js&#34;&gt;starter.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;v86 is distributed under the terms of the Simplified BSD License, see &lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;. The following third-party dependencies are included in the repository under their own licenses:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/lib/softfloat/softfloat.c&#34;&gt;&lt;code&gt;lib/softfloat/softfloat.c&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/lib/zstd/zstddeclib.c&#34;&gt;&lt;code&gt;lib/zstd/zstddeclib.c&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tests/kvm-unit-tests&#34;&gt;&lt;code&gt;tests/kvm-unit-tests/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/copy/v86/master/tests/qemutests&#34;&gt;&lt;code&gt;tests/qemutests/&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPU test cases via &lt;a href=&#34;https://wiki.qemu.org/Main_Page&#34;&gt;QEMU&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;More tests via &lt;a href=&#34;https://www.linux-kvm.org/page/KVM-unit-tests&#34;&gt;kvm-unit-tests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/zstd&#34;&gt;zstd&lt;/a&gt; support is included for better compression of state images&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.jhauser.us/arithmetic/SoftFloat.html&#34;&gt;Berkeley SoftFloat&lt;/a&gt; is included to precisely emulate 80-bit floating point numbers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s-macke/jor1k&#34;&gt;The jor1k project&lt;/a&gt; for 9p, filesystem and uart drivers&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://winworldpc.com/&#34;&gt;WinWorld&lt;/a&gt; sources of some old operating systems&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;More questions?&lt;/h2&gt; &#xA;&lt;p&gt;Shoot me an email to &lt;code&gt;copy@copy.sh&lt;/code&gt;. Please report bugs on GitHub.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;Fabian Hemmer (&lt;a href=&#34;https://copy.sh/&#34;&gt;https://copy.sh/&lt;/a&gt;, &lt;code&gt;copy@copy.sh&lt;/code&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BetaSu/big-react</title>
    <updated>2022-08-20T01:39:04Z</updated>
    <id>tag:github.com,2022-08-20:/BetaSu/big-react</id>
    <link href="https://github.com/BetaSu/big-react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;跟着我，从0实现React18&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Big-React&lt;/h1&gt; &#xA;&lt;p&gt;从零实现 React v18 的核心功能，特点如下：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;👬 与 React 源码最接近的极简实现&lt;/li&gt; &#xA; &lt;li&gt;💪 虽然实现极简，但功能完备，当前可跑通官方测试用例数量：27&lt;/li&gt; &#xA; &lt;li&gt;🚶 按&lt;code&gt;Git Tag&lt;/code&gt;划分迭代步骤，记录从 0 实现的每个功能&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;如果想加入项目对应的&lt;code&gt;源码交流群&lt;/code&gt;，和 7000+小伙伴们一起交流&lt;code&gt;React&lt;/code&gt;，可以加我微信，备注「开发」：&lt;/p&gt; &#xA;&lt;img width=&#34;200&#34; src=&#34;https://user-images.githubusercontent.com/15828041/181666959-57941b01-61b3-47db-9d73-ecc9ae175112.png&#34; alt=&#34;卡颂的微信&#34;&gt; &#xA;&lt;h2&gt;TODO List&lt;/h2&gt; &#xA;&lt;h3&gt;工程类需求&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;内容&lt;/th&gt; &#xA;   &lt;th&gt;完成情况&lt;/th&gt; &#xA;   &lt;th&gt;在哪个版本实现的&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;架构&lt;/td&gt; &#xA;   &lt;td&gt;monorepo（pnpm 实现）&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;eslint&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;prettier&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;commitlint + husky&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;lint-staged&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;tsc&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;测试&lt;/td&gt; &#xA;   &lt;td&gt;jest 环境搭建&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;规范&lt;/td&gt; &#xA;   &lt;td&gt;tsc&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建&lt;/td&gt; &#xA;   &lt;td&gt;babel 配置&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建&lt;/td&gt; &#xA;   &lt;td&gt;Dev 环境包的构建&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;构建&lt;/td&gt; &#xA;   &lt;td&gt;Prod 环境包的构建&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;部署&lt;/td&gt; &#xA;   &lt;td&gt;Github Action 执行 lint 与 test&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;部署&lt;/td&gt; &#xA;   &lt;td&gt;Github Action 根据 tag 发布 npm 包&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;框架需求&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;类型&lt;/th&gt; &#xA;   &lt;th&gt;内容&lt;/th&gt; &#xA;   &lt;th&gt;完成情况&lt;/th&gt; &#xA;   &lt;th&gt;在哪个版本实现的&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;JSX 转换&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;React.isValidElement&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的插入&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v2&#34;&gt;v2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的移动&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的属性变化&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;浏览器环境 DOM 的删除&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactDOM&lt;/td&gt; &#xA;   &lt;td&gt;ReactTestUtils&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ReactNoop&lt;/td&gt; &#xA;   &lt;td&gt;ReactNoop Renderer&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v10&#34;&gt;v10&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Fiber 架构&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;事件模型&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v6&#34;&gt;v6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;onClick 事件支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v6&#34;&gt;v6&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;input 元素 onChange 事件支持&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Lane 模型&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v8&#34;&gt;v8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;基础 Update 机制&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;带优先级的 Update 机制&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v8&#34;&gt;v8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入单节点的 mount 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入多节点的 mount 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入单节点的 reconcile 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;插入多节点的 reconcile 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;删除节点的 reconcile 流程&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;HostText 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v2&#34;&gt;v2&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;HostComponent 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;HostRoot 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;FunctionComponent 类型支持&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;Hooks 架构 mount 时实现&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;React&lt;/td&gt; &#xA;   &lt;td&gt;Hooks 架构 update 时实现&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useState 实现&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useEffect 实现&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v9&#34;&gt;v9&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useRef 实现&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Legacy 调度流程（包含 batchedUpdates）&lt;/td&gt; &#xA;   &lt;td&gt;✅&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v8&#34;&gt;v8&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;Concurrent 调度流程&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;异常处理流程&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Reconciler&lt;/td&gt; &#xA;   &lt;td&gt;useErrorBoundary 实现&lt;/td&gt; &#xA;   &lt;td&gt;⬜️&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;调试&lt;/h2&gt; &#xA;&lt;p&gt;提供 3 种调试方式：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;实时调试&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;执行&lt;code&gt;pnpm demo&lt;/code&gt;会运行项目&lt;code&gt;demos&lt;/code&gt;目录下的示例项目（默认项目是针对&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v9&#34;&gt;v9&lt;/a&gt;的调试项目）&lt;/p&gt; &#xA;&lt;p&gt;这种方式的好处是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;控制台会打印各个主要步骤的执行信息，可以直观看到执行流程&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;热更新（包括示例代码和源码代码）&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;pnpm link&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;通过&lt;code&gt;CRA&lt;/code&gt;或&lt;code&gt;Vite&lt;/code&gt;起一个&lt;code&gt;React&lt;/code&gt;测试项目后，在本项目执行&lt;code&gt;pnpm run build:dev&lt;/code&gt;打包&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;，在测试项目中通过&lt;code&gt;pnpm link&lt;/code&gt;将项目依赖的&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;替换为我们打包的&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;这种方式的好处是：最贴合项目中实际使用&lt;code&gt;React&lt;/code&gt;的情况&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;跑&lt;code&gt;React&lt;/code&gt;官方的测试用例&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;执行&lt;code&gt;pnpm test&lt;/code&gt;跑官方的测试用例，用例中引用的是执行&lt;code&gt;pnpm run build:dev&lt;/code&gt;打包的&lt;code&gt;react&lt;/code&gt;与&lt;code&gt;react-dom&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;这种方式的好处是：可以从官方用例的角度观察框架实现的细节、各种边界情况&lt;/p&gt; &#xA;&lt;h2&gt;更新日志&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v10&#34;&gt;v10&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;这一版的改动比较大，为了实现 React-Noop-Renderer，对 React-Reconciler 与 rollup 配置做了一些调整，使 React-Reconciler 更通用（可以对接不同宿主环境）。包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;实现 React-Noop-Renderer，可以脱离 ReactDOM 更好的测试 Recocniler 逻辑&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;对 rollup 配置做了改动，以配合 React-Reconciler 更好对接不同宿主环境&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;引入 React 的内部包 jest-react、react-test-renderer，配合自制的 React-Noop-Renderer 测试并发情况下的 React case&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;跑通 useEffect 调用顺序的 case&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了过程中发现的 Diff 算法的小 bug&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scheduler、jest-react、react-test-renderer 均采用 NPM 包形式引入&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v9&#34;&gt;v9&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现了 useEffect，为了实现 useEffect 回调的异步调度，引入了官方的 scheduler 模块。当前 scheduler 模块的生产环境版本放在 packages 目录下，方便对他进行修改。如果后期证实没有需要特别修改的地方，会考虑以 NPM 包的形式引入 scheduler。包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;useEffect 实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v8&#34;&gt;v8&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现了基础功能的 Lane 模型，可以调度同步更新，并基于此实现了 batchedUpdates（批处理），包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Lane 模型&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;带优先级的 Update 机制&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Legacy 调度流程（包含 batchedUpdates）&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了多个子节点中 number 类型节点不支持的 bug&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v7&#34;&gt;v7&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现了多节点 reconcile 流程（俗称的 Diff 算法），包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;修复了 update 时 onClick 回调不更新的 bug&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;插入多节点的 mount 流程&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;插入多节点的 reconcile 流程&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;浏览器环境 DOM 的移动&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Diff 算法的测试用例还依赖 useEffect、useRef 的实现，放在后面再实现&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v6&#34;&gt;v6&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现事件系统，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;事件模型&lt;/li&gt; &#xA; &lt;li&gt;onClick 事件支持（以及 onClickCapture 事件）&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v5&#34;&gt;v5&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现单节点 update，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;浏览器环境 DOM 的删除（比如 h3 变为 p，那么就要经历删除 h3、插入 p）&lt;/li&gt; &#xA; &lt;li&gt;插入单节点的 reconcile 流程（包括 HostComponent、HostText）&lt;/li&gt; &#xA; &lt;li&gt;删除节点的 reconcile 流程（为后续 ref、useEffect 特性做准备，实现的比较完备）&lt;/li&gt; &#xA; &lt;li&gt;Hooks 架构 update 时实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v4&#34;&gt;v4&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;初始化测试相关架构，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;实现 React.isValidElement&lt;/li&gt; &#xA; &lt;li&gt;jest 环境搭建&lt;/li&gt; &#xA; &lt;li&gt;babel 配置&lt;/li&gt; &#xA; &lt;li&gt;ReactTestUtils&lt;/li&gt; &#xA; &lt;li&gt;跑通关于 jsx 的 17 个官方用例&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v3&#34;&gt;v3&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;实现 useState 的 mount 时流程，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;FunctionComponent 类型支持&lt;/li&gt; &#xA; &lt;li&gt;Hooks 架构 mount 时实现&lt;/li&gt; &#xA; &lt;li&gt;useState 实现&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v2&#34;&gt;v2&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;插入单节点的 mount 流程（可以在浏览器环境渲染 DOM），包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;浏览器环境 DOM 的插入&lt;/li&gt; &#xA; &lt;li&gt;HostText 类型支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/BetaSu/big-react/tree/v1&#34;&gt;v1&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;插入单节点的 render 阶段 mount 流程，包括如下功能：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;JSX 转换&lt;/li&gt; &#xA; &lt;li&gt;Fiber 架构&lt;/li&gt; &#xA; &lt;li&gt;插入单节点的 reconcile 流程&lt;/li&gt; &#xA; &lt;li&gt;HostComponent 类型支持&lt;/li&gt; &#xA; &lt;li&gt;HostRoot 类型支持&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;注：还未实现浏览器环境下的渲染&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Leaflet/Leaflet</title>
    <updated>2022-08-20T01:39:04Z</updated>
    <id>tag:github.com,2022-08-20:/Leaflet/Leaflet</id>
    <link href="https://github.com/Leaflet/Leaflet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍃 JavaScript library for mobile-friendly interactive maps 🇺🇦&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Leaflet was created 11 years ago by &lt;a href=&#34;https://agafonkin.com&#34;&gt;Volodymyr Agafonkin&lt;/a&gt;, a Ukrainian citizen living in Kyiv.&lt;/p&gt; &#xA;&lt;p&gt;Volodymyr is no longer in Kyiv, because Russian bombs are falling over the city. His family, his friends, his neighbours, thousands and thousands of absolutely wonderful people, are either seeking refuge or fighting for their lives.&lt;/p&gt; &#xA;&lt;p&gt;The Russian soldiers have already killed tens of thousands of civilians, including women and children, and are committing mass war crimes like gang rapes, executions, looting, and targeted bombings of civilian shelters and places of cultural significance. The death toll keeps rising, and Ukraine needs your help.&lt;/p&gt; &#xA;&lt;p&gt;As Volodymyr &lt;a href=&#34;https://twitter.com/LeafletJS/status/1496051256409919489&#34;&gt;expressed a few days before the invasion&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If you want to help, educate yourself and others on the Russian threat, follow reputable journalists, demand severe Russian sanctions and Ukrainian support from your leaders, protest war, reach out to Ukrainian friends, donate to Ukrainian charities. Just don&#39;t be silent.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Ukrainians are recommending the &lt;a href=&#34;https://www.comebackalive.in.ua&#34;&gt;Come Back Alive&lt;/a&gt; charity. For other options, see &lt;a href=&#34;https://stand-with-ukraine.pp.ua&#34;&gt;SupportUkraineNow.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If an appeal to humanity doesn&#39;t work for you, I&#39;ll appeal to your egoism: the future of Ukrainian citizens is the future of Leaflet.&lt;/p&gt; &#xA;&lt;p&gt;It is chilling to see Leaflet being used for &lt;a href=&#34;https://ukraine.bellingcat.com/&#34;&gt;documenting Russia&#39;s war crimes&lt;/a&gt;, &lt;a href=&#34;https://liveuamap.com/&#34;&gt;factual reporting of the war&lt;/a&gt; and for coordination of humanitarian efforts &lt;a href=&#34;https://refugees.ro/&#34;&gt;in Romania&lt;/a&gt; and &lt;a href=&#34;https://dopomoha.pl/&#34;&gt;in Poland&lt;/a&gt;. We commend these uses of Leaflet.&lt;/p&gt; &#xA;&lt;p&gt;If you support the actions of the Russian government (even after reading all this), do everyone else a favour and &lt;a href=&#34;https://www.theguardian.com/world/video/2022/feb/25/ukrainian-woman-sunflower-seeds-russian-soldiers-video&#34;&gt;carry some seeds in your pocket&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Yours truly,&lt;br&gt; Leaflet maintainers.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;img width=&#34;600&#34; src=&#34;https://rawgit.com/Leaflet/Leaflet/main/src/images/logo.svg?sanitize=true&#34; alt=&#34;Leaflet&#34;&gt; &#xA;&lt;p&gt;Leaflet is the leading open-source JavaScript library for &lt;strong&gt;mobile-friendly interactive maps&lt;/strong&gt;. Weighing just about 39 KB of gzipped JS plus 4 KB of gzipped CSS code, it has all the mapping &lt;a href=&#34;http://leafletjs.com/#features&#34;&gt;features&lt;/a&gt; most developers ever need.&lt;/p&gt; &#xA;&lt;p&gt;Leaflet is designed with &lt;em&gt;simplicity&lt;/em&gt;, &lt;em&gt;performance&lt;/em&gt; and &lt;em&gt;usability&lt;/em&gt; in mind. It works efficiently across all major desktop and mobile platforms out of the box, taking advantage of HTML5 and CSS3 on modern browsers while being accessible on older ones too. It can be extended with a huge amount of &lt;a href=&#34;http://leafletjs.com/plugins.html&#34;&gt;plugins&lt;/a&gt;, has a beautiful, easy to use and &lt;a href=&#34;http://leafletjs.com/reference.html&#34; title=&#34;Leaflet API reference&#34;&gt;well-documented&lt;/a&gt; API and a simple, readable &lt;a href=&#34;https://github.com/Leaflet/Leaflet&#34; title=&#34;Leaflet GitHub repository&#34;&gt;source code&lt;/a&gt; that is a joy to &lt;a href=&#34;https://github.com/Leaflet/Leaflet/raw/main/CONTRIBUTING.md&#34; title=&#34;A guide to contributing to Leaflet&#34;&gt;contribute&lt;/a&gt; to.&lt;/p&gt; &#xA;&lt;p&gt;For more info, docs and tutorials, check out the &lt;a href=&#34;http://leafletjs.com&#34;&gt;official website&lt;/a&gt;.&lt;br&gt; For &lt;strong&gt;Leaflet downloads&lt;/strong&gt; (including the built main version), check out the &lt;a href=&#34;http://leafletjs.com/download.html&#34;&gt;download page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re happy to meet new contributors. If you want to &lt;strong&gt;get involved&lt;/strong&gt; with Leaflet development, check out the &lt;a href=&#34;https://github.com/Leaflet/Leaflet/raw/main/CONTRIBUTING.md&#34; title=&#34;A guide to contributing to Leaflet&#34;&gt;contribution guide&lt;/a&gt;. Let&#39;s make the best mapping library that will ever exist, and push the limits of what&#39;s possible with online maps!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Leaflet/Leaflet/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/Leaflet/Leaflet/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>