<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-30T01:39:36Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Momo707577045/m3u8-downloader</title>
    <updated>2022-09-30T01:39:36Z</updated>
    <id>tag:github.com,2022-09-30:/Momo707577045/m3u8-downloader</id>
    <link href="https://github.com/Momo707577045/m3u8-downloader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;m3u8 视频在线提取工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;m3u8 视频在线提取工具(&lt;a href=&#34;https://github.com/Momo707577045/m3u8-downloader/raw/master/README-EN.md&#34;&gt;English version&lt;/a&gt;)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/01.jpeg&#34; alt=&#34;界面&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html&#34;&gt;工具在线地址&lt;/a&gt;，推荐使用 chrome 浏览器。&lt;/h3&gt; &#xA;&lt;h3&gt;研发背景&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;m3u8视频格式简介&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;m3u8视频格式原理：将完整的视频拆分成多个 .ts 视频碎片，.m3u8 文件详细记录每个视频片段的地址。&lt;/li&gt; &#xA;   &lt;li&gt;视频播放时，会先读取 .m3u8 文件，再逐个下载播放 .ts 视频片段。&lt;/li&gt; &#xA;   &lt;li&gt;常用于直播业务，也常用该方法规避视频窃取的风险。加大视频窃取难度。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;鉴于 m3u8 以上特点，无法简单通过视频链接下载，需使用特定下载软件。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;但软件下载过程繁琐，试错成本高。&lt;/li&gt; &#xA;   &lt;li&gt;使用软件的下载情况不稳定，常出现浏览器正常播放，但软件下载速度慢，甚至无法正常下载的情况。&lt;/li&gt; &#xA;   &lt;li&gt;软件被编译打包，无法了解内部运行机制，不清楚里面到底发生了什么。&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;基于以上原因，开发了本工具。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/09.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;工具特点&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;无需安装，打开网页即可用。&lt;/li&gt; &#xA; &lt;li&gt;强制下载现有片段，无需等待完整视频下载完成。&lt;/li&gt; &#xA; &lt;li&gt;操作直观，精确到视频碎片的操作。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;功能说明&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/02.jpeg&#34; alt=&#34;&#34;&gt; 【解析下载】输入 m3u8 链接，点击下载视频。 【跨域复制代码】当资源出现跨域限制时，点击复制页面代码，在视频页面的控制台输入。将工具注入到视频页面中，解决跨域问题。 【重新下载错误片段】当部分视频片段下载失败时，点击该按钮，重新下载错误片段。 【强制下载现有片段】将已经下载好的视频片段强制整合下载。可以提前观看已经下载的片段。该操作不影响当前下载进程。 【片段Icon】对应每一个 .ts 视频片段的下载情况。「灰色」：待下载，「绿色」：下载成功，「红色」：下载失败。点击红色 Icon 可重新下载对应错误片段。&lt;/p&gt; &#xA;&lt;h3&gt;使用说明&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;打开视频目标网页，鼠标右键「检查」，或者「开发者工具」，或者按下键盘的「F12」键&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;找到 network，输入 m3u8，过滤 m3u8 文件。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;刷新页面，监听 m3u8 文件。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/03.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;找到目标m3u8文件，查看文件内容，是否符合格式。&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;如下为索引文件，不是真正的视频 m3u8 文件&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/04.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;一般内容有许多 ts 字眼的文件才是我们需要的视频 m3u8 文件。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/05.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;拷贝这个 m3u8 文件的链接。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/06.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打开工具页面，输入链接，点击「解析下载」。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;出现片段 Icon，则证明操作成功，耐心等待视频下载。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;片段全部下载成功，将触发浏览器自动下载，下载整合后的完整视频。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;如果有片段下载失败，则点击对应片段，或点击「重新下载错误片段」按钮。重新下载错误片段。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/08.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;异常情况&lt;/h3&gt; &#xA;&lt;p&gt;【无法下载，没有显示片段Icon】&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;一般由于跨域造成。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;点击「跨域复制代码」按钮。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;打开视频目标网页的「开发者工具界面」，找到 console 栏。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/10.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;粘贴刚刚复制的内容，回车。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;滚动页面到底部，发现工具显示在底部。然后在注入的工具中正常使用。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/11.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;【下载后的视频资源不可看】&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;网站对视频源进行了加密操作。不同的视频网站有不同的算法操作。无法通用处理。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;一般网站不会有这种情况。爱奇艺，腾讯等大视频网站才会有该安全措施。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/12.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;实现思路&lt;/h3&gt; &#xA;&lt;p&gt;【下载并解析 m3u8 文件】&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;直接通过 ajax 的 get 请求 m3u8 文件。得到 m3u8 文件的内容字符串。读取字符串进行解析。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;需要注意的是，m3u8 文件不是 json 格式，不能将 dataType 设置为 json。 【队列下载 ts 视频片段】&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;同样使用 ajax 的 get 请求视频碎片，一个 ajax 请求一个 ts 视频碎片，但关键点在于，下载的是视频文件，属于二进制数据，需要将 responseType 请求头设置为 arraybuffer。&lt;code&gt;xhr.responseType = &#39;arraybuffer&#39;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用队列下载，是因为视频碎片太多，不可能一次性请求全部。需要分批下载。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;同时由于浏览器同源并发限制，视频同时请求数不能过多。本工具设置为并发下载数为 10。 【组合 ts 视频片段】&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;看似很难，但其实使用 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/Blob&#34;&gt;Blob&lt;/a&gt; 对象即可将多个 ts 文件整合成一个文件。new Blob()，传入 ts 文件数组。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;这里有个小细节需要注意，需要在 new Blob 的第二个参数中设置文件的 MIME 类型，否则将默认为 txt 文件。 &lt;code&gt;const fileBlob = new Blob(fileDataList, { type: &#39;video/MP2T&#39; }) &lt;/code&gt; 【自动下载】&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;下载，当然先要获得文件链接，即刚生成的 Blob 文件链接。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;使用 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/API/URL/createObjectURL&#34;&gt;URL.createObjectURL&lt;/a&gt;，即可得到浏览器内存中，Blob 的文件链接。&lt;code&gt;URL.createObjectURL(fileBlob)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;最后，使用 a 标签的 &lt;a href=&#34;https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a&#34;&gt;a.download&lt;/a&gt; 属性，将 a 标签设置为下载功能。主动调用 click 事件&lt;code&gt;a.click()&lt;/code&gt;。完成文件自动下载。&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/13.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;核心代码&lt;/h3&gt; &#xA;&lt;p&gt;【整合及自动下载】&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    // 下载整合后的TS文件&#xA;    downloadFile(fileDataList, fileName, fileType) {&#xA;      this.tips = &#39;ts 碎片整合中，请留意浏览器下载&#39;&#xA;      const fileBlob = new Blob(fileDataList, { type: &#39;video/MP2T&#39; }) // 创建一个Blob对象，并设置文件的 MIME 类型&#xA;      const a = document.createElement(&#39;a&#39;)&#xA;      a.download = fileName + &#39;.&#39; + fileType&#xA;      a.href = URL.createObjectURL(fileBlob)&#xA;      a.style.display = &#39;none&#39;&#xA;      document.body.appendChild(a)&#xA;      a.click()&#xA;      a.remove()&#xA;    },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;是的，涉及新知识点的部分只有上面一小段，其他的都是 JS 的基础应用。&lt;/p&gt; &#xA;&lt;p&gt;除了 vue.js 文件，本工具代码均包含在 index.html 文件里面。包括换行，一共 540 行代码，其中 css 样式 190 行，html 标签 30 行。JS 逻辑代码 300 行。&lt;/p&gt; &#xA;&lt;p&gt;罗列这些代码量只是想表明，本工具运用到的都只是 JS 的常见知识，并不复杂。鼓励大家多尝试阅读源码，其实看源码并没有想象中的那么困难。&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/Momo707577045/m3u8-downloader/raw/master/index.html&#34;&gt;源码链接&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;AES 常规解密功能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;借助「aes-decryptor.js」，该文件来至 &lt;a href=&#34;https://github.com/video-dev/hls.js&#34;&gt;hls.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MP4 转码功能&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;借助「mux-mp4.js」，源码来至 &lt;a href=&#34;https://github.com/videojs/mux.js#mp4&#34;&gt;mux.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;但 mux.js 存在一个无法计算视频长度的 bug&lt;/li&gt; &#xA; &lt;li&gt;本人已 fork 该项目，并修复该 bug，修复后的项目&lt;a href=&#34;https://github.com/Momo707577045/mux.js&#34;&gt;链接在这里&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;第三方接入&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;在 url 中通过 source 参数拼接下载地址即可，如：&lt;code&gt;http://blog.luckly-mjw.cn/tool-show/m3u8-downloader/index.html?source=http://1257120875.vod2.myqcloud.com/0ef121cdvodtransgzp1257120875/3055695e5285890780828799271/v.f230.m3u8&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;系统将自动解析该参数&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/16.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://blog.luckly-mjw.cn/tool-show/m3u8-downloader/m3u8-downloader.user.js&#34;&gt;油猴插件&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/15.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;「跳转下载」即新开页面，打开本工具页面，自动携带并解析目标地址&lt;/li&gt; &#xA; &lt;li&gt;「注入下载」为解决跨域而生，直接将代码注入到当前视频网站，进行视频下载&lt;/li&gt; &#xA; &lt;li&gt;插件源码: &lt;a href=&#34;https://github.com/Momo707577045/m3u8-downloader/raw/master/m3u8-downloader.user.js&#34;&gt;https://github.com/Momo707577045/m3u8-downloader/blob/master/m3u8-downloader.user.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;手动添加油猴插件步骤 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;点击 tamper-monkey「油猴」icon，点击「添加新脚本」&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/21.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;在当前位置，粘贴上述链接中的源码&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/17.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/18.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;点击「文本」，「保存」&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/19.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;得到如下结果，即为添加成功&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/20.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;完结撒花，感谢阅读。&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://upyun.luckly-mjw.cn/Assets/m3u8-download/14.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OptimalBits/bull</title>
    <updated>2022-09-30T01:39:36Z</updated>
    <id>tag:github.com,2022-09-30:/OptimalBits/bull</id>
    <link href="https://github.com/OptimalBits/bull" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Premium Queue package for handling distributed jobs and messages in NodeJS.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/support/logo@2x.png&#34; width=&#34;300&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt; The fastest, most reliable, Redis-based queue for Node. &lt;br&gt; Carefully written for rock solid stability and atomicity. &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/#-sponsors-&#34;&gt;&lt;strong&gt;Sponsors&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/#bull-features&#34;&gt;&lt;strong&gt;Features&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/#uis&#34;&gt;&lt;strong&gt;UIs&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/#install&#34;&gt;&lt;strong&gt;Install&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/#quick-guide&#34;&gt;&lt;strong&gt;Quick Guide&lt;/strong&gt;&lt;/a&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/#documentation&#34;&gt;&lt;strong&gt;Documentation&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt;Check the new &lt;a href=&#34;https://optimalbits.github.io/bull/&#34;&gt;&lt;strong&gt;Guide!&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;&#xA; &lt;a href=&#34;https://optimalbits.github.io/bull/&#34;&gt; &lt;br&gt; &lt;/a&gt;&#xA; &lt;p&gt;&lt;a href=&#34;https://optimalbits.github.io/bull/&#34;&gt; &lt;/a&gt;&lt;a href=&#34;https://gitter.im/OptimalBits/bull&#34;&gt; &lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitter.im/OptimalBits/bull&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/bull.svg?maxAge=2592000&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://badge.fury.io/js/bull&#34;&gt; &lt;img src=&#34;https://badge.fury.io/js/bull.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/OptimalBits/bull?branch=master&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/OptimalBits/bull/badge.svg?branch=master&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/OptimalBits/bull&#34;&gt; &lt;img src=&#34;http://isitmaintained.com/badge/open/optimalbits/bull.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/OptimalBits/bull&#34;&gt; &lt;img src=&#34;http://isitmaintained.com/badge/resolution/optimalbits/bull.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/manast&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/manast?label=Stay%20updated&amp;amp;style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;📻 News and updates&lt;/h3&gt; &#xA;&lt;p&gt;Follow me on &lt;a href=&#34;http://twitter.com/manast&#34;&gt;Twitter&lt;/a&gt; for important news and updates.&lt;/p&gt; &#xA;&lt;h3&gt;🛠 Tutorials&lt;/h3&gt; &#xA;&lt;p&gt;You can find tutorials and news in this blog: &lt;a href=&#34;https://blog.taskforce.sh/&#34;&gt;https://blog.taskforce.sh/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Used by&lt;/h3&gt; &#xA;&lt;p&gt;Bull is popular among large and small organizations, like the following ones:&lt;/p&gt; &#xA;&lt;table cellspacing=&#34;0&#34; cellpadding=&#34;0&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td valign=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/atlassian/github-for-jira&#34;&gt; &lt;img src=&#34;https://876297641-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LUuDmt_xXMfG66Rn1GA%2Fuploads%2FevsJCF6F1tx1ScZwDQOd%2FAtlassian-horizontal-blue-rgb.webp?alt=media&amp;amp;token=2fcd0528-e8bb-4bdd-af35-9d20e313d1a8&#34; width=&#34;150&#34; alt=&#34;Atlassian&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/Autodesk&#34;&gt; &lt;img src=&#34;https://876297641-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LUuDmt_xXMfG66Rn1GA%2Fuploads%2FvpTe02RdOhUJBA8TdHEE%2Fautodesk-logo-white.png?alt=media&amp;amp;token=326961b4-ea4f-4ded-89a4-e05692eec8ee&#34; width=&#34;150&#34; alt=&#34;Autodesk&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/common-voice/common-voice&#34;&gt; &lt;img src=&#34;https://876297641-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LUuDmt_xXMfG66Rn1GA%2Fuploads%2F4zPSrubNJKViAzUIftIy%2Fmozilla-logo-bw-rgb.png?alt=media&amp;amp;token=9f93aae2-833f-4cc4-8df9-b7fea0ad5cb5&#34; width=&#34;150&#34; alt=&#34;Mozilla&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/nestjs/bull&#34;&gt; &lt;img src=&#34;https://876297641-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LUuDmt_xXMfG66Rn1GA%2Fuploads%2FfAcGye182utFUtPKdLqJ%2FScreenshot%202022-02-15%20at%2011.32.39.png?alt=media&amp;amp;token=29feb550-f0bc-467d-a290-f700701d7d15&#34; width=&#34;150&#34; alt=&#34;Nest&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td valign=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/salesforce/refocus&#34;&gt; &lt;img src=&#34;https://876297641-files.gitbook.io/~/files/v0/b/gitbook-x-prod.appspot.com/o/spaces%2F-LUuDmt_xXMfG66Rn1GA%2Fuploads%2FZNnYNuL5qJ6ZoBh7JJEW%2Fsalesforce-logo.png?alt=media&amp;amp;token=ddcae63b-08c0-4dd4-8496-3b29a9bf977d&#34; width=&#34;100&#34; alt=&#34;Salesforce&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;BullMQ&lt;/h3&gt; &#xA;&lt;p&gt;If you want to start using the next major version of Bull written entirely in Typescript you are welcome to the new repo &lt;a href=&#34;https://github.com/taskforcesh/bullmq&#34;&gt;here&lt;/a&gt;. Otherwise you are very welcome to still use Bull, which is a safe, battle tested codebase.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;🚀 Sponsors 🚀&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://dashboard.memetria.com/new?utm_campaign=BULLMQ&#34;&gt;&lt;img src=&#34;https://www.memetria.com/images/logo/memetria-logo.svg?sanitize=true&#34; width=&#34;300&#34; alt=&#34;Memetria for Redis&#34; style=&#34;padding: 100px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you need high quality production Redis instances for your Bull projects, please consider subscribing to &lt;a href=&#34;https://dashboard.memetria.com/new?utm_campaign=BULLMQ&#34;&gt;Memetria for Redis&lt;/a&gt;, leaders in Redis hosting that works perfectly with Bull. Use the promo code &#34;BULLMQ&#34; when signing up to help us sponsor the development of Bull!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Official FrontEnd&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://taskforce.sh&#34;&gt;&lt;img src=&#34;http://taskforce.sh/assets/logo_square.png&#34; width=&#34;100&#34; alt=&#34;Taskforce.sh, Inc&#34; style=&#34;padding: 100px&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Supercharge your queues with a professional front end:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get a complete overview of all your queues.&lt;/li&gt; &#xA; &lt;li&gt;Inspect jobs, search, retry, or promote delayed jobs.&lt;/li&gt; &#xA; &lt;li&gt;Metrics and statistics.&lt;/li&gt; &#xA; &lt;li&gt;and many more features.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Sign up at &lt;a href=&#34;https://taskforce.sh&#34;&gt;Taskforce.sh&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Bull Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Minimal CPU usage due to a polling-free design.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Robust design based on Redis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delayed jobs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Schedule and repeat jobs according to a cron specification.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Rate limiter for jobs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Retries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Priority.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Concurrency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Pause/resume—globally or locally.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Multiple job types per queue.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Threaded (sandboxed) processing functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatic recovery from process crashes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And coming up on the roadmap...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Job completion acknowledgement (you can use the message queue &lt;a href=&#34;https://github.com/OptimalBits/bull/raw/develop/PATTERNS.md#returning-job-completions&#34;&gt;pattern&lt;/a&gt; in the meantime).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Parent-child jobs relationships.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;UIs&lt;/h3&gt; &#xA;&lt;p&gt;There are a few third-party UIs that you can use for monitoring:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;BullMQ&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taskforce.sh&#34;&gt;Taskforce&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bull v3&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://taskforce.sh&#34;&gt;Taskforce&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vcapretz/bull-board&#34;&gt;bull-board&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/darky/bull-repl&#34;&gt;bull-repl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/s-r-x/bull-monitor&#34;&gt;bull-monitor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AbhilashJN/monitoro&#34;&gt;Monitoro&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bull &amp;lt;= v2&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ShaneK/Matador&#34;&gt;Matador&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kfatehi/react-bull&#34;&gt;react-bull&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Epharmix/Toureiro&#34;&gt;Toureiro&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Monitoring &amp;amp; Alerting&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;With Prometheus &lt;a href=&#34;https://github.com/UpHabit/bull_exporter&#34;&gt;Bull Queue Exporter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Feature Comparison&lt;/h3&gt; &#xA;&lt;p&gt;Since there are a few job queue solutions, here is a table comparing them:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Feature&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bullmq-Pro&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bullmq&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Bull&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Kue&lt;/th&gt; &#xA;   &lt;th&gt;Bee&lt;/th&gt; &#xA;   &lt;th&gt;Agenda&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Backend&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;redis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;redis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;redis&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;redis&lt;/td&gt; &#xA;   &lt;td&gt;redis&lt;/td&gt; &#xA;   &lt;td&gt;mongo&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Observables&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Group Rate Limit&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Group Support&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Parent/Child Dependencies&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Priorities&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Concurrency&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delayed jobs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Global events&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Rate Limiter&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pause/Resume&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sandboxed worker&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Repeatable jobs&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Atomic ops&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Persistence&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;UI&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✓&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;✓&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Optimized for&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jobs / Messages&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jobs / Messages&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jobs / Messages&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Jobs&lt;/td&gt; &#xA;   &lt;td&gt;Messages&lt;/td&gt; &#xA;   &lt;td&gt;Jobs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install bull --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add bull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Requirements:&lt;/strong&gt; Bull requires a Redis version greater than or equal to &lt;code&gt;2.8.18&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Typescript Definitions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @types/bull --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add --dev @types/bull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Definitions are currently maintained in the &lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/bull&#34;&gt;DefinitelyTyped&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all types of contributions, either code fixes, new features or doc improvements. Code formatting is enforced by &lt;a href=&#34;https://prettier.io/&#34;&gt;prettier&lt;/a&gt;. For commits please follow conventional &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0-beta.2/&#34;&gt;commits convention&lt;/a&gt;. All code must pass lint rules and test suites before it can be merged into develop.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Quick Guide&lt;/h3&gt; &#xA;&lt;h4&gt;Basic Usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Queue = require(&#39;bull&#39;);&#xA;&#xA;const videoQueue = new Queue(&#39;video transcoding&#39;, &#39;redis://127.0.0.1:6379&#39;);&#xA;const audioQueue = new Queue(&#39;audio transcoding&#39;, { redis: { port: 6379, host: &#39;127.0.0.1&#39;, password: &#39;foobared&#39; } }); // Specify Redis connection using object&#xA;const imageQueue = new Queue(&#39;image transcoding&#39;);&#xA;const pdfQueue = new Queue(&#39;pdf transcoding&#39;);&#xA;&#xA;videoQueue.process(function (job, done) {&#xA;&#xA;  // job.data contains the custom data passed when the job was created&#xA;  // job.id contains id of this job.&#xA;&#xA;  // transcode video asynchronously and report progress&#xA;  job.progress(42);&#xA;&#xA;  // call done when finished&#xA;  done();&#xA;&#xA;  // or give an error if error&#xA;  done(new Error(&#39;error transcoding&#39;));&#xA;&#xA;  // or pass it a result&#xA;  done(null, { framerate: 29.5 /* etc... */ });&#xA;&#xA;  // If the job throws an unhandled exception it is also handled correctly&#xA;  throw new Error(&#39;some unexpected error&#39;);&#xA;});&#xA;&#xA;audioQueue.process(function (job, done) {&#xA;  // transcode audio asynchronously and report progress&#xA;  job.progress(42);&#xA;&#xA;  // call done when finished&#xA;  done();&#xA;&#xA;  // or give an error if error&#xA;  done(new Error(&#39;error transcoding&#39;));&#xA;&#xA;  // or pass it a result&#xA;  done(null, { samplerate: 48000 /* etc... */ });&#xA;&#xA;  // If the job throws an unhandled exception it is also handled correctly&#xA;  throw new Error(&#39;some unexpected error&#39;);&#xA;});&#xA;&#xA;imageQueue.process(function (job, done) {&#xA;  // transcode image asynchronously and report progress&#xA;  job.progress(42);&#xA;&#xA;  // call done when finished&#xA;  done();&#xA;&#xA;  // or give an error if error&#xA;  done(new Error(&#39;error transcoding&#39;));&#xA;&#xA;  // or pass it a result&#xA;  done(null, { width: 1280, height: 720 /* etc... */ });&#xA;&#xA;  // If the job throws an unhandled exception it is also handled correctly&#xA;  throw new Error(&#39;some unexpected error&#39;);&#xA;});&#xA;&#xA;pdfQueue.process(function (job) {&#xA;  // Processors can also return promises instead of using the done callback&#xA;  return pdfAsyncProcessor();&#xA;});&#xA;&#xA;videoQueue.add({ video: &#39;http://example.com/video1.mov&#39; });&#xA;audioQueue.add({ audio: &#39;http://example.com/audio1.mp3&#39; });&#xA;imageQueue.add({ image: &#39;http://example.com/image1.tiff&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using promises&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, you can use return promises instead of using the &lt;code&gt;done&lt;/code&gt; callback:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;videoQueue.process(function (job) { // don&#39;t forget to remove the done callback!&#xA;  // Simply return a promise&#xA;  return fetchVideo(job.data.url).then(transcodeVideo);&#xA;&#xA;  // Handles promise rejection&#xA;  return Promise.reject(new Error(&#39;error transcoding&#39;));&#xA;&#xA;  // Passes the value the promise is resolved with to the &#34;completed&#34; event&#xA;  return Promise.resolve({ framerate: 29.5 /* etc... */ });&#xA;&#xA;  // If the job throws an unhandled exception it is also handled correctly&#xA;  throw new Error(&#39;some unexpected error&#39;);&#xA;  // same as&#xA;  return Promise.reject(new Error(&#39;some unexpected error&#39;));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Separate processes&lt;/h4&gt; &#xA;&lt;p&gt;The process function can also be run in a separate process. This has several advantages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The process is sandboxed so if it crashes it does not affect the worker.&lt;/li&gt; &#xA; &lt;li&gt;You can run blocking code without affecting the queue (jobs will not stall).&lt;/li&gt; &#xA; &lt;li&gt;Much better utilization of multi-core CPUs.&lt;/li&gt; &#xA; &lt;li&gt;Less connections to redis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In order to use this feature just create a separate file with the processor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// processor.js&#xA;module.exports = function (job) {&#xA;  // Do some heavy work&#xA;&#xA;  return Promise.resolve(result);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And define the processor like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Single process:&#xA;queue.process(&#39;/path/to/my/processor.js&#39;);&#xA;&#xA;// You can use concurrency as well:&#xA;queue.process(5, &#39;/path/to/my/processor.js&#39;);&#xA;&#xA;// and named processors:&#xA;queue.process(&#39;my processor&#39;, 5, &#39;/path/to/my/processor.js&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Repeated jobs&lt;/h4&gt; &#xA;&lt;p&gt;A job can be added to a queue and processed repeatedly according to a cron specification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  paymentsQueue.process(function (job) {&#xA;    // Check payments&#xA;  });&#xA;&#xA;  // Repeat payment job once every day at 3:15 (am)&#xA;  paymentsQueue.add(paymentsData, { repeat: { cron: &#39;15 3 * * *&#39; } });&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As a tip, check your expressions here to verify they are correct: &lt;a href=&#34;https://crontab.cronhub.io&#34;&gt;cron expression generator&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Pause / Resume&lt;/h4&gt; &#xA;&lt;p&gt;A queue can be paused and resumed globally (pass &lt;code&gt;true&lt;/code&gt; to pause processing for just this worker):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;queue.pause().then(function () {&#xA;  // queue is paused now&#xA;});&#xA;&#xA;queue.resume().then(function () {&#xA;  // queue is resumed now&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Events&lt;/h4&gt; &#xA;&lt;p&gt;A queue emits some useful events, for example...&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;.on(&#39;completed&#39;, function (job, result) {&#xA;  // Job completed with output result!&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on events, including the full list of events that are fired, check out the &lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/REFERENCE.md#events&#34;&gt;Events reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Queues performance&lt;/h4&gt; &#xA;&lt;p&gt;Queues are cheap, so if you need many of them just create new ones with different names:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const userJohn = new Queue(&#39;john&#39;);&#xA;const userLisa = new Queue(&#39;lisa&#39;);&#xA;.&#xA;.&#xA;.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However every queue instance will require new redis connections, check how to &lt;a href=&#34;https://github.com/OptimalBits/bull/raw/master/PATTERNS.md#reusing-redis-connections&#34;&gt;reuse connections&lt;/a&gt; or you can also use &lt;a href=&#34;https://github.com/OptimalBits/bull/raw/master/REFERENCE.md#queueprocess&#34;&gt;named processors&lt;/a&gt; to achieve a similar result.&lt;/p&gt; &#xA;&lt;h4&gt;Cluster support&lt;/h4&gt; &#xA;&lt;p&gt;NOTE: From version 3.2.0 and above it is recommended to use threaded processors instead.&lt;/p&gt; &#xA;&lt;p&gt;Queues are robust and can be run in parallel in several threads or processes without any risk of hazards or queue corruption. Check this simple example using cluster to parallelize jobs across processes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Queue = require(&#39;bull&#39;);&#xA;const cluster = require(&#39;cluster&#39;);&#xA;&#xA;const numWorkers = 8;&#xA;const queue = new Queue(&#39;test concurrent queue&#39;);&#xA;&#xA;if (cluster.isMaster) {&#xA;  for (let i = 0; i &amp;lt; numWorkers; i++) {&#xA;    cluster.fork();&#xA;  }&#xA;&#xA;  cluster.on(&#39;online&#39;, function (worker) {&#xA;    // Let&#39;s create a few jobs for the queue workers&#xA;    for (let i = 0; i &amp;lt; 500; i++) {&#xA;      queue.add({ foo: &#39;bar&#39; });&#xA;    };&#xA;  });&#xA;&#xA;  cluster.on(&#39;exit&#39;, function (worker, code, signal) {&#xA;    console.log(&#39;worker &#39; + worker.process.pid + &#39; died&#39;);&#xA;  });&#xA;} else {&#xA;  queue.process(function (job, jobDone) {&#xA;    console.log(&#39;Job done by worker&#39;, cluster.worker.id, job.id);&#xA;    jobDone();&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;For the full documentation, check out the reference and common patterns:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://optimalbits.github.io/bull/&#34;&gt;Guide&lt;/a&gt; — Your starting point for developing with Bull.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/REFERENCE.md&#34;&gt;Reference&lt;/a&gt; — Reference document with all objects and methods available.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/PATTERNS.md&#34;&gt;Patterns&lt;/a&gt; — a set of examples for common patterns.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/OptimalBits/bull/develop/LICENSE.md&#34;&gt;License&lt;/a&gt; — the Bull license—it&#39;s MIT.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you see anything that could use more docs, please submit a pull request!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Important Notes&lt;/h3&gt; &#xA;&lt;p&gt;The queue aims for an &#34;at least once&#34; working strategy. This means that in some situations, a job could be processed more than once. This mostly happens when a worker fails to keep a lock for a given job during the total duration of the processing.&lt;/p&gt; &#xA;&lt;p&gt;When a worker is processing a job it will keep the job &#34;locked&#34; so other workers can&#39;t process it.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s important to understand how locking works to prevent your jobs from losing their lock - becoming &lt;em&gt;stalled&lt;/em&gt; - and being restarted as a result. Locking is implemented internally by creating a lock for &lt;code&gt;lockDuration&lt;/code&gt; on interval &lt;code&gt;lockRenewTime&lt;/code&gt; (which is usually half &lt;code&gt;lockDuration&lt;/code&gt;). If &lt;code&gt;lockDuration&lt;/code&gt; elapses before the lock can be renewed, the job will be considered stalled and is automatically restarted; it will be &lt;strong&gt;double processed&lt;/strong&gt;. This can happen when:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The Node process running your job processor unexpectedly terminates.&lt;/li&gt; &#xA; &lt;li&gt;Your job processor was too CPU-intensive and stalled the Node event loop, and as a result, Bull couldn&#39;t renew the job lock (see &lt;a href=&#34;https://github.com/OptimalBits/bull/issues/488&#34;&gt;#488&lt;/a&gt; for how we might better detect this). You can fix this by breaking your job processor into smaller parts so that no single part can block the Node event loop. Alternatively, you can pass a larger value for the &lt;code&gt;lockDuration&lt;/code&gt; setting (with the tradeoff being that it will take longer to recognize a real stalled job).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;As such, you should always listen for the &lt;code&gt;stalled&lt;/code&gt; event and log this to your error monitoring system, as this means your jobs are likely getting double-processed.&lt;/p&gt; &#xA;&lt;p&gt;As a safeguard so problematic jobs won&#39;t get restarted indefinitely (e.g. if the job processor always crashes its Node process), jobs will be recovered from a stalled state a maximum of &lt;code&gt;maxStalledCount&lt;/code&gt; times (default: &lt;code&gt;1&lt;/code&gt;).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>atlassian/react-beautiful-dnd</title>
    <updated>2022-09-30T01:39:36Z</updated>
    <id>tag:github.com,2022-09-30:/atlassian/react-beautiful-dnd</id>
    <link href="https://github.com/atlassian/react-beautiful-dnd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beautiful and accessible drag and drop for lists with React&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;⚠️ Maintenance &amp;amp; support&lt;/h2&gt; &#xA;&lt;p&gt;This library continues to be relied upon heavily by Atlassian products, but we are focused on other priorities right now and have no current plans for further feature development or improvements.&lt;/p&gt; &#xA;&lt;p&gt;It will continue to be here on GitHub and we will still make critical updates (e.g. security fixes, if any) as required, but will not be actively monitoring or replying to issues and pull requests.&lt;/p&gt; &#xA;&lt;p&gt;We recommend that you don’t raise issues or pull requests, as they will not be reviewed or actioned until further notice.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://user-images.githubusercontent.com/2182637/53611918-54c1ff80-3c24-11e9-9917-66ac3cef513d.png&#34; alt=&#34;react beautiful dnd logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;react-beautiful-dnd &lt;small&gt;&lt;sup&gt;(rbd)&lt;/sup&gt;&lt;/small&gt;&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;strong&gt;Beautiful&lt;/strong&gt; and &lt;strong&gt;accessible&lt;/strong&gt; drag and drop for lists with &lt;a href=&#34;https://facebook.github.io/react/&#34;&gt;&lt;code&gt;React&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/atlassian/react-beautiful-dnd/tree/master&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/atlassian/react-beautiful-dnd/master.svg?sanitize=true&#34; alt=&#34;CircleCI branch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-beautiful-dnd&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-beautiful-dnd.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2182637/53614150-efbed780-3c2c-11e9-9204-a5d2e746faca.gif&#34; alt=&#34;quote application example&#34;&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://react-beautiful-dnd.netlify.com/iframe.html?selectedKind=board&amp;amp;selectedStory=simple&#34;&gt;Play with this example if you want!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Core characteristics&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Beautiful and &lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/animations.md&#34;&gt;natural movement&lt;/a&gt; of items 💐&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/accessibility.md&#34;&gt;Accessible&lt;/a&gt;: powerful keyboard and screen reader support ♿️&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/support/media.md&#34;&gt;Extremely performant&lt;/a&gt; 🚀&lt;/li&gt; &#xA; &lt;li&gt;Clean and powerful api which is simple to get started with&lt;/li&gt; &#xA; &lt;li&gt;Plays extremely well with standard browser interactions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/preset-styles.md&#34;&gt;Unopinionated styling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;No creation of additional wrapper dom nodes - flexbox and focus management friendly!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get started 👩‍🏫&lt;/h2&gt; &#xA;&lt;p&gt;We have created &lt;a href=&#34;https://egghead.io/courses/beautiful-and-accessible-drag-and-drop-with-react-beautiful-dnd&#34;&gt;a free course on &lt;code&gt;egghead.io&lt;/code&gt; 🥚&lt;/a&gt; to help you get started with &lt;code&gt;react-beautiful-dnd&lt;/code&gt; as quickly as possible.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://egghead.io/courses/beautiful-and-accessible-drag-and-drop-with-react-beautiful-dnd&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2182637/43372837-8c72d3f8-93e8-11e8-9d92-a82adde7718f.png&#34; alt=&#34;course-logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Currently supported feature set ✅&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical lists ↕&lt;/li&gt; &#xA; &lt;li&gt;Horizontal lists ↔&lt;/li&gt; &#xA; &lt;li&gt;Movement between lists (▤ ↔ ▤)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/patterns/virtual-lists.md&#34;&gt;Virtual list support 👾&lt;/a&gt; - unlocking 10,000 items @ 60fps&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/combining.md&#34;&gt;Combining items&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mouse 🐭, keyboard 🎹♿️ and touch 👉📱 (mobile, tablet and so on) support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/patterns/multi-drag.md&#34;&gt;Multi drag support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Incredible screen reader support ♿️ - we provide an amazing experience for english screen readers out of the box 📦. We also provide complete customisation control and internationalisation support for those who need it 💖&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/draggable.md#optional-props&#34;&gt;Conditional dragging&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/droppable.md#conditionally-dropping&#34;&gt;conditional dropping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Multiple independent lists on the one page&lt;/li&gt; &#xA; &lt;li&gt;Flexible item sizes - the draggable items can have different heights (vertical lists) or widths (horizontal lists)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/changes-while-dragging.md&#34;&gt;Add and remove items during a drag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Compatible with semantic &lt;code&gt;&amp;lt;table&amp;gt;&lt;/code&gt; reordering - &lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/patterns/tables.md&#34;&gt;table pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/auto-scrolling.md&#34;&gt;Auto scrolling&lt;/a&gt; - automatically scroll containers and the window as required during a drag (even with keyboard 🔥)&lt;/li&gt; &#xA; &lt;li&gt;Custom drag handles - you can drag a whole item by just a part of it&lt;/li&gt; &#xA; &lt;li&gt;Able to move the dragging item to another element while dragging (clone, portal) - &lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/reparenting.md&#34;&gt;Reparenting your &lt;code&gt;&amp;lt;Draggable /&amp;gt;&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/sensors/sensor-api.md&#34;&gt;Create scripted drag and drop experiences 🎮&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Allows extensions to support for &lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/sensors/sensor-api.md&#34;&gt;any input type you like 🕹&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🌲 Tree support through the &lt;a href=&#34;https://atlaskit.atlassian.com/packages/confluence/tree&#34;&gt;&lt;code&gt;@atlaskit/tree&lt;/code&gt;&lt;/a&gt; package&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;&amp;lt;Droppable /&amp;gt;&lt;/code&gt; list can be a scroll container (without a scrollable parent) or be the child of a scroll container (that also does not have a scrollable parent)&lt;/li&gt; &#xA; &lt;li&gt;Independent nested lists - a list can be a child of another list, but you cannot drag items from the parent list into a child list&lt;/li&gt; &#xA; &lt;li&gt;Server side rendering (SSR) compatible - see &lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/reset-server-context.md&#34;&gt;resetServerContext()&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Plays well with &lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/draggable.md#interactive-child-elements-within-a-draggable-&#34;&gt;nested interactive elements&lt;/a&gt; by default&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Motivation 🤔&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;react-beautiful-dnd&lt;/code&gt; exists to create beautiful drag and drop for lists that anyone can use - even people who cannot see. For a good overview of the history and motivations of the project you can take a look at these external resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📖 &lt;a href=&#34;https://medium.com/@alexandereardon/rethinking-drag-and-drop-d9f5770b4e6b&#34;&gt;Rethinking drag and drop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎧 &lt;a href=&#34;https://reactpodcast.simplecast.fm/17&#34;&gt;React podcast: fast, accessible and beautiful drag and drop&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Not for everyone ✌️&lt;/h2&gt; &#xA;&lt;p&gt;There are a lot of libraries out there that allow for drag and drop interactions within React. Most notable of these is the amazing &lt;a href=&#34;https://github.com/react-dnd/react-dnd&#34;&gt;&lt;code&gt;react-dnd&lt;/code&gt;&lt;/a&gt;. It does an incredible job at providing a great set of drag and drop primitives which work especially well with the &lt;a href=&#34;https://www.quirksmode.org/blog/archives/2009/09/the_html5_drag.html&#34;&gt;wildly inconsistent&lt;/a&gt; html5 drag and drop feature. &lt;code&gt;react-beautiful-dnd&lt;/code&gt; is a higher level abstraction specifically built for lists (vertical, horizontal, movement between lists, nested lists and so on). Within that subset of functionality &lt;code&gt;react-beautiful-dnd&lt;/code&gt; offers a powerful, natural and beautiful drag and drop experience. However, it does not provide the breadth of functionality offered by &lt;code&gt;react-dnd&lt;/code&gt;. So &lt;code&gt;react-beautiful-dnd&lt;/code&gt; might not be for you depending on what your use case is.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation 📖&lt;/h2&gt; &#xA;&lt;h3&gt;About 👋&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/installation.md&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/examples.md&#34;&gt;Examples and samples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egghead.io/courses/beautiful-and-accessible-drag-and-drop-with-react-beautiful-dnd&#34;&gt;Get started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/design-principles.md&#34;&gt;Design principles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/animations.md&#34;&gt;Animations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/accessibility.md&#34;&gt;Accessibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/about/browser-support.md&#34;&gt;Browser support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Sensors 🔉&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The ways in which somebody can start and control a drag&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/sensors/mouse.md&#34;&gt;Mouse dragging 🐭&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/sensors/touch.md&#34;&gt;Touch dragging 👉📱&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/sensors/keyboard.md&#34;&gt;Keyboard dragging 🎹♿️&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/sensors/sensor-api.md&#34;&gt;Create your own sensor&lt;/a&gt; (allows for any input type as well as scripted experiences)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;API 🏋️‍&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/2182637/53607406-c8f3a780-3c12-11e9-979c-7f3b5bd1bfbd.gif&#34; alt=&#34;diagram&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/drag-drop-context.md&#34;&gt;&lt;code&gt;&amp;lt;DragDropContext /&amp;gt;&lt;/code&gt;&lt;/a&gt; - &lt;em&gt;Wraps the part of your application you want to have drag and drop enabled for&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/droppable.md&#34;&gt;&lt;code&gt;&amp;lt;Droppable /&amp;gt;&lt;/code&gt;&lt;/a&gt; - &lt;em&gt;An area that can be dropped into. Contains &lt;code&gt;&amp;lt;Draggable /&amp;gt;&lt;/code&gt;s&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/draggable.md&#34;&gt;&lt;code&gt;&amp;lt;Draggable /&amp;gt;&lt;/code&gt;&lt;/a&gt; - &lt;em&gt;What can be dragged around&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/api/reset-server-context.md&#34;&gt;&lt;code&gt;resetServerContext()&lt;/code&gt;&lt;/a&gt; - &lt;em&gt;Utility for server side rendering (SSR)&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Guides 🗺&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/responders.md&#34;&gt;&lt;code&gt;&amp;lt;DragDropContext /&amp;gt;&lt;/code&gt; responders&lt;/a&gt; - &lt;em&gt;&lt;code&gt;onDragStart&lt;/code&gt;, &lt;code&gt;onDragUpdate&lt;/code&gt;, &lt;code&gt;onDragEnd&lt;/code&gt; and &lt;code&gt;onBeforeDragStart&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/combining.md&#34;&gt;Combining &lt;code&gt;&amp;lt;Draggable /&amp;gt;&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/common-setup-issues.md&#34;&gt;Common setup issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/using-inner-ref.md&#34;&gt;Using &lt;code&gt;innerRef&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/setup-problem-detection-and-error-recovery.md&#34;&gt;Setup problem detection and error recovery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/identifiers.md&#34;&gt;Rules for &lt;code&gt;draggableId&lt;/code&gt; and &lt;code&gt;droppableId&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/browser-focus.md&#34;&gt;Browser focus retention&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/drop-animation.md&#34;&gt;Customising or skipping the drop animation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/auto-scrolling.md&#34;&gt;Auto scrolling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/screen-reader.md&#34;&gt;Controlling the screen reader&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/doctype.md&#34;&gt;Use the html5 &lt;code&gt;doctype&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/types.md&#34;&gt;&lt;code&gt;TypeScript&lt;/code&gt; and &lt;code&gt;flow&lt;/code&gt;: type information&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/dragging-svgs.md&#34;&gt;Dragging &lt;code&gt;&amp;lt;svg&amp;gt;&lt;/code&gt;s&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/avoiding-image-flickering.md&#34;&gt;Avoiding image flickering&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/preset-styles.md&#34;&gt;Non-visible preset styles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/how-we-detect-scroll-containers.md&#34;&gt;How we detect scroll containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/how-we-use-dom-events.md&#34;&gt;How we use dom events&lt;/a&gt; - &lt;em&gt;Useful if you need to build on top of &lt;code&gt;react-beautiful-dnd&lt;/code&gt;&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/changes-while-dragging.md&#34;&gt;Adding &lt;code&gt;&amp;lt;Draggable /&amp;gt;&lt;/code&gt;s during a drag (11.x behaviour)&lt;/a&gt; - &lt;em&gt;⚠️ Advanced&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/content-security-policy.md&#34;&gt;Setting up Content Security Policy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Patterns 👷‍&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/patterns/virtual-lists.md&#34;&gt;Virtual lists 👾&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/patterns/multi-drag.md&#34;&gt;Multi drag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/patterns/tables.md&#34;&gt;Tables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/guides/reparenting.md&#34;&gt;Reparenting a &lt;code&gt;&amp;lt;Draggable /&amp;gt;&lt;/code&gt;&lt;/a&gt; - &lt;em&gt;Using our cloning API or your own portal&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Support 👩‍⚕️&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/support/engineering-health.md&#34;&gt;Engineering health&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/support/community-and-addons.md&#34;&gt;Community and addons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atlassian/react-beautiful-dnd/releases&#34;&gt;Release notes and changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/support/upgrading.md&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atlassian/react-beautiful-dnd/issues&#34;&gt;Road map&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/atlassian/react-beautiful-dnd/master/docs/support/media.md&#34;&gt;Media&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Read this in other languages 🌎&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/LeeHyungGeun/react-beautiful-dnd-kr&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&#34; alt=&#34;kr&#34;&gt; &lt;strong&gt;한글/Korean&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vtereshyn/react-beautiful-dnd-ru&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&#34; alt=&#34;ru&#34;&gt; &lt;strong&gt;На русском/Russian&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dudestein/react-beautiful-dnd-pt&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&#34; alt=&#34;pt&#34;&gt; &lt;strong&gt;Português/Portuguese&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/milvard/react-beautiful-dnd-gr&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Greece.png&#34; alt=&#34;gr&#34;&gt; &lt;strong&gt;Ελληνικά/Greek&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eltociear/react-beautiful-dnd-ja&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&#34; alt=&#34;ja&#34;&gt; &lt;strong&gt;日本語/Japanese&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Creator ✍️&lt;/h2&gt; &#xA;&lt;p&gt;Alex Reardon &lt;a href=&#34;https://twitter.com/alexandereardon&#34;&gt;@alexandereardon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Alex is no longer personally maintaning this project. The other wonderful maintainers are carrying this project forward.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/danieldelcore&#34;&gt;Daniel Del Core&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Many other &lt;a href=&#34;https://twitter.com/Atlassian&#34;&gt;@Atlassian&lt;/a&gt;&#39;s!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Collaborators 🤝&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bogdan Chadkin &lt;a href=&#34;https://twitter.com/IAmTrySound&#34;&gt;@IAmTrySound&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>