<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-10T01:30:05Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>alexpinel/Dot</title>
    <updated>2024-04-10T01:30:05Z</updated>
    <id>tag:github.com,2024-04-10:/alexpinel/Dot</id>
    <link href="https://github.com/alexpinel/Dot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Standalone app for fully local RAG with Mistral 7B&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HELLO!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/alexpinel/Dot/assets/93524949/e5983c61-d59c-45ac-86f6-9d62cffaf37b&#34; alt=&#34;ezgif-4-b96c0b5548&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is Dot, a standalone open source app meant for easy use of local LLMs and RAG in particular to interact with documents and files similarly to Nvidia&#39;s Chat with RTX. Dot itself is completely standalone and is packaged with all dependencies including a copy of Mistral 7B, this is to ensure the app is as accessible as possible and no prior knowledge of programming or local LLMs is required to use it. You can install the app (available for Apple Silicon and Windows) here: &lt;a href=&#34;https://dotapp.uk/&#34;&gt;Dot website &lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;What does it do?&lt;/h3&gt; &#xA;&lt;p&gt;Dot can be used to load multiple documents into an llm and interact with them in a fully local environment through Retrieval Augmented Generation (RAG), supported documents are: pdf, docx, pptx, xlsx, and markdown. Apart from RAG, users can also switch to Big Dot for any interactions unrelated to their documents similarly to ChatGPT.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alexpinel/Dot/assets/93524949/807fb58c-40e0-407e-afb3-a3813477ce9e&#34;&gt;https://github.com/alexpinel/Dot/assets/93524949/807fb58c-40e0-407e-afb3-a3813477ce9e&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How does it work?&lt;/h3&gt; &#xA;&lt;p&gt;Dot is built with Electron JS, but its main functionalities come from a bundled install of Python that contains all libraries and necessary files. A multitude of libraries are used to make everything work, but perhaps the most important to be aware of are: llama.cpp to run the LLM, FAISS to create local vector stores, and Langchain &amp;amp; Huggingface to setup the conversation chains and embedding process.&lt;/p&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;You can either install the packaged app in the &lt;a href=&#34;https://dotapp.uk/&#34;&gt;Dot website &lt;/a&gt; or can set up the project for development, to do so follow these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Clone the repository &lt;code&gt;$ https://github.com/alexpinel/Dot.git&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install Node js and then run &lt;code&gt;npm install&lt;/code&gt; inside the project repository, you can run &lt;code&gt;npm install --force&lt;/code&gt; if you face any issues at this stage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, it is time to add a full python bundle to the app. The purpose of this is to create a distributable environment with all necessary libraries, if you only plan on using Dot from the console you might not need to follow this particular step but then make sure to replace the python path locations specified in &lt;code&gt;src/index.js&lt;/code&gt;. Creating the python bundle is covered in detail here: &lt;a href=&#34;https://til.simonwillison.net/electron/python-inside-electron&#34;&gt;https://til.simonwillison.net/electron/python-inside-electron&lt;/a&gt; , the bundles can also be installed from here: &lt;a href=&#34;https://github.com/indygreg/python-build-standalone/releases/tag/20240224&#34;&gt;https://github.com/indygreg/python-build-standalone/releases/tag/20240224&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Having created the bundle, please rename it to &#39;python&#39; and place it inside the &lt;code&gt;llm&lt;/code&gt; directory. It is now time to get all necessary libraries, keep in mind that running a simple &lt;code&gt;pip install&lt;/code&gt; will not work without specifying the actual path of the bundle so use this instead: &lt;code&gt;path/to/python/.bin/or/.exe -m pip install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Required python libraries:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;pytorch &lt;a href=&#34;https://pytorch.org/get-started/locally/&#34;&gt;link&lt;/a&gt; (CPU version recommended as it is lighter than GPU)&lt;/li&gt; &#xA; &lt;li&gt;langchain &lt;a href=&#34;https://python.langchain.com/docs/get_started/quickstart&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;FAISS &lt;a href=&#34;https://python.langchain.com/docs/integrations/vectorstores/faiss&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;HuggingFace &lt;a href=&#34;https://python.langchain.com/docs/integrations/platforms/huggingface&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;llama.cpp &lt;a href=&#34;https://github.com/abetlen/llama-cpp-python&#34;&gt;link&lt;/a&gt; (Use CUDA implementation if you have an Nvidia GPU!)&lt;/li&gt; &#xA; &lt;li&gt;pypdf &lt;a href=&#34;https://python.langchain.com/docs/modules/data_connection/document_loaders/pdf&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;docx2txt &lt;a href=&#34;https://python.langchain.com/docs/integrations/document_loaders/microsoft_word&#34;&gt;link&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Unstructured &lt;a href=&#34;https://github.com/Unstructured-IO/unstructured&#34;&gt;link&lt;/a&gt; (Use &lt;code&gt;pip install &#34;unstructured[pptx, md, xlsx]&lt;/code&gt; for the file formats)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now python should be setup and running! However, there is still a few more steps left, now is the time to add the final magic to Dot! First, create a folder inside the &lt;code&gt;llm&lt;/code&gt; directory and name it &lt;code&gt;mpnet&lt;/code&gt;, there you will need to install sentence-transformers to use for the document embeddings, fetch all the files from the following link and place them inside the new folder: &lt;a href=&#34;https://huggingface.co/sentence-transformers/all-mpnet-base-v2/tree/main&#34;&gt;sentence-transformers/all-mpnet-base-v2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Finally, download the Mistral 7B LLM from the following link and place it inside the &lt;code&gt;llm/scripts&lt;/code&gt; directory alongside the python scripts used by Dot: &lt;a href=&#34;https://huggingface.co/TheBloke/Mistral-7B-Instruct-v0.2-GGUF/blob/main/mistral-7b-instruct-v0.2.Q4_K_M.gguf&#34;&gt;TheBloke/Mistral-7B-Instruct-v0.2-GGUF&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it! If you follow these steps you should be able to get it all running, please let me know if you are facing any issues :)&lt;/p&gt; &#xA;&lt;h3&gt;Future features I&#39;d like to add:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux support&lt;/li&gt; &#xA; &lt;li&gt;Ability to choose LLM&lt;/li&gt; &#xA; &lt;li&gt;Image support would be cool&lt;/li&gt; &#xA; &lt;li&gt;Increased awarnes of documents apart from merely their content&lt;/li&gt; &#xA; &lt;li&gt;Loading individual files instead of selecting a folder (This is really needed, some users get confused by this and I cannot blame them at all)&lt;/li&gt; &#xA; &lt;li&gt;Increased security considerations, after all this is the whole point of using a local LLM&lt;/li&gt; &#xA; &lt;li&gt;Support for more docs&lt;/li&gt; &#xA; &lt;li&gt;Storing file databases, allowing users to quickly switch between groups of files without having to load them all again&lt;/li&gt; &#xA; &lt;li&gt;idk, will find out along the way&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Want to help?&lt;/h1&gt; &#xA;&lt;p&gt;Please do! I am a busy student working on this as a side project so help is more than welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>stackframe-projects/pgmock</title>
    <updated>2024-04-10T01:30:05Z</updated>
    <id>tag:github.com,2024-04-10:/stackframe-projects/pgmock</id>
    <link href="https://github.com/stackframe-projects/pgmock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;In-memory Postgres for unit/E2E tests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pgmock&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://stackframe-projects.github.io/pgmock&#34;&gt;Demo&lt;/a&gt; â€” &lt;a href=&#34;https://discord.gg/pD4nyYyKrb&#34;&gt;Discord&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;pgmock&lt;/code&gt; is an in-memory PostgreSQL mock server for unit and E2E tests. It requires no external dependencies and runs entirely within WebAssembly on both Node.js and the browser.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install pgmock&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;d like to run &lt;code&gt;pgmock&lt;/code&gt; in a browser, see the &lt;a href=&#34;https://raw.githubusercontent.com/stackframe-projects/pgmock/main/#browser-support&#34;&gt;Browser support&lt;/a&gt; section for detailed instructions.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;You can run an in-memory server like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import { PostgresMock } from &#34;pgmock&#34;;&#xA;&#xA;const mock = await PostgresMock.create();&#xA;const connectionString = await mock.listen(5432);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recommended: If you use &lt;code&gt;node-postgres&lt;/code&gt; (&lt;code&gt;pg&lt;/code&gt; on npm), &lt;code&gt;pgmock&lt;/code&gt; provides you with a configuration object that doesn&#39;t require you to serve on a port (and also works in the browser):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;import * as pg from &#34;pg&#34;;&#xA;&#xA;const mock = await PostgresMock.create();&#xA;const client = new pg.Client(mock.getNodePostgresConfig());&#xA;&#xA;await client.connect();&#xA;console.log(await client.query(&#39;SELECT $1::text as message&#39;, [&#39;Hello world!&#39;]));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is considered good practice to destroy the mock server after you are done with it to free up resources:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;mock.destroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://github.com/stackframe-projects/pgmock/raw/main/src/postgres-mock.ts&#34;&gt;PostgresMock source file&lt;/a&gt; for a list of all available methods and their documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Browser support&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pgmock&lt;/code&gt; fully supports browser environments. While webapps can&#39;t listen to TCP ports, you can still use &lt;code&gt;PostgresMock.createSocket&lt;/code&gt; and the &lt;code&gt;node-postgres&lt;/code&gt; configuration. However, if your bundler statically analyzes imports, the default configuration may show a warning because of missing (optional) Node.js modules. Check &lt;code&gt;examples/web-demo/next.config.mjs&lt;/code&gt; for an example on how to configure Webpack for bundling.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re only looking to run a database in the browser, you might want to consider &lt;a href=&#34;https://github.com/electric-sql/pglite&#34;&gt;pglite&lt;/a&gt; instead. It is more performant and lightweight, but only has a limited feature set. &lt;code&gt;pgmock&lt;/code&gt; is designed for feature parity with production PostgreSQL environments, as you would want in a testing environment.&lt;/p&gt; &#xA;&lt;h2&gt;How does it work?&lt;/h2&gt; &#xA;&lt;p&gt;There are two approaches to run Postgres in WebAssembly; by &lt;a href=&#34;https://github.com/electric-sql/postgres-wasm&#34;&gt;forking it to support WASM natively&lt;/a&gt; or by &lt;a href=&#34;https://supabase.com/blog/postgres-wasm&#34;&gt;emulating the Postgres server in an x86 emulator&lt;/a&gt;. The former is more performant and uses considerably less memory, but only supports single-user mode (no connections), and no extensions.&lt;/p&gt; &#xA;&lt;p&gt;To prevent discrepancies between testing and production, and because performance is not usually a concern in tests, &lt;code&gt;pgmock&lt;/code&gt; currently uses the latter approach. In the mid-term future, once native Postgres WASM forks mature, we plan to make both options available, and eventually, switch to native WASM as default. We don&#39;t expect there to be many breaking changes besides the APIs inside &lt;code&gt;PostgresMock.subtle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pgmock&lt;/code&gt; differs from previous Postgres-in-the-browser projects by providing full feature-compatibility entirely inside the JavaScript runtime, without depending on a network proxy for communication. We did this by simulating a network stack in JavaScript that behaves like a real network, that can simulate TCP connections even on platforms that do not allow raw socket access.&lt;/p&gt; &#xA;&lt;h2&gt;Wanna contribute?&lt;/h2&gt; &#xA;&lt;p&gt;Great! We have a &lt;a href=&#34;https://discord.gg/pD4nyYyKrb&#34;&gt;Discord server&lt;/a&gt; where you can talk to us.&lt;/p&gt; &#xA;&lt;h2&gt;Can this run other Docker images or databases?&lt;/h2&gt; &#xA;&lt;p&gt;In theory, yes. I just haven&#39;t tested them. Ping me on our &lt;a href=&#34;https://discord.gg/pD4nyYyKrb&#34;&gt;Discord server&lt;/a&gt; if you&#39;re interested.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/copy/v86&#34;&gt;v86&lt;/a&gt;, the x86 emulator which makes this possible&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://supabase.com/blog/postgres-wasm&#34;&gt;Supabase &amp;amp; Snaplet&lt;/a&gt; for building their own approach of running Postgres inside WebAssembly, which this is based on&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackframe.co&#34;&gt;Stackframe&lt;/a&gt; for keeping me on a payroll while I was building &lt;code&gt;pgmock&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>drawdb-io/drawdb</title>
    <updated>2024-04-10T01:30:05Z</updated>
    <id>tag:github.com,2024-04-10:/drawdb-io/drawdb</id>
    <link href="https://github.com/drawdb-io/drawdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free, simple, and intuitive online database design tool and SQL generator.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt; &lt;img width=&#34;80&#34; alt=&#34;Puter.com, The Personal Cloud Computer: All your files, apps, and games in one place accessible from anywhere at any time.&#34; src=&#34;https://raw.githubusercontent.com/drawdb-io/drawdb/main/src/assets/icon-dark.png&#34;&gt; &lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Free, simple, and intuitive database design tool and SQL generator.&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://drawdb.vercel.app/&#34;&gt;drawDB&lt;/a&gt; Â· &lt;a href=&#34;https://discord.gg/BrjZgNrmR6&#34;&gt;Discord&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;&lt;img width=&#34;700&#34; style=&#34;border-radius:5px;&#34; alt=&#34;demo&#34; src=&#34;https://raw.githubusercontent.com/drawdb-io/drawdb/main/drawdb.gif&#34;&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;drawDB&lt;/h2&gt; &#xA;&lt;p&gt;DrawDB is a robust and user-friendly database entity relationship (DBER) editor right in your browser. Build diagrams with a few clicks, export sql scripts, customize your editor, and more without creating an account. See the full set of features &lt;a href=&#34;https://drawdb.vercel.app/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Local Development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/drawdb-io/drawdb&#xA;cd drawdb&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Build&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/drawdb-io/drawdb&#xA;cd drawdb&#xA;npm install&#xA;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set up the &lt;a href=&#34;https://github.com/drawdb-io/drawdb-server&#34;&gt;server&lt;/a&gt; and environment variables according to &lt;code&gt;.env.sample&lt;/code&gt; for the survey and bug report forms.&lt;/p&gt;</summary>
  </entry>
</feed>