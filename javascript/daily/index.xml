<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-06T01:32:23Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>git-tips/tips</title>
    <updated>2025-05-06T01:32:23Z</updated>
    <id>tag:github.com,2025-05-06:/git-tips/tips</id>
    <link href="https://github.com/git-tips/tips" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Most commonly used git tips and tricks.&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;git-tips&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Collection of &lt;code&gt;git-tips&lt;/code&gt;, want to add your tips? Checkout &lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/contributing.md&#34;&gt;contributing.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://git.io/git-tips&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://github.com/521xueweihan/git-tips&#34;&gt;中文&lt;/a&gt; | &lt;a href=&#34;https://github.com/Imangazaliev/git-tips&#34;&gt;Русский&lt;/a&gt; | &lt;a href=&#34;https://github.com/mingrammer/git-tips&#34;&gt;한국어&lt;/a&gt; | &lt;a href=&#34;https://github.com/hprobotic/git-tips&#34;&gt;Tiếng Việt&lt;/a&gt; | &lt;a href=&#34;https://github.com/isotai/git-tips&#34;&gt;日本語&lt;/a&gt; | &lt;a href=&#34;https://github.com/amarduwal/git-tips&#34;&gt;नेपाली&lt;/a&gt; | &lt;a href=&#34;https://github.com/mbiesiad/tips&#34;&gt;Polski&lt;/a&gt; | &lt;a href=&#34;https://github.com/javadnikbakht/git-tips&#34;&gt;فارسی&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;Tools:&lt;/strong&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/git-tip&#34;&gt;git-tip&lt;/a&gt; - A handy CLI to make optimum use of these tips. (&lt;a href=&#34;https://github.com/djoudi5/docker-git-tip&#34;&gt;Here in Docker container&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;P.S: All these commands are tested on &lt;code&gt;git version 2.7.4 (Apple Git-66)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;!-- @doxie.inject start toc --&gt; &#xA;&lt;!-- Don’t remove or change the comment above – that can break automatic updates. --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#everyday-git-in-twenty-commands-or-so&#34;&gt;Everyday Git in twenty commands or so&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-helpful-guides-that-come-with-git&#34;&gt;Show helpful guides that come with Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#search-change-by-content&#34;&gt;Search change by content&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-changes-over-time-for-specific-file&#34;&gt;Show changes over time for specific file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#remove-sensitive-data-from-history-after-a-push&#34;&gt;Remove sensitive data from history, after a push&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#sync-with-remote-overwrite-local-changes&#34;&gt;Sync with remote, overwrite local changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-of-all-files-till-a-commit&#34;&gt;List of all files till a commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#git-reset-first-commit&#34;&gt;Git reset first commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#reset-preserve-uncommitted-local-changes&#34;&gt;Reset: preserve uncommitted local changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-all-the-conflicted-files&#34;&gt;List all the conflicted files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-of-all-files-changed-in-a-commit&#34;&gt;List of all files changed in a commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#unstaged-changes-since-last-commit&#34;&gt;Unstaged changes since last commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#changes-staged-for-commit&#34;&gt;Changes staged for commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-both-staged-and-unstaged-changes&#34;&gt;Show both staged and unstaged changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-all-branches-that-are-already-merged-into-master&#34;&gt;List all branches that are already merged into master&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#quickly-switch-to-the-previous-branch&#34;&gt;Quickly switch to the previous branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#remove-branches-that-have-already-been-merged-with-master&#34;&gt;Remove branches that have already been merged with master&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-all-branches-and-their-upstreams-as-well-as-last-commit-on-branch&#34;&gt;List all branches and their upstreams, as well as last commit on branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#track-upstream-branch&#34;&gt;Track upstream branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#delete-local-branch&#34;&gt;Delete local branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#delete-remote-branch&#34;&gt;Delete remote branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#create-local-tag&#34;&gt;Create local tag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#delete-local-tag&#34;&gt;Delete local tag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#delete-remote-tag&#34;&gt;Delete remote tag&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#undo-local-changes-with-the-last-content-in-head&#34;&gt;Undo local changes with the last content in head&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#revert-undo-a-commit-by-creating-a-new-commit&#34;&gt;Revert: Undo a commit by creating a new commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#reset-discard-commits-advised-for-private-branch&#34;&gt;Reset: Discard commits, advised for private branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#reword-the-previous-commit-message&#34;&gt;Reword the previous commit message&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#see-commit-history-for-just-the-current-branch&#34;&gt;See commit history for just the current branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#amend-author&#34;&gt;Amend author.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#reset-author-after-author-has-been-changed-in-the-global-config&#34;&gt;Reset author, after author has been changed in the global config.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#changing-a-remotes-url&#34;&gt;Changing a remote&#39;s URL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-list-of-all-remote-references&#34;&gt;Get list of all remote references&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-list-of-all-local-and-remote-branches&#34;&gt;Get list of all local and remote branches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-only-remote-branches&#34;&gt;Get only remote branches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#stage-parts-of-a-changed-file-instead-of-the-entire-file&#34;&gt;Stage parts of a changed file, instead of the entire file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-git-bash-completion&#34;&gt;Get git bash completion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#what-changed-since-two-weeks&#34;&gt;What changed since two weeks?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#see-all-commits-made-since-forking-from-master&#34;&gt;See all commits made since forking from master&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#pick-commits-across-branches-using-cherry-pick&#34;&gt;Pick commits across branches using cherry-pick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#find-out-branches-containing-commit-hash&#34;&gt;Find out branches containing commit-hash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#git-aliases&#34;&gt;Git Aliases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#saving-current-state-of-tracked-files-without-commiting&#34;&gt;Saving current state of tracked files without commiting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#saving-current-state-of-unstaged-changes-to-tracked-files&#34;&gt;Saving current state of unstaged changes to tracked files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#saving-current-state-including-untracked-files&#34;&gt;Saving current state including untracked files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#saving-current-state-with-message&#34;&gt;Saving current state with message&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#saving-current-state-of-all-files-ignored-untracked-and-tracked&#34;&gt;Saving current state of all files (ignored, untracked, and tracked)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-list-of-all-saved-stashes&#34;&gt;Show list of all saved stashes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-the-contents-of-any-stash-in-patch-form&#34;&gt;Show the contents of any stash in patch form&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#apply-any-stash-without-deleting-from-the-stashed-list&#34;&gt;Apply any stash without deleting from the stashed list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#apply-last-stashed-state-and-delete-it-from-stashed-list&#34;&gt;Apply last stashed state and delete it from stashed list&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#delete-all-stored-stashes&#34;&gt;Delete all stored stashes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#grab-a-single-file-from-a-stash&#34;&gt;Grab a single file from a stash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-all-tracked-files&#34;&gt;Show all tracked files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-all-untracked-files&#34;&gt;Show all untracked files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-all-ignored-files&#34;&gt;Show all ignored files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#create-new-working-tree-from-a-repository-git-25&#34;&gt;Create new working tree from a repository (git 2.5)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#create-new-working-tree-from-head-state&#34;&gt;Create new working tree from HEAD state&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#untrack-files-without-deleting&#34;&gt;Untrack files without deleting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#before-deleting-untracked-filesdirectory-do-a-dry-run-to-get-the-list-of-these-filesdirectories&#34;&gt;Before deleting untracked files/directory, do a dry run to get the list of these files/directories&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#forcefully-remove-untracked-files&#34;&gt;Forcefully remove untracked files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#forcefully-remove-untracked-directory&#34;&gt;Forcefully remove untracked directory&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#update-all-the-submodules&#34;&gt;Update all the submodules&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-all-commits-in-the-current-branch-yet-to-be-merged-to-master&#34;&gt;Show all commits in the current branch yet to be merged to master&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#rename-a-branch&#34;&gt;Rename a branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#rebases-feature-to-master-and-merges-it-in-to-master&#34;&gt;Rebases &#39;feature&#39; to &#39;master&#39; and merges it in to master &lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#archive-the-master-branch&#34;&gt;Archive the &lt;code&gt;master&lt;/code&gt; branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#modify-previous-commit-without-modifying-the-commit-message&#34;&gt;Modify previous commit without modifying the commit message&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#prunes-references-to-remove-branches-that-have-been-deleted-in-the-remote&#34;&gt;Prunes references to remove branches that have been deleted in the remote.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#delete-local-branches-that-has-been-squash-and-merged-in-the-remote&#34;&gt;Delete local branches that has been squash and merged in the remote.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#retrieve-the-commit-hash-of-the-initial-revision&#34;&gt;Retrieve the commit hash of the initial revision.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#visualize-the-version-tree&#34;&gt;Visualize the version tree.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#visualize-the-tree-including-commits-that-are-only-referenced-from-reflogs&#34;&gt;Visualize the tree including commits that are only referenced from reflogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#deploying-git-tracked-subfolder-to-gh-pages&#34;&gt;Deploying git tracked subfolder to gh-pages&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#adding-a-project-to-repo-using-subtree&#34;&gt;Adding a project to repo using subtree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-latest-changes-in-your-repo-for-a-linked-project-using-subtree&#34;&gt;Get latest changes in your repo for a linked project using subtree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#export-a-branch-with-history-to-a-file&#34;&gt;Export a branch with history to a file.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#import-from-a-bundle&#34;&gt;Import from a bundle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-the-name-of-current-branch&#34;&gt;Get the name of current branch.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#ignore-one-file-on-commit-eg-changelog&#34;&gt;Ignore one file on commit (e.g. Changelog).&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#stash-changes-before-rebasing&#34;&gt;Stash changes before rebasing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#fetch-pull-request-by-id-to-a-local-branch&#34;&gt;Fetch pull request by ID to a local branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-the-most-recent-tag-on-the-current-branch&#34;&gt;Show the most recent tag on the current branch.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-inline-word-diff&#34;&gt;Show inline word diff.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-changes-using-common-diff-tools&#34;&gt;Show changes using common diff tools.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#dont-consider-changes-for-tracked-file&#34;&gt;Don’t consider changes for tracked file.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#undo-assume-unchanged&#34;&gt;Undo assume-unchanged.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#clean-the-files-from-gitignore&#34;&gt;Clean the files from &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#restore-deleted-file&#34;&gt;Restore deleted file.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#restore-file-to-a-specific-commit-hash&#34;&gt;Restore file to a specific commit-hash&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#always-rebase-instead-of-merge-on-pull&#34;&gt;Always rebase instead of merge on pull.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-all-the-alias-and-configs&#34;&gt;List all the alias and configs.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#make-git-case-sensitive&#34;&gt;Make git case sensitive.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#add-custom-editors&#34;&gt;Add custom editors.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#auto-correct-typos&#34;&gt;Auto correct typos.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#check-if-the-change-was-a-part-of-a-release&#34;&gt;Check if the change was a part of a release.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#dry-run-any-command-that-supports-dry-run-flag-should-do&#34;&gt;Dry run. (any command that supports dry-run flag should do.)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#marks-your-commit-as-a-fix-of-a-previous-commit&#34;&gt;Marks your commit as a fix of a previous commit.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#squash-fixup-commits-normal-commits&#34;&gt;Squash fixup commits normal commits.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#skip-staging-area-during-commit&#34;&gt;Skip staging area during commit.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#interactive-staging&#34;&gt;Interactive staging.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-ignored-files&#34;&gt;List ignored files.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#status-of-ignored-files&#34;&gt;Status of ignored files.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#commits-in-branch1-that-are-not-in-branch2&#34;&gt;Commits in Branch1 that are not in Branch2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-n-last-commits&#34;&gt;List n last commits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#reuse-recorded-resolution-record-and-reuse-previous-conflicts-resolutions&#34;&gt;Reuse recorded resolution, record and reuse previous conflicts resolutions.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#open-all-conflicted-files-in-an-editor&#34;&gt;Open all conflicted files in an editor.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#count-unpacked-number-of-objects-and-their-disk-consumption&#34;&gt;Count unpacked number of objects and their disk consumption.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#prune-all-unreachable-objects-from-the-object-database&#34;&gt;Prune all unreachable objects from the object database.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#instantly-browse-your-working-repository-in-gitweb&#34;&gt;Instantly browse your working repository in gitweb.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#view-the-gpg-signatures-in-the-commit-log&#34;&gt;View the GPG signatures in the commit log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#remove-entry-in-the-global-config&#34;&gt;Remove entry in the global config.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#checkout-a-new-branch-without-any-history&#34;&gt;Checkout a new branch without any history&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#extract-file-from-another-branch&#34;&gt;Extract file from another branch.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-only-the-root-and-merge-commits&#34;&gt;List only the root and merge commits.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#change-previous-two-commits-with-an-interactive-rebase&#34;&gt;Change previous two commits with an interactive rebase.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-all-branch-is-wip&#34;&gt;List all branch is WIP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#find-guilty-with-binary-search&#34;&gt;Find guilty with binary search&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#bypass-pre-commit-and-commit-msg-githooks&#34;&gt;Bypass pre-commit and commit-msg githooks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-commits-and-changes-to-a-specific-file-even-through-renaming&#34;&gt;List commits and changes to a specific file (even through renaming)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#clone-a-single-branch&#34;&gt;Clone a single branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#create-and-switch-new-branch&#34;&gt;Create and switch new branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#ignore-file-mode-changes-on-commits&#34;&gt;Ignore file mode changes on commits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#turn-off-git-colored-terminal-output&#34;&gt;Turn off git colored terminal output&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#specific-color-settings&#34;&gt;Specific color settings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-all-local-branches-ordered-by-recent-commits&#34;&gt;Show all local branches ordered by recent commits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#find-lines-matching-the-pattern-regex-or-string-in-tracked-files&#34;&gt;Find lines matching the pattern (regex or string) in tracked files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#clone-a-shallow-copy-of-a-repository&#34;&gt;Clone a shallow copy of a repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#search-commit-log-across-all-branches-for-given-text&#34;&gt;Search Commit log across all branches for given text&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-first-commit-in-a-branch-from-master&#34;&gt;Get first commit in a branch (from master)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#unstaging-staged-file&#34;&gt;Unstaging Staged file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#force-push-to-remote-repository&#34;&gt;Force push to Remote Repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#adding-remote-name&#34;&gt;Adding Remote name&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-all-currently-configured-remotes&#34;&gt;List all currently configured remotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-the-author-time-and-last-revision-made-to-each-line-of-a-given-file&#34;&gt;Show the author, time and last revision made to each line of a given file&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#group-commits-by-authors-and-title&#34;&gt;Group commits by authors and title&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#forced-push-but-still-ensure-you-dont-overwrite-others-work&#34;&gt;Forced push but still ensure you don&#39;t overwrite other&#39;s work&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-how-many-lines-does-an-author-contribute&#34;&gt;Show how many lines does an author contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#revert-reverting-an-entire-merge&#34;&gt;Revert: Reverting an entire merge&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#number-of-commits-in-a-branch&#34;&gt;Number of commits in a branch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#alias-git-undo&#34;&gt;Alias: git undo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#add-object-notes&#34;&gt;Add object notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-all-the-git-notes&#34;&gt;Show all the git-notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#apply-commit-from-another-repository&#34;&gt;Apply commit from another repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#specific-fetch-reference&#34;&gt;Specific fetch reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#find-common-ancestor-of-two-branches&#34;&gt;Find common ancestor of two branches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-unpushed-git-commits&#34;&gt;List unpushed git commits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#add-everything-but-whitespace-changes&#34;&gt;Add everything, but whitespace changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#edit-localglobal-git-config&#34;&gt;Edit [local/global] git config&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#blame-on-certain-range&#34;&gt;blame on certain range&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-a-git-logical-variable&#34;&gt;Show a Git logical variable.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#preformatted-patch-file&#34;&gt;Preformatted patch file.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#get-the-repo-name&#34;&gt;Get the repo name.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#logs-between-date-range&#34;&gt;logs between date range&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#exclude-author-from-logs&#34;&gt;Exclude author from logs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#generates-a-summary-of-pending-changes&#34;&gt;Generates a summary of pending changes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-references-in-a-remote-repository&#34;&gt;List references in a remote repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#backup-untracked-files&#34;&gt;Backup untracked files.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#list-all-git-aliases&#34;&gt;List all git aliases&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#show-git-status-short&#34;&gt;Show git status short&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#checkout-a-commit-prior-to-a-day-ago&#34;&gt;Checkout a commit prior to a day ago&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#push-the-current-branch-to-the-same-name-on-the-remote-repository&#34;&gt;Push the current branch to the same name on the remote repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#push-a-new-local-branch-to-remote-repository-and-track&#34;&gt;Push a new local branch to remote repository and track&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#change-a-branch-base&#34;&gt;Change a branch base&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#use-ssh-instead-of-https-for-remotes&#34;&gt;Use SSH instead of HTTPs for remotes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#update-a-submodule-to-the-latest-commit&#34;&gt;Update a submodule to the latest commit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/git-tips/tips/master/#prevent-auto-replacing-lf-with-crlf&#34;&gt;Prevent auto replacing LF with CRLF&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- Don’t remove or change the comment below – that can break automatic updates. More info at &lt;http://npm.im/doxie.inject&gt;. --&gt; &#xA;&lt;!-- @doxie.inject end toc --&gt; &#xA;&lt;!-- @doxie.inject start --&gt; &#xA;&lt;!-- Don’t remove or change the comment above – that can break automatic updates. --&gt; &#xA;&lt;h2&gt;Everyday Git in twenty commands or so&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git help everyday&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show helpful guides that come with Git&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git help -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search change by content&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log -S&#39;&amp;lt;a term in the source&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show changes over time for specific file&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log -p &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remove sensitive data from history, after a push&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git filter-branch --force --index-filter &#39;git rm --cached --ignore-unmatch &amp;lt;path-to-your-file&amp;gt;&#39; --prune-empty --tag-name-filter cat -- --all &amp;amp;&amp;amp; git push origin --force --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sync with remote, overwrite local changes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git fetch origin &amp;amp;&amp;amp; git reset --hard origin/master &amp;amp;&amp;amp; git clean -f -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List of all files till a commit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git ls-tree --name-only -r &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Git reset first commit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git update-ref -d HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reset: preserve uncommitted local changes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git reset --keep &amp;lt;commit&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all the conflicted files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff --name-only --diff-filter=U&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List of all files changed in a commit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff-tree --no-commit-id --name-only -r &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unstaged changes since last commit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changes staged for commit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff --cached&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff --staged&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show both staged and unstaged changes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all branches that are already merged into master&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch --merged master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quickly switch to the previous branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout @{-1}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remove branches that have already been merged with master&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch --merged master | grep -v &#39;^\*&#39; | xargs -n 1 git branch -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch --merged master | grep -v &#39;^\*\|  master&#39; | xargs -n 1 git branch -d # will not delete master if master is not checked out&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all branches and their upstreams, as well as last commit on branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -vv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Track upstream branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -u origin/mybranch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete local branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -d &amp;lt;local_branchname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete remote branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push origin --delete &amp;lt;remote_branchname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push origin :&amp;lt;remote_branchname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -dr &amp;lt;remote/branch&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create local tag&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git tag &amp;lt;tag-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete local tag&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git tag -d &amp;lt;tag-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete remote tag&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push origin :refs/tags/&amp;lt;tag-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Undo local changes with the content in index(staging)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -- &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Revert: Undo a commit by creating a new commit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git revert &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reset: Discard commits, advised for private branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git reset &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reword the previous commit message&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit -v --amend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See commit history for just the current branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git cherry -v master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Amend author.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --amend --author=&#39;Author Name &amp;lt;email@address.com&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reset author, after author has been changed in the global config.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --amend --reset-author --no-edit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Changing a remote&#39;s URL&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote set-url origin &amp;lt;URL&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get list of all remote references&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote show&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get list of all local and remote branches&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get only remote branches&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -r&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stage parts of a changed file, instead of the entire file&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get git bash completion&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L http://git.io/vfhol &amp;gt; ~/.git-completion.bash &amp;amp;&amp;amp; echo &#39;[ -f ~/.git-completion.bash ] &amp;amp;&amp;amp; . ~/.git-completion.bash&#39; &amp;gt;&amp;gt; ~/.bashrc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What changed since two weeks?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --no-merges --raw --since=&#39;2 weeks ago&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git whatchanged --since=&#39;2 weeks ago&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;See all commits made since forking from master&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --no-merges --stat --reverse master..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Pick commits across branches using cherry-pick&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout &amp;lt;branch-name&amp;gt; &amp;amp;&amp;amp; git cherry-pick &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Find out branches containing commit-hash&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -a --contains &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch --contains &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Git Aliases&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global alias.&amp;lt;handle&amp;gt; &amp;lt;command&amp;gt; &#xA;git config --global alias.st status&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving current state of tracked files without commiting&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash push&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving current state of unstaged changes to tracked files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash -k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash --keep-index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash push --keep-index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving current state including untracked files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash -u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash push -u&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash push --include-untracked&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving current state with message&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash push -m &amp;lt;message&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash push --message &amp;lt;message&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving current state of all files (ignored, untracked, and tracked)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash -a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash push --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show list of all saved stashes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show the contents of any stash in patch form&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash show -p &amp;lt;stash@{n}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Apply any stash without deleting from the stashed list&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash apply &amp;lt;stash@{n}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Apply last stashed state and delete it from stashed list&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash pop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash apply stash@{0} &amp;amp;&amp;amp; git stash drop stash@{0}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete all stored stashes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash clear&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git stash drop &amp;lt;stash@{n}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Grab a single file from a stash&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout &amp;lt;stash@{n}&amp;gt; -- &amp;lt;file_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout stash@{0} -- &amp;lt;file_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show all tracked files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git ls-files -t&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show all untracked files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git ls-files --others&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show all ignored files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git ls-files --others -i --exclude-standard&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create new working tree from a repository (git 2.5)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git worktree add -b &amp;lt;branch-name&amp;gt; &amp;lt;path&amp;gt; &amp;lt;start-point&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create new working tree from HEAD state&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git worktree add --detach &amp;lt;path&amp;gt; HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Untrack files without deleting&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rm --cached &amp;lt;file_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rm --cached -r &amp;lt;directory_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Before deleting untracked files/directory, do a dry run to get the list of these files/directories&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clean -n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Forcefully remove untracked files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clean -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Forcefully remove untracked directory&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clean -f -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update all the submodules&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule foreach git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --init --recursive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git submodule update --remote&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show all commits in the current branch yet to be merged to master&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git cherry -v master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git cherry -v master &amp;lt;branch-to-be-merged&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rename a branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -m &amp;lt;new-branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -m [&amp;lt;old-branch-name&amp;gt;] &amp;lt;new-branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rebases &#39;feature&#39; to &#39;master&#39; and merges it in to master&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rebase master feature &amp;amp;&amp;amp; git checkout master &amp;amp;&amp;amp; git merge -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Archive the &lt;code&gt;master&lt;/code&gt; branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git archive master --format=zip --output=master.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Modify previous commit without modifying the commit message&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add --all &amp;amp;&amp;amp; git commit --amend --no-edit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prunes references to remove branches that have been deleted in the remote.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git fetch -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote prune origin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Delete local branches that has been squash and merged in the remote.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -vv | grep &#39;: gone]&#39; | awk &#39;{print &amp;lt;!-- @doxie.inject start --&amp;gt;}&#39; | xargs git branch -D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Retrieve the commit hash of the initial revision.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt; git rev-list --reverse HEAD | head -1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rev-list --max-parents=0 HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --pretty=oneline | tail -1 | cut -c 1-40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --pretty=oneline --reverse | head -1 | cut -c 1-40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Visualize the version tree.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --pretty=oneline --graph --decorate --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;gitk --all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --graph --pretty=format:&#39;%C(auto) %h | %s | %an | %ar%d&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Visualize the tree including commits that are only referenced from reflogs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --graph --decorate --oneline $(git rev-list --walk-reflogs --all)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploying git tracked subfolder to gh-pages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git subtree push --prefix subfolder_name origin gh-pages&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding a project to repo using subtree&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git subtree add --prefix=&amp;lt;directory_name&amp;gt;/&amp;lt;project_name&amp;gt; --squash git@github.com:&amp;lt;username&amp;gt;/&amp;lt;project_name&amp;gt;.git master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get latest changes in your repo for a linked project using subtree&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git subtree pull --prefix=&amp;lt;directory_name&amp;gt;/&amp;lt;project_name&amp;gt; --squash git@github.com:&amp;lt;username&amp;gt;/&amp;lt;project_name&amp;gt;.git master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Export a branch with history to a file.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git bundle create &amp;lt;file&amp;gt; &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Import from a bundle&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone repo.bundle &amp;lt;repo-dir&amp;gt; -b &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the name of current branch.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rev-parse --abbrev-ref HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignore one file on commit (e.g. Changelog).&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git update-index --assume-unchanged Changelog; git commit -a; git update-index --no-assume-unchanged Changelog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stash changes before rebasing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rebase --autostash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Fetch pull request by ID to a local branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git fetch origin pull/&amp;lt;id&amp;gt;/head:&amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git pull origin pull/&amp;lt;id&amp;gt;/head:&amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show the most recent tag on the current branch.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git describe --tags --abbrev=0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show inline word diff.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff --word-diff&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show changes using common diff tools.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git difftool [-t &amp;lt;tool&amp;gt;] &amp;lt;commit1&amp;gt; &amp;lt;commit2&amp;gt; &amp;lt;path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Don’t consider changes for tracked file.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git update-index --assume-unchanged &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Undo assume-unchanged.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git update-index --no-assume-unchanged &amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Clean the files from &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clean -X -f&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Restore deleted file.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout &amp;lt;deleting_commit&amp;gt; -- &amp;lt;file_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Restore file to a specific commit-hash&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout &amp;lt;commit-ish&amp;gt; -- &amp;lt;file_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Always rebase instead of merge on pull.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global pull.rebase true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;#git &amp;lt; 1.7.9&#xA;git config --global branch.autosetuprebase always&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all the alias and configs.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Make git case sensitive.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global core.ignorecase false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Add custom editors.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global core.editor &#39;$EDITOR&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Auto correct typos.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global help.autocorrect 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Check if the change was a part of a release.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git name-rev --name-only &amp;lt;SHA-1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dry run. (any command that supports dry-run flag should do.)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clean -fd --dry-run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Marks your commit as a fix of a previous commit.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --fixup &amp;lt;SHA-1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Squash fixup commits normal commits.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rebase -i --autosquash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Skip staging area during commit.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --only &amp;lt;file_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Interactive staging.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List ignored files.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git check-ignore *&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Status of ignored files.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git status --ignored&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Commits in Branch1 that are not in Branch2&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log Branch1 ^Branch2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List n last commits&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log -&amp;lt;n&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log -n &amp;lt;n&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reuse recorded resolution, record and reuse previous conflicts resolutions.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global rerere.enabled 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Open all conflicted files in an editor.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff --name-only | uniq | xargs $EDITOR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Count unpacked number of objects and their disk consumption.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git count-objects --human-readable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prune all unreachable objects from the object database.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git gc --prune=now --aggressive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Instantly browse your working repository in gitweb.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git instaweb [--local] [--httpd=&amp;lt;httpd&amp;gt;] [--port=&amp;lt;port&amp;gt;] [--browser=&amp;lt;browser&amp;gt;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;View the GPG signatures in the commit log&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --show-signature&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Remove entry in the global config.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global --unset &amp;lt;entry-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Checkout a new branch without any history&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout --orphan &amp;lt;branch_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extract file from another branch.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git show &amp;lt;branch_name&amp;gt;:&amp;lt;file_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List only the root and merge commits.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --first-parent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change previous two commits with an interactive rebase.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rebase --interactive HEAD~2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all branch is WIP&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout master &amp;amp;&amp;amp; git branch --no-merged&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Find guilty with binary search&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git bisect start                    # Search start &#xA;git bisect bad                      # Set point to bad commit &#xA;git bisect good v2.6.13-rc2         # Set point to good commit|tag &#xA;git bisect bad                      # Say current state is bad &#xA;git bisect good                     # Say current state is good &#xA;git bisect reset                    # Finish search &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Bypass pre-commit and commit-msg githooks&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git commit --no-verify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List commits and changes to a specific file (even through renaming)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --follow -p -- &amp;lt;file_path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Clone a single branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone -b &amp;lt;branch-name&amp;gt; --single-branch https://github.com/user/repo.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Create and switch new branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -b &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch &amp;lt;branch-name&amp;gt; &amp;amp;&amp;amp; git checkout &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git switch -c &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Ignore file mode changes on commits&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config core.fileMode false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Turn off git colored terminal output&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global color.ui false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specific color settings&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global &amp;lt;specific command e.g branch, diff&amp;gt; &amp;lt;true, false or always&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show all local branches ordered by recent commits&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git for-each-ref --sort=-committerdate --format=&#39;%(refname:short)&#39; refs/heads/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Find lines matching the pattern (regex or string) in tracked files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git grep --heading --line-number &#39;foo bar&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Clone a shallow copy of a repository&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/user/repo.git --depth 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Search Commit log across all branches for given text&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --all --grep=&#39;&amp;lt;given-text&amp;gt;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get first commit in a branch (from master)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --oneline master..&amp;lt;branch-name&amp;gt; | tail -1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --reverse master..&amp;lt;branch-name&amp;gt; | head -6&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unstaging Staged file&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git reset HEAD &amp;lt;file-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Force push to Remote Repository&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push -f &amp;lt;remote-name&amp;gt; &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding Remote name&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote add &amp;lt;remote-nickname&amp;gt; &amp;lt;remote-url&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all currently configured remotes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git remote -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show the author, time and last revision made to each line of a given file&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git blame &amp;lt;file-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Group commits by authors and title&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git shortlog&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Forced push but still ensure you don&#39;t overwrite other&#39;s work&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push --force-with-lease &amp;lt;remote-name&amp;gt; &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show how many lines does an author contribute&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --author=&#39;_Your_Name_Here_&#39; --pretty=tformat: --numstat | gawk &#39;{ add += &amp;lt;!-- @doxie.inject start --&amp;gt;; subs += &amp;lt;!-- @doxie.inject end --&amp;gt;; loc += &amp;lt;!-- @doxie.inject start --&amp;gt; - &amp;lt;!-- @doxie.inject end --&amp;gt; } END { printf &#34;added lines: %s removed lines: %s total lines: %s&#xA;&#34;, add, subs, loc }&#39; -&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --author=&#39;_Your_Name_Here_&#39; --pretty=tformat: --numstat | awk &#39;{ add += &amp;lt;!-- @doxie.inject start --&amp;gt;; subs += &amp;lt;!-- @doxie.inject end --&amp;gt;; loc += &amp;lt;!-- @doxie.inject start --&amp;gt; - &amp;lt;!-- @doxie.inject end --&amp;gt; } END { printf &#34;added lines: %s, removed lines: %s, total lines: %s&#xA;&#34;, add, subs, loc }&#39; - # on Mac OSX&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Revert: Reverting an entire merge&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git revert -m 1 &amp;lt;commit-ish&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Number of commits in a branch&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rev-list --count &amp;lt;branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alias: git undo&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global alias.undo &#39;!f() { git reset --hard $(git rev-parse --abbrev-ref HEAD)@{${1-1}}; }; f&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Add object notes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git notes add -m &#39;Note on the previous commit....&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show all the git-notes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --show-notes=&#39;*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Apply commit from another repository&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git --git-dir=&amp;lt;source-dir&amp;gt;/.git format-patch -k -1 --stdout &amp;lt;SHA1&amp;gt; | git am -3 -k&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Specific fetch reference&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git fetch origin master:refs/remotes/origin/mymaster&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Find common ancestor of two branches&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git merge-base &amp;lt;branch-name&amp;gt; &amp;lt;other-branch-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List unpushed git commits&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --branches --not --remotes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log @{u}..&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git cherry -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Add everything, but whitespace changes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git diff --ignore-all-space | git apply --cached&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Edit [local/global] git config&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config [--global] --edit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;blame on certain range&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git blame -L &amp;lt;start&amp;gt;,&amp;lt;end&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show a Git logical variable.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git var -l | &amp;lt;variable&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Preformatted patch file.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git format-patch -M upstream..topic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Get the repo name.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rev-parse --show-toplevel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;logs between date range&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --since=&#39;FEB 1 2017&#39; --until=&#39;FEB 14 2017&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exclude author from logs&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git log --perl-regexp --author=&#39;^((?!excluded-author-regex).*)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Generates a summary of pending changes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git request-pull v1.0 https://git.ko.xz/project master:for-linus&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List references in a remote repository&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git ls-remote git://git.kernel.org/pub/scm/git/git.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Backup untracked files.&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git ls-files --others -i --exclude-standard | xargs zip untracked.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;List all git aliases&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config -l | grep alias | sed &#39;s/^alias\.//g&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Alternatives:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config -l | grep alias | cut -d &#39;.&#39; -f 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Show git status short&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git status --short --branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Checkout a commit prior to a day ago&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout master@{yesterday}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Push the current branch to the same name on the remote repository&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push origin HEAD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Push a new local branch to remote repository and track&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push -u origin &amp;lt;branch_name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Change a branch base&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git rebase --onto &amp;lt;new_base&amp;gt; &amp;lt;old_base&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use SSH instead of HTTPs for remotes&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global url.&#39;git@github.com:&#39;.insteadOf &#39;https://github.com/&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Update a submodule to the latest commit&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd &amp;lt;path-to-submodule&amp;gt;&#xA;git pull origin &amp;lt;branch&amp;gt;&#xA;cd &amp;lt;root-of-your-main-project&amp;gt;&#xA;git add &amp;lt;path-to-submodule&amp;gt;&#xA;git commit -m &#34;submodule updated&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Prevent auto replacing LF with CRLF&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git config --global core.autocrlf false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- Don’t remove or change the comment below – that can break automatic updates. More info at &lt;http://npm.im/doxie.inject&gt;. --&gt; &#xA;&lt;!-- @doxie.inject end --&gt;</summary>
  </entry>
</feed>