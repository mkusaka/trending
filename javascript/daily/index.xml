<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-15T01:42:46Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>100xDevs-hkirat/Week-1-assignment</title>
    <updated>2023-06-15T01:42:46Z</updated>
    <id>tag:github.com,2023-06-15:/100xDevs-hkirat/Week-1-assignment</id>
    <link href="https://github.com/100xDevs-hkirat/Week-1-assignment" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;FullStack Development Course Assignments (Week 1)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project contains easy, medium and hard assigments for week 1.&lt;/li&gt; &#xA; &lt;li&gt;01-js contains assignments related to JavaScript, things that were covered in the first class.&lt;/li&gt; &#xA; &lt;li&gt;02-async-js contains assignments related to asynchronous JavaScript, things that were covered in the second class.&lt;/li&gt; &#xA; &lt;li&gt;If you have any query then ping us on the Discord server.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mysqljs/mysql</title>
    <updated>2023-06-15T01:42:46Z</updated>
    <id>tag:github.com,2023-06-15:/mysqljs/mysql</id>
    <link href="https://github.com/mysqljs/mysql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A pure node.js JavaScript Client implementing the MySQL protocol.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mysql&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://npmjs.org/package/mysql&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/v/mysql&#34; alt=&#34;NPM Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/mysql&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/dm/mysql&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;&lt;img src=&#34;https://badgen.net/npm/node/mysql&#34; alt=&#34;Node.js Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mysqljs/mysql/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://badgen.net/github/checks/mysqljs/mysql/master?label=linux&#34; alt=&#34;Linux Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/dougwilson/node-mysql&#34;&gt;&lt;img src=&#34;https://badgen.net/appveyor/ci/dougwilson/node-mysql/master?label=windows&#34; alt=&#34;Windows Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/mysqljs/mysql?branch=master&#34;&gt;&lt;img src=&#34;https://badgen.net/coveralls/c/github/mysqljs/mysql/master&#34; alt=&#34;Test Coverage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#community&#34;&gt;Community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#establishing-connections&#34;&gt;Establishing connections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#connection-options&#34;&gt;Connection options&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#ssl-options&#34;&gt;SSL options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#connection-flags&#34;&gt;Connection flags&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#terminating-connections&#34;&gt;Terminating connections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#pooling-connections&#34;&gt;Pooling connections&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#pool-options&#34;&gt;Pool options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#pool-events&#34;&gt;Pool events&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#acquire&#34;&gt;acquire&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#connection&#34;&gt;connection&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#enqueue&#34;&gt;enqueue&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#release&#34;&gt;release&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#closing-all-the-connections-in-a-pool&#34;&gt;Closing all the connections in a pool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#poolcluster&#34;&gt;PoolCluster&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#poolcluster-options&#34;&gt;PoolCluster options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#switching-users-and-altering-connection-state&#34;&gt;Switching users and altering connection state&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#server-disconnects&#34;&gt;Server disconnects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#performing-queries&#34;&gt;Performing queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#escaping-query-values&#34;&gt;Escaping query values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#escaping-query-identifiers&#34;&gt;Escaping query identifiers&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#preparing-queries&#34;&gt;Preparing Queries&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#custom-format&#34;&gt;Custom format&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#getting-the-id-of-an-inserted-row&#34;&gt;Getting the id of an inserted row&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#getting-the-number-of-affected-rows&#34;&gt;Getting the number of affected rows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#getting-the-number-of-changed-rows&#34;&gt;Getting the number of changed rows&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#getting-the-connection-id&#34;&gt;Getting the connection ID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#executing-queries-in-parallel&#34;&gt;Executing queries in parallel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#streaming-query-rows&#34;&gt;Streaming query rows&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#piping-results-with-streams&#34;&gt;Piping results with Streams&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#multiple-statement-queries&#34;&gt;Multiple statement queries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#stored-procedures&#34;&gt;Stored procedures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#joins-with-overlapping-column-names&#34;&gt;Joins with overlapping column names&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#transactions&#34;&gt;Transactions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#ping&#34;&gt;Ping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#timeouts&#34;&gt;Timeouts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#error-handling&#34;&gt;Error handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#exception-safety&#34;&gt;Exception Safety&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#type-casting&#34;&gt;Type casting&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#number&#34;&gt;Number&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#date&#34;&gt;Date&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#buffer&#34;&gt;Buffer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#string&#34;&gt;String&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#custom-type-casting&#34;&gt;Custom type casting&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#debugging-and-reporting-problems&#34;&gt;Debugging and reporting problems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#security-issues&#34;&gt;Security issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#running-tests&#34;&gt;Running tests&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#running-unit-tests&#34;&gt;Running unit tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#running-integration-tests&#34;&gt;Running integration tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#todo&#34;&gt;Todo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;This is a &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt; module available through the &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm registry&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before installing, &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;download and install Node.js&lt;/a&gt;. Node.js 0.6 or higher is required.&lt;/p&gt; &#xA;&lt;p&gt;Installation is done using the &lt;a href=&#34;https://docs.npmjs.com/getting-started/installing-npm-packages-locally&#34;&gt;&lt;code&gt;npm install&lt;/code&gt; command&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For information about the previous 0.9.x releases, visit the &lt;a href=&#34;https://github.com/mysqljs/mysql/tree/v0.9&#34;&gt;v0.9 branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes I may also ask you to install the latest version from Github to check if a bugfix is working. In this case, please do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install mysqljs/mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This is a node.js driver for mysql. It is written in JavaScript, does not require compiling, and is 100% MIT licensed.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example on how to use it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var mysql      = require(&#39;mysql&#39;);&#xA;var connection = mysql.createConnection({&#xA;  host     : &#39;localhost&#39;,&#xA;  user     : &#39;me&#39;,&#xA;  password : &#39;secret&#39;,&#xA;  database : &#39;my_db&#39;&#xA;});&#xA;&#xA;connection.connect();&#xA;&#xA;connection.query(&#39;SELECT 1 + 1 AS solution&#39;, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  console.log(&#39;The solution is: &#39;, results[0].solution);&#xA;});&#xA;&#xA;connection.end();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From this example, you can learn the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every method you invoke on a connection is queued and executed in sequence.&lt;/li&gt; &#xA; &lt;li&gt;Closing the connection is done using &lt;code&gt;end()&lt;/code&gt; which makes sure all remaining queries are executed before sending a quit packet to the mysql server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to the people who have contributed code to this module, see the &lt;a href=&#34;https://github.com/mysqljs/mysql/graphs/contributors&#34;&gt;GitHub Contributors page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Additionally I&#39;d like to thank the following people:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://andrey.hristov.com/&#34;&gt;Andrey Hristov&lt;/a&gt; (Oracle) - for helping me with protocol questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://blog.ulf-wendel.de/&#34;&gt;Ulf Wendel&lt;/a&gt; (Oracle) - for helping me with protocol questions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;The following companies have supported this project financially, allowing me to spend more time on it (ordered by time of contribution):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://transloadit.com&#34;&gt;Transloadit&lt;/a&gt; (my startup, we do file uploading &amp;amp; video encoding as a service, check it out)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.joyent.com/&#34;&gt;Joyent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pinkbike.com/&#34;&gt;pinkbike.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.holidayextras.com/&#34;&gt;Holiday Extras&lt;/a&gt; (they are &lt;a href=&#34;https://join.holidayextras.co.uk/&#34;&gt;hiring&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://newscope.com/&#34;&gt;Newscope&lt;/a&gt; (they are &lt;a href=&#34;https://newscope.com/unternehmen/jobs/&#34;&gt;hiring&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to discuss this module, or ask questions about it, please use one of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Mailing list&lt;/strong&gt;: &lt;a href=&#34;https://groups.google.com/forum/#!forum/node-mysql&#34;&gt;https://groups.google.com/forum/#!forum/node-mysql&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;IRC Channel&lt;/strong&gt;: #node.js (on freenode.net, I pay attention to any message including the term &lt;code&gt;mysql&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Establishing connections&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to establish a connection is this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var mysql      = require(&#39;mysql&#39;);&#xA;var connection = mysql.createConnection({&#xA;  host     : &#39;example.org&#39;,&#xA;  user     : &#39;bob&#39;,&#xA;  password : &#39;secret&#39;&#xA;});&#xA;&#xA;connection.connect(function(err) {&#xA;  if (err) {&#xA;    console.error(&#39;error connecting: &#39; + err.stack);&#xA;    return;&#xA;  }&#xA;&#xA;  console.log(&#39;connected as id &#39; + connection.threadId);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;However, a connection can also be implicitly established by invoking a query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var mysql      = require(&#39;mysql&#39;);&#xA;var connection = mysql.createConnection(...);&#xA;&#xA;connection.query(&#39;SELECT 1&#39;, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // connected!&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Depending on how you like to handle your errors, either method may be appropriate. Any type of connection error (handshake or network) is considered a fatal error, see the &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Connection options&lt;/h2&gt; &#xA;&lt;p&gt;When establishing a connection, you can set the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;host&lt;/code&gt;: The hostname of the database you are connecting to. (Default: &lt;code&gt;localhost&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;port&lt;/code&gt;: The port number to connect to. (Default: &lt;code&gt;3306&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localAddress&lt;/code&gt;: The source IP address to use for TCP connection. (Optional)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;socketPath&lt;/code&gt;: The path to a unix domain socket to connect to. When used &lt;code&gt;host&lt;/code&gt; and &lt;code&gt;port&lt;/code&gt; are ignored.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;user&lt;/code&gt;: The MySQL user to authenticate as.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;password&lt;/code&gt;: The password of that MySQL user.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;database&lt;/code&gt;: Name of the database to use for this connection (Optional).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;charset&lt;/code&gt;: The charset for the connection. This is called &#34;collation&#34; in the SQL-level of MySQL (like &lt;code&gt;utf8_general_ci&lt;/code&gt;). If a SQL-level charset is specified (like &lt;code&gt;utf8mb4&lt;/code&gt;) then the default collation for that charset is used. (Default: &lt;code&gt;&#39;UTF8_GENERAL_CI&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;timezone&lt;/code&gt;: The timezone configured on the MySQL server. This is used to type cast server date/time values to JavaScript &lt;code&gt;Date&lt;/code&gt; object and vice versa. This can be &lt;code&gt;&#39;local&#39;&lt;/code&gt;, &lt;code&gt;&#39;Z&#39;&lt;/code&gt;, or an offset in the form &lt;code&gt;+HH:MM&lt;/code&gt; or &lt;code&gt;-HH:MM&lt;/code&gt;. (Default: &lt;code&gt;&#39;local&#39;&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;connectTimeout&lt;/code&gt;: The milliseconds before a timeout occurs during the initial connection to the MySQL server. (Default: &lt;code&gt;10000&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;stringifyObjects&lt;/code&gt;: Stringify objects instead of converting to values. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;insecureAuth&lt;/code&gt;: Allow connecting to MySQL instances that ask for the old (insecure) authentication method. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typeCast&lt;/code&gt;: Determines if column values should be converted to native JavaScript types. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queryFormat&lt;/code&gt;: A custom query format function. See &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#custom-format&#34;&gt;Custom format&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;supportBigNumbers&lt;/code&gt;: When dealing with big numbers (BIGINT and DECIMAL columns) in the database, you should enable this option (Default: &lt;code&gt;false&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bigNumberStrings&lt;/code&gt;: Enabling both &lt;code&gt;supportBigNumbers&lt;/code&gt; and &lt;code&gt;bigNumberStrings&lt;/code&gt; forces big numbers (BIGINT and DECIMAL columns) to be always returned as JavaScript String objects (Default: &lt;code&gt;false&lt;/code&gt;). Enabling &lt;code&gt;supportBigNumbers&lt;/code&gt; but leaving &lt;code&gt;bigNumberStrings&lt;/code&gt; disabled will return big numbers as String objects only when they cannot be accurately represented with [JavaScript Number objects] (&lt;a href=&#34;https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type&#34;&gt;https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type&lt;/a&gt;) (which happens when they exceed the [-2^53, +2^53] range), otherwise they will be returned as Number objects. This option is ignored if &lt;code&gt;supportBigNumbers&lt;/code&gt; is disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dateStrings&lt;/code&gt;: Force date types (TIMESTAMP, DATETIME, DATE) to be returned as strings rather than inflated into JavaScript Date objects. Can be &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; or an array of type names to keep as strings. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;debug&lt;/code&gt;: Prints protocol details to stdout. Can be &lt;code&gt;true&lt;/code&gt;/&lt;code&gt;false&lt;/code&gt; or an array of packet type names that should be printed. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;trace&lt;/code&gt;: Generates stack traces on &lt;code&gt;Error&lt;/code&gt; to include call site of library entrance (&#34;long stack traces&#34;). Slight performance penalty for most calls. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localInfile&lt;/code&gt;: Allow &lt;code&gt;LOAD DATA INFILE&lt;/code&gt; to use the &lt;code&gt;LOCAL&lt;/code&gt; modifier. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;multipleStatements&lt;/code&gt;: Allow multiple mysql statements per query. Be careful with this, it could increase the scope of SQL injection attacks. (Default: &lt;code&gt;false&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;flags&lt;/code&gt;: List of connection flags to use other than the default ones. It is also possible to blacklist default ones. For more information, check &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#connection-flags&#34;&gt;Connection Flags&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ssl&lt;/code&gt;: object with ssl parameters or a string containing name of ssl profile. See &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#ssl-options&#34;&gt;SSL options&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition to passing these options as an object, you can also use a url string. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = mysql.createConnection(&#39;mysql://user:pass@host/db?debug=true&amp;amp;charset=BIG5_CHINESE_CI&amp;amp;timezone=-0700&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: The query values are first attempted to be parsed as JSON, and if that fails assumed to be plaintext strings.&lt;/p&gt; &#xA;&lt;h3&gt;SSL options&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ssl&lt;/code&gt; option in the connection options takes a string or an object. When given a string, it uses one of the predefined SSL profiles included. The following profiles are included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#34;Amazon RDS&#34;&lt;/code&gt;: this profile is for connecting to an Amazon RDS server and contains the certificates from &lt;a href=&#34;https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem&#34;&gt;https://rds.amazonaws.com/doc/rds-ssl-ca-cert.pem&lt;/a&gt; and &lt;a href=&#34;https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem&#34;&gt;https://s3.amazonaws.com/rds-downloads/rds-combined-ca-bundle.pem&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When connecting to other servers, you will need to provide an object with any of the following options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ca&lt;/code&gt;: The certificate(s) to trust instead of the ones Node.js is configured to trust. This refers to the value of the certificate(s) and not a filename of the certificate(s). This is passed as the &lt;code&gt;ca&lt;/code&gt; option for the underlying &lt;a href=&#34;https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options&#34;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; call (or underlying &lt;a href=&#34;https://nodejs.org/docs/latest-v0.10.x/api/crypto.html#crypto_crypto_createcredentials_details&#34;&gt;&lt;code&gt;crypto.createCredentials()&lt;/code&gt;&lt;/a&gt; if using Node.js below 0.12).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cert&lt;/code&gt;: The client certificate to use in the SSL handshake. This is passed as the &lt;code&gt;cert&lt;/code&gt; option for the underlying &lt;a href=&#34;https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options&#34;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; call (or underlying &lt;a href=&#34;https://nodejs.org/docs/latest-v0.10.x/api/crypto.html#crypto_crypto_createcredentials_details&#34;&gt;&lt;code&gt;crypto.createCredentials()&lt;/code&gt;&lt;/a&gt; if using Node.js below 0.12).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ciphers&lt;/code&gt;: The ciphers to use to use in the SSL handshake instead of the default ones for Node.js. This is passed as the &lt;code&gt;ciphers&lt;/code&gt; option for &lt;a href=&#34;https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options&#34;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; call (or underlying &lt;a href=&#34;https://nodejs.org/docs/latest-v0.10.x/api/crypto.html#crypto_crypto_createcredentials_details&#34;&gt;&lt;code&gt;crypto.createCredentials()&lt;/code&gt;&lt;/a&gt; if using Node.js below 0.12).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxVersion&lt;/code&gt;: This is passed as the &lt;code&gt;maxVersion&lt;/code&gt; option for the underlying &lt;a href=&#34;https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options&#34;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; call.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;minVersion&lt;/code&gt;: This is passed as the &lt;code&gt;minVersion&lt;/code&gt; option for the underlying &lt;a href=&#34;https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options&#34;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; call.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;key&lt;/code&gt;: This is passed as the &lt;code&gt;key&lt;/code&gt; option for &lt;a href=&#34;https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options&#34;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; call (or underlying &lt;a href=&#34;https://nodejs.org/docs/latest-v0.10.x/api/crypto.html#crypto_crypto_createcredentials_details&#34;&gt;&lt;code&gt;crypto.createCredentials()&lt;/code&gt;&lt;/a&gt; if using Node.js below 0.12).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;passphrase&lt;/code&gt;: This is passed as the &lt;code&gt;passphrase&lt;/code&gt; option for &lt;a href=&#34;https://nodejs.org/api/tls.html#tls_tls_createsecurecontext_options&#34;&gt;&lt;code&gt;tls.createSecureContext()&lt;/code&gt;&lt;/a&gt; call (or underlying &lt;a href=&#34;https://nodejs.org/docs/latest-v0.10.x/api/crypto.html#crypto_crypto_createcredentials_details&#34;&gt;&lt;code&gt;crypto.createCredentials()&lt;/code&gt;&lt;/a&gt; if using Node.js below 0.12).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rejectUnauthorized&lt;/code&gt;: The server certificate is verified against the list of supplied CAs and the hostname, and if no match is found, the SSL connection will fail. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = mysql.createConnection({&#xA;  host : &#39;localhost&#39;,&#xA;  ssl  : {&#xA;    ca : fs.readFileSync(__dirname + &#39;/mysql-ca.crt&#39;)&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also connect to a MySQL server without properly providing the appropriate CA to trust. &lt;em&gt;You should not do this&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = mysql.createConnection({&#xA;  host : &#39;localhost&#39;,&#xA;  ssl  : {&#xA;    // DO NOT DO THIS&#xA;    // set up your ca correctly to trust the connection&#xA;    rejectUnauthorized: false&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Connection flags&lt;/h3&gt; &#xA;&lt;p&gt;If, for any reason, you would like to change the default connection flags, you can use the connection option &lt;code&gt;flags&lt;/code&gt;. Pass a string with a comma separated list of items to add to the default flags. If you don&#39;t want a default flag to be used prepend the flag with a minus sign. To add a flag that is not in the default list, just write the flag name, or prefix it with a plus (case insensitive).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = mysql.createConnection({&#xA;  // disable FOUND_ROWS flag, enable IGNORE_SPACE flag&#xA;  flags: &#39;-FOUND_ROWS,IGNORE_SPACE&#39;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following flags are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;COMPRESS&lt;/code&gt; - Enable protocol compression. This feature is not currently supported by the Node.js implementation so cannot be turned on. (Default off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CONNECT_WITH_DB&lt;/code&gt; - Ability to specify the database on connection. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FOUND_ROWS&lt;/code&gt; - Send the found rows instead of the affected rows as &lt;code&gt;affectedRows&lt;/code&gt;. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IGNORE_SIGPIPE&lt;/code&gt; - Don&#39;t issue SIGPIPE if network failures. This flag has no effect on this Node.js implementation. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IGNORE_SPACE&lt;/code&gt; - Let the parser ignore spaces before the &lt;code&gt;(&lt;/code&gt; in queries. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;INTERACTIVE&lt;/code&gt; - Indicates to the MySQL server this is an &#34;interactive&#34; client. This will use the interactive timeouts on the MySQL server and report as interactive in the process list. (Default off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LOCAL_FILES&lt;/code&gt; - Can use &lt;code&gt;LOAD DATA LOCAL&lt;/code&gt;. This flag is controlled by the connection option &lt;code&gt;localInfile&lt;/code&gt;. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LONG_FLAG&lt;/code&gt; - Longer flags in Protocol::ColumnDefinition320. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LONG_PASSWORD&lt;/code&gt; - Use the improved version of Old Password Authentication. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MULTI_RESULTS&lt;/code&gt; - Can handle multiple resultsets for queries. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MULTI_STATEMENTS&lt;/code&gt; - The client may send multiple statement per query or statement prepare (separated by &lt;code&gt;;&lt;/code&gt;). This flag is controlled by the connection option &lt;code&gt;multipleStatements&lt;/code&gt;. (Default off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NO_SCHEMA&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ODBC&lt;/code&gt; Special handling of ODBC behaviour. This flag has no effect on this Node.js implementation. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PLUGIN_AUTH&lt;/code&gt; - Uses the plugin authentication mechanism when connecting to the MySQL server. This feature is not currently supported by the Node.js implementation so cannot be turned on. (Default off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PROTOCOL_41&lt;/code&gt; - Uses the 4.1 protocol. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PS_MULTI_RESULTS&lt;/code&gt; - Can handle multiple resultsets for execute. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;REMEMBER_OPTIONS&lt;/code&gt; - This is specific to the C client, and has no effect on this Node.js implementation. (Default off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;RESERVED&lt;/code&gt; - Old flag for the 4.1 protocol. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SECURE_CONNECTION&lt;/code&gt; - Support native 4.1 authentication. (Default on)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SSL&lt;/code&gt; - Use SSL after handshake to encrypt data in transport. This feature is controlled though the &lt;code&gt;ssl&lt;/code&gt; connection option, so the flag has no effect. (Default off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SSL_VERIFY_SERVER_CERT&lt;/code&gt; - Verify the server certificate during SSL set up. This feature is controlled though the &lt;code&gt;ssl.rejectUnauthorized&lt;/code&gt; connection option, so the flag has no effect. (Default off)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;TRANSACTIONS&lt;/code&gt; - Asks for the transaction status flags. (Default on)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Terminating connections&lt;/h2&gt; &#xA;&lt;p&gt;There are two ways to end a connection. Terminating a connection gracefully is done by calling the &lt;code&gt;end()&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.end(function(err) {&#xA;  // The connection is terminated now&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will make sure all previously enqueued queries are still executed before sending a &lt;code&gt;COM_QUIT&lt;/code&gt; packet to the MySQL server. If a fatal error occurs before the &lt;code&gt;COM_QUIT&lt;/code&gt; packet can be sent, an &lt;code&gt;err&lt;/code&gt; argument will be provided to the callback, but the connection will be terminated regardless of that.&lt;/p&gt; &#xA;&lt;p&gt;An alternative way to end the connection is to call the &lt;code&gt;destroy()&lt;/code&gt; method. This will cause an immediate termination of the underlying socket. Additionally &lt;code&gt;destroy()&lt;/code&gt; guarantees that no more events or callbacks will be triggered for the connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.destroy();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unlike &lt;code&gt;end()&lt;/code&gt; the &lt;code&gt;destroy()&lt;/code&gt; method does not take a callback argument.&lt;/p&gt; &#xA;&lt;h2&gt;Pooling connections&lt;/h2&gt; &#xA;&lt;p&gt;Rather than creating and managing connections one-by-one, this module also provides built-in connection pooling using &lt;code&gt;mysql.createPool(config)&lt;/code&gt;. &lt;a href=&#34;https://en.wikipedia.org/wiki/Connection_pool&#34;&gt;Read more about connection pooling&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Create a pool and use it directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var mysql = require(&#39;mysql&#39;);&#xA;var pool  = mysql.createPool({&#xA;  connectionLimit : 10,&#xA;  host            : &#39;example.org&#39;,&#xA;  user            : &#39;bob&#39;,&#xA;  password        : &#39;secret&#39;,&#xA;  database        : &#39;my_db&#39;&#xA;});&#xA;&#xA;pool.query(&#39;SELECT 1 + 1 AS solution&#39;, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  console.log(&#39;The solution is: &#39;, results[0].solution);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This is a shortcut for the &lt;code&gt;pool.getConnection()&lt;/code&gt; -&amp;gt; &lt;code&gt;connection.query()&lt;/code&gt; -&amp;gt; &lt;code&gt;connection.release()&lt;/code&gt; code flow. Using &lt;code&gt;pool.getConnection()&lt;/code&gt; is useful to share connection state for subsequent queries. This is because two calls to &lt;code&gt;pool.query()&lt;/code&gt; may use two different connections and run in parallel. This is the basic structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var mysql = require(&#39;mysql&#39;);&#xA;var pool  = mysql.createPool(...);&#xA;&#xA;pool.getConnection(function(err, connection) {&#xA;  if (err) throw err; // not connected!&#xA;&#xA;  // Use the connection&#xA;  connection.query(&#39;SELECT something FROM sometable&#39;, function (error, results, fields) {&#xA;    // When done with the connection, release it.&#xA;    connection.release();&#xA;&#xA;    // Handle error after the release.&#xA;    if (error) throw error;&#xA;&#xA;    // Don&#39;t use the connection here, it has been returned to the pool.&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you would like to close the connection and remove it from the pool, use &lt;code&gt;connection.destroy()&lt;/code&gt; instead. The pool will create a new connection the next time one is needed.&lt;/p&gt; &#xA;&lt;p&gt;Connections are lazily created by the pool. If you configure the pool to allow up to 100 connections, but only ever use 5 simultaneously, only 5 connections will be made. Connections are also cycled round-robin style, with connections being taken from the top of the pool and returning to the bottom.&lt;/p&gt; &#xA;&lt;p&gt;When a previous connection is retrieved from the pool, a ping packet is sent to the server to check if the connection is still good.&lt;/p&gt; &#xA;&lt;h2&gt;Pool options&lt;/h2&gt; &#xA;&lt;p&gt;Pools accept all the same &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#connection-options&#34;&gt;options as a connection&lt;/a&gt;. When creating a new connection, the options are simply passed to the connection constructor. In addition to those options pools accept a few extras:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;acquireTimeout&lt;/code&gt;: The milliseconds before a timeout occurs during the connection acquisition. This is slightly different from &lt;code&gt;connectTimeout&lt;/code&gt;, because acquiring a pool connection does not always involve making a connection. If a connection request is queued, the time the request spends in the queue does not count towards this timeout. (Default: &lt;code&gt;10000&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;waitForConnections&lt;/code&gt;: Determines the pool&#39;s action when no connections are available and the limit has been reached. If &lt;code&gt;true&lt;/code&gt;, the pool will queue the connection request and call it when one becomes available. If &lt;code&gt;false&lt;/code&gt;, the pool will immediately call back with an error. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;connectionLimit&lt;/code&gt;: The maximum number of connections to create at once. (Default: &lt;code&gt;10&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;queueLimit&lt;/code&gt;: The maximum number of connection requests the pool will queue before returning an error from &lt;code&gt;getConnection&lt;/code&gt;. If set to &lt;code&gt;0&lt;/code&gt;, there is no limit to the number of queued connection requests. (Default: &lt;code&gt;0&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Pool events&lt;/h2&gt; &#xA;&lt;h3&gt;acquire&lt;/h3&gt; &#xA;&lt;p&gt;The pool will emit an &lt;code&gt;acquire&lt;/code&gt; event when a connection is acquired from the pool. This is called after all acquiring activity has been performed on the connection, right before the connection is handed to the callback of the acquiring code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;pool.on(&#39;acquire&#39;, function (connection) {&#xA;  console.log(&#39;Connection %d acquired&#39;, connection.threadId);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;connection&lt;/h3&gt; &#xA;&lt;p&gt;The pool will emit a &lt;code&gt;connection&lt;/code&gt; event when a new connection is made within the pool. If you need to set session variables on the connection before it gets used, you can listen to the &lt;code&gt;connection&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;pool.on(&#39;connection&#39;, function (connection) {&#xA;  connection.query(&#39;SET SESSION auto_increment_increment=1&#39;)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;enqueue&lt;/h3&gt; &#xA;&lt;p&gt;The pool will emit an &lt;code&gt;enqueue&lt;/code&gt; event when a callback has been queued to wait for an available connection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;pool.on(&#39;enqueue&#39;, function () {&#xA;  console.log(&#39;Waiting for available connection slot&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;release&lt;/h3&gt; &#xA;&lt;p&gt;The pool will emit a &lt;code&gt;release&lt;/code&gt; event when a connection is released back to the pool. This is called after all release activity has been performed on the connection, so the connection will be listed as free at the time of the event.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;pool.on(&#39;release&#39;, function (connection) {&#xA;  console.log(&#39;Connection %d released&#39;, connection.threadId);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Closing all the connections in a pool&lt;/h2&gt; &#xA;&lt;p&gt;When you are done using the pool, you have to end all the connections or the Node.js event loop will stay active until the connections are closed by the MySQL server. This is typically done if the pool is used in a script or when trying to gracefully shutdown a server. To end all the connections in the pool, use the &lt;code&gt;end&lt;/code&gt; method on the pool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;pool.end(function (err) {&#xA;  // all connections in the pool have ended&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;end&lt;/code&gt; method takes an &lt;em&gt;optional&lt;/em&gt; callback that you can use to know when all the connections are ended.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Once &lt;code&gt;pool.end&lt;/code&gt; is called, &lt;code&gt;pool.getConnection&lt;/code&gt; and other operations can no longer be performed.&lt;/strong&gt; Wait until all connections in the pool are released before calling &lt;code&gt;pool.end&lt;/code&gt;. If you use the shortcut method &lt;code&gt;pool.query&lt;/code&gt;, in place of &lt;code&gt;pool.getConnection&lt;/code&gt; → &lt;code&gt;connection.query&lt;/code&gt; → &lt;code&gt;connection.release&lt;/code&gt;, wait until it completes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pool.end&lt;/code&gt; calls &lt;code&gt;connection.end&lt;/code&gt; on every active connection in the pool. This queues a &lt;code&gt;QUIT&lt;/code&gt; packet on the connection and sets a flag to prevent &lt;code&gt;pool.getConnection&lt;/code&gt; from creating new connections. All commands / queries already in progress will complete, but new commands won&#39;t execute.&lt;/p&gt; &#xA;&lt;h2&gt;PoolCluster&lt;/h2&gt; &#xA;&lt;p&gt;PoolCluster provides multiple hosts connection. (group &amp;amp; retry &amp;amp; selector)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// create&#xA;var poolCluster = mysql.createPoolCluster();&#xA;&#xA;// add configurations (the config is a pool config object)&#xA;poolCluster.add(config); // add configuration with automatic name&#xA;poolCluster.add(&#39;MASTER&#39;, masterConfig); // add a named configuration&#xA;poolCluster.add(&#39;SLAVE1&#39;, slave1Config);&#xA;poolCluster.add(&#39;SLAVE2&#39;, slave2Config);&#xA;&#xA;// remove configurations&#xA;poolCluster.remove(&#39;SLAVE2&#39;); // By nodeId&#xA;poolCluster.remove(&#39;SLAVE*&#39;); // By target group : SLAVE1-2&#xA;&#xA;// Target Group : ALL(anonymous, MASTER, SLAVE1-2), Selector : round-robin(default)&#xA;poolCluster.getConnection(function (err, connection) {});&#xA;&#xA;// Target Group : MASTER, Selector : round-robin&#xA;poolCluster.getConnection(&#39;MASTER&#39;, function (err, connection) {});&#xA;&#xA;// Target Group : SLAVE1-2, Selector : order&#xA;// If can&#39;t connect to SLAVE1, return SLAVE2. (remove SLAVE1 in the cluster)&#xA;poolCluster.on(&#39;remove&#39;, function (nodeId) {&#xA;  console.log(&#39;REMOVED NODE : &#39; + nodeId); // nodeId = SLAVE1&#xA;});&#xA;&#xA;// A pattern can be passed with *  as wildcard&#xA;poolCluster.getConnection(&#39;SLAVE*&#39;, &#39;ORDER&#39;, function (err, connection) {});&#xA;&#xA;// The pattern can also be a regular expression&#xA;poolCluster.getConnection(/^SLAVE[12]$/, function (err, connection) {});&#xA;&#xA;// of namespace : of(pattern, selector)&#xA;poolCluster.of(&#39;*&#39;).getConnection(function (err, connection) {});&#xA;&#xA;var pool = poolCluster.of(&#39;SLAVE*&#39;, &#39;RANDOM&#39;);&#xA;pool.getConnection(function (err, connection) {});&#xA;pool.getConnection(function (err, connection) {});&#xA;pool.query(function (error, results, fields) {});&#xA;&#xA;// close all connections&#xA;poolCluster.end(function (err) {&#xA;  // all connections in the pool cluster have ended&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PoolCluster options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;canRetry&lt;/code&gt;: If &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;PoolCluster&lt;/code&gt; will attempt to reconnect when connection fails. (Default: &lt;code&gt;true&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;removeNodeErrorCount&lt;/code&gt;: If connection fails, node&#39;s &lt;code&gt;errorCount&lt;/code&gt; increases. When &lt;code&gt;errorCount&lt;/code&gt; is greater than &lt;code&gt;removeNodeErrorCount&lt;/code&gt;, remove a node in the &lt;code&gt;PoolCluster&lt;/code&gt;. (Default: &lt;code&gt;5&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;restoreNodeTimeout&lt;/code&gt;: If connection fails, specifies the number of milliseconds before another connection attempt will be made. If set to &lt;code&gt;0&lt;/code&gt;, then node will be removed instead and never re-used. (Default: &lt;code&gt;0&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;defaultSelector&lt;/code&gt;: The default selector. (Default: &lt;code&gt;RR&lt;/code&gt;) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;RR&lt;/code&gt;: Select one alternately. (Round-Robin)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;RANDOM&lt;/code&gt;: Select the node by random function.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ORDER&lt;/code&gt;: Select the first node available unconditionally.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var clusterConfig = {&#xA;  removeNodeErrorCount: 1, // Remove the node immediately when connection fails.&#xA;  defaultSelector: &#39;ORDER&#39;&#xA;};&#xA;&#xA;var poolCluster = mysql.createPoolCluster(clusterConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Switching users and altering connection state&lt;/h2&gt; &#xA;&lt;p&gt;MySQL offers a changeUser command that allows you to alter the current user and other aspects of the connection without shutting down the underlying socket:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.changeUser({user : &#39;john&#39;}, function(err) {&#xA;  if (err) throw err;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available options for this feature are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;user&lt;/code&gt;: The name of the new user (defaults to the previous one).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;password&lt;/code&gt;: The password of the new user (defaults to the previous one).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;charset&lt;/code&gt;: The new charset (defaults to the previous one).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;database&lt;/code&gt;: The new database (defaults to the previous one).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A sometimes useful side effect of this functionality is that this function also resets any connection state (variables, transactions, etc.).&lt;/p&gt; &#xA;&lt;p&gt;Errors encountered during this operation are treated as fatal connection errors by this module.&lt;/p&gt; &#xA;&lt;h2&gt;Server disconnects&lt;/h2&gt; &#xA;&lt;p&gt;You may lose the connection to a MySQL server due to network problems, the server timing you out, the server being restarted, or crashing. All of these events are considered fatal errors, and will have the &lt;code&gt;err.code = &#39;PROTOCOL_CONNECTION_LOST&#39;&lt;/code&gt;. See the &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt; section for more information.&lt;/p&gt; &#xA;&lt;p&gt;Re-connecting a connection is done by establishing a new connection. Once terminated, an existing connection object cannot be re-connected by design.&lt;/p&gt; &#xA;&lt;p&gt;With Pool, disconnected connections will be removed from the pool freeing up space for a new connection to be created on the next getConnection call.&lt;/p&gt; &#xA;&lt;p&gt;With PoolCluster, disconnected connections will count as errors against the related node, incrementing the error code for that node. Once there are more than &lt;code&gt;removeNodeErrorCount&lt;/code&gt; errors on a given node, it is removed from the cluster. When this occurs, the PoolCluster may emit a &lt;code&gt;POOL_NONEONLINE&lt;/code&gt; error if there are no longer any matching nodes for the pattern. The &lt;code&gt;restoreNodeTimeout&lt;/code&gt; config can be set to restore offline nodes after a given timeout.&lt;/p&gt; &#xA;&lt;h2&gt;Performing queries&lt;/h2&gt; &#xA;&lt;p&gt;The most basic way to perform a query is to call the &lt;code&gt;.query()&lt;/code&gt; method on an object (like a &lt;code&gt;Connection&lt;/code&gt;, &lt;code&gt;Pool&lt;/code&gt;, or &lt;code&gt;PoolNamespace&lt;/code&gt; instance).&lt;/p&gt; &#xA;&lt;p&gt;The simplest form of &lt;code&gt;.query()&lt;/code&gt; is &lt;code&gt;.query(sqlString, callback)&lt;/code&gt;, where a SQL string is the first argument and the second is a callback:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;SELECT * FROM `books` WHERE `author` = &#34;David&#34;&#39;, function (error, results, fields) {&#xA;  // error will be an Error if one occurred during the query&#xA;  // results will contain the results of the query&#xA;  // fields will contain information about the returned results fields (if any)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The second form &lt;code&gt;.query(sqlString, values, callback)&lt;/code&gt; comes when using placeholder values (see &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#escaping-query-values&#34;&gt;escaping query values&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;SELECT * FROM `books` WHERE `author` = ?&#39;, [&#39;David&#39;], function (error, results, fields) {&#xA;  // error will be an Error if one occurred during the query&#xA;  // results will contain the results of the query&#xA;  // fields will contain information about the returned results fields (if any)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The third form &lt;code&gt;.query(options, callback)&lt;/code&gt; comes when using various advanced options on the query, like &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#escaping-query-values&#34;&gt;escaping query values&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#joins-with-overlapping-column-names&#34;&gt;joins with overlapping column names&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#timeouts&#34;&gt;timeouts&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#type-casting&#34;&gt;type casting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query({&#xA;  sql: &#39;SELECT * FROM `books` WHERE `author` = ?&#39;,&#xA;  timeout: 40000, // 40s&#xA;  values: [&#39;David&#39;]&#xA;}, function (error, results, fields) {&#xA;  // error will be an Error if one occurred during the query&#xA;  // results will contain the results of the query&#xA;  // fields will contain information about the returned results fields (if any)&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that a combination of the second and third forms can be used where the placeholder values are passed as an argument and not in the options object. The &lt;code&gt;values&lt;/code&gt; argument will override the &lt;code&gt;values&lt;/code&gt; in the option object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query({&#xA;    sql: &#39;SELECT * FROM `books` WHERE `author` = ?&#39;,&#xA;    timeout: 40000, // 40s&#xA;  },&#xA;  [&#39;David&#39;],&#xA;  function (error, results, fields) {&#xA;    // error will be an Error if one occurred during the query&#xA;    // results will contain the results of the query&#xA;    // fields will contain information about the returned results fields (if any)&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the query only has a single replacement character (&lt;code&gt;?&lt;/code&gt;), and the value is not &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;undefined&lt;/code&gt;, or an array, it can be passed directly as the second argument to &lt;code&gt;.query&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#xA;  &#39;SELECT * FROM `books` WHERE `author` = ?&#39;,&#xA;  &#39;David&#39;,&#xA;  function (error, results, fields) {&#xA;    // error will be an Error if one occurred during the query&#xA;    // results will contain the results of the query&#xA;    // fields will contain information about the returned results fields (if any)&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Escaping query values&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt; These methods of escaping values only works when the &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.7/en/sql-mode.html#sqlmode_no_backslash_escapes&#34;&gt;NO_BACKSLASH_ESCAPES&lt;/a&gt; SQL mode is disabled (which is the default state for MySQL servers).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt; This library performs client-side escaping, as this is a library to generate SQL strings on the client side. The syntax for functions like &lt;code&gt;mysql.format&lt;/code&gt; may look similar to a prepared statement, but it is not and the escaping rules from this module are used to generate a resulting SQL string. The purpose of escaping input is to avoid SQL Injection attacks. In order to support enhanced support like &lt;code&gt;SET&lt;/code&gt; and &lt;code&gt;IN&lt;/code&gt; formatting, this module will escape based on the shape of the passed in JavaScript value, and the resulting escaped string may be more than a single value. When structured user input is provided as the value to escape, care should be taken to validate the shape of the input to validate the output will be what is expected.&lt;/p&gt; &#xA;&lt;p&gt;In order to avoid SQL Injection attacks, you should always escape any user provided data before using it inside a SQL query. You can do so using the &lt;code&gt;mysql.escape()&lt;/code&gt;, &lt;code&gt;connection.escape()&lt;/code&gt; or &lt;code&gt;pool.escape()&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var userId = &#39;some user provided value&#39;;&#xA;var sql    = &#39;SELECT * FROM users WHERE id = &#39; + connection.escape(userId);&#xA;connection.query(sql, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;?&lt;/code&gt; characters as placeholders for values you would like to have escaped like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;SELECT * FROM users WHERE id = ?&#39;, [userId], function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Multiple placeholders are mapped to values in the same order as passed. For example, in the following query &lt;code&gt;foo&lt;/code&gt; equals &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;bar&lt;/code&gt; equals &lt;code&gt;b&lt;/code&gt;, &lt;code&gt;baz&lt;/code&gt; equals &lt;code&gt;c&lt;/code&gt;, and &lt;code&gt;id&lt;/code&gt; will be &lt;code&gt;userId&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;UPDATE users SET foo = ?, bar = ?, baz = ? WHERE id = ?&#39;, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, userId], function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This looks similar to prepared statements in MySQL, however it really just uses the same &lt;code&gt;connection.escape()&lt;/code&gt; method internally.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt; This also differs from prepared statements in that all &lt;code&gt;?&lt;/code&gt; are replaced, even those contained in comments and strings.&lt;/p&gt; &#xA;&lt;p&gt;Different value types are escaped differently, here is how:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Numbers are left untouched&lt;/li&gt; &#xA; &lt;li&gt;Booleans are converted to &lt;code&gt;true&lt;/code&gt; / &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Date objects are converted to &lt;code&gt;&#39;YYYY-mm-dd HH:ii:ss&#39;&lt;/code&gt; strings&lt;/li&gt; &#xA; &lt;li&gt;Buffers are converted to hex strings, e.g. &lt;code&gt;X&#39;0fa5&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strings are safely escaped&lt;/li&gt; &#xA; &lt;li&gt;Arrays are turned into list, e.g. &lt;code&gt;[&#39;a&#39;, &#39;b&#39;]&lt;/code&gt; turns into &lt;code&gt;&#39;a&#39;, &#39;b&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Nested arrays are turned into grouped lists (for bulk inserts), e.g. &lt;code&gt;[[&#39;a&#39;, &#39;b&#39;], [&#39;c&#39;, &#39;d&#39;]]&lt;/code&gt; turns into &lt;code&gt;(&#39;a&#39;, &#39;b&#39;), (&#39;c&#39;, &#39;d&#39;)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Objects that have a &lt;code&gt;toSqlString&lt;/code&gt; method will have &lt;code&gt;.toSqlString()&lt;/code&gt; called and the returned value is used as the raw SQL.&lt;/li&gt; &#xA; &lt;li&gt;Objects are turned into &lt;code&gt;key = &#39;val&#39;&lt;/code&gt; pairs for each enumerable property on the object. If the property&#39;s value is a function, it is skipped; if the property&#39;s value is an object, toString() is called on it and the returned value is used.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt; / &lt;code&gt;null&lt;/code&gt; are converted to &lt;code&gt;NULL&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NaN&lt;/code&gt; / &lt;code&gt;Infinity&lt;/code&gt; are left as-is. MySQL does not support these, and trying to insert them as values will trigger MySQL errors until they implement support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This escaping allows you to do neat things like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var post  = {id: 1, title: &#39;Hello MySQL&#39;};&#xA;var query = connection.query(&#39;INSERT INTO posts SET ?&#39;, post, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // Neat!&#xA;});&#xA;console.log(query.sql); // INSERT INTO posts SET `id` = 1, `title` = &#39;Hello MySQL&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the &lt;code&gt;toSqlString&lt;/code&gt; method allows you to form complex queries with functions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var CURRENT_TIMESTAMP = { toSqlString: function() { return &#39;CURRENT_TIMESTAMP()&#39;; } };&#xA;var sql = mysql.format(&#39;UPDATE posts SET modified = ? WHERE id = ?&#39;, [CURRENT_TIMESTAMP, 42]);&#xA;console.log(sql); // UPDATE posts SET modified = CURRENT_TIMESTAMP() WHERE id = 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate objects with a &lt;code&gt;toSqlString&lt;/code&gt; method, the &lt;code&gt;mysql.raw()&lt;/code&gt; method can be used. This creates an object that will be left un-touched when using in a &lt;code&gt;?&lt;/code&gt; placeholder, useful for using functions as dynamic values:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution&lt;/strong&gt; The string provided to &lt;code&gt;mysql.raw()&lt;/code&gt; will skip all escaping functions when used, so be careful when passing in unvalidated input.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var CURRENT_TIMESTAMP = mysql.raw(&#39;CURRENT_TIMESTAMP()&#39;);&#xA;var sql = mysql.format(&#39;UPDATE posts SET modified = ? WHERE id = ?&#39;, [CURRENT_TIMESTAMP, 42]);&#xA;console.log(sql); // UPDATE posts SET modified = CURRENT_TIMESTAMP() WHERE id = 42&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you feel the need to escape queries by yourself, you can also use the escaping function directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var query = &#34;SELECT * FROM posts WHERE title=&#34; + mysql.escape(&#34;Hello MySQL&#34;);&#xA;&#xA;console.log(query); // SELECT * FROM posts WHERE title=&#39;Hello MySQL&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Escaping query identifiers&lt;/h2&gt; &#xA;&lt;p&gt;If you can&#39;t trust an SQL identifier (database / table / column name) because it is provided by a user, you should escape it with &lt;code&gt;mysql.escapeId(identifier)&lt;/code&gt;, &lt;code&gt;connection.escapeId(identifier)&lt;/code&gt; or &lt;code&gt;pool.escapeId(identifier)&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var sorter = &#39;date&#39;;&#xA;var sql    = &#39;SELECT * FROM posts ORDER BY &#39; + connection.escapeId(sorter);&#xA;connection.query(sql, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It also supports adding qualified identifiers. It will escape both parts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var sorter = &#39;date&#39;;&#xA;var sql    = &#39;SELECT * FROM posts ORDER BY &#39; + connection.escapeId(&#39;posts.&#39; + sorter);&#xA;// -&amp;gt; SELECT * FROM posts ORDER BY `posts`.`date`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not want to treat &lt;code&gt;.&lt;/code&gt; as qualified identifiers, you can set the second argument to &lt;code&gt;true&lt;/code&gt; in order to keep the string as a literal identifier:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var sorter = &#39;date.2&#39;;&#xA;var sql    = &#39;SELECT * FROM posts ORDER BY &#39; + connection.escapeId(sorter, true);&#xA;// -&amp;gt; SELECT * FROM posts ORDER BY `date.2`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;code&gt;??&lt;/code&gt; characters as placeholders for identifiers you would like to have escaped like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var userId = 1;&#xA;var columns = [&#39;username&#39;, &#39;email&#39;];&#xA;var query = connection.query(&#39;SELECT ?? FROM ?? WHERE id = ?&#39;, [columns, &#39;users&#39;, userId], function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // ...&#xA;});&#xA;&#xA;console.log(query.sql); // SELECT `username`, `email` FROM `users` WHERE id = 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please note that this last character sequence is experimental and syntax might change&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When you pass an Object to &lt;code&gt;.escape()&lt;/code&gt; or &lt;code&gt;.query()&lt;/code&gt;, &lt;code&gt;.escapeId()&lt;/code&gt; is used to avoid SQL injection in object keys.&lt;/p&gt; &#xA;&lt;h3&gt;Preparing Queries&lt;/h3&gt; &#xA;&lt;p&gt;You can use mysql.format to prepare a query with multiple insertion points, utilizing the proper escaping for ids and values. A simple example of this follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var sql = &#34;SELECT * FROM ?? WHERE ?? = ?&#34;;&#xA;var inserts = [&#39;users&#39;, &#39;id&#39;, userId];&#xA;sql = mysql.format(sql, inserts);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Following this you then have a valid, escaped query that you can then send to the database safely. This is useful if you are looking to prepare the query before actually sending it to the database. As mysql.format is exposed from SqlString.format you also have the option (but are not required) to pass in stringifyObject and timezone, allowing you provide a custom means of turning objects into strings, as well as a location-specific/timezone-aware Date.&lt;/p&gt; &#xA;&lt;h3&gt;Custom format&lt;/h3&gt; &#xA;&lt;p&gt;If you prefer to have another type of query escape format, there&#39;s a connection configuration option you can use to define a custom format function. You can access the connection object if you want to use the built-in &lt;code&gt;.escape()&lt;/code&gt; or any other connection function.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of how to implement another format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.config.queryFormat = function (query, values) {&#xA;  if (!values) return query;&#xA;  return query.replace(/\:(\w+)/g, function (txt, key) {&#xA;    if (values.hasOwnProperty(key)) {&#xA;      return this.escape(values[key]);&#xA;    }&#xA;    return txt;&#xA;  }.bind(this));&#xA;};&#xA;&#xA;connection.query(&#34;UPDATE posts SET title = :title&#34;, { title: &#34;Hello MySQL&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting the id of an inserted row&lt;/h2&gt; &#xA;&lt;p&gt;If you are inserting a row into a table with an auto increment primary key, you can retrieve the insert id like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;INSERT INTO posts SET ?&#39;, {title: &#39;test&#39;}, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  console.log(results.insertId);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When dealing with big numbers (above JavaScript Number precision limit), you should consider enabling &lt;code&gt;supportBigNumbers&lt;/code&gt; option to be able to read the insert id as a string, otherwise it will throw an error.&lt;/p&gt; &#xA;&lt;p&gt;This option is also required when fetching big numbers from the database, otherwise you will get values rounded to hundreds or thousands due to the precision limit.&lt;/p&gt; &#xA;&lt;h2&gt;Getting the number of affected rows&lt;/h2&gt; &#xA;&lt;p&gt;You can get the number of affected rows from an insert, update or delete statement.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;DELETE FROM posts WHERE title = &#34;wrong&#34;&#39;, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  console.log(&#39;deleted &#39; + results.affectedRows + &#39; rows&#39;);&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting the number of changed rows&lt;/h2&gt; &#xA;&lt;p&gt;You can get the number of changed rows from an update statement.&lt;/p&gt; &#xA;&lt;p&gt;&#34;changedRows&#34; differs from &#34;affectedRows&#34; in that it does not count updated rows whose values were not changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;UPDATE posts SET ...&#39;, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  console.log(&#39;changed &#39; + results.changedRows + &#39; rows&#39;);&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting the connection ID&lt;/h2&gt; &#xA;&lt;p&gt;You can get the MySQL connection ID (&#34;thread ID&#34;) of a given connection using the &lt;code&gt;threadId&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.connect(function(err) {&#xA;  if (err) throw err;&#xA;  console.log(&#39;connected as id &#39; + connection.threadId);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Executing queries in parallel&lt;/h2&gt; &#xA;&lt;p&gt;The MySQL protocol is sequential, this means that you need multiple connections to execute queries in parallel. You can use a Pool to manage connections, one simple approach is to create one connection per incoming http request.&lt;/p&gt; &#xA;&lt;h2&gt;Streaming query rows&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes you may want to select large quantities of rows and process each of them as they are received. This can be done like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var query = connection.query(&#39;SELECT * FROM posts&#39;);&#xA;query&#xA;  .on(&#39;error&#39;, function(err) {&#xA;    // Handle error, an &#39;end&#39; event will be emitted after this as well&#xA;  })&#xA;  .on(&#39;fields&#39;, function(fields) {&#xA;    // the field packets for the rows to follow&#xA;  })&#xA;  .on(&#39;result&#39;, function(row) {&#xA;    // Pausing the connnection is useful if your processing involves I/O&#xA;    connection.pause();&#xA;&#xA;    processRow(row, function() {&#xA;      connection.resume();&#xA;    });&#xA;  })&#xA;  .on(&#39;end&#39;, function() {&#xA;    // all rows have been received&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note a few things about the example above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Usually you will want to receive a certain amount of rows before starting to throttle the connection using &lt;code&gt;pause()&lt;/code&gt;. This number will depend on the amount and size of your rows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pause()&lt;/code&gt; / &lt;code&gt;resume()&lt;/code&gt; operate on the underlying socket and parser. You are guaranteed that no more &lt;code&gt;&#39;result&#39;&lt;/code&gt; events will fire after calling &lt;code&gt;pause()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You MUST NOT provide a callback to the &lt;code&gt;query()&lt;/code&gt; method when streaming rows.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;&#39;result&#39;&lt;/code&gt; event will fire for both rows as well as OK packets confirming the success of a INSERT/UPDATE query.&lt;/li&gt; &#xA; &lt;li&gt;It is very important not to leave the result paused too long, or you may encounter &lt;code&gt;Error: Connection lost: The server closed the connection.&lt;/code&gt; The time limit for this is determined by the &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/server-system-variables.html#sysvar_net_write_timeout&#34;&gt;net_write_timeout setting&lt;/a&gt; on your MySQL server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally you may be interested to know that it is currently not possible to stream individual row columns, they will always be buffered up entirely. If you have a good use case for streaming large fields to and from MySQL, I&#39;d love to get your thoughts and contributions on this.&lt;/p&gt; &#xA;&lt;h3&gt;Piping results with Streams&lt;/h3&gt; &#xA;&lt;p&gt;The query object provides a convenience method &lt;code&gt;.stream([options])&lt;/code&gt; that wraps query events into a &lt;a href=&#34;http://nodejs.org/api/stream.html#stream_class_stream_readable&#34;&gt;Readable Stream&lt;/a&gt; object. This stream can easily be piped downstream and provides automatic pause/resume, based on downstream congestion and the optional &lt;code&gt;highWaterMark&lt;/code&gt;. The &lt;code&gt;objectMode&lt;/code&gt; parameter of the stream is set to &lt;code&gt;true&lt;/code&gt; and cannot be changed (if you need a byte stream, you will need to use a transform stream, like &lt;a href=&#34;https://www.npmjs.com/package/objstream&#34;&gt;objstream&lt;/a&gt; for example).&lt;/p&gt; &#xA;&lt;p&gt;For example, piping query results into another stream (with a max buffer of 5 objects) is simply:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;SELECT * FROM posts&#39;)&#xA;  .stream({highWaterMark: 5})&#xA;  .pipe(...);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Multiple statement queries&lt;/h2&gt; &#xA;&lt;p&gt;Support for multiple statements is disabled for security reasons (it allows for SQL injection attacks if values are not properly escaped). To use this feature you have to enable it for your connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = mysql.createConnection({multipleStatements: true});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once enabled, you can execute multiple statement queries like any other query:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;SELECT 1; SELECT 2&#39;, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // `results` is an array with one element for every statement in the query:&#xA;  console.log(results[0]); // [{1: 1}]&#xA;  console.log(results[1]); // [{2: 2}]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally you can also stream the results of multiple statement queries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var query = connection.query(&#39;SELECT 1; SELECT 2&#39;);&#xA;&#xA;query&#xA;  .on(&#39;fields&#39;, function(fields, index) {&#xA;    // the fields for the result rows that follow&#xA;  })&#xA;  .on(&#39;result&#39;, function(row, index) {&#xA;    // index refers to the statement this result belongs to (starts at 0)&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If one of the statements in your query causes an error, the resulting Error object contains a &lt;code&gt;err.index&lt;/code&gt; property which tells you which statement caused it. MySQL will also stop executing any remaining statements when an error occurs.&lt;/p&gt; &#xA;&lt;p&gt;Please note that the interface for streaming multiple statement queries is experimental and I am looking forward to feedback on it.&lt;/p&gt; &#xA;&lt;h2&gt;Stored procedures&lt;/h2&gt; &#xA;&lt;p&gt;You can call stored procedures from your queries as with any other mysql driver. If the stored procedure produces several result sets, they are exposed to you the same way as the results for multiple statement queries.&lt;/p&gt; &#xA;&lt;h2&gt;Joins with overlapping column names&lt;/h2&gt; &#xA;&lt;p&gt;When executing joins, you are likely to get result sets with overlapping column names.&lt;/p&gt; &#xA;&lt;p&gt;By default, node-mysql will overwrite colliding column names in the order the columns are received from MySQL, causing some of the received values to be unavailable.&lt;/p&gt; &#xA;&lt;p&gt;However, you can also specify that you want your columns to be nested below the table name like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var options = {sql: &#39;...&#39;, nestTables: true};&#xA;connection.query(options, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  /* results will be an array like this now:&#xA;  [{&#xA;    table1: {&#xA;      fieldA: &#39;...&#39;,&#xA;      fieldB: &#39;...&#39;,&#xA;    },&#xA;    table2: {&#xA;      fieldA: &#39;...&#39;,&#xA;      fieldB: &#39;...&#39;,&#xA;    },&#xA;  }, ...]&#xA;  */&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use a string separator to have your results merged.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var options = {sql: &#39;...&#39;, nestTables: &#39;_&#39;};&#xA;connection.query(options, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  /* results will be an array like this now:&#xA;  [{&#xA;    table1_fieldA: &#39;...&#39;,&#xA;    table1_fieldB: &#39;...&#39;,&#xA;    table2_fieldA: &#39;...&#39;,&#xA;    table2_fieldB: &#39;...&#39;,&#xA;  }, ...]&#xA;  */&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transactions&lt;/h2&gt; &#xA;&lt;p&gt;Simple transaction support is available at the connection level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.beginTransaction(function(err) {&#xA;  if (err) { throw err; }&#xA;  connection.query(&#39;INSERT INTO posts SET title=?&#39;, title, function (error, results, fields) {&#xA;    if (error) {&#xA;      return connection.rollback(function() {&#xA;        throw error;&#xA;      });&#xA;    }&#xA;&#xA;    var log = &#39;Post &#39; + results.insertId + &#39; added&#39;;&#xA;&#xA;    connection.query(&#39;INSERT INTO log SET data=?&#39;, log, function (error, results, fields) {&#xA;      if (error) {&#xA;        return connection.rollback(function() {&#xA;          throw error;&#xA;        });&#xA;      }&#xA;      connection.commit(function(err) {&#xA;        if (err) {&#xA;          return connection.rollback(function() {&#xA;            throw err;&#xA;          });&#xA;        }&#xA;        console.log(&#39;success!&#39;);&#xA;      });&#xA;    });&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Please note that beginTransaction(), commit() and rollback() are simply convenience functions that execute the START TRANSACTION, COMMIT, and ROLLBACK commands respectively. It is important to understand that many commands in MySQL can cause an implicit commit, as described &lt;a href=&#34;http://dev.mysql.com/doc/refman/5.5/en/implicit-commit.html&#34;&gt;in the MySQL documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ping&lt;/h2&gt; &#xA;&lt;p&gt;A ping packet can be sent over a connection using the &lt;code&gt;connection.ping&lt;/code&gt; method. This method will send a ping packet to the server and when the server responds, the callback will fire. If an error occurred, the callback will fire with an error argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.ping(function (err) {&#xA;  if (err) throw err;&#xA;  console.log(&#39;Server responded to ping&#39;);&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Timeouts&lt;/h2&gt; &#xA;&lt;p&gt;Every operation takes an optional inactivity timeout option. This allows you to specify appropriate timeouts for operations. It is important to note that these timeouts are not part of the MySQL protocol, and rather timeout operations through the client. This means that when a timeout is reached, the connection it occurred on will be destroyed and no further operations can be performed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Kill query after 60s&#xA;connection.query({sql: &#39;SELECT COUNT(*) AS count FROM big_table&#39;, timeout: 60000}, function (error, results, fields) {&#xA;  if (error &amp;amp;&amp;amp; error.code === &#39;PROTOCOL_SEQUENCE_TIMEOUT&#39;) {&#xA;    throw new Error(&#39;too long to count table rows!&#39;);&#xA;  }&#xA;&#xA;  if (error) {&#xA;    throw error;&#xA;  }&#xA;&#xA;  console.log(results[0].count + &#39; rows&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Error handling&lt;/h2&gt; &#xA;&lt;p&gt;This module comes with a consistent approach to error handling that you should review carefully in order to write solid applications.&lt;/p&gt; &#xA;&lt;p&gt;Most errors created by this module are instances of the JavaScript &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error&#34;&gt;Error&lt;/a&gt; object. Additionally they typically come with two extra properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;err.code&lt;/code&gt;: String, contains the MySQL server error symbol if the error is a &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/server-error-reference.html&#34;&gt;MySQL server error&lt;/a&gt; (e.g. &lt;code&gt;&#39;ER_ACCESS_DENIED_ERROR&#39;&lt;/code&gt;), a Node.js error code if it is a Node.js error (e.g. &lt;code&gt;&#39;ECONNREFUSED&#39;&lt;/code&gt;), or an internal error code (e.g. &lt;code&gt;&#39;PROTOCOL_CONNECTION_LOST&#39;&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;err.errno&lt;/code&gt;: Number, contains the MySQL server error number. Only populated from &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/server-error-reference.html&#34;&gt;MySQL server error&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;err.fatal&lt;/code&gt;: Boolean, indicating if this error is terminal to the connection object. If the error is not from a MySQL protocol operation, this property will not be defined.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;err.sql&lt;/code&gt;: String, contains the full SQL of the failed query. This can be useful when using a higher level interface like an ORM that is generating the queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;err.sqlState&lt;/code&gt;: String, contains the five-character SQLSTATE value. Only populated from &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/server-error-reference.html&#34;&gt;MySQL server error&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;err.sqlMessage&lt;/code&gt;: String, contains the message string that provides a textual description of the error. Only populated from &lt;a href=&#34;https://dev.mysql.com/doc/refman/5.5/en/server-error-reference.html&#34;&gt;MySQL server error&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Fatal errors are propagated to &lt;em&gt;all&lt;/em&gt; pending callbacks. In the example below, a fatal error is triggered by trying to connect to a blocked port. Therefore the error object is propagated to both pending callbacks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = require(&#39;mysql&#39;).createConnection({&#xA;  port: 1 // example blocked port&#xA;});&#xA;&#xA;connection.connect(function(err) {&#xA;  console.log(err.code); // &#39;ECONNREFUSED&#39;&#xA;  console.log(err.fatal); // true&#xA;});&#xA;&#xA;connection.query(&#39;SELECT 1&#39;, function (error, results, fields) {&#xA;  console.log(error.code); // &#39;ECONNREFUSED&#39;&#xA;  console.log(error.fatal); // true&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Normal errors however are only delegated to the callback they belong to. So in the example below, only the first callback receives an error, the second query works as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.query(&#39;USE name_of_db_that_does_not_exist&#39;, function (error, results, fields) {&#xA;  console.log(error.code); // &#39;ER_BAD_DB_ERROR&#39;&#xA;});&#xA;&#xA;connection.query(&#39;SELECT 1&#39;, function (error, results, fields) {&#xA;  console.log(error); // null&#xA;  console.log(results.length); // 1&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Last but not least: If a fatal errors occurs and there are no pending callbacks, or a normal error occurs which has no callback belonging to it, the error is emitted as an &lt;code&gt;&#39;error&#39;&lt;/code&gt; event on the connection object. This is demonstrated in the example below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection.on(&#39;error&#39;, function(err) {&#xA;  console.log(err.code); // &#39;ER_BAD_DB_ERROR&#39;&#xA;});&#xA;&#xA;connection.query(&#39;USE name_of_db_that_does_not_exist&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: &lt;code&gt;&#39;error&#39;&lt;/code&gt; events are special in node. If they occur without an attached listener, a stack trace is printed and your process is killed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;tl;dr:&lt;/strong&gt; This module does not want you to deal with silent failures. You should always provide callbacks to your method calls. If you want to ignore this advice and suppress unhandled errors, you can do this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// I am Chuck Norris:&#xA;connection.on(&#39;error&#39;, function() {});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exception Safety&lt;/h2&gt; &#xA;&lt;p&gt;This module is exception safe. That means you can continue to use it, even if one of your callback functions throws an error which you&#39;re catching using &#39;uncaughtException&#39; or a domain.&lt;/p&gt; &#xA;&lt;h2&gt;Type casting&lt;/h2&gt; &#xA;&lt;p&gt;For your convenience, this driver will cast mysql types into native JavaScript types by default. The default behavior can be changed through various &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#connection-options&#34;&gt;Connection options&lt;/a&gt;. The following mappings exist:&lt;/p&gt; &#xA;&lt;h3&gt;Number&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TINYINT&lt;/li&gt; &#xA; &lt;li&gt;SMALLINT&lt;/li&gt; &#xA; &lt;li&gt;INT&lt;/li&gt; &#xA; &lt;li&gt;MEDIUMINT&lt;/li&gt; &#xA; &lt;li&gt;YEAR&lt;/li&gt; &#xA; &lt;li&gt;FLOAT&lt;/li&gt; &#xA; &lt;li&gt;DOUBLE&lt;/li&gt; &#xA; &lt;li&gt;BIGINT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Date&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TIMESTAMP&lt;/li&gt; &#xA; &lt;li&gt;DATE&lt;/li&gt; &#xA; &lt;li&gt;DATETIME&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Buffer&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TINYBLOB&lt;/li&gt; &#xA; &lt;li&gt;MEDIUMBLOB&lt;/li&gt; &#xA; &lt;li&gt;LONGBLOB&lt;/li&gt; &#xA; &lt;li&gt;BLOB&lt;/li&gt; &#xA; &lt;li&gt;BINARY&lt;/li&gt; &#xA; &lt;li&gt;VARBINARY&lt;/li&gt; &#xA; &lt;li&gt;BIT (last byte will be filled with 0 bits as necessary)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;String&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt; text in the binary character set is returned as &lt;code&gt;Buffer&lt;/code&gt;, rather than a string.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CHAR&lt;/li&gt; &#xA; &lt;li&gt;VARCHAR&lt;/li&gt; &#xA; &lt;li&gt;TINYTEXT&lt;/li&gt; &#xA; &lt;li&gt;MEDIUMTEXT&lt;/li&gt; &#xA; &lt;li&gt;LONGTEXT&lt;/li&gt; &#xA; &lt;li&gt;TEXT&lt;/li&gt; &#xA; &lt;li&gt;ENUM&lt;/li&gt; &#xA; &lt;li&gt;SET&lt;/li&gt; &#xA; &lt;li&gt;DECIMAL (may exceed float precision)&lt;/li&gt; &#xA; &lt;li&gt;TIME (could be mapped to Date, but what date would be set?)&lt;/li&gt; &#xA; &lt;li&gt;GEOMETRY (never used those, get in touch if you do)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is not recommended (and may go away / change in the future) to disable type casting, but you can currently do so on either the connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = require(&#39;mysql&#39;).createConnection({typeCast: false});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or on the query level:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var options = {sql: &#39;...&#39;, typeCast: false};&#xA;var query = connection.query(options, function (error, results, fields) {&#xA;  if (error) throw error;&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom type casting&lt;/h3&gt; &#xA;&lt;p&gt;You can also pass a function and handle type casting yourself. You&#39;re given some column information like database, table and name and also type and length. If you just want to apply a custom type casting to a specific type you can do it and then fallback to the default.&lt;/p&gt; &#xA;&lt;p&gt;The function is provided two arguments &lt;code&gt;field&lt;/code&gt; and &lt;code&gt;next&lt;/code&gt; and is expected to return the value for the given field by invoking the parser functions through the &lt;code&gt;field&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;field&lt;/code&gt; argument is a &lt;code&gt;Field&lt;/code&gt; object and contains data about the field that need to be parsed. The following are some of the properties on a &lt;code&gt;Field&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;db&lt;/code&gt; - a string of the database the field came from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;table&lt;/code&gt; - a string of the table the field came from.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;name&lt;/code&gt; - a string of the field name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; - a string of the field type in all caps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;length&lt;/code&gt; - a number of the field length, as given by the database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;next&lt;/code&gt; argument is a &lt;code&gt;function&lt;/code&gt; that, when called, will return the default type conversion for the given field.&lt;/p&gt; &#xA;&lt;p&gt;When getting the field data, the following helper methods are present on the &lt;code&gt;field&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;.string()&lt;/code&gt; - parse the field into a string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.buffer()&lt;/code&gt; - parse the field into a &lt;code&gt;Buffer&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.geometry()&lt;/code&gt; - parse the field as a geometry value.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The MySQL protocol is a text-based protocol. This means that over the wire, all field types are represented as a string, which is why only string-like functions are available on the &lt;code&gt;field&lt;/code&gt; object. Based on the type information (like &lt;code&gt;INT&lt;/code&gt;), the type cast should convert the string field into a different JavaScript type (like a &lt;code&gt;number&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s an example of converting &lt;code&gt;TINYINT(1)&lt;/code&gt; to boolean:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;connection = mysql.createConnection({&#xA;  typeCast: function (field, next) {&#xA;    if (field.type === &#39;TINY&#39; &amp;amp;&amp;amp; field.length === 1) {&#xA;      return (field.string() === &#39;1&#39;); // 1 = true, 0 = false&#xA;    } else {&#xA;      return next();&#xA;    }&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;WARNING: YOU MUST INVOKE the parser using one of these three field functions in your custom typeCast callback. They can only be called once.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Debugging and reporting problems&lt;/h2&gt; &#xA;&lt;p&gt;If you are running into problems, one thing that may help is enabling the &lt;code&gt;debug&lt;/code&gt; mode for the connection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = mysql.createConnection({debug: true});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will print all incoming and outgoing packets on stdout. You can also restrict debugging to packet types by passing an array of types to debug:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var connection = mysql.createConnection({debug: [&#39;ComQueryPacket&#39;, &#39;RowDataPacket&#39;]});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to restrict debugging to the query and data packets.&lt;/p&gt; &#xA;&lt;p&gt;If that does not help, feel free to open a GitHub issue. A good GitHub issue will have:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The minimal amount of code required to reproduce the problem (if possible)&lt;/li&gt; &#xA; &lt;li&gt;As much debugging output and information about your environment (mysql version, node version, os, etc.) as you can gather.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security issues&lt;/h2&gt; &#xA;&lt;p&gt;Security issues should not be first reported through GitHub or another public forum, but kept private in order for the collaborators to assess the report and either (a) devise a fix and plan a release date or (b) assert that it is not a security issue (in which case it can be posted in a public forum, like a GitHub issue).&lt;/p&gt; &#xA;&lt;p&gt;The primary private forum is email, either by emailing the module&#39;s author or opening a GitHub issue simply asking to whom a security issues should be addressed to without disclosing the issue or type of issue.&lt;/p&gt; &#xA;&lt;p&gt;An ideal report would include a clear indication of what the security issue is and how it would be exploited, ideally with an accompanying proof of concept (&#34;PoC&#34;) for collaborators to work against and validate potentional fixes against.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions from the community. Contributions are accepted using GitHub pull requests. If you&#39;re not familiar with making GitHub pull requests, please refer to the &lt;a href=&#34;https://help.github.com/articles/creating-a-pull-request/&#34;&gt;GitHub documentation &#34;Creating a pull request&#34;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For a good pull request, we ask you provide the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Try to include a clear description of your pull request in the description. It should include the basic &#34;what&#34; and &#34;why&#34;s for the request.&lt;/li&gt; &#xA; &lt;li&gt;The tests should pass as best as you can. See the &lt;a href=&#34;https://raw.githubusercontent.com/mysqljs/mysql/master/#running-tests&#34;&gt;Running tests&lt;/a&gt; section on how to run the different tests. GitHub will automatically run the tests as well, to act as a safety net.&lt;/li&gt; &#xA; &lt;li&gt;The pull request should include tests for the change. A new feature should have tests for the new feature and bug fixes should include a test that fails without the corresponding code change and passes after they are applied. The command &lt;code&gt;npm run test-cov&lt;/code&gt; will generate a &lt;code&gt;coverage/&lt;/code&gt; folder that contains HTML pages of the code coverage, to better understand if everything you&#39;re adding is being tested.&lt;/li&gt; &#xA; &lt;li&gt;If the pull request is a new feature, please be sure to include all appropriate documentation additions in the &lt;code&gt;Readme.md&lt;/code&gt; file as well.&lt;/li&gt; &#xA; &lt;li&gt;To help ensure that your code is similar in style to the existing code, run the command &lt;code&gt;npm run lint&lt;/code&gt; and fix any displayed issues.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running tests&lt;/h2&gt; &#xA;&lt;p&gt;The test suite is split into two parts: unit tests and integration tests. The unit tests run on any machine while the integration tests require a MySQL server instance to be setup.&lt;/p&gt; &#xA;&lt;h3&gt;Running unit tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ FILTER=unit npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running integration tests&lt;/h3&gt; &#xA;&lt;p&gt;Set the environment variables &lt;code&gt;MYSQL_DATABASE&lt;/code&gt;, &lt;code&gt;MYSQL_HOST&lt;/code&gt;, &lt;code&gt;MYSQL_PORT&lt;/code&gt;, &lt;code&gt;MYSQL_USER&lt;/code&gt; and &lt;code&gt;MYSQL_PASSWORD&lt;/code&gt;. &lt;code&gt;MYSQL_SOCKET&lt;/code&gt; can also be used in place of &lt;code&gt;MYSQL_HOST&lt;/code&gt; and &lt;code&gt;MYSQL_PORT&lt;/code&gt; to connect over a UNIX socket. Then run &lt;code&gt;npm test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you have an installation of mysql running on localhost:3306 and no password set for the &lt;code&gt;root&lt;/code&gt; user, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mysql -u root -e &#34;CREATE DATABASE IF NOT EXISTS node_mysql_test&#34;&#xA;$ MYSQL_HOST=localhost MYSQL_PORT=3306 MYSQL_DATABASE=node_mysql_test MYSQL_USER=root MYSQL_PASSWORD= FILTER=integration npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Todo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Prepared statements&lt;/li&gt; &#xA; &lt;li&gt;Support for encodings other than UTF-8 / ASCII&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>