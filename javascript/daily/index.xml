<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-11T01:38:00Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Pythagora-io/pythagora</title>
    <updated>2023-06-11T01:38:00Z</updated>
    <id>tag:github.com,2023-06-11:/Pythagora-io/pythagora</id>
    <link href="https://github.com/Pythagora-io/pythagora" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Generate automated tests for your Node.js app via LLMs without developers having to write a single line of code.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://user-images.githubusercontent.com/10895136/228003796-7e3319ad-f0b1-4da9-a2d0-6cf67ccc7a32.png&#34;&gt; &#xA;  &lt;img height=&#34;200px&#34; alt=&#34;Pythagora Logo&#34; src=&#34;https://user-images.githubusercontent.com/10895136/228003796-7e3319ad-f0b1-4da9-a2d0-6cf67ccc7a32.png&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Pythagora is on a mission to make automated tests&lt;br&gt;ü§ñ fully autonomous ü§ñ&lt;/h2&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Just run one command and watch the tests being created with GPT-4&lt;/h3&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;The following details are for generating unit tests. To view the docs on how to generate &lt;strong&gt;integration tests&lt;/strong&gt;, click &lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/pythagora/main/src/docs/integration/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üèÉüí®Ô∏è Quickstart&lt;/h1&gt; &#xA;&lt;p&gt;To integrate Pythagora you just run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i pythagora --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And that&#39;s it! Now, you can run the following command from the root directory of your repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --unit-tests --func &amp;lt;FUNCTION_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;&amp;lt;FUNCTION_NAME&amp;gt;&lt;/code&gt; is the name of the function you want to generate unit tests for. Just make sure that your function is exported from a file. You can see other options like generating tests for multiple files or folders &lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/pythagora/main/#-options&#34;&gt;below in the Options section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üéû Demo&lt;/h1&gt; &#xA;&lt;p&gt;Here are some demo videos that can help you get started.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://youtu.be/NNd08XgFFw4&#34;&gt;&lt;img src=&#34;https://github-production-user-asset-6210df.s3.amazonaws.com/10895136/244031887-02f19eb9-dba1-4e62-a670-744c7d3423ae.gif&#34; alt=&#34;Pythagora Alpha Demo&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://youtu.be/NNd08XgFFw4&#34;&gt;Pythagora Unit Tests Demo (2 min)&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üîé Examples&lt;/h1&gt; &#xA;&lt;p&gt;Here are examples of open sourced repositories that we forked and created tests with Pythagora so you can easily see it in action.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Pythagora-io/pythagora-demo-lodash&#34;&gt;Lodash&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üìù 1604 tests generated&lt;/li&gt; &#xA;   &lt;li&gt;üêû 13 bugs found (3 edge cases and 10 bugs)&lt;/li&gt; &#xA;   &lt;li&gt;‚è≥Ô∏è 4 hour run time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/Pythagora-io/pythagora/assets/10895136/c0a2a589-e3ef-4812-9ea2-545307fd1a1d&#34; alt=&#34;lodash pythagora tests results&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/Pythagora-io/pythagora-demo-node-fs-extra&#34;&gt;node-fs-extra&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;üìù 98 tests generated&lt;/li&gt; &#xA;   &lt;li&gt;üêû 2 bugs found&lt;/li&gt; &#xA;   &lt;li&gt;‚è≥Ô∏è 30 minutes run time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;img src=&#34;https://github.com/Pythagora-io/pythagora/assets/10895136/a3d8ec9e-2881-4b97-9d95-57440c1932e4&#34; alt=&#34;node-fs-extra pythagora tests results&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üî¨ How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;When Pythagora generates unit tests, it uses the following approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Find the function you want to test&lt;/li&gt; &#xA; &lt;li&gt;Find all the functions that are called from within that function&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is done with AST (Abstract Syntax Tree) parsing&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Send the function you want to test and all the related functions to the Pythagora server which then generates the unit tests with GPT-4&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the Pythagora server is open sourced as well &lt;a href=&#34;https://github.com/Pythagora-io/api&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can find the prompts &lt;a href=&#34;https://github.com/Pythagora-io/api/tree/main/prompts&#34;&gt;in this folder&lt;/a&gt; on the Pythagora server&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üìñ Options&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate unit tests for &lt;strong&gt;one single function&lt;/strong&gt;, run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --unit-tests --func &amp;lt;FUNCTION_NAME&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate unit tests for &lt;strong&gt;one single function&lt;/strong&gt; in a specific file, run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --unit-tests --func &amp;lt;FUNCTION_NAME&amp;gt; --path ./path/to/file.js&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate unit tests for &lt;strong&gt;all functions in a file&lt;/strong&gt;, run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --unit-tests --path ./path/to/file.js&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To generate unit tests for &lt;strong&gt;all functions in all files in a folder&lt;/strong&gt;, run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --unit-tests --path ./path/to/folder/&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;‚öôÔ∏è Config&lt;/h1&gt; &#xA;&lt;p&gt;Pythagora uses GPT-4 to generate tests so you either need to have OpenAI API Key or Pythagora API Key. You can get your &lt;a href=&#34;https://mailchi.mp/f4f4d7270a7a/api-waitlist&#34;&gt;Pythagora API Key here&lt;/a&gt; or &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API Key here&lt;/a&gt;. Once you have it, add it to Pythagora with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --config --pythagora-api-key &amp;lt;API_KEY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --config --openai-api-key &amp;lt;API_KEY&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;‚ñ∂Ô∏è How to run unit tests&lt;/h1&gt; &#xA;&lt;p&gt;To run the generated tests, you can simply run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx jest ./pythagora_tests/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to run tests from a specific file or a folder, run &lt;code&gt;npx jest &amp;lt;PATH_TO_FILE_OR_FOLDER&amp;gt;&lt;/code&gt;. Currently, Pythagora supports only generating Jest tests but if you would like it to generate tests in other frameworks, let us know at &lt;a href=&#34;mailto:hi@pythagora.ai&#34;&gt;hi@pythagora.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üìåÔ∏è Notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The best unit tests that Pythagora generates are the ones that are standalone functions (eg. helpers). Basically, the parts of the code that actually can be unit tested. For example, take a look at this &lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/pythagora/main/src/utils/common.js&#34;&gt;Pythagora file&lt;/a&gt; - it contains helper functions that are a perfect candidate for unit tests. When we ran &lt;code&gt;npx pythagora --unit-tests --path ./src/utils/common.js&lt;/code&gt; - it generated 145 tests from which only 17 failed. What is amazing is that only 6 tests failed because they were incorrectly written and the other 11 tests caught bugs in the code itself. You can view these tests &lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/pythagora/main/pythagora_tests/unit/src/utils/common/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We don&#39;t store any of your code on our servers. However, the code is being sent to GPT and hence OpenAI. Here is their &lt;a href=&#34;https://openai.com/policies/privacy-policy&#34;&gt;privacy policy&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;a function you want to generate tests for needs to be exported from the file. For example, if you have a file like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function mongoObjToJson(originalObj) {&#xA;    ...&#xA;}&#xA;&#xA;module.exports = {&#xA;    mongoObjToJson&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then, to generate unit tests for the &lt;code&gt;mongoObjToJson&lt;/code&gt; function, you can run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx pythagora --unit-tests --func mongoObjToJson&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;ü§îÔ∏è FAQ&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;How accurate are these tests?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The best unit tests that Pythagora generates are the ones that are standalone functions. Basically, the parts of the code that actually can be unit tested. For example, take a look at this &lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/pythagora/main/src/utils/common.js&#34;&gt;Pythagora file&lt;/a&gt; - it contains helper functions that are a perfect candidate for unit tests. When we ran &lt;code&gt;npx pythagora --unit-tests --path ./src/utils/common.js&lt;/code&gt; - it generated 145 tests from which only 17 failed. What is amazing is that only 6 tests failed because they were incorrectly written and the other 11 tests caught bugs in the code itself. You can view these tests &lt;a href=&#34;https://raw.githubusercontent.com/Pythagora-io/pythagora/main/pythagora_tests/unit/src/utils/common/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Here are a couple of observations we&#39;ve made while testing Pythagora: &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;It does a great job at testing edge cases. For many repos we created tests for, the tests found bugs right away by testing edge cases.&lt;/li&gt; &#xA;     &lt;li&gt;It works best for testing standalone helper functions. For example, we tried generating tests for the Lodash repo and it create 1000 tests from which only 40 needed additional review. For other, non standalone functions, we&#39;re planning to combine recordings from integration tests to generate proper mocks so that should expand Pythagora&#39;s test palette.&lt;/li&gt; &#xA;     &lt;li&gt;It&#39;s definitely not perfect but the tests it created I wanted to keep and commit them. So, I encourage you to try it out and see how it works for you. If you do that, please let us know via &lt;a href=&#34;mailto:hi@pythagora.ai&#34;&gt;email&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/npC5TAfj6e&#34;&gt;Discord&lt;/a&gt;. We&#39;re super excited to hear how it went for you. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Should I review generated tests?&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Absolutely. As mentioned above, some tests might be incorrectly written so it&#39;s best for you to review all tests before committing them. Nevertheless, I think this will save you a lot of time and will help you think about your code in a different way. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Tests help me think about my code - I don&#39;t want to generate them automatically&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;That&#39;s the best thing about Pythagora - it actually does help you think about the code. Just, you don&#39;t need to spend time writing tests. This happened to us, who created Pythagora - we coded it as fast as possible but when we added unit test generation, we realized that it cannot create tests for some functions. So, we refactored the code and made it more modular so that unit tests can be generated for it. &lt;br&gt;&lt;br&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;What tests are the best&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;That&#39;s the best thing about Pythagora - it actually does help you think about the code. Just, you don&#39;t need to spend time writing tests. This happened to us, who created Pythagora - we coded it as fast as possible but when we added unit test generation, we realized that it cannot create tests for some functions. So, we refactored the code and made it more modular so that unit tests can be generated for it.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;üèÅ Alpha version&lt;/h1&gt; &#xA;&lt;p&gt;This is an alpha version of Pythagora. To get an update about the beta release or to give a &lt;b&gt;suggestion on tech (framework / database) you want Pythagora to support&lt;/b&gt; you can üëâ &lt;a href=&#34;http://eepurl.com/ikg_nT&#34; target=&#34;_blank&#34;&gt;add your email / comment here&lt;/a&gt; üëà . &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üîó Connect with us&lt;/h1&gt; &#xA;&lt;p&gt;üí¨ Join the discussion on &lt;a href=&#34;https://discord.gg/npC5TAfj6e&#34; target=&#34;_blank&#34;&gt;our Discord server&lt;/a&gt;. &lt;br&gt;&lt;br&gt; üì® Get updates on new features and beta release by &lt;a href=&#34;http://eepurl.com/ikg_nT&#34; target=&#34;_blank&#34;&gt;adding your email here&lt;/a&gt;. &lt;br&gt;&lt;br&gt; üåü As an open source tool, it would mean the world to us if you starred the Pythagora repo üåü &lt;br&gt;&lt;br&gt; &lt;br&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;br&gt;&lt;br&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>SillyTavern/SillyTavern</title>
    <updated>2023-06-11T01:38:00Z</updated>
    <id>tag:github.com,2023-06-11:/SillyTavern/SillyTavern</id>
    <link href="https://github.com/SillyTavern/SillyTavern" rel="alternate"></link>
    <summary type="html">&lt;p&gt;LLM Frontend for Power Users.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/Cohee1207/SillyTavern/assets/18619528/8c41a061-7f72-4d2b-9d54-e6d058209e7b&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Mobile-friendly, Multi-API (KoboldAI/CPP, Horde, NovelAI, Ooba, OpenAI+proxies, Poe, WindowAI(Claude!)), VN-like Waifu Mode, Horde SD, System TTS, WorldInfo (lorebooks), customizable UI, auto-translate, and more prompt options than you&#39;d ever want or need. Optional Extras server for more SD/TTS options + ChromaDB/Summarize.&lt;/p&gt; &#xA;&lt;p&gt;Based on a fork of TavernAI 1.2.8&lt;/p&gt; &#xA;&lt;h3&gt;Brought to you by Cohee, RossAscends and the SillyTavern community&lt;/h3&gt; &#xA;&lt;p&gt;NOTE: We have added &lt;a href=&#34;https://docs.sillytavern.app/usage/faq/&#34;&gt;a FAQ&lt;/a&gt; to answer most of your questions and help you get started.&lt;/p&gt; &#xA;&lt;h3&gt;What is SillyTavern or TavernAI?&lt;/h3&gt; &#xA;&lt;p&gt;Tavern is a user interface you can install on your computer (and Android phones) that allows you to interact with text generation AIs and chat/roleplay with characters you or the community create.&lt;/p&gt; &#xA;&lt;p&gt;SillyTavern is a fork of TavernAI 1.2.8 which is under more active development and has added many major features. At this point, they can be thought of as completely independent programs.&lt;/p&gt; &#xA;&lt;h3&gt;Branches&lt;/h3&gt; &#xA;&lt;p&gt;SillyTavern is being developed using a two-branch system to ensure a smooth experience for all users.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;main -üåü &lt;strong&gt;Recommended for most users.&lt;/strong&gt; This is the most stable and recommended branch, updated only when major releases are pushed. It&#39;s suitable for the majority of users.&lt;/li&gt; &#xA; &lt;li&gt;dev - ‚ö†Ô∏è &lt;strong&gt;Not recommended for casual use.&lt;/strong&gt; This branch has the latest features, but be cautious as it may break at any time. Only for power users and enthusiasts.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;re not familiar with using the git CLI or don&#39;t understand what a branch is, don&#39;t worry! The main branch is always the preferable option for you.&lt;/p&gt; &#xA;&lt;h3&gt;What do I need other than Tavern?&lt;/h3&gt; &#xA;&lt;p&gt;On its own Tavern is useless, as it&#39;s just a user interface. You have to have access to an AI system backend that can act as the roleplay character. There are various supported backends: OpenAPI API (GPT), KoboldAI (either running locally or on Google Colab), and more. You can read more about this in &lt;a href=&#34;https://raw.githubusercontent.com/SillyTavern/SillyTavern/main/faq.md&#34;&gt;the FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Do I need a powerful PC to run Tavern?&lt;/h3&gt; &#xA;&lt;p&gt;Since Tavern is only a user interface, it has tiny hardware requirements, it will run on anything. It&#39;s the AI system backend that needs to be powerful.&lt;/p&gt; &#xA;&lt;h2&gt;Mobile support&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;This fork can be run natively on Android phones using Termux. Please refer to this guide by ArroganceComplex#2659:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://rentry.org/STAI-Termux&#34;&gt;https://rentry.org/STAI-Termux&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;.webp character cards import/export is not supported in Termux. Use either JSON or PNG formats instead.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Questions or suggestions?&lt;/h2&gt; &#xA;&lt;h3&gt;We now have a community Discord server&lt;/h3&gt; &#xA;&lt;p&gt;Get support, share favorite characters and prompts:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://discord.gg/RZdyAEUPvj&#34;&gt;Join&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Get in touch with the developers directly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Discord: Cohee#1207 or RossAscends#1779&lt;/li&gt; &#xA; &lt;li&gt;Reddit: /u/RossAscends or /u/sillylossy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Cohee1207/SillyTavern/issues&#34;&gt;Post a GitHub issue&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;This version includes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A heavily modified TavernAI 1.2.8 (more than 50% of code rewritten or optimized)&lt;/li&gt; &#xA; &lt;li&gt;Swipes&lt;/li&gt; &#xA; &lt;li&gt;Group chats: multi-bot rooms for characters to talk to you or each other&lt;/li&gt; &#xA; &lt;li&gt;Chat bookmarks / branching (duplicates the dialogue in its current state)&lt;/li&gt; &#xA; &lt;li&gt;Advanced KoboldAI / TextGen generation settings with a lot of community-made presets&lt;/li&gt; &#xA; &lt;li&gt;World Info support: create a rich lore or save tokens on your character card&lt;/li&gt; &#xA; &lt;li&gt;Window AI browser extension support (run models like Claude, GPT 4): &lt;a href=&#34;https://windowai.io/&#34;&gt;https://windowai.io/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oobabooga/text-generation-webui&#34;&gt;Oobabooga&#39;s TextGen WebUI&lt;/a&gt; API connection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://horde.koboldai.net/&#34;&gt;AI Horde&lt;/a&gt; connection&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://poe.com&#34;&gt;Poe.com&lt;/a&gt; (ChatGPT / Claude) connection&lt;/li&gt; &#xA; &lt;li&gt;Soft prompts selector for KoboldAI&lt;/li&gt; &#xA; &lt;li&gt;Prompt generation formatting tweaking&lt;/li&gt; &#xA; &lt;li&gt;webp character card interoperability (PNG is still an internal format)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Extensions&lt;/h2&gt; &#xA;&lt;p&gt;SillyTavern has an extensibility support, with some additional AI modules hosted via &lt;a href=&#34;https://github.com/SillyTavern/SillyTavern-extras&#34;&gt;SillyTavern Extras API&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Author&#39;s Note / Character Bias&lt;/li&gt; &#xA; &lt;li&gt;Character emotional expressions&lt;/li&gt; &#xA; &lt;li&gt;Auto-Summary of the chat history&lt;/li&gt; &#xA; &lt;li&gt;Sending images to chat, and the AI interpreting the content.&lt;/li&gt; &#xA; &lt;li&gt;Stable Diffusion image generation (5 chat-related presets plus &#39;free mode&#39;)&lt;/li&gt; &#xA; &lt;li&gt;Text-to-speech for AI response messages (via ElevenLabs, Silero, or the OS&#39;s System TTS)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Full list of included extenisons and tutorials how to use them can be found on &lt;a href=&#34;https://github.com/SillyTavern/SillyTavern/wiki&#34;&gt;Wiki&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;UI/CSS/Quality of Life tweaks by RossAscends&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Mobile UI with optimized for iOS, and supports saving a shortcut to home screen and opening in fullscreen mode.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;HotKeys&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Up = Edit last message in chat&lt;/li&gt; &#xA;   &lt;li&gt;Ctrl+Up = Edit last USER message in chat&lt;/li&gt; &#xA;   &lt;li&gt;Left = swipe left&lt;/li&gt; &#xA;   &lt;li&gt;Right = swipe right (NOTE: swipe hotkeys are disabled when chatbar has something typed into it)&lt;/li&gt; &#xA;   &lt;li&gt;Ctrl+Left = view locally stored variables (in the browser console window)&lt;/li&gt; &#xA;   &lt;li&gt;Enter (with chat bar selected) = send your message to AI&lt;/li&gt; &#xA;   &lt;li&gt;Ctrl+Enter = Regenerate the last AI response&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;User Name Changes and Character Deletion no longer force the page to refresh.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Toggle option to automatically connect to API on page load.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Toggle option to automatically load the most recently viewed character on page load.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Better Token Counter - works on unsaved characters, and shows both permanent and temporary tokens.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Better Past Chats View&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;New Chat filenames are saved in a readable format of &#34;(character) - (when it was created)&#34;&lt;/li&gt; &#xA;   &lt;li&gt;Chat preview increased from 40 characters to 300.&lt;/li&gt; &#xA;   &lt;li&gt;Multiple options for characters list sorting (by name, creation date, chat sizes).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;By default the left and right settings panel will close when you click away from it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clicking the Lock on the nav panel will hold the panel open, and this setting be remembered across sessions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nav panel status of open or closed will also be saved across sessions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Customizable chat UI:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Play a sound when a new message arrives&lt;/li&gt; &#xA;   &lt;li&gt;Switch between round or rectangle avatar styles&lt;/li&gt; &#xA;   &lt;li&gt;Have a wider chat window on the desktop&lt;/li&gt; &#xA;   &lt;li&gt;Optional semi-transparent glass-like panels&lt;/li&gt; &#xA;   &lt;li&gt;Customizable page colors for &#39;main text&#39;, &#39;quoted text&#39; &#39;italics text&#39;.&lt;/li&gt; &#xA;   &lt;li&gt;Customizable UI background color and blur amount&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;NOTE: This software is intended for local install purposes, and has not been thoroughly tested on a colab or other cloud notebook service.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DO NOT INSTALL INTO ANY WINDOWS CONTROLLED FOLDER (Program Files, System32, etc).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;DO NOT RUN START.BAT WITH ADMIN PERMISSIONS&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;p&gt;Installing via Git (recommended for easy updating)&lt;/p&gt; &#xA;&lt;p&gt;Easy to follow guide with pretty pictures: &lt;a href=&#34;https://docs.alpindale.dev/pygmalion-extras/sillytavern/#windows-installation&#34;&gt;https://docs.alpindale.dev/pygmalion-extras/sillytavern/#windows-installation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/en&#34;&gt;NodeJS&lt;/a&gt; (latest LTS version is recommended)&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://central.github.com/deployments/desktop/desktop/latest/win32&#34;&gt;GitHub Desktop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Open Windows Explorer (&lt;code&gt;Win+E&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Browse to or Create a folder that is not controlled or monitored by Windows. (ex: C:\MySpecialFolder)&lt;/li&gt; &#xA; &lt;li&gt;Open a Command Prompt inside that folder by clicking in the &#39;Address Bar&#39; at the top, typing &lt;code&gt;cmd&lt;/code&gt;, and pressing Enter.&lt;/li&gt; &#xA; &lt;li&gt;Once the black box (Command Prompt) pops up, type ONE of the following into it and press Enter:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;for Main Branch: &lt;code&gt;git clone https://github.com/Cohee1207/SillyTavern -b main&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;for Dev Branch: &lt;code&gt;git clone https://github.com/Cohee1207/SillyTavern -b dev&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;ol start=&#34;7&#34;&gt; &#xA;   &lt;li&gt;Once everything is cloned, double click &lt;code&gt;Start.bat&lt;/code&gt; to make NodeJS install its requirements.&lt;/li&gt; &#xA;   &lt;li&gt;The server will then start, and SillyTavern will popup in your browser.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Installing via zip download&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/en&#34;&gt;NodeJS&lt;/a&gt; (latest LTS version is recommended)&lt;/li&gt; &#xA; &lt;li&gt;Download the zip from this GitHub repo. (Get the &lt;code&gt;Source code (zip)&lt;/code&gt; from &lt;a href=&#34;https://github.com/Cohee1207/SillyTavern/releases/latest&#34;&gt;Releases&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Unzip it into a folder of your choice&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;Start.bat&lt;/code&gt; via double-clicking or in a command line.&lt;/li&gt; &#xA; &lt;li&gt;Once the server has prepared everything for you, it will open a tab in your browser.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;start.sh&lt;/code&gt; script.&lt;/li&gt; &#xA; &lt;li&gt;Enjoy.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;API keys management&lt;/h2&gt; &#xA;&lt;p&gt;SillyTavern saves your API keys to a &lt;code&gt;secrets.json&lt;/code&gt; file in the server directory.&lt;/p&gt; &#xA;&lt;p&gt;By default they will not be exposed to a frontend after you enter them and reload the page.&lt;/p&gt; &#xA;&lt;p&gt;In order to enable viewing your keys by clicking a button in the API block:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Set the value of &lt;code&gt;allowKeysExposure&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;config.conf&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Restart the SillyTavern server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Remote connections&lt;/h2&gt; &#xA;&lt;p&gt;Most often this is for people who want to use SillyTavern on their mobile phones while their PC runs the ST server on the same wifi network.&lt;/p&gt; &#xA;&lt;p&gt;However, it can be used to allow remote connections from anywhere as well.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT: SillyTavern is a single-user program, so anyone who logs in will be able to see all characters and chats, and be able to change any settings inside the UI.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1. Managing whitelisted IPs&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create a new text file inside your SillyTavern base install folder called &lt;code&gt;whitelist.txt&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the file in a text editor, add a list of IPs you want to be allowed to connect.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Both indidivual IPs, and wildcard IP ranges are accepted. Examples:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;192.168.0.1&#xA;192.168.0.20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;192.168.0.*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(the above wildcard IP range will allow any device on the local network to connect)&lt;/p&gt; &#xA;&lt;p&gt;CIDR masks are also accepted (eg. 10.0.0.0/24).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Save the &lt;code&gt;whitelist.txt&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;Restart your TAI server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now devices which have the IP specified in the file will be able to connect.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;code&gt;config.conf&lt;/code&gt; also has a &lt;code&gt;whitelist&lt;/code&gt; array, which you can use in the same way, but this array will be ignored if &lt;code&gt;whitelist.txt&lt;/code&gt; exists.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. Getting the IP for the ST host machine&lt;/h3&gt; &#xA;&lt;p&gt;After the whitelist has been setup, you&#39;ll need the IP of the ST-hosting device.&lt;/p&gt; &#xA;&lt;p&gt;If the ST-hosting device is on the same wifi network, you will use the ST-host&#39;s internal wifi IP:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;For Windows: windows button &amp;gt; type &lt;code&gt;cmd.exe&lt;/code&gt; in the search bar &amp;gt; type &lt;code&gt;ipconfig&lt;/code&gt; in the console, hit Enter &amp;gt; look for &lt;code&gt;IPv4&lt;/code&gt; listing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you (or someone else) wants to connect to your hosted ST while not being on the same network, you will need the public IP of your ST-hosting device.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;While using the ST-hosting device, access &lt;a href=&#34;https://whatismyipaddress.com/&#34;&gt;this page&lt;/a&gt; and look for for &lt;code&gt;IPv4&lt;/code&gt;. This is what you would use to connect from the remote device.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. Connect the remote device to the ST host machine.&lt;/h3&gt; &#xA;&lt;p&gt;Whatever IP you ended up with for your situation, you will put that IP address and port number into the remote device&#39;s web browser.&lt;/p&gt; &#xA;&lt;p&gt;A typical address for an ST host on the same wifi network would look like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;http://192.168.0.5:8000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use http:// NOT https://&lt;/p&gt; &#xA;&lt;h3&gt;Opening your ST to all IPs&lt;/h3&gt; &#xA;&lt;p&gt;We do not recommend doing this, but you can open &lt;code&gt;config.conf&lt;/code&gt; and change &lt;code&gt;whitelist&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You must remove (or rename) &lt;code&gt;whitelist.txt&lt;/code&gt; in the SillyTavern base install folder, if it exists.&lt;/p&gt; &#xA;&lt;p&gt;This is usually an insecure practice, so we require you to set a username and password when you do this.&lt;/p&gt; &#xA;&lt;p&gt;The username and password are set in &lt;code&gt;config.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After restarting your ST server, any device will be able to connect to it, regardless of their IP as long as they know the username and password.&lt;/p&gt; &#xA;&lt;h3&gt;Still Unable To Connect?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Create an inbound/outbound firewall rule for the port found in &lt;code&gt;config.conf&lt;/code&gt;. Do NOT mistake this for portforwarding on your router, otherwise someone could find your chat logs and that&#39;s a big no-no.&lt;/li&gt; &#xA; &lt;li&gt;Enable the Private Network profile type in Settings &amp;gt; Network and Internet &amp;gt; Ethernet. This is VERY important for Windows 11, otherwise you would be unable to connect even with the aforementioned firewall rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance issues?&lt;/h2&gt; &#xA;&lt;p&gt;Try enabling the No Blur Effect (Fast UI) mode on the User settings panel.&lt;/p&gt; &#xA;&lt;h2&gt;I like your project! How do I contribute?&lt;/h2&gt; &#xA;&lt;h3&gt;DO&#39;s&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Send pull requests&lt;/li&gt; &#xA; &lt;li&gt;Send feature suggestions and issue reports using established templates&lt;/li&gt; &#xA; &lt;li&gt;Read the readme file and built-in documentation before asking anything&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;DONT&#39;s&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Offer monetary donations&lt;/li&gt; &#xA; &lt;li&gt;Send bug reports without providing any context&lt;/li&gt; &#xA; &lt;li&gt;Ask the questions that were already answered numerous times&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Where can I find the old backgrounds?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re moving to 100% original content only policy, so old background images have been removed from this repository.&lt;/p&gt; &#xA;&lt;p&gt;You can find them archived here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://files.catbox.moe/1xevnc.zip&#34;&gt;https://files.catbox.moe/1xevnc.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;img width=&#34;400&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/18619528/228649245-8061c60f-63dc-488e-9325-f151b7a3ec2d.png&#34;&gt; &#xA;&lt;img width=&#34;400&#34; alt=&#34;image&#34; src=&#34;https://user-images.githubusercontent.com/18619528/228649856-fbdeef05-d727-4d5a-be80-266cbbc6b811.png&#34;&gt; &#xA;&lt;h2&gt;License and credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General Public License for more details.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;TAI Base by Humi: Unknown license&lt;/li&gt; &#xA; &lt;li&gt;Cohee&#39;s modifications and derived code: AGPL v3&lt;/li&gt; &#xA; &lt;li&gt;RossAscends&#39; additions: AGPL v3&lt;/li&gt; &#xA; &lt;li&gt;Portions of CncAnon&#39;s TavernAITurbo mod: Unknown license&lt;/li&gt; &#xA; &lt;li&gt;Waifu mode inspired by the work of PepperTaco (&lt;a href=&#34;https://github.com/peppertaco/Tavern/&#34;&gt;https://github.com/peppertaco/Tavern/&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Thanks Pygmalion University for being awesome testers and suggesting cool features!&lt;/li&gt; &#xA; &lt;li&gt;Thanks oobabooga for compiling presets for TextGen&lt;/li&gt; &#xA; &lt;li&gt;poe-api client adapted from &lt;a href=&#34;https://github.com/ading2210/poe-api&#34;&gt;https://github.com/ading2210/poe-api&lt;/a&gt; (GPL v3)&lt;/li&gt; &#xA; &lt;li&gt;GraphQL files for poe: &lt;a href=&#34;https://github.com/muharamdani/poe&#34;&gt;https://github.com/muharamdani/poe&lt;/a&gt; (ISC License)&lt;/li&gt; &#xA; &lt;li&gt;KoboldAI Presets from KAI Lite: &lt;a href=&#34;https://lite.koboldai.net/&#34;&gt;https://lite.koboldai.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Noto Sans font by Google (OFL license)&lt;/li&gt; &#xA; &lt;li&gt;Icon theme by Font Awesome &lt;a href=&#34;https://fontawesome.com&#34;&gt;https://fontawesome.com&lt;/a&gt; (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)&lt;/li&gt; &#xA; &lt;li&gt;AI Horde client library by ZeldaFan0225: &lt;a href=&#34;https://github.com/ZeldaFan0225/ai_horde&#34;&gt;https://github.com/ZeldaFan0225/ai_horde&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux startup script by AlpinDale&lt;/li&gt; &#xA; &lt;li&gt;Thanks paniphons for providing a FAQ document&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Mintplex-Labs/anything-llm</title>
    <updated>2023-06-11T01:38:00Z</updated>
    <id>tag:github.com,2023-06-11:/Mintplex-Labs/anything-llm</id>
    <link href="https://github.com/Mintplex-Labs/anything-llm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A full-stack application that turns any documents into an intelligent chatbot with a sleek UI and easier way to manage your workspaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ü§ñ AnythingLLM: A full-stack personalized AI assistant&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/tcarambat&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/https/twitter.com/tim.svg?style=social&amp;amp;label=Follow%20%40Timothy%20Carambat&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/6UyHPeGZAC&#34;&gt;&lt;img src=&#34;https://dcbadge.vercel.app/api/server/6UyHPeGZAC?compact=true&amp;amp;style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A full-stack application and tool suite that enables you to turn any document, resource, or piece of content into a piece of data that any LLM can use as reference during chatting. This application runs with very minimal overhead as by default the LLM and vectorDB are hosted remotely, but can be swapped for local instances. Currently this project supports &lt;a href=&#34;https://pinecone.io&#34;&gt;Pinecone&lt;/a&gt;, &lt;a href=&#34;https://trychroma.com&#34;&gt;ChromaDB&lt;/a&gt; &amp;amp; more for vector storage and &lt;a href=&#34;https://openai.com&#34;&gt;OpenAI&lt;/a&gt; for LLM/chatting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mintplex-Labs/anything-llm/master/images/screenshots/chat.png&#34; alt=&#34;Chatting&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Mintplex-Labs/anything-llm/master/images/screenshots/SCREENSHOTS.md&#34;&gt;view more screenshots&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Watch the demo!&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/0vZ69AIP_hM&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/0vZ69AIP_hM/maxresdefault.jpg&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Product Overview&lt;/h3&gt; &#xA;&lt;p&gt;AnythingLLM aims to be a full-stack application where you can use commercial off-the-shelf LLMs with Long-term-memory solutions or use popular open source LLM and vectorDB solutions.&lt;/p&gt; &#xA;&lt;p&gt;Anything LLM is a full-stack product that you can run locally as well as host remotely and be able to chat intelligently with any documents you provide it.&lt;/p&gt; &#xA;&lt;p&gt;AnythingLLM divides your documents into objects called &lt;code&gt;workspaces&lt;/code&gt;. A Workspace functions a lot like a thread, but with the addition of containerization of your documents. Workspaces can share documents, but they do not talk to each other so you can keep your context for each workspace clean.&lt;/p&gt; &#xA;&lt;p&gt;Some cool features of AnythingLLM&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Atomically manage documents to be used in long-term-memory from a simple UI&lt;/li&gt; &#xA; &lt;li&gt;Two chat modes &lt;code&gt;conversation&lt;/code&gt; and &lt;code&gt;query&lt;/code&gt;. Conversation retains previous questions and amendments. Query is simple QA against your documents&lt;/li&gt; &#xA; &lt;li&gt;Each chat response contains a citation that is linked to the original content&lt;/li&gt; &#xA; &lt;li&gt;Simple technology stack for fast iteration&lt;/li&gt; &#xA; &lt;li&gt;Fully capable of being hosted remotely&lt;/li&gt; &#xA; &lt;li&gt;&#34;Bring your own LLM&#34; model and vector solution. &lt;em&gt;still in progress&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extremely efficient cost-saving measures for managing very large documents. you&#39;ll never pay to embed a massive document or transcript more than once. 90% more cost effective than other LTM chatbots&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Technical Overview&lt;/h3&gt; &#xA;&lt;p&gt;This monorepo consists of three main sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;collector&lt;/code&gt;: Python tools that enable you to quickly convert online resources or local documents into LLM useable format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;frontend&lt;/code&gt;: A viteJS + React frontend that you can run to easily create and manage all your content the LLM can use.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;server&lt;/code&gt;: A nodeJS + express server to handle all the interactions and do all the vectorDB management and LLM interactions.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt; on your machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;python&lt;/code&gt; 3.8+ for running scripts in &lt;code&gt;collector/&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;access to an LLM like &lt;code&gt;GPT-3.5&lt;/code&gt;, &lt;code&gt;GPT-4&lt;/code&gt;*.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://pinecone.io&#34;&gt;Pinecone.io&lt;/a&gt; free account*. *you can use drop in replacements for these. This is just the easiest to get up and running fast. We support multiple vector database providers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;How to get started&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn setup&lt;/code&gt; from the project root directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This will fill in the required &lt;code&gt;.env&lt;/code&gt; files you&#39;ll need in each of the application sections. Go fill those out before proceeding or else things won&#39;t work right.&lt;/p&gt; &#xA;&lt;p&gt;Next, you will need some content to embed. This could be a Youtube Channel, Medium articles, local text files, word documents, and the list goes on. This is where you will use the &lt;code&gt;collector/&lt;/code&gt; part of the repo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintplex-Labs/anything-llm/master/collector/README.md&#34;&gt;Go set up and run collector scripts&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintplex-Labs/anything-llm/master/server/documents/DOCUMENTS.md&#34;&gt;Learn about documents&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Mintplex-Labs/anything-llm/master/server/documents/VECTOR_CACHE.md&#34;&gt;Learn about vector caching&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create issue&lt;/li&gt; &#xA; &lt;li&gt;create PR with branch name format of &lt;code&gt;&amp;lt;issue number&amp;gt;-&amp;lt;short name&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;yee haw let&#39;s merge&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>