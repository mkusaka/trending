<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-23T01:35:34Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>openspeedtest/Speed-Test</title>
    <updated>2024-01-23T01:35:34Z</updated>
    <id>tag:github.com,2024-01-23:/openspeedtest/Speed-Test</id>
    <link href="https://github.com/openspeedtest/Speed-Test" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SpeedTest by OpenSpeedTest™ is a Free and Open-Source HTML5 Network Performance Estimation Tool Written in Vanilla Javascript and only uses built-in Web APIs like XMLHttpRequest (XHR), HTML, CSS, JS, &amp; SVG. No Third-Party frameworks or libraries are Required. Started in 2011 and moved to OpenSpeedTest.com dedicated Project/Domain Name in 2013.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;strong&gt;&lt;a href=&#34;https://openspeedtest.com?Run&amp;amp;ref=Github&#34;&gt;SpeedTest by OpenSpeedTest™&lt;/a&gt;&lt;/strong&gt; - Free &amp;amp; Open-Source HTML5 Network Performance Estimation Tool.&lt;/h1&gt; &#xA;&lt;p&gt;SpeedTest by OpenSpeedTest™ is a Free and Open-Source HTML5 Network Performance Estimation Tool Written in Vanilla Javascript and only uses built-in Web APIs like &lt;code&gt;XMLHttpRequest&lt;/code&gt; &lt;code&gt;(XHR)&lt;/code&gt;, &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt;, &lt;code&gt;JS&lt;/code&gt;, &amp;amp; &lt;code&gt;SVG&lt;/code&gt;. No Third-Party frameworks or libraries are Required. All we need is a static web server like &lt;code&gt;NGINX&lt;/code&gt;. I started this project in 2011 and moved to OpenSpeedTest.com dedicated Project/Domain Name in 2013.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://go.openspeedtest.com/Server&#34; title=&#34;Download OpenSpeedTest-Server V2.1&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/10G-S.gif&#34; alt=&#34;Download OpenSpeedTest-Server V2.1&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/MicrosoftStore&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/Microsoft-Store-250x100.png&#34; alt=&#34;Download from the Microsoft Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/MacAppStore&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/Mac-App-Store-250x100.png&#34; alt=&#34;Download from the Mac App Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/iOS&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/App-Store-250x100.png&#34; alt=&#34;Download from the App Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/Android&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/GooglePlay-250x100.png&#34; alt=&#34;Download from the Google Play Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/snapcraft&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/SnapStore-250x100.png&#34; alt=&#34;Download from the Snap Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/docker&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/docker-250x100.png&#34; alt=&#34;Download from the Docker Hub&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/helm&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/Helm-Charts-250x100.png&#34; alt=&#34;Download from the Helm Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/Source&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/GitHub-250x100.png&#34; alt=&#34;Download from GitHub&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No client-side software or plugin is required. You can run a network speed test from any device with a &lt;a href=&#34;https://www.youtube.com/watch?v=9f-OM_WQ7Bw&amp;amp;list=PLt-deStxFJOMEAs2O1lJhscMNzcg9E3Po&amp;amp;index=1&#34;&gt;Web Browser that is IE10 or new.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://www.youtube.com/embed/Lq9dpMCM6kQ?autoplay=1&#34;&gt;&lt;img src=&#34;https://open.cachefly.net/assets/images/videos/Roberto-Jorge-Tech-yt.jpg&#34; alt=&#34;Video Tutorial by Roberto Jorge Tech&#34; width=&#34;48%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://www.youtube.com/embed/9NIHAmVkomk?autoplay=1&#34;&gt;&lt;img src=&#34;https://open.cachefly.net/assets/images/videos/lanpad-yt.jpg&#34; alt=&#34;Video Tutorial by LanPad&#34; width=&#34;48%&#34; style=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why OpenSpeedTest&lt;/h2&gt; &#xA;&lt;h3&gt;Secure by Design.&lt;/h3&gt; &#xA;&lt;p&gt;OpenSpeedTest contains Only &lt;code&gt;STATIC&lt;/code&gt; Files like &lt;code&gt;HTML&lt;/code&gt;,&lt;code&gt;CSS&lt;/code&gt; &amp;amp; &lt;code&gt;JS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;So you don&#39;t need to worry about Security Updates or Hidden Exploits that may compromise your secure environments.&lt;/p&gt; &#xA;&lt;h3&gt;Lightweight, High Performance.&lt;/h3&gt; &#xA;&lt;p&gt;OpenSpeedTest is written in Vanilla JavaScript. No Third-Party frameworks or libraries were used. SpeedTest script file size is under 8kB gzip. The unexpected side effect of using Vanilla JavaScript is High Performance.&lt;/p&gt; &#xA;&lt;h3&gt;Run a speed test from Any Device.&lt;/h3&gt; &#xA;&lt;p&gt;OpenSpeedTest will run on Any Web Browser that is IE10 or new.&lt;/p&gt; &#xA;&lt;h3&gt;Ready for Any Display Size and Resolution.&lt;/h3&gt; &#xA;&lt;p&gt;OpenSpeedTest User interface is written in SVG.&lt;/p&gt; &#xA;&lt;h1&gt;Create Your Own SpeedTest Server.&lt;/h1&gt; &#xA;&lt;h3&gt;Server Requirements :&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Nginx&lt;/code&gt;, &lt;code&gt;Apache&lt;/code&gt;, &lt;code&gt;IIS&lt;/code&gt;, &lt;code&gt;Express&lt;/code&gt;, or Any Web server that supports &lt;code&gt;HTTP/1.1&lt;/code&gt; or new.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Accept, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;, &lt;code&gt;HEAD&lt;/code&gt; &amp;amp; &lt;code&gt;OPTIONS&lt;/code&gt;, Response &lt;code&gt;200 OK&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Accept, &lt;code&gt;POST&lt;/code&gt; to Static Files, Response &lt;code&gt;200 OK&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;client_max_body_size&lt;/code&gt;, 35 Megabytes or more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Timeout greater than &lt;code&gt;60 seconds&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Disable &lt;code&gt;Access logs&lt;/code&gt; for Increasing server performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Improve &lt;code&gt;Time to First Byte&lt;/code&gt; (TTFB)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Warning! If you run it behind a &lt;strong&gt;&lt;a href=&#34;https://github.com/openspeedtest/Speed-Test/issues/4#issuecomment-1229157193&#34;&gt;Reverse Proxy&lt;/a&gt;&lt;/strong&gt;, you should increase the &lt;code&gt;post-body content length&lt;/code&gt; to 35 megabytes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Supports &lt;code&gt;HTTP2&lt;/code&gt; &amp;amp; &lt;code&gt;HTTP3&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;HTTP1.1&lt;/code&gt; is recommended for achieving maximum performance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/openspeedtest/Nginx-Configuration&#34;&gt;You Should Follow our Nginx Config.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Or, You can use OpenSpeedTest-Server.&lt;/h1&gt; &#xA;&lt;p&gt;OpenSpeedTest-Server is available for Windows, Mac, Linux, Android, iOS &amp;amp; Docker. &lt;a href=&#34;https://go.openspeedtest.com/Server&#34; title=&#34;Download OpenSpeedTest-Server V2.1&#34;&gt;&lt;img src=&#34;https://open.cachefly.net/assets/images/OSTV2-SS.png&#34; alt=&#34;Download OpenSpeedTest-Server V2.1&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fully Optimized and ready to use applications.&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/MicrosoftStore&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/Microsoft-Store-250x100.png&#34; alt=&#34;Download from the Microsoft Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/MacAppStore&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/Mac-App-Store-250x100.png&#34; alt=&#34;Download from the Mac App Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/iOS&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/App-Store-250x100.png&#34; alt=&#34;Download from the App Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/Android&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/GooglePlay-250x100.png&#34; alt=&#34;Download from the Google Play Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;https://go.openspeedtest.com/snapcraft&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/SnapStore-250x100.png&#34; alt=&#34;Download from the Snap Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/docker&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/docker-250x100.png&#34; alt=&#34;Download from the Docker Hub&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/helm&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/Helm-Charts-250x100.png&#34; alt=&#34;Download from the Helm Store&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt; &lt;a target=&#34;_blank&#34; href=&#34;http://go.openspeedtest.com/Source&#34;&gt;&lt;img src=&#34;https://github.com/openspeedtest/v2-Test/raw/main/images/GitHub-250x100.png&#34; alt=&#34;Download from GitHub&#34; width=&#34;24%&#34; style=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;New features:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stress Test. (Continuous Speed Test)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To enable the stress test. Pass &lt;code&gt;Stress&lt;/code&gt; or &lt;code&gt;S&lt;/code&gt; keyword as a URL parameter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Stress=Low&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After the &lt;code&gt;STRESS&lt;/code&gt; or &lt;code&gt;S&lt;/code&gt; keyword, you can specify the number of seconds you need to run the StressTest in seconds, or preset values such as &lt;code&gt;Low&lt;/code&gt;, &lt;code&gt;Medium&lt;/code&gt;, &lt;code&gt;High&lt;/code&gt;, &lt;code&gt;VeryHigh&lt;/code&gt;, &lt;code&gt;Extreme&lt;/code&gt;, &lt;code&gt;Day&lt;/code&gt;, and &lt;code&gt;Year&lt;/code&gt;. Will run a speed test for &lt;code&gt;300&lt;/code&gt;,&lt;code&gt;600&lt;/code&gt;,&lt;code&gt;900&lt;/code&gt;,&lt;code&gt;1800&lt;/code&gt;,&lt;code&gt;3600&lt;/code&gt;,&lt;code&gt;86400&lt;/code&gt;,&lt;code&gt;31557600&lt;/code&gt; seconds, respectively. Also, you can feed the first letter of each parameter and its values.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?S=L&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;S=L&lt;/code&gt; is the same as passing &lt;code&gt;Stress=low&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Or you can specify the number of seconds eg:&lt;code&gt;5000&lt;/code&gt; directly without any preset keywords.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Stress=5000&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run a speed test automatically&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Run a speed test automatically on page load.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Run&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a speed test automatically after a few seconds.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Run=10 or http://192.168.1.5?R=10&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass multiple keywords, and it&#39;s not &lt;code&gt;Case-Sensitive&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Run&amp;amp;Stress=300 OR http://192.168.1.5?R&amp;amp;S=300&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will start a speed test immediately and run for &lt;code&gt;300 seconds&lt;/code&gt; in each direction. That is 300 seconds for download and &lt;code&gt;300 seconds&lt;/code&gt; for upload.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Save results to a Database&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;Index.html&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;var saveData = true;&#xA;&#xA;var saveDataURL = &#34;//yourDatabase.Server.com:4500/save?data=&#34;;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Add multiple servers. The app will choose one with the least latency automatically.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Edit &lt;code&gt;Index.html&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;var openSpeedTestServerList = [&#xA;&#xA;{&#34;ServerName&#34;:&#34;Home-Earth&#34;, &#34;Download&#34;:&#34;/downloading&#34;, &#34;Upload&#34;:&#34;/upload&#34;, &#34;ServerIcon&#34;:&#34;DefaultIcon&#34;},&#xA;&#xA;{&#34;ServerName&#34;:&#34;Home-Mars&#34;, &#34;Download&#34;:&#34;/downloading&#34;, &#34;Upload&#34;:&#34;/upload&#34;, &#34;ServerIcon&#34;:&#34;DefaultIcon&#34;},&#xA;&#xA;{&#34;ServerName&#34;:&#34;Home-Moon&#34;, &#34;Download&#34;:&#34;/downloading&#34;, &#34;Upload&#34;:&#34;/upload&#34;, &#34;ServerIcon&#34;:&#34;DefaultIcon&#34;}&#xA;&#xA;];&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Disable or change Overhead Compensation factor.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?clean&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Overhead Compensation factor, This is browser based test, Many Unknowns. Currently 4%. That is within the margin of error.&lt;/p&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;Clean&lt;/code&gt; or &lt;code&gt;C&lt;/code&gt; as a URL Parameter and reset Overhead Compensation factor to Zero or set any value between 0 and 4. 1 = 1% to 4 = 4%.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Clean&lt;/code&gt; will not accept values above 4, so Compensation is limited to maximum 4%.&lt;/p&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Change the default limit of 6 parallel HTTP connections to the Server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?XHR=3 OR http://192.168.1.5?X=3&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Allow the user to Change the default limit of 6 parallel HTTP connections to the Server. &lt;code&gt;XHR&lt;/code&gt; will Accept values above 1 and max 32&lt;/p&gt; &#xA;&lt;p&gt;pass &lt;code&gt;XHR&lt;/code&gt; or &lt;code&gt;X&lt;/code&gt; as a URL Parameter.&lt;/p&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Select a different server to run a speed test.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Host=http://192.168.55.1:90 OR http://192.168.1.5?h=http://192.168.55.1:90&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass &lt;code&gt;Host&lt;/code&gt; or &lt;code&gt;H&lt;/code&gt; as a URL Parameter.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HOST&lt;/code&gt; will Accept only valid HTTP URLs like &lt;code&gt;http://192.168.1.10:3000&lt;/code&gt; or &lt;code&gt;https://yourHost.com&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt;Select and run one test at a time, &lt;code&gt;DOWNLOAD&lt;/code&gt;, &lt;code&gt;UPLOAD&lt;/code&gt;, or &lt;code&gt;PING&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Test=Upload OR http://192.168.1.5?T=U&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;TEST&lt;/code&gt; Allow the user to select and run one test at a time, Download, Upload, or Ping.&lt;/p&gt; &#xA;&lt;p&gt;Pass &lt;code&gt;Test&lt;/code&gt; or &lt;code&gt;T&lt;/code&gt; as a URL Parameter.&lt;/p&gt; &#xA;&lt;ol start=&#34;9&#34;&gt; &#xA; &lt;li&gt;Set a PingTimeout dynamically by passing &lt;code&gt;Out&lt;/code&gt; or &lt;code&gt;O&lt;/code&gt; as a URL Parameter&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Out=7000 OR http://192.168.1.5?O=7000&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Server not responded within 5 Seconds for any requests we send (&#39;pingSamples&#39; times)&lt;/p&gt; &#xA;&lt;p&gt;We will show &lt;code&gt;Network Error&lt;/code&gt;, You can change the limit here.&lt;/p&gt; &#xA;&lt;p&gt;In milliseconds, if you need to set &lt;code&gt;6 seconds&lt;/code&gt;. Change the value to &lt;code&gt;6000&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;10&#34;&gt; &#xA; &lt;li&gt;Set the Number of ping samples by adding &lt;code&gt;Ping&lt;/code&gt; or &lt;code&gt;P&lt;/code&gt; as a URL Parameter&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;http://192.168.1.5?Ping=500 OR http://192.168.1.5?P=500&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More samples = more accurate representation. &lt;code&gt;Ping = 500&lt;/code&gt; will send &lt;code&gt;501&lt;/code&gt; requests to server to find the accurate ping value. Take a look at index.html, you can set a custom ping sample size, threads, upload data size etc.&lt;/p&gt; &#xA;&lt;h2&gt;Self-hosted (On-Premise) / (Docker Image/Source Code)&lt;/h2&gt; &#xA;&lt;h3&gt;For Headless large-scale deployments.&lt;/h3&gt; &#xA;&lt;p&gt;You have two options here. If you need a custom deployment, use our source code along with a web server of your choice. I prefer Nginx, and you can find my &lt;a href=&#34;https://github.com/openspeedtest/Nginx-Configuration&#34;&gt;Nginx Configuration&lt;/a&gt; here. Or you can use our docker image. You can deploy it on your LAN/WAN with or without an active internet connection.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;This is docker implementation using nginxinc/nginx-unprivileged:stable-alpine. uses significantly fewer resources.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NGINX Docker image that runs NGINX as a non root, unprivileged user.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker install instructions:&lt;/h3&gt; &#xA;&lt;p&gt;Install Docker and run the following command!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;sudo docker run --restart=unless-stopped --name openspeedtest -d -p 3000:3000 -p 3001:3001 openspeedtest/latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or use docker-compose.yml&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#39;3.3&#39;&#xA;services:&#xA;    speedtest:&#xA;        restart: unless-stopped&#xA;        container_name: openspeedtest&#xA;        ports:&#xA;            - &#39;3000:3000&#39;&#xA;            - &#39;3001:3001&#39;&#xA;        image: openspeedtest/latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Warning! If you run it behind a &lt;strong&gt;&lt;a href=&#34;https://github.com/openspeedtest/Speed-Test/issues/4#issuecomment-1229157193&#34;&gt;Reverse Proxy&lt;/a&gt;&lt;/strong&gt;, you should increase the &lt;code&gt;post-body content length&lt;/code&gt; to 35 megabytes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/openspeedtest/Nginx-Configuration&#34;&gt;Follow our Nginx Config.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now open your browser and direct it to:&lt;/p&gt; &#xA;&lt;p&gt;A: For &lt;strong&gt;HTTP&lt;/strong&gt; use: &lt;code&gt;http://YOUR-SERVER-IP:3000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;B: For &lt;strong&gt;HTTPS&lt;/strong&gt; use: &lt;code&gt;https://YOUR-SERVER-IP:3001&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Container-Port for http is 3000&lt;/h4&gt; &#xA;&lt;p&gt;If you need to run this image on a different port for &lt;code&gt;HTTP&lt;/code&gt;, Eg: change to &lt;code&gt;80&lt;/code&gt; = &lt;code&gt;-p 80:3000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Container-Port for https is 3001&lt;/h4&gt; &#xA;&lt;p&gt;If you need to run this image on a different port for &lt;code&gt;HTTPS&lt;/code&gt;, Eg: change to &lt;code&gt;443&lt;/code&gt; = &lt;code&gt;-p 443:3001&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Setup Free LetsEncrypt SSL with Automatic Certificate Renewal&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PUBLIC IPV4 and/or IPV6 address.&lt;/li&gt; &#xA; &lt;li&gt;A domain name that resolves to speed test server&#39;s IP address.&lt;/li&gt; &#xA; &lt;li&gt;Email ID&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following command will generate a Let&#39;s Encrypt certificate for your domain name and configure a cron job to automatically renew the certificate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -e ENABLE_LETSENCRYPT=True -e DOMAIN_NAME=speedtest.yourdomain.com -e USER_EMAIL=you@yourdomain.pro --restart=unless-stopped --name openspeedtest -d -p 80:3000 -p 443:3001 openspeedtest/latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or use docker-compose.yml&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#39;3.3&#39;&#xA;services:&#xA;    speedtest:&#xA;        environment:&#xA;            - ENABLE_LETSENCRYPT=True&#xA;            - DOMAIN_NAME=speedtest.yourdomain.com&#xA;            - USER_EMAIL=you@yourdomain.pro&#xA;        restart: unless-stopped&#xA;        container_name: openspeedtest&#xA;        ports:&#xA;            - &#39;80:3000&#39;&#xA;            - &#39;443:3001&#39;&#xA;        image: openspeedtest/latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;How to Use Your Own Secure Sockets Layer (SSL) Certificate, Self-Signed or Paid?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Requirements&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Folder with your Certificate, Self-Signed or Paid.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rename .cet file and .key file to &lt;code&gt;nginx.crt&lt;/code&gt; &amp;amp; &lt;code&gt;nginx.key&lt;/code&gt;&lt;/p&gt; &lt;p&gt;The folder needs to contain:&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;nginx.crt&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;nginx.key&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo docker run --restart=unless-stopped --name openspeedtest -d -p 3000:3000 -p 3001:3001 openspeedtest/latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To mount a folder with your own SSL certificate to this Docker container, append the following line to the above command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;-v /${PATH-TO-YOUR-OWN-SSL-CERTIFICATE}:/etc/ssl/&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I am adding a folder with nginx.crt and nginx.key from my desktop by using the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#xA;sudo docker run -v /Users/vishnu/Desktop/docker/:/etc/ssl/ --restart=unless-stopped --name openspeedtest -d -p 3000:3000 -p 3001:3001 openspeedtest/latest&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Or use docker-compose.yml&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;version: &#39;3.3&#39;&#xA;services:&#xA;    speedtest:&#xA;        volumes:&#xA;            - &#39;/Users/vishnu/Desktop/docker/:/etc/ssl/&#39;&#xA;        restart: unless-stopped&#xA;        container_name: openspeedtest&#xA;        ports:&#xA;            - &#39;3000:3000&#39;&#xA;            - &#39;3001:3001&#39;&#xA;        image: openspeedtest/latest&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Configuration Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Container Port Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To enable port changes, set the &lt;code&gt;CHANGE_CONTAINER_PORTS&lt;/code&gt; environment variable to &lt;code&gt;&#34;True&#34;&lt;/code&gt; and provide appropriate values for the following variables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;CHANGE_CONTAINER_PORTS=True&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HTTP_PORT=3000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;HTTPS_PORT=3001&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set User&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;SET_USER=101&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only Allow &lt;code&gt;CORS Request&lt;/code&gt; from listed domains.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;ALLOW_ONLY=domain1.com;domain2.com;domain3.com&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;SET_SERVER_NAME&lt;/code&gt; Display the server name on the UI.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;SET_SERVER_NAME=HOME-NAS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Docker images run better on Linux Platforms, including your NAS. But if you install docker on macOS or Windows, you may see poor performance. I asked this on Docker forums, and they told me macOS and Windows support is for Development purposes only. For Production, you need to use any Linux Platform.&lt;/p&gt; &#xA;&lt;p&gt;The same Story goes for Windows NGINX. Nginx uses only one worker even if you specify n number of worker processes. They will show in Task Manager, but the system will only use one. I got this information directly from the Nginx website.&lt;/p&gt; &#xA;&lt;h2&gt;Why do you need to Create Your Own SpeedTest Server?&lt;/h2&gt; &#xA;&lt;p&gt;You can run OpenSpeedTest Server in your Home Lab, Office Server or Cloud Server. So that you or employees who work from home can run a speed test to your office and make sure they can run everything smoothly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Choosing between ISP1 &amp;amp; ISP2.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sometimes your ISP2 is Faster than ISP1 when you test your speed on popular speed test sites. But when you connect to your Home/Office/Cloud, that slower connection may perform better. The only way to find out is to run a speed test against your infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Troubleshooting network issues.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;It is common even when your Internet connection is working fine, but some of the devices in your network may experience trouble getting decent connectivity to the internet. The issue might be the wrong VLAN ID or Faulty Switch. If you run a Local network speed test, you can find and fix these issues easily.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before you add a repeater.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Most repeaters will reduce your network speed by 50%, so if you put it far away, it will perform worst, and if you put it too close, you will not get enough coverage if you run a Local Network speed test. Depending on the application requirements, you can decide exactly where you need to put your repeater.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Browsing experience.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Many useful browser extensions are out there that we all know and love. But some of them are really slowing you down for &lt;strong&gt;few seconds per page you visit&lt;/strong&gt;. You may see good performance when you test your network performance via File Transfer or Command-line utilities, but you may experience poor performance when browsing the internet. This is due to a bad browser configuration that including unwanted extensions installed. From my experience, only keep the one you are going to use every single day. Extension that you may use once in a while should be removed or disabled for maximum performance. If you see poor performance, try OpenSpeedTest from Private Window or Incognito Window. &lt;strong&gt;This tool can be used to check the browser performance and impact of Extensions on your browsing experience.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;No client-side software or plugin is required. You can run a network speed test from any device with a &lt;a href=&#34;https://www.youtube.com/watch?v=9f-OM_WQ7Bw&amp;amp;list=PLt-deStxFJOMEAs2O1lJhscMNzcg9E3Po&amp;amp;index=1&#34;&gt;Web Browser that is IE10 or new.&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Like this Project? Please &lt;strong&gt;Donate NOW &amp;amp; Keep us Alive&lt;/strong&gt; -&amp;gt; &lt;a href=&#34;https://go.openspeedtest.com/Donate&#34;&gt;https://go.openspeedtest.com/Donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2013 - 2023 OpenSpeedTest™&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sahandghavidel/mern-blog</title>
    <updated>2024-01-23T01:35:34Z</updated>
    <id>tag:github.com,2024-01-23:/sahandghavidel/mern-blog</id>
    <link href="https://github.com/sahandghavidel/mern-blog" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MERN blog using tailwind css&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>sindresorhus/execa</title>
    <updated>2024-01-23T01:35:34Z</updated>
    <id>tag:github.com,2024-01-23:/sindresorhus/execa</id>
    <link href="https://github.com/sindresorhus/execa" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Process execution for humans&lt;/p&gt;&lt;hr&gt;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;media/logo_dark.svg&#34;&gt; &#xA; &lt;img alt=&#34;execa logo&#34; src=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/media/logo.svg?sanitize=true&#34; width=&#34;400&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://codecov.io/gh/sindresorhus/execa&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/sindresorhus/execa/branch/main/graph/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Process execution for humans&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt; &lt;sup&gt; &lt;a href=&#34;https://github.com/sponsors/sindresorhus&#34;&gt;Sindre&#39;s open source work is supported by the community&lt;/a&gt; &lt;/sup&gt; &lt;/p&gt; &#xA; &lt;sup&gt;Special thanks to:&lt;/sup&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://transloadit.com?utm_source=sindresorhus&amp;amp;utm_medium=referral&amp;amp;utm_campaign=sponsorship&amp;amp;utm_content=execa&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source width=&#34;360&#34; media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://sindresorhus.com/assets/thanks/transloadit-logo-dark.svg&#34;&gt; &#xA;   &lt;source width=&#34;360&#34; media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://sindresorhus.com/assets/thanks/transloadit-logo.svg&#34;&gt; &#xA;   &lt;img width=&#34;360&#34; src=&#34;https://sindresorhus.com/assets/thanks/transloadit-logo.svg?sanitize=true&#34; alt=&#34;Transloadit logo&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Why&lt;/h2&gt; &#xA;&lt;p&gt;This package improves &lt;a href=&#34;https://nodejs.org/api/child_process.html&#34;&gt;&lt;code&gt;child_process&lt;/code&gt;&lt;/a&gt; methods with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execacommandcommand-options&#34;&gt;Promise interface&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#scripts-interface&#34;&gt;Scripts interface&lt;/a&gt;, like &lt;code&gt;zx&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Improved &lt;a href=&#34;https://github.com/IndigoUnited/node-cross-spawn#why&#34;&gt;Windows support&lt;/a&gt;, including &lt;a href=&#34;https://en.wikipedia.org/wiki/Shebang_(Unix)&#34;&gt;shebang&lt;/a&gt; binaries.&lt;/li&gt; &#xA; &lt;li&gt;Executes &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#preferlocal&#34;&gt;locally installed binaries&lt;/a&gt; without &lt;code&gt;npx&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#cleanup&#34;&gt;Cleans up&lt;/a&gt; child processes when the parent process ends.&lt;/li&gt; &#xA; &lt;li&gt;Redirect &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; from/to files, streams, iterables, strings, &lt;code&gt;Uint8Array&lt;/code&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md#object-mode&#34;&gt;objects&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md&#34;&gt;Transform&lt;/a&gt; &lt;code&gt;stdin&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt; with simple functions.&lt;/li&gt; &#xA; &lt;li&gt;Iterate over &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md#binary-data&#34;&gt;each text line&lt;/a&gt; output by the process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#optionsforcekillaftertimeout&#34;&gt;Graceful termination&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Get &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all&#34;&gt;interleaved output&lt;/a&gt; from &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; similar to what is printed on the terminal.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stripfinalnewline&#34;&gt;Strips the final newline&lt;/a&gt; from the output so you don&#39;t have to do &lt;code&gt;stdout.trim()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Convenience methods to pipe processes&#39; &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#input&#34;&gt;input&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-output-to-a-file&#34;&gt;output&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Can specify file and arguments &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execacommandcommand-options&#34;&gt;as a single string&lt;/a&gt; without a shell.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#verbose-mode&#34;&gt;Verbose mode&lt;/a&gt; for debugging.&lt;/li&gt; &#xA; &lt;li&gt;More descriptive errors.&lt;/li&gt; &#xA; &lt;li&gt;Higher max buffer: 100 MB instead of 1 MB.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install execa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Promise interface&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;const {stdout} = await execa(&#39;echo&#39;, [&#39;unicorns&#39;]);&#xA;console.log(stdout);&#xA;//=&amp;gt; &#39;unicorns&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scripts interface&lt;/h3&gt; &#xA;&lt;p&gt;For more information about Execa scripts, please see &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/scripts.md&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Basic&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {$} from &#39;execa&#39;;&#xA;&#xA;const branch = await $`git branch --show-current`;&#xA;await $`dep deploy --branch=${branch}`;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multiple arguments&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {$} from &#39;execa&#39;;&#xA;&#xA;const args = [&#39;unicorns&#39;, &#39;&amp;amp;&#39;, &#39;rainbows!&#39;];&#xA;const {stdout} = await $`echo ${args}`;&#xA;console.log(stdout);&#xA;//=&amp;gt; &#39;unicorns &amp;amp; rainbows!&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;With options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {$} from &#39;execa&#39;;&#xA;&#xA;await $({stdio: &#39;inherit&#39;})`echo unicorns`;&#xA;//=&amp;gt; &#39;unicorns&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Shared options&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {$} from &#39;execa&#39;;&#xA;&#xA;const $$ = $({stdio: &#39;inherit&#39;});&#xA;&#xA;await $$`echo unicorns`;&#xA;//=&amp;gt; &#39;unicorns&#39;&#xA;&#xA;await $$`echo rainbows`;&#xA;//=&amp;gt; &#39;rainbows&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Verbose mode&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;&amp;gt; node file.js&#xA;unicorns&#xA;rainbows&#xA;&#xA;&amp;gt; NODE_DEBUG=execa node file.js&#xA;[16:50:03.305] echo unicorns&#xA;unicorns&#xA;[16:50:03.308] echo rainbows&#xA;rainbows&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Input/output&lt;/h3&gt; &#xA;&lt;h4&gt;Redirect output to a file&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;// Similar to `echo unicorns &amp;gt; stdout.txt` in Bash&#xA;await execa(&#39;echo&#39;, [&#39;unicorns&#39;]).pipeStdout(&#39;stdout.txt&#39;);&#xA;&#xA;// Similar to `echo unicorns 2&amp;gt; stdout.txt` in Bash&#xA;await execa(&#39;echo&#39;, [&#39;unicorns&#39;]).pipeStderr(&#39;stderr.txt&#39;);&#xA;&#xA;// Similar to `echo unicorns &amp;amp;&amp;gt; stdout.txt` in Bash&#xA;await execa(&#39;echo&#39;, [&#39;unicorns&#39;], {all: true}).pipeAll(&#39;all.txt&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Redirect input from a file&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;// Similar to `cat &amp;lt; stdin.txt` in Bash&#xA;const {stdout} = await execa(&#39;cat&#39;, {inputFile: &#39;stdin.txt&#39;});&#xA;console.log(stdout);&#xA;//=&amp;gt; &#39;unicorns&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Save and pipe output from a child process&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;const {stdout} = await execa(&#39;echo&#39;, [&#39;unicorns&#39;]).pipeStdout(process.stdout);&#xA;// Prints `unicorns`&#xA;console.log(stdout);&#xA;// Also returns &#39;unicorns&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Pipe multiple processes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;// Similar to `echo unicorns | cat` in Bash&#xA;const {stdout} = await execa(&#39;echo&#39;, [&#39;unicorns&#39;]).pipeStdout(execa(&#39;cat&#39;));&#xA;console.log(stdout);&#xA;//=&amp;gt; &#39;unicorns&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling Errors&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;// Catching an error&#xA;try {&#xA;&#x9;await execa(&#39;unknown&#39;, [&#39;command&#39;]);&#xA;} catch (error) {&#xA;&#x9;console.log(error);&#xA;&#x9;/*&#xA;&#x9;{&#xA;&#x9;&#x9;message: &#39;Command failed with ENOENT: unknown command spawn unknown ENOENT&#39;,&#xA;&#x9;&#x9;errno: -2,&#xA;&#x9;&#x9;code: &#39;ENOENT&#39;,&#xA;&#x9;&#x9;syscall: &#39;spawn unknown&#39;,&#xA;&#x9;&#x9;path: &#39;unknown&#39;,&#xA;&#x9;&#x9;spawnargs: [&#39;command&#39;],&#xA;&#x9;&#x9;originalMessage: &#39;spawn unknown ENOENT&#39;,&#xA;&#x9;&#x9;shortMessage: &#39;Command failed with ENOENT: unknown command spawn unknown ENOENT&#39;,&#xA;&#x9;&#x9;command: &#39;unknown command&#39;,&#xA;&#x9;&#x9;escapedCommand: &#39;unknown command&#39;,&#xA;&#x9;&#x9;stdout: &#39;&#39;,&#xA;&#x9;&#x9;stderr: &#39;&#39;,&#xA;&#x9;&#x9;failed: true,&#xA;&#x9;&#x9;timedOut: false,&#xA;&#x9;&#x9;isCanceled: false,&#xA;&#x9;&#x9;isTerminated: false&#xA;&#x9;}&#xA;&#x9;*/&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Graceful termination&lt;/h3&gt; &#xA;&lt;p&gt;Using SIGTERM, and after 2 seconds, kill it with SIGKILL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const subprocess = execa(&#39;node&#39;);&#xA;&#xA;setTimeout(() =&amp;gt; {&#xA;&#x9;subprocess.kill(&#39;SIGTERM&#39;, {&#xA;&#x9;&#x9;forceKillAfterTimeout: 2000&#xA;&#x9;});&#xA;}, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;h4&gt;execa(file, arguments?, options?)&lt;/h4&gt; &#xA;&lt;p&gt;Executes a command using &lt;code&gt;file ...arguments&lt;/code&gt;. &lt;code&gt;file&lt;/code&gt; is a string or a file URL. &lt;code&gt;arguments&lt;/code&gt; are an array of strings. Returns a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childprocess&#34;&gt;&lt;code&gt;childProcess&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Arguments are &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#shell-syntax&#34;&gt;automatically escaped&lt;/a&gt;. They can contain any character, including spaces.&lt;/p&gt; &#xA;&lt;p&gt;This is the preferred method when executing single commands.&lt;/p&gt; &#xA;&lt;h4&gt;execaNode(scriptPath, arguments?, options?)&lt;/h4&gt; &#xA;&lt;p&gt;Executes a Node.js file using &lt;code&gt;node scriptPath ...arguments&lt;/code&gt;. &lt;code&gt;file&lt;/code&gt; is a string or a file URL. &lt;code&gt;arguments&lt;/code&gt; are an array of strings. Returns a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childprocess&#34;&gt;&lt;code&gt;childProcess&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Arguments are &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#shell-syntax&#34;&gt;automatically escaped&lt;/a&gt;. They can contain any character, including spaces.&lt;/p&gt; &#xA;&lt;p&gt;This is the preferred method when executing Node.js files.&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_child_process_fork_modulepath_args_options&#34;&gt;&lt;code&gt;child_process#fork()&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the current Node version and options are used. This can be overridden using the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#nodepath-for-node-only&#34;&gt;&lt;code&gt;nodePath&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#nodeoptions-for-node-only&#34;&gt;&lt;code&gt;nodeOptions&lt;/code&gt;&lt;/a&gt; options.&lt;/li&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#shell&#34;&gt;&lt;code&gt;shell&lt;/code&gt;&lt;/a&gt; option cannot be used&lt;/li&gt; &#xA; &lt;li&gt;an extra channel &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;&lt;code&gt;ipc&lt;/code&gt;&lt;/a&gt; is passed to &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio-1&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;$`command`&lt;/h4&gt; &#xA;&lt;p&gt;Executes a command. The &lt;code&gt;command&lt;/code&gt; string includes both the &lt;code&gt;file&lt;/code&gt; and its &lt;code&gt;arguments&lt;/code&gt;. Returns a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childprocess&#34;&gt;&lt;code&gt;childProcess&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Arguments are &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#shell-syntax&#34;&gt;automatically escaped&lt;/a&gt;. They can contain any character, but spaces must use &lt;code&gt;${}&lt;/code&gt; like &lt;code&gt;$`echo ${&#39;has space&#39;}`&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is the preferred method when executing multiple commands in a script file.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;command&lt;/code&gt; string can inject any &lt;code&gt;${value}&lt;/code&gt; with the following types: string, number, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childprocess&#34;&gt;&lt;code&gt;childProcess&lt;/code&gt;&lt;/a&gt; or an array of those types. For example: &lt;code&gt;$`echo one ${&#39;two&#39;} ${3} ${[&#39;four&#39;, &#39;five&#39;]}`&lt;/code&gt;. For &lt;code&gt;${childProcess}&lt;/code&gt;, the process&#39;s &lt;code&gt;stdout&lt;/code&gt; is used.&lt;/p&gt; &#xA;&lt;p&gt;For more information, please see &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#scripts-interface&#34;&gt;this section&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/scripts.md&#34;&gt;this page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;$(options)&lt;/h4&gt; &#xA;&lt;p&gt;Returns a new instance of &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#command&#34;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt; but with different default &lt;code&gt;options&lt;/code&gt;. Consecutive calls are merged to previous ones.&lt;/p&gt; &#xA;&lt;p&gt;This can be used to either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Set options for a specific command: &lt;code&gt;$(options)`command`&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Share options for multiple commands: &lt;code&gt;const $$ = $(options); $$`command`; $$`otherCommand`;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;execaCommand(command, options?)&lt;/h4&gt; &#xA;&lt;p&gt;Executes a command. The &lt;code&gt;command&lt;/code&gt; string includes both the &lt;code&gt;file&lt;/code&gt; and its &lt;code&gt;arguments&lt;/code&gt;. Returns a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childprocess&#34;&gt;&lt;code&gt;childProcess&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Arguments are &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#shell-syntax&#34;&gt;automatically escaped&lt;/a&gt;. They can contain any character, but spaces must be escaped with a backslash like &lt;code&gt;execaCommand(&#39;echo has\\ space&#39;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is the preferred method when executing a user-supplied &lt;code&gt;command&lt;/code&gt; string, such as in a REPL.&lt;/p&gt; &#xA;&lt;h3&gt;execaSync(file, arguments?, options?)&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execacommandcommand-options&#34;&gt;&lt;code&gt;execa()&lt;/code&gt;&lt;/a&gt; but synchronous.&lt;/p&gt; &#xA;&lt;p&gt;Cannot use the following options: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-2&#34;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#cleanup&#34;&gt;&lt;code&gt;cleanup&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#buffer&#34;&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#detached&#34;&gt;&lt;code&gt;detached&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#serialization&#34;&gt;&lt;code&gt;serialization&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#signal&#34;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt;. Also, the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio-1&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#input&#34;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; options cannot be an array, an iterable or a web stream. Node.js streams &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-a-nodejs-stream-fromto-stdinstdoutstderr&#34;&gt;must have a file descriptor&lt;/a&gt; unless the &lt;code&gt;input&lt;/code&gt; option is used.&lt;/p&gt; &#xA;&lt;p&gt;Returns or throws a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childProcessResult&#34;&gt;&lt;code&gt;childProcessResult&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;$.sync`command`&lt;/h3&gt; &#xA;&lt;h3&gt;$.s`command`&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#command&#34;&gt;$`command`&lt;/a&gt; but synchronous.&lt;/p&gt; &#xA;&lt;p&gt;Cannot use the following options: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-2&#34;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#cleanup&#34;&gt;&lt;code&gt;cleanup&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#buffer&#34;&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#detached&#34;&gt;&lt;code&gt;detached&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#serialization&#34;&gt;&lt;code&gt;serialization&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#signal&#34;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt;. Also, the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio-1&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#input&#34;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; options cannot be an array, an iterable or a web stream. Node.js streams &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-a-nodejs-stream-fromto-stdinstdoutstderr&#34;&gt;must have a file descriptor&lt;/a&gt; unless the &lt;code&gt;input&lt;/code&gt; option is used.&lt;/p&gt; &#xA;&lt;p&gt;Returns or throws a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childProcessResult&#34;&gt;&lt;code&gt;childProcessResult&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;execaCommandSync(command, options?)&lt;/h3&gt; &#xA;&lt;p&gt;Same as &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execacommand-command-options&#34;&gt;&lt;code&gt;execaCommand()&lt;/code&gt;&lt;/a&gt; but synchronous.&lt;/p&gt; &#xA;&lt;p&gt;Cannot use the following options: &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-2&#34;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#cleanup&#34;&gt;&lt;code&gt;cleanup&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#buffer&#34;&gt;&lt;code&gt;buffer&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#detached&#34;&gt;&lt;code&gt;detached&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#serialization&#34;&gt;&lt;code&gt;serialization&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#signal&#34;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt;. Also, the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio-1&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#input&#34;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; options cannot be an array, an iterable or a web stream. Node.js streams &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-a-nodejs-stream-fromto-stdinstdoutstderr&#34;&gt;must have a file descriptor&lt;/a&gt; unless the &lt;code&gt;input&lt;/code&gt; option is used.&lt;/p&gt; &#xA;&lt;p&gt;Returns or throws a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childProcessResult&#34;&gt;&lt;code&gt;childProcessResult&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Shell syntax&lt;/h3&gt; &#xA;&lt;p&gt;For all the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#methods&#34;&gt;methods above&lt;/a&gt;, no shell interpreter (Bash, cmd.exe, etc.) is used unless the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#shell&#34;&gt;&lt;code&gt;shell&lt;/code&gt; option&lt;/a&gt; is set. This means shell-specific characters and expressions (&lt;code&gt;$variable&lt;/code&gt;, &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;, &lt;code&gt;||&lt;/code&gt;, &lt;code&gt;;&lt;/code&gt;, &lt;code&gt;|&lt;/code&gt;, etc.) have no special meaning and do not need to be escaped.&lt;/p&gt; &#xA;&lt;h3&gt;childProcess&lt;/h3&gt; &#xA;&lt;p&gt;The return value of all &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#methods&#34;&gt;asynchronous methods&lt;/a&gt; is both:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a &lt;code&gt;Promise&lt;/code&gt; resolving or rejecting with a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childProcessResult&#34;&gt;&lt;code&gt;childProcessResult&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_class_childprocess&#34;&gt;&lt;code&gt;child_process&lt;/code&gt; instance&lt;/a&gt; with the following additional methods and properties.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;kill(signal?, options?)&lt;/h4&gt; &#xA;&lt;p&gt;Same as the original &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_subprocess_kill_signal&#34;&gt;&lt;code&gt;child_process#kill()&lt;/code&gt;&lt;/a&gt; except: if &lt;code&gt;signal&lt;/code&gt; is &lt;code&gt;SIGTERM&lt;/code&gt; (the default value) and the child process is not terminated after 5 seconds, force it by sending &lt;code&gt;SIGKILL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that this graceful termination does not work on Windows, because Windows &lt;a href=&#34;https://nodejs.org/api/process.html#process_signal_events&#34;&gt;doesn&#39;t support signals&lt;/a&gt; (&lt;code&gt;SIGKILL&lt;/code&gt; and &lt;code&gt;SIGTERM&lt;/code&gt; has the same effect of force-killing the process immediately.) If you want to achieve graceful termination on Windows, you have to use other means, such as &lt;a href=&#34;https://github.com/sindresorhus/taskkill&#34;&gt;&lt;code&gt;taskkill&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;options.forceKillAfterTimeout&lt;/h5&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number | false&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;5000&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Milliseconds to wait for the child process to terminate before sending &lt;code&gt;SIGKILL&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Can be disabled with &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;all&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;ReadableStream | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Stream &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#ensuring-all-output-is-interleaved&#34;&gt;combining/interleaving&lt;/a&gt; &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_subprocess_stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_subprocess_stderr&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;code&gt;undefined&lt;/code&gt; if either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-2&#34;&gt;&lt;code&gt;all&lt;/code&gt; option&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt; (the default value)&lt;/li&gt; &#xA; &lt;li&gt;both &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; options are set to &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;, &lt;code&gt;&#39;ipc&#39;&lt;/code&gt;, &lt;code&gt;&#39;ignore&#39;&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt; or &lt;code&gt;integer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;pipeStdout(target)&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/stream.html#readablepipedestination-options&#34;&gt;Pipe&lt;/a&gt; the child process&#39;s &lt;code&gt;stdout&lt;/code&gt; to &lt;code&gt;target&lt;/code&gt;, which can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Another &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#pipe-multiple-processes&#34;&gt;&lt;code&gt;execa()&lt;/code&gt; return value&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#save-and-pipe-output-from-a-child-process&#34;&gt;writable stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-output-to-a-file&#34;&gt;file path string&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If the &lt;code&gt;target&lt;/code&gt; is another &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execacommandcommand-options&#34;&gt;&lt;code&gt;execa()&lt;/code&gt; return value&lt;/a&gt;, it is returned. Otherwise, the original &lt;code&gt;execa()&lt;/code&gt; return value is returned. This allows chaining &lt;code&gt;pipeStdout()&lt;/code&gt; then &lt;code&gt;await&lt;/code&gt;ing the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#childprocessresult&#34;&gt;final result&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt; option&lt;/a&gt; must be kept as &lt;code&gt;pipe&lt;/code&gt;, its default value.&lt;/p&gt; &#xA;&lt;h4&gt;pipeStderr(target)&lt;/h4&gt; &#xA;&lt;p&gt;Like &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#pipestdouttarget&#34;&gt;&lt;code&gt;pipeStdout()&lt;/code&gt;&lt;/a&gt; but piping the child process&#39;s &lt;code&gt;stderr&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt; option&lt;/a&gt; must be kept as &lt;code&gt;pipe&lt;/code&gt;, its default value.&lt;/p&gt; &#xA;&lt;h4&gt;pipeAll(target)&lt;/h4&gt; &#xA;&lt;p&gt;Combines both &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#pipestdouttarget&#34;&gt;&lt;code&gt;pipeStdout()&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#pipestderrtarget&#34;&gt;&lt;code&gt;pipeStderr()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Either the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt; option&lt;/a&gt; or the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt; option&lt;/a&gt; must be kept as &lt;code&gt;pipe&lt;/code&gt;, their default value. Also, the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-2&#34;&gt;&lt;code&gt;all&lt;/code&gt; option&lt;/a&gt; must be set to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;childProcessResult&lt;/h3&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;object&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Result of a child process execution. On success this is a plain object. On failure this is also an &lt;code&gt;Error&lt;/code&gt; instance.&lt;/p&gt; &#xA;&lt;p&gt;The child process &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#failed&#34;&gt;fails&lt;/a&gt; when:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;its &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#exitcode&#34;&gt;exit code&lt;/a&gt; is not &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;it was &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#isterminated&#34;&gt;terminated&lt;/a&gt; with a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#signal&#34;&gt;signal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#timedout&#34;&gt;timing out&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#iscanceled&#34;&gt;being canceled&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;there&#39;s not enough memory or there are already too many child processes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;command&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The file and arguments that were run, for logging purposes.&lt;/p&gt; &#xA;&lt;p&gt;This is not escaped and should not be executed directly as a process, including using &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execafile-arguments-options&#34;&gt;&lt;code&gt;execa()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execacommandcommand-options&#34;&gt;&lt;code&gt;execaCommand()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;escapedCommand&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Same as &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#command-1&#34;&gt;&lt;code&gt;command&lt;/code&gt;&lt;/a&gt; but escaped.&lt;/p&gt; &#xA;&lt;p&gt;This is meant to be copy and pasted into a shell, for debugging purposes. Since the escaping is fairly basic, this should not be executed directly as a process, including using &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execafile-arguments-options&#34;&gt;&lt;code&gt;execa()&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execacommandcommand-options&#34;&gt;&lt;code&gt;execaCommand()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;exitCode&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The numeric exit code of the process that was run.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;code&gt;undefined&lt;/code&gt; when the process could not be spawned or was terminated by a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#signal-1&#34;&gt;signal&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;stdout&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | Uint8Array | unknown[] | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output of the process on &lt;code&gt;stdout&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;code&gt;undefined&lt;/code&gt; if the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; option is set to &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;, &lt;code&gt;&#39;ipc&#39;&lt;/code&gt;, &lt;code&gt;&#39;ignore&#39;&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt; or &lt;code&gt;integer&lt;/code&gt;&lt;/a&gt;. This is an array if the &lt;code&gt;stdout&lt;/code&gt; option is a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md#object-mode&#34;&gt;transform in object mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;stderr&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | Uint8Array | unknown[] | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output of the process on &lt;code&gt;stderr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;code&gt;undefined&lt;/code&gt; if the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; option is set to &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;, &lt;code&gt;&#39;ipc&#39;&lt;/code&gt;, &lt;code&gt;&#39;ignore&#39;&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt; or &lt;code&gt;integer&lt;/code&gt;&lt;/a&gt;. This is an array if the &lt;code&gt;stderr&lt;/code&gt; option is a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md#object-mode&#34;&gt;transform in object mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;all&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | Uint8Array | unknown[] | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output of the process with &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#ensuring-all-output-is-interleaved&#34;&gt;interleaved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;code&gt;undefined&lt;/code&gt; if either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-2&#34;&gt;&lt;code&gt;all&lt;/code&gt; option&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt; (the default value)&lt;/li&gt; &#xA; &lt;li&gt;both &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; options are set to &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;, &lt;code&gt;&#39;ipc&#39;&lt;/code&gt;, &lt;code&gt;&#39;ignore&#39;&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt; or &lt;code&gt;integer&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This is an array if either the &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt; option is a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md#object-mode&#34;&gt;transform in object mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;stdio&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;Array&amp;lt;string | Uint8Array | unknown[] | undefined&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The output of the process on &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio-1&#34;&gt;other file descriptors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Items are &lt;code&gt;undefined&lt;/code&gt; when their corresponding &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio-1&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt; option is set to &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;, &lt;code&gt;&#39;ipc&#39;&lt;/code&gt;, &lt;code&gt;&#39;ignore&#39;&lt;/code&gt;, &lt;code&gt;Stream&lt;/code&gt; or &lt;code&gt;integer&lt;/code&gt;&lt;/a&gt;. Items are arrays when their corresponding &lt;code&gt;stdio&lt;/code&gt; option is a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md#object-mode&#34;&gt;transform in object mode&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;failed&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whether the process failed to run.&lt;/p&gt; &#xA;&lt;h4&gt;timedOut&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whether the process timed out.&lt;/p&gt; &#xA;&lt;h4&gt;isCanceled&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whether the process was canceled using the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#signal-1&#34;&gt;&lt;code&gt;signal&lt;/code&gt;&lt;/a&gt; option.&lt;/p&gt; &#xA;&lt;h4&gt;isTerminated&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Whether the process was terminated using either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#killsignal-options&#34;&gt;&lt;code&gt;childProcess.kill()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A signal sent by another process. This case is &lt;a href=&#34;https://nodejs.org/api/process.html#signal-events&#34;&gt;not supported on Windows&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;signal&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The name of the signal (like &lt;code&gt;SIGFPE&lt;/code&gt;) that terminated the process using either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#killsignal-options&#34;&gt;&lt;code&gt;childProcess.kill()&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A signal sent by another process. This case is &lt;a href=&#34;https://nodejs.org/api/process.html#signal-events&#34;&gt;not supported on Windows&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If a signal terminated the process, this property is defined and included in the error message. Otherwise it is &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;signalDescription&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;A human-friendly description of the signal that was used to terminate the process. For example, &lt;code&gt;Floating point arithmetic error&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a signal terminated the process, this property is defined and included in the error message. Otherwise it is &lt;code&gt;undefined&lt;/code&gt;. It is also &lt;code&gt;undefined&lt;/code&gt; when the signal is very uncommon which should seldomly happen.&lt;/p&gt; &#xA;&lt;h4&gt;cwd&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cwd&lt;/code&gt; of the command if provided in the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#cwd-1&#34;&gt;command options&lt;/a&gt;. Otherwise it is &lt;code&gt;process.cwd()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;message&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Error message when the child process failed to run. In addition to the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#originalMessage&#34;&gt;underlying error message&lt;/a&gt;, it also contains some information related to why the child process errored.&lt;/p&gt; &#xA;&lt;p&gt;The child process &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and other &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio&#34;&gt;file descriptors&#39; output&lt;/a&gt; are appended to the end, separated with newlines and not interleaved.&lt;/p&gt; &#xA;&lt;h4&gt;shortMessage&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the same as the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#message&#34;&gt;&lt;code&gt;message&lt;/code&gt; property&lt;/a&gt; except it does not include the child process &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;originalMessage&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | undefined&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Original error message. This is the same as the &lt;code&gt;message&lt;/code&gt; property excluding the child process &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt; and some additional information added by Execa.&lt;/p&gt; &#xA;&lt;p&gt;This is &lt;code&gt;undefined&lt;/code&gt; unless the child process exited due to an &lt;code&gt;error&lt;/code&gt; event or a timeout.&lt;/p&gt; &#xA;&lt;h3&gt;options&lt;/h3&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;object&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;cleanup&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Kill the spawned process when the parent process exits unless either: - the spawned process is &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_detached&#34;&gt;&lt;code&gt;detached&lt;/code&gt;&lt;/a&gt; - the parent process is terminated abruptly, for example, with &lt;code&gt;SIGKILL&lt;/code&gt; as opposed to &lt;code&gt;SIGTERM&lt;/code&gt; or a normal exit&lt;/p&gt; &#xA;&lt;h4&gt;preferLocal&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt; with &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#command&#34;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;false&lt;/code&gt; otherwise&lt;/p&gt; &#xA;&lt;p&gt;Prefer locally installed binaries when looking for a binary to execute.&lt;br&gt; If you &lt;code&gt;$ npm install foo&lt;/code&gt;, you can then &lt;code&gt;execa(&#39;foo&#39;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;localDir&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | URL&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.cwd()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Preferred path to find locally installed binaries in (use with &lt;code&gt;preferLocal&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;execPath&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | URL&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.execPath&lt;/code&gt; (Current Node.js executable)&lt;/p&gt; &#xA;&lt;p&gt;Path to the Node.js executable to use in child processes.&lt;/p&gt; &#xA;&lt;p&gt;This can be either an absolute path or a path relative to the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#cwd&#34;&gt;&lt;code&gt;cwd&lt;/code&gt; option&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Requires &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#preferlocal&#34;&gt;&lt;code&gt;preferLocal&lt;/code&gt;&lt;/a&gt; to be &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, this can be used together with &lt;a href=&#34;https://github.com/ehmicky/get-node&#34;&gt;&lt;code&gt;get-node&lt;/code&gt;&lt;/a&gt; to run a specific Node.js version in a child process.&lt;/p&gt; &#xA;&lt;h4&gt;buffer&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Buffer the output from the spawned process. When set to &lt;code&gt;false&lt;/code&gt;, you must read the output of &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; (or &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all&#34;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt; if the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-2&#34;&gt;&lt;code&gt;all&lt;/code&gt;&lt;/a&gt; option is &lt;code&gt;true&lt;/code&gt;). Otherwise the returned promise will not be resolved/rejected.&lt;/p&gt; &#xA;&lt;p&gt;If the spawned process fails, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;error.stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;error.stderr&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all&#34;&gt;&lt;code&gt;error.all&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio&#34;&gt;&lt;code&gt;error.stdio&lt;/code&gt;&lt;/a&gt; will contain the buffered data.&lt;/p&gt; &#xA;&lt;h4&gt;input&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | Uint8Array | stream.Readable&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Write some input to the child process&#39; &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#inputfile&#34;&gt;&lt;code&gt;inputFile&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt; options.&lt;/p&gt; &#xA;&lt;h4&gt;inputFile&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | URL&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Use a file as input to the child process&#39; &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#input&#34;&gt;&lt;code&gt;input&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt; options.&lt;/p&gt; &#xA;&lt;h4&gt;stdin&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | number | stream.Readable | ReadableStream | URL | Uint8Array | Iterable&amp;lt;string | Uint8Array&amp;gt; | AsyncIterable&amp;lt;string | Uint8Array&amp;gt; | AsyncGeneratorFunction&amp;lt;string | Uint8Array&amp;gt;&lt;/code&gt; (or a tuple of those types)&lt;br&gt; Default: &lt;code&gt;inherit&lt;/code&gt; with &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#command&#34;&gt;&lt;code&gt;$&lt;/code&gt;&lt;/a&gt;, &lt;code&gt;pipe&lt;/code&gt; otherwise&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;How to setup&lt;/a&gt; the child process&#39; standard input. This can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;pipe&#39;&lt;/code&gt;: Sets &lt;a href=&#34;https://nodejs.org/api/child_process.html#subprocessstdin&#34;&gt;&lt;code&gt;childProcess.stdin&lt;/code&gt;&lt;/a&gt; stream.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;overlapped&#39;&lt;/code&gt;: Like &lt;code&gt;&#39;pipe&#39;&lt;/code&gt; but asynchronous on Windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;ignore&#39;&lt;/code&gt;: Do not use &lt;code&gt;stdin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;ipc&#39;&lt;/code&gt;: Sets an &lt;a href=&#34;https://nodejs.org/api/child_process.html#subprocesssendmessage-sendhandle-options-callback&#34;&gt;IPC channel&lt;/a&gt;. You can also use &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execanodescriptpath-arguments-options&#34;&gt;&lt;code&gt;execaNode()&lt;/code&gt;&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;: Re-use the current process&#39; &lt;code&gt;stdin&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;an integer: Re-use a specific file descriptor from the current process.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-a-nodejs-stream-fromto-stdinstdoutstderr&#34;&gt;Node.js &lt;code&gt;Readable&lt;/code&gt; stream&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{ file: &#39;path&#39; }&lt;/code&gt; object.&lt;/li&gt; &#xA; &lt;li&gt;a file URL.&lt;/li&gt; &#xA; &lt;li&gt;a web &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&#34;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol&#34;&gt;&lt;code&gt;Iterable&lt;/code&gt;&lt;/a&gt; or an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_async_iterator_and_async_iterable_protocols&#34;&gt;&lt;code&gt;AsyncIterable&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;an &lt;code&gt;Uint8Array&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This can be an &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-stdinstdoutstderr-to-multiple-destinations&#34;&gt;array of values&lt;/a&gt; such as &lt;code&gt;[&#39;inherit&#39;, &#39;pipe&#39;]&lt;/code&gt; or &lt;code&gt;[filePath, &#39;pipe&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can also be an async generator function to transform the input. &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;stdout&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | number | stream.Writable | WritableStream | URL | AsyncGeneratorFunction&amp;lt;string | Uint8Array&amp;gt;&lt;/code&gt; (or a tuple of those types)&lt;br&gt; Default: &lt;code&gt;pipe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;How to setup&lt;/a&gt; the child process&#39; standard output. This can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;pipe&#39;&lt;/code&gt;: Sets &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;childProcessResult.stdout&lt;/code&gt;&lt;/a&gt; (as a string or &lt;code&gt;Uint8Array&lt;/code&gt;) and &lt;a href=&#34;https://nodejs.org/api/child_process.html#subprocessstdout&#34;&gt;&lt;code&gt;childProcess.stdout&lt;/code&gt;&lt;/a&gt; (as a stream).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;overlapped&#39;&lt;/code&gt;: Like &lt;code&gt;&#39;pipe&#39;&lt;/code&gt; but asynchronous on Windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;ignore&#39;&lt;/code&gt;: Do not use &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;ipc&#39;&lt;/code&gt;: Sets an &lt;a href=&#34;https://nodejs.org/api/child_process.html#subprocesssendmessage-sendhandle-options-callback&#34;&gt;IPC channel&lt;/a&gt;. You can also use &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execanodescriptpath-arguments-options&#34;&gt;&lt;code&gt;execaNode()&lt;/code&gt;&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;: Re-use the current process&#39; &lt;code&gt;stdout&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;an integer: Re-use a specific file descriptor from the current process.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-a-nodejs-stream-fromto-stdinstdoutstderr&#34;&gt;Node.js &lt;code&gt;Writable&lt;/code&gt; stream&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{ file: &#39;path&#39; }&lt;/code&gt; object.&lt;/li&gt; &#xA; &lt;li&gt;a file URL.&lt;/li&gt; &#xA; &lt;li&gt;a web &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WritableStream&#34;&gt;&lt;code&gt;WritableStream&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This can be an &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-stdinstdoutstderr-to-multiple-destinations&#34;&gt;array of values&lt;/a&gt; such as &lt;code&gt;[&#39;inherit&#39;, &#39;pipe&#39;]&lt;/code&gt; or &lt;code&gt;[filePath, &#39;pipe&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can also be an async generator function to transform the output. &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;stderr&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | number | stream.Writable | WritableStream | URL | AsyncGeneratorFunction&amp;lt;string | Uint8Array&amp;gt;&lt;/code&gt; (or a tuple of those types)&lt;code&gt;\ Default: &lt;/code&gt;pipe`&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_stdio&#34;&gt;How to setup&lt;/a&gt; the child process&#39; standard error. This can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;pipe&#39;&lt;/code&gt;: Sets &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;childProcessResult.stderr&lt;/code&gt;&lt;/a&gt; (as a string or &lt;code&gt;Uint8Array&lt;/code&gt;) and &lt;a href=&#34;https://nodejs.org/api/child_process.html#subprocessstderr&#34;&gt;&lt;code&gt;childProcess.stderr&lt;/code&gt;&lt;/a&gt; (as a stream).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;overlapped&#39;&lt;/code&gt;: Like &lt;code&gt;&#39;pipe&#39;&lt;/code&gt; but asynchronous on Windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;ignore&#39;&lt;/code&gt;: Do not use &lt;code&gt;stderr&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;ipc&#39;&lt;/code&gt;: Sets an &lt;a href=&#34;https://nodejs.org/api/child_process.html#subprocesssendmessage-sendhandle-options-callback&#34;&gt;IPC channel&lt;/a&gt;. You can also use &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execanodescriptpath-arguments-options&#34;&gt;&lt;code&gt;execaNode()&lt;/code&gt;&lt;/a&gt; instead.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;&#39;inherit&#39;&lt;/code&gt;: Re-use the current process&#39; &lt;code&gt;stderr&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;an integer: Re-use a specific file descriptor from the current process.&lt;/li&gt; &#xA; &lt;li&gt;a &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-a-nodejs-stream-fromto-stdinstdoutstderr&#34;&gt;Node.js &lt;code&gt;Writable&lt;/code&gt; stream&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;{ file: &#39;path&#39; }&lt;/code&gt; object.&lt;/li&gt; &#xA; &lt;li&gt;a file URL.&lt;/li&gt; &#xA; &lt;li&gt;a web &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WritableStream&#34;&gt;&lt;code&gt;WritableStream&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This can be an &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#redirect-stdinstdoutstderr-to-multiple-destinations&#34;&gt;array of values&lt;/a&gt; such as &lt;code&gt;[&#39;inherit&#39;, &#39;pipe&#39;]&lt;/code&gt; or &lt;code&gt;[filePath, &#39;pipe&#39;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This can also be an async generator function to transform the output. &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/docs/transform.md&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;stdio&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | Array&amp;lt;string | number | stream.Readable | stream.Writable | ReadableStream | WritableStream | URL | Uint8Array | Iterable&amp;lt;string | Uint8Array&amp;gt; | AsyncIterable&amp;lt;string | Uint8Array&amp;gt; | AsyncGeneratorFunction&amp;lt;string | Uint8Array&amp;gt;&amp;gt;&lt;/code&gt; (or a tuple of those types)&lt;br&gt; Default: &lt;code&gt;pipe&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; options but for all file descriptors at once. For example, &lt;code&gt;{stdio: [&#39;ignore&#39;, &#39;pipe&#39;, &#39;pipe&#39;]}&lt;/code&gt; is the same as &lt;code&gt;{stdin: &#39;ignore&#39;, stdout: &#39;pipe&#39;, stderr: &#39;pipe&#39;}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A single string can be used as a shortcut. For example, &lt;code&gt;{stdio: &#39;pipe&#39;}&lt;/code&gt; is the same as &lt;code&gt;{stdin: &#39;pipe&#39;, stdout: &#39;pipe&#39;, stderr: &#39;pipe&#39;}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The array can have more than 3 items, to create additional file descriptors beyond &lt;code&gt;stdin&lt;/code&gt;/&lt;code&gt;stdout&lt;/code&gt;/&lt;code&gt;stderr&lt;/code&gt;. For example, &lt;code&gt;{stdio: [&#39;pipe&#39;, &#39;pipe&#39;, &#39;pipe&#39;, &#39;ipc&#39;]}&lt;/code&gt; sets a fourth file descriptor &lt;code&gt;&#39;ipc&#39;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;all&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Add an &lt;code&gt;.all&lt;/code&gt; property on the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all&#34;&gt;promise&lt;/a&gt; and the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-1&#34;&gt;resolved value&lt;/a&gt;. The property contains the output of the process with &lt;code&gt;stdout&lt;/code&gt; and &lt;code&gt;stderr&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#ensuring-all-output-is-interleaved&#34;&gt;interleaved&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;reject&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Setting this to &lt;code&gt;false&lt;/code&gt; resolves the promise with the error instead of rejecting it.&lt;/p&gt; &#xA;&lt;h4&gt;stripFinalNewline&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Strip the final &lt;a href=&#34;https://en.wikipedia.org/wiki/Newline&#34;&gt;newline character&lt;/a&gt; from the output.&lt;/p&gt; &#xA;&lt;h4&gt;extendEnv&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, the child process uses both the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#env&#34;&gt;&lt;code&gt;env&lt;/code&gt; option&lt;/a&gt; and the current process&#39; environment variables (&lt;a href=&#34;https://nodejs.org/api/process.html#processenv&#34;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;). If &lt;code&gt;false&lt;/code&gt;, only the &lt;code&gt;env&lt;/code&gt; option is used, not &lt;code&gt;process.env&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Execa also accepts the below options which are the same as the options for &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_child_process_spawn_command_args_options&#34;&gt;&lt;code&gt;child_process#spawn()&lt;/code&gt;&lt;/a&gt;/&lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_child_process_exec_command_options_callback&#34;&gt;&lt;code&gt;child_process#exec()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;cwd&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | URL&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.cwd()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Current working directory of the child process.&lt;/p&gt; &#xA;&lt;h4&gt;env&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;object&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;process.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Environment key-value pairs.&lt;/p&gt; &#xA;&lt;p&gt;Unless the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#extendenv&#34;&gt;&lt;code&gt;extendEnv&lt;/code&gt; option&lt;/a&gt; is &lt;code&gt;false&lt;/code&gt;, the child process also uses the current process&#39; environment variables (&lt;a href=&#34;https://nodejs.org/api/process.html#processenv&#34;&gt;&lt;code&gt;process.env&lt;/code&gt;&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;argv0&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Explicitly set the value of &lt;code&gt;argv[0]&lt;/code&gt; sent to the child process. This will be set to &lt;code&gt;file&lt;/code&gt; if not specified.&lt;/p&gt; &#xA;&lt;h4&gt;serialization&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;&#39;json&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specify the kind of serialization used for sending messages between processes when using the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio-1&#34;&gt;&lt;code&gt;stdio: &#39;ipc&#39;&lt;/code&gt;&lt;/a&gt; option or &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#execanodescriptpath-arguments-options&#34;&gt;&lt;code&gt;execaNode()&lt;/code&gt;&lt;/a&gt;: - &lt;code&gt;json&lt;/code&gt;: Uses &lt;code&gt;JSON.stringify()&lt;/code&gt; and &lt;code&gt;JSON.parse()&lt;/code&gt;. - &lt;code&gt;advanced&lt;/code&gt;: Uses &lt;a href=&#34;https://nodejs.org/api/v8.html#v8_v8_serialize_value&#34;&gt;&lt;code&gt;v8.serialize()&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_advanced_serialization&#34;&gt;More info.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;detached&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Prepare child to run independently of its parent process. Specific behavior &lt;a href=&#34;https://nodejs.org/api/child_process.html#child_process_options_detached&#34;&gt;depends on the platform&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;uid&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets the user identity of the process.&lt;/p&gt; &#xA;&lt;h4&gt;gid&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sets the group identity of the process.&lt;/p&gt; &#xA;&lt;h4&gt;shell&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean | string | URL&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, runs &lt;code&gt;file&lt;/code&gt; inside of a shell. Uses &lt;code&gt;/bin/sh&lt;/code&gt; on UNIX and &lt;code&gt;cmd.exe&lt;/code&gt; on Windows. A different shell can be specified as a string. The shell should understand the &lt;code&gt;-c&lt;/code&gt; switch on UNIX or &lt;code&gt;/d /s /c&lt;/code&gt; on Windows.&lt;/p&gt; &#xA;&lt;p&gt;We recommend against using this option since it is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;not cross-platform, encouraging shell-specific syntax.&lt;/li&gt; &#xA; &lt;li&gt;slower, because of the additional shell interpretation.&lt;/li&gt; &#xA; &lt;li&gt;unsafe, potentially allowing command injection.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;encoding&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;utf8&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Specify the character encoding used to decode the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt; output. If set to &lt;code&gt;&#39;buffer&#39;&lt;/code&gt;, then &lt;code&gt;stdout&lt;/code&gt;, &lt;code&gt;stderr&lt;/code&gt; and &lt;code&gt;stdio&lt;/code&gt; will be &lt;code&gt;Uint8Array&lt;/code&gt;s instead of strings.&lt;/p&gt; &#xA;&lt;h4&gt;timeout&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If timeout is greater than &lt;code&gt;0&lt;/code&gt;, the parent will send the signal identified by the &lt;code&gt;killSignal&lt;/code&gt; property (the default is &lt;code&gt;SIGTERM&lt;/code&gt;) if the child runs longer than timeout milliseconds.&lt;/p&gt; &#xA;&lt;h4&gt;maxBuffer&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;100_000_000&lt;/code&gt; (100 MB)&lt;/p&gt; &#xA;&lt;p&gt;Largest amount of data in bytes allowed on &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdio&#34;&gt;&lt;code&gt;stdio&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;killSignal&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | number&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;SIGTERM&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Signal value to be used when the spawned process will be killed.&lt;/p&gt; &#xA;&lt;h4&gt;signal&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal&#34;&gt;&lt;code&gt;AbortSignal&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can abort the spawned process using &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/AbortController&#34;&gt;&lt;code&gt;AbortController&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;AbortController.abort()&lt;/code&gt; is called, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#iscanceled&#34;&gt;&lt;code&gt;.isCanceled&lt;/code&gt;&lt;/a&gt; becomes &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;windowsVerbatimArguments&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If &lt;code&gt;true&lt;/code&gt;, no quoting or escaping of arguments is done on Windows. Ignored on other platforms. This is set to &lt;code&gt;true&lt;/code&gt; automatically when the &lt;code&gt;shell&lt;/code&gt; option is &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;windowsHide&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Windows, do not create a new console window. Please note this also prevents &lt;code&gt;CTRL-C&lt;/code&gt; &lt;a href=&#34;https://github.com/nodejs/node/issues/29837&#34;&gt;from working&lt;/a&gt; on Windows.&lt;/p&gt; &#xA;&lt;h4&gt;verbose&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;boolean&lt;/code&gt;&lt;br&gt; Default: &lt;code&gt;false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#verbose-mode&#34;&gt;Print each command&lt;/a&gt; on &lt;code&gt;stderr&lt;/code&gt; before executing it.&lt;/p&gt; &#xA;&lt;p&gt;This can also be enabled by setting the &lt;code&gt;NODE_DEBUG=execa&lt;/code&gt; environment variable in the current process.&lt;/p&gt; &#xA;&lt;h4&gt;nodePath &lt;em&gt;(For &lt;code&gt;.node()&lt;/code&gt; only)&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string | URL&lt;/code&gt;&lt;br&gt; Default: &lt;a href=&#34;https://nodejs.org/api/process.html#process_process_execpath&#34;&gt;&lt;code&gt;process.execPath&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node.js executable used to create the child process.&lt;/p&gt; &#xA;&lt;h4&gt;nodeOptions &lt;em&gt;(For &lt;code&gt;.node()&lt;/code&gt; only)&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Type: &lt;code&gt;string[]&lt;/code&gt;&lt;br&gt; Default: &lt;a href=&#34;https://nodejs.org/api/process.html#process_process_execargv&#34;&gt;&lt;code&gt;process.execArgv&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;List of &lt;a href=&#34;https://nodejs.org/api/cli.html#cli_options&#34;&gt;CLI options&lt;/a&gt; passed to the Node.js executable.&lt;/p&gt; &#xA;&lt;h2&gt;Tips&lt;/h2&gt; &#xA;&lt;h3&gt;Redirect stdin/stdout/stderr to multiple destinations&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; options can be an array of values. The following example redirects &lt;code&gt;stdout&lt;/code&gt; to both the terminal and an &lt;code&gt;output.txt&lt;/code&gt; file, while also retrieving its value programmatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {stdout} = await execa(&#39;npm&#39;, [&#39;install&#39;], {stdout: [&#39;inherit&#39;, &#39;./output.txt&#39;, &#39;pipe&#39;]});&#xA;console.log(stdout);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When combining &lt;code&gt;inherit&lt;/code&gt; with other values, please note that the child process will not be an interactive TTY, even if the parent process is one.&lt;/p&gt; &#xA;&lt;h3&gt;Redirect a Node.js stream from/to stdin/stdout/stderr&lt;/h3&gt; &#xA;&lt;p&gt;When passing a Node.js stream to the &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdin&#34;&gt;&lt;code&gt;stdin&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout-1&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr-1&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt; option, Node.js requires that stream to have an underlying file or socket, such as the streams created by the &lt;code&gt;fs&lt;/code&gt;, &lt;code&gt;net&lt;/code&gt; or &lt;code&gt;http&lt;/code&gt; core modules. Otherwise the following error is thrown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TypeError [ERR_INVALID_ARG_VALUE]: The argument &#39;stdio&#39; is invalid.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This limitation can be worked around by passing either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;a web stream (&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/ReadableStream&#34;&gt;&lt;code&gt;ReadableStream&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/WritableStream&#34;&gt;&lt;code&gt;WritableStream&lt;/code&gt;&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[nodeStream, &#39;pipe&#39;]&lt;/code&gt; instead of &lt;code&gt;nodeStream&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;- await execa(..., {stdout: nodeStream});&#xA;+ await execa(..., {stdout: [nodeStream, &#39;pipe&#39;]});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Retry on error&lt;/h3&gt; &#xA;&lt;p&gt;Gracefully handle failures by using automatic retries and exponential backoff with the &lt;a href=&#34;https://github.com/sindresorhus/p-retry&#34;&gt;&lt;code&gt;p-retry&lt;/code&gt;&lt;/a&gt; package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import pRetry from &#39;p-retry&#39;;&#xA;&#xA;const run = async () =&amp;gt; {&#xA;&#x9;const results = await execa(&#39;curl&#39;, [&#39;-sSL&#39;, &#39;https://sindresorhus.com/unicorn&#39;]);&#xA;&#x9;return results;&#xA;};&#xA;&#xA;console.log(await pRetry(run, {retries: 5}));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cancelling a spawned process&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;const abortController = new AbortController();&#xA;const subprocess = execa(&#39;node&#39;, [], {signal: abortController.signal});&#xA;&#xA;setTimeout(() =&amp;gt; {&#xA;&#x9;abortController.abort();&#xA;}, 1000);&#xA;&#xA;try {&#xA;&#x9;await subprocess;&#xA;} catch (error) {&#xA;&#x9;console.log(error.isTerminated); // true&#xA;&#x9;console.log(error.isCanceled); // true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Execute the current package&#39;s binary&lt;/h3&gt; &#xA;&lt;p&gt;Execa can be combined with &lt;a href=&#34;https://github.com/ehmicky/get-bin-path&#34;&gt;&lt;code&gt;get-bin-path&lt;/code&gt;&lt;/a&gt; to test the current package&#39;s binary. As opposed to hard-coding the path to the binary, this validates that the &lt;code&gt;package.json&lt;/code&gt; &lt;code&gt;bin&lt;/code&gt; field is correctly set up.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {getBinPath} from &#39;get-bin-path&#39;;&#xA;&#xA;const binPath = await getBinPath();&#xA;await execa(binPath);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Ensuring &lt;code&gt;all&lt;/code&gt; output is interleaved&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;all&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all&#34;&gt;stream&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#all-1&#34;&gt;string/&lt;code&gt;Uint8Array&lt;/code&gt;&lt;/a&gt; properties are guaranteed to interleave &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stdout&#34;&gt;&lt;code&gt;stdout&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sindresorhus/execa/main/#stderr&#34;&gt;&lt;code&gt;stderr&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, for performance reasons, the child process might buffer and merge multiple simultaneous writes to &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt;. This prevents proper interleaving.&lt;/p&gt; &#xA;&lt;p&gt;For example, this prints &lt;code&gt;1 3 2&lt;/code&gt; instead of &lt;code&gt;1 2 3&lt;/code&gt; because both &lt;code&gt;console.log()&lt;/code&gt; are merged into a single write.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {execa} from &#39;execa&#39;;&#xA;&#xA;const {all} = await execa(&#39;node&#39;, [&#39;example.js&#39;], {all: true});&#xA;console.log(all);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// example.js&#xA;console.log(&#39;1&#39;); // writes to stdout&#xA;console.error(&#39;2&#39;); // writes to stderr&#xA;console.log(&#39;3&#39;); // writes to stdout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can be worked around by using &lt;code&gt;setTimeout()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {setTimeout} from &#39;timers/promises&#39;;&#xA;&#xA;console.log(&#39;1&#39;);&#xA;console.error(&#39;2&#39;);&#xA;await setTimeout(0);&#xA;console.log(&#39;3&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ehmicky/gulp-execa&#34;&gt;gulp-execa&lt;/a&gt; - Gulp plugin for Execa&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ehmicky/nvexeca&#34;&gt;nvexeca&lt;/a&gt; - Run Execa using any Node.js version&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sindresorhus&#34;&gt;Sindre Sorhus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ehmicky&#34;&gt;@ehmicky&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>