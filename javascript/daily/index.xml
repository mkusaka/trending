<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-18T01:32:14Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>po6ix/POC-for-CVE-2023-41993</title>
    <updated>2023-10-18T01:32:14Z</updated>
    <id>tag:github.com,2023-10-18:/po6ix/POC-for-CVE-2023-41993</id>
    <link href="https://github.com/po6ix/POC-for-CVE-2023-41993" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CVE-2023-41993&lt;/h1&gt; &#xA;&lt;p&gt;PoC exploit for CVE-2023-41993. It&#39;s written only up to addrof/fakeobj. Reliability is not great. If you want to make it better, try to spray structure IDs.&lt;/p&gt; &#xA;&lt;h2&gt;POC link&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://po6ix.github.io/POC-for-CVE-2023-41993/pwn.html&#34;&gt;https://po6ix.github.io/POC-for-CVE-2023-41993/pwn.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I have decided to host with github pages from multiple requests.&lt;br&gt; Wish me luck that github won&#39;t block me...&lt;/p&gt; &#xA;&lt;h2&gt;Q/A&lt;/h2&gt; &#xA;&lt;h3&gt;It only crashes&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s because the factor value defined in pwn function is not correct for you device.&lt;br&gt; For such case, I made it to use random value between 87 and 1088.&lt;br&gt; So you can find correct factor value by just refreshing sometime.&lt;br&gt; It should work within 100 tries probabilistically.&lt;br&gt; It would be also nice if you can send me the information shown from the success case.&lt;/p&gt; &#xA;&lt;h3&gt;So what can I do with this?&lt;/h3&gt; &#xA;&lt;p&gt;This gives you r/w primitive to safari webcontent process.&lt;br&gt; But to actually make it useful, you will need to chain with other components.&lt;/p&gt; &#xA;&lt;h2&gt;Brief Explanation&lt;/h2&gt; &#xA;&lt;p&gt;You may want a detailed writeup for this. but unfortunately I&#39;m not afford the time to write the thing. So I write some note here so you can understand how this works.&lt;/p&gt; &#xA;&lt;p&gt;If you see the commit, it&#39;s about the change for HeapLocation. New factor has been added to know whether the nodes are same or not. It says us that the nodes like GetByOffset, MultiGetByOffset could be confused. But actualy it&#39;s only about the offset. Let&#39;s say if it has two GetByOffset nodes that has different offset. one of them is going to be CSEed and the leftover will be used instead. So it&#39;s basically offset confusion but it doesn&#39;t give you the access to an arbitrary offset. because to CSE such types of nodes they need to be hoisted by LICMPhase. For the kinds of node which does write operation is not allowed to be hoisted in this phase. So same confusion doesn&#39;t happens to PutByOffset, MultiPutByOffset nodes. Also when GetByOffset is hoisted, safeToExecute function is called to see the node is legit to execute and allows to access only the offset less than storage capacity(inline/ool). So the idea to exploit this was GetterSetter. If you call &lt;code&gt;Object.__defineGetter__&lt;/code&gt; to define a property, GetterSetter object is created but stored in the property storage and this not accessible in normally. But you can with this offset manipulation you have. Then you call &lt;code&gt;Object&lt;/code&gt; function to trigger an type confusion.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;JSObject* JSCell::toObjectSlow(JSGlobalObject* globalObject) const&#xA;{&#xA;    Integrity::auditStructureID(structureID());&#xA;    ASSERT(!isObject());&#xA;    if (isString())&#xA;        return static_cast&amp;lt;const JSString*&amp;gt;(this)-&amp;gt;toObject(globalObject);&#xA;    if (isHeapBigInt())&#xA;        return static_cast&amp;lt;const JSBigInt*&amp;gt;(this)-&amp;gt;toObject(globalObject);&#xA;    ASSERT(isSymbol());&#xA;    return static_cast&amp;lt;const Symbol*&amp;gt;(this)-&amp;gt;toObject(globalObject);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will create an SymbolObject which the GetterSetter as an internal value. And this is incorrect, because this internal value of SymbolObject is supposed to be an Symbol instance not GetterSetter.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;let getterSetter = jitme(1);&#xA;let symbolObject = Object(getterSetter);&#xA;&#xA;symbolObject.description; // call the getter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;String Symbol::description() const&#xA;{&#xA;    auto&amp;amp; uid = m_privateName.uid();&#xA;    return uid.isNullSymbol() ? String() : uid;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then when you call the description getter, it will return an String instance. This is a type confusion between Symbol.m_privateName and GetterSetter.m_getter. Each time you call this getter, it will increase the reference counter field of m_privateName.m_uid which is at offset 0x0. This is very useful, because this offset is where the structure ID of getter function is. By calling this function some times, you can change the structure ID of JSFunction instance. I have prepared another type which has many property. Then if you sync the structure ID to be same with it, you can do oob write to property storage. This directly gives the addrof/fakeobj primitive.&lt;/p&gt; &#xA;&lt;h2&gt;Reference&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Int64 module: &lt;a href=&#34;https://github.com/saelo/jscpwn&#34;&gt;https://github.com/saelo/jscpwn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>0x48piraj/fadblock</title>
    <updated>2023-10-18T01:32:14Z</updated>
    <id>tag:github.com,2023-10-18:/0x48piraj/fadblock</id>
    <link href="https://github.com/0x48piraj/fadblock" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Friendly Adblock for YouTube: A fast, lightweight, and undetectable YouTube Ads Blocker for Chrome, Opera and Firefox.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/0x48piraj/fadblock/assets/5800726/2ca53d58-47f9-4a7f-b049-7a95e16dc67e&#34; alt=&#34;fadblock: A fast, lightweight, and undetectable YouTube Ads Blocker for Chrome, Opera and Firefox&#34;&gt; &lt;br&gt; &lt;sub&gt;A fast, lightweight, and undetectable YouTube Ads Blocker for Chrome, Opera and Firefox.&lt;/sub&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://addons.mozilla.org/addon/fadblock/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/585534/107280546-7b9b2a00-6a26-11eb-8f9f-f95932f4bfec.png&#34; alt=&#34;Get uBlock Origin for Firefox&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/fadblock/mdadjjfmjhfcibgfhfjbaiiljpllkbfc&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/585534/107280622-91a8ea80-6a26-11eb-8d07-77c548b28665.png&#34; alt=&#34;Get uBlock Origin for Chromium&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://addons.opera.com/extensions/details/fadblock/&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/585534/107280692-ac7b5f00-6a26-11eb-85c7-088926504452.png&#34; alt=&#34;Get uBlock Origin for Opera&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;Friendly Adblock for YouTube&lt;/h1&gt; &#xA;&lt;p&gt;This was posted over reddit a few months ago, &lt;a href=&#34;https://www.reddit.com/r/youtube/comments/13cfdbi/apparently_ad_blockers_are_not_allowed_on_youtube/?rdt=64832&#34;&gt;Apparently Ad Blockers are not allowed on Youtube. Is this a new thing they&#39;ve implemented?&lt;/a&gt; and judging by all the recent comments and posts all over &lt;a href=&#34;https://www.reddit.com/r/youtube/&#34;&gt;r/youtube&lt;/a&gt;, this change was just rolled out on a &lt;strong&gt;larger scale&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This blocker is designed to monitor advertisements, automatically seek the ads and skip them. It&#39;s important to note that this doesn&#39;t classify as traditional ad blocking, as the ad content is technically &#34;loaded&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Nevertheless, the extension&#39;s underlying logic enables it to fast-forward through the ad content to its conclusion. The entire process is optimized to occur within an extremely brief timeframe, typically &lt;strong&gt;&amp;lt;=50 milliseconds&lt;/strong&gt;, ensuring a smooth and uninterrupted user experience.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;This extension effectively eliminates all categories of YouTube advertisements:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Category 1:&lt;/strong&gt; Ads visible on the homepage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Category 2:&lt;/strong&gt; Ads overlaid atop the suggested video list.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Category 3:&lt;/strong&gt; Ads displayed below the video description.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Starting on April 6th, 2023, the “Overlay ads” ad format will no longer appear on YouTube to help improve the viewer experience and shift engagement to higher performing ad formats on desktop and mobile devices. Overlay ads are a legacy ad format that only served on desktop and are disruptive for viewers.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;Category 4:&lt;/strong&gt; Skippable 5-second-must-be-watched video ads, which may be positioned at the video&#39;s start, midway, or at the end.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Category 5:&lt;/strong&gt; Ads similar to Category 4, but with two consecutive video ads instead of one.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Category 6:&lt;/strong&gt; Inescapable 10-second video ads, which must be watched.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The extension is now live over the &lt;a href=&#34;https://chrome.google.com/webstore/detail/fadblock/mdadjjfmjhfcibgfhfjbaiiljpllkbfc&#34;&gt;Chrome Web Store&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This section explains on how to install the extension utilizing the &lt;em&gt;developer mode&lt;/em&gt;,&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://bashvlas.com/blog/install-chrome-extension-in-developer-mode/example.gif&#34; alt=&#34;installing chrome extension in devmode&#34;&gt; &lt;/p&gt; &#xA;&lt;h4&gt;Step 1 - download the extension&lt;/h4&gt; &#xA;&lt;p&gt;You can goto &lt;a href=&#34;https://github.com/0x48piraj/fadblock/releases/tag/1.1&#34;&gt;releases&lt;/a&gt; and download &lt;a href=&#34;https://github.com/0x48piraj/fadblock/releases/download/1.1/chrome-fadblock-1.1.zip&#34;&gt;fadblock-1.1&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Step 2 - extract the contents of the zip file&lt;/h4&gt; &#xA;&lt;p&gt;Right click on the downloaded zip file, then click &#34;Extract Here&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;Step 3 - open the extension page in google chrome&lt;/h4&gt; &#xA;&lt;p&gt;There are several ways todo that.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Option 1: type chrome://extensions in the url bar and press enter.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Option 2: click on the tree dots in the top right of the browser, then click &#34;More tools&#34; then click &#34;Extensions&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Step 4 - activate developer mode&lt;/h4&gt; &#xA;&lt;p&gt;Turn on the switch on the top right of the page that says &#34;Developer mode&#34;.&lt;/p&gt; &#xA;&lt;h4&gt;Step 5 - load unpacked extension&lt;/h4&gt; &#xA;&lt;p&gt;Click on the button on the top left of the page that says &#34;Load unpacked&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Then select a folder that contains the manifest.json file.&lt;/p&gt; &#xA;&lt;h2&gt;Show your support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Follow me on GitHub &lt;a href=&#34;https://github.com/0x48piraj&#34;&gt;@0x48piraj&lt;/a&gt; for updates.&lt;/li&gt; &#xA; &lt;li&gt;I do not ask for donations, all I ask is that you star (⭐) this repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;This software is provided for educational purposes only and is provided &#34;AS IS&#34;, without warranty of any kind, express or implied, including but not limited to the warranties of merchantability, fitness for a particular purpose and noninfringement. in no event shall the authors or copyright holders be liable for any claim, damages or other liability, whether in an action of contract, tort or otherwise, arising from, out of or in connection with the software or the use or other dealings in the software.&lt;/p&gt;</summary>
  </entry>
</feed>