<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-23T01:32:09Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jfedor2/hid-remapper</title>
    <updated>2024-08-23T01:32:09Z</updated>
    <id>tag:github.com,2024-08-23:/jfedor2/hid-remapper</id>
    <link href="https://github.com/jfedor2/hid-remapper" rel="alternate"></link>
    <summary type="html">&lt;p&gt;USB input remapping dongle&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;HID Remapper&lt;/h1&gt; &#xA;&lt;p&gt;This is a configurable USB dongle that allows you to remap inputs from mice, keyboards and other devices. It works completely in hardware and requires no software running on the computer during normal use.&lt;/p&gt; &#xA;&lt;p&gt;It can do things like reassign buttons, change keyboard layouts, map mouse buttons to keyboard inputs, map keystrokes to mouse inputs, change mouse sensitivity (permanently or when a button is held), rotate mouse axes by arbitrary (non-90 degree) angles, drag-lock for mouse buttons, scroll by moving the mouse, and much more.&lt;/p&gt; &#xA;&lt;p&gt;It is configurable &lt;a href=&#34;https://www.jfedor.org/hid-remapper-config/&#34;&gt;through a web browser&lt;/a&gt; using WebHID (Chrome or Chrome-based browser required).&lt;/p&gt; &#xA;&lt;p&gt;Wireless receivers are supported and multiple devices can be connected at the same time using a USB hub (with different mappings for each device if desired).&lt;/p&gt; &#xA;&lt;p&gt;In addition to the remapping functionality, it can do polling rate overclocking up to 1000 Hz.&lt;/p&gt; &#xA;&lt;p&gt;A separate &lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/SERIAL.md&#34;&gt;serial&lt;/a&gt; version of the remapper takes inputs from a serial (RS-232) mouse and translates them to USB.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s also a &lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/BLUETOOTH.md&#34;&gt;Bluetooth&lt;/a&gt; version that runs on nRF52840-based boards, which translates Bluetooth inputs to USB.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/images/remapper1.jpg&#34; alt=&#34;HID Remapper&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to make the device&lt;/h2&gt; &#xA;&lt;p&gt;There are three main ways of making the HID Remapper. You can either buy &lt;a href=&#34;https://www.adafruit.com/product/5723&#34;&gt;this board&lt;/a&gt; from Adafruit, make it yourself using a Raspberry Pi Pico (or two), or you can use the provided files to manufacture a custom board at JLCPCB or a similar service. The functionality is the same in all cases.&lt;/p&gt; &#xA;&lt;p&gt;If you get the Feather RP2040 USB Host board from Adafruit, the device is ready to use, you just need to flash it with the right firmware (&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_feather.uf2&#34;&gt;remapper_feather.uf2&lt;/a&gt;). Hold the &#34;Boot&#34; button on the board, then press the &#34;Reset&#34; button. A USB drive should show up on your computer. Copy the UF2 file to that drive. That&#39;s it.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/HARDWARE.md&#34;&gt;here&lt;/a&gt; for details on how to make the Pico variants of the device and &lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/custom-boards/&#34;&gt;here&lt;/a&gt; for details on the custom board option.&lt;/p&gt; &#xA;&lt;h2&gt;How to use the configuration tool&lt;/h2&gt; &#xA;&lt;p&gt;A live version of the web configuration tool can be found &lt;a href=&#34;https://www.jfedor.org/hid-remapper-config/&#34;&gt;here&lt;/a&gt;. It only works in Chrome and Chrome-based browsers (including ChromeOS). On Linux you might need to give yourself permissions to the appropriate &lt;code&gt;/dev/hidraw*&lt;/code&gt; device.&lt;/p&gt; &#xA;&lt;p&gt;The input remapping mechanism is based on a list of &lt;em&gt;mappings&lt;/em&gt;. Every mapping has an input and an output. Inputs and outputs are things like mouse buttons, mouse axes, keyboard keys etc. For example if you want the right mouse button to act as the left mouse button, add a mapping with input set to &#34;Right button&#34; and output set to &#34;Left button&#34;.&lt;/p&gt; &#xA;&lt;p&gt;By default all inputs that aren&#39;t explicitly mapped to anything are passed through unchanged. If you don&#39;t want that, you can uncheck the &#34;Unmapped inputs passthrough&#34; checkbox (for each layer separately, see below).&lt;/p&gt; &#xA;&lt;p&gt;There can be more than one mapping with the same input and the same output. It is useful when you want to map a mouse button to, say, Ctrl-C. You can achieve that by adding two mappings, both with that button as input, one with &#34;Control&#34; as output and one with &#34;C&#34; as output.&lt;/p&gt; &#xA;&lt;p&gt;Similarly to remapping buttons, you can also remap axes. For example if you want horizontal mouse movements to be mapped to vertical cursor movements on the computer, add a mapping with the input set to &#34;Cursor X&#34; and the output set to &#34;Cursor Y&#34;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to change cursor speed (mouse sensitivity), you can use the &lt;em&gt;scaling&lt;/em&gt; part of the mapping. By default it is set to 1, but you could add mappings with the same axes for inputs and outputs and for example set scaling to 2 to make the cursor move twice as fast, or set it to -1 to invert the direction of the movement. (Usually it&#39;s best to first increase the CPI on the device if possible as that will give you better precision.)&lt;/p&gt; &#xA;&lt;p&gt;You can have a mapping that has a button or a key as input and an axis as output. For example if you add a mapping with &#34;Right arrow&#34; as input and &#34;Cursor X&#34; as output, it will make the cursor move right when right arrow is held on the keyboard.&lt;/p&gt; &#xA;&lt;p&gt;Having an axis as input and a button as output currently doesn&#39;t make a lot of sense.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;sticky&lt;/em&gt; flag on a mapping can be used to implement drag-lock functionality. When the flag is enabled on a mapping, pressing (and releasing) the input button will cause the output button to be held until the input button is pressed again.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;layers&lt;/em&gt; mechanism might sound familiar if you ever used a custom ergo keyboard. It works as follows. A special mapping can be added with some button as input and &#34;Layer X&#34; as output. This means that when that button is pressed, layer X is active and therefore mappings from layer X are applied. Every mapping has a set of layers on which it is present. If no layer is explicitly activated, layer 0 is active. More than one layer can be active at the same time. This mechanism has many useful applications, from completely separate keyboard layouts to things like &#34;sniper button&#34; on a mouse - increasing precision when a certain button is held.&lt;/p&gt; &#xA;&lt;p&gt;Layer activating mappings can be sticky.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Tap-hold&lt;/em&gt; is another mechanism adopted from the custom ergo keyboard world. It lets you map the same button to different things depending on whether it&#39;s &lt;em&gt;tapped&lt;/em&gt; (pressed and released quickly) or &lt;em&gt;held&lt;/em&gt; (longer than 200ms or whatever you set the threshold to). This allows configurations where a button keeps its primary function when it&#39;s clicked, but activates a layer (or a modifier key like Shift) when it&#39;s held. Together with the sticky flag, it can also be used to make a button activate a layer permanently when clicked and also temporarily when held. For the last configuration to work properly, create two separate mappings, one with &#34;sticky&#34;+&#34;tap&#34; enabled, and another with &#34;hold&#34; enabled.&lt;/p&gt; &#xA;&lt;p&gt;Sometimes you want a certain button to send multiple outputs, but not at the same time, but one after another, for example to input a special character by typing something like Alt-0165 or to emulate a double click. You can do that with the &lt;em&gt;macros&lt;/em&gt; feature. Each macro is defined as a list of inputs that will be sent one after another. Every input can consist of multiple keys, for example you can have a macro that looks like this: &lt;code&gt;Left Shift+H, E, L, Nothing, L, O&lt;/code&gt; that will type the string &#34;Hello&#34; or you can have a macro that looks like this: &lt;code&gt;Left Alt+Numpad 0, Left Alt+Numpad 1, Left Alt+Numpad 6, Left Alt+Numpad 5&lt;/code&gt; that will enter the yen symbol (on some systems). Or, to emulate a double-click, you could define a macro that looks like this: &lt;code&gt;Left button, Nothing, Left button&lt;/code&gt;. The &#34;Nothing&#34; part is necessary for the computer to register a &#34;button-up&#34; event, otherwise the first macro would type &#34;Helo&#34; and the last one would just work as a single click.&lt;/p&gt; &#xA;&lt;p&gt;To make a button send a certain macro, add a mapping with that button as input and with &#34;Macro X&#34; as output.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;em&gt;expressions&lt;/em&gt; mechanism is an advanced and experimental feature that can be used for more complex mappings. Among other things it lets you map things like analog sticks, triggers and D-pads on game controllers, applying dead zones and other non-linear transformations to them. See &lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/EXPRESSIONS.md&#34;&gt;here&lt;/a&gt; for more info on how to use them.&lt;/p&gt; &#xA;&lt;p&gt;The configuration tool comes with a list of standard inputs like mouse buttons and axes, keyboard keys and media keys like play/pause, mute, etc. Some devices will use inputs from outside that list. Good news is they can still be mapped. To make the device-specific inputs appear on the list, just connect your device to the remapper, and the remapper to your computer, and click the &#34;Open device&#34; button before you define the mappings. The configuration tool will fetch the list of inputs declared by your device and they will show up at the bottom of the input list. Unfortunately they will only appear as hex codes and will not have human friendly names. Therefore it might require some trial and error to find the input you want (and some devices will have a lot of them!).&lt;/p&gt; &#xA;&lt;p&gt;The remapper supports high-resolution mouse scrolling on the output side, which should work on Windows and modern Linux desktops. To experience it, add a mapping with &#34;Cursor Y&#34; as input and &#34;V scroll&#34; as output (perhaps on a layer). The &#34;Partial scroll timeout&#34; setting is related to this and you can safely ignore it if you&#39;re not mapping anything to mouse scroll. It applies when high-resolution scrolling is &lt;em&gt;not&lt;/em&gt; in use and is the time after which a &#34;half-tick&#34; of the scroll is forgotten.&lt;/p&gt; &#xA;&lt;p&gt;If you set the &#34;Polling rate override&#34; to anything else than &#34;don&#39;t override&#34;, it will use the selected polling rate instead of the polling rate requested by the connected device. Keep in mind this doesn&#39;t work for all devices.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re getting an &#34;Incompatible version&#34; error, try upgrading to the newest firmware.&lt;/p&gt; &#xA;&lt;p&gt;If this description wasn&#39;t particularly clear for you, perhaps looking at some of the examples that come with the configuration tool will help.&lt;/p&gt; &#xA;&lt;p&gt;If you can&#39;t use the browser-based configuration tool, there&#39;s also a &lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/config-tool&#34;&gt;command-line tool&lt;/a&gt; that takes JSON in the same format as the web tool on standard input. I only tested it on Linux, but in theory it should also run on Windows and Mac.&lt;/p&gt; &#xA;&lt;h2&gt;How to update the firmware&lt;/h2&gt; &#xA;&lt;p&gt;The procedure to update the firmware is similar on all variants. When you go to the configuration website and try to connect to your device when it doesn&#39;t have the latest firmware, you will get a message and a link to a version of the configuration interface that is compatible with your current (old) firmware. Click that link, connect to your HID Remapper by clicking &#34;Open device&#34; as usual, then go to the &#34;Actions&#34; tab and click &#34;Flash firmware&#34;. This will put your device in firmware flashing mode. A drive should appear on your computer. For all the RP2040-based variants, the drive will be named &#34;RPI-RP2&#34;. For the Bluetooth variants, it will be called something else, depending on what board you&#39;re using. Download the correct firmware file for your variant (see table below) and copy it to that drive. If the table below says &#34;no&#34; in the &#34;Flash B side required&#34; column then you&#39;re done. Go back to the regular version of the configuration interface and carry on. If it says &#34;yes&#34; in that column then before continuing you need to also flash the B side. Connect to your HID Remapper (using the regular version of the configuration interface), then go to the &#34;Actions&#34; tab and click &#34;Flash B side&#34;. Then disconnect and reconnect your HID Remapper and you&#39;re done.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re using the dual Pico variant then you need to flash the A side using the &lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_dual_a.uf2&#34;&gt;remapper_dual_a.uf2&lt;/a&gt; file as described above and then flash the B side manually. Disconnect your HID Remapper from your computer, disconnect the OTG adapter from the B-side Pico, hold the BOOTSEL button on the B-side Pico and then, while holding the button, connect the B-side Pico to your computer. A drive named &#34;RPI-RP2&#34; should appear. Copy the &lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_dual_b.uf2&#34;&gt;remapper_dual_b.uf2&lt;/a&gt; file to that drive. Disconnect the B-side Pico from your computer, reconnect the OTG adapter and reconnect your HID Remapper to your computer.&lt;/p&gt; &#xA;&lt;p&gt;When updating firmware, the current configuration on your HID Remapper is preserved. For extra peace of mind you can export your configuration to a JSON file before performing the update. That way if you need to revert to the old version of the firmware for any reason, you&#39;ll be able to import the configuration from the JSON file (configuration is lost when going from a newer firmware to an older firmware).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;variant&lt;/th&gt; &#xA;   &lt;th&gt;firmware file(s)&lt;/th&gt; &#xA;   &lt;th&gt;&#34;Flash B side&#34; required&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;single Pico&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper.uf2&#34;&gt;remapper.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dual Pico&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_dual_a.uf2&#34;&gt;remapper_dual_a.uf2&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_dual_b.uf2&#34;&gt;remapper_dual_b.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;flash B side manually&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feather RP2040 with USB Host&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_feather.uf2&#34;&gt;remapper_feather.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Waveshare RP2040-PiZero&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_waveshare_rp2040_pizero.uf2&#34;&gt;remapper_waveshare_rp2040_pizero.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_board.uf2&#34;&gt;remapper_board.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_board.uf2&#34;&gt;remapper_board.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_feather.uf2&#34;&gt;remapper_feather.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_feather.uf2&#34;&gt;remapper_feather.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_board.uf2&#34;&gt;remapper_board.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_board.uf2&#34;&gt;remapper_board.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_board_v7.uf2&#34;&gt;remapper_board_v7.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;custom board v8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_board_v8.uf2&#34;&gt;remapper_board_v8.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Feather nRF52840 Express&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_adafruit_feather_nrf52840.uf2&#34;&gt;remapper_adafruit_feather_nrf52840.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Xiao nRF52840&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_seeed_xiao_nrf52840.uf2&#34;&gt;remapper_seeed_xiao_nrf52840.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;serial&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jfedor2/hid-remapper/releases/latest/download/remapper_serial.uf2&#34;&gt;remapper_serial.uf2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;no&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;How to compile the firmware&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to compile the firmware is to let GitHub do it for you. This repository has GitHub Actions that build the firmware, so you can just fork, make your changes, wait for the job to complete, and look for the binaries in the artifacts produced.&lt;/p&gt; &#xA;&lt;p&gt;To compile the RP2040 firmware on your machine, use the following steps (details may vary depending on your Linux distribution):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install gcc-arm-none-eabi libnewlib-arm-none-eabi libstdc++-arm-none-eabi-newlib srecord&#xA;git clone https://github.com/jfedor2/hid-remapper.git&#xA;cd hid-remapper&#xA;git submodule update --init&#xA;cd firmware&#xA;mkdir build&#xA;cd build&#xA;cmake ..&#xA;# or, to build for the custom boards:&#xA;# PICO_BOARD=remapper cmake ..&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile the nRF52 firmware, you can either follow &lt;a href=&#34;https://docs.nordicsemi.com/bundle/ncs-latest/page/nrf/installation.html&#34;&gt;Nordic&#39;s setup instructions&lt;/a&gt; and then &lt;code&gt;west build -b seeed_xiao_nrf52840&lt;/code&gt; to compile the firmware, or you can use Docker with a command like this (start from the top level of the repository or adjust the path accordingly):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -v $(pwd):/workdir/project -w /workdir/project/firmware-bluetooth nordicplayground/nrfconnect-sdk:v2.2-branch west build -b seeed_xiao_nrf52840&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The software in this repository is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/jfedor2/hid-remapper/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;, unless stated otherwise.&lt;/p&gt; &#xA;&lt;p&gt;The hardware designs in this repository are licensed under the Creative Commons Attribution 4.0 International license (&lt;a href=&#34;https://creativecommons.org/licenses/by/4.0/&#34;&gt;CC BY 4.0&lt;/a&gt;), unless stated otherwise.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mermaid-js/mermaid-cli</title>
    <updated>2024-08-23T01:32:09Z</updated>
    <id>tag:github.com,2024-08-23:/mermaid-js/mermaid-cli</id>
    <link href="https://github.com/mermaid-js/mermaid-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command line tool for the Mermaid library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mermaid-cli&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@mermaid-js/mermaid-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@mermaid-js/mermaid-cli&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@mermaid-js/mermaid-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/node/v-lts/@mermaid-js/mermaid-cli&#34; alt=&#34;node-lts (scoped)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/minlag/mermaid-cli&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/v/minlag/mermaid-cli?label=Dockerhub&#34; alt=&#34;Docker Image Version (latest semver)&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mermaid-js/mermaid-cli/actions/workflows/compile-mermaid.yml&#34;&gt;&lt;img src=&#34;https://github.com/mermaid-js/mermaid-cli/actions/workflows/compile-mermaid.yml/badge.svg?sanitize=true&#34; alt=&#34;Build, test and deploy mermaid-cli Docker image&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://percy.io/Mermaid/mermaid-cli&#34;&gt;&lt;img src=&#34;https://percy.io/static/images/percy-badge.svg?sanitize=true&#34; alt=&#34;This project is using Percy.io for visual regression testing.&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/mermaid-talk/shared_invite/enQtNzc4NDIyNzk4OTAyLWVhYjQxOTI2OTg4YmE1ZmJkY2Y4MTU3ODliYmIwOTY3NDJlYjA0YjIyZTdkMDMyZTUwOGI0NjEzYmEwODcwOTE&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1?message=join%20chat&amp;amp;color=9cf&amp;amp;logo=slack&amp;amp;label=slack&#34; alt=&#34;Join our Slack!&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a command-line interface (CLI) for &lt;a href=&#34;https://mermaid.js.org/&#34;&gt;mermaid&lt;/a&gt;. It takes a mermaid definition file as input and generates an svg/png/pdf file as output.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install -g @mermaid-js/mermaid-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Convert Mermaid mmd Diagram File To SVG&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mmdc -i input.mmd -o output.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/mermaid-js/mermaid-cli/master/#alternative-installations&#34;&gt;Alternative installations&lt;/a&gt; if you don&#39;t want to install the package globally.&lt;/p&gt; &#xA; &lt;p&gt;Locate how to call the mmdc executable for your preferred method i.e. Docker, Yarn, NPM, local install, etc.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Create A PNG With A Dark Theme And Transparent Background&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mmdc -i input.mmd -o output.png -t dark -b transparent&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Animating an SVG file with custom CSS&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;--cssFile&lt;/code&gt; option can be used to inline some custom CSS.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://raw.githubusercontent.com/mermaid-js/mermaid-cli/master/test-positive/flowchart1.css&#34;&gt;./test-positive/flowchart1.css&lt;/a&gt; for an example of a CSS file that has animations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: If you want to override &lt;code&gt;mermaid&lt;/code&gt;&#39;s &lt;a href=&#34;https://mermaid.js.org/config/schema-docs/config.html#themecss&#34;&gt;&lt;code&gt;themeCSS&lt;/code&gt;&lt;/a&gt;, we recommend instead adding &lt;code&gt;{&#34;themeCSS&#34;: &#34;...&#34;})&lt;/code&gt; to your mermaid &lt;code&gt;--configFile&lt;/code&gt;. You may also need to use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/important&#34;&gt;&lt;code&gt;!important&lt;/code&gt;&lt;/a&gt; to override mermiad&#39;s &lt;code&gt;themeCSS&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: Inline CSS files may be blocked by your browser, depending on the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy&#34;&gt;HTTP Content-Security-Policy header&lt;/a&gt; of the website that hosts your SVG.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mmdc --input test-positive/flowchart1.mmd --cssFile test-positive/flowchart1.css -o docs/animated-flowchart.svg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example output: docs/animated-flowchart.svg&lt;/summary&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mermaid-js/mermaid-cli/master/docs/animated-flowchart.svg?sanitize=true&#34; alt=&#34;docs/animated-flowchart.svg&#34;&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Transform a markdown file with mermaid diagrams&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mmdc -i readme.template.md -o readme.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command transforms a markdown file itself. The mermaid-cli will find the mermaid diagrams, create SVG files from them and refer to those in the markdown output.&lt;/p&gt; &#xA;&lt;p&gt;This:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;### Some markdown&#xA;```mermaid&#xA;graph&#xA;   [....]&#xA;```&#xA;&#xA;### Some more markdown&#xA;```mermaid&#xA;sequenceDiagram&#xA;   [....]&#xA;```&#xA;&#xA;### Mermaid with custom title/desc&#xA;```mermaid&#xA;graph&#xA;   accTitle: My title here&#xA;   accDescr: My description here&#xA;   A--&amp;gt;B&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Becomes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;### Some markdown&#xA;![diagram](./readme-1.svg)&#xA;&#xA;### Some more markdown&#xA;![diagram](./readme-2.svg)&#xA;&#xA;### Mermaid with custom title/desc&#xA;![My description here](./readme-3.svg &#34;My title here&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Piping from stdin&lt;/h3&gt; &#xA;&lt;p&gt;You can easily pipe input from stdin. This example shows how to use a heredoc to send a diagram as stdin to mermaid-cli (mmdc).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat &amp;lt;&amp;lt; EOF  | mmdc --input -&#xA;    graph TD&#xA;    A[Client] --&amp;gt; B[Load Balancer]&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;See All Available Options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mmdc -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Alternative installations&lt;/h1&gt; &#xA;&lt;h2&gt;Use Docker/Podman:&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull minlag/mermaid-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or pull from Github Container Registry&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull ghcr.io/mermaid-js/mermaid-cli/mermaid-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or e.g. version 8.8.0&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker pull minlag/mermaid-cli:8.8.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The container looks for input files in &lt;code&gt;/data&lt;/code&gt;. So for example, if you have a diagram defined on your system in &lt;code&gt;/path/to/diagrams/diagram.mmd&lt;/code&gt;, you can use the container to generate an SVG file as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -u `id -u`:`id -g` -v /path/to/diagrams:/data minlag/mermaid-cli -i diagram.mmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, if using &lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt;, instead do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;podman run --userns keep-id --user ${UID} --rm -v /path/to/diagrams:/data:z ghcr.io/mermaid-js/mermaid-cli/mermaid-cli -i diagram.mmd&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The key differences in the podman command versus the docker command are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The addition of the &lt;code&gt;--userns keep-id&lt;/code&gt; argument. This allows the container to keep the same UID as the current user&#39;s UID in the container namespace instead of mapping to a subuid. Docs can be found &lt;a href=&#34;https://docs.podman.io/en/latest/markdown/options/userns.container.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The addition of &lt;code&gt;:z&lt;/code&gt; to the end of the volume mapping. This instructs podman to relabel the files in the volume with the SELinux label &lt;code&gt;container_file_t&lt;/code&gt;, which allows processes in the container to access the files. See the &#34;Labeling Volume Mounts&#34; section &lt;a href=&#34;https://docs.podman.io/en/latest/markdown/podman-run.1.html#volume-v-source-volume-host-dir-container-dir-options&#34;&gt;here&lt;/a&gt; for more info.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In previous version, the input files were mounted in &lt;code&gt;/home/mermaidcli&lt;/code&gt;. You can restore this behaviour with the &lt;code&gt;--workdir&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run [...] --workdir=/home/mermaidcli minlag/mermaid-cli [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use Node.JS API&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to call &lt;code&gt;mermaid-cli&lt;/code&gt; via a Node.JS API. Please be aware that &lt;strong&gt;the NodeJS API is not covered by semver&lt;/strong&gt;, as &lt;code&gt;mermaid-cli&lt;/code&gt; follows &lt;code&gt;mermaid&lt;/code&gt;&#39;s versioning.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { run } from &#34;@mermaid-js/mermaid-cli&#34;&#xA;&#xA;await run(&#xA;   &#34;input.mmd&#34;, &#34;output.svg&#34;, // {optional options},&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install locally&lt;/h2&gt; &#xA;&lt;p&gt;Some people are &lt;a href=&#34;https://github.com/mermaidjs/mermaid.cli/issues/15&#34;&gt;having issues&lt;/a&gt; installing this tool globally. Installing it locally is an alternative solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @mermaid-js/mermaid-cli&#xA;./node_modules/.bin/mmdc -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use NPM:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install @mermaid-js/mermaid-cli&#xA;./node_modules/.bin/mmdc -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run with npx&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/npx&#34;&gt;&lt;code&gt;npx&lt;/code&gt;&lt;/a&gt; is installed by default with NPM. It downloads and runs commands at the same time. To use Mermaid CLI with npx, you need to use the &lt;code&gt;-p&lt;/code&gt; flag because the package name is different than the command it installs (&lt;code&gt;mmdc&lt;/code&gt;). &lt;code&gt;npx -p @mermaid-js/mermaid-cli mmdc -h&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Install with &lt;a href=&#34;https://brew.sh&#34;&gt;brew&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;This method of installation is no longer supported. For more details, see the &lt;a href=&#34;https://github.com/mermaid-js/mermaid-cli/issues/288&#34;&gt;discussion&lt;/a&gt;. An old version of mermaid-cli can be installed with brew.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install mermaid-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Known issues&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mermaid-js/mermaid-cli/master/docs/linux-sandbox-issue.md&#34;&gt;Linux sandbox issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mermaid-js/mermaid-cli/master/docs/docker-permission-denied.md&#34;&gt;Docker permission denied issue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mermaid-js/mermaid-cli/master/docs/already-installed-chromium.md&#34;&gt;How to setup up mermaid to use already installed chromium?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;For contributors&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome. See the &lt;a href=&#34;https://raw.githubusercontent.com/mermaid-js/mermaid-cli/master/CONTRIBUTING.md&#34;&gt;contribution guide&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>