<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-17T01:39:21Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheOdinProject/javascript-exercises</title>
    <updated>2023-01-17T01:39:21Z</updated>
    <id>tag:github.com,2023-01-17:/TheOdinProject/javascript-exercises</id>
    <link href="https://github.com/TheOdinProject/javascript-exercises" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Exercises&lt;/h1&gt; &#xA;&lt;p&gt;These JavaScript exercises are intended to complement the JavaScript content on The Odin Project (TOP). They should only be done when instructed during the course of the curriculum.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The &lt;code&gt;generator-exercise&lt;/code&gt; file is not actually an exercise; it is a script that generates exercises. It was created to help efficiently write these exercises.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have a suggestion to improve an exercise, an idea for a new exercise, or notice an issue with an exercise, please feel free to open an issue after thoroughly reading our &lt;a href=&#34;https://github.com/TheOdinProject/theodinproject/raw/main/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; in our main TOP repo.&lt;/p&gt; &#xA;&lt;h2&gt;How To Use These Exercises&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork and clone this repository. To learn how to fork a repository, see the GitHub documentation on how to &lt;a href=&#34;https://docs.github.com/en/get-started/quickstart/fork-a-repo&#34;&gt;fork a repo&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Copies of repositories on your machine are called clones. If you need help cloning to your local environment you can learn how from the GitHub documentation on &lt;a href=&#34;https://docs.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository-from-github/cloning-a-repository&#34;&gt;cloning a repository&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Before you start working on any execises, you should first ensure you have the following installed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;NPM&lt;/strong&gt;. You should have installed NPM already in our &lt;a href=&#34;https://www.theodinproject.com/lessons/foundations-installing-node-js&#34;&gt;Installing Node.js&lt;/a&gt; lesson. Just in case you need to check, type &lt;code&gt;npm --version&lt;/code&gt; in your terminal. If you get back &lt;code&gt;Command &#39;npm&#39; not found, but can be installed with:&lt;/code&gt;, &lt;strong&gt;do not follow the instructions in the terminal&lt;/strong&gt; to install with &lt;code&gt;apt-get&lt;/code&gt; as this causes permission issues. Instead, go back to the installation lesson and install Node with NVM by following the instructions there.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Jest&lt;/strong&gt;. After cloning this repository to your local machine and installing NPM, go into the newly created directory (&lt;code&gt;cd javascript-exercises&lt;/code&gt;) and run &lt;code&gt;npm install&lt;/code&gt;. This will install Jest and set up the testing platform based on our preconfigured settings.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Each exercise includes 3 files: a markdown file with a description of the task, an empty (or mostly empty) JavaScript file, and a set of tests. To complete an exercise, you&#39;ll need to go to the exercise directory with &lt;code&gt;cd exerciseName&lt;/code&gt; in the terminal and run &lt;code&gt;npm test exerciseName.spec.js&lt;/code&gt;. This should run the test file and show you the output. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;When you first run a test, it will fail. This is by design! You must open the exercise file and write the code needed to get the test to pass.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Some of the exercises have test conditions defined in their spec file as &lt;code&gt;test.skip&lt;/code&gt; compared to &lt;code&gt;test&lt;/code&gt;. This is purposeful. After you pass one &lt;code&gt;test&lt;/code&gt;, you will change the next &lt;code&gt;test.skip&lt;/code&gt; to &lt;code&gt;test&lt;/code&gt; and test your code again. You&#39;ll do this until all conditions are satisfied. &lt;strong&gt;All tests must pass at the same time&lt;/strong&gt;, and you should not have any &lt;code&gt;test.skip&lt;/code&gt; instances by the time you finish an exercise.&lt;/li&gt; &#xA; &lt;li&gt;Once you successfully finish an exercise, check TOP&#39;s &lt;code&gt;solutions&lt;/code&gt; branch to compare it with yours. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You should not be checking the solution for an exercise until you finish it!&lt;/li&gt; &#xA;   &lt;li&gt;Keep in mind that TOP&#39;s solution is not the only solution. Generally as long as all of the tests pass, your solution should be fine.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Do not submit your solutions to this repo, as any PRs that do so will be closed without merging.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Due to the way Jest handles failed tests, it may return an exit code of 1 if any tests fail. NPM will interpret this as an error and you may see some &lt;code&gt;npm ERR!&lt;/code&gt; messages after Jest runs. You can ignore these, or run your test with &lt;code&gt;npm test exerciseName.spec.js --silent&lt;/code&gt; to supress the errors.&lt;/p&gt; &#xA;&lt;p&gt;The first exercise, &lt;code&gt;helloWorld&lt;/code&gt;, will walk you through the process in-depth.&lt;/p&gt; &#xA;&lt;h2&gt;Debugging&lt;/h2&gt; &#xA;&lt;p&gt;To debug functions, you can run the tests in the Visual Studio Code debugger terminal. You can open this by clicking the &#34;Run and Debug&#34; icon on the left or pressing &lt;code&gt;ctrl + shift + D&lt;/code&gt;, then clicking JavaScript Debug Terminal. You will be able to set breakpoints as you would in the Chrome DevTools debugger. You can run &lt;code&gt;npm test exerciseName.spec.js&lt;/code&gt; to then execute your code up until your breakpoint and step through your code as necessary. &lt;strong&gt;NOTE&lt;/strong&gt;: To take advantage of the debugger, you &lt;strong&gt;MUST&lt;/strong&gt; run the script in the debugger terminal, not the bash or zsh terminal.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>saharmor/whisper-playground</title>
    <updated>2023-01-17T01:39:21Z</updated>
    <id>tag:github.com,2023-01-17:/saharmor/whisper-playground</id>
    <link href="https://github.com/saharmor/whisper-playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build real time speech2text web apps using OpenAI&#39;s Whisper https://openai.com/blog/whisper/&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60px&#34; src=&#34;https://user-images.githubusercontent.com/6180201/124313197-cc93f200-db70-11eb-864a-fc65765fc038.png&#34; alt=&#34;giant microphone&#34;&gt; &lt;br&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;Whisper Playground&lt;/h2&gt; &#xA;&lt;h6 align=&#34;center&#34;&gt;Instantly build speech2text apps in 99 languages using OpenAI&#39;s Whisper&lt;/h6&gt;  &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/6180201/194214280-3a4106d5-53cf-4463-ba0e-201d8e1b0c0e.mp4&#34;&gt;https://user-images.githubusercontent.com/6180201/194214280-3a4106d5-53cf-4463-ba0e-201d8e1b0c0e.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Contribution ideas&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Stream audio using web sockets over the current approach of incrementally sending audio chunks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement diarization (speaker identification) using &lt;code&gt;pyannote-audio&lt;/code&gt; (&lt;a href=&#34;https://github.com/openai/whisper/discussions/264&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Setup&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Whisper requires the command-line tool &lt;a href=&#34;https://ffmpeg.org/&#34;&gt;&lt;code&gt;ffmpeg&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;http://portaudio.com/docs/v19-doxydocs/index.html&#34;&gt;&lt;code&gt;portaudio&lt;/code&gt;&lt;/a&gt; to be installed on your system, which is available from most package managers:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# on Ubuntu or Debian&#xA;sudo apt update &amp;amp;&amp;amp; sudo apt install ffmpeg&#xA;sudo apt install portaudio19-dev&#xA;&#xA;# on Arch Linux&#xA;sudo pacman -S ffmpeg&#xA;sudo pacman -S portaudio&#xA;&#xA;# on MacOS using Homebrew (https://brew.sh/)&#xA;brew install ffmpeg&#xA;brew install portaudio&#xA;&#xA;# on Windows using Chocolatey (https://chocolatey.org/)&#xA;choco install ffmpeg&#xA;&#xA;# on Windows using Scoop (https://scoop.sh/)&#xA;scoop install ffmpeg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Clone or fork this repository&lt;/li&gt; &#xA; &lt;li&gt;Install the backend and frontend environmet &lt;code&gt;sh install_playground.sh&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run the backend &lt;code&gt;cd backend &amp;amp;&amp;amp; source venv/bin/activate &amp;amp;&amp;amp; flask run --port 8000&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;In a different terminal, run the React frontend &lt;code&gt;cd interface &amp;amp;&amp;amp; yarn start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This repository and the code and model weights of Whisper are released under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>zdhenard42/SOC-Multitool</title>
    <updated>2023-01-17T01:39:21Z</updated>
    <id>tag:github.com,2023-01-17:/zdhenard42/SOC-Multitool</id>
    <link href="https://github.com/zdhenard42/SOC-Multitool" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A powerful and user-friendly browser extension that streamlines investigations for security professionals.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SOC Multi-tool&lt;/h1&gt; &#xA;&lt;p&gt;Introducing SOC Multi-tool, a free and open-source browser extension that makes investigations faster and more efficient. Now available on the Chrome Web Store and compatible with all Chromium-based browsers such as Microsoft Edge, Chrome, Brave, and Opera.&lt;br&gt; &lt;a href=&#34;https://chrome.google.com/webstore/detail/soc-multi-tool/diagjgnagmnjdfnfcciocmjcllacgkab?hl=en&amp;amp;authuser=0&#34;&gt;Now available on Chrome Web Store!&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;http://web.archive.org/web/20230111033410/https://github.com/trending/javascript?since=daily&#34;&gt;#22 On Github Trending!&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://github.com/meirwah/awesome-incident-response#all-in-one-tools&#34;&gt;Featured on &#34;Awesome Incident Response&#34;!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img src=&#34;https://imgur.com/bPMNikH.png&#34; alt=&#34;SOC Multi-tool screenshot&#34; width=&#34;auto&#34;&gt; &#xA;&lt;h2&gt;Streamline your investigations&lt;/h2&gt; &#xA;&lt;p&gt;SOC Multi-tool eliminates the need for constant copying and pasting during investigations. Simply highlight the text you want to investigate, right-click, and navigate to the type of data highlighted. The extension will then open new tabs with the results of your investigation.&lt;/p&gt; &#xA;&lt;h2&gt;Modern and feature-rich&lt;/h2&gt; &#xA;&lt;p&gt;The SOC Multi-tool is a modernized multi-tool built from the ground up, with a range of features and capabilities. Some of the key features include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;IP Reputation Lookup using VirusTotal &amp;amp; AbuseIPDB&lt;/li&gt; &#xA; &lt;li&gt;IP Info Lookup using Tor relay checker &amp;amp; WHOIS&lt;/li&gt; &#xA; &lt;li&gt;Hash Reputation Lookup using VirusTotal&lt;/li&gt; &#xA; &lt;li&gt;Domain Reputation Lookup using VirusTotal &amp;amp; AbuseIPDB&lt;/li&gt; &#xA; &lt;li&gt;Domain Info Lookup using Alienvault&lt;/li&gt; &#xA; &lt;li&gt;Living off the land binaries Lookup using the LOLBas project&lt;/li&gt; &#xA; &lt;li&gt;Decoding of Base64 &amp;amp; HEX using CyberChef&lt;/li&gt; &#xA; &lt;li&gt;File Extension &amp;amp; Filename Lookup using fileinfo.com &amp;amp; File.net&lt;/li&gt; &#xA; &lt;li&gt;MAC Address manufacturer Lookup using maclookup.com&lt;/li&gt; &#xA; &lt;li&gt;Parsing of UserAgent using user-agents.net&lt;/li&gt; &#xA; &lt;li&gt;Microsoft Error code Lookup using Microsoft&#39;s DB&lt;/li&gt; &#xA; &lt;li&gt;Event ID Lookup (Windows, Sharepoint, SQL Server, Exchange, and Sysmon) using ultimatewindowssecurity.com&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://i.imgur.com/yMj9p4v.gif&#34; alt=&#34;SOC Multi-tool in action&#34; width=&#34;auto&#34; height=&#34;auto&#34;&gt; &#xA;&lt;h2&gt;Easy to install&lt;/h2&gt; &#xA;&lt;p&gt;You can easily install the extension by downloading the release from the &lt;a href=&#34;https://github.com/zdhenard42/SOC-Multitool/releases&#34;&gt;releases page&lt;/a&gt;, extract the folder, turn on developer mode in your browser&#39;s extensions settings, click &#34;Load unpacked&#34; and select the extracted folder!&lt;/p&gt; &#xA;&lt;p&gt;SOC Multi-tool is a community-driven project and the developer encourages users to contribute and share better resources.&lt;/p&gt;</summary>
  </entry>
</feed>