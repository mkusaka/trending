<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-14T01:34:52Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>morris/vanilla-todo</title>
    <updated>2023-12-14T01:34:52Z</updated>
    <id>tag:github.com,2023-12-14:/morris/vanilla-todo</id>
    <link href="https://github.com/morris/vanilla-todo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A case study on viable techniques for vanilla web development.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VANILLA TODO&lt;/h1&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://teuxdeux.com&#34;&gt;TeuxDeux&lt;/a&gt; clone in plain HTML, CSS and JavaScript (no build steps). It&#39;s fully animated and runs smoothly at 60 FPS with a total transfer size of &lt;strong&gt;55 KB&lt;/strong&gt; (unminified).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://morris.github.io/vanilla-todo/&#34;&gt;Try it online →&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;More importantly, it&#39;s a case study showing that &lt;strong&gt;vanilla web development&lt;/strong&gt; is viable in terms of &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#521-the-good&#34;&gt;maintainability&lt;/a&gt;, and worthwhile in terms of &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#51-user-experience&#34;&gt;user experience&lt;/a&gt; (&lt;strong&gt;50%&lt;/strong&gt; less time to load and &lt;strong&gt;95%&lt;/strong&gt; less bandwidth in this case).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;There&#39;s no custom framework invented here.&lt;/strong&gt; Instead, the case study was &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#22-rules&#34;&gt;designed&lt;/a&gt; to discover minimum viable &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#321-mount-functions&#34;&gt;patterns&lt;/a&gt; that are truly vanilla. The result is maintainable, albeit &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#522-the-verbose&#34;&gt;verbose&lt;/a&gt; and with considerable duplication.&lt;/p&gt; &#xA;&lt;p&gt;If anything, the case study validates the value of build steps and frameworks, but also demonstrates that standard web technologies can be used effectively and there are only a few &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#523-the-bad&#34;&gt;critical areas&lt;/a&gt; where a vanilla approach is clearly inferior.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;While the first version of the case study has been published in 2020, it has received significant &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#9-changelog&#34;&gt;updates&lt;/a&gt; over time.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Intermediate understanding of the web platform is required to follow through.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#1-motivation&#34;&gt;1. Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#2-method&#34;&gt;2. Method&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#21-subject&#34;&gt;2.1. Subject&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#22-rules&#34;&gt;2.2. Rules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#23-goals&#34;&gt;2.3. Goals&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#231-user-experience&#34;&gt;2.3.1. User Experience&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#232-code-quality&#34;&gt;2.3.2. Code Quality&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#233-generality-of-patterns&#34;&gt;2.3.3. Generality of Patterns&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#3-implementation&#34;&gt;3. Implementation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#31-basic-structure&#34;&gt;3.1. Basic Structure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#32-javascript-architecture&#34;&gt;3.2. JavaScript Architecture&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#321-mount-functions&#34;&gt;3.2.1. Mount Functions&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#322-data-flow&#34;&gt;3.2.2. Data Flow&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#323-rendering&#34;&gt;3.2.3. Rendering&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#324-reconciliation&#34;&gt;3.2.4. Reconciliation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#33-drag--drop&#34;&gt;3.3. Drag &amp;amp; Drop&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#34-animations&#34;&gt;3.4. Animations&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#4-tooling&#34;&gt;4. Tooling&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#41-local-development-server&#34;&gt;4.1. Local Development Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#42-formatting-and-linting&#34;&gt;4.2. Formatting and Linting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#43-testing&#34;&gt;4.3. Testing&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#431-code-coverage&#34;&gt;4.3.1. Code Coverage&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#44-pipeline&#34;&gt;4.4. Pipeline&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#45-debugging&#34;&gt;4.5. Debugging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#5-assessment&#34;&gt;5. Assessment&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#51-user-experience&#34;&gt;5.1. User Experience&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#52-code-quality&#34;&gt;5.2. Code Quality&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#521-the-good&#34;&gt;5.2.1. The Good&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#522-the-verbose&#34;&gt;5.2.2. The Verbose&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#523-the-bad&#34;&gt;5.2.3. The Bad&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#53-generality-of-patterns&#34;&gt;5.3. Generality of Patterns&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#6-conclusion&#34;&gt;6. Conclusion&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#7-beyond-vanilla&#34;&gt;7. Beyond Vanilla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#8-appendix&#34;&gt;8. Appendix&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#81-links&#34;&gt;8.1. Links&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#82-response&#34;&gt;8.2. Response&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#9-changelog&#34;&gt;9. Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1. Motivation&lt;/h2&gt; &#xA;&lt;p&gt;I believe too little has been invested in researching practical, scalable methods for building web applications without third party dependencies.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s not enough to describe how to create DOM nodes or how to toggle a class without a framework. It&#39;s also rather harmful to write an article saying you don&#39;t need library X, and then proceed in describing how to roll your own untested, inferior version of X.&lt;/p&gt; &#xA;&lt;p&gt;What&#39;s missing are thorough examples of complex web applications built only with standard web technologies, covering as many aspects of the development process as possible.&lt;/p&gt; &#xA;&lt;p&gt;This case study is an attempt to fill this gap, at least a little bit, and inspire further research in the area.&lt;/p&gt; &#xA;&lt;h2&gt;2. Method&lt;/h2&gt; &#xA;&lt;p&gt;The method for this case study is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pick an interesting subject.&lt;/li&gt; &#xA; &lt;li&gt;Implement it using only standard web technologies.&lt;/li&gt; &#xA; &lt;li&gt;Document techniques and patterns found during the process.&lt;/li&gt; &#xA; &lt;li&gt;Assess the results by common quality standards.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This section describes the method in more detail.&lt;/p&gt; &#xA;&lt;h3&gt;2.1. Subject&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve chosen to build a (functionally reduced) clone of &lt;a href=&#34;https://teuxdeux.com&#34;&gt;TeuxDeux&lt;/a&gt; for this study. The user interface has interesting challenges, in particular performant drag &amp;amp; drop when combined with animations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The original TeuxDeux app deserves praise here. In my opinion it has the best over-all concept and UX of all the to-do apps out there. &lt;a href=&#34;https://fictivekin.com/&#34;&gt;Thank you!&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;The user interface is arguably small (which is good for a case study) but large enough to require thought on its architecture.&lt;/p&gt; &#xA;&lt;p&gt;However, it is lacking in some key areas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Routing&lt;/li&gt; &#xA; &lt;li&gt;Asynchronous resource requests&lt;/li&gt; &#xA; &lt;li&gt;Complex forms&lt;/li&gt; &#xA; &lt;li&gt;Server-side rendering&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;2.2. Rules&lt;/h3&gt; &#xA;&lt;p&gt;To produce valid vanilla solutions, and because constraints spark creativity, I came up with a set of rules to follow throughout the process:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only use standard web technologies.&lt;/li&gt; &#xA; &lt;li&gt;Only use widely supported JS features unless they can be polyfilled (1).&lt;/li&gt; &#xA; &lt;li&gt;No runtime JS dependencies (except polyfills).&lt;/li&gt; &#xA; &lt;li&gt;No build steps.&lt;/li&gt; &#xA; &lt;li&gt;No general-purpose utility functions related to the DOM/UI (2).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(1) This is a moving target; the current version is using ES2020.&lt;/p&gt; &#xA;&lt;p&gt;(2) These usually end up becoming a custom micro-framework, thereby questioning why you didn&#39;t use one of the established and tested libraries/frameworks in the first place.&lt;/p&gt; &#xA;&lt;h3&gt;2.3. Goals&lt;/h3&gt; &#xA;&lt;p&gt;The results are going to be assessed by three major concerns:&lt;/p&gt; &#xA;&lt;h4&gt;2.3.1. User Experience&lt;/h4&gt; &#xA;&lt;p&gt;The product should be comparable to or better than the original regarding functionality, performance and design.&lt;/p&gt; &#xA;&lt;p&gt;This includes testing major browsers and devices.&lt;/p&gt; &#xA;&lt;h4&gt;2.3.2. Code Quality&lt;/h4&gt; &#xA;&lt;p&gt;The implementation should be &lt;em&gt;maintainable&lt;/em&gt; and follow established code quality standards.&lt;/p&gt; &#xA;&lt;p&gt;This will be difficult to assess objectively, as we will see later.&lt;/p&gt; &#xA;&lt;h4&gt;2.3.3. Generality of Patterns&lt;/h4&gt; &#xA;&lt;p&gt;The discovered techniques and patterns should be applicable in a wide range of scenarios.&lt;/p&gt; &#xA;&lt;h2&gt;3. Implementation&lt;/h2&gt; &#xA;&lt;p&gt;This section walks through the implementation, highlighting techniques and problems found during the process. You&#39;re encouraged to inspect the &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public&#34;&gt;source code&lt;/a&gt; alongside this section.&lt;/p&gt; &#xA;&lt;h3&gt;3.1. Basic Structure&lt;/h3&gt; &#xA;&lt;p&gt;Since build steps are ruled out, the codebase consists of plain HTML, CSS and JS files. The HTML and CSS follows &lt;a href=&#34;https://ricostacruz.com/rscss/&#34;&gt;rscss&lt;/a&gt; (devised by &lt;a href=&#34;https://ricostacruz.com&#34;&gt;Rico Sta. Cruz&lt;/a&gt;) resulting in an intuitive, component-oriented structure.&lt;/p&gt; &#xA;&lt;p&gt;The stylesheets are slightly verbose. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties&#34;&gt;CSS variables&lt;/a&gt; did help but I missed &lt;a href=&#34;https://sass-lang.com/&#34;&gt;SCSS&lt;/a&gt; here; I think it&#39;s a must-have for bigger projects. Additionally, the global CSS namespace problem is unaddressed (see e.g. &lt;a href=&#34;https://github.com/css-modules/css-modules&#34;&gt;CSS Modules&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;All JavaScript files are ES modules (&lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt;). I added a few &lt;a href=&#34;https://www.typescriptlang.org/docs/handbook/jsdoc-supported-types.html&#34;&gt;JSDoc&lt;/a&gt; comments to functions to get additional code completion in VSCode. This helps, but using TypeScript would be much safer and less verbose.&lt;/p&gt; &#xA;&lt;p&gt;Note that I&#39;ve opted out of web components completely. My attempts to refactor the implementation using web components either added more complexity, or did not show significant value over the initial, more basic approach.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;The basic structure comes with some boilerplate, e.g. referencing all the individual stylesheets and scripts from the HTML; probably enough to justify a simple build step.&lt;/p&gt; &#xA;&lt;p&gt;It is otherwise straight-forward—literally a bunch of HTML, CSS and JS files.&lt;/p&gt; &#xA;&lt;h3&gt;3.2. JavaScript Architecture&lt;/h3&gt; &#xA;&lt;p&gt;Naturally, the JavaScript architecture is the most interesting part of this study.&lt;/p&gt; &#xA;&lt;p&gt;I found that using a combination of functions, query selectors and DOM events is sufficient to build a scalable, maintainable codebase, albeit with some trade-offs as we will see later.&lt;/p&gt; &#xA;&lt;p&gt;Conceptually, the proposed architecture loosely maps CSS selectors to JS functions which are &lt;em&gt;mounted&lt;/em&gt; (i.e. called) once per matching element. This simple mental model aligns well with the DOM and styles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;TodoList -&amp;gt; .todo-list&#xA;  scripts/TodoList.js&#xA;  styles/todo-list.css&#xA;&#xA;AppCollapsible -&amp;gt; .app-collapsible&#xA;  scripts/AppCollapsible.js&#xA;  styles/app-collapsible.css&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This proved to be a useful, repeatable pattern throughout all of the implementation process.&lt;/p&gt; &#xA;&lt;h4&gt;3.2.1. Mount Functions&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;Mount functions&lt;/em&gt; take a DOM element as their first argument. Their responsibility is to set up initial state, event listeners, and provide behavior and rendering for the target element.&lt;/p&gt; &#xA;&lt;p&gt;For example, this mount function implements a simple counter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Define mount function.&#xA;// Loosely mapped to &#34;.my-counter&#34;.&#xA;export function MyCounter(el) {&#xA;  // Define initial state.&#xA;  let value = 0;&#xA;&#xA;  // Set rigid base HTML.&#xA;  el.innerHTML = `&#xA;    &amp;lt;span class=&#34;value&#34;&amp;gt;&amp;lt;/span&amp;gt;&#xA;    &amp;lt;button class=&#34;increment&#34;&amp;gt;Increment&amp;lt;/button&amp;gt;&#xA;    &amp;lt;button class=&#34;decrement&#34;&amp;gt;Decrement&amp;lt;/button&amp;gt;&#xA;  `;&#xA;&#xA;  // Attach event listeners.&#xA;  el.querySelector(&#39;.increment&#39;).addEventListener(&#39;click&#39;, () =&amp;gt; {&#xA;    // Dispatch a custom event, using .detail to transport data.&#xA;    // Parent components can listen to this event to receive the counter&#39;s value.&#xA;    el.dispatchEvent(&#xA;      new CustomEvent(&#39;counter&#39;, {&#xA;        detail: value + 1,&#xA;        bubbles: true,&#xA;      }),&#xA;    );&#xA;  });&#xA;&#xA;  el.querySelector(&#39;.decrement&#39;).addEventListener(&#39;click&#39;, () =&amp;gt; {&#xA;    el.dispatchEvent(&#xA;      new CustomEvent(&#39;counter&#39;, {&#xA;        detail: value - 1,&#xA;        bubbles: true,&#xA;      }),&#xA;    );&#xA;  });&#xA;&#xA;  // This event handler supports the increment/decrement actions above,&#xA;  // as well as resetting the counter from the outside.&#xA;  el.addEventListener(&#39;counter&#39;, (e) =&amp;gt; {&#xA;    // Update state and re-render.&#xA;    value = e.detail;&#xA;    update();&#xA;  });&#xA;&#xA;  // Define idempotent update function.&#xA;  function update() {&#xA;    el.querySelector(&#39;.value&#39;).innerText = value;&#xA;  }&#xA;&#xA;  // Initial update.&#xA;  update();&#xA;}&#xA;&#xA;// Mount MyCounter component(s).&#xA;// Any &amp;lt;div class=&#34;my-counter&#34;&amp;gt;&amp;lt;/div&amp;gt; in the document will be mounted.&#xA;document.querySelectorAll(&#39;.my-counter&#39;).forEach(MyCounter);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This comes with quite some boilerplate but has useful properties, as we will see in the following sections.&lt;/p&gt; &#xA;&lt;p&gt;Note that a mount function does not have to set any base HTML, and may instead only set event listeners to enable some behavior. Also note that an element can be mounted with multiple mount functions. For example, to-do items are mounted with &lt;code&gt;TodoItem&lt;/code&gt; and &lt;code&gt;AppDraggable&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Compared to React components, mount functions provide interesting flexibility as components and behaviors can be implemented using the same idiom and combined arbitrarily.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/AppIcon.js&#34;&gt;AppIcon.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoItem.js&#34;&gt;TodoItem.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoItemInput.js&#34;&gt;TodoItemInput.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3.2.2. Data Flow&lt;/h4&gt; &#xA;&lt;p&gt;I found it effective to implement one-way data flow similar to React&#39;s approach, however exclusively using custom DOM events.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Data flows downwards&lt;/strong&gt; from parent components to child components through custom DOM events. Data events are in noun-form.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Actions flow upwards&lt;/strong&gt; through custom DOM events (bubbling up), usually resulting in some parent component state change which is in turn propagated downwards through data events. Action events are in verb-form.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The business logic is factored into a pure functional core (&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoLogic.js&#34;&gt;TodoLogic.js&lt;/a&gt;). This is a sensible approach in most UI architectures as it encapsulates state transitions in portable, testable units.&lt;/p&gt; &#xA;&lt;p&gt;The controller is factored into a separate behavior (&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoController.js&#34;&gt;TodoController.js&lt;/a&gt;). It only receives and dispatches events, calling the business logic to apply changes and emit state. It also handles persistence in Local Storage.&lt;/p&gt; &#xA;&lt;p&gt;Listening to and dispatching events is slightly verbose with standard APIs and certainly justifies introducing helpers. I didn&#39;t need event delegation à la jQuery for this study but I believe it&#39;s a useful concept that is difficult to do concisely with standard APIs.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoDay.js&#34;&gt;TodoDay.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoController.js&#34;&gt;TodoController.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoLogic.js&#34;&gt;TodoLogic.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3.2.3. Rendering&lt;/h4&gt; &#xA;&lt;p&gt;Naively re-rendering a whole component using &lt;code&gt;.innerHTML&lt;/code&gt; should be avoided as this may hurt performance and will likely break important functionality like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;button&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, etc. may lose focus.&lt;/li&gt; &#xA; &lt;li&gt;Form inputs may lose data.&lt;/li&gt; &#xA; &lt;li&gt;Text selection may be reset.&lt;/li&gt; &#xA; &lt;li&gt;CSS transitions may not work correctly.&lt;/li&gt; &#xA; &lt;li&gt;Event listeners may need to be reattached.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;As seen in &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#321-mount-functions&#34;&gt;3.2.1.&lt;/a&gt;, rendering is therefore split into some rigid base HTML and an idempotent, complete update function which only makes necessary changes.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Idempotence:&lt;/strong&gt; Update functions may be called at any time and should always render the component correctly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Completeness:&lt;/strong&gt; Update functions should render the whole component, regardless of what triggered the update.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In effect, this means almost all DOM manipulation is done in update functions, which greatly contributes to robustness and readability of the codebase.&lt;/p&gt; &#xA;&lt;p&gt;As seen above this approach is quite verbose and ugly compared to JSX, for example. However, it&#39;s very performant and can be further optimized by checking for data changes, caching selectors, etc. It is also simple to understand.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoItem.js&#34;&gt;TodoItem.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoCustomList.js&#34;&gt;TodoCustomList.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;3.2.4. Reconciliation&lt;/h4&gt; &#xA;&lt;p&gt;Expectedly, the hardest part of the study was rendering a variable amount of dynamic components efficiently. Here&#39;s a commented example from the implementation outlining the reconciliation algorithm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export function TodoList(el) {&#xA;  let items = [];&#xA;&#xA;  el.innerHTML = `&amp;lt;div class=&#34;items&#34;&amp;gt;&amp;lt;/div&amp;gt;`;&#xA;&#xA;  el.addEventListener(&#39;todoItems&#39;, (e) =&amp;gt; {&#xA;    items = e.detail;&#xA;    update();&#xA;  });&#xA;&#xA;  function update() {&#xA;    const container = el.querySelector(&#39;.items&#39;);&#xA;&#xA;    // Mark current children for removal&#xA;    const obsolete = new Set(container.children);&#xA;&#xA;    // Map current children by data-key&#xA;    const childrenByKey = new Map();&#xA;    obsolete.forEach((child) =&amp;gt; childrenByKey.set(child.dataset.key, child));&#xA;&#xA;    // Build new list of child elements from data&#xA;    const children = items.map((item) =&amp;gt; {&#xA;      // Find existing child by data-key&#xA;      let child = childrenByKey.get(item.id);&#xA;&#xA;      if (child) {&#xA;        // If child exists, keep it&#xA;        obsolete.delete(child);&#xA;      } else {&#xA;        // Otherwise, create new child&#xA;        child = document.createElement(&#39;div&#39;);&#xA;        child.classList.add(&#39;todo-item&#39;);&#xA;&#xA;        // Set data-key&#xA;        child.dataset.key = item.id;&#xA;&#xA;        // Mount component&#xA;        TodoItem(child);&#xA;      }&#xA;&#xA;      // Update child&#xA;      child.dispatchEvent(new CustomEvent(&#39;todoItem&#39;, { detail: item }));&#xA;&#xA;      return child;&#xA;    });&#xA;&#xA;    // Remove obsolete children&#xA;    obsolete.forEach((child) =&amp;gt; container.removeChild(child));&#xA;&#xA;    // (Re-)insert new list of children&#xA;    children.forEach((child, index) =&amp;gt; {&#xA;      if (child !== container.children[index]) {&#xA;        container.insertBefore(child, container.children[index]);&#xA;      }&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s very verbose, with lots of opportunities to introduce bugs. Compared to a simple loop in JSX, this approach seems unreasonable. It is quite efficient as it does minimal work, but it&#39;s definitely a candidate for a utility function or library.&lt;/p&gt; &#xA;&lt;h3&gt;3.3. Drag &amp;amp; Drop&lt;/h3&gt; &#xA;&lt;p&gt;Implementing drag &amp;amp; drop from scratch was challenging, especially regarding browser/device consistency.&lt;/p&gt; &#xA;&lt;p&gt;Using a library would have been a lot more cost-effective initially. However, having a customized implementation paid off once I started introducing animations as both had to be coordinated closely. I can imagine this would have been a difficult problem when using third party code for either.&lt;/p&gt; &#xA;&lt;p&gt;The drag &amp;amp; drop implementation is (again) based on DOM events and integrates well with the remaining architecture. It&#39;s clearly the most complex part of the study but I was able to implement it without changing existing code besides mounting behaviors and adding event handlers.&lt;/p&gt; &#xA;&lt;p&gt;I suspect the drag &amp;amp; drop implementation to have some subtle problems on touch devices, as I haven&#39;t extensively tested them. Using a library for identifying the gestures could be more sensible and would reduce costs in testing browsers and devices.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/AppDraggable.js&#34;&gt;AppDraggable.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/AppSortable.js&#34;&gt;AppSortable.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoList.js&#34;&gt;TodoList.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3.4. Animations&lt;/h3&gt; &#xA;&lt;p&gt;For the final product I wanted smooth animations for most user interactions. This is a cross-cutting concern which was implemented using the &lt;a href=&#34;https://aerotwist.com/blog/flip-your-animations/&#34;&gt;FLIP&lt;/a&gt; technique as devised by &lt;a href=&#34;https://twitter.com/aerotwist&#34;&gt;Paul Lewis&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Implementing FLIP animations without a large refactoring was the biggest challenge of this case study, especially in combination with drag &amp;amp; drop. After days of work I was able to implement the algorithm in isolation and coordinate it with other concerns at the application&#39;s root level. The &lt;code&gt;useCapture&lt;/code&gt; mode of &lt;code&gt;addEventListener&lt;/code&gt; proved to be very useful in this case.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/AppFlip.js&#34;&gt;AppFlip.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/public/scripts/TodoApp.js&#34;&gt;TodoApp.js&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4. Tooling&lt;/h2&gt; &#xA;&lt;p&gt;While no runtime dependencies or build steps were allowed, I did introduce some local tooling to support the development experience.&lt;/p&gt; &#xA;&lt;p&gt;As a quick start, here are the steps to get a local development server up and running:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; (&amp;gt;= 20)&lt;/li&gt; &#xA; &lt;li&gt;Install an IDE (I used &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal in the repository&#39;s directory&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following sections describe the tooling in more detail.&lt;/p&gt; &#xA;&lt;h3&gt;4.1. Local Development Server&lt;/h3&gt; &#xA;&lt;p&gt;Because ES modules are not allowed under the &lt;code&gt;file://&lt;/code&gt; protocol I needed to run a local web server for development. Initially, I used &lt;a href=&#34;https://www.npmjs.com/package/serve&#34;&gt;serve&lt;/a&gt; which was good enough to get going but requires manually reloading the application on every change.&lt;/p&gt; &#xA;&lt;p&gt;Most modern frameworks support &lt;em&gt;hot reloading&lt;/em&gt;, i.e. updating the application in place when changing source files. Hot reloading provides fast feedback during development, especially useful for fine-tuning visuals.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I could not find a local development server supporting some form of hot reloading without introducing a framework or build system, but I was able to implement a minimal local development server (~200 LOC) with the following behavior:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Changes to stylesheets or images will hot replace the changed resources.&lt;/li&gt; &#xA; &lt;li&gt;Other changes (e.g. JavaScript or HTML) will cause a full page reload.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;While it&#39;s not proper &lt;a href=&#34;https://webpack.js.org/concepts/hot-module-replacement/&#34;&gt;hot module replacement&lt;/a&gt; (which requires immense infrastructure), it requires zero changes to the application source and provides a similar experience because page reloads are fast.&lt;/p&gt; &#xA;&lt;p&gt;Note that the local development server is highly experimental and is likely lacking some features to be generally usable. See &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/dev&#34;&gt;/dev&lt;/a&gt; for the implementation. Feedback is highly appreciated.&lt;/p&gt; &#xA;&lt;h3&gt;4.2. Formatting and Linting&lt;/h3&gt; &#xA;&lt;p&gt;Basic code consistency is provided by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prettier.io&#34;&gt;Prettier&lt;/a&gt;,&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eslint.org&#34;&gt;ESLint&lt;/a&gt;, and&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stylelint.io&#34;&gt;stylelint&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I&#39;ve set the ESLint parser to ES2020 to ensure only ES2020 code is allowed. I&#39;ve also added stylelint rules to check for rscss-compatible CSS.&lt;/p&gt; &#xA;&lt;p&gt;Run these commands to try it out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run format-check&lt;/code&gt; to check formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run format&lt;/code&gt; to apply formatting&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run lint&lt;/code&gt; to lint JavaScript&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run lint-styles&lt;/code&gt; to lint CSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These tools only required minimal configuration to be effective. They also integrate well with VSCode so I&#39;ve rarely had to run these manually.&lt;/p&gt; &#xA;&lt;h3&gt;4.3. Testing&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve implemented some end-to-end and unit tests using &lt;a href=&#34;https://playwright.dev/&#34;&gt;Playwright&lt;/a&gt;. This was straightforward besides small details like the &lt;code&gt;*.mjs&lt;/code&gt; extension and the fact that you cannot use named imports when importing from &lt;code&gt;public/scripts&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;While running a local web server (see above), you can run the tests with&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test&lt;/code&gt; for headless tests, or&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test-ui&lt;/code&gt; for interactive mode.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These might ask you to install Playwright; just follow the instructions.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s a lot more to explore here, but it&#39;s not much different from testing other frontend stacks. It&#39;s actually simpler as there was zero configuration and just one dependency.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/test/e2e/addItem.test.mjs&#34;&gt;addItem.test.mjs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/test/unit/util.test.mjs&#34;&gt;util.test.mjs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;4.3.1. Code Coverage&lt;/h4&gt; &#xA;&lt;p&gt;I was able to set up code coverage (at least for end-to-end tests) via &lt;a href=&#34;https://playwright.dev/docs/api/class-coverage&#34;&gt;Playwright&#39;s code coverage feature&lt;/a&gt; and &lt;a href=&#34;https://github.com/bcoe/c8&#34;&gt;c8&lt;/a&gt;. This introduced another dependency and was slightly more involved to get right, e.g. mapping localhost URLs to file URLs.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;npm run test-coverage&lt;/code&gt; to run the tests and produce an LCOV test coverage report in &lt;code&gt;./coverage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note that the implementation is specific to the project structure, e.g. &lt;code&gt;/public&lt;/code&gt; as web root and port &lt;code&gt;8080&lt;/code&gt; are hard-coded.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/scripts/test-coverage.sh&#34;&gt;test-coverage.sh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/test/coverage.mjs&#34;&gt;coverage.mjs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4.4. Pipeline&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve added a simple CI/CD pipeline via GitHub Actions. It runs linters and tests, and deploys to GitHub Pages on success. This was straight-forward and is orthogonal to the application code and other tooling.&lt;/p&gt; &#xA;&lt;p&gt;Reference:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/.github/workflows/pipeline.yml&#34;&gt;pipeline.yml&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;4.5. Debugging&lt;/h3&gt; &#xA;&lt;p&gt;I&#39;ve mostly used &lt;a href=&#34;https://developer.chrome.com/docs/devtools&#34;&gt;Chrome DevTools&lt;/a&gt; for debugging and the experience was fantastic. It feels incredibly &lt;em&gt;immediate&lt;/em&gt; inspecting an application without third-party code or any kind of cruft (e.g. source maps).&lt;/p&gt; &#xA;&lt;h2&gt;5. Assessment&lt;/h2&gt; &#xA;&lt;h3&gt;5.1. User Experience&lt;/h3&gt; &#xA;&lt;p&gt;Most important features from the original TeuxDeux application are implemented and usable:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Daily to-do lists&lt;/li&gt; &#xA; &lt;li&gt;Add/edit/delete to-do items&lt;/li&gt; &#xA; &lt;li&gt;Custom to-do lists&lt;/li&gt; &#xA; &lt;li&gt;Add/edit/delete custom to-do lists&lt;/li&gt; &#xA; &lt;li&gt;Drag &amp;amp; drop to-do items across lists&lt;/li&gt; &#xA; &lt;li&gt;Reorder custom to-do lists via drag &amp;amp; drop&lt;/li&gt; &#xA; &lt;li&gt;Local Storage persistence&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Additionally, most interactions are smoothly animated at 60 frames per second. In particular, dragging and dropping gives proper visual feedback when elements are reordered.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The latter was an improvement over the original application when I started working on the case study in 2019. In the meantime, the TeuxDeux team released an update with a much better drag &amp;amp; drop experience. Great job!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;One notable missing feature is Markdown support. It would be unreasonable to implement Markdown from scratch; this is a valid candidate for using an external library as it is entirely orthogonal to the remaining codebase.&lt;/p&gt; &#xA;&lt;p&gt;The application has been tested on latest Chrome, Firefox, Safari, and Safari on iOS.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO Test more browsers and devices.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;A fresh load of the original TeuxDeux application transfers around &lt;strong&gt;1.2 MB&lt;/strong&gt; and finishes loading at over &lt;strong&gt;1000 ms&lt;/strong&gt;, sometimes up to 2000ms (measured in 12/2023). Reloads finish at around &lt;strong&gt;700 ms&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;With a transferred size of around &lt;strong&gt;55 KB&lt;/strong&gt;, the vanilla application consistently loads in &lt;strong&gt;300-500 ms&lt;/strong&gt;—not minified and with each script, stylesheet and icon served as an individual file. Reloads finish at &lt;strong&gt;100-200 ms&lt;/strong&gt;; again, not optimized at all (with e.g. asset hashing/indefinite caching).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;To be fair, my implementation misses quite a few features from the original. I suspect a fully equivalent clone to be well below 100 KB transfer, though.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;TODO Run more formal performance tests and add figures for the results.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5.2. Code Quality&lt;/h3&gt; &#xA;&lt;p&gt;Unfortunately, it is quite hard to find undisputed, objective measurements for code quality (besides trivialities like code style, linting, etc.). The only generally accepted assessment seems to be peer reviewal.&lt;/p&gt; &#xA;&lt;p&gt;To have at least some degree of assessment of the code&#39;s quality, the following sections summarize relevant facts about the codebase and some opinionated statements based on my experience in the industry.&lt;/p&gt; &#xA;&lt;h4&gt;5.2.1. The Good&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No build steps&lt;/li&gt; &#xA; &lt;li&gt;No external dependencies at runtime besides polyfills &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;No dependency maintenance&lt;/li&gt; &#xA;   &lt;li&gt;No breaking changes to monitor&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Used only standard technologies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Plain HTML, CSS and JavaScript&lt;/li&gt; &#xA;   &lt;li&gt;Standard DOM APIs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Very few concepts introduced: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Mount functions (loosely mapped by CSS class names)&lt;/li&gt; &#xA;   &lt;li&gt;State separated from the DOM&lt;/li&gt; &#xA;   &lt;li&gt;Idempotent updates&lt;/li&gt; &#xA;   &lt;li&gt;Data flow using custom events&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compare the proposed architecture to the API/conceptual surface of Angular or React...&lt;/li&gt; &#xA; &lt;li&gt;Progressive developer experience &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Markup, style, and behavior are orthogonal and can be developed separately.&lt;/li&gt; &#xA;   &lt;li&gt;Adding behavior has little impact on the markup besides adding classes.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Debugging is straight-forward using modern browser developer tools.&lt;/li&gt; &#xA; &lt;li&gt;The app can be naturally enhanced from the outside by handling/dispatching events (just like you can naturally animate some existing HTML).&lt;/li&gt; &#xA; &lt;li&gt;Little indirection&lt;/li&gt; &#xA; &lt;li&gt;Low coupling&lt;/li&gt; &#xA; &lt;li&gt;The result is literally just a bunch of HTML, CSS, and JS files.&lt;/li&gt; &#xA; &lt;li&gt;Straight-forward testing with Playwright (including code coverage)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;All source files (HTML, CSS and JS) combine to &lt;strong&gt;under 3000 lines of code&lt;/strong&gt;, including comments and empty lines.&lt;/p&gt; &#xA;&lt;p&gt;For comparison, prettifying the original TeuxDeux&#39;s minified JS assets yields &lt;strong&gt;81602 LOC&lt;/strong&gt; (12/2023).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;To be fair, my implementation misses quite a few features from the original. I suspect a fully equivalent clone to be well below 10000 LOC, though.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;5.2.2. The Verbose&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stylesheets are a bit verbose. SCSS would help here.&lt;/li&gt; &#xA; &lt;li&gt;Simple components require quite some boilerplate code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;el.querySelectorAll(&#39;:scope ...&#39;)&lt;/code&gt; is somewhat default/expected and would justify a helper.&lt;/li&gt; &#xA; &lt;li&gt;Listening to and dispatching events is slightly verbose.&lt;/li&gt; &#xA; &lt;li&gt;Although not used in this study, event delegation seems hard to implement without code duplication.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Eliminating verbosity through build steps and a minimal set of helpers would reduce the comparably low code size (see above) even further.&lt;/p&gt; &#xA;&lt;h4&gt;5.2.3. The Bad&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Class names share a global namespace.&lt;/li&gt; &#xA; &lt;li&gt;Event names share a global namespace. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Especially problematic for events that bubble up.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;No syntax highlighting or code completion in HTML strings. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be mitigated with &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html&#34;&gt;es6-string-html&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;The separation between base HTML and dynamic rendering is not ideal when compared to JSX, for example.&lt;/li&gt; &#xA; &lt;li&gt;JSX/virtual DOM techniques provide much better development ergonomics.&lt;/li&gt; &#xA; &lt;li&gt;Reconciliation is verbose, brittle and repetitive. I wouldn&#39;t recommend the proposed technique without a well-tested helper function, at least.&lt;/li&gt; &#xA; &lt;li&gt;You have to remember mounting behaviors correctly when creating new elements. It would be helpful to automate this somehow, e.g. watch elements of selector X (at all times) and ensure the desired behaviors are mounted once on them.&lt;/li&gt; &#xA; &lt;li&gt;No type safety. I&#39;ve always been a proponent of dynamic languages but since TypeScript&#39;s type system provides the best of both worlds, I cannot recommend using it enough.&lt;/li&gt; &#xA; &lt;li&gt;We&#39;re effectively locked out of using NPM dependencies that don&#39;t provide browser-ready builds (ES modules or UMD).&lt;/li&gt; &#xA; &lt;li&gt;Most frameworks handle a lot of browser inconsistencies and continuously monitor regressions with extensive test suites. The cost of browser testing is possibly higher when using a vanilla approach.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Besides the issues described above, I believe the codebase is well organized and there are clear paths for bugfixes and feature development. Since there&#39;s no third party code, bugs are easy to find and fix, and there are no dependency limitations to work around.&lt;/p&gt; &#xA;&lt;p&gt;A certain degree of DOM API knowledge is required but I believe this should be a goal for any web developer.&lt;/p&gt; &#xA;&lt;h3&gt;5.3. Generality of Patterns&lt;/h3&gt; &#xA;&lt;p&gt;Assessing the generality of the discovered techniques objectively is not really possible without production usage. From my experience, however, I can&#39;t imagine any scenario where mount functions, event-based data flow etc. are not applicable. The underlying principles power the established frameworks, after all:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;State is separated from the DOM (React, Angular, Vue).&lt;/li&gt; &#xA; &lt;li&gt;Rendering is idempotent and complete (React&#39;s pure &lt;code&gt;render&lt;/code&gt; function).&lt;/li&gt; &#xA; &lt;li&gt;One-way data flow (React)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;An open question is if these patterns hold for library authors. Although not considered during the study, some observations can be made:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The JavaScript itself would be fine to share as ES modules.&lt;/li&gt; &#xA; &lt;li&gt;Event naming needs great care, as dispatching (bubbling) events from imported behaviors can trigger parent listeners in consumer code. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can be mitigated by providing options to prefix or map event names.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;CSS names share a global namespace and need to be managed as well. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Can also be mitigated by prefixing, however making the JavaScript a bit more complex.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;6. Conclusion&lt;/h2&gt; &#xA;&lt;p&gt;The result of this study is a working to-do application with decent UI/UX and most of the functionality of the original TeuxDeux app, built using only standard web technologies. It comes with better overall performance at a fraction of the code size and bandwidth.&lt;/p&gt; &#xA;&lt;p&gt;The codebase seems manageable through a handful of simple concepts, although it is quite verbose and even messy in some areas. This could be mitigated by a small number of helper functions and simple build steps (e.g. SCSS and TypeScript).&lt;/p&gt; &#xA;&lt;p&gt;The study&#39;s method helped discovering patterns and techniques that are at least on par with a framework-based approach for the given subject, without accidentally building a custom framework.&lt;/p&gt; &#xA;&lt;p&gt;A notable exception to the latter is rendering variable numbers of elements in a concise way. I was unable to eliminate the verbosity involved in basic but efficient reconciliation. Further research is needed in this area, but for now this appears to be a valid candidate for a (possibly external) general-purpose utility.&lt;/p&gt; &#xA;&lt;p&gt;When looking at the downsides, remember that all of the individual parts are self-contained, highly decoupled, portable, and congruent to the web platform. The implementation cannot &#34;rust&#34;, by definition, as no dependencies can become out of date.&lt;/p&gt; &#xA;&lt;p&gt;Another thought to be taken with a grain of salt: I believe frameworks make simple tasks even simpler, but hard tasks (e.g. implementing cross-cutting concerns or performance optimizations) often more difficult.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Setting some constraints up-front forced me to challenge my assumptions and preconceptions about vanilla web development. It was quite liberating to avoid general-purpose utilities and get things done with what&#39;s readily available.&lt;/p&gt; &#xA;&lt;p&gt;While I think the study is relatively complete, there&#39;s always more to explore. &lt;a href=&#34;https://github.com/morris/vanilla-todo/issues&#34;&gt;Ideas, questions, bug reports&lt;/a&gt; and pull requests are more than welcome!&lt;/p&gt; &#xA;&lt;p&gt;Finally, this case study does not question using dependencies, libraries or frameworks in general—code sharing is an essential part of software engineering. It was a constrained experiment designed to discover novel methods for vanilla web development and, hopefully, inspire innovation and further research in the area.&lt;/p&gt; &#xA;&lt;h2&gt;7. Beyond Vanilla&lt;/h2&gt; &#xA;&lt;p&gt;As detailed in the assessment, the result of the case study could be significantly improved if build steps and helpers were allowed. Beyond the strict rules I&#39;ve used in this experiment, here are a few ideas I&#39;d like to see explored in the future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Run another case study with TypeScript, SCSS, and build steps (seems promising).&lt;/li&gt; &#xA; &lt;li&gt;Extrapolate deep utility functions (e.g. &lt;code&gt;reconcile()&lt;/code&gt;) to mitigate some of the discovered downsides.&lt;/li&gt; &#xA; &lt;li&gt;Experiment with architectures based on virtual DOM rendering and standard DOM events.&lt;/li&gt; &#xA; &lt;li&gt;Compile discovered rules, patterns and techniques into a comprehensive guide.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Case studies constrained by a set of formal rules are an effective way to find new patterns and techniques in a wide range of domains. I&#39;d love to see similar experiments in the future.&lt;/p&gt; &#xA;&lt;h2&gt;8. Appendix&lt;/h2&gt; &#xA;&lt;h3&gt;8.1. Links&lt;/h3&gt; &#xA;&lt;p&gt;General resources I&#39;ve used extensively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org&#34;&gt;MDN Web Docs&lt;/a&gt; as a reference for DOM APIs&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://caniuse.com&#34;&gt;Can I use...&lt;/a&gt; as a reference for browser support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt; as inspiration for the architecture&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Useful articles regarding FLIP animations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aerotwist.com/blog/flip-your-animations&#34;&gt;FLIP Your Animations (aerotwist.com)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://css-tricks.com/animating-layouts-with-the-flip-technique&#34;&gt;Animating Layouts with the FLIP Technique (css-tricks.com)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/developers-writing/animating-the-unanimatable-1346a5aab3cd&#34;&gt;Animating the Unanimatable (medium.com)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Projects I&#39;ve inspected for drag &amp;amp; drop architecture:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/react-dnd/react-dnd/&#34;&gt;React DnD&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/atlassian/react-beautiful-dnd&#34;&gt;react-beautiful-dnd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bevacqua/dragula&#34;&gt;dragula&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Useful VSCode extensions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&#34;&gt;ESLint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34;&gt;Prettier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=stylelint.vscode-stylelint&#34;&gt;Stylelint&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=Tobermory.es6-string-html&#34;&gt;es6-string-html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;8.2. Response&lt;/h3&gt; &#xA;&lt;h4&gt;10/2020&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Trending on &lt;a href=&#34;https://news.ycombinator.com/item?id=24893247&#34;&gt;Hacker News&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/s/5gcrxh/case_study_on_vanilla_web_development&#34;&gt;Lobsters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/desandro/status/1321095247091433473&#34;&gt;@desandro (Twitter)&lt;/a&gt; (developer for the original TeuxDeux)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.reddit.com/r/javascript/comments/jj10k9/vanillatodo_a_case_study_on_viable_techniques_for/&#34;&gt;Reddit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thanks!&lt;/p&gt; &#xA;&lt;h2&gt;9. Changelog&lt;/h2&gt; &#xA;&lt;h3&gt;12/2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#45-debugging&#34;&gt;debugging section&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Redesigned with CSS variables&lt;/li&gt; &#xA; &lt;li&gt;Added GitHub action for running checks and deployment&lt;/li&gt; &#xA; &lt;li&gt;Edited closing section&lt;/li&gt; &#xA; &lt;li&gt;Updated numbers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;11/2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#4-tooling&#34;&gt;tooling section&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Refactored business logic into pure functional module&lt;/li&gt; &#xA; &lt;li&gt;Added support for &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#431-code-coverage&#34;&gt;code coverage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#41-local-development-server&#34;&gt;local development server&lt;/a&gt; with hot reloading&lt;/li&gt; &#xA; &lt;li&gt;Fixed some visual issues&lt;/li&gt; &#xA; &lt;li&gt;Updated dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;05/2023&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added basic testing&lt;/li&gt; &#xA; &lt;li&gt;Fixed stylelint errors&lt;/li&gt; &#xA; &lt;li&gt;Updated dependencies&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;08/2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Small improvements&lt;/li&gt; &#xA; &lt;li&gt;Fixed date seeking bug on Safari&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;05/2022&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refactored for ES2020&lt;/li&gt; &#xA; &lt;li&gt;Refactored for event-driven communication exclusively&lt;/li&gt; &#xA; &lt;li&gt;Moved original ES5-based version of the study to &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/es5&#34;&gt;/es5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Added assessment regarding library development&lt;/li&gt; &#xA; &lt;li&gt;Added date picker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;01/2021&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Added &lt;a href=&#34;https://raw.githubusercontent.com/morris/vanilla-todo/main/#82-response&#34;&gt;response section&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;10/2020&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Refactored for &lt;code&gt;dataset&lt;/code&gt; &lt;a href=&#34;https://github.com/morris/vanilla-todo/issues/2&#34;&gt;#2&lt;/a&gt; — &lt;a href=&#34;https://github.com/opethrocks&#34;&gt;@opethrocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fixed &lt;a href=&#34;https://github.com/morris/vanilla-todo/issues/3&#34;&gt;#3&lt;/a&gt; (navigation bug) — &lt;a href=&#34;https://github.com/anchepiece&#34;&gt;@anchepiece&lt;/a&gt;, &lt;a href=&#34;https://github.com/jcoussard&#34;&gt;@jcoussard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fixed &lt;a href=&#34;https://github.com/morris/vanilla-todo/issues/4&#34;&gt;#4&lt;/a&gt; (double item creation) — &lt;a href=&#34;https://github.com/n0nick&#34;&gt;@n0nick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Fixed &lt;a href=&#34;https://github.com/morris/vanilla-todo/issues/4&#34;&gt;#1&lt;/a&gt; (bad links) — &lt;a href=&#34;https://github.com/roryokane&#34;&gt;@roryokane&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Initial version&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Asfak00/DSA-learning</title>
    <updated>2023-12-14T01:34:52Z</updated>
    <id>tag:github.com,2023-12-14:/Asfak00/DSA-learning</id>
    <link href="https://github.com/Asfak00/DSA-learning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;It is a document repository. I&#39;m learning DSA so I created this repository to note down all the things, that might benefit many others. In this repository, I have tried to cover all the important topics of data structures and algorithms.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome To DSA Learning&lt;/h1&gt; &#xA;&lt;h4&gt;Here is the all chapter that we will learn in this docs&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Big O Notation&lt;/li&gt; &#xA; &lt;li&gt;Recursion &lt;/li&gt; &#xA; &lt;li&gt;Linear Search &lt;/li&gt; &#xA; &lt;li&gt;Binary Search &lt;/li&gt; &#xA; &lt;li&gt;Bubble Sort &lt;/li&gt; &#xA; &lt;li&gt;Selection Sort &lt;/li&gt; &#xA; &lt;li&gt;Insertion Sort &lt;/li&gt; &#xA; &lt;li&gt;Stack&lt;/li&gt; &#xA; &lt;li&gt;Queue&lt;/li&gt; &#xA; &lt;li&gt;Linked List&lt;/li&gt; &#xA; &lt;li&gt;Binary Tree&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Algorithms&lt;/h1&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Big O Notation&lt;/h2&gt; &amp;gt; Big-O notation হচ্ছে আমাদের কোনো একটা function এর ইনপুট বাড়ার সাথে সাথে কতটা টাইম কমপ্লেক্সিটি ও কতটা স্পেস কমপ্লেক্সিটি হচ্ছে সেটা নির্ণয় করা। এটি একটি টুল যার সাহায্যে কোনো একটা অ্যালগরিদমের রানটাইমের উপর ভিত্তি করে টাইম কমপ্লেক্সিটি বের করা যায়। Big O notation কোনো অ্যালগরিদমের টাইম কমপ্লেক্সিটি ও কতটা স্পেস কমপ্লেক্সিটি নির্ণয় করতে ব্যবহৃত হয়, তাদের মধ্যে বৃদ্ধির হার হিসেবে প্রকাশিত হয়। উদাহরণস্বরূপ, O(1), O(log n), O(n), O(n log n), O(n^2) ইত্যাদি। &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Big-O notation এর মাধ্যমে আমাদের প্রতিনিয়ত ব্যবহৃত কয়েকটা জাভাস্কিপ্ট মেথত এর টাইম কমপ্লেসিটি ও স্পেস কমপ্লেসিটি নির্ণয় করি&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;=&amp;gt; &lt;b&gt;Big O(n)&lt;/b&gt; - যখন কোনো ইনপুট আমাদের অনিশ্চিত থাকে ( মানে কতগুলো ইনপুট অথবা ভেলু থাকতে পারে অথবা আউটপুট আসতে পারে আমরা জানি না ) তখন আমরা সেটাকে n হিসেবে নেই, এবং যে সকল মেথডের টাইম কমপ্লেক্সিটি আমরা নির্ণয় করার সময় এইরকম ভাবে অনিশ্চিত ইনপুট আসতে পারে পাই সেগুলোকে আমরা Big O(n) বলি।&lt;/p&gt; &#xA;&lt;p&gt;=&amp;gt; &lt;b&gt;Big O(1)&lt;/b&gt; - যখন কোনো ইনপুট আমাদের নিশ্চিত থাকে ( মানে আমরা জানি যে ওইটা শুধুমাত্র একটা আউটপুট দিবে আমাদের কন্ডিশন অনুযায়ী ) তখন আমরা সেটাকে 1 ধরি, এবং যে সকল মেথডের টাইম কমপ্লেক্সিটি আমরা নির্ণয় করার সময় এইরকম ভাবে নিশ্চিত ইনপুট আসতে পারে পাই সেগুলোকে আমরা Big O(1) বলি।&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;h2&gt;Object&lt;/h2&gt; &#xA; &lt;li&gt;Object.keys - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( এটায় Big O(n) কারণ একটি object এ অনেক keys তাকতে পারে এটা বলা মুশকিল যে ওই object এর মধ্যে মোট কতটি entries তাকবে, তাই আমরা ধরে নিলাম যে একটা n ইনপুটে থাকবে এবং সেই n এ যত ইচ্ছা দেওয়া হবে তাই এটা n এর উপর ডিপেন্ডেড এবং এর জন্যই এটা Big O(n) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;Object.entries - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( same as object.keys )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;Object.values - &lt;b&gt;Big O(n)&lt;/b&gt;&lt;p&gt;( same as object.keys )&lt;/p&gt;&lt;/li&gt; &#xA; &lt;li&gt;Object.hasOwnProperty - &lt;b&gt;Big O(1)&lt;/b&gt; &lt;p&gt;( এটায় Big O(1) কারণ আমরা যখন কোনো property সার্চ করবো তখন তো আমরা একটা value ই পাবো এবং এর জন্যই এটা Big O(1) )&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;h2&gt;Array&lt;/h2&gt; &#xA; &lt;li&gt;push, pop - &lt;b&gt;Big O(1)&lt;/b&gt; &lt;p&gt;( এটায় Big O(1) কারণ একটি array তে আমরা যখন push or pop এর মাধ্যমে কোনো element যুক্ত করি তখন সেই element টি ওই array এর শেষের দিকে যুক্ত হয় অথবা ডিলিট হয়, যার জন্য কোনো element এর ইনডেক্স পরিবর্তন করতে হয় না এবং এর জন্যই এটা Big O(1) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;shift, unshift - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( এটায় Big O(n) কারণ একটি array তে আমরা যখন shift or unshift এর মাধ্যমে কোনো element যুক্ত করি তখন সেই element টি ওই array এর শুরুর দিকে যুক্ত হয় অথবা ডিলিট হয়, যার জন্য আগের element দের ইনডেক্স পরিবর্তন করতে হয়। তাই এখানে n বার নতুন element যুক্ত হতে পারে যার জন্যই এটা Big O(n) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;search - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( এটায় Big O(n) কারণ একটি array তে কতগুলো value তাকবে তা বলা যাবে না এবং আমরা যদি ওই array তে কোনো কিছু search করি তাহলে আমাদের ওই array তে থাকা প্রতিটি element এর মধ্যে দিয়ে খুজতে হবে আমাদের কাংকিত element টিকে এবং সেটা n তম বার ও হতে পারে যার জন্যই এটা Big O(n) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;access - &lt;b&gt;Big O(1)&lt;/b&gt; &lt;p&gt;( এটায় Big O(1) কারণ একটি array থেকে আমরা যখন কোনো একটা element access করতে চাই তার index এর মাধ্যমে তখন কিন্তু আমরা সরাসরি ওই element টাকে access করতে পারি এবং সেটা একটি element হয় যার জন্যই এটা Big O(1) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;forEach - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( এটায় Big O(n) কারণ একটি forEach এ কতগুলো ইনপুট আসবে সেটা আমরা জানি না। এখন সেটা অনেক বড় কোনো ইনপুট হতে পারে আবার ছোটও হতে পারে তার জন্যই এটা Big O(n) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;map - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( এটায় Big O(n) কারণ একটি map এ কতগুলো ইনপুট আসবে সেটা আমরা জানি না। এখন সেটা অনেক বড় কোনো ইনপুট হতে পারে আবার ছোটও হতে পারে তার জন্যই এটা Big O(n) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;filter - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( এটায় Big O(n) কারণ একটি filter এ কতগুলো ইনপুট আসবে সেটা আমরা জানি না। এখন সেটা অনেক বড় কোনো ইনপুট হতে পারে আবার ছোটও হতে পারে তার জন্যই এটা Big O(n) )&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;reduce - &lt;b&gt;Big O(n)&lt;/b&gt; &lt;p&gt;( এটায় Big O(n) কারণ একটি reduce এ কতগুলো ইনপুট আসবে সেটা আমরা জানি না। এখন সেটা অনেক বড় কোনো ইনপুট হতে পারে আবার ছোটও হতে পারে তার জন্যই এটা Big O(n) )&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Recursion &lt;/h2&gt; &amp;gt; Recursion বিষয়টি হচ্ছে কোনো একটা প্রবলেমকে ভেঙ্গে ভেঙ্গে করাকে বুঝায়। Recursion এর মাধ্যমে আমরা কোনো একটা প্রবলেম normal way তে যেভাবে করে যেমন output পাই ঠিক তেমনি output পাবো Recursion way তে করার মাধ্যমে শুধু পরিবর্তনটি হবে আমরা যখন Recursion way তে কোড করবো তখন আমরা ধাপে ধাপে একটা প্রবলেম সল্ভ করবো। &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Searching Algorithms&lt;/h1&gt; &#xA;&lt;h2&gt;Linear Search&lt;/h2&gt; &amp;gt; Lineasr Search বিষয়টি হচ্ছে কোনো একটা স্পেসিফিক জায়গা থেকে কোনো একটা জিনিস খুজে দিবে এবং খুজে দেয়ার পর সেখান থেকে চলে আসবে। তার মানে হচ্ছে আমরা বলে দিবো যে এই জায়গা থেকে আমাকে তুমি এই জিনিসটা এনে দাও linear search বিষয়টি হচ্ছে এইরকম। &#xA;&lt;h2&gt;Binary Search&lt;/h2&gt; &amp;gt; binary search আমাদের টাইম কমপ্লেক্সিটি অনেক কমিয়ে দেয় এবং আমরা যে এলিমেন্ট খুজতে চাচ্ছি সেটা খুব সহজে বের করতে পারি। binary search করতে হলে আমাদের আগে আমাদের যে array টি থাকবে সেটাকে ascending order এ সাজাতে হবে এবং পরে সেটার উপর সার্চ করতে পারবো। &#xA;&lt;br&gt; &#xA;&lt;p&gt;তাহলে চলেন নিচের ইমেজের মাধ্যমে আরো ভালোভাবে বুঝার চেষ্টা করি।&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://scaler.com/topics/images/binary-search2.webp&#34; alt=&#34;example image&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;binary search এ আমরা তিনটি পয়েন্ট করি প্রথমে এবং সেই পয়েন্ট অনুসারে আমাদের যেই এলিমেন্ট খুজছি সেটা পাবো।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;পয়েন্ট গুলো হচ্ছে,&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start Point&lt;/li&gt; &#xA; &lt;li&gt;Middle Point&lt;/li&gt; &#xA; &lt;li&gt;End Point&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;উপরের তিনটি পয়েন্টের মাধ্যমে আমরা খুব কম সময়ের মধ্যে আমদের যেই এলিমেন্ট খুজছি সেটা খুজে পাবো।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;এখানে প্রসেসটি হচ্ছে এইরকম, আমরা প্রথমে সিলেক্ট করবো যে আমাদের start point কোনটি তারপর সিলেক্ট করবো আমাদের middle point কোনটি এবং শেষে সিলেক্ট করবো আমাদের end point কোনটি। এইগুলো সিলেক্ট হয়ে গেলে আমরা কন্ডিশন এর মাধ্যমে খুজে দেখবো যে আমাদের কাংক্ষিত এলিমেন্ট কি middle এর চেয়ে বড় নাকি ছোট ? যদি বড় হয় তাহলে আমরা সেই middle এলিমেন্ট এর পরের সব এলিমেন্ট বাদ দিয়ে দিবো কারণ আমাদের array টি তো ascending order এ সাজানো তাই না ? এবং যেহেতু আমাদের কাংক্ষিত এলিমেন্টটি middle এলিমেন্ট এর চেয়ে ছোট তাই আমরা middle এর আগের সব এলিমেন্ট এর উপর এখন search চালাবো এবং আমরা আমাদের start, middle, end point গুলো পরিবর্তন করে ফেলবো এভাবে যে আমাদের আগের middle point যেটা ছিলো সেটা হবে এখন end point এবং যেহেতু আমরা শেষের গুলো বাদ দিয়ে প্রথম দিকের এলিমেন্ট গুলোর উপর search করছি তাই আমদের আর start point পরিবর্তন করতে হবে না তাই middle point and end point পরিবর্তন করবো। এবং ওইখানে দেখবো যে এখন যেটা middle এলিমেন্ট আছে সেটা কি আমাদের কাংক্ষিত এলিমেন্ট এর চেয়ে ছোট নাকি বড় ছোট হলে তো আগের মতই পরিবর্তন করবো আর বড় হলে ও এবং যদি মিলে যায় তাহলে তো আমাদের output পেয়ে যাচ্ছি ( so now you can chill মজা করলাম )।&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;মুলত এইভাবেই binary search করা হয়। আর picture তো যুক্ত করে দিলামই যাতে আপনারা নিজে আর ভালো বুঝতে পারেন আমার বুঝানোর চেয়ে।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Sorting Algorithms&lt;/h1&gt; &amp;gt; sorting slgorithms হচ্ছে কোনো একটা array কে ascending order এ কিংবা descending order এ সাজানোর জন্য ( ছোট থেকে বড় কিংবা বড় থেকে ছোট )। আমরা এই sorting algorithms এর মধ্যে অনেকগুলো algorithms পাই জেগুলো ব্যবহার করে খুব সহজে যেকোনো array sort করতে পারবো। নিচে কিছু দেয়া হলো, &#xA;&lt;h2&gt;Bubble Sort&lt;/h2&gt; &amp;gt; bubble sort এর মাধ্যমে আমরা একটি array এর ২টি value নিয়ে নিয়ে তাদের মধ্যে compare করে দেখবো যে প্রথম value এর চেয়ে দ্বিতীয় value বড় নাকি ছোট যদি বড় হয় তাহলে আমরা swape করবো value গুলোকে, যেমন আমাদের প্রথম value বড় হলো দ্বিতীয় value এর চেয়ে তাহলে তো আমরা বুঝতে পারছি যে আমাদের ডান পাশের value টি হচ্ছে ছোট value এবং তাকে বাম পাশে আনতে হবে এবং বাম পাশের value কে ডান পাশে দিতে হবে। এভাবেই চেক করে করে আমরা bubble sorting করবো। এবং আরেকটা কথা হচ্ছে আমরা যখন সর্বশেষ লাস্ট বড় এলিমেন্ট পেয়ে যাব তখন দ্বিতীয় বার আর ওই লাস্ট এলিমেন্টকে বাম পাশের এলিমেন্ট দ্বারা চেক করবো না এবং এভাবেই চেকিং হবে। &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;নিচে কয়েকটি স্টেপের মাধ্যমে আর ক্লিয়ার করার চেষ্টা করেছি&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://www.programiz.com/sites/tutorial2program/files/Bubble-sort-0.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://www.programiz.com/sites/tutorial2program/files/Bubble-sort-1.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://www.programiz.com/sites/tutorial2program/files/Bubble-sort-2.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://www.programiz.com/sites/tutorial2program/files/Bubble-sort-3.png&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;আমি একটা ওয়েবসাইটের লিংক দিচ্ছি যেটাতে গেলে আপনি একটি ভিডিওর মাধ্যমে আরো ভাবে বুঝতে পারবেন যে operation টি হচ্ছে কেমনে।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://visualgo.net/en/sorting&#34;&gt;https://visualgo.net/en/sorting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Selection Sort&lt;/h2&gt; &amp;gt; Selection Sort বিষয়টি হচ্ছে একদম bubble sort এর মতই শুধু পরিবর্তনটি হচ্ছে আমরা bubble sorting এ তিনটি পয়েন্ট ধরতাম এবং সেগুলো দিয়ে array টি sort করতাম, কিন্তু selection sorting এ আমরা শুধুমাত্র একটি পয়েন্ট ধরবো যেটা হচ্ছে একটা lowest number এবং আমরা চেক করবো যে আমাদের lowest number কি তার পাশের number এর চেয়ে বড় ? যদি বড় হয় তাহলে তো আমাদের পাশের number টিকে lowest number এর ইনডেক্সে আনতে হবে কেননা ওই পাশের number টাই তো ছোট number এবং সেটা lowest number এর জায়গায় আসলে তবেই তো sorting টি হবে ছোট থেকে বড় হয়ে। এবং সংখ্যাটিকে আনার জন্য তো আমাদের swape করতে হবে তাই না ? আমরা swape করবো টিক যেভাবে bubble sort এ swape করেছিলাম ঠিক ওইভাবে। &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;আপনাদের বুঝার জন্য নিচে picture যুক্ত করেছি এবং একটি video ও যুক্ত করে দিয়েছি যাতে আপানারা খুব সহজে বিষয়টি বুঝতে পারেন।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://scaler.com/topics/images/selection-sort-example.webp&#34;&gt; &#xA;&lt;br&gt; video link - https://visualgo.net/en/sorting &#xA;&lt;h2&gt;Insertion Sort&lt;/h2&gt; &amp;gt; Insertion Sort ঠিক selection sort এর মতই কিন্তু এখানে পরিবর্তনটি হচ্ছে, আমরা selection sorting এ বাম পাশের number এর সাথে ডান পাশের number এর ছোট এবং বড় কি না সেটা চেক করতাম। কিন্তু insertion sorting এ আমরা একই ভাবে ডান পাশের টার সাথে ছোট বড় চেক করবো কিন্তু যদি ডান পাশের number টি বাম পাশের number এত ছোট হয় যে সেটাকে আমার আর ২ ইনডেক্স সামনে আনার প্রয়োজন হচ্ছে তখন insertion sort এ backword cheking করা হয় এবং ওই number এর সঠিক পজিশনে পৌঁচে দেওয়া হয়। এবং insetion sorting এ আমরা এইভাবে চেকিং করতে করতে সামনের দিকে এগুতে থাকি আর এইরকম পরিস্তিতির সম্মুখীন হলে backword checking এর মাধ্যমে ওই number টির সঠিক পজিশনে নেয়া হয়। &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;আপনাদের বুঝার জন্য নিচে picture যুক্ত করেছি এবং একটি video ও যুক্ত করে দিয়েছি যাতে আপানারা খুব সহজে বিষয়টি বুঝতে পারেন।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://www.boardinfinity.com/blog/content/images/2022/11/Your-paragraph-text--1-.jpg&#34;&gt; &#xA;&lt;br&gt; video link - https://visualgo.net/en/sorting &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Data Structure &lt;/h1&gt; &amp;gt; Data Structure হচ্ছে একটি ওয়েবসাইটে আমাদের যত প্রয়োজনীয় ডাটা আছে সেগুলোকে খুব সুন্দর ভাবে সাজিয়ে রাখার মাধ্যম। ডাটা গুলো সুন্দর করে সাজিয়ে রাখলে পরবর্তীতে যখন আমি ওই ডাটাটি খুজতে যাবো অথবা ডাটাটি আপডেট করতে যাবো তখন আমার অন্য কোথাও খুজতে হবে না কারণ আমি জানি যে আমি এই ফাইলের মধ্যে ডাটাটি রেখেছি এবং তখন সরাসরি ওই ফাইলে যাবো এবং ডাটাটি নিয়ে আসতে পারবো। আর এটাই হচ্ছে data structure. &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &amp;gt; stack এর একটি প্রিন্সিপাল রয়েছে এবং সেটা হচ্ছে (LIFO). &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;L = Last&lt;/li&gt; &#xA; &lt;li&gt;I = In&lt;/li&gt; &#xA; &lt;li&gt;F = First&lt;/li&gt; &#xA; &lt;li&gt;O = Out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;এক কথায়, Last In First Out বলা হয়েছে এখানে। যেটার মানে হচ্ছে যে সবার শেষে আসবে সে সবার প্রথমে বেরিয়ে যাবে এবং যে সবার প্রথমে আসবে সে সবার শেষে বেরিয়ে যাবে। &lt;br&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ওকে, জিনিসটা আর ক্লিয়ার করি একটি ইমেজের মাধ্যমে.........&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://static.javatpoint.com/ds/images/lifo-approach-in-data-structure1.jpg&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;এখানে ইমেজটি লক্ষ করুন, আমি যখন প্লেট রাখছিলাম তখন একটার উপর একটা এভাবে রাখছিলাম এবং আমি সব প্লেট রেখে দিয়েছি। পরে আমার আম্মু বললো যে উনাকে একটা প্লেট এনে দিতে, তো আমি গিয়ে উপরে যে প্লেটটি আছে সেটি নিয়ে এসে উনাকে দিবো তাই না ? হে, কারণ আমি চাইবো না যে নিচ থেকে একটা প্লেট এনে দেই কারণ সে ক্ষেত্রে পুরো প্লেটের স্তুবটি ভেঙ্গে যেতে পারে এবং না ভাঙ্গলে ও এতো কষ্ট নিয়ে আসবো না আমি। তাহলে এখানে ঘটনা কি হলো ? আমি যেই প্লেটটি সবার প্রথমে রেখেছিলাম সেটা নিচে রয়ে গেলো এবং যেই প্লেটটি সবার শেষে রেখেছিলাম সেটা উপরে রয়ে গেলো এবং আমি যখন প্লেট নিতে আসছি তখন ওই উপরের প্লেটটি নিয়ে গেছি। তাহলে আমাদের LIFO এর প্রমাণ হয়ে গেলো।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Queue&lt;/h2&gt; &amp;gt; Queue এর একটি প্রিন্সিপাল রয়েছে এবং সেটা হচ্ছে (FIFO). &#xA;&lt;br&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;F = First&lt;/li&gt; &#xA; &lt;li&gt;I = In&lt;/li&gt; &#xA; &lt;li&gt;F = First&lt;/li&gt; &#xA; &lt;li&gt;O = Out&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;এক কথায়, First In First Out বলা হয়েছে এখানে। যেটার মানে হচ্ছে যে প্রথমে আসবে সে প্রথমে বেরিয়ে যাবে এবং যে শেষে আসবে সে শেষে বেরিয়ে যাবে।&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://www.javascripttutorial.net/wp-content/uploads/2016/08/JavaScript-Queue-Illustration.png&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;এখানে ইমেজটি লক্ষ করুন, ইমেজে ২টি পার্ট রয়েছে একটা হচ্ছে front এবং আরেকটা হচ্ছে back. তো আমরা যে ডাটা গুলো insert(যুক্ত করবো) সেগুলো back পার্ট দিয়ে যুক্ত হবে এবং যখন আমরা সেই ডাটাটি get(পেতে চাইবো) তখন front পার্ট দিয়ে বেরিয়ে আসবে। এবং অবশ্যই সেক্ষেত্রে আমরা সে ডাটা আগে যুক্ত করবো সেটা আগে বেরিয়ে আসবে এবং সেটা পরে যুক্ত করবো সেটা পরে বেরিয়ে আসবে। তাহলে আমাদের FIFO এর প্রমাণ হয়ে গেলো।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Linked List&lt;/h2&gt; &amp;gt; Linked List যেহেতু অনেক বড় একটি টপিক তাই আমি এই টপিক এর জন্য আলাদাভাবে আরেকটি রিপোজিটরি তৈরি করেছি এবং সেখানে Linked List নিয়ে খুব ভালোভাবে আলোচনা করার চেষ্টা করেছি এবং নিচে সেই রিপোজিটরির লিংক দিয়েছি, &#xA;&lt;p&gt;&lt;b&gt;Repository Link - &lt;/b&gt; &lt;a href=&#34;https://github.com/Asfak00/linked-list-full-explained&#34;&gt;https://github.com/Asfak00/linked-list-full-explained&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Binary Tree&lt;/h1&gt; &amp;gt; যে ট্রি এর নোডগুলোতে সর্বোচ্চ দুইটি child থাক্কে পার তাকে বাইনারি ট্রি বলা হয়। নোডগুলোতে লিঙ্কড লিস্টের মোট এর বা একাধিক ডেটা স্টোর করার ফিল্ড/ভেরিয়েবল থাকতে পারে। আর থাকবে এই নোডের left child এবং right child এর মেমরি এড্রেস। যার মাধ্যমে এদেরকে অ্যাক্সেস করা যায়। &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://1.bp.blogspot.com/-uwvGSZsq50I/VRlxk1gEMhI/AAAAAAAAAMc/PdGGP_jpowI/s1600/binary%2Btree.gif&#34; alt=&#34;reference image&#34;&gt; &#xA;&lt;br&gt; &#xA;&lt;b&gt;Binary Tree হচ্ছে ৩ প্রকারঃ&lt;/b&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Full Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Complete Binary Tree&lt;/li&gt; &#xA; &lt;li&gt;Perfect Binary Tree&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Full Binary Tree&lt;/h3&gt; &amp;gt; এমন একটা বাইনারি ট্রি যার নোডগুলোতে ০ থেকে ২ টি child থাকতে পারে। অর্থাৎ কোনও নোডে একটা child থাকলে সেটা full binary tree হবে না। একে proper binary tree, strictly binary tree বা plane binary tree বলা হয়। &#xA;&lt;h3&gt;Complete Binary Tree&lt;/h3&gt; &amp;gt; যে বাইনারি ট্রি এর শেষ লেভেল বাদে বাকি সব লেভেল সম্পূর্ণ ভাবে child দ্বারা পূর্ণ তাকে Complete Binary Tree বলে। অর্থাৎ সবগুলো নোডেই দুটি করে child আছে এবং শেষের লেভেলের ক্ষেত্রে নোডগুলো fill up হতে হবে একদম বাম বাশ থেকে। বামের দিকের কোনো একটা নোডের জায়গা ফাঁকা রেখে ডান দিকে নোড যুক্ত করলে তাকে Complete Binary Tree বলা যাবে না। &#xA;&lt;h3&gt;Perfect Binary Tree&lt;/h3&gt; &amp;gt; যেই বাইনারি ট্রি এর প্রত্যেকটি inteior node দুটি child থাকে এবং সকল leaf এর depth ও level একই হবে। &#xA;&lt;br&gt; &#xA;&lt;img src=&#34;https://3.bp.blogspot.com/-j894yCMSzk4/VRl6aBTepEI/AAAAAAAAAMs/Tjx5oVqZ9oE/s1600/binary%2Btree.gif&#34; alt=&#34;reference image&#34;&gt; &#xA;&lt;h2&gt;Binary Search Tree - Add Node&lt;/h2&gt; &amp;gt; আমরা জানি যে আমাদের binary tree তে একটি root রয়েছে। এবং সেই root এর under এ left এবং right রয়েছে। আর binary tree এর left এ থাকা সব node কিন্তু ছোট হয়ে থাকে এবং right এ থাকা সব node বড় হয়ে থাকে। তাই আমরা যে নতুন node যুক্ত করতে চাচ্ছি যেটা বড় হলে right এ পাঠিয়ে দিবো আর ছোট হলে left এ পাঠিয়ে দিবো। এখন প্রথমে আমাদের চেক করতে হবে যে আমাদের tree তে আধো কোনো root আছে কি না কারণ শুরুর দিকে তো আমাদের কোনো root থাকবে না তাহলে আমাদের প্রথমে root তৈরি করতে হবে। এবং সেজন্যই আমরা চেক করবো যে আমাদের কোনো root আছে কি না যদি না থাকে তাহলে আমরা যে নতুন node যুক্ত করতে চাচ্ছি সেটাকে বানিয়ে দিবো root। আর যদি আমাদের tree তে root থেকে থাকে তাহলে আমরা চেক করবো যে আমরা যে নতুন node যুক্ত করতে চাচ্ছি সেটি কি আমাদের root এর চেয়ে বড় নাকি ছোট। যদি ছোট হয় তাহলে নতুন node কে পাঠিয়ে দিবো left এর দিকে আর যদি বড় হয় তাহলে নতুন node কে পাঠিয়ে দিবো right এর দিকে। এখন যখন নতুন node left অথবা right এ যাবে তখন ওইখানে ও তো left এবং right থাকবে। তাহলে আমরা যখন বুঝে যাবো যে আমাদের নতুন node আমাদের root এর চেয়ে বড় নাকি ছোট তখন তো left অথবা right এ পাঠাবো এবং যেদিকেই পাঠাই না কেনো ওইদিকে যাওয়ার আগে আবার চেক করবো যে অইখানে কোনো node আছে নাকি যদি না থাকে তাহলে সরাসরি ওইখানে আমাদের নতুন node বসিয়ে দিবো আর যদি থেকে থাকে তাহলে আমরা আমাদের আগের যে root ছিলো সেটাকে করে দিবো এখন এইখানে থাকা node কে এবং আবার চেক করবো যে এই root এর চেয়ে বড় নাকি ছোট আমাদের নতুন node টি এবং এভাবেই আমাদের node যুক্ত করার প্রসেস চলতে থাকবে এবং ঠিক সেইম ভাবেই right এর দিকে ও। &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;নিচে কোড দেওয়া হলো এবং সাথে কমেন্ট করে বুঝানো হলো কোন লাইন কি কাজ করছে।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// add node in binary tree&#xA;&#xA;// এখানে একটি টেম্পলেট তৈরি করা হলো নতুন node এর জন্য যাতে পরবর্তীতে যেকোনো জায়গায় ব্যবহার করা যায়।&#xA;class Node {&#xA;  constructor(value) {&#xA;    this.leftChid = null;&#xA;    this.rightChild = null;&#xA;    this.value = value;&#xA;  }&#xA;}&#xA;&#xA;class BinaryTree {&#xA;  constructor() {&#xA;    this.root = null;&#xA;  }&#xA;&#xA;  // add method&#xA;  addNode(value) {&#xA;    // নতুন node একটি variable এ রাখা হলো।&#xA;    let newNode = new Node(value);&#xA;&#xA;    // চেক করা হলো যদি root null হয়ে থাকে তাহলে আমাদের root হয়ে যাবে নতুন যে node যুক্ত করতে চাচ্ছি সেটি। আর null না হলে else চলবে।&#xA;    if (this.root === null) {&#xA;      this.root = newNode;&#xA;    } else {&#xA;      // currentRoot variable এর মধ্যে আমাদের tree এর যে root রয়েছে তাকে রাখলাম।&#xA;      let currentRoot = this.root;&#xA;&#xA;      // এখানে একটি বুলিয়ান value রাখলাম যাতে পরবর্তীতে প্রোগ্রাম রান ব্রেক করতে পারি।&#xA;      let added = false;&#xA;&#xA;      // while loop চলবে যদি আমাদের added true না হয় এবং যদি currentRoot null না হয় তাহলে।&#xA;      while (!added &amp;amp;&amp;amp; currentRoot) {&#xA;        // যদি আমাদের নতুন node আমাদের tree এর currentRoot এর value এর চেয়ে ছোট হয় তাহলে&#xA;        if (value &amp;lt; currentRoot.value) {&#xA;          // যদি আমাদের currentRoot এর left এ কোনো node না থাকে তাহলে&#xA;          if (currentRoot.leftChid === null) {&#xA;            // currentRoot এর left সমান হয়ে যাবে আমাদের নতুন node&#xA;            currentRoot.leftChid = newNode;&#xA;&#xA;            // added কে true করে দিলাম কারণ আমরা নতুন node যুক্ত করে নিলে তো আমাদের আর এই প্রোগ্রাম চালানোর প্রয়োজন নাই তাই।&#xA;            added = true;&#xA;          }&#xA;          // যদি আমাদের currentRoot এর left এ কোনো node থাকে তাহলে&#xA;          else {&#xA;            // এখন আমাদের currentRoot হয়ে যাবে currenRoot এ থাকা left&#xA;            currentRoot = currentRoot.leftChid;&#xA;          }&#xA;        }&#xA;        // যদি আমাদের নতুন node আমাদের tree এর currentRoot এর value থেকে বড় হয় তাহলে&#xA;        else if (value &amp;gt; currentRoot.value) {&#xA;          // যদি আমাদের currentRoot এর right এ কোনো node না থাকে তাহলে&#xA;          if (currentRoot.rightChild === null) {&#xA;            // currentRoot এর right সমান হয়ে যাবে আমাদের নতুন node&#xA;            currentRoot.rightChild = newNode;&#xA;&#xA;            // added কে true করে দিলাম কারণ আমরা নতুন node যুক্ত করে নিলে তো আমাদের আর এই প্রোগ্রাম চালানোর প্রয়োজন নাই তাই।&#xA;            added = true;&#xA;          }&#xA;          // যদি আমাদের currentRoot এর right এ কোনো node থাকে তাহলে&#xA;          else {&#xA;            // এখন আমাদের currentRoot হয়ে যাবে currenRoot এ থাকা right&#xA;            currentRoot = currentRoot.rightChild;&#xA;          }&#xA;        }&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Binary Search Tree - Search Node&lt;/h2&gt; &amp;gt; binary tree তে আমরা যেহেতু জানি যে root থেকে left এর দিকে যেসব সংখ্যা থাকবে সেগুলো সব ছোট হবে root এর চেয়ে এবং right এর দিকে যেসব সংখ্যা থাকবে সেগুলো সব বড় হবে root এর চেয়ে তাহলে আমাদের এখানে search করা খুবই সহজ হয়ে গেছে। আমরা প্রথমে চেক করে নিবো আমাদের root আছে কি না যদি থাকে তাহলে বাকি কাজ করবো না হলে সেখানেই রিটার্ন করে দিবো null। আর যদি থাকে তাহলে আমরা যে node টি খুজতে চাচ্ছি সেটা দিয়ে চেক করবো যে আমাদের root এর চেয়ে বড় নাকি ছোট ওই নতুন value টি যদি বড় হয় তাহলে তো আমরা left এর দিকে যাবো না কারণ আমরা জানি ওইদিকে শুধু ছোট সংখ্যাই আছে আমরা যাবো right এর দিকে এবং সেদিকেই আমাদের search node পেয়ে যাবো আর যদি ছোট হয় তাহলে তো left এর দিকে যাবো। ব্যাস এই সিম্পল কাজ আর কিছু না এবং যখন আমাদের search node পেয়ে যাবো তখন সেটা রিটার্ন করে দিবো। &#xA;&lt;br&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ওকে নিচে কোড দেওয়া হলো এবং সাথে কমেন্ট করে দেওয়া হলো কোন লাইন কি করছে।&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// searching node in binary tree&#xA;findNode(value) {&#xA;    // চেক করা হচ্ছে যদি আমাদের tree তে কোনো node ই না থাকে তাহলে null রিটার্ন করবে।&#xA;    if (!this.root) {&#xA;      return null;&#xA;    }&#xA;&#xA;    // আমাদের বর্তমান root কে একটি variable এর মধ্যে রাখলাম।&#xA;    let currentRoot = this.root;&#xA;&#xA;    // আমাদের root যদি থাকে তাহলে এই while loop চলবে।&#xA;    while (currentRoot) {&#xA;&#xA;      // চেক করা হচ্ছে যে আমাদের currentRoot এর যে value আছে যেটা কি আমরা যে node খুজছি সেটার সাথে মিলে?&#xA;      if (currentRoot.value === value) {&#xA;        // মিলে গেলে আমাদের search node এই currentRoot তাই সেটা রিটার্ন করে দিচ্ছি।&#xA;        return currentRoot;&#xA;      }&#xA;      // চেক করা হচ্ছে আমরা যে node খুজছি সেটা কি আমাদের currentRoot এর value এর থেকে ছোট।&#xA;      else if (value &amp;lt; currentRoot.value) {&#xA;        // ছোট হলে আমাদের currentRoot করে দিবো currentRoot এ থাকা left কে কারণ আমরা জানি যে আমাদের সব ছোট সংখ্যা রয়েছে left এর দিকে।&#xA;        currentRoot = currentRoot.leftChid;&#xA;      } else {&#xA;        // আর বড় হলে আমাদের currentRoot করে দিবো currentRoot এর right কে কারণ ওইদিকে সব বড় সংখ্যা রয়েছে।&#xA;        currentRoot = currentRoot.rightChild;&#xA;      }&#xA;    }&#xA;  }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>