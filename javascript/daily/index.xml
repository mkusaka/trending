<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-19T01:37:58Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LinkedInLearning/javascript-essential-training-2832077</title>
    <updated>2023-01-19T01:37:58Z</updated>
    <id>tag:github.com,2023-01-19:/LinkedInLearning/javascript-essential-training-2832077</id>
    <link href="https://github.com/LinkedInLearning/javascript-essential-training-2832077" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is for the Linkedin Learning course: JavaScript Essential Training&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Essential Training&lt;/h1&gt; &#xA;&lt;p&gt;This is the repository for the LinkedIn Learning course JavaScript Essential Training. The full course is available from &lt;a href=&#34;https://www.linkedin.com/learning/javascript-essential-training&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://cdn.lynda.com/course/2832077/2832077-1610728160487-16x9.jpg&#34; alt=&#34;JavaScript Essential Training&#34;&gt; JavaScript is a scripting language of the web. As the web evolves from a static to a dynamic environment, technology focus is shifting from static markup and styling—frequently handled by content management systems or automated scripts—to dynamic interfaces and advanced interaction. Once seen as optional, JavaScript is now becoming an integral part of the web, infusing every layer with its script.&lt;/p&gt; &#xA;&lt;p&gt;Through practical examples and mini-projects, this course helps you build your understanding of JavaScript piece by piece, from core principles like variables, data types, conditionals, and functions through advanced topics including loops, and DOM scripting. Along the way, instructor Morten Rand-Hendriksen provides challenges that allow you to put your new skills to the test.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;This repository does not have any branches. Download the entire repository and you get the exercise files in their final state.&lt;/p&gt; &#xA;&lt;p&gt;Each folder corresponds with a movie with an exercise file. The naming convention is &lt;code&gt;CHAPTER#_MOVIE#&lt;/code&gt;. As an example, the folder named &lt;code&gt;02_03&lt;/code&gt; corresponds to the second chapter and the third video in that chapter.&lt;/p&gt; &#xA;&lt;p&gt;Some movies will have a beginning and an end state. In the exercise files, the end-state for a movie is marked with an &lt;code&gt;e&lt;/code&gt; for &#34;end&#34; as in &lt;code&gt;02_03e&lt;/code&gt;. This folder contains the code as it is at the end of the movie.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To use these exercise files, you must have the following installed: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A code editor (&lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; is recommended)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34;&gt;Prettier code formatter extension&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint&#34;&gt;ESLint extension&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;From the root folder, open the terminal and enter the command &lt;code&gt;nmp install&lt;/code&gt; to install dependencies.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Instructor&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Morten Rand-Hendriksen&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Web Designer and Developer&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check out my other courses on &lt;a href=&#34;https://www.linkedin.com/learning/instructors/morten-rand-hendriksen?u=104&#34;&gt;LinkedIn Learning&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mjmlio/mjml</title>
    <updated>2023-01-19T01:37:58Z</updated>
    <id>tag:github.com,2023-01-19:/mjmlio/mjml</id>
    <link href="https://github.com/mjmlio/mjml" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MJML: the only framework that makes responsive-email easy&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MJML 4&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re looking for MJML 3.3.X check &lt;a href=&#34;https://github.com/mjmlio/mjml/tree/3.3.x&#34;&gt;this branch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center;&#34;&gt; &lt;a href=&#34;https://mjml.io&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;250&#34; src=&#34;https://mjml.io/assets/img/litmus/mjmlbymailjet.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center;&#34;&gt; &lt;a href=&#34;https://github.com/mjmlio/mjml/actions&#34;&gt; &lt;img src=&#34;https://github.com/mjmlio/mjml/workflows/Mjml%20CI/badge.svg?branch=master&#34; alt=&#34;github actions&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.codacy.com/app/gbadi/mjml&#34;&gt; &lt;img src=&#34;https://api.codacy.com/project/badge/grade/575339cb861f4ff4b0dbb3f9e1759c35&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center;&#34;&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mjmlio/mjml/master/#translated-documentation&#34;&gt;Translated documentation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mjmlio/mjml/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mjmlio/mjml/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/b&gt; | &lt;b&gt;&lt;a href=&#34;https://raw.githubusercontent.com/mjmlio/mjml/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/b&gt; | &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Translated documentation&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Link for documentation&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;日本語&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/mjmlio/mjml/raw/master/readme-ja.md&#34;&gt;日本語ドキュメント&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Introduction&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;MJML&lt;/code&gt; is a markup language created by &lt;a href=&#34;https://www.mailjet.com/&#34;&gt;Mailjet&lt;/a&gt; and designed to reduce the pain of coding a responsive email. Its semantic syntax makes the language easy and straightforward while its rich standard components library shortens your development time and lightens your email codebase. MJML’s open-source engine takes care of translating the &lt;code&gt;MJML&lt;/code&gt; you wrote into responsive HTML.&lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center;&#34;&gt; &lt;a href=&#34;https://mjml.io&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;75%&#34; src=&#34;https://cloud.githubusercontent.com/assets/6558790/12450760/ee034178-bf85-11e5-9dda-98d0c8f9f8d6.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;MJML&lt;/code&gt; with &lt;code&gt;NPM&lt;/code&gt; to use it with NodeJS or the Command Line Interface. If you&#39;re not sure what those are, head over to &lt;a href=&#34;https://raw.githubusercontent.com/mjmlio/mjml/master/#usage&#34;&gt;Usage&lt;/a&gt; for other ways to use MJML.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install mjml&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;p&gt;To work on MJML, make changes and create merge requests, download and install &lt;a href=&#34;https://yarnpkg.com/lang/en/docs/install/&#34;&gt;yarn&lt;/a&gt; for easy development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/mjmlio/mjml.git &amp;amp;&amp;amp; cd mjml&#xA;yarn&#xA;yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run &lt;code&gt;yarn build:watch&lt;/code&gt; to rebuild the package as you code.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Online&lt;/h2&gt; &#xA;&lt;p&gt;Don&#39;t want to install anything? Use the free online editor!&lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center;&#34;&gt; &lt;a href=&#34;https://mjml.io/try-it-live&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/6558790/12195421/58a40618-b5f7-11e5-9ed3-80463874ab14.png&#34; alt=&#34;try it live&#34; width=&#34;75%&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Applications and plugins&lt;/h2&gt; &#xA;&lt;p&gt;MJML comes with an ecosystem of tools and plugins, check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://mjmlio.github.io/mjml-app/&#34;&gt;MJML App&lt;/a&gt; (MJML is included)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mjmlio/vscode-mjml&#34;&gt;Visual Studio Code plugin&lt;/a&gt; (MJML is included)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://atom.io/users/mjmlio&#34;&gt;Atom plugin&lt;/a&gt; (MJML needs to be installed separately)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packagecontrol.io/packages/MJML-syntax&#34;&gt;Sublime Text plugin&lt;/a&gt; (MJML needs to be installed separately)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more tools, check the &lt;a href=&#34;https://mjml.io/community&#34;&gt;Community&lt;/a&gt; page.&lt;/p&gt; &#xA;&lt;h2&gt;Command line interface&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Compiles the file and outputs the HTML generated in &lt;code&gt;output.html&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mjml input.mjml -o output.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass optional &lt;code&gt;arguments&lt;/code&gt; to the CLI and combine them.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;argument&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mjml -m [input]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Migrates a v3 MJML file to the v4 syntax&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mjml [input] -o [output]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Writes the output to [output]&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mjml [input] -s&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Writes the output to &lt;code&gt;stdout&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mjml -w [input]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Watches the changes made to &lt;code&gt;[input]&lt;/code&gt; (file or folder)&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mjml [input] --config.beautify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Beautifies the output (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;mjml [input] --config.minify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Minifies the output (&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/mjmlio/mjml/raw/master/packages/mjml-cli/README.md&#34;&gt;mjml-cli documentation&lt;/a&gt; for more information about config options.&lt;/p&gt; &#xA;&lt;h2&gt;Inside Node.js&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import mjml2html from &#39;mjml&#39;&#xA;&#xA;/*&#xA;  Compile an mjml string&#xA;*/&#xA;const htmlOutput = mjml2html(`&#xA;  &amp;lt;mjml&amp;gt;&#xA;    &amp;lt;mj-body&amp;gt;&#xA;      &amp;lt;mj-section&amp;gt;&#xA;        &amp;lt;mj-column&amp;gt;&#xA;          &amp;lt;mj-text&amp;gt;&#xA;            Hello World!&#xA;          &amp;lt;/mj-text&amp;gt;&#xA;        &amp;lt;/mj-column&amp;gt;&#xA;      &amp;lt;/mj-section&amp;gt;&#xA;    &amp;lt;/mj-body&amp;gt;&#xA;  &amp;lt;/mjml&amp;gt;&#xA;`, options)&#xA;&#xA;&#xA;/*&#xA;  Print the responsive HTML generated and MJML errors if any&#xA;*/&#xA;console.log(htmlOutput)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can pass optional &lt;code&gt;options&lt;/code&gt; as an object to the &lt;code&gt;mjml2html&lt;/code&gt; function:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;option&lt;/th&gt; &#xA;   &lt;th&gt;unit&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;   &lt;th&gt;default value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fonts&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;Default fonts imported in the HTML rendered by MJML&lt;/td&gt; &#xA;   &lt;td&gt;See in &lt;a href=&#34;https://github.com/mjmlio/mjml/raw/master/packages/mjml-core/src/index.js#L100-L108&#34;&gt;index.js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;keepComments&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Option to keep comments in the HTML output&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ignoreIncludes&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Option to ignore mj-includes&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beautify&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Option to beautify the HTML output&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minify&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;Option to minify the HTML output&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;validationLevel&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Available values for the &lt;a href=&#34;https://github.com/mjmlio/mjml/tree/master/packages/mjml-validator#validating-mjml&#34;&gt;validator&lt;/a&gt;: &#39;strict&#39;, &#39;soft&#39;, &#39;skip&#39;&lt;/td&gt; &#xA;   &lt;td&gt;&#39;soft&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filePath&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Path of file, used for relative paths in mj-includes&lt;/td&gt; &#xA;   &lt;td&gt;&#39;.&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;preprocessors&lt;/td&gt; &#xA;   &lt;td&gt;array of functions&lt;/td&gt; &#xA;   &lt;td&gt;Preprocessors applied to the xml before parsing. Input must be xml, not json. Functions must be (xml: string) =&amp;gt; string&lt;/td&gt; &#xA;   &lt;td&gt;[]&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;juicePreserveTags&lt;/td&gt; &#xA;   &lt;td&gt;Preserve some tags when inlining css, see &lt;a href=&#34;https://github.com/mjmlio/mjml/raw/master/packages/mjml-cli/README.md&#34;&gt;mjml-cli documentation&lt;/a&gt; for more info&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;minifyOptions&lt;/td&gt; &#xA;   &lt;td&gt;Options for html minifier, see &lt;a href=&#34;https://github.com/mjmlio/mjml/raw/master/packages/mjml-cli/README.md&#34;&gt;mjml-cli documentation&lt;/a&gt; for more info&lt;/td&gt; &#xA;   &lt;td&gt;NA&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mjmlConfigPath&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;The path or directory of the &lt;code&gt;.mjmlconfig&lt;/code&gt; file (for custom components use)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;process.cwd()&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useMjmlConfigOptions&lt;/td&gt; &#xA;   &lt;td&gt;Allows to use the &lt;code&gt;config&lt;/code&gt; attribute from &lt;code&gt;.mjmlconfig&lt;/code&gt; file&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Client-side (in browser)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var mjml2html = require(&#39;mjml-browser&#39;)&#xA;&#xA;/*&#xA;  Compile a mjml string&#xA;*/&#xA;var htmlOutput = mjml2html(`&#xA;  &amp;lt;mjml&amp;gt;&#xA;    &amp;lt;mj-body&amp;gt;&#xA;      &amp;lt;mj-section&amp;gt;&#xA;        &amp;lt;mj-column&amp;gt;&#xA;          &amp;lt;mj-text&amp;gt;&#xA;            Hello World!&#xA;          &amp;lt;/mj-text&amp;gt;&#xA;        &amp;lt;/mj-column&amp;gt;&#xA;      &amp;lt;/mj-section&amp;gt;&#xA;    &amp;lt;/mj-body&amp;gt;&#xA;  &amp;lt;/mjml&amp;gt;&#xA;`, options)&#xA;&#xA;&#xA;/*&#xA;  Print the responsive HTML generated and MJML errors if any&#xA;*/&#xA;console.log(htmlOutput)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;A free-to-use MJML API is available to make it easy to integrate MJML in your application. Head over &lt;a href=&#34;https://mjml.io/api&#34;&gt;here&lt;/a&gt; to learn more about the API.&lt;/p&gt; &#xA;&lt;h1&gt;MJML Slack&lt;/h1&gt; &#xA;&lt;p&gt;MJML wouldn&#39;t be as cool without its amazing community. Head over the &lt;a href=&#34;https://join.slack.com/t/mjml/shared_invite/zt-gqmwfwmr-kPBnfuuB7wof5httaTcXxg&#34;&gt;Community Slack&lt;/a&gt; to meet fellow MJML&#39;ers.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iRyusa&#34;&gt;Maxime&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ngarnier&#34;&gt;Nicolas&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmcb777&#34;&gt;Cedric&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lohek&#34;&gt;Loeck&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robink&#34;&gt;Robin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GuillaumeBadi&#34;&gt;Guillaume&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/meriadec&#34;&gt;Meriadec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/arnaudbreton&#34;&gt;Arnaud&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hteumeuleu&#34;&gt;HTeuMeuLeu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/epayet&#34;&gt;Emmanuel Payet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/swibge&#34;&gt;Matthieu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rogierslag&#34;&gt;Rogier&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>actualbudget/actual-server</title>
    <updated>2023-01-19T01:37:58Z</updated>
    <id>tag:github.com,2023-01-19:/actualbudget/actual-server</id>
    <link href="https://github.com/actualbudget/actual-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Actual&#39;s server&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is the main project to run &lt;a href=&#34;https://github.com/actualbudget/actual&#34;&gt;Actual&lt;/a&gt;, a local-first personal finance tool. It comes with the latest version of Actual, and a server to persist changes and make data available across all devices.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/pRYNYr4W5A&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Non-technical users&lt;/h2&gt; &#xA;&lt;p&gt;We are working on simpler one-button click deployments of Actual. This will reduce the friction for people not as comfortable with the command line. Some non-official options are listed at the bottom.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s very easy to get started. Clone this repo, install deps, and start it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/actualbudget/actual-server.git&#xA;cd actual-server&#xA;yarn install&#xA;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://localhost:5006&#34;&gt;https://localhost:5006&lt;/a&gt; in your browser and you&#39;ll see Actual.&lt;/p&gt; &#xA;&lt;h2&gt;Running via Docker&lt;/h2&gt; &#xA;&lt;p&gt;To run using a Docker container you can use following commands;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/actualbudget/actual-server.git&#xA;cd actual-server&#xA;docker build -t actual-server .&#xA;docker run -p 5006:5006 actual-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploying&lt;/h2&gt; &#xA;&lt;p&gt;You should deploy your server so it&#39;s always running. We recommend &lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt; which makes it incredibly easy and provides a free plan.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt; allows running the application directly and provides a free tier. You should be comfortable with using the command line to set it up though.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fly.io/app/sign-in&#34;&gt;Create an account&lt;/a&gt;. Although you are required to enter payment details, everything we do here will work on the free tier and you won&#39;t be charged.&lt;/p&gt; &#xA;&lt;p&gt;Next, &lt;a href=&#34;https://fly.io/docs/flyctl/installing/&#34;&gt;install the &lt;code&gt;flyctl&lt;/code&gt;&lt;/a&gt; utility. Run &lt;code&gt;flyctl auth login&lt;/code&gt; to sign into your account.&lt;/p&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;fly.template.toml&lt;/code&gt; to &lt;code&gt;fly.toml&lt;/code&gt;. Open &lt;code&gt;fly.toml&lt;/code&gt; and customize the app name on the first line of the file.&lt;/p&gt; &#xA;&lt;p&gt;Now, run &lt;code&gt;flyctl launch&lt;/code&gt; from &lt;code&gt;actual-server&lt;/code&gt;. You should have a running app now!&lt;/p&gt; &#xA;&lt;p&gt;Whenever you want to update Actual, update the versions of &lt;code&gt;@actual-app/api&lt;/code&gt; and &lt;code&gt;@actual-app/web&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; and run &lt;code&gt;flyctl deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using a custom Docker setup&lt;/h3&gt; &#xA;&lt;p&gt;Actual is also available as a Docker image ready to be run in your own custom environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker Hub: &lt;code&gt;jlongster/actual-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github Registry: &lt;code&gt;ghcr.io/actualbudget/actual-server&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Persisting server data&lt;/h3&gt; &#xA;&lt;p&gt;One problem with the above setup is every time you deploy, it will wipe away all the data on the server. You&#39;ll need to bootstrap the instance again and upload your files.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s move the data somewhere that persists. With &lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt; we can create a &lt;a href=&#34;https://fly.io/docs/reference/volumes/&#34;&gt;volume&lt;/a&gt;. Run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flyctl volumes create actual_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we need to tell Actual to use this volume. Add this in &lt;code&gt;fly.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[mounts]&#xA;  source=&#34;actual_data&#34;&#xA;  destination=&#34;/data&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Actual will automatically check if the &lt;code&gt;/data&lt;/code&gt; directory exists and use it automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;You can also configure the data dir with the &lt;code&gt;ACTUAL_USER_FILES&lt;/code&gt; environment variable.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;One-click hosting solutions&lt;/h3&gt; &#xA;&lt;p&gt;These are non-official methods of one-click solutions for running Actual. If you provide a service like this, feel free to open a PR and add it to this list. These run Actual via a Docker image.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PikaPods: &lt;a href=&#34;https://www.pikapods.com/pods?run=actual&#34;&gt;Run on PikaPods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring the server URL&lt;/h2&gt; &#xA;&lt;p&gt;The Actual app is totally separate from the server. In this project, they happen to both be served by the same server, but the app doesn&#39;t know where the server lives.&lt;/p&gt; &#xA;&lt;p&gt;The server could live on a completely different domain. You might setup Actual so that the app and server are running in completely separate places.&lt;/p&gt; &#xA;&lt;p&gt;Since Actual doesn&#39;t know what server to use, the first thing it does is asks you for the server URL. If you are running this project, simply click &#34;Use this domain&#34; and it will automatically fill it in with the current domain. This works because we are serving the app and server in the same place.&lt;/p&gt;</summary>
  </entry>
</feed>