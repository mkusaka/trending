<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-22T01:32:03Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>faisalman/ua-parser-js</title>
    <updated>2023-09-22T01:32:03Z</updated>
    <id>tag:github.com,2023-09-22:/faisalman/ua-parser-js</id>
    <link href="https://github.com/faisalman/ua-parser-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;UAParser.js - Detect Browser, Engine, OS, CPU, and Device type/model from User-Agent &amp; Client-Hints data. Supports browser &amp; node.js environment.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/faisalman/ua-parser-js/gh-pages/images/logo.png&#34; width=&#34;256&#34; height=&#34;256&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/ua-parser-js&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/ua-parser-js?color=red&amp;amp;logo=npm&amp;amp;label=NPM%20DOWNLOADS&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdelivr.com/package/npm/ua-parser-js&#34;&gt;&lt;img src=&#34;https://img.shields.io/jsdelivr/gh/hw/faisalman/ua-parser-js?logo=jsdelivr&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/faisalman/ua-parser-js&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/faisalman/ua-parser-js?color=yellow&amp;amp;logo=github&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/package/ua-parser-js@1.0.35&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/ua-parser-js?logo=hackthebox&amp;amp;logoColor=white&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/faisalman/ua-parser-js/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/faisalman/ua-parser-js?color=purple&amp;amp;logo=githubsponsors&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/ua-parser-js&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/ua-parser-js.svg?logo=npm&amp;amp;color=red&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cdnjs.com/libraries/UAParser.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/cdnjs/v/UAParser.js.svg?color=orange&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/ossf-scorecard/github.com/faisalman/ua-parser-js?label=openssf%20scorecard&amp;amp;style=for-the-badge&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;UAParser.js&lt;/h1&gt; &#xA;&lt;p&gt;JavaScript library to detect Browser, Engine, OS, CPU, and Device type/model from User-Agent &amp;amp; Client-Hints data that can be used either in browser (client-side) or node.js (server-side).&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Author : Faisal Salman &amp;lt;&lt;a href=&#34;mailto:f@faisalman.com&#34;&gt;f@faisalman.com&lt;/a&gt;&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;Demo : &lt;a href=&#34;https://faisalman.github.io/ua-parser-js&#34;&gt;https://faisalman.github.io/ua-parser-js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Source : &lt;a href=&#34;https://github.com/faisalman/ua-parser-js&#34;&gt;https://github.com/faisalman/ua-parser-js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation : &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;v1 : &lt;a href=&#34;https://github.com/faisalman/ua-parser-js/tree/1.0.35#documentation&#34;&gt;https://github.com/faisalman/ua-parser-js/tree/1.0.35#documentation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;v2 : &lt;a href=&#34;https://faisalman.github.io/ua-parser-js-docs/v2&#34;&gt;https://faisalman.github.io/ua-parser-js-docs/v2&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;From Our Sponsors:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td colspan=&#34;2&#34;&gt; &lt;a href=&#34;https://opencollective.com/ua-parser-js&#34;&gt;â†— Become a sponsor&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Version 2.0&lt;/h1&gt; &#xA;&lt;p&gt;What&#39;s new &amp;amp; breaking, please read &lt;a href=&#34;https://raw.githubusercontent.com/faisalman/ua-parser-js/master/changelog.md&#34;&gt;CHANGELOG&lt;/a&gt; before upgrading.&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;h3&gt;&lt;code&gt;UAParser([user-agent:string][,extensions:object][,headers:object(since@2.0)]):IData&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;In browser environment you don&#39;t need to pass the user-agent string to the function, as it should automatically get the string from the &lt;code&gt;window.navigator.userAgent&lt;/code&gt;. Whereas in nodejs environment, the user-agent string must be passed in order for the function to work (usually you can find the user-agent in: &lt;code&gt;request.headers[&#34;user-agent&#34;]&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Constructor&lt;/h2&gt; &#xA;&lt;h4&gt;* &lt;code&gt;new UAParser([user-agent:string][,extensions:object][,headers:object(since@2.0)]):UAParser&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;UAParser&lt;/code&gt; with the &lt;code&gt;new&lt;/code&gt; keyword, &lt;code&gt;UAParser&lt;/code&gt; will return a new instance with an empty result object, you have to call one of the available methods to get the information from the user-agent string. Like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let parser = new UAParser(&#34;your user-agent here&#34;); // you need to pass the user-agent for nodejs&#xA;console.log(parser); // {}&#xA;let parserResults = parser.getResult();&#xA;console.log(parserResults);&#xA;/* &#xA;  {&#xA;    ua      : &#34;&#34;,&#xA;    browser : {},&#xA;    engine  : {},&#xA;    os      : {},&#xA;    device  : {},&#xA;    cpu     : {}&#xA;  } &#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;UAParser([user-agent:string][,extensions:object][,headers:object(since@2.0)]):IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;When you call &lt;code&gt;UAParser&lt;/code&gt; without the &lt;code&gt;new&lt;/code&gt; keyword, it will automatically call &lt;code&gt;getResult()&lt;/code&gt; function and return the parsed results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns result object `{ ua: &#39;&#39;, browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;UAParser&lt;/code&gt;:&lt;/h2&gt; &#xA;&lt;h4&gt;Methods table&lt;/h4&gt; &#xA;&lt;p&gt;The methods are self explanatory, here&#39;s a small overview on all the available methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getResult()&lt;/code&gt; - returns all function object calls, user-agent string, browser info, cpu, device, engine, os: &lt;code&gt;{ ua: &#39;&#39;, browser: {}, cpu: {}, device: {}, engine: {}, os: {} }&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getBrowser()&lt;/code&gt; - returns the browser name and version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getDevice()&lt;/code&gt; - returns the device model, type, vendor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getEngine()&lt;/code&gt; - returns the current browser engine name and version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getOS()&lt;/code&gt; - returns the running operating system name and version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getCPU()&lt;/code&gt; - returns CPU architectural design name.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;getUA()&lt;/code&gt; - returns the user-agent string.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;setUA(ua)&lt;/code&gt; - set a custom user-agent to be parsed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;* &lt;code&gt;getResult():IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns `{ ua: &#39;&#39;, browser: {}, cpu: {}, device: {}, engine: {}, os: {} }`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;getBrowser():IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns `{ name: &#39;&#39;, version: &#39;&#39; }`&#xA;&#xA;# Possible &#39;browser.name&#39;:&#xA;2345Explorer, 360 Browser, Amaya, Android Browser, Arora, Avant, Avast, AVG,&#xA;BIDUBrowser, Baidu, Basilisk, Blazer, Bolt, Brave, Bowser, Camino, Chimera,&#xA;[Mobile] Chrome [Headless/WebView], Chromium, Cobalt, Comodo Dragon, Dillo,&#xA;Dolphin, Doris, DuckDuckGo, Edge, Electron, Epiphany, Facebook, Falkon, Fennec, &#xA;Firebird, [Mobile] Firefox [Focus/Reality], Flock, Flow, GSA, GoBrowser, HeyTap,&#xA;Huawei Browser, ICE Browser, IE, IEMobile, IceApe, IceCat, IceDragon, Iceweasel, &#xA;Instagram, Iridium, Iron, Jasmine, Kakao[Story/Talk], K-Meleon, Kindle, Klar, &#xA;Konqueror, LBBROWSER, Line, LinkedIn, Links, Lunascape, Lynx, MIUI Browser, &#xA;Maemo Browser, Maemo, Maxthon, MetaSr Midori, Minimo, Mosaic, Mozilla, NetFront, &#xA;NetSurf, Netfront, Netscape, NokiaBrowser, Obigo, Oculus Browser, OmniWeb, &#xA;Opera Coast, Opera [Mini/Mobi/Tablet], PaleMoon, PhantomJS, Phoenix, Polaris, &#xA;Puffin, QQ, QQBrowser, QQBrowserLite, Quark, QupZilla, RockMelt, [Mobile] Safari, &#xA;Sailfish Browser, Samsung Browser, SeaMonkey, Silk, Skyfire, Sleipnir, Slim, &#xA;SlimBrowser, Snapchat, Swiftfox, Tesla, TikTok, Tizen Browser, UCBrowser, &#xA;UP.Browser, Viera, Vivaldi, Waterfox, WeChat, Weibo, Yandex, baidu, iCab, w3m, &#xA;Whale Browser, ...&#xA;&#xA;# &#39;browser.version&#39; determined dynamically&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;getDevice():IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns `{ model: &#39;&#39;, type: &#39;&#39;, vendor: &#39;&#39; }`&#xA;&#xA;# Possible &#39;device.type&#39;:&#xA;console, mobile, tablet, smarttv, wearable, embedded&#xA;&#xA;##########&#xA;# NOTE: &#39;desktop&#39; is not a possible device type. &#xA;# UAParser only reports info directly available from the UA string, which is not the case for &#39;desktop&#39; device type.&#xA;# If you wish to detect desktop devices, you must handle the needed logic yourself.&#xA;# You can read more about it in this issue: https://github.com/faisalman/ua-parser-js/issues/182&#xA;##########&#xA;&#xA;# Possible &#39;device.vendor&#39;:&#xA;Acer, Alcatel, Amazon, Apple, Archos, ASUS, AT&amp;amp;T, BenQ, BlackBerry, Dell,&#xA;Essential, Facebook, Fairphone, GeeksPhone, Google, HP, HTC, Huawei, Infinix, Jolla, &#xA;Kobo, Lenovo, LG, Meizu, Microsoft, Motorola, Nexian, Nintendo, Nokia, Nvidia, &#xA;OnePlus, OPPO, Ouya, Palm, Panasonic, Pebble, Polytron, Realme, RIM, Roku, Samsung, &#xA;Sharp, Siemens, Sony[Ericsson], Sprint, Tecno, Tesla, Vivo, Vodafone, Xbox, Xiaomi, &#xA;Zebra, ZTE, ...&#xA;&#xA;# &#39;device.model&#39; determined dynamically&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;getEngine():IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns `{ name: &#39;&#39;, version: &#39;&#39; }`&#xA;&#xA;# Possible &#39;engine.name&#39;&#xA;Amaya, Blink, EdgeHTML, Flow, Gecko, Goanna, iCab, KHTML, LibWeb, Links, Lynx, &#xA;NetFront, NetSurf, Presto, Tasman, Trident, w3m, WebKit&#xA;&#xA;# &#39;engine.version&#39; determined dynamically&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;getOS():IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns `{ name: &#39;&#39;, version: &#39;&#39; }`&#xA;&#xA;# Possible &#39;os.name&#39;&#xA;AIX, Amiga OS, Android[-x86], Arch, Bada, BeOS, BlackBerry, CentOS, Chromium OS,&#xA;Contiki, Fedora, Firefox OS, FreeBSD, Debian, Deepin, DragonFly, elementary OS, &#xA;Fuchsia, Gentoo, GhostBSD, GNU, Haiku, HarmonyOS, HP-UX, Hurd, iOS, Joli, KaiOS, &#xA;Linpus, Linspire,Linux, Mac OS, Maemo, Mageia, Mandriva, Manjaro, MeeGo, Minix, &#xA;Mint, Morph OS, NetBSD, NetRange, NetTV, Nintendo, OpenBSD, OpenVMS, OS/2, Palm, &#xA;PC-BSD, PCLinuxOS, Plan9, PlayStation, QNX, Raspbian, RedHat, RIM Tablet OS, &#xA;RISC OS, Sabayon, Sailfish, SerenityOS, Series40, Slackware, Solaris, SUSE, Symbian, &#xA;Tizen, Ubuntu, Unix, VectorLinux, Viera, watchOS, WebOS, Windows [Phone/Mobile], &#xA;Zenwalk, ...&#xA;&#xA;# &#39;os.version&#39; determined dynamically&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;getCPU():IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns `{ architecture: &#39;&#39; }`&#xA;&#xA;# Possible &#39;cpu.architecture&#39;&#xA;68k, amd64, arm[64/hf], avr, ia[32/64], irix[64], mips[64], pa-risc, ppc, sparc[64]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;getUA():string&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;returns user-agent string of current instance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;setUA(ua:string):UAParser&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;set user-agent string to be parsed&#xA;returns current instance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;code&gt;IData&lt;/code&gt;: &lt;code&gt;since@2.0&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h4&gt;Methods table&lt;/h4&gt; &#xA;&lt;p&gt;The methods are self explanatory, here&#39;s a small overview on all the available methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;is(value)&lt;/code&gt; - returns &lt;code&gt;true&lt;/code&gt; if the passed value matches a value of current object, &lt;code&gt;false&lt;/code&gt; otherwise&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;toString()&lt;/code&gt; - returns the full-name values of current object as a string&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;withClientHints()&lt;/code&gt; - returns an object with re-updated data from client hints&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;withFeatureCheck()&lt;/code&gt; - returns an object with re-updated data from feature detection&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;* &lt;code&gt;is(value:string):boolean&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Is just a shorthand comparison to check whether the value of specified item equals one of its properties (in a case-insensitive way)&#xA;// so that instead of write it using `==` operator like this:&#xA;&#xA;let ua = UAParser();&#xA;let device = ua.device;&#xA;let os = ua.os;&#xA;&#xA;if (device.type == &#34;mobile&#34; &amp;amp;&amp;amp; os.name != &#34;iOS&#34;) {}&#xA;if (device.type == &#34;smarttv&#34; || device.vendor == &#34;Samsung&#34;) {}&#xA;&#xA;// we can also write the comparison above into as follow:&#xA;&#xA;if (device.is(&#34;mobile&#34;) &amp;amp;&amp;amp; !os.is(&#34;iOS&#34;)) {}&#xA;if (device.is(&#34;SmartTV&#34;) || device.is(&#34;SaMsUnG&#34;)) {}&#xA;&#xA;/*&#xA;    For device, properties will be checked in this particular order: type, model, vendor&#xA;*/&#xA;&#xA;// Another examples:&#xA;&#xA;let uap = new UAParser(&#39;Mozilla/5.0 (Mobile; Windows Phone 8.1; Android 4.0; ARM; Trident/7.0; Touch; rv:11.0; IEMobile/11.0; NOKIA; Lumia 635) like iPhone OS 7_0_3 Mac OS X AppleWebKit/537 (KHTML, like Gecko) Mobile Safari/537&#39;);&#xA;&#xA;uap.getBrowser().name;              // &#34;IEMobile&#34;&#xA;uap.getBrowser().is(&#34;IEMobile&#34;);    // true&#xA;uap.getCPU().is(&#34;ARM&#34;);             // true&#xA;&#xA;uap.getOS().name;                   // &#34;Windows Phone&#34;&#xA;uap.getOS().is(&#34;Windows Phone&#34;);    // true&#xA;&#xA;uap.getDevice();                    // { vendor: &#34;Nokia&#34;, model: &#34;Lumia 635&#34;, type: &#34;mobile&#34; }&#xA;uap.getResult().device;             // { vendor: &#34;Nokia&#34;, model: &#34;Lumia 635&#34;, type: &#34;mobile&#34; }&#xA;&#xA;let device = uap.getDevice();&#xA;device.is(&#34;mobile&#34;);                // true&#xA;device.is(&#34;Lumia 635&#34;);             // true&#xA;device.is(&#34;Nokia&#34;);                 // true&#xA;device.is(&#34;iPhone&#34;);                // false&#xA;uap.getResult().device.is(&#34;Nokia&#34;); // true&#xA;uap.getResult().device.model;       // &#34;Lumia 635&#34;&#xA;&#xA;uap.setUA(&#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36&#34;);&#xA;&#xA;let browser = uap.getBrowser();&#xA;browser.is(&#34;IEMobile&#34;);             // false &#xA;browser.is(&#34;Chrome&#34;);               // true&#xA;&#xA;uap.getResult().browser.is(&#34;Edge&#34;); // false&#xA;uap.getResult().os.name             // &#34;Mac OS&#34;&#xA;uap.getResult().os.is(&#34;Mac OS&#34;);    // true&#xA;uap.getResult().os.version;         // &#34;10.6.8&#34;&#xA;&#xA;let engine = uap.getEngine();&#xA;engine.is(&#34;Blink&#34;);                 // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;toString():string&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Retrieve full-name values as a string&#xA;&#xA;/*&#xA;    Values will be concatenated following this pattern:&#xA;    * browser : name + version&#xA;    * cpu : architecture &#xA;    * device : vendor + model&#xA;    * engine : name + version&#xA;    * os : name + version&#xA;*/&#xA;&#xA;// Usage examples&#xA;&#xA;let uap = new UAParser(&#39;Mozilla/5.0 (Mobile; Windows Phone 8.1; Android 4.0; ARM; Trident/7.0; Touch; rv:11.0; IEMobile/11.0; NOKIA; Lumia 635) like iPhone OS 7_0_3 Mac OS X AppleWebKit/537 (KHTML, like Gecko) Mobile Safari/537&#39;);&#xA;&#xA;uap.getDevice();                    // { &#xA;                                    //    vendor: &#34;Nokia&#34;, &#xA;                                    //    model: &#34;Lumia 635&#34;, &#xA;                                    //    type: &#34;mobile&#34;&#xA;                                    // }&#xA;uap.getDevice().toString();         // &#34;Nokia Lumia 635&#34;&#xA;&#xA;uap.getResult().os.name;            // &#34;Windows Phone&#34;&#xA;uap.getResult().os.version;         // &#34;8.1&#34;&#xA;uap.getResult().os.toString();      // &#34;Windows Phone 8.1&#34;&#xA;&#xA;uap.setUA(&#34;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_6_8) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/28.0.1500.95 Safari/537.36&#34;);&#xA;uap.getBrowser().name;              // &#34;Chrome&#34;&#xA;uap.getBrowser().version;           // &#34;28.0.1500.95&#34;&#xA;uap.getBrowser().major;             // &#34;28&#34;&#xA;uap.getBrowser().toString();        // &#34;Chrome 28.0.1500.95&#34;&#xA;&#xA;let engine = uap.getEngine();&#xA;engine.name;                        // &#34;Blink&#34;&#xA;engine.version;                     // &#34;28.0.1500.95&#34;&#xA;engine.toString();                  // &#34;Blink 28.0.1500.95&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;withClientHints():Promise&amp;lt;IData&amp;gt;|Thenable&amp;lt;IData&amp;gt;|IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Recently, Chrome limits the information exposed through user-agent and introduces a new experimental set of data called &#34;client-hints&#34;. In browser-environment, obtaining the client-hints data via JavaScript must be done in an asynchronous way. In &lt;code&gt;UAParser&lt;/code&gt; you can chain the result object from &lt;code&gt;get*&lt;/code&gt; method with &lt;code&gt;withClientHints()&lt;/code&gt; to also read the client-hints data from the browser and return the updated data as a &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// client-side example&#xA;(async function () {  &#xA;    let ua = new UAParser();&#xA;&#xA;    // get browser data from user-agent only :&#xA;    let browser = ua.getBrowser();&#xA;    console.log(&#39;Using User-Agent: &#39;, browser);&#xA;&#xA;    // get browser data from client-hints (with user-agent as fallback) :&#xA;    browser = await ua.getBrowser().withClientHints();&#xA;    console.log(&#39;Using Client-Hints: &#39;, browser);&#xA;&#xA;    // alternatively :&#xA;    ua.getBrowser().withClientHints().then(function (browser) {&#xA;        console.log(&#39;Using Client-Hints: &#39;, browser);&#xA;    });&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Along with &lt;code&gt;User-Agent&lt;/code&gt; HTTP header, Chrome also sends this client-hints data by default under &lt;code&gt;Sec-CH-UA-*&lt;/code&gt; HTTP headers in each request. In server-side development, you can capture this extra information by passing the &lt;code&gt;req.headers&lt;/code&gt; to &lt;code&gt;UAParser()&lt;/code&gt; (see examples below). When using &lt;code&gt;withClientHints()&lt;/code&gt; in nodejs environment and browser without client-hints support (basically anything that&#39;s not Chromium-based), it will returns a new object with updated data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// server-side example&#xA;&#xA;// Suppose we got a request having these HTTP headers: &#xA;const request = {&#xA;    headers : {&#xA;        &#39;user-agent&#39; : &#39;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36&#39;,&#xA;&#xA;        &#39;sec-ch-ua-mobile&#39; : &#39;?1&#39;,&#xA;        &#39;sec-ch-ua-model&#39; : &#39;Galaxy S3 Marketing&#39;,&#xA;        &#39;sec-ch-ua-platform&#39; : &#39;Android&#39;&#xA;    }&#xA;};&#xA;&#xA;const result1 = UAParser(request.headers);                      // parse only &#34;user-agent&#34; header&#xA;const result2 = UAParser(request.headers).withClientHints();    // update with &#34;sec-ch-ua&#34; headers&#xA;&#xA;console.log(result1.os.name);       // &#34;Linux&#34;&#xA;console.log(result1.device.type);   // undefined&#xA;console.log(result1.device.model);  // undefined&#xA;&#xA;console.log(result2.os.name);       // &#34;Android&#34;&#xA;console.log(result2.device.type);   // &#34;mobile&#34;&#xA;console.log(result2.device.model);  // &#34;Galaxy S3 Marketing&#34;&#xA;&#xA;new UAParser(request.headers)&#xA;        .getBrowser()&#xA;        .withClientHints()&#xA;        .then((browser) =&amp;gt; {&#xA;    console.log(browser.toString());    // Chrome 110.0.0.0 &#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;* &lt;code&gt;withFeatureCheck():IData&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This method allows us to examine other features beyond &lt;code&gt;navigator.userAgent&lt;/code&gt; to further improve detection of the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;browser : Brave (check for &lt;code&gt;navigator.isBrave&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;device : iPad (check for &lt;code&gt;navigator.standalone&lt;/code&gt; &amp;amp; &lt;code&gt;navigator.maxTouchPoints&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// suppose this code runs on iPad&#xA;const withoutFeatureCheck = UAParser();&#xA;const withFeatureCheck = UAParser().withFeatureCheck();&#xA;&#xA;console.log(withoutFeatureCheck.device); // { vendor : &#34;Apple&#34;, model : &#34;Macintosh&#34;, type : undefined }&#xA;console.log(withFeatureCheck.device);    // { vendor : &#34;Apple&#34;, model : &#34;iPad&#34;, type : &#34;tablet&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extending Regex&lt;/h2&gt; &#xA;&lt;p&gt;If you want to detect something that&#39;s not currently provided by UAParser.js (eg: &lt;code&gt;bots&lt;/code&gt;, specific apps, etc), you can pass a list of regexes to extend internal UAParser.js regexes with your own.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;UAParser([uastring,] extensions [,headers:object(since@2.0)])&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Example:&#xA;const myOwnListOfBrowsers = [&#xA;    [/(mybrowser)\/([\w\.]+)/i], [UAParser.BROWSER.NAME, UAParser.BROWSER.VERSION, [&#39;type&#39;, &#39;bot&#39;]]&#xA;];&#xA;&#xA;const myUA = &#39;Mozilla/5.0 MyBrowser/1.3&#39;;&#xA;&#xA;let myParser = new UAParser({ browser: myOwnListOfBrowsers });&#xA;&#xA;console.log(myParser.setUA(myUA).getBrowser());  // {name: &#34;MyBrowser&#34;, version: &#34;1.3&#34;, major: &#34;1&#34;, type : &#34;bot&#34;}&#xA;console.log(myParser.getBrowser().is(&#39;bot&#39;));    // true&#xA;&#xA;// Another example:&#xA;const myOwnListOfDevices = [&#xA;    [/(mytab) ([\w ]+)/i], [UAParser.DEVICE.VENDOR, UAParser.DEVICE.MODEL, [UAParser.DEVICE.TYPE, UAParser.DEVICE.TABLET]],&#xA;    [/(myphone)/i], [UAParser.DEVICE.VENDOR, [UAParser.DEVICE.TYPE, UAParser.DEVICE.MOBILE]]&#xA;];&#xA;&#xA;const myUA2 = &#39;Mozilla/5.0 MyTab 14 Pro Max&#39;;&#xA;&#xA;let myParser2 = new UAParser({&#xA;    browser: myOwnListOfBrowsers,&#xA;    device: myOwnListOfDevices&#xA;});&#xA;&#xA;console.log(myParser2.setUA(myUA2).getDevice());  // {vendor: &#34;MyTab&#34;, model: &#34;14 Pro Max&#34;, type: &#34;tablet&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Some basic extensions (although not very complete at the moment) can also be found under &lt;code&gt;ua-parser-js/extensions&lt;/code&gt; submodule.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { UAParser } from &#39;ua-parser-js&#39;;&#xA;import { Emails } from &#39;ua-parser-js/extensions&#39;;&#xA;&#xA;const browser = new UAParser(Emails)&#xA;                        .setUA(&#39;Mozilla/5.0 (X11; Linux x86_64; rv:78.0) Gecko/20100101 Thunderbird/78.13.0&#39;)&#xA;                        .getBrowser();&#xA;&#xA;console.log(browser.name); // Thunderbird&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h2&gt;Using HTML&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!doctype html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;&amp;lt;script src=&#34;ua-parser.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;&#xA;    var uap = new UAParser();&#xA;    console.log(uap.getResult());&#xA;    /*&#xA;        /// This will print an object structured like this:&#xA;        {&#xA;            ua: &#34;&#34;,&#xA;            browser: {&#xA;                name: &#34;&#34;,&#xA;                version: &#34;&#34;,&#xA;                major: &#34;&#34;&#xA;            },&#xA;            engine: {&#xA;                name: &#34;&#34;,&#xA;                version: &#34;&#34;&#xA;            },&#xA;            os: {&#xA;                name: &#34;&#34;,&#xA;                version: &#34;&#34;&#xA;            },&#xA;            device: {&#xA;                model: &#34;&#34;,&#xA;                type: &#34;&#34;,&#xA;                vendor: &#34;&#34;&#xA;            },&#xA;            cpu: {&#xA;                architecture: &#34;&#34;&#xA;            }&#xA;        }&#xA;    */&#xA;    // Default result depends on current window.navigator.userAgent value&#xA;&#xA;    // Now let&#39;s try a custom user-agent string as an example&#xA;    var uastring1 = &#34;Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/535.2 (KHTML, like Gecko) Ubuntu/11.10 Chromium/15.0.874.106 Chrome/15.0.874.106 Safari/535.2&#34;;&#xA;    uap.setUA(uastring1);&#xA;    var result = uap.getResult();&#xA;    // You can also use UAParser constructor directly without having to create an instance:&#xA;    // var ua = UAParser(uastring1);&#xA;&#xA;    console.log(result.browser);        // {name: &#34;Chromium&#34;, version: &#34;15.0.874.106&#34;}&#xA;    console.log(result.device);         // {model: undefined, type: undefined, vendor: undefined}&#xA;    console.log(result.os);             // {name: &#34;Ubuntu&#34;, version: &#34;11.10&#34;}&#xA;    console.log(result.os.version);     // &#34;11.10&#34;&#xA;    console.log(result.engine.name);    // &#34;WebKit&#34;&#xA;    console.log(result.cpu.architecture);   // &#34;amd64&#34;&#xA;&#xA;    // Do some other tests&#xA;    var uastring2 = &#34;Mozilla/5.0 (compatible; Konqueror/4.1; OpenBSD) KHTML/4.1.4 (like Gecko)&#34;;&#xA;    console.log(uap.setUA(uastring2).getBrowser().name); // &#34;Konqueror&#34;&#xA;    console.log(uap.getOS());                            // {name: &#34;OpenBSD&#34;, version: undefined}&#xA;    console.log(uap.getEngine());                        // {name: &#34;KHTML&#34;, version: &#34;4.1.4&#34;}&#xA;&#xA;    var uastring3 = &#39;Mozilla/5.0 (PlayBook; U; RIM Tablet OS 1.0.0; en-US) AppleWebKit/534.11 (KHTML, like Gecko) Version/7.1.0.7 Safari/534.11&#39;;&#xA;    console.log(uap.setUA(uastring3).getDevice().model); // &#34;PlayBook&#34;&#xA;    console.log(uap.getOS())                             // {name: &#34;RIM Tablet OS&#34;, version: &#34;1.0.0&#34;}&#xA;    console.log(uap.getBrowser().name);                  // &#34;Safari&#34;&#xA;&#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using node.js&lt;/h2&gt; &#xA;&lt;p&gt;Note: Device information is not available in the NodeJS environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install ua-parser-js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var http = require(&#39;http&#39;);&#xA;var uap = require(&#39;ua-parser-js&#39;);&#xA;&#xA;http.createServer(function (req, res) {&#xA;    // get user-agent header&#xA;    var ua = uap(req.headers[&#39;user-agent&#39;]);&#xA;&#xA;    /* // BEGIN since@2.0 - you can also pass client-hints data to UAParser&#xA;&#xA;    // note: only works in secure context (https:// or localhost or file://)&#xA;&#xA;    var getHighEntropyValues = &#39;Sec-CH-UA-Full-Version-List, Sec-CH-UA-Mobile, Sec-CH-UA-Model, Sec-CH-UA-Platform, Sec-CH-UA-Platform-Version, Sec-CH-UA-Arch, Sec-CH-UA-Bitness&#39;;&#xA;    res.setHeader(&#39;Accept-CH&#39;, getHighEntropyValues);&#xA;    res.setHeader(&#39;Critical-CH&#39;, getHighEntropyValues);&#xA;    &#xA;    var ua = uap(req.headers).withClientHints();&#xA;&#xA;    // END since@2.0 */&#xA;&#xA;    // write the result as response&#xA;    res.end(JSON.stringify(ua, null, &#39;  &#39;));&#xA;})&#xA;.listen(1337, &#39;127.0.0.1&#39;);&#xA;&#xA;console.log(&#39;Server running at http://127.0.0.1:1337/&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using ES Modules&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { UAParser } from &#39;ua-parser-js&#39;;&#xA;&#xA;const { browser, cpu, device } = UAParser(&#39;Mozilla/5.0 (X11; U; Linux armv7l; en-GB; rv:1.9.2a1pre) Gecko/20090928 Firefox/3.5 Maemo Browser 1.4.1.22 RX-51 N900&#39;);&#xA;&#xA;console.log(browser.name);          // Maemo Browser&#xA;console.log(cpu.is(&#39;arm&#39;));         // true&#xA;console.log(device.is(&#39;mobile&#39;));   // true&#xA;console.log(device.model);          // N900&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using TypeScript&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install --save @types/ua-parser-js&#xA;# Download TS type definition from DefinitelyTyped repository:&#xA;# https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/ua-parser-js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using jQuery/Zepto ($.ua)&lt;/h2&gt; &#xA;&lt;p&gt;Although written in vanilla js, this library will automatically detect if jQuery/Zepto is present and create &lt;code&gt;$.ua&lt;/code&gt; object (with values based on its User-Agent) along with &lt;code&gt;window.UAParser&lt;/code&gt; constructor. To get/set user-agent you can use: &lt;code&gt;$.ua.get()&lt;/code&gt; / &lt;code&gt;$.ua.set(uastring)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Say we are in a browser with default user-agent: &#39;Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0&#39;:&#xA;&#xA;// Get the details&#xA;console.log($.ua.device);           // {vendor: &#34;HTC&#34;, model: &#34;Evo Shift 4G&#34;, type: &#34;mobile&#34;}&#xA;console.log($.ua.os);               // {name: &#34;Android&#34;, version: &#34;2.3.4&#34;}&#xA;console.log($.ua.os.name);          // &#34;Android&#34;&#xA;console.log($.ua.get());            // &#34;Mozilla/5.0 (Linux; U; Android 2.3.4; en-us; Sprint APA7373KT Build/GRJ22) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0&#34;&#xA;&#xA;// Now lets try to reset to another custom user-agent&#xA;$.ua.set(&#39;Mozilla/5.0 (Linux; U; Android 3.0.1; en-us; Xoom Build/HWI69) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13&#39;);&#xA;&#xA;// Test again&#xA;console.log($.ua.browser.name);     // &#34;Safari&#34;&#xA;console.log($.ua.engine.name);      // &#34;Webkit&#34;&#xA;console.log($.ua.device);           // {vendor: &#34;Motorola&#34;, model: &#34;Xoom&#34;, type: &#34;tablet&#34;}&#xA;console.log(parseInt($.ua.browser.version.split(&#39;.&#39;)[0], 10));  // 4&#xA;&#xA;// Add class to &amp;lt;body&amp;gt; tag&#xA;// &amp;lt;body class=&#34;ua-browser-safari ua-devicetype-tablet&#34;&amp;gt;&#xA;$(&#39;body&#39;).addClass(&#39;ua-browser-&#39; + $.ua.browser.name + &#39; ua-devicetype-&#39; + $.ua.device.type);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;Backers &amp;amp; Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/ua-parser-js&#34;&gt;&lt;img src=&#34;https://opencollective.com/ua-parser-js/organizations.svg?avatarHeight=64&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/ua-parser-js&#34;&gt;&lt;img src=&#34;https://opencollective.com/ua-parser-js/individuals.svg?avatarHeight=64&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.me/faisalman/&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/twolfson/paypal-github-button/1.0.0/dist/button.svg?sanitize=true&#34; height=&#34;40&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/faisalman/ua-parser-js/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=faisalman/ua-parser-js&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;Made with &lt;a href=&#34;https://contrib.rocks&#34;&gt;contributors-img&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How To Contribute&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork and clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Make some changes as required&lt;/li&gt; &#xA; &lt;li&gt;Write unit test to showcase its functionality&lt;/li&gt; &#xA; &lt;li&gt;Run the test suites to make sure it&#39;s not breaking anything &lt;code&gt;$ npm test&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request under &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;MIT License&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2012-2023 Faisal Salman &amp;lt;&lt;a href=&#34;mailto:f@faisalman.com&#34;&gt;f@faisalman.com&lt;/a&gt;&amp;gt;&lt;/p&gt; &#xA;&lt;p&gt;Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#34;Software&#34;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:&lt;/p&gt; &#xA;&lt;p&gt;The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.&lt;/p&gt; &#xA;&lt;p&gt;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/jscodeshift</title>
    <updated>2023-09-22T01:32:03Z</updated>
    <id>tag:github.com,2023-09-22:/facebook/jscodeshift</id>
    <link href="https://github.com/facebook/jscodeshift" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A JavaScript codemod toolkit.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jscodeshift &lt;a href=&#34;https://opensource.fb.com/support-ukraine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/facebook/jscodeshift&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facebook/jscodeshift.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;jscodeshift is a toolkit for running codemods over multiple JavaScript or TypeScript files. It provides:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A runner, which executes the provided transform for each file passed to it. It also outputs a summary of how many files have (not) been transformed.&lt;/li&gt; &#xA; &lt;li&gt;A wrapper around &lt;a href=&#34;https://github.com/benjamn/recast&#34;&gt;recast&lt;/a&gt;, providing a different API. Recast is an AST-to-AST transform tool and also tries to preserve the style of original code as much as possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Get jscodeshift from &lt;a href=&#34;https://www.npmjs.com/package/jscodeshift&#34;&gt;npm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install -g jscodeshift&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will install the runner as &lt;code&gt;jscodeshift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;VSCode Debugger&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/jscodeshift/main/#vscode-debugging&#34;&gt;Configure VSCode to debug codemods&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage (CLI)&lt;/h2&gt; &#xA;&lt;p&gt;The CLI provides the following options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ jscodeshift --help&#xA;&#xA;Usage: jscodeshift [OPTION]... PATH...&#xA;  or:  jscodeshift [OPTION]... -t TRANSFORM_PATH PATH...&#xA;  or:  jscodeshift [OPTION]... -t URL PATH...&#xA;  or:  jscodeshift [OPTION]... --stdin &amp;lt; file_list.txt&#xA;&#xA;Apply transform logic in TRANSFORM_PATH (recursively) to every PATH.&#xA;If --stdin is set, each line of the standard input is used as a path.&#xA;&#xA;Options:&#xA;&#34;...&#34; behind an option means that it can be supplied multiple times.&#xA;All options are also passed to the transformer, which means you can supply custom options that are not listed here.&#xA;&#xA;      --(no-)babel              apply babeljs to the transform file&#xA;                                (default: true)&#xA;  -c, --cpus=N                  start at most N child processes to process source files&#xA;                                (default: max(all - 1, 1))&#xA;  -d, --(no-)dry                dry run (no changes are made to files)&#xA;                                (default: false)&#xA;      --extensions=EXT          transform files with these file extensions (comma separated list)&#xA;                                (default: js)&#xA;  -h, --help                    print this help and exit&#xA;      --ignore-config=FILE ...  ignore files if they match patterns sourced from a configuration file (e.g. a .gitignore)&#xA;      --ignore-pattern=GLOB ...  ignore files that match a provided glob expression&#xA;      --parser=babel|babylon|flow|ts|tsx  the parser to use for parsing the source files&#xA;                                          (default: babel)&#xA;      --parser-config=FILE      path to a JSON file containing a custom parser configuration for flow or babylon&#xA;  -p, --(no-)print              print transformed files to stdout, useful for development&#xA;                                (default: false)&#xA;      --(no-)run-in-band        run serially in the current process&#xA;                                (default: false)&#xA;  -s, --(no-)silent             do not write to stdout or stderr&#xA;                                (default: false)&#xA;      --(no-)stdin              read file/directory list from stdin&#xA;                                (default: false)&#xA;  -t, --transform=FILE          path to the transform file. Can be either a local path or url&#xA;                                (default: ./transform.js)&#xA;  -v, --verbose=0|1|2           show more information about the transform process&#xA;                                (default: 0)&#xA;      --version                 print version and exit&#xA;      --fail-on-error           return a 1 exit code when errors were found during execution of codemods&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This passes the source of all passed through the transform module specified with &lt;code&gt;-t&lt;/code&gt; or &lt;code&gt;--transform&lt;/code&gt; (defaults to &lt;code&gt;transform.js&lt;/code&gt; in the current directory). The next section explains the structure of the transform module.&lt;/p&gt; &#xA;&lt;h2&gt;Usage (JS)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const {run: jscodeshift} = require(&#39;jscodeshift/src/Runner&#39;)&#xA;const path = require(&#39;node:path&#39;);&#xA;&#xA;const transformPath = path.resolve(&#39;transform.js&#39;)&#xA;const paths = [&#39;foo.js&#39;, &#39;bar&#39;]&#xA;const options = {&#xA;  dry: true,&#xA;  print: true,&#xA;  verbose: 1,&#xA;  // ...&#xA;}&#xA;&#xA;const res = await jscodeshift(transformPath, paths, options)&#xA;console.log(res)&#xA;/*&#xA;{&#xA;  stats: {},&#xA;  timeElapsed: &#39;0.001&#39;,&#xA;  error: 0,&#xA;  ok: 0,&#xA;  nochange: 0,&#xA;  skip: 0&#xA;}&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Transform module&lt;/h2&gt; &#xA;&lt;p&gt;The transform is simply a module that exports a function of the form:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;module.exports = function(fileInfo, api, options) {&#xA;  // transform `fileInfo.source` here&#xA;  // ...&#xA;  // return changed source&#xA;  return source;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As of v0.6.1, this module can also be written in TypeScript.&lt;/p&gt; &#xA;&lt;h3&gt;Arguments&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;fileInfo&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Holds information about the currently processed file.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;path&lt;/td&gt; &#xA;   &lt;td&gt;File path&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;source&lt;/td&gt; &#xA;   &lt;td&gt;File content&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;&lt;code&gt;api&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;This object exposes the &lt;code&gt;jscodeshift&lt;/code&gt; library and helper functions from the runner.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jscodeshift&lt;/td&gt; &#xA;   &lt;td&gt;A reference to the jscodeshift library&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;stats&lt;/td&gt; &#xA;   &lt;td&gt;A function to collect statistics during &lt;code&gt;--dry&lt;/code&gt; runs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;report&lt;/td&gt; &#xA;   &lt;td&gt;Prints the passed string to stdout&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;code&gt;jscodeshift&lt;/code&gt; is a reference to the wrapper around recast and provides a jQuery-like API to navigate and transform the AST. Here is a quick example, a more detailed description can be found below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * This replaces every occurrence of variable &#34;foo&#34;.&#xA; */&#xA;module.exports = function(fileInfo, api, options) {&#xA;  return api.jscodeshift(fileInfo.source)&#xA;    .findVariableDeclarators(&#39;foo&#39;)&#xA;    .renameTo(&#39;bar&#39;)&#xA;    .toSource();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This API is exposed for convenience, but you don&#39;t have to use it. You can use any tool to modify the source.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;stats&lt;/code&gt; is a function that only works when the &lt;code&gt;--dry&lt;/code&gt; options is set. It accepts a string, and will simply count how often it was called with that value.&lt;/p&gt; &#xA;&lt;p&gt;At the end, the CLI will report those values. This can be useful while developing the transform, e.g. to find out how often a certain construct appears in the source(s).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;report&lt;/code&gt;&lt;/strong&gt; allows you to print arbitrary strings to stdout. This can be useful when other tools consume the output of jscodeshift. The reason to not directly use &lt;code&gt;process.stdout&lt;/code&gt; in transform code is to avoid mangled output when many files are processed.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;options&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Contains all options that have been passed to runner. This allows you to pass additional options to the transform. For example, if the CLI is called with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ jscodeshift -t myTransforms fileA fileB --foo=bar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;options&lt;/code&gt; would contain &lt;code&gt;{foo: &#39;bar&#39;}&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Return value&lt;/h3&gt; &#xA;&lt;p&gt;The return value of the function determines the status of the transformation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If a string is returned and it is different from passed source, the transform is considered to be successful.&lt;/li&gt; &#xA; &lt;li&gt;If a string is returned but it&#39;s the same as the source, the transform is considered to be unsuccessful.&lt;/li&gt; &#xA; &lt;li&gt;If nothing is returned, the file is not supposed to be transformed (which is ok).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The CLI provides a summary of the transformation at the end. You can get more detailed information by setting the &lt;code&gt;-v&lt;/code&gt; option to &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;2&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can collect even more stats via the &lt;code&gt;stats&lt;/code&gt; function as explained above.&lt;/p&gt; &#xA;&lt;h3&gt;Parser&lt;/h3&gt; &#xA;&lt;p&gt;The transform file can let jscodeshift know with which parser to parse the source files (and features like templates).&lt;/p&gt; &#xA;&lt;p&gt;To do that, the transform module can export &lt;code&gt;parser&lt;/code&gt;, which can either be one of the strings &lt;code&gt;&#34;babel&#34;&lt;/code&gt;, &lt;code&gt;&#34;babylon&#34;&lt;/code&gt;, &lt;code&gt;&#34;flow&#34;&lt;/code&gt;, &lt;code&gt;&#34;ts&#34;&lt;/code&gt;, or &lt;code&gt;&#34;tsx&#34;&lt;/code&gt;, or it can be a parser object that is compatible with recast and follows the estree spec.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: specifying parser type string in the transform file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#xA;module.exports = function transformer(file, api, options) {&#xA;  const j = api.jscodeshift;&#xA;  const rootSource = j(file.source);&#xA;  &#xA;  // whatever other code...&#xA;  &#xA;  return rootSource.toSource();&#xA;}&#xA;  &#xA;// use the flow parser&#xA;module.exports.parser = &#39;flow&#39;; &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: specifying a custom parser object in the transform file&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#xA;module.exports = function transformer(file, api, options) {&#xA;  const j = api.jscodeshift;&#xA;  const rootSource = j(file.source);&#xA;  &#xA;  // whatever other code...&#xA;  &#xA;  return rootSource.toSource();&#xA;}&#xA;&#xA;module.exports.parser = {&#xA;  parse: function(source) {&#xA;    // return estree compatible AST&#xA;  },&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example output&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ jscodeshift -t myTransform.js src&#xA;Processing 10 files...&#xA;Spawning 2 workers with 5 files each...&#xA;All workers done.&#xA;Results: 0 errors 2 unmodified 3 skipped 5 ok&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;The jscodeshift API&lt;/h2&gt; &#xA;&lt;p&gt;As already mentioned, jscodeshift also provides a wrapper around &lt;a href=&#34;https://github.com/benjamn/recast&#34;&gt;recast&lt;/a&gt;. In order to properly use the jscodeshift API, one has to understand the basic building blocks of recast (and ASTs) as well.&lt;/p&gt; &#xA;&lt;h3&gt;Core Concepts&lt;/h3&gt; &#xA;&lt;h4&gt;AST nodes&lt;/h4&gt; &#xA;&lt;p&gt;An AST node is a plain JavaScript object with a specific set of fields, in accordance with the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Projects/SpiderMonkey/Parser_API&#34;&gt;Mozilla Parser API&lt;/a&gt;. The primary way to identify nodes is via their &lt;code&gt;type&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, string literals are represented via &lt;code&gt;Literal&lt;/code&gt; nodes, which have the structure&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// &#34;foo&#34;&#xA;{&#xA;  type: &#39;Literal&#39;,&#xA;  value: &#39;foo&#39;,&#xA;  raw: &#39;&#34;foo&#34;&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s OK to not know the structure of every AST node type. The &lt;a href=&#34;http://astexplorer.net/&#34;&gt;(esprima) AST explorer&lt;/a&gt; is an online tool to inspect the AST for a given piece of JS code.&lt;/p&gt; &#xA;&lt;h4&gt;Path objects&lt;/h4&gt; &#xA;&lt;p&gt;Recast itself relies heavily on &lt;a href=&#34;https://github.com/benjamn/ast-types&#34;&gt;ast-types&lt;/a&gt; which defines methods to traverse the AST, access node fields and build new nodes. ast-types wraps every AST node into a &lt;em&gt;path object&lt;/em&gt;. Paths contain meta-information and helper methods to process AST nodes.&lt;/p&gt; &#xA;&lt;p&gt;For example, the child-parent relationship between two nodes is not explicitly defined. Given a plain AST node, it is not possible to traverse the tree &lt;em&gt;up&lt;/em&gt;. Given a path object however, the parent can be traversed to via &lt;code&gt;path.parent&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information about the path object API, please have a look at &lt;a href=&#34;https://github.com/benjamn/ast-types&#34;&gt;ast-types&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Builders&lt;/h4&gt; &#xA;&lt;p&gt;To make creating AST nodes a bit simpler and &#34;safer&#34;, ast-types defines a couple of &lt;em&gt;builder methods&lt;/em&gt;, which are also exposed on &lt;code&gt;jscodeshift&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, the following creates an AST equivalent to &lt;code&gt;foo(bar)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// inside a module transform&#xA;var j = jscodeshift;&#xA;// foo(bar);&#xA;var ast = j.callExpression(&#xA;  j.identifier(&#39;foo&#39;),&#xA;  [j.identifier(&#39;bar&#39;)]&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The signature of each builder function is best learned by having a look at the &lt;a href=&#34;https://github.com/benjamn/ast-types/tree/master/src/def&#34;&gt;definition files&lt;/a&gt; or in the babel/types &lt;a href=&#34;https://babeljs.io/docs/en/babel-types&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Collections and Traversal&lt;/h3&gt; &#xA;&lt;p&gt;In order to transform the AST, you have to traverse it and find the nodes that need to be changed. jscodeshift is built around the idea of &lt;strong&gt;collections&lt;/strong&gt; of paths and thus provides a different way of processing an AST than recast or ast-types.&lt;/p&gt; &#xA;&lt;p&gt;A collection has methods to process the nodes inside a collection, often resulting in a new collection. This results in a fluent interface, which can make the transform more readable.&lt;/p&gt; &#xA;&lt;p&gt;Collections are &#34;typed&#34; which means that the type of a collection is the &#34;lowest&#34; type all AST nodes in the collection have in common. That means you cannot call a method for a &lt;code&gt;FunctionExpression&lt;/code&gt; collection on an &lt;code&gt;Identifier&lt;/code&gt; collection.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of how one would find/traverse all &lt;code&gt;Identifier&lt;/code&gt; nodes with jscodeshift and with recast:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// recast&#xA;var ast = recast.parse(src);&#xA;recast.visit(ast, {&#xA;  visitIdentifier: function(path) {&#xA;    // do something with path&#xA;    return false;&#xA;  }&#xA;});&#xA;&#xA;// jscodeshift&#xA;jscodeshift(src)&#xA;  .find(jscodeshift.Identifier)&#xA;  .forEach(function(path) {&#xA;    // do something with path&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn about the provided methods, have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/jscodeshift/main/src/Collection.js&#34;&gt;Collection.js&lt;/a&gt; and its &lt;a href=&#34;https://raw.githubusercontent.com/facebook/jscodeshift/main/src/collections/&#34;&gt;extensions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Extensibility&lt;/h3&gt; &#xA;&lt;p&gt;jscodeshift provides an API to extend collections. By moving common operators into helper functions (which can be stored separately in other modules), a transform can be made more readable.&lt;/p&gt; &#xA;&lt;p&gt;There are two types of extensions: generic extensions and type-specific extensions. &lt;strong&gt;Generic extensions&lt;/strong&gt; are applicable to all collections. As such, they typically don&#39;t access specific node data, but rather traverse the AST from the nodes in the collection. &lt;strong&gt;Type-specific&lt;/strong&gt; extensions work only on specific node types and are not callable on differently typed collections.&lt;/p&gt; &#xA;&lt;h4&gt;Examples&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Adding a method to all Identifiers&#xA;jscodeshift.registerMethods({&#xA;  logNames: function() {&#xA;    return this.forEach(function(path) {&#xA;      console.log(path.node.name);&#xA;    });&#xA;  }&#xA;}, jscodeshift.Identifier);&#xA;&#xA;// Adding a method to all collections&#xA;jscodeshift.registerMethods({&#xA;  findIdentifiers: function() {&#xA;    return this.find(jscodeshift.Identifier);&#xA;  }&#xA;});&#xA;&#xA;jscodeshift(ast).findIdentifiers().logNames();&#xA;jscodeshift(ast).logNames(); // error, unless `ast` only consists of Identifier nodes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Passing options to &lt;a href=&#34;https://github.com/benjamn/recast&#34;&gt;recast&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You may want to change some of the output settings (like setting &lt;code&gt;&#39;&lt;/code&gt; instead of &lt;code&gt;&#34;&lt;/code&gt;). This can be done by passing config options to &lt;a href=&#34;https://github.com/benjamn/recast&#34;&gt;recast&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;.toSource({quote: &#39;single&#39;}); // sets strings to use single quotes in transformed code.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass options to recast&#39;s &lt;code&gt;parse&lt;/code&gt; method by passing an object to jscodeshift as second argument:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jscodeshift(source, {...})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More on config options &lt;a href=&#34;https://github.com/benjamn/recast/raw/52a7ec3eaaa37e78436841ed8afc948033a86252/lib/options.js#L61&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Unit Testing&lt;/h3&gt; &#xA;&lt;p&gt;jscodeshift comes with a simple utility to allow easy unit testing with &lt;a href=&#34;https://facebook.github.io/jest/&#34;&gt;Jest&lt;/a&gt;, without having to write a lot of boilerplate code. This utility makes some assumptions in order to reduce the amount of configuration required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The test is located in a subdirectory under the directory the transform itself is located in (eg. &lt;code&gt;__tests__&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Test fixtures are located in a &lt;code&gt;__testfixtures__&lt;/code&gt; directory&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This results in a directory structure like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/MyTransform.js&#xA;/__tests__/MyTransform-test.js&#xA;/__testfixtures__/MyTransform.input.js&#xA;/__testfixtures__/MyTransform.output.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A simple example of unit tests is bundled in the &lt;a href=&#34;https://raw.githubusercontent.com/facebook/jscodeshift/main/sample&#34;&gt;sample directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;testUtils&lt;/code&gt; module exposes a number of useful helpers for unit testing.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;defineTest&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Defines a Jest/Jasmine test for a jscodeshift transform which depends on fixtures&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jest.autoMockOff();&#xA;const defineTest = require(&#39;jscodeshift/dist/testUtils&#39;).defineTest;&#xA;defineTest(__dirname, &#39;MyTransform&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An alternate fixture filename can be provided as the fourth argument to &lt;code&gt;defineTest&lt;/code&gt;. This also means that multiple test fixtures can be provided:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;defineTest(__dirname, &#39;MyTransform&#39;, null, &#39;FirstFixture&#39;);&#xA;defineTest(__dirname, &#39;MyTransform&#39;, null, &#39;SecondFixture&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run two tests:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;__testfixtures__/FirstFixture.input.js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;__testfixtures__/SecondFixture.input.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;defineInlineTest&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Defines a Jest/Jasmine test suite for a jscodeshift transform which accepts inline values&lt;/p&gt; &#xA;&lt;p&gt;This is a more flexible alternative to &lt;code&gt;defineTest&lt;/code&gt;, as this allows to also provide options to your transform&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defineInlineTest = require(&#39;jscodeshift/dist/testUtils&#39;).defineInlineTest;&#xA;const transform = require(&#39;../myTransform&#39;);&#xA;const transformOptions = {};&#xA;defineInlineTest(transform, transformOptions, &#39;input&#39;, &#39;expected output&#39;, &#39;test name (optional)&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;defineSnapshotTest&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;defineInlineTest&lt;/code&gt; but instead of requiring an output value, it uses Jest&#39;s &lt;code&gt;toMatchSnapshot()&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defineSnapshotTest = require(&#39;jscodeshift/dist/testUtils&#39;).defineSnapshotTest;&#xA;const transform = require(&#39;../myTransform&#39;);&#xA;const transformOptions = {};&#xA;defineSnapshotTest(transform, transformOptions, &#39;input&#39;, &#39;test name (optional)&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on snapshots, check out &lt;a href=&#34;https://jestjs.io/docs/en/snapshot-testing&#34;&gt;Jest&#39;s docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;defineSnapshotTestFromFixture&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Similar to &lt;code&gt;defineSnapshotTest&lt;/code&gt; but will load the file using same file-directory defaults as &lt;code&gt;defineTest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const defineSnapshotTestDefault = require(&#39;jscodeshift/dist/testUtils&#39;).defineSnapshotTestDefault;&#xA;const transform = require(&#39;../myTransform&#39;);&#xA;const transformOptions = {};&#xA;defineSnapshotTestFromFixture(__dirname, transform, transformOptions, &#39;FirstFixture&#39;, &#39;test name (optional)&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;applyTransform&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Executes your transform using the options and the input given and returns the result. This function is used internally by the other helpers, but it can prove useful in other cases.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const applyTransform = require(&#39;jscodeshift/dist/testUtils&#39;).applyTransform;&#xA;const transform = require(&#39;../myTransform&#39;);&#xA;const transformOptions = {};&#xA;const output = applyTransform(transform, transformOptions, &#39;input&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ES modules&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re authoring your transforms and tests using ES modules, make sure to import the transform&#39;s parser (if specified) in your tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// MyTransform.js&#xA;export const parser = &#39;flow&#39;&#xA;export default function MyTransform(fileInfo, api, options) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// __tests__/MyTransform-test.js&#xA;import { defineInlineTest } from &#39;jscodeshift/dist/testUtils&#xA;import * as transform from &#39;../MyTransform&#xA;&#xA;console.log(transform.parser) // &#39;flow&#39;&#xA;&#xA;defineInlineTest(transform, /* ... */)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example Codemods&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/reactjs/react-codemod&#34;&gt;react-codemod&lt;/a&gt; - React codemod scripts to update React APIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cpojer/js-codemod/&#34;&gt;js-codemod&lt;/a&gt; - Codemod scripts to transform code to next generation JS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jhgg/js-transforms&#34;&gt;js-transforms&lt;/a&gt; - Some documented codemod experiments to help you learn.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/anshckr/fix-js&#34;&gt;fix-js&lt;/a&gt; - Codemods to fix some ESLint issues&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Local Documentation Server&lt;/h3&gt; &#xA;&lt;p&gt;To update docs in &lt;code&gt;/docs&lt;/code&gt;, use &lt;code&gt;npm run docs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To view these docs locally, use &lt;code&gt;npx http-server ./docs&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;VSCode Debugging&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s recommended that you set up your codemod project to all debugging via the VSCode IDE. When you open your project in VSCode, add the following configuration to your launch.json debugging configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    // Use IntelliSense to learn about possible attributes.&#xA;    // Hover to view descriptions of existing attributes.&#xA;    // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387&#xA;    &#34;version&#34;: &#34;0.2.0&#34;,&#xA;    &#34;configurations&#34;: [&#xA;        {&#xA;            &#34;type&#34;: &#34;pwa-node&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            &#34;name&#34;: &#34;Debug Transform&#34;,&#xA;            &#34;skipFiles&#34;: [&#xA;                &#34;&amp;lt;node_internals&amp;gt;/**&#34;&#xA;            ],&#xA;            &#34;program&#34;: &#34;${workspaceRoot}/node_modules/.bin/jscodeshift&#34;,&#xA;            &#34;stopOnEntry&#34;: false,&#xA;            &#34;args&#34;: [&#34;--dry&#34;, &#34;--print&#34;, &#34;-t&#34;, &#34;${input:transformFile}&#34;, &#34;--parser&#34;, &#34;${input:parser}&#34;, &#34;--run-in-band&#34;, &#34;${file}&#34;],&#xA;            &#34;preLaunchTask&#34;: null,&#xA;            &#34;runtimeExecutable&#34;: null,&#xA;            &#34;runtimeArgs&#34;: [&#xA;                &#34;--nolazy&#34;&#xA;            ],&#xA;            &#34;console&#34;: &#34;internalConsole&#34;,&#xA;            &#34;sourceMaps&#34;: true,&#xA;            &#34;outFiles&#34;: []&#xA;        },&#xA;        {&#xA;            &#34;name&#34;: &#34;Debug All JSCodeshift Jest Tests&#34;,&#xA;            &#34;type&#34;: &#34;node&#34;,&#xA;            &#34;request&#34;: &#34;launch&#34;,&#xA;            &#34;runtimeArgs&#34;: [&#xA;                &#34;--inspect-brk&#34;,&#xA;                &#34;${workspaceRoot}/node_modules/jest/bin/jest.js&#34;,&#xA;                &#34;--runInBand&#34;,&#xA;                &#34;--testPathPattern=${fileBasenameNoExtension}&#34;&#xA;            ],&#xA;            &#34;console&#34;: &#34;integratedTerminal&#34;,&#xA;            &#34;internalConsoleOptions&#34;: &#34;neverOpen&#34;,&#xA;            &#34;port&#34;: 9229&#xA;        }&#xA;    ],&#xA;    &#34;inputs&#34;: [&#xA;        {&#xA;          &#34;type&#34;: &#34;pickString&#34;,&#xA;          &#34;id&#34;: &#34;parser&#34;,&#xA;          &#34;description&#34;: &#34;jscodeshift parser&#34;,&#xA;          &#34;options&#34;: [&#xA;            &#34;babel&#34;,&#xA;            &#34;babylon&#34;,&#xA;            &#34;flow&#34;,&#xA;            &#34;ts&#34;,&#xA;            &#34;tsx&#34;,&#xA;          ],&#xA;          &#34;default&#34;: &#34;babel&#34;&#xA;        },&#xA;        {&#xA;            &#34;type&#34;: &#34;promptString&#34;,&#xA;            &#34;id&#34;: &#34;transformFile&#34;,&#xA;            &#34;description&#34;: &#34;jscodeshift transform file&#34;,&#xA;            &#34;default&#34;: &#34;transform.js&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once this has been added to the configuration&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install jscodeshift as a package if you haven&#39;t done so already by running the command &lt;strong&gt;npm install --save jscodeshift&lt;/strong&gt;. The debug configuration will not work otherwise.&lt;/li&gt; &#xA; &lt;li&gt;Once the jscodeshift local package has been installed, go to the VSCode file tree and select the file on which you want to run the transform. For example, if you wanted to run codemod transforms of foo.js file, you would click on the entry for foo.js file in your project tree.&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Debug Transform&#34; from the debugging menu&#39;s options menu.&lt;/li&gt; &#xA; &lt;li&gt;Click the &lt;strong&gt;&#34;Start Debugging&#34;&lt;/strong&gt; button on the VSCode debugger.&lt;/li&gt; &#xA; &lt;li&gt;You will be then prompted for the name of jscodeshift transform file. Enter in the name of the transform file to use. If no name is given it will default to &lt;strong&gt;transform.js&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the parser to use from the presented selection list of parsers. The transform will otherwise default to using the &lt;strong&gt;babel&lt;/strong&gt; parser.&lt;/li&gt; &#xA; &lt;li&gt;The transform will then be run, stopping at any breakpoints that have been set.&lt;/li&gt; &#xA; &lt;li&gt;If there are no errors and the transform is complete, then the results of the transform will be printed in the VSCode debugging console. The file with the contents that have been transformed will not be changed, as the debug configuration makes use the jscodeshift &lt;strong&gt;--dry&lt;/strong&gt; option.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Recipes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/jscodeshift/main/recipes/retain-first-comment.md&#34;&gt;Retain leading comment(s) in file when replacing/removing first statement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Tencent/LightDiffusionFlow</title>
    <updated>2023-09-22T01:32:03Z</updated>
    <id>tag:github.com,2023-09-22:/Tencent/LightDiffusionFlow</id>
    <link href="https://github.com/Tencent/LightDiffusionFlow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This extension is developed for AUTOMATIC1111&#39;s Stable Diffusion web UI that provides import/export options for parameters.&lt;/p&gt;&lt;hr&gt;&lt;p float=&#34;left&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/JavaScript-323330?style=for-the-badge&amp;amp;logo=javascript&amp;amp;logoColor=F7DF1E&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Python-FFD43B?style=for-the-badge&amp;amp;logo=python&amp;amp;logoColor=blue&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;sd-webui-lightdiffusionflow&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/LightDiffusionFlow/master/README.md&#34;&gt;&lt;strong&gt;English&lt;/strong&gt;&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/Tencent/LightDiffusionFlow/master/README_CN.md&#34;&gt;&lt;strong&gt;ä¸­æ–‡&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This extension is developed for AUTOMATIC1111&#39;s &lt;a href=&#34;https://github.com/AUTOMATIC1111/stable-diffusion-webui&#34;&gt;Stable Diffusion web UI&lt;/a&gt; that provides import/export options for parameters.&lt;br&gt; &#34;Stable Diffusion Web UI&#34; hereafter referred to as &#34;SD Web UI&#34;&lt;br&gt; &lt;a href=&#34;https://fvkij7wuqx9.feishu.cn/docx/HgZndihraotmmzxFni7cFZISnvb&#34;&gt;&lt;strong&gt;Plugin demonstration and other instructions&lt;/strong&gt;&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://www.lightflow.ai/&#34;&gt;&lt;strong&gt;Our open-source community&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Capabilities&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Export/Import web UI parameters with a single file (images, inputs, sliders, checkboxes etc.) .&lt;/li&gt; &#xA; &lt;li&gt;Support parsing png info from image and restoring parameters back to the web UI.&lt;/li&gt; &#xA; &lt;li&gt;Supported extensions: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In theory, it can support any plugin. (Except for certain plugin images, as they require the corresponding elem_id to be provided.)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Install&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;strong&gt;Install from URL&lt;/strong&gt; option with this repo url.&lt;/p&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;None at all.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Export Parameters:&lt;br&gt; In the SD Web UI, configure the desired options, and click the &#34;Export&#34; button to export a flow file that records the current parameters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Import Parameters:&lt;br&gt; In the SD Web UI, click the &#34;FileBox&#34;, select the corresponding flow file, and import the parameters from the file. You can also directly drag and drop the flow file into the &#34;FileBox&#34; for importing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;If you have any comments, suggestions, or encounter issues with our project, please feel free to raise them through an issue, and we also welcome pull requests at any time!&lt;/p&gt; &#xA;&lt;h3&gt;Credits&lt;/h3&gt; &#xA;&lt;p&gt;Licenses for borrowed code can be found in LICENSES/&lt;a href=&#34;https://raw.githubusercontent.com/Tencent/LightDiffusionFlow/master/LICENSES/Licenses.md&#34;&gt;&lt;strong&gt;Licenses.md&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;stable-diffusion-webui-state - &lt;a href=&#34;https://github.com/ilian6806/stable-diffusion-webui-state&#34;&gt;https://github.com/ilian6806/stable-diffusion-webui-state&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Our team urgently needs a solution to easily share the Stable Diffusion Web UI settings, and Ilian Iliev&#39;s stable-diffusion-webui-state project has been a great help to us. Thank you, Ilian Iliev!&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Big thanks to &lt;a href=&#34;https://github.com/ThisHaliHali&#34;&gt;Hali&lt;/a&gt; for the inspiration, suggestions, and various forms of support during the development of this project. Much appreciated!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>