<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-03-12T01:34:38Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Flux159/mcp-server-kubernetes</title>
    <updated>2025-03-12T01:34:38Z</updated>
    <id>tag:github.com,2025-03-12:/Flux159/mcp-server-kubernetes</id>
    <link href="https://github.com/Flux159/mcp-server-kubernetes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP Server for kubernetes management commands&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;mcp-server-kubernetes&lt;/h1&gt; &#xA;&lt;p&gt;MCP Server that can connect to a Kubernetes cluster and manage it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/f25f8f4e-4d04-479b-9ae0-5dac452dd2ed&#34;&gt;https://github.com/user-attachments/assets/f25f8f4e-4d04-479b-9ae0-5dac452dd2ed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://glama.ai/mcp/servers/w71ieamqrt&#34;&gt;&lt;img width=&#34;380&#34; height=&#34;200&#34; src=&#34;https://glama.ai/mcp/servers/w71ieamqrt/badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage with Claude Desktop&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;kubernetes&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;mcp-server-kubernetes&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will automatically connect to your current kubectl context. Make sure you have:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;kubectl installed and in your PATH&lt;/li&gt; &#xA; &lt;li&gt;A valid kubeconfig file with contexts configured&lt;/li&gt; &#xA; &lt;li&gt;Access to a Kubernetes cluster configured for kubectl (e.g. minikube, Rancher Desktop, GKE, etc.)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You can verify your connection by asking Claude to list your pods or create a test deployment.&lt;/p&gt; &#xA;&lt;p&gt;If you have errors, open up a standard terminal and run &lt;code&gt;kubectl get pods&lt;/code&gt; to see if you can connect to your cluster without credentials issues.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Connect to a Kubernetes cluster&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List all pods&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List all services&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List all deployments&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create a pod&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Delete a pod&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Describe a pod&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; List all namespaces&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Port forward to a pod&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Get logs from a pod for debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Choose namespace for next commands (memory)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Support Helm for installing charts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;In Progress&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; &lt;a href=&#34;https://github.com/Flux159/mcp-server-kubernetes/pull/9&#34;&gt;Docker support&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/Flux159/mcp-server-kubernetes.git&#xA;cd mcp-server-kubernetes&#xA;bun install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Development Workflow&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the server in development mode (watches for file changes):&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run unit tests:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Build the project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Local Testing with &lt;a href=&#34;https://github.com/modelcontextprotocol/inspector&#34;&gt;Inspector&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @modelcontextprotocol/inspector node build/index.js&#xA;# Follow further instructions on terminal for Inspector link&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Project Structure&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;src/&#xA;├── index.ts     # Main server implementation&#xA;├── types.ts     # TypeScript type definitions&#xA;└── unit.test.ts # Unit tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create a feature branch&lt;/li&gt; &#xA; &lt;li&gt;Make your changes&lt;/li&gt; &#xA; &lt;li&gt;Add tests for new functionality&lt;/li&gt; &#xA; &lt;li&gt;Ensure all tests pass&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For bigger changes, please open an issue first to discuss the proposed changes.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;This section describes the high-level architecture of the MCP Kubernetes server.&lt;/p&gt; &#xA;&lt;h3&gt;Request Flow&lt;/h3&gt; &#xA;&lt;p&gt;The sequence diagram below illustrates how requests flow through the system:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram&#xA;    participant Client&#xA;    participant Transport as StdioTransport&#xA;    participant Server as MCP Server&#xA;    participant Handler as Request Handler&#xA;    participant K8sManager as KubernetesManager&#xA;    participant K8s as Kubernetes API&#xA;&#xA;    Client-&amp;gt;&amp;gt;Transport: Send Request via STDIO&#xA;    Transport-&amp;gt;&amp;gt;Server: Forward Request&#xA;&#xA;    alt Tools Request&#xA;        Server-&amp;gt;&amp;gt;Handler: Route to tools handler&#xA;        Handler-&amp;gt;&amp;gt;K8sManager: Execute tool operation&#xA;        K8sManager-&amp;gt;&amp;gt;K8s: Make API call&#xA;        K8s--&amp;gt;&amp;gt;K8sManager: Return result&#xA;        K8sManager--&amp;gt;&amp;gt;Handler: Process response&#xA;        Handler--&amp;gt;&amp;gt;Server: Return tool result&#xA;    else Resource Request&#xA;        Server-&amp;gt;&amp;gt;Handler: Route to resource handler&#xA;        Handler-&amp;gt;&amp;gt;K8sManager: Get resource data&#xA;        K8sManager-&amp;gt;&amp;gt;K8s: Query API&#xA;        K8s--&amp;gt;&amp;gt;K8sManager: Return data&#xA;        K8sManager--&amp;gt;&amp;gt;Handler: Format response&#xA;        Handler--&amp;gt;&amp;gt;Server: Return resource data&#xA;    end&#xA;&#xA;    Server--&amp;gt;&amp;gt;Transport: Send Response&#xA;    Transport--&amp;gt;&amp;gt;Client: Return Final Response&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Not planned&lt;/h2&gt; &#xA;&lt;p&gt;Authentication / adding clusters to kubectx.&lt;/p&gt;</summary>
  </entry>
</feed>