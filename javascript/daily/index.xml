<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-28T01:41:29Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>HabitRPG/habitica</title>
    <updated>2023-06-28T01:41:29Z</updated>
    <id>tag:github.com,2023-06-28:/HabitRPG/habitica</id>
    <link href="https://github.com/HabitRPG/habitica" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A habit tracker app which treats your goals like a Role Playing Game.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Habitica &lt;img src=&#34;https://github.com/HabitRPG/habitica/workflows/Test/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://codeclimate.com/github/HabitRPG/habitrpg&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/HabitRPG/habitrpg.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.bountysource.com/trackers/68393-habitrpg?utm_source=68393&amp;amp;utm_medium=shield&amp;amp;utm_campaign=TRACKER_BADGE&#34;&gt;&lt;img src=&#34;https://api.bountysource.com/badge/tracker?tracker_id=68393&#34; alt=&#34;Bountysource&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://habitica.com&#34;&gt;Habitica&lt;/a&gt; is an open source habit building program which treats your life like a Role Playing Game. Level up as you succeed, lose HP as you fail, earn money to buy weapons and armor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;We need more programmers!&lt;/strong&gt; Your assistance will be greatly appreciated. The wiki pages below and the additional pages they link to will tell you how to get started on contributing code and where you can go to seek further help or ask questions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://habitica.fandom.com/wiki/Guidance_for_Blacksmiths&#34;&gt;Guidance for Blacksmiths&lt;/a&gt; - an introduction to the technologies used and how the software is organized.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://habitica.fandom.com/wiki/Setting_up_Habitica_Locally&#34;&gt;Setting up Habitica Locally&lt;/a&gt; - how to set up a local install of Habitica for development and testing on various platforms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Habitica&#39;s code is licensed as described at &lt;a href=&#34;https://github.com/HabitRPG/habitica/raw/develop/LICENSE&#34;&gt;https://github.com/HabitRPG/habitica/blob/develop/LICENSE&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Found a bug?&lt;/strong&gt; Please report it to &lt;a href=&#34;mailto:admin@habitica.com&#34;&gt;admin email&lt;/a&gt; rather than creating an issue (an admin will advise you if a new issue is necessary; usually it is not).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Have any questions about Habitica or its community?&lt;/strong&gt; See the links in the &lt;a href=&#34;https://habitica.com&#34;&gt;habitica.com&lt;/a&gt; website&#39;s Help menu or drop in to &lt;a href=&#34;https://habitica.com/groups/tavern&#34;&gt;Guilds &amp;gt; Tavern Chat&lt;/a&gt; to ask questions or chat socially!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MineDojo/Voyager</title>
    <updated>2023-06-28T01:41:29Z</updated>
    <id>tag:github.com,2023-06-28:/MineDojo/Voyager</id>
    <link href="https://github.com/MineDojo/Voyager" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An Open-Ended Embodied Agent with Large Language Models&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Voyager: An Open-Ended Embodied Agent with Large Language Models&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://voyager.minedojo.org/&#34;&gt;[Website]&lt;/a&gt; &lt;a href=&#34;https://arxiv.org/abs/2305.16291&#34;&gt;[Arxiv]&lt;/a&gt; &lt;a href=&#34;https://voyager.minedojo.org/assets/documents/voyager.pdf&#34;&gt;[PDF]&lt;/a&gt; &lt;a href=&#34;https://twitter.com/DrJimFan/status/1662115266933972993?s=20&#34;&gt;[Tweet]&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/MineDojo/Voyager&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Python-3.9-blue.svg?sanitize=true&#34; alt=&#34;Python Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/MineDojo/Voyager/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/MineDojo/Voyager&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;hr&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/MineDojo/Voyager/assets/25460983/ce29f45b-43a5-4399-8fd8-5dd105fd64f2&#34;&gt;https://github.com/MineDojo/Voyager/assets/25460983/ce29f45b-43a5-4399-8fd8-5dd105fd64f2&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MineDojo/Voyager/main/images/pull.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;We introduce Voyager, the first LLM-powered embodied lifelong learning agent in Minecraft that continuously explores the world, acquires diverse skills, and makes novel discoveries without human intervention. Voyager consists of three key components: 1) an automatic curriculum that maximizes exploration, 2) an ever-growing skill library of executable code for storing and retrieving complex behaviors, and 3) a new iterative prompting mechanism that incorporates environment feedback, execution errors, and self-verification for program improvement. Voyager interacts with GPT-4 via blackbox queries, which bypasses the need for model parameter fine-tuning. The skills developed by Voyager are temporally extended, interpretable, and compositional, which compounds the agent’s abilities rapidly and alleviates catastrophic forgetting. Empirically, Voyager shows strong in-context lifelong learning capability and exhibits exceptional proficiency in playing Minecraft. It obtains 3.3× more unique items, travels 2.3× longer distances, and unlocks key tech tree milestones up to 15.3× faster than prior SOTA. Voyager is able to utilize the learned skill library in a new Minecraft world to solve novel tasks from scratch, while other techniques struggle to generalize.&lt;/p&gt; &#xA;&lt;p&gt;In this repo, we provide Voyager code. This codebase is under &lt;a href=&#34;https://raw.githubusercontent.com/MineDojo/Voyager/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;Voyager requires Python ≥ 3.9 and Node.js ≥ 16.13.0. We have tested on Ubuntu 20.04, Windows 11, and macOS. You need to follow the instructions below to install Voyager.&lt;/p&gt; &#xA;&lt;h2&gt;Python Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/MineDojo/Voyager&#xA;cd Voyager&#xA;pip install -e .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Node.js Install&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the Python dependencies, you need to install the following Node.js packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd voyager/env/mineflayer&#xA;npm install -g npx&#xA;npm install&#xA;cd mineflayer-collectblock&#xA;npx tsc&#xA;cd ..&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Minecraft Instance Install&lt;/h2&gt; &#xA;&lt;p&gt;Voyager depends on Minecraft game. You need to install Minecraft game and set up a Minecraft instance.&lt;/p&gt; &#xA;&lt;p&gt;Follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/MineDojo/Voyager/main/installation/minecraft_instance_install.md&#34;&gt;Minecraft Login Tutorial&lt;/a&gt; to set up your Minecraft Instance.&lt;/p&gt; &#xA;&lt;h2&gt;Fabric Mods Install&lt;/h2&gt; &#xA;&lt;p&gt;You need to install fabric mods to support all the features in Voyager. Remember to use the correct Fabric version of all the mods.&lt;/p&gt; &#xA;&lt;p&gt;Follow the instructions in &lt;a href=&#34;https://raw.githubusercontent.com/MineDojo/Voyager/main/installation/fabric_mods_install.md&#34;&gt;Fabric Mods Install&lt;/a&gt; to install the mods.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Voyager uses OpenAI&#39;s GPT-4 as the language model. You need to have an OpenAI API key to use Voyager. You can get one from &lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;After the installation process, you can run Voyager by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from voyager import Voyager&#xA;&#xA;# You can also use mc_port instead of azure_login, but azure_login is highly recommended&#xA;azure_login = {&#xA;    &#34;client_id&#34;: &#34;YOUR_CLIENT_ID&#34;,&#xA;    &#34;redirect_url&#34;: &#34;https://127.0.0.1/auth-response&#34;,&#xA;    &#34;secret_value&#34;: &#34;[OPTIONAL] YOUR_SECRET_VALUE&#34;,&#xA;    &#34;version&#34;: &#34;fabric-loader-0.14.18-1.19&#34;, # the version Voyager is tested on&#xA;}&#xA;openai_api_key = &#34;YOUR_API_KEY&#34;&#xA;&#xA;voyager = Voyager(&#xA;    azure_login=azure_login,&#xA;    openai_api_key=openai_api_key,&#xA;)&#xA;&#xA;# start lifelong learning&#xA;voyager.learn()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are running with &lt;code&gt;Azure Login&lt;/code&gt; for the first time, it will ask you to follow the command line instruction to generate a config file.&lt;/li&gt; &#xA; &lt;li&gt;For &lt;code&gt;Azure Login&lt;/code&gt;, you also need to select the world and open the world to LAN by yourself. After you run &lt;code&gt;voyager.learn()&lt;/code&gt; the game will pop up soon, you need to: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Select &lt;code&gt;Singleplayer&lt;/code&gt; and press &lt;code&gt;Create New World&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Set Game Mode to &lt;code&gt;Creative&lt;/code&gt; and Difficulty to &lt;code&gt;Peaceful&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;After the world is created, press &lt;code&gt;Esc&lt;/code&gt; key and press &lt;code&gt;Open to LAN&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Select &lt;code&gt;Allow cheats: ON&lt;/code&gt; and press &lt;code&gt;Start LAN World&lt;/code&gt;. You will see the bot join the world soon.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Resume from a checkpoint during learning&lt;/h1&gt; &#xA;&lt;p&gt;If you stop the learning process and want to resume from a checkpoint later, you can instantiate Voyager by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from voyager import Voyager&#xA;&#xA;voyager = Voyager(&#xA;    azure_login=azure_login,&#xA;    openai_api_key=openai_api_key,&#xA;    ckpt_dir=&#34;YOUR_CKPT_DIR&#34;,&#xA;    resume=True,&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Run Voyager for a specific task with a learned skill library&lt;/h1&gt; &#xA;&lt;p&gt;If you want to run Voyager for a specific task with a learned skill library, you should first pass the skill library directory to Voyager:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from voyager import Voyager&#xA;&#xA;# First instantiate Voyager with skill_library_dir.&#xA;voyager = Voyager(&#xA;    azure_login=azure_login,&#xA;    openai_api_key=openai_api_key,&#xA;    skill_library_dir=&#34;./skill_library/trial1&#34;, # Load a learned skill library.&#xA;    ckpt_dir=&#34;YOUR_CKPT_DIR&#34;, # Feel free to use a new dir. Do not use the same dir as skill library because new events will still be recorded to ckpt_dir. &#xA;    resume=False, # Do not resume from a skill library because this is not learning.&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, you can run task decomposition. Notice: Occasionally, the task decomposition may not be logical. If you notice the printed sub-goals are flawed, you can rerun the decomposition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Run task decomposition&#xA;task = &#34;YOUR TASK&#34; # e.g. &#34;Craft a diamond pickaxe&#34;&#xA;sub_goals = voyager.decompose_task(task=task)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, you can run the sub-goals with the learned skill library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;voyager.inference(sub_goals=sub_goals)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For all valid skill libraries, see &lt;a href=&#34;https://raw.githubusercontent.com/MineDojo/Voyager/main/skill_library/README.md&#34;&gt;Learned Skill Libraries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;p&gt;If you have any questions, please check our &lt;a href=&#34;https://raw.githubusercontent.com/MineDojo/Voyager/main/FAQ.md&#34;&gt;FAQ&lt;/a&gt; first before opening an issue.&lt;/p&gt; &#xA;&lt;h1&gt;Paper and Citation&lt;/h1&gt; &#xA;&lt;p&gt;If you find our work useful, please consider citing us!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bibtex&#34;&gt;@article{wang2023voyager,&#xA;  title   = {Voyager: An Open-Ended Embodied Agent with Large Language Models},&#xA;  author  = {Guanzhi Wang and Yuqi Xie and Yunfan Jiang and Ajay Mandlekar and Chaowei Xiao and Yuke Zhu and Linxi Fan and Anima Anandkumar},&#xA;  year    = {2023},&#xA;  journal = {arXiv preprint arXiv: Arxiv-2305.16291}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Disclaimer: This project is strictly for research purposes, and not an official product from NVIDIA.&lt;/p&gt;</summary>
  </entry>
</feed>