<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-16T01:36:03Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>cocktailpeanut/dalai</title>
    <updated>2023-03-16T01:36:03Z</updated>
    <id>tag:github.com,2023-03-16:/cocktailpeanut/dalai</id>
    <link href="https://github.com/cocktailpeanut/dalai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The simplest way to run LLaMA on your local machine&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dalai&lt;/h1&gt; &#xA;&lt;p&gt;Run LLaMA on your computer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cocktailpeanut/dalai&#34; class=&#34;inverse btn&#34;&gt;&lt;i class=&#34;fa-brands fa-github&#34;&gt;&lt;/i&gt; Github&lt;/a&gt; &lt;a href=&#34;https://twitter.com/cocktailpeanut&#34; class=&#34;inverse btn&#34;&gt;&lt;i class=&#34;fa-brands fa-twitter&#34;&gt;&lt;/i&gt; Twitter&lt;/a&gt; &lt;a href=&#34;https://discord.gg/XahBUrbVwz&#34; class=&#34;inverse btn&#34;&gt;&lt;i class=&#34;fa-brands fa-discord&#34;&gt;&lt;/i&gt; Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;JUST RUN THIS:&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/dalai/main/terminal.png&#34; class=&#34;round&#34;&gt; &#xA;&lt;h4&gt;TO GET:&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/dalai/main/dalai.gif&#34; alt=&#34;dalai.gif&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Powered by &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; and &lt;a href=&#34;https://github.com/shawwn/llama-dl&#34;&gt;llama-dl CDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Hackable web app included&lt;/li&gt; &#xA; &lt;li&gt;Ships with JavaScript API&lt;/li&gt; &#xA; &lt;li&gt;Ships with &lt;a href=&#34;https://socket.io/&#34;&gt;Socket.io&lt;/a&gt; API&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Intro&lt;/h1&gt; &#xA;&lt;h2&gt;1. Cross platform&lt;/h2&gt; &#xA;&lt;p&gt;Dalai runs on all of the following operating systems:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Linux&lt;/li&gt; &#xA; &lt;li&gt;Mac&lt;/li&gt; &#xA; &lt;li&gt;Windows&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;2. System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Runs on most modern computers. Unless your computer is very very old, it should work.&lt;/p&gt; &#xA;&lt;h2&gt;3. Disk Space Requirements&lt;/h2&gt; &#xA;&lt;p&gt;You need a lot of space for storing the models.&lt;/p&gt; &#xA;&lt;p&gt;You do NOT have to install all models, you can install one by one. Let&#39;s take a look at how much space each model takes up:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE&lt;/p&gt; &#xA; &lt;p&gt;The following numbers assume that you DO NOT touch the original model files and keep BOTH the original model files AND the quantized versions.&lt;/p&gt; &#xA; &lt;p&gt;You can optimize this if you delete the original models (which are much larger) after installation and keep only the quantized versions.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;7B&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full: The model takes up 31.17GB&lt;/li&gt; &#xA; &lt;li&gt;Quantized: 4.21GB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/dalai/main/7b.png&#34; alt=&#34;7b.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;13B&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full: The model takes up 60.21GB&lt;/li&gt; &#xA; &lt;li&gt;Quantized: 4.07GB * 2 = 8.14GB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/dalai/main/13b.png&#34; alt=&#34;13b.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;30B&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full: The model takes up 150.48GB&lt;/li&gt; &#xA; &lt;li&gt;Quantized: 5.09GB * 4 = 20.36GB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/dalai/main/30b.png&#34; alt=&#34;30b.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;65B&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Full: The model takes up 432.64GB&lt;/li&gt; &#xA; &lt;li&gt;Quantized: 5.11GB * 8 = 40.88GB&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/dalai/main/65b.png&#34; alt=&#34;65b.png&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Quickstart&lt;/h1&gt; &#xA;&lt;h2&gt;Mac&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1. Install node.js&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34; class=&#34;btn&#34;&gt;Install Node.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 2. Install Dalai&lt;/h3&gt; &#xA;&lt;p&gt;Basic install (7B model only)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai llama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, install all models&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai llama 7B 13B 30B 65B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The install command :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creates a folder named &lt;code&gt;dalai&lt;/code&gt; under your home directory (&lt;code&gt;~&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Installs and builds the &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; project under &lt;code&gt;~/llama.cpp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloads all the requested models from the &lt;a href=&#34;https://github.com/shawwn/llama-dl&#34;&gt;llama-dl CDN&lt;/a&gt; to &lt;code&gt;~/llama.cpp/models&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Runs some tasks to convert the LLaMA models so they can be used&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Step 3. Run Web UI&lt;/h3&gt; &#xA;&lt;p&gt;After everything has been installed, launch the Web UI with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser. Have fun!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Windows&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1. Install Visual Studio&lt;/h3&gt; &#xA;&lt;p&gt;On windows, you need to install Visual Studio before installing Dalai.&lt;/p&gt; &#xA;&lt;p&gt;Press the button below to visit the Visual Studio downloads page and download:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34; class=&#34;btn&#34;&gt;Download Microsoft Visual Studio&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;IMPORTANT!!!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;When installing Visual Studio, make sure to check the 3 options as highlighted below:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Python development&lt;/li&gt; &#xA; &lt;li&gt;Node.js development&lt;/li&gt; &#xA; &lt;li&gt;Desktop development with C++&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/cocktailpeanut/dalai/main/vs.png&#34; alt=&#34;vs.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Step 2.1. Install Dalai&lt;/h3&gt; &#xA;&lt;p&gt;Basic install (7B model only)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai llama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, install all models&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai llama 7B 13B 30B 65B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The install command :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creates a folder named &lt;code&gt;dalai&lt;/code&gt; under your home directory (&lt;code&gt;~&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Installs and builds the &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; project under &lt;code&gt;~/llama.cpp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloads all the requested models from the &lt;a href=&#34;https://github.com/shawwn/llama-dl&#34;&gt;llama-dl CDN&lt;/a&gt; to &lt;code&gt;~/llama.cpp/models&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Runs some tasks to convert the LLaMA models so they can be used&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;If this worked without any errors, go to step 3.&lt;/p&gt; &#xA;&lt;p&gt;Ohterwise try the troubleshoot below:&lt;/p&gt; &#xA;&lt;h3&gt;Step 2.2. Troubleshoot (optional)&lt;/h3&gt; &#xA;&lt;p&gt;In case above steps fail to install, try installing node.js and python separately.&lt;/p&gt; &#xA;&lt;p&gt;Install Python:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.python.org/ftp/python/3.10.10/python-3.10.10-embed-amd64.zip&#34; class=&#34;btn&#34;&gt;Download Python&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install Node.js:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34; class=&#34;btn&#34;&gt;Download Node.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;After both have been installed, open powershell and type &lt;code&gt;python&lt;/code&gt; to see if the application exists. And also type &lt;code&gt;node&lt;/code&gt; to see if the application exists as well.&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve checked that they both exist, try the &lt;code&gt;npx dalai llama&lt;/code&gt; command again.&lt;/p&gt; &#xA;&lt;h3&gt;Step 3. Run Web UI&lt;/h3&gt; &#xA;&lt;p&gt;After everything has been installed, launch the Web UI with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser. Have fun!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Linux&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1. Install&lt;/h3&gt; &#xA;&lt;p&gt;After everything has been installed, open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser. Have fun!&lt;/p&gt; &#xA;&lt;p&gt;Basic install (7B model only)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai llama&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, install all models&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai llama 7B 13B 30B 65B&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The install command :&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Creates a folder named &lt;code&gt;dalai&lt;/code&gt; under your home directory (&lt;code&gt;~&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Installs and builds the &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; project under &lt;code&gt;~/llama.cpp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Downloads all the requested models from the &lt;a href=&#34;https://github.com/shawwn/llama-dl&#34;&gt;llama-dl CDN&lt;/a&gt; to &lt;code&gt;~/llama.cpp/models&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Runs some tasks to convert the LLaMA models so they can be used&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Step 2. Run Web UI&lt;/h3&gt; &#xA;&lt;p&gt;After everything has been installed, launch the Web UI with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; in your browser. Have fun!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;API&lt;/h1&gt; &#xA;&lt;p&gt;Dalai is also an NPM package:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;programmatically install&lt;/li&gt; &#xA; &lt;li&gt;locally make requests to the model&lt;/li&gt; &#xA; &lt;li&gt;run a dalai server (powered by socket.io)&lt;/li&gt; &#xA; &lt;li&gt;programmatically make requests to a remote dalai server (via socket.io)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Dalai is an NPM package. You can install it using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install dalai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1. constructor()&lt;/h2&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const dalai = new Dalai(home)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;home&lt;/code&gt;: (optional) manually specify the &lt;a href=&#34;https://github.com/ggerganov/llama.cpp&#34;&gt;llama.cpp&lt;/a&gt; folder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, Dalai automatically stores the entire &lt;code&gt;llama.cpp&lt;/code&gt; repository under &lt;code&gt;~/llama.cpp&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, often you may already have a &lt;code&gt;llama.cpp&lt;/code&gt; repository somewhere else on your machine and want to just use that folder. In this case you can pass in the &lt;code&gt;home&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;Basic&lt;/h4&gt; &#xA;&lt;p&gt;Creates a workspace at &lt;code&gt;~/llama.cpp&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const dalai = new Dalai()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom path&lt;/h4&gt; &#xA;&lt;p&gt;Manually set the &lt;code&gt;llama.cpp&lt;/code&gt; path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const dalai = new Dalai(&#34;/Documents/llama.cpp&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;2. request()&lt;/h2&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;dalai.request(req, callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;req&lt;/code&gt;: a request object. made up of the following attributes: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;prompt&lt;/code&gt;: &lt;strong&gt;(required)&lt;/strong&gt; The prompt string&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;model&lt;/code&gt;: &lt;strong&gt;(required)&lt;/strong&gt; The model name to query (&#34;7B&#34;, &#34;13B&#34;, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;url&lt;/code&gt;: only needed if connecting to a remote dalai server &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;if unspecified, it uses the node.js API to directly run dalai locally&lt;/li&gt; &#xA;     &lt;li&gt;if specified (for example &lt;code&gt;ws://localhost:3000&lt;/code&gt;) it looks for a socket.io endpoint at the URL and connects to it.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;threads&lt;/code&gt;: The number of threads to use (The default is 8 if unspecified)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;n_predict&lt;/code&gt;: The number of tokens to return (The default is 128 if unspecified)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;seed&lt;/code&gt;: The seed. The default is -1 (none)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;top_k&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;top_p&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repeat_last_n&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;repeat_penalty&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;temp&lt;/code&gt;: temperature&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;batch_size&lt;/code&gt;: batch size&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;skip_end&lt;/code&gt;: by default, every session ends with &lt;code&gt;\n\n&amp;lt;end&amp;gt;&lt;/code&gt;, which can be used as a marker to know when the full response has returned. However sometimes you may not want this suffix. Set &lt;code&gt;skip_end: true&lt;/code&gt; and the response will no longer end with &lt;code&gt;\n\n&amp;lt;end&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;callback&lt;/code&gt;: the streaming callback function that gets called every time the client gets any token response back from the model&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;h4&gt;1. Node.js&lt;/h4&gt; &#xA;&lt;p&gt;Using node.js, you just need to initialize a Dalai object with &lt;code&gt;new Dalai()&lt;/code&gt; and then use it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Dalai = require(&#39;dalai&#39;)&#xA;new Dalai().request({&#xA;  model: &#34;7B&#34;,&#xA;  prompt: &#34;The following is a conversation between a boy and a girl:&#34;,&#xA;}, (token) =&amp;gt; {&#xA;  process.stdout.write(token)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Non node.js (socket.io)&lt;/h4&gt; &#xA;&lt;p&gt;To make use of this in a browser or any other language, you can use thie socket.io API.&lt;/p&gt; &#xA;&lt;h5&gt;Step 1. start a server&lt;/h5&gt; &#xA;&lt;p&gt;First you need to run a Dalai socket server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// server.js&#xA;const Dalai = require(&#39;dalai&#39;)&#xA;new Dalai().serve(3000)     // port 3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Step 2. connect to the server&lt;/h5&gt; &#xA;&lt;p&gt;Then once the server is running, simply make requests to it by passing the &lt;code&gt;ws://localhost:3000&lt;/code&gt; socket url when initializing the Dalai object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Dalai = require(&#34;dalai&#34;)&#xA;new Dalai().request({&#xA;  url: &#34;ws://localhost:3000&#34;,&#xA;  model: &#34;7B&#34;,&#xA;  prompt: &#34;The following is a conversation between a boy and a girl:&#34;,&#xA;}, (token) =&amp;gt; {&#xA;  console.log(&#34;token&#34;, token)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;3. serve()&lt;/h2&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;p&gt;Starts a socket.io server at &lt;code&gt;port&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;dalai.serve(port)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Dalai = require(&#34;dalai&#34;)&#xA;new Dalai().serve(3000)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;4. http()&lt;/h2&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;p&gt;connect with an existing &lt;code&gt;http&lt;/code&gt; instance (The &lt;code&gt;http&lt;/code&gt; npm package)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;dalai.http(http)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;http&lt;/code&gt;: The &lt;a href=&#34;https://nodejs.org/api/http.html&#34;&gt;http&lt;/a&gt; object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;This is useful when you&#39;re trying to plug dalai into an existing node.js web app&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const app = require(&#39;express&#39;)();&#xA;const http = require(&#39;http&#39;).Server(app);&#xA;dalai.http(http)&#xA;http.listen(3000, () =&amp;gt; {&#xA;  console.log(&#34;server started&#34;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5. install()&lt;/h2&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;await dalai.install(model1, model2, ...)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;models&lt;/code&gt;: the model names to install (&#34;7B&#34;`, &#34;13B&#34;, &#34;30B&#34;, &#34;65B&#34;, etc)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Install the &#34;7B&#34; and &#34;13B&#34; models:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Dalai = require(&#34;dalai&#34;);&#xA;const dalai = new Dalai()&#xA;await dalai.install(&#34;7B&#34;, &#34;13B&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;6. installed()&lt;/h2&gt; &#xA;&lt;p&gt;returns the array of installed models&lt;/p&gt; &#xA;&lt;h3&gt;Syntax&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const models = await dalai.installed()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Dalai = require(&#34;dalai&#34;);&#xA;const dalai = new Dalai()&#xA;const models = await dalai.installed()&#xA;console.log(models)     // prints [&#34;7B&#34;, &#34;13B&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;h2&gt;Updating to the latest&lt;/h2&gt; &#xA;&lt;p&gt;Dalai is a young project and will evolve quickly.&lt;/p&gt; &#xA;&lt;p&gt;To update dalai, you will need to run the dalai command with a version number specified (You only need to do this once when you update).&lt;/p&gt; &#xA;&lt;p&gt;For example, let&#39;s say you&#39;ve been using &lt;code&gt;dalai@0.1.0&lt;/code&gt; but a new version &lt;code&gt;dalai@0.2.0&lt;/code&gt; came out.&lt;/p&gt; &#xA;&lt;p&gt;The simplest way to update is to just run the dalai server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npx dalai@0.2.0 serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once you run the command it will ask you if you want to update. Confirm, and it will now install &lt;code&gt;0.2.0&lt;/code&gt;, and from that point on you don&#39;t need to specify the version. You can just run &lt;code&gt;npx dalai serve&lt;/code&gt; and the new version will be executed from that point on.&lt;/p&gt; &#xA;&lt;h2&gt;Staying up to date&lt;/h2&gt; &#xA;&lt;p&gt;Have questions or feedback? Follow the project through the following outlets:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cocktailpeanut/dalai&#34; class=&#34;inverse btn&#34;&gt;&lt;i class=&#34;fa-brands fa-github&#34;&gt;&lt;/i&gt; Github&lt;/a&gt; &lt;a href=&#34;https://twitter.com/cocktailpeanut&#34; class=&#34;inverse btn&#34;&gt;&lt;i class=&#34;fa-brands fa-twitter&#34;&gt;&lt;/i&gt; Twitter&lt;/a&gt; &lt;a href=&#34;https://discord.gg/XahBUrbVwz&#34; class=&#34;inverse btn&#34;&gt;&lt;i class=&#34;fa-brands fa-discord&#34;&gt;&lt;/i&gt; Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>lxieyang/chrome-extension-boilerplate-react</title>
    <updated>2023-03-16T01:36:03Z</updated>
    <id>tag:github.com,2023-03-16:/lxieyang/chrome-extension-boilerplate-react</id>
    <link href="https://github.com/lxieyang/chrome-extension-boilerplate-react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Chrome Extensions boilerplate using React 18 and Webpack 5.&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/lxieyang/chrome-extension-boilerplate-react/master/src/assets/img/icon-128.png&#34; width=&#34;64&#34;&gt; &#xA;&lt;h1&gt;Chrome Extension (MV3) Boilerplate with React 18 and Webpack 5&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/chrome-extension-boilerplate-react&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/chrome-extension-boilerplate-react&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/chrome-extension-boilerplate-react&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/chrome-extension-boilerplate-react&#34; alt=&#34;npm-download&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/chrome-extension-boilerplate-react&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/chrome-extension-boilerplate-react&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Announcements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Recently updated from &lt;strong&gt;&lt;a href=&#34;https://reactjs.org&#34;&gt;React&lt;/a&gt;&lt;/strong&gt; &lt;del&gt;17&lt;/del&gt; to &lt;strong&gt;18&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;em&gt;This boilerplate adopts &lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/intro/mv3-overview/&#34;&gt;Manifest V3&lt;/a&gt;!&lt;/em&gt;&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For V2 users, please check out the &lt;a href=&#34;https://github.com/lxieyang/chrome-extension-boilerplate-react/tree/manifest-v2&#34;&gt;manifest-v2&lt;/a&gt; branch, or use version &lt;a href=&#34;https://www.npmjs.com/package/chrome-extension-boilerplate-react/v/3.3.0&#34;&gt;3.x&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Check out the &lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/intro/mv3-migration/&#34;&gt;Manifest V3 Migration Guide&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Recently added &lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/devtools/&#34;&gt;devtools&lt;/a&gt; Support! Thanks &lt;a href=&#34;https://github.com/lxieyang/chrome-extension-boilerplate-react/issues/17&#34;&gt;GeekaholicLin&lt;/a&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Recently updated from &lt;strong&gt;&lt;a href=&#34;https://webpack.js.org/configuration/dev-server/&#34;&gt;Webpack Dev Server&lt;/a&gt;&lt;/strong&gt; &lt;del&gt;3.x&lt;/del&gt; to &lt;strong&gt;4.x&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&#34;https://webpack.js.org/&#34;&gt;Webpack&lt;/a&gt;&lt;/strong&gt; &lt;del&gt;4&lt;/del&gt; to &lt;strong&gt;5&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;Recently added &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt; Support!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;This is a basic Chrome Extensions boilerplate to help you write modular and modern Javascript code, load CSS easily and &lt;a href=&#34;https://webpack.github.io/docs/webpack-dev-server.html#automatic-refresh&#34;&gt;automatic reload the browser on code changes&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This boilerplate is updated with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/docs/extensions/mv3/intro/mv3-overview/&#34;&gt;Chrome Extension Manifest V3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org&#34;&gt;React 18&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webpack.js.org/&#34;&gt;Webpack 5&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webpack.js.org/configuration/dev-server/&#34;&gt;Webpack Dev Server 4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/react-refresh&#34;&gt;React Refresh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmmmwh/react-refresh-webpack-plugin&#34;&gt;react-refresh-webpack-plugin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/eslint-config-react-app&#34;&gt;eslint-config-react-app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://prettier.io/&#34;&gt;Prettier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This boilerplate is heavily inspired by and adapted from &lt;a href=&#34;https://github.com/samuelsimoes/chrome-extension-webpack-boilerplate&#34;&gt;https://github.com/samuelsimoes/chrome-extension-webpack-boilerplate&lt;/a&gt;, with additional support for React 18 features, Webpack 5, and Webpack Dev Server 4.&lt;/p&gt; &#xA;&lt;p&gt;Please open up an issue to nudge me to keep the npm packages up-to-date. FYI, it takes time to make different packages with different versions work together nicely.&lt;/p&gt; &#xA;&lt;h2&gt;Installing and Running&lt;/h2&gt; &#xA;&lt;h3&gt;Procedures:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check if your &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt; version is &amp;gt;= &lt;strong&gt;18&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone this repository.&lt;/li&gt; &#xA; &lt;li&gt;Change the package&#39;s &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;description&lt;/code&gt;, and &lt;code&gt;repository&lt;/code&gt; fields in &lt;code&gt;package.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Change the name of your extension on &lt;code&gt;src/manifest.json&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to install the dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Load your extension on Chrome following: &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Access &lt;code&gt;chrome://extensions/&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Check &lt;code&gt;Developer mode&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Click on &lt;code&gt;Load unpacked extension&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Select the &lt;code&gt;build&lt;/code&gt; folder.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Happy hacking.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Structure&lt;/h2&gt; &#xA;&lt;p&gt;All your extension&#39;s code must be placed in the &lt;code&gt;src&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;The boilerplate is already prepared to have a popup, an options page, a background page, and a new tab page (which replaces the new tab page of your browser). But feel free to customize these.&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;This boilerplate now supports TypeScript! The &lt;code&gt;Options&lt;/code&gt; Page is implemented using TypeScript. Please refer to &lt;code&gt;src/pages/Options/&lt;/code&gt; for example usages.&lt;/p&gt; &#xA;&lt;h2&gt;Webpack auto-reload and HRM&lt;/h2&gt; &#xA;&lt;p&gt;To make your workflow much more efficient this boilerplate uses the &lt;a href=&#34;https://webpack.github.io/docs/webpack-dev-server.html&#34;&gt;webpack server&lt;/a&gt; to development (started with &lt;code&gt;npm start&lt;/code&gt;) with auto reload feature that reloads the browser automatically every time that you save some file in your editor.&lt;/p&gt; &#xA;&lt;p&gt;You can run the dev mode on other port if you want. Just specify the env var &lt;code&gt;port&lt;/code&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ PORT=6002 npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Content Scripts&lt;/h2&gt; &#xA;&lt;p&gt;Although this boilerplate uses the webpack dev server, it&#39;s also prepared to write all your bundles files on the disk at every code change, so you can point, on your extension manifest, to your bundles that you want to use as &lt;a href=&#34;https://developer.chrome.com/extensions/content_scripts&#34;&gt;content scripts&lt;/a&gt;, but you need to exclude these entry points from hot reloading &lt;a href=&#34;https://github.com/samuelsimoes/chrome-extension-webpack-boilerplate/issues/4#issuecomment-261788690&#34;&gt;(why?)&lt;/a&gt;. To do so you need to expose which entry points are content scripts on the &lt;code&gt;webpack.config.js&lt;/code&gt; using the &lt;code&gt;chromeExtensionBoilerplate -&amp;gt; notHotReload&lt;/code&gt; config. Look the example below.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say that you want use the &lt;code&gt;myContentScript&lt;/code&gt; entry point as content script, so on your &lt;code&gt;webpack.config.js&lt;/code&gt; you will configure the entry point and exclude it from hot reloading, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  …&#xA;  entry: {&#xA;    myContentScript: &#34;./src/js/myContentScript.js&#34;&#xA;  },&#xA;  chromeExtensionBoilerplate: {&#xA;    notHotReload: [&#34;myContentScript&#34;]&#xA;  }&#xA;  …&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and on your &lt;code&gt;src/manifest.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;content_scripts&#34;: [&#xA;    {&#xA;      &#34;matches&#34;: [&#34;https://www.google.com/*&#34;],&#xA;      &#34;js&#34;: [&#34;myContentScript.bundle.js&#34;]&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Intelligent Code Completion&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/lxieyang/chrome-extension-boilerplate-react/issues/4&#34;&gt;@hudidit&lt;/a&gt;&#39;s kind suggestions, this boilerplate supports chrome-specific intelligent code completion using &lt;a href=&#34;https://www.npmjs.com/package/@types/chrome&#34;&gt;@types/chrome&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Packing&lt;/h2&gt; &#xA;&lt;p&gt;After the development of your extension run the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ NODE_ENV=production npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, the content of &lt;code&gt;build&lt;/code&gt; folder will be the extension ready to be submitted to the Chrome Web Store. Just take a look at the &lt;a href=&#34;https://developer.chrome.com/webstore/publish&#34;&gt;official guide&lt;/a&gt; to more infos about publishing.&lt;/p&gt; &#xA;&lt;h2&gt;Secrets&lt;/h2&gt; &#xA;&lt;p&gt;If you are developing an extension that talks with some API you probably are using different keys for testing and production. Is a good practice you not commit your secret keys and expose to anyone that have access to the repository.&lt;/p&gt; &#xA;&lt;p&gt;To this task this boilerplate import the file &lt;code&gt;./secrets.&amp;lt;THE-NODE_ENV&amp;gt;.js&lt;/code&gt; on your modules through the module named as &lt;code&gt;secrets&lt;/code&gt;, so you can do things like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;./secrets.development.js&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;export default { key: &#39;123&#39; };&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;./src/popup.js&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import secrets from &#39;secrets&#39;;&#xA;ApiCall({ key: secrets.key });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;span&gt;👉&lt;/span&gt; The files with name &lt;code&gt;secrets.*.js&lt;/code&gt; already are ignored on the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Resources:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://webpack.js.org/concepts/&#34;&gt;Webpack documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.chrome.com/extensions/getstarted&#34;&gt;Chrome Extension documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Michael Xieyang Liu | &lt;a href=&#34;https://lxieyang.github.io&#34;&gt;Website&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dequelabs/axe-core</title>
    <updated>2023-03-16T01:36:03Z</updated>
    <id>tag:github.com,2023-03-16:/dequelabs/axe-core</id>
    <link href="https://github.com/dequelabs/axe-core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Accessibility engine for automated Web UI testing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;axe-core&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/axe-core.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/axe-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/axe-core.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/axe-core&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/axe-core.svg?sanitize=true&#34; alt=&#34;Total npm downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dequelabs/axe-core/commits/develop&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/y/dequelabs/axe-core.svg?sanitize=true&#34; alt=&#34;Commits&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dequelabs/axe-core/graphs/contributors&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/contributors/dequelabs/axe-core.svg?sanitize=true&#34; alt=&#34;GitHub contributors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://accessibility.deque.com/axe-community&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/slack-chat-purple.svg?logo=slack&#34; alt=&#34;Join our Slack chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagequality.com/#?package=axe-core&#34;&gt;&lt;img src=&#34;https://npm.packagequality.com/shield/axe-core.svg?sanitize=true&#34; alt=&#34;Package Quality&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Axe is an accessibility testing engine for websites and other HTML-based user interfaces. It&#39;s fast, secure, lightweight, and was built to seamlessly integrate with any existing test environment so you can automate accessibility testing alongside your regular functional testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hubs.ly/H0fsN0b0&#34;&gt;Sign up for axe news&lt;/a&gt; to get the latest on axe features, future releases, and events.&lt;/p&gt; &#xA;&lt;h2&gt;The Accessibility Rules&lt;/h2&gt; &#xA;&lt;p&gt;Axe-core has different types of rules, for WCAG 2.0 and 2.1 on level A and AA, as well as a number of best practices that help you identify common accessibility practices like ensuring every page has an &lt;code&gt;h1&lt;/code&gt; heading, and to help you avoid &#34;gotchas&#34; in ARIA like where an ARIA attribute you used will get ignored.&lt;/p&gt; &#xA;&lt;p&gt;With axe-core, you can find &lt;strong&gt;on average 57% of WCAG issues automatically&lt;/strong&gt;. Additionally, axe-core will return elements as &#34;incomplete&#34; where axe-core could not be certain, and manual review is needed.&lt;/p&gt; &#xA;&lt;p&gt;To catch bugs earlier in the development cycle we recommend using the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=deque-systems.vscode-axe-linter&#34;&gt;axe-linter vscode extension&lt;/a&gt;. To improve test coverage even further we recommend the &lt;a href=&#34;https://www.youtube.com/watch?v=AtsX0dPCG_4&amp;amp;feature=youtu.be&amp;amp;ab_channel=DequeSystems&#34;&gt;intelligent guided tests&lt;/a&gt; in the &lt;a href=&#34;https://www.deque.com/axe/browser-extensions/&#34;&gt;axe Extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The complete list of rules, grouped WCAG level and best practice, can found in &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/rule-descriptions.md&#34;&gt;doc/rule-descriptions.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;First download the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;npm install axe-core --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now include the javascript file in each of your iframes in your fixtures or test systems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;node_modules/axe-core/axe.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now insert calls at each point in your tests where a new piece of UI becomes visible or exposed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axe&#xA;  .run()&#xA;  .then(results =&amp;gt; {&#xA;    if (results.violations.length) {&#xA;      throw new Error(&#39;Accessibility issues found&#39;);&#xA;    }&#xA;  })&#xA;  .catch(err =&amp;gt; {&#xA;    console.error(&#39;Something bad happened:&#39;, err.message);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Philosophy&lt;/h2&gt; &#xA;&lt;p&gt;The web can only become an accessible, inclusive space if developers are empowered to take responsibility for accessibility testing and accessible coding practices.&lt;/p&gt; &#xA;&lt;p&gt;Automated accessibility testing is a huge timesaver, it doesn&#39;t require special expertise, and it allows teams to focus expert resources on the accessibility issues that really need them. Unfortunately, most accessibility tools are meant to be run on sites and applications that have reached the end of the development process and often don&#39;t give clear or consistent results, causing frustration and delays just when you thought your product was ready to ship.&lt;/p&gt; &#xA;&lt;p&gt;Axe was built to reflect how web development actually works. It works with all modern browsers, tools, and testing environments a dev team might use. With axe, accessibility testing can be performed as part of your unit testing, integration testing, browser testing, and any other functional testing your team already performs on a day-to-day basis. Building accessibility testing into the early development process saves time, resources, and all kinds of frustration.&lt;/p&gt; &#xA;&lt;h2&gt;About axe - our Manifesto&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Axe is open source.&lt;/li&gt; &#xA; &lt;li&gt;It returns zero false positives (bugs notwithstanding).&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s designed to work on all modern browsers and with whatever tools, frameworks, libraries and environments you use today.&lt;/li&gt; &#xA; &lt;li&gt;It&#39;s actively supported by &lt;a href=&#34;https://www.deque.com&#34;&gt;Deque Systems&lt;/a&gt;, a major accessibility vendor.&lt;/li&gt; &#xA; &lt;li&gt;It integrates with your existing functional/acceptance automated tests.&lt;/li&gt; &#xA; &lt;li&gt;It automatically determines which rules to run based on the evaluation context.&lt;/li&gt; &#xA; &lt;li&gt;Axe supports in-memory fixtures, static fixtures, integration tests and iframes of infinite depth.&lt;/li&gt; &#xA; &lt;li&gt;Axe is highly configurable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Browsers&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/API.md&#34;&gt;axe-core API&lt;/a&gt; fully supports the following browsers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Microsoft Edge v40 and above&lt;/li&gt; &#xA; &lt;li&gt;Google Chrome v42 and above&lt;/li&gt; &#xA; &lt;li&gt;Mozilla Firefox v38 and above&lt;/li&gt; &#xA; &lt;li&gt;Apple Safari v7 and above&lt;/li&gt; &#xA; &lt;li&gt;Internet Explorer v11 (DEPRECATED)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Support means that we will fix bugs and attempt to test each browser regularly. Only Chrome and Firefox are currently tested on every pull request.&lt;/p&gt; &#xA;&lt;p&gt;There is limited support for JSDOM. We will attempt to make all rules compatible with JSDOM but where this is not possible, we recommend turning those rules off. Currently the &lt;code&gt;color-contrast&lt;/code&gt; rule is known not to work with JSDOM.&lt;/p&gt; &#xA;&lt;p&gt;We can only support environments where features are either natively supported or polyfilled correctly. We do not support the deprecated v0 Shadow DOM implementation.&lt;/p&gt; &#xA;&lt;h2&gt;Contents of the API Package&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/API.md&#34;&gt;axe-core API&lt;/a&gt; package consists of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;axe.js&lt;/code&gt; - the JavaScript file that should be included in your web site under test (API)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;axe.min.js&lt;/code&gt; - a minified version of the above file&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;p&gt;Axe can be built using your local language. To do so, a localization file must be added to the &lt;code&gt;./locales&lt;/code&gt; directory. This file must have be named in the following manner: &lt;code&gt;&amp;lt;langcode&amp;gt;.json&lt;/code&gt;. To build axe using this locale, instead of the default, run axe with the &lt;code&gt;--lang&lt;/code&gt; flag, like so:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;grunt build --lang=nl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or equivalently:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;npm run build -- --lang=nl&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will create a new build for axe, called &lt;code&gt;axe.&amp;lt;lang&amp;gt;.js&lt;/code&gt; and &lt;code&gt;axe.&amp;lt;lang&amp;gt;.min.js&lt;/code&gt;. If you want to build localized versions, simply pass in &lt;code&gt;--all-lang&lt;/code&gt; instead. If you want to build multiple localized versions (but not all of them), you can pass in a comma-separated list of languages to the &lt;code&gt;--lang&lt;/code&gt; flag, like &lt;code&gt;--lang=nl,ja&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To create a new translation for axe, start by running &lt;code&gt;grunt translate --lang=&amp;lt;langcode&amp;gt;&lt;/code&gt;. This will create a json file fin the &lt;code&gt;./locales&lt;/code&gt; directory, with the default English text in it for you to translate. Alternatively, you could copy &lt;code&gt;./locales/_template.json&lt;/code&gt;. We welcome any localization for axe-core. For details on how to contribute, see the Contributing section below. For details on the message syntax, see &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/docs/check-message-template.md&#34;&gt;Check Message Template&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To update existing translation file, re-run &lt;code&gt;grunt translate --lang=&amp;lt;langcode&amp;gt;&lt;/code&gt;. This will add new messages used in English and remove messages which were not used in English.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, locale can be applied at runtime by passing a &lt;code&gt;locale&lt;/code&gt; object to &lt;code&gt;axe.configure()&lt;/code&gt;. The locale object must be of the same shape as existing locales in the &lt;code&gt;./locales&lt;/code&gt; directory. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;axe.configure({&#xA;  locale: {&#xA;    lang: &#39;de&#39;,&#xA;    rules: {&#xA;      accesskeys: {&#xA;        help: &#39;Der Wert des accesskey-Attributes muss einzigartig sein.&#39;&#xA;      }&#xA;      // ...&#xA;    },&#xA;    checks: {&#xA;      abstractrole: {&#xA;        fail: &#39;Abstrakte ARIA-Rollen dürfen nicht direkt verwendet werden.&#39;&#xA;      },&#xA;      &#39;aria-errormessage&#39;: {&#xA;        // Note: doT (https://github.com/olado/dot) templates are supported here.&#xA;        fail: &#39;Der Wert der aria-errormessage ${data.values}` muss eine Technik verwenden, um die Message anzukündigen (z. B., aria-live, aria-describedby, role=alert, etc.).&#39;&#xA;      }&#xA;      // ...&#xA;    }&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Supported Locales&lt;/h3&gt; &#xA;&lt;p&gt;Axe-core supports the following locales. Do note that since locales are contributed by our community, they are not guaranteed to include all translations needed in a release.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basque&lt;/li&gt; &#xA; &lt;li&gt;Danish&lt;/li&gt; &#xA; &lt;li&gt;Dutch&lt;/li&gt; &#xA; &lt;li&gt;French&lt;/li&gt; &#xA; &lt;li&gt;German&lt;/li&gt; &#xA; &lt;li&gt;Hebrew&lt;/li&gt; &#xA; &lt;li&gt;Japanese&lt;/li&gt; &#xA; &lt;li&gt;Korean&lt;/li&gt; &#xA; &lt;li&gt;Norwegian (Bokmål)&lt;/li&gt; &#xA; &lt;li&gt;Polish&lt;/li&gt; &#xA; &lt;li&gt;Portuguese (Brazilian)&lt;/li&gt; &#xA; &lt;li&gt;Spanish&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Updates &amp;amp; Security&lt;/h2&gt; &#xA;&lt;p&gt;Axe-core has a new minor release every 3 to 5 months, which usually introduces new rules and features. We recommend scheduling time to upgrade to these versions. Security updates will be made available for minor version lines up to &lt;strong&gt;18 months old&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/release-and-support.md&#34;&gt;release and support&lt;/a&gt; for details on the frequency of releases, long-term support and recommendations on upgrading axe-core.&lt;/li&gt; &#xA; &lt;li&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/backwards-compatibility-doc.md&#34;&gt;backward compatibility&lt;/a&gt; for details on the types of changes different releases may introduce.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported ARIA Roles and Attributes.&lt;/h2&gt; &#xA;&lt;p&gt;Refer &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/aria-supported.md&#34;&gt;axe-core ARIA support&lt;/a&gt; for a complete list of ARIA supported roles and attributes by axe.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/rule-proposal.md&#34;&gt;Proposing Axe-core Rules guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/developer-guide.md&#34;&gt;documentation on the architecture&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/CONTRIBUTING.md&#34;&gt;documentation on contributing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Projects using axe-core&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dequelabs/axe-core/develop/doc/projects.md&#34;&gt;List of projects using axe-core&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to Marat Dulin for his &lt;a href=&#34;https://www.npmjs.com/package/css-selector-parser&#34;&gt;css-selector-parser&lt;/a&gt; implementation which is included for shadow DOM support.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to the &lt;a href=&#34;https://github.com/mootools/slick/raw/master/Source/Slick.Parser.js&#34;&gt;Slick Parser&lt;/a&gt; implementers for their contribution, we have used some of their algorithms in our shadow DOM support code.&lt;/p&gt;</summary>
  </entry>
</feed>