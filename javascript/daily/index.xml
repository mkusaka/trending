<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-02T01:33:20Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>serverless-dns/serverless-dns</title>
    <updated>2022-08-02T01:33:20Z</updated>
    <id>tag:github.com,2022-08-02:/serverless-dns/serverless-dns</id>
    <link href="https://github.com/serverless-dns/serverless-dns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The RethinkDNS resolver that deploys to Cloudflare Workers, Deno Deploy, and Fly.io&lt;/p&gt;&lt;hr&gt;&lt;h4&gt;It&#39;s a bird, it&#39;s a plane, it&#39;s... a self-hosted, pi-hole esque, DNS resolver&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;serverless-dns&lt;/em&gt; is a Pi-Hole esque &lt;a href=&#34;https://github.com/serverless-dns/blocklists&#34;&gt;content-blocking&lt;/a&gt;, serverless, stub DNS-over-HTTPS (DoH) and DNS-over-TLS (DoT) resolver. Runs out-of-the-box on &lt;a href=&#34;https://workers.dev&#34;&gt;Cloudflare Workers&lt;/a&gt;, &lt;a href=&#34;https://deno.com/deploy&#34;&gt;Deno Deploy&lt;/a&gt;, and &lt;a href=&#34;https://fly.io/&#34;&gt;Fly.io&lt;/a&gt;. Free tiers of all these services should be enough to cover 10 to 20 devices worth of DNS traffic per month.&lt;/p&gt; &#xA;&lt;h3&gt;The RethinkDNS resolver&lt;/h3&gt; &#xA;&lt;p&gt;RethinkDNS runs &lt;code&gt;serverless-dns&lt;/code&gt; in production at these endpoints:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Cloud platform&lt;/th&gt; &#xA;   &lt;th&gt;Server locations&lt;/th&gt; &#xA;   &lt;th&gt;Protocol&lt;/th&gt; &#xA;   &lt;th&gt;Domain&lt;/th&gt; &#xA;   &lt;th&gt;Usage&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⛅ Cloudflare Workers&lt;/td&gt; &#xA;   &lt;td&gt;200+ (&lt;a href=&#34;https://check-host.net/check-ping?host=https://basic.rethinkdns.com&#34;&gt;ping&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;DoH&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;basic.rethinkdns.com&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rethinkdns.com/configure?p=doh&#34;&gt;configure&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦕 Deno Deploy&lt;/td&gt; &#xA;   &lt;td&gt;30+ (&lt;a href=&#34;https://check-host.net/check-ping?host=https://deno.dev&#34;&gt;ping&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;DoH&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;private beta&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🪂 Fly.io&lt;/td&gt; &#xA;   &lt;td&gt;30+ (&lt;a href=&#34;https://check-host.net/check-ping?host=https://max.rethinkdns.com&#34;&gt;ping&lt;/a&gt;)&lt;/td&gt; &#xA;   &lt;td&gt;DoH and DoT&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;max.rethinkdns.com&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://rethinkdns.com/configure?p=dot&#34;&gt;configure&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Server-side processing takes from 0 milliseconds (ms) to 2ms (median), and end-to-end latency (varies across regions and networks) is between 10ms to 30ms (median).&lt;/p&gt; &#xA;&lt;h3&gt;Self-host&lt;/h3&gt; &#xA;&lt;p&gt;Cloudflare Workers is the easiest platform to setup &lt;code&gt;serverless-dns&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://deploy.workers.cloudflare.com/?url=https://github.com/serverless-dns/serverless-dns&#34;&gt;&lt;img src=&#34;https://deploy.workers.cloudflare.com/button&#34; alt=&#34;Deploy to Cloudflare Workers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;For step-by-step instructions, refer:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th&gt;Difficulty&lt;/th&gt; &#xA;   &lt;th&gt;Runtime&lt;/th&gt; &#xA;   &lt;th&gt;Doc&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;⛅ Cloudflare&lt;/td&gt; &#xA;   &lt;td&gt;Easy&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://v8.dev&#34;&gt;v8&lt;/a&gt; &lt;em&gt;Isolates&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rethinkdns.com/dns/open-source#cloudflare&#34;&gt;Hosting on Cloudflare Workers&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🦕 Deno.com&lt;/td&gt; &#xA;   &lt;td&gt;Moderate&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://deno.land&#34;&gt;Deno&lt;/a&gt; &lt;em&gt;Isolates&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rethinkdns.com/dns/open-source#deno-deploy&#34;&gt;Hosting on Deno.com&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;🪂 Fly.io&lt;/td&gt; &#xA;   &lt;td&gt;Hard&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;Node&lt;/a&gt; &lt;em&gt;MicroVM&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://docs.rethinkdns.com/dns/open-source#fly-io&#34;&gt;Hosting on Fly.io&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To setup blocklists, visit &lt;code&gt;https://&amp;lt;my-domain&amp;gt;.tld/configure&lt;/code&gt; from your browser (it should load something similar to &lt;a href=&#34;https://rethinkdns.com/configure&#34;&gt;RethinkDNS&#39; &lt;em&gt;configure&lt;/em&gt; page&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;For help or assistance, feel free to &lt;a href=&#34;https://github.com/celzero/docs/issues&#34;&gt;open an issue&lt;/a&gt; or &lt;a href=&#34;https://github.com/celzero/docs&#34;&gt;submit a patch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;h4&gt;Setup&lt;/h4&gt; &#xA;&lt;p&gt;Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# navigate to work dir&#xA;cd /my/work/dir&#xA;&#xA;# clone this repository&#xA;git clone https://github.com/serverless-dns/serverless-dns.git&#xA;&#xA;# navigate to serverless-dns&#xA;cd ./serverless-dns&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install node v16+ via nvm, if required&#xA;# https://github.com/nvm-sh/nvm#installing-and-updating&#xA;wget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.1/install.sh | bash&#xA;nvm install --lts&#xA;&#xA;# get js dependencies&#xA;npm i&#xA;&#xA;# (optional) update dependencies&#xA;npm update&#xA;&#xA;# run serverless-dns on node&#xA;./run n&#xA;&#xA;# run a clinicjs.org profiler&#xA;./run n [cpu|fn|mem]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deno:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install deno.land v1.18+&#xA;# https://github.com/denoland/deno/#install&#xA;curl -fsSL https://deno.land/install.sh | sh&#xA;&#xA;# run serverless-dns on deno&#xA;./run d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Wrangler:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# install Cloudflare Workers (cli) aka Wrangler&#xA;# https://developers.cloudflare.com/workers/cli-wrangler/install-update&#xA;npm i @cloudflare/wrangler -g&#xA;&#xA;# run serverless-dns on Cloudflare Workers (cli)&#xA;# Make sure to setup Wrangler first:&#xA;# https://developers.cloudflare.com/workers/cli-wrangler/authentication&#xA;./run w&#xA;&#xA;# profile wrangler with Chrome DevTools&#xA;# blog.cloudflare.com/profiling-your-workers-with-wrangler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Code style&lt;/h4&gt; &#xA;&lt;p&gt;Commits on this repository enforces the Google JavaScript style guide (ref: &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/.eslintrc.cjs&#34;&gt;.eslintrc.cjs&lt;/a&gt;). A git &lt;code&gt;pre-commit&lt;/code&gt; hook that runs linter (eslint) and formatter (prettier) on &lt;code&gt;.js&lt;/code&gt; files. Use &lt;code&gt;git commit --no-verify&lt;/code&gt; to bypass this hook.&lt;/p&gt; &#xA;&lt;p&gt;Pull requests are also checked for code style violations and fixed automatically where possible.&lt;/p&gt; &#xA;&lt;h4&gt;Env vars&lt;/h4&gt; &#xA;&lt;p&gt;Configure &lt;code&gt;.env&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/.env.example&#34;&gt;ref&lt;/a&gt;) or &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/core/env.js&#34;&gt;&lt;code&gt;env.js&lt;/code&gt;&lt;/a&gt; if you need to tweak the defaults. Values in &lt;code&gt;.env&lt;/code&gt; file take precedence over corresponding variables set in &lt;code&gt;env.js&lt;/code&gt;. For Cloudflare Workers setup env vars in &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/wrangler.toml&#34;&gt;&lt;code&gt;wrangler.toml&lt;/code&gt;&lt;/a&gt;, instead.&lt;/p&gt; &#xA;&lt;h4&gt;Request flow&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The request/response flow: client &amp;lt;-&amp;gt; &lt;code&gt;src/server-[node|workers|deno]&lt;/code&gt; &amp;lt;-&amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/core/doh.js&#34;&gt;&lt;code&gt;doh.js&lt;/code&gt;&lt;/a&gt; &amp;lt;-&amp;gt; &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/core/plugin.js&#34;&gt;&lt;code&gt;plugin.js&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;plugin.js&lt;/code&gt; flow: &lt;code&gt;userOperation.js&lt;/code&gt; -&amp;gt; &lt;code&gt;cacheResponse.js&lt;/code&gt; -&amp;gt; &lt;code&gt;cc.js&lt;/code&gt; -&amp;gt; &lt;code&gt;dnsResolver.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;A note about runtimes&lt;/h4&gt; &#xA;&lt;p&gt;Deno Deploy (cloud) and Deno (the runtime) do not expose the same API surface (for example, Deno Deploy only supports HTTP/S server-listeners; whereas, Deno suports raw TCP/UDP/TLS in addition to plain HTTP and HTTP/S).&lt;/p&gt; &#xA;&lt;p&gt;Except on Node, &lt;code&gt;serverless-dns&lt;/code&gt; uses DoH upstreams defined by env vars, &lt;code&gt;CF_DNS_RESOLVER_URL&lt;/code&gt; / &lt;code&gt;CF_DNS_RESOLVER_URL_2&lt;/code&gt;. On Node, the default DNS upstream is &lt;code&gt;1.1.1.2&lt;/code&gt; (&lt;a href=&#34;https://github.com/serverless-dns/serverless-dns/raw/15f628460/src/commons/dnsutil.js#L28&#34;&gt;ref&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The entrypoint for Node and Deno are &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/server-node.js&#34;&gt;&lt;code&gt;src/server-node.js&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/server-deno.ts&#34;&gt;&lt;code&gt;src/server-deno.ts&lt;/code&gt;&lt;/a&gt; respectively, and both listen for TCP-over-TLS, HTTP/S connections; whereas, the entrypoint for Cloudflare Workers, which only listens over HTTP (cli) or over HTTP/S (prod), is &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/server-workers.js&#34;&gt;&lt;code&gt;src/server-workers.js&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For prod setups on Deno and local (non-prod) setups on Node, the &lt;code&gt;key&lt;/code&gt; (private) and &lt;code&gt;cert&lt;/code&gt; (public chain) files, by default, are read from paths defined in env vars, &lt;code&gt;TLS_KEY_PATH&lt;/code&gt; and &lt;code&gt;TLS_CRT_PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Whilst for prod setup on Node (on Fly.io), either &lt;code&gt;TLS_OFFLOAD&lt;/code&gt; must be set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;key&lt;/code&gt; and &lt;code&gt;cert&lt;/code&gt; &lt;em&gt;must&lt;/em&gt; be &lt;em&gt;base64&lt;/em&gt; encoded in env var &lt;code&gt;TLS_CERTKEY&lt;/code&gt; (&lt;a href=&#34;https://github.com/serverless-dns/serverless-dns/raw/f57c579/src/core/node/config.js#L61-L92&#34;&gt;ref&lt;/a&gt;), like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# EITHER: offload tls to fly.io and set tls_offload to true&#xA;TLS_OFFLOAD=&#34;true&#34;&#xA;# OR: base64 representation of both key (private) and cert (public chain)&#xA;TLS_CERTKEY=&#34;KEY=b64_key_content\nCRT=b64_cert_content&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Process&lt;/em&gt; bringup is different for each of these runtimes: For Node, &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/core/node/config.js&#34;&gt;&lt;code&gt;src/core/node/config.js&lt;/code&gt;&lt;/a&gt; governs the &lt;em&gt;bringup&lt;/em&gt;; while for Deno, it is &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/core/deno/config.ts&#34;&gt;&lt;code&gt;src/core/deno/config.ts&lt;/code&gt;&lt;/a&gt; and for Workers it is &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/core/workers/config.js&#34;&gt;&lt;code&gt;src/core/workers/config.js&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/system.js&#34;&gt;&lt;code&gt;src/system.js&lt;/code&gt;&lt;/a&gt; pub-sub co-ordinates the &lt;em&gt;bringup&lt;/em&gt; phase among various modules.&lt;/p&gt; &#xA;&lt;p&gt;On Node and Deno, in-process DNS caching, backed by &lt;a href=&#34;https://github.com/serverless-dns/lfu-cache&#34;&gt;&lt;code&gt;@serverless-dns/lfu-cache&lt;/code&gt;&lt;/a&gt; is used; on Cloudflare Workers, both, &lt;a href=&#34;https://developers.cloudflare.com/workers/runtime-apis/cache&#34;&gt;Cache Web API&lt;/a&gt; and in-process caches are used. To disable caching altogether on all three platfroms, set env var, &lt;code&gt;PROFILE_DNS_RESOLVES=true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Cloud&lt;/h4&gt; &#xA;&lt;p&gt;Cloudflare Workers and Deno Deploy are ephemeral, as in, the process that serves client request is not long-lived, and in fact, two back-to-back requests may be served by two different &lt;a href=&#34;https://developers.cloudflare.com/workers/learning/how-workers-works&#34;&gt;&lt;em&gt;isolates&lt;/em&gt;&lt;/a&gt; (processes). Resolver on Fly.io, running Node, is backed by &lt;a href=&#34;https://fly.io/blog/docker-without-docker/&#34;&gt;persistent VMs&lt;/a&gt; and is hence longer-lived, like traditional &#34;serverfull&#34; environments.&lt;/p&gt; &#xA;&lt;p&gt;Cloudflare Workers build-time and runtime configurations are defined in &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/wrangler.toml&#34;&gt;&lt;code&gt;wrangler.toml&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/webpack.config.cjs&#34;&gt;Webpack5 bundles the files&lt;/a&gt; in an ESM module which is then uploaded to Cloudflare by &lt;em&gt;Wrangler&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For Deno Deploy, the code-base is bundled up in a single javascript file with &lt;code&gt;deno bundle&lt;/code&gt; and then handed off to Deno.com.&lt;/p&gt; &#xA;&lt;p&gt;For Fly.io, which runs Node, the runtime directives are defined in &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/fly.toml&#34;&gt;&lt;code&gt;fly.toml&lt;/code&gt;&lt;/a&gt; (used by &lt;code&gt;dev&lt;/code&gt; and &lt;code&gt;live&lt;/code&gt; deployment-types), while deploy directives are in &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/node.Dockerfile&#34;&gt;&lt;code&gt;node.Dockerfile&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://fly.io/docs/flyctl&#34;&gt;&lt;code&gt;flyctl&lt;/code&gt;&lt;/a&gt; accordingly sets up &lt;code&gt;serverless-dns&lt;/code&gt; on Fly.io&#39;s infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;For deploys offloading TLS termination to Fly.io (&lt;code&gt;B1&lt;/code&gt; deployment-type), the runtime directives are instead defined in &lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/fly.tls.toml&#34;&gt;&lt;code&gt;fly.tls.toml&lt;/code&gt;&lt;/a&gt;, which sets up HTTP2 Cleartext and HTTP/1.1 on port 443, and DNS over TCP on port 853.&lt;/p&gt; &#xA;&lt;p&gt;Ref: &lt;em&gt;&lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/.github/workflows&#34;&gt;github/workflows&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Blocklists&lt;/h3&gt; &#xA;&lt;p&gt;190+ blocklists are compressed in a &lt;em&gt;Succinct Radix Trie&lt;/em&gt; (&lt;a href=&#34;https://stevehanov.ca/blog/?id=120&#34;&gt;based on Steve Hanov&#39;s impl&lt;/a&gt;) with modifications to speed up string search (&lt;a href=&#34;https://raw.githubusercontent.com/serverless-dns/serverless-dns/main/src/plugins/blocklist-wrapper/radixTrie.js&#34;&gt;&lt;code&gt;lookup&lt;/code&gt;&lt;/a&gt;) at the expense of &#34;succintness&#34;. The blocklists are versioned with unix timestamp (env var: &lt;code&gt;CF_LATEST_BLOCKLIST_TIMESTAMP&lt;/code&gt;), and generated once every week, but we&#39;d like to generate &#39;em daily / hourly, if possible &lt;a href=&#34;https://github.com/serverless-dns/blocklists/issues/19&#34;&gt;see&lt;/a&gt;), and hosted on Lightsail Object Store (env var: &lt;code&gt;CF_BLOCKLIST_URL&lt;/code&gt;). &lt;code&gt;serverless-dns&lt;/code&gt; downloads &lt;a href=&#34;https://github.com/serverless-dns/serverless-dns/raw/15f62846/src/core/node/blocklists.js#L14-L16&#34;&gt;3 blocklist files&lt;/a&gt; required to setup the radix trie during runtime bringup or, &lt;a href=&#34;https://github.com/serverless-dns/serverless-dns/raw/15f62846/src/plugins/dns-operation/dnsResolver.js#L167&#34;&gt;lazily&lt;/a&gt;, when serving a DNS request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;serverless-dns&lt;/code&gt; compiles around ~5M entries (as of Feb 2022) in to a succinct radix trie, from around 190+ blocklists. These are defined in &lt;a href=&#34;https://github.com/serverless-dns/blocklists&#34;&gt;serverless-dns/blocklists&lt;/a&gt; repository.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MichMich/MagicMirror</title>
    <updated>2022-08-02T01:33:20Z</updated>
    <id>tag:github.com,2022-08-02:/MichMich/MagicMirror</id>
    <link href="https://github.com/MichMich/MagicMirror" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MagicMirror² is an open source modular smart mirror platform. With a growing list of installable modules, the MagicMirror² allows you to convert your hallway or bathroom mirror into your personal assistant.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/MichMich/MagicMirror/master/.github/header.png&#34; alt=&#34;MagicMirror²: The open source modular smart mirror platform. &#34;&gt;&lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center&#34;&gt; &lt;a href=&#34;https://choosealicense.com/licenses/mit&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/michmich/magicmirror/Run%20Automated%20Tests&#34; alt=&#34;GitHub Actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/checks-status/michmich/magicmirror/master&#34; alt=&#34;Build Status&#34;&gt; &lt;a href=&#34;https://codecov.io/gh/MichMich/MagicMirror&#34;&gt; &lt;img src=&#34;https://codecov.io/gh/MichMich/MagicMirror/branch/master/graph/badge.svg?token=LEG1KitZR6&#34; alt=&#34;CodeCov Status&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/MichMich/MagicMirror&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/michmich/magicmirror?style=social&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;MagicMirror²&lt;/strong&gt; is an open source modular smart mirror platform. With a growing list of installable modules, the &lt;strong&gt;MagicMirror²&lt;/strong&gt; allows you to convert your hallway or bathroom mirror into your personal assistant. &lt;strong&gt;MagicMirror²&lt;/strong&gt; is built by the creator of &lt;a href=&#34;https://michaelteeuw.nl/tagged/magicmirror&#34;&gt;the original MagicMirror&lt;/a&gt; with the incredible help of a &lt;a href=&#34;https://github.com/MichMich/MagicMirror/graphs/contributors&#34;&gt;growing community of contributors&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;MagicMirror² focuses on a modular plugin system and uses &lt;a href=&#34;https://www.electronjs.org/&#34;&gt;Electron&lt;/a&gt; as an application wrapper. So no more web server or browser installs necessary!&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;For the full documentation including &lt;strong&gt;&lt;a href=&#34;https://docs.magicmirror.builders/getting-started/installation.html&#34;&gt;installation instructions&lt;/a&gt;&lt;/strong&gt;, please visit our dedicated documentation website: &lt;a href=&#34;https://docs.magicmirror.builders&#34;&gt;https://docs.magicmirror.builders&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Website: &lt;a href=&#34;https://magicmirror.builders&#34;&gt;https://magicmirror.builders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Documentation: &lt;a href=&#34;https://docs.magicmirror.builders&#34;&gt;https://docs.magicmirror.builders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Forum: &lt;a href=&#34;https://forum.magicmirror.builders&#34;&gt;https://forum.magicmirror.builders&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Technical discussions: &lt;a href=&#34;https://forum.magicmirror.builders/category/11/core-system&#34;&gt;https://forum.magicmirror.builders/category/11/core-system&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Discord: &lt;a href=&#34;https://discord.gg/J5BAtvx&#34;&gt;https://discord.gg/J5BAtvx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Blog: &lt;a href=&#34;https://michaelteeuw.nl/tagged/magicmirror&#34;&gt;https://michaelteeuw.nl/tagged/magicmirror&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Donations: &lt;a href=&#34;https://magicmirror.builders/#donate&#34;&gt;https://magicmirror.builders/#donate&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing Guidelines&lt;/h2&gt; &#xA;&lt;p&gt;Contributions of all kinds are welcome, not only in the form of code but also with regards to&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;bug reports&lt;/li&gt; &#xA; &lt;li&gt;documentation&lt;/li&gt; &#xA; &lt;li&gt;translations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For the full contribution guidelines, check out: &lt;a href=&#34;https://docs.magicmirror.builders/about/contributing.html&#34;&gt;https://docs.magicmirror.builders/about/contributing.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Enjoying MagicMirror? Consider a donation!&lt;/h2&gt; &#xA;&lt;p&gt;MagicMirror² is opensource and free. That doesn&#39;t mean we don&#39;t need any money.&lt;/p&gt; &#xA;&lt;p&gt;Please consider a donation to help us cover the ongoing costs like webservers and email services. If we receive enough donations we might even be able to free up some working hours and spend some extra time improving the MagicMirror² core.&lt;/p&gt; &#xA;&lt;p&gt;To donate, please follow &lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=G5D8E9MR5DTD2&amp;amp;source=url&#34;&gt;this&lt;/a&gt; link.&lt;/p&gt; &#xA;&lt;p style=&#34;text-align: center&#34;&gt; &lt;a href=&#34;https://forum.magicmirror.builders/topic/728/magicmirror-is-voted-number-1-in-the-magpi-top-50&#34;&gt;&lt;img src=&#34;https://magicmirror.builders/img/magpi-best-watermark-custom.png&#34; width=&#34;150&#34; alt=&#34;MagPi Top 50&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Le-niao/Yunzai-Bot</title>
    <updated>2022-08-02T01:33:20Z</updated>
    <id>tag:github.com,2022-08-02:/Le-niao/Yunzai-Bot</id>
    <link href="https://github.com/Le-niao/Yunzai-Bot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;原神QQ群机器人，通过米游社接口，查询原神游戏信息，快速生成图片返回&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Yunzai-Bot v3&lt;/h1&gt; &#xA;&lt;p&gt;云崽v3.0，原神qq群机器人，通过米游社接口，查询原神游戏信息，快速生成图片返回&lt;/p&gt; &#xA;&lt;p&gt;项目仅供学习交流使用，严禁用于任何商业用途和非法行为&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/Le-niao/Yunzai-Bot/tree/main/plugins/genshin&#34;&gt;目前功能&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;环境准备： Windows or Linux，Node.js（&lt;a href=&#34;http://nodejs.cn/download/&#34;&gt;版本至少v16以上&lt;/a&gt;），&lt;a href=&#34;https://raw.githubusercontent.com/Le-niao/Yunzai-Bot/main/resources/readme/%E5%91%BD%E4%BB%A4%E8%AF%B4%E6%98%8E.md#window%E5%AE%89%E8%A3%85redis&#34;&gt;Redis&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;1.克隆项目&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone --depth=1 -b main https://github.com/Le-niao/Yunzai-Bot.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd Yunzai-Bot #进入Yunzai目录&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2.安装&lt;a href=&#34;https://pnpm.io/zh/installation&#34;&gt;pnpm&lt;/a&gt;，已安装的可以跳过&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install pnpm -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3.安装依赖&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pnpm install -P&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;4.运行（首次运行按提示输入登录）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;node app&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>