<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-21T01:36:35Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>hiteshchoudhary/apihub</title>
    <updated>2023-07-21T01:36:35Z</updated>
    <id>tag:github.com,2023-07-21:/hiteshchoudhary/apihub</id>
    <link href="https://github.com/hiteshchoudhary/apihub" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Your own API Hub to learn and master API interaction. Ideal for frontend, mobile dev and backend developers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;FreeAPI.app&lt;/h1&gt; &#xA;&lt;h2&gt;Problem&lt;/h2&gt; &#xA;&lt;p&gt;We are trying to build a single source API hub that can be used to learn api handling in any programming language. Users can build their front end portfolio in web and mobile apps using this api hub.&lt;/p&gt; &#xA;&lt;h1&gt;What is FreeAPI.app&lt;/h1&gt; &#xA;&lt;p&gt;The FreeAPI project is an innovative and community-driven initiative aimed at providing developers with free and accessible APIs for their projects.&lt;/p&gt; &#xA;&lt;p&gt;The project focuses on delivering a wide range of APIs that cater to various domains and functionalities, enabling developers to seamlessly integrate these APIs into their applications.&lt;/p&gt; &#xA;&lt;p&gt;Key highlights of the FreeAPI project include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Accessibility:&lt;/strong&gt; The FreeAPI project is committed to eliminating barriers by providing free access to its collection of APIs. Developers can leverage these APIs without any cost limitations, allowing them to experiment, learn, and build innovative applications.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Diverse API Collection:&lt;/strong&gt; The project offers a diverse and comprehensive collection of APIs that span across different industries, domains, and functionalities. Whether you require social media integrations, payment gateways, machine learning algorithms, or IoT device connectivity, the FreeAPI project has you covered.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Simplified Integration:&lt;/strong&gt; The FreeAPI project understands the challenges developers face when integrating APIs into their applications. To address this, the project provides clear documentation, code samples, and SDKs, simplifying the integration process and reducing development time and effort.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Community-Driven Development:&lt;/strong&gt; The project fosters a vibrant and collaborative community of developers. Contributors are encouraged to share their knowledge, engage in discussions, and collaborate on API-related projects. This collective effort ensures the continuous improvement and reliability of the APIs offered by the FreeAPI project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Learning and Skill Development:&lt;/strong&gt; The FreeAPI project aims to empower developers by providing a platform for learning and skill development. Through access to various APIs and educational resources, developers can enhance their understanding of API integration, expand their knowledge, and showcase their expertise through building complete projects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Overall, the FreeAPI project is a valuable resource for developers seeking accessible and diverse APIs.&lt;/p&gt; &#xA;&lt;p&gt;By fostering a supportive community, the project empowers developers to learn, create, and innovate, ultimately contributing to the growth and advancement of the API integration landscape.&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;p&gt;Introducing our groundbreaking open source API hub project, a dynamic platform designed to revolutionize the way developers interact with APIs.&lt;/p&gt; &#xA;&lt;p&gt;With an emphasis on openness, accessibility, and learning, our API hub empowers developers of all levels to explore, experiment, and grow their skills in API integration.&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Open Source:&lt;/strong&gt; Our API hub is built on the principles of open source, ensuring transparency, collaboration, and community-driven development. This means that the source code is freely available, allowing developers to customize, extend, and contribute to the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Free to Use:&lt;/strong&gt; We firmly believe in removing barriers to entry, which is why our API hub is completely free to use. Whether you&#39;re a seasoned developer or just starting your coding journey, you can leverage our platform without any cost limitations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Local or Deployment&lt;/strong&gt;: Flexibility is at the core of our API hub. You have the option to use it locally, running on your own machine, or deploy it to a server, making it accessible to others. This versatility ensures that you can adapt the platform to your specific development environment.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Learning Resource&lt;/strong&gt;: Our API hub is designed as a comprehensive learning resource, offering a wealth of educational materials, tutorials, and documentation. Whether you&#39;re a beginner or seeking to expand your API knowledge, our platform provides the resources you need to learn and improve.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Custom Endpoints for Beginners&lt;/strong&gt;: For developers at the beginner level, our API hub offers custom endpoints that provide a hands-on experience in handling API responses. These beginner-friendly APIs allow you to practice and familiarize yourself with the basics of working with APIs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Advanced APIs for Portfolio Building&lt;/strong&gt;: In addition to beginner-level endpoints, our API hub also provides advanced APIs to challenge and stretch your skills. These APIs enable you to tackle more complex integration scenarios, helping you build a robust portfolio of projects to showcase your expertise.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;By combining open source principles, accessibility, and a focus on learning, our API hub project paves the way for developers to thrive in the world of API integration. Join our vibrant community and embark on an exciting journey of discovery, growth, and innovation.&lt;/p&gt; &#xA;&lt;h3&gt;How to contribute - Guidelines&lt;/h3&gt; &#xA;&lt;p&gt;We welcome your interest in contributing to our open source project!&lt;/p&gt; &#xA;&lt;p&gt;To contribute to FreeAPI, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository.&lt;/li&gt; &#xA; &lt;li&gt;Create a new branch for your feature or bug fix: &lt;code&gt;git checkout -b feat/your-feature-name&lt;/code&gt; or &lt;code&gt;git checkout -b fix/your-bug-fix-name&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make your changes and commit them with descriptive messages: &lt;code&gt;git commit -am &#39;Add your commit message&#39;&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Push your changes to your forked repository: &lt;code&gt;git push origin feat/your-feature-name&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request to the main repository, explaining the changes you&#39;ve made and providing any necessary details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Here&#39;s a guide on how you can effectively contribute to our API hub:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull Requests for Readme Updates: Please refrain from sending pull requests solely for updating the project&#39;s readme file. While we appreciate the importance of clear and concise documentation, we prefer to focus on substantial code contributions and feature enhancements.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Grammar Updates: Our team values effective communication, but we&#39;re not grammar sticklers. You don&#39;t need to send pull requests solely for grammar fixes or minor language improvements. Instead, concentrate on the core functionalities and features of the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Avoid Updating Existing Public APIs: To maintain stability and consistency, we discourage direct updates to existing public APIs within the API hub. These APIs have been thoroughly tested and approved. However, if you encounter any bugs or issues, we encourage you to open an issue on our project&#39;s issue tracker to notify us.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build New Project APIs: We encourage you to explore your creativity and contribute by building complete project APIs. These APIs should provide comprehensive solutions that can assist developers in constructing complex projects to showcase their skills and abilities. Your contributions in this area will greatly benefit the community.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Draft a Proposal and Discuss on Discord: Before diving into your project, we recommend drafting a proposal. This can include a mind map or outline of the API you intend to build and its potential benefits. Join our Discord community, where you can share your proposal, discuss ideas, and gather feedback from fellow contributors. Engaging in these discussions will enhance your backend portfolio and help shape the future direction of the project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We appreciate your enthusiasm and look forward to your valuable contributions to our open source API hub project.&lt;/p&gt; &#xA;&lt;p&gt;Together, we can foster a collaborative environment and make a significant impact in the API integration landscape.&lt;/p&gt; &#xA;&lt;p&gt;Click &lt;a href=&#34;https://github.com/hiteshchoudhary/apihub/raw/dev/CONTRIBUTING.md&#34;&gt;here&lt;/a&gt; for detailed contribution guide.&lt;/p&gt; &#xA;&lt;h2&gt;🏁 Installation&lt;/h2&gt; &#xA;&lt;h3&gt;📦 Using Docker (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;To run the FreeAPI project, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt; on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Clone the project repository.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the project directory.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;.env&lt;/code&gt; file in the root folder and copy paste the content of &lt;code&gt;.env.sample&lt;/code&gt;, and add necessary credentials.&lt;/li&gt; &#xA; &lt;li&gt;Run the Docker Compose command:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up --build --attach backend&#xA;&#xA;# --build: Rebuild the image and run the containers&#xA;# --attach: only show logs of Node app container and not mongodb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Access the project APIs at the specified endpoints.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;💻 Running locally&lt;/h3&gt; &#xA;&lt;p&gt;To run the FreeAPI project locally, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt;, &lt;a href=&#34;https://www.nodejs.org/&#34;&gt;NodeJs&lt;/a&gt;, &lt;a href=&#34;https://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt; and &lt;a href=&#34;https://www.mongodb.com/products/compass&#34;&gt;MongoDB Compass (optional)&lt;/a&gt; on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Clone the project repository.&lt;/li&gt; &#xA; &lt;li&gt;Navigate to the project directory.&lt;/li&gt; &#xA; &lt;li&gt;Create &lt;code&gt;.env&lt;/code&gt; file in the root folder and copy paste the content of &lt;code&gt;.env.sample&lt;/code&gt;, and add necessary credentials.&lt;/li&gt; &#xA; &lt;li&gt;Install the packages:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Run the project:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;Access the project APIs at the specified endpoints.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;🚄 Using Railway (One-click Deploy)&lt;/h3&gt; &#xA;&lt;p&gt;To self-host the FreeAPI.app application, you can take advantage of a pre-built template that is readily available.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://railway.app/template/B2f7Hq&#34;&gt;&lt;img src=&#34;https://railway.app/button.svg?sanitize=true&#34; alt=&#34;Deploy FreeAPI.app&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the button above to visit railway.app.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;strong&gt;Deploy Now&lt;/strong&gt; button.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(Optional) Sign in with GitHub to deploy.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fill in the Repository details:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Specify the repo name (e.g., freeapi-app).&lt;/li&gt; &#xA;   &lt;li&gt;Checkmark for Public/Private repository.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For Environment variables, we have provided some default values in the &lt;code&gt;ENV&lt;/code&gt; to reduce the burden, but some parameters are mandatory:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;PORT&lt;/code&gt;: Do not change the value, let it be set to 8080 to view the swagger docs after deployment.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;MONGODB_URI&lt;/code&gt;: Provide the MongoDB Atlas database URL. An example is prefilled for you, edit/update it to continue.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;NODE_ENV&lt;/code&gt;: Default set to &#39;development&#39; to view the logs. You may choose to change it to any other value such as &#39;prod&#39; to hide them.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;EXPRESS_SESSION_SECRET&lt;/code&gt;: It is advised to change the default value to your own secret value.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ACCESS_TOKEN_SECRET&lt;/code&gt;: It is advised to change the default value to your own secret value.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;ACCESS_TOKEN_EXPIRY&lt;/code&gt;: Set to 1 day as default.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;REFRESH_TOKEN_SECRET&lt;/code&gt;: It is advised to change the default value to your own secret value.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;REFRESH_TOKEN_EXPIRY&lt;/code&gt;: Set to 10 days as default.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Once you fill in the required environment parameters, if you choose to add others such as PayPal, Google, and Razorpay, please proceed to mention your credentials in the form.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the &lt;strong&gt;Deploy&lt;/strong&gt; button to trigger the first build.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Monitor the server logs; if you come across any deployment problems, feel free to raise an issue for our team to look into.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: Once the application is deployed, please wait for 3-5 minutes for the swagger docs to be available.&lt;/p&gt; &#xA;&lt;h1&gt;📜 Swagger Docs&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8080&#34;&gt;Swagger Docs&lt;/a&gt;: &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>anshuopinion/React-10-Projects</title>
    <updated>2023-07-21T01:36:35Z</updated>
    <id>tag:github.com,2023-07-21:/anshuopinion/React-10-Projects</id>
    <link href="https://github.com/anshuopinion/React-10-Projects" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React 10 PRACTICE PROJECT FOR BEGINNERS&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/50476777/236658237-3f141863-a1ed-4860-a847-71ced21fa8a5.png&#34; alt=&#34;React Course&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Project that we are going to build in this complete practice course&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Project 1 - BRAND LANDING PAGE&lt;/li&gt; &#xA; &lt;li&gt;Project 2 - CONTACT US PAGE&lt;/li&gt; &#xA; &lt;li&gt;Project 3 - DICE GAME&lt;/li&gt; &#xA; &lt;li&gt;Project 4 - Foody Zone&lt;/li&gt; &#xA; &lt;li&gt;Project 5 - COMMING SOON&lt;/li&gt; &#xA; &lt;li&gt;Project 6 - COMMING SOON&lt;/li&gt; &#xA; &lt;li&gt;Project 7 - COMMING SOON&lt;/li&gt; &#xA; &lt;li&gt;Project 8 - COMMING SOON&lt;/li&gt; &#xA; &lt;li&gt;Project 9 - COMMING SOON&lt;/li&gt; &#xA; &lt;li&gt;Project 10 - COMMING SOON&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Figma Design URL - &lt;a href=&#34;https://www.figma.com/file/rephrU2FVgN8MFz6XhnP51/Learn-React-with-10-Projects?type=design&amp;amp;node-id=0-1&amp;amp;t=orp3GQEAXhmtQcgG-0&#34;&gt;https://www.figma.com/file/rephrU2FVgN8MFz6XhnP51/Learn-React-with-10-Projects?type=design&amp;amp;node-id=0-1&amp;amp;t=orp3GQEAXhmtQcgG-0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit Website For More Details - &lt;a href=&#34;https://dosomecoding.com&#34;&gt;https://dosomecoding.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>canove/whaticket-community</title>
    <updated>2023-07-21T01:36:35Z</updated>
    <id>tag:github.com,2023-07-21:/canove/whaticket-community</id>
    <link href="https://github.com/canove/whaticket-community" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A very simple Ticket System based on WhatsApp messages, that allow multi-users in same WhatsApp account.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?business=VWW3BHW4AWHUY&amp;amp;item_name=Desenvolvimento+de+Software&amp;amp;currency_code=BRL&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B21084%2Fgithub.com%2Fcanove%2Fwhaticket?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B21084%2Fgithub.com%2Fcanove%2Fwhaticket.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=canove_whaticket&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=canove_whaticket&amp;amp;metric=alert_status&#34; alt=&#34;Quality Gate Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://sonarcloud.io/dashboard?id=canove_whaticket&#34;&gt;&lt;img src=&#34;https://sonarcloud.io/api/project_badges/measure?project=canove_whaticket&amp;amp;metric=sqale_rating&#34; alt=&#34;Maintainability Rating&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/Dp2tTZRYHg&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/784109818247774249.svg?logo=discord&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://whaticket.online/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/forum-online-blue.svg?logo=discourse&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;WhaTicket&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: The new version of whatsapp-web.js required Node 14. Upgrade your installations to keep using it.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;very simple&lt;/em&gt; Ticket System based on WhatsApp messages.&lt;/p&gt; &#xA;&lt;p&gt;Backend uses &lt;a href=&#34;https://github.com/pedroslopez/whatsapp-web.js&#34;&gt;whatsapp-web.js&lt;/a&gt; to receive and send WhatsApp messages, create tickets from them and store all in a MySQL database.&lt;/p&gt; &#xA;&lt;p&gt;Frontend is a full-featured multi-user &lt;em&gt;chat app&lt;/em&gt; bootstrapped with react-create-app and Material UI, that comunicates with backend using REST API and Websockets. It allows you to interact with contacts, tickets, send and receive WhatsApp messages.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE&lt;/strong&gt;: I can&#39;t guarantee you will not be blocked by using this method, although it has worked for me. WhatsApp does not allow bots or unofficial clients on their platform, so this shouldn&#39;t be considered totally safe.&lt;/p&gt; &#xA;&lt;h2&gt;How it works?&lt;/h2&gt; &#xA;&lt;p&gt;On every new message received in an associated WhatsApp, a new Ticket is created. Then, this ticket can be reached in a &lt;em&gt;queue&lt;/em&gt; on &lt;em&gt;Tickets&lt;/em&gt; page, where you can assign ticket to your yourself by &lt;em&gt;aceppting&lt;/em&gt; it, respond ticket message and eventually &lt;em&gt;resolve&lt;/em&gt; it.&lt;/p&gt; &#xA;&lt;p&gt;Subsequent messages from same contact will be related to first &lt;strong&gt;open/pending&lt;/strong&gt; ticket found.&lt;/p&gt; &#xA;&lt;p&gt;If a contact sent a new message in less than 2 hours interval, and there is no ticket from this contact with &lt;strong&gt;pending/open&lt;/strong&gt; status, the newest &lt;strong&gt;closed&lt;/strong&gt; ticket will be reopen, instead of creating a new one.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/canove/whaticket/raw/master/images/whaticket-queues.gif&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/chat2.png&#34; width=&#34;350&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/chat3.png&#34; width=&#34;350&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/multiple-whatsapps2.png&#34; width=&#34;350&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/canove/whaticket/master/images/contacts1.png&#34; width=&#34;350&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have multiple users chating in same WhatsApp Number ✅&lt;/li&gt; &#xA; &lt;li&gt;Connect to multiple WhatsApp accounts and receive all messages in one place ✅ 🆕&lt;/li&gt; &#xA; &lt;li&gt;Create and chat with new contacts without touching cellphone ✅&lt;/li&gt; &#xA; &lt;li&gt;Send and receive message ✅&lt;/li&gt; &#xA; &lt;li&gt;Send media (images/audio/documents) ✅&lt;/li&gt; &#xA; &lt;li&gt;Receive media (images/audio/video/documents) ✅&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Usage (Linux Ubuntu - Development)&lt;/h2&gt; &#xA;&lt;p&gt;Create Mysql Database using docker: &lt;em&gt;Note&lt;/em&gt;: change MYSQL_DATABASE, MYSQL_PASSWORD, MYSQL_USER and MYSQL_ROOT_PASSWORD.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name whaticketdb -e MYSQL_ROOT_PASSWORD=strongpassword -e MYSQL_DATABASE=whaticket -e MYSQL_USER=whaticket -e MYSQL_PASSWORD=whaticket --restart always -p 3306:3306 -d mariadb:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_bin&#xA;&#xA;# Or run using `docker-compose` as below&#xA;# Before copy .env.example to .env first and set the variables in the file.&#xA;docker-compose up -d mysql&#xA;&#xA;# To administer this mysql database easily using phpmyadmin. &#xA;# It will run by default on port 9000, but can be changed in .env using `PMA_PORT`&#xA;docker-compose -f docker-compose.phpmyadmin.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install puppeteer dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y libxshmfence-dev libgbm-dev wget unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone this repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/canove/whaticket/ whaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to backend folder and create .env file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;nano .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fill &lt;code&gt;.env&lt;/code&gt; file with environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NODE_ENV=DEVELOPMENT      #it helps on debugging&#xA;BACKEND_URL=http://localhost&#xA;FRONTEND_URL=https://localhost:3000&#xA;PROXY_PORT=8080&#xA;PORT=8080&#xA;&#xA;DB_HOST=                  #DB host IP, usually localhost&#xA;DB_DIALECT=&#xA;DB_USER=&#xA;DB_PASS=&#xA;DB_NAME=&#xA;&#xA;JWT_SECRET=3123123213123&#xA;JWT_REFRESH_SECRET=75756756756&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install backend dependencies, build app, run migrations and seeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run build&#xA;npx sequelize db:migrate&#xA;npx sequelize db:seed:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open a second terminal, go to frontend folder and create .env file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano .env&#xA;REACT_APP_BACKEND_URL = http://localhost:8080/ # Your previous configured backend app URL.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start frontend app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go to http://your_server_ip:3000/signup&lt;/li&gt; &#xA; &lt;li&gt;Create an user and login with it.&lt;/li&gt; &#xA; &lt;li&gt;On the sidebard, go to &lt;em&gt;Connections&lt;/em&gt; page and create your first WhatsApp connection.&lt;/li&gt; &#xA; &lt;li&gt;Wait for QR CODE button to appear, click it and read qr code.&lt;/li&gt; &#xA; &lt;li&gt;Done. Every message received by your synced WhatsApp number will appear in Tickets List.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Basic production deployment&lt;/h2&gt; &#xA;&lt;h3&gt;Using Ubuntu 20.04 VPS&lt;/h3&gt; &#xA;&lt;p&gt;All instructions below assumes you are NOT running as root, since it will give an error in puppeteer. So let&#39;s start creating a new user and granting sudo privileges to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adduser deploy&#xA;usermod -aG sudo deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we can login with this new user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;su deploy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll need two subdomains forwarding to yours VPS ip to follow these instructions. We&#39;ll use &lt;code&gt;myapp.mydomain.com&lt;/code&gt; to frontend and &lt;code&gt;api.mydomain.com&lt;/code&gt; to backend in the following example.&lt;/p&gt; &#xA;&lt;p&gt;Update all system packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt update &amp;amp;&amp;amp; sudo apt upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install node, and confirm node command is available:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://deb.nodesource.com/setup_14.x | sudo -E bash -&#xA;sudo apt-get install -y nodejs&#xA;node -v&#xA;npm -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install docker and add you user to docker group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install apt-transport-https ca-certificates curl software-properties-common&#xA;curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -&#xA;sudo add-apt-repository &#34;deb [arch=amd64] https://download.docker.com/linux/ubuntu bionic stable&#34;&#xA;sudo apt update&#xA;sudo apt install docker-ce&#xA;sudo systemctl status docker&#xA;sudo usermod -aG docker ${USER}&#xA;su - ${USER}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create Mysql Database using docker: &lt;em&gt;Note&lt;/em&gt;: change MYSQL_DATABASE, MYSQL_PASSWORD, MYSQL_USER and MYSQL_ROOT_PASSWORD.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --name whaticketdb -e MYSQL_ROOT_PASSWORD=strongpassword -e MYSQL_DATABASE=whaticket -e MYSQL_USER=whaticket -e MYSQL_PASSWORD=whaticket --restart always -p 3306:3306 -d mariadb:latest --character-set-server=utf8mb4 --collation-server=utf8mb4_bin&#xA;&#xA;# Or run using `docker-compose` as below&#xA;# Before copy .env.example to .env first and set the variables in the file.&#xA;docker-compose up -d mysql&#xA;&#xA;# To administer this mysql database easily using phpmyadmin. &#xA;# It will run by default on port 9000, but can be changed in .env using `PMA_PORT`&#xA;docker-compose -f docker-compose.phpmyadmin.yaml up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Clone this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~&#xA;git clone https://github.com/canove/whaticket whaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create backend .env file and fill with details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp whaticket/backend/.env.example whaticket/backend/.env&#xA;nano whaticket/backend/.env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NODE_ENV=&#xA;BACKEND_URL=https://api.mydomain.com      #USE HTTPS HERE, WE WILL ADD SSL LATTER&#xA;FRONTEND_URL=https://myapp.mydomain.com   #USE HTTPS HERE, WE WILL ADD SSL LATTER, CORS RELATED!&#xA;PROXY_PORT=443                            #USE NGINX REVERSE PROXY PORT HERE, WE WILL CONFIGURE IT LATTER&#xA;PORT=8080&#xA;&#xA;DB_HOST=localhost&#xA;DB_DIALECT=&#xA;DB_USER=&#xA;DB_PASS=&#xA;DB_NAME=&#xA;&#xA;JWT_SECRET=3123123213123&#xA;JWT_REFRESH_SECRET=75756756756&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install puppeteer dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt-get install -y libxshmfence-dev libgbm-dev wget unzip fontconfig locales gconf-service libasound2 libatk1.0-0 libc6 libcairo2 libcups2 libdbus-1-3 libexpat1 libfontconfig1 libgcc1 libgconf-2-4 libgdk-pixbuf2.0-0 libglib2.0-0 libgtk-3-0 libnspr4 libpango-1.0-0 libpangocairo-1.0-0 libstdc++6 libx11-6 libx11-xcb1 libxcb1 libxcomposite1 libxcursor1 libxdamage1 libxext6 libxfixes3 libxi6 libxrandr2 libxrender1 libxss1 libxtst6 ca-certificates fonts-liberation libappindicator1 libnss3 lsb-release xdg-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install backend dependencies, build app, run migrations and seeds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd whaticket/backend&#xA;npm install&#xA;npm run build&#xA;npx sequelize db:migrate&#xA;npx sequelize db:seed:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start it with &lt;code&gt;npm start&lt;/code&gt;, you should see: &lt;code&gt;Server started on port...&lt;/code&gt; on console. Hit &lt;code&gt;CTRL + C&lt;/code&gt; to exit.&lt;/p&gt; &#xA;&lt;p&gt;Install pm2 &lt;strong&gt;with sudo&lt;/strong&gt;, and start backend with it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo npm install -g pm2&#xA;pm2 start dist/server.js --name whaticket-backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make pm2 auto start after reboot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pm2 startup ubuntu -u `YOUR_USERNAME`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the last line outputed from previus command and run it, its something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo env PATH=\$PATH:/usr/bin pm2 startup ubuntu -u YOUR_USERNAME --hp /home/YOUR_USERNAM&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to frontend folder and install dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ../frontend&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create frontend .env file and fill it ONLY with your backend address, it should look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;REACT_APP_BACKEND_URL = https://api.mydomain.com/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Build frontend app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start frontend with pm2, and save pm2 process list to start automatically after reboot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pm2 start server.js --name whaticket-frontend&#xA;pm2 save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check if it&#39;s running, run &lt;code&gt;pm2 list&lt;/code&gt;, it should look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;deploy@ubuntu-whats:~$ pm2 list&#xA;┌─────┬─────────────────────────┬─────────────┬─────────┬─────────┬──────────┬────────┬──────┬───────────┬──────────┬──────────┬──────────┬──────────┐&#xA;│ id  │ name                    │ namespace   │ version │ mode    │ pid      │ uptime │ .    │ status    │ cpu      │ mem      │ user     │ watching │&#xA;├─────┼─────────────────────────┼─────────────┼─────────┼─────────┼──────────┼────────┼──────┼───────────┼──────────┼──────────┼──────────┼──────────┤&#xA;│ 1   │ whaticket-frontend      │ default     │ 0.1.0   │ fork    │ 179249   │ 12D    │ 0    │ online    │ 0.3%     │ 50.2mb   │ deploy   │ disabled │&#xA;│ 6   │ whaticket-backend       │ default     │ 1.0.0   │ fork    │ 179253   │ 12D    │ 15   │ online    │ 0.3%     │ 118.5mb  │ deploy   │ disabled │&#xA;└─────┴─────────────────────────┴─────────────┴─────────┴─────────┴──────────┴────────┴──────┴───────────┴──────────┴──────────┴──────────┴──────────┘&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install nginx:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo apt install nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Remove nginx default site:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo rm /etc/nginx/sites-enabled/default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a new nginx site to frontend app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/nginx/sites-available/whaticket-frontend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Edit and fill it with this information, changing &lt;code&gt;server_name&lt;/code&gt; to yours equivalent to &lt;code&gt;myapp.mydomain.com&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {&#xA;  server_name myapp.mydomain.com;&#xA;&#xA;  location / {&#xA;    proxy_pass http://127.0.0.1:3333;&#xA;    proxy_http_version 1.1;&#xA;    proxy_set_header Upgrade $http_upgrade;&#xA;    proxy_set_header Connection &#39;upgrade&#39;;&#xA;    proxy_set_header Host $host;&#xA;    proxy_set_header X-Real-IP $remote_addr;&#xA;    proxy_set_header X-Forwarded-Proto $scheme;&#xA;    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;&#xA;    proxy_cache_bypass $http_upgrade;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create another one to backend api, changing &lt;code&gt;server_name&lt;/code&gt; to yours equivalent to &lt;code&gt;api.mydomain.com&lt;/code&gt;, and &lt;code&gt;proxy_pass&lt;/code&gt; to your localhost backend node server URL:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo cp /etc/nginx/sites-available/whaticket-frontend /etc/nginx/sites-available/whaticket-backend&#xA;sudo nano /etc/nginx/sites-available/whaticket-backend&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;server {&#xA;  server_name api.mydomain.com;&#xA;&#xA;  location / {&#xA;    proxy_pass http://127.0.0.1:8080;&#xA;    ......&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a symbolic links to enable nginx sites:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo ln -s /etc/nginx/sites-available/whaticket-frontend /etc/nginx/sites-enabled&#xA;sudo ln -s /etc/nginx/sites-available/whaticket-backend /etc/nginx/sites-enabled&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, nginx limit body size to 1MB, which isn&#39;t enough for some media uploads. Lets change it to 20MB, adding a new line to config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nano /etc/nginx/nginx.conf&#xA;...&#xA;http {&#xA;    ...&#xA;    client_max_body_size 20M; # HANDLE BIGGER UPLOADS&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test nginx configuration and restart server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo nginx -t&#xA;sudo service nginx restart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, enable SSL (https) on your sites to use all app features like notifications and sending audio messages. An easy way to this is using Certbot:&lt;/p&gt; &#xA;&lt;p&gt;Install certbot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo snap install --classic certbot&#xA;sudo apt update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Enable SSL on nginx (Fill / Accept all information required):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo certbot --nginx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using docker and docker-compose&lt;/h3&gt; &#xA;&lt;p&gt;To run WhaTicket using docker you must perform the following steps:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now it will be necessary to configure the .env using its information, the variables are the same as those mentioned in the deployment using ubuntu, with the exception of mysql settings that were not in the .env.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# MYSQL&#xA;MYSQL_ENGINE=                           # default: mariadb&#xA;MYSQL_VERSION=                          # default: 10.6&#xA;MYSQL_ROOT_PASSWORD=strongpassword      # change it please&#xA;MYSQL_DATABASE=whaticket&#xA;MYSQL_PORT=3306                         # default: 3306; Use this port to expose mysql server&#xA;TZ=America/Fortaleza                    # default: America/Fortaleza; Timezone for mysql&#xA;&#xA;# BACKEND&#xA;BACKEND_PORT=                           # default: 8080; but access by host not use this port&#xA;BACKEND_SERVER_NAME=api.mydomain.com&#xA;BACKEND_URL=https://api.mydomain.com&#xA;PROXY_PORT=443&#xA;JWT_SECRET=3123123213123                # change it please&#xA;JWT_REFRESH_SECRET=75756756756          # change it please&#xA;&#xA;# FRONTEND&#xA;FRONTEND_PORT=80                        # default: 3000; Use port 80 to expose in production&#xA;FRONTEND_SSL_PORT=443                   # default: 3001; Use port 443 to expose in production&#xA;FRONTEND_SERVER_NAME=myapp.mydomain.com&#xA;FRONTEND_URL=https://myapp.mydomain.com&#xA;&#xA;# BROWSERLESS&#xA;MAX_CONCURRENT_SESSIONS=                # default: 1; Use only if using browserless&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After defining the variables, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d --build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On the &lt;code&gt;first&lt;/code&gt; run it will be necessary to seed the database tables using the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose exec backend npx sequelize db:seed:all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SSL Certificate&lt;/h4&gt; &#xA;&lt;p&gt;To deploy the ssl certificate, add it to the &lt;code&gt;ssl/certs&lt;/code&gt; folder. Inside it there should be a &lt;code&gt;backend&lt;/code&gt; and a &lt;code&gt;frontend&lt;/code&gt; folder, and each of them should contain the files &lt;code&gt;fullchain.pem&lt;/code&gt; and &lt;code&gt;privkey.pem&lt;/code&gt;, as in the structure below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.&#xA;├── certs&#xA;│&amp;nbsp;&amp;nbsp; ├── backend&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; ├── fullchain.pem&#xA;│&amp;nbsp;&amp;nbsp; │&amp;nbsp;&amp;nbsp; └── privkey.pem&#xA;│&amp;nbsp;&amp;nbsp; └── frontend&#xA;│&amp;nbsp;&amp;nbsp;     ├── fullchain.pem&#xA;│&amp;nbsp;&amp;nbsp;     └── privkey.pem&#xA;└── www&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate the certificate files use &lt;code&gt;certbot&lt;/code&gt; which can be installed using snap, I used the following command:&lt;/p&gt; &#xA;&lt;p&gt;Note: The frontend container that runs nginx is already prepared to receive the request made by certboot to validate the certificate.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# BACKEND&#xA;certbot certonly --cert-name backend --webroot --webroot-path ./ssl/www/ -d api.mydomain.com&#xA;&#xA;# FRONTEND&#xA;certbot certonly --cert-name frontend --webroot --webroot-path ./ssl/www/ -d myapp.mydomain.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Access Data&lt;/h2&gt; &#xA;&lt;p&gt;User: &lt;a href=&#34;mailto:admin@whaticket.com&#34;&gt;admin@whaticket.com&lt;/a&gt; Password: admin&lt;/p&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;WhaTicket is a working in progress and we are adding new features frequently. To update your old installation and get all the new features, you can use a bash script like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Always check the .env.example and adjust your .env file before upgrading, since some new variable may be added.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nano updateWhaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;echo &#34;Updating Whaticket, please wait.&#34;&#xA;&#xA;cd ~&#xA;cd whaticket&#xA;git pull&#xA;cd backend&#xA;npm install&#xA;rm -rf dist&#xA;npm run build&#xA;npx sequelize db:migrate&#xA;npx sequelize db:seed&#xA;cd ../frontend&#xA;npm install&#xA;rm -rf build&#xA;npm run build&#xA;pm2 restart all&#xA;&#xA;echo &#34;Update finished. Enjoy!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make it executable and run it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chmod +x updateWhaticket&#xA;./updateWhaticket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project helps you and you want to help keep it going? Buy me a coffee:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/canove&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 61px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Para doações em BRL, utilize o Paypal:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/donate?business=VWW3BHW4AWHUY&amp;amp;item_name=Desenvolvimento+de+Software&amp;amp;currency_code=BRL&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Any help and suggestions will be apreciated.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I just started leaning Javascript a few months ago and this is my first project. It may have security issues and many bugs. I recommend using it only on local network.&lt;/p&gt; &#xA;&lt;p&gt;This project is not affiliated, associated, authorized, endorsed by, or in any way officially connected with WhatsApp or any of its subsidiaries or its affiliates. The official WhatsApp website can be found at &lt;a href=&#34;https://whatsapp.com&#34;&gt;https://whatsapp.com&lt;/a&gt;. &#34;WhatsApp&#34; as well as related names, marks, emblems and images are registered trademarks of their respective owners.&lt;/p&gt;</summary>
  </entry>
</feed>