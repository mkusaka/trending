<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-05T01:36:49Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>marcotcr/lime</title>
    <updated>2023-03-05T01:36:49Z</updated>
    <id>tag:github.com,2023-03-05:/marcotcr/lime</id>
    <link href="https://github.com/marcotcr/lime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lime: Explaining the predictions of any machine learning classifier&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/marcotcr/lime&#34;&gt;&lt;img src=&#34;https://travis-ci.org/marcotcr/lime.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://mybinder.org/v2/gh/marcotcr/lime/master&#34;&gt;&lt;img src=&#34;https://mybinder.org/badge_logo.svg?sanitize=true&#34; alt=&#34;Binder&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is about explaining what machine learning classifiers (or models) are doing. At the moment, we support explaining individual predictions for text classifiers or classifiers that act on tables (numpy arrays of numerical or categorical data) or images, with a package called lime (short for local interpretable model-agnostic explanations). Lime is based on the work presented in &lt;a href=&#34;https://arxiv.org/abs/1602.04938&#34;&gt;this paper&lt;/a&gt; (&lt;a href=&#34;https://github.com/marcotcr/lime/raw/master/citation.bib&#34;&gt;bibtex here for citation&lt;/a&gt;). Here is a link to the promo video:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=hUnRCxnydCc&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/doc/images/video_screenshot.png&#34; width=&#34;450&#34; alt=&#34;KDD promo video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our plan is to add more packages that help users understand and interact meaningfully with machine learning.&lt;/p&gt; &#xA;&lt;p&gt;Lime is able to explain any black box classifier, with two or more classes. All we require is that the classifier implements a function that takes in raw text or a numpy array and outputs a probability for each class. Support for scikit-learn classifiers is built-in.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The lime package is on &lt;a href=&#34;https://pypi.python.org/pypi/lime&#34;&gt;PyPI&lt;/a&gt;. Simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install lime&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or clone the repository and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;pip install .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We dropped python2 support in &lt;code&gt;0.2.0&lt;/code&gt;, &lt;code&gt;0.1.1.37&lt;/code&gt; was the last version before that.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;Below are some screenshots of lime explanations. These are generated in html, and can be easily produced and embedded in ipython notebooks. We also support visualizations using matplotlib, although they don&#39;t look as nice as these ones.&lt;/p&gt; &#xA;&lt;h4&gt;Two class case, text&lt;/h4&gt; &#xA;&lt;p&gt;Negative (blue) words indicate atheism, while positive (orange) words indicate christian. The way to interpret the weights by applying them to the prediction probabilities. For example, if we remove the words Host and NNTP from the document, we expect the classifier to predict atheism with probability 0.58 - 0.14 - 0.11 = 0.31.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/doc/images/twoclass.png&#34; alt=&#34;twoclass&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Multiclass case&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/doc/images/multiclass.png&#34; alt=&#34;multiclass&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Tabular data&lt;/h4&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/doc/images/tabular.png&#34; alt=&#34;tabular&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Images (explaining prediction of &#39;Cat&#39; in pros and cons)&lt;/h4&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/doc/images/images.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;h2&gt;Tutorials and API&lt;/h2&gt; &#xA;&lt;p&gt;For example usage for text classifiers, take a look at the following two tutorials (generated from ipython notebooks):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marcotcr.github.io/lime/tutorials/Lime%20-%20basic%20usage%2C%20two%20class%20case.html&#34;&gt;Basic usage, two class. We explain random forest classifiers.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marcotcr.github.io/lime/tutorials/Lime%20-%20multiclass.html&#34;&gt;Multiclass case&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For classifiers that use numerical or categorical data, take a look at the following tutorial (this is newer, so please let me know if you find something wrong):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marcotcr.github.io/lime/tutorials/Tutorial%20-%20continuous%20and%20categorical%20features.html&#34;&gt;Tabular data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marcotcr.github.io/lime/tutorials/Tutorial_H2O_continuous_and_cat.html&#34;&gt;Tabular data with H2O models&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/doc/notebooks/Latin%20Hypercube%20Sampling.ipynb&#34;&gt;Latin Hypercube Sampling&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For image classifiers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marcotcr.github.io/lime/tutorials/Tutorial%20-%20images.html&#34;&gt;Images - basic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcotcr/lime/raw/master/doc/notebooks/Tutorial%20-%20Faces%20and%20GradBoost.ipynb&#34;&gt;Images - Faces&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcotcr/lime/raw/master/doc/notebooks/Tutorial%20-%20Image%20Classification%20Keras.ipynb&#34;&gt;Images with Keras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcotcr/lime/raw/master/doc/notebooks/Tutorial%20-%20MNIST%20and%20RF.ipynb&#34;&gt;MNIST with random forests&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcotcr/lime/raw/master/doc/notebooks/Tutorial%20-%20images%20-%20Pytorch.ipynb&#34;&gt;Images with PyTorch&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For regression:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marcotcr.github.io/lime/tutorials/Using%2Blime%2Bfor%2Bregression.html&#34;&gt;Simple regression&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Submodular Pick:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/marcotcr/lime/tree/master/doc/notebooks/Submodular%20Pick%20examples.ipynb&#34;&gt;Submodular Pick&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The raw (non-html) notebooks for these tutorials are available &lt;a href=&#34;https://github.com/marcotcr/lime/tree/master/doc/notebooks&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The API reference is available &lt;a href=&#34;https://lime-ml.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;What are explanations?&lt;/h2&gt; &#xA;&lt;p&gt;Intuitively, an explanation is a local linear approximation of the model&#39;s behaviour. While the model may be very complex globally, it is easier to approximate it around the vicinity of a particular instance. While treating the model as a black box, we perturb the instance we want to explain and learn a sparse linear model around it, as an explanation. The figure below illustrates the intuition for this procedure. The model&#39;s decision function is represented by the blue/pink background, and is clearly nonlinear. The bright red cross is the instance being explained (let&#39;s call it X). We sample instances around X, and weight them according to their proximity to X (weight here is indicated by size). We then learn a linear model (dashed line) that approximates the model well in the vicinity of X, but not necessarily globally. For more information, &lt;a href=&#34;https://arxiv.org/abs/1602.04938&#34;&gt;read our paper&lt;/a&gt;, or take a look at &lt;a href=&#34;https://www.oreilly.com/learning/introduction-to-local-interpretable-model-agnostic-explanations-lime&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/doc/images/lime.png&#34; width=&#34;300px&#34;&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/marcotcr/lime/master/CONTRIBUTING.md&#34;&gt;this&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>futurepress/epub.js</title>
    <updated>2023-03-05T01:36:49Z</updated>
    <id>tag:github.com,2023-03-05:/futurepress/epub.js</id>
    <link href="https://github.com/futurepress/epub.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Enhanced eBooks in the browser.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Epub.js v0.3&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://fchasen.com/futurepress/fp.png&#34; alt=&#34;FuturePress Views&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Epub.js is a JavaScript library for rendering ePub documents in the browser, across many devices.&lt;/p&gt; &#xA;&lt;p&gt;Epub.js provides an interface for common ebook functions (such as rendering, persistence and pagination) without the need to develop a dedicated application or plugin. Importantly, it has an incredibly permissive &lt;a href=&#34;http://en.wikipedia.org/wiki/BSD_licenses&#34;&gt;Free BSD&lt;/a&gt; license.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://futurepress.github.io/epubjs-reader/&#34;&gt;Try it while reading Moby Dick&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why EPUB&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://fchasen.com/futurepress/whyepub.png&#34; alt=&#34;Why EPUB&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://www.idpf.org/epub/30/spec/epub30-overview.html&#34;&gt;EPUB standard&lt;/a&gt; is a widely used and easily convertible format. Many books are currently in this format, and it is convertible to many other formats (such as PDF, Mobi and iBooks).&lt;/p&gt; &#xA;&lt;p&gt;An unzipped EPUB3 is a collection of HTML5 files, CSS, images and other media – just like any other website. However, it enforces a schema of book components, which allows us to render a book and its parts based on a controlled vocabulary.&lt;/p&gt; &#xA;&lt;p&gt;More specifically, the EPUB schema standardizes the table of contents, provides a manifest that enables the caching of the entire book, and separates the storage of the content from how it’s displayed.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Get the minified code from the build folder:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;../dist/epub.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using archived &lt;code&gt;.epub&lt;/code&gt; files include JSZip:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/jszip/3.1.5/jszip.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set up a element to render to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&#34;area&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the new ePub, and then render it to that element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;&#xA;  var book = ePub(&#34;url/to/book/package.opf&#34;);&#xA;  var rendition = book.renderTo(&#34;area&#34;, {width: 600, height: 400});&#xA;  var displayed = rendition.display();&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Render Methods&lt;/h2&gt; &#xA;&lt;h3&gt;Default&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;book.renderTo(&#34;area&#34;, { method: &#34;default&#34;, width: &#34;100%&#34;, height: &#34;100%&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/spreads.html&#34;&gt;View example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default manager only displays a single section at a time.&lt;/p&gt; &#xA;&lt;h3&gt;Continuous&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;book.renderTo(&#34;area&#34;, { method: &#34;continuous&#34;, width: &#34;100%&#34;, height: &#34;100%&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/continuous-scrolled.html&#34;&gt;View example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The continuous manager will display as many sections as need to fill the screen, and preload the next section offscreen. This enables seamless swiping / scrolling between pages on mobile and desktop, but is less performant than the default method.&lt;/p&gt; &#xA;&lt;h2&gt;Flow Overrides&lt;/h2&gt; &#xA;&lt;h3&gt;Auto (Default)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;book.renderTo(&#34;area&#34;, { flow: &#34;auto&#34;, width: &#34;900&#34;, height: &#34;600&#34; });&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Flow will be based on the settings in the OPF, defaults to &lt;code&gt;paginated&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Paginated&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;book.renderTo(&#34;area&#34;, { flow: &#34;paginated&#34;, width: &#34;900&#34;, height: &#34;600&#34; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/spreads.html&#34;&gt;View example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Scrolled: &lt;code&gt;book.renderTo(&#34;area&#34;, { flow: &#34;scrolled-doc&#34; });&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/scrolled.html&#34;&gt;View example&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Scripted Content&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.w3.org/TR/epub-33/#sec-scripted-content&#34;&gt;Scripted content&lt;/a&gt;, JavasScript the ePub HTML content, is disabled by default due to the potential for executing malicious content.&lt;/p&gt; &#xA;&lt;p&gt;This is done by sandboxing the iframe the content is rendered into, though it is still recommended to sanitize the ePub content server-side as well.&lt;/p&gt; &#xA;&lt;p&gt;If a trusted ePub contains interactivity, it can be enabled by passing &lt;code&gt;allowScriptedContent: true&lt;/code&gt; to the &lt;code&gt;Rendition&lt;/code&gt; settings.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;&#xA;  var rendition = book.renderTo(&#34;area&#34;, {&#xA;    width: 600,&#xA;    height: 400,&#xA;    allowScriptedContent: true&#xA;  });&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will allow the sandboxed content to run scripts, but currently makes the sandbox insecure.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;API documentation is available at &lt;a href=&#34;http://epubjs.org/documentation/0.3/&#34;&gt;epubjs.org/documentation/0.3/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Markdown version is included in the repo at &lt;a href=&#34;https://github.com/futurepress/epub.js/raw/master/documentation/md/API.md&#34;&gt;documentation/API.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Running Locally&lt;/h2&gt; &#xA;&lt;p&gt;install &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then install the project dependences with npm&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can run the reader locally with the command&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/spreads.html&#34;&gt;Spreads&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/scrolled.html&#34;&gt;Scrolled&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/swipe.html&#34;&gt;Swipe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/input.html&#34;&gt;Input&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/highlights.html&#34;&gt;Highlights&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://futurepress.github.io/epub.js/examples/&#34;&gt;View All Examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Test can be run by Karma from NPM&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building for Distribution&lt;/h2&gt; &#xA;&lt;p&gt;Builds are concatenated and minified using &lt;a href=&#34;https://webpack.js.org/&#34;&gt;webpack&lt;/a&gt; and &lt;a href=&#34;https://babeljs.io/&#34;&gt;babel&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;To generate a new build run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm run prepare&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to continuously build run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm run watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;p&gt;Similar to a plugins, Epub.js implements events that can be &#34;hooked&#34; into. Thus you can interact with and manipulate the contents of the book.&lt;/p&gt; &#xA;&lt;p&gt;Examples of this functionality is loading videos from YouTube links before displaying a chapter&#39;s contents or implementing annotation.&lt;/p&gt; &#xA;&lt;p&gt;Hooks require an event to register to and a can return a promise to block until they are finished.&lt;/p&gt; &#xA;&lt;p&gt;Example hook:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;rendition.hooks.content.register(function(contents, view) {&#xA;&#xA;    var elements = contents.document.querySelectorAll(&#39;[video]&#39;);&#xA;    var items = Array.prototype.slice.call(elements);&#xA;&#xA;    items.forEach(function(item){&#xA;      // do something with the video item&#xA;    });&#xA;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The parts of the rendering process that can be hooked into are below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;book.spine.hooks.serialize // Section is being converted to text&#xA;book.spine.hooks.content // Section has been loaded and parsed&#xA;rendition.hooks.render // Section is rendered to the screen&#xA;rendition.hooks.content // Section contents have been loaded&#xA;rendition.hooks.unloaded // Section contents are being unloaded&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reader&lt;/h2&gt; &#xA;&lt;p&gt;The reader has moved to its own repo at: &lt;a href=&#34;https://github.com/futurepress/epubjs-reader/&#34;&gt;https://github.com/futurepress/epubjs-reader/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Additional Resources&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/futurepress/epub.js&#34; title=&#34;Gitter Chat&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/futurepress/epub.js.png&#34; alt=&#34;Gitter Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/#!forum/epubjs&#34;&gt;Epub.js Developer Mailing List&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;IRC Server: freenode.net Channel: #epub.js&lt;/p&gt; &#xA;&lt;p&gt;Follow us on twitter: @Epubjs&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://twitter.com/#!/Epubjs&#34;&gt;http://twitter.com/#!/Epubjs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;p&gt;EPUB is a registered trademark of the &lt;a href=&#34;http://idpf.org/&#34;&gt;IDPF&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sysplu/Nullify</title>
    <updated>2023-03-05T01:36:49Z</updated>
    <id>tag:github.com,2023-03-05:/sysplu/Nullify</id>
    <link href="https://github.com/sysplu/Nullify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;One of the BEST up to date iReady hacks. Similar to iReady Overload.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Nullify&lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;The BEST i-Ready hack.&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;By &lt;a href=&#34;https://github.com/wang-fr&#34;&gt;wang-fr&lt;/a&gt;, &lt;a href=&#34;https://github.com/proxyplu&#34;&gt;proxyplu&lt;/a&gt;, &lt;a href=&#34;https://github.com/TonicGaro&#34;&gt;TonicGaro&lt;/a&gt;, and &lt;a href=&#34;https://github.com/flowingsalt&#34;&gt;flowingsalt&lt;/a&gt;. &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;a href=&#34;https://discord.gg/nullify&#34;&gt;Nullify Discord&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://discord.gg/nullify&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/1075550021291872307?label=discord&amp;amp;logo=discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;212&#34; height=&#34;212&#34; src=&#34;https://res.cloudinary.com/dodofguiy/image/upload/v1671071889/icon_f6pwnj.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Welcome to Nullify, the best i-Ready hack!&lt;br&gt;&lt;br&gt; With this hack you can completely remove the stress and torture that comes with i-Ready and breeze through your lessons with ease.&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;How to setup:&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Copy the code below and login to i-Ready.&lt;br&gt;&lt;br&gt; Do Ctrl + Shift + J to open the console and paste the code or can use a bookmarklet, if continue to use console, hit Enter to run it.&lt;br&gt;&lt;br&gt; If your school blocks the console then make a new bookmark and in the URL section paste the code there. Click the bookmark anytime to run the code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;javascript:fetch(&#39;https://raw.githubusercontent.com/sysplu/Nullify/main/Data/main.js&#39;).then(r =&amp;gt; r.text()).then(r =&amp;gt; eval(r))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;FAQ&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;How do I send feedback about Nullify?&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;You can make an issue on the Github repository or leave a comment on our Discord server (listed at the top of this page). But please, be sure to check the rest of the FAQ before bringing up an issue.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;The script isn&#39;t working, what do I do?&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;It may be that you have an old version (which is very common), or that you simply followed the wrong steps (i.e not putting a colon after javascript in the bookmarklet or just copied the code wrong. Make sure to check your code!). Always check either of these two options before complaining. Worst case scenario, it might be that the script has been patched, but it&#39;s not likely to happen for a while. If so, we will try to fix it as fast as possible so please be patient if ever happens.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Is there something like this for other school related programs?&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;You can join the discord and ask for something to be made but your best bet would most likely be to use some of the following:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;https://discord.gg/qu9KB4BCZz (Savvas Realize)&lt;/li&gt; &#xA;  &lt;li&gt;https://discord.gg/4STDwzYUXb (Deltamath)&lt;/li&gt; &#xA;  &lt;li&gt;https://discord.gg/4STDwzYUXb (Ed-Learning)&lt;/li&gt; &#xA;  &lt;li&gt;https://photomath.com/ (Math related)&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;b&gt;Can you make other hacks for another programs?&lt;/b&gt;&lt;/summary&gt; &#xA; &lt;p&gt;We could but really our main focus is i-Ready exploits. There is plenty of exploits on GitHub, just check before asking. You can ask &amp;amp; we will keep it as an suggestion.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Misc&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Credits to MidgetFudger69, cupiditys, and wang for originally making this, (but some deleted their repo).&lt;br&gt;&lt;br&gt; HUGE credit to wang-fr and flowingsalt for creating the Lesson Skipper. This hack wouldn&#39;t be as great as it is without their help.&lt;br&gt;&lt;br&gt; Press H while the Nullify menu is open to hide it. Press H again to have it reappear.&lt;br&gt;&lt;br&gt; Nullify is under the GNU General Public License v3.0. Learn more &lt;a href=&#34;https://github.com/notplu/Nullify/raw/main/LICENSE&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>