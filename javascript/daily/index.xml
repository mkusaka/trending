<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-12T02:27:12Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vercel-labs/nextgram</title>
    <updated>2023-04-12T02:27:12Z</updated>
    <id>tag:github.com,2023-04-12:/vercel-labs/nextgram</id>
    <link href="https://github.com/vercel-labs/nextgram" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A sample Next.js app showing dynamic routing with modals as a route.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;NextGram&lt;/h1&gt; &#xA;&lt;p&gt;This is a sample Next.js application that takes advantage of the advanced routing capabilities.&lt;/p&gt; &#xA;&lt;p&gt;The photo route can be attached to &lt;em&gt;two distinct&lt;/em&gt; components:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When navigating within the application, it is rendered as a modal&lt;/li&gt; &#xA; &lt;li&gt;When the page is refreshed, it is rendered as a standalone page&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KF0KExk.gif&#34; alt=&#34;NextGram&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Try it Yourself&lt;/h1&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nextgram.vercel.app&#34;&gt;https://nextgram.vercel.app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Fvercel%2Fnextgram&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Locally&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/vercel/nextgram.git&#xA;cd nextgram/&#xA;yarn&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>ds300/lazyrepo</title>
    <updated>2023-04-12T02:27:12Z</updated>
    <id>tag:github.com,2023-04-12:/ds300/lazyrepo</id>
    <link href="https://github.com/ds300/lazyrepo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Caching task runner for npm/pnpm/yarn monorepos.&lt;/p&gt;&lt;hr&gt;&lt;div alt style=&#34;text-align: center; transform: scale(.5);&#34;&gt; &#xA; &lt;img alt=&#34;LAZYREPO&#34; src=&#34;https://github.com/ds300/lazyrepo/raw/main/assets/lazyrepo.svg?sanitize=true&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ðŸ’¡ Currently in early alpha! Get help or join in development on &lt;a href=&#34;https://discord.gg/XWb3NGHkfD&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;lazyrepo&lt;/code&gt; is a zero-config caching task runner for &lt;code&gt;npm&lt;/code&gt;/&lt;code&gt;pnpm&lt;/code&gt;/&lt;code&gt;yarn&lt;/code&gt; monorepos.&lt;/p&gt; &#xA;&lt;p&gt;It fits right into the niche that &lt;code&gt;turborepo&lt;/code&gt; carved out: making package.json &lt;code&gt;&#34;scripts&#34;&lt;/code&gt; scale without adopting a big industrial-strength build system like &lt;code&gt;nx&lt;/code&gt;, &lt;code&gt;bazel&lt;/code&gt;, &lt;code&gt;rush&lt;/code&gt;, or &lt;code&gt;buck&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;lazyrepo&lt;/code&gt; is scary fast. It&#39;s a lot faster than &lt;code&gt;turborepo&lt;/code&gt; despite being written in TypeScript rather than some young handsome clever funny systems language.&lt;/p&gt; &#xA;&lt;p&gt;Aside from perf, &lt;code&gt;lazyrepo&lt;/code&gt; comes with some big quality-of-life improvements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A human-friendly config format.&lt;/li&gt; &#xA; &lt;li&gt;Palpably sensible defaults.&lt;/li&gt; &#xA; &lt;li&gt;Concise and timely feedback to help you tweak and debug your build pipelines.&lt;/li&gt; &#xA; &lt;li&gt;You don&#39;t need to learn Rust to contribute.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Trust me, the whole situation is so delightful it will make you reach for the &lt;code&gt;:chefs-kiss:&lt;/code&gt; emoji. And then you&#39;ll realize that there is no such emoji, but you&#39;ll want it so badly that you&#39;ll draft a proposal to the Unicode Consortium to lobby for its introduction.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install &lt;code&gt;lazyrepo&lt;/code&gt; globally&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install lazyrepo --global&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And also as a dev dependency in the root of your repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install lazyrepo --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally add &lt;code&gt;.lazy&lt;/code&gt; to your .gitignore&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;\n\n#lazyrepo\n.lazy&#34; &amp;gt;&amp;gt; .gitignore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Running Tasks&lt;/h3&gt; &#xA;&lt;p&gt;Run tasks defined in &lt;code&gt;&#34;scripts&#34;&lt;/code&gt; entries using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lazy &amp;lt;script-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Anything that comes after the script name will be forwarded to the script itself, so you can do stuff like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lazy test --runInBand&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default behavior is optimized for &lt;code&gt;&#34;test&#34;&lt;/code&gt; scripts, where the order of execution matters if your packages depend on each other.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s say you have three packages: &lt;code&gt;core&lt;/code&gt;, &lt;code&gt;utils&lt;/code&gt;, and &lt;code&gt;primitives&lt;/code&gt;. The &lt;code&gt;core&lt;/code&gt; package depends on both &lt;code&gt;utils&lt;/code&gt; and &lt;code&gt;primitives&lt;/code&gt;, and they all have &lt;code&gt;&#34;test&#34;&lt;/code&gt; scripts in their package.json files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD&#xA;    A[packages/core] --&amp;gt;|depends on| B[packages/utils]&#xA;    A --&amp;gt;|depends on| C[packages/primitives]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With no config, when you run &lt;code&gt;lazy test&lt;/code&gt; in the project root:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The tests for &lt;code&gt;utils&lt;/code&gt; and &lt;code&gt;primitives&lt;/code&gt; will begin concurrently. The tests for &lt;code&gt;core&lt;/code&gt; will only be started if both &lt;code&gt;utils&lt;/code&gt; and &lt;code&gt;primitives&lt;/code&gt; finish successfully.&lt;/li&gt; &#xA; &lt;li&gt;If you change a source file in &lt;code&gt;core&lt;/code&gt; and run &lt;code&gt;lazy test&lt;/code&gt; again, only &lt;code&gt;core&lt;/code&gt;&#39;s tests will be executed.&lt;/li&gt; &#xA; &lt;li&gt;If you change a source file in &lt;code&gt;utils&lt;/code&gt; and run &lt;code&gt;lazy test&lt;/code&gt; again, both &lt;code&gt;utils&lt;/code&gt; and &lt;code&gt;core&lt;/code&gt;&#39;s tests will be executed, in that order.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Other commands&lt;/h3&gt; &#xA;&lt;p&gt;These are prefixed with a colon (&lt;code&gt;:&lt;/code&gt;) to help avoid conflicts with your script names.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;lazy :init&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Creates a config file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;lazy :clean&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Deletes all local cache data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;lazy :inherit&lt;/code&gt;&lt;/p&gt; &lt;p&gt;In larger projects, you often end up with the same &lt;code&gt;&#34;script&#34;&lt;/code&gt; entries duplicated in lots of package.json files. Keeping them in sync can be troublesome.&lt;/p&gt; &lt;p&gt;&lt;code&gt;lazyrepo&lt;/code&gt; lets you specify the command just once.&lt;/p&gt; &lt;p&gt;Replace the scripts entries with &lt;code&gt;lazy :inherit&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &#34;scripts&#34;: {&#xA;-  &#34;test&#34;: &#34;jest --runInBand --noCache --coverage&#34;,&#xA;+  &#34;test&#34;: &#34;lazy :inherit&#34;&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then add this in your lazy config file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt; &#34;tasks&#34;: {&#xA;   &#34;test&#34;: {&#xA;+    &#34;defaultCommand&#34;: &#34;jest --runInBand --noCache --coverage&#34;&#xA;   }&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now when you run &lt;code&gt;npm test&lt;/code&gt;, or whatever, in one of your package directories, it will look up the actual command to run from your lazy config file and run that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;lazy :run &amp;lt;task&amp;gt; [...&amp;lt;filter-paths&amp;gt;] [-- &amp;lt;forward-args&amp;gt;]&lt;/code&gt;&lt;/p&gt; &lt;p&gt;Runs the given task in all packages specified by &lt;code&gt;&amp;lt;paths&amp;gt;&lt;/code&gt;&lt;/p&gt; &lt;p&gt;e.g. to test only packages that end in &lt;code&gt;-utils&lt;/code&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;lazy :run test packages/*-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;To forward args to the script in &lt;code&gt;:run&lt;/code&gt; mode, append the args after &lt;code&gt;--&lt;/code&gt;, e.g.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;lazy :run test packages/core -- --runInBand&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can add more &lt;code&gt;:run&lt;/code&gt; invocations at the end.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;lazy :run test :run packages/core -- --watch&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Create a file called &lt;code&gt;lazy.config.js&lt;/code&gt; or &lt;code&gt;lazy.config.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;To create a &lt;code&gt;.js&lt;/code&gt; config file, in your project root run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lazy :init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;export default {&#xA;  tasks: {&#xA;    test: {&#xA;      cache: {&#xA;        // by default we consider all files in the package directory&#xA;        inputs: [&#39;**/*&#39;],&#xA;        // there are no outputs&#xA;        outputs: [],&#xA;        // a test invocation depends on the input files of any upstream packages&#xA;        inheritsInputFromDependencies: true,&#xA;      },&#xA;    },&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Migrating from turborepo&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ivan-sincek/android-penetration-testing-cheat-sheet</title>
    <updated>2023-04-12T02:27:12Z</updated>
    <id>tag:github.com,2023-04-12:/ivan-sincek/android-penetration-testing-cheat-sheet</id>
    <link href="https://github.com/ivan-sincek/android-penetration-testing-cheat-sheet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Work in progress... Thanks for all the stars, I will try to prioritize this project :)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Android Penetration Testing Cheat Sheet&lt;/h1&gt; &#xA;&lt;p&gt;This is more of a checklist for myself. May contain useful tips and tricks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Still a lot of things to add.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Everything was tested on Kali Linux v2022.2 (64-bit) and Samsung A5 (2017) with Android OS v8.0 (Oreo) and Magisk root v25.2.&lt;/p&gt; &#xA;&lt;p&gt;Check &lt;a href=&#34;https://topjohnwu.github.io/Magisk&#34;&gt;Magisk&lt;/a&gt; if you want to root your Android device. I have no &lt;a href=&#34;https://github.com/ivan-sincek/android-penetration-testing-cheat-sheet/raw/main/LICENSE&#34;&gt;liability&lt;/a&gt; over your actions.&lt;/p&gt; &#xA;&lt;p&gt;For help with any of the tools type &lt;code&gt;&amp;lt;tool_name&amp;gt; [-h | -hh | --help]&lt;/code&gt; or &lt;code&gt;man &amp;lt;tool_name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you didn&#39;t already, read &lt;a href=&#34;https://github.com/OWASP/owasp-mastg&#34;&gt;OWASP MSTG&lt;/a&gt; and &lt;a href=&#34;https://github.com/OWASP/owasp-masvs&#34;&gt;OWASP MASVS&lt;/a&gt;. You can download OWASP MSTG checklist from &lt;a href=&#34;https://github.com/OWASP/owasp-mastg/releases&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Highly recommend reading &lt;a href=&#34;https://book.hacktricks.xyz/mobile-pentesting/android-app-pentesting&#34;&gt;HackTricks - Android Applications Pentesting&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Websites that you should use while writing the report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cwe.mitre.org/data&#34;&gt;cwe.mitre.org/data&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/projects&#34;&gt;owasp.org/projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/www-project-mobile-top-10&#34;&gt;owasp.org/www-project-mobile-top-10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/Glossary.html&#34;&gt;cheatsheetseries.owasp.org&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln-metrics/cvss/v3-calculator&#34;&gt;nvd.nist.gov/vuln-metrics/cvss/v3-calculator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/ncp/repository&#34;&gt;nvd.nist.gov/ncp/repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://attack.mitre.org&#34;&gt;attack.mitre.org&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;My other cheat sheets:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ivan-sincek/ios-penetration-testing-cheat-sheet&#34;&gt;iOS Testing Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ivan-sincek/penetration-testing-cheat-sheet&#34;&gt;Penetration Testing Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ivan-sincek/wifi-penetration-testing-cheat-sheet&#34;&gt;WiFi Penetration Testing Cheat Sheet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;0. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#0-install-tools&#34;&gt;Install Tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#wifi-adb---debug-over-air&#34;&gt;WiFi ADB - Debug Over Air&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#magisk-frida&#34;&gt;Magisk Frida&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#magisk-sqlite-3&#34;&gt;Magisk SQLite 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#kali-linux-tools&#34;&gt;Kali Linux Tools&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#apktool&#34;&gt;Apktool&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#mobile-security-framework-mobsf&#34;&gt;Mobile Security Framework (MobSF)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#drozer&#34;&gt;Drozer&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;1. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#1-basics&#34;&gt;Basics&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#android-debug-bridge-adb&#34;&gt;Android Debug Bridge (ADB)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#installuninstall-an-apk&#34;&gt;Install/Uninstall an APK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#pull-an-apk-baseapk&#34;&gt;Pull an APK (base.apk)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#open-a-system-shell&#34;&gt;Open a System Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;Download/Upload Files and Directories&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#bypassing-permission-denied&#34;&gt;Bypassing Permission Denied&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;3. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#3-search-for-files-and-directories&#34;&gt;Search for Files and Directories&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;4. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;Inspect Files&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#single-file&#34;&gt;Single File&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#multiple-files&#34;&gt;Multiple Files&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#sqlite-3&#34;&gt;SQLite 3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#backups&#34;&gt;Backups&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;5. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#5-deeplinks&#34;&gt;Deeplinks&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;6. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#6-frida&#34;&gt;Frida&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#frida-scripts&#34;&gt;Frida Scripts&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;7. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#7-objection&#34;&gt;Objection&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#bypasses&#34;&gt;Bypasses&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;8. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#8-drozer&#34;&gt;Drozer&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#activities&#34;&gt;Activities&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#providers&#34;&gt;Providers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;9. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#9-decompile-an-apk&#34;&gt;Decompile an APK&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;10. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#10-repackage-an-apk&#34;&gt;Repackage an APK&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;11. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#11-tips-and-security-best-practices&#34;&gt;Tips and Security Best Practices&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;12. &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#12-useful-websites-and-tools&#34;&gt;Useful Websites and Tools&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;0. Install Tools&lt;/h2&gt; &#xA;&lt;h3&gt;WiFi ADB - Debug Over Air&lt;/h3&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://play.google.com/store/apps/details?id=com.ttxapps.wifiadb&#34;&gt;WiFi ADB - Debug Over Air&lt;/a&gt;. To be used with &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#android-debug-bridge-adb&#34;&gt;ADB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ivan-sincek/android-penetration-testing-cheat-sheet/raw/main/img/wifi_adb.jpg&#34; alt=&#34;WiFi ADB - Debug Over Air&#34; height=&#34;600em&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Figure 1 - WiFi ADB - Debug Over Air&lt;/p&gt; &#xA;&lt;h3&gt;Magisk Frida&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/ViRb3/magisk-frida/releases&#34;&gt;Magisk Frida&lt;/a&gt;, then, open your &lt;a href=&#34;https://topjohnwu.github.io/Magisk&#34;&gt;Magisk&lt;/a&gt; app and install Frida by importing the downloaded archive.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ivan-sincek/android-penetration-testing-cheat-sheet/raw/main/img/magisk_install_from_storage.jpg&#34; alt=&#34;Magisk Frida&#34; height=&#34;600em&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Figure 2 - Magisk Frida&lt;/p&gt; &#xA;&lt;h3&gt;Magisk SQLite 3&lt;/h3&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/stylemessiah/SQLite3UniversalBinaries/tags&#34;&gt;Magisk SQLite 3&lt;/a&gt;, then, open your &lt;a href=&#34;https://topjohnwu.github.io/Magisk&#34;&gt;Magisk&lt;/a&gt; app and install SQLite 3 by importing the downloaded archive.&lt;/p&gt; &#xA;&lt;h3&gt;Kali Linux Tools&lt;/h3&gt; &#xA;&lt;p&gt;Install required tools on your Kali Linux:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;apt-get -y install docker.io&#xA;&#xA;systemctl start docker&#xA;&#xA;apt-get -y install adb dex2jar jadx radare2 sqlite3 sqlitebrowser xmlstarlet&#xA;&#xA;pip3 install frida-tools objection&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that Frida and Objection are always up to date:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;pip3 install frida-tools objection --upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Apktool&lt;/h3&gt; &#xA;&lt;p&gt;Download and install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;apt-get -y install aapt&#xA;&#xA;wget https://raw.githubusercontent.com/iBotPeaches/Apktool/master/scripts/linux/apktool -O /root/Desktop/apktool&#xA;&#xA;chmod +x /root/Desktop/apktool &amp;amp;&amp;amp; cp /root/Desktop/apktool /usr/local/bin/apktool&#xA;&#xA;wget https://bitbucket.org/iBotPeaches/apktool/downloads/apktool_2.7.0.jar -O /root/Desktop/apktool.jar&#xA;&#xA;chmod +x /root/Desktop/apktool.jar &amp;amp;&amp;amp; cp /root/Desktop/apktool.jar /usr/local/bin/apktool.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mobile Security Framework (MobSF)&lt;/h3&gt; &#xA;&lt;p&gt;Install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker pull opensecurity/mobile-security-framework-mobsf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker run -it --rm --name mobsf -p 8000:8000 opensecurity/mobile-security-framework-mobsf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;http://localhost:8000&lt;/code&gt; using your preferred web browser.&lt;/p&gt; &#xA;&lt;p&gt;Uninstall:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker image rm opensecurity/mobile-security-framework-mobsf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Drozer&lt;/h3&gt; &#xA;&lt;p&gt;Install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker pull fsecurelabs/drozer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker run -it --rm --name drozer fsecurelabs/drozer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download &lt;a href=&#34;https://github.com/WithSecureLabs/drozer-agent/releases&#34;&gt;Drozer Agent&lt;/a&gt; and install it either manually or by using &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#android-debug-bridge-adb&#34;&gt;ADB&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Uninstall:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;docker image rm fsecurelabs/drozer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1. Basics&lt;/h2&gt; &#xA;&lt;h3&gt;Android Debug Bridge (ADB)&lt;/h3&gt; &#xA;&lt;p&gt;Start the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb start-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List attached devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb devices&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Connect to a remote device using &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#wifi-adb---debug-over-air&#34;&gt;WiFi ADB&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb connect 192.168.1.10:5555&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Stop the server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb kill-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install/Uninstall an APK&lt;/h3&gt; &#xA;&lt;p&gt;Install an APK (specify &lt;code&gt;-s&lt;/code&gt; to install it to a removable storage):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb install someapp.apk&#xA;&#xA;adb install -s someapp.apk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Uninstall an APK (specify &lt;code&gt;-k&lt;/code&gt; to keep the data and cache directories):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb uninstall com.someapp.dev&#xA;&#xA;adb uninstall -k com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pull an APK (base.apk)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell pm list packages &#39;keyword&#39; | cut -d &#39;:&#39; -f2&#xA;&#xA;adb pull $(adb shell pm path com.someapp.dev | cut -d &#39;:&#39; -f2 | grep &#39;base.apk&#39;) ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;keyword=&#34;keyword&#34;; pkg=$(adb shell pm list packages &#34;${keyword}&#34; | cut -d &#39;:&#39; -f2); adb pull $(adb shell pm path &#34;${pkg}&#34; | cut -d &#39;:&#39; -f2 | grep &#39;base.apk&#39;) ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Open a System Shell&lt;/h3&gt; &#xA;&lt;p&gt;Open a system shell as non-root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open a system shell as root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb shell su&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Download/Upload Files and Directories&lt;/h3&gt; &#xA;&lt;p&gt;Some of the internal storage paths:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;/data/local/tmp/&#xA;&#xA;/data/data/com.someapp.dev/cache/&#xA;/data/user/0/com.someapp.dev/cache/&#xA;&#xA;/mnt/sdcard/Android/data/com.someapp.dev/cache/&#xA;/storage/emulated/0/Android/data/com.someapp.dev/cache/&#xA;&#xA;/mnt/sdcard/Android/obb/com.someapp.dev/cache/&#xA;/storage/emulated/0/Android/obb/com.someapp.dev/cache/&#xA;&#xA;/mnt/media_rw/3664-6132/Android/data/com.someapp.dev/files&#xA;/storage/3664-6132/Android/data/com.someapp.dev/files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Number &lt;code&gt;0&lt;/code&gt; in both, &lt;code&gt;/data/user/0/&lt;/code&gt; and &lt;code&gt;/storage/emulated/0/&lt;/code&gt; paths, represents the first user in a multi-user device.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t confuse &lt;code&gt;/mnt/sdcard/&lt;/code&gt; path with a real removable storage path because sometimes such path is device specific, so you will need to search it on the internet or extract it using some Java code. In my case it is &lt;code&gt;/mnt/media_rw/3664-6132/&lt;/code&gt; path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;XML                     --&amp;gt;  Method                                     --&amp;gt;  Path&#xA;&#xA;&amp;lt;files-path/&amp;gt;           --&amp;gt;  getContext().getFilesDir()                 --&amp;gt;  /data/user/0/com.someapp.dev/files&#xA;&#xA;&amp;lt;cache-path/&amp;gt;           --&amp;gt;  getContext().getCacheDir()                 --&amp;gt;  /data/user/0/com.someapp.dev/cache&#xA;&#xA;&amp;lt;external-path/&amp;gt;        --&amp;gt;  Environment.getExternalStorageDirectory()  --&amp;gt;  /storage/emulated/0&#xA;&#xA;&amp;lt;external-files-path/&amp;gt;  --&amp;gt;  getContext().getExternalFilesDir(&#34;&#34;)       --&amp;gt;  /storage/emulated/0/Android/data/com.someapp.dev/files&#xA;&#xA;&amp;lt;external-cache-path/&amp;gt;  --&amp;gt;  getContext().getExternalCacheDir()         --&amp;gt;  /storage/emulated/0/Android/data/com.someapp.dev/cache&#xA;&#xA;&amp;lt;external-media-path/&amp;gt;  --&amp;gt;  getContext().getExternalMediaDirs()        --&amp;gt;  /storage/emulated/0/Android/media/com.someapp.dev&#xA;                                                                             /storage/3664-6132/Android/media/com.someapp.dev&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;   &#xA;-                       --&amp;gt;  getContext().getExternalFilesDirs(&#34;&#34;)      --&amp;gt;  /storage/emulated/0/Android/data/com.someapp.dev/files&#xA;                                                                             /storage/3664-6132/Android/data/com.someapp.dev/files&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Tilde &lt;code&gt;~&lt;/code&gt; is short for the root directory.&lt;/p&gt; &#xA;&lt;p&gt;Download a file or directory from your Android device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb pull ~/somefile.txt ./&#xA;&#xA;adb pull ~/somedir ./&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keep in mind that some directories do not have the write and/or execute permission; regardless, you can always upload files to and execute from &lt;code&gt;/data/local/tmp/&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Upload a file or directory to your Android device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb push somefile.txt /data/local/tmp/&#xA;&#xA;adb push somedir /data/local/tmp/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Empty directory will not be uploaded.&lt;/p&gt; &#xA;&lt;h3&gt;Bypassing Permission Denied&lt;/h3&gt; &#xA;&lt;p&gt;Download a file from your Android device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;adb shell su -c &#39;cat ~/somefile.txt&#39; &amp;gt; somefile.txt&#xA;&#xA;adb shell su -c &#39;run-as com.someapp.dev cat ~/somefile.txt&#39; &amp;gt; somefile.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download a directory from your Android device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dir=&#34;somedir&#34;; IFS=$&#39;\n&#39;; for subdir in $(adb shell su -c &#34;find \&#34;${dir}\&#34; -type d | sed &#39;s/ /\\\ /g&#39;&#34;); do mkdir -p &#34;.${subdir}&#34;; done; for file in $(adb shell su -c &#34;find \&#34;${dir}\&#34; -type f | sed &#39;s/ /\\\ /g&#39;&#34;); do adb shell su -c &#34;cat \&#34;${file}\&#34;&#34; &amp;gt; &#34;.${file}&#34;; done;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upload a file or directory to your Android device:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;src=&#34;somefile.txt&#34;; dst=&#34;/data/data/com.someapp.dev/&#34;; tmp=&#34;/data/local/tmp/&#34;; base=$(basename &#34;${src}&#34;); adb push &#34;${src}&#34; &#34;${tmp}&#34;; adb shell su -c &#34;cp -r \&#34;${tmp}${base}\&#34; \&#34;${dst}\&#34; &amp;amp;&amp;amp; rm -rf \&#34;${tmp}${base}\&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3. Search for Files and Directories&lt;/h2&gt; &#xA;&lt;p&gt;Search for files and directories from the global root directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find / -iname &#39;*keyword*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Search for files and directories in app specific directories (run &lt;code&gt;env&lt;/code&gt; in &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#7-objection&#34;&gt;Objection&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /data/user/0/com.someapp.dev/&#xA;&#xA;cd /storage/emulated/0/Android/data/com.someapp.dev/&#xA;&#xA;cd /storage/emulated/0/Android/obb/com.someapp.dev/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to download a whole directory from your Android device, see section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;Download/Upload Files and Directories&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Search for files and directories from the current directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;find . -iname &#39;*keyword*&#39;&#xA;&#xA;for keyword in &#39;access&#39; &#39;account&#39; &#39;admin&#39; &#39;card&#39; &#39;cer&#39; &#39;conf&#39; &#39;cred&#39; &#39;customer&#39; &#39;email&#39; &#39;history&#39; &#39;info&#39; &#39;json&#39; &#39;jwt&#39; &#39;key&#39; &#39;kyc&#39; &#39;log&#39; &#39;otp&#39; &#39;pass&#39; &#39;pem&#39; &#39;pin&#39; &#39;plist&#39; &#39;priv&#39; &#39;refresh&#39; &#39;salt&#39; &#39;secret&#39; &#39;seed&#39; &#39;setting&#39; &#39;sign&#39; &#39;sql&#39; &#39;token&#39; &#39;transaction&#39; &#39;transfer&#39; &#39;tar&#39; &#39;txt&#39; &#39;user&#39; &#39;zip&#39; &#39;xml&#39;; do find . -iname &#34;*${keyword}*&#34;; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4. Inspect Files&lt;/h2&gt; &#xA;&lt;p&gt;Inspect memory dumps, binaries, files inside &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#9-decompile-an-apk&#34;&gt;a decompiled APK&lt;/a&gt;, or any other files.&lt;/p&gt; &#xA;&lt;p&gt;After you finish testing [and logout], don&#39;t forget to download app specific directories using &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;adb&lt;/a&gt; and inspect all the files inside. Inspect what is new, and what still persists after logout.&lt;/p&gt; &#xA;&lt;p&gt;There will be some false positive results since the regular expressions are not perfect. I prefer to use &lt;code&gt;rabin2&lt;/code&gt; over &lt;code&gt;strings&lt;/code&gt; because it can read Unicode characters.&lt;/p&gt; &#xA;&lt;p&gt;On your Android device, try to modify app&#39;s files to test the filesystem checksum validation, i.e. to test the file integrity validation.&lt;/p&gt; &#xA;&lt;h3&gt;Single File&lt;/h3&gt; &#xA;&lt;p&gt;Extract hardcoded sensitive data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rabin2 -zzzqq somefile | grep -Pi &#39;[^\w\d]+(basic|bearer)\ .+&#39;&#xA;&#xA;rabin2 -zzzqq somefile | grep -Pi &#39;(access|account|admin|basic|bearer|card|conf|cred|customer|email|history|id|info|jwt|key|kyc|log|otp|pass|pin|priv|refresh|salt|secret|seed|setting|sign|token|transaction|transfer|user)\w*(?:\&#34;\ *\:|\ *\=).+&#39;&#xA;&#xA;rabin2 -zzzqq somefile | grep -Pi &#39;([^\w\d]+(to(\_|\ )do|todo|note)\ |\/\/|\/\*|\*\/).+&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract URLs, deeplinks, IPs, etc.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rabin2 -zzzqq somefile | grep -Po &#39;\w+\:\/\/[\w\-\.\@\:\/\?\=\%\&amp;amp;\#]+&#39; | grep -Piv &#39;\.(css|gif|jpeg|jpg|ogg|otf|png|svg|ttf|woff|woff2)&#39; | sort -uf | tee urls.txt&#xA;&#xA;rabin2 -zzzqq somefile | grep -Po &#39;(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}&#39; | sort -uf | tee ips.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract all strings and decode Base64 strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rabin2 -zzzqq somefile | sort -uf &amp;gt; strings.txt&#xA;&#xA;grep -Po &#39;(?:([a-zA-Z0-9\+\/]){4})*(?:(?1){4}|(?1){3}\=|(?1){2}\=\=)&#39; strings.txt | sort -uf &amp;gt; base64.txt&#xA;&#xA;for string in $(cat base64.txt); do res=$(echo &#34;${string}&#34; | base64 -d 2&amp;gt;/dev/null | grep -PI &#39;[\s\S]+&#39;); if [[ ! -z $res ]]; then echo -n &#34;${string}\n${res}\n\n&#34;; fi; done | tee base64_decoded.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Multiple Files&lt;/h3&gt; &#xA;&lt;p&gt;Extract hardcoded sensitive data:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IFS=$&#39;\n&#39;; for file in $(find . -type f); do echo -n &#34;\nFILE: \&#34;${file}\&#34;\n&#34;; rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null | grep -Pi &#39;[^\w\d]+(basic|bearer)\ .+&#39;; done&#xA;&#xA;IFS=$&#39;\n&#39;; for file in $(find . -type f); do echo -n &#34;\nFILE: \&#34;${file}\&#34;\n&#34;; rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null | grep -Pi &#39;(access|account|admin|basic|bearer|card|conf|cred|customer|email|history|id|info|jwt|key|kyc|log|otp|pass|pin|priv|refresh|salt|secret|seed|setting|sign|token|transaction|transfer|user)\w*(?:\&#34;\ *\:|\ *\=).+&#39;; done&#xA;&#xA;IFS=$&#39;\n&#39;; for file in $(find . -type f); do echo -n &#34;\nFILE: \&#34;${file}\&#34;\n&#34;; rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null | grep -Pi &#39;([^\w\d]+(to(\_|\ )do|todo|note)\ |\/\/|\/\*|\*\/).+&#39;; done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract URLs, deeplinks, IPs, etc.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IFS=$&#39;\n&#39;; for file in $(find . -type f); do rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null; done | grep -Po &#39;\w+\:\/\/[\w\-\.\@\:\/\?\=\%\&amp;amp;\#]+&#39; | grep -Piv &#39;\.(css|gif|jpeg|jpg|ogg|otf|png|svg|ttf|woff|woff2)&#39; | sort -uf | tee urls.txt&#xA;&#xA;IFS=$&#39;\n&#39;; for file in $(find . -type f); do rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null; done | grep -Po &#39;(\b25[0-5]|\b2[0-4][0-9]|\b[01]?[0-9][0-9]?)(\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}&#39; | sort -uf | tee ips.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Extract all strings and decode Base64 strings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;IFS=$&#39;\n&#39;; for file in $(find . -type f); do rabin2 -zzzqq &#34;${file}&#34; 2&amp;gt;/dev/null; done | sort -uf &amp;gt; strings.txt&#xA;&#xA;grep -Po &#39;(?:([a-zA-Z0-9\+\/]){4})*(?:(?1){4}|(?1){3}\=|(?1){2}\=\=)&#39; strings.txt | sort -uf &amp;gt; base64.txt&#xA;&#xA;for string in $(cat base64.txt); do res=$(echo &#34;${string}&#34; | base64 -d 2&amp;gt;/dev/null | grep -PI &#39;[\s\S]+&#39;); if [[ ! -z $res ]]; then echo -n &#34;${string}\n${res}\n\n&#34;; fi; done | tee base64_decoded.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SQLite 3&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#downloadupload-files-and-directories&#34;&gt;adb&lt;/a&gt; to download database files. Once downloaded, open them with &lt;a href=&#34;https://sqlitebrowser.org&#34;&gt;DB Browser for SQLite&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To inspect the content, navigate to &lt;code&gt;Browse Data&lt;/code&gt; tab, expand &lt;code&gt;Table&lt;/code&gt; dropdown menu, and select the desired table.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;img src=&#34;https://github.com/ivan-sincek/android-penetration-testing-cheat-sheet/raw/main/img/sqlite.png&#34; alt=&#34;SQLite&#34;&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Figure 3 - DB Browser for SQLite&lt;/p&gt; &#xA;&lt;p&gt;To inspect and/or edit database files on your Android device directly, use &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#magisk-sqlite-3&#34;&gt;SQLite 3&lt;/a&gt;; &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#android-debug-bridge-adb&#34;&gt;adb&lt;/a&gt; to your Android device and run the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;sqlite3 somefile&#xA;&#xA;.dump&#xA;&#xA;.tables&#xA;&#xA;SELECT * FROM sometable;&#xA;&#xA;.quit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Backups&lt;/h3&gt; &#xA;&lt;p&gt;Create a backup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb backup -system -apk -shared -all -f backup.ab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the latest &lt;a href=&#34;https://github.com/nelenkov/android-backup-extractor/releases&#34;&gt;Android Backup Extrator&lt;/a&gt;, and repack a backup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;java -jar abe.jar unpack backup.ab backup.tar&#xA;&#xA;java -jar abe.jar pack backup.tar backup.ab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Restore a backup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;adb restore backup.ab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;5. Deeplinks&lt;/h2&gt; &#xA;&lt;p&gt;To do.&lt;/p&gt; &#xA;&lt;h2&gt;6. Frida&lt;/h2&gt; &#xA;&lt;p&gt;Useful resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://frida.re/docs/home&#34;&gt;frida.re&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learnfrida.info&#34;&gt;learnfrida.info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeshare.frida.re&#34;&gt;codeshare.frida.re&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dweinstein/awesome-frida&#34;&gt;github.com/dweinstein/awesome-frida&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/interference-security/frida-scripts&#34;&gt;github.com/interference-security/frida-scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/m0bilesecurity/Frida-Mobile-Scripts&#34;&gt;github.com/m0bilesecurity/Frida-Mobile-Scripts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WithSecureLabs/android-keystore-audit&#34;&gt;github.com/WithSecureLabs/android-keystore-audit&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;List processes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-ps -Uai&#xA;&#xA;frida-ps -Uai | grep -i &#39;keyword&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get PID for a specified keyword:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-ps -Uai | grep -i &#39;keyword&#39; | cut -d &#39; &#39; -f 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Discover internal methods/calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-discover -U -f com.someapp.dev | tee frida_discover.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Trace internal methods/calls:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;frida-trace -U -p 1337&#xA;&#xA;frida-trace -U -p 1337 -i &#39;recv*&#39; -i &#39;send*&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frida Scripts&lt;/h3&gt; &#xA;&lt;p&gt;Bypass SSL Pinning using &lt;a href=&#34;https://codeshare.frida.re/@ivan-sincek/android-ssl-pinning-bypass&#34;&gt;android-ssl-pinning-bypass&lt;/a&gt; script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;frida -U -no-pause -l android-ssl-pinning-bypass.js -f com.someapp.dev&#xA;&#xA;frida -U -no-pause --codeshare ivan-sincek/android-ssl-pinning-bypass -f com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I prefer to use the built-in method in &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#bypasses&#34;&gt;Objection&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;7. Objection&lt;/h2&gt; &#xA;&lt;p&gt;Useful resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sensepost/objection&#34;&gt;github.com/sensepost/objection&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;objection -g com.someapp.dev explore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run a &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#6-frida&#34;&gt;Frida&lt;/a&gt; script in Objection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;import somescript.js&#xA;&#xA;objection -g com.someapp.dev explore --startup-script somescript.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List KeyStore:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;android keystore list&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump app&#39;s memory to a file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;memory dump all mem.dmp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Dump app&#39;s memory after e.g. 10 minutes of inactivity, then, check if sensitive data is still in the memory. See section &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#4-inspect-files&#34;&gt;4. Inspect Files&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Search app&#39;s memory directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;memory search &#39;somestring&#39; --string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List classes and methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;android hooking list classes&#xA;android hooking search classes &#39;keyword&#39;&#xA;&#xA;android hooking list class_methods &#39;someclass&#39;&#xA;android hooking search methods &#39;keyword&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hook on a class or method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;android hooking watch class &#39;someclass&#39;&#xA;&#xA;android hooking watch method &#39;-[someclass somemethod]&#39; --dump-args --dump-backtrace --dump-return&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the method&#39;s return value:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;android hooking set return_value &#39;-[someclass somemethod]&#39; false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Monitor the clipboard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;android clipboard monitor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bypasses&lt;/h3&gt; &#xA;&lt;p&gt;Bypass a root detection:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;android root disable --quiet&#xA;&#xA;objection -g com.someapp.dev explore --startup-command &#39;android root disable --quiet&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Bypass SSL pinning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;android sslpinning disable --quiet&#xA;&#xA;objection -g com.someapp.dev explore --startup-command &#39;android sslpinning disable --quiet&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also, you can import &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#frida-scripts&#34;&gt;Frida&lt;/a&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;8. Drozer&lt;/h2&gt; &#xA;&lt;p&gt;Connect to a remote agent:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;drozer console connect --server 192.168.1.10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List modules and show module details:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;list&#xA;&#xA;run somemodule --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open a system shell as non-root:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;List packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.package.list&#xA;&#xA;run app.package.list -f &#39;keyword&#39;&#xA;&#xA;run app.package.backup&#xA;&#xA;run app.package.debuggable&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show a package information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.package.info -a com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Show app&#39;s AndroidManifest.xml:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.package.manifest com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you cannot see the whole manifest, decode the APK using &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#apktool&#34;&gt;Apktool&lt;/a&gt; and just open the file manually.&lt;/p&gt; &#xA;&lt;p&gt;Show app&#39;s attack surface:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.package.attacksurface com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Activities&lt;/h3&gt; &#xA;&lt;p&gt;List exported activities and intent filters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.activity.info -i -a com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start an activity:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.activity.start --help&#xA;&#xA;run app.activity.start --component com.someapp.dev com.someapp.dev.SomeActivity&#xA;&#xA;run app.activity.start --component com.someapp.dev com.someapp.dev.SomeActivity --action android.intent.action.SOMEACTION --data-uri somescheme://somehost --extra string someKey someValue&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Drozer is not able to pass arrays, lists, objects, etc. to intent filters due to console interface limitations.&lt;/p&gt; &#xA;&lt;h3&gt;Providers&lt;/h3&gt; &#xA;&lt;p&gt;List exported and unexported content providers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.provider.info -a com.someapp.dev&#xA;&#xA;run app.provider.info -u -a com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;List, try to query, and do a vulnerability scan for all content providers&#39; URIs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;run app.provider.finduri com.someapp.dev&#xA;&#xA;run scanner.provider.finduris -a com.someapp.dev&#xA;&#xA;run scanner.provider.injection -a com.someapp.dev&#xA;&#xA;run scanner.provider.sqltables -a com.someapp.dev&#xA;&#xA;run scanner.provider.traversal -a com.someapp.dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;9. Decompile an APK&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;d2j-dex2jar&lt;/code&gt; + &lt;code&gt;jadx&lt;/code&gt; gives the best results.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Convert APK to JAR:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;d2j-dex2jar base.apk -o base.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Decompile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;jadx -j $(grep -c &#39;processor&#39; /proc/cpuinfo) -d /root/Desktop/source/ /root/Desktop/base.jar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to specify a full path to the base.jar (preferred) or &lt;a href=&#34;https://raw.githubusercontent.com/ivan-sincek/android-penetration-testing-cheat-sheet/main/#pull-an-apk-baseapk&#34;&gt;base.apk&lt;/a&gt;; otherwise, JADX might not recognize it.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to specify a full path to the output directory; otherwise, it will default to &lt;code&gt;/usr/share/jadx/bin/&lt;/code&gt; directory (i.e. to the root directory).&lt;/p&gt; &#xA;&lt;p&gt;To inspect the source code using GUI, run the following command and open either base.jar (preferred) or base.apk:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-fundamental&#34;&gt;jadx-gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;10. Repackage an APK&lt;/h2&gt; &#xA;&lt;p&gt;To do.&lt;/p&gt; &#xA;&lt;h2&gt;11. Tips and Security Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;Bypass any keyboard restriction by copying and pasting data into an input field.&lt;/p&gt; &#xA;&lt;p&gt;Access tokens should be short lived and invalidated once the user logs out.&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t forget to test widgets, push notifications, app extensions, and Firebase.&lt;/p&gt; &#xA;&lt;h2&gt;12. Useful Websites and Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zxing.org/w/decode.jspx&#34;&gt;zxing.org/w/decode.jspx&lt;/a&gt; (decode QR codes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://odinforum.com/discussion/11/latest-versions-of-odin-flashing-tool&#34;&gt;odinforum.com&lt;/a&gt; (firmware flashing tool for Samsung devices)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://samfrew.com/&#34;&gt;samfrew.com&lt;/a&gt; (firmwares for Samsung devices)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>