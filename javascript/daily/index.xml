<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-30T01:31:30Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>remarkjs/react-markdown</title>
    <updated>2024-08-30T01:31:30Z</updated>
    <id>tag:github.com,2024-08-30:/remarkjs/react-markdown</id>
    <link href="https://github.com/remarkjs/react-markdown" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Markdown component for React&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-markdown&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/remarkjs/react-markdown/actions&#34;&gt;&lt;img src=&#34;https://github.com/remarkjs/react-markdown/workflows/main/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/remarkjs/react-markdown&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/remarkjs/react-markdown.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react-markdown&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/react-markdown.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlejs.com/?q=react-markdown&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlejs/size/react-markdown&#34; alt=&#34;Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/unified&#34;&gt;&lt;img src=&#34;https://opencollective.com/unified/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/unified&#34;&gt;&lt;img src=&#34;https://opencollective.com/unified/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/remarkjs/remark/discussions&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discussions-success.svg?sanitize=true&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;React component to render markdown.&lt;/p&gt; &#xA;&lt;h2&gt;Feature highlights&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#security&#34;&gt;safe&lt;/a&gt; by default&lt;/strong&gt; (no &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; or XSS attacks)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#appendix-b-components&#34;&gt;components&lt;/a&gt;&lt;/strong&gt; (pass your own component to use instead of &lt;code&gt;&amp;lt;h2&amp;gt;&lt;/code&gt; for &lt;code&gt;## hi&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#plugins&#34;&gt;plugins&lt;/a&gt;&lt;/strong&gt; (many plugins you can pick and choose from)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#syntax&#34;&gt;compliant&lt;/a&gt;&lt;/strong&gt; (100% to CommonMark, 100% to GFM with a plugin)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#what-is-this&#34;&gt;What is this?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#when-should-i-use-this&#34;&gt;When should I use this?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#install&#34;&gt;Install&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#use&#34;&gt;Use&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#markdown&#34;&gt;&lt;code&gt;Markdown&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#defaulturltransformurl&#34;&gt;&lt;code&gt;defaultUrlTransform(url)&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#allowelement&#34;&gt;&lt;code&gt;AllowElement&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#extraprops&#34;&gt;&lt;code&gt;ExtraProps&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#options&#34;&gt;&lt;code&gt;Options&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#urltransform&#34;&gt;&lt;code&gt;UrlTransform&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#examples&#34;&gt;Examples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#use-a-plugin&#34;&gt;Use a plugin&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#use-a-plugin-with-options&#34;&gt;Use a plugin with options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#use-custom-components-syntax-highlight&#34;&gt;Use custom components (syntax highlight)&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#use-remark-and-rehype-plugins-math&#34;&gt;Use remark and rehype plugins (math)&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#plugins&#34;&gt;Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#types&#34;&gt;Types&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#compatibility&#34;&gt;Compatibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#appendix-a-html-in-markdown&#34;&gt;Appendix A: HTML in markdown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#appendix-b-components&#34;&gt;Appendix B: Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#appendix-c-line-endings-in-markdown-and-jsx&#34;&gt;Appendix C: line endings in markdown (and JSX)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#related&#34;&gt;Related&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;This package is a &lt;a href=&#34;http://reactjs.org&#34;&gt;React&lt;/a&gt; component that can be given a string of markdown that it’ll safely render to React elements. You can pass plugins to change how markdown is transformed and pass components that will be used instead of normal HTML elements.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to learn markdown, see this &lt;a href=&#34;https://commonmark.org/help/&#34;&gt;cheatsheet and tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;to try out &lt;code&gt;react-markdown&lt;/code&gt;, see &lt;a href=&#34;https://remarkjs.github.io/react-markdown/&#34;&gt;our demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;When should I use this?&lt;/h2&gt; &#xA;&lt;p&gt;There are other ways to use markdown in React out there so why use this one? The three main reasons are that they often rely on &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt;, have bugs with how they handle markdown, or don’t let you swap elements for components. &lt;code&gt;react-markdown&lt;/code&gt; builds a virtual DOM, so React only replaces what changed, from a syntax tree. That’s supported because we use &lt;a href=&#34;https://github.com/unifiedjs/unified&#34;&gt;unified&lt;/a&gt;, specifically &lt;a href=&#34;https://github.com/remarkjs/remark&#34;&gt;remark&lt;/a&gt; for markdown and &lt;a href=&#34;https://github.com/rehypejs/rehype&#34;&gt;rehype&lt;/a&gt; for HTML, which are popular tools to transform content with plugins.&lt;/p&gt; &#xA;&lt;p&gt;This package focusses on making it easy for beginners to safely use markdown in React. When you’re familiar with unified, you can use a modern hooks based alternative &lt;a href=&#34;https://github.com/remarkjs/react-remark&#34;&gt;&lt;code&gt;react-remark&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/rehypejs/rehype-react&#34;&gt;&lt;code&gt;rehype-react&lt;/code&gt;&lt;/a&gt; manually. If you instead want to use JavaScript and JSX &lt;em&gt;inside&lt;/em&gt; markdown files, use &lt;a href=&#34;https://github.com/mdx-js/mdx/&#34;&gt;MDX&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;This package is &lt;a href=&#34;https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c&#34;&gt;ESM only&lt;/a&gt;. In Node.js (version 16+), install with &lt;a href=&#34;https://docs.npmjs.com/cli/install&#34;&gt;npm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install react-markdown&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Deno with &lt;a href=&#34;https://esm.sh&#34;&gt;&lt;code&gt;esm.sh&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Markdown from &#39;https://esm.sh/react-markdown@9&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In browsers with &lt;a href=&#34;https://esm.sh&#34;&gt;&lt;code&gt;esm.sh&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&#34;module&#34;&amp;gt;&#xA;  import Markdown from &#39;https://esm.sh/react-markdown@9?bundle&#39;&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;p&gt;A basic hello world:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import {createRoot} from &#39;react-dom/client&#39;&#xA;import Markdown from &#39;react-markdown&#39;&#xA;&#xA;const markdown = &#39;# Hi, *Pluto*!&#39;&#xA;&#xA;createRoot(document.body).render(&amp;lt;Markdown&amp;gt;{markdown}&amp;lt;/Markdown&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show equivalent JSX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;h1&amp;gt;&#xA;  Hi, &amp;lt;em&amp;gt;Pluto&amp;lt;/em&amp;gt;!&#xA;&amp;lt;/h1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Here is an example that shows how to use a plugin (&lt;a href=&#34;https://github.com/remarkjs/remark-gfm&#34;&gt;&lt;code&gt;remark-gfm&lt;/code&gt;&lt;/a&gt;, which adds support for footnotes, strikethrough, tables, tasklists and URLs directly):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import {createRoot} from &#39;react-dom/client&#39;&#xA;import Markdown from &#39;react-markdown&#39;&#xA;import remarkGfm from &#39;remark-gfm&#39;&#xA;&#xA;const markdown = `Just a link: www.nasa.gov.`&#xA;&#xA;createRoot(document.body).render(&#xA;  &amp;lt;Markdown remarkPlugins={[remarkGfm]}&amp;gt;{markdown}&amp;lt;/Markdown&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show equivalent JSX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;p&amp;gt;&#xA;  Just a link: &amp;lt;a href=&#34;http://www.nasa.gov&#34;&amp;gt;www.nasa.gov&amp;lt;/a&amp;gt;.&#xA;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;This package exports the following identifier: &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#defaulturltransformurl&#34;&gt;&lt;code&gt;defaultUrlTransform&lt;/code&gt;&lt;/a&gt;. The default export is &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#markdown&#34;&gt;&lt;code&gt;Markdown&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Markdown&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Component to render markdown.&lt;/p&gt; &#xA;&lt;h6&gt;Parameters&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#options&#34;&gt;&lt;code&gt;Options&lt;/code&gt;&lt;/a&gt;) — props&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Returns&lt;/h6&gt; &#xA;&lt;p&gt;React element (&lt;code&gt;JSX.Element&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;defaultUrlTransform(url)&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Make a URL safe.&lt;/p&gt; &#xA;&lt;h6&gt;Parameters&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;) — URL&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Returns&lt;/h6&gt; &#xA;&lt;p&gt;Safe URL (&lt;code&gt;string&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;AllowElement&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Filter elements (TypeScript type).&lt;/p&gt; &#xA;&lt;h6&gt;Parameters&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt; (&lt;a href=&#34;https://github.com/syntax-tree/hast#element&#34;&gt;&lt;code&gt;Element&lt;/code&gt; from &lt;code&gt;hast&lt;/code&gt;&lt;/a&gt;) — element to check&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;index&lt;/code&gt; (&lt;code&gt;number | undefined&lt;/code&gt;) — index of &lt;code&gt;element&lt;/code&gt; in &lt;code&gt;parent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;parent&lt;/code&gt; (&lt;a href=&#34;https://github.com/syntax-tree/hast#nodes&#34;&gt;&lt;code&gt;Node&lt;/code&gt; from &lt;code&gt;hast&lt;/code&gt;&lt;/a&gt;) — parent of &lt;code&gt;element&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Returns&lt;/h6&gt; &#xA;&lt;p&gt;Whether to allow &lt;code&gt;element&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;, optional).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Map tag names to components (TypeScript type).&lt;/p&gt; &#xA;&lt;h6&gt;Type&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import type {Element} from &#39;hast&#39;&#xA;&#xA;type Components = Partial&amp;lt;{&#xA;  [TagName in keyof JSX.IntrinsicElements]:&#xA;    // Class component:&#xA;    | (new (props: JSX.IntrinsicElements[TagName] &amp;amp; ExtraProps) =&amp;gt; JSX.ElementClass)&#xA;    // Function component:&#xA;    | ((props: JSX.IntrinsicElements[TagName] &amp;amp; ExtraProps) =&amp;gt; JSX.Element | string | null | undefined)&#xA;    // Tag name:&#xA;    | keyof JSX.IntrinsicElements&#xA;}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;ExtraProps&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Extra fields we pass to components (TypeScript type).&lt;/p&gt; &#xA;&lt;h6&gt;Fields&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt; (&lt;a href=&#34;https://github.com/syntax-tree/hast#element&#34;&gt;&lt;code&gt;Element&lt;/code&gt; from &lt;code&gt;hast&lt;/code&gt;&lt;/a&gt;, optional) — original node&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;Options&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Configuration (TypeScript type).&lt;/p&gt; &#xA;&lt;h6&gt;Fields&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;allowElement&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#allowelement&#34;&gt;&lt;code&gt;AllowElement&lt;/code&gt;&lt;/a&gt;, optional) — filter elements; &lt;code&gt;allowedElements&lt;/code&gt; / &lt;code&gt;disallowedElements&lt;/code&gt; is used first&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowedElements&lt;/code&gt; (&lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt;, default: all tag names) — tag names to allow; cannot combine w/ &lt;code&gt;disallowedElements&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;children&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) — markdown&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;className&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, optional) — wrap in a &lt;code&gt;div&lt;/code&gt; with this class name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;components&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;, optional) — map tag names to components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;disallowedElements&lt;/code&gt; (&lt;code&gt;Array&amp;lt;string&amp;gt;&lt;/code&gt;, default: &lt;code&gt;[]&lt;/code&gt;) — tag names to disallow; cannot combine w/ &lt;code&gt;allowedElements&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;rehypePlugins&lt;/code&gt; (&lt;code&gt;Array&amp;lt;Plugin&amp;gt;&lt;/code&gt;, optional) — list of &lt;a href=&#34;https://github.com/rehypejs/rehype/raw/main/doc/plugins.md#list-of-plugins&#34;&gt;rehype plugins&lt;/a&gt; to use&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remarkPlugins&lt;/code&gt; (&lt;code&gt;Array&amp;lt;Plugin&amp;gt;&lt;/code&gt;, optional) — list of &lt;a href=&#34;https://github.com/remarkjs/remark/raw/main/doc/plugins.md#list-of-plugins&#34;&gt;remark plugins&lt;/a&gt; to use&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;remarkRehypeOptions&lt;/code&gt; (&lt;a href=&#34;https://github.com/remarkjs/remark-rehype#options&#34;&gt;&lt;code&gt;Options&lt;/code&gt; from &lt;code&gt;remark-rehype&lt;/code&gt;&lt;/a&gt;, optional) — options to pass through to &lt;code&gt;remark-rehype&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;skipHtml&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;, default: &lt;code&gt;false&lt;/code&gt;) — ignore HTML in markdown completely&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;unwrapDisallowed&lt;/code&gt; (&lt;code&gt;boolean&lt;/code&gt;, default: &lt;code&gt;false&lt;/code&gt;) — extract (unwrap) what’s in disallowed elements; normally when say &lt;code&gt;strong&lt;/code&gt; is not allowed, it and it’s children are dropped, with &lt;code&gt;unwrapDisallowed&lt;/code&gt; the element itself is replaced by its children&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;urlTransform&lt;/code&gt; (&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#urltransform&#34;&gt;&lt;code&gt;UrlTransform&lt;/code&gt;&lt;/a&gt;, default: &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#defaulturltransformurl&#34;&gt;&lt;code&gt;defaultUrlTransform&lt;/code&gt;&lt;/a&gt;) — change URLs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;code&gt;UrlTransform&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Transform URLs (TypeScript type).&lt;/p&gt; &#xA;&lt;h6&gt;Parameters&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;) — URL&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;key&lt;/code&gt; (&lt;code&gt;string&lt;/code&gt;, example: &lt;code&gt;&#39;href&#39;&lt;/code&gt;) — property name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt; (&lt;a href=&#34;https://github.com/syntax-tree/hast#element&#34;&gt;&lt;code&gt;Element&lt;/code&gt; from &lt;code&gt;hast&lt;/code&gt;&lt;/a&gt;) — element to check&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h6&gt;Returns&lt;/h6&gt; &#xA;&lt;p&gt;Transformed URL (&lt;code&gt;string&lt;/code&gt;, optional).&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Use a plugin&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to use a remark plugin. In this case, &lt;a href=&#34;https://github.com/remarkjs/remark-gfm&#34;&gt;&lt;code&gt;remark-gfm&lt;/code&gt;&lt;/a&gt;, which adds support for strikethrough, tables, tasklists and URLs directly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import {createRoot} from &#39;react-dom/client&#39;&#xA;import Markdown from &#39;react-markdown&#39;&#xA;import remarkGfm from &#39;remark-gfm&#39;&#xA;&#xA;const markdown = `A paragraph with *emphasis* and **strong importance**.&#xA;&#xA;&amp;gt; A block quote with ~strikethrough~ and a URL: https://reactjs.org.&#xA;&#xA;* Lists&#xA;* [ ] todo&#xA;* [x] done&#xA;&#xA;A table:&#xA;&#xA;| a | b |&#xA;| - | - |&#xA;`&#xA;&#xA;createRoot(document.body).render(&#xA;  &amp;lt;Markdown remarkPlugins={[remarkGfm]}&amp;gt;{markdown}&amp;lt;/Markdown&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show equivalent JSX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    A paragraph with &amp;lt;em&amp;gt;emphasis&amp;lt;/em&amp;gt; and &amp;lt;strong&amp;gt;strong importance&amp;lt;/strong&amp;gt;.&#xA;  &amp;lt;/p&amp;gt;&#xA;  &amp;lt;blockquote&amp;gt;&#xA;    &amp;lt;p&amp;gt;&#xA;      A block quote with &amp;lt;del&amp;gt;strikethrough&amp;lt;/del&amp;gt; and a URL:{&#39; &#39;}&#xA;      &amp;lt;a href=&#34;https://reactjs.org&#34;&amp;gt;https://reactjs.org&amp;lt;/a&amp;gt;.&#xA;    &amp;lt;/p&amp;gt;&#xA;  &amp;lt;/blockquote&amp;gt;&#xA;  &amp;lt;ul className=&#34;contains-task-list&#34;&amp;gt;&#xA;    &amp;lt;li&amp;gt;Lists&amp;lt;/li&amp;gt;&#xA;    &amp;lt;li className=&#34;task-list-item&#34;&amp;gt;&#xA;      &amp;lt;input type=&#34;checkbox&#34; disabled /&amp;gt; todo&#xA;    &amp;lt;/li&amp;gt;&#xA;    &amp;lt;li className=&#34;task-list-item&#34;&amp;gt;&#xA;      &amp;lt;input type=&#34;checkbox&#34; disabled checked /&amp;gt; done&#xA;    &amp;lt;/li&amp;gt;&#xA;  &amp;lt;/ul&amp;gt;&#xA;  &amp;lt;p&amp;gt;A table:&amp;lt;/p&amp;gt;&#xA;  &amp;lt;table&amp;gt;&#xA;    &amp;lt;thead&amp;gt;&#xA;      &amp;lt;tr&amp;gt;&#xA;        &amp;lt;th&amp;gt;a&amp;lt;/th&amp;gt;&#xA;        &amp;lt;th&amp;gt;b&amp;lt;/th&amp;gt;&#xA;      &amp;lt;/tr&amp;gt;&#xA;    &amp;lt;/thead&amp;gt;&#xA;  &amp;lt;/table&amp;gt;&#xA;&amp;lt;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Use a plugin with options&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how to use a plugin and give it options. To do that, use an array with the plugin at the first place, and the options second. &lt;a href=&#34;https://github.com/remarkjs/remark-gfm&#34;&gt;&lt;code&gt;remark-gfm&lt;/code&gt;&lt;/a&gt; has an option to allow only double tildes for strikethrough:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import {createRoot} from &#39;react-dom/client&#39;&#xA;import Markdown from &#39;react-markdown&#39;&#xA;import remarkGfm from &#39;remark-gfm&#39;&#xA;&#xA;const markdown = &#39;This ~is not~ strikethrough, but ~~this is~~!&#39;&#xA;&#xA;createRoot(document.body).render(&#xA;  &amp;lt;Markdown remarkPlugins={[[remarkGfm, {singleTilde: false}]]}&amp;gt;&#xA;    {markdown}&#xA;  &amp;lt;/Markdown&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show equivalent JSX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;p&amp;gt;&#xA;  This ~is not~ strikethrough, but &amp;lt;del&amp;gt;this is&amp;lt;/del&amp;gt;!&#xA;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Use custom components (syntax highlight)&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how you can overwrite the normal handling of an element by passing a component. In this case, we apply syntax highlighting with the seriously super amazing &lt;a href=&#34;https://github.com/react-syntax-highlighter/react-syntax-highlighter&#34;&gt;&lt;code&gt;react-syntax-highlighter&lt;/code&gt;&lt;/a&gt; by &lt;a href=&#34;https://github.com/conorhastings&#34;&gt;&lt;strong&gt;@conorhastings&lt;/strong&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;!-- To do: currently broken on actual ESM; let’s find an alternative? --&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import {createRoot} from &#39;react-dom/client&#39;&#xA;import Markdown from &#39;react-markdown&#39;&#xA;import {Prism as SyntaxHighlighter} from &#39;react-syntax-highlighter&#39;&#xA;import {dark} from &#39;react-syntax-highlighter/dist/esm/styles/prism&#39;&#xA;&#xA;// Did you know you can use tildes instead of backticks for code in markdown? ✨&#xA;const markdown = `Here is some JavaScript code:&#xA;&#xA;~~~js&#xA;console.log(&#39;It works!&#39;)&#xA;~~~&#xA;`&#xA;&#xA;createRoot(document.body).render(&#xA;  &amp;lt;Markdown&#xA;    children={markdown}&#xA;    components={{&#xA;      code(props) {&#xA;        const {children, className, node, ...rest} = props&#xA;        const match = /language-(\w+)/.exec(className || &#39;&#39;)&#xA;        return match ? (&#xA;          &amp;lt;SyntaxHighlighter&#xA;            {...rest}&#xA;            PreTag=&#34;div&#34;&#xA;            children={String(children).replace(/\n$/, &#39;&#39;)}&#xA;            language={match[1]}&#xA;            style={dark}&#xA;          /&amp;gt;&#xA;        ) : (&#xA;          &amp;lt;code {...rest} className={className}&amp;gt;&#xA;            {children}&#xA;          &amp;lt;/code&amp;gt;&#xA;        )&#xA;      }&#xA;    }}&#xA;  /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show equivalent JSX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;&amp;gt;&#xA;  &amp;lt;p&amp;gt;Here is some JavaScript code:&amp;lt;/p&amp;gt;&#xA;  &amp;lt;pre&amp;gt;&#xA;    &amp;lt;SyntaxHighlighter language=&#34;js&#34; style={dark} PreTag=&#34;div&#34; children=&#34;console.log(&#39;It works!&#39;)&#34; /&amp;gt;&#xA;  &amp;lt;/pre&amp;gt;&#xA;&amp;lt;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Use remark and rehype plugins (math)&lt;/h3&gt; &#xA;&lt;p&gt;This example shows how a syntax extension (through &lt;a href=&#34;https://github.com/remarkjs/remark-math&#34;&gt;&lt;code&gt;remark-math&lt;/code&gt;&lt;/a&gt;) is used to support math in markdown, and a transform plugin (&lt;a href=&#34;https://github.com/remarkjs/remark-math/tree/main/packages/rehype-katex&#34;&gt;&lt;code&gt;rehype-katex&lt;/code&gt;&lt;/a&gt;) to render that math.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import {createRoot} from &#39;react-dom/client&#39;&#xA;import Markdown from &#39;react-markdown&#39;&#xA;import rehypeKatex from &#39;rehype-katex&#39;&#xA;import remarkMath from &#39;remark-math&#39;&#xA;import &#39;katex/dist/katex.min.css&#39; // `rehype-katex` does not import the CSS for you&#xA;&#xA;const markdown = `The lift coefficient ($C_L$) is a dimensionless coefficient.`&#xA;&#xA;createRoot(document.body).render(&#xA;  &amp;lt;Markdown remarkPlugins={[remarkMath]} rehypePlugins={[rehypeKatex]}&amp;gt;&#xA;    {markdown}&#xA;  &amp;lt;/Markdown&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show equivalent JSX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;p&amp;gt;&#xA;  The lift coefficient (&#xA;  &amp;lt;span className=&#34;katex&#34;&amp;gt;&#xA;    &amp;lt;span className=&#34;katex-mathml&#34;&amp;gt;&#xA;      &amp;lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&amp;gt;{/* … */}&amp;lt;/math&amp;gt;&#xA;    &amp;lt;/span&amp;gt;&#xA;    &amp;lt;span className=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&amp;gt;&#xA;      {/* … */}&#xA;    &amp;lt;/span&amp;gt;&#xA;  &amp;lt;/span&amp;gt;&#xA;  ) is a dimensionless coefficient.&#xA;&amp;lt;/p&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/unifiedjs/unified&#34;&gt;unified&lt;/a&gt;, specifically &lt;a href=&#34;https://github.com/remarkjs/remark&#34;&gt;remark&lt;/a&gt; for markdown and &lt;a href=&#34;https://github.com/rehypejs/rehype&#34;&gt;rehype&lt;/a&gt; for HTML, which are tools to transform content with plugins. Here are three good ways to find plugins:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remarkjs/awesome-remark&#34;&gt;&lt;code&gt;awesome-remark&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/rehypejs/awesome-rehype&#34;&gt;&lt;code&gt;awesome-rehype&lt;/code&gt;&lt;/a&gt; — selection of the most awesome projects&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remarkjs/remark/raw/main/doc/plugins.md#list-of-plugins&#34;&gt;List of remark plugins&lt;/a&gt; and &lt;a href=&#34;https://github.com/rehypejs/rehype/raw/main/doc/plugins.md#list-of-plugins&#34;&gt;list of rehype plugins&lt;/a&gt; — list of all plugins&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/topics/remark-plugin&#34;&gt;&lt;code&gt;remark-plugin&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/topics/rehype-plugin&#34;&gt;&lt;code&gt;rehype-plugin&lt;/code&gt;&lt;/a&gt; topics — any tagged repo on GitHub&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Syntax&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;react-markdown&lt;/code&gt; follows CommonMark, which standardizes the differences between markdown implementations, by default. Some syntax extensions are supported through plugins.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;a href=&#34;https://github.com/micromark/micromark&#34;&gt;&lt;code&gt;micromark&lt;/code&gt;&lt;/a&gt; under the hood for our parsing. See its documentation for more information on markdown, CommonMark, and extensions.&lt;/p&gt; &#xA;&lt;h2&gt;Types&lt;/h2&gt; &#xA;&lt;p&gt;This package is fully typed with &lt;a href=&#34;https://www.typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;. It exports the additional types &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#allowelement&#34;&gt;&lt;code&gt;AllowElement&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#extraprops&#34;&gt;&lt;code&gt;ExtraProps&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#components&#34;&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#options&#34;&gt;&lt;code&gt;Options&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#urltransform&#34;&gt;&lt;code&gt;UrlTransform&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;Projects maintained by the unified collective are compatible with maintained versions of Node.js.&lt;/p&gt; &#xA;&lt;p&gt;When we cut a new major release, we drop support for unmaintained versions of Node. This means we try to keep the current release line, &lt;code&gt;react-markdown@^9&lt;/code&gt;, compatible with Node.js 16.&lt;/p&gt; &#xA;&lt;p&gt;They work in all modern browsers (essentially: everything not IE 11). You can use a bundler (such as esbuild, webpack, or Rollup) to use this package in your project, and use its options (or plugins) to add support for legacy browsers.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                                           react-markdown&#xA;         +----------------------------------------------------------------------------------------------------------------+&#xA;         |                                                                                                                |&#xA;         |  +----------+        +----------------+        +---------------+       +----------------+       +------------+ |&#xA;         |  |          |        |                |        |               |       |                |       |            | |&#xA;&lt;a href=&#34;https://commonmark.org&#34;&gt;markdown&lt;/a&gt;-+-&amp;gt;+  &lt;a href=&#34;https://github.com/remarkjs/remark&#34;&gt;remark&lt;/a&gt;  +-&lt;a href=&#34;https://github.com/syntax-tree/mdast&#34;&gt;mdast&lt;/a&gt;-&amp;gt;+ &lt;a href=&#34;https://github.com/remarkjs/remark/raw/main/doc/plugins.md&#34;&gt;remark plugins&lt;/a&gt; +-&lt;a href=&#34;https://github.com/syntax-tree/mdast&#34;&gt;mdast&lt;/a&gt;-&amp;gt;+ &lt;a href=&#34;https://github.com/remarkjs/remark-rehype&#34;&gt;remark-rehype&lt;/a&gt; +-&lt;a href=&#34;https://github.com/syntax-tree/hast&#34;&gt;hast&lt;/a&gt;-&amp;gt;+ &lt;a href=&#34;https://github.com/rehypejs/rehype/raw/main/doc/plugins.md&#34;&gt;rehype plugins&lt;/a&gt; +-&lt;a href=&#34;https://github.com/syntax-tree/hast&#34;&gt;hast&lt;/a&gt;-&amp;gt;+ &lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/#appendix-b-components&#34;&gt;components&lt;/a&gt; +-+-&amp;gt;react elements&#xA;         |  |          |        |                |        |               |       |                |       |            | |&#xA;         |  +----------+        +----------------+        +---------------+       +----------------+       +------------+ |&#xA;         |                                                                                                                |&#xA;         +----------------------------------------------------------------------------------------------------------------+&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To understand what this project does, it’s important to first understand what unified does: please read through the &lt;a href=&#34;https://github.com/unifiedjs/unified&#34;&gt;&lt;code&gt;unifiedjs/unified&lt;/code&gt;&lt;/a&gt; readme (the part until you hit the API section is required reading).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;react-markdown&lt;/code&gt; is a unified pipeline — wrapped so that most folks don’t need to directly interact with unified. The processor goes through these steps:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;parse markdown to mdast (markdown syntax tree)&lt;/li&gt; &#xA; &lt;li&gt;transform through remark (markdown ecosystem)&lt;/li&gt; &#xA; &lt;li&gt;transform mdast to hast (HTML syntax tree)&lt;/li&gt; &#xA; &lt;li&gt;transform through rehype (HTML ecosystem)&lt;/li&gt; &#xA; &lt;li&gt;render hast to React with components&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Appendix A: HTML in markdown&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;react-markdown&lt;/code&gt; typically escapes HTML (or ignores it, with &lt;code&gt;skipHtml&lt;/code&gt;) because it is dangerous and defeats the purpose of this library.&lt;/p&gt; &#xA;&lt;p&gt;However, if you are in a trusted environment (you trust the markdown), and can spare the bundle size (±60kb minzipped), then you can use &lt;a href=&#34;https://github.com/rehypejs/rehype-raw&#34;&gt;&lt;code&gt;rehype-raw&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import {createRoot} from &#39;react-dom/client&#39;&#xA;import Markdown from &#39;react-markdown&#39;&#xA;import rehypeRaw from &#39;rehype-raw&#39;&#xA;&#xA;const markdown = `&amp;lt;div class=&#34;note&#34;&amp;gt;&#xA;&#xA;Some *emphasis* and &amp;lt;strong&amp;gt;strong&amp;lt;/strong&amp;gt;!&#xA;&#xA;&amp;lt;/div&amp;gt;`&#xA;&#xA;createRoot(document.body).render(&#xA;  &amp;lt;Markdown rehypePlugins={[rehypeRaw]}&amp;gt;{markdown}&amp;lt;/Markdown&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Show equivalent JSX&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div className=&#34;note&#34;&amp;gt;&#xA;  &amp;lt;p&amp;gt;&#xA;    Some &amp;lt;em&amp;gt;emphasis&amp;lt;/em&amp;gt; and &amp;lt;strong&amp;gt;strong&amp;lt;/strong&amp;gt;!&#xA;  &amp;lt;/p&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: HTML in markdown is still bound by how &lt;a href=&#34;https://spec.commonmark.org/0.30/#html-blocks&#34;&gt;HTML works in CommonMark&lt;/a&gt;. Make sure to use blank lines around block-level HTML that again contains markdown!&lt;/p&gt; &#xA;&lt;h2&gt;Appendix B: Components&lt;/h2&gt; &#xA;&lt;p&gt;You can also change the things that come from markdown:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Markdown&#xA;  components={{&#xA;    // Map `h1` (`# heading`) to use `h2`s.&#xA;    h1: &#39;h2&#39;,&#xA;    // Rewrite `em`s (`*like so*`) to `i` with a red foreground color.&#xA;    em(props) {&#xA;      const {node, ...rest} = props&#xA;      return &amp;lt;i style={{color: &#39;red&#39;}} {...rest} /&amp;gt;&#xA;    }&#xA;  }}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The keys in components are HTML equivalents for the things you write with markdown (such as &lt;code&gt;h1&lt;/code&gt; for &lt;code&gt;# heading&lt;/code&gt;). Normally, in markdown, those are: &lt;code&gt;a&lt;/code&gt;, &lt;code&gt;blockquote&lt;/code&gt;, &lt;code&gt;br&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;em&lt;/code&gt;, &lt;code&gt;h1&lt;/code&gt;, &lt;code&gt;h2&lt;/code&gt;, &lt;code&gt;h3&lt;/code&gt;, &lt;code&gt;h4&lt;/code&gt;, &lt;code&gt;h5&lt;/code&gt;, &lt;code&gt;h6&lt;/code&gt;, &lt;code&gt;hr&lt;/code&gt;, &lt;code&gt;img&lt;/code&gt;, &lt;code&gt;li&lt;/code&gt;, &lt;code&gt;ol&lt;/code&gt;, &lt;code&gt;p&lt;/code&gt;, &lt;code&gt;pre&lt;/code&gt;, &lt;code&gt;strong&lt;/code&gt;, and &lt;code&gt;ul&lt;/code&gt;. With &lt;a href=&#34;https://github.com/remarkjs/remark-gfm&#34;&gt;&lt;code&gt;remark-gfm&lt;/code&gt;&lt;/a&gt;, you can also use &lt;code&gt;del&lt;/code&gt;, &lt;code&gt;input&lt;/code&gt;, &lt;code&gt;table&lt;/code&gt;, &lt;code&gt;tbody&lt;/code&gt;, &lt;code&gt;td&lt;/code&gt;, &lt;code&gt;th&lt;/code&gt;, &lt;code&gt;thead&lt;/code&gt;, and &lt;code&gt;tr&lt;/code&gt;. Other remark or rehype plugins that add support for new constructs will also work with &lt;code&gt;react-markdown&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The props that are passed are what you probably would expect: an &lt;code&gt;a&lt;/code&gt; (link) will get &lt;code&gt;href&lt;/code&gt; (and &lt;code&gt;title&lt;/code&gt;) props, and &lt;code&gt;img&lt;/code&gt; (image) an &lt;code&gt;src&lt;/code&gt;, &lt;code&gt;alt&lt;/code&gt; and &lt;code&gt;title&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;Every component will receive a &lt;code&gt;node&lt;/code&gt;. This is the original &lt;a href=&#34;https://github.com/syntax-tree/hast#element&#34;&gt;&lt;code&gt;Element&lt;/code&gt; from &lt;code&gt;hast&lt;/code&gt;&lt;/a&gt; element being turned into a React element.&lt;/p&gt; &#xA;&lt;h2&gt;Appendix C: line endings in markdown (and JSX)&lt;/h2&gt; &#xA;&lt;p&gt;You might have trouble with how line endings work in markdown and JSX. We recommend the following, which solves all line ending problems:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// If you write actual markdown in your code, put your markdown in a variable;&#xA;// **do not indent markdown**:&#xA;const markdown = `&#xA;# This is perfect!&#xA;`&#xA;&#xA;// Pass the value as an expresion as an only child:&#xA;const result = &amp;lt;Markdown&amp;gt;{markdown}&amp;lt;/Markdown&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;👆 That works. Read on for what doesn’t and why that is.&lt;/p&gt; &#xA;&lt;p&gt;You might try to write markdown directly in your JSX and find that it &lt;strong&gt;does not&lt;/strong&gt; work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Markdown&amp;gt;&#xA;  # Hi&#xA;&#xA;  This is **not** a paragraph.&#xA;&amp;lt;/Markdown&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The is because in JSX the whitespace (including line endings) is collapsed to a single space. So the above example is equivalent to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Markdown&amp;gt; # Hi This is **not** a paragraph. &amp;lt;/Markdown&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Instead, to pass markdown to &lt;code&gt;Markdown&lt;/code&gt;, you can use an expression: with a template literal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Markdown&amp;gt;{`&#xA;# Hi&#xA;&#xA;This is a paragraph.&#xA;`}&amp;lt;/Markdown&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Template literals have another potential problem, because they keep whitespace (including indentation) inside them. That means that the following &lt;strong&gt;does not&lt;/strong&gt; turn into a heading:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Markdown&amp;gt;{`&#xA;    # This is **not** a heading, it’s an indented code block&#xA;`}&amp;lt;/Markdown&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;Use of &lt;code&gt;react-markdown&lt;/code&gt; is secure by default. Overwriting &lt;code&gt;urlTransform&lt;/code&gt; to something insecure will open you up to XSS vectors. Furthermore, the &lt;code&gt;remarkPlugins&lt;/code&gt;, &lt;code&gt;rehypePlugins&lt;/code&gt;, and &lt;code&gt;components&lt;/code&gt; you use may be insecure.&lt;/p&gt; &#xA;&lt;p&gt;To make sure the content is completely safe, even after what plugins do, use &lt;a href=&#34;https://github.com/rehypejs/rehype-sanitize&#34;&gt;&lt;code&gt;rehype-sanitize&lt;/code&gt;&lt;/a&gt;. It lets you define your own schema of what is and isn’t allowed.&lt;/p&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mdx-js/mdx/&#34;&gt;&lt;code&gt;MDX&lt;/code&gt;&lt;/a&gt; — JSX &lt;em&gt;in&lt;/em&gt; markdown&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remarkjs/remark-gfm&#34;&gt;&lt;code&gt;remark-gfm&lt;/code&gt;&lt;/a&gt; — add support for GitHub flavored markdown support&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/remarkjs/react-remark&#34;&gt;&lt;code&gt;react-remark&lt;/code&gt;&lt;/a&gt; — hook based alternative&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rehypejs/rehype-react&#34;&gt;&lt;code&gt;rehype-react&lt;/code&gt;&lt;/a&gt; — turn HTML into React elements&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/remarkjs/.github/raw/main/contributing.md&#34;&gt;&lt;code&gt;contributing.md&lt;/code&gt;&lt;/a&gt; in &lt;a href=&#34;https://github.com/remarkjs/.github&#34;&gt;&lt;code&gt;remarkjs/.github&lt;/code&gt;&lt;/a&gt; for ways to get started. See &lt;a href=&#34;https://github.com/remarkjs/.github/raw/main/support.md&#34;&gt;&lt;code&gt;support.md&lt;/code&gt;&lt;/a&gt; for ways to get help.&lt;/p&gt; &#xA;&lt;p&gt;This project has a &lt;a href=&#34;https://github.com/remarkjs/.github/raw/main/code-of-conduct.md&#34;&gt;code of conduct&lt;/a&gt;. By interacting with this repository, organization, or community you agree to abide by its terms.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/remarkjs/react-markdown/main/license&#34;&gt;MIT&lt;/a&gt; © &lt;a href=&#34;https://espen.codes/&#34;&gt;Espen Hovlandsdal&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>