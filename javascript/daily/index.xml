<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-12T01:31:22Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>MohamedRadwan-DevOps/devops-step-by-step</title>
    <updated>2022-08-12T01:31:22Z</updated>
    <id>tag:github.com,2022-08-12:/MohamedRadwan-DevOps/devops-step-by-step</id>
    <link href="https://github.com/MohamedRadwan-DevOps/devops-step-by-step" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DevOps Step-By-Step&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://socialify.git.ci/MohamedRadwan-DevOps/devops-step-by-step/image?font=Inter&amp;amp;forks=1&amp;amp;issues=1&amp;amp;language=1&amp;amp;owner=1&amp;amp;pattern=Circuit%20Board&amp;amp;pulls=1&amp;amp;stargazers=1&amp;amp;theme=Dark&#34; alt=&#34;devops-step-by-step&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/course-outline.md&#34; title=&#34;Course Outlines&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üìÉ Course Outlines &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/course-demos-labs.md&#34; title=&#34;Course Demos/Labs&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üß™ Course Demos/Labs &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/source-code&#34; title=&#34;Source Code/Labs&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üìë Source Code &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/docs&#34; title=&#34;Guides&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üéØ Guides &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/devops-course-faq.md&#34; title=&#34;FAQ&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none;&#34;&gt;‚ùì FAQ&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;http://devopsvisionsqa.mohamedradwan.com/&#34; title=&#34;Q/A&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none;&#34;&gt;üôã‚Äç‚ôÄÔ∏è Q/A&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/course-info-prerequisite.md&#34; title=&#34;Click here to see Prerequisite related to this Course&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;‚ö†Ô∏è Course Info and Prerequisites&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/reviews.md&#34; title=&#34;Click here to See Members Reviews&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;‚≠ê Reviews&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/course-schedule.md&#34; title=&#34;Course Schedule&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üìÖ Course Schedule&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/service-prices.md&#34; title=&#34;Service Prices&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üí∞ Prices&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/terms-conditions.md&#34; title=&#34;Terms &amp;amp; Conditions&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üìù Terms &amp;amp; Conditions&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/cancel-return-policy.md&#34; title=&#34;Return Policy&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üìú Return Policy&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/mentoring-service.md&#34; title=&#34;Mentoring Service&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üí™ Mentoring Service&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/raw/main/none-community/events-schedule.md&#34; title=&#34;Course Schedule&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;üìÖ Events Schedule&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/user/MRadwanMSF?sub_confirmation=1&#34; title=&#34;Subscribe to Mohamed&#39;s YouTube Channel&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;‚ñ∂ Subscribe to our channel (English)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/c/MohamedRadwanArabic?sub_confirmation=1&#34; title=&#34;Subscribe to Mohamed&#39;s YouTube Channel&#34; style=&#34;background-color:#FFFFFF;color:#000000;text-decoration:none&#34;&gt;‚ñ∂ Subscribe to our channel (Arabic) &lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Connect with me&lt;/h2&gt; &#xA;&lt;a href=&#34;https://twitter.com/mradwan06&#34;&gt; &lt;img width=&#34;30px&#34; src=&#34;https://www.vectorlogo.zone/logos/twitter/twitter-official.svg?sanitize=true&#34;&gt; &lt;/a&gt;‚ÄÇ &#xA;&lt;a href=&#34;https://www.linkedin.com/in/mohamedahmedradwan/&#34;&gt; &lt;img width=&#34;30px&#34; src=&#34;https://www.vectorlogo.zone/logos/linkedin/linkedin-icon.svg?sanitize=true&#34;&gt; &lt;/a&gt;‚ÄÇ &#xA;&lt;a href=&#34;https://www.youtube.com/user/MRadwanMSF&#34;&gt; &lt;img width=&#34;30px&#34; src=&#34;https://i.pinimg.com/originals/46/02/cb/4602cbc18967da9c1eba7452905cd99b.png&#34;&gt; &lt;/a&gt;‚ÄÇ &#xA;&lt;a href=&#34;https://www.youtube.com/c/MohamedRadwanArabic&#34;&gt; &lt;img width=&#34;30px&#34; src=&#34;https://i.pinimg.com/originals/46/02/cb/4602cbc18967da9c1eba7452905cd99b.png&#34;&gt; &lt;/a&gt;‚ÄÇ &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/MohamedRadwan-DevOps/devops-step-by-step/main/#&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;30px&#34; src=&#34;https://www.vectorlogo.zone/logos/instagram/instagram-icon.svg?sanitize=true&#34;&gt; &lt;/a&gt;‚ÄÇ &#xA;&lt;a href=&#34;https://mohamedradwan.com/&#34;&gt; &lt;img width=&#34;35px&#34; src=&#34;https://i.ibb.co/R9P4NqZ/pngegg.png&#34;&gt; &lt;/a&gt;‚ÄÇ &#xA;&lt;a href=&#34;https://mvp.microsoft.com/en-us/PublicProfile/4039889?fullName=Mohamed%20Radwan&#34; title=&#34; Microsoft Most Valuable Professional&#34;&gt; &lt;img width=&#34;35px&#34; src=&#34;https://i.ibb.co/rG8kjKR/download.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Thanks to all our contributors ‚ù§Ô∏è&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/MohamedRadwan-DevOps/devops-step-by-step/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=MohamedRadwan-DevOps/devops-step-by-step&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>orkestral/venom</title>
    <updated>2022-08-12T01:31:22Z</updated>
    <id>tag:github.com,2022-08-12:/orkestral/venom</id>
    <link href="https://github.com/orkestral/venom" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Venom is the most complete javascript library for Whatsapp, 100% Open Source.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üï∑Venom Botüï∏&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/venom-bot&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/venom-bot.svg?color=green&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/node/v/venom-bot&#34; alt=&#34;node&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/venom-bot&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/venom-bot.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/orkestral/venom&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/orkestral/venom.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/orkestral/venom&#34; title=&#34;Percentage of issues still open&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/open/orkestral/venom.svg?sanitize=true&#34; alt=&#34;Percentage of issues still open&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/qCJ95FVbzR&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/772885202351292426?color=blueviolet&amp;amp;label=discord&amp;amp;style=flat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/orkestral/venom/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/orkestral/venom/build.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/orkestral/venom/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/orkestral/venom/lint.svg?label=lint&#34; alt=&#34;Lint Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/release-it/release-it&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%93%A6%F0%9F%9A%80-release--it-e10079.svg?sanitize=true&#34; alt=&#34;release-it&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Venom is a high-performance system developed with JavaScript to create a bot for WhatsApp, support for creating any interaction, such as customer service, media sending, sentence recognition based on artificial intelligence and all types of design architecture for WhatsApp.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Get started fast and easy! Official API!&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/orkestral/venom/raw/master/docs/getting-started/creating-client.md&#34;&gt;Getting Started&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/orkestral/venom/raw/master/docs/getting-started/basic-functions.md&#34;&gt;Basic Function&lt;/a&gt; ‚Ä¢ &lt;a href=&#34;https://github.com/orkestral/venom/tree/master/docs/getting-started&#34;&gt;Documentation&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt; It&#39;s a high-performance alternative API to whatzapp, you can send, text messages, files, images, videos and more. &lt;/p&gt; &#xA;&lt;p&gt; Remember, the API was developed on a platform called RESTful Web services, providing interoperability between computer systems on the Internet. &lt;/p&gt; &#xA;&lt;p&gt; It uses a set of well-defined operations that apply to all information resources: HTTP itself defines a small set of operations, the most important being POST, GET, PUT and DELETE. &lt;/p&gt; &#xA;&lt;p&gt; Use it in your favorite language like PHP, Python, C# and others. as long as your language is supported with the HTTP protocol, you will save time and money. you don&#39;t need to know how Venom works, we have the complete API documentation, in a professional way! &lt;/p&gt; &#xA;&lt;h2&gt;Get our official API Venom ! Contact us!&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://web.whatsapp.com/send?phone=5511914380641&amp;amp;text=I%20want%20access%20to%20API%20Venom&#34;&gt;&lt;img title=&#34;whatzapp&#34; height=&#34;100&#34; width=&#34;375&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/WhatsApp_logo.svg/2000px-WhatsApp_logo.svg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Venom group support on Telegram&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://t.me/joinchat/G8wxNXidWBo1ZDYx&#34;&gt;&lt;img title=&#34;Telegram&#34; height=&#34;100&#34; width=&#34;375&#34; src=&#34;https://user-images.githubusercontent.com/66584466/117182238-7d1d8980-adac-11eb-9a70-e32f90c3d4e5.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Meet the Superchats&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;a href=&#34;https://github.com/orkestral/superchats&#34;&gt;&lt;img src=&#34;https://github.com/orkestral/superchats/raw/main/img/superchats.png&#34; height=&#34;60&#34; alt=&#34;SuperChats&#34; aria-label=&#34;https://github.com/orkestral/superchats&#34;&gt;&lt;/a&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;strong&gt;SuperChats&lt;/strong&gt; is a premium library with unique features that control Whatsapp functions with socket. With Superchats you can build service bots, multiservice chats or any system that uses Whatsapp&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Superchats&lt;/strong&gt; is a premium version of &lt;strong&gt;Venom&lt;/strong&gt;, with exclusive features and support for companies and developers worldwide &lt;br&gt; &lt;a href=&#34;https://github.com/orkestral/superchats&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://github.com/orkestral/superchats&#34;&gt;https://github.com/orkestral/superchats&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Buy a license Superchats&lt;/h2&gt; &#xA;&lt;p&gt;The value of the license is $50 monthly dollars, to acquire contact in whatsapp by clicking on the image below !!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://web.whatsapp.com/send?phone=5511914380641&amp;amp;text=I%20want%20to%20buy%201%20license&#34;&gt;&lt;img title=&#34;whatzapp&#34; height=&#34;100&#34; width=&#34;375&#34; src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/f/f7/WhatsApp_logo.svg/2000px-WhatsApp_logo.svg.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üï∑üï∑ Functions Venomüï∑üï∑&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üöª Automatic QR Refresh&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìÅ Send &lt;strong&gt;text, image, video, audio and docs&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üë• Get &lt;strong&gt;contacts, chats, groups, group members, Block List&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìû Send contacts&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Send Buttons&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Send stickers&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Send stickers GIF&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Multiple Sessions&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;‚è© Forward Messages&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üì• Receive message&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üë§ insert user section&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üìç Send location!!&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;üï∏üï∏ &lt;strong&gt;and much more&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;‚úî&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Documentation at &lt;a href=&#34;https://orkestral.github.io/venom/index.html&#34;&gt;https://orkestral.github.io/venom/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm i --save venom-bot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or for &lt;a href=&#34;https://github.com/orkestral/venom/releases/tag/nightly&#34;&gt;Nightly releases&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm i --save https://github.com/orkestral/venom/releases/download/nightly/venom-bot-nightly.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Installing the current repository &#34;you can download the beta version from the current repository!&#34;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm i github:orkestral/venom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started Multidevice and Normal&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Supports ES6&#xA;// import { create, Whatsapp } from &#39;venom-bot&#39;;&#xA;const venom = require(&#39;venom-bot&#39;);&#xA;&#xA;venom&#xA;  .create({&#xA;    session: &#39;session-name&#39;, //name of session&#xA;    multidevice: true // for version not multidevice use false.(default: true)&#xA;  })&#xA;  .then((client) =&amp;gt; start(client))&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.log(erro);&#xA;  });&#xA;&#xA;function start(client) {&#xA;  client.onMessage((message) =&amp;gt; {&#xA;    if (message.body === &#39;Hi&#39; &amp;amp;&amp;amp; message.isGroupMsg === false) {&#xA;      client&#xA;        .sendText(message.from, &#39;Welcome Venom üï∑&#39;)&#xA;        .then((result) =&amp;gt; {&#xA;          console.log(&#39;Result: &#39;, result); //return object success&#xA;        })&#xA;        .catch((erro) =&amp;gt; {&#xA;          console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;        });&#xA;    }&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;After executing &lt;code&gt;create()&lt;/code&gt; function, &lt;strong&gt;venom&lt;/strong&gt; will create an instance of whatsapp web. If you are not logged in, it will print a QR code in the terminal. Scan it with your phone and you are ready to go!&lt;/h5&gt; &#xA;&lt;h5&gt;Venom will remember the session so there is no need to authenticate everytime.&lt;/h5&gt; &#xA;&lt;h5&gt;Multiples sessions can be created at the same time by pasing a session name to &lt;code&gt;create()&lt;/code&gt; function:&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Init sales whatsapp bot&#xA;venom.create(&#39;sales&#39;).then((salesClient) =&amp;gt; {...});&#xA;&#xA;// Init support whatsapp bot&#xA;venom.create(&#39;support&#39;).then((supportClient) =&amp;gt; {...});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Optional create parameters&lt;/h2&gt; &#xA;&lt;p&gt;Venom &lt;code&gt;create()&lt;/code&gt; method third parameter can have the following optional parameters:&lt;/p&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;Linux&lt;/code&gt; server do not forget to pass the args &lt;code&gt;--user-agent&lt;/code&gt; &lt;a href=&#34;https://github.com/orkestral/venom/raw/master/src/config/puppeteer.config.ts&#34;&gt;Original parameters in browserArgs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const venom = require(&#39;venom-bot&#39;);&#xA;&#xA;venom&#xA;  .create(&#xA;    //session&#xA;    &#39;sessionName&#39;, //Pass the name of the client you want to start the bot&#xA;    //catchQR&#xA;    (base64Qrimg, asciiQR, attempts, urlCode) =&amp;gt; {&#xA;      console.log(&#39;Number of attempts to read the qrcode: &#39;, attempts);&#xA;      console.log(&#39;Terminal qrcode: &#39;, asciiQR);&#xA;      console.log(&#39;base64 image string qrcode: &#39;, base64Qrimg);&#xA;      console.log(&#39;urlCode (data-ref): &#39;, urlCode);&#xA;    },&#xA;    // statusFind&#xA;    (statusSession, session) =&amp;gt; {&#xA;      console.log(&#39;Status Session: &#39;, statusSession); //return isLogged || notLogged || browserClose || qrReadSuccess || qrReadFail || autocloseCalled || desconnectedMobile || deleteToken || chatsAvailable || deviceNotConnected || serverWssNotConnected || noOpenBrowser || initBrowser || openBrowser || connectBrowserWs || initWhatsapp || erroPageWhatsapp || successPageWhatsapp || waitForLogin || waitChat || successChat&#xA;      //Create session wss return &#34;serverClose&#34; case server for close&#xA;      console.log(&#39;Session name: &#39;, session);&#xA;    },&#xA;    // options&#xA;    {&#xA;      multidevice: false, // for version not multidevice use false.(default: true)&#xA;      folderNameToken: &#39;tokens&#39;, //folder name when saving tokens&#xA;      mkdirFolderToken: &#39;&#39;, //folder directory tokens, just inside the venom folder, example:  { mkdirFolderToken: &#39;/node_modules&#39;, } //will save the tokens folder in the node_modules directory&#xA;      headless: true, // Headless chrome&#xA;      devtools: false, // Open devtools by default&#xA;      useChrome: true, // If false will use Chromium instance&#xA;      debug: false, // Opens a debug session&#xA;      logQR: true, // Logs QR automatically in terminal&#xA;      browserWS: &#39;&#39;, // If u want to use browserWSEndpoint&#xA;      browserArgs: [&#39;&#39;], // Original parameters  ---Parameters to be added into the chrome browser instance&#xA;      addBrowserArgs: [&#39;&#39;], // Add broserArgs without overwriting the project&#39;s original&#xA;      puppeteerOptions: {}, // Will be passed to puppeteer.launch&#xA;      disableSpins: true, // Will disable Spinnies animation, useful for containers (docker) for a better log&#xA;      disableWelcome: true, // Will disable the welcoming message which appears in the beginning&#xA;      updatesLog: true, // Logs info updates automatically in terminal&#xA;      autoClose: 60000, // Automatically closes the venom-bot only when scanning the QR code (default 60 seconds, if you want to turn it off, assign 0 or false)&#xA;      createPathFileToken: false, // creates a folder when inserting an object in the client&#39;s browser, to work it is necessary to pass the parameters in the function create browserSessionToken&#xA;      chromiumVersion: &#39;818858&#39;, // Version of the browser that will be used. Revision strings can be obtained from omahaproxy.appspot.com.&#xA;      addProxy: [&#39;&#39;], // Add proxy server exemple : [e1.p.webshare.io:01, e1.p.webshare.io:01]&#xA;      userProxy: &#39;&#39;, // Proxy login username&#xA;      userPass: &#39;&#39; // Proxy password&#xA;    },&#xA;    // BrowserSessionToken&#xA;    // To receive the client&#39;s token use the function await clinet.getSessionTokenBrowser()&#xA;    {&#xA;      WABrowserId: &#39;&#34;UnXjH.....&#34;&#39;,&#xA;      WASecretBundle:&#xA;        &#39;{&#34;key&#34;:&#34;+i/nRgWJ....&#34;,&#34;encKey&#34;:&#34;kGdMR5t....&#34;,&#34;macKey&#34;:&#34;+i/nRgW....&#34;}&#39;,&#xA;      WAToken1: &#39;&#34;0i8....&#34;&#39;,&#xA;      WAToken2: &#39;&#34;1@lPpzwC....&#34;&#39;&#xA;    },&#xA;    // BrowserInstance&#xA;    (browser, waPage) =&amp;gt; {&#xA;      console.log(&#39;Browser PID:&#39;, browser.process().pid);&#xA;      waPage.screenshot({ path: &#39;screenshot.png&#39; });&#xA;    }&#xA;  )&#xA;  .then((client) =&amp;gt; {&#xA;    start(client);&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.log(erro);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Callback Status Session&lt;/h2&gt; &#xA;&lt;p&gt;Gets the return if the session is &lt;code&gt;isLogged&lt;/code&gt; or &lt;code&gt;notLogged&lt;/code&gt; or &lt;code&gt;browserClose&lt;/code&gt; or &lt;code&gt;qrReadSuccess&lt;/code&gt; or &lt;code&gt;qrReadFail&lt;/code&gt; or &lt;code&gt;autocloseCalled&lt;/code&gt; or &lt;code&gt;desconnectedMobile&lt;/code&gt; or &lt;code&gt;deleteToken&lt;/code&gt; or &lt;code&gt;chatsAvailable&lt;/code&gt; or &lt;code&gt;deviceNotConnected&lt;/code&gt; or &lt;code&gt;serverWssNotConnected&lt;/code&gt; or &lt;code&gt;noOpenBrowser&lt;/code&gt; or &lt;code&gt;initBrowser&lt;/code&gt; or &lt;code&gt;openBrowser&lt;/code&gt; or &lt;code&gt;connectBrowserWs&lt;/code&gt; or &lt;code&gt;initWhatsapp&lt;/code&gt; or &lt;code&gt;erroPageWhatsapp&lt;/code&gt; or &lt;code&gt;successPageWhatsapp&lt;/code&gt; or &lt;code&gt;waitForLogin&lt;/code&gt; or &lt;code&gt;waitChat&lt;/code&gt; or &lt;code&gt;successChat&lt;/code&gt; or &lt;code&gt;Create session wss return &#34;serverClose&#34; case server for close&lt;/code&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Status&lt;/th&gt; &#xA;   &lt;th&gt;Condition&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;isLogged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When the user is already logged in to the browser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;notLogged&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When the user is not connected to the browser, it is necessary to scan the QR code through the cell phone in the option WhatsApp Web&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;browserClose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the browser is closed this parameter is returned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;qrReadSuccess&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the user is not logged in, the QR code is passed on the terminal a callback is returned. After the correct reading by cell phone this parameter is returned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;qrReadFail&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If the browser stops when the QR code scan is in progress, this parameter is returned&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;autocloseCalled&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The browser was closed using the autoClose command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;desconnectedMobile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client has desconnected in to mobile&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;serverClose&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Client has desconnected in to wss&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;deleteToken&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If you pass true within the function &lt;code&gt;client.getSessionTokenBrowser(true)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;chatsAvailable&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;When Venom is connected to the chat list&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;deviceNotConnected&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chat not available because the phone is disconnected &lt;code&gt;(Trying to connect to the phone)&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;serverWssNotConnected&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The address wss was not found!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;noOpenBrowser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;It was not found in the browser, or some command is missing in args&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;initBrowser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starting the browser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;openBrowser&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The browser has been successfully opened!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;connectBrowserWs&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connection with BrowserWs successfully done!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;initWhatsapp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Starting whatsapp!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;erroPageWhatsapp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Error accessing whatsapp page&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;successPageWhatsapp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Page Whatsapp successfully accessed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;waitForLogin&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Waiting for login verification!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;waitChat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Waiting for the chat to load&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;successChat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Chat successfully loaded!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const venom = require(&#39;venom-bot&#39;);&#xA;venom&#xA;  .create(&#xA;    &#39;sessionName&#39;,&#xA;    undefined,&#xA;    (statusSession, session) =&amp;gt; {&#xA;      console.log(&#39;Status Session: &#39;, statusSession);&#xA;      //return isLogged || notLogged || browserClose || qrReadSuccess || qrReadFail || autocloseCalled || desconnectedMobile || deleteToken || chatsAvailable || deviceNotConnected || serverWssNotConnected || noOpenBrowser || initBrowser || openBrowser || connectBrowserWs || initWhatsapp || erroPageWhatsapp || successPageWhatsapp || waitForLogin || waitChat || successChat&#xA;      //Create session wss return &#34;serverClose&#34; case server for close&#xA;      console.log(&#39;Session name: &#39;, session);&#xA;    },&#xA;    {&#xA;      multidevice: false // for version not multidevice use false.(default: true)&#xA;    }&#xA;  )&#xA;  .then((client) =&amp;gt; {&#xA;    start(client);&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.log(erro);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exporting QR Code&lt;/h2&gt; &#xA;&lt;p&gt;By default QR code will appear on the terminal. If you need to pass the QR somewhere else heres how:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const fs = require(&#39;fs&#39;);&#xA;const venom = require(&#39;venom-bot&#39;);&#xA;&#xA;venom&#xA;  .create(&#xA;    &#39;sessionName&#39;,&#xA;    (base64Qr, asciiQR, attempts, urlCode) =&amp;gt; {&#xA;      console.log(asciiQR); // Optional to log the QR in the terminal&#xA;      var matches = base64Qr.match(/^data:([A-Za-z-+\/]+);base64,(.+)$/),&#xA;        response = {};&#xA;&#xA;      if (matches.length !== 3) {&#xA;        return new Error(&#39;Invalid input string&#39;);&#xA;      }&#xA;      response.type = matches[1];&#xA;      response.data = new Buffer.from(matches[2], &#39;base64&#39;);&#xA;&#xA;      var imageBuffer = response;&#xA;      require(&#39;fs&#39;).writeFile(&#xA;        &#39;out.png&#39;,&#xA;        imageBuffer[&#39;data&#39;],&#xA;        &#39;binary&#39;,&#xA;        function (err) {&#xA;          if (err != null) {&#xA;            console.log(err);&#xA;          }&#xA;        }&#xA;      );&#xA;    },&#xA;    undefined,&#xA;    { logQR: false }&#xA;  )&#xA;  .then((client) =&amp;gt; {&#xA;    start(client);&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.log(erro);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Downloading Files&lt;/h2&gt; &#xA;&lt;p&gt;Puppeteer takes care of the file downloading. The decryption is being done as fast as possible (outruns native methods). Supports big files!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import fs = require(&#39;fs&#39;);&#xA;import mime = require(&#39;mime-types&#39;);&#xA;&#xA;client.onMessage( async (message) =&amp;gt; {&#xA;  if (message.isMedia === true || message.isMMS === true) {&#xA;    const buffer = await client.decryptFile(message);&#xA;    // At this point you can do whatever you want with the buffer&#xA;    // Most likely you want to write it into a file&#xA;    const fileName = `some-file-name.${mime.extension(message.mimetype)}`;&#xA;    await fs.writeFile(fileName, buffer, (err) =&amp;gt; {&#xA;      ...&#xA;    });&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Basic Functions (usage)&lt;/h2&gt; &#xA;&lt;p&gt;Not every available function is listed, for further look, every function available can be found in &lt;a href=&#34;https://raw.githubusercontent.com/orkestral/venom/master/src/api/layers&#34;&gt;here&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/orkestral/venom/master/src/lib/wapi/functions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Chatting&lt;/h3&gt; &#xA;&lt;h5&gt;Here, &lt;code&gt;chatId&lt;/code&gt; could be &lt;code&gt;&amp;lt;phoneNumber&amp;gt;@c.us&lt;/code&gt; or &lt;code&gt;&amp;lt;phoneNumber&amp;gt;-&amp;lt;groupId&amp;gt;@g.us&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;// Send List menu&#xA;//This function does not work for Bussines contacts&#xA;const list = [&#xA;    {&#xA;      title: &#34;Pasta&#34;,&#xA;      rows: [&#xA;        {&#xA;          title: &#34;Ravioli Lasagna&#34;,&#xA;          description: &#34;Made with layers of frozen cheese&#34;,&#xA;        }&#xA;      ]&#xA;    },&#xA;    {&#xA;      title: &#34;Dessert&#34;,&#xA;      rows: [&#xA;        {&#xA;          title: &#34;Baked Ricotta Cake&#34;,&#xA;          description: &#34;Sweets pecan baklava rolls&#34;,&#xA;        },&#xA;        {&#xA;          title: &#34;Lemon Meringue Pie&#34;,&#xA;          description: &#34;Pastry filled with lemonand meringue.&#34;,&#xA;        }&#xA;      ]&#xA;    }&#xA;  ];&#xA;&#xA;await client.sendListMenu(&#39;000000000000@c.us&#39;, &#39;Title&#39;, &#39;subTitle&#39;, &#39;Description&#39;, &#39;menu&#39;, list)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send Messages with Buttons Reply&#xA;const buttons = [&#xA;  {&#xA;    &#34;buttonText&#34;: {&#xA;      &#34;displayText&#34;: &#34;Text of Button 1&#34;&#xA;      }&#xA;    },&#xA;  {&#xA;    &#34;buttonText&#34;: {&#xA;      &#34;displayText&#34;: &#34;Text of Button 2&#34;&#xA;      }&#xA;    }&#xA;  ]&#xA;await client.sendButtons(&#39;000000000000@c.us&#39;, &#39;Title&#39;, buttons, &#39;Description&#39;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;// Send audio file MP3&#xA;await client.sendVoice(&#39;000000000000@c.us&#39;, &#39;./audio.mp3&#39;).then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send audio file base64&#xA;await client.sendVoiceBase64(&#39;000000000000@c.us&#39;, base64MP3)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send contact&#xA;await client&#xA;  .sendContactVcard(&#39;000000000000@c.us&#39;, &#39;111111111111@c.us&#39;, &#39;Name of contact&#39;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send a list of contact cards&#xA;await client&#xA;  .sendContactVcardList(&#39;000000000000@c.us&#39;, [&#xA;    &#39;111111111111@c.us&#39;,&#xA;    &#39;222222222222@c.us&#39;,&#xA;  ])&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send basic text&#xA;await client&#xA;  .sendText(&#39;000000000000@c.us&#39;, &#39;üëã Hello from venom!&#39;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send location&#xA;await client&#xA;  .sendLocation(&#39;000000000000@c.us&#39;, &#39;-13.6561589&#39;, &#39;-69.7309264&#39;, &#39;Brasil&#39;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Automatically sends a link with the auto generated link preview. You can also add a custom message to be added.&#xA;await client&#xA;  .sendLinkPreview(&#xA;    &#39;000000000000@c.us&#39;,&#xA;    &#39;https://www.youtube.com/watch?v=V1bFr2SWP1I&#39;,&#xA;    &#39;Kamakawiwo ole&#39;&#xA;  )&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send image (you can also upload an image using a valid HTTP protocol)&#xA;await client&#xA;  .sendImage(&#xA;    &#39;000000000000@c.us&#39;,&#xA;    &#39;path/to/img.jpg&#39;,&#xA;    &#39;image-name&#39;,&#xA;    &#39;Caption text&#39;&#xA;  )&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;&#xA;// Send image file base64&#xA;await client.sendImageFromBase64(&#39;000000000000@c.us&#39;, base64Image, &#34;name file&#34;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Send file (venom will take care of mime types, just need the path)&#xA;// you can also upload an image using a valid HTTP protocol&#xA;await client&#xA;  .sendFile(&#xA;    &#39;000000000000@c.us&#39;,&#xA;    &#39;path/to/file.pdf&#39;,&#xA;    &#39;file_name&#39;,&#xA;    &#39;See my file in pdf&#39;&#xA;  )&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Sends file&#xA;// base64 parameter should have mime type already defined&#xA;await client&#xA;  .sendFileFromBase64(&#xA;    &#39;000000000000@c.us&#39;,&#xA;    base64PDF,&#xA;    &#39;file_name.pdf&#39;,&#xA;    &#39;See my file in pdf&#39;&#xA;  )&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Generates sticker from the provided animated gif image and sends it (Send image as animated sticker)&#xA;// image path imageBase64 A valid gif and webp image is required. You can also send via http/https (http://www.website.com/img.gif)&#xA;await client&#xA;  .sendImageAsStickerGif(&#39;000000000000@c.us&#39;, &#39;./image.gif&#39;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Generates sticker from given image and sends it (Send Image As Sticker)&#xA;// image path imageBase64 A valid png, jpg and webp image is required. You can also send via http/https (http://www.website.com/img.jpg)&#xA;await client&#xA;  .sendImageAsSticker(&#39;000000000000@c.us&#39;, &#39;./image.jpg&#39;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Forwards messages&#xA;await client.forwardMessages(&#xA;  &#39;000000000000@c.us&#39;,&#xA;  [&#39;false_000000000000@c.us_B70847EE89E22D20FB86ECA0C1B11609&#39;,&#39;false_000000000000@c.us_B70847EE89E22D20FB86ECA0C1B11777&#39;]&#xA;).then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;})&#xA;.catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;});&#xA;&#xA;// Send @tagged message&#xA;await client.sendMentioned(&#xA;  &#39;000000000000@c.us&#39;,&#xA;  &#39;Hello @5218113130740 and @5218243160777!&#39;,&#xA;  [&#39;5218113130740&#39;, &#39;5218243160777&#39;]&#xA;);&#xA;&#xA;// Reply to a message&#xA;await client.reply(&#xA;  &#39;000000000000@c.us&#39;,&#xA;  &#39;This is a reply!&#39;,&#xA;  &#39;true_551937311025@c.us_7C22WHCB6DKYHJKQIEN9&#39;&#xA;).then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;}).catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;});&#xA;&#xA;// Send message with options&#xA;await client.&#xA;        .sendMessageOptions(&#xA;          &#39;000000000000@c.us&#39;,&#xA;          &#39;This is a reply!&#39;,&#xA;           {&#xA;              quotedMessageId: reply,&#xA;            }&#xA;        )&#xA;        .then((retorno) =&amp;gt; {&#xA;          resp = retorno;&#xA;        })&#xA;        .catch((e) =&amp;gt; {&#xA;          console.log(e);&#xA;        });&#xA;&#xA;// Send gif&#xA;await client.sendVideoAsGif(&#xA;  &#39;000000000000@c.us&#39;,&#xA;  &#39;path/to/video.mp4&#39;,&#xA;  &#39;video.gif&#39;,&#xA;  &#39;Gif image file&#39;&#xA;);&#xA;&#xA;//checks and returns whether a message and a reply&#xA;// exemple:&#xA;// await client.onMessage(async (message) =&amp;gt; {&#xA;//     console.log(await client.returnReply(message)); // replicated message&#xA;//     console.log(message.body ); //customer message&#xA;//   })&#xA;checkReply = await client.returnReply(messagem);&#xA;&#xA;// Send seen ‚úîÔ∏è‚úîÔ∏è&#xA;await client.sendSeen(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Start typing...&#xA;await client.startTyping(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Stop typing&#xA;await client.stopTyping(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Set chat state (0: Typing, 1: Recording, 2: Paused)&#xA;await client.setChatState(&#39;000000000000@c.us&#39;, 0 | 1 | 2);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Retrieving Data&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Retrieve all chats&#xA;const chats = await client.getAllChats();&#xA;&#xA;//Retrieves all chats new messages&#xA;const chatsAllNew = getAllChatsNewMsg();&#xA;&#xA;//Retrieves all chats Contacts&#xA;const contacts = await client.getAllChatsContacts();&#xA;&#xA;//Retrieve all contacts new messages&#xA;const contactNewMsg = await client.getChatContactNewMsg();&#xA;&#xA;// Retrieve all groups&#xA;// you can pass the group id optional use, exemple: client.getAllChatsGroups(&#39;00000000-000000@g.us&#39;)&#xA;const chats = await client.getAllChatsGroups();&#xA;&#xA;//Retrieve all groups new messages&#xA;const groupNewMsg = await client.getChatGroupNewMsg();&#xA;&#xA;//Retrieves all chats Transmission list&#xA;const transmission = await client.getAllChatsTransmission();&#xA;&#xA;// Retrieve contacts&#xA;const contacts = await client.getAllContacts();&#xA;&#xA;// Returns a list of mute and non-mute users&#xA;// &#34;all&#34; List all mutes&#xA;// &#34;toMute&#34; List all silent chats&#xA;// &#34;noMute&#34; List all chats without silence&#xA;const listMute = await client.getListMute(&#39;all&#39;);&#xA;&#xA;// Retrieve the browser session token&#xA;// if you want to delete the token file -&amp;gt; const browserSessionToken = await client.getSessionTokenBrowser(true);&#xA;const browserSessionToken = await client.getSessionTokenBrowser();&#xA;&#xA;// Calls your list of blocked contacts (returns an array)&#xA;const getBlockList = await client.getBlockList();&#xA;&#xA;// Retrieve messages in chat&#xA;//chatID chat id&#xA;//includeMe will be by default true, if you do not want to pass false&#xA;//includeNotifications will be by default true, if you do not want to pass false&#xA;//const Messages = await client.getAllMessagesInChat(chatID, includeMe, includeNotifications)&#xA;const Messages = await client.getAllMessagesInChat(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Retrieve more chat message&#xA;const moreMessages = await client.loadEarlierMessages(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Retrieve all messages in chat&#xA;const allMessages = await client.loadAndGetAllMessagesInChat(&#xA;  &#39;000000000000@c.us&#39;&#xA;);&#xA;&#xA;// Retrieve contact status&#xA;const status = await client.getStatus(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Retrieve user profile&#xA;const user = await client.getNumberProfile(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Retrieve all unread message&#xA;const messages = await client.getAllUnreadMessages();&#xA;&#xA;// Retrieve profile fic (as url)&#xA;const url = await client.getProfilePicFromServer(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Retrieve chat/conversation&#xA;const chat = await client.getChat(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Check if the number exists&#xA;const chat = await client.checkNumberStatus(&#39;000000000000@c.us&#39;)&#xA;.then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;}).catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Group Functions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// groupId or chatId: leaveGroup 52123123-323235@g.us&#xA;&#xA;//change group description&#xA;await client&#xA;  .setGroupDescription(&#39;00000000-000000@g.us&#39;, &#39;group description&#39;)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Leave group&#xA;await client.leaveGroup(&#39;00000000-000000@g.us&#39;);&#xA;&#xA;// Get group members&#xA;await client.getGroupMembers(&#39;00000000-000000@g.us&#39;);&#xA;&#xA;// Get group members ids&#xA;await client.getGroupMembersIds(&#39;00000000-000000@g.us&#39;);&#xA;&#xA;// Generate group invite url link&#xA;await client.getGroupInviteLink(&#39;00000000-000000@g.us&#39;);&#xA;&#xA;// Create group (title, participants to add)&#xA;await client.createGroup(&#39;Group name&#39;, [&#xA;  &#39;111111111111@c.us&#39;,&#xA;  &#39;222222222222@c.us&#39;&#xA;]);&#xA;&#xA;// Remove participant&#xA;await client.removeParticipant(&#39;00000000-000000@g.us&#39;, &#39;111111111111@c.us&#39;);&#xA;&#xA;// Add participant&#xA;await client.addParticipant(&#39;00000000-000000@g.us&#39;, &#39;111111111111@c.us&#39;);&#xA;&#xA;// Promote participant (Give admin privileges)&#xA;await client.promoteParticipant(&#39;00000000-000000@g.us&#39;, &#39;111111111111@c.us&#39;);&#xA;&#xA;// Demote particiapnt (Revoke admin privileges)&#xA;await client.demoteParticipant(&#39;00000000-000000@g.us&#39;, &#39;111111111111@c.us&#39;);&#xA;&#xA;// Get group admins&#xA;await client.getGroupAdmins(&#39;00000000-000000@g.us&#39;);&#xA;&#xA;// Return the group status, jid, description from it&#39;s invite link&#xA;await client.getGroupInfoFromInviteLink(InviteCode);&#xA;&#xA;// Join a group using the group invite code&#xA;await client.joinGroup(InviteCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profile Functions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set client status&#xA;await client.setProfileStatus(&#39;On vacations! ‚úàÔ∏è&#39;);&#xA;&#xA;// Set client profile name&#xA;await client.setProfileName(&#39;Venom bot&#39;);&#xA;&#xA;// Set client profile photo&#xA;await client.setProfilePic(&#39;path/to/image.jpg&#39;);&#xA;&#xA;// Get device info&#xA;await client.getHostDevice();&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Device Functions&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;// Disconnect from service&#xA;await client.logout();&#xA;&#xA;// Delete the Service Worker&#xA;await client.killServiceWorker();&#xA;&#xA;// Load the service again&#xA;await client.restartService();&#xA;&#xA;// Get connection state&#xA;await client.getConnectionState();&#xA;&#xA;// Get battery level&#xA;await client.getBatteryLevel();&#xA;&#xA;// Is connected&#xA;await client.isConnected();&#xA;&#xA;// Get whatsapp web version&#xA;await client.getWAVersion();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#xA;//Listens to all new messages&#xA;//To receiver or recipient&#xA;client.onAnyMessage(message =&amp;gt; {&#xA;  ...&#xA;};&#xA;&#xA;// Listen to messages&#xA;client.onMessage(message =&amp;gt; {&#xA;  ...&#xA;})&#xA;&#xA;// Listen to state changes&#xA;client.onStateChange(state =&amp;gt; {&#xA;  ...&#xA;});&#xA;&#xA;// Listen to ack&#39;s&#xA;// See the status of the message when sent.&#xA;// When receiving the confirmation object, &#34;ack&#34; may return a number, look {@link AckType} for details:&#xA;// -7 = MD_DOWNGRADE,&#xA;// -6 = INACTIVE,&#xA;// -5 = CONTENT_UNUPLOADABLE,&#xA;// -4 = CONTENT_TOO_BIG,&#xA;// -3 = CONTENT_GONE,&#xA;// -2 = EXPIRED,&#xA;// -1 = FAILED,&#xA;//  0 = CLOCK,&#xA;//  1 = SENT,&#xA;//  2 = RECEIVED,&#xA;//  3 = READ,&#xA;//  4 = PLAYED =&#xA;&#xA;client.onAck(ack =&amp;gt; {&#xA;  ...&#xA;});&#xA;&#xA;// Listen to live location&#xA;// chatId: &#39;phone@c.us&#39;&#xA;client.onLiveLocation(&#34;000000000000@c.us&#34;, (liveLocation) =&amp;gt; {&#xA;  ...&#xA;});&#xA;&#xA;// chatId looks like this: &#39;5518156745634-1516512045@g.us&#39;&#xA;// Event interface is in here: https://github.com/s2click/venom/blob/master/src/api/model/participant-event.ts&#xA;client.onParticipantsChanged(&#34;000000000000@c.us&#34;, (event) =&amp;gt; {&#xA;  ...&#xA;});&#xA;&#xA;// Listen when client has been added to a group&#xA;client.onAddedToGroup(chatEvent =&amp;gt; {&#xA;  ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//Check if there is chat&#xA;await client&#xA;  .checkChat(chatId)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Pin chat and Unpin chat messages with true or false&#xA;// Pin chat, non-existent (optional)&#xA;await client&#xA;  .pinChat(chatId, true, false)&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;///mute a contact&#xA;await client&#xA;  .sendMute(&#xA;    &#39;000000000000@c.us&#39;, //contact mute&#xA;    30, //duration of silence, example: 30 minutes&#xA;    &#39;minutes&#39; ///kind of silence &#34;hours&#34; &#34;minutes&#34; &#34;year&#34;&#xA;  )&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;///unmute contact&#xA;await client&#xA;  .sendMute(&#xA;    &#39;000000000000@c.us&#39; //contact unmute&#xA;  )&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Change the theme&#xA;// string types &#34;dark&#34; or &#34;light&#34;&#xA;await client.setTheme(&#39;dark&#39;);&#xA;&#xA;// Receive the current theme&#xA;// returns string light or dark&#xA;await client.getTheme();&#xA;&#xA;// Delete chat&#xA;await client.deleteChat(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Clear chat messages&#xA;await client.clearChatMessages(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Archive and unarchive chat messages with true or false&#xA;await client.archiveChat(chatId, true);&#xA;&#xA;// Delete message (last parameter: delete only locally)&#xA;await client&#xA;  .deleteMessage(&#39;000000000000@c.us&#39;, [&#xA;    &#39;false_000000000000@c.us_B70847EE89E22D20FB86ECA0C1B11609&#39;,&#xA;    &#39;false_000000000000@c.us_B70847EE89E22D20FB86ECA0C1B11777&#39;&#xA;  ])&#xA;  .then((result) =&amp;gt; {&#xA;    console.log(&#39;Result: &#39;, result); //return object success&#xA;  })&#xA;  .catch((erro) =&amp;gt; {&#xA;    console.error(&#39;Error when sending: &#39;, erro); //return object error&#xA;  });&#xA;&#xA;// Mark chat as not seen (returns true if it works)&#xA;await client.markUnseenMessage(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Blocks a user (returns true if it works)&#xA;await client.blockContact(&#39;000000000000@c.us&#39;);&#xA;&#xA;// Unlocks contacts (returns true if it works)&#xA;await client.unblockContact(&#39;000000000000@c.us&#39;);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;p&gt;There are some tricks for a better usage of venom.&lt;/p&gt; &#xA;&lt;h4&gt;Keep session alive:&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// function to detect conflits and change status&#xA;// Force it to keep the current session&#xA;// Possible state values:&#xA;// CONFLICT&#xA;// CONNECTED&#xA;// DEPRECATED_VERSION&#xA;// OPENING&#xA;// PAIRING&#xA;// PROXYBLOCK&#xA;// SMB_TOS_BLOCK&#xA;// TIMEOUT&#xA;// TOS_BLOCK&#xA;// UNLAUNCHED&#xA;// UNPAIRED&#xA;// UNPAIRED_IDLE&#xA;client.onStateChange((state) =&amp;gt; {&#xA;  console.log(&#39;State changed: &#39;, state);&#xA;  // force whatsapp take over&#xA;  if (&#39;CONFLICT&#39;.includes(state)) client.useHere();&#xA;  // detect disconnect on whatsapp&#xA;  if (&#39;UNPAIRED&#39;.includes(state)) console.log(&#39;logout&#39;);&#xA;});&#xA;&#xA;// DISCONNECTED&#xA;// SYNCING&#xA;// RESUMING&#xA;// CONNECTED&#xA;let time = 0;&#xA;client.onStreamChange((state) =&amp;gt; {&#xA;  console.log(&#39;State Connection Stream: &#39; + state);&#xA;  clearTimeout(time);&#xA;  if (state === &#39;DISCONNECTED&#39; || state === &#39;SYNCING&#39;) {&#xA;    time = setTimeout(() =&amp;gt; {&#xA;      client.close();&#xA;    }, 80000);&#xA;  }&#xA;});&#xA;&#xA;// function to detect incoming call&#xA;client.onIncomingCall(async (call) =&amp;gt; {&#xA;  console.log(call);&#xA;  client.sendText(call.peerJid, &#34;Sorry, I still can&#39;t answer calls&#34;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Closing (saving) sessions&lt;/h4&gt; &#xA;&lt;p&gt;Close the session properly to ensure the session is saved for the next time you log in (So it won&#39;t ask for QR scan again). So instead of CTRL+C,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Catch ctrl+C&#xA;process.on(&#39;SIGINT&#39;, function() {&#xA;  client.close();&#xA;});&#xA;&#xA;// Try-catch close&#xA;try {&#xA;   ...&#xA;} catch (error) {&#xA;   client.close();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Auto closing unsynced sessions&lt;/h3&gt; &#xA;&lt;p&gt;The auto close is enabled by default and the timeout is set to 60 sec. Receives the time in milliseconds to countdown until paired.&lt;/p&gt; &#xA;&lt;p&gt;Use &#34;autoClose: 0 | false&#34; to disable auto closing.&lt;/p&gt; &#xA;&lt;h3&gt;Debugging&lt;/h3&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Building venom is really simple altough it contains 3 main projects inside&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Wapi project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm run build:wapi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Middleware&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm run build:middleware&#xA;&amp;gt; npm run build:jsQR&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Venom&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm run build:venom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To build the entire project just run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&amp;gt; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;p&gt;Maintainers are needed, I cannot keep with all the updates by myself. If you are interested please open a Pull Request.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ine-labs/AWSGoat</title>
    <updated>2022-08-12T01:31:22Z</updated>
    <id>tag:github.com,2022-08-12:/ine-labs/AWSGoat</id>
    <link href="https://github.com/ine-labs/AWSGoat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AWSGoat : A Damn Vulnerable AWS Infrastructure&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;AWSGoat : A Damn Vulnerable AWS Infrastructure&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526664-cb123612-7f9a-41fe-bab2-eb6b3b2518d7.png&#34; alt=&#34;1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Compromising an organization&#39;s cloud infrastructure is like sitting on a gold mine for attackers. And sometimes, a simple misconfiguration or a vulnerability in web applications, is all an attacker needs to compromise the entire infrastructure. Since the cloud is relatively new, many developers are not fully aware of the threatscape and they end up deploying a vulnerable cloud infrastructure.&lt;/p&gt; &#xA;&lt;p&gt;AWSGoat is a vulnerable by design infrastructure on AWS featuring the latest released OWASP Top 10 web application security risks (2021) and other misconfiguration based on services such as IAM, S3, API Gateway, Lambda, EC2, and ECS. AWSGoat mimics real-world infrastructure but with added vulnerabilities. It features multiple escalation paths and is focused on a black-box approach.&lt;/p&gt; &#xA;&lt;p&gt;The project will be divided into modules and each module will be a separate web application, powered by varied tech stacks and development practices. It will leverage IaC through terraform and GitHub actions to ease the deployment process.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Presented at&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://owasp.org/www-chapter-singapore/&#34;&gt;OWASP Singapore Chapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.blackhat.com/us-22/arsenal/schedule/index.html#awsgoat--a-damn-vulnerable-aws-infrastructure-27999&#34;&gt;BlackHat USA 2022&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.defcon.org/node/242059&#34;&gt;DC 30: Demo Labs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Developed with &lt;span&gt;‚ù§Ô∏è&lt;/span&gt; by &lt;a href=&#34;https://ine.com/&#34;&gt;INE&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h2&gt;Built With&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;AWS&lt;/li&gt; &#xA; &lt;li&gt;React&lt;/li&gt; &#xA; &lt;li&gt;Python 3&lt;/li&gt; &#xA; &lt;li&gt;Terraform&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;The project is scheduled to encompass all significant vulnerabilities including the OWASP TOP 10 2021, and popular cloud misconfigurations. Currently, the project contains the following vulnerabilities/misconfigurations.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;XSS&lt;/li&gt; &#xA; &lt;li&gt;SQL Injection&lt;/li&gt; &#xA; &lt;li&gt;Insecure Direct Object reference&lt;/li&gt; &#xA; &lt;li&gt;Server Side Request Forgery on Lambda Environment&lt;/li&gt; &#xA; &lt;li&gt;Sensitive Data Exposure and Password Reset&lt;/li&gt; &#xA; &lt;li&gt;S3 Misconfigurations&lt;/li&gt; &#xA; &lt;li&gt;IAM Privilege Escalations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An AWS Account&lt;/li&gt; &#xA; &lt;li&gt;AWS Access Key with Administrative Privileges&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;To ease the deployment process the user just needs to fork this repo, add their AWS Account Credentials to GitHub secrets, and run the Terraform Apply Action. This workflow will deploy the whole infrastructure and output the hosted application&#39;s URL.&lt;/p&gt; &#xA;&lt;p&gt;Here are the steps to follow:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Fork the repo&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Set the GitHub Action Secrets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;AWS_ACCESS_KEY&#xA;AWS_ACCOUNT_ID&#xA;AWS_SECRET_ACCESS_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526772-16e84787-3ac9-4fd2-b57c-0c794dad5e4f.png&#34; alt=&#34;2&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; From the repository actions tab, run the &lt;code&gt;Terraform Apply&lt;/code&gt; Workflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526776-f03918c2-d944-4480-a098-f9483156b570.png&#34; alt=&#34;3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 4.&lt;/strong&gt; Find the application URL in the Terraform output section.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526780-b01d5c3f-9968-45e9-b698-a9b1905b32b9.png&#34; alt=&#34;4&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Manual Installation&lt;/h3&gt; &#xA;&lt;p&gt;Manually installing AWSGoat would require you to follow these steps:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 1.&lt;/strong&gt; Clone the repo&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/ine-labs/AWSGoat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 2.&lt;/strong&gt; Configure AWS User Account Credentials&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;aws configure&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Step 3.&lt;/strong&gt; Use terraform to deploy AWSGoat&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;terraform init&#xA;terraform apply --auto-approve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Modules&lt;/h1&gt; &#xA;&lt;h2&gt;Module 1&lt;/h2&gt; &#xA;&lt;p&gt;The first module features a serverless blog application utilizing AWS Lambda, S3, API Gateway, and DynamoDB. It consists of various web application vulnerabilities and facilitates exploitation of misconfigured AWS resources.&lt;/p&gt; &#xA;&lt;p&gt;Overview of escalation paths for module-1&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526761-7f473e3d-f71c-429d-bf49-16958c5cb7a6.png&#34; alt=&#34;10&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Recommended Browser:&lt;/strong&gt; Google Chrome&lt;/p&gt; &#xA;&lt;h2&gt;Module 2&lt;/h2&gt; &#xA;&lt;p&gt;The second module is under development and would feature an internal HR Payroll application, utilizing the AWS ECS infrastructure. The module will be released after Black Hat USA 2022.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;Jeswin Mathai, Chief Architect, Lab Platform, INE &lt;a href=&#34;mailto:jmathai@ine.com&#34;&gt;jmathai@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nishant Sharma, Director, Lab Platform, INE &lt;a href=&#34;mailto:nsharma@ine.com&#34;&gt;nsharma@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Sanjeev Mahunta, Software Engineer (Cloud), INE &lt;a href=&#34;mailto:smahunta@ine.com&#34;&gt;smahunta@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shantanu Kale, Cloud Developer, INE &lt;a href=&#34;mailto:skale@ine.com&#34;&gt;skale@ine.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Solutions&lt;/h1&gt; &#xA;&lt;p&gt;The manuals are available in the &lt;a href=&#34;https://raw.githubusercontent.com/ine-labs/AWSGoat/master/solutions/&#34;&gt;solutions&lt;/a&gt; directory&lt;/p&gt; &#xA;&lt;p&gt;Module 1 Exploitation Videos: &lt;a href=&#34;https://youtube.com/playlist?list=PLcIpBb4raSZEMosUmY8KpxPWtjKRMSmNx&#34;&gt;https://youtube.com/playlist?list=PLcIpBb4raSZEMosUmY8KpxPWtjKRMSmNx&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;For more details refer to the &#34;AWSGoat.pdf&#34; PDF file. This file contains the slide deck used for presentations.&lt;/p&gt; &#xA;&lt;h1&gt;Screenshots&lt;/h1&gt; &#xA;&lt;p&gt;Blog Application HomePage&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526784-2a1d7023-5c6f-4cfb-97b7-74b572b12829.png&#34; alt=&#34;5&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application Login Portal&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526792-2dad1a3b-f871-4128-a82b-9d1ba3b334f5.png&#34; alt=&#34;6&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application Register Page&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526796-fa4fa422-ffb5-4ff4-a2eb-1468e9c81fd6.png&#34; alt=&#34;7&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application Logged in Dashboard&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526801-6eb85d63-b7df-4fac-98f6-8afb834d2f49.png&#34; alt=&#34;8&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Blog Application User Profile&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/65826354/179526804-78f87773-965d-4eee-a5bf-fb1c1d448234.png&#34; alt=&#34;9&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guidelines&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contributions in the form of code improvements, module updates, feature improvements, and any general suggestions are welcome.&lt;/li&gt; &#xA; &lt;li&gt;Improvements to the functionalities of the current modules are also welcome.&lt;/li&gt; &#xA; &lt;li&gt;The source code for each module can be found in &lt;code&gt;modules/module-&amp;lt;Number&amp;gt;/src&lt;/code&gt; this can be used to modify the existing application code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License v2 as published by the Free Software Foundation.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Sister Projects&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ine-labs/AzureGoat&#34;&gt;AzureGoat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;GCPSheep (Coming Soon)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/patoolkit&#34;&gt;PA Toolkit (Pentester Academy Wireshark Toolkit)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/reconpal&#34;&gt;ReconPal: Leveraging NLP for Infosec&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/voipshark&#34;&gt;VoIPShark: Open Source VoIP Analysis Platform&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pentesteracademy/blemystique&#34;&gt;BLEMystique&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>