<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-13T01:33:48Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>jcubic/wayne</title>
    <updated>2022-07-13T01:33:48Z</updated>
    <id>tag:github.com,2022-07-13:/jcubic/wayne</id>
    <link href="https://github.com/jcubic/wayne" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Service Worker Routing library for in browser HTTP requests&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/jcubic/wayne/raw/master/assets/wayne-logo.svg?raw=true&#34; alt=&#34;Logo of Wayne library - it represent constrution worker helmet and text with the name of the library&#34;&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@jcubic/wayne&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/npm-0.1.0-blue.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jcubic/wayne/&#34;&gt;Service Worker Routing library for in browser HTTP requests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s like express.js inside Service Worker.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Installation from npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @jcubic/wayne&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add @jcubic/wayne&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Standard way of installing the service worker as ES Module&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (&#39;serviceWorker&#39; in navigator) {&#xA;    const scope = location.pathname.replace(/\/[^\/]+$/, &#39;/&#39;);&#xA;    navigator.serviceWorker.register(&#39;sw.js&#39;, {scope, type: &#39;module&#39;})&#xA;             .then(function(reg) {&#xA;                 reg.addEventListener(&#39;updatefound&#39;, function() {&#xA;                     const installingWorker = reg.installing;&#xA;                     console.log(&#39;A new service worker is being installed:&#39;,&#xA;                                 installingWorker);&#xA;                 });&#xA;                 // registration worked&#xA;                 console.log(&#39;Registration succeeded. Scope is &#39; + reg.scope);&#xA;             }).catch(function(error) {&#xA;                 // registration failed&#xA;                 console.log(&#39;Registration failed with &#39; + error);&#xA;             });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside same file you can send &lt;a href=&#34;https://en.wikipedia.org/wiki/Ajax_(programming)&#34;&gt;AJAX&lt;/a&gt; requests with standard &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&#34;&gt;fetch API&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function get(url) {&#xA;    fetch(url)&#xA;      .then(res =&amp;gt; res.text())&#xA;      .then(text =&amp;gt; output.innerHTML = text);&#xA;}&#xA;&#xA;input.addEventListener(&#39;click&#39;, () =&amp;gt; {&#xA;    get(`./user/${user_id.value}`);&#xA;});&#xA;&#xA;error.addEventListener(&#39;click&#39;, () =&amp;gt; {&#xA;    get(`./error`);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Service worker - &lt;strong&gt;sw.js&lt;/strong&gt; file - the file import library from CDN.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Wayne } from &#39;https://cdn.jsdelivr.net/npm/@jcubic/wayne&#39;;&#xA;&#xA;const app = new Wayne();&#xA;&#xA;const users = {&#xA;  1: &#39;Jakub T. Jankiewicz&#39;,&#xA;  2: &#39;John Doe&#39;,&#xA;  3: &#39;Jane Doe&#39;&#xA;};&#xA;&#xA;app.get(&#39;/user/{id}&#39;, function(req, res) {&#xA;  const user = users[req.params.id];&#xA;  if (user) {&#xA;    res.json({result: user});&#xA;  } else {&#xA;    res.json({error: &#39;User Not Found&#39;});&#xA;  }&#xA;});&#xA;&#xA;app.get(&#39;/error&#39;, function(req, res) {&#xA;  nonExisting();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://jcubic.github.io/wayne&#34;&gt;simple demo&lt;/a&gt; the service worker is defined as code above.&lt;/p&gt; &#xA;&lt;h2&gt;API reference&lt;/h2&gt; &#xA;&lt;p&gt;Wayne object has those methods that corenspond to HTTP methods&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;post&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;put&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;patch&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;each method accepts URL with markers inside curly brackets those markers will be available from &lt;strong&gt;Request.params&lt;/strong&gt; object. Request object is browser native object of a given request see &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Request&#34;&gt;MDN for details&lt;/a&gt;. The only change to the native API is that the object have proeprty &lt;strong&gt;params&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here are few most important Request properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - Headers object to get key/value pairs use &lt;code&gt;Object.fromEntires(req.headers.entries())&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;method&lt;/code&gt; - request method as string.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; - string with full URL.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;referrer&lt;/code&gt; - HTTP referer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arrayBuffer()&lt;/code&gt; - Returns a promise that resolves with an &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/ArrayBuffer&#34;&gt;ArrayBuffer&lt;/a&gt; representation of the request body.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;blob()&lt;/code&gt; - Returns a promise that resolves with a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Blob&#34;&gt;Blob&lt;/a&gt; representation of the request body.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;formData()&lt;/code&gt; - Returns a promise that resolves with a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/FormData&#34;&gt;FormData&lt;/a&gt; representation of the request body.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json()&lt;/code&gt; - Returns a promise that resolves with the result of parsing the request body as &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Request/json&#34;&gt;JSON&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text()&lt;/code&gt; - Returns a promise that resolves with a text representation of the request body.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Response&lt;/strong&gt; object is instance of HTTPResponse that have methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;html()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;json()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text()&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;send()&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;each of those methods accepts string as first argument. Second argument are options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;headers&lt;/code&gt; - any headers as key value pairs or you can pass &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Headers&#34;&gt;Headers object&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;statusText&lt;/code&gt; - The status message associated with the status code, e.g., OK.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;status&lt;/code&gt; - The status code for the response, e.g., 200.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; - Content-Type of the response (MIME).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Story&lt;/h2&gt; &#xA;&lt;p&gt;The idea for using Service worker to serve pure in browser HTTP request has long history. I&#39;ve first described the usage of this techique in this article from 2018: &lt;a href=&#34;https://jcubic.wordpress.com/2018/05/23/how-to-create-web-server-from-browser/&#34;&gt;How to create Web Server in Browser&lt;/a&gt;. In June 2022 I&#39;ve came up with cool new way of using this technique and and while creating PoC for the article I&#39;m going to write (will update this story when ready) I&#39;ve realized that I can extract all the logic of creating those fake HTTP requests into a library. And this is how Wayne was born.&lt;/p&gt; &#xA;&lt;p&gt;Idea of the name of the library came from movie Wayne&#39;s World 2 where Wayne is dressed up as Construction Worker&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/89W-lCTFT2o&#34;&gt;&lt;img src=&#34;https://github.com/jcubic/wayne/raw/master/assets/wayne&#39;s-world-screen-capture.png?raw=true&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I hightly recommend both movies if you haven&#39;t seen them already.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution&lt;/h2&gt; &#xA;&lt;p&gt;If you have any ideas for an improvement don&#39;t hesitate to create an issue. Code contributions are also welcome.&lt;/p&gt; &#xA;&lt;h2&gt;Aknowledge&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Part of the content of this README was based on text from &lt;a href=&#34;https://developer.mozilla.org/&#34;&gt;MDN&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Logo use illustration from &lt;a href=&#34;https://openclipart.org/detail/320906/hard-hat&#34;&gt;OpenClipart&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Released with &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt; license&lt;br&gt; Copyright (c) 2022 &lt;a href=&#34;https://jcubic.pl/me&#34;&gt;Jakub T. Jankiewicz&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>pucherot/Pi.Alert</title>
    <updated>2022-07-13T01:33:48Z</updated>
    <id>tag:github.com,2022-07-13:/pucherot/Pi.Alert</id>
    <link href="https://github.com/pucherot/Pi.Alert" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WIFI / LAN intruder detector. Check the devices connected and alert you with unknown devices. It also warns of the disconnection of &#34;always connected&#34; devices&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pi.Alert&lt;/h1&gt; &#xA;&lt;!-- --------------------------------------------------------------------- ---&gt; &#xA;&lt;p&gt;WIFI / LAN intruder detector.&lt;/p&gt; &#xA;&lt;p&gt;Scan the devices connected to your WIFI / LAN and alert you the connection of unknown devices. It also warns the disconnection of &#34;always connected&#34; devices.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/img/1_devices.jpg&#34; alt=&#34;Main screen&#34; title=&#34;Main screen&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(Apologies for my English and my limited knowledge of Python, php and JavaScript)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;The system continuously scans the network for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;New devices&lt;/li&gt; &#xA; &lt;li&gt;New connections (re-connections)&lt;/li&gt; &#xA; &lt;li&gt;Disconnections&lt;/li&gt; &#xA; &lt;li&gt;&#34;Always Connected&#34; devices down&lt;/li&gt; &#xA; &lt;li&gt;Devices IP changes&lt;/li&gt; &#xA; &lt;li&gt;Internet IP address changes&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Scan Methods&lt;/h2&gt; &#xA;&lt;p&gt;Up to three scanning methods are used:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Method 1: arp-scan&lt;/strong&gt;. The arp-scan system utility is used to search for devices on the network using arp frames.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Method 2: Pi-hole&lt;/strong&gt;. This method is optional and complementary to method 1. If the Pi-hole DNS server is active, Pi.Alert examines its activity looking for active devices using DNS that have not been detected by method 1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Method 3. dnsmasq&lt;/strong&gt;. This method is optional and complementary to the previous methods. If the DHCP server dnsmasq is active, Pi.Alert examines the DHCP leases (addresses assigned) to find active devices that were not discovered by the other methods.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;p&gt;The system consists of two parts:&lt;/p&gt; &#xA;&lt;h3&gt;Back&lt;/h3&gt; &#xA;&lt;p&gt;In charge of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Scan the network searching connected devices using the scanning methods described&lt;/li&gt; &#xA; &lt;li&gt;Store the information in the DB&lt;/li&gt; &#xA; &lt;li&gt;Report the changes detected by e-mail&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/img/4_report_1.jpg&#34; alt=&#34;Report 1&#34; title=&#34;Report sample 1&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/img/4_report_2.jpg&#34; alt=&#34;Report 2&#34; title=&#34;Report sample 2&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Front&lt;/h3&gt; &#xA;&lt;p&gt;A web frontal that allows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Manage the devices inventory and the characteristics&lt;/li&gt; &#xA; &lt;li&gt;Display in a visual way all the information collected by the back &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Sessions&lt;/li&gt; &#xA;   &lt;li&gt;Connected devices&lt;/li&gt; &#xA;   &lt;li&gt;Favorites&lt;/li&gt; &#xA;   &lt;li&gt;Events&lt;/li&gt; &#xA;   &lt;li&gt;Presence&lt;/li&gt; &#xA;   &lt;li&gt;Concurrent devices&lt;/li&gt; &#xA;   &lt;li&gt;Down alerts&lt;/li&gt; &#xA;   &lt;li&gt;IP&#39;s&lt;/li&gt; &#xA;   &lt;li&gt;...&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/img/2_1_device_details.jpg&#34; alt=&#34;Screen 1&#34; title=&#34;Screen 1&#34;&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/img/2_2_device_sessions.jpg&#34; alt=&#34;Screen 2&#34; title=&#34;Screen 2&#34;&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/img/2_3_device_presence.jpg&#34; alt=&#34;Screen 3&#34; title=&#34;Screen 3&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/img/3_presence.jpg&#34; alt=&#34;Screen 4&#34; title=&#34;Screen 4&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;!-- --------------------------------------------------------------------- ---&gt; &#xA;&lt;p&gt;Initially designed to run on a Raspberry Pi, probably it can run on many other Linux distributions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;One-step Automated Install:&lt;/p&gt; &lt;h4&gt;&lt;code&gt;curl -sSL https://github.com/pucherot/Pi.Alert/raw/main/install/pialert_install.sh | bash&lt;/code&gt;&lt;/h4&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/INSTALL.md&#34;&gt;Installation Guide (step by step)&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Update&lt;/h1&gt; &#xA;&lt;!-- --------------------------------------------------------------------- ---&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;One-step Automated Update: &lt;h4&gt;&lt;code&gt;curl -sSL https://github.com/pucherot/Pi.Alert/raw/main/install/pialert_update.sh | bash&lt;/code&gt;&lt;/h4&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Uninstall process&lt;/h1&gt; &#xA;&lt;!-- --------------------------------------------------------------------- ---&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/UNINSTALL.md&#34;&gt;Unistall process&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Device Management&lt;/h1&gt; &#xA;&lt;!-- --------------------------------------------------------------------- ---&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/DEVICE_MANAGEMENT.md&#34;&gt;Device Management instructions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other useful info&lt;/h2&gt; &#xA;&lt;!-- --------------------------------------------------------------------- ---&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/docs/VERSIONS_HISTORY.md&#34;&gt;Versions History&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;h3&gt;Powered by:&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Product&lt;/th&gt; &#xA;   &lt;th&gt;Objetive&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Python&lt;/td&gt; &#xA;   &lt;td&gt;Programming language for the Back&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PHP&lt;/td&gt; &#xA;   &lt;td&gt;Programming language for the Front-end&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td&gt;Programming language for the Front-end&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bootstrap&lt;/td&gt; &#xA;   &lt;td&gt;Front-end framework&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Admin.LTE&lt;/td&gt; &#xA;   &lt;td&gt;Bootstrap template&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FullCalendar&lt;/td&gt; &#xA;   &lt;td&gt;Calendar component&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Sqlite&lt;/td&gt; &#xA;   &lt;td&gt;DB engine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lighttpd&lt;/td&gt; &#xA;   &lt;td&gt;Webserver&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;arp-scan&lt;/td&gt; &#xA;   &lt;td&gt;Scan network using arp commands&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Pi.hole&lt;/td&gt; &#xA;   &lt;td&gt;DNS Server with Ad-block&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dnsmasq&lt;/td&gt; &#xA;   &lt;td&gt;DHCP Server&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;GPL 3.0 &lt;a href=&#34;https://raw.githubusercontent.com/pucherot/Pi.Alert/main/LICENSE.txt&#34;&gt;Read more here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Contact&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;mailto:pi.alert.application@gmail.com&#34;&gt;pi.alert.application@gmail.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Suggestions and comments are welcome&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;!-- --------------------------------------------------------------------- ---&gt;</summary>
  </entry>
  <entry>
    <title>arcxingye/EatKano</title>
    <updated>2022-07-13T01:33:48Z</updated>
    <id>tag:github.com,2022-07-13:/arcxingye/EatKano</id>
    <link href="https://github.com/arcxingye/EatKano" rel="alternate"></link>
    <summary type="html">&lt;p&gt;H5 Games&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://xingye.me/game/eatkano&#34;&gt;&lt;img src=&#34;https://github.com/arcxingye/EatKano/raw/main/static/image/ClickBefore.png?raw=true&#34; width=&#34;100&#34; height=&#34;100&#34; alt=&#34;EatKano&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;EatKano&lt;/h1&gt; &#xA; &lt;p&gt;&lt;em&gt;🦌 网页小游戏 🥛&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;简介&lt;/h2&gt; &#xA;&lt;p&gt;小游戏：吃掉小鹿乃&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/arcxingye/EatKano/main/README_EN.md&#34;&gt;English&lt;/a&gt; | &lt;a href=&#34;https://space.bilibili.com/316381099&#34;&gt;鹿乃b站&lt;/a&gt; | &lt;a href=&#34;https://xingye.me/game/eatkano/index.php&#34;&gt;线上版本&lt;/a&gt; | &lt;a href=&#34;https://arcxingye.github.io/EatKano/index.html&#34;&gt;Github Pages&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;可选功能&lt;/h2&gt; &#xA;&lt;p&gt;简易排行榜(日/周/月) 不推荐使用&lt;/p&gt; &#xA;&lt;p&gt;不需要排行榜把php/sql文件都删掉即可&lt;/p&gt; &#xA;&lt;h2&gt;版本需求&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQL 5+&lt;/li&gt; &#xA; &lt;li&gt;PHP 5+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;使用方法&lt;/h2&gt; &#xA;&lt;p&gt;注: 如果你想玩的话直接去玩就可以, 这里是如何制造你的改版&lt;/p&gt; &#xA;&lt;h3&gt;Github Pages&lt;/h3&gt; &#xA;&lt;p&gt;点 &lt;a href=&#34;https://www.bilibili.com/video/BV1r94y1d765&#34;&gt;这里&lt;/a&gt; 看视频步骤&lt;/p&gt; &#xA;&lt;p&gt;如果你不需要排行榜, 那么部署到Github Pages即可.&lt;/p&gt; &#xA;&lt;p&gt;按照如下方法更改你想要显示的文字&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Fork本项目,不要在现在这个页面直接改,然后发现改不了.&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;打开你Fork的项目&lt;/strong&gt;, 找到&lt;code&gt;static/i18n/zh.json&lt;/code&gt;, 找到下面这几项配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;game-title&#34;: &#34;新概念音游&#34;,&#xA;  &#34;game-intro1&#34;: &#34;从最底下的开始&#34;,&#xA;  &#34;game-intro2&#34;: &#34;看你能得多少分&#34;,&#xA;  &#34;text-level-1&#34;: &#34;试着好好练一下?&#34;,&#xA;  &#34;text-level-2&#34;: &#34;TCL&#34;,&#xA;  &#34;text-level-3&#34;: &#34;TQL&#34;,&#xA;  &#34;text-level-4&#34;: &#34;您&#34;,&#xA;  &#34;text-level-5&#34;: &#34;人?&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;你可以随意更改右侧文字, 就可以显示你想要的内容 &lt;strong&gt;不要删掉双引号&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;找到&lt;code&gt;static/image&lt;/code&gt;文件夹, 点击前显示的图片是&lt;code&gt;ClickBefore.png&lt;/code&gt;, 点击后的图片是&lt;code&gt;ClickAfter.png&lt;/code&gt;, 把他们改成你想要的即可.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;注意文件格式, 需要是png&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;找到&lt;code&gt;static/music&lt;/code&gt;文件夹, 点击时的音效是&lt;code&gt;tap.mp3&lt;/code&gt;, 正常结束的音效是&lt;code&gt;end.mp3&lt;/code&gt;, 点击错误的音效是&lt;code&gt;err.mp3&lt;/code&gt;, 把他们改成你想要的即可.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;注意文件格式, 需要是mp3&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;更改完毕后前往项目的&lt;code&gt;Settings&lt;/code&gt; -&amp;gt; &lt;code&gt;Pages&lt;/code&gt; -&amp;gt; &lt;code&gt;Source&lt;/code&gt;, 选择&lt;code&gt;main&lt;/code&gt; 分支然后点击&lt;code&gt;Save&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;部署到服务器&lt;/h3&gt; &#xA;&lt;p&gt;按照这些步骤来在你的服务器上配置排行榜的数据库&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;创建数据库并且执行提供的脚本(这里用&lt;code&gt;kano&lt;/code&gt;作为数据库名)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE kano DEFAULT CHARSET=utf8;&#xA;USE kano;&#xA;SOURCE kano.sql;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;更改有数据库信息的&lt;code&gt;conn.php&lt;/code&gt;为你的数据库配置&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-php&#34;&gt;&amp;lt;?php&#xA;// 把这里改为你的配置&#xA;$link = new mysqli(&#39;localhost&#39;,&#39;NAME&#39;,&#39;PASSWORD&#39;,&#39;kano&#39;);&#xA;mysqli_set_charset($link, &#39;utf8&#39;);&#xA;if ($link-&amp;gt;connect_error) {&#xA;    die(&#34;Failed to connect: &#34; . $conn-&amp;gt;connect_error);&#xA;}&#xA;$ranking = &#34;kano_rank&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;其它事项&lt;/h2&gt; &#xA;&lt;p&gt;点下star吧~ 欢迎pr代码&lt;/p&gt;</summary>
  </entry>
</feed>