<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-30T01:30:13Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sseezov/l5-validator-test-v2</title>
    <updated>2023-10-30T01:30:13Z</updated>
    <id>tag:github.com,2023-10-30:/sseezov/l5-validator-test-v2</id>
    <link href="https://github.com/sseezov/l5-validator-test-v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Аналог аттестационного проекта для 2 курса 1 семестра в Хекслет колледж&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;Правила и регламент&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hexly.notion.site/d9289c18871c44508bc7c7f05a51d94f&#34;&gt;Экзамен: правила, рекомендации и порядок проведения&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Задание&lt;/h2&gt; &#xA;&lt;p&gt;Ваша задача написать валидатор, в котором есть ряд методов и свойств и экспортировать его из файла &lt;em&gt;src/index.js&lt;/em&gt;. Валидатор позволяет проверять аргументы на соответствие необходимым условиям, которые были заданы с помощью методов валидатора.&lt;/p&gt; &#xA;&lt;p&gt;Пример использования:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// создаем экземпляр валидатора&#xA;const v = new Validator();&#xA;// определяем метод для валидации строк и связываем его с валидатором, обращаясь к нему через переменную.&#xA;const schema = v.string();&#xA;&#xA;// проверяем данные на соответствие строковому типу, с помощью метода isValid()&#xA;schema.isValid(&#39;Hexlet&#39;); // true&#xA;schema.isValid(&#39;&#39;); // true&#xA;schema.isValid(null); // false&#xA;schema.isValid(123); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Примечания&lt;/h3&gt; &#xA;&lt;p&gt;Вы можете самостоятельно протестировать работу валидатора. В каталоге &lt;em&gt;src&lt;/em&gt; разрешено использовать любые файлы и создавать новые, если это делает вашу разработку более удобной.&lt;/p&gt; &#xA;&lt;p&gt;Для тестирования валидатора, достаточно создать экземпляр валидатора, настроить валидацию с помощью методов и вызвать метод &lt;code&gt;validate()&lt;/code&gt; с необходимым аргументом, после чего написать в терминале:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node src/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1 задача&lt;/h2&gt; &#xA;&lt;p&gt;Вам необходимо создать валидатор, который способен принимать аргумент и проводить его проверку на соответствие определенным условиям. В данной задаче мы ограничиваемся валидацией только строк. Для этого в вашем валидаторе должен быть метод &lt;code&gt;string()&lt;/code&gt;, который создает экземпляр валидатора строк. Этот экземпляр обладает методом &lt;code&gt;isValid()&lt;/code&gt;, который принимает данные на вход и возвращает значение true или false в зависимости от того, являются ли входные данные строкой или нет.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Параметры и методы&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;аргумент, который мы валидируем (проверяем)&lt;/li&gt; &#xA; &lt;li&gt;метод валидатора &lt;code&gt;string()&lt;/code&gt;, который создает экземпляр валидатора строк&lt;/li&gt; &#xA; &lt;li&gt;метод экземпляра &lt;code&gt;isValid()&lt;/code&gt;, который вызывается у экземпляра &lt;code&gt;string()&lt;/code&gt;, он принимает данные на вход и валидирует&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const v = new Validator();&#xA;const schema = v.string();&#xA;&#xA;schema.isValid(null); // false&#xA;schema.isValid(&#39;&#39;); // true&#xA;schema.isValid(true); // false&#xA;schema.isValid(&#39;123&#39;); // true&#xA;schema.isValid(0); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;После добавления методов &lt;code&gt;string()&lt;/code&gt; и &lt;code&gt;isValid()&lt;/code&gt;, экземпляр валидатора будет проверять является ли аргумент типом данных &lt;em&gt;String&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;2 задача&lt;/h2&gt; &#xA;&lt;p&gt;а) Вам необходимо расширить функциональность экземпляра валидатора строк, добавив к нему метод &lt;code&gt;startsFromUpperCase()&lt;/code&gt; . При вызове метода &lt;code&gt;startsFromUpperCase()&lt;/code&gt;, он добавляет дополнительную проверку, которая будет выполняться при вызове метода &lt;code&gt;isValid()&lt;/code&gt; на то, начинается ли строка с заглвной буквы.&lt;/p&gt; &#xA;&lt;p&gt;б) Вам необходимо расширить функциональность экземпляра валидатора строк, добавив к нему метод &lt;code&gt;length()&lt;/code&gt; . При вызове метода &lt;code&gt;length()&lt;/code&gt; c переданным аргументом, он добавляет дополнительную проверку, которая будет выполняться при вызове метода &lt;code&gt;isValid()&lt;/code&gt; на то, соответствует ли длина строки заданной.&lt;/p&gt; &#xA;&lt;p&gt;в) Вам необходимо расширить функциональность экземпляра валидатора строк, добавив к нему метод &lt;code&gt;hasExclamation()&lt;/code&gt; . При вызове метода &lt;code&gt;hasExclamation()&lt;/code&gt;, он добавляет дополнительную проверку, которая будет выполняться при вызове метода &lt;code&gt;isValid()&lt;/code&gt; на то, включает ли строка восклицательные знаки.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Методы&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;метод &lt;code&gt;startsFromUpperCase()&lt;/code&gt;, который вызывается у экземпляра &lt;code&gt;string()&lt;/code&gt;. Он добавляет проверку первой буквы в слове на то, является ли она заглавной&lt;/li&gt; &#xA; &lt;li&gt;метод &lt;code&gt;length()&lt;/code&gt;, который вызывается у экземпляра &lt;code&gt;string()&lt;/code&gt;. Он добавляет проверку строки на соответствие заданной длине&lt;/li&gt; &#xA; &lt;li&gt;метод &lt;code&gt;hasExclamation()&lt;/code&gt;, который вызывается у экземпляра &lt;code&gt;string()&lt;/code&gt;. Он добавляет проверку строки на наличие восклицательных знаков&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const v = new Validator();&#xA;&#xA;const schema1 = v.string();&#xA;schema1.isValid(&#39;hexlet&#39;); // true;&#xA;&#xA;const schema2 = v.string().startsFromUpperCase()&#xA;schema2.isValid(&#39;hexlet&#39;); // false;&#xA;schema2.isValid(&#39; hello?&#39;); // false;&#xA;schema2.isValid(&#39;Hi&#39;); // true;&#xA;schema2.isValid(&#39;!Hi&#39;); // false;&#xA;schema2.isValid(&#39;1Hi&#39;); // false;&#xA;&#xA;const schema2 = v.string().length(5).startsFromUpperCase()&#xA;schema2.isValid(&#39;hexlet&#39;); // false;&#xA;schema2.isValid(&#39; hello?&#39;); // false;&#xA;schema2.isValid(&#39;Hieee&#39;); // true;&#xA;schema2.isValid(&#39;!Hide&#39;); // false;&#xA;&#xA;const schema2 = v.string().length(5).startsFromUpperCase().hasExclamation()&#xA;schema2.isValid(&#39;hexlet&#39;); // false;&#xA;schema2.isValid(&#39; hello?&#39;); // false;&#xA;schema2.isValid(&#39;Hieee&#39;); // false;&#xA;schema2.isValid(&#39;Hide!&#39;); // true;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;После добавления методов &lt;code&gt;startsFromUpperCase()&lt;/code&gt;, экземпляр валидатора строк будет проверять содержит ли аргумент заглавные буквы.&lt;/p&gt; &#xA;&lt;h2&gt;3 задача&lt;/h2&gt; &#xA;&lt;p&gt;Вам необходимо создать валидатор массивов, добавив к нему метод &lt;code&gt;array()&lt;/code&gt;. Аналогично методу &lt;code&gt;string()&lt;/code&gt;, метод &lt;code&gt;array()&lt;/code&gt; создает экземпляр валидатора массивов. Для валидации массива у этого экземпляра также есть метод &lt;code&gt;isValid()&lt;/code&gt;, который проверяет, является ли переданный аргумент массивом.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Методы&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;метод валидатора &lt;code&gt;array()&lt;/code&gt;, который создает экземпляр валидатора массивов&lt;/li&gt; &#xA; &lt;li&gt;метод &lt;code&gt;isValid()&lt;/code&gt;, который вызывается у экземпляра &lt;code&gt;array()&lt;/code&gt;. Он проверяет является ли аргумент массивом&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const v = new Validator();&#xA;const schema = v.array();&#xA;&#xA;schema.isValid([]); // true&#xA;schema.isValid({}); // false&#xA;schema.isValid(123); // false&#xA;schema.isValid(&#39;Hexlet&#39;); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;После добавления метода &lt;code&gt;array()&lt;/code&gt;, экземпляр валидатора сможет проверять переданные значения на соответствие экземпляру глобального объекта Array.&lt;/p&gt; &#xA;&lt;h2&gt;4 задача&lt;/h2&gt; &#xA;&lt;p&gt;Вам необходимо расширить функциональность экземпляра валидатора массивов. Кроме того, что он может валидировать, является ли аргумент массивом, он должен также иметь возможность проверять, соответствует ли какой-либо из вложенных массивов указанной глубине, если бы вызван метод &lt;code&gt;maxDepth()&lt;/code&gt;, аргументом в котором является число, означающее необходимую глубину массива, где 0 - это отсутствие вложенных массивов.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Методы&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;метод &lt;code&gt;maxDepth()&lt;/code&gt;, который вызывается у экземпляра &lt;code&gt;array()&lt;/code&gt;. Он проверяет соответствует ли глубина вложенности в массиве заданному в &lt;code&gt;maxDepth()&lt;/code&gt; аргументу. То есть в массиве не должно быть массивов с глубиной вложенности более чем значение аргумента.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const v = new Validator();&#xA;const schema1 = v.array();&#xA;schema1.isValid([1, 2]); // true&#xA;&#xA;const schema2 = v.array().maxDepth(3);&#xA;schema2.isValid([1, 2]); // true&#xA;schema2.isValid([1, [2, [3]]]); // true&#xA;schema2.isValid([1, [2, [3, [4]]]]); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;После добавления метода &lt;code&gt;maxDepth()&lt;/code&gt;, экземпляр валидатора массивов будет способен проверять, соответствует ли длина массива заданной в методе длине.&lt;/p&gt; &#xA;&lt;h2&gt;5 задача&lt;/h2&gt; &#xA;&lt;p&gt;Вам необходимо создать валидатор полей объекта, используя методы, представленные в предыдущих задачах. Для этого необходимо создать метод &lt;code&gt;object()&lt;/code&gt;, который проверяет не сам объект, а данные внутри него на соответствием заданным валидаторам. Метод &lt;code&gt;Validator.object()&lt;/code&gt; должен содержать метод &lt;code&gt;shape()&lt;/code&gt;, позволяющий задать поля, подлежащие валидации, для объекта. Метод &lt;code&gt;shape()&lt;/code&gt; принимает объект, в котором ключи представляют поля, которые требуется проверить, а значения - экземпляры валидаторов.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Методы&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;метод валидатора (экземпляр класса &lt;em&gt;Validator&lt;/em&gt;) &lt;code&gt;object()&lt;/code&gt;, который проверяет данные внутри объекта (поля объекта)&lt;/li&gt; &#xA; &lt;li&gt;метод &lt;code&gt;shape()&lt;/code&gt;, который вызывается у экземпляра &lt;code&gt;object()&lt;/code&gt;. Он позволяет задать поля валидации для объекта&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const v = new Validator();&#xA;&#xA;// Позволяет описывать валидацию для свойств объекта&#xA;const schema = v.object().shape({&#xA;  name: v.string().startsFromUpperCase(), // теперь, при валидации объекта с ключом id, значение этого ключа пройдет валидацию в соответствии с текущими методами&#xA;  friends: v.array().maxDepth(0),&#xA;});&#xA;&#xA;schema.isValid({ name: &#39;Sergey&#39;, friends: [&#39;mark&#39;, &#39;john&#39;, &#39;anna&#39;] }); // true&#xA;schema.isValid({ name: 12, friends: [&#39;potatos&#39;, &#39;tomatos&#39;, &#39;oranges&#39;] }); // false&#xA;schema.isValid({ name: &#39;andrey&#39;, friends: [&#39;sergey&#39;,[&#39;ivan&#39;, &#39;anatoly&#39;]] }); // false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;После добавления методов &lt;code&gt;object()&lt;/code&gt; и &lt;code&gt;shape()&lt;/code&gt;, экземпляр валидатора сможет проверять поля объекта на соответствие заданным валидаторам&lt;/p&gt;</summary>
  </entry>
</feed>