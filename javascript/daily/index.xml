<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-22T01:34:04Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>CoolElectronics/bookmarkfs</title>
    <updated>2022-09-22T01:34:04Z</updated>
    <id>tag:github.com,2022-09-22:/CoolElectronics/bookmarkfs</id>
    <link href="https://github.com/CoolElectronics/bookmarkfs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Exploit chrome&#39;s profile sync for free cloud storage&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;BookmarkFS - the dumbest project i&#39;ve ever made&lt;/h1&gt; &#xA;&lt;/div&gt; Exploits the google chrome bookmark sync service to store files for free &#xA;&lt;h1&gt;Installation and usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Go to releases and download bookmarkfs.crx&lt;/li&gt; &#xA; &lt;li&gt;Go to chrome://extensions and enable developer mode&lt;/li&gt; &#xA; &lt;li&gt;Drag and drop the .crx file into the extensions page&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To upload a file, click on the icon for the extension and it will open up a page where you can upload, download, and delete files&lt;/p&gt; &#xA;&lt;h1&gt;How does it work?&lt;/h1&gt; &#xA;&lt;p&gt;Every bookmark can contain a maximum of 9092 charaters before google refuses to sync them. Using base64 encoding, this means you can fit around 72kb into a single bookmark. When you upload a file, it gets compressed using gzip, encoded into base64, split into multiple bookmarks, and stored into folders corresponding with the file name.&lt;/p&gt; &#xA;&lt;h1&gt;Demo&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/58010778/190885315-206a6bbf-eab1-4d0d-a7f6-bb4a15c30914.mp4&#34;&gt;https://user-images.githubusercontent.com/58010778/190885315-206a6bbf-eab1-4d0d-a7f6-bb4a15c30914.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Things you might be wondering&lt;/h1&gt; &#xA;&lt;p&gt;&#34;Why?&#34; &#34;Science isn&#39;t about why, it&#39;s about why not&#34; - Cave Johnson&lt;/p&gt; &#xA;&lt;p&gt;&#34;What&#39;s the max file size?&#34; Not infinite, unfortunately. The syncing should be theoretically infinite, I&#39;ve tested with over 10k bookmarks and file sizes &amp;gt; 100MB, but the bottleneck is your computer&#39;s memory. When you launch the extension, all of the files will eventually get loaded into RAM, slowing things down quite a bit and eventually crashing chrome with enough files. There might be ways to get around this.&lt;/p&gt; &#xA;&lt;p&gt;&#34;Why folders? there aren&#39;t any actual bookmarks&#34; Using bookmarks works, and since the url section can be used as well, you can get over well double the storage density. However, chrome does not seem to sync bookmarks that long nested so deeply. Fortunately, it has no problems with me using folders and storing as much of them as I want&lt;/p&gt; &#xA;&lt;h1&gt;Building from source&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;clone the github repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;go to chrome://extensions, hit load unpacked and select the folder&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Disclaimer&lt;/h1&gt; &#xA;&lt;p&gt;DO NOT hover over the bookmarks folder when large files are uploaded. It will freeze chrome, or if you&#39;re using a chromebook it crashes the entire chromebook. At one point it even made Xorg crash.&lt;/p&gt; &#xA;&lt;p&gt;Partially inspired by spreadsheetfs&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>react-grid-layout/react-grid-layout</title>
    <updated>2022-09-22T01:34:04Z</updated>
    <id>tag:github.com,2022-09-22:/react-grid-layout/react-grid-layout</id>
    <link href="https://github.com/react-grid-layout/react-grid-layout" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A draggable and resizable grid layout with responsive breakpoints, for React.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React-Grid-Layout&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/STRML/react-grid-layout&#34;&gt;&lt;img src=&#34;https://travis-ci.org/STRML/react-grid-layout.svg?branch=master&#34; alt=&#34;travis build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cdnjs.com/libraries/react-grid-layout&#34;&gt;&lt;img src=&#34;https://img.shields.io/cdnjs/v/react-grid-layout.svg?sanitize=true&#34; alt=&#34;CDNJS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.org/package/react-grid-layout&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-grid-layout.svg?style=flat-square&#34; alt=&#34;npm package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/react-grid-layout.svg?maxAge=2592000&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;React-Grid-Layout is a grid layout system much like &lt;a href=&#34;http://packery.metafizzy.co/&#34;&gt;Packery&lt;/a&gt; or &lt;a href=&#34;http://dsmorse.github.io/gridster.js/&#34;&gt;Gridster&lt;/a&gt;, for React.&lt;/p&gt; &#xA;&lt;p&gt;Unlike those systems, it is responsive and supports breakpoints. Breakpoint layouts can be provided by the user or autogenerated.&lt;/p&gt; &#xA;&lt;p&gt;RGL is React-only and does not require jQuery.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/oo1NT6c.gif&#34; alt=&#34;BitMEX UI&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;GIF from production usage on &lt;a href=&#34;https://www.bitmex.com&#34;&gt;BitMEX.com&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;[&lt;strong&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/&#34;&gt;Demo&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt; | &lt;a href=&#34;https://codesandbox.io/s/5wy3rz5z1x?module=%2Fsrc%2FShowcaseLayout.js&#34;&gt;CodeSandbox Editable demo&lt;/a&gt;&lt;/strong&gt;]&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#demos&#34;&gt;Demos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#responsive-usage&#34;&gt;Responsive Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#providing-grid-width&#34;&gt;Providing Grid Width&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#grid-layout-props&#34;&gt;Grid Layout Props&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#responsive-grid-layout-props&#34;&gt;Responsive Grid Layout Props&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#grid-item-props&#34;&gt;Grid Item Props&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/wiki/Users-recipes&#34;&gt;User Recipes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#performance&#34;&gt;Performance&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/#todo-list&#34;&gt;TODO List&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/0-showcase.html&#34;&gt;Showcase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/1-basic.html&#34;&gt;Basic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/2-no-dragging.html&#34;&gt;No Dragging/Resizing (Layout Only)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/3-messy.html&#34;&gt;Messy Layout Autocorrect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/4-grid-property.html&#34;&gt;Layout Defined on Children&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/5-static-elements.html&#34;&gt;Static Elements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/6-dynamic-add-remove.html&#34;&gt;Adding/Removing Elements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/7-localstorage.html&#34;&gt;Saving Layout to LocalStorage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/8-localstorage-responsive.html&#34;&gt;Saving a Responsive Layout to LocalStorage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/9-min-max-wh.html&#34;&gt;Minimum and Maximum Width/Height&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/10-dynamic-min-max-wh.html&#34;&gt;Dynamic Minimum and Maximum Width/Height&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/11-no-vertical-compact.html&#34;&gt;No Vertical Compacting (Free Movement)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/12-prevent-collision.html&#34;&gt;Prevent Collision&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/13-error-case.html&#34;&gt;Error Case&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/14-toolbox.html&#34;&gt;Toolbox&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/15-drag-from-outside.html&#34;&gt;Drag From Outside&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/16-bounded.html&#34;&gt;Bounded Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/17-resizable-handles.html&#34;&gt;Resizable Handles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/18-scale.html&#34;&gt;Scaled Containers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-grid-layout.github.io/react-grid-layout/examples/19-allow-overlap.html&#34;&gt;Allow Overlap&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Projects Using React-Grid-Layout&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.bitmex.com/&#34;&gt;BitMEX&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aws.amazon.com/blogs/aws/cloudwatch-dashboards-create-use-customized-metrics-views/&#34;&gt;AWS CloudFront Dashboards&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.metabase.com/&#34;&gt;Metabase&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.hubspot.com&#34;&gt;HubSpot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.grotto-networking.com/ComNetViz/ComNetViz.html&#34;&gt;ComNetViz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://app.stoplight.io&#34;&gt;Stoplight&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reflect.io&#34;&gt;Reflect&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ylacaute/ez-Dashing&#34;&gt;ez-Dashing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.elastic.co/products/kibana&#34;&gt;Kibana&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphext.com/&#34;&gt;Graphext&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://support.monday.com/hc/en-us/articles/360002187819-What-are-the-Dashboards-&#34;&gt;Monday&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quadency.com/&#34;&gt;Quadency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hakkiri.io&#34;&gt;Hakkiri&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://help.ubidots.com/en/articles/2400308-create-dashboards-and-widgets&#34;&gt;Ubidots&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://statsout.com/&#34;&gt;Statsout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.datto.com/uk/products/rmm/&#34;&gt;Datto RMM&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Know of others? Create a PR to let me know!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;100% React - no jQuery&lt;/li&gt; &#xA; &lt;li&gt;Compatible with server-rendered apps&lt;/li&gt; &#xA; &lt;li&gt;Draggable widgets&lt;/li&gt; &#xA; &lt;li&gt;Resizable widgets&lt;/li&gt; &#xA; &lt;li&gt;Static widgets&lt;/li&gt; &#xA; &lt;li&gt;Configurable packing: horizontal, vertical, or off&lt;/li&gt; &#xA; &lt;li&gt;Bounds checking for dragging and resizing&lt;/li&gt; &#xA; &lt;li&gt;Widgets may be added or removed without rebuilding grid&lt;/li&gt; &#xA; &lt;li&gt;Layout can be serialized and restored&lt;/li&gt; &#xA; &lt;li&gt;Responsive breakpoints&lt;/li&gt; &#xA; &lt;li&gt;Separate layouts per responsive breakpoint&lt;/li&gt; &#xA; &lt;li&gt;Grid Items placed using CSS Transforms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Performance with CSS Transforms: &lt;a href=&#34;http://i.imgur.com/FTogpLp.jpg&#34;&gt;on&lt;/a&gt; / &lt;a href=&#34;http://i.imgur.com/gOveMm8.jpg&#34;&gt;off&lt;/a&gt;, note paint (green) as % of time&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Compatibility with &lt;code&gt;&amp;lt;React.StrictMode&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Compatibility&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.17.0&lt;/td&gt; &#xA;   &lt;td&gt;React 16 &amp;amp; 17&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.11.3&lt;/td&gt; &#xA;   &lt;td&gt;React 0.14 &amp;amp; 15&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;gt;= 0.10.0&lt;/td&gt; &#xA;   &lt;td&gt;React 0.14&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0.8. - 0.9.2&lt;/td&gt; &#xA;   &lt;td&gt;React 0.13&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&amp;lt; 0.8&lt;/td&gt; &#xA;   &lt;td&gt;React 0.12&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install the React-Grid-Layout &lt;a href=&#34;https://www.npmjs.org/package/react-grid-layout&#34;&gt;package&lt;/a&gt; package using &lt;a href=&#34;https://www.npmjs.com/&#34;&gt;npm&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install react-grid-layout&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Include the following stylesheets in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/node_modules/react-grid-layout/css/styles.css&#xA;/node_modules/react-resizable/css/styles.css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Use ReactGridLayout like any other component. The following example below will produce a grid with three items where:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;users will not be able to drag or resize item &lt;code&gt;a&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;item &lt;code&gt;b&lt;/code&gt; will be restricted to a minimum width of 2 grid blocks and a maximum width of 4 grid blocks&lt;/li&gt; &#xA; &lt;li&gt;users will be able to freely drag and resize item &lt;code&gt;c&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import GridLayout from &#34;react-grid-layout&#34;;&#xA;&#xA;class MyFirstGrid extends React.Component {&#xA;  render() {&#xA;    // layout is an array of objects, see the demo for more complete usage&#xA;    const layout = [&#xA;      { i: &#34;a&#34;, x: 0, y: 0, w: 1, h: 2, static: true },&#xA;      { i: &#34;b&#34;, x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4 },&#xA;      { i: &#34;c&#34;, x: 4, y: 0, w: 1, h: 2 }&#xA;    ];&#xA;    return (&#xA;      &amp;lt;GridLayout&#xA;        className=&#34;layout&#34;&#xA;        layout={layout}&#xA;        cols={12}&#xA;        rowHeight={30}&#xA;        width={1200}&#xA;      &amp;gt;&#xA;        &amp;lt;div key=&#34;a&#34;&amp;gt;a&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;b&#34;&amp;gt;b&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;c&#34;&amp;gt;c&amp;lt;/div&amp;gt;&#xA;      &amp;lt;/GridLayout&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also choose to set layout properties directly on the children:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import GridLayout from &#34;react-grid-layout&#34;;&#xA;&#xA;class MyFirstGrid extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;GridLayout className=&#34;layout&#34; cols={12} rowHeight={30} width={1200}&amp;gt;&#xA;        &amp;lt;div key=&#34;a&#34; data-grid={{ x: 0, y: 0, w: 1, h: 2, static: true }}&amp;gt;&#xA;          a&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;b&#34; data-grid={{ x: 1, y: 0, w: 3, h: 2, minW: 2, maxW: 4 }}&amp;gt;&#xA;          b&#xA;        &amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;c&#34; data-grid={{ x: 4, y: 0, w: 1, h: 2 }}&amp;gt;&#xA;          c&#xA;        &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/GridLayout&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Usage without Browserify/Webpack&lt;/h3&gt; &#xA;&lt;p&gt;A module usable in a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag is included &lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/dist/react-grid-layout.min.js&#34;&gt;here&lt;/a&gt;. It uses a UMD shim and excludes &lt;code&gt;React&lt;/code&gt;, so it must be otherwise available in your application, either via RequireJS or on &lt;code&gt;window.React&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Responsive Usage&lt;/h3&gt; &#xA;&lt;p&gt;To make RGL responsive, use the &lt;code&gt;&amp;lt;ResponsiveReactGridLayout&amp;gt;&lt;/code&gt; element:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Responsive as ResponsiveGridLayout } from &#34;react-grid-layout&#34;;&#xA;&#xA;class MyResponsiveGrid extends React.Component {&#xA;  render() {&#xA;    // {lg: layout1, md: layout2, ...}&#xA;    const layouts = getLayoutsFromSomewhere();&#xA;    return (&#xA;      &amp;lt;ResponsiveGridLayout&#xA;        className=&#34;layout&#34;&#xA;        layouts={layouts}&#xA;        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}&#xA;        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}&#xA;      &amp;gt;&#xA;        &amp;lt;div key=&#34;1&#34;&amp;gt;1&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;2&#34;&amp;gt;2&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;3&#34;&amp;gt;3&amp;lt;/div&amp;gt;&#xA;      &amp;lt;/ResponsiveGridLayout&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When in responsive mode, you should supply at least one breakpoint via the &lt;code&gt;layouts&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;p&gt;When using &lt;code&gt;layouts&lt;/code&gt;, it is best to supply as many breakpoints as possible, especially the largest one. If the largest is provided, RGL will attempt to interpolate the rest.&lt;/p&gt; &#xA;&lt;p&gt;You will also need to provide a &lt;code&gt;width&lt;/code&gt;, when using &lt;code&gt;&amp;lt;ResponsiveReactGridLayout&amp;gt;&lt;/code&gt; it is suggested you use the HOC &lt;code&gt;WidthProvider&lt;/code&gt; as per the instructions below.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to supply default mappings via the &lt;code&gt;data-grid&lt;/code&gt; property on individual items, so that they would be taken into account within layout interpolation.&lt;/p&gt; &#xA;&lt;h3&gt;Providing Grid Width&lt;/h3&gt; &#xA;&lt;p&gt;Both &lt;code&gt;&amp;lt;ResponsiveReactGridLayout&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ReactGridLayout&amp;gt;&lt;/code&gt; take &lt;code&gt;width&lt;/code&gt; to calculate positions on drag events. In simple cases a HOC &lt;code&gt;WidthProvider&lt;/code&gt; can be used to automatically determine width upon initialization and window resize events.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Responsive, WidthProvider } from &#34;react-grid-layout&#34;;&#xA;&#xA;const ResponsiveGridLayout = WidthProvider(Responsive);&#xA;&#xA;class MyResponsiveGrid extends React.Component {&#xA;  render() {&#xA;    // {lg: layout1, md: layout2, ...}&#xA;    var layouts = getLayoutsFromSomewhere();&#xA;    return (&#xA;      &amp;lt;ResponsiveGridLayout&#xA;        className=&#34;layout&#34;&#xA;        layouts={layouts}&#xA;        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}&#xA;        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}&#xA;      &amp;gt;&#xA;        &amp;lt;div key=&#34;1&#34;&amp;gt;1&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;2&#34;&amp;gt;2&amp;lt;/div&amp;gt;&#xA;        &amp;lt;div key=&#34;3&#34;&amp;gt;3&amp;lt;/div&amp;gt;&#xA;      &amp;lt;/ResponsiveGridLayout&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows you to easily replace &lt;code&gt;WidthProvider&lt;/code&gt; with your own Provider HOC if you need more sophisticated logic.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;WidthProvider&lt;/code&gt; accepts a single prop, &lt;code&gt;measureBeforeMount&lt;/code&gt;. If &lt;code&gt;true&lt;/code&gt;, &lt;code&gt;WidthProvider&lt;/code&gt; will measure the container&#39;s width before mounting children. Use this if you&#39;d like to completely eliminate any resizing animation on application/component mount.&lt;/p&gt; &#xA;&lt;p&gt;Have a more complicated layout? &lt;code&gt;WidthProvider&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/lib/components/WidthProvider.jsx&#34;&gt;is very simple&lt;/a&gt; and only listens to window &lt;code&gt;&#39;resize&#39;&lt;/code&gt; events. If you need more power and flexibility, try the &lt;a href=&#34;https://github.com/ctrlplusb/react-sizeme&#34;&gt;SizeMe React HOC&lt;/a&gt; as an alternative to WidthProvider.&lt;/p&gt; &#xA;&lt;h3&gt;Grid Layout Props&lt;/h3&gt; &#xA;&lt;p&gt;RGL supports the following properties (see the source for the final word on this):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// Basic props&#xA;//&#xA;&#xA;// This allows setting the initial width on the server side.&#xA;// This is required unless using the HOC &amp;lt;WidthProvider&amp;gt; or similar&#xA;width: number,&#xA;&#xA;// If true, the container height swells and contracts to fit contents&#xA;autoSize: ?boolean = true,&#xA;&#xA;// Number of columns in this layout.&#xA;cols: ?number = 12,&#xA;&#xA;// A CSS selector for tags that will not be draggable.&#xA;// For example: draggableCancel:&#39;.MyNonDraggableAreaClassName&#39;&#xA;// If you forget the leading . it will not work.&#xA;// .react-resizable-handle&#34; is always prepended to this value.&#xA;draggableCancel: ?string = &#39;&#39;,&#xA;&#xA;// A CSS selector for tags that will act as the draggable handle.&#xA;// For example: draggableHandle:&#39;.MyDragHandleClassName&#39;&#xA;// If you forget the leading . it will not work.&#xA;draggableHandle: ?string = &#39;&#39;,&#xA;&#xA;// Compaction type.&#xA;compactType: ?(&#39;vertical&#39; | &#39;horizontal&#39;) = &#39;vertical&#39;;&#xA;&#xA;// Layout is an array of object with the format:&#xA;// {x: number, y: number, w: number, h: number}&#xA;// The index into the layout must match the key used on each item component.&#xA;// If you choose to use custom keys, you can specify that key in the layout&#xA;// array objects like so:&#xA;// {i: string, x: number, y: number, w: number, h: number}&#xA;layout: ?array = null, // If not provided, use data-grid props on children&#xA;&#xA;// Margin between items [x, y] in px.&#xA;margin: ?[number, number] = [10, 10],&#xA;&#xA;// Padding inside the container [x, y] in px&#xA;containerPadding: ?[number, number] = margin,&#xA;&#xA;// Rows have a static height, but you can change this based on breakpoints&#xA;// if you like.&#xA;rowHeight: ?number = 150,&#xA;&#xA;// Configuration of a dropping element. Dropping element is a &#34;virtual&#34; element&#xA;// which appears when you drag over some element from outside.&#xA;// It can be changed by passing specific parameters:&#xA;//  i - id of an element&#xA;//  w - width of an element&#xA;//  h - height of an element&#xA;droppingItem?: { i: string, w: number, h: number }&#xA;&#xA;//&#xA;// Flags&#xA;//&#xA;isDraggable: ?boolean = true,&#xA;isResizable: ?boolean = true,&#xA;isBounded: ?boolean = false,&#xA;// Uses CSS3 translate() instead of position top/left.&#xA;// This makes about 6x faster paint performance&#xA;useCSSTransforms: ?boolean = true,&#xA;// If parent DOM node of ResponsiveReactGridLayout or ReactGridLayout has &#34;transform: scale(n)&#34; css property,&#xA;// we should set scale coefficient to avoid render artefacts while dragging.&#xA;transformScale: ?number = 1,&#xA;&#xA;// If true, grid can be placed one over the other.&#xA;// If set, implies `preventCollision`.&#xA;allowOverlap: ?boolean = false,&#xA;&#xA;// If true, grid items won&#39;t change position when being&#xA;// dragged over. If `allowOverlap` is still false,&#xA;// this simply won&#39;t allow one to drop on an existing object.&#xA;preventCollision: ?boolean = false,&#xA;&#xA;// If true, droppable elements (with `draggable={true}` attribute)&#xA;// can be dropped on the grid. It triggers &#34;onDrop&#34; callback&#xA;// with position and event object as parameters.&#xA;// It can be useful for dropping an element in a specific position&#xA;//&#xA;// NOTE: In case of using Firefox you should add&#xA;// `onDragStart={e =&amp;gt; e.dataTransfer.setData(&#39;text/plain&#39;, &#39;&#39;)}` attribute&#xA;// along with `draggable={true}` otherwise this feature will work incorrect.&#xA;// onDragStart attribute is required for Firefox for a dragging initialization&#xA;// @see https://bugzilla.mozilla.org/show_bug.cgi?id=568313&#xA;isDroppable: ?boolean = false,&#xA;// Defines which resize handles should be rendered&#xA;// Allows for any combination of:&#xA;// &#39;s&#39; - South handle (bottom-center)&#xA;// &#39;w&#39; - West handle (left-center)&#xA;// &#39;e&#39; - East handle (right-center)&#xA;// &#39;n&#39; - North handle (top-center)&#xA;// &#39;sw&#39; - Southwest handle (bottom-left)&#xA;// &#39;nw&#39; - Northwest handle (top-left)&#xA;// &#39;se&#39; - Southeast handle (bottom-right)&#xA;// &#39;ne&#39; - Northeast handle (top-right)&#xA;resizeHandles: ?Array&amp;lt;&#39;s&#39; | &#39;w&#39; | &#39;e&#39; | &#39;n&#39; | &#39;sw&#39; | &#39;nw&#39; | &#39;se&#39; | &#39;ne&#39;&amp;gt; = [&#39;se&#39;],&#xA;// Custom component for resize handles&#xA;// See `handle` as used in https://github.com/react-grid-layout/react-resizable#resize-handle&#xA;// Your component should have the class `.react-resizable-handle`, or you should add your custom&#xA;// class to the `draggableCancel` prop.&#xA;resizeHandle?: ReactElement&amp;lt;any&amp;gt; | ((resizeHandleAxis: ResizeHandleAxis, ref: ReactRef&amp;lt;HTMLElement&amp;gt;) =&amp;gt; ReactElement&amp;lt;any&amp;gt;),&#xA;&#xA;//&#xA;// Callbacks&#xA;//&#xA;&#xA;// Callback so you can save the layout.&#xA;// Calls back with (currentLayout) after every drag or resize stop.&#xA;onLayoutChange: (layout: Layout) =&amp;gt; void,&#xA;&#xA;//&#xA;// All callbacks below have signature (layout, oldItem, newItem, placeholder, e, element).&#xA;// &#39;start&#39; and &#39;stop&#39; callbacks pass `undefined` for &#39;placeholder&#39;.&#xA;//&#xA;type ItemCallback = (layout: Layout, oldItem: LayoutItem, newItem: LayoutItem,&#xA;                     placeholder: LayoutItem, e: MouseEvent, element: HTMLElement) =&amp;gt; void,&#xA;&#xA;// Calls when drag starts.&#xA;onDragStart: ItemCallback,&#xA;// Calls on each drag movement.&#xA;onDrag: ItemCallback,&#xA;// Calls when drag is complete.&#xA;onDragStop: ItemCallback,&#xA;// Calls when resize starts.&#xA;onResizeStart: ItemCallback,&#xA;// Calls when resize movement happens.&#xA;onResize: ItemCallback,&#xA;// Calls when resize is complete.&#xA;onResizeStop: ItemCallback,&#xA;&#xA;//&#xA;// Dropover functionality&#xA;//&#xA;&#xA;// Calls when an element has been dropped into the grid from outside.&#xA;onDrop: (layout: Layout, item: ?LayoutItem, e: Event) =&amp;gt; void,&#xA;// Calls when an element is being dragged over the grid from outside as above.&#xA;// This callback should return an object to dynamically change the droppingItem size&#xA;// Return false to short-circuit the dragover&#xA;onDropDragOver: (e: DragOverEvent) =&amp;gt; ?({|w?: number, h?: number|} | false),&#xA;&#xA;// Ref for getting a reference for the grid&#39;s wrapping div.&#xA;// You can use this instead of a regular ref and the deprecated `ReactDOM.findDOMNode()`` function.&#xA;// Note that this type is React.Ref&amp;lt;HTMLDivElement&amp;gt; in TypeScript, Flow has a bug here&#xA;// https://github.com/facebook/flow/issues/8671#issuecomment-862634865&#xA;innerRef: {current: null | HTMLDivElement},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Responsive Grid Layout Props&lt;/h3&gt; &#xA;&lt;p&gt;The responsive grid layout can be used instead. It supports all of the props above, excepting &lt;code&gt;layout&lt;/code&gt;. The new properties and changes are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// {name: pxVal}, e.g. {lg: 1200, md: 996, sm: 768, xs: 480}&#xA;// Breakpoint names are arbitrary but must match in the cols and layouts objects.&#xA;breakpoints: ?Object = {lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0},&#xA;&#xA;// # of cols. This is a breakpoint -&amp;gt; cols map, e.g. {lg: 12, md: 10, ...}&#xA;cols: ?Object = {lg: 12, md: 10, sm: 6, xs: 4, xxs: 2},&#xA;&#xA;&#xA;// margin (in pixels). Can be specified either as horizontal and vertical margin, e.g. `[10, 10]` or as a breakpoint -&amp;gt; margin map, e.g. `{lg: [10, 10], md: [10, 10], ...}.&#xA;margin: [number, number] | {[breakpoint: $Keys&amp;lt;breakpoints&amp;gt;]: [number, number]},&#xA;&#xA;&#xA;// containerPadding (in pixels). Can be specified either as horizontal and vertical padding, e.g. `[10, 10]` or as a breakpoint -&amp;gt; containerPadding map, e.g. `{lg: [10, 10], md: [10, 10], ...}.&#xA;containerPadding: [number, number] | {[breakpoint: $Keys&amp;lt;breakpoints&amp;gt;]: [number, number]},&#xA;&#xA;&#xA;// layouts is an object mapping breakpoints to layouts.&#xA;// e.g. {lg: Layout, md: Layout, ...}&#xA;layouts: {[key: $Keys&amp;lt;breakpoints&amp;gt;]: Layout},&#xA;&#xA;//&#xA;// Callbacks&#xA;//&#xA;&#xA;// Calls back with breakpoint and new # cols&#xA;onBreakpointChange: (newBreakpoint: string, newCols: number) =&amp;gt; void,&#xA;&#xA;// Callback so you can save the layout.&#xA;// AllLayouts are keyed by breakpoint.&#xA;onLayoutChange: (currentLayout: Layout, allLayouts: {[key: $Keys&amp;lt;breakpoints&amp;gt;]: Layout}) =&amp;gt; void,&#xA;&#xA;// Callback when the width changes, so you can modify the layout as needed.&#xA;onWidthChange: (containerWidth: number, margin: [number, number], cols: number, containerPadding: [number, number]) =&amp;gt; void;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Grid Item Props&lt;/h3&gt; &#xA;&lt;p&gt;RGL supports the following properties on grid items or layout items. When initializing a grid, build a layout array (as in the first example above), or attach this object as the &lt;code&gt;data-grid&lt;/code&gt; property to each of your child elements (as in the second example).&lt;/p&gt; &#xA;&lt;p&gt;Note that if a grid item is provided but incomplete (missing one of &lt;code&gt;x, y, w, or h&lt;/code&gt;), an error will be thrown so you can correct your layout.&lt;/p&gt; &#xA;&lt;p&gt;If no properties are provided for a grid item, one will be generated with a width and height of &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can set minimums and maximums for each dimension. This is for resizing; it of course has no effect if resizing is disabled. Errors will be thrown if your mins and maxes overlap incorrectly, or your initial dimensions are out of range.&lt;/p&gt; &#xA;&lt;p&gt;Any &lt;code&gt;&amp;lt;GridItem&amp;gt;&lt;/code&gt; properties defined directly will take precedence over globally-set options. For example, if the layout has the property &lt;code&gt;isDraggable: false&lt;/code&gt;, but the grid item has the prop &lt;code&gt;isDraggable: true&lt;/code&gt;, the item will be draggable, even if the item is marked &lt;code&gt;static: true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;&#xA;  // A string corresponding to the component key&#xA;  i: string,&#xA;&#xA;  // These are all in grid units, not pixels&#xA;  x: number,&#xA;  y: number,&#xA;  w: number,&#xA;  h: number,&#xA;  minW: ?number = 0,&#xA;  maxW: ?number = Infinity,&#xA;  minH: ?number = 0,&#xA;  maxH: ?number = Infinity,&#xA;&#xA;  // If true, equal to `isDraggable: false, isResizable: false`.&#xA;  static: ?boolean = false,&#xA;  // If false, will not be draggable. Overrides `static`.&#xA;  isDraggable: ?boolean = true,&#xA;  // If false, will not be resizable. Overrides `static`.&#xA;  isResizable: ?boolean = true,&#xA;  // By default, a handle is only shown on the bottom-right (southeast) corner.&#xA;  // Note that resizing from the top or left is generally not intuitive.&#xA;  resizeHandles?: ?Array&amp;lt;&#39;s&#39; | &#39;w&#39; | &#39;e&#39; | &#39;n&#39; | &#39;sw&#39; | &#39;nw&#39; | &#39;se&#39; | &#39;ne&#39;&amp;gt; = [&#39;se&#39;]&#xA;  // If true and draggable, item will be moved only within grid.&#xA;  isBounded: ?boolean = false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;ReactGridLayout&amp;gt;&lt;/code&gt; has &lt;a href=&#34;https://raw.githubusercontent.com/react-grid-layout/react-grid-layout/master/lib/ReactGridLayout.jsx&#34;&gt;an optimized &lt;code&gt;shouldComponentUpdate&lt;/code&gt; implementation&lt;/a&gt;, but it relies on the user memoizing the &lt;code&gt;children&lt;/code&gt; array:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// lib/ReactGridLayout.jsx&#xA;// ...&#xA;shouldComponentUpdate(nextProps: Props, nextState: State) {&#xA;  return (&#xA;    // NOTE: this is almost always unequal. Therefore the only way to get better performance&#xA;    // from SCU is if the user intentionally memoizes children. If they do, and they can&#xA;    // handle changes properly, performance will increase.&#xA;    this.props.children !== nextProps.children ||&#xA;    !fastRGLPropsEqual(this.props, nextProps, isEqual) ||&#xA;    !isEqual(this.state.activeDrag, nextState.activeDrag)&#xA;  );&#xA;}&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you memoize your children, you can take advantage of this, and reap faster rerenders. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function MyGrid(props) {&#xA;  const children = React.useMemo(() =&amp;gt; {&#xA;    return new Array(props.count).fill(undefined).map((val, idx) =&amp;gt; {&#xA;      return &amp;lt;div key={idx} data-grid={{ x: idx, y: 1, w: 1, h: 1 }} /&amp;gt;;&#xA;    });&#xA;  }, [props.count]);&#xA;  return &amp;lt;ReactGridLayout cols={12}&amp;gt;{children}&amp;lt;/ReactGridLayout&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Because the &lt;code&gt;children&lt;/code&gt; prop doesn&#39;t change between rerenders, updates to &lt;code&gt;&amp;lt;MyGrid&amp;gt;&lt;/code&gt; won&#39;t result in new renders, improving performance.&lt;/p&gt; &#xA;&lt;h3&gt;Custom Child Components and Draggable Handles&lt;/h3&gt; &#xA;&lt;p&gt;If you use React Components as grid children, they need to do a few things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Forward refs to an underlying DOM node, and&lt;/li&gt; &#xA; &lt;li&gt;Forward &lt;code&gt;style&lt;/code&gt; and &lt;code&gt;className&lt;/code&gt; to that same DOM node.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const CustomGridItemComponent = React.forwardRef(({style, className, ...props}, ref) =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;div style={{ /* styles */, ...style}} className={className} ref={ref}&amp;gt;&#xA;      {/* Some other content */}&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The same is true of custom elements as draggable handles using the &lt;code&gt;draggableHandle&lt;/code&gt; prop. This is so that the underlying &lt;code&gt;react-draggable&lt;/code&gt; library can get a reference to the DOM node underneath, manipulate positioning via &lt;code&gt;style&lt;/code&gt;, and set classes.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;If you have a feature request, please add it as an issue or make a pull request.&lt;/p&gt; &#xA;&lt;p&gt;If you have a bug to report, please reproduce the bug in &lt;a href=&#34;https://codesandbox.io/s/staging-bush-3lvt7?file=/src/ShowcaseLayout.js&#34;&gt;CodeSandbox&lt;/a&gt; to help us easily isolate it.&lt;/p&gt; &#xA;&lt;h2&gt;TODO List&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Basic grid layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Fluid grid layout&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Grid packing&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Draggable grid items&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Live grid packing while dragging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resizable grid items&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Layouts per responsive breakpoint&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Define grid attributes on children themselves (&lt;code&gt;data-grid&lt;/code&gt; key)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Static elements&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Persistent id per item for predictable localstorage restores, even when # items changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Min/max w/h per item&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Resizable handles on other corners&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Configurable w/h per breakpoint&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>