<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-18T01:34:41Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seanprashad/leetcode-patterns</title>
    <updated>2022-07-18T01:34:41Z</updated>
    <id>tag:github.com,2022-07-18:/seanprashad/leetcode-patterns</id>
    <link href="https://github.com/seanprashad/leetcode-patterns" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of leetcode questions grouped by their common patterns&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Leetcode Patterns&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#background&#34;&gt;Background&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#preface&#34;&gt;Preface&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#notes&#34;&gt;Notes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#question-list&#34;&gt;Question List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#solutions&#34;&gt;Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#leetcode-discuss&#34;&gt;Leetcode Discuss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#tips-to-consider&#34;&gt;Tips to Consider&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#suggestions&#34;&gt;Suggestions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanprashad/leetcode-patterns/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Background&lt;/h2&gt; &#xA;&lt;p&gt;This repo is intended for any individual wanting to improve their problem solving skills for software engineering interviews.&lt;/p&gt; &#xA;&lt;p&gt;Problems are grouped under their respective subtopic, in order to focus on repeatedly applying common patterns rather than randomly tackling questions.&lt;/p&gt; &#xA;&lt;p&gt;All questions are available on &lt;a href=&#34;https://leetcode.com&#34;&gt;leetcode.com&lt;/a&gt; with some requiring &lt;a href=&#34;https://leetcode.com/subscribe/&#34;&gt;leetcode premium&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Preface&lt;/h2&gt; &#xA;&lt;p&gt;It is highly recommended to read chapters 1, 2, 3, 4, 8, and 10 of &lt;a href=&#34;http://www.crackingthecodinginterview.com/contents.html&#34;&gt;Cracking The Coding Interview&lt;/a&gt; to familiarize yourself with the following data structures and their operations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arrays&lt;/li&gt; &#xA; &lt;li&gt;Maps&lt;/li&gt; &#xA; &lt;li&gt;Linked Lists&lt;/li&gt; &#xA; &lt;li&gt;Queues&lt;/li&gt; &#xA; &lt;li&gt;Heaps&lt;/li&gt; &#xA; &lt;li&gt;Stacks&lt;/li&gt; &#xA; &lt;li&gt;Trees&lt;/li&gt; &#xA; &lt;li&gt;Graphs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, you should have a good grasp on common algorithms such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Breadth-first search&lt;/li&gt; &#xA; &lt;li&gt;Depth-first search&lt;/li&gt; &#xA; &lt;li&gt;Binary search&lt;/li&gt; &#xA; &lt;li&gt;Recursion&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Notes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://drive.google.com/open?id=1ao4ZA28zzBttDkuS6MLQI52gDs_CJZEm&#34;&gt;This pdf&lt;/a&gt; contains useful information for the built-in data structures in Java.&lt;/p&gt; &#xA;&lt;p&gt;Other useful methods to know include &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#substring-int-int-&#34;&gt;&lt;code&gt;substring()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/String.html#toCharArray--&#34;&gt;&lt;code&gt;toCharArray()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#max-int-int-&#34;&gt;&lt;code&gt;Math.max()&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/lang/Math.html#min-int-int-&#34;&gt;&lt;code&gt;Math.min()&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://docs.oracle.com/javase/8/docs/api/java/util/Arrays.html#fill-int:A-int-&#34;&gt;&lt;code&gt;Arrays.fill()&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Question List&lt;/h2&gt; &#xA;&lt;p&gt;The entire question list can be found here: &lt;a href=&#34;https://seanprashad.com/leetcode-patterns/&#34;&gt;https://seanprashad.com/leetcode-patterns/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In addition to viewing the question list, companies that have previously asked the question in the past 6 months (&lt;em&gt;as of May 2021&lt;/em&gt;) will be listed. You can also use the checkboxes to mark which questions you&#39;ve completed!&lt;/p&gt; &#xA;&lt;h2&gt;Solutions&lt;/h2&gt; &#xA;&lt;p&gt;Solutions written in Java can be found in the &lt;a href=&#34;https://github.com/SeanPrashad/leetcode-patterns/tree/solutions&#34;&gt;solutions&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Leetcode Discuss&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode.com/discuss/interview-question&#34;&gt;Leetcode discuss&lt;/a&gt; is an amazing resource and features previous interview questions, as well as compensation and general career advice.&lt;/p&gt; &#xA;&lt;h2&gt;Tips to Consider&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;If input array is sorted then&#xA;    - Binary search&#xA;    - Two pointers&#xA;&#xA;If asked for all permutations/subsets then&#xA;    - Backtracking&#xA;&#xA;If given a tree then&#xA;    - DFS&#xA;    - BFS&#xA;&#xA;If given a graph then&#xA;    - DFS&#xA;    - BFS&#xA;&#xA;If given a linked list then&#xA;    - Two pointers&#xA;&#xA;If recursion is banned then&#xA;    - Stack&#xA;&#xA;If must solve in-place then&#xA;    - Swap corresponding values&#xA;    - Store one or more different values in the same pointer&#xA;&#xA;If asked for maximum/minimum subarray/subset/options then&#xA;    - Dynamic programming&#xA;&#xA;If asked for top/least K items then&#xA;    - Heap&#xA;&#xA;If asked for common strings then&#xA;    - Map&#xA;    - Trie&#xA;&#xA;Else&#xA;    - Map/Set for O(1) time &amp;amp; O(n) space&#xA;    - Sort input for O(nlogn) time and O(1) space&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Suggestions&lt;/h2&gt; &#xA;&lt;p&gt;Think a question should/shouldn&#39;t be included? Wish there was another feature? Feel free to open an &lt;a href=&#34;https://github.com/SeanPrashad/leetcode-patterns/issues/new&#34;&gt;issue&lt;/a&gt; with your suggestion!&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This list is heavily inspired from &lt;a href=&#34;https://www.educative.io/courses/grokking-the-coding-interview&#34;&gt;Grokking the Coding Interview&lt;/a&gt; with additional problems extracted from the &lt;a href=&#34;https://www.teamblind.com/article/New-Year-Gift---Curated-List-of-Top-100-LeetCode-Questions-to-Save-Your-Time-OaM1orEU?utm_source=share&amp;amp;utm_medium=ios_app&#34;&gt;Blind 75 list&lt;/a&gt; and this hackernoon article on &lt;a href=&#34;https://hackernoon.com/14-patterns-to-ace-any-coding-interview-question-c5bb3357f6ed&#34;&gt;14 patterns to ace any coding interview question&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jquery/jquery</title>
    <updated>2022-07-18T01:34:41Z</updated>
    <id>tag:github.com,2022-07-18:/jquery/jquery</id>
    <link href="https://github.com/jquery/jquery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;jQuery JavaScript Library&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://jquery.com/&#34;&gt;jQuery&lt;/a&gt; â€” New Wave JavaScript&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fjquery%2Fjquery?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjquery%2Fjquery.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/jquery/jquery?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/jquery/jquery.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Guides&lt;/h2&gt; &#xA;&lt;p&gt;In the spirit of open source software development, jQuery always encourages community code contribution. To help you get started and before you jump into writing code, be sure to read these important contribution guidelines thoroughly:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://contribute.jquery.org/&#34;&gt;Getting Involved&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://contribute.jquery.org/style-guide/js/&#34;&gt;Core Style Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://contribute.jquery.org/code/&#34;&gt;Writing Code for jQuery Foundation Projects&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;References to issues/PRs&lt;/h3&gt; &#xA;&lt;p&gt;GitHub issues/PRs are usually referenced via &lt;code&gt;gh-NUMBER&lt;/code&gt;, where &lt;code&gt;NUMBER&lt;/code&gt; is the numerical ID of the issue/PR. You can find such an issue/PR under &lt;code&gt;https://github.com/jquery/jquery/issues/NUMBER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;jQuery has used a different bug tracker - based on Trac - in the past, available under &lt;a href=&#34;https://bugs.jquery.com/&#34;&gt;bugs.jquery.com&lt;/a&gt;. It is being kept in read only mode so that referring to past discussions is possible. When jQuery source references one of those issues, it uses the pattern &lt;code&gt;trac-NUMBER&lt;/code&gt;, where &lt;code&gt;NUMBER&lt;/code&gt; is the numerical ID of the issue. You can find such an issue under &lt;code&gt;https://bugs.jquery.com/ticket/NUMBER&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Environments in which to use jQuery&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jquery.com/browser-support/&#34;&gt;Browser support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;jQuery also supports Node, browser extensions, and other non-browser environments.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What you need to build your own jQuery&lt;/h2&gt; &#xA;&lt;p&gt;To build jQuery, you need to have the latest Node.js/npm and git 1.7 or later. Earlier versions might work, but are not supported.&lt;/p&gt; &#xA;&lt;p&gt;For Windows, you have to download and install &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt; and &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;macOS users should install &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;. Once Homebrew is installed, run &lt;code&gt;brew install git&lt;/code&gt; to install git, and &lt;code&gt;brew install node&lt;/code&gt; to install Node.js.&lt;/p&gt; &#xA;&lt;p&gt;Linux/BSD users should use their appropriate package managers to install git and Node.js, or build from source if you swing that way. Easy-peasy.&lt;/p&gt; &#xA;&lt;h2&gt;How to build your own jQuery&lt;/h2&gt; &#xA;&lt;p&gt;First, &lt;a href=&#34;https://help.github.com/en/github/creating-cloning-and-archiving-repositories/cloning-a-repository&#34;&gt;clone the jQuery git repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then, enter the jquery directory and run the build script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd jquery &amp;amp;&amp;amp; npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The built version of jQuery will be put in the &lt;code&gt;dist/&lt;/code&gt; subdirectory, along with the minified copy and associated map file.&lt;/p&gt; &#xA;&lt;p&gt;If you want to create custom build or help with jQuery development, it would be better to install &lt;a href=&#34;https://github.com/gruntjs/grunt-cli&#34;&gt;grunt command line interface&lt;/a&gt; as a global package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g grunt-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have &lt;code&gt;grunt&lt;/code&gt; installed by testing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grunt -V&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now by running the &lt;code&gt;grunt&lt;/code&gt; command, in the jquery directory, you can build a full version of jQuery, just like with an &lt;code&gt;npm run build&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grunt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There are many other tasks available for jQuery Core:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;grunt -help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;Special builds can be created that exclude subsets of jQuery functionality. This allows for smaller custom builds when the builder is certain that those parts of jQuery are not being used. For example, an app that only used JSONP for &lt;code&gt;$.ajax()&lt;/code&gt; and did not need to calculate offsets or positions of elements could exclude the offset and ajax/xhr modules.&lt;/p&gt; &#xA;&lt;p&gt;Any module may be excluded except for &lt;code&gt;core&lt;/code&gt;, and &lt;code&gt;selector&lt;/code&gt;. To exclude a module, pass its path relative to the &lt;code&gt;src&lt;/code&gt; folder (without the &lt;code&gt;.js&lt;/code&gt; extension).&lt;/p&gt; &#xA;&lt;p&gt;Some example modules that can be excluded are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ajax&lt;/strong&gt;: All AJAX functionality: &lt;code&gt;$.ajax()&lt;/code&gt;, &lt;code&gt;$.get()&lt;/code&gt;, &lt;code&gt;$.post()&lt;/code&gt;, &lt;code&gt;$.ajaxSetup()&lt;/code&gt;, &lt;code&gt;.load()&lt;/code&gt;, transports, and ajax event shorthands such as &lt;code&gt;.ajaxStart()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ajax/xhr&lt;/strong&gt;: The XMLHTTPRequest AJAX transport only.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ajax/script&lt;/strong&gt;: The &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; AJAX transport only; used to retrieve scripts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;ajax/jsonp&lt;/strong&gt;: The JSONP AJAX transport only; depends on the ajax/script transport.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;css&lt;/strong&gt;: The &lt;code&gt;.css()&lt;/code&gt; method. Also removes &lt;strong&gt;all&lt;/strong&gt; modules depending on css (including &lt;strong&gt;effects&lt;/strong&gt;, &lt;strong&gt;dimensions&lt;/strong&gt;, and &lt;strong&gt;offset&lt;/strong&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;css/showHide&lt;/strong&gt;: Non-animated &lt;code&gt;.show()&lt;/code&gt;, &lt;code&gt;.hide()&lt;/code&gt; and &lt;code&gt;.toggle()&lt;/code&gt;; can be excluded if you use classes or explicit &lt;code&gt;.css()&lt;/code&gt; calls to set the &lt;code&gt;display&lt;/code&gt; property. Also removes the &lt;strong&gt;effects&lt;/strong&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;deprecated&lt;/strong&gt;: Methods documented as deprecated but not yet removed.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;dimensions&lt;/strong&gt;: The &lt;code&gt;.width()&lt;/code&gt; and &lt;code&gt;.height()&lt;/code&gt; methods, including &lt;code&gt;inner-&lt;/code&gt; and &lt;code&gt;outer-&lt;/code&gt; variations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;effects&lt;/strong&gt;: The &lt;code&gt;.animate()&lt;/code&gt; method and its shorthands such as &lt;code&gt;.slideUp()&lt;/code&gt; or &lt;code&gt;.hide(&#34;slow&#34;)&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event&lt;/strong&gt;: The &lt;code&gt;.on()&lt;/code&gt; and &lt;code&gt;.off()&lt;/code&gt; methods and all event functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event/trigger&lt;/strong&gt;: The &lt;code&gt;.trigger()&lt;/code&gt; and &lt;code&gt;.triggerHandler()&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;offset&lt;/strong&gt;: The &lt;code&gt;.offset()&lt;/code&gt;, &lt;code&gt;.position()&lt;/code&gt;, &lt;code&gt;.offsetParent()&lt;/code&gt;, &lt;code&gt;.scrollLeft()&lt;/code&gt;, and &lt;code&gt;.scrollTop()&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;wrap&lt;/strong&gt;: The &lt;code&gt;.wrap()&lt;/code&gt;, &lt;code&gt;.wrapAll()&lt;/code&gt;, &lt;code&gt;.wrapInner()&lt;/code&gt;, and &lt;code&gt;.unwrap()&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;core/ready&lt;/strong&gt;: Exclude the ready module if you place your scripts at the end of the body. Any ready callbacks bound with &lt;code&gt;jQuery()&lt;/code&gt; will simply be called immediately. However, &lt;code&gt;jQuery(document).ready()&lt;/code&gt; will not be a function and &lt;code&gt;.on(&#34;ready&#34;, ...)&lt;/code&gt; or similar will not be triggered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;deferred&lt;/strong&gt;: Exclude jQuery.Deferred. This also removes jQuery.Callbacks. &lt;em&gt;Note&lt;/em&gt; that modules that depend on jQuery.Deferred(AJAX, effects, core/ready) will not be removed and will still expect jQuery.Deferred to be there. Include your own jQuery.Deferred implementation or exclude those modules as well (&lt;code&gt;grunt custom:-deferred,-ajax,-effects,-core/ready&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;exports/global&lt;/strong&gt;: Exclude the attachment of global jQuery variables ($ and jQuery) to the window.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;exports/amd&lt;/strong&gt;: Exclude the AMD definition.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The build process shows a message for each dependent module it excludes or includes.&lt;/p&gt; &#xA;&lt;h5&gt;AMD name&lt;/h5&gt; &#xA;&lt;p&gt;As an option, you can set the module name for jQuery&#39;s AMD definition. By default, it is set to &#34;jquery&#34;, which plays nicely with plugins and third-party libraries, but there may be cases where you&#39;d like to change this. Simply set the &lt;code&gt;&#34;amd&#34;&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt custom --amd=&#34;custom-name&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, to define anonymously, set the name to an empty string.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt custom --amd=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom Build Examples&lt;/h4&gt; &#xA;&lt;p&gt;To create a custom build, first check out the version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git pull; git checkout VERSION&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where VERSION is the version you want to customize. Then, make sure all Node dependencies are installed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create the custom build using the &lt;code&gt;grunt custom&lt;/code&gt; option, listing the modules to be excluded.&lt;/p&gt; &#xA;&lt;p&gt;Exclude all &lt;strong&gt;ajax&lt;/strong&gt; functionality:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt custom:-ajax&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Excluding &lt;strong&gt;css&lt;/strong&gt; removes modules depending on CSS: &lt;strong&gt;effects&lt;/strong&gt;, &lt;strong&gt;offset&lt;/strong&gt;, &lt;strong&gt;dimensions&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt custom:-css&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Exclude a bunch of modules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt custom:-ajax/jsonp,-css,-deprecated,-dimensions,-effects,-offset,-wrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is also a special alias to generate a build with the same configuration as the official jQuery Slim build is generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt custom:slim&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For questions or requests regarding custom builds, please start a thread on the &lt;a href=&#34;https://forum.jquery.com/developing-jquery-core&#34;&gt;Developing jQuery Core&lt;/a&gt; section of the forum. Due to the combinatorics and custom nature of these builds, they are not regularly tested in jQuery&#39;s unit test process.&lt;/p&gt; &#xA;&lt;h2&gt;Running the Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have the necessary dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start &lt;code&gt;grunt watch&lt;/code&gt; or &lt;code&gt;npm start&lt;/code&gt; to auto-build jQuery as you work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run the unit tests with a local server that supports PHP. Ensure that you run the site from the root directory, not the &#34;test&#34; directory. No database is required. Pre-configured php local servers are available for Windows and Mac. Here are some options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;http://www.wampserver.com/en/&#34;&gt;WAMP download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Mac: &lt;a href=&#34;https://www.mamp.info/en/downloads/&#34;&gt;MAMP download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Linux: &lt;a href=&#34;https://www.linux.com/training-tutorials/easy-lamp-server-installation/&#34;&gt;Setting up LAMP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/mongoose/&#34;&gt;Mongoose (most platforms)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building to a different directory&lt;/h2&gt; &#xA;&lt;p&gt;To copy the built jQuery files from &lt;code&gt;/dist&lt;/code&gt; to another directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;grunt &amp;amp;&amp;amp; grunt dist:/path/to/special/location/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With this example, the output files would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;/path/to/special/location/jquery.js&#xA;/path/to/special/location/jquery.min.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To add a permanent copy destination, create a file in &lt;code&gt;dist/&lt;/code&gt; called &#34;.destination.json&#34;. Inside the file, paste and customize the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#xA;{&#xA;  &#34;/Absolute/path/to/other/destination&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, both methods can be combined.&lt;/p&gt; &#xA;&lt;h2&gt;Essential Git&lt;/h2&gt; &#xA;&lt;p&gt;As the source code is handled by the Git version control system, it&#39;s useful to know some features used.&lt;/p&gt; &#xA;&lt;h3&gt;Cleaning&lt;/h3&gt; &#xA;&lt;p&gt;If you want to purge your working directory back to the status of upstream, the following commands can be used (remember everything you&#39;ve worked on is gone after these):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git reset --hard upstream/main&#xA;git clean -fdx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Rebasing&lt;/h3&gt; &#xA;&lt;p&gt;For feature/topic branches, you should always use the &lt;code&gt;--rebase&lt;/code&gt; flag to &lt;code&gt;git pull&lt;/code&gt;, or if you are usually handling many temporary &#34;to be in a github pull request&#34; branches, run the following to automate this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git config branch.autosetuprebase local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(see &lt;code&gt;man git-config&lt;/code&gt; for more information)&lt;/p&gt; &#xA;&lt;h3&gt;Handling merge conflicts&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re getting merge conflicts when merging, instead of editing the conflicted files manually, you can use the feature &lt;code&gt;git mergetool&lt;/code&gt;. Even though the default tool &lt;code&gt;xxdiff&lt;/code&gt; looks awful/old, it&#39;s rather useful.&lt;/p&gt; &#xA;&lt;p&gt;The following are some commands that can be used there:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + Alt + M&lt;/code&gt; - automerge as much as possible&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;b&lt;/code&gt; - jump to next merge conflict&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;s&lt;/code&gt; - change the order of the conflicted lines&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;u&lt;/code&gt; - undo a merge&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;left mouse button&lt;/code&gt; - mark a block to be the winner&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;middle mouse button&lt;/code&gt; - mark a line to be the winner&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + S&lt;/code&gt; - save&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Ctrl + Q&lt;/code&gt; - quit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://api.qunitjs.com&#34;&gt;QUnit&lt;/a&gt; Reference&lt;/h2&gt; &#xA;&lt;h3&gt;Test methods&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;expect( numAssertions );&#xA;stop();&#xA;start();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: QUnit&#39;s eventual addition of an argument to stop/start is ignored in this test suite so that start and stop can be passed as callbacks without worrying about their parameters.&lt;/p&gt; &#xA;&lt;h3&gt;Test assertions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;ok( value, [message] );&#xA;equal( actual, expected, [message] );&#xA;notEqual( actual, expected, [message] );&#xA;deepEqual( actual, expected, [message] );&#xA;notDeepEqual( actual, expected, [message] );&#xA;strictEqual( actual, expected, [message] );&#xA;notStrictEqual( actual, expected, [message] );&#xA;throws( block, [expected], [message] );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Test Suite Convenience Methods Reference (See &lt;a href=&#34;https://github.com/jquery/jquery/raw/main/test/data/testinit.js&#34;&gt;test/data/testinit.js&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;h3&gt;Returns an array of elements with the given IDs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;q( ... );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;q(&#34;main&#34;, &#34;foo&#34;, &#34;bar&#34;);&#xA;&#xA;=&amp;gt; [ div#main, span#foo, input#bar ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Asserts that a selection matches the given IDs&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;t( testName, selector, [ &#34;array&#34;, &#34;of&#34;, &#34;ids&#34; ] );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;t(&#34;Check for something&#34;, &#34;//[a]&#34;, [&#34;foo&#34;, &#34;bar&#34;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Fires a native DOM event without going through jQuery&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fireNative( node, eventType )&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;fireNative( jQuery(&#34;#elem&#34;)[0], &#34;click&#34; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add random number to url to stop caching&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;url( &#34;some/url&#34; );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;url(&#34;index.html&#34;);&#xA;&#xA;=&amp;gt; &#34;data/index.html?10538358428943&#34;&#xA;&#xA;&#xA;url(&#34;mock.php?foo=bar&#34;);&#xA;&#xA;=&amp;gt; &#34;data/mock.php?foo=bar&amp;amp;10538358345554&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Run tests in an iframe&lt;/h3&gt; &#xA;&lt;p&gt;Some tests may require a document other than the standard test fixture, and these can be run in a separate iframe. The actual test code and assertions remain in jQuery&#39;s main test files; only the minimal test fixture markup and setup code should be placed in the iframe file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;testIframe( testName, fileName,&#xA;  function testCallback(&#xA;      assert, jQuery, window, document,&#xA;&#x9;  [ additional args ] ) {&#xA;&#x9;...&#xA;  } );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This loads a page, constructing a url with fileName &lt;code&gt;&#34;./data/&#34; + fileName&lt;/code&gt;. The iframed page determines when the callback occurs in the test by including the &#34;/test/data/iframeTest.js&#34; script and calling &lt;code&gt;startIframeTest( [ additional args ] )&lt;/code&gt; when appropriate. Often this will be after either document ready or &lt;code&gt;window.onload&lt;/code&gt; fires.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;testCallback&lt;/code&gt; receives the QUnit &lt;code&gt;assert&lt;/code&gt; object created by &lt;code&gt;testIframe&lt;/code&gt; for this test, followed by the global &lt;code&gt;jQuery&lt;/code&gt;, &lt;code&gt;window&lt;/code&gt;, and &lt;code&gt;document&lt;/code&gt; from the iframe. If the iframe code passes any arguments to &lt;code&gt;startIframeTest&lt;/code&gt;, they follow the &lt;code&gt;document&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;If you have any questions, please feel free to ask on the &lt;a href=&#34;https://forum.jquery.com/developing-jquery-core&#34;&gt;Developing jQuery Core forum&lt;/a&gt; or in #jquery on &lt;a href=&#34;https://web.libera.chat/&#34;&gt;libera&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZhangMYihua/crwn-clothing-v2</title>
    <updated>2022-07-18T01:34:41Z</updated>
    <id>tag:github.com,2022-07-18:/ZhangMYihua/crwn-clothing-v2</id>
    <link href="https://github.com/ZhangMYihua/crwn-clothing-v2" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Version 2 of Crwn-Clothing!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;How to fork and clone&lt;/h1&gt; &#xA;&lt;p&gt;One quick note about cloning this project. If you wish to make commits and push your own code, you&#39;ll need to fork the project first. Forking allows you to have your own copy of this repository by adding a duplicate version in your own profile!&lt;/p&gt; &#xA;&lt;p&gt;You can see the fork button in the top right corner of every GitHub project; click it and a copy of the project will be added to your GitHub profile under the same name as the original project.&lt;/p&gt; &#xA;&lt;img width=&#34;612&#34; alt=&#34;github fork&#34; src=&#34;https://user-images.githubusercontent.com/10578605/157998981-4bfd1f83-825c-4664-b22d-b2c7d471dc70.png&#34;&gt; &#xA;&lt;p&gt;After forking the project, simply clone it the way you would from the new forked project in your own GitHub repository and you can commit and push to it freely!&lt;/p&gt; &#xA;&lt;h1&gt;After you fork and clone:&lt;/h1&gt; &#xA;&lt;h2&gt;Install dependencies&lt;/h2&gt; &#xA;&lt;p&gt;In your terminal after you clone your project down, remember to run either &lt;code&gt;yarn&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt; to build all the dependencies in the project.&lt;/p&gt; &#xA;&lt;h2&gt;Set your firebase config&lt;/h2&gt; &#xA;&lt;p&gt;Remember to replace the config variable in your firebase.utils.js with your own config object from the firebase dashboard! Navigate to the project settings gear icon &amp;gt; project settings and scroll down to the config code. Copy the object in the code and replace the variable in your cloned code.&lt;/p&gt; &#xA;&lt;img width=&#34;1261&#34; alt=&#34;Screen Shot 2022-03-11 at 8 51 22 PM&#34; src=&#34;https://user-images.githubusercontent.com/10578605/157999158-10e921cc-9ee5-46f6-a0c5-1ae5686f54f3.png&#34;&gt; &#xA;&lt;h1&gt;Branching strategy&lt;/h1&gt; &#xA;&lt;p&gt;After forking this repository and cloning it down, you will have access to all the lesson branches with code at different checkpoints throughout the course. If for some reason you need to work from the codebase at one of these lesson branch checkpoints, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Checkout to the lesson-# (let&#39;s use lesson-15 as an example) branch&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout lesson-15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Branch off from lesson-15. This will create a new branch where the code of lesson-15 is the basis for your new branch. You can name your new branch whatever you want! Let&#39;s say we use my-main-branch as the name.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout -b my-main-branch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Now you can just code on this branch, push code from this branch up to your forked repo etc. The main thing to remember is that you want to be on this branch for your own code, so remember what you named this branch!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>