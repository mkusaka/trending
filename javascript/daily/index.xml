<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-28T01:37:48Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>node-fetch/node-fetch</title>
    <updated>2023-01-28T01:37:48Z</updated>
    <id>tag:github.com,2023-01-28:/node-fetch/node-fetch</id>
    <link href="https://github.com/node-fetch/node-fetch" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A light-weight module that brings the Fetch API to Node.js&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/docs/media/Banner.svg?sanitize=true&#34; alt=&#34;Node Fetch&#34;&gt; &#xA; &lt;br&gt; &#xA; &lt;p&gt;A light-weight module that brings &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API&#34;&gt;Fetch API&lt;/a&gt; to Node.js.&lt;/p&gt; &#xA; &lt;a href=&#34;https://github.com/node-fetch/node-fetch/actions&#34;&gt;&lt;img src=&#34;https://github.com/node-fetch/node-fetch/workflows/CI/badge.svg?branch=master&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://coveralls.io/github/node-fetch/node-fetch&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/node-fetch/node-fetch&#34; alt=&#34;Coverage status&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://packagephobia.now.sh/result?p=node-fetch&#34;&gt;&lt;img src=&#34;https://badgen.net/packagephobia/install/node-fetch&#34; alt=&#34;Current version&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/node-fetch&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/node-fetch&#34; alt=&#34;Install size&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/sindresorhus/awesome-nodejs&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; alt=&#34;Mentioned in Awesome Node.js&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/Zxbndcm&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/619915844268326952?color=%237289DA&amp;amp;label=Discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;b&gt;Consider supporting us on our Open Collective:&lt;/b&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://opencollective.com/node-fetch&#34;&gt;&lt;img src=&#34;https://opencollective.com/node-fetch/donate/button.png?color=blue&#34; alt=&#34;Open Collective&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;You might be looking for the &lt;a href=&#34;https://github.com/node-fetch/node-fetch/tree/2.x#readme&#34;&gt;v2 docs&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;!-- TOC --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#difference-from-client-side-fetch&#34;&gt;Difference from client-side fetch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#loading-and-configuring-the-module&#34;&gt;Loading and configuring the module&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#upgrading&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#common-usage&#34;&gt;Common Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#plain-text-or-html&#34;&gt;Plain text or HTML&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#json&#34;&gt;JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#simple-post&#34;&gt;Simple Post&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#post-with-json&#34;&gt;Post with JSON&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#post-with-form-parameters&#34;&gt;Post with form parameters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#handling-exceptions&#34;&gt;Handling exceptions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#handling-client-and-server-errors&#34;&gt;Handling client and server errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#handling-cookies&#34;&gt;Handling cookies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#advanced-usage&#34;&gt;Advanced Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#streams&#34;&gt;Streams&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#accessing-headers-and-other-metadata&#34;&gt;Accessing Headers and other Metadata&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#extract-set-cookie-header&#34;&gt;Extract Set-Cookie Header&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#post-data-using-a-file&#34;&gt;Post data using a file&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#request-cancellation-with-abortsignal&#34;&gt;Request cancellation with AbortSignal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#fetchurl-options&#34;&gt;fetch(url[, options])&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#options&#34;&gt;Options&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#default-headers&#34;&gt;Default Headers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#custom-agent&#34;&gt;Custom Agent&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#custom-highwatermark&#34;&gt;Custom highWaterMark&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#insecure-http-parser&#34;&gt;Insecure HTTP Parser&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#class-request&#34;&gt;Class: Request&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#new-requestinput-options&#34;&gt;new Request(input[, options])&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#class-response&#34;&gt;Class: Response&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#new-responsebody-options&#34;&gt;new Response([body[, options]])&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#responseok&#34;&gt;response.ok&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#responseredirected&#34;&gt;response.redirected&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#responsetype&#34;&gt;response.type&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#class-headers&#34;&gt;Class: Headers&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#new-headersinit&#34;&gt;new Headers([init])&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#interface-body&#34;&gt;Interface: Body&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#bodybody&#34;&gt;body.body&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#bodybodyused&#34;&gt;body.bodyUsed&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#bodyarraybuffer&#34;&gt;body.arrayBuffer()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#bodyblob&#34;&gt;body.blob()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#formdata&#34;&gt;body.formData()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#bodyjson&#34;&gt;body.json()&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#bodytext&#34;&gt;body.text()&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#class-fetcherror&#34;&gt;Class: FetchError&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#class-aborterror&#34;&gt;Class: AbortError&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#typescript&#34;&gt;TypeScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#acknowledgement&#34;&gt;Acknowledgement&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#team&#34;&gt;Team&lt;/a&gt; - &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#former&#34;&gt;Former&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- /TOC --&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;Instead of implementing &lt;code&gt;XMLHttpRequest&lt;/code&gt; in Node.js to run browser-specific &lt;a href=&#34;https://github.com/github/fetch&#34;&gt;Fetch polyfill&lt;/a&gt;, why not go from native &lt;code&gt;http&lt;/code&gt; to &lt;code&gt;fetch&lt;/code&gt; API directly? Hence, &lt;code&gt;node-fetch&lt;/code&gt;, minimal code for a &lt;code&gt;window.fetch&lt;/code&gt; compatible API on Node.js runtime.&lt;/p&gt; &#xA;&lt;p&gt;See Jason Miller&#39;s &lt;a href=&#34;https://www.npmjs.com/package/isomorphic-unfetch&#34;&gt;isomorphic-unfetch&lt;/a&gt; or Leonardo Quixada&#39;s &lt;a href=&#34;https://github.com/lquixada/cross-fetch&#34;&gt;cross-fetch&lt;/a&gt; for isomorphic usage (exports &lt;code&gt;node-fetch&lt;/code&gt; for server-side, &lt;code&gt;whatwg-fetch&lt;/code&gt; for client-side).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stay consistent with &lt;code&gt;window.fetch&lt;/code&gt; API.&lt;/li&gt; &#xA; &lt;li&gt;Make conscious trade-off when following &lt;a href=&#34;https://fetch.spec.whatwg.org/&#34;&gt;WHATWG fetch spec&lt;/a&gt; and &lt;a href=&#34;https://streams.spec.whatwg.org/&#34;&gt;stream spec&lt;/a&gt; implementation details, document known differences.&lt;/li&gt; &#xA; &lt;li&gt;Use native promise and async functions.&lt;/li&gt; &#xA; &lt;li&gt;Use native Node streams for body, on both request and response.&lt;/li&gt; &#xA; &lt;li&gt;Decode content encoding (gzip/deflate/brotli) properly, and convert string output (such as &lt;code&gt;res.text()&lt;/code&gt; and &lt;code&gt;res.json()&lt;/code&gt;) to UTF-8 automatically.&lt;/li&gt; &#xA; &lt;li&gt;Useful extensions such as redirect limit, response size limit, &lt;a href=&#34;https://github.com/node-fetch/node-fetch/raw/master/docs/ERROR-HANDLING.md&#34;&gt;explicit errors&lt;/a&gt; for troubleshooting.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Difference from client-side fetch&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;See known differences: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/docs/v3-LIMITS.md&#34;&gt;As of v3.x&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/docs/v2-LIMITS.md&#34;&gt;As of v2.x&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you happen to use a missing feature that &lt;code&gt;window.fetch&lt;/code&gt; offers, feel free to open an issue.&lt;/li&gt; &#xA; &lt;li&gt;Pull requests are welcomed too!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Current stable release (&lt;code&gt;3.x&lt;/code&gt;) requires at least Node.js 12.20.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install node-fetch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loading and configuring the module&lt;/h2&gt; &#xA;&lt;h3&gt;ES Modules (ESM)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CommonJS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;node-fetch&lt;/code&gt; from v3 is an ESM-only module - you are not able to import it with &lt;code&gt;require()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you cannot switch to ESM, please use v2 which remains compatible with CommonJS. Critical bug fixes will continue to be published for v2.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install node-fetch@2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use the async &lt;code&gt;import()&lt;/code&gt; function from CommonJS to load &lt;code&gt;node-fetch&lt;/code&gt; asynchronously:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// mod.cjs&#xA;const fetch = (...args) =&amp;gt; import(&#39;node-fetch&#39;).then(({default: fetch}) =&amp;gt; fetch(...args));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Providing global access&lt;/h3&gt; &#xA;&lt;p&gt;To use &lt;code&gt;fetch()&lt;/code&gt; without importing it, you can patch the &lt;code&gt;global&lt;/code&gt; object in node:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// fetch-polyfill.js&#xA;import fetch, {&#xA;  Blob,&#xA;  blobFrom,&#xA;  blobFromSync,&#xA;  File,&#xA;  fileFrom,&#xA;  fileFromSync,&#xA;  FormData,&#xA;  Headers,&#xA;  Request,&#xA;  Response,&#xA;} from &#39;node-fetch&#39;&#xA;&#xA;if (!globalThis.fetch) {&#xA;  globalThis.fetch = fetch&#xA;  globalThis.Headers = Headers&#xA;  globalThis.Request = Request&#xA;  globalThis.Response = Response&#xA;}&#xA;&#xA;// index.js&#xA;import &#39;./fetch-polyfill&#39;&#xA;&#xA;// ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;Using an old version of node-fetch? Check out the following files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/docs/v3-UPGRADE-GUIDE.md&#34;&gt;2.x to 3.x upgrade guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/docs/v2-UPGRADE-GUIDE.md&#34;&gt;1.x to 2.x upgrade guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/node-fetch/node-fetch/releases&#34;&gt;Changelog&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Common Usage&lt;/h2&gt; &#xA;&lt;p&gt;NOTE: The documentation below is up-to-date with &lt;code&gt;3.x&lt;/code&gt; releases, if you are using an older version, please check how to &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#upgrading&#34;&gt;upgrade&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Plain text or HTML&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://github.com/&#39;);&#xA;const body = await response.text();&#xA;&#xA;console.log(body);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JSON&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://api.github.com/users/github&#39;);&#xA;const data = await response.json();&#xA;&#xA;console.log(data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simple Post&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://httpbin.org/post&#39;, {method: &#39;POST&#39;, body: &#39;a=1&#39;});&#xA;const data = await response.json();&#xA;&#xA;console.log(data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Post with JSON&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const body = {a: 1};&#xA;&#xA;const response = await fetch(&#39;https://httpbin.org/post&#39;, {&#xA;&#x9;method: &#39;post&#39;,&#xA;&#x9;body: JSON.stringify(body),&#xA;&#x9;headers: {&#39;Content-Type&#39;: &#39;application/json&#39;}&#xA;});&#xA;const data = await response.json();&#xA;&#xA;console.log(data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Post with form parameters&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;URLSearchParams&lt;/code&gt; is available on the global object in Node.js as of v10.0.0. See &lt;a href=&#34;https://nodejs.org/api/url.html#url_class_urlsearchparams&#34;&gt;official documentation&lt;/a&gt; for more usage methods.&lt;/p&gt; &#xA;&lt;p&gt;NOTE: The &lt;code&gt;Content-Type&lt;/code&gt; header is only set automatically to &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; when an instance of &lt;code&gt;URLSearchParams&lt;/code&gt; is given as such:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const params = new URLSearchParams();&#xA;params.append(&#39;a&#39;, 1);&#xA;&#xA;const response = await fetch(&#39;https://httpbin.org/post&#39;, {method: &#39;POST&#39;, body: params});&#xA;const data = await response.json();&#xA;&#xA;console.log(data);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling exceptions&lt;/h3&gt; &#xA;&lt;p&gt;NOTE: 3xx-5xx responses are &lt;em&gt;NOT&lt;/em&gt; exceptions, and should be handled in &lt;code&gt;then()&lt;/code&gt;, see the next section.&lt;/p&gt; &#xA;&lt;p&gt;Wrapping the fetch function into a &lt;code&gt;try/catch&lt;/code&gt; block will catch &lt;em&gt;all&lt;/em&gt; exceptions, such as errors originating from node core libraries, like network errors, and operational errors which are instances of FetchError. See the &lt;a href=&#34;https://github.com/node-fetch/node-fetch/raw/master/docs/ERROR-HANDLING.md&#34;&gt;error handling document&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;try {&#xA;&#x9;await fetch(&#39;https://domain.invalid/&#39;);&#xA;} catch (error) {&#xA;&#x9;console.log(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling client and server errors&lt;/h3&gt; &#xA;&lt;p&gt;It is common to create a helper function to check that the response contains no client (4xx) or server (5xx) error responses:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;class HTTPResponseError extends Error {&#xA;&#x9;constructor(response) {&#xA;&#x9;&#x9;super(`HTTP Error Response: ${response.status} ${response.statusText}`);&#xA;&#x9;&#x9;this.response = response;&#xA;&#x9;}&#xA;}&#xA;&#xA;const checkStatus = response =&amp;gt; {&#xA;&#x9;if (response.ok) {&#xA;&#x9;&#x9;// response.status &amp;gt;= 200 &amp;amp;&amp;amp; response.status &amp;lt; 300&#xA;&#x9;&#x9;return response;&#xA;&#x9;} else {&#xA;&#x9;&#x9;throw new HTTPResponseError(response);&#xA;&#x9;}&#xA;}&#xA;&#xA;const response = await fetch(&#39;https://httpbin.org/status/400&#39;);&#xA;&#xA;try {&#xA;&#x9;checkStatus(response);&#xA;} catch (error) {&#xA;&#x9;console.error(error);&#xA;&#xA;&#x9;const errorBody = await error.response.text();&#xA;&#x9;console.error(`Error body: ${errorBody}`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Handling cookies&lt;/h3&gt; &#xA;&lt;p&gt;Cookies are not stored by default. However, cookies can be extracted and passed by manipulating request and response headers. See &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#extract-set-cookie-header&#34;&gt;Extract Set-Cookie Header&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Streams&lt;/h3&gt; &#xA;&lt;p&gt;The &#34;Node.js way&#34; is to use streams when possible. You can pipe &lt;code&gt;res.body&lt;/code&gt; to another stream. This example uses &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_stream_pipeline_streams_callback&#34;&gt;stream.pipeline&lt;/a&gt; to attach stream error handlers and wait for the download to complete.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {createWriteStream} from &#39;node:fs&#39;;&#xA;import {pipeline} from &#39;node:stream&#39;;&#xA;import {promisify} from &#39;node:util&#39;&#xA;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const streamPipeline = promisify(pipeline);&#xA;&#xA;const response = await fetch(&#39;https://github.githubassets.com/images/modules/logos_page/Octocat.png&#39;);&#xA;&#xA;if (!response.ok) throw new Error(`unexpected response ${response.statusText}`);&#xA;&#xA;await streamPipeline(response.body, createWriteStream(&#39;./octocat.png&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Node.js 14 you can also use async iterators to read &lt;code&gt;body&lt;/code&gt;; however, be careful to catch errors -- the longer a response runs, the more likely it is to encounter an error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://httpbin.org/stream/3&#39;);&#xA;&#xA;try {&#xA;&#x9;for await (const chunk of response.body) {&#xA;&#x9;&#x9;console.dir(JSON.parse(chunk.toString()));&#xA;&#x9;}&#xA;} catch (err) {&#xA;&#x9;console.error(err.stack);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Node.js 12 you can also use async iterators to read &lt;code&gt;body&lt;/code&gt;; however, async iterators with streams did not mature until Node.js 14, so you need to do some extra work to ensure you handle errors directly from the stream and wait on it response to fully close.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const read = async body =&amp;gt; {&#xA;&#x9;let error;&#xA;&#x9;body.on(&#39;error&#39;, err =&amp;gt; {&#xA;&#x9;&#x9;error = err;&#xA;&#x9;});&#xA;&#xA;&#x9;for await (const chunk of body) {&#xA;&#x9;&#x9;console.dir(JSON.parse(chunk.toString()));&#xA;&#x9;}&#xA;&#xA;&#x9;return new Promise((resolve, reject) =&amp;gt; {&#xA;&#x9;&#x9;body.on(&#39;close&#39;, () =&amp;gt; {&#xA;&#x9;&#x9;&#x9;error ? reject(error) : resolve();&#xA;&#x9;&#x9;});&#xA;&#x9;});&#xA;};&#xA;&#xA;try {&#xA;&#x9;const response = await fetch(&#39;https://httpbin.org/stream/3&#39;);&#xA;&#x9;await read(response.body);&#xA;} catch (err) {&#xA;&#x9;console.error(err.stack);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Accessing Headers and other Metadata&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://github.com/&#39;);&#xA;&#xA;console.log(response.ok);&#xA;console.log(response.status);&#xA;console.log(response.statusText);&#xA;console.log(response.headers.raw());&#xA;console.log(response.headers.get(&#39;content-type&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Extract Set-Cookie Header&lt;/h3&gt; &#xA;&lt;p&gt;Unlike browsers, you can access raw &lt;code&gt;Set-Cookie&lt;/code&gt; headers manually using &lt;code&gt;Headers.raw()&lt;/code&gt;. This is a &lt;code&gt;node-fetch&lt;/code&gt; only API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://example.com&#39;);&#xA;&#xA;// Returns an array of values, instead of a string of comma-separated values&#xA;console.log(response.headers.raw()[&#39;set-cookie&#39;]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Post data using a file&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch, {&#xA;  Blob,&#xA;  blobFrom,&#xA;  blobFromSync,&#xA;  File,&#xA;  fileFrom,&#xA;  fileFromSync,&#xA;} from &#39;node-fetch&#39;&#xA;&#xA;const mimetype = &#39;text/plain&#39;&#xA;const blob = fileFromSync(&#39;./input.txt&#39;, mimetype)&#xA;const url = &#39;https://httpbin.org/post&#39;&#xA;&#xA;const response = await fetch(url, { method: &#39;POST&#39;, body: blob })&#xA;const data = await response.json()&#xA;&#xA;console.log(data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;node-fetch comes with a spec-compliant &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/FormData&#34;&gt;FormData&lt;/a&gt; implementations for posting multipart/form-data payloads&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch, { FormData, File, fileFrom } from &#39;node-fetch&#39;&#xA;&#xA;const httpbin = &#39;https://httpbin.org/post&#39;&#xA;const formData = new FormData()&#xA;const binary = new Uint8Array([ 97, 98, 99 ])&#xA;const abc = new File([binary], &#39;abc.txt&#39;, { type: &#39;text/plain&#39; })&#xA;&#xA;formData.set(&#39;greeting&#39;, &#39;Hello, world!&#39;)&#xA;formData.set(&#39;file-upload&#39;, abc, &#39;new name.txt&#39;)&#xA;&#xA;const response = await fetch(httpbin, { method: &#39;POST&#39;, body: formData })&#xA;const data = await response.json()&#xA;&#xA;console.log(data)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you for some reason need to post a stream coming from any arbitrary place, then you can append a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Blob&#34;&gt;Blob&lt;/a&gt; or a &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/File&#34;&gt;File&lt;/a&gt; look-a-like item.&lt;/p&gt; &#xA;&lt;p&gt;The minimum requirement is that it has:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;A &lt;code&gt;Symbol.toStringTag&lt;/code&gt; getter or property that is either &lt;code&gt;Blob&lt;/code&gt; or &lt;code&gt;File&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;A known size.&lt;/li&gt; &#xA; &lt;li&gt;And either a &lt;code&gt;stream()&lt;/code&gt; method or a &lt;code&gt;arrayBuffer()&lt;/code&gt; method that returns a ArrayBuffer.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;code&gt;stream()&lt;/code&gt; must return any async iterable object as long as it yields Uint8Array (or Buffer) so Node.Readable streams and whatwg streams works just fine.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;formData.append(&#39;upload&#39;, {&#xA;&#x9;[Symbol.toStringTag]: &#39;Blob&#39;,&#xA;&#x9;size: 3,&#xA;  *stream() {&#xA;    yield new Uint8Array([97, 98, 99])&#xA;&#x9;},&#xA;&#x9;arrayBuffer() {&#xA;&#x9;&#x9;return new Uint8Array([97, 98, 99]).buffer&#xA;&#x9;}&#xA;}, &#39;abc.txt&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Request cancellation with AbortSignal&lt;/h3&gt; &#xA;&lt;p&gt;You may cancel requests with &lt;code&gt;AbortController&lt;/code&gt;. A suggested implementation is &lt;a href=&#34;https://www.npmjs.com/package/abort-controller&#34;&gt;&lt;code&gt;abort-controller&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;An example of timing out a request after 150ms could be achieved as the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch, { AbortError } from &#39;node-fetch&#39;;&#xA;&#xA;// AbortController was added in node v14.17.0 globally&#xA;const AbortController = globalThis.AbortController || await import(&#39;abort-controller&#39;)&#xA;&#xA;const controller = new AbortController();&#xA;const timeout = setTimeout(() =&amp;gt; {&#xA;&#x9;controller.abort();&#xA;}, 150);&#xA;&#xA;try {&#xA;&#x9;const response = await fetch(&#39;https://example.com&#39;, {signal: controller.signal});&#xA;&#x9;const data = await response.json();&#xA;} catch (error) {&#xA;&#x9;if (error instanceof AbortError) {&#xA;&#x9;&#x9;console.log(&#39;request was aborted&#39;);&#xA;&#x9;}&#xA;} finally {&#xA;&#x9;clearTimeout(timeout);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/node-fetch/node-fetch/raw/master/test/&#34;&gt;test cases&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;fetch(url[, options])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;url&lt;/code&gt; A string representing the URL for fetching&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#fetch-options&#34;&gt;Options&lt;/a&gt; for the HTTP(S) request&lt;/li&gt; &#xA; &lt;li&gt;Returns: &lt;code&gt;Promise&amp;lt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#class-response&#34;&gt;Response&lt;/a&gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Perform an HTTP(S) fetch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;url&lt;/code&gt; should be an absolute URL, such as &lt;code&gt;https://example.com/&lt;/code&gt;. A path-relative URL (&lt;code&gt;/file/under/root&lt;/code&gt;) or protocol-relative URL (&lt;code&gt;//can-be-http-or-https.com/&lt;/code&gt;) will result in a rejected &lt;code&gt;Promise&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;fetch-options&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;The default values are shown after each option key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;&#x9;// These properties are part of the Fetch Standard&#xA;&#x9;method: &#39;GET&#39;,&#xA;&#x9;headers: {},            // Request headers. format is the identical to that accepted by the Headers constructor (see below)&#xA;&#x9;body: null,             // Request body. can be null, or a Node.js Readable stream&#xA;&#x9;redirect: &#39;follow&#39;,     // Set to `manual` to extract redirect headers, `error` to reject redirect&#xA;&#x9;signal: null,           // Pass an instance of AbortSignal to optionally abort requests&#xA;&#xA;&#x9;// The following properties are node-fetch extensions&#xA;&#x9;follow: 20,             // maximum redirect count. 0 to not follow redirect&#xA;&#x9;compress: true,         // support gzip/deflate content encoding. false to disable&#xA;&#x9;size: 0,                // maximum response body size in bytes. 0 to disable&#xA;&#x9;agent: null,            // http(s).Agent instance or function that returns an instance (see below)&#xA;&#x9;highWaterMark: 16384,   // the maximum number of bytes to store in the internal buffer before ceasing to read from the underlying resource.&#xA;&#x9;insecureHTTPParser: false&#x9;// Use an insecure HTTP parser that accepts invalid HTTP headers when `true`.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Default Headers&lt;/h4&gt; &#xA;&lt;p&gt;If no values are set, the following request headers will be sent automatically:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Header&lt;/th&gt; &#xA;   &lt;th&gt;Value&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Accept-Encoding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gzip, deflate, br&lt;/code&gt; (when &lt;code&gt;options.compress === true&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Accept&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;*/*&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Connection&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;close&lt;/code&gt; &lt;em&gt;(when no &lt;code&gt;options.agent&lt;/code&gt; is present)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Content-Length&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(automatically calculated, if possible)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Host&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;em&gt;(host and port information from the target URI)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Transfer-Encoding&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;chunked&lt;/code&gt; &lt;em&gt;(when &lt;code&gt;req.body&lt;/code&gt; is a stream)&lt;/em&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;User-Agent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;node-fetch&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Note: when &lt;code&gt;body&lt;/code&gt; is a &lt;code&gt;Stream&lt;/code&gt;, &lt;code&gt;Content-Length&lt;/code&gt; is not set automatically.&lt;/p&gt; &#xA;&lt;h4&gt;Custom Agent&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;agent&lt;/code&gt; option allows you to specify networking related options which are out of the scope of Fetch, including and not limited to the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support self-signed certificate&lt;/li&gt; &#xA; &lt;li&gt;Use only IPv4 or IPv6&lt;/li&gt; &#xA; &lt;li&gt;Custom DNS Lookup&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://nodejs.org/api/http.html#http_new_agent_options&#34;&gt;&lt;code&gt;http.Agent&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;p&gt;In addition, the &lt;code&gt;agent&lt;/code&gt; option accepts a function that returns &lt;code&gt;http&lt;/code&gt;(s)&lt;code&gt;.Agent&lt;/code&gt; instance given current &lt;a href=&#34;https://nodejs.org/api/url.html&#34;&gt;URL&lt;/a&gt;, this is useful during a redirection chain across HTTP and HTTPS protocol.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import http from &#39;node:http&#39;;&#xA;import https from &#39;node:https&#39;;&#xA;&#xA;const httpAgent = new http.Agent({&#xA;&#x9;keepAlive: true&#xA;});&#xA;const httpsAgent = new https.Agent({&#xA;&#x9;keepAlive: true&#xA;});&#xA;&#xA;const options = {&#xA;&#x9;agent: function(_parsedURL) {&#xA;&#x9;&#x9;if (_parsedURL.protocol == &#39;http:&#39;) {&#xA;&#x9;&#x9;&#x9;return httpAgent;&#xA;&#x9;&#x9;} else {&#xA;&#x9;&#x9;&#x9;return httpsAgent;&#xA;&#x9;&#x9;}&#xA;&#x9;}&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;custom-highWaterMark&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Custom highWaterMark&lt;/h4&gt; &#xA;&lt;p&gt;Stream on Node.js have a smaller internal buffer size (16kB, aka &lt;code&gt;highWaterMark&lt;/code&gt;) from client-side browsers (&amp;gt;1MB, not consistent across browsers). Because of that, when you are writing an isomorphic app and using &lt;code&gt;res.clone()&lt;/code&gt;, it will hang with large response in Node.&lt;/p&gt; &#xA;&lt;p&gt;The recommended way to fix this problem is to resolve cloned response in parallel:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://example.com&#39;);&#xA;const r1 = response.clone();&#xA;&#xA;const results = await Promise.all([response.json(), r1.text()]);&#xA;&#xA;console.log(results[0]);&#xA;console.log(results[1]);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If for some reason you don&#39;t like the solution above, since &lt;code&gt;3.x&lt;/code&gt; you are able to modify the &lt;code&gt;highWaterMark&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import fetch from &#39;node-fetch&#39;;&#xA;&#xA;const response = await fetch(&#39;https://example.com&#39;, {&#xA;&#x9;// About 1MB&#xA;&#x9;highWaterMark: 1024 * 1024&#xA;});&#xA;&#xA;const result = await res.clone().arrayBuffer();&#xA;console.dir(result);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Insecure HTTP Parser&lt;/h4&gt; &#xA;&lt;p&gt;Passed through to the &lt;code&gt;insecureHTTPParser&lt;/code&gt; option on http(s).request. See &lt;a href=&#34;https://nodejs.org/api/http.html#http_http_request_url_options_callback&#34;&gt;&lt;code&gt;http.request&lt;/code&gt;&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h4&gt;Manual Redirect&lt;/h4&gt; &#xA;&lt;p&gt;The &lt;code&gt;redirect: &#39;manual&#39;&lt;/code&gt; option for node-fetch is different from the browser &amp;amp; specification, which results in an &lt;a href=&#34;https://fetch.spec.whatwg.org/#concept-filtered-response-opaque-redirect&#34;&gt;opaque-redirect filtered response&lt;/a&gt;. node-fetch gives you the typical &lt;a href=&#34;https://fetch.spec.whatwg.org/#concept-filtered-response-basic&#34;&gt;basic filtered response&lt;/a&gt; instead.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const fetch = require(&#39;node-fetch&#39;);&#xA;&#xA;const response = await fetch(&#39;https://httpbin.org/status/301&#39;, { redirect: &#39;manual&#39; });&#xA;&#xA;if (response.status === 301 || response.status === 302) {&#xA;&#x9;const locationURL = new URL(response.headers.get(&#39;location&#39;), response.url);&#xA;&#x9;const response2 = await fetch(locationURL, { redirect: &#39;manual&#39; });&#xA;&#x9;console.dir(response2);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;class-request&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Class: Request&lt;/h3&gt; &#xA;&lt;p&gt;An HTTP(S) request containing information about URL, method, headers, and the body. This class implements the &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#iface-body&#34;&gt;Body&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;Due to the nature of Node.js, the following properties are not implemented at this moment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;destination&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;credentials&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cache&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;integrity&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keepalive&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following node-fetch extension properties are provided:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;follow&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compress&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;counter&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;agent&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;highWaterMark&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#fetch-options&#34;&gt;options&lt;/a&gt; for exact meaning of these extensions.&lt;/p&gt; &#xA;&lt;h4&gt;new Request(input[, options])&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(spec-compliant)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;input&lt;/code&gt; A string representing a URL, or another &lt;code&gt;Request&lt;/code&gt; (which will be cloned)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#fetch-options&#34;&gt;Options&lt;/a&gt; for the HTTP(S) request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Constructs a new &lt;code&gt;Request&lt;/code&gt; object. The constructor is identical to that in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Request/Request&#34;&gt;browser&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In most cases, directly &lt;code&gt;fetch(url, options)&lt;/code&gt; is simpler than creating a &lt;code&gt;Request&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;class-response&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Class: Response&lt;/h3&gt; &#xA;&lt;p&gt;An HTTP(S) response. This class implements the &lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/#iface-body&#34;&gt;Body&lt;/a&gt; interface.&lt;/p&gt; &#xA;&lt;p&gt;The following properties are not implemented in node-fetch at this moment:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;trailer&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;new Response([body[, options]])&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(spec-compliant)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;body&lt;/code&gt; A &lt;code&gt;String&lt;/code&gt; or &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_streams&#34;&gt;&lt;code&gt;Readable&lt;/code&gt; stream&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;options&lt;/code&gt; A &lt;a href=&#34;https://fetch.spec.whatwg.org/#responseinit&#34;&gt;&lt;code&gt;ResponseInit&lt;/code&gt;&lt;/a&gt; options dictionary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Constructs a new &lt;code&gt;Response&lt;/code&gt; object. The constructor is identical to that in the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Response/Response&#34;&gt;browser&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Because Node.js does not implement service workers (for which this class was designed), one rarely has to construct a &lt;code&gt;Response&lt;/code&gt; directly.&lt;/p&gt; &#xA;&lt;h4&gt;response.ok&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(spec-compliant)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;p&gt;Convenience property representing if the request ended normally. Will evaluate to true if the response status was greater than or equal to 200 but smaller than 300.&lt;/p&gt; &#xA;&lt;h4&gt;response.redirected&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(spec-compliant)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;p&gt;Convenience property representing if the request has been redirected at least once. Will evaluate to true if the internal redirect counter is greater than 0.&lt;/p&gt; &#xA;&lt;h4&gt;response.type&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(deviation from spec)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;p&gt;Convenience property representing the response&#39;s type. node-fetch only supports &lt;code&gt;&#39;default&#39;&lt;/code&gt; and &lt;code&gt;&#39;error&#39;&lt;/code&gt; and does not make use of &lt;a href=&#34;https://fetch.spec.whatwg.org/#concept-filtered-response&#34;&gt;filtered responses&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;class-headers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Class: Headers&lt;/h3&gt; &#xA;&lt;p&gt;This class allows manipulating and iterating over a set of HTTP headers. All methods specified in the &lt;a href=&#34;https://fetch.spec.whatwg.org/&#34;&gt;Fetch Standard&lt;/a&gt; are implemented.&lt;/p&gt; &#xA;&lt;h4&gt;new Headers([init])&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(spec-compliant)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;init&lt;/code&gt; Optional argument to pre-fill the &lt;code&gt;Headers&lt;/code&gt; object&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Construct a new &lt;code&gt;Headers&lt;/code&gt; object. &lt;code&gt;init&lt;/code&gt; can be either &lt;code&gt;null&lt;/code&gt;, a &lt;code&gt;Headers&lt;/code&gt; object, an key-value map object or any iterable object.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Example adapted from https://fetch.spec.whatwg.org/#example-headers-class&#xA;import {Headers} from &#39;node-fetch&#39;;&#xA;&#xA;const meta = {&#xA;&#x9;&#39;Content-Type&#39;: &#39;text/xml&#39;&#xA;};&#xA;const headers = new Headers(meta);&#xA;&#xA;// The above is equivalent to&#xA;const meta = [[&#39;Content-Type&#39;, &#39;text/xml&#39;]];&#xA;const headers = new Headers(meta);&#xA;&#xA;// You can in fact use any iterable objects, like a Map or even another Headers&#xA;const meta = new Map();&#xA;meta.set(&#39;Content-Type&#39;, &#39;text/xml&#39;);&#xA;const headers = new Headers(meta);&#xA;const copyOfHeaders = new Headers(headers);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a id=&#34;iface-body&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface: Body&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Body&lt;/code&gt; is an abstract interface with methods that are applicable to both &lt;code&gt;Request&lt;/code&gt; and &lt;code&gt;Response&lt;/code&gt; classes.&lt;/p&gt; &#xA;&lt;h4&gt;body.body&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(deviation from spec)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_streams&#34;&gt;&lt;code&gt;Readable&lt;/code&gt; stream&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Data are encapsulated in the &lt;code&gt;Body&lt;/code&gt; object. Note that while the &lt;a href=&#34;https://fetch.spec.whatwg.org/&#34;&gt;Fetch Standard&lt;/a&gt; requires the property to always be a WHATWG &lt;code&gt;ReadableStream&lt;/code&gt;, in node-fetch it is a Node.js &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_streams&#34;&gt;&lt;code&gt;Readable&lt;/code&gt; stream&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;body.bodyUsed&lt;/h4&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(spec-compliant)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A boolean property for if this body has been consumed. Per the specs, a consumed body cannot be used again.&lt;/p&gt; &#xA;&lt;h4&gt;body.arrayBuffer()&lt;/h4&gt; &#xA;&lt;h4&gt;body.formData()&lt;/h4&gt; &#xA;&lt;h4&gt;body.blob()&lt;/h4&gt; &#xA;&lt;h4&gt;body.json()&lt;/h4&gt; &#xA;&lt;h4&gt;body.text()&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;fetch&lt;/code&gt; comes with methods to parse &lt;code&gt;multipart/form-data&lt;/code&gt; payloads as well as &lt;code&gt;x-www-form-urlencoded&lt;/code&gt; bodies using &lt;code&gt;.formData()&lt;/code&gt; this comes from the idea that Service Worker can intercept such messages before it&#39;s sent to the server to alter them. This is useful for anybody building a server so you can use it to parse &amp;amp; consume payloads.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Code example&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import http from &#39;node:http&#39;&#xA;import { Response } from &#39;node-fetch&#39;&#xA;&#xA;http.createServer(async function (req, res) {&#xA;  const formData = await new Response(req, {&#xA;    headers: req.headers // Pass along the boundary value&#xA;  }).formData()&#xA;  const allFields = [...formData]&#xA;&#xA;  const file = formData.get(&#39;uploaded-files&#39;)&#xA;  const arrayBuffer = await file.arrayBuffer()&#xA;  const text = await file.text()&#xA;  const whatwgReadableStream = file.stream()&#xA;&#xA;  // other was to consume the request could be to do:&#xA;  const json = await new Response(req).json()&#xA;  const text = await new Response(req).text()&#xA;  const arrayBuffer = await new Response(req).arrayBuffer()&#xA;  const blob = await new Response(req, {&#xA;    headers: req.headers // So that `type` inherits `Content-Type`&#xA;  }.blob()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a id=&#34;class-fetcherror&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Class: FetchError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(node-fetch extension)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;p&gt;An operational error in the fetching process. See &lt;a href=&#34;https://github.com/node-fetch/node-fetch/raw/master/docs/ERROR-HANDLING.md&#34;&gt;ERROR-HANDLING.md&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;class-aborterror&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Class: AbortError&lt;/h3&gt; &#xA;&lt;p&gt;&lt;small&gt;&lt;em&gt;(node-fetch extension)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Error thrown when the request is aborted in response to an &lt;code&gt;AbortSignal&lt;/code&gt;&#39;s &lt;code&gt;abort&lt;/code&gt; event. It has a &lt;code&gt;name&lt;/code&gt; property of &lt;code&gt;AbortError&lt;/code&gt;. See &lt;a href=&#34;https://github.com/node-fetch/node-fetch/raw/master/docs/ERROR-HANDLING.md&#34;&gt;ERROR-HANDLING.MD&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;TypeScript&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Since &lt;code&gt;3.x&lt;/code&gt; types are bundled with &lt;code&gt;node-fetch&lt;/code&gt;, so you don&#39;t need to install any additional packages.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For older versions please use the type definitions from &lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped&#34;&gt;DefinitelyTyped&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save-dev @types/node-fetch@2.x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Acknowledgement&lt;/h2&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/github/fetch&#34;&gt;github/fetch&lt;/a&gt; for providing a solid implementation reference.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/bitinn&#34;&gt;&lt;img src=&#34;https://github.com/bitinn.png?size=100&#34; alt=&#34;David Frank&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/jimmywarting&#34;&gt;&lt;img src=&#34;https://github.com/jimmywarting.png?size=100&#34; alt=&#34;Jimmy Wärting&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/xxczaki&#34;&gt;&lt;img src=&#34;https://github.com/xxczaki.png?size=100&#34; alt=&#34;Antoni Kepinski&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/Richienb&#34;&gt;&lt;img src=&#34;https://github.com/Richienb.png?size=100&#34; alt=&#34;Richie Bendall&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/gr2m&#34;&gt;&lt;img src=&#34;https://github.com/gr2m.png?size=100&#34; alt=&#34;Gregor Martynus&#34;&gt;&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://bitinn.net/&#34;&gt;David Frank&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://jimmy.warting.se/&#34;&gt;Jimmy Wärting&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://kepinski.ch&#34;&gt;Antoni Kepinski&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.richie-bendall.ml/&#34;&gt;Richie Bendall&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://twitter.com/gr2m&#34;&gt;Gregor Martynus&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h6&gt;Former&lt;/h6&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/timothygu&#34;&gt;Timothy Gu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jkantr&#34;&gt;Jared Kantrowitz&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/node-fetch/node-fetch/main/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>salman0ansari/whatsapp-api-nodejs</title>
    <updated>2023-01-28T01:37:48Z</updated>
    <id>tag:github.com,2023-01-28:/salman0ansari/whatsapp-api-nodejs</id>
    <link href="https://github.com/salman0ansari/whatsapp-api-nodejs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;RESTful WhatsApp API with Multiple Device Support&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; whatsapp-api-nodejs Multi Device&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://raw.githubusercontent.com/salman0ansari/whatsapp-api-nodejs/main/#&#34;&gt;&lt;img title=&#34;skynet&#34; src=&#34;https://img.shields.io/badge/whatsapp api nodejs Multi Device-black?style=for-the-badge&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;p&gt; &lt;a href=&#34;https://github.com/salman0ansari&#34;&gt;&lt;img title=&#34;Author&#34; src=&#34;https://img.shields.io/badge/Author-Mohd Salman Ansari-black.svg?style=for-the-badge&amp;amp;logo=github&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA; &lt;a href=&#34;https://github.com/salman0ansari?tab=followers&#34;&gt;&lt;img title=&#34;Followers&#34; src=&#34;https://img.shields.io/github/followers/salman0ansari?color=black&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/stargazers&#34;&gt;&lt;img title=&#34;Stars&#34; src=&#34;https://img.shields.io/github/stars/salman0ansari/whatsapp-api-nodejs?color=black&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/network/members&#34;&gt;&lt;img title=&#34;Forks&#34; src=&#34;https://img.shields.io/github/forks/salman0ansari/whatsapp-api-nodejs?color=black&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/issues&#34;&gt;&lt;img title=&#34;Issues&#34; src=&#34;https://img.shields.io/github/issues/salman0ansari/whatsapp-api-nodejs?color=black&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;p&gt;&lt;a href=&#34;http://github.com/salman0ansari/whatsapp-api-nodejs&#34;&gt;&lt;img title=&#34;Hits&#34; src=&#34;http://hits.dwyl.com/salman0ansari/whatsapp-api-nodejs.svg?style=flat-square&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;a href=&#34;https://www.buymeacoffee.com/salman0ansari&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;An implementation of &lt;a href=&#34;https://github.com/adiwajshing/Baileys/&#34;&gt;Baileys&lt;/a&gt; as a simple RESTful API service with multi device support just &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;install&lt;/code&gt;, and &lt;code&gt;start&lt;/code&gt; using, &lt;code&gt;simple&lt;/code&gt; as that.&lt;/p&gt; &#xA;&lt;h1&gt;Libraries Used&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adiwajshing/Baileys/&#34;&gt;Baileys&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/expressjs/express&#34;&gt;Express&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download or clone this repo.&lt;/li&gt; &#xA; &lt;li&gt;Enter to the project directory.&lt;/li&gt; &#xA; &lt;li&gt;Execute &lt;code&gt;yarn install&lt;/code&gt; to install the dependencies.&lt;/li&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;.env.example&lt;/code&gt; to &lt;code&gt;.env&lt;/code&gt; and set the environment variables.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Docker Compose&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://raw.githubusercontent.com/salman0ansari/whatsapp-api-nodejs/main/#installation&#34;&gt;Installation&lt;/a&gt; procedure.&lt;/li&gt; &#xA; &lt;li&gt;Update &lt;code&gt;.env&lt;/code&gt; and set&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;MONGODB_ENABLED=true&#xA;MONGODB_URL=mongodb://mongodb:27017/whatsapp_api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Set your &lt;code&gt;TOKEN=&lt;/code&gt; to a random string.&lt;/li&gt; &#xA; &lt;li&gt;Execute&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Edit environment variables on &lt;code&gt;.env&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-a&#34;&gt;Important: You must set TOKEN= to a random string to protect the route.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;# ==================================&#xA;# SECURITY CONFIGURATION&#xA;# ==================================&#xA;TOKEN=RANDOM_STRING_HERE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;DEVELOPMENT:&lt;/code&gt; Execute &lt;code&gt;yarn dev&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PRODUCTION:&lt;/code&gt; Execute &lt;code&gt;yarn start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Generate basic instance using random key.&lt;/h2&gt; &#xA;&lt;p&gt;To generate an Instance Key&lt;br&gt; Using the route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;localhost:3333/instance/init&#39; \&#xA;--data-raw &#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;error&#34;: false,&#xA;    &#34;message&#34;: &#34;Initializing successfull&#34;,&#xA;    &#34;key&#34;: &#34;d7e2abff-3ac8-44a9-a738-1b28e0fca8a5&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;WEBHOOK_ALLOWED_EVENTS&lt;/h2&gt; &#xA;&lt;p&gt;You can set which events you want to send to webhook by setting the environment variable &lt;code&gt;WEBHOOK_ALLOWED_EVENTS&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Set a comma seperated list of events you want to get notified about.&lt;/p&gt; &#xA;&lt;p&gt;Default value is &lt;code&gt;all&lt;/code&gt; which will forward all events.&lt;/p&gt; &#xA;&lt;p&gt;Allowed values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;connection&lt;/code&gt; - receive all connection events&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;connection:open&lt;/code&gt; - receive open connection events&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;connection:close&lt;/code&gt; - receive close connection events&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;presense&lt;/code&gt; - receive presence events&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;messages&lt;/code&gt; - receive all messages event&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;call&lt;/code&gt; - receive all events related to calls&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;call:terminate&lt;/code&gt; - receive call terminate events&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;call:offer&lt;/code&gt; - receive call terminate event&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;groups&lt;/code&gt; - receive all events related to groups&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;group_participants&lt;/code&gt; - receive all events related to group participants&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can also use the Baileys event format example: &lt;code&gt;messages.upsert&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Generate custom instance with custom key and custom webhook.&lt;/h2&gt; &#xA;&lt;p&gt;To generate a Custom Instance&lt;br&gt; Using the route:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl --location --request GET &#39;localhost:3333/instance/init?key=CUSTOM_INSTANCE_KEY_HERE&amp;amp;webhook=true&amp;amp;webhookUrl=https://webhook.site/d7114704-97f6-4562-9a47-dcf66b07266d&#39; \&#xA;--data-raw &#39;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;error&#34;: false,&#xA;    &#34;message&#34;: &#34;Initializing successfull&#34;,&#xA;    &#34;key&#34;: &#34;CUSTOM_INSTANCE_KEY_HERE&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Using Key&lt;/h1&gt; &#xA;&lt;p&gt;Save the value of the &lt;code&gt;key&lt;/code&gt; from response. Then use this value to call all the routes.&lt;/p&gt; &#xA;&lt;h2&gt;Postman Docs&lt;/h2&gt; &#xA;&lt;p&gt;All routes are available as a postman collection.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://documenter.getpostman.com/view/12514774/UVsPQkBq&#34;&gt;https://documenter.getpostman.com/view/12514774/UVsPQkBq&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;QR Code&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:3333/instance/qr?key=INSTANCE_KEY_HERE&#34;&gt;http://localhost:3333/instance/qr?key=INSTANCE_KEY_HERE&lt;/a&gt; to view the QR Code and scan with your device. If you take too long to scan the QR Code, you will have to refresh the page.&lt;/p&gt; &#xA;&lt;h2&gt;Send Message&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# /message/text?key=INSTANCE_KEY_HERE&amp;amp;id=PHONE-NUMBER-WITH-COUNTRY-CODE&amp;amp;message=MESSAGE&#xA;&#xA;curl --location --request POST &#39;localhost:3333/message/text?key=INSTANCE_KEY_HERE&#39; \&#xA;--header &#39;Content-Type: application/x-www-form-urlencoded&#39; \&#xA;--data-urlencode &#39;id=919999999999&#39; \&#xA;--data-urlencode &#39;message=Hello World&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Route&lt;/th&gt; &#xA;   &lt;th&gt;Source File&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Instance Routes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/raw/main/src/api/routes/instance.route.js&#34;&gt;instance.route.js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Message Routes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/raw/main/src/api/routes/message.route.js&#34;&gt;message.route.js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Group Routes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/raw/main/src/api/routes/group.route.js&#34;&gt;group.route.js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Miscellaneous Routes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/raw/main/src/api/routes/misc.route.js&#34;&gt;misc.route.js&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See all routes here &lt;a href=&#34;https://github.com/salman0ansari/whatsapp-api-nodejs/tree/main/src/api/routes&#34;&gt;src/api/routes&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Note&lt;/h1&gt; &#xA;&lt;p&gt;I can&#39;t guarantee or can be held responsible if you get blocked or banned by using this software. WhatsApp does not allow bots using unofficial methods on their platform, so this shouldn&#39;t be considered totally safe.&lt;/p&gt; &#xA;&lt;h1&gt;Legal&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This code is in no way affiliated, authorized, maintained, sponsored or endorsed by WA (WhatsApp) or any of its affiliates or subsidiaries.&lt;/li&gt; &#xA; &lt;li&gt;The official WhatsApp website can be found at &lt;a href=&#34;https://whatsapp.com&#34;&gt;https://whatsapp.com&lt;/a&gt;. &#34;WhatsApp&#34; as well as related names, marks, emblems and images are registered trademarks of their respective owners.&lt;/li&gt; &#xA; &lt;li&gt;This is an independent and unofficial software Use at your own risk.&lt;/li&gt; &#xA; &lt;li&gt;Do not spam people with this.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>