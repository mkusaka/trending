<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-07T01:37:24Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>midudev/kings-league-project</title>
    <updated>2023-01-07T01:37:24Z</updated>
    <id>tag:github.com,2023-01-07:/midudev/kings-league-project</id>
    <link href="https://github.com/midudev/kings-league-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API y website de la Kings League Infojobs por temas didácticos&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Kings League Project&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/maikCyphlock/kings-league-project/actions/workflows/deploy-api.yml&#34;&gt;&lt;img src=&#34;https://github.com/midudev/kings-league-project/actions/workflows/deploy-api.yml/badge.svg?branch=main&#34; alt=&#34;Deploy API&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/maikCyphlock/kings-league-project/actions/workflows/scrape-kings-league-web.yml&#34;&gt;&lt;img src=&#34;https://github.com/midudev/kings-league-project/actions/workflows/scrape-kings-league-web.yml/badge.svg?branch=main&#34; alt=&#34;Scrape Kings League Infojobs Website&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;LightHouse&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/emazzotta/lighthouse-badges&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/midudev/kings-league-project/main/test_results/lighthouse_accessibility.svg?sanitize=true&#34; alt=&#34;Lighthouse Accessibility Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emazzotta/lighthouse-badges&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/midudev/kings-league-project/main/test_results/lighthouse_best-practices.svg?sanitize=true&#34; alt=&#34;Lighthouse Best Practices Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emazzotta/lighthouse-badges&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/midudev/kings-league-project/main/test_results/lighthouse_performance.svg?sanitize=true&#34; alt=&#34;Lighthouse Performance Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emazzotta/lighthouse-badges&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/midudev/kings-league-project/main/test_results/lighthouse_pwa.svg?sanitize=true&#34; alt=&#34;Lighthouse PWA Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/emazzotta/lighthouse-badges&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/midudev/kings-league-project/main/test_results/lighthouse_seo.svg?sanitize=true&#34; alt=&#34;Lighthouse SEO Badge&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Este proyecto tiene como objetivo crear una API y página web de la Kings League con fines educativos.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Puedes probar la API en:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://api.kingsleague.dev/&#34;&gt;https://api.kingsleague.dev/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Los siguientes son los endpoints disponibles en la API:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/leaderboard&lt;/code&gt;: Devuelve la clasificación de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/teams&lt;/code&gt;: Devuelve todos los equipos de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/teams/:id&lt;/code&gt;: Devuelve un equipo de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/presidents&lt;/code&gt;: Devuelve todos los presidentes de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/presidents/:id&lt;/code&gt;: Devuelve un presidente de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/coaches&lt;/code&gt;: Devuelve todos los entrenadores de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/coaches/:teamId&lt;/code&gt;: Devuelve el entrenador de un equipo de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/top-scorers&lt;/code&gt;: Devuelve los goleadores más destacados de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/top-scorers/:rank&lt;/code&gt;: Devuelve el goleador más destacado de acurdo a su posicion en la lista de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/top-assists&lt;/code&gt;: Devuelve los asistentes más destacados de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/top-assists/:rank&lt;/code&gt;: Devuelve el asistente más destacado de acuerdo a su posicion en la lista de la Kings League.&lt;/li&gt; &#xA; &lt;li&gt;GET &lt;code&gt;/mvp&lt;/code&gt;: Devuelve los MVPs de la Kings League.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;¡Síguenos en nuestro canal de Twitch para ver cómo avanzamos en el desarrollo de la página web!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitch.tv/midudev&#34;&gt;https://twitch.tv/midudev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Nota: Este proyecto todavía se encuentra en desarrollo y no debe ser utilizado aún.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>auth0/node-jsonwebtoken</title>
    <updated>2023-01-07T01:37:24Z</updated>
    <id>tag:github.com,2023-01-07:/auth0/node-jsonwebtoken</id>
    <link href="https://github.com/auth0/node-jsonwebtoken" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JsonWebToken implementation for node.js http://self-issued.info/docs/draft-ietf-oauth-json-web-token.html&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;jsonwebtoken&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Build&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;strong&gt;Dependency&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://travis-ci.org/auth0/node-jsonwebtoken&#34;&gt;&lt;img src=&#34;https://secure.travis-ci.org/auth0/node-jsonwebtoken.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://david-dm.org/auth0/node-jsonwebtoken&#34;&gt;&lt;img src=&#34;https://david-dm.org/auth0/node-jsonwebtoken.svg?sanitize=true&#34; alt=&#34;Dependency Status&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;An implementation of &lt;a href=&#34;https://tools.ietf.org/html/rfc7519&#34;&gt;JSON Web Tokens&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This was developed against &lt;code&gt;draft-ietf-oauth-json-web-token-08&lt;/code&gt;. It makes use of &lt;a href=&#34;https://github.com/brianloveswords/node-jws&#34;&gt;node-jws&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install jsonwebtoken&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Migration notes&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/wiki/Migration-Notes:-v8-to-v9&#34;&gt;From v8 to v9&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/wiki/Migration-Notes:-v7-to-v8&#34;&gt;From v7 to v8&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;h3&gt;jwt.sign(payload, secretOrPrivateKey, [options, callback])&lt;/h3&gt; &#xA;&lt;p&gt;(Asynchronous) If a callback is supplied, the callback is called with the &lt;code&gt;err&lt;/code&gt; or the JWT.&lt;/p&gt; &#xA;&lt;p&gt;(Synchronous) Returns the JsonWebToken as string&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;payload&lt;/code&gt; could be an object literal, buffer or string representing valid JSON.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Please &lt;em&gt;note&lt;/em&gt; that&lt;/strong&gt; &lt;code&gt;exp&lt;/code&gt; or any other claim is only set if the payload is an object literal. Buffer or string payloads are not checked for JSON validity.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If &lt;code&gt;payload&lt;/code&gt; is not a buffer or a string, it will be coerced into a string using &lt;code&gt;JSON.stringify&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;secretOrPrivateKey&lt;/code&gt; is a string (utf-8 encoded), buffer, object, or KeyObject containing either the secret for HMAC algorithms or the PEM encoded private key for RSA and ECDSA. In case of a private key with passphrase an object &lt;code&gt;{ key, passphrase }&lt;/code&gt; can be used (based on &lt;a href=&#34;https://nodejs.org/api/crypto.html#crypto_sign_sign_private_key_output_format&#34;&gt;crypto documentation&lt;/a&gt;), in this case be sure you pass the &lt;code&gt;algorithm&lt;/code&gt; option. When signing with RSA algorithms the minimum modulus length is 2048 except when the allowInsecureKeySizes option is set to true. Private keys below this size will be rejected with an error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;options&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;algorithm&lt;/code&gt; (default: &lt;code&gt;HS256&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;expiresIn&lt;/code&gt;: expressed in seconds or a string describing a time span &lt;a href=&#34;https://github.com/vercel/ms&#34;&gt;vercel/ms&lt;/a&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;60&lt;/code&gt;, &lt;code&gt;&#34;2 days&#34;&lt;/code&gt;, &lt;code&gt;&#34;10h&#34;&lt;/code&gt;, &lt;code&gt;&#34;7d&#34;&lt;/code&gt;. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (&lt;code&gt;&#34;120&#34;&lt;/code&gt; is equal to &lt;code&gt;&#34;120ms&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;notBefore&lt;/code&gt;: expressed in seconds or a string describing a time span &lt;a href=&#34;https://github.com/vercel/ms&#34;&gt;vercel/ms&lt;/a&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;60&lt;/code&gt;, &lt;code&gt;&#34;2 days&#34;&lt;/code&gt;, &lt;code&gt;&#34;10h&#34;&lt;/code&gt;, &lt;code&gt;&#34;7d&#34;&lt;/code&gt;. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (&lt;code&gt;&#34;120&#34;&lt;/code&gt; is equal to &lt;code&gt;&#34;120ms&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;audience&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issuer&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jwtid&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;subject&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;noTimestamp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;header&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;keyid&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mutatePayload&lt;/code&gt;: if true, the sign function will modify the payload object directly. This is useful if you need a raw reference to the payload after claims have been applied to it but before it has been encoded into a token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowInsecureKeySizes&lt;/code&gt;: if true allows private keys with a modulus below 2048 to be used for RSA&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowInvalidAsymmetricKeyTypes&lt;/code&gt;: if true, allows asymmetric keys which do not match the specified algorithm. This option is intended only for backwards compatability and should be avoided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There are no default values for &lt;code&gt;expiresIn&lt;/code&gt;, &lt;code&gt;notBefore&lt;/code&gt;, &lt;code&gt;audience&lt;/code&gt;, &lt;code&gt;subject&lt;/code&gt;, &lt;code&gt;issuer&lt;/code&gt;. These claims can also be provided in the payload directly with &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;nbf&lt;/code&gt;, &lt;code&gt;aud&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt; and &lt;code&gt;iss&lt;/code&gt; respectively, but you &lt;strong&gt;&lt;em&gt;can&#39;t&lt;/em&gt;&lt;/strong&gt; include in both places.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Remember that &lt;code&gt;exp&lt;/code&gt;, &lt;code&gt;nbf&lt;/code&gt; and &lt;code&gt;iat&lt;/code&gt; are &lt;strong&gt;NumericDate&lt;/strong&gt;, see related &lt;a href=&#34;https://raw.githubusercontent.com/auth0/node-jsonwebtoken/master/#token-expiration-exp-claim&#34;&gt;Token Expiration (exp claim)&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The header can be customized via the &lt;code&gt;options.header&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;Generated jwts will include an &lt;code&gt;iat&lt;/code&gt; (issued at) claim by default unless &lt;code&gt;noTimestamp&lt;/code&gt; is specified. If &lt;code&gt;iat&lt;/code&gt; is inserted in the payload, it will be used instead of the real timestamp for calculating other things like &lt;code&gt;exp&lt;/code&gt; given a timespan in &lt;code&gt;options.expiresIn&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Synchronous Sign with default (HMAC SHA256)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var jwt = require(&#39;jsonwebtoken&#39;);&#xA;var token = jwt.sign({ foo: &#39;bar&#39; }, &#39;shhhhh&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Synchronous Sign with RSA SHA256&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// sign with RSA SHA256&#xA;var privateKey = fs.readFileSync(&#39;private.key&#39;);&#xA;var token = jwt.sign({ foo: &#39;bar&#39; }, privateKey, { algorithm: &#39;RS256&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sign asynchronously&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.sign({ foo: &#39;bar&#39; }, privateKey, { algorithm: &#39;RS256&#39; }, function(err, token) {&#xA;  console.log(token);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Backdate a jwt 30 seconds&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var older_token = jwt.sign({ foo: &#39;bar&#39;, iat: Math.floor(Date.now() / 1000) - 30 }, &#39;shhhhh&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Token Expiration (exp claim)&lt;/h4&gt; &#xA;&lt;p&gt;The standard for JWT defines an &lt;code&gt;exp&lt;/code&gt; claim for expiration. The expiration is represented as a &lt;strong&gt;NumericDate&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A JSON numeric value representing the number of seconds from 1970-01-01T00:00:00Z UTC until the specified UTC date/time, ignoring leap seconds. This is equivalent to the IEEE Std 1003.1, 2013 Edition [POSIX.1] definition &#34;Seconds Since the Epoch&#34;, in which each day is accounted for by exactly 86400 seconds, other than that non-integer values can be represented. See RFC 3339 [RFC3339] for details regarding date/times in general and UTC in particular.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This means that the &lt;code&gt;exp&lt;/code&gt; field should contain the number of seconds since the epoch.&lt;/p&gt; &#xA;&lt;p&gt;Signing a token with 1 hour of expiration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jwt.sign({&#xA;  exp: Math.floor(Date.now() / 1000) + (60 * 60),&#xA;  data: &#39;foobar&#39;&#xA;}, &#39;secret&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Another way to generate a token like this with this library is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;jwt.sign({&#xA;  data: &#39;foobar&#39;&#xA;}, &#39;secret&#39;, { expiresIn: 60 * 60 });&#xA;&#xA;//or even better:&#xA;&#xA;jwt.sign({&#xA;  data: &#39;foobar&#39;&#xA;}, &#39;secret&#39;, { expiresIn: &#39;1h&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;jwt.verify(token, secretOrPublicKey, [options, callback])&lt;/h3&gt; &#xA;&lt;p&gt;(Asynchronous) If a callback is supplied, function acts asynchronously. The callback is called with the decoded payload if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will be called with the error.&lt;/p&gt; &#xA;&lt;p&gt;(Synchronous) If a callback is not supplied, function acts synchronously. Returns the payload decoded if the signature is valid and optional expiration, audience, or issuer are valid. If not, it will throw the error.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; When the token comes from an untrusted source (e.g. user input or external requests), the returned decoded payload should be treated like any other user input; please make sure to sanitize and only work with properties that are expected&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;code&gt;token&lt;/code&gt; is the JsonWebToken string&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;secretOrPublicKey&lt;/code&gt; is a string (utf-8 encoded), buffer, or KeyObject containing either the secret for HMAC algorithms, or the PEM encoded public key for RSA and ECDSA. If &lt;code&gt;jwt.verify&lt;/code&gt; is called asynchronous, &lt;code&gt;secretOrPublicKey&lt;/code&gt; can be a function that should fetch the secret or public key. See below for a detailed example&lt;/p&gt; &#xA;&lt;p&gt;As mentioned in &lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/issues/208#issuecomment-231861138&#34;&gt;this comment&lt;/a&gt;, there are other libraries that expect base64 encoded secrets (random bytes encoded using base64), if that is your case you can pass &lt;code&gt;Buffer.from(secret, &#39;base64&#39;)&lt;/code&gt;, by doing this the secret will be decoded using base64 and the token verification will use the original random bytes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;options&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;algorithms&lt;/code&gt;: List of strings with the names of the allowed algorithms. For instance, &lt;code&gt;[&#34;HS256&#34;, &#34;HS384&#34;]&lt;/code&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If not specified a defaults will be used based on the type of key provided&lt;/p&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt;secret - [&#39;HS256&#39;, &#39;HS384&#39;, &#39;HS512&#39;]&lt;/li&gt; &#xA;    &lt;li&gt;rsa - [&#39;RS256&#39;, &#39;RS384&#39;, &#39;RS512&#39;]&lt;/li&gt; &#xA;    &lt;li&gt;ec - [&#39;ES256&#39;, &#39;ES384&#39;, &#39;ES512&#39;]&lt;/li&gt; &#xA;    &lt;li&gt;default - [&#39;RS256&#39;, &#39;RS384&#39;, &#39;RS512&#39;]&lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;audience&lt;/code&gt;: if you want to check audience (&lt;code&gt;aud&lt;/code&gt;), provide a value here. The audience can be checked against a string, a regular expression or a list of strings and/or regular expressions. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;&#34;urn:foo&#34;&lt;/code&gt;, &lt;code&gt;/urn:f[o]{2}/&lt;/code&gt;, &lt;code&gt;[/urn:f[o]{2}/, &#34;urn:bar&#34;]&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;complete&lt;/code&gt;: return an object with the decoded &lt;code&gt;{ payload, header, signature }&lt;/code&gt; instead of only the usual content of the payload.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issuer&lt;/code&gt; (optional): string or array of strings of valid values for the &lt;code&gt;iss&lt;/code&gt; field.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;jwtid&lt;/code&gt; (optional): if you want to check JWT ID (&lt;code&gt;jti&lt;/code&gt;), provide a string value here.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignoreExpiration&lt;/code&gt;: if &lt;code&gt;true&lt;/code&gt; do not validate the expiration of the token.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ignoreNotBefore&lt;/code&gt;...&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;subject&lt;/code&gt;: if you want to check subject (&lt;code&gt;sub&lt;/code&gt;), provide a value here&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clockTolerance&lt;/code&gt;: number of seconds to tolerate when checking the &lt;code&gt;nbf&lt;/code&gt; and &lt;code&gt;exp&lt;/code&gt; claims, to deal with small clock differences among different servers&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxAge&lt;/code&gt;: the maximum allowed age for tokens to still be valid. It is expressed in seconds or a string describing a time span &lt;a href=&#34;https://github.com/vercel/ms&#34;&gt;vercel/ms&lt;/a&gt;. &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Eg: &lt;code&gt;1000&lt;/code&gt;, &lt;code&gt;&#34;2 days&#34;&lt;/code&gt;, &lt;code&gt;&#34;10h&#34;&lt;/code&gt;, &lt;code&gt;&#34;7d&#34;&lt;/code&gt;. A numeric value is interpreted as a seconds count. If you use a string be sure you provide the time units (days, hours, etc), otherwise milliseconds unit is used by default (&lt;code&gt;&#34;120&#34;&lt;/code&gt; is equal to &lt;code&gt;&#34;120ms&#34;&lt;/code&gt;).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clockTimestamp&lt;/code&gt;: the time in seconds that should be used as the current time for all necessary comparisons.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nonce&lt;/code&gt;: if you want to check &lt;code&gt;nonce&lt;/code&gt; claim, provide a string value here. It is used on Open ID for the ID Tokens. (&lt;a href=&#34;https://openid.net/specs/openid-connect-core-1_0.html#NonceNotes&#34;&gt;Open ID implementation notes&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;allowInvalidAsymmetricKeyTypes&lt;/code&gt;: if true, allows asymmetric keys which do not match the specified algorithm. This option is intended only for backwards compatability and should be avoided.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// verify a token symmetric - synchronous&#xA;var decoded = jwt.verify(token, &#39;shhhhh&#39;);&#xA;console.log(decoded.foo) // bar&#xA;&#xA;// verify a token symmetric&#xA;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  console.log(decoded.foo) // bar&#xA;});&#xA;&#xA;// invalid token - synchronous&#xA;try {&#xA;  var decoded = jwt.verify(token, &#39;wrong-secret&#39;);&#xA;} catch(err) {&#xA;  // err&#xA;}&#xA;&#xA;// invalid token&#xA;jwt.verify(token, &#39;wrong-secret&#39;, function(err, decoded) {&#xA;  // err&#xA;  // decoded undefined&#xA;});&#xA;&#xA;// verify a token asymmetric&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, function(err, decoded) {&#xA;  console.log(decoded.foo) // bar&#xA;});&#xA;&#xA;// verify audience&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39; }, function(err, decoded) {&#xA;  // if audience mismatch, err == invalid audience&#xA;});&#xA;&#xA;// verify issuer&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39;, issuer: &#39;urn:issuer&#39; }, function(err, decoded) {&#xA;  // if issuer mismatch, err == invalid issuer&#xA;});&#xA;&#xA;// verify jwt id&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39;, issuer: &#39;urn:issuer&#39;, jwtid: &#39;jwtid&#39; }, function(err, decoded) {&#xA;  // if jwt id mismatch, err == invalid jwt id&#xA;});&#xA;&#xA;// verify subject&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;);  // get public key&#xA;jwt.verify(token, cert, { audience: &#39;urn:foo&#39;, issuer: &#39;urn:issuer&#39;, jwtid: &#39;jwtid&#39;, subject: &#39;subject&#39; }, function(err, decoded) {&#xA;  // if subject mismatch, err == invalid subject&#xA;});&#xA;&#xA;// alg mismatch&#xA;var cert = fs.readFileSync(&#39;public.pem&#39;); // get public key&#xA;jwt.verify(token, cert, { algorithms: [&#39;RS256&#39;] }, function (err, payload) {&#xA;  // if token alg != RS256,  err == invalid signature&#xA;});&#xA;&#xA;// Verify using getKey callback&#xA;// Example uses https://github.com/auth0/node-jwks-rsa as a way to fetch the keys.&#xA;var jwksClient = require(&#39;jwks-rsa&#39;);&#xA;var client = jwksClient({&#xA;  jwksUri: &#39;https://sandrino.auth0.com/.well-known/jwks.json&#39;&#xA;});&#xA;function getKey(header, callback){&#xA;  client.getSigningKey(header.kid, function(err, key) {&#xA;    var signingKey = key.publicKey || key.rsaPublicKey;&#xA;    callback(null, signingKey);&#xA;  });&#xA;}&#xA;&#xA;jwt.verify(token, getKey, options, function(err, decoded) {&#xA;  console.log(decoded.foo) // bar&#xA;});&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;em&gt;&lt;/em&gt;Need to peek into a JWT without verifying it? (Click to expand)&lt;/summary&gt; &#xA; &lt;h3&gt;jwt.decode(token [, options])&lt;/h3&gt; &#xA; &lt;p&gt;(Synchronous) Returns the decoded payload without verifying if the signature is valid.&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; This will &lt;strong&gt;not&lt;/strong&gt; verify whether the signature is valid. You should &lt;strong&gt;not&lt;/strong&gt; use this for untrusted messages. You most likely want to use &lt;code&gt;jwt.verify&lt;/code&gt; instead.&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; When the token comes from an untrusted source (e.g. user input or external request), the returned decoded payload should be treated like any other user input; please make sure to sanitize and only work with properties that are expected&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;token&lt;/code&gt; is the JsonWebToken string&lt;/p&gt; &#xA; &lt;p&gt;&lt;code&gt;options&lt;/code&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt;: force JSON.parse on the payload even if the header doesn&#39;t contain &lt;code&gt;&#34;typ&#34;:&#34;JWT&#34;&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;complete&lt;/code&gt;: return an object with the decoded payload and header.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA; &lt;p&gt;Example&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// get the decoded payload ignoring signature, no secretOrPrivateKey needed&#xA;var decoded = jwt.decode(token);&#xA;&#xA;// get the decoded payload and header&#xA;var decoded = jwt.decode(token, {complete: true});&#xA;console.log(decoded.header);&#xA;console.log(decoded.payload)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Errors &amp;amp; Codes&lt;/h2&gt; &#xA;&lt;p&gt;Possible thrown errors during verification. Error is the first argument of the verification callback.&lt;/p&gt; &#xA;&lt;h3&gt;TokenExpiredError&lt;/h3&gt; &#xA;&lt;p&gt;Thrown error if the token is expired.&lt;/p&gt; &#xA;&lt;p&gt;Error object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &#39;TokenExpiredError&#39;&lt;/li&gt; &#xA; &lt;li&gt;message: &#39;jwt expired&#39;&lt;/li&gt; &#xA; &lt;li&gt;expiredAt: [ExpDate]&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  if (err) {&#xA;    /*&#xA;      err = {&#xA;        name: &#39;TokenExpiredError&#39;,&#xA;        message: &#39;jwt expired&#39;,&#xA;        expiredAt: 1408621000&#xA;      }&#xA;    */&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;JsonWebTokenError&lt;/h3&gt; &#xA;&lt;p&gt;Error object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &#39;JsonWebTokenError&#39;&lt;/li&gt; &#xA; &lt;li&gt;message: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&#39;invalid token&#39; - the header or payload could not be parsed&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt malformed&#39; - the token does not have three components (delimited by a &lt;code&gt;.&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt signature is required&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;invalid signature&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt audience invalid. expected: [OPTIONS AUDIENCE]&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt issuer invalid. expected: [OPTIONS ISSUER]&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt id invalid. expected: [OPTIONS JWT ID]&#39;&lt;/li&gt; &#xA;   &lt;li&gt;&#39;jwt subject invalid. expected: [OPTIONS SUBJECT]&#39;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  if (err) {&#xA;    /*&#xA;      err = {&#xA;        name: &#39;JsonWebTokenError&#39;,&#xA;        message: &#39;jwt malformed&#39;&#xA;      }&#xA;    */&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;NotBeforeError&lt;/h3&gt; &#xA;&lt;p&gt;Thrown if current time is before the nbf claim.&lt;/p&gt; &#xA;&lt;p&gt;Error object:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;name: &#39;NotBeforeError&#39;&lt;/li&gt; &#xA; &lt;li&gt;message: &#39;jwt not active&#39;&lt;/li&gt; &#xA; &lt;li&gt;date: 2018-10-04T16:10:44.000Z&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;jwt.verify(token, &#39;shhhhh&#39;, function(err, decoded) {&#xA;  if (err) {&#xA;    /*&#xA;      err = {&#xA;        name: &#39;NotBeforeError&#39;,&#xA;        message: &#39;jwt not active&#39;,&#xA;        date: 2018-10-04T16:10:44.000Z&#xA;      }&#xA;    */&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Algorithms supported&lt;/h2&gt; &#xA;&lt;p&gt;Array of supported algorithms. The following algorithms are currently supported.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;alg Parameter Value&lt;/th&gt; &#xA;   &lt;th&gt;Digital Signature or MAC Algorithm&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HS256&lt;/td&gt; &#xA;   &lt;td&gt;HMAC using SHA-256 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HS384&lt;/td&gt; &#xA;   &lt;td&gt;HMAC using SHA-384 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HS512&lt;/td&gt; &#xA;   &lt;td&gt;HMAC using SHA-512 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RS256&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-256 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RS384&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-384 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;RS512&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PKCS1-v1_5 using SHA-512 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PS256&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PSS using SHA-256 hash algorithm (only node ^6.12.0 OR &amp;gt;=8.0.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PS384&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PSS using SHA-384 hash algorithm (only node ^6.12.0 OR &amp;gt;=8.0.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PS512&lt;/td&gt; &#xA;   &lt;td&gt;RSASSA-PSS using SHA-512 hash algorithm (only node ^6.12.0 OR &amp;gt;=8.0.0)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ES256&lt;/td&gt; &#xA;   &lt;td&gt;ECDSA using P-256 curve and SHA-256 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ES384&lt;/td&gt; &#xA;   &lt;td&gt;ECDSA using P-384 curve and SHA-384 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ES512&lt;/td&gt; &#xA;   &lt;td&gt;ECDSA using P-521 curve and SHA-512 hash algorithm&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;none&lt;/td&gt; &#xA;   &lt;td&gt;No digital signature or MAC value included&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Refreshing JWTs&lt;/h2&gt; &#xA;&lt;p&gt;First of all, we recommend you to think carefully if auto-refreshing a JWT will not introduce any vulnerability in your system.&lt;/p&gt; &#xA;&lt;p&gt;We are not comfortable including this as part of the library, however, you can take a look at &lt;a href=&#34;https://gist.github.com/ziluvatar/a3feb505c4c0ec37059054537b38fc48&#34;&gt;this example&lt;/a&gt; to show how this could be accomplished. Apart from that example there are &lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/issues/122&#34;&gt;an issue&lt;/a&gt; and &lt;a href=&#34;https://github.com/auth0/node-jsonwebtoken/pull/172&#34;&gt;a pull request&lt;/a&gt; to get more knowledge about this topic.&lt;/p&gt; &#xA;&lt;h1&gt;TODO&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;X.509 certificate chain is not checked&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Issue Reporting&lt;/h2&gt; &#xA;&lt;p&gt;If you have found a bug or if you have a feature request, please report them at this repository issues section. Please do not report security vulnerabilities on the public GitHub issue tracker. The &lt;a href=&#34;https://auth0.com/whitehat&#34;&gt;Responsible Disclosure Program&lt;/a&gt; details the procedure for disclosing security issues.&lt;/p&gt; &#xA;&lt;h2&gt;Author&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://auth0.com&#34;&gt;Auth0&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT license. See the &lt;a href=&#34;https://raw.githubusercontent.com/auth0/node-jsonwebtoken/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for more info.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tabler/tabler-icons</title>
    <updated>2023-01-07T01:37:24Z</updated>
    <id>tag:github.com,2023-01-07:/tabler/tabler-icons</id>
    <link href="https://github.com/tabler/tabler-icons" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of over 3100 free MIT-licensed high-quality SVG icons for you to use in your web projects.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/og.png&#34; alt=&#34;Tabler Icons&#34; width=&#34;838&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A set of &#xA; &lt;!--icons-count--&gt;3128&#xA; &lt;!--/icons-count--&gt; free MIT-licensed high-quality SVG icons for you to use in your web projects. Each icon is designed on a 24x24 grid and a 2px stroke. &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tabler-icons.io/&#34;&gt;&lt;strong&gt;Browse at tabler-icons.io →&lt;/strong&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/tabler/tabler-icons/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@tabler/icons&#34; alt=&#34;Latest Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tabler/tabler-icons/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/@tabler/icons.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you want to support my project and help me grow it, you can &lt;a href=&#34;https://github.com/sponsors/codecalm&#34;&gt;become a sponsor on GitHub&lt;/a&gt; or just &lt;a href=&#34;https://paypal.me/codecalm&#34;&gt;donate on PayPal&lt;/a&gt; :)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/sponsors/codecalm&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/tabler/static/main/sponsors.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons-dark.png&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons.png&#34;&gt; &#xA;  &lt;img src=&#34;https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons.png&#34; alt=&#34;Tabler Icons preview&#34; width=&#34;838&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Sponsor Tabler&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/codecalm&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://github.com/tabler/tabler/raw/dev/src/static/sponsor-banner-readme.png?raw=true&#34; alt=&#34;Sponsor Tabler&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install @tabler/icons --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or just &lt;a href=&#34;https://github.com/tabler/tabler-icons/releases&#34;&gt;download from Github&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All icons are built with SVG, so you can place them as &lt;code&gt;&amp;lt;img&amp;gt;&lt;/code&gt;, &lt;code&gt;background-image&lt;/code&gt; and inline in HTML code.&lt;/p&gt; &#xA;&lt;h3&gt;HTML image&lt;/h3&gt; &#xA;&lt;p&gt;If you load an icon as an image, you can modify its size using CSS.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;img src=&#34;path/to/icon.svg&#34; alt=&#34;icon title&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inline HTML&lt;/h3&gt; &#xA;&lt;p&gt;You can paste the content of the icon file into your HTML code to display it on the page.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#34;&#34;&amp;gt;&#xA;  &amp;lt;svg&#xA;    xmlns=&#34;http://www.w3.org/2000/svg&#34;&#xA;    class=&#34;icon icon-tabler icon-tabler-disabled&#34;&#xA;    width=&#34;24&#34;&#xA;    height=&#34;24&#34;&#xA;    viewBox=&#34;0 0 24 24&#34;&#xA;    stroke-width=&#34;1.25&#34;&#xA;    stroke=&#34;currentColor&#34;&#xA;    fill=&#34;none&#34;&#xA;    stroke-linecap=&#34;round&#34;&#xA;    stroke-linejoin=&#34;round&#34;&#xA;  &amp;gt;&#xA;    ...&#xA;  &amp;lt;/svg&amp;gt;&#xA;  Click me&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thanks to that, you can change the size, color and the &lt;code&gt;stroke-width&lt;/code&gt; of the icons with CSS code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;.icon-tabler {&#xA;  color: red;&#xA;  width: 32px;&#xA;  height: 32px;&#xA;  stroke-width: 1.25;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;SVG sprite&lt;/h3&gt; &#xA;&lt;p&gt;Add an icon to be displayed on your page with the following markup (&lt;code&gt;activity&lt;/code&gt; in the above example can be replaced with any valid icon name):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;svg width=&#34;24&#34; height=&#34;24&#34;&amp;gt;&#xA;  &amp;lt;use xlink:href=&#34;path/to/tabler-sprite.svg#tabler-activity&#34; /&amp;gt;&#xA;&amp;lt;/svg&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;React&lt;/h3&gt; &#xA;&lt;p&gt;Import the icon and render it in your component. You can adjust SVG properties through React props:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { IconAward } from &#39;@tabler/icons&#39;;&#xA;&#xA;const MyComponent = () =&amp;gt; {&#xA;  return &amp;lt;IconAward &#xA;    size={36} // set custom `width` and `height`&#xA;    color=&#34;red&#34; // set `stroke` color&#xA;    stroke={3}  // set `stroke-width`&#xA;    strokeLinejoin=&#34;miter&#34; // override other SVG props&#xA;  /&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;@tabler/icons&lt;/code&gt; exports it&#39;s own type declarations for usage with React and Typescript.&lt;/p&gt; &#xA;&lt;h3&gt;Angular&lt;/h3&gt; &#xA;&lt;p&gt;Angular components available through &lt;a href=&#34;https://www.npmjs.com/package/angular-tabler-icons&#34;&gt;&lt;code&gt;angular-tabler-icons&lt;/code&gt;&lt;/a&gt; package.&lt;br&gt; Install the package, then create icons module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { NgModule } from &#39;@angular/core&#39;;&#xA;&#xA;import { TablerIconsModule } from &#39;angular-tabler-icons&#39;;&#xA;import { IconCamera, IconHeart, IconBrandGithub } from &#39;angular-tabler-icons/icons&#39;;&#xA;&#xA;// Select some icons (use an object, not an array)&#xA;const icons = {&#xA;  IconCamera,&#xA;  IconHeart,&#xA;  IconBrandGithub&#xA;};&#xA;&#xA;@NgModule({&#xA;  imports: [&#xA;    TablerIconsModule.pick(icons)&#xA;  ],&#xA;  exports: [&#xA;    TablerIconsModule&#xA;  ]&#xA;})&#xA;export class IconsModule { }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After importing the &lt;em&gt;IconsModule&lt;/em&gt; in your feature or shared module, use the icons as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;i-tabler name=&#34;camera&#34;&amp;gt;&amp;lt;/i-tabler&amp;gt;&#xA;&amp;lt;i-tabler name=&#34;heart&#34; style=&#34;color: red;&#34;&amp;gt;&amp;lt;/i-tabler&amp;gt;&#xA;&amp;lt;i-tabler name=&#34;brand-github&#34; class=&#34;someclass&#34;&amp;gt;&amp;lt;/i-tabler&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;angular-tabler-icons&lt;/code&gt; exports it&#39;s own type declarations for usage with Typescript.&lt;/p&gt; &#xA;&lt;p&gt;For more usage documentation refer to &lt;a href=&#34;https://github.com/pierreavn/angular-tabler-icons&#34;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Vue&lt;/h3&gt; &#xA;&lt;p&gt;Vue components available through &lt;a href=&#34;https://www.npmjs.com/package/vue-tabler-icons&#34;&gt;&lt;code&gt;vue-tabler-icons&lt;/code&gt;&lt;/a&gt; package. Install the package, import the icon component and render it in your component. You can adjust SVG properties by passing regular HTML attributes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script&amp;gt;&#xA;    // MyComponent.vue&#xA;    import { BoldIcon } from &#39;vue-tabler-icons&#39;;&#xA;&#xA;    export default {&#xA;        components: { BoldIcon },&#xA;    };&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;template&amp;gt;&#xA;    &amp;lt;bold-icon /&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;vue-tabler-icons&lt;/code&gt; exports it&#39;s own type declarations for usage with Typescript.&lt;/p&gt; &#xA;&lt;p&gt;For more usage documentation refer to &lt;a href=&#34;https://github.com/alex-oleshkevich/vue-tabler-icons&#34;&gt;the official documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CDN&lt;/h3&gt; &#xA;&lt;p&gt;All files included in &lt;code&gt;@tabler/icons&lt;/code&gt; npm package are available over a CDN.&lt;/p&gt; &#xA;&lt;h4&gt;React icons&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/@tabler/icons@latest/icons-react/dist/index.umd.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Iconfont&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#34;stylesheet&#34; href=&#34;https://cdn.jsdelivr.net/npm/@tabler/icons@latest/iconfont/tabler-icons.min.css&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To load a specific version replace &lt;code&gt;latest&lt;/code&gt; with the desired version number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/@tabler/icons@1.74.0/icons-react/dist/index.umd.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;HTML&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;i class=&#34;ti ti-brand-tabler&#34;&amp;gt;&amp;lt;/i&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;CSS&lt;/h6&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;content: &#39;ec8f&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling fonts&lt;/h3&gt; &#xA;&lt;p&gt;To compile fonts first install &lt;a href=&#34;https://fontforge.org/en-US/&#34;&gt;fontforge&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When compiling the font it will look for a json file &lt;code&gt;compile-options.json&lt;/code&gt; in root folder (same folder as the &lt;code&gt;package.json&lt;/code&gt;) In this file you can define extra options:&lt;/p&gt; &#xA;&lt;p&gt;The default settings if you have not defined the file will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;includeIcons&#34;: [],&#xA;  &#34;fontForge&#34;: &#34;fontforge&#34;,&#xA;  &#34;strokeWidth&#34;: null&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The fontforge executable needs to be in the path or you can set the path to the downloaded fontforge executable in the configuration file. If you installed in on a mac in your application directory it will be &lt;code&gt;/Applications/FontForge.app/Contents/MacOS/FontForge&lt;/code&gt;. You can set this value in the &lt;code&gt;compile-options.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;fontForge&#34;: &#34;/Applications/FontForge.app/Contents/MacOS/FontForge&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To compile the fonts run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build-iconfont&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the stroke width is 2. You can change the stroke width in the &lt;code&gt;compile-options.json&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;strokeWidth&#34;: 1.5,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To reduce the font file size you can choose to compile a sub set of icons. When you leave the array empty it will compile all the fonts. To compile only two icons you can set for example the following option in the &lt;code&gt;compile-options.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;includeIcons&#34;: [&#34;alert-octagon&#34;, &#34;alert-triangle&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional property &lt;code&gt;includeCategories&lt;/code&gt; - an array or string of icon categories to include, category names are case-insensitive.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;includeCategories&#34;: [&#34;Devices&#34;, &#34;System&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;includeCategories&#34;: &#34;Devices System&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optional property &lt;code&gt;excludeIcons&lt;/code&gt; - an array of icon names using to exclude some category icons:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;includeCategories&#34;: [&#34;system&#34;],&#xA;  &#34;excludeIcons&#34;: [&#34;adjustments&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Complex solution:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;  &#34;includeIcons&#34;: [&#34;alert-octagon&#34;, &#34;alert-triangle&#34;],&#xA;  &#34;includeCategories&#34;: [&#34;devices&#34;, &#34;system&#34;],&#xA;  &#34;excludeIcons&#34;: [&#34;adjustments&#34;]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Svelte&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://github.com/benflap/tabler-icons-svelte&#34;&gt;&lt;code&gt;tabler-icons-svelte&lt;/code&gt;&lt;/a&gt; to use icons in your Svelte projects (see &lt;a href=&#34;https://svelte.dev/repl/e80dc63d7019431692b10a77525e7f99?version=3.31.0&#34;&gt;example&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;script&amp;gt;&#xA;    import { CurrencyBitcoin, BrandGithub, CircleX } from &#34;tabler-icons-svelte&#34;;&#xA;&amp;lt;/script&amp;gt;&#xA;&#xA;&amp;lt;CurrencyBitcoin /&amp;gt;&#xA;&amp;lt;BrandGithub size=&#34;48&#34; strokeWidth=&#34;1&#34; /&amp;gt;&#xA;&amp;lt;CircleX /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Jetpack Compose&lt;/h3&gt; &#xA;&lt;p&gt;For Android or Desktop you can use &lt;a href=&#34;https://github.com/DevSrSouza/compose-icons&#34;&gt;&lt;code&gt;compose-icons&lt;/code&gt;&lt;/a&gt; to use icons in your projects. (see &lt;a href=&#34;https://github.com/DevSrSouza/compose-icons/raw/master/tabler-icons/DOCUMENTATION.md&#34;&gt;docs&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Multiple strokes&lt;/h2&gt; &#xA;&lt;p&gt;All icons in this repository have been created with the value of the &lt;code&gt;stroke-width&lt;/code&gt; property, so if you change the value, you can get different icon variants that will fit in well with your design.&lt;/p&gt; &#xA;&lt;picture&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons-stroke-dark.png&#34;&gt; &#xA; &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons-stroke.png&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/tabler/tabler-icons/master/.github/icons-stroke.png&#34; alt=&#34;Tabler Icons preview&#34; width=&#34;838&#34;&gt; &#xA;&lt;/picture&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Tabler Icons is licensed under the &lt;a href=&#34;https://github.com/tabler/tabler-icons/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>