<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-01T01:32:19Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Pulya10c/news-JS</title>
    <updated>2022-07-01T01:32:19Z</updated>
    <id>tag:github.com,2022-07-01:/Pulya10c/news-JS</id>
    <link href="https://github.com/Pulya10c/news-JS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;news-JS&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>micro-zoe/micro-app</title>
    <updated>2022-07-01T01:32:19Z</updated>
    <id>tag:github.com,2022-07-01:/micro-zoe/micro-app</id>
    <link href="https://github.com/micro-zoe/micro-app" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A lightweight, efficient and powerful micro front-end framework. ‰∏ÄÊ¨æËΩªÈáè„ÄÅÈ´òÊïà„ÄÅÂäüËÉΩÂº∫Â§ßÁöÑÂæÆÂâçÁ´ØÊ°ÜÊû∂&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://micro-zoe.github.io/micro-app/&#34;&gt; &lt;img src=&#34;https://zeroing.jd.com/micro-app/media/logo.png&#34; alt=&#34;logo&#34; width=&#34;200&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@micro-zoe/micro-app&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@micro-zoe/micro-app.svg?sanitize=true&#34; alt=&#34;version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@micro-zoe/micro-app&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dt/@micro-zoe/micro-app.svg?sanitize=true&#34; alt=&#34;downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/micro-zoe/micro-app/raw/master/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/l/@micro-zoe/micro-app.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitter.im/microzoe/micro-app&#34;&gt; &lt;img src=&#34;https://badges.gitter.im/microzoe/micro-app.svg?sanitize=true&#34; alt=&#34;gitter&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://travis-ci.com/github/micro-zoe/micro-app&#34;&gt; &lt;img src=&#34;https://api.travis-ci.com/micro-zoe/micro-app.svg?branch=master&#34; alt=&#34;travis&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/micro-zoe/micro-app?branch=master&#34;&gt; &lt;img src=&#34;https://coveralls.io/repos/github/micro-zoe/micro-app/badge.svg?branch=master&#34; alt=&#34;coveralls&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;EnglishÔΩú&lt;a href=&#34;https://raw.githubusercontent.com/micro-zoe/micro-app/dev/README.zh-cn.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;ÔΩú&lt;a href=&#34;https://micro-zoe.github.io/micro-app/&#34;&gt;Documentation&lt;/a&gt;ÔΩú&lt;a href=&#34;https://github.com/micro-zoe/micro-app/discussions&#34;&gt;Discussions&lt;/a&gt;ÔΩú&lt;a href=&#34;https://gitter.im/microzoe/micro-app&#34;&gt;Gitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;üìñIntroduction&lt;/h1&gt; &#xA;&lt;p&gt;micro-app is a micro front-end framework launched by JD Retail. It renders based on webcomponent-like and realizes the micro front-end from component thinking, it aiming to reduce the difficulty of getting started and improve work efficiency.&lt;/p&gt; &#xA;&lt;p&gt;It is the lowest cost framework for accessing micro front-end, and provides a series of perfect functions such as JS sandbox, style isolation, element isolation, preloading, resource address completion, plugin system, data communication and so on.&lt;/p&gt; &#xA;&lt;p&gt;micro-app has no restrictions on the front-end framework, and any framework can be used as a base application to embed any type of micro application of the framework.&lt;/p&gt; &#xA;&lt;h1&gt;How to use&lt;/h1&gt; &#xA;&lt;p&gt;The micro front end is divided into a base application (also called main application) and a micro application.&lt;/p&gt; &#xA;&lt;p&gt;Here is a common example: the base application uses the Vue framework, uses history routing, the micro application uses the react framework, and uses hash routing. We list the modifications that need to be made by the base application and the micro application, and introduce the use of micro-app in detail.&lt;/p&gt; &#xA;&lt;h2&gt;base application&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;1„ÄÅInstall&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add @micro-zoe/micro-app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;2„ÄÅimport at the entrance&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// main.js&#xA;import microApp from &#39;@micro-zoe/micro-app&#39;&#xA;&#xA;microApp.start()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;3„ÄÅUse components in page&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- my-page.vue --&amp;gt;&#xA;&amp;lt;template&amp;gt;&#xA;  &amp;lt;!-- üëá name is the app name, url is the app address --&amp;gt;&#xA;  &amp;lt;micro-app name=&#39;my-app&#39; url=&#39;http://localhost:3000/&#39;&amp;gt;&amp;lt;/micro-app&amp;gt;&#xA;&amp;lt;/template&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;micro application&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Set cross-domain support in the headers of webpack-dev-server&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;devServer: {&#xA;  headers: {&#xA;    &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,&#xA;  },&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above micro front-end rendering is completed, and the effect is as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img10.360buyimg.com/imagetools/jfs/t1/188373/14/17696/41854/6111f4a0E532736ba/4b86f4f8e2044519.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More detailed configuration can be viewed &lt;a href=&#34;https://micro-zoe.github.io/micro-app/docs.html#/zh-cn/start&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;ü§ù Contribution&lt;/h1&gt; &#xA;&lt;p&gt;If you&#39;re interested in this project, you&#39;re welcome to mention pull request, and also welcome your &#34;Star&#34; ^_^&lt;/p&gt; &#xA;&lt;h3&gt;development&lt;/h3&gt; &#xA;&lt;p&gt;1„ÄÅClone&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/micro-zoe/micro-app.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;2„ÄÅInstall dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;3„ÄÅRun project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more commands, see &lt;a href=&#34;https://github.com/micro-zoe/micro-app/raw/master/DEVELOP.md&#34;&gt;DEVELOP&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FAQ&lt;/h1&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;What are the advantages of micro-app?&lt;/summary&gt; It is easy to use and low invasive. It only needs to change a small amount of code to access the micro front-end, and provides rich functions at the same time. &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;How compatible?&lt;/summary&gt; The micro-app relies on two newer APIs, CustomElements and Proxy. &#xA; &lt;p&gt;For browsers that do not support CustomElements, they can be compatible by introducing polyfills. For details, please refer to: &lt;a href=&#34;https://github.com/webcomponents/polyfills/tree/master/packages/custom-elements&#34;&gt;webcomponents/polyfills&lt;/a&gt;„ÄÇ&lt;/p&gt; &#xA; &lt;p&gt;However, Proxy is not compatible for the time being, so the micro-app cannot be run on browsers that do not support Proxy.&lt;/p&gt; &#xA; &lt;p&gt;Browser compatibility can be viewed: &lt;a href=&#34;https://caniuse.com/?search=Proxy&#34;&gt;Can I Use&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;The general is as follows:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;desktop: Except IE browser, other browsers are basically compatible.&lt;/li&gt; &#xA;  &lt;li&gt;mobile: ios10+„ÄÅandroid5+&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Must micro applications support cross-domain?&lt;/summary&gt; yes! &#xA; &lt;p&gt;If it is a development environment, you can set headers in webpack-dev-server to support cross-domain.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;devServer: {&#xA;  headers: {&#xA;    &#39;Access-Control-Allow-Origin&#39;: &#39;*&#39;,&#xA;  },&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;If it is a production environment, you can support cross-domain through &lt;a href=&#34;https://segmentfault.com/a/1190000012550346&#34;&gt;Configuration nginx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Does it support vite?&lt;/summary&gt; &#xA; &lt;p&gt;Yes, please see &lt;a href=&#34;https://micro-zoe.github.io/micro-app/docs.html#/zh-cn/framework/vite&#34;&gt;adapt vite&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Does it support ssr?&lt;/summary&gt; &#xA; &lt;p&gt;Yes, please see &lt;a href=&#34;https://micro-zoe.github.io/micro-app/docs.html#/zh-cn/framework/nextjs&#34;&gt;nextjs&lt;/a&gt;, &lt;a href=&#34;https://micro-zoe.github.io/micro-app/docs.html#/zh-cn/framework/nuxtjs&#34;&gt;nuxtjs&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/micro-zoe/micro-app/graphs/contributors&#34;&gt;&lt;img src=&#34;https://micro-zoe.com/contributors.svg?height=55&amp;amp;people=13&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!-- opencollective is inaccurate  --&gt; &#xA;&lt;!-- &lt;a href=&#34;https://github.com/micro-zoe/micro-app/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/micro-app/contributors.svg?width=890&amp;button=false&#34; /&gt;&lt;/a&gt; --&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/micro-zoe/micro-app/raw/master/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>TAK-Product-Center/Server</title>
    <updated>2022-07-01T01:32:19Z</updated>
    <id>tag:github.com,2022-07-01:/TAK-Product-Center/Server</id>
    <link href="https://github.com/TAK-Product-Center/Server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;TAK Server&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TAK Server Development&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Requires Java 11&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux / MacOS is recommended for development. If using Windows, replace &#34;gradlew&#34; with &#34;gradlew.bat&#34; in commands below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TAK-Product-Center/Server/main/src/takserver-takcl-core/docs/ci_testing.md&#34;&gt;CI Test Execution&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/TAK-Product-Center/Server/main/docs/publishing.md&#34;&gt;Publishing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Clean and Build TAK Server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd src&#xA;./gradlew clean bootWar&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Eclipse, choose File -&amp;gt; Import -&amp;gt; Gradle -&amp;gt; Existing Gradle Project&lt;/p&gt; &#xA;&lt;p&gt;Navigate to &lt;code&gt;takserver/src&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Select Finish. The TAK Server parent project, and all subprojects, will be imported into Eclipse.&lt;/p&gt; &#xA;&lt;p&gt;Install Postgres Server locally. Make sure that the PostGIS extension is also installed.&lt;/p&gt; &#xA;&lt;p&gt;Start the Postres server.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to set up and start a Postgres server with the PostGIS plugins is to use the official PostGIS database docker container as follows and change the environment variables supplied to the container as necessary. Note the &#39;--rm&#39; means the container will be destroyed when it is stopped!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run -it -d --rm --name TakserverServer0DB \&#xA;    --env POSTGRES_PASSWORD=e815f795745e \&#xA;    --env POSTGRES_HOST_AUTH_METHOD=trust \&#xA;    --env POSTGRES_USER=martiuser \&#xA;    --env POSTGRES_DB=cot \&#xA;    -p 5432&#xA;&#xA;echo SQL SERVER IP: `docker inspect --format=&#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; TakserverServer0DB`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Setup Local Database&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;- cd src/takserver-schemamanager&#xA;- psql -d postgres  -c &#34;CREATE ROLE martiuser LOGIN ENCRYPTED PASSWORD &#39;md564d5850dcafc6b4ddd03040ad1260bc2&#39; SUPERUSER INHERIT CREATEDB NOCREATEROLE;&#34;&#xA;- createdb --owner=martiuser cot&#xA;- ../gradlew shadowJar&#xA;- java -jar build/libs/schemamanager-&amp;lt;version&amp;gt;-uber.jar upgrade # Make sure that the CoreConfig.xml is in the current directory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Configure Local CoreConfig and Certs &lt;code&gt;cd takserver-core/example&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the CoreConfig that takserver war will look for when running from the takserver-core/example directory. From this point, just follow the instructions at takserver/src/docs/TAK_Server_Configuration_Guide.pdf to set up the CoreConfig and Certs. Make sure that the CoreConfig now points to the directory where the certs were generated locally.&lt;/p&gt; &#xA;&lt;h3&gt;Build and run TAK server locally for development&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd takserver-core&#xA;../gradlew clean bootWar bootJar&#xA;cd example&#xA;export JDK_JAVA_OPTIONS=&#34;-Dloader.path=WEB-INF/lib-provided,WEB-INF/lib,WEB-INF/classes,file:lib/ -Djava.net.preferIPv4Stack=true -Djava.security.egd=file:/dev/./urandom -DIGNITE_UPDATE_NOTIFIER=false -DIGNITE_QUIET=true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;TAK server consists of two processes: Messaging and API. The messaging process can run independently, but the API process needs to connect to the ignite server that runs as a part of the messaging process. For both processes, -Xmx should always be specified.&lt;/p&gt; &#xA;&lt;p&gt;Run Messaging&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -Xmx&amp;lt;value&amp;gt; -Dspring.profiles.active=messaging -jar ../build/libs/takserver-core-xyz.war&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run API&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -Xmx&amp;lt;value&amp;gt; -Dspring.profiles.active=api -jar ../build/libs/takserver-core-xyz.war&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run Plugin Manager (useful when working on plugin capability)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -Xmx&amp;lt;value&amp;gt; -jar ../../takserver-plugin-manager/build/libs/takserver-plugin-manager-xyz.jar &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;RPM Generation&lt;/h3&gt; &#xA;&lt;p&gt;Separate RPMs are generated to install the following components of TAK server:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;api&lt;/li&gt; &#xA; &lt;li&gt;messaging&lt;/li&gt; &#xA; &lt;li&gt;database&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To build all RPMs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd &amp;lt;repo-home&amp;gt;/src&#xA;./gradlew clean buildRpm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Subproject RPMs may be built individually using the following commands:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;takserver-package:api:buildRpm&lt;/li&gt; &#xA; &lt;li&gt;takserver-package:messaging:buildRpm&lt;/li&gt; &#xA; &lt;li&gt;takserver-package:database:buildRpm&lt;/li&gt; &#xA; &lt;li&gt;takserver-package:launcher:buildRpm&lt;/li&gt; &#xA; &lt;li&gt;takserver-package:takserver:buildRpm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Certificates&lt;/h2&gt; &#xA;&lt;p&gt;TAK Server uses client and server certificates, TLS and X.509 mutual authentication and for channel encryption. Scripts for generating a private security enclave, including a Certificate Authority (CA), and certs for use by TAK Server and clients are located in /utils/misc/certs.&lt;/p&gt; &#xA;&lt;p&gt;See the TAK Server configuration guide (docs/TAK_Server_Configuration_Guide.pdf) for additional information about TAK Server&#39;s capabilities.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Logging levels for loggers at the class or package level can be set on startup:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;java -Xmx&amp;lt;value&amp;gt; -Dspring.profiles.active=messaging -jar ../build/libs/takserver-core-1.3.13-DEV-xyz.war --logging.level.com.bbn.marti.sync=DEBUG --logging.level.marti_data_access_audit_log=OFF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;turn down log level of all logs: &lt;code&gt;java -jar takserver.war $@ --logging.level.root=ERROR&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;turn down log level for subscriptions: &lt;code&gt;java -jar takserver.war $@ --logging.level.com.bbn.marti.service.Subscription=ERROR&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;turn off logs just for subscriptions: &lt;code&gt;java -jar takserver.war $@ --logging.level.com.bbn.marti.service.Subscription=OFF&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;entirely disable most logging: &lt;code&gt;java -jar takserver.war $@ --logging.level.root=OFF&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The default log level for most things is INFO. Possible levels are INFO, WARN, ERROR, OFF (in order of decreasing log frequency)&lt;/p&gt; &#xA;&lt;p&gt;These levels can be applied globally with this option&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--logging.level.root=&amp;lt;level&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;i.e.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--logging.level.root=ERROR&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Swagger&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://localhost:8443/swagger-ui.html&#34;&gt;https://localhost:8443/swagger-ui.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;TAK Server CI&lt;/h2&gt; &#xA;&lt;h3&gt;Integration Tests&lt;/h3&gt; &#xA;&lt;p&gt;Integration tests are executed against master nightly. In addition to this, they can be executed on any branch as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Navigate to the &lt;a href=&#34;https://git.tak.gov/core/takserver&#34;&gt;TAKServer Dashboard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;On the sidebar, hover over &#39;CI/CD&#39; and select &#39;Pipelines&#39;.&lt;/li&gt; &#xA; &lt;li&gt;Find your commit from the list and tap the Play button to the right, and select the test suite you would like to execute. The Main suites are what is executed nightly and execute all the tests.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Build takserver and plugin manager&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd &amp;lt;repo-home&amp;gt;/src&#xA;./gradlew clean build bootWar bootJar&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>