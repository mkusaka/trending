<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-24T01:38:37Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sveltejs/svelte</title>
    <updated>2023-06-24T01:38:37Z</updated>
    <id>tag:github.com,2023-06-24:/sveltejs/svelte</id>
    <link href="https://github.com/sveltejs/svelte" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Cybernetically enhanced web apps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://svelte.dev&#34;&gt;&lt;img src=&#34;https://sveltejs.github.io/assets/banner.png&#34; alt=&#34;Cybernetically enhanced web apps: Svelte&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/svelte/master/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/svelte.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://svelte.dev/chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/457912077277855764?label=chat&amp;amp;logo=discord&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is Svelte?&lt;/h2&gt; &#xA;&lt;p&gt;Svelte is a new way to build web applications. It&#39;s a compiler that takes your declarative components and converts them into efficient JavaScript that surgically updates the DOM.&lt;/p&gt; &#xA;&lt;p&gt;Learn more at the &lt;a href=&#34;https://svelte.dev&#34;&gt;Svelte website&lt;/a&gt;, or stop by the &lt;a href=&#34;https://svelte.dev/chat&#34;&gt;Discord chatroom&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Svelte&lt;/h2&gt; &#xA;&lt;p&gt;Svelte is an MIT-licensed open source project with its ongoing development made possible entirely by fantastic volunteers. If you&#39;d like to support their efforts, please consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/svelte&#34;&gt;Becoming a backer on Open Collective&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Funds donated via Open Collective will be used for compensating expenses related to Svelte&#39;s development such as hosting costs. If sufficient donations are received, funds may also be used to support Svelte&#39;s development more directly.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You may view &lt;a href=&#34;https://svelte.dev/roadmap&#34;&gt;our roadmap&lt;/a&gt; if you&#39;d like to see what we&#39;re currently working on.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see the &lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/svelte/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/svelte/master/packages/svelte&#34;&gt;svelte package&lt;/a&gt; for contributing to Svelte.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;Pull requests are encouraged and always welcome. &lt;a href=&#34;https://github.com/sveltejs/svelte/issues?q=is%3Aissue+is%3Aopen+sort%3Aupdated-desc&#34;&gt;Pick an issue&lt;/a&gt; and help us out!&lt;/p&gt; &#xA;&lt;p&gt;To install and work on Svelte locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sveltejs/svelte.git&#xA;cd svelte&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Do not use Yarn to install the dependencies, as the specific package versions in &lt;code&gt;pnpm-lock.json&lt;/code&gt; are used to build and test Svelte.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To build the compiler and all the other modules included in the package:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To watch for changes and continually rebuild the package (this is useful if you&#39;re using &lt;a href=&#34;https://pnpm.io/cli/link&#34;&gt;&lt;code&gt;pnpm link&lt;/code&gt;&lt;/a&gt; to test out changes in a project locally):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The compiler is written in &lt;a href=&#34;https://www.typescriptlang.org/&#34;&gt;TypeScript&lt;/a&gt;, but don&#39;t let that put you off — it&#39;s basically just JavaScript with type annotations. You&#39;ll pick it up in no time. If you&#39;re using an editor other than &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;Visual Studio Code&lt;/a&gt;, you may need to install a plugin in order to get syntax highlighting and code hints, etc.&lt;/p&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To filter tests, use &lt;code&gt;-g&lt;/code&gt; (aka &lt;code&gt;--grep&lt;/code&gt;). For example, to only run tests involving transitions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pnpm test -- -g transition&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;svelte.dev&lt;/h3&gt; &#xA;&lt;p&gt;The source code for &lt;a href=&#34;https://svelte.dev&#34;&gt;https://svelte.dev&lt;/a&gt; lives in the &lt;a href=&#34;https://github.com/sveltejs/sites&#34;&gt;sites&lt;/a&gt; repository, with all the documentation in the &lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/svelte/master/site/content&#34;&gt;site/content&lt;/a&gt; directory. The site is built with &lt;a href=&#34;https://kit.svelte.dev&#34;&gt;SvelteKit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Is svelte.dev down?&lt;/h2&gt; &#xA;&lt;p&gt;Probably not, but it&#39;s possible. If you can&#39;t seem to access any &lt;code&gt;.dev&lt;/code&gt; sites, check out &lt;a href=&#34;https://superuser.com/q/1413402&#34;&gt;this SuperUser question and answer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/svelte/master/LICENSE.md&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Nextjs-kr/Nextjs.kr</title>
    <updated>2023-06-24T01:38:37Z</updated>
    <id>tag:github.com,2023-06-24:/Nextjs-kr/Nextjs.kr</id>
    <link href="https://github.com/Nextjs-kr/Nextjs.kr" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Next.js Docs 한글화 작업&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Next.js 문서 기여 가이드에 오신 것을 환영합니다! 여러분을 만나게 되어 기쁩니다.&lt;/p&gt; &#xA;&lt;p&gt;이 페이지는 Next.js 문서를 편집하는 방법에 대한 지침을 제공합니다. 우리의 목표는 커뮤니티의 모든 사람이 문서를 기여하고 개선할 수 있는 권한을 갖도록 하는 것입니다.&lt;/p&gt; &#xA;&lt;h2&gt;왜 기여해야 하나요?&lt;/h2&gt; &#xA;&lt;p&gt;오픈소스 작업은 결코 끝나지 않으며 문서화 역시 마찬가지입니다. 문서에 기여하는 것은 초보자가 오픈소스에 참여할 수 있는 좋은 방법이며, 숙련된 개발자는 커뮤니티와 지식을 공유하면서 더 복잡한 주제를 명확히 할 수 있는 좋은 방법입니다.&lt;/p&gt; &#xA;&lt;p&gt;Next.js 문서에 기여함으로써 모든 개발자를 위한 더욱 강력한 학습 리소스를 구축하는 데 도움을 주실 수 있습니다. 오타나 혼란스러운 섹션을 발견했거나 특정 주제가 누락된 것을 발견했더라도 여러분의 기여를 환영하고 감사하게 생각합니다.&lt;/p&gt; &#xA;&lt;h2&gt;기여하는 방법&lt;/h2&gt; &#xA;&lt;p&gt;문서 콘텐츠는 &lt;a href=&#34;https://github.com/vercel/next.js/tree/canary/docs&#34;&gt;Next.js 레포지토리&lt;/a&gt;에서 찾을 수 있습니다. 기여하려면 GitHub에서 직접 파일을 편집하거나 리포지토리를 복제하여 로컬에서 파일을 편집할 수 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub Workflow&lt;/h3&gt; &#xA;&lt;p&gt;GitHub를 처음 사용하는 경우 &lt;a href=&#34;https://opensource.guide/how-to-contribute/#opening-a-pull-request&#34;&gt;GitHub 오픈 소스 가이드&lt;/a&gt;를 읽고 레포지토리 포크, 브랜치 생성 및 풀 리퀘스트 제출 방법을 알아보는 것이 좋습니다.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;: 기본 문서 코드는 비공개 코드베이스에 있으며, 이 코드베이스는 Next.js 공개 레포지토리에 동기화됩니다. 즉, 로컬에서 문서를 미리 볼 수 없습니다. 그러나 풀 리퀘스트를 병합한 후에는 &lt;a href=&#34;https://nextjs.org/docs&#34;&gt;nextjs.org&lt;/a&gt;에서 변경 사항을 볼 수 있습니다.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;MDX 작성&lt;/h3&gt; &#xA;&lt;p&gt;문서는 JSX 구문을 지원하는 마크다운 형식인 &lt;a href=&#34;https://mdxjs.com/&#34;&gt;MDX&lt;/a&gt;로 작성되었습니다. 이를 통해 문서에 React 컴포넌트를 포함할 수 있습니다. 마크다운 구문에 대한 간략한 개요는 &lt;a href=&#34;https://docs.github.com/en/get-started/writing-on-github/getting-started-with-writing-and-formatting-on-github/basic-writing-and-formatting-syntax&#34;&gt;GitHub 마크다운 가이드&lt;/a&gt;를 참조하세요.&lt;/p&gt; &#xA;&lt;h3&gt;VSCode&lt;/h3&gt; &#xA;&lt;h4&gt;로컬에서 변경 사항 미리보기&lt;/h4&gt; &#xA;&lt;p&gt;VSCode에는 편집 내용을 로컬에서 확인하는 데 사용할 수 있는 마크다운 미리 보기가 내장되어 있습니다. MDX 파일에 대해 미리 보기를 사용하려면 사용자 설정에 구성 옵션을 추가해야 합니다.&lt;/p&gt; &#xA;&lt;p&gt;명령 팔레트(&lt;code&gt;Mac의 경우 ⌘ + ⇧ + P, Windows의 경우 Ctrl + Shift + P&lt;/code&gt;)를 열고 &lt;code&gt;Preferences: Open User Settings (JSON)&lt;/code&gt;을 검색합니다.&lt;/p&gt; &#xA;&lt;p&gt;그런 다음 &lt;code&gt;settings.json&lt;/code&gt; 파일에 다음 줄을 추가합니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;files.associations&#34;: {&#xA;    &#34;*.mdx&#34;: &#34;markdown&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;그런 다음 명령 팔레트를 다시 열고 &lt;code&gt;Markdown: Preview File&lt;/code&gt; 또는 &lt;code&gt;Markdown: Open Preview to the Side&lt;/code&gt;을 검색합니다. 그러면 형식이 지정된 변경 내용을 확인할 수 있는 미리보기 창이 열립니다.&lt;/p&gt; &#xA;&lt;h4&gt;익스텐션&lt;/h4&gt; &#xA;&lt;p&gt;또한 VSCode 사용자에게는 다음 확장 프로그램을 권장합니다:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=unifiedjs.vscode-mdx&#34;&gt;MDX&lt;/a&gt;: MDX용 인텔리센스 및 구문 강조 표시.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=znck.grammarly&#34;&gt;Grammarly&lt;/a&gt;: 문법 및 맞춤법 검사&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode&#34;&gt;Prettier&lt;/a&gt;: 저장시 MDX 포맷에 맞춰 저장&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;검토 프로세스&lt;/h3&gt; &#xA;&lt;p&gt;기여를 제출하면 Next.js 또는 개발자 경험 팀에서 변경 사항을 검토하고 피드백을 제공하며 풀 리퀘스트가 준비되면 병합합니다.&lt;/p&gt; &#xA;&lt;p&gt;궁금한 점이 있거나 PR 의견에 추가 지원이 필요한 경우 알려주시기 바랍니다. Next.js 문서에 기여하고 커뮤니티의 일원이 되어 주셔서 감사합니다!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Tip:&lt;/strong&gt; PR을 제출하기 전에 &lt;code&gt;pnpm prettier-fix&lt;/code&gt;를 실행하여 Prettier를 실행하세요.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;파일 구조&lt;/h2&gt; &#xA;&lt;p&gt;문서에서는 &lt;strong&gt;파일 시스템 라우팅&lt;/strong&gt;을 사용합니다. &lt;a href=&#34;https://raw.githubusercontent.com/Nextjs-kr/Nextjs.kr/main/vercel/next.js/tree/canary/docs&#34;&gt;&lt;code&gt;/docs&lt;/code&gt;&lt;/a&gt; 내부의 각 폴더와 파일은 하나의 경로 세그먼트를 나타냅니다. 이러한 세그먼트는 URL 경로, 탐색 및 이동 경로를 생성하는 데 사용됩니다.&lt;/p&gt; &#xA;&lt;p&gt;파일 구조는 사이트에 표시되는 탐색을 반영하며 기본적으로 탐색 항목은 알파벳순으로 정렬됩니다. 그러나 폴더 또는 파일 이름 앞에 두 자리 숫자(00-)를 추가하여 항목의 순서를 변경할 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;예를 들어 &lt;a href=&#34;https://raw.githubusercontent.com/Nextjs-kr/Nextjs.kr/main/docs/app/api-reference/functions&#34;&gt;함수 API 레퍼런스&lt;/a&gt;에서는 개발자가 특정 함수를 쉽게 찾을 수 있도록 페이지가 알파벳순으로 정렬되어 있습니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;03-functions&#xA;├── cookies.mdx&#xA;├── draft-mode.mdx&#xA;├── fetch.mdx&#xA;└── ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;그러나 &lt;a href=&#34;https://raw.githubusercontent.com/Nextjs-kr/Nextjs.kr/main/docs/app/building-your-application/routing&#34;&gt;라우팅 섹션&lt;/a&gt;에서는 파일 앞에 두 자리 숫자가 붙어서 개발자가 이러한 개념을 익혀야 하는 순서대로 정렬되어 있습니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;02-routing&#xA;├── 01-defining-routes.mdx&#xA;├── 02-pages-and-layouts.mdx&#xA;├── 03-linking-and-navigating.mdx&#xA;└── ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;페이지를 빠르게 찾으려면 &lt;code&gt;⌘ + P&lt;/code&gt;(Mac) 또는 &lt;code&gt;Ctrl + P&lt;/code&gt;(Windows)를 사용하여 VSCode에서 검색창을 열 수 있습니다. 그런 다음 찾고 있는 페이지의 슬러그를 입력합니다. 예: &lt;code&gt;defining-routes&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;왜 매니페스트를 사용하지 않나요?&lt;/strong&gt;&lt;/p&gt; &#xA; &lt;p&gt;문서 탐색을 생성하는 또 다른 인기 있는 방법인 매니페스트 파일 사용을 고려했지만 매니페스트가 파일과 빠르게 동기화되지 않는다는 것을 알게 되었습니다. 파일 시스템 라우팅은 문서의 구조에 대해 생각하게 하고 Next.js에 더 네이티브한 느낌을 줍니다.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;메타데이터&lt;/h2&gt; &#xA;&lt;p&gt;각 페이지에는 파일 상단에 대시 세 개로 구분된 메타데이터 블록이 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;필수 항목&lt;/h3&gt; &#xA;&lt;p&gt;다음 필드는 &lt;strong&gt;필수&lt;/strong&gt; 입력 사항입니다:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;항목&lt;/th&gt; &#xA;   &lt;th&gt;설명&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SEO 및 OG 이미지에 사용되는 페이지의 &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; 제목입니다.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;SEO용 &lt;code&gt;&amp;lt;meta name=&#34;description&#34;&amp;gt;&lt;/code&gt; 태그에 사용되는 페이지의 설명입니다.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;tile: 페이지 제목&#xA;description: 페이지 설명&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;페이지 제목은 2&lt;del&gt;3단어(예: 이미지 최적화)로, 설명은 1&lt;/del&gt;2문장(예: Next.js에서 이미지를 최적화하는 방법 배우기)으로 제한하는 것이 좋습니다.&lt;/p&gt; &#xA;&lt;h3&gt;선택 항목&lt;/h3&gt; &#xA;&lt;p&gt;다음 필드는 &lt;strong&gt;선택&lt;/strong&gt; 사항입니다:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;항목&lt;/th&gt; &#xA;   &lt;th&gt;설명&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;nav_title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;탐색에서 페이지의 제목을 재정의합니다. 페이지 제목이 너무 길어 맞지 않을 때 유용합니다. 제공하지 않으면 &lt;code&gt;title&lt;/code&gt; 필드가 사용됩니다.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;source&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;콘텐츠를 공유 페이지로 가져옵니다. &lt;a href=&#34;https://raw.githubusercontent.com/Nextjs-kr/Nextjs.kr/main/#shared-pages&#34;&gt;공유 페이지&lt;/a&gt;를 참조하세요.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;related&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;문서 하단에 관련 페이지 목록이 있습니다. 이 페이지들은 자동으로 카드로 전환됩니다. &lt;a href=&#34;https://raw.githubusercontent.com/Nextjs-kr/Nextjs.kr/main/#related-links&#34;&gt;관련 링크&lt;/a&gt;를 참조하세요.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;nav_title: Nav 항목 제목&#xA;source: app/building-your-application/optimizing/images&#xA;related:&#xA;  description: 이미지 컴포넌트 API 참조를 참조하세요.&#xA;  links:&#xA;    - app/api-reference/components/image&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&lt;code&gt;App&lt;/code&gt; 및 &lt;code&gt;Pages&lt;/code&gt; 문서&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;앱 라우터&lt;/strong&gt;와 &lt;strong&gt;페이지 라우터&lt;/strong&gt;의 대부분의 기능은 완전히 다르기 때문에 각각에 대한 문서는 별도의 섹션(&lt;code&gt;02-app&lt;/code&gt; 및 &lt;code&gt;03-pages&lt;/code&gt;)에 보관되어 있습니다. 하지만 두 기능 간에 공유되는 몇 가지 기능이 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;공유 페이지&lt;/h3&gt; &#xA;&lt;p&gt;공유 페이지 콘텐츠 중복을 방지하고 콘텐츠가 동기화되지 않을 위험을 방지하기 위해 &lt;code&gt;source&lt;/code&gt; 필드를 사용하여 한 페이지의 콘텐츠를 다른 페이지로 가져옵니다. 예를 들어 &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 컴포넌트는 앱과 페이지에서 거의 동일하게 작동합니다. 콘텐츠를 복제하는 대신 &lt;code&gt;app/.../link.mdx&lt;/code&gt;에서 &lt;code&gt;pages/.../link.mdx&lt;/code&gt;로 콘텐츠를 가져올 수 있습니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mdx&#34;&gt;---&#xA;title: &amp;lt;Link&amp;gt;&#xA;description: &amp;lt;Link&amp;gt; 컴포넌트에 대한 API 참조입니다.&#xA;---&#xA;&#xA;이 API 레퍼런스는 링크 컴포넌트에서 사용할 수 있는 소품 사용 방법과&#xA;및 링크 컴포넌트에 사용할 수 있는 구성 옵션을 사용하는 방법을 이해하는 데 도움이 됩니다.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mdx&#34;&gt;---&#xA;title: &amp;lt;Link&amp;gt;&#xA;description: &amp;lt;Link&amp;gt; 컴포넌트에 대한 API 참조입니다.&#xA;source: app/api-reference/components/link&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;따라서 한 곳에서 콘텐츠를 편집하여 두 섹션에 모두 반영할 수 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;공유 콘텐츠&lt;/h3&gt; &#xA;&lt;p&gt;공유 페이지에는 때때로 &lt;strong&gt;앱 라우터&lt;/strong&gt; 또는 &lt;strong&gt;페이지 라우터&lt;/strong&gt; 전용 콘텐츠가 있을 수 있습니다. 예를 들어, &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 컴포넌트에는 &lt;strong&gt;Pages&lt;/strong&gt;에서만 사용할 수 있고 &lt;strong&gt;App&lt;/strong&gt;에서는 사용할 수 없는 &lt;code&gt;shallow&lt;/code&gt; prop이 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;콘텐츠가 올바른 라우터에만 표시되도록 하려면 콘텐츠 블록을 &amp;lt;앱 전용&amp;gt; 또는 &amp;lt;페이지 전용&amp;gt; 컴포넌트로 래핑하면 됩니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mdx&#34;&gt;이 콘텐츠는 App과 Pages 간에 공유됩니다.&#xA;&#xA;&amp;lt;PagesOnly&amp;gt;&#xA;&#xA;이 콘텐츠는 Pages 문서에만 표시됩니다.&#xA;&#xA;&amp;lt;/PagesOnly&amp;gt;&#xA;&#xA;이 콘텐츠는 App과 Pages 간에 공유됩니다.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;예제 및 코드 블록에 이러한 구성 요소를 사용할 가능성이 높습니다.&lt;/p&gt; &#xA;&lt;h2&gt;코드 블럭&lt;/h2&gt; &#xA;&lt;p&gt;코드 블록에는 복사하여 붙여넣을 수 있는 최소한의 작업 예제가 포함되어야 합니다. 즉, 추가 구성 없이 코드가 실행될 수 있어야 합니다.&lt;/p&gt; &#xA;&lt;p&gt;예를 들어 &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 컴포넌트 사용법을 설명하는 경우 &lt;code&gt;import&lt;/code&gt; 문과 &lt;code&gt;&amp;lt;Link&amp;gt;&lt;/code&gt; 컴포넌트 자체를 포함해야 합니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import Link from &#39;next/link&#39;&#xA;&#xA;export default function Page() {&#xA;  return &amp;lt;Link href=&#34;/about&#34;&amp;gt;About&amp;lt;/Link&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;예제를 커밋하기 전에 항상 로컬에서 실행하세요. 이렇게 하면 코드가 최신 상태이고 작동하는지 확인할 수 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;언어 및 파일 이름&lt;/h3&gt; &#xA;&lt;p&gt;코드 블록에는 언어와 &lt;code&gt;filename&lt;/code&gt;을 포함하는 헤더가 있어야 합니다. &lt;code&gt;filename&lt;/code&gt; 프로퍼티를 추가하여 사용자에게 명령을 입력할 위치를 알려주는 특수 터미널 아이콘을 렌더링합니다. 예:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mdx&#34;&gt;```bash filename=&#34;Terminal&#34;&#xA;npx create-next-app&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;문서에 있는 대부분의 예제는 &lt;code&gt;tsx&lt;/code&gt;와 &lt;code&gt;jsx&lt;/code&gt;로 작성되었으며, 일부는 &lt;code&gt;bash&lt;/code&gt;로 작성되었습니다. 하지만 지원되는 모든 언어를 사용할 수 있으며, &lt;a href=&#34;https://github.com/shikijs/shiki/raw/main/docs/languages.md#all-languages&#34;&gt;전체 목록&lt;/a&gt;은 다음과 같습니다.&lt;/p&gt; &#xA;&lt;p&gt;JavaScript 코드 블록을 작성할 때 다음과 같은 언어 및 확장자 조합을 사용합니다.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;언어&lt;/th&gt; &#xA;   &lt;th&gt;확장자&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript 파일 with JSX code&lt;/td&gt; &#xA;   &lt;td&gt;jsx&lt;/td&gt; &#xA;   &lt;td&gt;.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;JavaScript 파일 without JSX&lt;/td&gt; &#xA;   &lt;td&gt;js&lt;/td&gt; &#xA;   &lt;td&gt;.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript 파일 with JSX&lt;/td&gt; &#xA;   &lt;td&gt;tsx&lt;/td&gt; &#xA;   &lt;td&gt;.tsx&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TypeScript 파일 without JSX&lt;/td&gt; &#xA;   &lt;td&gt;ts&lt;/td&gt; &#xA;   &lt;td&gt;.ts&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;TS 및 JS Switcher&lt;/h3&gt; &#xA;&lt;p&gt;언어 전환기를 추가하여 타입스크립트와 자바스크립트 사이를 전환할 수 있습니다. 코드 블록은 사용자를 위해 JavaScript 버전과 함께 TypeScript로 먼저 작성해야 합니다.&lt;/p&gt; &#xA;&lt;p&gt;현재는 TS와 JS 예제를 차례로 작성하고 &lt;code&gt;switcher&lt;/code&gt; prop으로 연결합니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mdx&#34;&gt;```tsx filename=&#34;app/page.tsx&#34; switcher&#xA;&#xA;```&#xA;&#xA;```jsx filename=&#34;app/page.js&#34; switcher&#xA;&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;: 향후에는 타입스크립트 스니펫을 자바스크립트로 자동 컴파일할 계획입니다. 그전까지는 &lt;a href=&#34;https://transform.tools/typescript-to-javascript&#34;&gt;transform.tools&lt;/a&gt;를 사용할 수 있습니다.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;라인 강조 표시&lt;/h3&gt; &#xA;&lt;p&gt;코드 줄을 강조 표시할 수 있습니다. 코드의 특정 부분에 주의를 환기시키고 싶을 때 유용합니다. &lt;code&gt;highlight&lt;/code&gt; prop에 숫자를 전달하여 줄을 강조 표시할 수 있습니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;한줄:&lt;/strong&gt; &lt;code&gt;highlight={1}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import Link from &#39;next/link&#39;&#xA;&#xA;export default function Page() {&#xA;  return &amp;lt;Link href=&#34;/about&#34;&amp;gt;About&amp;lt;/Link&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;여러줄:&lt;/strong&gt; &lt;code&gt;highlight={1,3}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import Link from &#39;next/link&#39;&#xA;&#xA;export default function Page() {&#xA;  return &amp;lt;Link href=&#34;/about&#34;&amp;gt;About&amp;lt;/Link&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;범위:&lt;/strong&gt; &lt;code&gt;highlight={1-5}&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import Link from &#39;next/link&#39;&#xA;&#xA;export default function Page() {&#xA;  return &amp;lt;Link href=&#34;/about&#34;&amp;gt;About&amp;lt;/Link&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;아이콘&lt;/h2&gt; &#xA;&lt;p&gt;문서에서 사용할 수 있는 아이콘은 다음과 같습니다:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mdx&#34;&gt;&amp;lt;Check size={18} /&amp;gt;&#xA;&amp;lt;Cross size={18} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;저희는 문서에 이모티콘을 사용하지 않습니다.&lt;/p&gt; &#xA;&lt;h2&gt;참고&lt;/h2&gt; &#xA;&lt;p&gt;중요하지만 중요하지 않은 정보는 메모를 사용하세요. 메모는 사용자의 주의를 분산시키지 않으면서 정보를 추가할 수 있는 좋은 방법입니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mdx&#34;&gt;&amp;gt; **참고**: 한 줄 메모입니다.&#xA;&#xA;&amp;gt; **참고**:&#xA;&amp;gt;&#xA;&amp;gt; - 여러 줄로 된 노트에도 이 형식을 사용합니다.&#xA;&amp;gt; - 알아두거나 명심해야 할 항목이 여러 개 있을 때가 있습니다.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Output:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;: 한 줄 메모입니다.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;:&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;여러 줄로 된 노트에도 이 형식을 사용합니다.&lt;/li&gt; &#xA;  &lt;li&gt;알아두거나 명심해야 할 항목이 여러 개 있을 때가 있습니다.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;관련 링크&lt;/h2&gt; &#xA;&lt;p&gt;관련 링크는 논리적인 다음 단계로 연결되는 링크를 추가하여 사용자의 학습 여정을 안내합니다.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;링크는 페이지의 기본 콘텐츠 아래에 카드에 표시됩니다.&lt;/li&gt; &#xA; &lt;li&gt;링크는 하위 페이지가 있는 페이지에 대해 자동으로 생성됩니다. 예를 들어 &lt;a href=&#34;https://raw.githubusercontent.com/Nextjs-kr/Nextjs.kr/main/docs/app/building-your-application/optimizing&#34;&gt;최적화&lt;/a&gt; 섹션에는 모든 하위 페이지에 대한 링크가 있습니다. 페이지 메타데이터의 &lt;code&gt;related&lt;/code&gt; 필드를 사용하여 관련 링크를 만듭니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;페이지 메타데이터의 &lt;code&gt;related&lt;/code&gt; 필드를 사용하여 관련 링크를 만듭니다.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;related:&#xA;  description: 첫 번째 애플리케이션을 빠르게 시작하는 방법을 알아보세요.&#xA;  links:&#xA;    - app/building-your-application/routing/defining-routes&#xA;    - app/building-your-application/data-fetching&#xA;    - app/api-reference/file-conventions/page&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;중첩 항목&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;항목&lt;/th&gt; &#xA;   &lt;th&gt;필수?&lt;/th&gt; &#xA;   &lt;th&gt;설명&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;선택&lt;/td&gt; &#xA;   &lt;td&gt;카드 목록의 제목입니다. 기본값은 &lt;strong&gt;다음 단계&lt;/strong&gt;입니다.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;선택&lt;/td&gt; &#xA;   &lt;td&gt;카드 목록에 대한 설명입니다.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;links&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;필수&lt;/td&gt; &#xA;   &lt;td&gt;다른 문서 페이지에 대한 링크 목록입니다. 각 목록 항목은 상대 URL 경로(선행 슬래시 제외)여야 합니다. 예: &lt;code&gt;app/api-reference/file-conventions/page&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;다이어그램&lt;/h2&gt; &#xA;&lt;p&gt;다이어그램은 복잡한 개념을 설명하는 좋은 방법입니다. 저희는 Vercel의 디자인 가이드에 따라 &lt;a href=&#34;https://www.figma.com/&#34;&gt;Figma&lt;/a&gt; 사용하여 다이어그램을 만듭니다.&lt;/p&gt; &#xA;&lt;p&gt;현재 이 다이어그램은 비공개 Next.js 사이트의 &lt;code&gt;/public&lt;/code&gt; 폴더에 있습니다. 다이어그램을 업데이트하거나 추가하고 싶으시면 아이디어와 함께 &lt;a href=&#34;https://github.com/vercel/next.js/issues/new?assignees=&amp;amp;labels=template%3A+documentation&amp;amp;projects=&amp;amp;template=4.docs_request.yml&amp;amp;title=Docs%3A+&#34;&gt;GitHub 이슈&lt;/a&gt;를 열어주세요.&lt;/p&gt; &#xA;&lt;h2&gt;사용자 정의 컴포넌트 및 HTML&lt;/h2&gt; &#xA;&lt;p&gt;다음은 문서에 사용할 수 있는 React 컴포넌트입니다: &lt;code&gt;&amp;lt;Image /&amp;gt;&lt;/code&gt; (next/image), &lt;code&gt;&amp;lt;PagesOnly /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;AppOnly /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Cross /&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Check /&amp;gt;&lt;/code&gt;.입니다. 문서에 &lt;code&gt;&amp;lt;details&amp;gt;&lt;/code&gt; 태그 외에 원시 HTML은 허용되지 않습니다.&lt;/p&gt; &#xA;&lt;p&gt;새로운 컴포넌트에 대한 아이디어가 있으시면 &lt;a href=&#34;https://github.com/vercel/next.js/issues/new/choose&#34;&gt;GitHub 이슈&lt;/a&gt;를 개설해 주세요.&lt;/p&gt; &#xA;&lt;h2&gt;스타일 가이드&lt;/h2&gt; &#xA;&lt;p&gt;이 섹션에는 기술 문서 작성을 처음 접하는 사용자를 위한 문서 작성 가이드라인이 포함되어 있습니다.&lt;/p&gt; &#xA;&lt;h3&gt;페이지 템플릿&lt;/h3&gt; &#xA;&lt;p&gt;이 섹션에는 기술 문서 작성을 처음 접하는 사용자를 위한 문서 작성 가이드라인이 포함되어 있습니다:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;개요&lt;/strong&gt;: 페이지의 첫 단락은 사용자에게 해당 기능이 무엇이며 어떤 용도로 사용되는지 알려주어야 합니다. 그 다음에는 최소한의 작동 예제 또는 해당 API 참조가 나와야 합니다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;규칙&lt;/strong&gt;: 기능에 규칙이 있는 경우 여기에 설명해야 합니다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;예제&lt;/strong&gt;: 다양한 사용 사례에서 해당 기능을 어떻게 사용할 수 있는지 보여줍니다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API 테이블&lt;/strong&gt;: API 페이지에는 섹션으로 바로 가기 링크(가능한 경우)가 있는 개요 테이블이 페이지 맨 위에 있어야 합니다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;다음 단계(관련 링크)&lt;/strong&gt;: 사용자의 학습 여정을 안내하기 위해 관련 페이지로 연결되는 링크를 추가합니다.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;필요에 따라 이 섹션을 자유롭게 추가하세요.&lt;/p&gt; &#xA;&lt;h3&gt;페이지 유형&lt;/h3&gt; &#xA;&lt;p&gt;문서 페이지도 두 가지 카테고리로 나뉩니다: 개념과 참조입니다.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;개념 페이지&lt;/strong&gt;는 개념이나 기능을 설명하는 데 사용됩니다. 일반적으로 참조 페이지보다 더 길고 더 많은 정보를 포함합니다. Next.js 문서에서 개념 페이지는 &lt;strong&gt;애플리케이션 구축&lt;/strong&gt; 섹션에 있습니다. &lt;strong&gt;참조 페이지&lt;/strong&gt;는 특정 API를 설명하는 데 사용됩니다. 일반적으로 더 짧고 집중적인 내용을 담고 있습니다. Next.js 문서에서 참조 페이지는 &lt;strong&gt;API 참조&lt;/strong&gt; 섹션에 있습니다.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;참고&lt;/strong&gt;: 기여하는 페이지에 따라 다른 목소리와 스타일을 따라야 할 수도 있습니다. 예를 들어, 개념 페이지는 보다 교육적인 성격이 강하며 사용자를 지칭할 때 귀하라는 단어를 사용합니다. 참조 페이지는 좀 더 기술적인 페이지로, &#39;만들기, 업데이트, 수락&#39;과 같은 명령형 단어를 사용하며 귀하라는 단어를 생략하는 경향이 있습니다.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;억양&lt;/h3&gt; &#xA;&lt;p&gt;다음은 문서 전체에서 일관된 스타일과 억양을 유지하기 위한 몇 가지 지침입니다:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;명확하고 간결한 문장을 작성하세요. 접점을 피하세요. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;쉼표를 많이 사용하는 경우 문장을 여러 문장으로 나누거나 목록을 사용하는 것이 좋습니다.&lt;/li&gt; &#xA;   &lt;li&gt;복잡한 단어를 더 간단한 단어로 바꾸세요. 예를 들어 &lt;em&gt;활용하다&lt;/em&gt; 대신 &lt;em&gt;사용하다&lt;/em&gt;를 사용하세요.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;이것&lt;/em&gt;에 주의하세요. 모호하고 혼란스러울 수 있으므로 불분명한 경우 문장의 주어를 반복하는 것을 두려워하지 마세요. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;예를 들어, &lt;em&gt;Next.js는 이것&lt;/em&gt;을 사용하는 대신 &lt;em&gt;React를 사용&lt;/em&gt;합니다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;수동태 대신 능동태를 사용하세요. 능동태 문장이 더 읽기 쉽습니다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;예를 들어 Next.js는 &lt;em&gt;React가&lt;/em&gt; 아닌 &lt;em&gt;React를&lt;/em&gt; 사용합니다&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;쉬운&lt;/em&gt;, &lt;em&gt;빠른&lt;/em&gt;, &lt;em&gt;간단한&lt;/em&gt;, &lt;em&gt;그냥&lt;/em&gt; 등과 같은 단어를 사용하지 마세요. 이는 주관적인 표현이며 사용자에게 실망감을 줄 수 있습니다.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;하지 않음&lt;/em&gt;, &lt;em&gt;할 수 없음&lt;/em&gt;, &lt;em&gt;불가능&lt;/em&gt; 등과 같은 부정적인 단어는 피하세요. 이는 독자에게 실망감을 줄 수 있습니다. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;예를 들어 &lt;em&gt;&#34;페이지 간을 연결하는데 &lt;code&gt;&amp;lt;a&amp;gt;&lt;/code&gt; 태그를 사용하지 마세요&#34;&lt;/em&gt; 대신 *&#34;&lt;code&gt;Link&lt;/code&gt; 컴포넌트를 사용하여 페이지 간 링크를 만들 수 있습니다.&#34;*로 변경할 수 있습니다.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;2인칭(당신)으로 작성합니다. 이렇게 하면 더 개인적이고 매력적입니다.&lt;/li&gt; &#xA; &lt;li&gt;성 중립적인 언어를 사용합니다. 청중을 지칭할 때는 &lt;em&gt;개발자&lt;/em&gt;, &lt;em&gt;사용자&lt;/em&gt; 또는 &lt;em&gt;독자&lt;/em&gt;를 사용합니다.&lt;/li&gt; &#xA; &lt;li&gt;코드 예제를 추가하는 경우 형식이 올바르게 지정되어 있고 작동하는지 확인하세요.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;이 가이드라인이 모든 것을 담고 있지는 않지만 시작하는 데 도움이 될 것입니다. 기술 문서 작성에 대해 더 자세히 알아보고 싶다면 &lt;a href=&#34;https://developers.google.com/tech-writing/overview&#34;&gt;Google 기술문서 작성 과정&lt;/a&gt;을 확인하세요.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;문서에 기여하고 Next.js 커뮤니티의 일원이 되어 주셔서 감사합니다!&lt;/p&gt; &#xA;&lt;!-- To do: Latest Contributors Component --&gt;</summary>
  </entry>
  <entry>
    <title>daveebbelaar/langchain-experiments</title>
    <updated>2023-06-24T01:38:37Z</updated>
    <id>tag:github.com,2023-06-24:/daveebbelaar/langchain-experiments</id>
    <link href="https://github.com/daveebbelaar/langchain-experiments" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building Apps with LLMs&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LangChain Experiments&lt;/h1&gt; &#xA;&lt;p&gt;This repository focuses on experimenting with the LangChain library for building powerful applications with large language models (LLMs). By leveraging state-of-the-art language models like OpenAI&#39;s GPT-3.5 Turbo (and soon GPT-4), this project showcases how to create a searchable database from a YouTube video transcript, perform similarity search queries using the FAISS library, and respond to user questions with relevant and precise information.&lt;/p&gt; &#xA;&lt;p&gt;LangChain is a comprehensive framework designed for developing applications powered by language models. It goes beyond merely calling an LLM via an API, as the most advanced and differentiated applications are also data-aware and agentic, enabling language models to connect with other data sources and interact with their environment. The LangChain framework is specifically built to address these principles.&lt;/p&gt; &#xA;&lt;h2&gt;LangChain&lt;/h2&gt; &#xA;&lt;p&gt;The Python-specific portion of LangChain&#39;s documentation covers several main modules, each providing examples, how-to guides, reference docs, and conceptual guides. These modules include:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Models: Various model types and model integrations supported by LangChain.&lt;/li&gt; &#xA; &lt;li&gt;Prompts: Prompt management, optimization, and serialization.&lt;/li&gt; &#xA; &lt;li&gt;Memory: State persistence between chain or agent calls, including a standard memory interface, memory implementations, and examples of chains and agents utilizing memory.&lt;/li&gt; &#xA; &lt;li&gt;Indexes: Combining LLMs with custom text data to enhance their capabilities.&lt;/li&gt; &#xA; &lt;li&gt;Chains: Sequences of calls, either to an LLM or a different utility, with a standard interface, integrations, and end-to-end chain examples.&lt;/li&gt; &#xA; &lt;li&gt;Agents: LLMs that make decisions about actions, observe the results, and repeat the process until completion, with a standard interface, agent selection, and end-to-end agent examples.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Use Cases&lt;/h2&gt; &#xA;&lt;p&gt;With LangChain, developers can create various applications, such as customer support chatbots, automated content generators, data analysis tools, and intelligent search engines. These applications can help businesses streamline their workflows, reduce manual labor, and improve customer experiences.&lt;/p&gt; &#xA;&lt;h2&gt;Service&lt;/h2&gt; &#xA;&lt;p&gt;By selling LangChain-based applications as a service to businesses, you can provide tailored solutions to meet their specific needs. For instance, companies can benefit from customizable chatbots that handle customer inquiries, personalized content creation tools for marketing, or internal data analysis systems that harness the power of LLMs to extract valuable insights. The possibilities are vast, and LangChain&#39;s flexible framework makes it the ideal choice for developing and deploying advanced language model applications in diverse industries.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.python.org/downloads/&#34;&gt;Python 3.6 or higher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://python.langchain.com/en/latest/index.html&#34;&gt;LangChain library&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/&#34;&gt;OpenAI API key&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://serpapi.com/&#34;&gt;SerpAPI API Key&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;OpenAI API Models&lt;/h2&gt; &#xA;&lt;p&gt;The OpenAI API is powered by a diverse set of &lt;a href=&#34;https://platform.openai.com/docs/models&#34;&gt;models&lt;/a&gt; with different capabilities and price points. You can also make limited customizations to our original base models for your specific use case with fine-tuning.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h4&gt;1. Clone the repository&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/daveebbelaar/langchain-experiments.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;2. Create a Python environment&lt;/h4&gt; &#xA;&lt;p&gt;Python 3.6 or higher using &lt;code&gt;venv&lt;/code&gt; or &lt;code&gt;conda&lt;/code&gt;. Using &lt;code&gt;venv&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd langchain-experiments&#xA;python3 -m venv env&#xA;source env/bin/activate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using &lt;code&gt;conda&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd langchain-experiments&#xA;conda create -n langchain-env python=3.8&#xA;conda activate langchain-env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;3. Install the required dependencies&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pip install -r requirements.txt&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;4. Set up the keys in a .env file&lt;/h4&gt; &#xA;&lt;p&gt;First, create a &lt;code&gt;.env&lt;/code&gt; file in the root directory of the project. Inside the file, add your OpenAI API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-makefile&#34;&gt;OPENAI_API_KEY=&#34;your_api_key_here&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Save the file and close it. In your Python script or Jupyter notebook, load the &lt;code&gt;.env&lt;/code&gt; file using the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from dotenv import load_dotenv, find_dotenv&#xA;load_dotenv(find_dotenv())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By using the right naming convention for the environment variable, you don&#39;t have to manually store the key in a separate variable and pass it to the function. The library or package that requires the API key will automatically recognize the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; environment variable and use its value.&lt;/p&gt; &#xA;&lt;p&gt;When needed, you can access the &lt;code&gt;OPENAI_API_KEY&lt;/code&gt; as an environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import os&#xA;api_key = os.environ[&#39;OPENAI_API_KEY&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now your Python environment is set up, and you can proceed with running the experiments.&lt;/p&gt; &#xA;&lt;h2&gt;Datalumina&lt;/h2&gt; &#xA;&lt;p&gt;This document is provided to you by Datalumina. We help data analysts, engineers, and scientists launch and scale a successful freelance business — $100k+ /year, fun projects, happy clients. If you want to learn more about what we do, you can visit our &lt;a href=&#34;https://www.datalumina.io/&#34;&gt;website&lt;/a&gt; and subscribe to our &lt;a href=&#34;https://www.datalumina.io/newsletter&#34;&gt;newsletter&lt;/a&gt;. Feel free to share this document with your data friends and colleagues.&lt;/p&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;For video tutorials on how to use the LangChain library and run experiments, visit the YouTube channel: &lt;a href=&#34;https://raw.githubusercontent.com/daveebbelaar/langchain-experiments/main/youtube.com/@daveebbelaar&#34;&gt;youtube.com/@daveebbelaar&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>