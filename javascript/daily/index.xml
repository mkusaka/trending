<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-05-24T01:31:57Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>academind/react-native-practical-guide-code</title>
    <updated>2025-05-24T01:31:57Z</updated>
    <id>tag:github.com,2025-05-24:/academind/react-native-practical-guide-code</id>
    <link href="https://github.com/academind/react-native-practical-guide-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Course code &amp; attachments for our &#34;React Native - The Practical Guide&#34; (https://acad.link/react-native) course.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Native - The Practical Guide Code &amp;amp; Course Materials&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains code snapshots and other attachments (e.g., slides) for our &lt;a href=&#34;https://acad.link/react-native&#34;&gt;React Native - The Practical Guide&lt;/a&gt; course.&lt;/p&gt; &#xA;&lt;p&gt;You may use the provided resources to follow along with the course, debug your code or to compare your solution to Maximilian&#39;s. Re-distributing course materials (including the content provided with this repository) is not permitted.&lt;/p&gt; &#xA;&lt;h1&gt;How To Navigate This Repository&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;/code&lt;/code&gt; folder is separated into the different course sections&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;each section contains multiple snapshots throughout the section&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;/attachments&lt;/code&gt; folder is also separated into different course sections and contains any relevant attachments from the section, as well as starting snapshots (if applicable)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;/slides&lt;/code&gt; folder contains any relavant pdf documents of all the slides in this course, split across sections&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h1&gt;Using Code Snapshots&lt;/h1&gt; &#xA;&lt;p&gt;Code snapshots (which you find in &lt;code&gt;/code/&amp;lt;section-name&amp;gt;/&lt;/code&gt;) are there for you to compare your code to mine and find + fix errors you might have in your code.&lt;/p&gt; &#xA;&lt;p&gt;You can either view my code directly here on Github (you can open + view code files without issues here) or you download the snapshots. To download (or &lt;a href=&#34;https://docs.github.com/en/repositories/creating-and-managing-repositories/cloning-a-repository&#34;&gt;clone&lt;/a&gt;) the snapshots, simply use the &lt;strong&gt;&#34;Code&#34; button&lt;/strong&gt; in the top right corner of the repository. This allows you to download the currently selected branch. You can then browse the code snapshots locally on your machine.&lt;/p&gt; &#xA;&lt;p&gt;The subfolders in the &lt;code&gt;/code&lt;/code&gt; folder are named such that mapping them to the course sections is straightforward (inside of which you will find intermittent snapshots throughout each section).&lt;/p&gt; &#xA;&lt;h1&gt;Running The Provided Code&lt;/h1&gt; &#xA;&lt;p&gt;The provided code is primarily meant to be used for code comparisons (i.e., so that you can compare your code to mine to find + fix errors).&lt;/p&gt; &#xA;&lt;p&gt;But you can also run my project code by navigating into the respective code section snapshots folder (i.e., a subfolder in the &lt;code&gt;/code&lt;/code&gt; folder) and executing &lt;code&gt;npm install&lt;/code&gt; followed by &lt;code&gt;npm start&lt;/code&gt; there.&lt;/p&gt; &#xA;&lt;p&gt;Please note that dependency mismatches could lead to errors here, even if the provided code itself still works and is correct. In addition, you will always need to bring your own backend URLs (e.g., Firebase) or API keys, if any were used in the course section!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>auth0/react-native-auth0</title>
    <updated>2025-05-24T01:31:57Z</updated>
    <id>tag:github.com,2025-05-24:/auth0/react-native-auth0</id>
    <link href="https://github.com/auth0/react-native-auth0" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React Native toolkit for Auth0 API&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://cdn.auth0.com/website/sdks/banners/react-native-auth0-banner.png&#34; alt=&#34;react-native-auth0&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/auth0/react-native-auth0&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/auth0/react-native-auth0.svg?branch=master&amp;amp;style=flat-square&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/react-native-auth0&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react-native-auth0.svg?style=flat-square&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/auth0/react-native-auth0&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/auth0/react-native-auth0.svg?style=flat-square&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#license&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/l/react-native-auth0.svg?style=flat-square&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/react-native-auth0&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/react-native-auth0.svg?style=flat-square&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.com/projects/git%2Bgithub.com%2Fauth0%2Freact-native-auth0?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/git%2Bgithub.com%2Fauth0%2Freact-native-auth0.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;üìö &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#documentation&#34;&gt;Documentation&lt;/a&gt; ‚Ä¢ üöÄ &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt; ‚Ä¢ ‚è≠Ô∏è &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#next-steps&#34;&gt;Next Steps&lt;/a&gt; ‚Ä¢ ‚ùì &lt;a href=&#34;https://github.com/auth0/react-native-auth0/raw/master/FAQ.md&#34;&gt;FAQs&lt;/a&gt; ‚Ä¢ ‚ùì &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#feedback&#34;&gt;Feedback&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;‚ö†Ô∏è Important Migration Notice: v4.0.0&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re excited to announce the release of react-native-auth0 &lt;code&gt;v4.0.0&lt;/code&gt;! Please note that this update includes breaking changes that require your attention. To ensure a smooth transition, please review our üëâ &lt;a href=&#34;https://github.com/auth0/react-native-auth0/raw/master/MIGRATION_GUIDE.md&#34;&gt;Migration Guide&lt;/a&gt; üëà for detailed instructions on updating your integration.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://auth0.com/docs/quickstart/native/react-native/interactive&#34;&gt;Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://auth0.com/docs/quickstart/native/react-native-expo/interactive&#34;&gt;Expo Quickstart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0-samples/auth0-react-native-sample/tree/master/00-Login-Hooks&#34;&gt;Sample App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0-samples/auth0-react-native-sample/tree/master/00-Login-Expo&#34;&gt;Expo Sample App&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/react-native-auth0/raw/master/FAQ.md&#34;&gt;FAQs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/react-native-auth0/raw/master/EXAMPLES.md&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://auth0.github.io/react-native-auth0/&#34;&gt;Docs Site&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;p&gt;This SDK targets apps that are using React Native SDK version &lt;code&gt;0.65.0&lt;/code&gt; and up. If you&#39;re using an older React Native version, see the compatibility matrix below.&lt;/p&gt; &#xA;&lt;h3&gt;Platform compatibility&lt;/h3&gt; &#xA;&lt;p&gt;The following shows platform minimums for running projects with this SDK:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Platform&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Minimum version&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13.0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;34&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Our SDK requires a minimum iOS deployment target of 13.0. In your project&#39;s ios/Podfile, ensure your platform target is set to 13.0.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;platform :ios, &#39;13.0&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;First install the native library module:&lt;/p&gt; &#xA;&lt;h3&gt;With &lt;a href=&#34;https://www.npmjs.com&#34;&gt;npm&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ npm install react-native-auth0 --save&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;With &lt;a href=&#34;https://yarnpkg.com/en/&#34;&gt;Yarn&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;$ yarn add react-native-auth0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, you need to run the following command to install the ios app pods with Cocoapods. That will auto-link the iOS library:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ cd ios &amp;amp;&amp;amp; pod install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Configure the SDK&lt;/h3&gt; &#xA;&lt;p&gt;You need to make your Android, iOS or Expo applications aware that an authentication result will be received from the browser. This SDK makes use of the Android&#39;s Package Name and its analogous iOS&#39;s Product Bundle Identifier to generate the redirect URL. Each platform has its own set of instructions.&lt;/p&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Before version 2.9.0, this SDK required you to add an intent filter to the Activity on which you&#39;re going to receive the authentication result, and to use the &lt;code&gt;singleTask&lt;/code&gt; &lt;strong&gt;launchMode&lt;/strong&gt; in that activity. To migrate your app to version 2.9.0+, &lt;strong&gt;remove both&lt;/strong&gt; and continue with the instructions below. You can also check out a sample migration diff &lt;a href=&#34;https://github.com/auth0-samples/auth0-react-native-sample/commit/69f79c83ceed40f44b239bbd16e79ecaa70ef70a&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Open your app&#39;s &lt;code&gt;build.gradle&lt;/code&gt; file (typically at &lt;code&gt;android/app/build.gradle&lt;/code&gt;) and add the following manifest placeholders:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {&#xA;    defaultConfig {&#xA;        // Add the next line&#xA;        manifestPlaceholders = [auth0Domain: &#34;YOUR_AUTH0_DOMAIN&#34;, auth0Scheme: &#34;${applicationId}.auth0&#34;]&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;auth0Domain&lt;/code&gt; value must be replaced with your Auth0 domain value. So if you have &lt;code&gt;samples.us.auth0.com&lt;/code&gt; as your Auth0 domain you would have a configuration like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-groovy&#34;&gt;android {&#xA;    defaultConfig {&#xA;        manifestPlaceholders = [auth0Domain: &#34;samples.us.auth0.com&#34;, auth0Scheme: &#34;${applicationId}.auth0&#34;]&#xA;    }&#xA;    ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;applicationId&lt;/code&gt; value will be auto-replaced at runtime with the package name or ID of your application (e.g. &lt;code&gt;com.example.app&lt;/code&gt;). You can change this value from the &lt;code&gt;build.gradle&lt;/code&gt; file. You can also check it at the top of your &lt;code&gt;AndroidManifest.xml&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that if your Android application is using &lt;a href=&#34;https://developer.android.com/studio/build/build-variants#product-flavors&#34;&gt;product flavors&lt;/a&gt;, you might need to specify different manifest placeholders for each flavor.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;If you use a value other than &lt;code&gt;applicationId&lt;/code&gt; in &lt;code&gt;auth0Scheme&lt;/code&gt; you will also need to pass it as the &lt;code&gt;customScheme&lt;/code&gt; option parameter of the &lt;code&gt;authorize&lt;/code&gt; and &lt;code&gt;clearSession&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;p&gt;Take note of this value as you&#39;ll be requiring it to define the callback URLs below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more info please read the &lt;a href=&#34;https://facebook.github.io/react-native/docs/linking.html&#34;&gt;React Native docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Skipping the Web Authentication setup&lt;/h5&gt; &#xA;&lt;p&gt;If you don&#39;t plan to use Web Authentication, you will notice that the compiler will still prompt you to provide the &lt;code&gt;manifestPlaceholders&lt;/code&gt; values, since the &lt;code&gt;RedirectActivity&lt;/code&gt; included in this library will require them, and the Gradle tasks won&#39;t be able to run without them.&lt;/p&gt; &#xA;&lt;p&gt;Re-declare the activity manually with &lt;code&gt;tools:node=&#34;remove&#34;&lt;/code&gt; in your app&#39;s Android Manifest in order to make the manifest merger remove it from the final manifest file. Additionally, one more unused activity can be removed from the final APK by using the same process. A complete snippet to achieve this is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;activity&#xA;    android:name=&#34;com.auth0.android.provider.AuthenticationActivity&#34;&#xA;    tools:node=&#34;remove&#34;/&amp;gt;&#xA;&amp;lt;!-- Optional: Remove RedirectActivity --&amp;gt;&#xA;&amp;lt;activity&#xA;    android:name=&#34;com.auth0.android.provider.RedirectActivity&#34;&#xA;    tools:node=&#34;remove&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;p&gt;Inside the &lt;code&gt;ios&lt;/code&gt; folder find the file &lt;code&gt;AppDelegate.[swift|m]&lt;/code&gt; add the following to it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;#import &amp;lt;React/RCTLinkingManager.h&amp;gt;&#xA;&#xA;- (BOOL)application:(UIApplication *)app openURL:(NSURL *)url&#xA;            options:(NSDictionary&amp;lt;UIApplicationOpenURLOptionsKey, id&amp;gt; *)options&#xA;{&#xA;  return [RCTLinkingManager application:app openURL:url options:options];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Inside the &lt;code&gt;ios&lt;/code&gt; folder open the &lt;code&gt;Info.plist&lt;/code&gt; and locate the value for &lt;code&gt;CFBundleIdentifier&lt;/code&gt;, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;CFBundleIdentifier&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;$(PRODUCT_BUNDLE_IDENTIFIER)&amp;lt;/string&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and then below it register a URL type entry using the value of &lt;code&gt;CFBundleIdentifier&lt;/code&gt; as the value for &lt;code&gt;CFBundleURLSchemes&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;key&amp;gt;CFBundleURLTypes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;    &amp;lt;dict&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;None&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleURLName&amp;lt;/key&amp;gt;&#xA;        &amp;lt;string&amp;gt;auth0&amp;lt;/string&amp;gt;&#xA;        &amp;lt;key&amp;gt;CFBundleURLSchemes&amp;lt;/key&amp;gt;&#xA;        &amp;lt;array&amp;gt;&#xA;            &amp;lt;string&amp;gt;$(PRODUCT_BUNDLE_IDENTIFIER).auth0&amp;lt;/string&amp;gt;&#xA;        &amp;lt;/array&amp;gt;&#xA;    &amp;lt;/dict&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your application is generated using the React Native CLI, the default value of &lt;code&gt;$(PRODUCT_BUNDLE_IDENTIFIER)&lt;/code&gt; matches &lt;code&gt;org.reactjs.native.example.$(PRODUCT_NAME:rfc1034identifier)&lt;/code&gt;. Take note of this value as you&#39;ll be requiring it to define the callback URLs below. If desired, you can change its value using XCode in the following way:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;ios/TestApp.xcodeproj&lt;/code&gt; file replacing &#39;TestApp&#39; with the name of your app or run &lt;code&gt;xed ios&lt;/code&gt; from a Terminal.&lt;/li&gt; &#xA; &lt;li&gt;Open your project&#39;s or desired target&#39;s &lt;strong&gt;Build Settings&lt;/strong&gt; tab and on the search bar at the right type &#34;Product Bundle Identifier&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Replace the &lt;strong&gt;Product Bundle Identifier&lt;/strong&gt; value with your desired application&#39;s bundle identifier name (e.g. &lt;code&gt;com.example.app&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If you&#39;ve changed the project wide settings, make sure the same were applied to each of the targets your app has.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you use a value other than &lt;code&gt;$(PRODUCT_BUNDLE_IDENTIFIER)&lt;/code&gt; in the &lt;code&gt;CFBundleURLSchemes&lt;/code&gt; field of the &lt;code&gt;Info.plist&lt;/code&gt; you will also need to pass it as the &lt;code&gt;customScheme&lt;/code&gt; option parameter of the &lt;code&gt;authorize&lt;/code&gt; and &lt;code&gt;clearSession&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For more info please read the &lt;a href=&#34;https://facebook.github.io/react-native/docs/linking.html&#34;&gt;React Native docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Expo&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; This SDK is not compatible with &#34;Expo Go&#34; app because of custom native code. It is compatible with Custom Dev Client and EAS builds&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To use the SDK with Expo, configure the app at build time by providing the &lt;code&gt;domain&lt;/code&gt; and the &lt;code&gt;customScheme&lt;/code&gt; values through the &lt;a href=&#34;https://docs.expo.dev/guides/config-plugins/&#34;&gt;Config Plugin&lt;/a&gt;. To do this, add the following snippet to &lt;em&gt;app.json&lt;/em&gt; or &lt;em&gt;app.config.js&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;expo&#34;: {&#xA;    ...&#xA;    &#34;plugins&#34;: [&#xA;      [&#xA;        &#34;react-native-auth0&#34;,&#xA;        {&#xA;          &#34;domain&#34;: &#34;YOUR_AUTH0_DOMAIN&#34;,&#xA;          &#34;customScheme&#34;: &#34;YOUR_CUSTOM_SCHEME&#34;&#xA;        }&#xA;      ]&#xA;    ]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;:info: If you want to switch between multiple domains in your app, refer &lt;a href=&#34;https://github.com/auth0/react-native-auth0/raw/master/EXAMPLES.md#domain-switching&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;API&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;domain&lt;/td&gt; &#xA;   &lt;td&gt;Mandatory: Provide the Auth0 domain that can be found at the &lt;a href=&#34;https://manage.auth0.com/#/applications&#34;&gt;Application Settings&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;customScheme&lt;/td&gt; &#xA;   &lt;td&gt;Optional: Custom scheme to build the callback URL with. The value provided here should be passed to the &lt;code&gt;customScheme&lt;/code&gt; option parameter of the &lt;code&gt;authorize&lt;/code&gt; and &lt;code&gt;clearSession&lt;/code&gt; methods. The custom scheme should be a unique, all lowercase value with no special characters.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Now you can run the application using &lt;code&gt;expo run:android&lt;/code&gt; or &lt;code&gt;expo run:ios&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Callback URL(s)&lt;/h3&gt; &#xA;&lt;p&gt;Callback URLs are the URLs that Auth0 invokes after the authentication process. Auth0 routes your application back to this URL and appends additional parameters to it, including a token. Since callback URLs can be manipulated, you will need to add this URL to your Application&#39;s &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; for security. This will enable Auth0 to recognize these URLs as valid. If omitted, authentication will not be successful.&lt;/p&gt; &#xA;&lt;p&gt;On the Android platform this URL is case-sensitive. Because of that, this SDK will auto convert the Bundle Identifier (iOS) and Application ID (Android) values to lowercase in order to build the Callback URL with them. If any of these values contains uppercase characters a warning message will be printed in the console. Make sure to check that the right Callback URL is whitelisted in the Auth0 dashboard or the browser will not route successfully back to your application.&lt;/p&gt; &#xA;&lt;p&gt;Go to the &lt;a href=&#34;https://manage.auth0.com/#/applications&#34;&gt;Auth0 Dashboard&lt;/a&gt;, select your application and make sure that &lt;strong&gt;Allowed Callback URLs&lt;/strong&gt; contains the URLs defined below.&lt;/p&gt; &#xA;&lt;p&gt;If in addition you plan to use the log out method, you must also add these URLs to the &lt;strong&gt;Allowed Logout URLs&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] Whenever possible, Auth0 recommends using &lt;a href=&#34;https://developer.android.com/training/app-links&#34;&gt;Android App Links&lt;/a&gt; and &lt;a href=&#34;https://developer.apple.com/documentation/xcode/allowing-apps-and-websites-to-link-to-your-content&#34;&gt;Apple Universal Links&lt;/a&gt; for your callback and logout URLs. Custom URL schemes can be subject to &lt;a href=&#34;https://datatracker.ietf.org/doc/html/rfc8252#section-8.6&#34;&gt;client impersonation attacks&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;üí° If your Android app is using &lt;a href=&#34;https://developer.android.com/studio/build/build-variants#product-flavors&#34;&gt;product flavors&lt;/a&gt;, you might need to specify different manifest placeholders for each flavor.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Android&lt;/h4&gt; &#xA;&lt;h5&gt;Custom Scheme&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{YOUR_APP_PACKAGE_NAME}.auth0://{YOUR_AUTH0_DOMAIN}/android/{YOUR_APP_PACKAGE_NAME}/callback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;App Link (Recommended):&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://{YOUR_AUTH0_DOMAIN}/android/{YOUR_APP_PACKAGE_NAME}/callback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Replace {YOUR_APP_PACKAGE_NAME} and {YOUR_AUTH0_DOMAIN} with your actual application package name and Auth0 domain. Ensure that {YOUR_APP_PACKAGE_NAME} is all lowercase.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To enable App Links, set the &lt;code&gt;auth0Scheme&lt;/code&gt; to &lt;code&gt;https&lt;/code&gt; in your &lt;code&gt;build.gradle&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;android {&#xA;    defaultConfig {&#xA;        manifestPlaceholders = [auth0Domain: &#34;@string/com_auth0_domain&#34;, auth0Scheme: &#34;https&#34;]&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configuration ensures that your app uses https for the callback URL scheme, which is required for Android App Links.&lt;/p&gt; &#xA;&lt;h4&gt;Enable Android App Links Support&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.android.com/training/app-links&#34;&gt;Android App Links&lt;/a&gt; allow an application to designate itself as the default handler of a given type of link. For example, clicking a URL in an email would open the link in the designated application. This guide will show you how to enable Android App links support for your Auth0-registered application using Auth0&#39;s Dashboard.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to &lt;a href=&#34;https://manage.auth0.com/#/applications&#34;&gt;Auth0 Dashboard &amp;gt; Applications &amp;gt; Applications&lt;/a&gt;, and select the name of the application to view.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Scroll to the bottom of the Settings page, and select &lt;strong&gt;Show Advanced Settings&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select Device Settings, provide the &lt;a href=&#34;https://developer.android.com/studio/build/application-id&#34;&gt;App Package Name and&lt;/a&gt; the SHA256 fingerprints of your app‚Äôs signing certificate for your Android application, and select Save Changes. &lt;img src=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/assets/android-app-link.png&#34; alt=&#34;android-app-link&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can use the following command to generate the fingerprint using the Java keytool in your terminal: &lt;code&gt;keytool -list -v -keystore my-release-key.keystore&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;To learn more about signing certificates, see Android&#39;s &lt;a href=&#34;https://developer.android.com/studio/publish/app-signing.html&#34;&gt;Sign Your App&lt;/a&gt; developer documentation.&lt;/p&gt; &#xA;&lt;h4&gt;iOS&lt;/h4&gt; &#xA;&lt;h5&gt;Custom Scheme&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;{PRODUCT_BUNDLE_IDENTIFIER}.auth0://{YOUR_AUTH0_DOMAIN}/ios/{PRODUCT_BUNDLE_IDENTIFIER}/callback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Universal Link (Recommended):&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;https://{YOUR_AUTH0_DOMAIN}/ios/{PRODUCT_BUNDLE_IDENTIFIER}/callback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Replace &lt;code&gt;{PRODUCT_BUNDLE_IDENTIFIER}&lt;/code&gt; and &lt;code&gt;{YOUR_AUTH0_DOMAIN}&lt;/code&gt; with your actual product bundle identifier and Auth0 domain. Ensure that {PRODUCT_BUNDLE_IDENTIFIER} is all lowercase.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Configure an associated domain for iOS&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!IMPORTANT] This step requires a paid Apple Developer account. It is needed to use Universal Links as callback and logout URLs. Skip this step to use a custom URL scheme instead.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;Configure the Team ID and bundle identifier&lt;/h5&gt; &#xA;&lt;p&gt;Scroll to the end of the settings page of your Auth0 application and open &lt;strong&gt;Advanced Settings &amp;gt; Device Settings&lt;/strong&gt;. In the &lt;strong&gt;iOS&lt;/strong&gt; section, set &lt;strong&gt;Team ID&lt;/strong&gt; to your &lt;a href=&#34;https://developer.apple.com/help/account/manage-your-team/locate-your-team-id/&#34;&gt;Apple Team ID&lt;/a&gt;, and &lt;strong&gt;App ID&lt;/strong&gt; to your app&#39;s bundle identifier.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/auth0/Auth0.swift/assets/5055789/7eb5f6a2-7cc7-4c70-acf3-633fd72dc506&#34; alt=&#34;Screenshot of the iOS section inside the Auth0 application settings page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will add your app to your Auth0 tenant&#39;s &lt;code&gt;apple-app-site-association&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h5&gt;Add the associated domain capability&lt;/h5&gt; &#xA;&lt;p&gt;In Xcode, go to the &lt;strong&gt;Signing and Capabilities&lt;/strong&gt; &lt;a href=&#34;https://developer.apple.com/documentation/xcode/adding-capabilities-to-your-app#Add-a-capability&#34;&gt;tab&lt;/a&gt; of your app&#39;s target settings, and press the &lt;strong&gt;+ Capability&lt;/strong&gt; button. Then select &lt;strong&gt;Associated Domains&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/auth0/Auth0.swift/assets/5055789/3f7b0a70-c36c-46bf-9441-29f98724204a&#34; alt=&#34;Screenshot of the capabilities library inside Xcode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Next, add the following &lt;a href=&#34;https://developer.apple.com/documentation/xcode/configuring-an-associated-domain#Define-a-service-and-its-associated-domain&#34;&gt;entry&lt;/a&gt; under &lt;strong&gt;Associated Domains&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;webcredentials:YOUR_AUTH0_DOMAIN&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Example&lt;/summary&gt; &#xA; &lt;p&gt;If your Auth0 Domain were &lt;code&gt;example.us.auth0.com&lt;/code&gt;, then this value would be:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;webcredentials:example.us.auth0.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If you have a&amp;nbsp;&lt;a href=&#34;https://auth0.com/docs/customize/custom-domains&#34;&gt;custom domain&lt;/a&gt;, replace &lt;code&gt;YOUR_AUTH0_DOMAIN&lt;/code&gt; with your custom domain.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE] For the associated domain to work, your app must be signed with your team certificate &lt;strong&gt;even when building for the iOS simulator&lt;/strong&gt;. Make sure you are using the Apple Team whose Team ID is configured in the settings page of your Auth0 application.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Refer to the example of &lt;a href=&#34;https://github.com/auth0/react-native-auth0/raw/master/EXAMPLES.md#using-custom-scheme-for-web-authentication-redirection&#34;&gt;Using custom scheme for web authentication redirection&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This SDK is OIDC compliant. To ensure OIDC compliant responses from the Auth0 servers enable the &lt;strong&gt;OIDC Conformant&lt;/strong&gt; switch in your Auth0 dashboard under &lt;code&gt;Application / Settings / Advanced OAuth&lt;/code&gt;. For more information please check &lt;a href=&#34;https://auth0.com/docs/api-auth/intro#how-to-use-the-new-flows&#34;&gt;this documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Web Authentication&lt;/h3&gt; &#xA;&lt;p&gt;The SDK exports a React hook as the primary interface for performing &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#web-authentication&#34;&gt;web authentication&lt;/a&gt; through the browser using Auth0 &lt;a href=&#34;https://auth0.com/docs/authenticate/login/auth0-universal-login&#34;&gt;Universal Login&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Use the methods from the &lt;code&gt;useAuth0&lt;/code&gt; hook to implement login, logout, and to retrieve details about the authenticated user.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://auth0.github.io/react-native-auth0/functions/useAuth0.html&#34;&gt;API Documentation&lt;/a&gt; for full details on the &lt;code&gt;useAuth0&lt;/code&gt; hook.&lt;/p&gt; &#xA;&lt;p&gt;First, import the &lt;code&gt;Auth0Provider&lt;/code&gt; component and wrap it around your application. Provide the &lt;code&gt;domain&lt;/code&gt; and &lt;code&gt;clientId&lt;/code&gt; values as given to you when setting up your Auth0 app in the dashboard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Auth0Provider } from &#39;react-native-auth0&#39;;&#xA;&#xA;const App = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;Auth0Provider domain=&#34;YOUR_AUTH0_DOMAIN&#34; clientId=&#34;YOUR_AUTH0_CLIENT_ID&#34;&amp;gt;&#xA;      {/* YOUR APP */}&#xA;    &amp;lt;/Auth0Provider&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass custom headers that will be included in all API requests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Auth0Provider } from &#39;react-native-auth0&#39;;&#xA;&#xA;const App = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;Auth0Provider &#xA;      domain=&#34;YOUR_AUTH0_DOMAIN&#34; &#xA;      clientId=&#34;YOUR_AUTH0_CLIENT_ID&#34;&#xA;      headers={{ &#39;X-Custom-Header&#39;: &#39;custom-value&#39; }}&#xA;    &amp;gt;&#xA;      {/* YOUR APP */}&#xA;    &amp;lt;/Auth0Provider&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using the `Auth0` class&lt;/summary&gt; &#xA; &lt;p&gt;If you&#39;re not using React Hooks, you can simply instantiate the &lt;code&gt;Auth0&lt;/code&gt; class:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Auth0 from &#39;react-native-auth0&#39;;&#xA;&#xA;const auth0 = new Auth0({&#xA;  domain: &#39;YOUR_AUTH0_DOMAIN&#39;,&#xA;  clientId: &#39;YOUR_AUTH0_CLIENT_ID&#39;,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;You can also pass custom headers that will be included in all API requests:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Auth0 from &#39;react-native-auth0&#39;;&#xA;&#xA;const auth0 = new Auth0({&#xA;  domain: &#39;YOUR_AUTH0_DOMAIN&#39;,&#xA;  clientId: &#39;YOUR_AUTH0_CLIENT_ID&#39;,&#xA;  headers: {&#xA;    &#39;X-Custom-Header&#39;: &#39;custom-value&#39;,&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;Then import the hook into a component where you want to get access to the properties and methods for integrating with Auth0:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { useAuth0 } from &#39;react-native-auth0&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Login&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;authorize&lt;/code&gt; method to redirect the user to the Auth0 &lt;a href=&#34;https://auth0.com/docs/authenticate/login/auth0-universal-login&#34;&gt;Universal Login&lt;/a&gt; page for authentication. If &lt;code&gt;scope&lt;/code&gt; is not specified, &lt;code&gt;openid profile email&lt;/code&gt; is used by default.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;isLoading&lt;/code&gt; property is set to true once the authentication state of the user is known to the SDK.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;user&lt;/code&gt; property is populated with details about the authenticated user. If &lt;code&gt;user&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;, no user is currently authenticated.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;error&lt;/code&gt; property is populated if any error occurs.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Component = () =&amp;gt; {&#xA;  const { authorize, user, isLoading, error } = useAuth0();&#xA;&#xA;  const login = async () =&amp;gt; {&#xA;    await authorize();&#xA;  };&#xA;&#xA;  if (isLoading) {&#xA;    return (&#xA;      &amp;lt;View&amp;gt;&#xA;        &amp;lt;Text&amp;gt;SDK is Loading&amp;lt;/Text&amp;gt;&#xA;      &amp;lt;/View&amp;gt;&#xA;    );&#xA;  }&#xA;&#xA;  return (&#xA;    &amp;lt;View&amp;gt;&#xA;      {!user &amp;amp;&amp;amp; &amp;lt;Button onPress={login} title=&#34;Log in&#34; /&amp;gt;}&#xA;      {user &amp;amp;&amp;amp; &amp;lt;Text&amp;gt;Logged in as {user.name}&amp;lt;/Text&amp;gt;}&#xA;      {error &amp;amp;&amp;amp; &amp;lt;Text&amp;gt;{error.message}&amp;lt;/Text&amp;gt;}&#xA;    &amp;lt;/View&amp;gt;&#xA;  );&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using the `Auth0` class&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;auth0.webAuth&#xA;  .authorize()&#xA;  .then(credentials =&amp;gt; console.log(credentials))&#xA;  .catch(error =&amp;gt; console.log(error));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Web Authentication flows require a Browser application installed on the device. When no Browser is available, an error of type &lt;code&gt;a0.browser_not_available&lt;/code&gt; will be raised via the provided callback.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h5&gt;SSO Alert Box (iOS)&lt;/h5&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/assets/ios-sso-alert.png&#34; alt=&#34;ios-sso-alert&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check the &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt; for more information about the alert box that pops up &lt;strong&gt;by default&lt;/strong&gt; when using Web Auth on iOS.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;See also &lt;a href=&#34;https://developer.okta.com/blog/2022/01/13/mobile-sso&#34;&gt;this blog post&lt;/a&gt; for a detailed overview of Single Sign-On (SSO) on iOS.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Logout&lt;/h4&gt; &#xA;&lt;p&gt;Log the user out by using the &lt;code&gt;clearSession&lt;/code&gt; method from the &lt;code&gt;useAuth0&lt;/code&gt; hook.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Component = () =&amp;gt; {&#xA;  const { clearSession, user } = useAuth0();&#xA;&#xA;  const logout = async () =&amp;gt; {&#xA;    await clearSession();&#xA;  };&#xA;&#xA;  return &amp;lt;View&amp;gt;{user &amp;amp;&amp;amp; &amp;lt;Button onPress={logout} title=&#34;Log out&#34; /&amp;gt;}&amp;lt;/View&amp;gt;;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Using the `Auth0` class&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;auth0.webAuth.clearSession().catch((error) =&amp;gt; console.log(error));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h3&gt;Credentials Manager&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#check-for-stored-credentials&#34;&gt;Check for stored credentials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#retrieve-stored-credentials&#34;&gt;Retrieve stored credentials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#local-authentication&#34;&gt;Local authentication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#credentials-manager-errors&#34;&gt;Credentials Manager errors&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The Credentials Manager allows you to securely store and retrieve the user&#39;s credentials. The credentials will be stored encrypted in Shared Preferences on Android, and in the Keychain on iOS.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Auth0&lt;/code&gt; class exposes the &lt;code&gt;credentialsManager&lt;/code&gt; property for you to interact with using the API below.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° If you&#39;re using Web Auth (&lt;code&gt;authorize&lt;/code&gt;) through Hooks, you do not need to manually store the credentials after login and delete them after logout; the SDK does this automatically.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Check for stored credentials&lt;/h4&gt; &#xA;&lt;p&gt;When the users open your app, check for valid credentials. If they exist, you can retrieve them and redirect the users to the app&#39;s main flow without any additional login steps.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const isLoggedIn = await auth0.credentialsManager.hasValidCredentials();&#xA;&#xA;if (isLoggedIn) {&#xA;  // Retrieve credentials and redirect to the main flow&#xA;} else {&#xA;  // Redirect to the login page&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Retrieve stored credentials&lt;/h4&gt; &#xA;&lt;p&gt;The credentials will be automatically renewed using the &lt;a href=&#34;https://auth0.com/docs/secure/tokens/refresh-tokens&#34;&gt;refresh token&lt;/a&gt;, if the access token has expired. &lt;strong&gt;This method is thread safe&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const credentials = await auth0.credentialsManager.getCredentials();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;üí° You do not need to call credentialsManager.saveCredentials() afterward. The Credentials Manager automatically persists the renewed credentials.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Requiring Authentication before obtaining Credentials&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; The &lt;code&gt;requireLocalAuthentication&lt;/code&gt; method is no longer available as part of the &lt;code&gt;CredentialsManager&lt;/code&gt; class or the &lt;code&gt;useAuth0&lt;/code&gt; Hook from v4 of the SDK.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ÑπÔ∏è You need to use at least version &lt;code&gt;0.59.0&lt;/code&gt; of React Native, as it uses &lt;code&gt;FragmentActivity&lt;/code&gt; as the base activity, which is required for biometric authentication to work.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;You can enable an additional level of user authentication before retrieving credentials using the local authentication supported by the device, for example PIN or fingerprint on Android, and Face ID or Touch ID on iOS.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the instructions below to understand how to enable authentication before retrieving credentials based on your setup:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using Auth0 Class:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;Auth0&lt;/code&gt; class constructor now accepts a new parameter, which is an instance of the &lt;code&gt;LocalAuthenticationOptions&lt;/code&gt; object. This needs to be passed while creating an instance of &lt;code&gt;Auth0&lt;/code&gt; to enable authentication before obtaining credentials, as shown in the code snippet below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import Auth0 from &#39;react-native-auth0&#39;;&#xA;const localAuthOptions: LocalAuthenticationOptions = {&#xA;  title: &#39;Authenticate to retreive your credentials&#39;,&#xA;  subtitle: &#39;Please authenticate to continue&#39;,&#xA;  description: &#39;We need to authenticate you to retrieve your credentials&#39;,&#xA;  cancelTitle: &#39;Cancel&#39;,&#xA;  evaluationPolicy: LocalAuthenticationStrategy.deviceOwnerWithBiometrics,&#xA;  fallbackTitle: &#39;Use Passcode&#39;,&#xA;  authenticationLevel: LocalAuthenticationLevel.strong,&#xA;  deviceCredentialFallback: true,&#xA;};&#xA;const auth0 = new Auth0({&#xA;  domain: config.domain,&#xA;  clientId: config.clientId,&#xA;  localAuthenticationOptions: localAuthOptions,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using Hooks (Auth0Provider):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Auth0Provider&lt;/code&gt; now accepts a new parameter, which is an instance of the &lt;code&gt;LocalAuthenticationOptions&lt;/code&gt; object. This needs to be passed to enable authentication before obtaining credentials, as shown in the code snippet below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;import { Auth0Provider } from &#39;react-native-auth0&#39;;&#xA;&#xA;const localAuthOptions: LocalAuthenticationOptions = {&#xA;  title: &#39;Authenticate to retreive your credentials&#39;,&#xA;  subtitle: &#39;Please authenticate to continue&#39;,&#xA;  description: &#39;We need to authenticate you to retrieve your credentials&#39;,&#xA;  cancelTitle: &#39;Cancel&#39;,&#xA;  evaluationPolicy: LocalAuthenticationStrategy.deviceOwnerWithBiometrics,&#xA;  fallbackTitle: &#39;Use Passcode&#39;,&#xA;  authenticationLevel: LocalAuthenticationLevel.strong,&#xA;  deviceCredentialFallback: true,&#xA;};&#xA;&#xA;const App = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;Auth0Provider&#xA;      domain={config.domain}&#xA;      clientId={config.clientId}&#xA;      localAuthenticationOptions={localAuthOptions}&#xA;    &amp;gt;&#xA;      {/* YOUR APP */}&#xA;    &amp;lt;/Auth0Provider&amp;gt;&#xA;  );&#xA;};&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Detailed information on &lt;code&gt;LocalAuthenticationOptions&lt;/code&gt; is available &lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/#localauthenticationoptions&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;LocalAuthenticationOptions:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The options for configuring the display of local authentication prompt, authentication level (Android only), and evaluation policy (iOS only).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Properties:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Applicable Platforms&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The title of the authentication prompt.&lt;/td&gt; &#xA;   &lt;td&gt;Android, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;subtitle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; (optional)&lt;/td&gt; &#xA;   &lt;td&gt;The subtitle of the authentication prompt.&lt;/td&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;description&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; (optional)&lt;/td&gt; &#xA;   &lt;td&gt;The description of the authentication prompt.&lt;/td&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;cancelTitle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; (optional)&lt;/td&gt; &#xA;   &lt;td&gt;The cancel button title of the authentication prompt.&lt;/td&gt; &#xA;   &lt;td&gt;Android, iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;evaluationPolicy&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LocalAuthenticationStrategy&lt;/code&gt; (optional)&lt;/td&gt; &#xA;   &lt;td&gt;The evaluation policy to use when prompting the user for authentication. Defaults to &lt;code&gt;deviceOwnerWithBiometrics&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;fallbackTitle&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt; (optional)&lt;/td&gt; &#xA;   &lt;td&gt;The fallback button title of the authentication prompt.&lt;/td&gt; &#xA;   &lt;td&gt;iOS&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;authenticationLevel&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LocalAuthenticationLevel&lt;/code&gt; (optional)&lt;/td&gt; &#xA;   &lt;td&gt;The authentication level to use when prompting the user for authentication. Defaults to &lt;code&gt;strong&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;deviceCredentialFallback&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt; (optional)&lt;/td&gt; &#xA;   &lt;td&gt;Should the user be given the option to authenticate with their device PIN, pattern, or password instead of a biometric. Defaults to &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Android&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;‚ö†&lt;/span&gt; You need a real device to test Local Authentication for iOS. Local Authentication is not available in simulators.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Credentials Manager errors&lt;/h4&gt; &#xA;&lt;p&gt;The Credentials Manager will only throw &lt;code&gt;CredentialsManagerError&lt;/code&gt; exceptions. You can find more information in the details property of the exception.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;try {&#xA;  const credentials = await auth0.credentialsManager.getCredentials();&#xA;} catch (error) {&#xA;  console.log(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Platform agnostic errors:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can access the platform agnostic generic error codes as below :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;try {&#xA;  const credentials = await auth0.credentialsManager.getCredentials();&#xA;} catch (error) {&#xA;  console.log(e.type);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt; : We have platform agnostic error codes available only for &lt;code&gt;CredentialsManagerError&lt;/code&gt; as of now.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Generic Error Code&lt;/th&gt; &#xA;   &lt;th&gt;Corresponding Error Code in Android&lt;/th&gt; &#xA;   &lt;th&gt;Corresponding Error Code in iOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;INVALID_CREDENTIALS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;INVALID_CREDENTIALS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_CREDENTIALS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_CREDENTIALS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;noCredentials&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_REFRESH_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_REFRESH_TOKEN&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;noRefreshToken&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RENEW_FAILED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;RENEW_FAILED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;renewFailed&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;STORE_FAILED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;STORE_FAILED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;storeFailed&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;REVOKE_FAILED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;REVOKE_FAILED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;revokeFailed&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;LARGE_MIN_TTL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;LARGE_MIN_TTL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;largeMinTTL&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;INCOMPATIBLE_DEVICE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;INCOMPATIBLE_DEVICE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CRYPTO_EXCEPTION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;CRYPTO_EXCEPTION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;BIOMETRICS_FAILED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;OneOf &lt;br&gt;&lt;code&gt;BIOMETRIC_NO_ACTIVITY&lt;/code&gt;,&lt;code&gt;BIOMETRIC_ERROR_STATUS_UNKNOWN&lt;/code&gt;,&lt;code&gt;BIOMETRIC_ERROR_UNSUPPORTED&lt;/code&gt;,&lt;br&gt;&lt;code&gt;BIOMETRIC_ERROR_HW_UNAVAILABLE&lt;/code&gt;,&lt;code&gt;BIOMETRIC_ERROR_NONE_ENROLLED&lt;/code&gt;,&lt;code&gt;BIOMETRIC_ERROR_NO_HARDWARE&lt;/code&gt;,&lt;br&gt;&lt;code&gt;BIOMETRIC_ERROR_SECURITY_UPDATE_REQUIRED&lt;/code&gt;,&lt;code&gt;BIOMETRIC_AUTHENTICATION_CHECK_FAILED&lt;/code&gt;,&lt;br&gt;&lt;code&gt;BIOMETRIC_ERROR_DEVICE_CREDENTIAL_NOT_AVAILABLE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;biometricsFailed&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_NETWORK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;NO_NETWORK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;API_ERROR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;API_ERROR&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Feedback&lt;/h2&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;We appreciate feedback and contribution to this repo! Before you get started, please see the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/open-source-template/raw/master/GENERAL-CONTRIBUTING.md&#34;&gt;Auth0&#39;s general contribution guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/auth0/open-source-template/raw/master/CODE-OF-CONDUCT.md&#34;&gt;Auth0&#39;s code of conduct guidelines&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/auth0/react-native-auth0/master/DEVELOPMENT.md&#34;&gt;This repo&#39;s development guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Raise an issue&lt;/h3&gt; &#xA;&lt;p&gt;To provide feedback or report a bug, &lt;a href=&#34;https://github.com/auth0/react-native-auth0/issues&#34;&gt;please raise an issue on our issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Vulnerability Reporting&lt;/h3&gt; &#xA;&lt;p&gt;Please do not report security vulnerabilities on the public Github issue tracker. The &lt;a href=&#34;https://auth0.com/whitehat&#34;&gt;Responsible Disclosure Program&lt;/a&gt; details the procedure for disclosing security issues.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &#xA; &lt;picture&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: light)&#34; srcset=&#34;https://cdn.auth0.com/website/sdks/logos/auth0_light_mode.png&#34; width=&#34;150&#34;&gt; &#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://cdn.auth0.com/website/sdks/logos/auth0_dark_mode.png&#34; width=&#34;150&#34;&gt; &#xA;  &lt;img alt=&#34;Auth0 Logo&#34; src=&#34;https://cdn.auth0.com/website/sdks/logos/auth0_light_mode.png&#34; width=&#34;150&#34;&gt; &#xA; &lt;/picture&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Auth0 is an easy to implement, adaptable authentication and authorization platform. To learn more checkout &lt;a href=&#34;https://auth0.com/why-auth0&#34;&gt;Why Auth0?&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; This project is licensed under the MIT license. See the &lt;a href=&#34;https://github.com/auth0/react-native-auth0/raw/master/LICENSE&#34;&gt; LICENSE&lt;/a&gt; file for more info.&lt;/p&gt; &#xA;&lt;!-- Variables --&gt;</summary>
  </entry>
</feed>