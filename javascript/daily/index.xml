<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-03T01:38:08Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>waylaidwanderer/node-chatgpt-api</title>
    <updated>2023-02-03T01:38:08Z</updated>
    <id>tag:github.com,2023-02-03:/waylaidwanderer/node-chatgpt-api</id>
    <link href="https://github.com/waylaidwanderer/node-chatgpt-api" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A ChatGPT implementation using the official ChatGPT model via OpenAI&#39;s API.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;CLI demo&#34; src=&#34;https://raw.githubusercontent.com/waylaidwanderer/node-chatgpt-api/main/demos/cli.svg?sanitize=true&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Update (2023-02-02)&lt;/h1&gt; &#xA;&lt;p&gt;Trying to use &lt;code&gt;text-chat-davinci-002-20230126&lt;/code&gt; with the OpenAI API now returns a 404 error. Someone has already found the new model name, but they are unwilling to share at this time. I will update this repository once I find the new model. If you have any leads, please open an issue or a pull request.&lt;/p&gt; &#xA;&lt;p&gt;In the meantime, I&#39;ve added support for models like &lt;code&gt;text-davinci-003&lt;/code&gt;, which you can use as a drop-in replacement. Keep in mind that &lt;code&gt;text-davinci-003&lt;/code&gt; is not as good as &lt;code&gt;text-chat-davinci-002-20230126&lt;/code&gt; (which is trained via RHLF and fine-tuned to be a conversational AI), though results are still very good. &lt;strong&gt;Please note that using &lt;code&gt;text-davinci-003&lt;/code&gt; will cost you credits ($).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ChatGPT API&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A ChatGPT implementation using the official ChatGPT model via OpenAI&#39;s API.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/@waylaidwanderer/chatgpt-api&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@waylaidwanderer/chatgpt-api.svg?sanitize=true&#34; alt=&#34;NPM&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@waylaidwanderer/chatgpt-api&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/@waylaidwanderer/chatgpt-api&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/waylaidwanderer/node-chatgpt-api/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/waylaidwanderer/node-chatgpt-api/&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/waylaidwanderer/node-chatgpt-api&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is an implementation of &lt;a href=&#34;https://chat.openai.com/chat&#34;&gt;ChatGPT&lt;/a&gt; using the official ChatGPT raw model, &lt;code&gt;text-chat-davinci-002-20230126&lt;/code&gt;. This model name was briefly leaked while I was inspecting the network requests made by the official ChatGPT website, and I discovered that it works with the &lt;a href=&#34;https://beta.openai.com/docs/api-reference/completions&#34;&gt;OpenAI API&lt;/a&gt;. &lt;strong&gt;Usage of this model currently does not cost any credits.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;As far as I&#39;m aware, I was the first one who discovered this, and usage of the model has since been implemented in libraries like &lt;a href=&#34;https://github.com/acheong08/ChatGPT&#34;&gt;acheong08/ChatGPT&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The previous version of this library that used &lt;a href=&#34;https://github.com/transitive-bullshit/chatgpt-api&#34;&gt;transitive-bullshit/chatgpt-api&lt;/a&gt; is still available on &lt;a href=&#34;https://github.com/waylaidwanderer/node-chatgpt-api/tree/archive/old-version&#34;&gt;the &lt;code&gt;archive/old-version&lt;/code&gt; branch&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;By itself, the model does not have any conversational support, so this library uses a cache to store conversations and pass them to the model as context. This allows you to have persistent conversations with ChatGPT in a nearly identical way to the official website.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses the official ChatGPT raw model, &lt;code&gt;text-chat-davinci-002-20230126&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Includes an API server you can run to use ChatGPT in non-Node.js applications.&lt;/li&gt; &#xA; &lt;li&gt;Includes a &lt;code&gt;ChatGPTClient&lt;/code&gt; class that you can use in your own Node.js applications.&lt;/li&gt; &#xA; &lt;li&gt;Includes a CLI interface where you can chat with ChatGPT.&lt;/li&gt; &#xA; &lt;li&gt;Replicates chat threads from the official ChatGPT website (with conversation IDs and message IDs), with persistent conversations using &lt;a href=&#34;https://www.npmjs.com/package/keyv&#34;&gt;Keyv&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Conversations are stored in memory by default, but you can optionally &lt;a href=&#34;https://www.npmjs.com/package/keyv#usage&#34;&gt;install a storage adapter&lt;/a&gt; to persist conversations to a database.&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;keyv-file&lt;/code&gt; adapter is also included in this package, and can be used to store conversations in a JSON file if you&#39;re using the API server or CLI (see &lt;code&gt;settings.example.js&lt;/code&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Supports configurable prompt prefixes, and custom names for the user and ChatGPT. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In essence, this allows you to turn ChatGPT into a different character.&lt;/li&gt; &#xA;   &lt;li&gt;This is currently only configurable on a global level, but I plan to add support for per-conversation customization.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js&lt;/li&gt; &#xA; &lt;li&gt;npm&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://platform.openai.com/account/api-keys&#34;&gt;OpenAI API key&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Module&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i @waylaidwanderer/chatgpt-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;import ChatGPTClient from &#39;@waylaidwanderer/chatgpt-api&#39;;&#xA;&#xA;const clientOptions = {&#xA;  // (Optional) Parameters as described in https://platform.openai.com/docs/api-reference/completions&#xA;  modelOptions: {&#xA;    // The model is set to text-chat-davinci-002-20230126 by default, but you can override&#xA;    // it and any other parameters here&#xA;    model: &#39;text-chat-davinci-002-20230126&#39;,&#xA;  },&#xA;  // (Optional) Set a custom prompt prefix. As per my testing it should work with two newlines&#xA;  // promptPrefix: &#39;You are not ChatGPT...\n\n&#39;,&#xA;  // (Optional) Set a custom name for the user&#xA;  // userLabel: &#39;User&#39;,&#xA;  // (Optional) Set a custom name for ChatGPT&#xA;  // chatGptLabel: &#39;ChatGPT&#39;,&#xA;  // (Optional) Set to true to enable `console.debug()` logging&#xA;  debug: false,&#xA;};&#xA;&#xA;const cacheOptions = {&#xA;  // Options for the Keyv cache, see https://www.npmjs.com/package/keyv&#xA;  // This is used for storing conversations, and supports additional drivers (conversations are stored in memory by default)&#xA;  // For example, to use a JSON file (`npm i keyv-file`) as a database:&#xA;  // store: new KeyvFile({ filename: &#39;cache.json&#39; }),&#xA;};&#xA;&#xA;const chatGptClient = new ChatGPTClient(&#39;OPENAI_API_KEY&#39;, clientOptions, cacheOptions);&#xA;&#xA;const response = await chatGptClient.sendMessage(&#39;Hello!&#39;);&#xA;console.log(response); // { response: &#39;Hi! How can I help you today?&#39;, conversationId: &#39;...&#39;, messageId: &#39;...&#39; }&#xA;&#xA;const response2 = await chatGptClient.sendMessage(&#39;Write a poem about cats.&#39;, { conversationId: response.conversationId, parentMessageId: response.messageId });&#xA;console.log(response2.response); // Cats are the best pets in the world.&#xA;&#xA;const response3 = await chatGptClient.sendMessage(&#39;Now write it in French.&#39;, { conversationId: response2.conversationId, parentMessageId: response2.messageId });&#xA;console.log(response3.response); // Les chats sont les meilleurs animaux de compagnie du monde.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;API Server&lt;/h3&gt; &#xA;&lt;p&gt;You can install the package using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g @waylaidwanderer/chatgpt-api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then run it using &lt;code&gt;chatgpt-api&lt;/code&gt;.&lt;br&gt; This takes an optional &lt;code&gt;--settings=&amp;lt;path_to_settings.js&amp;gt;&lt;/code&gt; parameter, or looks for &lt;code&gt;settings.js&lt;/code&gt; in the current directory if not set, with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JS&#34;&gt;module.exports = {&#xA;  // Your OpenAI API key&#xA;  openaiApiKey: &#39;&#39;,&#xA;  chatGptClient: {&#xA;    // (Optional) Parameters as described in https://platform.openai.com/docs/api-reference/completions&#xA;    modelOptions: {&#xA;      // The model is set to text-chat-davinci-002-20230126 by default, but you can override&#xA;      // it and any other parameters here&#xA;      model: &#39;text-chat-davinci-002-20230126&#39;,&#xA;    },&#xA;    // (Optional) Set a custom prompt prefix. As per my testing it should work with two newlines&#xA;    // promptPrefix: &#39;You are not ChatGPT...\n\n&#39;,&#xA;    // (Optional) Set a custom name for the user&#xA;    // userLabel: &#39;User&#39;,&#xA;    // (Optional) Set a custom name for ChatGPT&#xA;    // chatGptLabel: &#39;ChatGPT&#39;,&#xA;    // (Optional) Set to true to enable `console.debug()` logging&#xA;    debug: false,&#xA;  },&#xA;  // Options for the Keyv cache, see https://www.npmjs.com/package/keyv&#xA;  // This is used for storing conversations, and supports additional drivers (conversations are stored in memory by default)&#xA;  cacheOptions: {},&#xA;  // The port the server will run on (optional, defaults to 3000)&#xA;  port: 3000,&#xA;  // If set, ChatGPTClient will use `keyv-file` to store conversations to this JSON file instead of in memory.&#xA;  // `cacheOptions.store` will override this if set&#xA;  storageFilePath: &#39;./cache.json&#39;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can install and run the package locally:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone this repository&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies with &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Rename &lt;code&gt;settings.example.js&lt;/code&gt; to &lt;code&gt;settings.js&lt;/code&gt; in the root directory and change the settings where required.&lt;/li&gt; &#xA; &lt;li&gt;Start the server using &lt;code&gt;npm start&lt;/code&gt; or &lt;code&gt;npm run server&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;To start a conversation with ChatGPT, send a POST request to the server&#39;s &lt;code&gt;/conversation&lt;/code&gt; endpoint with a JSON body in the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;    &#34;message&#34;: &#34;Hello, how are you today?&#34;,&#xA;    &#34;conversationId&#34;: &#34;your-conversation-id (optional)&#34;,&#xA;    &#34;parentMessageId&#34;: &#34;your-parent-message-id (optional)&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will return a JSON object containing ChatGPT&#39;s response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;    &#34;response&#34;: &#34;I&#39;m doing well, thank you! How are you?&#34;,&#xA;    &#34;conversationId&#34;: &#34;your-conversation-id&#34;,&#xA;    &#34;messageId&#34;: &#34;response-message-id&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the request is unsuccessful, the server will return a JSON object with an error message and a status code of 503.&lt;/p&gt; &#xA;&lt;p&gt;If there was an error sending the message to ChatGPT:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-JSON&#34;&gt;{&#xA;    &#34;error&#34;: &#34;There was an error communicating with ChatGPT.&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;Install the package using the same instructions as the API server.&lt;/p&gt; &#xA;&lt;p&gt;If installed globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;chatgpt-cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If installed locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run cli&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ChatGPT&#39;s responses are automatically copied to your clipboard, so you can paste them into other applications.&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;p&gt;Since &lt;code&gt;text-chat-davinci-002-20230126&lt;/code&gt; is ChatGPT&#39;s raw model, I had to do my best to replicate the way the official ChatGPT website uses it. After extensive testing and comparing responses, I believe that the model used by ChatGPT has some additional fine-tuning.&lt;br&gt; This means my implementation or the raw model may not behave exactly the same in some ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Conversations are not tied to any user IDs, so if that&#39;s important to you, you should implement your own user ID system.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ChatGPT&#39;s model parameters (temperature, frequency penalty, etc.) are unknown, so I set some defaults that I thought would be reasonable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Conversations are limited to roughly the last 3000 tokens, so earlier messages may be forgotten during longer conversations.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This works in a similar way to ChatGPT, except I&#39;m pretty sure they have some additional way of retrieving context from earlier messages when needed (which can probably be achieved with embeddings, but I consider that out-of-scope for now).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is well known that, as part of the fine-tuning, ChatGPT had the following preamble:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&#34;You are ChatGPT, a large language model trained by OpenAI. You answer as concisely as possible for each response (e.g. don’t be verbose). It is very important that you answer as concisely as possible, so please remember this. If you are generating a list, do not have too many items. Keep the number of items short.&lt;br&gt; Knowledge cutoff: 2021-09&lt;br&gt; Current date: 2023-01-31&#34;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;As OpenAI updates ChatGPT, this preamble may also change. The default prompt prefix in my implementation attempts to replicate a similar behavior to the current ChatGPT model.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to this project, please create a pull request with a detailed description of your changes.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>evershopcommerce/evershop</title>
    <updated>2023-02-03T01:38:08Z</updated>
    <id>tag:github.com,2023-02-03:/evershopcommerce/evershop</id>
    <link href="https://github.com/evershopcommerce/evershop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛍️ NodeJS E-commerce Platform&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;60&#34; height=&#34;68&#34; alt=&#34;EverShop Logo&#34; src=&#34;https://evershop.io/img/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;EverShop&lt;/h1&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt; &lt;a href=&#34;https://evershop.io/docs/development/getting-started/introduction&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://demo.evershop.io/&#34;&gt;Demo&lt;/a&gt; &lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nodeonline/nodejscart/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Github Action&#34;&gt; &lt;a href=&#34;https://discord.gg/GSzt7dt7RM&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/757179260417867879?label=discord&#34; alt=&#34;Discord&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/GPL-3.0&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/License-GPLv3-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;EverShop is a GraphQL Based and React ecommerce platform with essential commerce features. Built with React, modular and fully customizable.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Catalog management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Product management&lt;/li&gt; &#xA;   &lt;li&gt;Category management&lt;/li&gt; &#xA;   &lt;li&gt;Attribute and attribute group&lt;/li&gt; &#xA;   &lt;li&gt;Variant management&lt;/li&gt; &#xA;   &lt;li&gt;Custom options&lt;/li&gt; &#xA;   &lt;li&gt;Product layered navigation&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Order management&lt;/li&gt; &#xA; &lt;li&gt;Customer management &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Customer group&lt;/li&gt; &#xA;   &lt;li&gt;Customer address&lt;/li&gt; &#xA;   &lt;li&gt;Login, register and my account&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Advanced coupon management&lt;/li&gt; &#xA; &lt;li&gt;Online payment methods &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stripe&lt;/li&gt; &#xA;   &lt;li&gt;Paypal&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;Explore our demo store.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;EverShop Admin Demo&#34; width=&#34;950&#34; src=&#34;https://raw.githubusercontent.com/evershopcommerce/evershop/dev/.github/images/evershop-backend-demo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://demo.evershop.io/admin&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;EverShop Admin Demo&#34; height=&#34;35&#34; src=&#34;https://raw.githubusercontent.com/evershopcommerce/evershop/dev/.github/images/evershop-admin-demo.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;b&gt;Demo user:&lt;/b&gt; &#xA;&lt;p&gt;Email: &lt;a href=&#34;mailto:demo@gmail.com&#34;&gt;demo@gmail.com&lt;/a&gt;&lt;br&gt; Password: 123456&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;EverShop Store Demo&#34; width=&#34;950&#34; src=&#34;https://raw.githubusercontent.com/evershopcommerce/evershop/dev/.github/images/evershop-product-detail.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://demo.evershop.io/&#34; target=&#34;_blank&#34;&gt; &lt;img alt=&#34;EverShop Store Demo&#34; height=&#34;35&#34; src=&#34;https://raw.githubusercontent.com/evershopcommerce/evershop/dev/.github/images/evershop-store-front-demo.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;You can get started with EverShop in minutes by running the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-evershop-app my-app --playAround&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://evershop.io/docs/development/getting-started/installation-guide&#34;&gt;Installation guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://evershop.io/docs/development/module/create-your-first-extension&#34;&gt;Extension development&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://evershop.io/docs/development/theme/theme-overview&#34;&gt;Theme development&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If you like my work, feel free to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;⭐ this repository. It helps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/intent/tweet?url=https%3A%2F%2Fgithub.com%2Fevershopcommerce%2Fevershop&amp;amp;text=Awesome%20React%20Ecommerce%20Project&amp;amp;hashtags=react,ecommerce,expressjs,graphql&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt; about EverShop. Please accept my gratitude.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Ask a question about EverShop&lt;/h3&gt; &#xA;&lt;p&gt;You can ask questions, and participate in discussions about EverShop-related topics in the EverShop Discord channel.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/GSzt7dt7RM&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/evershopcommerce/evershop/dev/.github/images/discord_banner_github.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Create a bug report&lt;/h3&gt; &#xA;&lt;p&gt;If you see an error message or run into an issue, please &lt;a href=&#34;https://github.com/evershopcommerce/evershop/issues/new&#34;&gt;create bug report&lt;/a&gt;. This effort is valued and it will help all EverShop users.&lt;/p&gt; &#xA;&lt;h3&gt;Submit a feature request&lt;/h3&gt; &#xA;&lt;p&gt;If you have an idea, or you&#39;re missing a capability that would make development easier and more robust, please &lt;a href=&#34;https://github.com/evershopcommerce/evershop/issues/new&#34;&gt;Submit feature request&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If a similar feature request already exists, don&#39;t forget to leave a &#34;+1&#34;. If you add some more information such as your thoughts and vision about the feature, your comments will be embraced warmly :)&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;EverShop is an open-source project. We are committed to a fully transparent development process and appreciate highly any contributions. Whether you are helping us fix bugs, proposing new features, improving our documentation or spreading the word - we would love to have you as part of the EverShop community.&lt;/p&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://raw.githubusercontent.com/evershopcommerce/evershop/main/CONTRIBUTING.md&#34;&gt;Contribution Guidelines&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/evershopcommerce/evershop/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/evershopcommerce/evershop/raw/main/LICENSE&#34;&gt;GPL-3.0 License&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>frank890417/image-optimizer</title>
    <updated>2023-02-03T01:38:08Z</updated>
    <id>tag:github.com,2023-02-03:/frank890417/image-optimizer</id>
    <link href="https://github.com/frank890417/image-optimizer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Image Resizer&lt;/h1&gt; &#xA;&lt;p&gt;This is a Node.js script that resizes images to different sizes and scales and saves them in different formats. The script uses the sharp library to handle the image manipulation. &lt;img src=&#34;https://raw.githubusercontent.com/frank890417/image-optimizer/main/demo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;Resizes images to specified sizes and scales Saves images in different formats (PNG, JPG, and WebP) Creates separate output folders for each image with the name of the image Clears the output folder for each image before saving the resized images Logs the success of each conversion&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;Node.js and npm installed on your computer The &lt;code&gt;sharp&lt;/code&gt; library installed in your project (you can install it by running &lt;code&gt;npm install sharp&lt;/code&gt; in your terminal)&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Clone or download the repository Navigate to the project folder in your terminal Run &lt;code&gt;npm install&lt;/code&gt; to install the required libraries Place the images you want to resize in the &lt;code&gt;input&lt;/code&gt; folder Run &lt;code&gt;node convert.js&lt;/code&gt; to start the script The resized images will be saved in the &lt;code&gt;output&lt;/code&gt; folder&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure the sizes, scales, and formats by modifying the &lt;code&gt;sizes&lt;/code&gt;, &lt;code&gt;scales&lt;/code&gt;, and &lt;code&gt;formats&lt;/code&gt; arrays in the &lt;code&gt;convert.js&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;The script assumes that all the images in the &lt;code&gt;input&lt;/code&gt; folder are in a supported format by the &lt;code&gt;sharp&lt;/code&gt; library. If an image is in an unsupported format, the script will log an error and skip the image.&lt;/p&gt; &#xA;&lt;h2&gt;This repo is made with 10 steps of prompts with ChatGPT&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/frank890417/image-optimizer/main/prompts.jpeg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
</feed>