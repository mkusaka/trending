<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-26T01:36:55Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apitube/integrations</title>
    <updated>2023-05-26T01:36:55Z</updated>
    <id>tag:github.com,2023-05-26:/apitube/integrations</id>
    <link href="https://github.com/apitube/integrations" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Integrations for APITUBE API&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://apitube.pub/images/github/apitube.png&#34; alt=&#34;APITUBE - News API&#34; height=&#34;45&#34;&gt; &lt;br&gt; Integrations for APITUBE &lt;/h1&gt; &#xA;&lt;h4&gt;See integrations in other languages(and frameworks) below:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/C&#34;&gt;C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/C#&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Clojure&#34;&gt;Clojure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Go&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/HTTP&#34;&gt;HTTP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Java&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Javascript&#34;&gt;Javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Kotlin&#34;&gt;Kotlin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Node.js&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/OCaml&#34;&gt;OCaml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Objective-C&#34;&gt;Objective-C&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/PHP&#34;&gt;PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Powershell&#34;&gt;Powershell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Python&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/R&#34;&gt;R&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/RapidQL&#34;&gt;RapidQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Ruby&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Shell&#34;&gt;Shell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/apitube/integrations/tree/master/Swift&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>WordPress/wordpress-playground</title>
    <updated>2023-05-26T01:36:55Z</updated>
    <id>tag:github.com,2023-05-26:/WordPress/wordpress-playground</id>
    <link href="https://github.com/WordPress/wordpress-playground" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Run WordPress in the browser via WebAssembly PHP&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WordPress Playground and PHP WASM (WebAssembly)&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://developer.wordpress.org/playground/&#34;&gt;Project Page&lt;/a&gt; | &lt;a href=&#34;https://playground.wordpress.net/&#34;&gt;Live demo&lt;/a&gt; | &lt;a href=&#34;https://wordpress.github.io/wordpress-playground/&#34;&gt;Documentation and API Reference&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/WordPress/wordpress-playground&#34;&gt;WordPress Playground&lt;/a&gt; is an experimental in-browser WordPress that runs without a PHP server thanks to the magic of WebAssembly.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wordpress/wordpress-playground/trunk/demo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Why is WordPress Playground useful?&lt;/h2&gt; &#xA;&lt;p&gt;WordPress Playground is a building block that can power apps like:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runnable code snippets in your documentation or course&lt;/li&gt; &#xA; &lt;li&gt;Plugin and theme demos in a private WordPress instance where the user is already logged in as an admin&lt;/li&gt; &#xA; &lt;li&gt;Easily switching PHP and WordPress version when testing&lt;/li&gt; &#xA; &lt;li&gt;Replaying and fixing the failed CI tests right in the browser&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://make.wordpress.org/core/2022/09/23/client-side-webassembly-wordpress-with-no-server/&#34;&gt;the WordPress.org announcement post&lt;/a&gt; to learn more about the vision.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;WordPress Playground has a &lt;a href=&#34;https://developer.wordpress.org/playground/demo/&#34;&gt;live demo&lt;/a&gt; available.&lt;/p&gt; &#xA;&lt;p&gt;You can embed WordPress Playground in your project via an &lt;code&gt;&amp;lt;iframe&amp;gt;&lt;/code&gt; â€“ find out how in the &lt;a href=&#34;https://wordpress.github.io/wordpress-playground/&#34;&gt;documentation&lt;/a&gt;. &lt;strong&gt;Note the embed is experimental and may break or change without a warning.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can connect to the Playground using the JavaScript client. Here&#39;s an example of how to do it in the browser using an &lt;code&gt;iframe&lt;/code&gt; HTML element and the &lt;code&gt;startPlaygroundWeb&lt;/code&gt; function from the &lt;code&gt;@wp-playground/client&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;index.html&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE html&amp;gt;&#xA;&amp;lt;html&amp;gt;&#xA;&#x9;&amp;lt;head&amp;gt;&#xA;&#x9;&#x9;&amp;lt;title&amp;gt;WordPress Playground&amp;lt;/title&amp;gt;&#xA;&#x9;&amp;lt;/head&amp;gt;&#xA;&#x9;&amp;lt;body&amp;gt;&#xA;&#x9;&#x9;&amp;lt;iframe id=&#34;wp&#34; style=&#34;width: 1200px; height: 800px&#34;&amp;gt;&amp;lt;/iframe&amp;gt;&#xA;&#x9;&#x9;&amp;lt;script type=&#34;module&#34;&amp;gt;&#xA;&#x9;&#x9;&#x9;import { startPlaygroundWeb } from &#39;https://unpkg.com/@wp-playground/client/index.js&#39;;&#xA;&#xA;&#x9;&#x9;&#x9;const client = await startPlaygroundWeb({&#xA;&#x9;&#x9;&#x9;&#x9;iframe,&#xA;&#x9;&#x9;&#x9;&#x9;remoteUrl: `https://playground.wordpress.net/remote.html`,&#xA;&#x9;&#x9;&#x9;&#x9;blueprint: {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;landingPage: &#39;/wp-admin/&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;preferredVersions: {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;php: &#39;8.0&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;wp: &#39;latest&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;steps: [&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;step: &#39;login&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;username: &#39;admin&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;password: &#39;password&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;{&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;step: &#39;installPlugin&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;pluginZipFile: {&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;resource: &#39;wordpress.org/plugins&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;slug: &#39;friends&#39;,&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;&#x9;&#x9;],&#xA;&#x9;&#x9;&#x9;&#x9;},&#xA;&#x9;&#x9;&#x9;});&#xA;&#xA;&#x9;&#x9;&#x9;const response = await client.run({&#xA;&#x9;&#x9;&#x9;&#x9;code: &#39;&amp;lt;?php echo &#34;Hi!&#34;; &#39;,&#xA;&#x9;&#x9;&#x9;});&#xA;&#x9;&#x9;&#x9;console.log(response.text);&#xA;&#x9;&#x9;&amp;lt;/script&amp;gt;&#xA;&#x9;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cloning the repo&lt;/h2&gt; &#xA;&lt;p&gt;The vanilla &lt;code&gt;git clone&lt;/code&gt; command will take ages. Here&#39;s a faster alternative that will only pull the latest revision of the trunk branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone -b trunk --single-branch --depth 1 git@github.com:WordPress/wordpress-playground.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You also can run WordPress Playground locally as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/WordPress/wordpress-playground&#xA;cd wordpress-playground&#xA;npm install&#xA;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A browser should open and take you to your very own client-side WordPress at &lt;a href=&#34;http://127.0.0.1:5400/&#34;&gt;http://127.0.0.1:5400/&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;Any changes you make to &lt;code&gt;.ts&lt;/code&gt; files will be live-reloaded. Changes to &lt;code&gt;Dockerfile&lt;/code&gt; require a full rebuild.&lt;/p&gt; &#xA;&lt;p&gt;From here, the &lt;a href=&#34;https://wordpress.github.io/wordpress-playground/&#34;&gt;documentation&lt;/a&gt; will help you learn how WordPress Playground works and how to use it to build amazing things!&lt;/p&gt; &#xA;&lt;p&gt;And here&#39;s a few more interesting CLI commands, which expect that you have &lt;code&gt;nx&lt;/code&gt; installed globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Build and run PHP.wasm CLI&#xA;nx start php-wasm-cli&#xA;&#xA;# Build latest WordPress releases&#xA;nx recompile-wordpress:all playground-remote&#xA;&#xA;# Recompile PHP 5.6 - 8.2 releases to .wasm for web&#xA;nx recompile-php:all php-wasm-web&#xA;&#xA;# Recompile PHP 5.6 - 8.2 releases to .wasm for node&#xA;nx recompile-php:all php-wasm-node&#xA;&#xA;# Builds the documentation site&#xA;nx build docs-site&#xA;&#xA;# Builds the Playground Client npm package&#xA;nx build playground-client&#xA;&#xA;# Bonus: Run PHP.wasm in your local CLI:&#xA;npx @php-wasm/cli -v&#xA;PHP=7.4 npx @php-wasm/cli -v&#xA;npx @php-wasm/cli phpcbf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Backwards compatibility&lt;/h2&gt; &#xA;&lt;p&gt;This experimental software may break or change without a warning. Releasing a stable API is an important future milestone that will be reached once the codebase is mature enough.&lt;/p&gt; &#xA;&lt;h2&gt;Prior art&lt;/h2&gt; &#xA;&lt;p&gt;WordPress Playground forked the original PHP to WebAssembly build published in &lt;a href=&#34;https://github.com/oraoto/pib&#34;&gt;https://github.com/oraoto/pib&lt;/a&gt; and modified later in &lt;a href=&#34;https://github.com/seanmorris/php-wasm&#34;&gt;https://github.com/seanmorris/php-wasm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Another strong inspiration was the &lt;a href=&#34;https://seanmorris.github.io/php-wasm/?autorun=0&amp;amp;persist=0&amp;amp;single-expression=0&amp;amp;code=%253C%253Fphp%250Aini_set%28%27session.save_path%27%252C%2520%27%252Fhome%252Fweb_user%27%29%253B%250A%250A%2524stdErr%2520%253D%2520fopen%28%27php%253A%252F%252Fstderr%27%252C%2520%27w%27%29%253B%250A%2524errors%2520%253D%2520%255B%255D%253B%250A%250Aregister_shutdown_function%28function%28%29%2520use%28%2524stdErr%252C%2520%2526%2524errors%29%257B%250A%2520%2520%2520%2520fwrite%28%2524stdErr%252C%2520json_encode%28%255B%27session_id%27%2520%253D%253E%2520session_id%28%29%255D%29%2520.%2520%2522%255Cn%2522%29%253B%250A%2520%2520%2520%2520fwrite%28%2524stdErr%252C%2520json_encode%28%255B%27headers%27%253D%253Eheaders_list%28%29%255D%29%2520.%2520%2522%255Cn%2522%29%253B%250A%2520%2520%2520%2520fwrite%28%2524stdErr%252C%2520json_encode%28%255B%27errors%27%2520%253D%253E%2520error_get_last%28%29%255D%29%2520.%2520%2522%255Cn%2522%29%253B%250A%257D%29%253B%250A%250Aset_error_handler%28function%28...%2524args%29%2520use%28%2524stdErr%252C%2520%2526%2524errors%29%257B%250A%2509fwrite%28%2524stdErr%252C%2520print_r%28%2524args%252C1%29%29%253B%250A%257D%29%253B%250A%250A%2524docroot%2520%253D%2520%27%252Fpreload%252Fdrupal-7.59%27%253B%250A%2524path%2520%2520%2520%2520%253D%2520%27%252F%27%253B%250A%2524script%2520%2520%253D%2520%27index.php%27%253B%250A%250A%2524_SERVER%255B%27REQUEST_URI%27%255D%2520%2520%2520%2520%2520%253D%2520%2524docroot%2520.%2520%2524path%253B%250A%2524_SERVER%255B%27REMOTE_ADDR%27%255D%2520%2520%2520%2520%2520%253D%2520%27127.0.0.1%27%253B%250A%2524_SERVER%255B%27SERVER_NAME%27%255D%2520%2520%2520%2520%2520%253D%2520%27localhost%27%253B%250A%2524_SERVER%255B%27SERVER_PORT%27%255D%2520%2520%2520%2520%2520%253D%25203333%253B%250A%2524_SERVER%255B%27REQUEST_METHOD%27%255D%2520%2520%253D%2520%27GET%27%253B%250A%2524_SERVER%255B%27SCRIPT_FILENAME%27%255D%2520%253D%2520%2524docroot%2520.%2520%27%252F%27%2520.%2520%2524script%253B%250A%2524_SERVER%255B%27SCRIPT_NAME%27%255D%2520%2520%2520%2520%2520%253D%2520%2524docroot%2520.%2520%27%252F%27%2520.%2520%2524script%253B%250A%2524_SERVER%255B%27PHP_SELF%27%255D%2520%2520%2520%2520%2520%2520%2520%2520%253D%2520%2524docroot%2520.%2520%27%252F%27%2520.%2520%2524script%253B%250A%250Achdir%28%2524docroot%29%253B%250A%250Aob_start%28%29%253B%250A%250Adefine%28%27DRUPAL_ROOT%27%252C%2520getcwd%28%29%29%253B%250A%250Arequire_once%2520DRUPAL_ROOT%2520.%2520%27%252Fincludes%252Fbootstrap.inc%27%253B%250Adrupal_bootstrap%28DRUPAL_BOOTSTRAP_FULL%29%253B%250A%250A%2524uid%2520%2520%2520%2520%2520%253D%25201%253B%250A%2524user%2520%2520%2520%2520%253D%2520user_load%28%2524uid%29%253B%250A%2524account%2520%253D%2520array%28%27uid%27%2520%253D%253E%2520%2524user-%253Euid%29%253B%250Auser_login_submit%28array%28%29%252C%2520%2524account%29%253B%250A%250A%2524itemPath%2520%253D%2520%2524path%253B%250A%2524itemPath%2520%253D%2520preg_replace%28%27%252F%255E%255C%255C%252Fpreload%252F%27%252C%2520%27%27%252C%2520%2524itemPath%29%253B%250A%2524itemPath%2520%253D%2520preg_replace%28%27%252F%255E%255C%255C%252Fdrupal-7.59%252F%27%252C%2520%27%27%252C%2520%2524itemPath%29%253B%250A%2524itemPath%2520%253D%2520preg_replace%28%27%252F%255E%255C%252F%252F%27%252C%2520%27%27%252C%2520%2524itemPath%29%253B%250A%250Aif%28%2524itemPath%29%250A%257B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520%2524router_item%2520%253D%2520menu_get_item%28%2524itemPath%29%253B%250A%2520%2520%2520%2520%2524router_item%255B%27access_callback%27%255D%2520%253D%2520true%253B%250A%2520%2520%2520%2520%2524router_item%255B%27access%27%255D%2520%253D%2520true%253B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520if%2520%28%2524router_item%255B%27include_file%27%255D%29%2520%257B%250A%2520%2520%2520%2520%2520%2520require_once%2520DRUPAL_ROOT%2520.%2520%27%252F%27%2520.%2520%2524router_item%255B%27include_file%27%255D%253B%250A%2520%2520%2520%2520%257D%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520%2524page_callback_result%2520%253D%2520call_user_func_array%28%2524router_item%255B%27page_callback%27%255D%252C%2520unserialize%28%2524router_item%255B%27page_arguments%27%255D%29%29%253B%250A%2520%2520%2520%2520%250A%2520%2520%2520%2520drupal_deliver_page%28%2524page_callback_result%29%253B%250A%257D%250Aelse%250A%257B%250A%2520%2520%2520%2520menu_execute_active_handler%28%29%253B%250A%257D&amp;amp;render-as=html&#34;&gt;Drupal in the browser demo&lt;/a&gt; which proved you can run non-trivial PHP software in the browser.&lt;/p&gt; &#xA;&lt;p&gt;A worthy mention is Wasm Labsâ€™s closed-source &lt;a href=&#34;https://wordpress.wasmlabs.dev/&#34;&gt;WordPress in the browser&lt;/a&gt; shared before this project was first published. There is no public repository available, but their &lt;a href=&#34;https://wasmlabs.dev/articles/wordpress-in-the-browser/&#34;&gt;technical overview&lt;/a&gt; gives a breakdown of the technical decisions that project took. WordPress Playground draws inspiration from the same PHP in the browser projects and makes similar technical choices.&lt;/p&gt; &#xA;&lt;h2&gt;Using WP-NOW for local environment&lt;/h2&gt; &#xA;&lt;p&gt;WordPress Playground comes with &lt;code&gt;wp-now&lt;/code&gt;. &lt;code&gt;wp-now&lt;/code&gt; is a Command Line Interface (CLI) tool designed to streamline the process of setting up a local WordPress environment by using only Node.js. If you are looking to set up &lt;code&gt;wp-now&lt;/code&gt; specifically, you can follow &lt;a href=&#34;https://raw.githubusercontent.com/WordPress/wordpress-playground/trunk/packages/wp-now/README.md&#34;&gt;this README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;WordPress Playground is an ambitious project in its early days. If the feature you need is missing, you are more than welcome to start a discussion, open an issue, and even propose a Pull Request to implement it.&lt;/p&gt;</summary>
  </entry>
</feed>