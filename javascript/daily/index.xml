<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-08-11T01:30:58Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>WebKit/WebKit</title>
    <updated>2024-08-11T01:30:58Z</updated>
    <id>tag:github.com,2024-08-11:/WebKit/WebKit</id>
    <link href="https://github.com/WebKit/WebKit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Home of the WebKit project, the browser engine used by Safari, Mail, App Store and many other applications on macOS, iOS and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebKit&lt;/h1&gt; &#xA;&lt;p&gt;WebKit is a cross-platform web browser engine. On iOS and macOS, it powers Safari, Mail, iBooks, and many other applications. For more information about WebKit, see the &lt;a href=&#34;https://webkit.org/&#34;&gt;WebKit project website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Trying the Latest&lt;/h2&gt; &#xA;&lt;p&gt;On macOS, &lt;a href=&#34;https://webkit.org/downloads/&#34;&gt;download Safari Technology Preview&lt;/a&gt; to test the latest version of WebKit. On Linux, download &lt;a href=&#34;https://webkitgtk.org/epiphany-tech-preview&#34;&gt;Epiphany Technology Preview&lt;/a&gt;. On Windows, you&#39;ll have to build it yourself.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.webkit.org/query.cgi?format=specific&amp;amp;product=WebKit&#34;&gt;Search WebKit Bugzilla&lt;/a&gt; to see if there is an existing report for the bug you&#39;ve encountered.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bugs.webkit.org/createaccount.cgi&#34;&gt;Create a Bugzilla account&lt;/a&gt; to report bugs (and comment on them) if you haven&#39;t done so already.&lt;/li&gt; &#xA; &lt;li&gt;File a bug in accordance with &lt;a href=&#34;https://webkit.org/bug-report-guidelines/&#34;&gt;our guidelines&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once your bug is filed, you will receive email when it is updated at each stage in the &lt;a href=&#34;https://webkit.org/bug-life-cycle&#34;&gt;bug life cycle&lt;/a&gt;. After the bug is considered fixed, you may be asked to download the &lt;a href=&#34;https://webkit.org/nightly&#34;&gt;latest nightly&lt;/a&gt; and confirm that the fix works for you.&lt;/p&gt; &#xA;&lt;h2&gt;Getting the Code&lt;/h2&gt; &#xA;&lt;p&gt;Run the following command to clone WebKit&#39;s Git repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/WebKit/WebKit.git WebKit&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can enable &lt;a href=&#34;https://git-scm.com/docs/git-config#Documentation/git-config.txt-corefsmonitor&#34;&gt;git fsmonitor&lt;/a&gt; to make many git commands faster (such as &lt;code&gt;git status&lt;/code&gt;) with &lt;code&gt;git config core.fsmonitor true&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Building WebKit&lt;/h2&gt; &#xA;&lt;h3&gt;Building for Apple platforms&lt;/h3&gt; &#xA;&lt;p&gt;Install Xcode and its command line tools if you haven&#39;t done so already:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install Xcode&lt;/strong&gt; Get Xcode from &lt;a href=&#34;https://developer.apple.com/downloads&#34;&gt;https://developer.apple.com/downloads&lt;/a&gt;. To build WebKit for OS X, Xcode 5.1.1 or later is required. To build WebKit for iOS Simulator, Xcode 7 or later is required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Install the Xcode Command Line Tools&lt;/strong&gt; In Terminal, run the command: &lt;code&gt;xcode-select --install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Run the following command to build a macOS debug build with debugging symbols and assertions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tools/Scripts/build-webkit --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For performance testing, and other purposes, use &lt;code&gt;--release&lt;/code&gt; instead.&lt;/p&gt; &#xA;&lt;h4&gt;Embedded Builds&lt;/h4&gt; &#xA;&lt;p&gt;To build for an embedded platform like iOS, tvOS, or watchOS, pass a platform argument to &lt;code&gt;build-webkit&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, to build a debug build with debugging symbols and assertions for embedded simulators:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tools/Scripts/build-webkit --debug --&amp;lt;platform&amp;gt;-simulator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or embedded devices:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tools/Scripts/build-webkit --debug --&amp;lt;platform&amp;gt;-device&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;platform&lt;/code&gt; is &lt;code&gt;ios&lt;/code&gt;, &lt;code&gt;tvos&lt;/code&gt; or &lt;code&gt;watchos&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Using Xcode&lt;/h4&gt; &#xA;&lt;p&gt;You can open &lt;code&gt;WebKit.xcworkspace&lt;/code&gt; to build and debug WebKit within Xcode. Select the &#34;Everything up to WebKit + Tools&#34; scheme to build the entire project.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t use a custom build location in Xcode preferences, you have to update the workspace settings to use &lt;code&gt;WebKitBuild&lt;/code&gt; directory. In menu bar, choose File &amp;gt; Workspace Settings, then click the Advanced button, select &#34;Custom&#34;, &#34;Relative to Workspace&#34;, and enter &lt;code&gt;WebKitBuild&lt;/code&gt; for both Products and Intermediates.&lt;/p&gt; &#xA;&lt;h3&gt;Building the GTK Port&lt;/h3&gt; &#xA;&lt;p&gt;For production builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DPORT=GTK -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja&#xA;ninja&#xA;sudo ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For development builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tools/gtk/install-dependencies&#xA;Tools/Scripts/update-webkitgtk-libs&#xA;Tools/Scripts/build-webkit --gtk --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on building WebKitGTK, see the &lt;a href=&#34;https://trac.webkit.org/wiki/BuildingGtk&#34;&gt;wiki page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building the WPE Port&lt;/h3&gt; &#xA;&lt;p&gt;For production builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cmake -DPORT=WPE -DCMAKE_BUILD_TYPE=RelWithDebInfo -GNinja&#xA;ninja&#xA;sudo ninja install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For development builds:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tools/wpe/install-dependencies&#xA;Tools/Scripts/update-webkitwpe-libs&#xA;Tools/Scripts/build-webkit --wpe --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building Windows Port&lt;/h3&gt; &#xA;&lt;p&gt;For building WebKit on Windows, see the &lt;a href=&#34;https://docs.webkit.org/Ports/WindowsPort.html&#34;&gt;WebKit on Windows page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running WebKit&lt;/h2&gt; &#xA;&lt;h3&gt;With Safari and Other macOS Applications&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to launch Safari with your local build of WebKit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tools/Scripts/run-safari --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;run-safari&lt;/code&gt; script sets the &lt;code&gt;DYLD_FRAMEWORK_PATH&lt;/code&gt; environment variable to point to your build products, and then launches &lt;code&gt;/Applications/Safari.app&lt;/code&gt;. &lt;code&gt;DYLD_FRAMEWORK_PATH&lt;/code&gt; tells the system loader to prefer your build products over the frameworks installed in &lt;code&gt;/System/Library/Frameworks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run other applications with your local build of WebKit, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Tools/Scripts/run-webkit-app &amp;lt;application-path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;iOS Simulator&lt;/h3&gt; &#xA;&lt;p&gt;Run the following command to launch iOS simulator with your local build of WebKit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;run-safari --debug --ios-simulator&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In both cases, if you have built release builds instead, use &lt;code&gt;--release&lt;/code&gt; instead of &lt;code&gt;--debug&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Linux Ports&lt;/h3&gt; &#xA;&lt;p&gt;If you have a development build, you can use the &lt;code&gt;run-minibrowser&lt;/code&gt; script, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;run-minibrowser --debug --wpe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pass one of &lt;code&gt;--gtk&lt;/code&gt;, &lt;code&gt;--jsc-only&lt;/code&gt;, or &lt;code&gt;--wpe&lt;/code&gt; to indicate the port to use.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Congratulations! Youâ€™re up and running. Now you can begin coding in WebKit and contribute your fixes and new features to the project. For details on submitting your code to the project, read &lt;a href=&#34;https://webkit.org/contributing-code/&#34;&gt;Contributing Code&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>