<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-26T01:29:12Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ahsan-chy/React-JS-Advance-Folder-Structure</title>
    <updated>2023-08-26T01:29:12Z</updated>
    <id>tag:github.com,2023-08-26:/ahsan-chy/React-JS-Advance-Folder-Structure</id>
    <link href="https://github.com/ahsan-chy/React-JS-Advance-Folder-Structure" rel="alternate"></link>
    <summary type="html">&lt;p&gt;React JS Advanced Folder Structure - Boilerplate&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React JS Advance-Level Folder Structure&lt;/h1&gt; &#xA;&lt;p&gt;How to run the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Before using This project install latest versions of following packages&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/axios&#34;&gt;Axios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Bootstrap - React Strap - MUI - AntD - Tailwind&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://react-icons.github.io/react-icons/&#34;&gt;React Icons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;React Router Dom &lt;a href=&#34;https://reactrouter.com/en/dev/upgrading/reach#install-react-router-v6&#34;&gt;Latest React Router v6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Other Required packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In the project I have just set Up most used folder structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;React JS Advanced Folder Structure&#xA;.&#xA;├── public&#xA;|     └── index.html&#xA;├── src&#xA;    ├── assets&#xA;    |     ├── audios&#xA;    |     ├── icons&#xA;    |     ├── images&#xA;    |     └── videos&#xA;    ├── components&#xA;    |     ├── Button&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── button.module.css&#xA;    |&#x9;  ├── inputs&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── inputs.module.css&#xA;    |&#x9;  ├── Modal&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── modal.module.css&#xA;    |&#x9;  └── Tooltip&#xA;    |           ├── index.jsx&#xA;    |           └── tooltip.module.css&#xA;    |     └── index.js&#xA;    ├──  db&#xA;    |     ├── productsData.js&#xA;    |     └── userData.js&#xA;    ├── layout&#xA;    |     ├── Header&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── header.module.css&#xA;    |     ├── Navbar.jsx&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── navbar.module.css&#xA;    |     ├── Breadcrumbs.jsx&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── breadcrumbs.module.css&#xA;    |     └── Footer.jsx&#xA;    |           ├── index.jsx&#xA;    |           └── footer.module.css&#xA;    |     └── index.js&#xA;    ├── pages&#xA;    |     ├── Home&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── home.module.css&#xA;    |     ├── Login&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── login.module.css&#xA;    |     ├── Signup&#xA;    |     |     ├── index.jsx&#xA;    |     |     └── signup.module.css&#xA;    |     └── About&#xA;    |           ├── index.jsx&#xA;    |           └── about.module.css&#xA;    |     └── index.js&#xA;    ├── Routers&#xA;    |     └── Routers.js&#xA;    ├── store&#xA;    |     ├── action.js  &#xA;    |     ├── reducers.js  &#xA;    |     └── store.js&#xA;    ├── services&#xA;    |     ├── api.js          // API request functions&#xA;    |     └── dataUtils.js    // Data manipulation functions&#xA;    ├── utils&#xA;    |     ├── constants&#xA;    |     |     ├── Strapi.js&#xA;    |     |     └── Firebase.js&#xA;    |     ├── helpers&#xA;    |     |     ├── arrays.js&#xA;    |     |     └── helpers.js&#xA;    |     └── hooks  &#xA;    |           └── useIsMobile.js  &#xA;    ├── .env&#xA;    ├── app.js&#xA;    ├── index.css&#xA;    ├── index.js&#xA;|&#xA;├── .gitignore&#xA;├── package-lock.json&#xA;├── package.json&#xA;└── README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Folders include&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Public&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Assests&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Components&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;db&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;layout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pages&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Routes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;services&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;store&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;utils&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Constants&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;helpers&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hooks&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.env.example&lt;/code&gt; / &lt;code&gt;.env.development&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.eslintrc.cjs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.prettierrc.cjs&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.jsonconfig.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.gitignore&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.vite.config.js&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Public&lt;/h3&gt; &#xA;&lt;p&gt;Public mainly contain root file &lt;strong&gt;&lt;code&gt;index.html&lt;/code&gt;&lt;/strong&gt; which help to run react project.&lt;/p&gt; &#xA;&lt;h3&gt;Assests&lt;/h3&gt; &#xA;&lt;p&gt;In Assets folder you can put following things.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Images&lt;/li&gt; &#xA; &lt;li&gt;Video&lt;/li&gt; &#xA; &lt;li&gt;Icons&lt;/li&gt; &#xA; &lt;li&gt;CSS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Components&lt;/h3&gt; &#xA;&lt;p&gt;Component will have all the components which are reuseable anywhere in website. Like - Button - Cards - DropDownBtn - inputs - Modal - Popups - Toast - Tooltip - Text/Heading/Title - Skeleton - Spiner/Loader&lt;/p&gt; &#xA;&lt;h3&gt;Constants&lt;/h3&gt; &#xA;&lt;p&gt;Constants folder have &lt;strong&gt;Tokens,&lt;/strong&gt; logins, and those details which we don&#39;t want to share with public. Like &lt;strong&gt;Env&lt;/strong&gt; files are used to store sensitive credentials such as &lt;strong&gt;API keys.&lt;/strong&gt; An environment variable supports storing the API link at one location so that we do not need to change the Link in each file manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const API_BASE_URL = &#39;https://api.example.com&#39;;&#xA;const MAX_ITEMS_PER_PAGE = 10;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;db&lt;/h3&gt; &#xA;&lt;p&gt;Here we provide JSON Formate of data in frontend in React APP.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;products data&lt;/li&gt; &#xA; &lt;li&gt;users data&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Helpers&lt;/h3&gt; &#xA;&lt;p&gt;Helpers used to store utility functions and modules that provide various helper functionalities. These functions are usually small, reusable, and not directly tied to the main business logic of your application.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Array to Object&lt;/li&gt; &#xA; &lt;li&gt;Object to Array&lt;/li&gt; &#xA; &lt;li&gt;Date Formatting&lt;/li&gt; &#xA; &lt;li&gt;Number Formatting&lt;/li&gt; &#xA; &lt;li&gt;Validation&lt;/li&gt; &#xA; &lt;li&gt;Api Request&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chat.openai.com/share/32e7459b-dd5a-495a-a418-db2453361370&#34;&gt;Helper Functions Details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Layout&lt;/h3&gt; &#xA;&lt;p&gt;This is just a special folder for &lt;strong&gt;placing any layout based components.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Header&lt;/li&gt; &#xA; &lt;li&gt;Footer&lt;/li&gt; &#xA; &lt;li&gt;Breadcrumbs&lt;/li&gt; &#xA; &lt;li&gt;Navbar&lt;/li&gt; &#xA; &lt;li&gt;Sidebar&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Pages&lt;/h3&gt; &#xA;&lt;p&gt;Pages will have all the pages which we will use in website.&lt;/p&gt; &#xA;&lt;h3&gt;Routes&lt;/h3&gt; &#xA;&lt;p&gt;Router will have all the Routes in website. Where we are going and where we want to go.&lt;/p&gt; &#xA;&lt;h3&gt;Services&lt;/h3&gt; &#xA;&lt;p&gt;In Services we put configuration file, like when you are using google firebase then your firebase config file will be in services folder.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&#34;services&#34;&lt;/strong&gt; folder is often used to contain code related to making &lt;strong&gt;*&lt;code&gt;API&lt;/code&gt;&lt;/strong&gt; requests and managing data from external sources. This folder helps separate the concerns of your application by isolating data fetching and manipulation logic from the components that render the UI.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// services/apiService.js&#xA;import axios from &#39;axios&#39;;&#xA;&#xA;export function fetchUserData(userId) {&#xA;  return axios.get(`/api/users/${userId}`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Store&lt;/h3&gt; &#xA;&lt;p&gt;&#34;store&#34; folder in a React application typically refers to a directory where you manage your application&#39;s state using state management libraries like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Redux&lt;/li&gt; &#xA; &lt;li&gt;Redux Toolkit&lt;/li&gt; &#xA; &lt;li&gt;Zustand&lt;/li&gt; &#xA; &lt;li&gt;Context Api&lt;/li&gt; &#xA; &lt;li&gt;Mobx&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;|-- store/&#xA;|   |-- actions.js        // Redux action creators&#xA;|   |-- reducers.js       // Redux reducers&#xA;|   |-- store.js          // Redux store configuration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Utils&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;Utils&lt;/code&gt;&lt;/strong&gt; folder is a common convention in many software projects, including React applications, for storing utility functions and helper modules that provide general-purpose functionality across different parts of the application.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;constants&lt;/li&gt; &#xA; &lt;li&gt;helpers&lt;/li&gt; &#xA; &lt;li&gt;hooks&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// utils/stringUtils.js&#xA;export function capitalizeFirstLetter(str) {&#xA;  return str.charAt(0).toUpperCase() + str.slice(1);&#xA;}&#xA;&#xA;// utils/dateUtils.js&#xA;export function formatDate(date) {&#xA;  const options = { year: &#39;numeric&#39;, month: &#39;long&#39;, day: &#39;numeric&#39; };&#xA;  return new Date(date).toLocaleDateString(undefined, options);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;.env.development&lt;/h3&gt; &#xA;&lt;p&gt;Env files are used to store sensitive credentials such as API keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;REACT_APP_API_URL=http://localhost:3001&#xA;REACT_APP_DEBUG_MODE=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;.env.example&lt;/h3&gt; &#xA;&lt;p&gt;Env files are used to store sensitive credentials such as API keys.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;REACT_APP_API_KEY=&#xA;REACT_APP_API_URL=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;.eslintrc.cjs&lt;/h3&gt; &#xA;&lt;p&gt;ESLint, which is a popular tool for linting and enforcing coding style and best practices in JavaScript code. The .eslintrc.cjs file is written in CommonJS module format and is used to configure ESLint for your project.&lt;/p&gt; &#xA;&lt;h3&gt;.gitignore&lt;/h3&gt; &#xA;&lt;p&gt;.gitignore file contain all those files,folders name which user want to skip to push online. If you don&#39;t want to push any specific file/folder then you should put their name in .gitignore&lt;/p&gt; &#xA;&lt;h3&gt;.prettierrc.cjs&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;.prettierrc.cjs&lt;/code&gt; file is a configuration file used for Prettier, which is a widely used code formatting tool. Prettier helps ensure consistent and automatic code formatting across your codebase. The &lt;code&gt;.prettierrc.cjs&lt;/code&gt; file is written in CommonJS module format and is used to configure Prettier&#39;s behavior for your project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File Format &amp;amp; Naming&lt;/li&gt; &#xA; &lt;li&gt;Configuration Setup&lt;/li&gt; &#xA; &lt;li&gt;Export Configuration&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;module.exports = {&#xA;  printWidth: 80,&#xA;  tabWidth: 2,&#xA;  singleQuote: true,&#xA;  trailingComma: &#39;es5&#39;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;jscongig.json&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;File Purpose&lt;/li&gt; &#xA; &lt;li&gt;Configuration Setup:&lt;/li&gt; &#xA; &lt;li&gt;JSON Format&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;  &#34;compilerOptions&#34;: {&#xA;    &#34;baseUrl&#34;: &#34;./&#34;,&#xA;    &#34;paths&#34;: {&#xA;      &#34;@/*&#34;: [&#34;src/*&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;package.json&lt;/h3&gt; &#xA;&lt;p&gt;package.json file is core to the Nodejs ecosystem and is a fundamental part of understanding and working with Node. js , npm , and even modern JavaScript . This file is used as a manifest, storing information about applications, modules, packages, and more.&lt;/p&gt; &#xA;&lt;h3&gt;vite.config.js&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;File Purpose: The vite.config.js file allows you to customize various aspects of your Vite project, including configuration options for the development server, build process, and plugin settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Configuration Setup: Inside the vite.config.js file, you export an object containing the configuration options for your Vite project. This object can include settings related to the development server, build process, plugins, and more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;JavaScript Format: The vite.config.js file is written in JavaScript, and it&#39;s named vite.config.js. It should be placed in the root directory of your Vite project.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// vite.config.js&#xA;export default {&#xA;  server: {&#xA;    port: 3000&#xA;  },&#xA;  build: {&#xA;    minify: true&#xA;  },&#xA;  plugins: [/* your plugins here */]&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;@import&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default defineConfig({&#xA;  resolve: {&#xA;    alias: {&#xA;      &#39;@&#39;: &#39;/src&#39;,&#xA;      &#39;@page&#39;: &#39;/src/page&#39;&#xA;    }&#xA;  },&#xA;  plugins: [react()],&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>CycloneDX/cdxgen</title>
    <updated>2023-08-26T01:29:12Z</updated>
    <id>tag:github.com,2023-08-26:/CycloneDX/cdxgen</id>
    <link href="https://github.com/CycloneDX/cdxgen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Creates CycloneDX Software Bill-of-Materials (SBOM) for your projects from source and container images. Supports many languages and package managers. Integrate in your CI//CD pipeline with automatic submission to Dependency Track server.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;CycloneDX Generator&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/cdxgen.png&#34; alt=&#34;cdxgen logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;cdxgen is a cli tool, library, &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/ADVANCED.md&#34;&gt;REPL&lt;/a&gt; and server to create a valid and compliant &lt;a href=&#34;https://cyclonedx.org&#34;&gt;CycloneDX&lt;/a&gt; Software Bill-of-Materials (SBOM) containing an aggregate of all project dependencies for c/c++, node.js, php, python, ruby, rust, java, .Net, dart, haskell, elixir, and Go projects in JSON format. CycloneDX 1.5 is a lightweight SBOM specification that is easily created, human and machine-readable, and simple to parse.&lt;/p&gt; &#xA;&lt;p&gt;When used with plugins, cdxgen could generate an SBoM for Linux docker images and even VMs running Linux or Windows operating system. cdxgen also includes a tool called &lt;code&gt;evinse&lt;/code&gt; that can generate component evidences for some languages.&lt;/p&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;p&gt;CycloneDX 1.5 specification is new and unsupported by many downstream tools. Use version 8.6.0 for 1.4 compatibility or pass the argument &lt;code&gt;--spec-version 1.4&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Why cdxgen?&lt;/h2&gt; &#xA;&lt;p&gt;A typical application might comprise of several repos, components, and libraries linked together. Traditional techniques to generate a single SBoM per language or package manifest do not work in enterprise environments. So we built cdxgen - the universal polyglot SBoM generator!&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/docs/why-cdxgen.jpg&#34; alt=&#34;why cdxgen&#34; width=&#34;256&#34;&gt; &#xA;&lt;h2&gt;Supported languages and package format&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Language/Platform&lt;/th&gt; &#xA;   &lt;th&gt;Package format&lt;/th&gt; &#xA;   &lt;th&gt;Transitive dependencies&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;node.js&lt;/td&gt; &#xA;   &lt;td&gt;npm-shrinkwrap.json, package-lock.json, pnpm-lock.yaml, yarn.lock, rush.js, bower.json, .min.js&lt;/td&gt; &#xA;   &lt;td&gt;Yes except .min.js&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;java&lt;/td&gt; &#xA;   &lt;td&gt;maven (pom.xml [1]), gradle (build.gradle, .kts), scala (sbt), bazel&lt;/td&gt; &#xA;   &lt;td&gt;Yes unless pom.xml is manually parsed due to unavailability of maven or errors&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;php&lt;/td&gt; &#xA;   &lt;td&gt;composer.lock&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;python&lt;/td&gt; &#xA;   &lt;td&gt;pyproject.toml, setup.py, requirements.txt [2], Pipfile.lock, poetry.lock, pdm.lock, bdist_wheel, .whl, .egg-info&lt;/td&gt; &#xA;   &lt;td&gt;Yes using the automatic pip install/freeze. When disabled, only with Pipfile.lock and poetry.lock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;go&lt;/td&gt; &#xA;   &lt;td&gt;binary, go.mod, go.sum, Gopkg.lock&lt;/td&gt; &#xA;   &lt;td&gt;Yes except binary&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ruby&lt;/td&gt; &#xA;   &lt;td&gt;Gemfile.lock, gemspec&lt;/td&gt; &#xA;   &lt;td&gt;Only for Gemfile.lock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rust&lt;/td&gt; &#xA;   &lt;td&gt;binary, Cargo.toml, Cargo.lock&lt;/td&gt; &#xA;   &lt;td&gt;Only for Cargo.lock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;.Net&lt;/td&gt; &#xA;   &lt;td&gt;.csproj, packages.config, project.assets.json [3], packages.lock.json, .nupkg&lt;/td&gt; &#xA;   &lt;td&gt;Only for project.assets.json, packages.lock.json&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dart&lt;/td&gt; &#xA;   &lt;td&gt;pubspec.lock, pubspec.yaml&lt;/td&gt; &#xA;   &lt;td&gt;Only for pubspec.lock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;haskell&lt;/td&gt; &#xA;   &lt;td&gt;cabal.project.freeze&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;elixir&lt;/td&gt; &#xA;   &lt;td&gt;mix.lock&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;c/c++&lt;/td&gt; &#xA;   &lt;td&gt;conan.lock, conanfile.txt&lt;/td&gt; &#xA;   &lt;td&gt;Yes only for conan.lock&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;clojure&lt;/td&gt; &#xA;   &lt;td&gt;Clojure CLI (deps.edn), Leiningen (project.clj)&lt;/td&gt; &#xA;   &lt;td&gt;Yes unless the files are parsed manually due to lack of clojure cli or leiningen command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;swift&lt;/td&gt; &#xA;   &lt;td&gt;Package.resolved, Package.swift (swiftpm)&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;docker / oci image&lt;/td&gt; &#xA;   &lt;td&gt;All supported languages. Linux OS packages with plugins [4]&lt;/td&gt; &#xA;   &lt;td&gt;Best effort based on lock files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GitHub Actions&lt;/td&gt; &#xA;   &lt;td&gt;.github/workflows/*.yml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Linux&lt;/td&gt; &#xA;   &lt;td&gt;All supported languages. Linux OS packages with plugins [5]&lt;/td&gt; &#xA;   &lt;td&gt;Best effort based on lock files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Windows&lt;/td&gt; &#xA;   &lt;td&gt;All supported languages. OS packages with best effort [5]&lt;/td&gt; &#xA;   &lt;td&gt;Best effort based on lock files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jenkins Plugins&lt;/td&gt; &#xA;   &lt;td&gt;.hpi files&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Helm Charts&lt;/td&gt; &#xA;   &lt;td&gt;.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Skaffold&lt;/td&gt; &#xA;   &lt;td&gt;.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;kustomization&lt;/td&gt; &#xA;   &lt;td&gt;.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tekton tasks&lt;/td&gt; &#xA;   &lt;td&gt;.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Kubernetes&lt;/td&gt; &#xA;   &lt;td&gt;.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Maven Cache&lt;/td&gt; &#xA;   &lt;td&gt;$HOME/.m2/repository/**/*.jar&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SBT Cache&lt;/td&gt; &#xA;   &lt;td&gt;$HOME/.ivy2/cache/**/*.jar&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gradle Cache&lt;/td&gt; &#xA;   &lt;td&gt;$HOME/caches/modules-2/files-2.1/**/*.jar&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Helm Index&lt;/td&gt; &#xA;   &lt;td&gt;$HOME/.cache/helm/repository/**/*.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Docker compose&lt;/td&gt; &#xA;   &lt;td&gt;docker-compose*.yml. Images would also be scanned.&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Google CloudBuild configuration&lt;/td&gt; &#xA;   &lt;td&gt;cloudbuild.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;OpenAPI&lt;/td&gt; &#xA;   &lt;td&gt;openapi*.json, openapi*.yaml&lt;/td&gt; &#xA;   &lt;td&gt;N/A&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Apache maven 3.x is required for parsing pom.xml&lt;/li&gt; &#xA; &lt;li&gt;gradle or gradlew is required to parse gradle projects&lt;/li&gt; &#xA; &lt;li&gt;sbt is required for parsing scala sbt projects. Only scala 2.10 + sbt 0.13.6+ and 2.12 + sbt 1.0+ is supported for now. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Alternatively, create a lock file using sbt-dependency-lock &lt;a href=&#34;https://github.com/stringbean/sbt-dependency-lock&#34;&gt;plugin&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Footnotes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;[1] - For multi-module application, the BoM file could include components that may not be included in the packaged war or ear file.&lt;/li&gt; &#xA; &lt;li&gt;[2] - Pip freeze is automatically performed to improve precision. Requires virtual environment.&lt;/li&gt; &#xA; &lt;li&gt;[3] - Perform dotnet or nuget restore to generate project.assets.json. Without this file cdxgen would not include indirect dependencies.&lt;/li&gt; &#xA; &lt;li&gt;[4] - See section on plugins&lt;/li&gt; &#xA; &lt;li&gt;[5] - Powered by osquery. See section on plugins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/docs/cdxgen-tree.jpg&#34; alt=&#34;cdxgen tree&#34; width=&#34;256&#34;&gt; &#xA;&lt;h3&gt;Automatic usage detection&lt;/h3&gt; &#xA;&lt;p&gt;For node.js projects, lock files are parsed initially so the SBoM would include all dependencies including dev dependencies. An AST parser powered by babel-parser is then used to detect packages that are imported and used by non-test code. Such imported packages would automatically have their &lt;code&gt;scope&lt;/code&gt; property set to &lt;code&gt;required&lt;/code&gt; in the resulting SBoM. By passing the argument &lt;code&gt;--no-babel&lt;/code&gt;, you can disable this analysis. Scope property would then be set based on the &lt;code&gt;dev&lt;/code&gt; attribute in the lock file.&lt;/p&gt; &#xA;&lt;p&gt;This attribute can be later used for various purposes. For example, &lt;a href=&#34;https://github.com/cyclonedx/dep-scan&#34;&gt;dep-scan&lt;/a&gt; use this attribute to prioritize vulnerabilities. Tools such dependency track, unfortunately, do not include this feature and hence might over-report the CVEs.&lt;/p&gt; &#xA;&lt;p&gt;By passing the argument &lt;code&gt;--required-only&lt;/code&gt;, you can limit the SBoM to only include packages with the scope &#34;required&#34;, commonly referred to as production or non-dev dependencies. Combine with &lt;code&gt;--no-babel&lt;/code&gt; to limit this list to only non-dev dependencies based on the &lt;code&gt;dev&lt;/code&gt; attribute being false in the lock files.&lt;/p&gt; &#xA;&lt;p&gt;For go, &lt;code&gt;go mod why&lt;/code&gt; command is used to identify required packages. For php, composer lock file is used to distinguish required (packages) from optional (packages-dev).&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo npm install -g @cyclonedx/cdxgen&#xA;&#xA;# For CycloneDX 1.4 compatibility use version 8.6.0 or pass the argument `--spec-version 1.4`&#xA;sudo npm install -g @cyclonedx/cdxgen@8.6.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deno install is also supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;deno install --allow-read --allow-env --allow-run --allow-sys=uid,systemMemoryInfo --allow-write --allow-net -n cdxgen &#34;npm:@cyclonedx/cdxgen/cdxgen&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the cdxgen container image&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen -r /app -o /app/bom.json&#xA;&#xA;docker run --rm -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen:v8.6.0 -r /app -o /app/bom.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use the deno version, use &lt;code&gt;ghcr.io/cyclonedx/cdxgen-deno&lt;/code&gt; as the image name.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v /tmp:/tmp -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen-deno -r /app -o /app/bom.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In deno applications, cdxgen could be directly imported without any conversion. Please see the section on &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/#integration-as-library&#34;&gt;integration as library&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createBom, submitBom } from &#34;npm:@cyclonedx/cdxgen@^9.0.1&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Help&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;$ cdxgen -h&#xA;Options:&#xA;  -o, --output                 Output file for bom.xml or bom.json. Default bom.&#xA;                               json&#xA;  -t, --type                   Project type&#xA;  -r, --recurse                Recurse mode suitable for mono-repos. Defaults to&#xA;                                true. Pass --no-recurse to disable.&#xA;                                                       [boolean] [default: true]&#xA;  -p, --print                  Print the SBoM as a table with tree. Defaults to&#xA;                               true if output file is not specified with -o&#xA;                                                                       [boolean]&#xA;  -c, --resolve-class          Resolve class names for packages. jars only for n&#xA;                               ow.                                     [boolean]&#xA;      --deep                   Perform deep searches for components. Useful whil&#xA;                               e scanning live OS and oci images.      [boolean]&#xA;      --server-url             Dependency track url. Eg: https://deptrack.cyclon&#xA;                               edx.io&#xA;      --api-key                Dependency track api key&#xA;      --project-group          Dependency track project group&#xA;      --project-name           Dependency track project name. Default use the di&#xA;                               rectory name&#xA;      --project-version        Dependency track project version    [default: &#34;&#34;]&#xA;      --project-id             Dependency track project id. Either provide the i&#xA;                               d or the project name and version together&#xA;      --required-only          Include only the packages with required scope on&#xA;                               the SBoM.                               [boolean]&#xA;      --fail-on-error          Fail if any dependency extractor fails. [boolean]&#xA;      --no-babel               Do not use babel to perform usage analysis for Ja&#xA;                               vaScript/TypeScript projects.           [boolean]&#xA;      --generate-key-and-sign  Generate an RSA public/private key pair and then&#xA;                               sign the generated SBoM using JSON Web Signatures&#xA;                               .                                       [boolean]&#xA;      --server                 Run cdxgen as a server                  [boolean]&#xA;      --server-host            Listen address             [default: &#34;127.0.0.1&#34;]&#xA;      --server-port            Listen port                     [default: &#34;9090&#34;]&#xA;      --install-deps           Install dependencies automatically for some proje&#xA;                               cts. Defaults to true but disabled for containers&#xA;                                and oci scans. Use --no-install-deps to disable&#xA;                               this feature.           [boolean] [default: true]&#xA;      --validate               Validate the generated SBoM using json schema. De&#xA;                               faults to true. Pass --no-validate to disable.&#xA;                                                       [boolean] [default: true]&#xA;      --spec-version           CycloneDX Specification version to use. Defaults&#xA;                               to 1.5                             [default: 1.5]&#xA;      --version                Show version number                     [boolean]&#xA;  -h                           Show help                               [boolean]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All boolean arguments accepts &lt;code&gt;--no&lt;/code&gt; prefix to toggle the behavior.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Minimal example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen -o bom.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a java project. This would automatically detect maven, gradle or sbt and build bom accordingly&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen -t java -o bom.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To print the SBoM as a table pass &lt;code&gt;-p&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen -t java -o bom.json -p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To recursively generate a single BoM for all languages pass &lt;code&gt;-r&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen -r -o bom.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate SBoM for an older specification version such as 1.4, pass the version using the &lt;code&gt;--spec-version&lt;/code&gt; argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen -r -o bom.json --spec-version 1.4&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Universal SBoM&lt;/h2&gt; &#xA;&lt;p&gt;By passing the type &lt;code&gt;-t universal&lt;/code&gt;, cdxgen could be forced to opportunistically collect as many components and services as possible by scanning all package, container and kubernetes manifests. The resulting SBoM could have over thousand components thus requiring additional triaging before use with traditional SCA tools.&lt;/p&gt; &#xA;&lt;h2&gt;SBoM server&lt;/h2&gt; &#xA;&lt;p&gt;Invoke cdxgen with &lt;code&gt;--server&lt;/code&gt; argument to run it in a server mode. By default, it listens to port &lt;code&gt;9090&lt;/code&gt; which can be customized with the arguments &lt;code&gt;--server-host&lt;/code&gt; and &lt;code&gt;--server-port&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen --server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use the container image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -v /tmp:/tmp -p 9090:9090 -v $(pwd):/app:rw -t ghcr.io/cyclonedx/cdxgen -r /app --server --server-host 0.0.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use curl or your favourite tool to pass arguments to the &lt;code&gt;/sbom&lt;/code&gt; route.&lt;/p&gt; &#xA;&lt;h3&gt;Scanning a local path&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl &#34;http://127.0.0.1:9090/sbom?path=/Volumes/Work/sandbox/vulnerable-aws-koa-app&amp;amp;multiProject=true&amp;amp;type=js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Scanning a git repo&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;curl &#34;http://127.0.0.1:9090/sbom?url=https://github.com/HooliCorp/vulnerable-aws-koa-app.git&amp;amp;multiProject=true&amp;amp;type=js&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can POST the arguments.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -H &#34;Content-Type: application/json&#34; http://localhost:9090/sbom -XPOST -d $&#39;{&#34;url&#34;: &#34;https://github.com/HooliCorp/vulnerable-aws-koa-app.git&#34;, &#34;type&#34;: &#34;nodejs&#34;, &#34;multiProject&#34;: &#34;true&#34;}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker compose&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;git clone https://github.com/cyclonedx/cdxgen.git&#xA;docker compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;War file support&lt;/h2&gt; &#xA;&lt;p&gt;cdxgen can generate a BoM file from a given war file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;# cdxgen -t java app.war&#xA;cdxgen app.war&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Resolving class names&lt;/h2&gt; &#xA;&lt;p&gt;Sometimes it is necessary to resolve class names contained in jar files. By passing an optional argument &lt;code&gt;--resolve-class&lt;/code&gt;, it is possible to get cdxgen create a separate mapping file with the jar name (including the version) as the key and class names list as a value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen -t java --resolve-class -o bom.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would create a bom.json.map file with the jar - class name mapping. Refer to &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/test/data/bom-maven.json.map&#34;&gt;these&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/test/data/bom-gradle.json.map&#34;&gt;examples&lt;/a&gt; to learn about the structure.&lt;/p&gt; &#xA;&lt;h2&gt;Resolving licenses&lt;/h2&gt; &#xA;&lt;p&gt;cdxgen can automatically query the public registries such as maven or npm or nuget to resolve the package licenses. This is a time consuming operation and is disabled by default. To enable, set the environment variable &lt;code&gt;FETCH_LICENSE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; as shown.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;export FETCH_LICENSE=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Dependency Tree&lt;/h2&gt; &#xA;&lt;p&gt;cdxgen can retain the dependency tree under the &lt;code&gt;dependencies&lt;/code&gt; attribute for a small number of supported package manifests. These are currently limited to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;package-lock.json&lt;/li&gt; &#xA; &lt;li&gt;yarn.lock&lt;/li&gt; &#xA; &lt;li&gt;pnpm-lock.yaml&lt;/li&gt; &#xA; &lt;li&gt;Maven (pom.xml)&lt;/li&gt; &#xA; &lt;li&gt;Gradle&lt;/li&gt; &#xA; &lt;li&gt;Scala SBT&lt;/li&gt; &#xA; &lt;li&gt;Python (requirements.txt, setup.py, pyproject.toml, poetry.lock)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Environment variables&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CDXGEN_DEBUG_MODE&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;debug&lt;/code&gt; to enable debug messages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GITHUB_TOKEN&lt;/td&gt; &#xA;   &lt;td&gt;Specify GitHub token to prevent traffic shaping while querying license and repo information&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MVN_CMD&lt;/td&gt; &#xA;   &lt;td&gt;Set to override maven command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MVN_ARGS&lt;/td&gt; &#xA;   &lt;td&gt;Set to pass additional arguments such as profile or settings to maven&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MAVEN_HOME&lt;/td&gt; &#xA;   &lt;td&gt;Specify maven home&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_CACHE_DIR&lt;/td&gt; &#xA;   &lt;td&gt;Specify gradle cache directory. Useful for class name resolving&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_MULTI_PROJECT_MODE&lt;/td&gt; &#xA;   &lt;td&gt;Unused. Automatically handled&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_ARGS&lt;/td&gt; &#xA;   &lt;td&gt;Set to pass additional arguments such as profile or settings to gradle (all tasks). Eg: --configuration runtimeClassPath&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_ARGS_PROPERTIES&lt;/td&gt; &#xA;   &lt;td&gt;Set to pass additional arguments only to the &lt;code&gt;gradle properties&lt;/code&gt; task, used for collecting metadata about the project&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_ARGS_DEPENDENCIES&lt;/td&gt; &#xA;   &lt;td&gt;Set to pass additional arguments only to the &lt;code&gt;gradle dependencies&lt;/code&gt; task, used for listing actual project dependencies&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_HOME&lt;/td&gt; &#xA;   &lt;td&gt;Specify gradle home&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_CMD&lt;/td&gt; &#xA;   &lt;td&gt;Set to override gradle command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GRADLE_DEPENDENCY_TASK&lt;/td&gt; &#xA;   &lt;td&gt;By default cdxgen use the task &#34;dependencies&#34; to collect packages. Set to override the task name.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SBT_CACHE_DIR&lt;/td&gt; &#xA;   &lt;td&gt;Specify sbt cache directory. Useful for class name resolving&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;FETCH_LICENSE&lt;/td&gt; &#xA;   &lt;td&gt;Set this variable to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; to fetch license information from the registry. npm and golang&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;USE_GOSUM&lt;/td&gt; &#xA;   &lt;td&gt;Set to &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;1&lt;/code&gt; to generate BOMs for golang projects using go.sum as the dependency source of truth, instead of go.mod&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CDXGEN_TIMEOUT_MS&lt;/td&gt; &#xA;   &lt;td&gt;Default timeout for known execution involving maven, gradle or sbt&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CDXGEN_SERVER_TIMEOUT_MS&lt;/td&gt; &#xA;   &lt;td&gt;Default timeout in server mode&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BAZEL_TARGET&lt;/td&gt; &#xA;   &lt;td&gt;Bazel target to build. Default :all (Eg: //java-maven)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CLJ_CMD&lt;/td&gt; &#xA;   &lt;td&gt;Set to override the clojure cli command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LEIN_CMD&lt;/td&gt; &#xA;   &lt;td&gt;Set to override the leiningen command&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SBOM_SIGN_ALGORITHM&lt;/td&gt; &#xA;   &lt;td&gt;Signature algorithm. Some valid values are RS256, RS384, RS512, PS256, PS384, PS512, ES256 etc&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SBOM_SIGN_PRIVATE_KEY&lt;/td&gt; &#xA;   &lt;td&gt;Private key to use for signing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SBOM_SIGN_PUBLIC_KEY&lt;/td&gt; &#xA;   &lt;td&gt;Optional. Public key to include in the SBoM signature&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CDX_MAVEN_PLUGIN&lt;/td&gt; &#xA;   &lt;td&gt;CycloneDX Maven plugin to use. Default &#34;org.cyclonedx:cyclonedx-maven-plugin:2.7.8&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CDX_MAVEN_GOAL&lt;/td&gt; &#xA;   &lt;td&gt;CycloneDX Maven plugin goal to use. Default makeAggregateBom. Other options: makeBom, makePackageBom&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CDX_MAVEN_INCLUDE_TEST_SCOPE&lt;/td&gt; &#xA;   &lt;td&gt;Whether test scoped dependencies should be included from Maven projects, Default: true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ASTGEN_IGNORE_DIRS&lt;/td&gt; &#xA;   &lt;td&gt;Comma separated list of directories to ignore while analyzing using babel. The environment variable is also used by atom and astgen.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;ASTGEN_IGNORE_FILE_PATTERN&lt;/td&gt; &#xA;   &lt;td&gt;Ignore regex to use&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Plugins&lt;/h2&gt; &#xA;&lt;p&gt;cdxgen could be extended with external binary plugins to support more SBoM use cases. These are now installed as an optional dependency.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;sudo npm install -g @cyclonedx/cdxgen-plugins-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Docker / OCI container support&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;docker&lt;/code&gt; type is automatically detected based on the presence of values such as &lt;code&gt;sha256&lt;/code&gt; or &lt;code&gt;docker.io&lt;/code&gt; prefix etc in the path.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen odoo@sha256:4e1e147f0e6714e8f8c5806d2b484075b4076ca50490577cdf9162566086d15e -o /tmp/bom.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass &lt;code&gt;-t docker&lt;/code&gt; for simple labels. Only the &lt;code&gt;latest&lt;/code&gt; tag would be pulled if none was specified.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen shiftleft/scan-slim -o /tmp/bom.json -t docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass the .tar file of a container image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;docker pull shiftleft/scan-slim&#xA;docker save -o /tmp/slim.tar shiftleft/scan-slim&#xA;podman save -q --format oci-archive -o /tmp/slim.tar shiftleft/scan-slim&#xA;cdxgen /tmp/slim.tar -o /tmp/bom.json -t docker&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only application related packages are collected by cdxgen. Support for OS installed packages is coming soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Podman in rootless mode&lt;/h3&gt; &#xA;&lt;p&gt;Setup podman in either &lt;a href=&#34;https://github.com/containers/podman/raw/master/docs/tutorials/rootless_tutorial.md&#34;&gt;rootless&lt;/a&gt; or &lt;a href=&#34;https://github.com/containers/podman/raw/master/docs/tutorials/mac_win_client.md&#34;&gt;remote&lt;/a&gt; mode&lt;/p&gt; &#xA;&lt;p&gt;On Linux, do not forget to start the podman socket which is required for API access.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;systemctl --user enable --now podman.socket&#xA;systemctl --user start podman.socket&#xA;podman system service -t 0 &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate SBoM for a live system&lt;/h3&gt; &#xA;&lt;p&gt;You can use cdxgen to generate SBoM for a live system or a VM for compliance and vulnerability management purposes by passing the argument &lt;code&gt;-t os&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cdxgen -t os&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This feature is powered by osquery which is &lt;a href=&#34;https://github.com/cyclonedx/cdxgen-plugins-bin/raw/main/build.sh#L8&#34;&gt;installed&lt;/a&gt; along with the binary plugins. cdxgen would opportunistically try to detect as many components, apps and extensions as possible using the &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/queries.json&#34;&gt;default queries&lt;/a&gt;. The process would take several minutes and result in an SBoM file with thousands of components.&lt;/p&gt; &#xA;&lt;h2&gt;Generating SaaSBoM and component evidences&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/ADVANCED.md&#34;&gt;evinse mode&lt;/a&gt; in the advanced documentation.&lt;/p&gt; &#xA;&lt;h2&gt;SBoM signing&lt;/h2&gt; &#xA;&lt;p&gt;cdxgen can sign the generated SBoM json file to increase authenticity and non-repudiation capabilities. To enable this, set the following environment variables.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SBOM_SIGN_ALGORITHM: Algorithm. Example: RS512&lt;/li&gt; &#xA; &lt;li&gt;SBOM_SIGN_PRIVATE_KEY: Location to the RSA private key&lt;/li&gt; &#xA; &lt;li&gt;SBOM_SIGN_PUBLIC_KEY: Optional. Location to the RSA public key&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To generate test public/private key pairs, you can run cdxgen by passing the argument &lt;code&gt;--generate-key-and-sign&lt;/code&gt;. The generated json file would have an attribute called &lt;code&gt;signature&lt;/code&gt; which could be used for validation. &lt;a href=&#34;https://jwt.io&#34;&gt;jwt.io&lt;/a&gt; is a known site that could be used for such signature validation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/sbom-sign.jpg&#34; alt=&#34;SBoM signing&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Verifying the signature&lt;/h3&gt; &#xA;&lt;p&gt;Use the bundled &lt;code&gt;cdx-verify&lt;/code&gt; command which supports verifying a single signature added at the bom level.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install -g @cyclonedx/cdxgen&#xA;cdx-verify -i bom.json --public-key public.key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom verification tool (Node.js example)&lt;/h3&gt; &#xA;&lt;p&gt;There are many &lt;a href=&#34;https://jwt.io/#libraries-io&#34;&gt;libraries&lt;/a&gt; available to validate JSON Web Tokens. Below is a javascript example.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;# npm install jws&#xA;const jws = require(&#34;jws&#34;);&#xA;const fs = require(&#34;fs&#34;);&#xA;// Location of the SBoM json file&#xA;const bomJsonFile = &#34;bom.json&#34;;&#xA;// Location of the public key&#xA;const publicKeyFile = &#34;public.key&#34;;&#xA;const bomJson = JSON.parse(fs.readFileSync(bomJsonFile, &#34;utf8&#34;));&#xA;// Retrieve the signature&#xA;const bomSignature = bomJson.signature.value;&#xA;const validationResult = jws.verify(bomSignature, bomJson.signature.algorithm, fs.readFileSync(publicKeyFile, &#34;utf8&#34;));&#xA;if (validationResult) {&#xA;  console.log(&#34;Signature is valid!&#34;);&#xA;} else {&#xA;  console.log(&#34;SBoM signature is invalid :(&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Automatic services detection&lt;/h2&gt; &#xA;&lt;p&gt;cdxgen can automatically detect names of services from YAML manifests such as docker-compose or Kubernetes or Skaffold manifests. These would be populated under the &lt;code&gt;services&lt;/code&gt; attribute in the generated SBoM. With &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/ADVANCED.md&#34;&gt;evinse&lt;/a&gt;, additional services could be detected by parsing common annotations from the source code.&lt;/p&gt; &#xA;&lt;h2&gt;Conversion to SPDX format&lt;/h2&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/CycloneDX/cyclonedx-cli&#34;&gt;CycloneDX CLI&lt;/a&gt; tool for advanced use cases such as conversion, diff and merging.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Permission to modify and redistribute is granted under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for the full license.&lt;/p&gt; &#xA;&lt;h2&gt;Integration as library&lt;/h2&gt; &#xA;&lt;p&gt;cdxgen is &lt;a href=&#34;https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c&#34;&gt;ESM only&lt;/a&gt; and could be imported and used with both deno and Node.js &amp;gt;= 16&lt;/p&gt; &#xA;&lt;p&gt;Minimal example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { createBom, submitBom } from &#34;npm:@cyclonedx/cdxgen@^9.0.1&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/contrib/deno/README.md&#34;&gt;Deno Readme&lt;/a&gt; for detailed instruction.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createBom, submitBom } from &#34;@cyclonedx/cdxgen&#34;;&#xA;// bomNSData would contain bomJson, bomXml&#xA;const bomNSData = await createBom(filePath, options);&#xA;// Submission to dependency track server&#xA;const dbody = await submitBom(args, bomNSData.bomJson);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Node.js &amp;gt;= 20 permission model&lt;/h2&gt; &#xA;&lt;p&gt;Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/CycloneDX/cdxgen/master/docs/PERMISSIONS.md&#34;&gt;permissions document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Follow the usual PR process but prior to raising a PR run the following commands.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run lint&#xA;npm run pretty&#xA;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Enterprise support&lt;/h2&gt; &#xA;&lt;p&gt;Enterprise support including custom development and integration services are available via AppThreat Ltd. Free community support is also available via &lt;a href=&#34;https://discord.gg/tmmtjCEHNV&#34;&gt;discord&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>