<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-14T01:35:53Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>apsdehal/awesome-ctf</title>
    <updated>2022-09-14T01:35:53Z</updated>
    <id>tag:github.com,2022-09-14:/apsdehal/awesome-ctf</id>
    <link href="https://github.com/apsdehal/awesome-ctf" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A curated list of CTF frameworks, libraries, resources and softwares&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Awesome CTF &lt;a href=&#34;https://travis-ci.org/apsdehal/awesome-ctf&#34;&gt;&lt;img src=&#34;https://travis-ci.org/apsdehal/awesome-ctf.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sindresorhus/awesome&#34;&gt;&lt;img src=&#34;https://cdn.rawgit.com/sindresorhus/awesome/d7305f38d29fed78fa85652e3a63e154dd8e8829/media/badge.svg?sanitize=true&#34; alt=&#34;Awesome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A curated list of &lt;a href=&#34;https://en.wikipedia.org/wiki/Capture_the_flag#Computer_security&#34;&gt;Capture The Flag&lt;/a&gt; (CTF) frameworks, libraries, resources, softwares and tutorials. This list aims to help starters as well as seasoned CTF players to find everything related to CTFs at one place.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing&lt;/h3&gt; &#xA;&lt;p&gt;Please take a quick look at the &lt;a href=&#34;https://github.com/apsdehal/ctf-tools/raw/master/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; first.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;em&gt;If you know a tool that isn&#39;t present here, feel free to open a pull request.&lt;/em&gt;&lt;/h4&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;It takes time to build up collection of tools used in CTF and remember them all. This repo helps to keep all these scattered tools at one place.&lt;/p&gt; &#xA;&lt;h3&gt;Contents&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#awesome-ctf&#34;&gt;Awesome CTF&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#create&#34;&gt;Create&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#forensics&#34;&gt;Forensics&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#platforms&#34;&gt;Platforms&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#steganography&#34;&gt;Steganography&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#web&#34;&gt;Web&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#solve&#34;&gt;Solve&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#attacks&#34;&gt;Attacks&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#bruteforcers&#34;&gt;Bruteforcers&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#crypto&#34;&gt;Cryptography&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#exploits&#34;&gt;Exploits&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#forensics-1&#34;&gt;Forensics&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#networking&#34;&gt;Networking&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#reversing&#34;&gt;Reversing&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#services&#34;&gt;Services&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#steganography-1&#34;&gt;Steganography&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#web-1&#34;&gt;Web&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#resources&#34;&gt;Resources&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#operating-systems&#34;&gt;Operating Systems&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#starter-packs&#34;&gt;Starter Packs&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#wargames&#34;&gt;Wargames&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#websites&#34;&gt;Websites&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#wikis&#34;&gt;Wikis&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/apsdehal/awesome-ctf/master/#writeups-collections&#34;&gt;Writeups Collections&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Create&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for creating CTF challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.packtpub.com/eu/networking-and-servers/kali-linux-ctf-blueprints&#34;&gt;Kali Linux CTF Blueprints&lt;/a&gt; - Online book on building, testing, and customizing your own Capture the Flag challenges.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forensics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for creating Forensics challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iagox86/dnscat2&#34;&gt;Dnscat2&lt;/a&gt; - Hosts communication through DNS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://learn.duffandphelps.com/kape&#34;&gt;Kroll Artifact Parser and Extractor (KAPE)&lt;/a&gt; - Triage program.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.magnetforensics.com/downloadaxiom&#34;&gt;Magnet AXIOM&lt;/a&gt; - Artifact-centric DFIR tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.kahusecurity.com/posts/registry_dumper_find_and_dump_hidden_registry_keys.html&#34;&gt;Registry Dumper&lt;/a&gt; - Dump your registry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Platforms&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Projects that can be used to host a CTF&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isislab/CTFd&#34;&gt;CTFd&lt;/a&gt; - Platform to host jeopardy style CTFs from ISISLab, NYU Tandon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/echoCTF/echoCTF.RED&#34;&gt;echoCTF.RED&lt;/a&gt; - Develop, deploy and maintain your own CTF infrastructure.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/facebook/fbctf&#34;&gt;FBCTF&lt;/a&gt; - Platform to host Capture the Flag competitions from Facebook.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aau-network-security/haaukins&#34;&gt;Haaukins&lt;/a&gt;- A Highly Accessible and Automated Virtualization Platform for Security Education.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcpa-stlouis/hack-the-arch&#34;&gt;HackTheArch&lt;/a&gt; - CTF scoring platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nakiami/mellivora&#34;&gt;Mellivora&lt;/a&gt; - A CTF engine written in PHP.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreafioraldi/motherfucking-ctf&#34;&gt;MotherFucking-CTF&lt;/a&gt; - Badass lightweight plaform to host CTFs. No JS involved.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/UnrealAkama/NightShade&#34;&gt;NightShade&lt;/a&gt; - A simple security CTF framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/easyctf/openctf&#34;&gt;OpenCTF&lt;/a&gt; - CTF in a box. Minimal setup required.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/picoCTF/picoCTF&#34;&gt;PicoCTF&lt;/a&gt; - The platform used to run picoCTF. A great framework to host any CTF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pdautry/py_chall_factory&#34;&gt;PyChallFactory&lt;/a&gt; - Small framework to create/manage/package jeopardy CTF challenges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moloch--/RootTheBox&#34;&gt;RootTheBox&lt;/a&gt; - A Game of Hackers (CTF Scoreboard &amp;amp; Game Manager).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/legitbs/scorebot&#34;&gt;Scorebot&lt;/a&gt; - Platform for CTFs by Legitbs (Defcon).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cliffe/SecGen&#34;&gt;SecGen&lt;/a&gt; - Security Scenario Generator. Creates randomly vulnerable virtual machines.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Steganography&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used to create stego challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Check solve section for steganography.&lt;/p&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for creating Web challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;JavaScript Obfustcators&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rapid7/metasploit-framework/wiki/How-to-obfuscate-JavaScript-in-Metasploit&#34;&gt;Metasploit JavaScript Obfuscator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mishoo/UglifyJS&#34;&gt;Uglify&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Solve&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving CTF challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Attacks&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for performing various kinds of attacks&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bettercap/bettercap&#34;&gt;Bettercap&lt;/a&gt; - Framework to perform MITM (Man in the Middle) attacks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tomac/yersinia&#34;&gt;Yersinia&lt;/a&gt; - Attack various protocols on layer 2.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Crypto&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving Crypto challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gchq.github.io/CyberChef&#34;&gt;CyberChef&lt;/a&gt; - Web app for analysing and decoding data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nccgroup/featherduster&#34;&gt;FeatherDuster&lt;/a&gt; - An automated, modular cryptanalysis tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/iagox86/hash_extender&#34;&gt;Hash Extender&lt;/a&gt; - A utility tool for performing hash length extension attacks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/KishanBagaria/padding-oracle-attacker&#34;&gt;padding-oracle-attacker&lt;/a&gt; - A CLI tool to execute padding oracle attacks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unix-ag.uni-kl.de/~conrad/krypto/pkcrack.html&#34;&gt;PkCrack&lt;/a&gt; - A tool for Breaking PkZip-encryption.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://quipqiup.com&#34;&gt;QuipQuip&lt;/a&gt; - An online tool for breaking substitution ciphers or vigenere ciphers (without key).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ganapati/RsaCtfTool&#34;&gt;RSACTFTool&lt;/a&gt; - A tool for recovering RSA private key with various attack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ius/rsatool&#34;&gt;RSATool&lt;/a&gt; - Generate private key with knowledge of p and q.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hellman/xortool&#34;&gt;XORTool&lt;/a&gt; - A tool to analyze multi-byte xor cipher.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Bruteforcers&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for various kind of bruteforcing (passwords etc.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hashcat.net/hashcat/&#34;&gt;Hashcat&lt;/a&gt; - Password Cracker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://tools.kali.org/password-attacks/hydra&#34;&gt;Hydra&lt;/a&gt; - A parallelized login cracker which supports numerous protocols to attack&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/magnumripper/JohnTheRipper&#34;&gt;John The Jumbo&lt;/a&gt; - Community enhanced version of John the Ripper.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.openwall.com/john/&#34;&gt;John The Ripper&lt;/a&gt; - Password Cracker.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intrd/nozzlr&#34;&gt;Nozzlr&lt;/a&gt; - Nozzlr is a bruteforce framework, trully modular and script-friendly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ophcrack.sourceforge.net/&#34;&gt;Ophcrack&lt;/a&gt; - Windows password cracker based on rainbow tables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lanjelot/patator&#34;&gt;Patator&lt;/a&gt; - Patator is a multi-purpose brute-forcer, with a modular design.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portswigger.net/research/turbo-intruder-embracing-the-billion-request-attack&#34;&gt;Turbo Intruder&lt;/a&gt; - Burp Suite extension for sending large numbers of HTTP requests&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Exploits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving Exploits challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenSecurityResearch/dllinjector&#34;&gt;DLLInjector&lt;/a&gt; - Inject dlls in processes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hellman/libformatstr&#34;&gt;libformatstr&lt;/a&gt; - Simplify format string exploitation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.metasploit.com/&#34;&gt;Metasploit&lt;/a&gt; - Penetration testing software. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.comparitech.com/net-admin/metasploit-cheat-sheet/&#34;&gt;Cheatsheet&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/david942j/one_gadget&#34;&gt;one_gadget&lt;/a&gt; - A tool to find the one gadget &lt;code&gt;execve(&#39;/bin/sh&#39;, NULL, NULL)&lt;/code&gt; call. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;gem install one_gadget&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gallopsled/pwntools&#34;&gt;Pwntools&lt;/a&gt; - CTF Framework for writing exploits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BinaryAnalysisPlatform/qira&#34;&gt;Qira&lt;/a&gt; - QEMU Interactive Runtime Analyser.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JonathanSalwan/ROPgadget&#34;&gt;ROP Gadget&lt;/a&gt; - Framework for ROP exploitation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/P1kachu/v0lt&#34;&gt;V0lt&lt;/a&gt; - Security CTF Toolkit.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forensics&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving Forensics challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.aircrack-ng.org/&#34;&gt;Aircrack-Ng&lt;/a&gt; - Crack 802.11 WEP and WPA-PSK keys. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt-get install aircrack-ng&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/audacity/&#34;&gt;Audacity&lt;/a&gt; - Analyze sound files (mp3, m4a, whatever). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt-get install audacity&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://sourceforge.net/projects/ophcrack/files/samdump2/&#34;&gt;Bkhive and Samdump2&lt;/a&gt; - Dump SYSTEM and SAM files. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt-get install samdump2 bkhive&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.ntcore.com/exsuite.php&#34;&gt;CFF Explorer&lt;/a&gt; - PE Editor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/moyix/creddump&#34;&gt;Creddump&lt;/a&gt; - Dump windows credentials.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kost/dvcs-ripper&#34;&gt;DVCS Ripper&lt;/a&gt; - Rips web accessible (distributed) version control systems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.sno.phy.queensu.ca/~phil/exiftool/&#34;&gt;Exif Tool&lt;/a&gt; - Read, write and edit file metadata.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://extundelete.sourceforge.net/&#34;&gt;Extundelete&lt;/a&gt; - Used for recovering lost data from mountable images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rabbitstack/fibratus&#34;&gt;Fibratus&lt;/a&gt; - Tool for exploration and tracing of the Windows kernel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://foremost.sourceforge.net/&#34;&gt;Foremost&lt;/a&gt; - Extract particular kind of files using headers. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt-get install foremost&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://linux.die.net/man/8/fsck.ext3&#34;&gt;Fsck.ext4&lt;/a&gt; - Used to fix corrupt filesystems.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://malzilla.sourceforge.net/&#34;&gt;Malzilla&lt;/a&gt; - Malware hunting tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.netresec.com/?page=NetworkMiner&#34;&gt;NetworkMiner&lt;/a&gt; - Network Forensic Analysis Tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://malzilla.sourceforge.net/downloads.html&#34;&gt;PDF Streams Inflater&lt;/a&gt; - Find and extract zlib files compressed in PDF files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.libpng.org/pub/png/apps/pngcheck.html&#34;&gt;Pngcheck&lt;/a&gt; - Verifies the integrity of PNG and dump all of the chunk-level information in human-readable form. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt-get install pngcheck&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.nirsoft.net/utils/resources_extract.html&#34;&gt;ResourcesExtract&lt;/a&gt; - Extract various filetypes from exes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williballenthin/shellbags&#34;&gt;Shellbags&lt;/a&gt; - Investigate NT_USER.dat files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sbmlabs.com/notes/snow_whitespace_steganography_tool&#34;&gt;Snow&lt;/a&gt; - A Whitespace Steganography Tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/snovvcrash/usbrip&#34;&gt;USBRip&lt;/a&gt; - Simple CLI forensics tool for tracking USB device artifacts (history of USB events) on GNU/Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/volatilityfoundation/volatility&#34;&gt;Volatility&lt;/a&gt; - To investigate memory dumps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wireshark.org&#34;&gt;Wireshark&lt;/a&gt; - Used to analyze pcap or pcapng files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Registry Viewers&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.nirsoft.net/utils/offline_registry_view.html&#34;&gt;OfflineRegistryView&lt;/a&gt; - Simple tool for Windows that allows you to read offline Registry files from external drive and view the desired Registry key in .reg file format.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://accessdata.com/product-download/registry-viewer-2-0-0&#34;&gt;Registry Viewer®&lt;/a&gt; - Used to view Windows registries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Networking&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving Networking challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robertdavidgraham/masscan&#34;&gt;Masscan&lt;/a&gt; - Mass IP port scanner, TCP port scanner.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linoxide.com/monitoring-2/monit-linux/&#34;&gt;Monit&lt;/a&gt; - A linux tool to check a host on the network (and other non-network activities).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GouveaHeitor/nipe&#34;&gt;Nipe&lt;/a&gt; - Nipe is a script to make Tor Network your default gateway.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nmap.org/&#34;&gt;Nmap&lt;/a&gt; - An open source utility for network discovery and security auditing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.wireshark.org/&#34;&gt;Wireshark&lt;/a&gt; - Analyze the network dumps. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt-get install wireshark&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zeek.org&#34;&gt;Zeek&lt;/a&gt; - An open-source network security monitor.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zmap.io/&#34;&gt;Zmap&lt;/a&gt; - An open-source network scanner.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reversing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving Reversing challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/androguard/androguard&#34;&gt;Androguard&lt;/a&gt; - Reverse engineer Android applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/angr/angr&#34;&gt;Angr&lt;/a&gt; - platform-agnostic binary analysis framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lxdvs/apk2gold&#34;&gt;Apk2Gold&lt;/a&gt; - Yet another Android decompiler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ibotpeaches.github.io/Apktool/&#34;&gt;ApkTool&lt;/a&gt; - Android Decompiler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/programa-stic/barf-project&#34;&gt;Barf&lt;/a&gt; - Binary Analysis and Reverse engineering Framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://binary.ninja/&#34;&gt;Binary Ninja&lt;/a&gt; - Binary analysis framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gnu.org/software/binutils/binutils.html&#34;&gt;BinUtils&lt;/a&gt; - Collection of binary tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/devttys0/binwalk&#34;&gt;BinWalk&lt;/a&gt; - Analyze, reverse engineer, and extract firmware images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/BoomerangDecompiler/boomerang&#34;&gt;Boomerang&lt;/a&gt; - Decompile x86/SPARC/PowerPC/ST-20 binaries to C.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/docileninja/ctf_import&#34;&gt;ctf_import&lt;/a&gt; – run basic functions from stripped binaries cross platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fkie-cad/cwe_checker&#34;&gt;cwe_checker&lt;/a&gt; - cwe_checker finds vulnerable patterns in binary executables.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kirschju/demovfuscator&#34;&gt;demovfuscator&lt;/a&gt; - A work-in-progress deobfuscator for movfuscated binaries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/frida/&#34;&gt;Frida&lt;/a&gt; - Dynamic Code Injection.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gnu.org/software/gdb/&#34;&gt;GDB&lt;/a&gt; - The GNU project debugger.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hugsy/gef&#34;&gt;GEF&lt;/a&gt; - GDB plugin.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ghidra-sre.org/&#34;&gt;Ghidra&lt;/a&gt; - Open Source suite of reverse engineering tools. Similar to IDA Pro.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.hopperapp.com/&#34;&gt;Hopper&lt;/a&gt; - Reverse engineering tool (disassembler) for OSX and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hex-rays.com/products/ida/&#34;&gt;IDA Pro&lt;/a&gt; - Most used Reversing software.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/skylot/jadx&#34;&gt;Jadx&lt;/a&gt; - Decompile Android files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.javadecompilers.com&#34;&gt;Java Decompilers&lt;/a&gt; - An online decompiler for Java and Android APKs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Storyyeller/Krakatau&#34;&gt;Krakatau&lt;/a&gt; - Java decompiler and disassembler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sensepost/objection&#34;&gt;Objection&lt;/a&gt; - Runtime Mobile Exploration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/longld/peda&#34;&gt;PEDA&lt;/a&gt; - GDB plugin (only python2.7).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://software.intel.com/en-us/articles/pin-a-dynamic-binary-instrumentation-tool&#34;&gt;Pin&lt;/a&gt; - A dynamic binary instrumentaion tool by Intel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/korcankaraokcu/PINCE&#34;&gt;PINCE&lt;/a&gt; - GDB front-end/reverse engineering tool, focused on game-hacking and automation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChrisTheCoolHut/PinCTF&#34;&gt;PinCTF&lt;/a&gt; - A tool which uses intel pin for Side Channel Analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/joelpx/plasma&#34;&gt;Plasma&lt;/a&gt; - An interactive disassembler for x86/ARM/MIPS which can generate indented pseudo-code with colored syntax.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pwndbg/pwndbg&#34;&gt;Pwndbg&lt;/a&gt; - A GDB plugin that provides a suite of utilities to hack around GDB easily.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radare/radare2&#34;&gt;radare2&lt;/a&gt; - A portable reversing framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JonathanSalwan/Triton/&#34;&gt;Triton&lt;/a&gt; - Dynamic Binary Analysis (DBA) framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gstarnberger/uncompyle&#34;&gt;Uncompyle&lt;/a&gt; - Decompile Python 2.7 binaries (.pyc).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.windbg.org/&#34;&gt;WinDbg&lt;/a&gt; - Windows debugger distributed by Microsoft.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reverse.lostrealm.com/tools/xocopy.html&#34;&gt;Xocopy&lt;/a&gt; - Program that can copy executables with execute, but no read permission.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;Z3&lt;/a&gt; - A theorem prover from Microsoft Research.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;JavaScript Deobfuscators&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://relentless-coding.org/projects/jsdetox/install&#34;&gt;Detox&lt;/a&gt; - A Javascript malware analysis tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.kahusecurity.com/posts/revelo_javascript_deobfuscator.html&#34;&gt;Revelo&lt;/a&gt; - Analyze obfuscated Javascript code.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;SWF Analyzers&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CyberShadow/RABCDAsm&#34;&gt;RABCDAsm&lt;/a&gt; - Collection of utilities including an ActionScript 3 assembler/disassembler.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.swftools.org/&#34;&gt;Swftools&lt;/a&gt; - Collection of utilities to work with SWF files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bitbucket.org/Alexander_Hanel/xxxswf&#34;&gt;Xxxswf&lt;/a&gt; - A Python script for analyzing Flash files.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Services&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Various kind of useful services available around the internet&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://cow.cat/cswsh.html&#34;&gt;CSWSH&lt;/a&gt; - Cross-Site WebSocket Hijacking Tester.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://requestbin.com/&#34;&gt;Request Bin&lt;/a&gt; - Lets you inspect http requests to a particular url.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Steganography&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving Steganography challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://aperisolve.fr/&#34;&gt;AperiSolve&lt;/a&gt; - Aperi&#39;Solve is a platform which performs layer analysis on image (open-source).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/script/convert.php&#34;&gt;Convert&lt;/a&gt; - Convert images b/w formats and apply filters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://manpages.ubuntu.com/manpages/trusty/man1/exif.1.html&#34;&gt;Exif&lt;/a&gt; - Shows EXIF information in JPEG files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/exiftool&#34;&gt;Exiftool&lt;/a&gt; - Read and write meta information in files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.exiv2.org/manpage.html&#34;&gt;Exiv2&lt;/a&gt; - Image metadata manipulation tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sourceforge.net/projects/image-steg/&#34;&gt;Image Steganography&lt;/a&gt; - Embeds text and files in images with optional encryption. Easy-to-use UI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://incoherency.co.uk/image-steganography&#34;&gt;Image Steganography Online&lt;/a&gt; - This is a client-side Javascript tool to steganographically hide images inside the lower &#34;bits&#34; of other images&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/script/index.php&#34;&gt;ImageMagick&lt;/a&gt; - Tool for manipulating images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.freebsd.org/cgi/man.cgi?query=outguess+&amp;amp;apropos=0&amp;amp;sektion=0&amp;amp;manpath=FreeBSD+Ports+5.1-RELEASE&amp;amp;format=html&#34;&gt;Outguess&lt;/a&gt; - Universal steganographic tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://packages.debian.org/sid/pngtools&#34;&gt;Pngtools&lt;/a&gt; - For various analysis related to PNGs. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;apt-get install pngtools&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Y-Vladimir/SmartDeblur&#34;&gt;SmartDeblur&lt;/a&gt; - Used to deblur and fix defocused images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.openhub.net/p/steganabara&#34;&gt;Steganabara&lt;/a&gt; - Tool for stegano analysis written in Java.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stylesuxx.github.io/steganography/&#34;&gt;SteganographyOnline&lt;/a&gt; - Online steganography encoder and decoder.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://linux.die.net/man/1/stegbreak&#34;&gt;Stegbreak&lt;/a&gt; - Launches brute-force dictionary attacks on JPG image.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Paradoxis/StegCracker&#34;&gt;StegCracker&lt;/a&gt; - Steganography brute-force utility to uncover hidden data inside files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/evyatarmeged/stegextract&#34;&gt;stegextract&lt;/a&gt; - Detect hidden files and text in images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://steghide.sourceforge.net/&#34;&gt;Steghide&lt;/a&gt; - Hide data in various kind of images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://georgeom.net/StegOnline/upload&#34;&gt;StegOnline&lt;/a&gt; - Conduct a wide range of image steganography operations, such as concealing/revealing files hidden within bits (open-source).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.caesum.com/handbook/Stegsolve.jar&#34;&gt;Stegsolve&lt;/a&gt; - Apply various steganography techniques to images.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zed-0xff/zsteg/&#34;&gt;Zsteg&lt;/a&gt; - PNG/BMP analysis.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Web&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tools used for solving Web challenges&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://portswigger.net/burp&#34;&gt;BurpSuite&lt;/a&gt; - A graphical tool to testing website security.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/commixproject/commix&#34;&gt;Commix&lt;/a&gt; - Automated All-in-One OS Command Injection and Exploitation Tool.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/hackbartool/&#34;&gt;Hackbar&lt;/a&gt; - Firefox addon for easy web exploitation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.owasp.org/index.php/Projects/OWASP_Zed_Attack_Proxy_Project&#34;&gt;OWASP ZAP&lt;/a&gt; - Intercepting proxy to replay, debug, and fuzz HTTP requests and responses&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chrome.google.com/webstore/detail/postman/fhbjgbiflinjbdggehcddcbncdddomop?hl=en&#34;&gt;Postman&lt;/a&gt; - Add on for chrome for debugging network requests.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/evyatarmeged/Raccoon&#34;&gt;Raccoon&lt;/a&gt; - A high performance offensive security tool for reconnaissance and vulnerability scanning.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sqlmapproject/sqlmap&#34;&gt;SQLMap&lt;/a&gt; - Automatic SQL injection and database takeover tool. &lt;code&gt;pip install sqlmap&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andresriancho/w3af&#34;&gt;W3af&lt;/a&gt; - Web Application Attack and Audit Framework.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://xsser.sourceforge.net/&#34;&gt;XSSer&lt;/a&gt; - Automated XSS testor.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Resources&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Where to discover about CTF&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Operating Systems&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Penetration testing and security lab Operating Systems&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://androidtamer.com/&#34;&gt;Android Tamer&lt;/a&gt; - Based on Debian.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://backbox.org/&#34;&gt;BackBox&lt;/a&gt; - Based on Ubuntu.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blackarch.org/&#34;&gt;BlackArch Linux&lt;/a&gt; - Based on Arch Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://labs.fedoraproject.org/security/&#34;&gt;Fedora Security Lab&lt;/a&gt; - Based on Fedora.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.kali.org/&#34;&gt;Kali Linux&lt;/a&gt; - Based on Debian.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.parrotsec.org/&#34;&gt;Parrot Security OS&lt;/a&gt; - Based on Debian.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.pentoo.ch/&#34;&gt;Pentoo&lt;/a&gt; - Based on Gentoo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://urix.us/&#34;&gt;URIX OS&lt;/a&gt; - Based on openSUSE.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.wifislax.com/&#34;&gt;Wifislax&lt;/a&gt; - Based on Slackware.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Malware analysts and reverse-engineering&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fireeye/flare-vm/&#34;&gt;Flare VM&lt;/a&gt; - Based on Windows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remnux.org/&#34;&gt;REMnux&lt;/a&gt; - Based on Debian.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Starter Packs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Collections of installer scripts, useful tools&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zardus/ctf-tools&#34;&gt;CTF Tools&lt;/a&gt; - Collection of setup scripts to install various security research tools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jlevitsk/lazykali&#34;&gt;LazyKali&lt;/a&gt; - A 2016 refresh of LazyKali which simplifies install of tools and configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Tutorials&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Tutorials to learn how to play CTFs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://trailofbits.github.io/ctf/&#34;&gt;CTF Field Guide&lt;/a&gt; - Field Guide by Trails of Bits.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://ctfs.github.io/resources/&#34;&gt;CTF Resources&lt;/a&gt; - Start Guide maintained by community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.endgame.com/blog/how-get-started-ctf&#34;&gt;How to Get Started in CTF&lt;/a&gt; - Short guideline for CTF beginners by Endgame&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hoppersroppers.org/courseCTF.html&#34;&gt;Intro. to CTF Course&lt;/a&gt; - A free course that teaches beginners the basics of forensics, crypto, and web-ex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UCa6eh7gCkpPo5XXUDfygQQA&#34;&gt;IppSec&lt;/a&gt; - Video tutorials and walkthroughs of popular CTF platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/channel/UClcE-kVhqyiHCcjYwcpfj9w&#34;&gt;LiveOverFlow&lt;/a&gt; - Video tutorials on Exploitation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xairy/mipt-ctf&#34;&gt;MIPT CTF&lt;/a&gt; - A small course for beginners in CTFs (in Russian).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wargames&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Always online CTFs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://backdoor.sdslabs.co/&#34;&gt;Backdoor&lt;/a&gt; - Security Platform by SDSLabs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://crackmes.one/&#34;&gt;Crackmes&lt;/a&gt; - Reverse Engineering Challenges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptohack.org/&#34;&gt;CryptoHack&lt;/a&gt; - Fun cryptography challenges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://echoctf.red/&#34;&gt;echoCTF.RED&lt;/a&gt; - Online CTF with a variety of targets to attack.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://exploit-exercises.lains.space/&#34;&gt;Exploit Exercises&lt;/a&gt; - Variety of VMs to learn variety of computer security issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://exploit.education&#34;&gt;Exploit.Education&lt;/a&gt; - Variety of VMs to learn variety of computer security issues.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Samuirai/gracker&#34;&gt;Gracker&lt;/a&gt; - Binary challenges having a slow learning curve, and write-ups for each level.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackthebox.eu&#34;&gt;Hack The Box&lt;/a&gt; - Weekly CTFs for all types of security enthusiasts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hackthissite.org/&#34;&gt;Hack This Site&lt;/a&gt; - Training ground for hackers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.hacker101.com/&#34;&gt;Hacker101&lt;/a&gt; - CTF from HackerOne&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hacking-lab.com/&#34;&gt;Hacking-Lab&lt;/a&gt; - Ethical hacking, computer network and security challenge platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://honeyourskills.ninja/&#34;&gt;Hone Your Ninja Skills&lt;/a&gt; - Web challenges starting from basic ones.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://io.netgarage.org/&#34;&gt;IO&lt;/a&gt; - Wargame for binary challenges.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://microcorruption.com&#34;&gt;Microcorruption&lt;/a&gt; - Embedded security CTF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://overthewire.org/wargames/&#34;&gt;Over The Wire&lt;/a&gt; - Wargame maintained by OvertheWire Community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pentesterlab.com/&#34;&gt;PentesterLab&lt;/a&gt; - Variety of VM and online challenges (paid).&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://2019game.picoctf.com&#34;&gt;PicoCTF&lt;/a&gt; - All year round ctf game. Questions from the yearly picoCTF competition.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pwn.eonew.cn/&#34;&gt;PWN Challenge&lt;/a&gt; - Binary Exploitation Wargame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pwnable.kr/&#34;&gt;Pwnable.kr&lt;/a&gt; - Pwn Game.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pwnable.tw/&#34;&gt;Pwnable.tw&lt;/a&gt; - Binary wargame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pwnable.xyz/&#34;&gt;Pwnable.xyz&lt;/a&gt; - Binary Exploitation Wargame.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://reversing.kr/&#34;&gt;Reversin.kr&lt;/a&gt; - Reversing challenge.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ringzer0team.com/&#34;&gt;Ringzer0Team&lt;/a&gt; - Ringzer0 Team Online CTF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.root-me.org/&#34;&gt;Root-Me&lt;/a&gt; - Hacking and Information Security learning platform.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xelenonz/game&#34;&gt;ROP Wargames&lt;/a&gt; - ROP Wargames.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://holidayhackchallenge.com/past-challenges/&#34;&gt;SANS HHC&lt;/a&gt; - Challenges with a holiday theme released annually and maintained by SANS.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://smashthestack.org/&#34;&gt;SmashTheStack&lt;/a&gt; - A variety of wargames maintained by the SmashTheStack Community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ctf.viblo.asia&#34;&gt;Viblo CTF&lt;/a&gt; - Various amazing CTF challenges, in many different categories. Has both Practice mode and Contest mode.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.vulnhub.com/&#34;&gt;VulnHub&lt;/a&gt; - VM-based for practical in digital security, computer application &amp;amp; network administration.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://w3challs.com&#34;&gt;W3Challs&lt;/a&gt; - A penetration testing training platform, which offers various computer challenges, in various categories.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://webhacking.kr&#34;&gt;WebHacking&lt;/a&gt; - Hacking challenges for web.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;Self-hosted CTFs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.dvwa.co.uk/&#34;&gt;Damn Vulnerable Web Application&lt;/a&gt; - PHP/MySQL web application that is damn vulnerable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/bkimminich/juice-shop-ctf&#34;&gt;Juice Shop CTF&lt;/a&gt; - Scripts and tools for hosting a CTF on &lt;a href=&#34;https://www.owasp.org/index.php/OWASP_Juice_Shop_Project&#34;&gt;OWASP Juice Shop&lt;/a&gt; easily.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Websites&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Various general websites about and on CTF&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uppusaikiran/awesome-ctf-cheatsheet#awesome-ctf-cheatsheet-&#34;&gt;Awesome CTF Cheatsheet&lt;/a&gt; - CTF Cheatsheet.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ctftime.org/&#34;&gt;CTF Time&lt;/a&gt; - General information on CTF occuring around the worlds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.reddit.com/r/securityctf&#34;&gt;Reddit Security CTF&lt;/a&gt; - Reddit CTF category.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Wikis&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Various Wikis available for learning about CTFs&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://bamboofox.github.io/&#34;&gt;Bamboofox&lt;/a&gt; - Chinese resources to learn CTF.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://teambi0s.gitlab.io/bi0s-wiki/&#34;&gt;bi0s Wiki&lt;/a&gt; - Wiki from team bi0s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://uppusaikiran.github.io/hacking/Capture-the-Flag-CheatSheet/&#34;&gt;CTF Cheatsheet&lt;/a&gt; - CTF tips and tricks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/isislab/Project-Ideas/wiki&#34;&gt;ISIS Lab&lt;/a&gt; - CTF Wiki by Isis lab.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/OpenToAllCTF/Tips&#34;&gt;OpenToAll&lt;/a&gt; - CTF tips by OTA CTF team members.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writeups Collections&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Collections of CTF write-ups&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/0e85dc6eaf/CTF-Writeups&#34;&gt;0e85dc6eaf&lt;/a&gt; - Write-ups for CTF challenges by 0e85dc6eaf&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://captf.com/&#34;&gt;Captf&lt;/a&gt; - Dumped CTF challenges and materials by psifertex.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ctfs/&#34;&gt;CTF write-ups (community)&lt;/a&gt; - CTF challenges + write-ups archive maintained by the community.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/abdilahrf/CTFWriteupScrapper&#34;&gt;CTFTime Scrapper&lt;/a&gt; - Scraps all writeup from CTF Time and organize which to read first.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/HackThisSite/CTF-Writeups&#34;&gt;HackThisSite&lt;/a&gt; - CTF write-ups repo maintained by HackThisSite team.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mzfr/ctf-writeups/&#34;&gt;Mzfr&lt;/a&gt; - CTF competition write-ups by mzfr&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Gallopsled/pwntools-write-ups&#34;&gt;pwntools writeups&lt;/a&gt; - A collection of CTF write-ups all using pwntools.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SababaSec/ctf-writeups&#34;&gt;SababaSec&lt;/a&gt; - A collection of CTF write-ups by the SababaSec team&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://shell-storm.org/repo/CTF/&#34;&gt;Shell Storm&lt;/a&gt; - CTF challenge archive maintained by Jonathan Salwan.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/smokeleeteveryday/CTF_WRITEUPS&#34;&gt;Smoke Leet Everyday&lt;/a&gt; - CTF write-ups repo maintained by SmokeLeetEveryday team.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LICENSE&lt;/h3&gt; &#xA;&lt;p&gt;CC0 :)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>typicode/json-server</title>
    <updated>2022-09-14T01:35:53Z</updated>
    <id>tag:github.com,2022-09-14:/typicode/json-server</id>
    <link href="https://github.com/typicode/json-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Get a full fake REST API with zero coding in less than 30 seconds (seriously)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSON Server &lt;a href=&#34;https://github.com/typicode/json-server/actions/workflows/node.js.yml&#34;&gt;&lt;img src=&#34;https://github.com/typicode/json-server/actions/workflows/node.js.yml/badge.svg?branch=master&#34; alt=&#34;Node.js CI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Get a full fake REST API with &lt;strong&gt;zero coding&lt;/strong&gt; in &lt;strong&gt;less than 30 seconds&lt;/strong&gt; (seriously)&lt;/p&gt; &#xA;&lt;p&gt;Created with &amp;lt;3 for front-end developers who need a quick back-end for prototyping and mocking.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server&#34;&gt;Egghead.io free video tutorial - Creating demo APIs with json-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://jsonplaceholder.typicode.com&#34;&gt;JSONPlaceholder - Live running version&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://my-json-server.typicode.com&#34;&gt;&lt;strong&gt;My JSON Server&lt;/strong&gt; - no installation required, use your own data&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;🐶&lt;/span&gt; &lt;a href=&#34;https://github.com/typicode/husky&#34;&gt;husky - Git hooks made easy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;🦉&lt;/span&gt; &lt;a href=&#34;https://github.com/typicode/lowdb&#34;&gt;lowdb - local JSON database&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;✅ &lt;a href=&#34;https://github.com/typicode/xv&#34;&gt;xv - a beautifully simple and capable test runner&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Gold sponsors 🥇&lt;/h2&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://tryretool.com/?utm_source=sponsor&amp;amp;utm_campaign=typicode&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://i.imgur.com/IBItATn.png&#34; height=&#34;70px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://mockend.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://jsonplaceholder.typicode.com/mockend.svg?sanitize=true&#34; height=&#34;70px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://megafamous.com/buy-instagram-followers&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://jsonplaceholder.typicode.com/megafamous.png&#34; height=&#34;70px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;Bronze sponsors 🥉&lt;/h2&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/pankod/refine&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://jsonplaceholder.typicode.com/refine-logo@2x.png&#34; height=&#34;40px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/users/typicode/sponsorship&#34;&gt;Become a sponsor and have your company logo here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsor&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please help me build OSS&lt;/strong&gt; 👉 &lt;a href=&#34;https://github.com/sponsors/typicode&#34;&gt;GitHub Sponsors&lt;/a&gt; &lt;span&gt;❤️&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- toc --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#routes&#34;&gt;Routes&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#plural-routes&#34;&gt;Plural routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#singular-routes&#34;&gt;Singular routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#filter&#34;&gt;Filter&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#paginate&#34;&gt;Paginate&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#sort&#34;&gt;Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#slice&#34;&gt;Slice&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#operators&#34;&gt;Operators&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#full-text-search&#34;&gt;Full-text search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#relationships&#34;&gt;Relationships&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#database&#34;&gt;Database&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#homepage&#34;&gt;Homepage&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#extras&#34;&gt;Extras&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#static-file-server&#34;&gt;Static file server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#alternative-port&#34;&gt;Alternative port&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#access-from-anywhere&#34;&gt;Access from anywhere&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#remote-schema&#34;&gt;Remote schema&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#generate-random-data&#34;&gt;Generate random data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#https&#34;&gt;HTTPS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-custom-routes&#34;&gt;Add custom routes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-middlewares&#34;&gt;Add middlewares&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#cli-usage&#34;&gt;CLI usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#module&#34;&gt;Module&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#simple-example&#34;&gt;Simple example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#custom-routes-example&#34;&gt;Custom routes example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#access-control-example&#34;&gt;Access control example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#custom-output-example&#34;&gt;Custom output example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#rewriter-example&#34;&gt;Rewriter example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#mounting-json-server-on-another-endpoint-example&#34;&gt;Mounting JSON Server on another endpoint example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#links&#34;&gt;Links&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#video&#34;&gt;Video&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#articles&#34;&gt;Articles&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#third-party-tools&#34;&gt;Third-party tools&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- tocstop --&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;Install JSON Server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g json-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;db.json&lt;/code&gt; file with some data&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;posts&#34;: [&#xA;    { &#34;id&#34;: 1, &#34;title&#34;: &#34;json-server&#34;, &#34;author&#34;: &#34;typicode&#34; }&#xA;  ],&#xA;  &#34;comments&#34;: [&#xA;    { &#34;id&#34;: 1, &#34;body&#34;: &#34;some comment&#34;, &#34;postId&#34;: 1 }&#xA;  ],&#xA;  &#34;profile&#34;: { &#34;name&#34;: &#34;typicode&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start JSON Server&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server --watch db.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now if you go to &lt;a href=&#34;http://localhost:3000/posts/1&#34;&gt;http://localhost:3000/posts/1&lt;/a&gt;, you&#39;ll get&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{ &#34;id&#34;: 1, &#34;title&#34;: &#34;json-server&#34;, &#34;author&#34;: &#34;typicode&#34; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also when doing requests, it&#39;s good to know that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you make POST, PUT, PATCH or DELETE requests, changes will be automatically and safely saved to &lt;code&gt;db.json&lt;/code&gt; using &lt;a href=&#34;https://github.com/typicode/lowdb&#34;&gt;lowdb&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Your request body JSON should be object enclosed, just like the GET output. (for example &lt;code&gt;{&#34;name&#34;: &#34;Foobar&#34;}&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Id values are not mutable. Any &lt;code&gt;id&lt;/code&gt; value in the body of your PUT or PATCH request will be ignored. Only a value set in a POST request will be respected, but only if not already taken.&lt;/li&gt; &#xA; &lt;li&gt;A POST, PUT or PATCH request should include a &lt;code&gt;Content-Type: application/json&lt;/code&gt; header to use the JSON in the request body. Otherwise it will return a 2XX status code, but without changes being made to the data.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Routes&lt;/h2&gt; &#xA;&lt;p&gt;Based on the previous &lt;code&gt;db.json&lt;/code&gt; file, here are all the default routes. You can also add &lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-custom-routes&#34;&gt;other routes&lt;/a&gt; using &lt;code&gt;--routes&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Plural routes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET    /posts&#xA;GET    /posts/1&#xA;POST   /posts&#xA;PUT    /posts/1&#xA;PATCH  /posts/1&#xA;DELETE /posts/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Singular routes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET    /profile&#xA;POST   /profile&#xA;PUT    /profile&#xA;PATCH  /profile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filter&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;.&lt;/code&gt; to access deep properties&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?title=json-server&amp;amp;author=typicode&#xA;GET /posts?id=1&amp;amp;id=2&#xA;GET /comments?author.name=typicode&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Paginate&lt;/h3&gt; &#xA;&lt;p&gt;Use &lt;code&gt;_page&lt;/code&gt; and optionally &lt;code&gt;_limit&lt;/code&gt; to paginate returned data.&lt;/p&gt; &#xA;&lt;p&gt;In the &lt;code&gt;Link&lt;/code&gt; header you&#39;ll get &lt;code&gt;first&lt;/code&gt;, &lt;code&gt;prev&lt;/code&gt;, &lt;code&gt;next&lt;/code&gt; and &lt;code&gt;last&lt;/code&gt; links.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_page=7&#xA;GET /posts?_page=7&amp;amp;_limit=20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;10 items are returned by default&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sort&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_sort&lt;/code&gt; and &lt;code&gt;_order&lt;/code&gt; (ascending order by default)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_sort=views&amp;amp;_order=asc&#xA;GET /posts/1/comments?_sort=votes&amp;amp;_order=asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For multiple fields, use the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_sort=user,views&amp;amp;_order=desc,asc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Slice&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_start&lt;/code&gt; and &lt;code&gt;_end&lt;/code&gt; or &lt;code&gt;_limit&lt;/code&gt; (an &lt;code&gt;X-Total-Count&lt;/code&gt; header is included in the response)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_start=20&amp;amp;_end=30&#xA;GET /posts/1/comments?_start=20&amp;amp;_end=30&#xA;GET /posts/1/comments?_start=20&amp;amp;_limit=10&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Works exactly as &lt;a href=&#34;https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/slice&#34;&gt;Array.slice&lt;/a&gt; (i.e. &lt;code&gt;_start&lt;/code&gt; is inclusive and &lt;code&gt;_end&lt;/code&gt; exclusive)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Operators&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_gte&lt;/code&gt; or &lt;code&gt;_lte&lt;/code&gt; for getting a range&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?views_gte=10&amp;amp;views_lte=20&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_ne&lt;/code&gt; to exclude a value&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?id_ne=1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;_like&lt;/code&gt; to filter (RegExp supported)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?title_like=server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Full-text search&lt;/h3&gt; &#xA;&lt;p&gt;Add &lt;code&gt;q&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?q=internet&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Relationships&lt;/h3&gt; &#xA;&lt;p&gt;To include children resources, add &lt;code&gt;_embed&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /posts?_embed=comments&#xA;GET /posts/1?_embed=comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To include parent resource, add &lt;code&gt;_expand&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /comments?_expand=post&#xA;GET /comments/1?_expand=post&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get or create nested resources (by default one level, &lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#add-custom-routes&#34;&gt;add custom routes&lt;/a&gt; for more)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET  /posts/1/comments&#xA;POST /posts/1/comments&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homepage&lt;/h3&gt; &#xA;&lt;p&gt;Returns default index file or serves &lt;code&gt;./public&lt;/code&gt; directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;GET /&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Extras&lt;/h2&gt; &#xA;&lt;h3&gt;Static file server&lt;/h3&gt; &#xA;&lt;p&gt;You can use JSON Server to serve your HTML, JS and CSS, simply create a &lt;code&gt;./public&lt;/code&gt; directory or use &lt;code&gt;--static&lt;/code&gt; to set a different static files directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir public&#xA;echo &#39;hello world&#39; &amp;gt; public/index.html&#xA;json-server db.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server db.json --static ./some-other-dir&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Alternative port&lt;/h3&gt; &#xA;&lt;p&gt;You can start JSON Server on other ports with the &lt;code&gt;--port&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ json-server --watch db.json --port 3004&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Access from anywhere&lt;/h3&gt; &#xA;&lt;p&gt;You can access your fake API from anywhere using CORS and JSONP.&lt;/p&gt; &#xA;&lt;h3&gt;Remote schema&lt;/h3&gt; &#xA;&lt;p&gt;You can load remote schemas.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ json-server http://example.com/file.json&#xA;$ json-server http://jsonplaceholder.typicode.com/db&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate random data&lt;/h3&gt; &#xA;&lt;p&gt;Using JS instead of a JSON file, you can create data programmatically.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// index.js&#xA;module.exports = () =&amp;gt; {&#xA;  const data = { users: [] }&#xA;  // Create 1000 users&#xA;  for (let i = 0; i &amp;lt; 1000; i++) {&#xA;    data.users.push({ id: i, name: `user${i}` })&#xA;  }&#xA;  return data&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ json-server index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tip&lt;/strong&gt; use modules like &lt;a href=&#34;https://github.com/Marak/faker.js&#34;&gt;Faker&lt;/a&gt;, &lt;a href=&#34;https://github.com/boo1ean/casual&#34;&gt;Casual&lt;/a&gt;, &lt;a href=&#34;https://github.com/victorquinn/chancejs&#34;&gt;Chance&lt;/a&gt; or &lt;a href=&#34;https://github.com/json-schema-faker/json-schema-faker&#34;&gt;JSON Schema Faker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;HTTPS&lt;/h3&gt; &#xA;&lt;p&gt;There are many ways to set up SSL in development. One simple way is to use &lt;a href=&#34;https://github.com/typicode/hotel&#34;&gt;hotel&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Add custom routes&lt;/h3&gt; &#xA;&lt;p&gt;Create a &lt;code&gt;routes.json&lt;/code&gt; file. Pay attention to start every route with &lt;code&gt;/&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;/api/*&#34;: &#34;/$1&#34;,&#xA;  &#34;/:resource/:id/show&#34;: &#34;/:resource/:id&#34;,&#xA;  &#34;/posts/:category&#34;: &#34;/posts?category=:category&#34;,&#xA;  &#34;/articles\\?id=:id&#34;: &#34;/posts/:id&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Start JSON Server with &lt;code&gt;--routes&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server db.json --routes routes.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can access resources using additional routes.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;/api/posts # → /posts&#xA;/api/posts/1  # → /posts/1&#xA;/posts/1/show # → /posts/1&#xA;/posts/javascript # → /posts?category=javascript&#xA;/articles?id=1 # → /posts/1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Add middlewares&lt;/h3&gt; &#xA;&lt;p&gt;You can add your middlewares from the CLI using &lt;code&gt;--middlewares&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// hello.js&#xA;module.exports = (req, res, next) =&amp;gt; {&#xA;  res.header(&#39;X-Hello&#39;, &#39;World&#39;)&#xA;  next()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;json-server db.json --middlewares ./hello.js&#xA;json-server db.json --middlewares ./first.js ./second.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;json-server [options] &amp;lt;source&amp;gt;&#xA;&#xA;Options:&#xA;  --config, -c       Path to config file           [default: &#34;json-server.json&#34;]&#xA;  --port, -p         Set port                                    [default: 3000]&#xA;  --host, -H         Set host                             [default: &#34;localhost&#34;]&#xA;  --watch, -w        Watch file(s)                                     [boolean]&#xA;  --routes, -r       Path to routes file&#xA;  --middlewares, -m  Paths to middleware files                           [array]&#xA;  --static, -s       Set static files directory&#xA;  --read-only, --ro  Allow only GET requests                           [boolean]&#xA;  --no-cors, --nc    Disable Cross-Origin Resource Sharing             [boolean]&#xA;  --no-gzip, --ng    Disable GZIP Content-Encoding                     [boolean]&#xA;  --snapshots, -S    Set snapshots directory                      [default: &#34;.&#34;]&#xA;  --delay, -d        Add delay to responses (ms)&#xA;  --id, -i           Set database id property (e.g. _id)         [default: &#34;id&#34;]&#xA;  --foreignKeySuffix, --fks  Set foreign key suffix, (e.g. _id as in post_id)&#xA;                                                                 [default: &#34;Id&#34;]&#xA;  --quiet, -q        Suppress log messages from output                 [boolean]&#xA;  --help, -h         Show help                                         [boolean]&#xA;  --version, -v      Show version number                               [boolean]&#xA;&#xA;Examples:&#xA;  json-server db.json&#xA;  json-server file.js&#xA;  json-server http://example.com/db.json&#xA;&#xA;https://github.com/typicode/json-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also set options in a &lt;code&gt;json-server.json&lt;/code&gt; configuration file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;port&#34;: 3000&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Module&lt;/h3&gt; &#xA;&lt;p&gt;If you need to add authentication, validation, or &lt;strong&gt;any behavior&lt;/strong&gt;, you can use the project as a module in combination with other Express middlewares.&lt;/p&gt; &#xA;&lt;h4&gt;Simple example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install json-server --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// server.js&#xA;const jsonServer = require(&#39;json-server&#39;)&#xA;const server = jsonServer.create()&#xA;const router = jsonServer.router(&#39;db.json&#39;)&#xA;const middlewares = jsonServer.defaults()&#xA;&#xA;server.use(middlewares)&#xA;server.use(router)&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#39;JSON Server is running&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ node server.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The path you provide to the &lt;code&gt;jsonServer.router&lt;/code&gt; function is relative to the directory from where you launch your node process. If you run the above code from another directory, it’s better to use an absolute path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const path = require(&#39;path&#39;)&#xA;const router = jsonServer.router(path.join(__dirname, &#39;db.json&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an in-memory database, simply pass an object to &lt;code&gt;jsonServer.router()&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To add custom options (eg. &lt;code&gt;foreginKeySuffix&lt;/code&gt;) pass in an object as the second argument to &lt;code&gt;jsonServer.router(&#39;db.json&#39;, { foreginKeySuffix: &#39;_id&#39; })&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please note also that &lt;code&gt;jsonServer.router()&lt;/code&gt; can be used in existing Express projects.&lt;/p&gt; &#xA;&lt;h4&gt;Custom routes example&lt;/h4&gt; &#xA;&lt;p&gt;Let&#39;s say you want a route that echoes query parameters and another one that set a timestamp on every resource created.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const jsonServer = require(&#39;json-server&#39;)&#xA;const server = jsonServer.create()&#xA;const router = jsonServer.router(&#39;db.json&#39;)&#xA;const middlewares = jsonServer.defaults()&#xA;&#xA;// Set default middlewares (logger, static, cors and no-cache)&#xA;server.use(middlewares)&#xA;&#xA;// Add custom routes before JSON Server router&#xA;server.get(&#39;/echo&#39;, (req, res) =&amp;gt; {&#xA;  res.jsonp(req.query)&#xA;})&#xA;&#xA;// To handle POST, PUT and PATCH you need to use a body-parser&#xA;// You can use the one used by JSON Server&#xA;server.use(jsonServer.bodyParser)&#xA;server.use((req, res, next) =&amp;gt; {&#xA;  if (req.method === &#39;POST&#39;) {&#xA;    req.body.createdAt = Date.now()&#xA;  }&#xA;  // Continue to JSON Server router&#xA;  next()&#xA;})&#xA;&#xA;// Use default router&#xA;server.use(router)&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#39;JSON Server is running&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Access control example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const jsonServer = require(&#39;json-server&#39;)&#xA;const server = jsonServer.create()&#xA;const router = jsonServer.router(&#39;db.json&#39;)&#xA;const middlewares = jsonServer.defaults()&#xA;&#xA;server.use(middlewares)&#xA;server.use((req, res, next) =&amp;gt; {&#xA; if (isAuthorized(req)) { // add your authorization logic here&#xA;   next() // continue to JSON Server router&#xA; } else {&#xA;   res.sendStatus(401)&#xA; }&#xA;})&#xA;server.use(router)&#xA;server.listen(3000, () =&amp;gt; {&#xA;  console.log(&#39;JSON Server is running&#39;)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom output example&lt;/h4&gt; &#xA;&lt;p&gt;To modify responses, overwrite &lt;code&gt;router.render&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// In this example, returned resources will be wrapped in a body property&#xA;router.render = (req, res) =&amp;gt; {&#xA;  res.jsonp({&#xA;    body: res.locals.data&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set your own status code for the response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// In this example we simulate a server side error response&#xA;router.render = (req, res) =&amp;gt; {&#xA;  res.status(500).jsonp({&#xA;    error: &#34;error message here&#34;&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Rewriter example&lt;/h4&gt; &#xA;&lt;p&gt;To add rewrite rules, use &lt;code&gt;jsonServer.rewriter()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add this before server.use(router)&#xA;server.use(jsonServer.rewriter({&#xA;  &#39;/api/*&#39;: &#39;/$1&#39;,&#xA;  &#39;/blog/:resource/:id/show&#39;: &#39;/:resource/:id&#39;&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mounting JSON Server on another endpoint example&lt;/h4&gt; &#xA;&lt;p&gt;Alternatively, you can also mount the router on &lt;code&gt;/api&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;server.use(&#39;/api&#39;, router)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;API&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;jsonServer.create()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns an Express server.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;jsonServer.defaults([options])&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns middlewares used by JSON Server.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; path to static files&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;logger&lt;/code&gt; enable logger middleware (default: true)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;bodyParser&lt;/code&gt; enable body-parser middleware (default: true)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;noCors&lt;/code&gt; disable CORS (default: false)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;readOnly&lt;/code&gt; accept only GET requests (default: false)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;code&gt;jsonServer.router([path|object], [options])&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Returns JSON Server router.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;options (see &lt;a href=&#34;https://raw.githubusercontent.com/typicode/json-server/master/#cli-usage&#34;&gt;CLI usage&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;You can deploy JSON Server. For example, &lt;a href=&#34;http://jsonplaceholder.typicode.com&#34;&gt;JSONPlaceholder&lt;/a&gt; is an online fake API powered by JSON Server and running on Heroku.&lt;/p&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;h3&gt;Video&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://egghead.io/lessons/nodejs-creating-demo-apis-with-json-server&#34;&gt;Creating Demo APIs with json-server on egghead.io&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nmotw.in/json-server/&#34;&gt;Node Module Of The Week - json-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://marmelab.com/blog/2014/09/15/easy-backend-for-your-restful-api.html&#34;&gt;ng-admin: Add an AngularJS admin GUI to any RESTful API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://glebbahmutov.com/blog/fast-prototyping-restangular-and-json-server/&#34;&gt;Fast prototyping using Restangular and Json-server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://coligo.io/create-mock-rest-api-with-json-server/&#34;&gt;Create a Mock REST API in Seconds for Prototyping your Frontend&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@housecor/rapid-development-via-mock-apis-e559087be066#.93d7w8oro&#34;&gt;No API? No Problem! Rapid Development via Mock APIs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dzone.com/articles/zero-code-rest-with-json-server&#34;&gt;Zero Code REST With json-server&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Third-party tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tfiwm/grunt-json-server&#34;&gt;Grunt JSON Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clue/docker-json-server&#34;&gt;Docker JSON Server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/naholyr/json-server-gui&#34;&gt;JSON Server GUI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dfsq/json-server-init&#34;&gt;JSON file generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/maty21/json-server-extension&#34;&gt;JSON Server extension&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://thanks.typicode.com&#34;&gt;Supporters&lt;/a&gt; ✨&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>winstonjs/winston</title>
    <updated>2022-09-14T01:35:53Z</updated>
    <id>tag:github.com,2022-09-14:/winstonjs/winston</id>
    <link href="https://github.com/winstonjs/winston" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A logger for just about everything.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;winston&lt;/h1&gt; &#xA;&lt;p&gt;A logger for just about everything.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/winston&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/winston.svg?style=flat-square&#34; alt=&#34;Version npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmcharts.com/compare/winston?minimal=true&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/winston.svg?style=flat-square&#34; alt=&#34;npm Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/winstonjs/winston/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/winstonjs/winston/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/winstonjs/winston?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/winstonjs/winston/badge.svg?branch=master&#34; alt=&#34;coverage status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodei.co/npm/winston/&#34;&gt;&lt;img src=&#34;https://nodei.co/npm/winston.png?downloads=true&amp;amp;downloadRank=true&#34; alt=&#34;NPM&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;winston@3&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/UPGRADE-3.0.md&#34;&gt;Upgrade Guide&lt;/a&gt; for more information. Bug reports and PRs welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Looking for &lt;code&gt;winston@2.x&lt;/code&gt; documentation?&lt;/h2&gt; &#xA;&lt;p&gt;Please note that the documentation below is for &lt;code&gt;winston@3&lt;/code&gt;. &lt;a href=&#34;https://github.com/winstonjs/winston/tree/2.x&#34;&gt;Read the &lt;code&gt;winston@2.x&lt;/code&gt; documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; is designed to be a simple and universal logging library with support for multiple transports. A transport is essentially a storage device for your logs. Each &lt;code&gt;winston&lt;/code&gt; logger can have multiple transports (see: &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#transports&#34;&gt;Transports&lt;/a&gt;) configured at different levels (see: &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#logging-levels&#34;&gt;Logging levels&lt;/a&gt;). For example, one may want error logs to be stored in a persistent remote location (like a database), but all logs output to the console or a local file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; aims to decouple parts of the logging process to make it more flexible and extensible. Attention is given to supporting flexibility in log formatting (see: &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#formats&#34;&gt;Formats&lt;/a&gt;) &amp;amp; levels (see: &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#using-custom-logging-levels&#34;&gt;Using custom logging levels&lt;/a&gt;), and ensuring those APIs decoupled from the implementation of transport logging (i.e. how the logs are stored / indexed, see: &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#adding-custom-transports&#34;&gt;Adding Custom Transports&lt;/a&gt;) to the API that they exposed to the programmer.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;TL;DR? Check out the &lt;a href=&#34;https://github.com/winstonjs/winston/raw/master/examples/quick-start.js&#34;&gt;quick start example&lt;/a&gt; in &lt;code&gt;./examples/&lt;/code&gt;. There are a number of other examples in &lt;a href=&#34;https://github.com/winstonjs/winston/tree/master/examples&#34;&gt;&lt;code&gt;./examples/*.js&lt;/code&gt;&lt;/a&gt;. Don&#39;t see an example you think should be there? Submit a pull request to add it!&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The recommended way to use &lt;code&gt;winston&lt;/code&gt; is to create your own logger. The simplest way to do this is using &lt;code&gt;winston.createLogger&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const winston = require(&#39;winston&#39;);&#xA;&#xA;const logger = winston.createLogger({&#xA;  level: &#39;info&#39;,&#xA;  format: winston.format.json(),&#xA;  defaultMeta: { service: &#39;user-service&#39; },&#xA;  transports: [&#xA;    //&#xA;    // - Write all logs with importance level of `error` or less to `error.log`&#xA;    // - Write all logs with importance level of `info` or less to `combined.log`&#xA;    //&#xA;    new winston.transports.File({ filename: &#39;error.log&#39;, level: &#39;error&#39; }),&#xA;    new winston.transports.File({ filename: &#39;combined.log&#39; }),&#xA;  ],&#xA;});&#xA;&#xA;//&#xA;// If we&#39;re not in production then log to the `console` with the format:&#xA;// `${info.level}: ${info.message} JSON.stringify({ ...rest }) `&#xA;//&#xA;if (process.env.NODE_ENV !== &#39;production&#39;) {&#xA;  logger.add(new winston.transports.Console({&#xA;    format: winston.format.simple(),&#xA;  }));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also log directly via the default logger exposed by &lt;code&gt;require(&#39;winston&#39;)&lt;/code&gt;, but this merely intended to be a convenient shared logger to use throughout your application if you so choose. Note that the default logger doesn&#39;t have any transports by default. You need add transports by yourself, and leaving the default logger without any transports may produce a high memory usage issue.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#motivation&#34;&gt;Motivation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#logging&#34;&gt;Logging&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#creating-your-own-logger&#34;&gt;Creating your logger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#streams-objectmode-and-info-objects&#34;&gt;Streams, &lt;code&gt;objectMode&lt;/code&gt;, and &lt;code&gt;info&lt;/code&gt; objects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#formats&#34;&gt;Formats&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#combining-formats&#34;&gt;Combining formats&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#string-interpolation&#34;&gt;String interpolation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#filtering-info-objects&#34;&gt;Filtering &lt;code&gt;info&lt;/code&gt; Objects&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#creating-custom-formats&#34;&gt;Creating custom formats&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#logging-levels&#34;&gt;Logging levels&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#using-logging-levels&#34;&gt;Using logging levels&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#using-custom-logging-levels&#34;&gt;Using custom logging levels&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#transports&#34;&gt;Transports&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#multiple-transports-of-the-same-type&#34;&gt;Multiple transports of the same type&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#adding-custom-transports&#34;&gt;Adding Custom Transports&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#common-transport-options&#34;&gt;Common Transport options&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#exceptions&#34;&gt;Exceptions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#handling-uncaught-exceptions-with-winston&#34;&gt;Handling Uncaught Exceptions with winston&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#to-exit-or-not-to-exit&#34;&gt;To Exit or Not to Exit&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#rejections&#34;&gt;Rejections&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#handling-uncaught-promise-rejections-with-winston&#34;&gt;Handling Uncaught Promise Rejections with winston&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#profiling&#34;&gt;Profiling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#streaming-logs&#34;&gt;Streaming Logs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#querying-logs&#34;&gt;Querying Logs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#further-reading&#34;&gt;Further Reading&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#using-the-default-logger&#34;&gt;Using the default logger&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#awaiting-logs-to-be-written-in-winston&#34;&gt;Awaiting logs to be written in &lt;code&gt;winston&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#working-with-multiple-loggers-in-winston&#34;&gt;Working with multiple Loggers in &lt;code&gt;winston&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#run-tests&#34;&gt;Run Tests&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Logging levels in &lt;code&gt;winston&lt;/code&gt; conform to the severity ordering specified by &lt;a href=&#34;https://tools.ietf.org/html/rfc5424&#34;&gt;RFC5424&lt;/a&gt;: &lt;em&gt;severity of all levels is assumed to be numerically &lt;strong&gt;ascending&lt;/strong&gt; from most important to least important.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const levels = {&#xA;  error: 0,&#xA;  warn: 1,&#xA;  info: 2,&#xA;  http: 3,&#xA;  verbose: 4,&#xA;  debug: 5,&#xA;  silly: 6&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating your own Logger&lt;/h3&gt; &#xA;&lt;p&gt;You get started by creating a logger using &lt;code&gt;winston.createLogger&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  transports: [&#xA;    new winston.transports.Console(),&#xA;    new winston.transports.File({ filename: &#39;combined.log&#39; })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A logger accepts&amp;nbsp;the following parameters:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;level&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;info&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Log only if &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#streams-objectmode-and-info-objects&#34;&gt;&lt;code&gt;info.level&lt;/code&gt;&lt;/a&gt; is less than or equal to this level&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;levels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winston.config.npm.levels&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Levels (and colors) representing log priorities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;format&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;winston.format.json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Formatting for &lt;code&gt;info&lt;/code&gt; messages (see: &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#formats&#34;&gt;Formats&lt;/a&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;transports&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt; &lt;em&gt;(No transports)&lt;/em&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Set of logging targets for &lt;code&gt;info&lt;/code&gt; messages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;exitOnError&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If false, handled exceptions will not cause &lt;code&gt;process.exit&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;silent&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If true, all logs are suppressed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The levels provided to &lt;code&gt;createLogger&lt;/code&gt; will be defined as convenience methods on the &lt;code&gt;logger&lt;/code&gt; returned.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// Logging&#xA;//&#xA;logger.log({&#xA;  level: &#39;info&#39;,&#xA;  message: &#39;Hello distributed log files!&#39;&#xA;});&#xA;&#xA;logger.info(&#39;Hello again distributed logs&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can add or remove transports from the &lt;code&gt;logger&lt;/code&gt; once it has been provided to you from &lt;code&gt;winston.createLogger&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const files = new winston.transports.File({ filename: &#39;combined.log&#39; });&#xA;const console = new winston.transports.Console();&#xA;&#xA;logger&#xA;  .clear()          // Remove all transports&#xA;  .add(console)     // Add console transport&#xA;  .add(files)       // Add file transport&#xA;  .remove(console); // Remove console transport&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also wholesale reconfigure a &lt;code&gt;winston.Logger&lt;/code&gt; instance using the &lt;code&gt;configure&lt;/code&gt; method:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  level: &#39;info&#39;,&#xA;  transports: [&#xA;    new winston.transports.Console(),&#xA;    new winston.transports.File({ filename: &#39;combined.log&#39; })&#xA;  ]&#xA;});&#xA;&#xA;//&#xA;// Replaces the previous transports with those in the&#xA;// new configuration wholesale.&#xA;//&#xA;const DailyRotateFile = require(&#39;winston-daily-rotate-file&#39;);&#xA;logger.configure({&#xA;  level: &#39;verbose&#39;,&#xA;  transports: [&#xA;    new DailyRotateFile(opts)&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating child loggers&lt;/h3&gt; &#xA;&lt;p&gt;You can create child loggers from existing loggers to pass metadata overrides:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  transports: [&#xA;    new winston.transports.Console(),&#xA;  ]&#xA;});&#xA;&#xA;const childLogger = logger.child({ requestId: &#39;451&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Streams, &lt;code&gt;objectMode&lt;/code&gt;, and &lt;code&gt;info&lt;/code&gt; objects&lt;/h3&gt; &#xA;&lt;p&gt;In &lt;code&gt;winston&lt;/code&gt;, both &lt;code&gt;Logger&lt;/code&gt; and &lt;code&gt;Transport&lt;/code&gt; instances are treated as &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_object_mode&#34;&gt;&lt;code&gt;objectMode&lt;/code&gt;&lt;/a&gt; streams that accept an &lt;code&gt;info&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;info&lt;/code&gt; parameter provided to a given format represents a single log message. The object itself is mutable. Every &lt;code&gt;info&lt;/code&gt; must have at least the &lt;code&gt;level&lt;/code&gt; and &lt;code&gt;message&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const info = {&#xA;  level: &#39;info&#39;,                 // Level of the logging message&#xA;  message: &#39;Hey! Log something?&#39; // Descriptive message being logged.&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Properties &lt;strong&gt;besides level and message&lt;/strong&gt; are considered as &#34;&lt;code&gt;meta&lt;/code&gt;&#34;. i.e.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { level, message, ...meta } = info;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Several of the formats in &lt;code&gt;logform&lt;/code&gt; itself add additional properties:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Property&lt;/th&gt; &#xA;   &lt;th&gt;Format added by&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;splat&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;splat()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;String interpolation splat for &lt;code&gt;%d %s&lt;/code&gt;-style messages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;timestamp&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;timestamp()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;timestamp the message was received.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;label&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;label()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom label associated with each message.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;ms&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;ms()&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Number of milliseconds since the previous log message.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;As a consumer you may add whatever properties you wish –&amp;nbsp;&lt;em&gt;internal state is maintained by &lt;code&gt;Symbol&lt;/code&gt; properties:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Symbol.for(&#39;level&#39;)&lt;/code&gt; &lt;em&gt;&lt;strong&gt;(READ-ONLY)&lt;/strong&gt;:&lt;/em&gt; equal to &lt;code&gt;level&lt;/code&gt; property. &lt;strong&gt;Is treated as immutable by all code.&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Symbol.for(&#39;message&#39;):&lt;/code&gt; complete string message set by &#34;finalizing formats&#34;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;json&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;logstash&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;printf&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;prettyPrint&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;simple&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Symbol.for(&#39;splat&#39;)&lt;/code&gt;: additional string interpolation arguments. &lt;em&gt;Used exclusively by &lt;code&gt;splat()&lt;/code&gt; format.&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These Symbols are stored in another package: &lt;code&gt;triple-beam&lt;/code&gt; so that all consumers of &lt;code&gt;logform&lt;/code&gt; can have the same Symbol reference. i.e.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { LEVEL, MESSAGE, SPLAT } = require(&#39;triple-beam&#39;);&#xA;&#xA;console.log(LEVEL === Symbol.for(&#39;level&#39;));&#xA;// true&#xA;&#xA;console.log(MESSAGE === Symbol.for(&#39;message&#39;));&#xA;// true&#xA;&#xA;console.log(SPLAT === Symbol.for(&#39;splat&#39;));&#xA;// true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; any &lt;code&gt;{ message&amp;nbsp;}&lt;/code&gt; property in a &lt;code&gt;meta&lt;/code&gt; object provided will automatically be concatenated to any &lt;code&gt;msg&lt;/code&gt; already provided: For example the below will concatenate &#39;world&#39; onto &#39;hello&#39;:&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;logger.log(&#39;error&#39;, &#39;hello&#39;, { message: &#39;world&#39; });&#xA;logger.info(&#39;hello&#39;, { message: &#39;world&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Formats&lt;/h2&gt; &#xA;&lt;p&gt;Formats in &lt;code&gt;winston&lt;/code&gt; can be accessed from &lt;code&gt;winston.format&lt;/code&gt;. They are implemented in &lt;a href=&#34;https://github.com/winstonjs/logform&#34;&gt;&lt;code&gt;logform&lt;/code&gt;&lt;/a&gt;, a separate module from &lt;code&gt;winston&lt;/code&gt;. This allows flexibility when writing your own transports in case you wish to include a default format with your transport.&lt;/p&gt; &#xA;&lt;p&gt;In modern versions of &lt;code&gt;node&lt;/code&gt; template strings are very performant and are the recommended way for doing most end-user formatting. If you want to bespoke format your logs, &lt;code&gt;winston.format.printf&lt;/code&gt; is for you:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);&#xA;const { combine, timestamp, label, printf } = format;&#xA;&#xA;const myFormat = printf(({ level, message, label, timestamp }) =&amp;gt; {&#xA;  return `${timestamp} [${label}] ${level}: ${message}`;&#xA;});&#xA;&#xA;const logger = createLogger({&#xA;  format: combine(&#xA;    label({ label: &#39;right meow!&#39; }),&#xA;    timestamp(),&#xA;    myFormat&#xA;  ),&#xA;  transports: [new transports.Console()]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see what built-in formats are available and learn more about creating your own custom logging formats, see &lt;a href=&#34;https://github.com/winstonjs/logform#readme&#34;&gt;&lt;code&gt;logform&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Combining formats&lt;/h3&gt; &#xA;&lt;p&gt;Any number of formats may be combined into a single format using &lt;code&gt;format.combine&lt;/code&gt;. Since &lt;code&gt;format.combine&lt;/code&gt; takes no &lt;code&gt;opts&lt;/code&gt;, as a convenience it returns pre-created instance of the combined format.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);&#xA;const { combine, timestamp, label, prettyPrint } = format;&#xA;&#xA;const logger = createLogger({&#xA;  format: combine(&#xA;    label({ label: &#39;right meow!&#39; }),&#xA;    timestamp(),&#xA;    prettyPrint()&#xA;  ),&#xA;  transports: [new transports.Console()]&#xA;})&#xA;&#xA;logger.log({&#xA;  level: &#39;info&#39;,&#xA;  message: &#39;What time is the testing at?&#39;&#xA;});&#xA;// Outputs:&#xA;// { level: &#39;info&#39;,&#xA;//   message: &#39;What time is the testing at?&#39;,&#xA;//   label: &#39;right meow!&#39;,&#xA;//   timestamp: &#39;2017-09-30T03:57:26.875Z&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;String interpolation&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;log&lt;/code&gt; method provides the string interpolation using &lt;a href=&#34;https://nodejs.org/dist/latest/docs/api/util.html#util_util_format_format_args&#34;&gt;util.format&lt;/a&gt;. &lt;strong&gt;It must be enabled using &lt;code&gt;format.splat()&lt;/code&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Below is an example that defines a format with string interpolation of messages using &lt;code&gt;format.splat&lt;/code&gt; and then serializes the entire &lt;code&gt;info&lt;/code&gt; message using &lt;code&gt;format.simple&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);&#xA;const logger = createLogger({&#xA;  format: format.combine(&#xA;    format.splat(),&#xA;    format.simple()&#xA;  ),&#xA;  transports: [new transports.Console()]&#xA;});&#xA;&#xA;//&amp;nbsp;info: test message my string {}&#xA;logger.log(&#39;info&#39;, &#39;test message %s&#39;, &#39;my string&#39;);&#xA;&#xA;//&amp;nbsp;info: test message 123 {}&#xA;logger.log(&#39;info&#39;, &#39;test message %d&#39;, 123);&#xA;&#xA;// info: test message first second {number: 123}&#xA;logger.log(&#39;info&#39;, &#39;test message %s, %s&#39;, &#39;first&#39;, &#39;second&#39;, { number: 123 });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Filtering &lt;code&gt;info&lt;/code&gt; Objects&lt;/h3&gt; &#xA;&lt;p&gt;If you wish to filter out a given &lt;code&gt;info&lt;/code&gt; Object completely when logging then simply return a falsey value.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { createLogger, format, transports } = require(&#39;winston&#39;);&#xA;&#xA;// Ignore log messages if they have { private: true }&#xA;const ignorePrivate = format((info, opts) =&amp;gt; {&#xA;  if (info.private) { return false; }&#xA;  return info;&#xA;});&#xA;&#xA;const logger = createLogger({&#xA;  format: format.combine(&#xA;    ignorePrivate(),&#xA;    format.json()&#xA;  ),&#xA;  transports: [new transports.Console()]&#xA;});&#xA;&#xA;// Outputs: {&#34;level&#34;:&#34;error&#34;,&#34;message&#34;:&#34;Public error to share&#34;}&#xA;logger.log({&#xA;  level: &#39;error&#39;,&#xA;  message: &#39;Public error to share&#39;&#xA;});&#xA;&#xA;// Messages with { private: true } will not be written when logged.&#xA;logger.log({&#xA;  private: true,&#xA;  level: &#39;error&#39;,&#xA;  message: &#39;This is super secret - hide it.&#39;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use of &lt;code&gt;format.combine&lt;/code&gt; will respect any falsey values return and stop evaluation of later formats in the series. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { format } = require(&#39;winston&#39;);&#xA;const { combine, timestamp, label } = format;&#xA;&#xA;const willNeverThrow = format.combine(&#xA;  format(info =&amp;gt; { return false })(), // Ignores everything&#xA;  format(info =&amp;gt; { throw new Error(&#39;Never reached&#39;) })()&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating custom formats&lt;/h3&gt; &#xA;&lt;p&gt;Formats are prototypal objects (i.e. class instances) that define a single method: &lt;code&gt;transform(info, opts)&lt;/code&gt; and return the mutated &lt;code&gt;info&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;info&lt;/code&gt;: an object representing the log message.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;opts&lt;/code&gt;: setting specific to the current instance of the format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;They are expected to return one of two things:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;An &lt;code&gt;info&lt;/code&gt; Object&lt;/strong&gt; representing the modified &lt;code&gt;info&lt;/code&gt; argument. Object references need not be preserved&amp;nbsp;if immutability is preferred. All current built-in formats consider &lt;code&gt;info&lt;/code&gt; mutable, but [immutablejs] is being considered for future releases.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;A falsey value&lt;/strong&gt; indicating that the &lt;code&gt;info&lt;/code&gt; argument should be ignored by the caller. (See: &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/#filtering-info-objects&#34;&gt;Filtering &lt;code&gt;info&lt;/code&gt; Objects&lt;/a&gt;) below.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;winston.format&lt;/code&gt; is designed to be as simple as possible. To define a new format, simply pass it a &lt;code&gt;transform(info, opts)&lt;/code&gt; function to get a new &lt;code&gt;Format&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The named &lt;code&gt;Format&lt;/code&gt; returned can be used to create as many copies of the given &lt;code&gt;Format&lt;/code&gt; as desired:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { format } = require(&#39;winston&#39;);&#xA;&#xA;const volume = format((info, opts) =&amp;gt; {&#xA;  if (opts.yell) {&#xA;    info.message = info.message.toUpperCase();&#xA;  } else if (opts.whisper) {&#xA;    info.message = info.message.toLowerCase();&#xA;  }&#xA;&#xA;  return info;&#xA;});&#xA;&#xA;// `volume` is now a function that returns instances of the format.&#xA;const scream = volume({ yell: true });&#xA;console.dir(scream.transform({&#xA;  level: &#39;info&#39;,&#xA;  message: `sorry for making you YELL in your head!`&#xA;}, scream.options));&#xA;// {&#xA;//   level: &#39;info&#39;&#xA;//   message: &#39;SORRY FOR MAKING YOU YELL IN YOUR HEAD!&#39;&#xA;// }&#xA;&#xA;// `volume` can be used multiple times to create different formats.&#xA;const whisper = volume({ whisper: true });&#xA;console.dir(whisper.transform({&#xA;  level: &#39;info&#39;,&#xA;  message: `WHY ARE THEY MAKING US YELL SO MUCH!`&#xA;}, whisper.options));&#xA;// {&#xA;//   level: &#39;info&#39;&#xA;//   message: &#39;why are they making us yell so much!&#39;&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Logging Levels&lt;/h2&gt; &#xA;&lt;p&gt;Logging levels in &lt;code&gt;winston&lt;/code&gt; conform to the severity ordering specified by &lt;a href=&#34;https://tools.ietf.org/html/rfc5424&#34;&gt;RFC5424&lt;/a&gt;: &lt;em&gt;severity of all levels is assumed to be numerically &lt;strong&gt;ascending&lt;/strong&gt; from most important to least important.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Each &lt;code&gt;level&lt;/code&gt; is given a specific integer priority. The higher the priority the more important the message is considered to be, and the lower the corresponding integer priority. For example, as specified exactly in RFC5424 the &lt;code&gt;syslog&lt;/code&gt; levels are prioritized from 0 to 7 (highest to lowest).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  emerg: 0,&#xA;  alert: 1,&#xA;  crit: 2,&#xA;  error: 3,&#xA;  warning: 4,&#xA;  notice: 5,&#xA;  info: 6,&#xA;  debug: 7&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similarly, &lt;code&gt;npm&lt;/code&gt; logging levels are prioritized from 0 to 6 (highest to lowest):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  error: 0,&#xA;  warn: 1,&#xA;  info: 2,&#xA;  http: 3,&#xA;  verbose: 4,&#xA;  debug: 5,&#xA;  silly: 6&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you do not explicitly define the levels that &lt;code&gt;winston&lt;/code&gt; should use, the &lt;code&gt;npm&lt;/code&gt; levels above will be used.&lt;/p&gt; &#xA;&lt;h3&gt;Using Logging Levels&lt;/h3&gt; &#xA;&lt;p&gt;Setting the level for your logging message can be accomplished in one of two ways. You can pass a string representing the logging level to the log() method or use the level specified methods defined on every winston Logger.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// Any logger instance&#xA;//&#xA;logger.log(&#39;silly&#39;, &#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.log(&#39;debug&#39;, &#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.log(&#39;verbose&#39;, &#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.log(&#39;info&#39;, &#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.log(&#39;warn&#39;, &#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.log(&#39;error&#39;, &#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.info(&#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.warn(&#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;logger.error(&#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;&#xA;//&#xA;// Default logger&#xA;//&#xA;winston.log(&#39;info&#39;, &#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;winston.info(&#34;127.0.0.1 - there&#39;s no place like home&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; allows you to define a &lt;code&gt;level&lt;/code&gt; property on each transport which specifies the &lt;strong&gt;maximum&lt;/strong&gt; level of messages that a transport should log. For example, using the &lt;code&gt;syslog&lt;/code&gt; levels you could log only &lt;code&gt;error&lt;/code&gt; messages to the console and everything &lt;code&gt;info&lt;/code&gt; and below to a file (which includes &lt;code&gt;error&lt;/code&gt; messages):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  levels: winston.config.syslog.levels,&#xA;  transports: [&#xA;    new winston.transports.Console({ level: &#39;error&#39; }),&#xA;    new winston.transports.File({&#xA;      filename: &#39;combined.log&#39;,&#xA;      level: &#39;info&#39;&#xA;    })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may also dynamically change the log level of a transport:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const transports = {&#xA;  console: new winston.transports.Console({ level: &#39;warn&#39; }),&#xA;  file: new winston.transports.File({ filename: &#39;combined.log&#39;, level: &#39;error&#39; })&#xA;};&#xA;&#xA;const logger = winston.createLogger({&#xA;  transports: [&#xA;    transports.console,&#xA;    transports.file&#xA;  ]&#xA;});&#xA;&#xA;logger.info(&#39;Will not be logged in either transport!&#39;);&#xA;transports.console.level = &#39;info&#39;;&#xA;transports.file.level = &#39;info&#39;;&#xA;logger.info(&#39;Will be logged in both transports!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; supports customizable logging levels, defaulting to npm style logging levels. Levels must be specified at the time of creating your logger.&lt;/p&gt; &#xA;&lt;h3&gt;Using Custom Logging Levels&lt;/h3&gt; &#xA;&lt;p&gt;In addition to the predefined &lt;code&gt;npm&lt;/code&gt;, &lt;code&gt;syslog&lt;/code&gt;, and &lt;code&gt;cli&lt;/code&gt; levels available in &lt;code&gt;winston&lt;/code&gt;, you can also choose to define your own:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const myCustomLevels = {&#xA;  levels: {&#xA;    foo: 0,&#xA;    bar: 1,&#xA;    baz: 2,&#xA;    foobar: 3&#xA;  },&#xA;  colors: {&#xA;    foo: &#39;blue&#39;,&#xA;    bar: &#39;green&#39;,&#xA;    baz: &#39;yellow&#39;,&#xA;    foobar: &#39;red&#39;&#xA;  }&#xA;};&#xA;&#xA;const customLevelLogger = winston.createLogger({&#xA;  levels: myCustomLevels.levels&#xA;});&#xA;&#xA;customLevelLogger.foobar(&#39;some foobar level-ed message&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Although there is slight repetition in this data structure, it enables simple encapsulation if you do not want to have colors. If you do wish to have colors, in addition to passing the levels to the Logger itself, you must make winston aware of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;winston.addColors(myCustomLevels.colors);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This enables loggers using the &lt;code&gt;colorize&lt;/code&gt; formatter to appropriately color and style the output of custom levels.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, you can also change background color and font style. For example,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;baz: &#39;italic yellow&#39;,&#xA;foobar: &#39;bold red cyanBG&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Possible options are below.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Font styles: &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;dim&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;underline&lt;/code&gt;, &lt;code&gt;inverse&lt;/code&gt;, &lt;code&gt;hidden&lt;/code&gt;, &lt;code&gt;strikethrough&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Font foreground colors: &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;gray&lt;/code&gt;, &lt;code&gt;grey&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Background colors: &lt;code&gt;blackBG&lt;/code&gt;, &lt;code&gt;redBG&lt;/code&gt;, &lt;code&gt;greenBG&lt;/code&gt;, &lt;code&gt;yellowBG&lt;/code&gt;, &lt;code&gt;blueBG&lt;/code&gt; &lt;code&gt;magentaBG&lt;/code&gt;, &lt;code&gt;cyanBG&lt;/code&gt;, &lt;code&gt;whiteBG&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Colorizing Standard logging levels&lt;/h3&gt; &#xA;&lt;p&gt;To colorize the standard logging level add&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;winston.format.combine(&#xA;  winston.format.colorize(),&#xA;  winston.format.json()&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;where &lt;code&gt;winston.format.json()&lt;/code&gt; is whatever other formatter you want to use. The &lt;code&gt;colorize&lt;/code&gt; formatter must come before any formatters adding text you wish to color.&lt;/p&gt; &#xA;&lt;h2&gt;Transports&lt;/h2&gt; &#xA;&lt;p&gt;There are several &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/docs/transports.md#winston-core&#34;&gt;core transports&lt;/a&gt; included in &lt;code&gt;winston&lt;/code&gt;, which leverage the built-in networking and file I/O offered by Node.js core. In addition, there are &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/docs/transports.md#additional-transports&#34;&gt;additional transports&lt;/a&gt; written by members of the community.&lt;/p&gt; &#xA;&lt;h2&gt;Multiple transports of the same type&lt;/h2&gt; &#xA;&lt;p&gt;It is possible to use multiple transports of the same type e.g. &lt;code&gt;winston.transports.File&lt;/code&gt; when you construct the transport.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  transports: [&#xA;    new winston.transports.File({&#xA;      filename: &#39;combined.log&#39;,&#xA;      level: &#39;info&#39;&#xA;    }),&#xA;    new winston.transports.File({&#xA;      filename: &#39;errors.log&#39;,&#xA;      level: &#39;error&#39;&#xA;    })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you later want to remove one of these transports you can do so by using the transport itself. e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const combinedLogs = logger.transports.find(transport =&amp;gt; {&#xA;  return transport.filename === &#39;combined.log&#39;&#xA;});&#xA;&#xA;logger.remove(combinedLogs);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding Custom Transports&lt;/h2&gt; &#xA;&lt;p&gt;Adding a custom transport is easy. All you need to do is accept any options you need, implement a log() method, and consume it with &lt;code&gt;winston&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const Transport = require(&#39;winston-transport&#39;);&#xA;const util = require(&#39;util&#39;);&#xA;&#xA;//&#xA;// Inherit from `winston-transport` so you can take advantage&#xA;// of the base functionality and `.exceptions.handle()`.&#xA;//&#xA;module.exports = class YourCustomTransport extends Transport {&#xA;  constructor(opts) {&#xA;    super(opts);&#xA;    //&#xA;    // Consume any custom options here. e.g.:&#xA;    // - Connection information for databases&#xA;    // - Authentication information for APIs (e.g. loggly, papertrail,&#xA;    //   logentries, etc.).&#xA;    //&#xA;  }&#xA;&#xA;  log(info, callback) {&#xA;    setImmediate(() =&amp;gt; {&#xA;      this.emit(&#39;logged&#39;, info);&#xA;    });&#xA;&#xA;    // Perform the writing to the remote service&#xA;    callback();&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Common Transport options&lt;/h2&gt; &#xA;&lt;p&gt;As every transport inherits from &lt;a href=&#34;https://github.com/winstonjs/winston-transport&#34;&gt;winston-transport&lt;/a&gt;, it&#39;s possible to set a custom format and a custom log level on each transport separately:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  transports: [&#xA;    new winston.transports.File({&#xA;      filename: &#39;error.log&#39;,&#xA;      level: &#39;error&#39;,&#xA;      format: winston.format.json()&#xA;    }),&#xA;    new transports.Http({&#xA;      level: &#39;warn&#39;,&#xA;      format: winston.format.json()&#xA;    }),&#xA;    new transports.Console({&#xA;      level: &#39;info&#39;,&#xA;      format: winston.format.combine(&#xA;        winston.format.colorize(),&#xA;        winston.format.simple()&#xA;      )&#xA;    })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Exceptions&lt;/h2&gt; &#xA;&lt;h3&gt;Handling Uncaught Exceptions with winston&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;winston&lt;/code&gt;, it is possible to catch and log &lt;code&gt;uncaughtException&lt;/code&gt; events from your process. With your own logger instance you can enable this behavior when it&#39;s created or later on in your applications lifecycle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { createLogger, transports } = require(&#39;winston&#39;);&#xA;&#xA;// Enable exception handling when you create your logger.&#xA;const logger = createLogger({&#xA;  transports: [&#xA;    new transports.File({ filename: &#39;combined.log&#39; })&#xA;  ],&#xA;  exceptionHandlers: [&#xA;    new transports.File({ filename: &#39;exceptions.log&#39; })&#xA;  ]&#xA;});&#xA;&#xA;// Or enable it later on by adding a transport or using `.exceptions.handle`&#xA;const logger = createLogger({&#xA;  transports: [&#xA;    new transports.File({ filename: &#39;combined.log&#39; })&#xA;  ]&#xA;});&#xA;&#xA;// Call exceptions.handle with a transport to handle exceptions&#xA;logger.exceptions.handle(&#xA;  new transports.File({ filename: &#39;exceptions.log&#39; })&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use this feature with the default logger, simply call &lt;code&gt;.exceptions.handle()&lt;/code&gt; with a transport instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// You can add a separate exception logger by passing it to `.exceptions.handle`&#xA;//&#xA;winston.exceptions.handle(&#xA;  new winston.transports.File({ filename: &#39;path/to/exceptions.log&#39; })&#xA;);&#xA;&#xA;//&#xA;// Alternatively you can set `handleExceptions` to true when adding transports&#xA;// to winston.&#xA;//&#xA;winston.add(new winston.transports.File({&#xA;  filename: &#39;path/to/combined.log&#39;,&#xA;  handleExceptions: true&#xA;}));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;To Exit or Not to Exit&lt;/h3&gt; &#xA;&lt;p&gt;By default, winston will exit after logging an uncaughtException. If this is not the behavior you want, set &lt;code&gt;exitOnError = false&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({ exitOnError: false });&#xA;&#xA;//&#xA;// or, like this:&#xA;//&#xA;logger.exitOnError = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When working with custom logger instances, you can pass in separate transports to the &lt;code&gt;exceptionHandlers&lt;/code&gt; property or set &lt;code&gt;handleExceptions&lt;/code&gt; on any transport.&lt;/p&gt; &#xA;&lt;h5&gt;Example 1&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  transports: [&#xA;    new winston.transports.File({ filename: &#39;path/to/combined.log&#39; })&#xA;  ],&#xA;  exceptionHandlers: [&#xA;    new winston.transports.File({ filename: &#39;path/to/exceptions.log&#39; })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Example 2&lt;/h5&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const logger = winston.createLogger({&#xA;  transports: [&#xA;    new winston.transports.Console({&#xA;      handleExceptions: true&#xA;    })&#xA;  ],&#xA;  exitOnError: false&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;exitOnError&lt;/code&gt; option can also be a function to prevent exit on only certain types of errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function ignoreEpipe(err) {&#xA;  return err.code !== &#39;EPIPE&#39;;&#xA;}&#xA;&#xA;const logger = winston.createLogger({ exitOnError: ignoreEpipe });&#xA;&#xA;//&#xA;// or, like this:&#xA;//&#xA;logger.exitOnError = ignoreEpipe;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rejections&lt;/h2&gt; &#xA;&lt;h3&gt;Handling Uncaught Promise Rejections with winston&lt;/h3&gt; &#xA;&lt;p&gt;With &lt;code&gt;winston&lt;/code&gt;, it is possible to catch and log &lt;code&gt;uncaughtRejection&lt;/code&gt; events from your process. With your own logger instance you can enable this behavior when it&#39;s created or later on in your applications lifecycle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { createLogger, transports } = require(&#39;winston&#39;);&#xA;&#xA;// Enable rejection handling when you create your logger.&#xA;const logger = createLogger({&#xA;  transports: [&#xA;    new transports.File({ filename: &#39;combined.log&#39; })&#xA;  ],&#xA;  rejectionHandlers: [&#xA;    new transports.File({ filename: &#39;rejections.log&#39; })&#xA;  ]&#xA;});&#xA;&#xA;// Or enable it later on by adding a transport or using `.rejections.handle`&#xA;const logger = createLogger({&#xA;  transports: [&#xA;    new transports.File({ filename: &#39;combined.log&#39; })&#xA;  ]&#xA;});&#xA;&#xA;// Call rejections.handle with a transport to handle rejections&#xA;logger.rejections.handle(&#xA;  new transports.File({ filename: &#39;rejections.log&#39; })&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to use this feature with the default logger, simply call &lt;code&gt;.rejections.handle()&lt;/code&gt; with a transport instance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// You can add a separate rejection logger by passing it to `.rejections.handle`&#xA;//&#xA;winston.rejections.handle(&#xA;  new winston.transports.File({ filename: &#39;path/to/rejections.log&#39; })&#xA;);&#xA;&#xA;//&#xA;// Alternatively you can set `handleRejections` to true when adding transports&#xA;// to winston.&#xA;//&#xA;winston.add(new winston.transports.File({&#xA;  filename: &#39;path/to/combined.log&#39;,&#xA;  handleRejections: true&#xA;}));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Profiling&lt;/h2&gt; &#xA;&lt;p&gt;In addition to logging messages and metadata, &lt;code&gt;winston&lt;/code&gt; also has a simple profiling mechanism implemented for any logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// Start profile of &#39;test&#39;&#xA;//&#xA;logger.profile(&#39;test&#39;);&#xA;&#xA;setTimeout(function () {&#xA;  //&#xA;  // Stop profile of &#39;test&#39;. Logging will now take place:&#xA;  //   &#39;17 Jan 21:00:00 - info: test duration=1000ms&#39;&#xA;  //&#xA;  logger.profile(&#39;test&#39;);&#xA;}, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also you can start a timer and keep a reference that you can call `.done()`` on:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt; // Returns an object corresponding to a specific timing. When done&#xA; // is called the timer will finish and log the duration. e.g.:&#xA; //&#xA; const profiler = logger.startTimer();&#xA; setTimeout(function () {&#xA;   profiler.done({ message: &#39;Logging message&#39; });&#xA; }, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All profile messages are set to &#39;info&#39; level by default, and both message and metadata are optional. For individual profile messages, you can override the default log level by supplying a metadata object with a &lt;code&gt;level&lt;/code&gt; property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;logger.profile(&#39;test&#39;, { level: &#39;debug&#39; });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Querying Logs&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;winston&lt;/code&gt; supports querying of logs with Loggly-like options. &lt;a href=&#34;https://www.loggly.com/docs/api-retrieving-data/&#34;&gt;See Loggly Search API&lt;/a&gt;. Specifically: &lt;code&gt;File&lt;/code&gt;, &lt;code&gt;Couchdb&lt;/code&gt;, &lt;code&gt;Redis&lt;/code&gt;, &lt;code&gt;Loggly&lt;/code&gt;, &lt;code&gt;Nssocket&lt;/code&gt;, and &lt;code&gt;Http&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const options = {&#xA;  from: new Date() - (24 * 60 * 60 * 1000),&#xA;  until: new Date(),&#xA;  limit: 10,&#xA;  start: 0,&#xA;  order: &#39;desc&#39;,&#xA;  fields: [&#39;message&#39;]&#xA;};&#xA;&#xA;//&#xA;// Find items logged between today and yesterday.&#xA;//&#xA;logger.query(options, function (err, results) {&#xA;  if (err) {&#xA;    /* TODO: handle me */&#xA;    throw err;&#xA;  }&#xA;&#xA;  console.log(results);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Streaming Logs&lt;/h2&gt; &#xA;&lt;p&gt;Streaming allows you to stream your logs back from your chosen transport.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// Start at the end.&#xA;//&#xA;winston.stream({ start: -1 }).on(&#39;log&#39;, function(log) {&#xA;  console.log(log);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;h3&gt;Using the Default Logger&lt;/h3&gt; &#xA;&lt;p&gt;The default logger is accessible through the &lt;code&gt;winston&lt;/code&gt; module directly. Any method that you could call on an instance of a logger is available on the default logger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const winston = require(&#39;winston&#39;);&#xA;&#xA;winston.log(&#39;info&#39;, &#39;Hello distributed log files!&#39;);&#xA;winston.info(&#39;Hello again distributed logs&#39;);&#xA;&#xA;winston.level = &#39;debug&#39;;&#xA;winston.log(&#39;debug&#39;, &#39;Now my debug messages are written to console!&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, no transports are set on the default logger. You must add or remove transports via the &lt;code&gt;add()&lt;/code&gt; and &lt;code&gt;remove()&lt;/code&gt; methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const files = new winston.transports.File({ filename: &#39;combined.log&#39; });&#xA;const console = new winston.transports.Console();&#xA;&#xA;winston.add(console);&#xA;winston.add(files);&#xA;winston.remove(console);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or do it with one call to configure():&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;winston.configure({&#xA;  transports: [&#xA;    new winston.transports.File({ filename: &#39;somefile.log&#39; })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more documentation about working with each individual transport supported by &lt;code&gt;winston&lt;/code&gt; see the &lt;a href=&#34;https://raw.githubusercontent.com/winstonjs/winston/master/docs/transports.md&#34;&gt;&lt;code&gt;winston&lt;/code&gt; Transports&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;h3&gt;Awaiting logs to be written in &lt;code&gt;winston&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Often it is useful to wait for your logs to be written before exiting the process. Each instance of &lt;code&gt;winston.Logger&lt;/code&gt; is also a [Node.js stream]. A &lt;code&gt;finish&lt;/code&gt; event will be raised when all logs have flushed to all transports after the stream has been ended.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const transport = new winston.transports.Console();&#xA;const logger = winston.createLogger({&#xA;  transports: [transport]&#xA;});&#xA;&#xA;logger.on(&#39;finish&#39;, function (info) {&#xA;  // All `info` log messages has now been logged&#xA;});&#xA;&#xA;logger.info(&#39;CHILL WINSTON!&#39;, { seriously: true });&#xA;logger.end();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It is also worth mentioning that the logger also emits an &#39;error&#39; event if an error occurs within the logger itself which you should handle or suppress if you don&#39;t want unhandled exceptions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//&#xA;// Handle errors originating in the logger itself&#xA;//&#xA;logger.on(&#39;error&#39;, function (err) { /* Do Something */ });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with multiple Loggers in winston&lt;/h3&gt; &#xA;&lt;p&gt;Often in larger, more complex, applications it is necessary to have multiple logger instances with different settings. Each logger is responsible for a different feature area (or category). This is exposed in &lt;code&gt;winston&lt;/code&gt; in two ways: through &lt;code&gt;winston.loggers&lt;/code&gt; and instances of &lt;code&gt;winston.Container&lt;/code&gt;. In fact, &lt;code&gt;winston.loggers&lt;/code&gt; is just a predefined instance of &lt;code&gt;winston.Container&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const winston = require(&#39;winston&#39;);&#xA;const { format } = winston;&#xA;const { combine, label, json } = format;&#xA;&#xA;//&#xA;// Configure the logger for `category1`&#xA;//&#xA;winston.loggers.add(&#39;category1&#39;, {&#xA;  format: combine(&#xA;    label({ label: &#39;category one&#39; }),&#xA;    json()&#xA;  ),&#xA;  transports: [&#xA;    new winston.transports.Console({ level: &#39;silly&#39; }),&#xA;    new winston.transports.File({ filename: &#39;somefile.log&#39; })&#xA;  ]&#xA;});&#xA;&#xA;//&#xA;// Configure the logger for `category2`&#xA;//&#xA;winston.loggers.add(&#39;category2&#39;, {&#xA;  format: combine(&#xA;    label({ label: &#39;category two&#39; }),&#xA;    json()&#xA;  ),&#xA;  transports: [&#xA;    new winston.transports.Http({ host: &#39;localhost&#39;, port:8080 })&#xA;  ]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now that your loggers are setup, you can require winston &lt;em&gt;in any file in your application&lt;/em&gt; and access these pre-configured loggers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const winston = require(&#39;winston&#39;);&#xA;&#xA;//&#xA;// Grab your preconfigured loggers&#xA;//&#xA;const category1 = winston.loggers.get(&#39;category1&#39;);&#xA;const category2 = winston.loggers.get(&#39;category2&#39;);&#xA;&#xA;category1.info(&#39;logging to file and console transports&#39;);&#xA;category2.info(&#39;logging to http transport&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you prefer to manage the &lt;code&gt;Container&lt;/code&gt; yourself, you can simply instantiate one:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const winston = require(&#39;winston&#39;);&#xA;const { format } = winston;&#xA;const { combine, label, json } = format;&#xA;&#xA;const container = new winston.Container();&#xA;&#xA;container.add(&#39;category1&#39;, {&#xA;  format: combine(&#xA;    label({ label: &#39;category one&#39; }),&#xA;    json()&#xA;  ),&#xA;  transports: [&#xA;    new winston.transports.Console({ level: &#39;silly&#39; }),&#xA;    new winston.transports.File({ filename: &#39;somefile.log&#39; })&#xA;  ]&#xA;});&#xA;&#xA;const category1 = container.get(&#39;category1&#39;);&#xA;category1.info(&#39;logging to file and console transports&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install winston&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add winston&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run Tests&lt;/h2&gt; &#xA;&lt;p&gt;All of the winston tests are written with &lt;a href=&#34;https://mochajs.org&#34;&gt;&lt;code&gt;mocha&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://github.com/istanbuljs/nyc&#34;&gt;&lt;code&gt;nyc&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://github.com/bigpipe/assume&#34;&gt;&lt;code&gt;assume&lt;/code&gt;&lt;/a&gt;. They can be run with &lt;code&gt;npm&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Author: &lt;a href=&#34;http://github.com/indexzero&#34;&gt;Charlie Robbins&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h4&gt;Contributors: &lt;a href=&#34;https://github.com/jcrugzz&#34;&gt;Jarrett Cruger&lt;/a&gt;, &lt;a href=&#34;https://github.com/dabh&#34;&gt;David Hyde&lt;/a&gt;, &lt;a href=&#34;https://github.com/chrisalderson&#34;&gt;Chris Alderson&lt;/a&gt;&lt;/h4&gt;</summary>
  </entry>
</feed>