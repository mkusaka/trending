<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-31T01:40:01Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>PrismarineJS/mineflayer</title>
    <updated>2023-01-31T01:40:01Z</updated>
    <id>tag:github.com,2023-01-31:/PrismarineJS/mineflayer</id>
    <link href="https://github.com/PrismarineJS/mineflayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create Minecraft bots with a powerful, stable, and high level JavaScript API.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Mineflayer&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/mineflayer&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/mineflayer.svg?color=success&amp;amp;label=npm%20package&amp;amp;logo=npm&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/actions?query=workflow%3A%22CI%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/PrismarineJS/mineflayer/CI.svg?label=CI&amp;amp;logo=github&amp;amp;logoColor=lightgrey&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitpod.io/#https://github.com/PrismarineJS/mineflayer&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?label=try&amp;amp;message=on%20gitpod&amp;amp;color=brightgreen&amp;amp;logo=gitpod&#34; alt=&#34;Try it on gitpod&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?label=open&amp;amp;message=on%20colab&amp;amp;color=blue&amp;amp;logo=google-colab&#34; alt=&#34;Open In Colab&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sponsors/PrismarineJS&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/sponsors/PrismarineJS&#34; alt=&#34;GitHub Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/GsEFRM8&#34;&gt;&lt;img src=&#34;https://img.shields.io/static/v1.svg?label=OFFICIAL&amp;amp;message=DISCORD&amp;amp;color=blue&amp;amp;logo=discord&amp;amp;style=for-the-badge&#34; alt=&#34;Official Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;sub&gt;EN&lt;/sub&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/README.md&#34;&gt;English&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;sub&gt;RU&lt;/sub&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/ru/README_RU.md&#34;&gt;русский&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;sub&gt;ES&lt;/sub&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/es/README_ES.md&#34;&gt;Español&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;sub&gt;FR&lt;/sub&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/fr/README_FR.md&#34;&gt;Français&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;sub&gt;TR&lt;/sub&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/tr/README_TR.md&#34;&gt;Türkçe&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;sub&gt;ZH&lt;/sub&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/zh/README_ZH_CN.md&#34;&gt;中文&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Create Minecraft bots with a powerful, stable, and high level JavaScript &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/api.md&#34;&gt;API&lt;/a&gt;, also usable from Python.&lt;/p&gt; &#xA;&lt;p&gt;First time using Node.js? You may want to start with the &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/tutorial.md&#34;&gt;tutorial&lt;/a&gt;. Know Python? Checkout some &lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/tree/master/examples/python&#34;&gt;Python examples&lt;/a&gt; and try out &lt;a href=&#34;https://colab.research.google.com/github/PrismarineJS/mineflayer/blob/master/docs/mineflayer.ipynb&#34;&gt;Mineflayer on Google Colab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports Minecraft 1.8, 1.9, 1.10, 1.11, 1.12, 1.13, 1.14, 1.15, 1.16, 1.17, 1.18 and 1.19.&lt;/li&gt; &#xA; &lt;li&gt;Entity knowledge and tracking.&lt;/li&gt; &#xA; &lt;li&gt;Block knowledge. You can query the world around you. Milliseconds to find any block.&lt;/li&gt; &#xA; &lt;li&gt;Physics and movement - handle all bounding boxes&lt;/li&gt; &#xA; &lt;li&gt;Attacking entities and using vehicles.&lt;/li&gt; &#xA; &lt;li&gt;Inventory management.&lt;/li&gt; &#xA; &lt;li&gt;Crafting, chests, dispensers, enchantment tables.&lt;/li&gt; &#xA; &lt;li&gt;Digging and building.&lt;/li&gt; &#xA; &lt;li&gt;Miscellaneous stuff such as knowing your health and whether it is raining.&lt;/li&gt; &#xA; &lt;li&gt;Activating blocks and using items.&lt;/li&gt; &#xA; &lt;li&gt;Chat.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;Checkout &lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/wiki/Big-Prismarine-projects&#34;&gt;this page&lt;/a&gt; to see what our current projects are.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;First install Node.js &amp;gt;= 14 from &lt;a href=&#34;https://nodejs.org/&#34;&gt;nodejs.org&lt;/a&gt; then:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;npm install mineflayer&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;link&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/tutorial.md&#34;&gt;tutorial&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Begin with Node.js and mineflayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/FAQ.md&#34;&gt;FAQ.md&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Got a question ? go there first&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/api.md&#34;&gt;api.md&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/unstable_api.md&#34;&gt;unstable_api.md&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The full API reference&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/history.md&#34;&gt;history.md&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The changelog for mineflayer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/tree/master/examples&#34;&gt;examples/&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Checkout all the mineflayer examples&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;Please read &lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and &lt;a href=&#34;https://github.com/PrismarineJS/prismarine-contribute&#34;&gt;prismarine-contribute&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Videos&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tutorial video explaining the basic set up process for a bot can be found &lt;a href=&#34;https://www.youtube.com/watch?v=ltWosy4Z0Kw&#34;&gt;here.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to learn more, more video tutorials are &lt;a href=&#34;https://www.youtube.com/playlist?list=PLh_alXmxHmzGy3FKbo95AkPp5D8849PEV&#34;&gt;there,&lt;/a&gt; and the corresponding source codes for those bots is &lt;a href=&#34;https://github.com/TheDudeFromCI/Mineflayer-Youtube-Tutorials&#34;&gt;there.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=ltWosy4Z0Kw&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/ltWosy4Z0Kw/0.jpg&#34; alt=&#34;tutorial 1&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=UWGSf08wQSc&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/UWGSf08wQSc/0.jpg&#34; alt=&#34;tutorial 2&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=ssWE0kXDGJE&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/ssWE0kXDGJE/0.jpg&#34; alt=&#34;tutorial 3&#34; width=&#34;200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=walbRk20KYU&#34;&gt;&lt;img src=&#34;https://img.youtube.com/vi/walbRk20KYU/0.jpg&#34; alt=&#34;tutorial 4&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Getting Started&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Without a version specified, the version of the server will be guessed automatically. Without auth specified, the mojang auth style will be guessed.&lt;/p&gt; &#xA;&lt;h3&gt;Echo Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const mineflayer = require(&#39;mineflayer&#39;)&#xA;&#xA;const bot = mineflayer.createBot({&#xA;  host: &#39;localhost&#39;, // minecraft server ip&#xA;  username: &#39;email@example.com&#39;, // minecraft username&#xA;  password: &#39;12345678&#39; // minecraft password, comment out if you want to log into online-mode=false servers&#xA;  // port: 25565,                // only set if you need a port that isn&#39;t 25565&#xA;  // version: false,             // only set if you need a specific version or snapshot (ie: &#34;1.8.9&#34; or &#34;1.16.5&#34;), otherwise it&#39;s set automatically&#xA;  // auth: &#39;mojang&#39;              // only set if you need microsoft auth, then set this to &#39;microsoft&#39;&#xA;})&#xA;&#xA;bot.on(&#39;chat&#39;, (username, message) =&amp;gt; {&#xA;  if (username === bot.username) return&#xA;  bot.chat(message)&#xA;})&#xA;&#xA;// Log errors and kick reasons:&#xA;bot.on(&#39;kicked&#39;, console.log)&#xA;bot.on(&#39;error&#39;, console.log)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;See what your bot is doing&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to the &lt;a href=&#34;https://github.com/PrismarineJS/prismarine-viewer&#34;&gt;prismarine-viewer&lt;/a&gt; project, it&#39;s possible to display in a browser window what your bot is doing. Just run &lt;code&gt;npm install prismarine-viewer&lt;/code&gt; and add this to your bot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { mineflayer: mineflayerViewer } = require(&#39;prismarine-viewer&#39;)&#xA;bot.once(&#39;spawn&#39;, () =&amp;gt; {&#xA;  mineflayerViewer(bot, { port: 3007, firstPerson: true }) // port is the minecraft server port, if first person is false, you get a bird&#39;s-eye view&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And you&#39;ll get a &lt;em&gt;live&lt;/em&gt; view looking like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://prismarine.js.org/prismarine-viewer/&#34;&gt;&lt;img src=&#34;https://prismarine.js.org/prismarine-viewer/test_1.16.1.png&#34; alt=&#34;viewer&#34; width=&#34;500&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;More Examples&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;example&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/tree/master/examples/viewer&#34;&gt;viewer&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display your bot world view in the browser&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/tree/master/examples/pathfinder&#34;&gt;pathfinder&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make your bot go to any location automatically&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/raw/master/examples/chest.js&#34;&gt;chest&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Use chests, furnaces, dispensers, enchantment tables&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/raw/master/examples/digger.js&#34;&gt;digger&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Learn how to create a simple bot that is capable of digging blocks&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/raw/master/examples/discord.js&#34;&gt;discord&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Connect a discord bot with a mineflayer bot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/raw/master/examples/jumper.js&#34;&gt;jumper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Learn how to move, jump, ride vehicles, attack nearby entities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/raw/master/examples/ansi.js&#34;&gt;ansi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Display your bot&#39;s chat with all of the chat colors shown in your terminal&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/raw/master/examples/guard.js&#34;&gt;guard&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Make a bot guard a defined area from nearby mobs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/raw/master/examples/multiple_from_file.js&#34;&gt;multiple-from-file&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Add a text file with accounts and have them all login&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;And many mores in the &lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/tree/master/examples&#34;&gt;examples&lt;/a&gt; folder&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;p&gt;A lot of the active development is happening inside of small npm packages which are used by mineflayer.&lt;/p&gt; &#xA;&lt;h4&gt;The Node Way™&lt;/h4&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&#34;When applications are done well, they are just the really application-specific, brackish residue that can&#39;t be so easily abstracted away. All the nice, reusable components sublimate away onto github and npm where everybody can collaborate to advance the commons.&#34; — substack from &lt;a href=&#34;https://gist.github.com/substack/5075355&#34;&gt;&#34;how I write modules&#34;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Modules&lt;/h4&gt; &#xA;&lt;p&gt;These are the main modules that make up mineflayer:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;module&lt;/th&gt; &#xA;   &lt;th&gt;description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/node-minecraft-protocol&#34;&gt;minecraft-protocol&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Parse and serialize minecraft packets, plus authentication and encryption.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/minecraft-data&#34;&gt;minecraft-data&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Language independent module providing minecraft data for minecraft clients, servers and libraries.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-physics&#34;&gt;prismarine-physics&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Provide the physics engine for minecraft entities&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-chunk&#34;&gt;prismarine-chunk&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A class to hold chunk data for Minecraft&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/node-vec3&#34;&gt;node-vec3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;3d vector math with robust unit tests&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-block&#34;&gt;prismarine-block&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Represent a minecraft block with its associated data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-chat&#34;&gt;prismarine-chat&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A parser for a minecraft chat message (extracted from mineflayer)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/node-yggdrasil&#34;&gt;node-yggdrasil&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Node.js library to interact with Mojang&#39;s authentication system, known as Yggdrasil&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-world&#34;&gt;prismarine-world&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The core implementation of worlds for prismarine&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-windows&#34;&gt;prismarine-windows&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Represent minecraft windows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-item&#34;&gt;prismarine-item&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Represent a minecraft item with its associated data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-nbt&#34;&gt;prismarine-nbt&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An NBT parser for node-minecraft-protocol&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-recipe&#34;&gt;prismarine-recipe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Represent minecraft recipes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-biome&#34;&gt;prismarine-biome&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Represent a minecraft biome with its associated data&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-entity&#34;&gt;prismarine-entity&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Represent a minecraft entity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Debug&lt;/h3&gt; &#xA;&lt;p&gt;You can enable some protocol debugging output using &lt;code&gt;DEBUG&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;DEBUG=&#34;minecraft-protocol&#34; node [...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On windows :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;set DEBUG=minecraft-protocol&#xA;node your_script.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Third Party Plugins&lt;/h2&gt; &#xA;&lt;p&gt;Mineflayer is pluggable; anyone can create a plugin that adds an even higher level API on top of Mineflayer.&lt;/p&gt; &#xA;&lt;p&gt;The most updated and useful are :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Karang/mineflayer-pathfinder&#34;&gt;pathfinder&lt;/a&gt; - advanced A* pathfinding with a lot of configurable features&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PrismarineJS/prismarine-viewer&#34;&gt;prismarine-viewer&lt;/a&gt; - simple web chunk viewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ImHarvol/mineflayer-web-inventory&#34;&gt;web-inventory&lt;/a&gt; - web based inventory viewer&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheDudeFromCI/mineflayer-statemachine&#34;&gt;statemachine&lt;/a&gt; - A state machine API for more complex bot behaviors&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/G07cha/MineflayerArmorManager&#34;&gt;Armor Manager&lt;/a&gt; - automatic armor management&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheDudeFromCI/mineflayer-collectblock&#34;&gt;Collect Block&lt;/a&gt; - Quick and simple block collection API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wvffle/mineflayer-dashboard&#34;&gt;Dashboard&lt;/a&gt; - Frontend dashboard for mineflayer bot&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheDudeFromCI/mineflayer-pvp&#34;&gt;PVP&lt;/a&gt; - Easy API for basic PVP and PVE.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/link-discord/mineflayer-auto-eat&#34;&gt;Auto Eat&lt;/a&gt; - Automatic eating of food.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/link-discord/mineflayer-autocrystal&#34;&gt;Auto Crystal&lt;/a&gt; - Automatic placing &amp;amp; breaking of end crystals.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/TheDudeFromCI/mineflayer-tool&#34;&gt;Tool&lt;/a&gt; - A utility for automatic tool/weapon selection with a high level API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sefirosweb/minecraftHawkEye&#34;&gt;Hawkeye&lt;/a&gt; - A utility for using auto-aim with bows.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firejoust/mineflayer-GUI&#34;&gt;GUI&lt;/a&gt; - Interact with nested GUI windows using async/await&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firejoust/mineflayer-projectile&#34;&gt;Projectile&lt;/a&gt; - Get the required launch angle for projectiles&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/firejoust/mineflayer-movement&#34;&gt;Movement&lt;/a&gt; - Smooth and realistic player movement, best suited for PvP&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;But also check out :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andrewrk/mineflayer-radar/&#34;&gt;radar&lt;/a&gt; - web based radar interface using canvas and socket.io. &lt;a href=&#34;https://www.youtube.com/watch?v=FjDmAfcVulQ&#34;&gt;YouTube Demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/G07cha/MineflayerAutoAuth&#34;&gt;auto-auth&lt;/a&gt; - chat-based bot authentication&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Nixes/mineflayer-bloodhound&#34;&gt;Bloodhound&lt;/a&gt; - determine who and what is responsible for damage to another entity&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SiebeDW/mineflayer-tps&#34;&gt;tps&lt;/a&gt; - get the current tps (processed tps)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/IceTank/mineflayer-panorama&#34;&gt;panorama&lt;/a&gt; - take Panorama Images of your world&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tuanzisama/mineflayer-death-event&#34;&gt;player-death-event&lt;/a&gt; - emit player death event in Mineflayer.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Projects Using Mineflayer&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rom1504/rbot&#34;&gt;rom1504/rbot&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=UM1ZV5200S0&#34;&gt;YouTube - building a spiral staircase&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=0cQxg9uDnzA&#34;&gt;YouTube - replicating a building&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Darthfett/Helperbot&#34;&gt;Darthfett/Helperbot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vogonistic/mineflayer-voxel&#34;&gt;vogonistic/voxel&lt;/a&gt; - visualize what the bot is up to using voxel.js&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JonnyD/Skynet&#34;&gt;JonnyD/Skynet&lt;/a&gt; - log player activity onto an online API&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rom1504/MinecraftChat&#34;&gt;MinecraftChat&lt;/a&gt; (last open source version, built by AlexKvazos) - Minecraft web based chat client &lt;a href=&#34;https://minecraftchat.net/&#34;&gt;https://minecraftchat.net/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Minecheesecraft/Cheese-Bot&#34;&gt;Cheese Bot&lt;/a&gt; - Plugin based bot with a clean GUI. Made with Node-Webkit.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/schematical/chaoscraft&#34;&gt;Chaoscraft&lt;/a&gt; - Minecraft bot using genetic algorithms, see &lt;a href=&#34;https://www.youtube.com/playlist?list=PLLkpLgU9B5xJ7Qy4kOyBJl5J6zsDIMceH&#34;&gt;its youtube videos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hexatester/minetelegram&#34;&gt;hexatester/minetelegram&lt;/a&gt; - Minecraft - Telegram bridge, build on top of mineflayer &amp;amp; telegraf.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer-builder&#34;&gt;PrismarineJS/mineflayer-builder&lt;/a&gt; - Prints minecraft schematics in survival, keeping orientation&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/PrismarineJS/mineflayer/network/dependents&#34;&gt;and hundreds more&lt;/a&gt; - All the projects that github detected are using mineflayer&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;h3&gt;Testing everything&lt;/h3&gt; &#xA;&lt;p&gt;Simply run: &lt;code&gt;npm test&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Testing specific version&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;npm run mocha_test -- -g &amp;lt;version&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; is a minecraft version like &lt;code&gt;1.12&lt;/code&gt;, &lt;code&gt;1.15.2&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;h3&gt;Testing specific test&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;npm run mocha_test -- -g &amp;lt;test_name&amp;gt;&lt;/code&gt;, where &lt;code&gt;&amp;lt;test_name&amp;gt;&lt;/code&gt; is a name of the test like &lt;code&gt;bed&lt;/code&gt;, &lt;code&gt;useChests&lt;/code&gt;, &lt;code&gt;rayTrace&lt;/code&gt;...&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;npm run mocha_test -- -g &#34;1.18.1.*BlockFinder&#34;&lt;/code&gt; to run the block finder test for 1.18.1&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/PrismarineJS/mineflayer/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>LNReader/lnreader</title>
    <updated>2023-01-31T01:40:01Z</updated>
    <id>tag:github.com,2023-01-31:/LNReader/lnreader</id>
    <link href="https://github.com/LNReader/lnreader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Light novel reader for Android.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LNReader/lnreader/main/.github/readme-images/icon_alt.png&#34; align=&#34;center&#34; width=&#34;128&#34;&gt; &lt;/p&gt;&#xA;&lt;p&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt; LNReader &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; LNReader is a Tachiyomi-like, free and open source light novel reader for Android. &lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/LNReader/lnreader/actions/workflows/build.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status&#34; src=&#34;https://img.shields.io/github/workflow/status/LNReader/lnreader/CI&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://discord.gg/QdcWN4MD63&#34;&gt; &lt;img alt=&#34;Discord Chat&#34; src=&#34;https://img.shields.io/discord/835746409357246465.svg?logo=discord&amp;amp;logoColor=white&amp;amp;logoWidth=20&amp;amp;labelColor=7289DA&amp;amp;label=Discord&amp;amp;color=17cf48&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/LNReader/lnreader/releases/latest&#34;&gt; &lt;img alt=&#34;GitHub release (latest by date)&#34; src=&#34;https://img.shields.io/github/v/release/LNReader/lnreader&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/LNReader/lnreader-preview/releases/latest&#34;&gt; &lt;img alt=&#34;GitHub release (latest SemVer)&#34; src=&#34;https://img.shields.io/github/v/release/LNReader/lnreader-preview?color=red&amp;amp;label=preview&#34;&gt; &lt;/a&gt; &#xA; &lt;a title=&#34;Crowdin&#34; target=&#34;_blank&#34; href=&#34;https://crowdin.com/project/lnreader&#34;&gt;&lt;img src=&#34;https://badges.crowdin.net/lnreader/localized.svg?sanitize=true&#34;&gt;&lt;/a&gt; &#xA; &lt;a href=&#34;https://github.com/LNReader/lnreader/raw/main/LICENSE&#34;&gt; &lt;img alt=&#34;GitHub&#34; src=&#34;https://img.shields.io/github/license/LNReader/lnreader&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/LNReader/lnreader/main/.github/readme-images/screenshots.png&#34; align=&#34;center&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;Get the app from our &lt;a href=&#34;https://github.com/rajarsheechatterjee/LNReader/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Sources&lt;/h2&gt; &#xA;&lt;p&gt;LNReader does not have any affiliation with the content providers available.&lt;/p&gt; &#xA;&lt;p&gt;Source requests should be created at &lt;a href=&#34;https://github.com/LNReader/lnreader-sources&#34;&gt;LNReader/lnreader-sources&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rajarsheechatterjee/lnreader/raw/main/LICENSE&#34;&gt;MIT &lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>azl397985856/leetcode</title>
    <updated>2023-01-31T01:40:01Z</updated>
    <id>tag:github.com,2023-01-31:/azl397985856/leetcode</id>
    <link href="https://github.com/azl397985856/leetcode" rel="alternate"></link>
    <summary type="html">&lt;p&gt;推荐刷题网站：https://www.lintcode.com/?utm_source=tf-github-lucifer2022 LeetCode Solutions: A Record of My Problem Solving Journey.( leetcode题解，记录自己的leetcode解题之路。)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;LeetCode&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://p.ipic.vip/k4pv1r.jpg&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://p.ipic.vip/32nfgh.jpg&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://p.ipic.vip/4a36ao.jpg&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://p.ipic.vip/fd1f82.jpg&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://p.ipic.vip/mhz5uy.jpg&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt; &lt;a href=&#34;&#34;&gt;&lt;img src=&#34;https://p.ipic.vip/gp1hvz.jpg&#34; alt=&#34;Travis&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/#%E5%93%AA%E9%87%8C%E8%83%BD%E6%89%BE%E5%88%B0%E6%88%91&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/WeChat-%E5%BE%AE%E4%BF%A1%E7%BE%A4-brightgreen&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/#%E5%93%AA%E9%87%8C%E8%83%BD%E6%89%BE%E5%88%B0%E6%88%91&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%E5%85%AC%E4%BC%97%E5%8F%B7-%E5%8A%9B%E6%89%A3%E5%8A%A0%E5%8A%A0-blueviolet&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://p.ipic.vip/pj4t8y.jpg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Juejin-%E6%8E%98%E9%87%91-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://p.ipic.vip/n9co7k.jpg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Zhihu-%E7%9F%A5%E4%B9%8E-blue&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://p.ipic.vip/m7g3to.jpg&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/bilili-%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9-ff69b4&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;简体中文 | &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/README.en.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;我们的 slogan 是： &lt;strong&gt;只有熟练掌握基础的数据结构与算法，才能对复杂问题迎刃有余。&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔥🔥🔥 我的《算法通关之路》出版了 🔥🔥🔥&lt;/h2&gt; &#xA;&lt;p&gt;我的新书《算法通关之路》出版了。&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p.ipic.vip/zo8cz5.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://union-click.jd.com/jdc?e=618%7Cpc%7C&amp;amp;p=JF8BAOAJK1olXgEGUV9cAE4VCl8IGloXWgYCV1tcAE8TBl9MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFksWAm0PG1sWWAcKUFpYFxJSXzI4GAhrA0IDUiM-FjFxQQtKWFx2AlkYElJROEonA24JG1MQWgMEUW5tCEwnQgEIGlkdXAQHUW5cOEsQBmkNElwWXgYGUFxtD0seMzRddVwVWFVWB10PXxtDVDo4K2sWbQECXRMcWgYnM284GGtXMwUKAw5VDEpDA2oBGl4SXwELUF5fCkkQVDtdH1JGX1EAZFxcCU8eMw&#34;&gt;实体版购书链接 1&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://union-click.jd.com/jdc?e=618%7Cpc%7C&amp;amp;p=JF8BAM0JK1olXDYCV1ZfC0kWB19MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFksUC20LGVoRQl9HCANtQDt-RAZPBQFwJ0ZEA1hDWh9wdTB2a1cZbQcyVF9cCEMSBGoOHmslXQEyAjBdCUoWAm4NG14WbQcyVFlYDk4eBG8LG1gUXzYFVFdtUx55BG8NSA9GXlRVBAoKXXsnM2w4HFscEEdQGW5tCHsUMy1mE14WDQcCUVxfWk9EBmkOSQsWDwVSVwpcWEoXUG5aElslXwcDUFdt&#34;&gt;实体版购书链接 2&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://union-click.jd.com/jdc?e=&amp;amp;p=JF8BAL0JK1olXDYAVVhfD04UAl9MRANLAjZbERscSkAJHTdNTwcKBlMdBgABFkkWBW0PHlgUQl9HCANtcS0SdTFvWVt1X3BkVV4Kc0JxYRtPe1cZbQcyVF9cCEMSBGoOHmslXQEyHzBcOEonA2gKE1oVWwEKXV5cAXsQA2Y4QA57WgYHBwoOCxlAUztfTmslbQUyZG5dOEgnQQFaSQ5FWQYFB1cODhgSVDpaS1hFDwQLUlwJAU5DAWcJHWsXXAcGXW4&#34;&gt;电子版购书链接&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;📘&lt;/span&gt; 电子书&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;注意：这里的电子书并不是《算法通关之路》的电子版，而是本仓库内容的电子版！&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leetcode-solution-leetcode-pp.gitbook.io/leetcode-solution/&#34;&gt;在线阅读地址&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;限时免费下载！后期随时可能收费&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;可以去我的公众号《力扣加加》后台回复电子书获取！&lt;/p&gt; &#xA;&lt;img src=&#34;https://p.ipic.vip/h9nm77.jpg&#34; width=&#34;100%&#34;&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;epub 还是有动图的&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;另外有些内容只在公众号发布，因此大家觉得内容不错的话，可以关注一下。如果再给 ➕ 个星标就更棒啦！&lt;/p&gt; &#xA;&lt;h2&gt;图片加载不出来如何解决？&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fe-lucifer/fanqiang&#34;&gt;https://github.com/fe-lucifer/fanqiang&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;九章算法班&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p.ipic.vip/iyzbvl.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;九章算法，由北大、清华校友于美国硅谷创办，已帮助数十万 IT 程序员找到高薪 offer! 提供 1 对 1 求职指导、算法指导、前后端项目、简历代笔等服务。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;推荐刷题网站：&lt;a href=&#34;https://www.lintcode.com/?utm_source=tf-github-lucifer2022&#34;&gt;www.lintcode.com&lt;/a&gt;， 戳此免费领取 7 天&lt;a href=&#34;https://www.lintcode.com/vip/activity/zWIMOY&#34;&gt;LintCode 超级 Vip&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;推荐北大 FB 双料大神的&lt;a href=&#34;https://www.jiuzhang.com/course/71/?utm_source=tf-github-lucifer2022&#34;&gt;《九章算法班》&lt;/a&gt;，有人靠他连拿 3 个大厂 offer&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p.ipic.vip/8a4bul.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;📆&lt;/span&gt;《91 天学算法》限时活动&lt;/h2&gt; &#xA;&lt;p&gt;很多教育机构宣传的 7 天，一个月搞定算法面试的，我大概都了解了下，不怎么靠谱。学习算法这东西，还是要靠积累，没有量变是不可能有质变的。还有的人选择看书，这是一个不错的选择。但是很多人选了过时的或者质量差的书，又或者不会去写书中给的练习题，导致效果很差。&lt;/p&gt; &#xA;&lt;p&gt;基于这几个原因，我组织了一个 91 天刷题活动，通过一个相对比较长的时间（91 天）给出最新的学习路径，并强制大家打卡这种高强度练习来让大家&lt;strong&gt;在 91 天后遇见更好的自己&lt;/strong&gt;。详细活动介绍可以点下方链接查看。另外往期的讲义也在下面了，大家可以看看合不合你的口味。&lt;/p&gt; &#xA;&lt;p&gt;最后送给大家一句话： &lt;strong&gt;坚持下去，会有突然间成长的一天&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/azl397985856/leetcode/discussions/532&#34;&gt;点此参与&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🔥🔥🔥🔥 &lt;a href=&#34;https://leetcode-solution.cn/91&#34;&gt;活动首页&lt;/a&gt; 🔥🔥🔥🔥&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-1.md&#34;&gt;91 第三期讲义 - 二分专题（上）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-2.md&#34;&gt;91 第三期讲义 - 二分专题（下）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;1V1 辅导&lt;/h2&gt; &#xA;&lt;p&gt;如果大家觉得上面的集体活动效率比较低，我目前也接受 1v1 算法辅导，价格根据你的算法基础以及想要学习的内容而定感兴趣的可以加我微信，备注“算法辅导”，微信号 DevelopeEngineer。&lt;/p&gt; &#xA;&lt;h2&gt;&lt;img alt=&#34;octocat&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/octocat.png?v8&#34;&gt;) 仓库介绍&lt;/h2&gt; &#xA;&lt;p&gt;leetcode 题解，记录自己的 leetcode 解题之路。&lt;/p&gt; &#xA;&lt;p&gt;本仓库目前分为&lt;strong&gt;五个&lt;/strong&gt;部分：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;第一个部分是 leetcode 经典题目的解析，包括思路，关键点和具体的代码实现。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第二部分是对于数据结构与算法的总结&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第三部分是 anki 卡片， 将 leetcode 题目按照一定的方式记录在 anki 中，方便大家记忆。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第四部分是每日一题，每日一题是在交流群（包括微信和 qq）里进行的一种活动，大家一起 解一道题，这样讨论问题更加集中，会得到更多的反馈。而且 这些题目可以被记录下来，日后会进行筛选添加到仓库的题解模块。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;第五部分是计划， 这里会记录将来要加入到以上三个部分内容&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🍖&lt;/span&gt; 仓库食用指南&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;这里有一张互联网公司面试中经常考察的问题类型总结的思维导图，我们可以结合图片中的信息分析一下。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p.ipic.vip/a20o3x.jpg&#34; alt=&#34;leetcode-zhihu&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;（图片来自 leetcode)&lt;/p&gt; &#xA;&lt;p&gt;其中算法，主要是以下几种：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基础技巧：分治、二分、贪心&lt;/li&gt; &#xA; &lt;li&gt;排序算法：快速排序、归并排序、计数排序&lt;/li&gt; &#xA; &lt;li&gt;搜索算法：回溯、递归、深度优先遍历，广度优先遍历，二叉搜索树等&lt;/li&gt; &#xA; &lt;li&gt;图论：最短路径、最小生成树&lt;/li&gt; &#xA; &lt;li&gt;动态规划：背包问题、最长子序列&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;数据结构，主要有如下几种：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;数组与链表：单 / 双向链表&lt;/li&gt; &#xA; &lt;li&gt;栈与队列&lt;/li&gt; &#xA; &lt;li&gt;哈希表&lt;/li&gt; &#xA; &lt;li&gt;堆：最大堆 ／ 最小堆&lt;/li&gt; &#xA; &lt;li&gt;树与图：最近公共祖先、并查集&lt;/li&gt; &#xA; &lt;li&gt;字符串：前缀树（字典树） ／ 后缀树&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;我在网上找到一份 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/assets/cheatsheet.pdf&#34;&gt;《Interview Cheat Sheet》&lt;/a&gt;，这个 PDF 列举了面试的&lt;strong&gt;模板步骤&lt;/strong&gt;。，详细指示了如何一步步完成面试。&lt;/p&gt; &#xA;&lt;p&gt;这个 pdf 开头就提到了好的代码三个标准：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;可读性&lt;/li&gt; &#xA; &lt;li&gt;时间复杂度&lt;/li&gt; &#xA; &lt;li&gt;空间复杂度&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;这写的太好了。&lt;/p&gt; &#xA;&lt;p&gt;紧接着，列举了 15 算法面试的步骤。比如步骤一：&lt;strong&gt;当面试官提问完后，你需要先下来关键点（之后再下面写注释和代码）&lt;/strong&gt; 看完我的感受就是，&lt;strong&gt;面试只要按照这个来做，成功率蹭蹭提升&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;数据结构与算法的总结&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/basic-data-structure.md&#34;&gt;数据结构总览&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/linked-list.md&#34;&gt;链表专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/tree.md&#34;&gt;树专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/heap.md&#34;&gt;堆专题（上）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/heap-2.md&#34;&gt;堆专题（下）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-1.md&#34;&gt;二分专题（上）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-search-2.md&#34;&gt;二分专题（下）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- - [基础算法](./thinkings/basic-algorithm.md) --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/dynamic-programming.md&#34;&gt;动态规划（重置版）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/search.md&#34;&gt;大话搜索&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/binary-tree-traversal.md&#34;&gt;二叉树的遍历&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/backtrack.md&#34;&gt;回溯&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/run-length-encode-and-huffman-encode.md&#34;&gt;哈夫曼编码和游程编码&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/bloom-filter.md&#34;&gt;布隆过滤器&lt;/a&gt;🖊&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/trie.md&#34;&gt;前缀树&lt;/a&gt;🖊&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/02/03/leetcode-%E6%88%91%E7%9A%84%E6%97%A5%E7%A8%8B%E5%AE%89%E6%8E%92%E8%A1%A8%E7%B3%BB%E5%88%97/&#34;&gt;《日程安排》专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/02/08/%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%93%E9%A2%98/&#34;&gt;《构造二叉树》专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/slide-window.md&#34;&gt;滑动窗口（思路 + 模板）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/bit.md&#34;&gt;位运算&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/island.md&#34;&gt;小岛问题&lt;/a&gt;🖊&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/GCD.md&#34;&gt;最大公约数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/union-find.md&#34;&gt;并查集&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/balanced-tree.md&#34;&gt;平衡二叉树专题&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/reservoid-sampling.md&#34;&gt;蓄水池抽样&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thinkings/monotone-stack.md&#34;&gt;单调栈&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;❗&lt;/span&gt; 怎么刷 LeetCode？&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/280279208/answer/824585814&#34;&gt;我是如何刷 LeetCode 的&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zhihu.com/question/321738058/answer/1279464192&#34;&gt;算法小白如何高效、快速刷 leetcode？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/06/06/algo-chrome-extension/&#34;&gt;刷题效率低？或许你就差这么一个插件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lucifer.ren/blog/2020/08/16/leetcode-cheat/&#34;&gt;力扣刷题插件&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💻&lt;/span&gt; 插件&lt;/h2&gt; &#xA;&lt;p&gt;或许是一个可以改变你刷题效率的浏览器扩展插件。&lt;/p&gt; &#xA;&lt;p&gt;插件地址：&lt;a href=&#34;https://chrome.google.com/webstore/detail/leetcode-cheatsheet/fniccleejlofifaakbgppmbbcdfjonle?hl=en-US&#34;&gt;https://chrome.google.com/webstore/detail/leetcode-cheatsheet/fniccleejlofifaakbgppmbbcdfjonle?hl=en-US&lt;/a&gt;。&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;不能访问谷歌商店的朋友可以去我的公众号回复插件获取离线版。强烈推荐大家使用谷歌商店安装， 这样如果有更新可以自动安装，毕竟咱们的插件更新还是蛮快的。&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;另外大家也可以使用 zerotrac 开发的用于计算力扣中题目分数的网站。这里的分数指的是竞赛分，大家可以根据自己的竞赛分选择稍微比自己竞赛分高一点的题目进行练习，注意这个只是根据通过人数等计算的一个预估分数。地址：&lt;a href=&#34;https://zerotrac.github.io/leetcode_problem_rating/&#34;&gt;https://zerotrac.github.io/leetcode_problem_rating/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;精选题解&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/a-deleted.md&#34;&gt;字典序列删除&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/atMostK.md&#34;&gt;一次搞定前缀和&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/byte-dance-algo-ex.md&#34;&gt;字节跳动的算法面试题是什么难度？&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/byte-dance-algo-ex-2017.md&#34;&gt;字节跳动的算法面试题是什么难度？（第二弹）&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/mother-01.md&#34;&gt;《我是你的妈妈呀》 - 第一期&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/serialize.md&#34;&gt;一文带你看懂二叉树的序列化&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/LIS.md&#34;&gt;穿上衣服我就不认识你了？来聊聊最长上升子序列&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/LCS.md&#34;&gt;你的衣服我扒了 - 《最长公共子序列》&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/selected/LSS.md&#34;&gt;一文看懂《最大子序列和问题》&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;leetcode 经典题目的解析（200 多道）&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;这里仅列举具有&lt;strong&gt;代表性题目&lt;/strong&gt;，并不是全部题目&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;目前更新了 200 多道题解，加上专题涉及的题目，差不多有 &lt;strong&gt;300 道&lt;/strong&gt;。&lt;/p&gt; &#xA;&lt;h3&gt;简单难度题目合集&lt;/h3&gt; &#xA;&lt;p&gt;这里的题目难度比较小， 大多是模拟题，或者是很容易看出解法的题目，另外简单题目一般使用暴力法都是可以解决的。 这个时候只有看一下数据范围，思考下你的算法复杂度就行了。&lt;/p&gt; &#xA;&lt;p&gt;当然也不排除很多 hard 题目也可以暴力模拟，大家平时多注意数据范围即可。&lt;/p&gt; &#xA;&lt;p&gt;以下是我列举的经典题目（带 91 字样的表示出自 &lt;strong&gt;91 天学算法&lt;/strong&gt;活动）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/binode-lcci.md&#34;&gt;面试题 17.12. BiNode&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1.two-sum.md&#34;&gt;0001. 两数之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/20.valid-parentheses.md&#34;&gt;0020. 有效的括号&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/21.merge-two-sorted-lists.md&#34;&gt;0021. 合并两个有序链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/26.remove-duplicates-from-sorted-array.md&#34;&gt;0026. 删除排序数组中的重复项&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/53.maximum-sum-subarray-cn.md&#34;&gt;0053. 最大子序和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/66.plus-one.md&#34;&gt;0066. 加一&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/88.merge-sorted-array.md&#34;&gt;0088. 合并两个有序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/101.symmetric-tree.md&#34;&gt;0101. 对称二叉树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/104.maximum-depth-of-binary-tree.md&#34;&gt;0104. 二叉树的最大深度&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/108.convert-sorted-array-to-binary-search-tree.md&#34;&gt;0108. 将有序数组转换为二叉搜索树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/121.best-time-to-buy-and-sell-stock.md&#34;&gt;0121. 买卖股票的最佳时机&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/122.best-time-to-buy-and-sell-stock-ii.md&#34;&gt;0122. 买卖股票的最佳时机 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/125.valid-palindrome.md&#34;&gt;0125. 验证回文串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/136.single-number.md&#34;&gt;0136. 只出现一次的数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/155.min-stack.md&#34;&gt;0155. 最小栈&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/160.Intersection-of-Two-Linked-Lists.md&#34;&gt;0160. 相交链表&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/167.two-sum-ii-input-array-is-sorted.md&#34;&gt;0167. 两数之和 II 输入有序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/169.majority-element.md&#34;&gt;0169. 多数元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/172.factorial-trailing-zeroes.md&#34;&gt;0172. 阶乘后的零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/190.reverse-bits.md&#34;&gt;0190. 颠倒二进制位&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/191.number-of-1-bits.md&#34;&gt;0191. 位 1 的个数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/198.house-robber.md&#34;&gt;0198. 打家劫舍&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/203.remove-linked-list-elements.md&#34;&gt;0203. 移除链表元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/206.reverse-linked-list.md&#34;&gt;0206. 反转链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/219.contains-duplicate-ii.md&#34;&gt;0219. 存在重复元素 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/226.invert-binary-tree.md&#34;&gt;0226. 翻转二叉树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/232.implement-queue-using-stacks.md&#34;&gt;0232. 用栈实现队列&lt;/a&gt; 👍 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/263.ugly-number.md&#34;&gt;0263. 丑数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/283.move-zeroes.md&#34;&gt;0283. 移动零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/342.power-of-four.md&#34;&gt;0342. 4 的幂&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/349.intersection-of-two-arrays.md&#34;&gt;0349. 两个数组的交集&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/371.sum-of-two-integers.md&#34;&gt;0371. 两整数之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/401.binary-watch.md&#34;&gt;401. 二进制手表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/437.path-sum-iii.md&#34;&gt;0437. 路径总和 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/455.AssignCookies.md&#34;&gt;0455. 分发饼干&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/504.base-7.md&#34;&gt;0504. 七进制数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/575.distribute-candies.md&#34;&gt;0575. 分糖果&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/606.construct-string-from-binary-tree.md&#34;&gt;0606. 根据二叉树创建字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/661.image-smoother.md&#34;&gt;0661. 图片平滑器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/665.non-decreasing-array.md&#34;&gt;0665. 非递减数列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/821.shortest-distance-to-a-character.md&#34;&gt;821. 字符的最短距离&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/874.walking-robot-simulation.md&#34;&gt;0874. 模拟行走机器人&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1128.number-of-equivalent-domino-pairs.md&#34;&gt;1128. 等价多米诺骨牌对的数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1260.shift-2d-grid.md&#34;&gt;1260. 二维网格迁移&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1332.remove-palindromic-subsequences.md&#34;&gt;1332. 删除回文子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;中等难度题目合集&lt;/h3&gt; &#xA;&lt;p&gt;中等题目是力扣比例最大的部分，因此这部分我的题解也是最多的。 大家不要太过追求难题，先把中等难度题目做熟了再说。&lt;/p&gt; &#xA;&lt;p&gt;这部分的题目要不需要我们挖掘题目的内含信息， 将其抽象成简单题目。 要么是一些写起来比较麻烦的题目， 一些人编码能力不行就挂了。因此大家一定要自己做， 即使看了题解 ”会了“，也要自己码一遍。自己不亲自写一遍，里面的细节永远不知道。&lt;/p&gt; &#xA;&lt;p&gt;以下是我列举的经典题目（带 91 字样的表示出自 &lt;strong&gt;91 天学算法&lt;/strong&gt;活动）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/get-kth-magic-number-lcci.md&#34;&gt;面试题 17.09. 第 k 个数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/max-black-square-lcci.md&#34;&gt;面试题 17.23. 最大黑方阵&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/sub-sort-lcci.md&#34;&gt;面试题 16.16. 部分排序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Increasing-Digits.md&#34;&gt;Increasing Digits&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Longest-Contiguously-Strictly-Increasing-Sublist-After-Deletion.md&#34;&gt;Longest Contiguously Strictly Increasing Sublist After Deletion&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/consecutive-wins.md&#34;&gt;Consecutive Wins&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Sort-String-by-Flipping.md&#34;&gt;Sort-String-by-Flipping&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Number-of-Substrings-with-Single-Character-Difference.md&#34;&gt;Number of Substrings with Single Character Difference&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Bus-Fare.md&#34;&gt;Bus Fare&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Minimum-Dropping-Path-Sum.md&#34;&gt;Minimum Dropping Path Sum&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Longest-Matrix-Path-Length.md&#34;&gt;Longest-Matrix-Path-Length&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Every-Sublist-Min-Sum.md&#34;&gt;Every Sublist Min Sum&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Maximize-the-Number-of-Equivalent-Pairs-After-Swaps.md&#34;&gt;Maximize the Number of Equivalent Pairs After Swaps&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2.add-two-numbers.md&#34;&gt;0002. 两数相加&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/3.longest-substring-without-repeating-characters.md&#34;&gt;0003. 无重复字符的最长子串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5.longest-palindromic-substring.md&#34;&gt;0005. 最长回文子串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/11.container-with-most-water.md&#34;&gt;0011. 盛最多水的容器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/15.3sum.md&#34;&gt;0015. 三数之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/17.Letter-Combinations-of-a-Phone-Number.md&#34;&gt;0017. 电话号码的字母组合&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/19.removeNthNodeFromEndofList.md&#34;&gt;0019. 删除链表的倒数第 N 个节点&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/22.generate-parentheses.md&#34;&gt;0022. 括号生成&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/24.swapNodesInPairs.md&#34;&gt;0024. 两两交换链表中的节点&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/29.divide-two-integers.md&#34;&gt;0029. 两数相除&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/31.next-permutation.md&#34;&gt;0031. 下一个排列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/33.search-in-rotated-sorted-array.md&#34;&gt;0033. 搜索旋转排序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/39.combination-sum.md&#34;&gt;0039. 组合总和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/40.combination-sum-ii.md&#34;&gt;0040. 组合总和 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/46.permutations.md&#34;&gt;0046. 全排列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/47.permutations-ii.md&#34;&gt;0047. 全排列 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/48.rotate-image.md&#34;&gt;0048. 旋转图像&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/49.group-anagrams.md&#34;&gt;0049. 字母异位词分组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/50.pow-x-n.md&#34;&gt;0050. Pow(x, n)&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/55.jump-game.md&#34;&gt;0055. 跳跃游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/56.merge-intervals.md&#34;&gt;0056. 合并区间&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/60.permutation-sequence.md&#34;&gt;0060. 第 k 个排列&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/61.Rotate-List.md&#34;&gt;0061. 旋转链表&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/62.unique-paths.md&#34;&gt;0062. 不同路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/73.set-matrix-zeroes.md&#34;&gt;0073. 矩阵置零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/75.sort-colors.md&#34;&gt;0075. 颜色分类&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/78.subsets.md&#34;&gt;0078. 子集&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/79.word-search.md&#34;&gt;0079. 单词搜索&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/80.remove-duplicates-from-sorted-array-ii.md&#34;&gt;0080. 删除排序数组中的重复项 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/86.partition-list.md&#34;&gt;0086. 分隔链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/90.subsets-ii.md&#34;&gt;0090. 子集 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/91.decode-ways.md&#34;&gt;0091. 解码方法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/92.reverse-linked-list-ii.md&#34;&gt;0092. 反转链表 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/94.binary-tree-inorder-traversal.md&#34;&gt;0094. 二叉树的中序遍历&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/95.unique-binary-search-trees-ii.md&#34;&gt;0095. 不同的二叉搜索树 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/96.unique-binary-search-trees.md&#34;&gt;0096. 不同的二叉搜索树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/98.validate-binary-search-tree.md&#34;&gt;0098. 验证二叉搜索树&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/102.binary-tree-level-order-traversal.md&#34;&gt;0102. 二叉树的层序遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/103.binary-tree-zigzag-level-order-traversal.md&#34;&gt;0103. 二叉树的锯齿形层次遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/113.path-sum-ii.md&#34;&gt;0113. 路径总和 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/129.sum-root-to-leaf-numbers.md&#34;&gt;0129. 求根到叶子节点数字之和&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/130.surrounded-regions.md&#34;&gt;0130. 被围绕的区域&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/131.palindrome-partitioning.md&#34;&gt;0131. 分割回文串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/139.word-break.md&#34;&gt;0139. 单词拆分&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/144.binary-tree-preorder-traversal.md&#34;&gt;0144. 二叉树的前序遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/147.insertion-sort-list.md&#34;&gt;0147. 对链表进行插入排序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/150.evaluate-reverse-polish-notation.md&#34;&gt;0150. 逆波兰表达式求值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/152.maximum-product-subarray.md&#34;&gt;0152. 乘积最大子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/153.find-minimum-in-rotated-sorted-array.md&#34;&gt;0153. 寻找旋转排序数组中的最小值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/199.binary-tree-right-side-view.md&#34;&gt;0199. 二叉树的右视图&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/200.number-of-islands.md&#34;&gt;0200. 岛屿数量&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/201.bitwise-and-of-numbers-range.md&#34;&gt;0201. 数字范围按位与&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/208.implement-trie-prefix-tree.md&#34;&gt;0208. 实现 Trie （前缀树）&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/209.minimum-size-subarray-sum.md&#34;&gt;0209. 长度最小的子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/211.add-and-search-word-data-structure-design.md&#34;&gt;0211. 添加与搜索单词 - 数据结构设计&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/215.kth-largest-element-in-an-array.md&#34;&gt;0215. 数组中的第 K 个最大元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/220.contains-duplicate-iii.md&#34;&gt;0220. 存在重复元素 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/221.maximal-square.md&#34;&gt;0221. 最大正方形&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/227.basic-calculator-ii.md&#34;&gt;0227. 基本计算器 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/229.majority-element-ii.md&#34;&gt;0229. 求众数 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/230.kth-smallest-element-in-a-bst.md&#34;&gt;0230. 二叉搜索树中第 K 小的元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/236.lowest-common-ancestor-of-a-binary-tree.md&#34;&gt;0236. 二叉树的最近公共祖先&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/238.product-of-array-except-self.md&#34;&gt;0238. 除自身以外数组的乘积&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/240.search-a-2-d-matrix-ii.md&#34;&gt;0240. 搜索二维矩阵 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/279.perfect-squares.md&#34;&gt;0279. 完全平方数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/309.best-time-to-buy-and-sell-stock-with-cooldown.md&#34;&gt;0309. 最佳买卖股票时机含冷冻期&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/322.coin-change.md&#34;&gt;0322. 零钱兑换&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/324.wiggle-sort-ii.md&#34;&gt;0324. 摆动排序 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/328.odd-even-linked-list.md&#34;&gt;0328. 奇偶链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/331.verify-preorder-serialization-of-a-binary-tree.md&#34;&gt;0331. 验证二叉树的前序序列化&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/334.increasing-triplet-subsequence.md&#34;&gt;0334. 递增的三元子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/337.house-robber-iii.md&#34;&gt;0337. 打家劫舍 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/343.integer-break.md&#34;&gt;0343. 整数拆分&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/365.water-and-jug-problem.md&#34;&gt;0365. 水壶问题&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/378.kth-smallest-element-in-a-sorted-matrix.md&#34;&gt;0378. 有序矩阵中第 K 小的元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/380.insert-delete-getrandom-o1.md&#34;&gt;0380. 常数时间插入、删除和获取随机元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/385.mini-parser.md&#34;&gt;0385. 迷你语法分析器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/394.decode-string.md&#34;&gt;0394. 字符串解码&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/416.partition-equal-subset-sum.md&#34;&gt;0416. 分割等和子集&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/424.longest-repeating-character-replacement.md&#34;&gt;0424. 替换后的最长重复字符&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/438.find-all-anagrams-in-a-string.md&#34;&gt;0438. 找到字符串中所有字母异位词&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/445.add-two-numbers-ii.md&#34;&gt;0445. 两数相加 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/454.4-sum-ii.md&#34;&gt;0454. 四数相加 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/456.132-pattern.md&#34;&gt;0456. 132 模式&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/457.circular-array-loop.md&#34;&gt;0457.457. 环形数组是否存在循环&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/464.can-i-win.md&#34;&gt;0464. 我能赢么&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/470.implement-rand10-using-rand7.md&#34;&gt;0470. 用 Rand7() 实现 Rand10&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/473.matchsticks-to-square.md&#34;&gt;0473. 火柴拼正方形&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/494.target-sum.md&#34;&gt;0494. 目标和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/516.longest-palindromic-subsequence.md&#34;&gt;0516. 最长回文子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/513.find-bottom-left-tree-value.md&#34;&gt;0513. 找树左下角的值&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/518.coin-change-2.md&#34;&gt;0518. 零钱兑换 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/525.contiguous-array.md&#34;&gt;0525. 连续数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/547.number-of-provinces.md&#34;&gt;0547. 省份数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/560.subarray-sum-equals-k.md&#34;&gt;0560. 和为 K 的子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/609.find-duplicate-file-in-system.md&#34;&gt;0609. 在系统中查找重复文件&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/611.valid-triangle-number.md&#34;&gt;0611. 有效三角形的个数&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/673.number-of-longest-increasing-subsequence.md&#34;&gt;0673. 最长递增子序列的个数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/686.repeated-string-match.md&#34;&gt;0686. 重复叠加字符串匹配&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/710.random-pick-with-blacklist.md&#34;&gt;0710. 黑名单中的随机数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/714.best-time-to-buy-and-sell-stock-with-transaction-fee.md&#34;&gt;0714. 买卖股票的最佳时机含手续费&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/718.maximum-length-of-repeated-subarray.md&#34;&gt;0718. 最长重复子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/735.asteroid-collision.md&#34;&gt;0735. 行星碰撞&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/754.reach-a-number.md&#34;&gt;0754. 到达终点数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/785.is-graph-bipartite.md&#34;&gt;0785. 判断二分图&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/790.domino-and-tromino-tiling.md&#34;&gt;0790. 多米诺和托米诺平铺&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/799.champagne-tower.md&#34;&gt;0799. 香槟塔&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/801.minimum-swaps-to-make-sequences-increasing.md&#34;&gt;0801. 使序列递增的最小交换次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/816.ambiguous-coordinates.md&#34;&gt;0816. 模糊坐标&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/820.short-encoding-of-words.md&#34;&gt;0820. 单词的压缩编码&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/838.push-dominoes.md&#34;&gt;0838. 推多米诺&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/873.length-of-longest-fibonacci-subsequence.md&#34;&gt;0873. 最长的斐波那契子序列的长度&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/875.koko-eating-bananas.md&#34;&gt;0875. 爱吃香蕉的珂珂&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/877.stone-game.md&#34;&gt;0877. 石子游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/886.possible-bipartition.md&#34;&gt;0886. 可能的二分法&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/898.bitwise-ors-of-subarrays.md&#34;&gt;0898. 子数组按位或操作&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/900.rle-iterator.md&#34;&gt;0900. RLE 迭代器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/911.online-election.md&#34;&gt;0911. 在线选举&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/912.sort-an-array.md&#34;&gt;0912. 排序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/932.beautiful-array.md&#34;&gt;0932. 漂亮数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/935.knight-dialer.md&#34;&gt;0935. 骑士拨号器&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/947.most-stones-removed-with-same-row-or-column.md&#34;&gt;0947. 移除最多的同行或同列石头&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/959.regions-cut-by-slashes.md&#34;&gt;0959. 由斜杠划分区域&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/978.longest-turbulent-subarray.md&#34;&gt;0978. 最长湍流子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/987.vertical-order-traversal-of-a-binary-tree.md&#34;&gt;0987. 二叉树的垂序遍历&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1004.max-consecutive-ones-iii.md&#34;&gt;1004. 最大连续 1 的个数 III&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1011.capacity-to-ship-packages-within-d-days.md&#34;&gt;1011. 在 D 天内送达包裹的能力&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1014.best-sightseeing-pair.md&#34;&gt;1014. 最佳观光组合&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1015.smallest-integer-divisible-by-k.md&#34;&gt;1015. 可被 K 整除的最小整数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1019.next-greater-node-in-linked-list.md&#34;&gt;1019. 链表中的下一个更大节点&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1020.number-of-enclaves.md&#34;&gt;1020. 飞地的数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1023.camelcase-matching.md&#34;&gt;1023. 驼峰式匹配&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1031.maximum-sum-of-two-non-overlapping-subarrays.md&#34;&gt;1031. 两个非重叠子数组的最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1043.partition-array-for-maximum-sum.md&#34;&gt;1043. 分隔数组以得到最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1104.path-in-zigzag-labelled-binary-tree.md&#34;&gt;1104. 二叉树寻路&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1129.shortest-path-with-alternating-colors.md&#34;&gt;1129. 颜色交替的最短路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1131.maximum-of-absolute-value-expression.md&#34;&gt;1131. 绝对值表达式的最大值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1138.alphabet-board-path.md&#34;&gt;1138. 字母板上的路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1186.maximum-subarray-sum-with-one-deletion.md&#34;&gt;1186. 删除一次得到子数组最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1218.longest-arithmetic-subsequence-of-given-difference.md&#34;&gt;1218. 最长定差子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1227.airplane-seat-assignment-probability.md&#34;&gt;1227. 飞机座位分配概率&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1261.find-elements-in-a-contaminated-binary-tree.md&#34;&gt;1261. 在受污染的二叉树中查找元素&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1262.greatest-sum-divisible-by-three.md&#34;&gt;1262. 可被三整除的最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1297.maximum-number-of-occurrences-of-a-substring.md&#34;&gt;1297. 子串的最大出现次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1310.xor-queries-of-a-subarray.md&#34;&gt;1310. 子数组异或查询&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1334.find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance.md&#34;&gt;1334. 阈值距离内邻居最少的城市&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1371.find-the-longest-substring-containing-vowels-in-even-counts.md&#34;&gt;1371. 每个元音包含偶数次的最长子字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1381.design-a-stack-with-increment-operation.md&#34;&gt;1381. 设计一个支持增量操作的栈&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1423.maximum-points-you-can-obtain-from-cards.md&#34;&gt;1423. 可获得的最大点数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1438.longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit.md&#34;&gt;1438. 绝对差不超过限制的最长连续子数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1558.minimum-numbers-of-function-calls-to-make-target-array.md&#34;&gt;1558. 得到目标数组的最少函数调用次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1574.shortest-subarray-to-be-removed-to-make-array-sorted.md&#34;&gt;1574. 删除最短的子数组使剩余数组有序&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1589.maximum-sum-obtained-of-any-permutation.md&#34;&gt;1589. 所有排列中的最大和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1631.path-with-minimum-effort.md&#34;&gt;1631. 最小体力消耗路径&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1658.minimum-operations-to-reduce-x-to-zero.md&#34;&gt;1658. 将 x 减到 0 的最小操作数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1697.checking-existence-of-edge-length-limited-paths.md&#34;&gt;1697. 检查边长度限制的路径是否存在&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1737.change-minimum-characters-to-satisfy-one-of-three-conditions.md&#34;&gt;1737. 满足三条件之一需改变的最少字符数&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1770.maximum-score-from-performing-multiplication-operations.md&#34;&gt;1770. 执行乘法运算的最大分数&lt;/a&gt; 👍 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1834.single-threaded-cpu.md&#34;&gt;1834. 单线程 CPU&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1899.merge-triplets-to-form-target-triplet.md&#34;&gt;1899. 合并若干三元组以形成目标三元组&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1904.the-number-of-full-rounds-you-have-played.md&#34;&gt;1904. 你完成的完整对局数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1906.minimum-absolute-difference-queries.md&#34;&gt;1906. 查询差绝对值的最小值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2007.find-original-array-from-doubled-array.md&#34;&gt;2007. 从双倍数组中还原原数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2008.maximum-earnings-from-taxi.md&#34;&gt;2008. 出租车的最大盈利&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5935.find-good-days-to-rob-the-bank.md&#34;&gt;5935. 适合打劫银行的日子&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5936.detonate-the-maximum-bombs.md&#34;&gt;5936. 引爆最多的炸弹&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5965.intervals-between-identical-elements.md&#34;&gt;5965. 相同元素的间隔之和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/6201.maximize-number-of-subsequences-in-a-string.md&#34;&gt;6021. 字符串中最多数目的子字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;困难难度题目合集&lt;/h3&gt; &#xA;&lt;p&gt;困难难度题目从类型上说多是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图&lt;/li&gt; &#xA; &lt;li&gt;设计题&lt;/li&gt; &#xA; &lt;li&gt;游戏场景题目&lt;/li&gt; &#xA; &lt;li&gt;中等题目的 follow up&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;从解法上来说，多是：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;图算法&lt;/li&gt; &#xA; &lt;li&gt;动态规划&lt;/li&gt; &#xA; &lt;li&gt;二分法&lt;/li&gt; &#xA; &lt;li&gt;DFS &amp;amp; BFS&lt;/li&gt; &#xA; &lt;li&gt;状态压缩&lt;/li&gt; &#xA; &lt;li&gt;剪枝&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;从逻辑上说， 要么就是非常难想到，要么就是非常难写代码。 这里我总结了几个技巧：&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;看题目的数据范围， 看能否暴力模拟&lt;/li&gt; &#xA; &lt;li&gt;暴力枚举所有可能的算法往上套，比如图的题目。&lt;/li&gt; &#xA; &lt;li&gt;总结和记忆解题模板，减少解题压力&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;以下是我列举的经典题目（带 91 字样的表示出自 &lt;strong&gt;91 天学算法&lt;/strong&gt;活动）：&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/lcp20.meChtZ.md&#34;&gt;LCP 20. 快速公交&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/lcp21.Za25hA.md&#34;&gt;LCP 21. 追逐游戏&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Number-Stream-to-Intervals.md&#34;&gt;Number Stream to Intervals&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Triple-Inversion.md&#34;&gt;Triple Inversion&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Kth-Pair-Distance.md&#34;&gt;Kth Pair Distance&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Minimum-Light-Radius.md&#34;&gt;Minimum Light Radius&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Largest-Equivalent-Set-of-Pairs.md&#34;&gt;Largest Equivalent Set of Pairs&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Ticket-Order.md&#34;&gt;Ticket-Order.md&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/Connected-Road-to-Destination.md&#34;&gt;Connected-Road-to-Destination&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/4.median-of-two-sorted-arrays.md&#34;&gt;0004. 寻找两个正序数组的中位数&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/23.merge-k-sorted-lists.md&#34;&gt;0023. 合并 K 个升序链表&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/25.reverse-nodes-in-k-groups.md&#34;&gt;0025. K 个一组翻转链表&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/30.substring-with-concatenation-of-all-words.md&#34;&gt;0030. 串联所有单词的子串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/32.longest-valid-parentheses.md&#34;&gt;0032. 最长有效括号&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/42.trapping-rain-water.md&#34;&gt;0042. 接雨水&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/52.N-Queens-II.md&#34;&gt;0052. N 皇后 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/57.insert-interval.md&#34;&gt;0057. 插入区间&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/65.valid-number.md&#34;&gt;0065. 有效数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/84.largest-rectangle-in-histogram.md&#34;&gt;0084. 柱状图中最大的矩形&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/85.maximal-rectangle.md&#34;&gt;0085. 最大矩形&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/87.scramble-string.md&#34;&gt;0087. 扰乱字符串&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/124.binary-tree-maximum-path-sum.md&#34;&gt;0124. 二叉树中的最大路径和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/128.longest-consecutive-sequence.md&#34;&gt;0128. 最长连续序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/132.palindrome-partitioning-ii.md&#34;&gt;0132. 分割回文串 II&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/140.word-break-ii.md&#34;&gt;0140. 单词拆分 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/145.binary-tree-postorder-traversal.md&#34;&gt;0145. 二叉树的后序遍历&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/146.lru-cache.md&#34;&gt;0146. LRU 缓存机制&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/154.find-minimum-in-rotated-sorted-array-ii.md&#34;&gt;0154. 寻找旋转排序数组中的最小值 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/212.word-search-ii.md&#34;&gt;0212. 单词搜索 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/239.sliding-window-maximum.md&#34;&gt;0239. 滑动窗口最大值&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/295.find-median-from-data-stream.md&#34;&gt;0295. 数据流的中位数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/297.serialize-and-deserialize-binary-tree.md&#34;&gt;0297. 二叉树的序列化与反序列化&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/301.remove-invalid-parentheses.md&#34;&gt;0301. 删除无效的括号&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/312.burst-balloons.md&#34;&gt;0312. 戳气球&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/330.patching-array.md&#34;&gt;330. 按要求补齐数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/335.self-crossing.md&#34;&gt;0335. 路径交叉&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/460.lfu-cache.md&#34;&gt;0460. LFU 缓存&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/472.concatenated-words.md&#34;&gt;0472. 连接词&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/480.sliding-window-median.md&#34;&gt;0480. 滑动窗口中位数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/483.smallest-good-base.md&#34;&gt;0483. 最小好进制&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/488.zuma-game.md&#34;&gt;0488. 祖玛游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/493.reverse-pairs.md&#34;&gt;0493. 翻转对&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/664.strange-printer.md&#34;&gt;0664. 奇怪的打印机&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/679.24-game.md&#34;&gt;0679. 24 点游戏&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/715.range-module.md&#34;&gt;0715. Range 模块&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/726.number-of-atoms.md&#34;&gt;0726. 原子的数量&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/768.max-chunks-to-make-sorted-ii.md&#34;&gt;0768. 最多能完成排序的块 II&lt;/a&gt; 91&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/805.split-array-with-same-average.md&#34;&gt;0805. 数组的均值分割&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/839.similar-string-groups.md&#34;&gt;0839. 相似字符串组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/887.super-egg-drop.md&#34;&gt;0887. 鸡蛋掉落&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/895.maximum-frequency-stack.md&#34;&gt;0895. 最大频率栈&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/909.snakes-and-ladders.md&#34;&gt;0909. 蛇梯棋&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/975.odd-even-jump.md&#34;&gt;0975. 奇偶跳&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/995.minimum-number-of-k-consecutive-bit-flips.md&#34;&gt;0995. K 连续位的最小翻转次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1032.stream-of-characters.md&#34;&gt;1032. 字符流&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1168.optimize-water-distribution-in-a-village.md&#34;&gt;1168. 水资源分配优化&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1178.number-of-valid-words-for-each-puzzle.md&#34;&gt;1178. 猜字谜&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1203.sort-items-by-groups-respecting-dependencies.md&#34;&gt;1203. 项目管理&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1255.maximum-score-words-formed-by-letters.md&#34;&gt;1255. 得分最高的单词集合&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1435.jump-game-iv.md&#34;&gt;1345. 跳跃游戏 IV&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1449.form-largest-integer-with-digits-that-add-up-to-target.md&#34;&gt;1449. 数位成本和为目标值的最大数字&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1494.parallel-courses-ii.md&#34;&gt;1494. 并行课程 II&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1521.find-a-value-of-a-mysterious-function-closest-to-target.md&#34;&gt;1521. 找到最接近目标值的函数值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1526.minimum-number-of-increments-on-subarrays-to-form-a-target-array.md&#34;&gt;1526. 形成目标数组的子数组最少增加次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1649.create-sorted-array-through-instructions.md&#34;&gt;1649. 通过指令创建有序数组&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1671.minimum-number-of-removals-to-make-mountain-array.md&#34;&gt;1671. 得到山形数组的最少删除次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5640.maximum-xor-with-an-element-from-array.md&#34;&gt;1707. 与数组中元素的最大异或值&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1713.minimum-operations-to-make-a-subsequence.md&#34;&gt;1713. 得到子序列的最少操作次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1723.find-minimum-time-to-finish-all-jobs.md&#34;&gt;1723. 完成所有工作的最短时间&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1787.make-the-xor-of-all-segments-equal-to-zero.md&#34;&gt;1787. 使所有区间的异或结果为零&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1835.find-xor-sum-of-all-pairs-bitwise-and.md&#34;&gt;1835. 所有数对按位与结果的异或和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1871.jump-game-vii.md&#34;&gt;1871. 跳跃游戏 VII&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1872.stone-game-viii.md&#34;&gt;1872. 石子游戏 VIII&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5775.minimum-skips-to-arrive-at-meeting-on-time.md&#34;&gt;1883. 准时抵达会议现场的最小跳过休息次数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/1970.last-day-where-you-can-still-cross.md&#34;&gt;1970. 你能穿过矩阵的最后一天&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2009.minimum-number-of-operations-to-make-array-continuous.md&#34;&gt;2009. 使数组连续的最少操作数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2025.maximum-number-of-ways-to-partition-an-array.md&#34;&gt;2025. 分割数组的最多方案数&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2030.smallest-k-length-subsequence-with-occurrences-of-a-letter.md&#34;&gt;2030. 含特定字母的最小子序列&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2102.sequentially-ordinal-rank-tracker.md&#34;&gt;2102. 序列顺序查询&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2209.minimum-white-tiles-after-covering-with-carpets.md&#34;&gt;2209. 用地毯覆盖后的最少白色砖块&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2281.sum-of-total-strength-of-wizards.md&#34;&gt;2281. 巫师的总力量和&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/2306.naming-a-company.md&#34;&gt;2306. 公司命名&lt;/a&gt; 枚举优化好题&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5254.selling-pieces-of-wood.md&#34;&gt;5254. 卖木头块&lt;/a&gt; 动态规划经典题&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/problems/5999.count-good-triplets-in-an-array.md&#34;&gt;5999. 统计数组中好三元组数目&lt;/a&gt; 👍&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;🔱&lt;/span&gt; &amp;nbsp;anki 卡片&lt;/h2&gt; &#xA;&lt;p&gt;Anki 主要分为两个部分：一部分是关键点到题目的映射，另一部分是题目到思路，关键点，代码的映射。&lt;/p&gt; &#xA;&lt;p&gt;全部卡片都在 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/assets/anki/leetcode.apkg&#34;&gt;anki-card&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;使用方法：&lt;/p&gt; &#xA;&lt;p&gt;anki - 文件 - 导入 - 下拉格式选择“打包的 anki 集合”，然后选中你下载好的文件，确定即可。&lt;/p&gt; &#xA;&lt;p&gt;更多关于 anki 使用方法的请查看 &lt;a href=&#34;https://apps.ankiweb.net/&#34;&gt;anki 官网&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;关于我&lt;/h2&gt; &#xA;&lt;p&gt;大家也可以加我微信好友进行交流！&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p.ipic.vip/wciz1n.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;span&gt;📈&lt;/span&gt; 大事件&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-07-10 ：&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thanksGiving.md&#34;&gt;纪念项目 Star 突破 1W 的一个短文&lt;/a&gt;， 记录了项目的&#34;兴起&#34;之路，大家有兴趣可以看一下，如果对这个项目感兴趣，请&lt;strong&gt;点击一下 Star&lt;/strong&gt;， 项目会&lt;strong&gt;持续更新&lt;/strong&gt;，感谢大家的支持。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2019-10-08: &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thanksGiving2.md&#34;&gt;纪念 LeetCode 项目 Star 突破 2W&lt;/a&gt;，并且 Github 搜索“LeetCode”，排名第一。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-04-12: &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/thanksGiving3.md&#34;&gt;项目突破三万 Star&lt;/a&gt;。&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;2020-04-14: 官网&lt;code&gt;力扣加加&lt;/code&gt;上线啦 💐💐💐💐💐，有专题讲解，每日一题，下载区和视频题解，后续会增加更多内容，还不赶紧收藏起来？地址：&lt;a href=&#34;http://leetcode-solution.cn/&#34;&gt;http://leetcode-solution.cn/&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://p.ipic.vip/98p19b.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;2021-02-23: star 破四万&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💝&lt;/span&gt; 贡献&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;如果有想法和创意，请提 &lt;a href=&#34;https://github.com/azl397985856/leetcode/issues&#34;&gt;issue&lt;/a&gt; 或者进群提&lt;/li&gt; &#xA; &lt;li&gt;如果想贡献增加题解或者翻译， 可以参考 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/CONTRIBUTING.md&#34;&gt;贡献指南&lt;/a&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;关于如何提交题解，我写了一份 &lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/templates/problems/1014.best-sightseeing-pair.md&#34;&gt;指南&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt;如果需要修改项目中图片，&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/assets/drawio/&#34;&gt;这里&lt;/a&gt; 存放了项目中绘制图的源代码，大家可以用 &lt;a href=&#34;https://www.draw.io/&#34;&gt;draw.io&lt;/a&gt; 打开进行编辑。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;span&gt;💌&lt;/span&gt; 鸣谢&lt;/h2&gt; &#xA;&lt;p&gt;感谢为这个项目作出贡献的所有 &lt;a href=&#34;https://github.com/azl397985856/leetcode/graphs/contributors&#34;&gt;小伙伴&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/azl397985856/leetcode/master/LICENSE.txt&#34;&gt;CC BY-NC-ND 4.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>