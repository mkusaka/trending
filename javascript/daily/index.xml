<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-18T01:37:03Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>lllyasviel/style2paints</title>
    <updated>2023-02-18T01:37:03Z</updated>
    <id>tag:github.com,2023-02-18:/lllyasviel/style2paints</id>
    <link href="https://github.com/lllyasviel/style2paints" rel="alternate"></link>
    <summary type="html">&lt;p&gt;sketch + style = paints üé® (TOG2018/SIGGRAPH2018ASIA)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;News&lt;/h1&gt; &#xA;&lt;p&gt;See also the &lt;a href=&#34;https://github.com/lllyasviel/style2paints/tree/master/V5_preview&#34;&gt;Preview of Style2Paints V5&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that below are previous versions of style2paints. If you come from an introduction of V5 and are interested in V5, you do not need to download the V4 or V4.5. Note that V5 is still in preview and we have not released it yet.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Download Style2Paints V4.5&lt;/h1&gt; &#xA;&lt;p&gt;You can directly download the software (windows x64) at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Again, this is style2paints V4.5, NOT style2paints V5!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Google Drive:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://drive.google.com/open?id=1gmg2wwNIp4qMzxqP12SbcmVAHsLt1iRE&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Baidu Drive (ÁôæÂ∫¶ÁΩëÁõò):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;https://pan.baidu.com/s/15xCm1jRVeHipHkiB3n1vzA&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You do &lt;strong&gt;NOT&lt;/strong&gt; need to install any complex things like CUDA and python. You can directly download it and then double click it, as if you were playing a normal video game.&lt;/p&gt; &#xA;&lt;p&gt;Never hesitate to let me know if you have any suggestions or ideas. You may directly send emails to my private address [&lt;a href=&#34;mailto:lvminzhang@acm.org&#34;&gt;lvminzhang@acm.org&lt;/a&gt;] or [&lt;a href=&#34;mailto:lvminzhang@siggraph.org&#34;&gt;lvminzhang@siggraph.org&lt;/a&gt;].&lt;/p&gt; &#xA;&lt;h1&gt;Welcome to style2paints V4!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/imgs/pages/logo.jpg&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Style2paints V4 is an AI driven lineart colorization tool.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lllyasviel/style2paints&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/repo-size/lllyasviel/style2paints.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lllyasviel/style2paints&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/lllyasviel/style2paints.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lllyasviel/style2paints/issues&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/lllyasviel/style2paints.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/lllyasviel/style2paints/stargazers&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/lllyasviel/style2paints.svg?label=Stars&amp;amp;style=social&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/lvminzhang&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/lvminzhang.svg?label=Follow&amp;amp;style=social&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Different from previous end-to-end image-to-image translation methods, style2paints V4 is the &lt;strong&gt;first&lt;/strong&gt; system to colorize a lineart &lt;strong&gt;in real-life human workflow&lt;/strong&gt;, and the outputs are &lt;strong&gt;layered&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Inputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚óè Linearts&#xA;‚óè (with or without) Human hints&#xA;‚óè (with or without) Color style reference images&#xA;‚óè (with or without) Light location and color&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Outputs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚óè Automatic color flattening without lines (solid/flat/inherent/Âõ∫ÊúâËâ≤/Â∫ïËâ≤ color layer)&#xA;‚óè Automatic color flattening with black lines&#xA;‚óè Automatic colorization without lines&#xA;‚óè Automatic colorization with black lines&#xA;‚óè Automatic colorization with colored lines&#xA;‚óè Automatic rendering (separated layer)&#xA;‚óè Automatic rendered colorization&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Style2paints V4 gives you results of the current highest quality. You are able to get separated layers from our system. These layers can be directly used in your painting workflow. Different from all previous AI driven colorization tools, our results are not single &#39;JPG/PNG&#39; images, and in fact, our results are &#39;PSD&#39; layers.&lt;/p&gt; &#xA;&lt;p&gt;User Instruction: &lt;a href=&#34;https://style2paints.github.io/&#34;&gt;https://style2paints.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And we also have an official &lt;a href=&#34;https://twitter.com/lvminzhang&#34;&gt;Twitter&lt;/a&gt; account.&lt;/p&gt; &#xA;&lt;h1&gt;Help human in their standard coloring workflow!&lt;/h1&gt; &#xA;&lt;p&gt;Most human artists are familiar with this workflow:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sketching -&amp;gt; color filling/flattening -&amp;gt; gradients/details adding -&amp;gt; shading&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And the corresponding layers are:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lineart layers + flat color layers + gradient layers + shading layers&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Style2paints V4 is designed for this standard coloring workflow! In style2paints V4, you can automatically get separated results from each step!&lt;/p&gt; &#xA;&lt;h1&gt;Examples&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/pip.jpg&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here we present some results in this ABCD format. Users only need to upload their sketch, select a style, and put a light source.&lt;/p&gt; &#xA;&lt;p&gt;When the result is achieved immediately without any human color correction, we regard this result as &lt;strong&gt;fully automatic result&lt;/strong&gt;. When the result needs some color correction, human can easily put some color hints on the canvas to guide the AI coloring process. In this case, we regard these results as &lt;strong&gt;semi-automatic results&lt;/strong&gt;. If a result is semi-automatic, but the quantity of human color hint points is smaller than 10, we regard these results as &lt;strong&gt;almost automatic result&lt;/strong&gt;. In this section, about half of the presented results are &lt;strong&gt;fully automatic result&lt;/strong&gt;, and the others are all &lt;strong&gt;almost automatic result&lt;/strong&gt;. Do notice that all the below results can be achieved with less than 15 clicks!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/5.jpg&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/1.jpg&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Real-life results&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/a.png&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/b.png&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/1.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/2.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/3.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/4.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/5.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/6.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/7.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/8.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/9.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/10.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/11.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/12.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/13.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/14.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/15.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/16.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/17.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/18.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/19.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/20.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/21.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/22.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/23.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/24.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/25.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/26.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/27.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/28.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/29.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/30.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/31.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/32.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/33.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/34.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/35.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/36.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/37.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/38.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/39.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/40.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/41.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/42.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/43.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/44.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/45.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/46.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/47.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/48.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/49.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/50.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/51.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/52.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/53.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/54.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/55.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/56.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/57.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/58.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/59.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/60.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/61.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/62.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/63.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/64.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/65.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/66.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/67.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/68.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/69.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/70.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/71.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/72.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/73.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/74.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/75.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/76.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/77.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/78.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/79.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/80.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/81.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/82.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/83.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/84.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/85.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/86.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/87.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/88.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/89.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/90.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/91.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/92.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/93.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/94.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/95.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/96.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/97.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/98.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/99.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/100.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/101.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/102.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/103.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/104.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/105.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/106.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/107.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/108.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/109.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/110.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/111.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/112.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/113.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/114.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/115.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/116.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/117.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/118.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/119.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/120.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/121.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/122.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/123.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/124.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/125.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/126.jpg&#34; alt=&#34;logo&#34;&gt; &lt;img src=&#34;https://github.com/lllyasviel/style2paints/raw/master/temps/show/t/127.jpg&#34; alt=&#34;logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Know more about us!&lt;/h1&gt; &#xA;&lt;p&gt;User Instruction: &lt;a href=&#34;https://style2paints.github.io/&#34;&gt;https://style2paints.github.io/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;And we also have an official &lt;a href=&#34;https://twitter.com/IlIIlIIIllIllII&#34;&gt;Twitter&lt;/a&gt; account.&lt;/p&gt; &#xA;&lt;h1&gt;Acknowledgement&lt;/h1&gt; &#xA;&lt;p&gt;Thanks a lot to TaiZan. This project could not be achieved without his great help.&lt;/p&gt; &#xA;&lt;h1&gt;Lisence&lt;/h1&gt; &#xA;&lt;p&gt;All codes are released in Apache-2.0 License.&lt;/p&gt; &#xA;&lt;p&gt;We preserve all rights on all pretrained deep learning models and binary releases.&lt;/p&gt; &#xA;&lt;p&gt;Your colorized images are yours, and we do not add any extra lisences to colorized results. Use your colorized images in any commercial or non-commercial cases.&lt;/p&gt; &#xA;&lt;h1&gt;‰∏≠ÊñáÁ§æÂå∫&lt;/h1&gt; &#xA;&lt;p&gt;Êàë‰ª¨Êúâ‰∏Ä‰∏™Èô§‰∫ÜÊäÄÊúØ‰ªÄ‰πà‰∏úË•øÈÉΩËÅäÁöÑ‰ª•ÊäÄÊúØ‰∫§ÊµÅ‰∏∫‰∏ªÁöÑÁæ§„ÄÇÂ¶ÇÊûú‰Ω†‰∏ÄÊ¨°Âä†Áæ§Â§±Ë¥•ÔºåÂèØ‰ª•Â§öÊ¨°Â∞ùËØï: 816096787„ÄÇ&lt;/p&gt; &#xA;&lt;h1&gt;Previous Publications&lt;/h1&gt; &#xA;&lt;h2&gt;Style2paints V1:&lt;/h2&gt; &#xA;&lt;p&gt;ACPR 2017:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Article{ACPR2017ZLM,&#xA;  author  = {LvMin Zhang, Yi Ji and ChunPing Liu},&#xA;  title   = {Style Transfer for Anime Sketches with Enhanced Residual U-net and Auxiliary Classifier GAN},&#xA;  conference = {Asian Conference on Pattern Recognition (ACPR)},&#xA;  year    = {2017},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/abs/1706.03319&#34;&gt;paper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Style2paints V2:&lt;/h2&gt; &#xA;&lt;p&gt;No Publications.&lt;/p&gt; &#xA;&lt;h2&gt;Style2paints V3:&lt;/h2&gt; &#xA;&lt;p&gt;TOG 2018:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@Article{ACMTOGTSC2018,&#xA;  author  = {LvMin Zhang, Chengze Li, Tien-Tsin Wong, Yi Ji and ChunPing Liu},&#xA;  title   = {Two-stage Sketch Colorization},&#xA;  journal = {ACM Transactions on Graphics},&#xA;  year    = {2018},&#xA;  volume  = {37},&#xA;  number  = {6},&#xA;  month   = nov,&#xA;  doi     = {https://doi.org/10.1145/3272127.3275090},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lllyasviel/style2paints/raw/master/papers/sa.pdf&#34;&gt;paper&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Style2paints V4:&lt;/h2&gt; &#xA;&lt;p&gt;No Publications.&lt;/p&gt; &#xA;&lt;h2&gt;Style2paints V5 (Project SEPA, not released yet):&lt;/h2&gt; &#xA;&lt;p&gt;CVPR2021&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@InProceedings{Filling2021zhang,&#xA;  author={Lvmin Zhang and Chengze Li and Edgar Simo-Serra and Yi Ji and Tien-Tsin Wong and Chunping Liu}, &#xA;  booktitle={IEEE/CVF Conference on Computer Vision and Pattern Recognition (CVPR)}, &#xA;  title={User-Guided Line Art Flat Filling with Split Filling Mechanism}, &#xA;  year={2021}, &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>bytedance/xgplayer</title>
    <updated>2023-02-18T01:37:03Z</updated>
    <id>tag:github.com,2023-02-18:/bytedance/xgplayer</id>
    <link href="https://github.com/bytedance/xgplayer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A HTML5 video player with a parser that saves traffic&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/bytedance/xgplayer/master/xgplayer.png&#34; width=&#34;384&#34; height=&#34;96&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/xgplayer&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/xgplayer.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;https://www.npmjs.com/package/xgplayer&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/l/xgplayer.svg?sanitize=true&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &#xA; &lt;a href=&#34;http://commitizen.github.io/cz-cli/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/commitizen-friendly-brightgreen.svg?sanitize=true&#34; alt=&#34;commitizen&#34;&gt; &lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/bytedance/xgplayer/master/README.zh-CN.md&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;xgplayer is a web video and audio player library, designed with separate, detachable UI components. Since everything is componentized. the UI layer is very flexable.&lt;br&gt; xgplayer is bold in its functionality: it gets rid of video loading, buffering, and format support for video dependence. For mp4 that does not support streaming, you can use staged loading. This means load control, seamless switching without artifacts, and video bandwidth savings. It also integrates on-demand and live support for FLV, HLS, and dash.&lt;/p&gt; &#xA;&lt;p&gt;For more details, please read the &lt;a href=&#34;http://h5player.bytedance.com/en/&#34;&gt;Documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Start&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ npm install xgplayer&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Usage&lt;/p&gt; &lt;p&gt;Step 1:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&#34;vs&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Step 2:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Player from &#39;xgplayer&#39;;&#xA;&#xA;const player = new Player({&#xA;    id: &#39;vs&#39;,&#xA;    url: &#39;https://lf9-cdn-tos.bytecdntp.com/cdn/expire-1-M/byted-player-videos/1.0.0/xgplayer-demo.mp4&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is the easiest way to configure the video player. For more advanced content, see the plug-in section or documentation. &lt;a href=&#34;http://h5player.bytedance.com/en/config/&#34;&gt;more config&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;p&gt;xgplayer provides more plugins. Plugins are divided into two categories: one is self-starting, and another inherits the player&#39;s core class named xgplayer. In principle, the officially provided plug-ins are self-starting and the packaged third-party libraries are inherited. Some feature plug-ins themselves can provide a downgrade scenario that suggests a self-start approach, or an inheritance approach if not. The player supports custom plugins for more content viewing &lt;a href=&#34;http://h5player.bytedance.com/en/plugins/&#34;&gt;plugins&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The following is how to use a self-starting plug-inÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Player from &#39;xgplayer&#39;;&#xA;import &#39;xgplayer-mp4&#39;;&#xA;&#xA;const player = new Player({&#xA;    id: &#39;video&#39;,&#xA;    url: &#39;//abc.com/test.mp4&#39;&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;xgplayer-mp4&lt;/code&gt;plugin is self-starting, It loads mp4 video itself, parses mp4 format, implements custom loading, buffering, seamless switching, and so on. it will automatically downgrade devices that do not support &lt;a href=&#34;https://www.w3.org/TR/media-source/&#34;&gt;MSE&lt;/a&gt;. &lt;a href=&#34;http://h5player.bytedance.com/en/plugins/#xgplayer-mp4&#34;&gt;details&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dev&lt;/h3&gt; &#xA;&lt;p&gt;For debugging, we provide example video files in github. You can clone the whole git repository, which includes both code and example videos with &#39;git clone --recurse-submodules -j8&#39;. With &#39;git clone&#39; you will pull only xgplayer code and its plugins.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone --recurse-submodules -j8 git@github.com:bytedance/xgplayer.git # OR git clone git@github.com:bytedance/xgplayer.git&#xA;$ cd xgplayer&#xA;$ npm install&#xA;$ npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then visit &lt;a href=&#34;http://localhost:9090/examples/index.html&#34;&gt;http://localhost:9090/examples/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Agreement&lt;/h3&gt; &#xA;&lt;p&gt;Welcome to use xgplayer! Please read the following terms carefully. Using xgplayer means that you accept and agree to the terms.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Xgplayer is licensed under the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt; License. You comply with its obligations by default.&lt;/li&gt; &#xA; &lt;li&gt;By default, you authorize us to place your logo in xgplayer website, which using xgplayer. If you have any problem, please let us know.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>amzn/style-dictionary</title>
    <updated>2023-02-18T01:37:03Z</updated>
    <id>tag:github.com,2023-02-18:/amzn/style-dictionary</id>
    <link href="https://github.com/amzn/style-dictionary" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A build system for creating cross-platform styles.&lt;/p&gt;&lt;hr&gt;&lt;pre&gt;&#xA;&lt;a href=&#34;https://amzn.github.io/style-dictionary/#/version_3&#34;&gt;What&#39;s new in Style Dictionary 3.0!&lt;/a&gt;&#xA;&lt;/pre&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/docs/assets/logo.png&#34; alt=&#34;Style Dictionary logo and mascot&#34; title=&#34;&amp;quot;Pascal&amp;quot;&#34; width=&#34;100&#34; align=&#34;right&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/style-dictionary&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/style-dictionary.svg?style=flat-square&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/npm/l/style-dictionary.svg?style=flat-square&#34; alt=&#34;license&#34;&gt; &lt;a href=&#34;https://github.com/amzn/style-dictionary/raw/main/CONTRIBUTING.md#submitting-pull-requests&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/amzn/style-dictionary/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/amzn/style-dictionary/Test?style=flat-square&#34; alt=&#34;GitHub Workflow Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/style-dictionary&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/style-dictionary.svg?style=flat-square&#34; alt=&#34;downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Style Dictionary&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;em&gt;Style once, use everywhere.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A Style Dictionary uses design tokens to define styles once and use those styles on any platform or language. It provides a single place to create and edit your styles, and exports these tokens to all the places you need - iOS, Android, CSS, JS, HTML, sketch files, style documentation, etc. It is available as a CLI through npm, but can also be used like any normal node module if you want to extend its functionality.&lt;/p&gt; &#xA;&lt;p&gt;When you are managing user experiences, it can be quite challenging to keep styles consistent and synchronized across multiple development platforms and devices. At the same time, designers, developers, PMs and others must be able to have consistent and up-to-date style documentation to enable effective work and communication. Even then, mistakes inevitably happen and the design may not be implemented accurately. Style Dictionary solves this by automatically generating style definitions across all platforms from a single source - removing roadblocks, errors, and inefficiencies across your workflow.&lt;/p&gt; &#xA;&lt;p&gt;For detailed usage head to &lt;a href=&#34;https://amzn.github.io/style-dictionary&#34;&gt;https://amzn.github.io/style-dictionary&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Watch the Demo on YouTube&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://youtu.be/1HREvonfqhY&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/docs/assets/fake_player.png&#34; alt=&#34;Watch the video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Experiment in the playground&lt;/h2&gt; &#xA;&lt;p&gt;Try the browser-based Style Dictionary playground: &lt;a href=&#34;https://www.style-dictionary-play.dev/&#34;&gt;https://www.style-dictionary-play.dev/&lt;/a&gt;, built by the folks at &lt;a href=&#34;https://divriots.com/&#34;&gt;&amp;lt;div&amp;gt;RIOTS&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#quick-start&#34;&gt;Quick Start&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#design-tokens&#34;&gt;Design Tokens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#extending&#34;&gt;Extending&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note that you must have node (and npm) installed.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the CLI, you can install it globally via npm:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g style-dictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or you can install it like a normal npm dependency. This is a build tool and you are most likely going to want to save it as a dev dependency:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -D style-dictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to install it with yarn:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ yarn add style-dictionary --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ style-dictionary build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Call this in the root directory of your project. The only thing needed is a &lt;code&gt;config.json&lt;/code&gt; file. There are also arguments:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Flag&lt;/th&gt; &#xA;   &lt;th&gt;Short Flag&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--config [path]&lt;/td&gt; &#xA;   &lt;td&gt;-c&lt;/td&gt; &#xA;   &lt;td&gt;Set the config file to use. Must be a .json file&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--platform [platform]&lt;/td&gt; &#xA;   &lt;td&gt;-p&lt;/td&gt; &#xA;   &lt;td&gt;Only build a specific platform defined in the config file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--help&lt;/td&gt; &#xA;   &lt;td&gt;-h&lt;/td&gt; &#xA;   &lt;td&gt;Display help content&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;--version&lt;/td&gt; &#xA;   &lt;td&gt;-v&lt;/td&gt; &#xA;   &lt;td&gt;Display the version&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Node&lt;/h3&gt; &#xA;&lt;p&gt;You can also use the style dictionary build system in node if you want to &lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/#extending&#34;&gt;extend&lt;/a&gt; the functionality or use it in another build system like Grunt or Gulp.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const StyleDictionary = require(&#39;style-dictionary&#39;).extend(&#39;config.json&#39;);&#xA;&#xA;StyleDictionary.buildAllPlatforms();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;.extend()&lt;/code&gt; method is an overloaded method that can also take an object with the configuration in the same format as a config.json file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const StyleDictionary = require(&#39;style-dictionary&#39;).extend({&#xA;  source: [&#39;tokens/**/*.json&#39;],&#xA;  platforms: {&#xA;    scss: {&#xA;      transformGroup: &#39;scss&#39;,&#xA;      buildPath: &#39;build/&#39;,&#xA;      files: [{&#xA;        destination: &#39;variables.scss&#39;,&#xA;        format: &#39;scss/variables&#39;&#xA;      }]&#xA;    }&#xA;    // ...&#xA;  }&#xA;});&#xA;&#xA;StyleDictionary.buildAllPlatforms();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/examples/&#34;&gt;Take a look at some of our examples&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A style dictionary is a collection of design tokens, key/value pairs that describe stylistic attributes like colors, sizes, icons, motion, etc. A style dictionary defines these design tokens in JSON or Javascript files, and can also include static assets like images and fonts. Here is a basic example of what the package structure can look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;‚îú‚îÄ‚îÄ config.json&#xA;‚îú‚îÄ‚îÄ tokens/&#xA;‚îÇ   ‚îú‚îÄ‚îÄ size/&#xA;‚îÇ       ‚îú‚îÄ‚îÄ font.json&#xA;‚îÇ   ‚îú‚îÄ‚îÄ color/&#xA;‚îÇ       ‚îú‚îÄ‚îÄ font.json&#xA;‚îÇ   ...&#xA;‚îú‚îÄ‚îÄ assets/&#xA;‚îÇ   ‚îú‚îÄ‚îÄ fonts/&#xA;‚îÇ   ‚îú‚îÄ‚îÄ images/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;config.json&lt;/h3&gt; &#xA;&lt;p&gt;This tells the style dictionary build system how and what to build. The default file path is &lt;code&gt;config.json&lt;/code&gt; or &lt;code&gt;config.js&lt;/code&gt; in the root of the project, but you can name it whatever you want by passing in the &lt;code&gt;--config&lt;/code&gt; flag to the &lt;a href=&#34;https://amzn.github.io/style-dictionary/#/using_the_cli&#34;&gt;CLI&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;source&#34;: [&#34;tokens/**/*.json&#34;],&#xA;  &#34;platforms&#34;: {&#xA;    &#34;scss&#34;: {&#xA;      &#34;transformGroup&#34;: &#34;scss&#34;,&#xA;      &#34;buildPath&#34;: &#34;build/&#34;,&#xA;      &#34;files&#34;: [{&#xA;        &#34;destination&#34;: &#34;scss/_variables.scss&#34;,&#xA;        &#34;format&#34;: &#34;scss/variables&#34;&#xA;      }]&#xA;    },&#xA;    &#34;android&#34;: {&#xA;      &#34;transformGroup&#34;: &#34;android&#34;,&#xA;      &#34;buildPath&#34;: &#34;build/android/&#34;,&#xA;      &#34;files&#34;: [{&#xA;        &#34;destination&#34;: &#34;font_dimens.xml&#34;,&#xA;        &#34;format&#34;: &#34;android/fontDimens&#34;&#xA;      }]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Attribute&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Type&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;source&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Array&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An array of file path &lt;a href=&#34;https://github.com/isaacs/node-glob&#34;&gt;globs&lt;/a&gt; to design token files. Style Dictionary will do a deep merge of all of the token files, allowing you to organize your files files however you want.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;include&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Array&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An array of file path &lt;a href=&#34;https://github.com/isaacs/node-glob&#34;&gt;globs&lt;/a&gt; to design token files that contain default styles. The Style Dictionary uses this as a base collection of tokens. The tokens found using the &#34;source&#34; attribute will overwrite tokens found using include.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platforms&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Object&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Sets of platform files to be built.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.transformGroup&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Apply a group of transforms to the tokens, must either define this or &lt;code&gt;transforms&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.transforms&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Array (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Transforms to apply sequentially to all tokens. Can be a built-in one or you can create your own.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.buildPath&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Base path to build the files, must end with a trailing slash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.files&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Array (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Files to be generated for this platform.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.file.destination&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Location to build the file, will be appended to the buildPath.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.file.format&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;String (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Format used to generate the file. Can be a built-in one or you can create your own. &lt;a href=&#34;https://amzn.github.io/style-dictionary/#/formats&#34;&gt;More on formats&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.file.options&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Object (optional)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A set of extra options associated with the file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;platform.file.options.showFileHeader&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Boolean&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;If the generated file should have a &#34;Do not edit + Timestamp&#34; header (where the format supports it). By default is &#34;true&#34;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Design Tokens&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;size&#34;: {&#xA;    &#34;font&#34;: {&#xA;      &#34;small&#34; : { &#34;value&#34;: &#34;10px&#34; },&#xA;      &#34;medium&#34;: { &#34;value&#34;: &#34;16px&#34; },&#xA;      &#34;large&#34; : { &#34;value&#34;: &#34;24px&#34; },&#xA;      &#34;base&#34;  : { &#34;value&#34;: &#34;{size.font.medium.value}&#34; }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here we are creating some basic font size design tokens. The style definition size.font.small.value is &#34;10px&#34; for example. The style definition size.font.base.value is automatically aliased to the value found in size.font.medium.value and both of those resolve to &#34;16px&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Now what the style dictionary build system will do with this information is convert it to different formats, enabling these values to be used in any type of codebase. From this one file you can generate any number of files like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-scss&#34;&gt;$size-font-small: 10px;&#xA;$size-font-medium: 16px;&#xA;$size-font-large: 24px;&#xA;$size-font-base: 16px;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-xml&#34;&gt;&amp;lt;dimen name=&#34;font-small&#34;&amp;gt;10sp&amp;lt;/dimen&amp;gt;&#xA;&amp;lt;dimen name=&#34;font-medium&#34;&amp;gt;16sp&amp;lt;/dimen&amp;gt;&#xA;&amp;lt;dimen name=&#34;font-large&#34;&amp;gt;24sp&amp;lt;/dimen&amp;gt;&#xA;&amp;lt;dimen name=&#34;font-base&#34;&amp;gt;16sp&amp;lt;/dimen&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-objc&#34;&gt;float const SizeFontSmall = 10.00f;&#xA;float const SizeFontMedium = 16.00f;&#xA;float const SizeFontLarge = 24.00f;&#xA;float const SizeFontBase = 16.00f;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;The style dictionary framework comes with some example code to get you started. Install the node module globally, create a directory and &lt;code&gt;cd&lt;/code&gt; into it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm i -g style-dictionary&#xA;$ mkdir MyStyleDictionary&#xA;$ cd MyStyleDictionary&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ style-dictionary init basic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will copy over the example files found in &lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/examples/&#34;&gt;example&lt;/a&gt; in this repo. Now you have an example project set up. You can make changes to the style dictionary and rebuild the project by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ style-dictionary build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Take a look at the documentation for the example code.&lt;/p&gt; &#xA;&lt;h2&gt;Design Tokens&lt;/h2&gt; &#xA;&lt;p&gt;A design token is an attribute to describe something visually. It is atomic (it cannot be broken down further). Design tokens have a name, a value, and optional attributes or metadata. The name of a token can be anything, but we have a proposed naming structure that we find works really well in the next section.&lt;/p&gt; &#xA;&lt;h3&gt;Category/Type/Item Structure&lt;/h3&gt; &#xA;&lt;p&gt;While not exactly necessary, we feel this classification structure of design tokens makes the most sense semantically. Design tokens can be organized into a hierarchical tree structure with the top level, category, defining the primitive nature of the token. For example, we have the color category and every token underneath is always a color. As you proceed down the tree to type, item, sub-item, and state, you get more specific about what that color is. Is it a background color, a text color, or a border color? What kind of text color is it? You get the point. Now you can structure your token json files like simple objects:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;size&#34;: {&#xA;    &#34;font&#34;: {&#xA;      &#34;base&#34;:  { &#34;value&#34;: &#34;16&#34; },&#xA;      &#34;large&#34;: { &#34;value&#34;: &#34;20&#34; }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The CTI is implicit in the structure, the category and type is &#39;size&#39; and &#39;font&#39;, and there are 2 tokens &#39;base&#39; and &#39;large&#39;.&lt;/p&gt; &#xA;&lt;p&gt;Structuring design tokens in this manner gives us consistent naming and accessing of these tokens. You don&#39;t need to remember if it is button_color_error or error_button_color, it is color_background_button_error!&lt;/p&gt; &#xA;&lt;p&gt;You can organize and name your design tokens however you want, there are no restrictions. But we have a good amount of helpers if you do use this structure, like the &#39;attribute/cti&#39; transform which adds attributes to the token of its CTI based on the path in the object. There are a lot of name transforms as well for when you want a flat structure like for Sass variables.&lt;/p&gt; &#xA;&lt;p&gt;Also, the CTI structure provides a good mechanism to target transforms for specific kinds of tokens. All of the transforms provided by the framework use the CTI of a token to know if it should be applied. For instance, the &#39;color/hex&#39; transform only applies to tokens of the category &#39;color&#39;.&lt;/p&gt; &#xA;&lt;p&gt;You can also add a &lt;em&gt;comment&lt;/em&gt; to a design token:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;size&#34;: {&#xA;    &#34;font&#34;: {&#xA;      &#34;base&#34;:  {&#xA;        &#34;value&#34;: &#34;16&#34;,&#xA;        &#34;comment&#34;: &#34;the base size of the font&#34;&#xA;      },&#xA;      &#34;large&#34;: {&#xA;        &#34;value&#34;: &#34;20&#34;,&#xA;        &#34;comment&#34;: &#34;the large size of the font&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comment will appear in the output files, where relevant or the output format supports comments.&lt;/p&gt; &#xA;&lt;h2&gt;Extending&lt;/h2&gt; &#xA;&lt;p&gt;The style dictionary build system is made to be extended. We don&#39;t know exactly how everyone will want to use style dictionaries in their project, which is why you can create custom transforms and formats.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const StyleDictionary = require(&#39;style-dictionary&#39;).extend(&#39;config.json&#39;);&#xA;&#xA;StyleDictionary.registerTransform({&#xA;  name: &#39;time/seconds&#39;,&#xA;  type: &#39;value&#39;,&#xA;  matcher: function(prop) {&#xA;    return prop.attributes.category === &#39;time&#39;;&#xA;  },&#xA;  transformer: function(prop) {&#xA;    return (parseInt(prop.original.value) / 1000).toString() + &#39;s&#39;;&#xA;  }&#xA;});&#xA;&#xA;StyleDictionary.buildAllPlatforms();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For more information on creating your own transforms and formats, take a look at our &lt;a href=&#34;https://amzn.github.io/style-dictionary/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Mascot&lt;/h2&gt; &#xA;&lt;p&gt;The mascot for Style Dictionary is &lt;a href=&#34;https://github.com/amzn/style-dictionary/issues/97&#34;&gt;&#34;Pascal&#34;&lt;/a&gt; the chameleon (seen below). You can also find them blending in as the logo throughout the documentation.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/docs/assets/logo.png&#34; alt=&#34;Style Dictionary logo and mascot&#34; title=&#34;&amp;quot;Pascal&amp;quot;&#34; width=&#34;240&#34;&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please help make this framework better. For more information take a look at &lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/amzn/style-dictionary/main/LICENSE&#34;&gt;Apache 2.0&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>