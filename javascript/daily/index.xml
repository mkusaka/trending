<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-11-03T01:32:11Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ddupont808/GPT-4V-Act</title>
    <updated>2023-11-03T01:32:11Z</updated>
    <id>tag:github.com,2023-11-03:/ddupont808/GPT-4V-Act</id>
    <link href="https://github.com/ddupont808/GPT-4V-Act" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AI agent using GPT-4V(ision) capable of using a mouse/keyboard to interact with web UI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GPT-4V-Act: Chromium Copilot&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;‚ö†Ô∏è &lt;strong&gt;Important Note:&lt;/strong&gt; As GPT-4V(ision) has not yet been made publicly available, this project necessitates an active ChatGPT Plus subscription for multimodal prompting access. It&#39;s worth noting that the tactics used by this project to tap into an unofficial GPT-4V API may contravene the associated ChatGPT Term of Service clause:&lt;/p&gt; &#xA; &lt;blockquote&gt; &#xA;  &lt;p&gt;&lt;strong&gt;2.&lt;/strong&gt; (c) &lt;strong&gt;Restrictions:&lt;/strong&gt; You may not ... (iv) except as permitted through the API, use any automated or programmatic method to extract data or output from the Services, including scraping, web harvesting, or web data extraction;&lt;/p&gt; &#xA; &lt;/blockquote&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;GPT-4V-Act serves as an eloquent multimodal AI assistant that harmoniously combines GPT-4V(ision) with a web browser. It&#39;s designed to mirror the input and output of a human operator‚Äîprimarily screen feedback and low-level mouse/keyboard interaction. The objective is to foster a smooth transition between human-computer operations, facilitating the creation of tools that considerably boost the accessibility of any user interface (UI), aid workflow automation, and enable automated UI testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ddupont808/GPT-4V-Act/assets/3820588/fbcde8d1-a7d6-4089-95f6-fd099cc98a0d&#34;&gt;https://github.com/ddupont808/GPT-4V-Act/assets/3820588/fbcde8d1-a7d6-4089-95f6-fd099cc98a0d&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;GPT-4V-Act leverages both &lt;a href=&#34;https://openai.com/research/gpt-4v-system-card&#34;&gt;GPT-4V(ision)&lt;/a&gt; and &lt;a href=&#34;https://arxiv.org/abs/2310.11441&#34;&gt;Set-of-Mark Prompting&lt;/a&gt;, together with a tailored auto-labeler. This auto-labeler assigns a unique numerical ID to each interactable UI element.&lt;/p&gt; &#xA;&lt;p&gt;By incorporating a task and a screenshot as input, GPT-4V-Act can deduce the subsequent action required to accomplish a task. For mouse/keyboard output, it can refer to the numerical labels for exact pixel coordinates.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Get Started!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Clone the repo&#xA;git clone https://github.com/ddupont808/GPT-4V-Act ai-browser&#xA;# Navigate to the repo directory&#xA;cd ai-browser&#xA;# Install the required packages&#xA;npm install&#xA;# Start the demo&#xA;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üîÑ Vision (Partial) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;‚úÖ JS DOM auto-labeler (w/ COCO export)&lt;/li&gt; &#xA;   &lt;li&gt;‚ùå AI auto-labeler&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚úÖ Clicking&lt;/li&gt; &#xA; &lt;li&gt;üîÑ Typing (Partial) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;‚úÖ Typing characters (letters, numbers, strings)&lt;/li&gt; &#xA;   &lt;li&gt;‚ùå Typing special keycodes (enter, pgup, pgdown)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;‚ùå Scrolling&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Prompting user for more information&lt;/li&gt; &#xA; &lt;li&gt;‚ùå Remembering information relevant to task&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you have ideas, feedback, or want to contribute, feel free to create an Issue or reach out to &lt;a href=&#34;mailto:ddupont@mit.edu&#34;&gt;ddupont@mit.edu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Demonstration Prompt&lt;/h2&gt; &#xA;&lt;p&gt;Below is an example of using the user-interface to instruct the agent to &#34;play a random song for me&#34;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddupont808/GPT-4V-Act/main/demo1.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the prompt seen by GPT-4V and the corresponding output&lt;/p&gt; &#xA;&lt;h3&gt;User&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ddupont808/GPT-4V-Act/main/demo2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;task: play a random song for me&#xA;&#xA;type ClickAction = { action: &#34;click&#34;, element: number }&#xA;type TypeAction = { action: &#34;type&#34;, element: number, text: string }&#xA;type ScrollAction = { action: &#34;scroll&#34;, direction: &#34;up&#34; | &#34;down&#34; }&#xA;type RequestInfoFromUser = { action: &#34;request-info&#34;, prompt: string }&#xA;type RememberInfoFromSite = { action: &#34;remember-info&#34;, info: string }&#xA;type Done = { action: &#34;done&#34; }&#xA;&#xA;## response format&#xA;{&#xA;  briefExplanation: string,&#xA;  nextAction: ClickAction | TypeAction | ScrollAction | RequestInfoFromUser | RememberInfoFromSite | Done&#xA;}&#xA;&#xA;## instructions&#xA;# observe the screenshot, and think about the next action&#xA;# output your response in a json markdown code block&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Assistant&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;briefExplanation&#34;: &#34;I&#39;ll type &#39;random song&#39; into the search bar to find a song for you.&#34;,&#xA;  &#34;nextAction&#34;: { &#34;action&#34;: &#34;type&#34;, &#34;element&#34;: 7, &#34;text&#34;: &#34;random song&#34; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>