<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-19T01:31:51Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>adiwajshing/Baileys</title>
    <updated>2022-06-19T01:31:51Z</updated>
    <id>tag:github.com,2022-06-19:/adiwajshing/Baileys</id>
    <link href="https://github.com/adiwajshing/Baileys" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Lightweight full-featured WhatsApp Web + Multi-Device API&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Baileys - Typescript/Javascript WhatsApp Web API&lt;/h1&gt; &#xA;&lt;p&gt;Baileys does not require Selenium or any other browser to be interface with WhatsApp Web, it does so directly using a &lt;strong&gt;WebSocket&lt;/strong&gt;. Not running Selenium or Chromimum saves you like &lt;strong&gt;half a gig&lt;/strong&gt; of ram :/&lt;/p&gt; &#xA;&lt;p&gt;Baileys supports interacting with the multi-device &amp;amp; web versions of WhatsApp.&lt;/p&gt; &#xA;&lt;p&gt;Thank you to &lt;a href=&#34;https://github.com/pokearaujo/multidevice&#34;&gt;@pokearaujo&lt;/a&gt; for writing his observations on the workings of WhatsApp Multi-Device. Also, thank you to &lt;a href=&#34;https://github.com/sigalor/whatsapp-web-reveng&#34;&gt;@Sigalor&lt;/a&gt; for writing his observations on the workings of WhatsApp Web and thanks to &lt;a href=&#34;https://github.com/Rhymen/go-whatsapp/&#34;&gt;@Rhymen&lt;/a&gt; for the &lt;strong&gt;go&lt;/strong&gt; implementation.&lt;/p&gt; &#xA;&lt;p&gt;Baileys is type-safe, extensible and simple to use. If you require more functionality than provided, it&#39;ll super easy for you to write an extension. More on this &lt;a href=&#34;https://raw.githubusercontent.com/adiwajshing/Baileys/master/#WritingCustomFunctionality&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re interested in building a WhatsApp bot, you may wanna check out &lt;a href=&#34;https://github.com/adiwajshing/WhatsappInfoBot&#34;&gt;WhatsAppInfoBot&lt;/a&gt; and an actual bot built with it, &lt;a href=&#34;https://github.com/ashokatechmin/Messcat&#34;&gt;Messcat&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read the docs &lt;a href=&#34;https://adiwajshing.github.io/Baileys&#34;&gt;here&lt;/a&gt;&lt;/strong&gt; &lt;strong&gt;Join the Discord &lt;a href=&#34;https://discord.gg/WeJM5FP9GG&#34;&gt;here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Do check out &amp;amp; run &lt;a href=&#34;https://github.com/adiwajshing/Baileys/raw/master/Example/example.ts&#34;&gt;example.ts&lt;/a&gt; to see example usage of the library. The script covers most common use cases. To run the example script, download or clone the repo and then type the following in terminal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;cd path/to/Baileys&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn example&lt;/code&gt; for the multi-device edition&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;yarn example:legacy&lt;/code&gt; for the legacy web edition&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;Use the stable version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @adiwajshing/baileys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use the edge version (no guarantee of stability, but latest fixes + features)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add github:adiwajshing/baileys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then import in your code using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for multi-device&#xA;import makeWASocket from &#39;@adiwajshing/baileys&#39;&#xA;// for legacy web&#xA;import {makeWALegacySocket} from &#39;@adiwajshing/baileys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Unit Tests&lt;/h2&gt; &#xA;&lt;p&gt;TODO&lt;/p&gt; &#xA;&lt;h2&gt;Connecting&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { DisconnectReason } from &#39;@adiwajshing/baileys&#39;&#xA;import { Boom } from &#39;@hapi/boom&#39;&#xA;&#xA;async function connectToWhatsApp () {&#xA;    const sock = makeWASocket({&#xA;        // can provide additional config here&#xA;        printQRInTerminal: true&#xA;    })&#xA;    sock.ev.on(&#39;connection.update&#39;, (update) =&amp;gt; {&#xA;        const { connection, lastDisconnect } = update&#xA;        if(connection === &#39;close&#39;) {&#xA;            const shouldReconnect = (lastDisconnect.error as Boom)?.output?.statusCode !== DisconnectReason.loggedOut&#xA;            console.log(&#39;connection closed due to &#39;, lastDisconnect.error, &#39;, reconnecting &#39;, shouldReconnect)&#xA;            // reconnect if not logged out&#xA;            if(shouldReconnect) {&#xA;                connectToWhatsApp()&#xA;            }&#xA;        } else if(connection === &#39;open&#39;) {&#xA;            console.log(&#39;opened connection&#39;)&#xA;        }&#xA;    })&#xA;    sock.ev.on(&#39;messages.upsert&#39;, m =&amp;gt; {&#xA;        console.log(JSON.stringify(m, undefined, 2))&#xA;&#xA;        console.log(&#39;replying to&#39;, m.messages[0].key.remoteJid)&#xA;        await sock.sendMessage(m.messages[0].key.remoteJid!, { text: &#39;Hello there!&#39; })&#xA;    })&#xA;}&#xA;// run in main file&#xA;connectToWhatsApp()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the connection is successful, you will see a QR code printed on your terminal screen, scan it with WhatsApp on your phone and you&#39;ll be logged in!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; install &lt;code&gt;qrcode-terminal&lt;/code&gt; using &lt;code&gt;yarn add qrcode-terminal&lt;/code&gt; to auto-print the QR to the terminal.&lt;/p&gt; &#xA;&lt;h2&gt;Notable Differences Between Baileys v3 &amp;amp; v4&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Baileys has been written from the ground up to have a more &#34;functional&#34; structure. This is done primarily for simplicity &amp;amp; more testability&lt;/li&gt; &#xA; &lt;li&gt;The Baileys event emitter will emit all events and be used to generate a source of truth for the connected user&#39;s account. Access the event emitter using (&lt;code&gt;sock.ev&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Baileys no longer maintains an internal state of chats/contacts/messages. You should ideally take this on your own, simply because your state in MD is its own source of truth &amp;amp; there is no one-size-fits-all way to handle the storage for this. However, a simple storage extension has been provided. This also serves as a good demonstration of how to use the Baileys event emitter to construct a source of truth.&lt;/li&gt; &#xA; &lt;li&gt;A baileys &#34;socket&#34; is meant to be a temporary &amp;amp; disposable object -- this is done to maintain simplicity &amp;amp; prevent bugs. I felt the entire Baileys object became too bloated as it supported too many configurations. You&#39;re encouraged to write your own implementation to handle missing functionality.&lt;/li&gt; &#xA; &lt;li&gt;Moreover, Baileys does not offer an inbuilt reconnect mechanism anymore (though it&#39;s super easy to set one up on your own with your own rules, check the example script)&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Configuring the Connection&lt;/h2&gt; &#xA;&lt;p&gt;You can configure the connection by passing a &lt;code&gt;SocketConfig&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;The entire &lt;code&gt;SocketConfig&lt;/code&gt; structure is mentioned here with default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type SocketConfig = {&#xA;    /** provide an auth state object to maintain the auth state */&#xA;    auth?: AuthenticationState&#xA;    /** the WS url to connect to WA */&#xA;    waWebSocketUrl: string | URL &#xA;    /** Fails the connection if the connection times out in this time interval or no data is received */&#xA;&#x9;connectTimeoutMs: number&#xA;    /** Default timeout for queries, undefined for no timeout */&#xA;    defaultQueryTimeoutMs: number | undefined&#xA;    /** ping-pong interval for WS connection */&#xA;    keepAliveIntervalMs: number&#xA;    /** proxy agent */&#xA;&#x9;agent?: Agent&#xA;    /** pino logger */&#xA;&#x9;logger: Logger&#xA;    /** version to connect with */&#xA;    version: WAVersion&#xA;    /** override browser config */&#xA;&#x9;browser: WABrowserDescription&#xA;&#x9;/** agent used for fetch requests -- uploading/downloading media */&#xA;&#x9;fetchAgent?: Agent&#xA;    /** should the QR be printed in the terminal */&#xA;    printQRInTerminal: boolean&#xA;    /** fires a conversationTimestamp &amp;amp; read count update on CIPHERTEXT messages */&#xA;    treatCiphertextMessagesAsReal: boolean&#xA;    /** &#xA;     * fetch a message from your store &#xA;     * implement this so that messages failed to send (solves the &#34;this message can take a while&#34; issue) can be retried&#xA;     * */&#xA;    getMessage: (key: proto.IMessageKey) =&amp;gt; Promise&amp;lt;proto.IMessage | undefined&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Saving &amp;amp; Restoring Sessions&lt;/h2&gt; &#xA;&lt;p&gt;You obviously don&#39;t want to keep scanning the QR code every time you want to connect.&lt;/p&gt; &#xA;&lt;p&gt;So, you can load the credentials to log back in:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { BufferJSON, useMultiFileAuthState } from &#39;@adiwajshing/baileys&#39;&#xA;import * as fs from &#39;fs&#39;&#xA;&#xA;// utility function to help save the auth state in a single folder&#xA;// this function serves as a good guide to help write auth &amp;amp; key states for SQL/no-SQL databases, which I would recommend in any production grade system&#xA;const { state, saveCreds } = await useMultiFileAuthState(&#39;auth_info_baileys&#39;)&#xA;// will use the given state to connect&#xA;// so if valid credentials are available -- it&#39;ll connect without QR&#xA;const conn = makeWASocket({ auth: state }) &#xA;// this will be called as soon as the credentials are updated&#xA;conn.ev.on (&#39;creds.update&#39;, saveCreds)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: When a message is received/sent, due to signal sessions needing updating, the auth keys (&lt;code&gt;authState.keys&lt;/code&gt;) will update. Whenever that happens, you must save the updated keys (&lt;code&gt;authState.keys.set()&lt;/code&gt; is called). Not doing so will prevent your messages from reaching the recipient &amp;amp; other unexpected consequences. The &lt;code&gt;useMultiFileAuthState&lt;/code&gt; function automatically takes care of that, but for any other serious implementation -- you will need to be very careful with the key state management.&lt;/p&gt; &#xA;&lt;h2&gt;Listening to Connection Updates&lt;/h2&gt; &#xA;&lt;p&gt;Baileys now fires the &lt;code&gt;connection.update&lt;/code&gt; event to let you know something has updated in the connection. This data has the following structure:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type ConnectionState = {&#xA;&#x9;/** connection is now open, connecting or closed */&#xA;&#x9;connection: WAConnectionState&#xA;&#x9;/** the error that caused the connection to close */&#xA;&#x9;lastDisconnect?: {&#xA;&#x9;&#x9;error: Error&#xA;&#x9;&#x9;date: Date&#xA;&#x9;}&#xA;&#x9;/** is this a new login */&#xA;&#x9;isNewLogin?: boolean&#xA;&#x9;/** the current QR code */&#xA;&#x9;qr?: string&#xA;&#x9;/** has the device received all pending notifications while it was offline */&#xA;&#x9;receivedPendingNotifications?: boolean &#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: this also offers any updates to the QR&lt;/p&gt; &#xA;&lt;h2&gt;Handling Events&lt;/h2&gt; &#xA;&lt;p&gt;Baileys uses the EventEmitter syntax for events. They&#39;re all nicely typed up, so you shouldn&#39;t have any issues with an Intellisense editor like VS Code.&lt;/p&gt; &#xA;&lt;p&gt;The events are typed up in a type map, as mentioned here:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;export type BaileysEventMap = {&#xA;    /** connection state has been updated -- WS closed, opened, connecting etc. */&#xA;    &#39;connection.update&#39;: Partial&amp;lt;ConnectionState&amp;gt;&#xA;    /** auth credentials updated -- some pre key state, device ID etc. */&#xA;    &#39;creds.update&#39;: Partial&amp;lt;AuthenticationCreds&amp;gt;&#xA;    /** set chats (history sync), chats are reverse chronologically sorted */&#xA;    &#39;chats.set&#39;: { chats: Chat[], isLatest: boolean }&#xA;    /** set messages (history sync), messages are reverse chronologically sorted */&#xA;    &#39;messages.set&#39;: { messages: WAMessage[], isLatest: boolean }&#xA;    /** set contacts (history sync) */&#xA;    &#39;contacts.set&#39;: { contacts: Contact[] }&#xA;    /** upsert chats */&#xA;    &#39;chats.upsert&#39;: Chat[]&#xA;    /** update the given chats */&#xA;    &#39;chats.update&#39;: Partial&amp;lt;Chat&amp;gt;[]&#xA;    /** delete chats with given ID */&#xA;    &#39;chats.delete&#39;: string[]&#xA;    /** presence of contact in a chat updated */&#xA;    &#39;presence.update&#39;: { id: string, presences: { [participant: string]: PresenceData }  }&#xA;&#xA;    &#39;contacts.upsert&#39;: Contact[]&#xA;    &#39;contacts.update&#39;: Partial&amp;lt;Contact&amp;gt;[] &#xA;    &#xA;    &#39;messages.delete&#39;: { keys: WAMessageKey[] } | { jid: string, all: true }&#xA;    &#39;messages.update&#39;: WAMessageUpdate[]&#xA;    /** &#xA;     * add/update the given messages. If they were received while the connection was online, &#xA;     * the update will have type: &#34;notify&#34;&#xA;     *  */&#xA;    &#39;messages.upsert&#39;: { messages: WAMessage[], type: MessageUpdateType }&#xA;&#xA;    &#39;message-info.update&#39;: MessageInfoUpdate[]&#xA;&#xA;    &#39;groups.update&#39;: Partial&amp;lt;GroupMetadata&amp;gt;[]&#xA;    /** apply an action to participants in a group */&#xA;    &#39;group-participants.update&#39;: { id: string, participants: string[], action: ParticipantAction }&#xA;&#xA;    &#39;blocklist.set&#39;: { blocklist: string[] }&#xA;    &#39;blocklist.update&#39;: { blocklist: string[], type: &#39;add&#39; | &#39;remove&#39; }&#xA;    /** Receive an update on a call, including when the call was received, rejected, accepted */&#xA;    &#39;call&#39;: WACallEvent[]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can listen to these events like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;&#xA;const sock = makeWASocket()&#xA;sock.ev.on(&#39;messages.upsert&#39;, ({ messages }) =&amp;gt; {&#xA;    console.log(&#39;got messages&#39;, messages)&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Implementing a Data Store&lt;/h2&gt; &#xA;&lt;p&gt;As mentioned earlier, Baileys does not come with a defacto storage for chats, contacts, messages. However, a simple in-memory implementation has been provided. The store listens for chat updates, new messages, message updates etc. to always have an up to date version of the data.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import makeWASocket, { makeInMemoryStore } from &#39;@adiwajshing/baileys&#39;&#xA;// the store maintains the data of the WA connection in memory&#xA;// can be written out to a file &amp;amp; read from it&#xA;const store = makeInMemoryStore({ })&#xA;// can be read from a file&#xA;store.readFromFile(&#39;./baileys_store.json&#39;)&#xA;// saves the state to a file every 10s&#xA;setInterval(() =&amp;gt; {&#xA;    store.writeToFile(&#39;./baileys_store.json&#39;)&#xA;}, 10_000)&#xA;&#xA;const sock = makeWASocket({ })&#xA;// will listen from this socket&#xA;// the store can listen from a new socket once the current socket outlives its lifetime&#xA;store.bind(sock.ev)&#xA;&#xA;sock.ev.on(&#39;chats.set&#39;, () =&amp;gt; {&#xA;    // can use &#34;store.chats&#34; however you want, even after the socket dies out&#xA;    // &#34;chats&#34; =&amp;gt; a KeyedDB instance&#xA;    console.log(&#39;got chats&#39;, store.chats.all())&#xA;})&#xA;&#xA;sock.ev.on(&#39;contacts.set&#39;, () =&amp;gt; {&#xA;    console.log(&#39;got contacts&#39;, Object.values(store.contacts))&#xA;})&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The store also provides some simple functions such as &lt;code&gt;loadMessages&lt;/code&gt; that utilize the store to speed up data retrieval.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I highly recommend building your own data store especially for MD connections, as storing someone&#39;s entire chat history in memory is a terrible waste of RAM.&lt;/p&gt; &#xA;&lt;h2&gt;Using the Legacy Version&lt;/h2&gt; &#xA;&lt;p&gt;The API for the legacy and MD versions has been made as similar as possible so ya&#39;ll can switch between them seamlessly.&lt;/p&gt; &#xA;&lt;p&gt;Example on using the eg. version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import P from &#34;pino&#34;&#xA;import { Boom } from &#34;@hapi/boom&#34;&#xA;import { makeWALegacySocket } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;// store can be used with legacy version as well&#xA;const store = makeInMemoryStore({ logger: P().child({ level: &#39;debug&#39;, stream: &#39;store&#39; }) })&#xA;&#xA;const sock = makeWALegacySocket({&#xA;    logger: P({ level: &#39;debug&#39; }),&#xA;    printQRInTerminal: true,&#xA;    auth: state&#xA;})&#xA;// bind to the socket&#xA;store.bind(sock.ev)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a type representing either the legacy or MD version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// this type can have any of the socket types underneath&#xA;import { AnyWASocket } from &#39;@adiwajshing/baileys&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sending Messages&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Send all types of messages with a single function:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Non-Media Messages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;const id = &#39;abcd@s.whatsapp.net&#39; // the WhatsApp ID &#xA;// send a simple text!&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; })&#xA;// send a reply messagge&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;oh hello there&#39; }, { quoted: message })&#xA;// send a mentions message&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;@12345678901&#39;, mentions: [&#39;12345678901@s.whatsapp.net&#39;] })&#xA;// send a location!&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id, &#xA;    { location: { degreesLatitude: 24.121231, degreesLongitude: 55.1121221 } }&#xA;)&#xA;// send a contact!&#xA;const vcard = &#39;BEGIN:VCARD\n&#39; // metadata of the contact card&#xA;            + &#39;VERSION:3.0\n&#39; &#xA;            + &#39;FN:Jeff Singh\n&#39; // full name&#xA;            + &#39;ORG:Ashoka Uni;\n&#39; // the organization of the contact&#xA;            + &#39;TEL;type=CELL;type=VOICE;waid=911234567890:+91 12345 67890\n&#39; // WhatsApp ID + phone number&#xA;            + &#39;END:VCARD&#39;&#xA;const sentMsg  = await sock.sendMessage(&#xA;    id,&#xA;    { &#xA;        contacts: { &#xA;            displayName: &#39;Jeff&#39;, &#xA;            contacts: [{ vcard }] &#xA;        }&#xA;    }&#xA;)&#xA;&#xA;// send a buttons message!&#xA;const buttons = [&#xA;  {buttonId: &#39;id1&#39;, buttonText: {displayText: &#39;Button 1&#39;}, type: 1},&#xA;  {buttonId: &#39;id2&#39;, buttonText: {displayText: &#39;Button 2&#39;}, type: 1},&#xA;  {buttonId: &#39;id3&#39;, buttonText: {displayText: &#39;Button 3&#39;}, type: 1}&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    text: &#34;Hi it&#39;s button message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    buttons: buttons,&#xA;    headerType: 1&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, buttonMessage)&#xA;&#xA;//send a template message!&#xA;const templateButtons = [&#xA;    {index: 1, urlButton: {displayText: &#39;⭐ Star Baileys on GitHub!&#39;, url: &#39;https://github.com/adiwajshing/Baileys&#39;}},&#xA;    {index: 2, callButton: {displayText: &#39;Call me!&#39;, phoneNumber: &#39;+1 (234) 5678-901&#39;}},&#xA;    {index: 3, quickReplyButton: {displayText: &#39;This is a reply, just like normal buttons!&#39;, id: &#39;id-like-buttons-message&#39;}},&#xA;]&#xA;&#xA;const templateMessage = {&#xA;    text: &#34;Hi it&#39;s a template message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    templateButtons: templateButtons&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, templateMessage)&#xA;&#xA;// send a list message!&#xA;const sections = [&#xA;    {&#xA;&#x9;title: &#34;Section 1&#34;,&#xA;&#x9;rows: [&#xA;&#x9;    {title: &#34;Option 1&#34;, rowId: &#34;option1&#34;},&#xA;&#x9;    {title: &#34;Option 2&#34;, rowId: &#34;option2&#34;, description: &#34;This is a description&#34;}&#xA;&#x9;]&#xA;    },&#xA;   {&#xA;&#x9;title: &#34;Section 2&#34;,&#xA;&#x9;rows: [&#xA;&#x9;    {title: &#34;Option 3&#34;, rowId: &#34;option3&#34;},&#xA;&#x9;    {title: &#34;Option 4&#34;, rowId: &#34;option4&#34;, description: &#34;This is a description V2&#34;}&#xA;&#x9;]&#xA;    },&#xA;]&#xA;&#xA;const listMessage = {&#xA;  text: &#34;This is a list&#34;,&#xA;  footer: &#34;nice footer, link: https://google.com&#34;,&#xA;  title: &#34;Amazing boldfaced list title&#34;,&#xA;  buttonText: &#34;Required, text on the button to view the list&#34;,&#xA;  sections&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, listMessage)&#xA;&#xA;const reactionMessage = {&#xA;    react: {&#xA;        text: &#34;💖&#34;,&#xA;        key: message.key&#xA;    }&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, reactionMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Sending messages with link previews&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By default, WA MD does not seem to have link generation when sent from the web&lt;/li&gt; &#xA; &lt;li&gt;Baileys has an extra function to help generate the content for these link previews&lt;/li&gt; &#xA; &lt;li&gt;To enable this function&#39;s usage, add &lt;code&gt;link-preview-js&lt;/code&gt; as a dependency to your project with &lt;code&gt;yarn add link-preview-js&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Send a link:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// send a link&#xA;const sentMsg  = await sock.sendMessage(id, { text: &#39;Hi, this was sent using https://github.com/adiwajshing/baileys&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Media Messages&lt;/h3&gt; &#xA;&lt;p&gt;Sending media (video, stickers, images) is easier &amp;amp; more efficient than ever.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can specify a buffer, a local url or even a remote url.&lt;/li&gt; &#xA; &lt;li&gt;When specifying a media url, Baileys never loads the entire buffer into memory, it even encrypts the media as a readable stream.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { MessageType, MessageOptions, Mimetype } from &#39;@adiwajshing/baileys&#39;&#xA;// Sending gifs&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: fs.readFileSync(&#34;Media/ma_gif.mp4&#34;), &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { &#xA;        video: &#34;./Media/ma_gif.mp4&#34;, &#xA;        caption: &#34;hello!&#34;,&#xA;        gifPlayback: true&#xA;    }&#xA;)&#xA;&#xA;// send an audio file&#xA;await sock.sendMessage(&#xA;    id, &#xA;    { audio: { url: &#34;./Media/audio.mp3&#34; }, mimetype: &#39;audio/mp4&#39; }&#xA;    { url: &#34;Media/audio.mp3&#34; }, // can send mp3, mp4, &amp;amp; ogg&#xA;)&#xA;&#xA;// send a buttons message with image header!&#xA;const buttons = [&#xA;  {buttonId: &#39;id1&#39;, buttonText: {displayText: &#39;Button 1&#39;}, type: 1},&#xA;  {buttonId: &#39;id2&#39;, buttonText: {displayText: &#39;Button 2&#39;}, type: 1},&#xA;  {buttonId: &#39;id3&#39;, buttonText: {displayText: &#39;Button 3&#39;}, type: 1}&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    image: {url: &#39;https://example.com/image.jpeg&#39;},&#xA;    caption: &#34;Hi it&#39;s button message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    buttons: buttons,&#xA;    headerType: 4&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, buttonMessage)&#xA;&#xA;//send a template message with an image **attached**!&#xA;const templateButtons = [&#xA;  {index: 1, urlButton: {displayText: &#39;⭐ Star Baileys on GitHub!&#39;, url: &#39;https://github.com/adiwajshing/Baileys&#39;}},&#xA;  {index: 2, callButton: {displayText: &#39;Call me!&#39;, phoneNumber: &#39;+1 (234) 5678-901&#39;}},&#xA;  {index: 3, quickReplyButton: {displayText: &#39;This is a reply, just like normal buttons!&#39;, id: &#39;id-like-buttons-message&#39;}},&#xA;]&#xA;&#xA;const buttonMessage = {&#xA;    text: &#34;Hi it&#39;s a template message&#34;,&#xA;    footer: &#39;Hello World&#39;,&#xA;    templateButtons: templateButtons,&#xA;    image: {url: &#39;https://example.com/image.jpeg&#39;}&#xA;}&#xA;&#xA;const sendMsg = await sock.sendMessage(id, templateMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;id&lt;/code&gt; is the WhatsApp ID of the person or group you&#39;re sending the message to. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It must be in the format &lt;code&gt;[country code][phone number]@s.whatsapp.net&lt;/code&gt;, for example &lt;code&gt;+19999999999@s.whatsapp.net&lt;/code&gt; for people. For groups, it must be in the format &lt;code&gt;123456789-123345@g.us&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For broadcast lists it&#39;s &lt;code&gt;[timestamp of creation]@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;For stories, the ID is &lt;code&gt;status@broadcast&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For media messages, the thumbnail can be generated automatically for images &amp;amp; stickers provided you add &lt;code&gt;jimp&lt;/code&gt; or &lt;code&gt;sharp&lt;/code&gt; as a dependency in your project using &lt;code&gt;yarn add jimp&lt;/code&gt; or &lt;code&gt;yarn add sharp&lt;/code&gt;. Thumbnails for videos can also be generated automatically, though, you need to have &lt;code&gt;ffmpeg&lt;/code&gt; installed on your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;MiscGenerationOptions&lt;/strong&gt;: some extra info about the message. It can have the following &lt;strong&gt;optional&lt;/strong&gt; values: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const info: MessageOptions = {&#xA;    quoted: quotedMessage, // the message you want to quote&#xA;    contextInfo: { forwardingScore: 2, isForwarded: true }, // some random context info (can show a forwarded message with this too)&#xA;    timestamp: Date(), // optional, if you want to manually set the timestamp of the message&#xA;    caption: &#34;hello there!&#34;, // (for media messages) the caption to send with the media (cannot be sent with stickers though)&#xA;    jpegThumbnail: &#34;23GD#4/==&#34;, /*  (for location &amp;amp; media messages) has to be a base 64 encoded JPEG if you want to send a custom thumb, &#xA;                                or set to null if you don&#39;t want to send a thumbnail.&#xA;                                Do not enter this field if you want to automatically generate a thumb&#xA;                            */&#xA;    mimetype: Mimetype.pdf, /* (for media messages) specify the type of media (optional for all media types except documents),&#xA;                                import {Mimetype} from &#39;@adiwajshing/baileys&#39;&#xA;                            */&#xA;    fileName: &#39;somefile.pdf&#39;, // (for media messages) file name for the media&#xA;    /* will send audio messages as voice notes, if set to true */&#xA;    ptt: true,&#xA;    // will detect links &amp;amp; generate a link preview automatically (default true)&#xA;    detectLinks: true,&#xA;    /** Should it send as a disappearing messages. &#xA;     * By default &#39;chat&#39; -- which follows the setting of the chat */&#xA;    sendEphemeral: &#39;chat&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Forwarding Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const msg = getMessageFromStore(&#39;455@s.whatsapp.net&#39;, &#39;HSJHJWH7323HSJSJ&#39;) // implement this on your end&#xA;await sock.sendMessage(&#39;1234@s.whatsapp.net&#39;, { forward: msg }) // WA forward the message!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reading Messages&lt;/h2&gt; &#xA;&lt;p&gt;A set of message keys must be explicitly marked read now. In multi-device, you cannot mark an entire &#34;chat&#34; read as it were with Baileys Web. This does mean you have to keep track of unread messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const key = {&#xA;    remoteJid: &#39;1234-123@g.us&#39;,&#xA;    id: &#39;AHASHH123123AHGA&#39;, // id of the message you want to read&#xA;    participant: &#39;912121232@s.whatsapp.net&#39; // the ID of the user that sent the  message (undefined for individual chats)&#xA;}&#xA;// pass to readMessages function&#xA;// can pass multiple keys to read multiple messages as well&#xA;await sock.readMessages([key])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The message ID is the unique identifier of the message that you are marking as read. On a &lt;code&gt;WAMessage&lt;/code&gt;, the &lt;code&gt;messageID&lt;/code&gt; can be accessed using &lt;code&gt;messageID = message.key.id&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Update Presence&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.sendPresenceUpdate(&#39;available&#39;, id) &#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This lets the person/group with &lt;code&gt;id&lt;/code&gt; know whether you&#39;re online, offline, typing etc. where &lt;code&gt;presence&lt;/code&gt; can be one of the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type WAPresence = &#39;unavailable&#39; | &#39;available&#39; | &#39;composing&#39; | &#39;recording&#39; | &#39;paused&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The presence expires after about 10 seconds.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In the multi-device version of WhatsApp -- if a desktop client is active, WA doesn&#39;t send push notifications to the device. If you would like to receive said notifications -- mark your Baileys client offline using &lt;code&gt;sock.sendPresenceUpdate(&#39;unavailable&#39;)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Downloading Media Messages&lt;/h2&gt; &#xA;&lt;p&gt;If you want to save the media you received&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import { writeFile } from &#39;fs/promises&#39;&#xA;import { downloadMediaMessage } from &#39;@adiwajshing/baileys&#39;&#xA;&#xA;sock.ev.on(&#39;messages.upsert&#39;, async ({ messages }) =&amp;gt; {&#xA;    const m = messages[0]&#xA;&#xA;    if (!m.message) return // if there is no text or media message&#xA;    const messageType = Object.keys (m.message)[0]// get what type of message it is -- text, image, video&#xA;    // if the message is an image&#xA;    if (messageType === &#39;imageMessage&#39;) {&#xA;        // download the message&#xA;        const buffer = await downloadMediaMessage(&#xA;            m,&#xA;            &#39;buffer&#39;,&#xA;            { },&#xA;            { &#xA;                logger,&#xA;                // pass this so that baileys can request a reupload of media&#xA;                // that has been deleted&#xA;                reuploadRequest: sock.updateMediaMessage&#xA;            }&#xA;        )&#xA;        // save to file&#xA;        await writeFile(&#39;./my-download.jpeg&#39;, buffer)&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; WhatsApp automatically removes old media from their servers, and so for the device to access said media -- a re-upload is required by another device that has the media. This can be accomplished using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const updatedMediaMsg = await sock.updateMediaMessage(msg)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deleting Messages&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;const response = await sock.sendMessage(jid, { text: &#39;hello!&#39; }) // send a message&#xA;// sends a message to delete the given message&#xA;// this deletes the message for everyone&#xA;await sock.sendMessage(jid, { delete: response.key })&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: deleting for oneself is supported via &lt;code&gt;chatModify&lt;/code&gt; (next section)&lt;/p&gt; &#xA;&lt;h2&gt;Modifying Chats&lt;/h2&gt; &#xA;&lt;p&gt;WA uses an encrypted form of communication to send chat/app updates. This has been implemented mostly and you can send the following updates:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Archive a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;await sock.chatModify({ archive: true, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mute/unmute a chat&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// mute for 8 hours&#xA;await sock.chatModify({ mute: 8*60*60*1000 }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;// unmute&#xA;await sock.chatModify({ mute: null }, &#39;123456@s.whatsapp.net&#39;, [])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Mark a chat read/unread&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const lastMsgInChat = await getLastMessageInChat(&#39;123456@s.whatsapp.net&#39;) // implement this on your end&#xA;// mark it unread&#xA;await sock.chatModify({ markRead: false, lastMessages: [lastMsgInChat] }, &#39;123456@s.whatsapp.net&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete message for me&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.chatModify(&#xA;  { clear: { messages: [{ id: &#39;ATWYHDNNWU81732J&#39;, fromMe: true, timestamp: &#34;1654823909&#34; }] } }, &#xA;  &#39;123456@s.whatsapp.net&#39;, &#xA;  []&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;Note: if you mess up one of your updates, WA can log you out of all your devices and you&#39;ll have to login again.&#xA;&#xA;## Disappearing Messages&#xA;&#xA;``` ts&#xA;const jid = &#39;1234@s.whatsapp.net&#39; // can also be a group&#xA;// turn on disappearing messages&#xA;await sock.sendMessage(&#xA;  jid, &#xA;  // this is 1 week in seconds -- how long you want messages to appear for&#xA;  { disappearingMessagesInChat: WA_DEFAULT_EPHEMERAL }&#xA;)&#xA;// will send as a disappearing message&#xA;await sock.sendMessage(jid, { text: &#39;hello&#39; }, { ephemeralExpiration: WA_DEFAULT_EPHEMERAL })&#xA;// turn off disappearing messages&#xA;await sock.sendMessage(&#xA;  jid, &#xA;  { disappearingMessagesInChat: false }&#xA;)&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Misc&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;To check if a given ID is on WhatsApp &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const id = &#39;123456&#39;&#xA;const [result] = await sock.onWhatsApp(id)&#xA;if (result.exists) console.log (`${id} exists on WhatsApp, as jid: ${result.jid}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To query chat history on a group or with someone TODO, if possible&lt;/li&gt; &#xA; &lt;li&gt;To get the status of some person &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const status = await sock.fetchStatus(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;status: &#34; + status)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get the display picture of some person/group &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for low res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;)&#xA;console.log(&#34;download profile picture from: &#34; + ppUrl)&#xA;// for high res picture&#xA;const ppUrl = await sock.profilePictureUrl(&#34;xyz@g.us&#34;, &#39;image&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To change your display picture or a group&#39;s &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const jid = &#39;111234567890-1594482450@g.us&#39; // can be your own too&#xA;await sock.updateProfilePicture(jid, { url: &#39;./new-profile-picture.jpeg&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get someone&#39;s presence (if they&#39;re typing, online) &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// the presence update is fetched and called here&#xA;sock.ev.on(&#39;presence-update&#39;, json =&amp;gt; console.log(json))&#xA;// request updates for a chat&#xA;await sock.presenceSubscribe(&#34;xyz@s.whatsapp.net&#34;) &#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To block or unblock user &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;block&#34;) // Block user&#xA;await sock.updateBlockStatus(&#34;xyz@s.whatsapp.net&#34;, &#34;unblock&#34;) // Unblock user&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;To get a business profile, such as description, category &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const profile = await sock.getBusinessProfile(&#34;xyz@s.whatsapp.net&#34;)&#xA;console.log(&#34;business description: &#34; + profile.description + &#34;, category: &#34; + profile.category)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Of course, replace &lt;code&gt;xyz&lt;/code&gt; with an actual ID.&lt;/p&gt; &#xA;&lt;h2&gt;Groups&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To create a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// title &amp;amp; participants&#xA;const group = await sock.groupCreate(&#34;My Fab Group&#34;, [&#34;1234@s.whatsapp.net&#34;, &#34;4564@s.whatsapp.net&#34;])&#xA;console.log (&#34;created group with id: &#34; + group.gid)&#xA;sock.sendMessage(group.id, { text: &#39;hello there&#39; }) // say hello to everyone on the group&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To add/remove people to a group or demote/promote people&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// id &amp;amp; people to add to the group (will throw error if it fails)&#xA;const response = await sock.groupParticipantsUpdate(&#xA;    &#34;abcd-xyz@g.us&#34;, &#xA;    [&#34;abcd@s.whatsapp.net&#34;, &#34;efgh@s.whatsapp.net&#34;],&#xA;    &#34;add&#34; // replace this parameter with &#34;remove&#34;, &#34;demote&#34; or &#34;promote&#34;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change the group&#39;s subject&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateSubject(&#34;abcd-xyz@g.us&#34;, &#34;New Subject!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change the group&#39;s description&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupUpdateDescription(&#34;abcd-xyz@g.us&#34;, &#34;New Description!&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To change group settings&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// only allow admins to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;announcement&#39;)&#xA;// allow everyone to send messages&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;not_announcement&#39;)&#xA;// allow everyone to modify the group&#39;s settings -- like display picture etc.&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;unlocked&#39;)&#xA;// only allow admins to modify the group&#39;s settings&#xA;await sock.groupSettingUpdate(&#34;abcd-xyz@g.us&#34;, &#39;locked&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To leave a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;await sock.groupLeave(&#34;abcd-xyz@g.us&#34;) // (will throw error if it fails)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get the invite code for a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupInviteCode(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To revoke the invite code in a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const code = await sock.groupRevokeInvite(&#34;abcd-xyz@g.us&#34;)&#xA;console.log(&#34;New group code: &#34; + code)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To query the metadata of a group&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const metadata = await sock.groupMetadata(&#34;abcd-xyz@g.us&#34;) &#xA;console.log(metadata.id + &#34;, title: &#34; + metadata.subject + &#34;, description: &#34; + metadata.desc)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To join the group using the invitation code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInvite(&#34;xxx&#34;)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To get info group by invite code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupGetInviteInfo(&#34;xxx&#34;)&#xA;console.log(&#34;group information: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To join the group using groupInviteMessage&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const response = await sock.groupAcceptInviteV4(&#34;abcd@s.whatsapp.net&#34;, groupInviteMessage)&#xA;console.log(&#34;joined to: &#34; + response)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Of course, replace &lt;code&gt;xxx&lt;/code&gt; with invitation code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Broadcast Lists &amp;amp; Stories&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; messages cannot be sent to broadcast lists from the MD version right now&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can send messages to broadcast lists the same way you send messages to groups &amp;amp; individual chats.&lt;/li&gt; &#xA; &lt;li&gt;Unfortunately, WA Web does not support creating broadcast lists right now but you can still delete them.&lt;/li&gt; &#xA; &lt;li&gt;Broadcast IDs are in the format &lt;code&gt;12345678@broadcast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;To query a broadcast list&#39;s recipients &amp;amp; name: &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const bList = await sock.getBroadcastListInfo(&#34;1234@broadcast&#34;)&#xA;console.log (`list name: ${bList.name}, recps: ${bList.recipients}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Writing Custom Functionality&lt;/h2&gt; &#xA;&lt;p&gt;Baileys is written, keeping in mind, that you may require other custom functionality. Hence, instead of having to fork the project &amp;amp; re-write the internals, you can simply write extensions in your own code.&lt;/p&gt; &#xA;&lt;p&gt;First, enable the logging of unhandled messages from WhatsApp by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;const sock = makeWASocket({&#xA;    logger: P({ level: &#39;debug&#39; }),&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable you to see all sorts of messages WhatsApp sends in the console. Some examples:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Functionality to track of the battery percentage of your phone. You enable logging and you&#39;ll see a message about your battery pop up in the console: &lt;code&gt;{&#34;level&#34;:10,&#34;fromMe&#34;:false,&#34;frame&#34;:{&#34;tag&#34;:&#34;ib&#34;,&#34;attrs&#34;:{&#34;from&#34;:&#34;@s.whatsapp.net&#34;},&#34;content&#34;:[{&#34;tag&#34;:&#34;edge_routing&#34;,&#34;attrs&#34;:{},&#34;content&#34;:[{&#34;tag&#34;:&#34;routing_info&#34;,&#34;attrs&#34;:{},&#34;content&#34;:{&#34;type&#34;:&#34;Buffer&#34;,&#34;data&#34;:[8,2,8,5]}}]}]},&#34;msg&#34;:&#34;communication&#34;} &lt;/code&gt;&lt;/p&gt; &lt;p&gt;The &#34;frame&#34; is what the message received is, it has three components:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;tag&lt;/code&gt; -- what this frame is about (eg. message will have &#34;message&#34;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;attrs&lt;/code&gt; -- a string key-value pair with some metadata (contains ID of the message usually)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;content&lt;/code&gt; -- the actual data (eg. a message node will have the actual message content in it)&lt;/li&gt; &#xA;   &lt;li&gt;read more about this format &lt;a href=&#34;https://raw.githubusercontent.com/adiwajshing/Baileys/master/src/WABinary/readme.md&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Hence, you can register a callback for an event using the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;// for any message with tag &#39;edge_routing&#39;&#xA;sock.ws.on(`CB:edge_routing`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39; and id attribute = abcd&#xA;sock.ws.on(`CB:edge_routing,id:abcd`, (node: BinaryNode) =&amp;gt; { })&#xA;// for any message with tag &#39;edge_routing&#39;, id attribute = abcd &amp;amp; first content node routing_info&#xA;sock.ws.on(`CB:edge_routing,id:abcd,routing_info`, (node: BinaryNode) =&amp;gt; { })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Note&lt;/h3&gt; &#xA;&lt;p&gt;This library was originally a project for &lt;strong&gt;CS-2362 at Ashoka University&lt;/strong&gt; and is in no way affiliated with WhatsApp. Use at your own discretion. Do not spam people with this.&lt;/p&gt; &#xA;&lt;p&gt;Also, this repo is now licenced under GPL 3 since it uses &lt;a href=&#34;https://git.questbook.io/backend/service-coderunner/-/merge_requests/1&#34;&gt;libsignal-node&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>midoks/mdserver-web</title>
    <updated>2022-06-19T01:31:51Z</updated>
    <id>tag:github.com,2022-06-19:/midoks/mdserver-web</id>
    <link href="https://github.com/midoks/mdserver-web" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple Linux Panel&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;mdserver-web 0.8.6&lt;/h3&gt; &#xA;&lt;p&gt;简单的Linux面板,感谢BT.CN写出如此好的web管理软件。我一看到，就知道这是我一直想要的页面化管理方式。 复制了后台管理界面，按照自己想要的方式写了一版。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;为了兼容CentOS,Ubuntu,Debian,Fedora, 由chkconfig改systemd管理。原来都要重新安装。还在进行修改..&#xA;&#xA;chkconfig 支持 Fedora,CentOS&#xA;update-rc.d 支持 Ubuntu,Debian | 功能不够&#xA;systemd 支持 CentOS,Ubuntu,Debian,Fedora...&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.shields.io/badge/LINUX-CentOS-blue?style=for-the-badge&amp;amp;logo=CentOS&#34; alt=&#34;CentOS&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/LINUX-Ubuntu-blue?style=for-the-badge&amp;amp;logo=Ubuntu&#34; alt=&#34;Ubuntu&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/LINUX-Debian-blue?style=for-the-badge&amp;amp;logo=Debian&#34; alt=&#34;Debian&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/LINUX-Fedora-blue?style=for-the-badge&amp;amp;logo=Fedora&#34; alt=&#34;Fedora&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/midoks/mdserver-web/wiki&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/MW-Wiki-red?style=for-the-badge&amp;amp;logo=wiki&#34; alt=&#34;Wiki&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SSH工具&lt;/li&gt; &#xA; &lt;li&gt;面板收藏功能&lt;/li&gt; &#xA; &lt;li&gt;网站子目录绑定&lt;/li&gt; &#xA; &lt;li&gt;网站备份功能&lt;/li&gt; &#xA; &lt;li&gt;自动更新优化&lt;/li&gt; &#xA; &lt;li&gt;插件方式管理&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;基本上可以使用,后续会继续优化!欢迎提供意见！&lt;/p&gt; &#xA;&lt;h3&gt;主要插件介绍&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;OpenResty - 轻量级，占有内存少，并发能力强。&lt;/li&gt; &#xA; &lt;li&gt;PHP[52-81] - PHP是世界上最好的编程语言。&lt;/li&gt; &#xA; &lt;li&gt;MySQL - 一种关系数据库管理系统。&lt;/li&gt; &#xA; &lt;li&gt;MongoDB - 一种非关系NOSQL数据库管理系统。&lt;/li&gt; &#xA; &lt;li&gt;phpMyAdmin - 著名Web端MySQL管理工具。&lt;/li&gt; &#xA; &lt;li&gt;Memcached - 一个高性能的分布式内存对象缓存系统。&lt;/li&gt; &#xA; &lt;li&gt;Redis - 一个高性能的KV数据库。&lt;/li&gt; &#xA; &lt;li&gt;CSVN - 最流行的SVN代码共享管理软件。&lt;/li&gt; &#xA; &lt;li&gt;PureFtpd - 一款专注于程序健壮和软件安全的免费FTP服务器软件。&lt;/li&gt; &#xA; &lt;li&gt;Gogs - 一款极易搭建的自助Git服务。&lt;/li&gt; &#xA; &lt;li&gt;Rsyncd - 通用同步服务。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;版本更新 0.8.6&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;mysql主从配置。&lt;/li&gt; &#xA; &lt;li&gt;swap插件[虚拟内存]。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;自动安装&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL  https://raw.githubusercontent.com/midoks/mdserver-web/master/scripts/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;脚本更新&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -fsSL  https://raw.githubusercontent.com/midoks/mdserver-web/master/scripts/update.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;无图不真相&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/midoks/mdserver-web/master/route/static/mdw.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/midoks/mdserver-web/master/route/static/mdw.jpg&#34; alt=&#34;截图&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;感谢&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;开发赞助&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://digitalvirt.com/&#34;&gt;digitalvirt&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;授权许可&lt;/h2&gt; &#xA;&lt;p&gt;本项目采用 Apache 开源授权许可证，完整的授权说明已放置在 &lt;a href=&#34;https://github.com/midoks/mdserver-web/raw/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; 文件中。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>microsoft/BotBuilder-Samples</title>
    <updated>2022-06-19T01:31:51Z</updated>
    <id>tag:github.com,2022-06-19:/microsoft/BotBuilder-Samples</id>
    <link href="https://github.com/microsoft/BotBuilder-Samples" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Welcome to the Bot Framework samples repository. Here you will find task-focused samples in C#, JavaScript and TypeScript to help you get started with the Bot Framework SDK!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/docs/media/BotFrameworkSamples_header.png&#34; alt=&#34;Bot Framework Samples&#34;&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/microsoft/botframework-sdk/raw/master/README.md&#34;&gt;Click here to find out what&#39;s new with Bot Framework&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This branch contains samples for the released version of the &lt;strong&gt;Microsoft Bot Framework V4 SDK&lt;/strong&gt; for &lt;a href=&#34;https://github.com/Microsoft/botbuilder-dotnet&#34;&gt;.NET&lt;/a&gt;, &lt;a href=&#34;https://github.com//microsoft/botbuilder-js&#34;&gt;JS&lt;/a&gt; and &lt;a href=&#34;https://github.com//microsoft/botbuilder-python&#34;&gt;Python&lt;/a&gt;. If you need samples for the Bot Framework &lt;em&gt;V3&lt;/em&gt; SDK, go &lt;a href=&#34;https://github.com/Microsoft/BotBuilder-Samples/tree/v3-sdk-samples&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting the samples&lt;/h2&gt; &#xA;&lt;p&gt;To use the samples, clone this GitHub repository using Git.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;    git clone https://github.com/Microsoft/BotBuilder-Samples.git&#xA;    cd BotBuilder-Samples&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Sample lists&lt;/h2&gt; &#xA;&lt;p&gt;Samples are designed to illustrate functionality you&#39;ll need to implement to build great bots!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#&#34;&gt;!Bot Framework Samples&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#click-here-to-find-out-whats-new-with-bot-framework&#34;&gt;Click here to find out what&#39;s new with Bot Framework&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#overview&#34;&gt;Overview&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#getting-the-samples&#34;&gt;Getting the samples&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#sample-lists&#34;&gt;Sample lists&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#bot-essentials&#34;&gt;Bot essentials&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#advanced-bots&#34;&gt;Advanced bots&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#authentication-samples&#34;&gt;Authentication samples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#qna-maker-samples&#34;&gt;QnA Maker samples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#teams-samples&#34;&gt;Teams samples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#custom-adapter-samples&#34;&gt;Custom adapter samples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#skills-samples&#34;&gt;Skills samples&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#experimental--preview-samples&#34;&gt;Experimental / preview samples&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/#reporting-security-issues&#34;&gt;Reporting security issues&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bot essentials&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Sample Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;2&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Echo bot&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to receive and send messages.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/02.echo-bot&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/02.echo-bot&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/02.echo-bot&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/02.echo-bot&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/02.echo-bot&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;3&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Welcome user&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Introduces activity types and provides a welcome message on conversation update activity.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/03.welcome-user&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/03.welcome-users&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/03.welcome-users&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/03.welcome-user&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/03.welcome-user&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multi&amp;nbsp;turn&amp;nbsp;prompts&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to use waterfall dialog, prompts, and component dialog to create a simple interaction that asks the user for name, age, and prints back that information.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/05.multi-turn-prompt&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/05.multi-turn-prompt&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/05.multi-turn-prompt&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/05.multi-turn-prompt&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/05.multi-turn-prompt&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;6&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Using cards&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Introduces all card types including thumbnail, audio, media etc. Builds on Welcoming user + multi-prompt bot by presenting a card with buttons in welcome message that route to appropriate dialog.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/06.using-cards&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/06.using-cards&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/06.using-cards&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/06.using-cards&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/06.using-cards&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;7&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Adaptive cards&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how the multi-turn dialog can use a card to get user input for name and age.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/07.using-adaptive-cards&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/07.using-adaptive-cards&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/07.using-adaptive-cards&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/07.using-adaptive-cards&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;8&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Suggested actions&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to enable your bot to present buttons that the user can tap to provide input.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/08.suggested-actions&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/08.suggested-actions&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/08.suggested-actions&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/08.suggested-actions&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Core bot&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Core bot shows how to use cards, dialog, and Language Understanding (LUIS).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/13.core-bot&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_webapi/13.core-bot&#34;&gt;.NET&amp;nbsp;Web&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/13.core-bot&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/13.core-bot&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/13.core-bot&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/13.core-bot&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NLP with dispatch&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to dispatch across LUIS and QnA Maker.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/14.nlp-with-orchestrator&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/14.nlp-with-orchestrator&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/14.nlp-with-dispatch&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/14.nlp-with-dispatch&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Handling&amp;nbsp;attachments&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to listen for/handle user provided attachments.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/15.handling-attachments&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/15.handling-attachments&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/15.handling-attachments&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/15.handling-attachments&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;40&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TIMEX resolution&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates various ways to parse and manipulate the TIMEX expressions you get from LUIS and the &lt;a href=&#34;https://github.com/Microsoft/recognizers-text&#34;&gt;DateTimeRecognizer&lt;/a&gt; used by the DateTimePrompt.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/40.timex-resolution&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/40.timex-resolution&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/40.timex-resolution&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/40.timex-resolution&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;43&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Complex dialogs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates different ways for composing dialogs.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/43.complex-dialog&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/43.complex-dialog&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/43.complex-dialog&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/43.complex-dialog&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;45&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;State management&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to use state management and storage objects to manage and persist state.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/45.state-management&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/45.state-management&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/45.state-management&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/45.state-management&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Advanced bots&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Sample Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Console&amp;nbsp;echo&amp;nbsp;bot&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Introduces the concept of adapter and demonstrates a simple echo bot on console adapter and how to send a reply and access the incoming message.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/01.console-echo&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/01.console-echo&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/01.console-echo&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/01.console-echo&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Browser echo bot&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to host a bot in the browser using Web Chat and a custom Web Chat Adapter.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_es6/01.browser-echo&#34;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Proactive&amp;nbsp;messages&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to send proactive messages to users.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/16.proactive-messages&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/16.proactive-messages&#34;&gt;JavaScript&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/typescript_nodejs/16.proactive-messages&#34;&gt;TypeScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/16.proactive-messages&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/16.proactive-messages&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multilingual bot&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Using translate middleware to support a multi-lingual bot. Demonstrates custom middleware.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/17.multilingual-bot&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/17.multilingual-bot&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/17.multilingual-bot&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/17.multilingual-bot&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Custom dialogs&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates complex conversation flow using the Dialogs library.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/19.custom-dialogs&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/19.custom-dialogs&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/19.custom-dialogs&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/19.custom-dialogs&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Application&amp;nbsp;Insights&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to add telemetry logging to your bot, storing telemetry within Application Insights.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/21.corebot-app-insights&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/21.corebot-app-insights&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/21.corebot-app-insights&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Facebook events&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Integrate and consume Facebook specific payloads, such as post-backs, quick replies and opt-in events.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/23.facebook-events&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/23.facebook-events&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/23.facebook-events&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/23.facebook-events&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;42&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scale out&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how you can build your own state solution from the ground up that supports scaled out deployment with ETag based optimistic locking.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/42.scaleout&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/42.scaleout&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/42.scaleout&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;44&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Basic custom prompts&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to implement your own &lt;em&gt;basic&lt;/em&gt; prompts to ask the user for information.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/44.prompt-users-for-input&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/44.prompt-for-user-input&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/44.prompt-for-user-input&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/44.prompt-users-for-input&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;47&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Inspection&amp;nbsp;middleware&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to use middleware to allow the Bot Framework Emulator to debug traffic into and out of the bot in addition to looking at the current state of the bot.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/47.inspection&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/47.inspection&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/47.inspection&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/47.inspection&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;70&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Styling webchat&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This sample shows how to create a web page with custom Web Chat component.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_es6/70.styling-webchat&#34;&gt;ECMAScript&amp;nbsp;6&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Authentication samples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Sample Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;OAuth authentication&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Bot that demonstrates how to integrate OAuth providers.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/18.bot-authentication&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/18.bot-authentication&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/18.bot-authentication&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/18.bot-authentication&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MSGraph&amp;nbsp;authentication&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates bot authentication capabilities of Azure Bot Service. Demonstrates utilizing the Microsoft Graph API to retrieve data about the user.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/24.bot-authentication-msgraph&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/24.bot-authentication-msgraph&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/24.bot-authentication-msgraph&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/24.bot-authentication-msgraph&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;46&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Teams authentication&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to use authentication for a bot running in Microsoft Teams.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/46.teams-auth&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/46.teams-auth&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/46.teams-auth&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/46.teams-auth&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;QnA Maker samples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Sample Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;QnA Maker (simple)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to use QnA Maker to have simple single-turn conversations&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/11.qnamaker&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/11.qnamaker&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/11.qnamaker&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/11.qnamaker&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;49&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;QnA&amp;nbsp;Maker&amp;nbsp;(advanced)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to integrate Multiturn and Active learning in a QnA Maker bot. This also demonstrates the QnAMakerDialog class.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/49.qnamaker-all-features&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/49.qnamaker-all-features&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/49.qnamaker-all-features&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Teams samples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Sample Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Message Reactions&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to create a simple bot that responds to Message Reactions&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/25.message-reaction&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/25.message-reaction&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/25.message-reaction&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;46&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Authentication&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to use authentication for a bot running in Microsoft Teams.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/46.teams-auth&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/46.teams-auth&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/46.teams-auth&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/46.teams-auth&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;50&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- search&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A Messaging Extension that accepts search requests and returns results.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/50.teams-messaging-extensions-search&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/50.teams-messaging-extensions-search&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/50.teams-messaging-extensions-search&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/50.teams-messaging-extensions-search&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;51&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- action&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A Messaging Extension that accepts parameters and returns a card. Also, how to receive a forwarded message as a parameter in a Messaging Extension.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/51.teams-messaging-extensions-action&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/51.teams-messaging-extensions-action&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/51.teams-messaging-extensions-action&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/51.teams-messaging-extensions-action&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;52&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- auth and config&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A Messaging Extension that has a configuration page, accepts search requests and returns results after the user has signed in.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/52.teams-messaging-extensions-search-auth-config&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/52.teams-messaging-extensions-search-auth-config&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/52.teams-messaging-extensions-search-auth-config&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;53&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Messaging&amp;nbsp;extensions&amp;nbsp;- action preview&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to create a Preview and Edit flow for a Messaging Extension.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/53.teams-messaging-extensions-action-preview&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/53.teams-messaging-extensions-action-preview&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/53.teams-messaging-extensions-action-preview&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/53.teams-messaging-extensions-action-preview&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;54&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Task module&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to retrieve a Task Module, and values from cards in the Task Module, for a Messaging Extension.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/54.teams-task-module&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/54.teams-task-module&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/54.teams-task-module&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/54.teams-task-module&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;55&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Link unfurling&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A Messaging Extension that performs link unfurling.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/55.teams-link-unfurling&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/55.teams-link-unfurling&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/55.teams-link-unfurling&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/55.teams-link-unfurling&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;56&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;File upload&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates how to obtain file consent, and upload files to Teams from a bot. Also, how to receive a file sent to a bot.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/56.teams-file-upload&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/56.teams-file-upload&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/56.teams-file-upload&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/56.teams-file-upload&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;57&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Conversation bot&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates various features of bots on Teams: message all members in a Team or Channel, @mention a user from a bot, update previously sent messages, etc.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/57.teams-conversation-bot&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/57.teams-conversation-bot&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/57.teams-conversation-bot&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/57.teams-conversation-bot&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;58&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Start new thread in a channel&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates creating a new thread in a channel.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/58.teams-start-new-thread-in-channel&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/58.teams-start-new-thread-in-channel&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/58.teams-start-thread-in-channel&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/58.teams-start-new-thread-in-channel&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Custom adapter samples&lt;/h3&gt; &#xA;&lt;p&gt;Important Note: The Bot Framework Adapters and corresponding samples will be deprecated in the next version of the Bot Framework SDK and have been moved to the &lt;a href=&#34;https://github.com/BotBuilderCommunity/botbuilder-community-dotnet&#34;&gt;BotBuilderCommunity&lt;/a&gt; repository. Please refer to their new location for all future work.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Sample Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;60&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Slack&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Demonstrates the use of the custom adapter for Slack.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/60.slack-adapter&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Skills samples&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Sample Name&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;.NET&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;JavaScript&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Python&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Java&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;80&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Skills&amp;nbsp;-&amp;nbsp;simple&amp;nbsp;bot&amp;nbsp;to&amp;nbsp;bot&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This sample shows how to connect a skill to a skill consumer.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/80.skills-simple-bot-to-bot&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/80.skills-simple-bot-to-bot&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/80.skills-simple-bot-to-bot&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/80.skills-simple-bot-to-bot&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;81&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Skills - skill dialog&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This sample shows how to connect a skill to a skill dialog consumer.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/81.skills-skilldialog&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/81.skills-skilldialog&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/python/81.skills-skilldialog&#34;&gt;Python&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/java_springboot/81.skills-skilldialog&#34;&gt;Java&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;82&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Skills - SSO with CloudAdapter&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This sample shows how use SSO with skills and CloudAdapter.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/csharp_dotnetcore/82.skills-sso-cloudadapter&#34;&gt;.NET&amp;nbsp;Core&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/samples/javascript_nodejs/82.skills-sso-cloudadapter&#34;&gt;JavaScript&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;NA&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Experimental / preview samples&lt;/h3&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://raw.githubusercontent.com/microsoft/BotBuilder-Samples/main/experimental&#34;&gt;collection of &lt;strong&gt;experimental&lt;/strong&gt; samples&lt;/a&gt; exist, intended to provide samples for features currently in preview or as a way to solicit feedback on a given design, approach, or technology being considered by the Bot Framework Team.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;This project welcomes contributions and suggestions. Most contributions require you to agree to a Contributor License Agreement (CLA) declaring that you have the right to, and actually do, grant us the rights to use your contribution. For details, visit &lt;a href=&#34;https://cla.microsoft.com&#34;&gt;https://cla.microsoft.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you submit a pull request, a CLA-bot will automatically determine whether you need to provide a CLA and decorate the PR appropriately (e.g., label, comment). Simply follow the instructions provided by the bot. You will only need to do this once across all repos using our CLA. This project has adopted the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/&#34;&gt;Microsoft Open Source Code of Conduct&lt;/a&gt;. For more information see the &lt;a href=&#34;https://opensource.microsoft.com/codeofconduct/faq/&#34;&gt;Code of Conduct FAQ&lt;/a&gt; or contact &lt;a href=&#34;mailto:opencode@microsoft.com&#34;&gt;opencode@microsoft.com&lt;/a&gt; with any additional questions or comments.&lt;/p&gt; &#xA;&lt;h2&gt;Reporting security issues&lt;/h2&gt; &#xA;&lt;p&gt;Security issues and bugs should be reported privately, via email, to the Microsoft Security Response Center (MSRC) at &lt;a href=&#34;mailto:secure@microsoft.com&#34;&gt;secure@microsoft.com&lt;/a&gt;. You should receive a response within 24 hours. If for some reason you do not, please follow up via email to ensure we received your original message. Further information, including the &lt;a href=&#34;https://technet.microsoft.com/en-us/security/dn606155&#34;&gt;MSRC PGP&lt;/a&gt; key, can be found in the &lt;a href=&#34;https://technet.microsoft.com/en-us/security/default&#34;&gt;Security TechCenter&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) Microsoft Corporation. All rights reserved.&lt;/p&gt;</summary>
  </entry>
</feed>