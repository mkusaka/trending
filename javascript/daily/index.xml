<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-17T01:54:43Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>grab/cursor-talk-to-figma-mcp</title>
    <updated>2025-08-17T01:54:43Z</updated>
    <id>tag:github.com,2025-08-17:/grab/cursor-talk-to-figma-mcp</id>
    <link href="https://github.com/grab/cursor-talk-to-figma-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;CTTF: MCP integration between Cursor AI and Figma, allowing Cursor to communicate with Figma like agentic ai for reading designs and modifying them programmatically.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cursor Talk to Figma MCP&lt;/h1&gt; &#xA;&lt;p&gt;This project implements a Model Context Protocol (MCP) integration between Cursor AI and Figma, allowing Cursor to communicate with Figma for reading designs and modifying them programmatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/user-attachments/assets/129a14d2-ed73-470f-9a4c-2240b2a4885c&#34;&gt;https://github.com/user-attachments/assets/129a14d2-ed73-470f-9a4c-2240b2a4885c&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;src/talk_to_figma_mcp/&lt;/code&gt; - TypeScript MCP server for Figma integration&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/cursor_mcp_plugin/&lt;/code&gt; - Figma plugin for communicating with Cursor&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;src/socket.ts&lt;/code&gt; - WebSocket server that facilitates communication between the MCP server and Figma plugin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install Bun if you haven&#39;t already:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -fsSL https://bun.sh/install | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Run setup, this will also install MCP in your Cursor&#39;s active project&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun setup&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start the Websocket server&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;NEW&lt;/strong&gt; Install Figma plugin from &lt;a href=&#34;https://www.figma.com/community/plugin/1485687494525374295/cursor-talk-to-figma-mcp-plugin&#34;&gt;Figma community page&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/grab/cursor-talk-to-figma-mcp/main/#figma-plugin&#34;&gt;install locally&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Quick Video Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/posts/sonnylazuardi_just-wanted-to-share-my-latest-experiment-activity-7307821553654657024-yrh8&#34;&gt;Video Link&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Design Automation Example&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bulk text content replacement&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thanks to &lt;a href=&#34;https://github.com/dusskapark&#34;&gt;@dusskapark&lt;/a&gt; for contributing the bulk text replacement feature. Here is the &lt;a href=&#34;https://www.youtube.com/watch?v=j05gGT3xfCs&#34;&gt;demo video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Instance Override Propagation&lt;/strong&gt; Another contribution from &lt;a href=&#34;https://github.com/dusskapark&#34;&gt;@dusskapark&lt;/a&gt; Propagate component instance overrides from a source instance to multiple target instances with a single command. This feature dramatically reduces repetitive design work when working with component instances that need similar customizations. Check out our &lt;a href=&#34;https://youtu.be/uvuT8LByroI&#34;&gt;demo video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development Setup&lt;/h2&gt; &#xA;&lt;p&gt;To develop, update your mcp config to direct to your local directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;TalkToFigma&#34;: {&#xA;      &#34;command&#34;: &#34;bun&#34;,&#xA;      &#34;args&#34;: [&#34;/path-to-repo/src/talk_to_figma_mcp/server.ts&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Setup and Installation&lt;/h2&gt; &#xA;&lt;h3&gt;MCP Server: Integration with Cursor&lt;/h3&gt; &#xA;&lt;p&gt;Add the server to your Cursor MCP configuration in &lt;code&gt;~/.cursor/mcp.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;TalkToFigma&#34;: {&#xA;      &#34;command&#34;: &#34;bunx&#34;,&#xA;      &#34;args&#34;: [&#34;cursor-talk-to-figma-mcp@latest&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;WebSocket Server&lt;/h3&gt; &#xA;&lt;p&gt;Start the WebSocket server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Figma Plugin&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In Figma, go to Plugins &amp;gt; Development &amp;gt; New Plugin&lt;/li&gt; &#xA; &lt;li&gt;Choose &#34;Link existing plugin&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;code&gt;src/cursor_mcp_plugin/manifest.json&lt;/code&gt; file&lt;/li&gt; &#xA; &lt;li&gt;The plugin should now be available in your Figma development plugins&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Windows + WSL Guide&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install bun via powershell&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;powershell -c &#34;irm bun.sh/install.ps1|iex&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Uncomment the hostname &lt;code&gt;0.0.0.0&lt;/code&gt; in &lt;code&gt;src/socket.ts&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typescript&#34;&gt;// uncomment this to allow connections in windows wsl&#xA;hostname: &#34;0.0.0.0&#34;,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Start the websocket&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bun socket&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the WebSocket server&lt;/li&gt; &#xA; &lt;li&gt;Install the MCP server in Cursor&lt;/li&gt; &#xA; &lt;li&gt;Open Figma and run the Cursor MCP Plugin&lt;/li&gt; &#xA; &lt;li&gt;Connect the plugin to the WebSocket server by joining a channel using &lt;code&gt;join_channel&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use Cursor to communicate with Figma using the MCP tools&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;MCP Tools&lt;/h2&gt; &#xA;&lt;p&gt;The MCP server provides the following tools for interacting with Figma:&lt;/p&gt; &#xA;&lt;h3&gt;Document &amp;amp; Selection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_document_info&lt;/code&gt; - Get information about the current Figma document&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_selection&lt;/code&gt; - Get information about the current selection&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_my_design&lt;/code&gt; - Get detailed node information about the current selection without parameters&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_node_info&lt;/code&gt; - Get detailed information about a specific node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_nodes_info&lt;/code&gt; - Get detailed information about multiple nodes by providing an array of node IDs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Annotations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_annotations&lt;/code&gt; - Get all annotations in the current document or specific node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_annotation&lt;/code&gt; - Create or update an annotation with markdown support&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_multiple_annotations&lt;/code&gt; - Batch create/update multiple annotations efficiently&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scan_nodes_by_types&lt;/code&gt; - Scan for nodes with specific types (useful for finding annotation targets)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Prototyping &amp;amp; Connections&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_reactions&lt;/code&gt; - Get all prototype reactions from nodes with visual highlight animation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_default_connector&lt;/code&gt; - Set a copied FigJam connector as the default connector style for creating connections (must be set before creating connections)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_connections&lt;/code&gt; - Create FigJam connector lines between nodes, based on prototype flows or custom mapping&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Creating Elements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;create_rectangle&lt;/code&gt; - Create a new rectangle with position, size, and optional name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_frame&lt;/code&gt; - Create a new frame with position, size, and optional name&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_text&lt;/code&gt; - Create a new text node with customizable font properties&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Modifying text content&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scan_text_nodes&lt;/code&gt; - Scan text nodes with intelligent chunking for large designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_text_content&lt;/code&gt; - Set the text content of a single text node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_multiple_text_contents&lt;/code&gt; - Batch update multiple text nodes efficiently&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Auto Layout &amp;amp; Spacing&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;set_layout_mode&lt;/code&gt; - Set the layout mode and wrap behavior of a frame (NONE, HORIZONTAL, VERTICAL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_padding&lt;/code&gt; - Set padding values for an auto-layout frame (top, right, bottom, left)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_axis_align&lt;/code&gt; - Set primary and counter axis alignment for auto-layout frames&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_layout_sizing&lt;/code&gt; - Set horizontal and vertical sizing modes for auto-layout frames (FIXED, HUG, FILL)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_item_spacing&lt;/code&gt; - Set distance between children in an auto-layout frame&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Styling&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;set_fill_color&lt;/code&gt; - Set the fill color of a node (RGBA)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_stroke_color&lt;/code&gt; - Set the stroke color and weight of a node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_corner_radius&lt;/code&gt; - Set the corner radius of a node with optional per-corner control&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Layout &amp;amp; Organization&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;move_node&lt;/code&gt; - Move a node to a new position&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;resize_node&lt;/code&gt; - Resize a node with new dimensions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_node&lt;/code&gt; - Delete a node&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;delete_multiple_nodes&lt;/code&gt; - Delete multiple nodes at once efficiently&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;clone_node&lt;/code&gt; - Create a copy of an existing node with optional position offset&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Components &amp;amp; Styles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;get_styles&lt;/code&gt; - Get information about local styles&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_local_components&lt;/code&gt; - Get information about local components&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create_component_instance&lt;/code&gt; - Create an instance of a component&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get_instance_overrides&lt;/code&gt; - Extract override properties from a selected component instance&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;set_instance_overrides&lt;/code&gt; - Apply extracted overrides to target instances&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Export &amp;amp; Advanced&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;export_node_as_image&lt;/code&gt; - Export a node as an image (PNG, JPG, SVG, or PDF) - limited support on image currently returning base64 as text&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Connection Management&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;join_channel&lt;/code&gt; - Join a specific channel to communicate with Figma&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MCP Prompts&lt;/h3&gt; &#xA;&lt;p&gt;The MCP server includes several helper prompts to guide you through complex design tasks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;design_strategy&lt;/code&gt; - Best practices for working with Figma designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;read_design_strategy&lt;/code&gt; - Best practices for reading Figma designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text_replacement_strategy&lt;/code&gt; - Systematic approach for replacing text in Figma designs&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;annotation_conversion_strategy&lt;/code&gt; - Strategy for converting manual annotations to Figma&#39;s native annotations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;swap_overrides_instances&lt;/code&gt; - Strategy for transferring overrides between component instances in Figma&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;reaction_to_connector_strategy&lt;/code&gt; - Strategy for converting Figma prototype reactions to connector lines using the output of &#39;get_reactions&#39;, and guiding the use &#39;create_connections&#39; in sequence&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;Building the Figma Plugin&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Navigate to the Figma plugin directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd src/cursor_mcp_plugin&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Edit code.js and ui.html&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Best Practices&lt;/h2&gt; &#xA;&lt;p&gt;When working with the Figma MCP:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Always join a channel before sending commands&lt;/li&gt; &#xA; &lt;li&gt;Get document overview using &lt;code&gt;get_document_info&lt;/code&gt; first&lt;/li&gt; &#xA; &lt;li&gt;Check current selection with &lt;code&gt;get_selection&lt;/code&gt; before modifications&lt;/li&gt; &#xA; &lt;li&gt;Use appropriate creation tools based on needs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;create_frame&lt;/code&gt; for containers&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create_rectangle&lt;/code&gt; for basic shapes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;create_text&lt;/code&gt; for text elements&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Verify changes using &lt;code&gt;get_node_info&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Use component instances when possible for consistency&lt;/li&gt; &#xA; &lt;li&gt;Handle errors appropriately as all commands can throw exceptions&lt;/li&gt; &#xA; &lt;li&gt;For large designs: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use chunking parameters in &lt;code&gt;scan_text_nodes&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Monitor progress through WebSocket updates&lt;/li&gt; &#xA;   &lt;li&gt;Implement appropriate error handling&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For text operations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Use batch operations when possible&lt;/li&gt; &#xA;   &lt;li&gt;Consider structural relationships&lt;/li&gt; &#xA;   &lt;li&gt;Verify changes with targeted exports&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;For converting legacy annotations: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Scan text nodes to identify numbered markers and descriptions&lt;/li&gt; &#xA;   &lt;li&gt;Use &lt;code&gt;scan_nodes_by_types&lt;/code&gt; to find UI elements that annotations refer to&lt;/li&gt; &#xA;   &lt;li&gt;Match markers with their target elements using path, name, or proximity&lt;/li&gt; &#xA;   &lt;li&gt;Categorize annotations appropriately with &lt;code&gt;get_annotations&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Create native annotations with &lt;code&gt;set_multiple_annotations&lt;/code&gt; in batches&lt;/li&gt; &#xA;   &lt;li&gt;Verify all annotations are properly linked to their targets&lt;/li&gt; &#xA;   &lt;li&gt;Delete legacy annotation nodes after successful conversion&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Visualize prototype noodles as FigJam connectors:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;code&gt;get_reactions&lt;/code&gt; to extract prototype flows,&lt;/li&gt; &#xA; &lt;li&gt;set a default connector with &lt;code&gt;set_default_connector&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;and generate connector lines with &lt;code&gt;create_connections&lt;/code&gt; for clear visual flow mapping.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GoogleCloudPlatform/cloud-run-mcp</title>
    <updated>2025-08-17T01:54:43Z</updated>
    <id>tag:github.com,2025-08-17:/GoogleCloudPlatform/cloud-run-mcp</id>
    <link href="https://github.com/GoogleCloudPlatform/cloud-run-mcp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;MCP server to deploy apps to Cloud Run&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP server to deploy code to Google Cloud Run&lt;/h1&gt; &#xA;&lt;p&gt;Enable MCP-compatible AI agents to deploy apps to Cloud Run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;mcpServers&#34;:{&#xA;  &#34;cloud-run&#34;: {&#xA;    &#34;command&#34;: &#34;npx&#34;,&#xA;    &#34;args&#34;: [&#34;-y&#34;, &#34;@google-cloud/cloud-run-mcp&#34;]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Deploy from AI-powered IDEs:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/user-attachments/assets/9fdcec30-2b38-4362-9eb1-54cab09e99d4&#34; width=&#34;800&#34; /&gt; &#xA;&lt;p&gt;Deploy from AI assistant apps:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/user-attachments/assets/b10f0335-b332-4640-af38-ea015b46b57c&#34; width=&#34;800&#34; /&gt; &#xA;&lt;p&gt;Deploy from agent SDKs, like the &lt;a href=&#34;https://ai.google.dev/gemini-api/docs/function-calling?example=meeting#use_model_context_protocol_mcp&#34;&gt;Google Gen AI SDK&lt;/a&gt; or &lt;a href=&#34;https://google.github.io/adk-docs/tools/mcp-tools/&#34;&gt;Agent Development Kit&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!NOTE]&lt;br /&gt; This is the repository of an MCP server to deploy code to Cloud Run, to learn how to &lt;strong&gt;host&lt;/strong&gt; MCP servers on Cloud Run, &lt;a href=&#34;https://cloud.google.com/run/docs/host-mcp-servers&#34;&gt;visit the Cloud Run documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;deploy-file-contents&lt;/code&gt;: Deploys files to Cloud Run by providing their contents directly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list-services&lt;/code&gt;: Lists Cloud Run services in a given project and region.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get-service&lt;/code&gt;: Gets details for a specific Cloud Run service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;get-service-log&lt;/code&gt;: Gets Logs and Error Messages for a specific Cloud Run service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deploy-local-files&lt;/code&gt;*: Deploys files from the local file system to a Google Cloud Run service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deploy-local-folder&lt;/code&gt;*: Deploys a local folder to a Google Cloud Run service.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;list-projects&lt;/code&gt;*: Lists available GCP projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;create-project&lt;/code&gt;*: Creates a new GCP project and attach it to the first available billing account. A project ID can be optionally specified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;em&gt;* only available when running locally&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prompts&lt;/h2&gt; &#xA;&lt;p&gt;Prompts are natural language commands that can be used to perform common tasks. They are shortcuts for executing tool calls with pre-filled arguments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;deploy&lt;/code&gt;: Deploys the current working directory to Cloud Run. If a service name is not provided, it will use the &lt;code&gt;DEFAULT_SERVICE_NAME&lt;/code&gt; environment variable, or the name of the current working directory.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;logs&lt;/code&gt;: Gets the logs for a Cloud Run service. If a service name is not provided, it will use the &lt;code&gt;DEFAULT_SERVICE_NAME&lt;/code&gt; environment variable, or the name of the current working directory.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Use as local MCP server&lt;/h2&gt; &#xA;&lt;p&gt;Run the Cloud Run MCP server on your local machine using local Google Cloud credentials. This is best if you are using an AI-assisted IDE (e.g. Cursor) or a desktop AI application (e.g. Claude).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;a href=&#34;https://cloud.google.com/sdk/docs/install&#34;&gt;Google Cloud SDK&lt;/a&gt; and authenticate with your Google account.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in to your Google Cloud account using the command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud auth login&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up application credentials using the command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud auth application-default login&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Then configure the MCP server using either Node.js or Docker:&lt;/p&gt; &#xA;&lt;h3&gt;Using Node.js&lt;/h3&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt; (LTS version recommended).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the MCP configuration file of your MCP client with the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;   &#34;cloud-run&#34;: {&#xA;     &#34;command&#34;: &#34;npx&#34;,&#xA;     &#34;args&#34;: [&#34;-y&#34;, &#34;@google-cloud/cloud-run-mcp&#34;]&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Optional] Add default configurations&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;   &#34;cloud-run&#34;: {&#xA;      &#34;command&#34;: &#34;npx&#34;,&#xA;      &#34;args&#34;: [&#34;-y&#34;, &#34;@google-cloud/cloud-run-mcp&#34;],&#xA;      &#34;env&#34;: {&#xA;            &#34;GOOGLE_CLOUD_PROJECT&#34;: &#34;PROJECT_NAME&#34;,&#xA;            &#34;GOOGLE_CLOUD_REGION&#34;: &#34;PROJECT_REGION&#34;,&#xA;            &#34;DEFAULT_SERVICE_NAME&#34;: &#34;SERVICE_NAME&#34;&#xA;      }&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;See Docker&#39;s &lt;a href=&#34;https://hub.docker.com/mcp/server/cloud-run-mcp/overview&#34;&gt;MCP catalog&lt;/a&gt;, or use these manual instructions:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.docker.com/get-started/&#34;&gt;Docker&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the MCP configuration file of your MCP client with the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;   &#34;cloud-run&#34;: {&#xA;     &#34;command&#34;: &#34;docker&#34;,&#xA;     &#34;args&#34;: [&#xA;       &#34;run&#34;,&#xA;       &#34;-i&#34;,&#xA;       &#34;--rm&#34;,&#xA;       &#34;-e&#34;,&#xA;       &#34;GOOGLE_APPLICATION_CREDENTIALS&#34;,&#xA;       &#34;-v&#34;,&#xA;       &#34;/local-directory:/local-directory&#34;,&#xA;       &#34;mcp/cloud-run-mcp:latest&#34;&#xA;     ],&#xA;     &#34;env&#34;: {&#xA;       &#34;GOOGLE_APPLICATION_CREDENTIALS&#34;: &#34;/Users/slim/.config/gcloud/application_default-credentials.json&#34;,&#xA;       &#34;DEFAULT_SERVICE_NAME&#34;: &#34;SERVICE_NAME&#34;&#xA;     }&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Use as a Gemini CLI extension&lt;/h2&gt; &#xA;&lt;p&gt;To install this as a &lt;a href=&#34;https://github.com/google-gemini/gemini-cli&#34;&gt;Gemini CLI&lt;/a&gt; extension, run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p ~/.gemini/extensions/cloud-run/gemini-extension &amp;amp;&amp;amp; \&#xA;  curl -s -L https://raw.githubusercontent.com/GoogleCloudPlatform/cloud-run-mcp/main/gemini-extension.json &amp;gt; ~/.gemini/extensions/cloud-run/gemini-extension.json &amp;amp;&amp;amp; \&#xA;  curl -s -L https://raw.githubusercontent.com/GoogleCloudPlatform/cloud-run-mcp/main/gemini-extension/GEMINI.md &amp;gt; ~/.gemini/extensions/cloud-run/gemini-extension/GEMINI.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use as remote MCP server&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING]&lt;br /&gt; Do not use the remote MCP server without authentication. In the following instructions, we will use IAM authentication to secure the connection to the MCP server from your local machine. This is important to prevent unauthorized access to your Google Cloud resources.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Run the Cloud Run MCP server itself on Cloud Run with connection from your local machine authenticated via IAM. With this option, you will only be able to deploy code to the same Google Cloud project as where the MCP server is running.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the &lt;a href=&#34;https://cloud.google.com/sdk/docs/install&#34;&gt;Google Cloud SDK&lt;/a&gt; and authenticate with your Google account.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in to your Google Cloud account using the command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud auth login&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your Google Cloud project ID using the command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud config set project YOUR_PROJECT_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy the Cloud Run MCP server to Cloud Run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud run deploy cloud-run-mcp --image us-docker.pkg.dev/cloudrun/container/mcp --no-allow-unauthenticated&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When prompted, pick a region, for example &lt;code&gt;europe-west1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Note that the MCP server is &lt;em&gt;not&lt;/em&gt; publicly accessible, it requires authentication via IAM.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;[Optional] Add default configurations&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud run services update cloud-run-mcp --region=REGION --update-env-vars GOOGLE_CLOUD_PROJECT=PROJECT_NAME,GOOGLE_CLOUD_REGION=PROJECT_REGION,DEFAULT_SERVICE_NAME=SERVICE_NAME,SKIP_IAM_CHECK=false&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run a Cloud Run proxy on your local machine to connect securely using your identity to the remote MCP server running on Cloud Run:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;gcloud run services proxy cloud-run-mcp --port=3000 --region=REGION --project=PROJECT_ID&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create a local proxy on port 3000 that forwards requests to the remote MCP server and injects your identity.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update the MCP configuration file of your MCP client with the following:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;   &#34;cloud-run&#34;: {&#xA;     &#34;url&#34;: &#34;http://localhost:3000/sse&#34;&#xA;   }&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your MCP client does not support the &lt;code&gt;url&lt;/code&gt; attribute, you can use &lt;a href=&#34;https://www.npmjs.com/package/mcp-remote&#34;&gt;mcp-remote&lt;/a&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;   &#34;cloud-run&#34;: {&#xA;     &#34;command&#34;: &#34;npx&#34;,&#xA;     &#34;args&#34;: [&#34;-y&#34;, &#34;mcp-remote&#34;, &#34;http://localhost:3000/sse&#34;]&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>