<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-14T01:40:14Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>evanw/polywasm</title>
    <updated>2023-06-14T01:40:14Z</updated>
    <id>tag:github.com,2023-06-14:/evanw/polywasm</id>
    <link href="https://github.com/evanw/polywasm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;polywasm&lt;/h1&gt; &#xA;&lt;p&gt;This is a polyfill for WebAssembly. It implements enough of the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface&#34;&gt;WebAssembly API&lt;/a&gt; to be able to run a &lt;code&gt;.wasm&lt;/code&gt; file in a JavaScript environment that lacks a WebAssembly implementation. This is done by parsing the &lt;code&gt;.wasm&lt;/code&gt; file and translating each WebAssembly function to a JavaScript function. This is not nearly as fast as running WebAssembly natively, but it&#39;s better than it not running at all.&lt;/p&gt; &#xA;&lt;h2&gt;Live demo&lt;/h2&gt; &#xA;&lt;p&gt;This polyfill is used as a fallback WebAssembly implementation for esbuild&#39;s online playground. You can use these links below to compare the playground with this polyfill enabled vs. disabled:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esbuild.github.io/try/?polywasm=1&#34;&gt;Try esbuild playground&#39;s with this polyfill enabled&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://esbuild.github.io/try/?polywasm=0&#34;&gt;Try esbuild playground&#39;s with this polyfill disabled&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The playground shows off &lt;a href=&#34;https://esbuild.github.io/&#34;&gt;esbuild&lt;/a&gt;, which is a JavaScript code transformation tool (among other things). You&#39;ll need to type or paste some JavaScript code into the &lt;code&gt;(enter your code here)&lt;/code&gt; textbox for esbuild to run.&lt;/p&gt; &#xA;&lt;h2&gt;Why does this exist?&lt;/h2&gt; &#xA;&lt;p&gt;WebAssembly support is already widespread so you don&#39;t normally need a polyfill to use it. However, certain modern JavaScript environments have WebAssembly disabled. For example, Apple&#39;s &lt;a href=&#34;https://support.apple.com/en-us/HT212650&#34;&gt;Lockdown Mode&lt;/a&gt; (an opt-in security enhancement) disables WebAssembly in Safari. You can use this polyfill to make a WebAssembly-based app work in Safari in Lockdown Mode anyway. It will be extremely slow because Lockdown Mode also disables JavaScript optimizations, but sometimes performance isn&#39;t critical.&lt;/p&gt; &#xA;&lt;p&gt;Another reason to use this might be to play around with WebAssembly execution. For example, this polyfill makes it pretty trivial to instrument each function call to add caller/callee tracing or to make a copy of memory before/after a function call, which could be useful for debugging.&lt;/p&gt; &#xA;&lt;p&gt;This library also exists because I thought building it would be an interesting challenge. I learned some new things about WebAssembly&#39;s file format and intermediate representation while building it.&lt;/p&gt; &#xA;&lt;h2&gt;How to use it&lt;/h2&gt; &#xA;&lt;p&gt;You need to include this polyfill before code that uses the WebAssembly API:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&#34;module&#34;&amp;gt;&#xA;  import { WebAssembly } from &#39;polywasm&#39;&#xA;  globalThis.WebAssembly = WebAssembly&#xA;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;app.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The polyfill is small (only ~25kb when minified) and can potentially be optionally loaded only when needed. Keep in mind that this polyfill requires that your JavaScript environment supports the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt64Array&#34;&gt;&lt;code&gt;BigInt64Array&lt;/code&gt;&lt;/a&gt; API. If you want to build the polyfill yourself instead of installing it through npm, you can clone this repo and run &lt;code&gt;npm ci&lt;/code&gt; follwed by &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Here are some limitations to be aware of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No validation:&lt;/strong&gt; This does not fully validate the WebAssembly that it compiles. It assumes that the provided WebAssembly is valid. You should not use this library as a WebAssembly validator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No traps:&lt;/strong&gt; This does not generate &lt;a href=&#34;https://webassembly.github.io/spec/core/intro/overview.html#trap&#34;&gt;traps&lt;/a&gt; for invalid situations (e.g. divide by zero). Generating traps would dramatically slow down the polyfill even more and correctly-designed WebAssembly shouldn&#39;t even encounter any traps in the first place.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;No NaN bit patterns:&lt;/strong&gt; This does not preserve NaN bit patterns. WebAssembly does this natively but JavaScript VMs canonicalize NaN bit patterns which prevents a JavaScript-based WebAssembly polyfill from preserving them.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Limited API support:&lt;/strong&gt; This does not implement the full &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/WebAssembly/JavaScript_interface&#34;&gt;WebAssembly API&lt;/a&gt;. There&#39;s no reason it can&#39;t, but right now I have only implemented the parts of the API that I needed to be able to load and run a &lt;code&gt;.wasm&lt;/code&gt; file and run the WebAssembly specification&#39;s core tests.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;These are the times to run a sample WebAssembly task using the polyfill. Each row is a result reported by &lt;a href=&#34;https://raw.githubusercontent.com/evanw/polywasm/main/bench/index.html&#34;&gt;&lt;code&gt;bench/index.html&lt;/code&gt;&lt;/a&gt; for that browser.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Browser&lt;/th&gt; &#xA;   &lt;th&gt;Minimum time&lt;/th&gt; &#xA;   &lt;th&gt;Median time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome (JIT)&lt;/td&gt; &#xA;   &lt;td&gt;27ms&lt;/td&gt; &#xA;   &lt;td&gt;37ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox (JIT)&lt;/td&gt; &#xA;   &lt;td&gt;79ms&lt;/td&gt; &#xA;   &lt;td&gt;88ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome (no JIT)&lt;/td&gt; &#xA;   &lt;td&gt;94ms&lt;/td&gt; &#xA;   &lt;td&gt;97ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox (no JIT)&lt;/td&gt; &#xA;   &lt;td&gt;127ms&lt;/td&gt; &#xA;   &lt;td&gt;133ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Safari (no JIT)&lt;/td&gt; &#xA;   &lt;td&gt;244ms&lt;/td&gt; &#xA;   &lt;td&gt;256ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These are the times for the same benchmark but with this polyfill&#39;s optimizations disabled (to demonstrate that the optimizations done by this polyfill improve run time):&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Browser&lt;/th&gt; &#xA;   &lt;th&gt;Minimum time&lt;/th&gt; &#xA;   &lt;th&gt;Median time&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome (JIT)&lt;/td&gt; &#xA;   &lt;td&gt;40ms&lt;/td&gt; &#xA;   &lt;td&gt;55ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox (JIT)&lt;/td&gt; &#xA;   &lt;td&gt;132ms&lt;/td&gt; &#xA;   &lt;td&gt;150ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Chrome (no JIT)&lt;/td&gt; &#xA;   &lt;td&gt;131ms&lt;/td&gt; &#xA;   &lt;td&gt;137ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Firefox (no JIT)&lt;/td&gt; &#xA;   &lt;td&gt;188ms&lt;/td&gt; &#xA;   &lt;td&gt;196ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Safari (no JIT)&lt;/td&gt; &#xA;   &lt;td&gt;332ms&lt;/td&gt; &#xA;   &lt;td&gt;354ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The optimizations cause the benchmark to run 1.4x to 1.7x faster depending on the browser.&lt;/p&gt; &#xA;&lt;h2&gt;Implementation details&lt;/h2&gt; &#xA;&lt;h3&gt;Numeric representation&lt;/h3&gt; &#xA;&lt;p&gt;Integer values in JS are always 64-bit floats while integer values in WASM are sign-independent 32-bit or 64-bit values. When representing WASM integers in JS, they need to have some sign (either signed or unsigned). For example, the 32-bit integer with all bits set to 1 could either be &lt;code&gt;-1&lt;/code&gt; or &lt;code&gt;0xFFFF_FFFF&lt;/code&gt; in JS, and the 64-bit integer with all bits set to 1 could either be &lt;code&gt;-1n&lt;/code&gt; or &lt;code&gt;0xFFFF_FFFF_FFFF_FFFF&lt;/code&gt; in JS.&lt;/p&gt; &#xA;&lt;p&gt;In this implementation, 32-bit integers are always represented as signed JS numbers and 64-bit integers are always represented as unsigned JS bigints. The signed/unsigned choice is arbitrary but must be consistent for the compiled code to work. Signed numbers is used for 32-bit integers because the cast to signed (&lt;code&gt;x|0&lt;/code&gt;) is shorter than the cast to unsigned (&lt;code&gt;x&amp;gt;&amp;gt;&amp;gt;0&lt;/code&gt;) and because some JS VMs have certain optimizations that make signed integer arithmetic faster than unsigned integer arithmetic. Unsigned bigints is used for 64-bit integers because cast to unsigned can be done with the &lt;code&gt;&amp;amp;&lt;/code&gt; operator but cast to signed can&#39;t be done with a single operator.&lt;/p&gt; &#xA;&lt;p&gt;Note that this means signed 32-bit less-than of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;a &amp;lt; b&lt;/code&gt; but unsigned 32-bit less-than is &lt;code&gt;(a &amp;gt;&amp;gt;&amp;gt; 0) &amp;lt; (b &amp;gt;&amp;gt;&amp;gt; 0)&lt;/code&gt;. Similarly unsigned 64-bit less-than of &lt;code&gt;a&lt;/code&gt; and &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;a &amp;lt; b&lt;/code&gt; but signed 64-bit less-than is something like &lt;code&gt;(i64[0] = a, i64[0]) &amp;lt; (i64[0] = b, i64[0])&lt;/code&gt; where &lt;code&gt;i64&lt;/code&gt; is a &lt;code&gt;BigInt64Array&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;AST format&lt;/h3&gt; &#xA;&lt;p&gt;WebAssembly bytecode is decoded into an AST so that it can be optimized before converting it to JavaScript. The compiler only ever generates the AST for a single basic block (i.e. sequence of bytecodes without any jumps). The AST is stored as numbers in an array instead of as JavaScript objects for performance, which can matter a lot when the JavaScript JIT is disabled.&lt;/p&gt; &#xA;&lt;p&gt;Each AST node takes the following form (given the index &lt;code&gt;ptr&lt;/code&gt; of a node for which space has already been reserved):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;ast[ptr] = opcode | (childCount &amp;lt;&amp;lt; 8) | (outputStackSlot &amp;lt;&amp;lt; 24)&#xA;ast[ptr + 1] = /* child 1 */&#xA;ast[ptr + 2] = /* child 2 */&#xA;...&#xA;ast[ptr + N] = /* child N */&#xA;ast[ptr + N + 1] = /* an optional extra payload (e.g. an offset for load/store) */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Encoding the child count in the node metadata and putting optional extra data after the children allows the AST to be traversed generically without needing to know the specifics of each node&#39;s internal format.&lt;/p&gt; &#xA;&lt;h3&gt;Optimizations&lt;/h3&gt; &#xA;&lt;p&gt;The AST is optimized using a declarative set of &lt;a href=&#34;https://en.wikipedia.org/wiki/Peephole_optimization&#34;&gt;peephole optimization&lt;/a&gt; rules before it&#39;s converted into JavaScript. These optimizations are tuned for the &lt;a href=&#34;https://go.dev/&#34;&gt;Go&lt;/a&gt; compiler&#39;s WebAssembly output, which does a lot of unnecessary 64-bit math. That&#39;s mostly fine when running WebAssembly natively but is pretty expensive when running WebAssembly via JS using BigInts. Avoiding unnecessary BigInts gives a decent performance boost.&lt;/p&gt; &#xA;&lt;p&gt;For example, WebAssembly bytecode that extends a 32-bit integer out to 64-bit, adds a constant, and then wraps that integer back to 32-bit can be more efficiently represented using a 32-bit add bytecode instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Before optimization&#xA;i32_wrap_i64(&#xA;  i64_add(&#xA;    i64_extend_i32_u(X),&#xA;    i64_const(Y)))&#xA;&#xA;// After optimization&#xA;i32_add(&#xA;  X,&#xA;  i32_const(Y))&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>krausest/js-framework-benchmark</title>
    <updated>2023-06-14T01:40:14Z</updated>
    <id>tag:github.com,2023-06-14:/krausest/js-framework-benchmark</id>
    <link href="https://github.com/krausest/js-framework-benchmark" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comparison of the performance of a few popular javascript frameworks&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;js-framework-benchmark&lt;/h1&gt; &#xA;&lt;p&gt;This is a simple benchmark for several javascript frameworks. The benchmarks creates a large table with randomized entries and measures the time for various operations including rendering duration.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krausest/js-framework-benchmark/master/images/screenshot.png?raw=true&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About the benchmarks&lt;/h2&gt; &#xA;&lt;p&gt;The following operations are benchmarked for each framework:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;create rows: Duration for creating 1,000 rows after the page loaded (no warmup).&lt;/li&gt; &#xA; &lt;li&gt;replace all rows: Duration for replacing all 1,000 rows of the table (with 5 warmup iterations).&lt;/li&gt; &#xA; &lt;li&gt;partial update: Time to update the text of every 10th row for a table with 10,000 rows (with 5 warmup iterations).&lt;/li&gt; &#xA; &lt;li&gt;select row: Duration to highlight a row in response to a click on the row. (with 5 warmup iterations).&lt;/li&gt; &#xA; &lt;li&gt;swap rows: Time to swap 2 rows on a table with 1,000 rows. (with 5 warmup iterations).&lt;/li&gt; &#xA; &lt;li&gt;remove row: Duration to remove a row for a table with 1,000 rows. (with 5 warmup iterations).&lt;/li&gt; &#xA; &lt;li&gt;create many rows: Duration to create 10,000 rows (no warmup)&lt;/li&gt; &#xA; &lt;li&gt;append rows to large table: Duration for adding 1,000 rows on a table of 10,000 rows (no warmup).&lt;/li&gt; &#xA; &lt;li&gt;clear rows: Duration to clear the table filled with 10,000 rows. (no warmup)&lt;/li&gt; &#xA; &lt;li&gt;ready memory: Memory usage after page load.&lt;/li&gt; &#xA; &lt;li&gt;run memory: Memory usage after adding 1,000 rows.&lt;/li&gt; &#xA; &lt;li&gt;update memory: Memory usage after clicking 5 times update for a table with 1,000 rows.&lt;/li&gt; &#xA; &lt;li&gt;replace memory: Memory usage after clicking 5 times create 1,000 rows.&lt;/li&gt; &#xA; &lt;li&gt;repeated clear memory: Memory usage after creating and clearing 1,000 rows for 5 times.&lt;/li&gt; &#xA; &lt;li&gt;update memory: Memory usage after clicking 5 times update for a table with 1,000 rows.&lt;/li&gt; &#xA; &lt;li&gt;startup time: Duration for loading and parsing the javascript code and rendering the page.&lt;/li&gt; &#xA; &lt;li&gt;consistently interactive: The lighthouse metric TimeToConsistentlyInteractive: A pessimistic TTI - when the CPU and network are both definitely very idle. (no more CPU tasks over 50ms)&lt;/li&gt; &#xA; &lt;li&gt;script bootup time: The lighthouse metric ScriptBootUpTtime: The total ms required to parse/compile/evaluate all the page&#39;s scripts&lt;/li&gt; &#xA; &lt;li&gt;main thread work cost: The lighthouse metric MainThreadWorkCost: Total amount of time spent doing work on the main thread. includes style/layout/etc.&lt;/li&gt; &#xA; &lt;li&gt;total byte weight: The lighthouse metric TotalByteWeight: Network transfer cost (post-compression) of all the resources loaded into the page.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For all benchmarks the duration is measured including rendering time. You can read some details on this &lt;a href=&#34;http://www.stefankrause.net/wp/?p=218&#34;&gt;article&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Official results&lt;/h2&gt; &#xA;&lt;p&gt;Official results are posted on the &lt;a href=&#34;https://krausest.github.io/js-framework-benchmark/index.html&#34;&gt;official results page&lt;/a&gt;. My &lt;a href=&#34;http://www.stefankrause.net/wp&#34;&gt;blog&lt;/a&gt; has a few articles about about the benchmark. Older results of this benchmark are outlined on my blog (&lt;a href=&#34;http://www.stefankrause.net/wp/?p=191&#34;&gt;round 1&lt;/a&gt;, &lt;a href=&#34;http://www.stefankrause.net/wp/?p=283&#34;&gt;round 2&lt;/a&gt;, &lt;a href=&#34;http://www.stefankrause.net/wp/?p=301&#34;&gt;round 3&lt;/a&gt;, &lt;a href=&#34;http://www.stefankrause.net/wp/?p=316&#34;&gt;round 4&lt;/a&gt;, &lt;a href=&#34;http://www.stefankrause.net/wp/?p=392&#34;&gt;round 5&lt;/a&gt;, &lt;a href=&#34;http://www.stefankrause.net/wp/?p=431&#34;&gt;round 6&lt;/a&gt;, &lt;a href=&#34;http://www.stefankrause.net/wp/?p=454&#34;&gt;round 7&lt;/a&gt; and &lt;a href=&#34;http://www.stefankrause.net/wp/?p=504&#34;&gt;round 8&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Snapshot of the results&lt;/h2&gt; &#xA;&lt;p&gt;The current snapshot that may not have the same quality (i.e. results might be for mixed browser versions, number of runs per benchmark may vary) can be seen &lt;a href=&#34;https://krausest.github.io/js-framework-benchmark/current.html&#34;&gt;here&lt;/a&gt; &lt;a href=&#34;https://krausest.github.io/js-framework-benchmark/current.html&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/krausest/js-framework-benchmark/master/images/results.png?raw=true&#34; alt=&#34;Results&#34; title=&#34;Results&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;1 NEW: Run pre-built binaries for all frameworks&lt;/h1&gt; &#xA;&lt;p&gt;There are currently ~60 framework entries in this repository. Installing (and maintaining) those can be challenging, but here are simplified instructions how to get started.&lt;/p&gt; &#xA;&lt;h2&gt;1.1 Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Have &lt;em&gt;node.js (&amp;gt;=v16.14.2)&lt;/em&gt; installed. If you want to do yourself a favour use nvm for that and install yarn. The benchmark has been tested with node vv16.14.2. Please make sure that the following command work before trying to build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; npm&#xA;npm -version&#xA;8.5.0&#xA;&amp;gt; node --version&#xA;v16.14.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1.2 Downloading the pre-built binaries and starting the server&lt;/h2&gt; &#xA;&lt;p&gt;Builiding all frameworks can be challenging. There&#39;s a new way that allows to skip that and just run the benchmark without builiding all implementationss.&lt;/p&gt; &#xA;&lt;p&gt;Start with checking out a tagged release like that. Pick the release that you want (e.g. chrome 100):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/krausest/js-framework-benchmark.git&#xA;cd js-framework-benchmark&#xA;git checkout chrome100 -b release&#xA;npm ci &amp;amp;&amp;amp; npm run install-local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Download the build.zip for that release from &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/releases&#34;&gt;https://github.com/krausest/js-framework-benchmark/releases&lt;/a&gt; and put the build.zip into the js-framework-benchmark directory and unzip the prebuilt files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;unzip build.zip&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;re now ready to start the http-server. Let the server run in the background&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;1.3 Running the benchmarks and handling errors&lt;/h2&gt; &#xA;&lt;p&gt;In a new console window you can now run the benchmarks:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will take some time (currently about 12 hours on my machine). Finally create the results table:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open js-framework-benchmark/webdriver-ts-results/table.html in a browser and take a look at the results. You can open the result table with the link &lt;a href=&#34;http://localhost:8080/webdriver-ts-results/table.html&#34;&gt;http://localhost:8080/webdriver-ts-results/table.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what you should do when the benchmark run was not sucessful. Let&#39;s assume the benchmark printed the following to the console:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;================================&#xA;The following benchmarks failed:&#xA;================================&#xA;Executing frameworks/non-keyed/ef-js and benchmark 04_select1k failed: No paint event found&#xA;run was not completely sucessful Benchmarking failed with errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You&#39;ll now have to run the benchmark again for those that failed like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run bench -- --framework non-keyed/ef-js --benchmark 04_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The you can then continue with creating the results table &lt;code&gt;npm run results&lt;/code&gt;. Another workaround is to delete the folders of frameworks you can&#39;t run or you are not interested in.&lt;/p&gt; &#xA;&lt;h1&gt;2 The old and hard way: Building the frameworks and running the benchmark&lt;/h1&gt; &#xA;&lt;h2&gt;2.1 Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;Have &lt;em&gt;node.js (&amp;gt;=v16.14.2)&lt;/em&gt; installed. If you want to do yourself a favour use nvm for that and install yarn. The benchmark has been tested with node vv16.14.2. For some frameworks you&#39;ll also need &lt;em&gt;java&lt;/em&gt; (&amp;gt;=8, e.g. openjdk-8-jre on ubuntu). Please make sure that the following command work before trying to build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;gt; npm&#xA;npm -version&#xA;8.5.0&#xA;&amp;gt; node --version&#xA;v16.14.2&#xA;&amp;gt; echo %JAVA_HOME% / echo $JAVA_HOME&#xA;&amp;gt; java -version&#xA;java version &#34;1.8.0_131&#34; ...&#xA;&amp;gt; javac -version&#xA;javac 1.8.0_131&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.2 Start installing&lt;/h2&gt; &#xA;&lt;p&gt;As stated above building and running the benchmarks for all frameworks can be challenging, thus we start step by step...&lt;/p&gt; &#xA;&lt;p&gt;Install global dependencies This installs just a few top level dependencies for the building the frameworks and a local web server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We start the local web server in the root directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Verify that the local web server works: Try to open &lt;a href=&#34;http://localhost:8080/index.html&#34;&gt;http://localhost:8080/index.html&lt;/a&gt;. If you see something like that you&#39;re on the right track: &lt;img src=&#34;https://raw.githubusercontent.com/krausest/js-framework-benchmark/master/images/index.png?raw=true&#34; alt=&#34;Index.html&#34; title=&#34;Index.html&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now open a new terminal window and keep the web server running in background.&lt;/p&gt; &#xA;&lt;h2&gt;2.3 Building and viewing a single framework&lt;/h2&gt; &#xA;&lt;p&gt;We now try to build the first framework. Go to the vanillajs reference implementation&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd frameworks/keyed/vanillajs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and install the dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and build the framework&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run build-prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There should be no build errors and we can open the framework in the browser: &lt;a href=&#34;http://localhost:8080/frameworks/keyed/vanillajs/&#34;&gt;http://localhost:8080/frameworks/keyed/vanillajs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some frameworks like binding.scala or ember can&#39;t be opened that way, because they need a &#39;dist&#39; or &#39;target/web/stage&#39; or something in the URL. You can find out the correct URL in the &lt;a href=&#34;http://localhost:8080/index.html&#34;&gt;index.html&lt;/a&gt; you&#39;ve opened before or take a look whether there&#39;s a customURL property under js-framework-benchmark in the &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/raw/master/frameworks/keyed/ember/package.json#L10&#34;&gt;package.json&lt;/a&gt; that represents the url.&lt;/p&gt; &#xA;&lt;h2&gt;2.4 Running benchmarks for a single framework&lt;/h2&gt; &#xA;&lt;p&gt;The benchmark uses an automated benchmark driver using chromedriver to measure the duration for each operation using chrome&#39;s timeline. Here are the steps to run is for a single framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ../../..&#xA;cd webdriver-ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and install the dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and build the benchmark driver&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run compile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;now run the benchmark driver for the vanillajs-keyed framework:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run bench keyed/vanillajs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Just lean back and watch chrome run the benchmarks. If it doesn&#39;t complain then the html for the table should be fine and your categorization as keyed or non-keyed should also be correct.&lt;/p&gt; &#xA;&lt;p&gt;You should keep the chrome window visible since otherwise it seems like paint events can be skipped leading to wrong results. On the terminal will appear various log statements.&lt;/p&gt; &#xA;&lt;p&gt;The results for that run will be saved in the &lt;code&gt;webdriver-ts/results&lt;/code&gt; directory. We can take a look at the results of a single result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cat results/vanillajs-keyed_01_run1k.json&#xA;{&#34;framework&#34;:&#34;vanillajs-keyed&#34;,&#34;benchmark&#34;:&#34;01_run1k&#34;,&#34;type&#34;:&#34;cpu&#34;,&#34;min&#34;:135.532,&#34;max&#34;:154.821,&#34;mean&#34;:143.79166666666666,&#34;median&#34;:141.022,&#34;geometricMean&#34;:143.56641695989177,&#34;standardDeviation&#34;:8.114582360718808,&#34;values&#34;:[154.821,135.532,141.022]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see the mean duration for create 1000 rows was 144 msecs.&lt;/p&gt; &#xA;&lt;p&gt;You can also check whether the implementation appears to be compliant to the rules:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run isKeyed keyed/vanillajs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If it finds anything it&#39;ll report an ERROR.&lt;/p&gt; &#xA;&lt;h2&gt;2.5 Building the result table&lt;/h2&gt; &#xA;&lt;p&gt;Install libraries:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ..&#xA;cd webdriver-ts-results&#xA;npm ci&#xA;cd ..&#xA;cd webdriver-ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the webdriver-ts directory issue the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run results&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now a result table should have been created which can be opened on &lt;a href=&#34;http://localhost:8080/webdriver-ts-results/table.html&#34;&gt;http://localhost:8080/webdriver-ts-results/table.html&lt;/a&gt;. There&#39;s nothing in table except for the column vanillajs-keyed at the right end of the first table. &lt;img src=&#34;https://raw.githubusercontent.com/krausest/js-framework-benchmark/master/images/staticResults.png?raw=true&#34; alt=&#34;First Run Results&#34; title=&#34;First Run Results&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2.6 [Optional] Updating the index.html file&lt;/h2&gt; &#xA;&lt;p&gt;This simply rebuilds the file used to display the table, not the results.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run index&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.7 [Optional] Building and running the benchmarks for all frameworks&lt;/h2&gt; &#xA;&lt;p&gt;This is not for the faint at heart. You can build all frameworks simply by issuing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ..&#xA;npm run build-prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After downloading the whole internet it starts building it. Basically there should be no errors during the build, but I can&#39;t guarantee that the dependencies won&#39;t break. (There&#39;s a docker build on the way which might make building it more robust. See &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/wiki/%5BUnder-construction%5D-Build-all-frameworks-with-docker&#34;&gt;https://github.com/krausest/js-framework-benchmark/wiki/%5BUnder-construction%5D-Build-all-frameworks-with-docker&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;p&gt;You can now run the benchmark for all frameworks by invoking:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run bench-all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in the root directory.&lt;/p&gt; &#xA;&lt;p&gt;After that you can check all results in &lt;a href=&#34;http://localhost:8080/webdriver-ts/table.html&#34;&gt;http://localhost:8080/webdriver-ts/table.html&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;3 Tips and tricks&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can run multiple implementations by passing their directory names (cd to webdriver-ts): &lt;code&gt;npm run bench keyed/angular keyed/react&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can select multiple frameworks and benchmarks for running with prefixes like in the following example in the webdriver-ts directory: &lt;code&gt;npm run bench -- --benchmark 01_ 02_ --framework keyed/vanillajs keyed/react-hooks&lt;/code&gt; runs the test for all frameworks that contain either angular or bob, which means all angular versions and bobril and all benchmarks whose id contain 01* or 02*&lt;/li&gt; &#xA; &lt;li&gt;The memory benchmarks assume certain paths for the chrome installation. If it doesn&#39;t fit use &lt;code&gt;npm run bench -- --chromeBinary /usr/bin/google-chrome&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;If you can&#39;t get one framework to compile or run, just move it out of the frameworks directory and re-run&lt;/li&gt; &#xA; &lt;li&gt;One can check whether an implementation is keyed or non-keyed via &lt;code&gt;npm run isKeyed&lt;/code&gt; in the webdriver-ts directory. You can limit which frameworks to check in the same way as the webdriver test runner like e.g. &lt;code&gt;npm run isKeyed keyed/svelte&lt;/code&gt;. The program will report an error if a benchmark implementation is incorrectly classified.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;4. Contributing a new implementation&lt;/h2&gt; &#xA;&lt;h2&gt;4.1 Building the app&lt;/h2&gt; &#xA;&lt;p&gt;For contributions it is basically sufficient to create a new directory for your framework that supports &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run build-prod&lt;/code&gt; and can be then opened in the browser. All other steps are optional. Let&#39;s simulate that by copying vanillajs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd ../frameworks/keyed&#xA;cp -r vanillajs super-vanillajs&#xA;cd super-vanillajs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then we edit super-vanillajs/index.html to have a correct index.html:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;title&amp;gt;Super-VanillaJS-&#34;keyed&#34;&amp;lt;/title&amp;gt;&#xA;...&#xA;                    &amp;lt;h1&amp;gt;Super-VanillaJS-&#34;keyed&#34;&amp;lt;/h1&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In most cases you&#39;ll need &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run build-prod&lt;/code&gt; and then check whether it works in the browser on &lt;a href=&#34;http://localhost:8080/frameworks/keyed/super-vanillajs/&#34;&gt;http://localhost:8080/frameworks/keyed/super-vanillajs/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;(Of course in reality you&#39;d rather throw out the javascript source files and use your framework there instead of only changing the html file.)&lt;/p&gt; &#xA;&lt;h2&gt;4.2 Adding your new implementation to the results table.&lt;/h2&gt; &#xA;&lt;p&gt;(Notice: Updating common.ts is no longer necessary, super-vanillajs is visible in the result table)&lt;/p&gt; &#xA;&lt;p&gt;Your package.json must include some information for the benchmark. Since you copied it, the important section is already there:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  ...&#xA;  &#34;js-framework-benchmark&#34;: {&#xA;    &#34;frameworkVersion&#34;: &#34;&#34;,&#xA;    &#34;frameworkHomeURL&#34;: &#34;&#34;&#xA;  },&#xA;  ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This one is a bit exceptional since vanillajs has no version and there no framework involved. If you use a normal framework like react it carries a version information and the framework should have an URL. For most frameworks you&#39;ll add a dependency to your framework in package.json. The benchmark can automatically determine the correct version information from package.json and package-lock.json if you specify the package name like that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  &#34;js-framework-benchmark&#34;: {&#xA;    &#34;frameworkVersionFromPackage&#34;: &#34;react&#34;&#xA;    &#34;frameworkHomeURL&#34;: &#34;https://www.reactjs.org&#34;&#xA;  },&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now the benchmark will fetch the installed react version from package-lock.json in the react directory and use that version number to compute the correct version string. If your library has multiple important packages like react + redux you can put them separated with a colon there like &#34;react:redux&#34;. If you don&#39;t pull your framework from npm you can hardcode a version like &lt;code&gt;&#34;frameworkVersion&#34;: &#34;0.0.1&#34;&lt;/code&gt;. The other important, but optional properties for js-framework-benchmark are shown in the following example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;customURL&#34;: &#34;/target/web/stage&#34;,&#xA;&#34;useShadowRoot&#34;: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set an optional different URL if needed or specify that your DOM uses a shadow root.&lt;/p&gt; &#xA;&lt;h2&gt;4.3 Submitting your implementation&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are very welcome. Please use the following rules:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Name your directory frameworks/[keyed|non-keyed]/[FrameworkName]&lt;/li&gt; &#xA; &lt;li&gt;The package.json in your directory must contain some important information see section 4.2 above.&lt;/li&gt; &#xA; &lt;li&gt;Each contribution must be buildable by &lt;code&gt;npm install&lt;/code&gt; and &lt;code&gt;npm run build-prod&lt;/code&gt; command in the directory. What build-prod does is up to you. Often there&#39;s an &lt;code&gt;npm run build-dev&lt;/code&gt; that creates a development build&lt;/li&gt; &#xA; &lt;li&gt;Every implementation must use bootstrap provided in the root css directory.&lt;/li&gt; &#xA; &lt;li&gt;All npm dependencies should be installed locally (i.e. listed in your package.json). Http-server or other local web servers should not be local dependencies. It is installed from the root directory to allow access to bootstrap.&lt;/li&gt; &#xA; &lt;li&gt;Please use &lt;em&gt;fixed version&lt;/em&gt; numbers, no ranges, in package.json. Otherwise the build will break sooner or later - believe me. Updating works IMO best with npm-check-updates, which keeps the version format.&lt;/li&gt; &#xA; &lt;li&gt;Webdriver-ts must be able to run the perf tests for the contribution. This means that all buttons (like &#34;Create 1,000 rows&#34;) must have the correct id e.g. like in vanillajs. Using shadow DOM is a real pain for webdriver. The closer you can get to polymer the higher the chances I can make that contribution work.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t change the ids in the index.html, since the automated benchmarking relies on those ids.&lt;/li&gt; &#xA; &lt;li&gt;Please push only files in your framework folder (not index.html or results.json)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Please make sure your implementation is validated by the test tool.&lt;/strong&gt; cd to webdriver-ts and invoke it with &lt;code&gt;npm run isKeyed [keyed|non-keyed]/[FrameworkName]&lt;/code&gt;. It&#39;ll print an error if your framework behaves other as specified. It&#39;ll print a big ERROR explaining if it isn&#39;t happy with the implementation. Some common errors include: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Your package.json is missing some required fields&lt;/li&gt; &#xA;   &lt;li&gt;Incorrect classification (Keyed/NonKeyed)&lt;/li&gt; &#xA;   &lt;li&gt;You have gzipped files in /dist (unfortunately the web server prefers these when they exist)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Please don&#39;t commit any of the result file webdriver-ts/table.html, webdriver-ts-results/src/results.ts or webdriver-ts-results/table.html. I use to run the benchmarks after merging and publish updated (temporary) results.&lt;/li&gt; &#xA; &lt;li&gt;The latest stable chrome can be used regarding web features and language level (babel-preset-env &#34;last 1 chrome versions&#34;)&lt;/li&gt; &#xA; &lt;li&gt;The vanillajs implementations and some others include code that try to approximate the repaint duration through javascript code. Implementations are not required to include that measurement. Remember: The real measurements are taken by the automated test driver by examining chrome timeline entries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Please don&#39;t over-optimize.&lt;/strong&gt; This benchmark is most useful if you apply an idiomatic style for the framework you&#39;re using. We&#39;ve sharpened the rules what kind of implementation is considered correct and will add errors or notes when an implementations handles things wrongly (errors) or in a way that looks like a shortcut (notes). &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The html must be identical with the one created by the reference implementation vanillajs. It also must include all the aria-hidden attributes. Otherwise the implementation is considered erroneous and will be marked with issue &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/issues/634&#34;&gt;#634&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Keyed implementations must pass the &lt;code&gt;npm run isKeyed&lt;/code&gt; test in the test driver otherwise they are erroneous. Not that this test might not be sufficient, but just necessary to be keyed (from time to time we find new loop holes). There&#39;s error &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/issues/694&#34;&gt;#694&lt;/a&gt; for such cases.&lt;/li&gt; &#xA;   &lt;li&gt;Using request animation frame calls in client code, especially when applied only for some benchmark operations, is considered bad style and gets note &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/issues/796&#34;&gt;#796&lt;/a&gt; applied. Note that frameworks are free to choose whether they use RAF of not.&lt;/li&gt; &#xA;   &lt;li&gt;Manual DOM manipulation (like setting the danger class directly on the selected row) lead to some controversial debates. Depending on the framework you&#39;re using it might be idiomatic style or not. In any case it gets note &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/issues/772&#34;&gt;#772&lt;/a&gt; applied.&lt;/li&gt; &#xA;   &lt;li&gt;Implementations should keep the selected rows in the state (i.e. not a flag for each row, but one reference, id or index for the table) and use that information for rendering. Keeping a selection flag for each row might be faster, but it&#39;s considered bad style. Thus those implementations get note &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/issues/800&#34;&gt;#800&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Explicit event delegation is another area where many discussions came up. Implementations that use explicit event delegation in client code get note &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/issues/801&#34;&gt;#801&lt;/a&gt;. Frameworks themselves are free to use event delegation.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Helpful tips:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Do not start your implementation using vanillajs as the reference. It uses direct DOM manipulation (and thus has note &lt;a href=&#34;https://github.com/krausest/js-framework-benchmark/issues/772&#34;&gt;#772&lt;/a&gt;) and serves only as a performance baseline but not as a best practice implementation. Instead pick a framework which is similar to yours.&lt;/li&gt; &#xA; &lt;li&gt;Do not forget to preload the glyphicon by adding this somewhere in your HTML: &lt;code&gt;&amp;lt;span class=&#34;preloadicon glyphicon glyphicon-remove&#34; aria-hidden=&#34;true&#34;&amp;gt;&amp;lt;/span&amp;gt;&lt;/code&gt; or you will get terrible performance.&lt;/li&gt; &#xA; &lt;li&gt;Be careful not to leave gzipped files in your /dist directory. Unfortunately the web server prefers these when they exist and we cannot change that (meaning you could be observing an outdated build).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This work is derived from a benchmark that Richard Ayotte published on &lt;a href=&#34;https://gist.github.com/RichAyotte/a7b8780341d5e75beca7&#34;&gt;https://gist.github.com/RichAyotte/a7b8780341d5e75beca7&lt;/a&gt; and adds more framework and more operations. Thanks for the great work.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to Baptiste Augrain for making the benchmarks more sophisticated and adding frameworks.&lt;/p&gt; &#xA;&lt;h1&gt;History&lt;/h1&gt; &#xA;&lt;p&gt;Frameworks without significant activity on github or npm for more than a year will be removed (&lt;em&gt;automatic commits like dependabot and minor updates, like docs editions, are ignored&lt;/em&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Will be removed in future:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; crui Last significant commit Jul 28, 2019&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2020-7-9&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; etch Last commit Sep 12, 2018&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; hyperoop Last significant commit Dec 23, 2018&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; faster-dom (to be replaced by a new revact implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; plastiq (to be replaced by a new Hyperdom implementation)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rawact Last commit Dec 3, 2018&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; react-djinn Last NPM publish 2019-05-03 (the Github org a repo aren&#39;t available anymore)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; react-lite Last commit Mar 29, 2019&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; redux-combiner Last commit May 14, 2018&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; surplus Last commit Jan 5, 2019&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; gruu Last commit Jun 23, 2019&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; lite-html Last commit Sep 7, 2018&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;2019-9-16&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; angular-light Last commit Nov 30, 2017&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; nx. Last commit Feb 2017&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; maik-h Last commit Dec 15, 2017&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; rivets Last commit Oct 22, 2016&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; tsers. Last commit Jun 19, 2016&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>nhn/tui.image-editor</title>
    <updated>2023-06-14T01:40:14Z</updated>
    <id>tag:github.com,2023-06-14:/nhn/tui.image-editor</id>
    <link href="https://github.com/nhn/tui.image-editor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🍞🎨 Full-featured photo image editor using canvas. It is really easy, and it comes with great filters.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40895380-0b9f4cd6-67ea-11e8-982f-18121daa3a04.png&#34; alt=&#34;Toast UI ImageEditor&#34;&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Full featured image editor using HTML5 Canvas. It&#39;s easy to use and provides powerful filters.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/nhn/tui.image-editor.svg?sanitize=true&#34; alt=&#34;github version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/tui-image-editor&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/tui-image-editor.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nhn/tui.image-editor/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/nhn/tui.image-editor.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nhn/tui.image-editor/issues?q=is%3Aissue+is%3Aopen+label%3A%22help+wanted%22&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-ff69b4.svg?sanitize=true&#34; alt=&#34;PRs welcome&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/nhn&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%3C%2F%3E%20with%20%E2%99%A5%20by-NHN_CLOUD-ff1414.svg?sanitize=true&#34; alt=&#34;code with hearth by NHN Cloud&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://lerna.js.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/maintained%20with-lerna-cc00ff.svg?sanitize=true&#34; alt=&#34;lerna&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;📦 Packages&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/tree/master/apps/image-editor&#34;&gt;toast-ui.image-editor&lt;/a&gt; - Plain JavaScript component implemented by &lt;a href=&#34;https://github.com/nhn&#34;&gt;NHN Cloud&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/tree/master/apps/vue-image-editor&#34;&gt;toast-ui.vue-image-editor&lt;/a&gt; - &lt;strong&gt;Vue&lt;/strong&gt; wrapper component is powered by &lt;a href=&#34;https://github.com/nhn&#34;&gt;NHN Cloud&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/tree/master/apps/react-image-editor&#34;&gt;toast-ui.react-image-editor&lt;/a&gt; - &lt;strong&gt;React&lt;/strong&gt; wrapper component is powered by &lt;a href=&#34;https://github.com/nhn&#34;&gt;NHN Cloud&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41647896-7b218ae0-74b2-11e8-90db-d7805cc23e8c.gif&#34; alt=&#34;6 -20-2018 17-45-54&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🚩 Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#&#34;&gt;!Toast UI ImageEditor&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#packages&#34;&gt;📦 Packages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-table-of-contents&#34;&gt;🚩 Table of Contents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-browser-support&#34;&gt;🌏 Browser Support&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-has-full-features-that-stick-to-the-basic&#34;&gt;💪 Has full features that stick to the basic.&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#photo-manipulation&#34;&gt;Photo manipulation&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#integration-function&#34;&gt;Integration function&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#powerful-filter-function&#34;&gt;Powerful filter function&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-easy-to-apply-the-size-and-design-you-want&#34;&gt;🙆 Easy to apply the size and design you want&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#can-be-used-everywhere&#34;&gt;Can be used everywhere.&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#nice-default--fully-customizable-themes&#34;&gt;Nice default &amp;amp; Fully customizable Themes&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-features&#34;&gt;🎨 Features&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-pull-request-steps&#34;&gt;🔧 Pull Request Steps&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#pull-request&#34;&gt;Pull Request&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-documents&#34;&gt;📙 Documents&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-contributing&#34;&gt;💬 Contributing&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-dependency&#34;&gt;🔩 Dependency&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-toast-ui-family&#34;&gt;🍞 TOAST UI Family&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-used-by&#34;&gt;🚀 Used By&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/nhn/tui.image-editor/master/#-license&#34;&gt;📜 License&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🌏 Browser Support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1215767/34348387-a2e64588-ea4d-11e7-8267-a43365103afe.png&#34; alt=&#34;Chrome&#34; width=&#34;16px&#34; height=&#34;16px&#34;&gt; Chrome&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1215767/34348590-250b3ca2-ea4f-11e7-9efb-da953359321f.png&#34; alt=&#34;IE&#34; width=&#34;16px&#34; height=&#34;16px&#34;&gt; Internet Explorer&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1215767/34348380-93e77ae8-ea4d-11e7-8696-9a989ddbbbf5.png&#34; alt=&#34;Edge&#34; width=&#34;16px&#34; height=&#34;16px&#34;&gt; Edge&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1215767/34348394-a981f892-ea4d-11e7-9156-d128d58386b9.png&#34; alt=&#34;Safari&#34; width=&#34;16px&#34; height=&#34;16px&#34;&gt; Safari&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1215767/34348383-9e7ed492-ea4d-11e7-910c-03b39d52f496.png&#34; alt=&#34;Firefox&#34; width=&#34;16px&#34; height=&#34;16px&#34;&gt; Firefox&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;10+&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;💪 Has full features that stick to the basic.&lt;/h2&gt; &#xA;&lt;h3&gt;Photo manipulation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Crop, Flip, Rotation, Drawing, Shape, Icon, Text, Mask Filter, Image Filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Integration function&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download, Image Load, Undo, Redo, Reset, Delete Object(Shape, Line, Mask Image...)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;20%&#34;&gt;Crop&lt;/th&gt; &#xA;   &lt;th width=&#34;20%&#34;&gt;Flip&lt;/th&gt; &#xA;   &lt;th width=&#34;20%&#34;&gt;Rotation&lt;/th&gt; &#xA;   &lt;th width=&#34;20%&#34;&gt;Drawing&lt;/th&gt; &#xA;   &lt;th width=&#34;20%&#34;&gt;Shape&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40904241-0c28ec68-6815-11e8-8296-89a1716b22d8.png&#34; alt=&#34;2018-06-04 4 33 16&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40904521-f7c6e184-6815-11e8-8ba3-c94664da69a2.png&#34; alt=&#34;2018-06-04 4 40 06&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40904664-656aa748-6816-11e8-9943-6607c209deac.png&#34; alt=&#34;2018-06-04 4 43 02&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40904850-0f26ebde-6817-11e8-97d0-d3a7e4bc02da.png&#34; alt=&#34;2018-06-04 4 47 40&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40905037-a026296a-6817-11e8-9d28-9e1ca7bc58c4.png&#34; alt=&#34;2018-06-04 4 51 45&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Icon&lt;/th&gt; &#xA;   &lt;th&gt;Text&lt;/th&gt; &#xA;   &lt;th&gt;Mask&lt;/th&gt; &#xA;   &lt;th&gt;Filter&lt;/th&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40931205-2d255db6-6865-11e8-98af-ad34c5a01da1.png&#34; alt=&#34;2018-06-05 2 06 29&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40931484-46253948-6866-11e8-8a04-fa042920e457.png&#34; alt=&#34;2018-06-05 2 14 36&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40931743-21eeb346-6867-11e8-8e31-a59f7a43482b.png&#34; alt=&#34;2018-06-05 2 20 46&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40932016-093ed1f4-6868-11e8-8224-a048c3ee8a09.png&#34; alt=&#34;2018-06-05 2 27 10&#34; style=&#34;max-width:100%;&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Powerful filter function&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Grayscale, Invert, Sepia, Blur Sharpen, Emboss, RemoveWhite, Brightness, Noise, Pixelate, ColorFilter, Tint, Multiply, Blend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Grayscale&lt;/th&gt; &#xA;   &lt;th&gt;Noise&lt;/th&gt; &#xA;   &lt;th&gt;Emboss&lt;/th&gt; &#xA;   &lt;th&gt;Pixelate&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753470-930fb7b0-7608-11e8-9966-1c890e73d131.png&#34; alt=&#34;grayscale&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753458-9013bc82-7608-11e8-91d9-74dcc3ffce31.png&#34; alt=&#34;noise&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753460-906c018a-7608-11e8-8861-c135c0117cea.png&#34; alt=&#34;emboss&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753461-90a614a6-7608-11e8-97a7-0d3b7bb4aec4.png&#34; alt=&#34;pixelate&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Sepia&lt;/th&gt; &#xA;   &lt;th&gt;Sepia2&lt;/th&gt; &#xA;   &lt;th&gt;Blend-righten&lt;/th&gt; &#xA;   &lt;th&gt;Blend-diff&lt;/th&gt; &#xA;   &lt;th&gt;Invert&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753464-91acc41c-7608-11e8-8652-572f935ea704.png&#34; alt=&#34;sepia&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753640-91e57248-7609-11e8-8960-145e0de57e39.png&#34; alt=&#34;sepia2&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753462-9114bc3a-7608-11e8-9ab4-16ce20a34321.png&#34; alt=&#34;blend-righten&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753465-91e4baf2-7608-11e8-9b8f-79e1b956d387.png&#34; alt=&#34;blend-diff&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753466-9260b224-7608-11e8-848a-73231a02ae3a.png&#34; alt=&#34;invert&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Multifly&lt;/th&gt; &#xA;   &lt;th&gt;Tint&lt;/th&gt; &#xA;   &lt;th&gt;Brightness&lt;/th&gt; &#xA;   &lt;th&gt;Remove-white&lt;/th&gt; &#xA;   &lt;th&gt;Sharpen&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753467-92baae28-7608-11e8-80d2-187a310213f5.png&#34; alt=&#34;multifly&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753468-92e6391c-7608-11e8-8977-651366ebe693.png&#34; alt=&#34;tint&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753457-8fb3d3c6-7608-11e8-9e1d-10c6e4aeba68.png&#34; alt=&#34;brightness&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753463-917feeb0-7608-11e8-862d-eb3af84e120a.png&#34; alt=&#34;remove-white&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/41753639-91b8470a-7609-11e8-8d13-48ac3232365b.png&#34; alt=&#34;sharpen&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🙆 Easy to apply the size and design you want&lt;/h2&gt; &#xA;&lt;h3&gt;Can be used everywhere.&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Widely supported in browsers including IE10.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Option to support various display sizes. (allows you to use the editor features on your web pages at least over &lt;strong&gt;550 * 450 sizes&lt;/strong&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40907369-9221f482-681e-11e8-801c-78d6f2e246a8.png&#34; alt=&#34;2018-06-04 5 35 25&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Nice default &amp;amp; Fully customizable Themes&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Has a white and black theme, and you can modify the theme file to customize it.&lt;/li&gt; &#xA; &lt;li&gt;Has an API so that you can create your own instead of the built-in.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;black - top&lt;/th&gt; &#xA;   &lt;th&gt;black - bottom&lt;/th&gt; &#xA;   &lt;th&gt;white - left&lt;/th&gt; &#xA;   &lt;th&gt;white - right&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40930753-8b72502e-6863-11e8-9cff-1719aee9aef0.png&#34; alt=&#34;2018-06-05 1 41 13&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40930755-8bcee136-6863-11e8-8e28-0a6722d38c59.png&#34; alt=&#34;2018-06-05 1 40 24&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40930756-8bfe0b50-6863-11e8-8682-bab11a0a2289.png&#34; alt=&#34;2018-06-05 1 41 48&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/35218826/40930754-8ba1dba0-6863-11e8-9439-cc059241b675.png&#34; alt=&#34;2018-06-05 1 42 27&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;🎨 Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Load image to canvas&lt;/li&gt; &#xA; &lt;li&gt;Undo/Redo (With shortcut)&lt;/li&gt; &#xA; &lt;li&gt;Crop&lt;/li&gt; &#xA; &lt;li&gt;Flip&lt;/li&gt; &#xA; &lt;li&gt;Rotation&lt;/li&gt; &#xA; &lt;li&gt;Resize&lt;/li&gt; &#xA; &lt;li&gt;Free drawing&lt;/li&gt; &#xA; &lt;li&gt;Line drawing&lt;/li&gt; &#xA; &lt;li&gt;Shape&lt;/li&gt; &#xA; &lt;li&gt;Icon&lt;/li&gt; &#xA; &lt;li&gt;Text&lt;/li&gt; &#xA; &lt;li&gt;Mask Filter&lt;/li&gt; &#xA; &lt;li&gt;Image Filter&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔧 Pull Request Steps&lt;/h2&gt; &#xA;&lt;p&gt;TOAST UI products are open source, so you can create a pull request(PR) after you fix issues. Run npm scripts and develop yourself with the following process.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;Fork &lt;code&gt;develop&lt;/code&gt; branch into your personal repository. Clone it to local computer. Install node modules. Before starting development, you should check if there are any errors.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/{your-personal-repo}/[[repo name]].git&#xA;$ cd [[repo name]]&#xA;$ npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Pull Request&lt;/h3&gt; &#xA;&lt;p&gt;Before uploading your PR, run test one last time to check if there are any errors. If it has no errors, commit and then push it!&lt;/p&gt; &#xA;&lt;p&gt;For more information on PR&#39;s steps, please see links in the Contributing section.&lt;/p&gt; &#xA;&lt;h2&gt;📙 Documents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/tree/master/docs/Basic-Tutorial.md&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/tree/master/docs&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nhn.github.io/tui.image-editor/latest/tutorial-example01-includeUi&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://nhn.github.io/tui.image-editor/latest&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;💬 Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/raw/master/CONTRIBUTING.md&#34;&gt;Contributing guideline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/raw/master/ISSUE_TEMPLATE.md&#34;&gt;Issue guideline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/raw/production/docs/COMMIT_MESSAGE_CONVENTION.md&#34;&gt;Commit convention&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🔩 Dependency&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fabricjs/fabric.js/releases&#34;&gt;fabric.js&lt;/a&gt; = 4.2.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.code-snippet/releases/tag/v1.5.0&#34;&gt;tui.code-snippet&lt;/a&gt; &amp;gt;= 1.5.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.color-picker/releases/tag/v2.2.6&#34;&gt;tui.color-picker&lt;/a&gt; &amp;gt;= 2.2.6&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🍞 TOAST UI Family&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.editor&#34;&gt;TOAST UI Editor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.grid&#34;&gt;TOAST UI Grid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.chart&#34;&gt;TOAST UI Chart&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn/tui.calendar&#34;&gt;TOAST UI Calendar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nhn&#34;&gt;TOAST UI Components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;🚀 Used By&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dooray.com/home/&#34;&gt;NHN Dooray! - Collaboration Service (Project, Messenger, Mail, Calendar, Drive, Wiki, Contacts)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://catalystapp.co/&#34;&gt;Catalyst&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📜 License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/nhn/tui.image-editor/raw/master/LICENSE&#34;&gt;MIT LICENSE&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>