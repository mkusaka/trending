<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-25T01:34:01Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>platformatic/platformatic</title>
    <updated>2022-09-25T01:34:01Z</updated>
    <id>tag:github.com,2022-09-25:/platformatic/platformatic</id>
    <link href="https://github.com/platformatic/platformatic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Platformatic&lt;/h1&gt; &#xA;&lt;p&gt;Platformatic is a set a Open Source tools that you can use to build your own &lt;em&gt;Internal Developer Platform&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first of these tools is &lt;strong&gt;Platformatic DB&lt;/strong&gt; â€” more will follow!&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install platformatic&#xA;&#xA;# Start a new project&#xA;npx platformatic db init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow our &lt;a href=&#34;https://oss.platformatic.dev/docs/getting-started/quick-start-guide&#34;&gt;Quick Start Guide&lt;/a&gt; guide to get up and running with Platformatic DB.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oss.platformatic.dev/docs/category/getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oss.platformatic.dev/docs/category/reference&#34;&gt;Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://oss.platformatic.dev/docs/category/guides&#34;&gt;Guides&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check out our full documentation at &lt;a href=&#34;https://oss.platformatic.dev&#34;&gt;oss.platformatic.dev&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;Having issues? Drop in to the &lt;a href=&#34;https://discord.gg/platformatic&#34;&gt;Platformatic Discord&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache 2.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hagopj13/node-express-boilerplate</title>
    <updated>2022-09-25T01:34:01Z</updated>
    <id>tag:github.com,2022-09-25:/hagopj13/node-express-boilerplate</id>
    <link href="https://github.com/hagopj13/node-express-boilerplate" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A boilerplate for building production-ready RESTful APIs using Node.js, Express, and Mongoose&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RESTful API Node Server Boilerplate&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hagopj13/node-express-boilerplate&#34;&gt;&lt;img src=&#34;https://travis-ci.org/hagopj13/node-express-boilerplate.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/hagopj13/node-express-boilerplate?branch=master&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/hagopj13/node-express-boilerplate/badge.svg?branch=master&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A boilerplate/starter project for quickly building RESTful APIs using Node.js, Express, and Mongoose.&lt;/p&gt; &#xA;&lt;p&gt;By running a single command, you will get a production-ready Node.js app installed and fully configured on your machine. The app comes with many built-in features, such as authentication using JWT, request validation, unit and integration tests, continuous integration, docker support, API documentation, pagination, etc. For more details, check the features list below.&lt;/p&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;To create a project, simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-nodejs-express-app &amp;lt;project-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm init nodejs-express-app &amp;lt;project-name&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Manual Installation&lt;/h2&gt; &#xA;&lt;p&gt;If you would still prefer to do the installation manually, follow these steps:&lt;/p&gt; &#xA;&lt;p&gt;Clone the repo:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --depth 1 https://github.com/hagopj13/node-express-boilerplate.git&#xA;cd node-express-boilerplate&#xA;npx rimraf ./.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install the dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Set the environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&#xA;# open .env and modify the environment variables (if needed)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#commands&#34;&gt;Commands&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#project-structure&#34;&gt;Project Structure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#api-documentation&#34;&gt;API Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#validation&#34;&gt;Validation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#authentication&#34;&gt;Authentication&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#authorization&#34;&gt;Authorization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#custom-mongoose-plugins&#34;&gt;Custom Mongoose Plugins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#linting&#34;&gt;Linting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;NoSQL database&lt;/strong&gt;: &lt;a href=&#34;https://www.mongodb.com&#34;&gt;MongoDB&lt;/a&gt; object data modeling using &lt;a href=&#34;https://mongoosejs.com&#34;&gt;Mongoose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Authentication and authorization&lt;/strong&gt;: using &lt;a href=&#34;http://www.passportjs.org&#34;&gt;passport&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Validation&lt;/strong&gt;: request data validation using &lt;a href=&#34;https://github.com/hapijs/joi&#34;&gt;Joi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Logging&lt;/strong&gt;: using &lt;a href=&#34;https://github.com/winstonjs/winston&#34;&gt;winston&lt;/a&gt; and &lt;a href=&#34;https://github.com/expressjs/morgan&#34;&gt;morgan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Testing&lt;/strong&gt;: unit and integration tests using &lt;a href=&#34;https://jestjs.io&#34;&gt;Jest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Error handling&lt;/strong&gt;: centralized error handling mechanism&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;API documentation&lt;/strong&gt;: with &lt;a href=&#34;https://github.com/Surnet/swagger-jsdoc&#34;&gt;swagger-jsdoc&lt;/a&gt; and &lt;a href=&#34;https://github.com/scottie1984/swagger-ui-express&#34;&gt;swagger-ui-express&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Process management&lt;/strong&gt;: advanced production process management using &lt;a href=&#34;https://pm2.keymetrics.io&#34;&gt;PM2&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dependency management&lt;/strong&gt;: with &lt;a href=&#34;https://yarnpkg.com&#34;&gt;Yarn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Environment variables&lt;/strong&gt;: using &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;dotenv&lt;/a&gt; and &lt;a href=&#34;https://github.com/kentcdodds/cross-env#readme&#34;&gt;cross-env&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Security&lt;/strong&gt;: set security HTTP headers using &lt;a href=&#34;https://helmetjs.github.io&#34;&gt;helmet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Santizing&lt;/strong&gt;: sanitize request data against xss and query injection&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CORS&lt;/strong&gt;: Cross-Origin Resource-Sharing enabled using &lt;a href=&#34;https://github.com/expressjs/cors&#34;&gt;cors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Compression&lt;/strong&gt;: gzip compression with &lt;a href=&#34;https://github.com/expressjs/compression&#34;&gt;compression&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;CI&lt;/strong&gt;: continuous integration with &lt;a href=&#34;https://travis-ci.org&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Docker support&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code coverage&lt;/strong&gt;: using &lt;a href=&#34;https://coveralls.io&#34;&gt;coveralls&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Code quality&lt;/strong&gt;: with &lt;a href=&#34;https://www.codacy.com&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Git hooks&lt;/strong&gt;: with &lt;a href=&#34;https://github.com/typicode/husky&#34;&gt;husky&lt;/a&gt; and &lt;a href=&#34;https://github.com/okonet/lint-staged&#34;&gt;lint-staged&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linting&lt;/strong&gt;: with &lt;a href=&#34;https://eslint.org&#34;&gt;ESLint&lt;/a&gt; and &lt;a href=&#34;https://prettier.io&#34;&gt;Prettier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Editor config&lt;/strong&gt;: consistent editor configuration using &lt;a href=&#34;https://editorconfig.org&#34;&gt;EditorConfig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Commands&lt;/h2&gt; &#xA;&lt;p&gt;Running locally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Running in production:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Testing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run all tests&#xA;yarn test&#xA;&#xA;# run all tests in watch mode&#xA;yarn test:watch&#xA;&#xA;# run test coverage&#xA;yarn coverage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run docker container in development mode&#xA;yarn docker:dev&#xA;&#xA;# run docker container in production mode&#xA;yarn docker:prod&#xA;&#xA;# run all tests in a docker container&#xA;yarn docker:test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Linting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# run ESLint&#xA;yarn lint&#xA;&#xA;# fix ESLint errors&#xA;yarn lint:fix&#xA;&#xA;# run prettier&#xA;yarn prettier&#xA;&#xA;# fix prettier errors&#xA;yarn prettier:fix&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;The environment variables can be found and modified in the &lt;code&gt;.env&lt;/code&gt; file. They come with these default values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Port number&#xA;PORT=3000&#xA;&#xA;# URL of the Mongo DB&#xA;MONGODB_URL=mongodb://127.0.0.1:27017/node-boilerplate&#xA;&#xA;# JWT&#xA;# JWT secret key&#xA;JWT_SECRET=thisisasamplesecret&#xA;# Number of minutes after which an access token expires&#xA;JWT_ACCESS_EXPIRATION_MINUTES=30&#xA;# Number of days after which a refresh token expires&#xA;JWT_REFRESH_EXPIRATION_DAYS=30&#xA;&#xA;# SMTP configuration options for the email service&#xA;# For testing, you can use a fake SMTP service like Ethereal: https://ethereal.email/create&#xA;SMTP_HOST=email-server&#xA;SMTP_PORT=587&#xA;SMTP_USERNAME=email-server-username&#xA;SMTP_PASSWORD=email-server-password&#xA;EMAIL_FROM=support@yourapp.com&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Project Structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;src\&#xA; |--config\         # Environment variables and configuration related things&#xA; |--controllers\    # Route controllers (controller layer)&#xA; |--docs\           # Swagger files&#xA; |--middlewares\    # Custom express middlewares&#xA; |--models\         # Mongoose models (data layer)&#xA; |--routes\         # Routes&#xA; |--services\       # Business logic (service layer)&#xA; |--utils\          # Utility classes and functions&#xA; |--validations\    # Request data validation schemas&#xA; |--app.js          # Express app&#xA; |--index.js        # App entry point&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API Documentation&lt;/h2&gt; &#xA;&lt;p&gt;To view the list of available APIs and their specifications, run the server and go to &lt;code&gt;http://localhost:3000/v1/docs&lt;/code&gt; in your browser. This documentation page is automatically generated using the &lt;a href=&#34;https://swagger.io/&#34;&gt;swagger&lt;/a&gt; definitions written as comments in the route files.&lt;/p&gt; &#xA;&lt;h3&gt;API Endpoints&lt;/h3&gt; &#xA;&lt;p&gt;List of available routes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Auth routes&lt;/strong&gt;:&lt;br&gt; &lt;code&gt;POST /v1/auth/register&lt;/code&gt; - register&lt;br&gt; &lt;code&gt;POST /v1/auth/login&lt;/code&gt; - login&lt;br&gt; &lt;code&gt;POST /v1/auth/refresh-tokens&lt;/code&gt; - refresh auth tokens&lt;br&gt; &lt;code&gt;POST /v1/auth/forgot-password&lt;/code&gt; - send reset password email&lt;br&gt; &lt;code&gt;POST /v1/auth/reset-password&lt;/code&gt; - reset password&lt;br&gt; &lt;code&gt;POST /v1/auth/send-verification-email&lt;/code&gt; - send verification email&lt;br&gt; &lt;code&gt;POST /v1/auth/verify-email&lt;/code&gt; - verify email&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;User routes&lt;/strong&gt;:&lt;br&gt; &lt;code&gt;POST /v1/users&lt;/code&gt; - create a user&lt;br&gt; &lt;code&gt;GET /v1/users&lt;/code&gt; - get all users&lt;br&gt; &lt;code&gt;GET /v1/users/:userId&lt;/code&gt; - get user&lt;br&gt; &lt;code&gt;PATCH /v1/users/:userId&lt;/code&gt; - update user&lt;br&gt; &lt;code&gt;DELETE /v1/users/:userId&lt;/code&gt; - delete user&lt;/p&gt; &#xA;&lt;h2&gt;Error Handling&lt;/h2&gt; &#xA;&lt;p&gt;The app has a centralized error handling mechanism.&lt;/p&gt; &#xA;&lt;p&gt;Controllers should try to catch the errors and forward them to the error handling middleware (by calling &lt;code&gt;next(error)&lt;/code&gt;). For convenience, you can also wrap the controller inside the catchAsync utility wrapper, which forwards the error.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const catchAsync = require(&#39;../utils/catchAsync&#39;);&#xA;&#xA;const controller = catchAsync(async (req, res) =&amp;gt; {&#xA;  // this error will be forwarded to the error handling middleware&#xA;  throw new Error(&#39;Something wrong happened&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The error handling middleware sends an error response, which has the following format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;code&#34;: 404,&#xA;  &#34;message&#34;: &#34;Not found&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When running in development mode, the error response also contains the error stack.&lt;/p&gt; &#xA;&lt;p&gt;The app has a utility ApiError class to which you can attach a response code and a message, and then throw it from anywhere (catchAsync will catch it).&lt;/p&gt; &#xA;&lt;p&gt;For example, if you are trying to get a user from the DB who is not found, and you want to send a 404 error, the code should look something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const httpStatus = require(&#39;http-status&#39;);&#xA;const ApiError = require(&#39;../utils/ApiError&#39;);&#xA;const User = require(&#39;../models/User&#39;);&#xA;&#xA;const getUser = async (userId) =&amp;gt; {&#xA;  const user = await User.findById(userId);&#xA;  if (!user) {&#xA;    throw new ApiError(httpStatus.NOT_FOUND, &#39;User not found&#39;);&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Validation&lt;/h2&gt; &#xA;&lt;p&gt;Request data is validated using &lt;a href=&#34;https://joi.dev/&#34;&gt;Joi&lt;/a&gt;. Check the &lt;a href=&#34;https://joi.dev/api/&#34;&gt;documentation&lt;/a&gt; for more details on how to write Joi validation schemas.&lt;/p&gt; &#xA;&lt;p&gt;The validation schemas are defined in the &lt;code&gt;src/validations&lt;/code&gt; directory and are used in the routes by providing them as parameters to the &lt;code&gt;validate&lt;/code&gt; middleware.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const express = require(&#39;express&#39;);&#xA;const validate = require(&#39;../../middlewares/validate&#39;);&#xA;const userValidation = require(&#39;../../validations/user.validation&#39;);&#xA;const userController = require(&#39;../../controllers/user.controller&#39;);&#xA;&#xA;const router = express.Router();&#xA;&#xA;router.post(&#39;/users&#39;, validate(userValidation.createUser), userController.createUser);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Authentication&lt;/h2&gt; &#xA;&lt;p&gt;To require authentication for certain routes, you can use the &lt;code&gt;auth&lt;/code&gt; middleware.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const express = require(&#39;express&#39;);&#xA;const auth = require(&#39;../../middlewares/auth&#39;);&#xA;const userController = require(&#39;../../controllers/user.controller&#39;);&#xA;&#xA;const router = express.Router();&#xA;&#xA;router.post(&#39;/users&#39;, auth(), userController.createUser);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These routes require a valid JWT access token in the Authorization request header using the Bearer schema. If the request does not contain a valid access token, an Unauthorized (401) error is thrown.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Generating Access Tokens&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;An access token can be generated by making a successful call to the register (&lt;code&gt;POST /v1/auth/register&lt;/code&gt;) or login (&lt;code&gt;POST /v1/auth/login&lt;/code&gt;) endpoints. The response of these endpoints also contains refresh tokens (explained below).&lt;/p&gt; &#xA;&lt;p&gt;An access token is valid for 30 minutes. You can modify this expiration time by changing the &lt;code&gt;JWT_ACCESS_EXPIRATION_MINUTES&lt;/code&gt; environment variable in the .env file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Refreshing Access Tokens&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;After the access token expires, a new access token can be generated, by making a call to the refresh token endpoint (&lt;code&gt;POST /v1/auth/refresh-tokens&lt;/code&gt;) and sending along a valid refresh token in the request body. This call returns a new access token and a new refresh token.&lt;/p&gt; &#xA;&lt;p&gt;A refresh token is valid for 30 days. You can modify this expiration time by changing the &lt;code&gt;JWT_REFRESH_EXPIRATION_DAYS&lt;/code&gt; environment variable in the .env file.&lt;/p&gt; &#xA;&lt;h2&gt;Authorization&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;auth&lt;/code&gt; middleware can also be used to require certain rights/permissions to access a route.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const express = require(&#39;express&#39;);&#xA;const auth = require(&#39;../../middlewares/auth&#39;);&#xA;const userController = require(&#39;../../controllers/user.controller&#39;);&#xA;&#xA;const router = express.Router();&#xA;&#xA;router.post(&#39;/users&#39;, auth(&#39;manageUsers&#39;), userController.createUser);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example above, an authenticated user can access this route only if that user has the &lt;code&gt;manageUsers&lt;/code&gt; permission.&lt;/p&gt; &#xA;&lt;p&gt;The permissions are role-based. You can view the permissions/rights of each role in the &lt;code&gt;src/config/roles.js&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;If the user making the request does not have the required permissions to access this route, a Forbidden (403) error is thrown.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Import the logger from &lt;code&gt;src/config/logger.js&lt;/code&gt;. It is using the &lt;a href=&#34;https://github.com/winstonjs/winston&#34;&gt;Winston&lt;/a&gt; logging library.&lt;/p&gt; &#xA;&lt;p&gt;Logging should be done according to the following severity levels (ascending order from most important to least important):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const logger = require(&#39;&amp;lt;path to src&amp;gt;/config/logger&#39;);&#xA;&#xA;logger.error(&#39;message&#39;); // level 0&#xA;logger.warn(&#39;message&#39;); // level 1&#xA;logger.info(&#39;message&#39;); // level 2&#xA;logger.http(&#39;message&#39;); // level 3&#xA;logger.verbose(&#39;message&#39;); // level 4&#xA;logger.debug(&#39;message&#39;); // level 5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In development mode, log messages of all severity levels will be printed to the console.&lt;/p&gt; &#xA;&lt;p&gt;In production mode, only &lt;code&gt;info&lt;/code&gt;, &lt;code&gt;warn&lt;/code&gt;, and &lt;code&gt;error&lt;/code&gt; logs will be printed to the console.&lt;br&gt; It is up to the server (or process manager) to actually read them from the console and store them in log files.&lt;br&gt; This app uses pm2 in production mode, which is already configured to store the logs in log files.&lt;/p&gt; &#xA;&lt;p&gt;Note: API request information (request url, response code, timestamp, etc.) are also automatically logged (using &lt;a href=&#34;https://github.com/expressjs/morgan&#34;&gt;morgan&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Custom Mongoose Plugins&lt;/h2&gt; &#xA;&lt;p&gt;The app also contains 2 custom mongoose plugins that you can attach to any mongoose model schema. You can find the plugins in &lt;code&gt;src/models/plugins&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mongoose = require(&#39;mongoose&#39;);&#xA;const { toJSON, paginate } = require(&#39;./plugins&#39;);&#xA;&#xA;const userSchema = mongoose.Schema(&#xA;  {&#xA;    /* schema definition here */&#xA;  },&#xA;  { timestamps: true }&#xA;);&#xA;&#xA;userSchema.plugin(toJSON);&#xA;userSchema.plugin(paginate);&#xA;&#xA;const User = mongoose.model(&#39;User&#39;, userSchema);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;toJSON&lt;/h3&gt; &#xA;&lt;p&gt;The toJSON plugin applies the following changes in the toJSON transform call:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;removes __v, createdAt, updatedAt, and any schema path that has private: true&lt;/li&gt; &#xA; &lt;li&gt;replaces _id with id&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;paginate&lt;/h3&gt; &#xA;&lt;p&gt;The paginate plugin adds the &lt;code&gt;paginate&lt;/code&gt; static method to the mongoose schema.&lt;/p&gt; &#xA;&lt;p&gt;Adding this plugin to the &lt;code&gt;User&lt;/code&gt; model schema will allow you to do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const queryUsers = async (filter, options) =&amp;gt; {&#xA;  const users = await User.paginate(filter, options);&#xA;  return users;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;filter&lt;/code&gt; param is a regular mongo filter.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;options&lt;/code&gt; param can have the following (optional) fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const options = {&#xA;  sortBy: &#39;name:desc&#39;, // sort order&#xA;  limit: 5, // maximum results per page&#xA;  page: 2, // page number&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The plugin also supports sorting by multiple criteria (separated by a comma): &lt;code&gt;sortBy: name:desc,role:asc&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;paginate&lt;/code&gt; method returns a Promise, which fulfills with an object having the following properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;results&#34;: [],&#xA;  &#34;page&#34;: 2,&#xA;  &#34;limit&#34;: 5,&#xA;  &#34;totalPages&#34;: 10,&#xA;  &#34;totalResults&#34;: 48&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Linting&lt;/h2&gt; &#xA;&lt;p&gt;Linting is done using &lt;a href=&#34;https://eslint.org/&#34;&gt;ESLint&lt;/a&gt; and &lt;a href=&#34;https://prettier.io&#34;&gt;Prettier&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In this app, ESLint is configured to follow the &lt;a href=&#34;https://github.com/airbnb/javascript/tree/master/packages/eslint-config-airbnb-base&#34;&gt;Airbnb JavaScript style guide&lt;/a&gt; with some modifications. It also extends &lt;a href=&#34;https://github.com/prettier/eslint-config-prettier&#34;&gt;eslint-config-prettier&lt;/a&gt; to turn off all rules that are unnecessary or might conflict with Prettier.&lt;/p&gt; &#xA;&lt;p&gt;To modify the ESLint configuration, update the &lt;code&gt;.eslintrc.json&lt;/code&gt; file. To modify the Prettier configuration, update the &lt;code&gt;.prettierrc.json&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;To prevent a certain file or directory from being linted, add it to &lt;code&gt;.eslintignore&lt;/code&gt; and &lt;code&gt;.prettierignore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To maintain a consistent coding style across different IDEs, the project contains &lt;code&gt;.editorconfig&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are more than welcome! Please check out the &lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Inspirations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielfsousa/express-rest-es2017-boilerplate&#34;&gt;danielfsousa/express-rest-es2017-boilerplate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/madhums/node-express-mongoose&#34;&gt;madhums/node-express-mongoose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kunalkapadia/express-mongoose-es6-rest-api&#34;&gt;kunalkapadia/express-mongoose-es6-rest-api&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hagopj13/node-express-boilerplate/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>MuhammedKalkan/OpenLens</title>
    <updated>2022-09-25T01:34:01Z</updated>
    <id>tag:github.com,2022-09-25:/MuhammedKalkan/OpenLens</id>
    <link href="https://github.com/MuhammedKalkan/OpenLens" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OpenLens Binary Build Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OpenLens&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/MuhammedKalkan/OpenLens/actions/workflows/main.yml&#34;&gt;&lt;img src=&#34;https://github.com/MuhammedKalkan/OpenLens/actions/workflows/main.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Lens&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the Binary Build Repo for Lens Repository located here : &lt;a href=&#34;https://github.com/lensapp/lens.git&#34;&gt;https://github.com/lensapp/lens.git&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;However, this build does not require you to log in and includes only open source part. Download and use as is.&lt;/p&gt; &#xA;&lt;p&gt;Go To Release to download your binary of type Linux , MacOS or Windows&lt;/p&gt; &#xA;&lt;p&gt;If you have trouble about not seeing pod logs, remove old config files / extensions remaining from old Lens app.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You can sponsor certificates from the button or link at the right.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Auto Updater is now live starting with every binary downloaded from Latest tag or the corresponding release assets.&lt;/p&gt;</summary>
  </entry>
</feed>