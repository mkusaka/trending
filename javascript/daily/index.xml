<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-21T01:38:12Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pashpashpash/vault-ai</title>
    <updated>2023-04-21T01:38:12Z</updated>
    <id>tag:github.com,2023-04-21:/pashpashpash/vault-ai</id>
    <link href="https://github.com/pashpashpash/vault-ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;OP Vault ChatGPT: Give ChatGPT long-term memory using the OP Stack (OpenAI + Pinecone Vector Database). Upload your own custom knowledge base files (PDF, txt, etc) using a simple React frontend.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;OP Vault&lt;/h1&gt; &#xA;&lt;p&gt;OP Vault uses the OP Stack (OpenAI + Pinecone Vector Database) to enable users to upload their own custom knowledgebase files and ask questions about their contents.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vault.pash.city&#34;&gt;vault.pash.city&lt;/a&gt;&lt;/p&gt; &#xA;&lt;img width=&#34;512&#34; alt=&#34;Screen Shot 2023-04-09 at 1 53 33 AM&#34; src=&#34;https://raw.githubusercontent.com/pashpashpash/vault-ai/master/static/img/common/vault_library.png&#34;&gt; &#xA;&lt;p&gt;With quick setup, you can launch your own version of this Golang server along with a user-friendly React frontend that allows users to ask OpenAI questions about the specific knowledge base provided. The primary focus is on human-readable content like books, letters, and other documents, making it a practical and valuable tool for knowledge extraction and question-answering. You can upload an entire library&#39;s worth of books and documents and recieve pointed answers along with the name of the file and specific section within the file that the answer is based on!&lt;/p&gt; &#xA;&lt;img width=&#34;1498&#34; alt=&#34;Screen Shot 2023-04-17 at 6 23 00 PM&#34; src=&#34;https://user-images.githubusercontent.com/20898225/232645187-fff56d2b-f654-4c92-b061-4670734b2764.png&#34;&gt; &#xA;&lt;h2&gt;What can you do with OP Vault?&lt;/h2&gt; &#xA;&lt;p&gt;With The Vault, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Upload a variety of popular document types via a simple react frontend to create a custom knowledge base&lt;/li&gt; &#xA; &lt;li&gt;Retrieve accurate and relevant answers based on the content of your uploaded documents&lt;/li&gt; &#xA; &lt;li&gt;See the filenames and specific context snippets that inform the answer&lt;/li&gt; &#xA; &lt;li&gt;Explore the power of the OP Stack (OpenAI + Pinecone Vector Database) in a user-friendly interface&lt;/li&gt; &#xA; &lt;li&gt;Load entire libraries&#39; worth of books into The Vault&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Manual Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;node: v19&lt;/li&gt; &#xA; &lt;li&gt;go: v1.18.9 darwin/arm64&lt;/li&gt; &#xA; &lt;li&gt;poppler&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;h3&gt;Install manual dependencies&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install go:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Follow the go docs &lt;a href=&#34;https://go.dev/doc/install&#34;&gt;here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Install node v19&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;I recommend &lt;a href=&#34;https://medium.com/@iam_vinojan/how-to-install-node-js-and-npm-using-node-version-manager-nvm-143165b16ce1&#34;&gt;installing nvm and using it to install node v19&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Install poppler&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;sudo apt-get install -y poppler-utils&lt;/code&gt; on Ubuntu, or &lt;code&gt;brew install poppler&lt;/code&gt; on Mac&lt;/p&gt; &#xA;&lt;h3&gt;Set up your API keys and endpoints in the &lt;code&gt;secret&lt;/code&gt; folder&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a new file &lt;code&gt;secret/openai_api_key&lt;/code&gt; and paste your &lt;a href=&#34;https://platform.openai.com/docs/api-reference/authentication&#34;&gt;OpenAI API key&lt;/a&gt; into it:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;echo &#34;your_openai_api_key_here&#34; &amp;gt; secret/openai_api_key&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Create a new file &lt;code&gt;secret/pinecone_api_key&lt;/code&gt; and paste your &lt;a href=&#34;https://docs.pinecone.io/docs/quickstart#2-get-and-verify-your-pinecone-api-key&#34;&gt;Pinecone API key&lt;/a&gt; into it:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;echo &#34;your_pinecone_api_key_here&#34; &amp;gt; secret/pinecone_api_key&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;When setting up your pinecone index, use a vector size of &lt;code&gt;1536&lt;/code&gt; and keep all the default settings the same.&lt;/p&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Create a new file &lt;code&gt;secret/pinecone_api_endpoint&lt;/code&gt; and paste your &lt;a href=&#34;https://app.pinecone.io/organizations/&#34;&gt;Pinecone API endpoint&lt;/a&gt; into it:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;echo &#34;https://example-50709b5.svc.asia-southeast1-gcp.pinecone.io&#34; &amp;gt; secret/pinecone_api_endpoint&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running the development environment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install javascript package dependencies:&lt;/p&gt; &lt;p&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the golang webserver (default port &lt;code&gt;:8100&lt;/code&gt;):&lt;/p&gt; &lt;p&gt;&lt;code&gt;npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In another terminal window, run webpack to compile the js code and create a bundle.js file:&lt;/p&gt; &lt;p&gt;&lt;code&gt;npm run dev&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Visit the local version of the site at &lt;a href=&#34;http://localhost:8100&#34;&gt;http://localhost:8100&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Screenshots:&lt;/h2&gt; &#xA;&lt;p&gt;In the example screenshots, I uploaded a couple of books by Plato and some letters by Alexander Hamilton, showcasing the ability of OP Vault to answer questions based on the uploaded content.&lt;/p&gt; &#xA;&lt;h3&gt;Uploading files&lt;/h3&gt; &#xA;&lt;img width=&#34;1483&#34; alt=&#34;Screen Shot 2023-04-17 at 6 16 40 PM&#34; src=&#34;https://user-images.githubusercontent.com/20898225/232645162-e89dc752-ad69-40d3-9eda-8c9075ddeeda.png&#34;&gt; &#xA;&lt;img width=&#34;1509&#34; alt=&#34;Screen Shot 2023-04-17 at 6 17 29 PM&#34; src=&#34;https://user-images.githubusercontent.com/20898225/232645171-b8eb56d5-8797-4970-b163-e17ed76b5b97.png&#34;&gt; &#xA;&lt;h3&gt;Asking questions&lt;/h3&gt; &#xA;&lt;img width=&#34;1498&#34; alt=&#34;Screen Shot 2023-04-17 at 6 20 25 PM&#34; src=&#34;https://user-images.githubusercontent.com/20898225/232645180-f41b3ebc-e050-4df5-bd47-b2819f480081.png&#34;&gt; &#xA;&lt;img width=&#34;1500&#34; alt=&#34;Screen Shot 2023-04-17 at 6 20 58 PM&#34; src=&#34;https://user-images.githubusercontent.com/20898225/232645183-e28bc0fa-3545-48f3-9374-29529c513fe2.png&#34;&gt; &#xA;&lt;img width=&#34;1498&#34; alt=&#34;Screen Shot 2023-04-17 at 6 23 00 PM&#34; src=&#34;https://user-images.githubusercontent.com/20898225/232645187-fff56d2b-f654-4c92-b061-4670734b2764.png&#34;&gt; &#xA;&lt;h2&gt;Under the hood&lt;/h2&gt; &#xA;&lt;p&gt;The golang server uses POST APIs to process incoming uploads and respond to questions:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/upload&lt;/code&gt; for uploading files&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/api/question&lt;/code&gt; for answering questions&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;All api endpoints are declared in the &lt;a href=&#34;https://github.com/pashpashpash/vault-ai/raw/master/vault-web-server/main.go#L79-L80&#34;&gt;vault-web-server/main.go&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;h3&gt;Uploading files and processing them into embeddings&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/pashpashpash/vault-ai/raw/master/vault-web-server/postapi/fileupload.go#L29&#34;&gt;vault-web-server/postapi/fileupload.go&lt;/a&gt; file contains the &lt;code&gt;UploadHandler&lt;/code&gt; logic for handling incoming uploads on the backend. The UploadHandler function in the postapi package is responsible for handling file uploads (with a maximum total upload size of 300 MB) and processing them into embeddings to store in Pinecone. It accepts PDF and plain text files, extracts text from them, and divides the content into chunks. Using OpenAI API, it obtains embeddings for each chunk and upserts (inserts or updates) the embeddings into Pinecone. The function returns a JSON response containing information about the uploaded files and their processing status.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Limit the size of the request body to MAX_TOTAL_UPLOAD_SIZE (300 MB).&lt;/li&gt; &#xA; &lt;li&gt;Parse the incoming multipart form data with a maximum allowed size of 300 MB.&lt;/li&gt; &#xA; &lt;li&gt;Initialize response data with fields for successful and failed file uploads.&lt;/li&gt; &#xA; &lt;li&gt;Iterate over the uploaded files, and for each file: a. Check if the file size is within the allowed limit (MAX_FILE_SIZE, 300 MB). b. Read the file into memory. c. If the file is a PDF, extract the text from it; otherwise, read the contents as plain text. d. Divide the file contents into chunks. e. Use OpenAI API to obtain embeddings for each chunk. f. Upsert (insert or update) the embeddings into Pinecone. g. Update the response data with information about successful and failed uploads.&lt;/li&gt; &#xA; &lt;li&gt;Return a JSON response containing information about the uploaded files and their processing status.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Storing embeddings into Pinecone db&lt;/h3&gt; &#xA;&lt;p&gt;After getting OpenAI embeddings for each chunk of an uploaded file, the server stores all of the embeddings, along with metadata associated for each embedding in Pinecone DB. The metadata for each embedding is created in the &lt;a href=&#34;https://github.com/pashpashpash/vault-ai/raw/master/vault-web-server/postapi/pinecone.go#L22&#34;&gt;upsertEmbeddingsToPinecone&lt;/a&gt; function, with the following keys and values:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;file_name&lt;/code&gt;: The name of the file from which the text chunk was extracted.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;start&lt;/code&gt;: The starting character position of the text chunk in the original file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;end&lt;/code&gt;: The ending character position of the text chunk in the original file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;title&lt;/code&gt;: The title of the chunk, which is also the file name in this case.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;text&lt;/code&gt;: The text of the chunk.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This metadata is useful for providing context to the embeddings and is used to display additional information about the matched embeddings when retrieving results from the Pinecone database.&lt;/p&gt; &#xA;&lt;h3&gt;Answering questions&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;QuestionHandler&lt;/code&gt; function in &lt;a href=&#34;https://github.com/pashpashpash/vault-ai/raw/master/vault-web-server/postapi/questions.go#L24&#34;&gt;vault-web-server/postapi/questions.go&lt;/a&gt; is responsible for handling all incoming questions. When a question is entered on the frontend and the user presses &#34;search&#34; (or enter), the server uses the OpenAI embeddings API once again to get an embedding for the question (a.k.a. query vector). This query vector is used to query Pinecone db to get the most relevant context for the question. Finally, a prompt is built by packing the most relevant context + the question in a prompt string that adheres to OpenAI token limits (the go tiktoken library is used to estimate token count).&lt;/p&gt; &#xA;&lt;h3&gt;Frontend info&lt;/h3&gt; &#xA;&lt;p&gt;The frontend is built using &lt;code&gt;React.js&lt;/code&gt; and &lt;code&gt;less&lt;/code&gt; for styling.&lt;/p&gt; &#xA;&lt;h3&gt;Generative question-answering with long-term memory&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;d like to read more about this topic, I recommend this post from the pinecone blog:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.pinecone.io/learn/openai-gen-qa/&#34;&gt;https://www.pinecone.io/learn/openai-gen-qa/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;I hope you enjoy it (:&lt;/p&gt; &#xA;&lt;h2&gt;Uploading larger files&lt;/h2&gt; &#xA;&lt;p&gt;I currently have the max individual file size set to 3MB. If you want to increase this limit, edit the &lt;code&gt;MAX_FILE_SIZE&lt;/code&gt; and &lt;code&gt;MAX_TOTAL_UPLOAD_SIZE&lt;/code&gt; constants in &lt;a href=&#34;https://github.com/pashpashpash/vault-ai/raw/master/vault-web-server/postapi/fileupload.go#L26-L27&#34;&gt;fileupload.go&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hardhackerlabs/themes</title>
    <updated>2023-04-21T01:38:12Z</updated>
    <id>tag:github.com,2023-04-21:/hardhackerlabs/themes</id>
    <link href="https://github.com/hardhackerlabs/themes" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🧑🏾‍🚀 One Theme to Rule Them All 🌈&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://podcasts.apple.com/au/podcast/%E7%A1%AC%E5%9C%B0%E9%AA%87%E5%AE%A2/id1678465783&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img width=&#34;180&#34; src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/logo/logo.png&#34; alt=&#34;HardHacker&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; HardHacker Themes &lt;/h1&gt; &#xA;&lt;p&gt;A visually comfortable dark theme that is suitable for prolonged use. It differs from the typical blueish dark themes and aims to express a unique style with a more futuristic color palette.&lt;/p&gt; &#xA;&lt;p&gt;The color inspiration comes from some cyberpunk-style art works. However, neon color schemes commonly seen in cyberpunk styles are not suitable for prolonged staring, thus the saturation of the colors has been reduced.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/preview/preview.png&#34; alt=&#34;preview&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features:&lt;/h2&gt; &#xA;&lt;h4&gt;🎉 Suitable for prolonged use&lt;/h4&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;❤️ Color-blind friendly&lt;/summary&gt; &#xA; &lt;p&gt; &lt;img width=&#34;920&#34; src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/foundamental/color_blind_safe.png&#34; alt=&#34;Color Blind&#34;&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;👀 Good readability&lt;/summary&gt; &#xA; &lt;p&gt; &lt;img width=&#34;920&#34; src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/foundamental/enough_contrast.png&#34; alt=&#34;Enough Contrast&#34;&gt; &lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h4&gt;🛸 Futuristic&lt;/h4&gt; &#xA;&lt;h4&gt;🚀 Continuously increasing support for editors and tools&lt;/h4&gt; &#xA;&lt;h2&gt;Color Palette:&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Palette&lt;/th&gt; &#xA;   &lt;th&gt;Hex&lt;/th&gt; &#xA;   &lt;th&gt;Preview&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Background&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#282433&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/background.png&#34; alt=&#34;background&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Foreground&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#eee9fc&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/foreground.png&#34; alt=&#34;foreground&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Selection&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#3f3951&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/selection.png&#34; alt=&#34;selection&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Comment&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#777383&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/comment.png&#34; alt=&#34;comment&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Red&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#e965a5&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/red.png&#34; alt=&#34;red&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Green&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#b1f2a7&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/green.png&#34; alt=&#34;green&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Yellow&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#ebde76&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/yellow.png&#34; alt=&#34;yellow&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Blue&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#b1baf4&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/blue.png&#34; alt=&#34;blue&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Purple&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#e192ef&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/purple.png&#34; alt=&#34;purple&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cyan&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#b3f4f3&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/cyan.png&#34; alt=&#34;cyan&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bright Black&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;#655980&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/colors/bright%20black.png&#34; alt=&#34;bright black&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Supports:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;VSCode&lt;/li&gt; &#xA; &lt;li&gt;vim&lt;/li&gt; &#xA; &lt;li&gt;iTerm2&lt;/li&gt; &#xA; &lt;li&gt;macOS Terminal&lt;/li&gt; &#xA; &lt;li&gt;windows Terminal&lt;/li&gt; &#xA; &lt;li&gt;LSD: a rewrite of GNU &lt;code&gt;ls&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;🚧 Building...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;How do I submit a new theme?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create a repository based on out &lt;a href=&#34;https://github.com/hardhackerlabs/theme-template&#34;&gt;template repo&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Build your new theme with our color palette.&lt;/li&gt; &#xA; &lt;li&gt;Submit an issue contains a link to your repository.&lt;/li&gt; &#xA; &lt;li&gt;We will move the repository to HardHackerLabs organization and give you rights.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Sponsers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Podcast HardHacker&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt; &lt;a href=&#34;https://podcasts.apple.com/au/podcast/%E7%A1%AC%E5%9C%B0%E9%AA%87%E5%AE%A2/id1678465783&#34; target=&#34;_blank&#34; rel=&#34;noopener noreferrer&#34;&gt; &lt;img width=&#34;620&#34; src=&#34;https://raw.githubusercontent.com/hardhackerlabs/themes/master/media/sponsers/hardhacker-podcast.png&#34; alt=&#34;HardHacker&#34;&gt; &lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>HeyPuter/kv.js</title>
    <updated>2023-04-21T01:38:12Z</updated>
    <id>tag:github.com,2023-04-21:/HeyPuter/kv.js</id>
    <link href="https://github.com/HeyPuter/kv.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advanced in-memory caching module for JavaScript. For when Redis or Memcached would be an overkill.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt;&lt;img width=&#34;300&#34; alt=&#34;KV.JS logo&#34; src=&#34;https://raw.githubusercontent.com/HeyPuter/kv.js/main/logo.png&#34;&gt;&lt;/h3&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Advanced in-memory caching module for JavaScript.&lt;/h3&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;For when you need caching but running Redis or Memcached would be an overkill.&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;KV.JS is a fast, in-memory data store written in pure JavaScript, heavily inspired by Redis and Memcached. It is capable of handling multiple data types, including strings, lists, sets, sorted sets, hashes, and geospatial indexes. Additionally, &lt;strong&gt;with more than 140 functions&lt;/strong&gt;, KV.JS supports a vast variety of operations, ranging from &lt;code&gt;SET&lt;/code&gt;, &lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;EXPIRE&lt;/code&gt;, &lt;code&gt;DEL&lt;/code&gt; to &lt;code&gt;INCR&lt;/code&gt;, &lt;code&gt;DECR&lt;/code&gt;, &lt;code&gt;LPUSH&lt;/code&gt;, &lt;code&gt;RPUSH&lt;/code&gt;, &lt;code&gt;SADD&lt;/code&gt;, &lt;code&gt;SREM&lt;/code&gt;, &lt;code&gt;HSET&lt;/code&gt;, &lt;code&gt;HGET&lt;/code&gt;, and many many more.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install @heyputer/kv.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const kvjs = require(&#39;@heyputer/kv.js&#39;);&#xA;&#xA;// Create a new kv.js instance&#xA;const kv = new kvjs();&#xA;&#xA;// Set a key&#xA;kv.set(&#39;foo&#39;, &#39;bar&#39;);&#xA;&#xA;// Get the key&#39;s value&#xA;kv.get(&#39;foo&#39;); // &#34;bar&#34;&#xA;&#xA;// Delete the key&#xA;kv.del(&#39;foo&#39;);&#xA;&#xA;// Set another key&#xA;kv.set(&#39;username&#39;, &#39;heyputer&#39;);&#xA;&#xA;// Automatically delete the key after 60 seconds&#xA;kv.expire(&#39;username&#39;, 60);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;More usage examples&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;decr&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Assuming the key &#39;counter&#39; has been set, decrement the value of the key by 1&#xA;kv.decr(&#39;counter&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;decrby&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Assuming the key &#39;counter&#39; has been set, decrement the value of the key by 5 (output: -5)&#xA;kv.decrby(&#39;counter&#39;, 5);&#xA;&#xA;// Assuming the key &#39;counter&#39; has been set, decrement the value of the key by -3 (output: 3)&#xA;kv.decrby(&#39;counter&#39;, -3);&#xA;&#xA;// Assuming the key &#39;counter&#39; has been set, decrement the value of the key by 10 (output: -7)&#xA;kv.decrby(&#39;counter&#39;, 10);&#xA;&#xA;// Assuming the key &#39;counter&#39; has been set, decrement the value of the key by 0 (output: 0)&#xA;kv.decrby(&#39;counter&#39;, 0);&#xA;&#xA;// Assuming the key &#39;counter&#39; has been set, decrement the value of the key by -7 (output: 4)&#xA;kv.decrby(&#39;counter&#39;, -7);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;del&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Delete specified key(s). If a key does not exist, it is ignored.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Delete a single key (&#34;key1&#34;), returns 1 if the key was deleted, 0 if it did not exist or has expired.&#xA;kv.del(&#34;key1&#34;);&#xA;&#xA;// Delete multiple keys (&#34;key2&#34; and &#34;key3&#34;), returns the number of keys deleted (0, 1, or 2) depending on which keys existed and were not expired.&#xA;kv.del(&#34;key2&#34;, &#34;key3&#34;);&#xA;&#xA;// Attempt to delete a non-existent key (&#34;nonExistentKey&#34;), returns 0 since the key does not exist.&#xA;kv.del(&#34;nonExistentKey&#34;);&#xA;&#xA;// Attempt to delete an expired key (&#34;expiredKey&#34;), returns 0 if the key has expired.&#xA;kv.del(&#34;expiredKey&#34;);&#xA;&#xA;// Delete multiple keys (&#34;key4&#34;, &#34;key5&#34;, &#34;key6&#34;), returns the number of keys deleted (0 to 3) depending on which keys existed and were not expired.&#xA;kv.del(&#34;key4&#34;, &#34;key5&#34;, &#34;key6&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;exists&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Check if one or more keys exist.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Check if a single key (&#34;key1&#34;) exists, returns 1 if the key exists and is not expired, 0 otherwise.&#xA;kv.exists(&#34;key1&#34;);&#xA;&#xA;// Check if multiple keys (&#34;key2&#34; and &#34;key3&#34;) exist, returns the number of existing keys (0, 1, or 2) that are not expired.&#xA;kv.exists(&#34;key2&#34;, &#34;key3&#34;);&#xA;&#xA;// Check if a non-existent key (&#34;nonExistentKey&#34;) exists, returns 0 since the key does not exist.&#xA;kv.exists(&#34;nonExistentKey&#34;);&#xA;&#xA;// Check if an expired key (&#34;expiredKey&#34;) exists, returns 0 if the key has expired.&#xA;kv.exists(&#34;expiredKey&#34;);&#xA;&#xA;// Check if multiple keys (&#34;key4&#34;, &#34;key5&#34;, &#34;key6&#34;) exist, returns the number of existing keys (0 to 3) that are not expired.&#xA;kv.exists(&#34;key4&#34;, &#34;key5&#34;, &#34;key6&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;expire&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set a key&#39;s time to live in seconds without any option&#xA;kv.expire(&#39;username&#39;, 60);&#xA;&#xA;// Set a key&#39;s time to live in seconds only if the key does not have an expiry time&#xA;kv.expire(&#39;username&#39;, 120, {NX: true});&#xA;&#xA;// Set a key&#39;s time to live in seconds only if the key already has an expiry time&#xA;kv.expire(&#39;username&#39;, 180, {XX: true});&#xA;&#xA;// Set a key&#39;s time to live in seconds only if the key&#39;s expiry time is greater than the specified time&#xA;kv.expire(&#39;username&#39;, 240, {GT: true});&#xA;&#xA;// Set a key&#39;s time to live in seconds only if the key&#39;s expiry time is less than the specified time&#xA;kv.expire(&#39;username&#39;, 300, {LT: true});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;expireat&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set the TTL for key &#34;user1&#34; to expire in 30 seconds.&#xA;kv.expireat(&#34;user1&#34;, Math.floor(Date.now() / 1000) + 30);&#xA;&#xA;// Set the TTL for key &#34;user2&#34; to expire at a specific UNIX timestamp (e.g. 1700000000), only if the key does not already have an expiry time.&#xA;kv.expireat(&#34;user2&#34;, 1700000000, {NX: true});&#xA;&#xA;// Set the TTL for key &#34;user3&#34; to expire in 45 seconds, only if the key already has an expiry time.&#xA;kv.expireat(&#34;user3&#34;, Math.floor(Date.now() / 1000) + 45, {XX: true});&#xA;&#xA;// Set the TTL for key &#34;user4&#34; to expire in 60 seconds, only if the new TTL is greater than the current TTL.&#xA;kv.expireat(&#34;user4&#34;, Math.floor(Date.now() / 1000) + 60, {GT: true});&#xA;&#xA;// Set the TTL for key &#34;user5&#34; to expire in 15 seconds, only if the new TTL is less than the current TTL.&#xA;kv.expireat(&#34;user5&#34;, Math.floor(Date.now() / 1000) + 15, {LT: true});&#xA;&#xA;// Set the TTL for key &#34;user6&#34; to expire at a specific UNIX timestamp (e.g. 1705000000), only if the key already have an expiry time.&#xA;kv.expireat(&#34;user6&#34;, 1705000000, {XX: true});&#xA;&#xA;// Set the TTL for key &#34;user7&#34; to expire in 90 seconds, only if the key does not already have an expiry time.&#xA;kv.expireat(&#34;user7&#34;, Math.floor(Date.now() / 1000) + 90, {NX: true});&#xA;&#xA;// Set the TTL for key &#34;user8&#34; to expire at a specific UNIX timestamp (e.g. 1710000000), only if the new TTL is greater than the current TTL.&#xA;kv.expireat(&#34;user8&#34;, 1710000000, {GT: true});&#xA;&#xA;// Set the TTL for key &#34;user9&#34; to expire in 120 seconds, only if the new TTL is less than the current TTL.&#xA;kv.expireat(&#34;user9&#34;, Math.floor(Date.now() / 1000) + 120, {LT: true});&#xA;&#xA;// Set the TTL for key &#34;user10&#34; to expire in 5 seconds.&#xA;kv.expireat(&#34;user10&#34;, Math.floor(Date.now() / 1000) + 5);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;get&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Get the value of a key.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Example 1: Get the value of an existing key&#xA;kv.get(&#39;username&#39;); // Returns the value associated with the key &#39;username&#39;&#xA;&#xA;// Example 2: Get the value of a non-existent key&#xA;kv.get(&#39;nonexistent&#39;); // Returns null&#xA;&#xA;// Example 3: Get the value of an expired key (assuming &#39;expiredKey&#39; was set with an expiration)&#xA;kv.get(&#39;expiredKey&#39;); // Returns null&#xA;&#xA;// Example 4: Get the value of a key after updating its value&#xA;kv.set(&#39;color&#39;, &#39;red&#39;); // Sets the key &#39;color&#39; to the value &#39;red&#39;&#xA;kv.get(&#39;color&#39;); // Returns &#39;red&#39;&#xA;&#xA;// Example 5: Get the value of a key after deleting it (assuming &#39;deletedKey&#39; was previously set)&#xA;kv.delete(&#39;deletedKey&#39;); // Deletes the key &#39;deletedKey&#39;&#xA;kv.get(&#39;deletedKey&#39;); // Returns null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;getset&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set initial values for key.&#xA;kv.set(&#34;username&#34;, &#34;John&#34;);&#xA;&#xA;// Replace the value of &#34;username&#34; with &#34;Alice&#34; and return the old value (&#34;John&#34;).&#xA;kv.getset(&#34;username&#34;, &#34;Alice&#34;); // Returns &#34;John&#34;&#xA;&#xA;// Replace the value of &#34;nonExistentKey&#34; with &#34;Bob&#34; and return the old value (null).&#xA;kv.getset(&#34;nonExistentKey&#34;, &#34;Bob&#34;); // Returns null&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;incr&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Increment the value of an existing key (&#34;key1&#34;) by 1, returns the new value of the key.&#xA;kv.incr(&#34;key1&#34;);&#xA;&#xA;// Increment the value of a non-existing key (&#34;nonExistentKey&#34;), returns 1 as the new value of the key (since it&#39;s initialized as 0 and incremented by 1).&#xA;kv.incr(&#34;nonExistentKey&#34;);&#xA;&#xA;// Increment the value of an expired key (&#34;expiredKey&#34;), if the key has expired, it will be treated as a new key, returns 1 as the new value of the key.&#xA;kv.incr(&#34;expiredKey&#34;);&#xA;&#xA;// Increment the value of an existing key (&#34;key2&#34;) with a non-numeric value, throws an error.&#xA;kv.incr(&#34;key2&#34;); // Assuming &#34;key2&#34; has a non-numeric value&#xA;&#xA;// Increment the value of an existing key (&#34;key3&#34;) with a numeric value, returns the incremented value of the key.&#xA;kv.incr(&#34;key3&#34;); // Assuming &#34;key3&#34; has a numeric value&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;incrby&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Increment the value of a key by 5 (assuming the key does not exist or its value is an integer)&#xA;kv.incrby(&#39;counter&#39;, 5);&#xA;&#xA;// Increment the value of a key by -3 (assuming the key does not exist or its value is an integer)&#xA;kv.incrby(&#39;counter&#39;, -3);&#xA;&#xA;// Increment the value of a key by 10 (assuming the key does not exist or its value is an integer)&#xA;kv.incrby(&#39;counter&#39;, 10);&#xA;&#xA;// Increment the value of a key by 0 (assuming the key does not exist or its value is an integer)&#xA;kv.incrby(&#39;counter&#39;, 0);&#xA;&#xA;// Increment the value of a key by -7 (assuming the key does not exist or its value is an integer)&#xA;kv.incrby(&#39;counter&#39;, -7);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;keys&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Find all keys matching the pattern &#39;user:*&#39; (assuming some keys matching the pattern exist)&#xA;kv.keys(&#39;user:*&#39;);&#xA;&#xA;// Find all keys matching the pattern &#39;product:*&#39; (assuming some keys matching the pattern exist)&#xA;kv.keys(&#39;product:*&#39;);&#xA;&#xA;// Find all keys matching the pattern &#39;*:email&#39; (assuming some keys matching the pattern exist)&#xA;kv.keys(&#39;*:email&#39;);&#xA;&#xA;// Find all keys matching the pattern &#39;username&#39; (assuming some keys matching the pattern exist)&#xA;kv.keys(&#39;username&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;mget&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Retrieve the values of key &#39;username&#39;&#xA;kv.mget(&#39;username&#39;);&#xA;&#xA;// Retrieve the values of keys &#39;username&#39; and &#39;email&#39; (assuming they exist)&#xA;kv.mget(&#39;username&#39;, &#39;email&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;mset&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set the values of keys &#39;username&#39; and &#39;email&#39; to &#39;johndoe&#39; and &#39;johndoe@example.com&#39;, respectively&#xA;kv.mset(&#39;username&#39;, &#39;johndoe&#39;, &#39;email&#39;, &#39;johndoe@example.com&#39;);&#xA;&#xA;// Set the values of keys &#39;counter&#39; and &#39;score&#39; to 0 and 100, respectively&#xA;kv.mset(&#39;counter&#39;, 0, &#39;score&#39;, 100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;persist&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Remove the expiration from the key &#34;key1&#34;.&#xA;kv.persist(&#34;key1&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;rename&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Rename the key &#39;username&#39; to &#39;email&#39; (assuming &#39;username&#39; exists)&#xA;kv.rename(&#39;username&#39;, &#39;email&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;sadd&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Add one or more members to a set stored at key.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a member to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;); // Output: true&#xA;&#xA;// add multiple members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;&#xA;// print the members of a set&#xA;kv.smembers(&#39;set1&#39;); // Output: [&#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;]&#xA;&#xA;// add a member to a set that already contains the member&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;); // Output: false&#xA;&#xA;// add a member to a non-existent set&#xA;kv.sadd(&#39;set2&#39;, &#39;member1&#39;); // Output: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;scard&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Returns the number of members of the set stored at key.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// print the number of members in a set&#xA;kv.scard(&#39;set1&#39;); // Output: 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;sdiff&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This method retrieves the members of a set that are present in the first set but not in any of the subsequent sets, and returns them as a new set.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// add a few members to a second set&#xA;kv.sadd(&#39;set2&#39;, &#39;member2&#39;, &#39;member3&#39;, &#39;member4&#39;); // Output: true&#xA;// print the members of the first set that are not in the second set&#xA;kv.sdiff(&#39;set1&#39;, &#39;set2&#39;); // Output: [&#39;member1&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;set&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Set the string value of a key with optional NX/XX/GET/EX/PX/EXAT/PXAT/KEEPTTL, GET, and expiration options.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set a basic key-value pair&#xA;kv.set(&#39;username&#39;, &#39;john_doe&#39;); // Output: true&#xA;&#xA;// Set a key-value pair only if the key does not already exist (NX option)&#xA;kv.set(&#39;username&#39;, &#39;jane_doe&#39;, {NX: true});&#xA;&#xA;// Set a key-value pair only if the key already exists (XX option)&#xA;kv.set(&#39;email&#39;, &#39;jane@example.com&#39;, {XX: true});&#xA;&#xA;// Set a key-value pair with an expiration time in seconds (EX option)&#xA;kv.set(&#39;session_token&#39;, &#39;abc123&#39;, {EX: 3600});&#xA;&#xA;// Get the existing value and set a new value for a key (GET option)&#xA;kv.set(&#39;username&#39;, &#39;mary_smith&#39;, {GET: true});&#xA;&#xA;// Set a key-value pair with an expiration time in milliseconds (PX option)&#xA;kv.set(&#39;temp_data&#39;, &#39;42&#39;, {PX: 1000});&#xA;&#xA;// Set a key-value pair with an expiration time at a specific Unix timestamp in seconds (EXAT option)&#xA;kv.set(&#39;event_data&#39;, &#39;event1&#39;, {EXAT: 1677649420});&#xA;&#xA;// Set a key-value pair with an expiration time at a specific Unix timestamp in milliseconds (PXAT option)&#xA;kv.set(&#39;event_data2&#39;, &#39;event2&#39;, {PXAT: 1677649420000});&#xA;&#xA;// Set a key-value pair and keep the original TTL if the key already exists (KEEPTTL option)&#xA;kv.set(&#39;username&#39;, &#39;alice_wonder&#39;, {KEEPTTL: true});&#xA;&#xA;// Set a key-value pair with multiple options (NX, EX, and GET options)&#xA;kv.set(&#39;new_user&#39;, &#39;carol_baker&#39;, {NX: true, EX: 7200, GET: true});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;sinter&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This method retrieves the members that are present in all the sets provided as arguments, and returns them as a new set representing the intersection of those sets.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// add a few members to a second set&#xA;kv.sadd(&#39;set2&#39;, &#39;member2&#39;, &#39;member3&#39;, &#39;member4&#39;); // Output: true&#xA;// print the members that are present in both sets&#xA;kv.sinter(&#39;set1&#39;, &#39;set2&#39;); // Output: [&#39;member2&#39;, &#39;member3&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;sismember&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This method determines if a given value is a member of a set.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// check if a member is present in a set&#xA;kv.sismember(&#39;set1&#39;, &#39;member1&#39;); // Output: true&#xA;// check if a member is not present in a set&#xA;kv.sismember(&#39;set1&#39;, &#39;member4&#39;); // Output: false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;smove&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This method moves a member from one set to another.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// add a few members to a second set&#xA;kv.sadd(&#39;set2&#39;, &#39;member4&#39;, &#39;member5&#39;, &#39;member6&#39;); // Output: true&#xA;// move a member from one set to another&#xA;kv.smove(&#39;set1&#39;, &#39;set2&#39;, &#39;member1&#39;); // Output: true&#xA;// print the members of the first set&#xA;kv.smembers(&#39;set1&#39;); // Output: [&#39;member2&#39;, &#39;member3&#39;]&#xA;// print the members of the second set&#xA;kv.smembers(&#39;set2&#39;); // Output: [&#39;member1&#39;, &#39;member4&#39;, &#39;member5&#39;, &#39;member6&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Sort the elements in a list, set or sorted set.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// sort the members of a set&#xA;kv.sort(&#39;set1&#39;); // Output: [&#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;]&#xA;&#xA;// add a few members to a sorted set&#xA;kv.zadd(&#39;zset1&#39;, 1, &#39;member1&#39;, 2, &#39;member2&#39;, 3, &#39;member3&#39;); // Output: true&#xA;// sort the members of a sorted set&#xA;kv.sort(&#39;zset1&#39;); // Output: [&#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;]&#xA;&#xA;// add a few members to a list&#xA;kv.rpush(&#39;list1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// sort the members of a list&#xA;kv.sort(&#39;list1&#39;); // Output: [&#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;smembers&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;This method retrieves all the members of the set value stored at key.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;); // Output: true&#xA;// print the members of a set&#xA;kv.smembers(&#39;set1&#39;); // Output: [&#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;spop&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;p&gt;Removes and returns one or multiple random members from a set.&lt;/p&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// add a few members to a set&#xA;kv.sadd(&#39;set1&#39;, &#39;member1&#39;, &#39;member2&#39;, &#39;member3&#39;, &#39;,member4&#39;, &#39;member5&#39;); // Output: true&#xA;// remove and return a random member from a set&#xA;kv.spop(&#39;set1&#39;); // Output: one of the members&#xA;// remove and return a random member from a set&#xA;kv.spop(&#39;set1&#39;, 2); // Output: two of the remaining members&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;ttl&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Set key &#39;username&#39; to &#39;heyputer&#39; and set its expiration to 60 seconds&#xA;kv.set(&#39;username&#39;, &#39;heyputer&#39;);&#xA;kv.expire(&#39;username&#39;, 60);&#xA;&#xA;// Check the time-to-live of key &#39;username&#39;&#xA;kv.ttl(&#39;username&#39;); // Returns 60&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zadd&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add a new member &#39;Alice&#39; with a score of 10 to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;&#xA;// Add a new member &#39;Bob&#39; with a score of 25 to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;&#xA;// Since &#39;Bob&#39; already exists in the sorted set &#39;students&#39;, his score is updated to 26.&#xA;kv.zadd(&#39;students&#39;, 26, &#39;Bob&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zcard&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add two members to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;&#xA;// Get the number of members in the sorted set &#39;students&#39;.&#xA;kv.zcard(&#39;students&#39;); // Output: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zcount&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add three members to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;kv.zadd(&#39;students&#39;, 30, &#39;Carol&#39;);&#xA;&#xA;// Get the number of members in the sorted set &#39;students&#39; with a score between 10 and 25.&#xA;kv.zcount(&#39;students&#39;, 10, 25); // Output: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zincrby&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add two members to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;&#xA;// Increment the score of member &#39;Alice&#39; by 5.&#xA;kv.zincrby(&#39;students&#39;, 5, &#39;Alice&#39;);&#xA;&#xA;// Get the score of member &#39;Alice&#39;.&#xA;kv.zscore(&#39;students&#39;, &#39;Alice&#39;); // Output: 15&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zrange&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add three members to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;kv.zadd(&#39;students&#39;, 30, &#39;Carol&#39;);&#xA;&#xA;// Get the members of the sorted set &#39;students&#39; with a score between 10 and 25.&#xA;kv.zrange(&#39;students&#39;, 10, 25); // Output: [&#39;Alice&#39;, &#39;Bob&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zrangebyscore&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add three members to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;kv.zadd(&#39;students&#39;, 30, &#39;Carol&#39;);&#xA;&#xA;// Get the members of the sorted set &#39;students&#39; with a score between 10 and 25.&#xA;kv.zrangebyscore(&#39;students&#39;, 10, 25); // Output: [&#39;Alice&#39;, &#39;Bob&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zrank&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add three members to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;kv.zadd(&#39;students&#39;, 30, &#39;Carol&#39;);&#xA;&#xA;// Get the rank of member &#39;Bob&#39; in the sorted set &#39;students&#39;.&#xA;kv.zrank(&#39;students&#39;, &#39;Bob&#39;); // Output: 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;&lt;strong&gt;&lt;code&gt;zrem&lt;/code&gt;&lt;/strong&gt;&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add three members to the sorted set &#39;students&#39;.&#xA;kv.zadd(&#39;students&#39;, 10, &#39;Alice&#39;);&#xA;kv.zadd(&#39;students&#39;, 25, &#39;Bob&#39;);&#xA;kv.zadd(&#39;students&#39;, 30, &#39;Carol&#39;);&#xA;&#xA;// Remove member &#39;Bob&#39; from the sorted set &#39;students&#39;.&#xA;kv.zrem(&#39;students&#39;, &#39;Bob&#39;);&#xA;&#xA;// Get the members of the sorted set &#39;students&#39;.&#xA;kv.zrange(&#39;students&#39;, 0, -1); // Output: [ [ &#39;Alice&#39;, 10 ], [ &#39;Carol&#39;, 30 ] ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Distributed under the MIT License. See &lt;code&gt;LICENSE.txt&lt;/code&gt; for more information.&lt;/p&gt;</summary>
  </entry>
</feed>