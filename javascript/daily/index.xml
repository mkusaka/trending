<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-01-28T01:32:16Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IQEngine/WebFFT</title>
    <updated>2025-01-28T01:32:16Z</updated>
    <id>tag:github.com,2025-01-28:/IQEngine/WebFFT</id>
    <link href="https://github.com/IQEngine/WebFFT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Fastest Fourier Transform on the Web!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;WebFFT&lt;/h1&gt; &#xA;&lt;p&gt;The Fastest Fourier Transform on the Web!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webfft.com/&#34;&gt;Try it out&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://webfft.com/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;We welcome feedback via GitHub Issues and PRs!&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;WebFFT is a metalibrary containing many FFT libraries, both javascript and webassembly based. We&#39;ll refer to these as sub-libraries.&lt;/p&gt; &#xA;&lt;p&gt;There is a default sub-library that is used, but if you run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import webfft from &#34;webfft&#34;;&#xA;const fft = new webfft(1024);&#xA;fft.profile(); // optional arg sets number of seconds spent profiling&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;it will benchmark them all and use the best one for future calls.&lt;/p&gt; &#xA;&lt;p&gt;As part of importing the library we will run a check to see if wasm is even supported, so the profiler and default can know which pool to pull from.&lt;/p&gt; &#xA;&lt;h3&gt;Basic Usage&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const webfft = require(&#39;webfft&#39;);&#xA;&#xA;// Instantiate&#xA;const fftsize = 1024; // must be power of 2&#xA;const fft = new webfft(fftsize);&#xA;&#xA;// Profile&#xA;profileResults = fft.profile(); // results object can be used to make visualizations of the benchmarking results&#xA;&#xA;// Create Input&#xA;const input = new Float32Array(2048); // interleaved complex array (IQIQIQIQ...), so it&#39;s twice the size&#xA;input.fill(0);&#xA;&#xA;// Run FFT&#xA;const out = fft.fft(input); // out will be a Float32Array of size 2048&#xA;// or&#xA;const out = fft.fft(input, &#39;kissWasm&#39;);&#xA;&#xA;fft.dispose(); // release Wasm memory&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2D FFTs&lt;/h3&gt; &#xA;&lt;p&gt;WebFFT also supports 2D FFTs, using an array of arrays. The inner arrays should be length 2*size and the outter array length should be a power of 2 but does not need to match the inner.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import webfft from &#34;webfft&#34;;&#xA;&#xA;const fftsize = 1024;&#xA;const outterSize = 128;&#xA;const fft = new webfft(fftsize);&#xA;let inputArr = [];&#xA;for (let j = 0; j &amp;lt; outterSize; j++) {&#xA;  const subArray = new Float32Array(fftsize * 2);&#xA;  for (let i = 0; i &amp;lt; fftsize * 2; i++) {&#xA;    subArray[i] = i * j * 1.12312312; // Arbitrary&#xA;  }&#xA;  inputArr.push(subArray); // add inner array&#xA;}&#xA;const out = fft.fft2d(inputArr);&#xA;&#xA;fft.dispose(); // cleanup wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Notes&lt;/h3&gt; &#xA;&lt;p&gt;Deploy site using &lt;code&gt;cd site &amp;amp;&amp;amp; npm run deploy&lt;/code&gt;, and make sure in github pages settings it uses &#34;deploy from a branch&#34; and gh-pages is selected as the branch, because npm run deploy runs the gh-pages command which publishes the site to gh-pages branch by default.&lt;/p&gt; &#xA;&lt;p&gt;Use fftr() for real-valued input, the output will still be complex but only the positive frequencies will be returned.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to pass fft/fftr/fft2d typed arrays, they can be regular javascript arrays.&lt;/p&gt; &#xA;&lt;p&gt;Run unit tests with &lt;code&gt;npm run test&lt;/code&gt;&lt;/p&gt;</summary>
  </entry>
</feed>