<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-24T01:35:46Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>typicode/lowdb</title>
    <updated>2022-10-24T01:35:46Z</updated>
    <id>tag:github.com,2022-10-24:/typicode/lowdb</id>
    <link href="https://github.com/typicode/lowdb" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple to use local JSON database. Use native JavaScript API to query. Written in TypeScript. (supports Node, Electron and the browser)&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;lowdb &lt;a href=&#34;https://www.npmjs.org/package/lowdb&#34;&gt;&lt;img src=&#34;http://img.shields.io/npm/dm/lowdb.svg?style=flat&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/typicode/lowdb/actions/workflows/node.js.yml&#34;&gt;&lt;img src=&#34;https://github.com/typicode/lowdb/actions/workflows/node.js.yml/badge.svg?sanitize=true&#34; alt=&#34;Node.js CI&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Simple to use local JSON database. Use native JavaScript API to query. Written in TypeScript. ü¶â&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Edit db.json content using native JS API&#xA;db.data&#xA;  .posts&#xA;  .push({ id: 1, title: &#39;lowdb is awesome&#39; })&#xA;&#xA;// Save to file&#xA;db.write()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// db.json&#xA;{&#xA;  &#34;posts&#34;: [&#xA;    { &#34;id&#34;: 1, &#34;title&#34;: &#34;lowdb is awesome&#34; }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you like lowdb, see also &lt;a href=&#34;https://github.com/typicode/xv&#34;&gt;xv&lt;/a&gt; (test runner) and &lt;a href=&#34;https://github.com/typicode/steno&#34;&gt;steno&lt;/a&gt; (fast file writer).&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://mockend.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://jsonplaceholder.typicode.com/mockend.svg?sanitize=true&#34; height=&#34;70px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sponsors/typicode&#34;&gt;Become a sponsor and have your company logo here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please help me build OSS üëâ &lt;a href=&#34;https://github.com/sponsors/typicode&#34;&gt;GitHub Sponsors&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Lightweight&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Minimalist&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TypeScript&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;plain JS&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Atomic write&lt;/li&gt; &#xA; &lt;li&gt;Hackable: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Change storage, file format (JSON, YAML, ...) or add encryption via &lt;a href=&#34;https://raw.githubusercontent.com/typicode/lowdb/main/#adapters&#34;&gt;adapters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Add lodash, ramda, ... for super powers!&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install lowdb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Lowdb is a pure ESM package. If you&#39;re having trouble importing it in your project, please &lt;a href=&#34;https://gist.github.com/sindresorhus/a39789f98801d908bbc7ff3ecc99d99c&#34;&gt;read this&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { join, dirname } from &#39;node:path&#39;&#xA;import { fileURLToPath } from &#39;node:url&#39;&#xA;&#xA;import { Low } from &#39;lowdb&#39;&#xA;import { JSONFile } from &#39;lowdb/node&#39;&#xA;&#xA;// File path&#xA;const __dirname = dirname(fileURLToPath(import.meta.url));&#xA;const file = join(__dirname, &#39;db.json&#39;)&#xA;&#xA;// Configure lowdb to write to JSONFile&#xA;const adapter = new JSONFile(file)&#xA;const db = new Low(adapter)&#xA;&#xA;// Read data from JSON file, this will set db.data content&#xA;await db.read()&#xA;&#xA;// If db.json doesn&#39;t exist, db.data will be null&#xA;// Use the code below to set default data&#xA;// db.data = db.data || { posts: [] } // For Node &amp;lt; v15.x&#xA;db.data ||= { posts: [] }             // For Node &amp;gt;= 15.x&#xA;&#xA;// Create and query items using native JS API&#xA;db.data.posts.push(&#39;hello world&#39;)&#xA;const firstPost = db.data.posts[0]&#xA;&#xA;// Alternatively, you can also use this syntax if you prefer&#xA;const { posts } = db.data&#xA;posts.push(&#39;hello world&#39;)&#xA;&#xA;// Finally write db.data content to file&#xA;await db.write()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// db.json&#xA;{&#xA;  &#34;posts&#34;: [ &#34;hello world&#34; ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;TypeScript&lt;/h3&gt; &#xA;&lt;p&gt;You can use TypeScript to check your data types.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;type Data = {&#xA;  words: string[]&#xA;}&#xA;&#xA;const adapter = new JSONFile&amp;lt;Data&amp;gt;(&#39;db.json&#39;)&#xA;const db = new Low(adapter)&#xA;&#xA;db.data&#xA;  .words&#xA;  .push(&#39;foo&#39;) // ‚úÖ Success&#xA;&#xA;db.data&#xA;  .words&#xA;  .push(1) // ‚ùå TypeScript error&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Lodash&lt;/h3&gt; &#xA;&lt;p&gt;You can also add lodash or other utility libraries to improve lowdb.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ts&#34;&gt;import lodash from &#39;lodash&#39;&#xA;&#xA;type Post = {&#xA;  id: number;&#xA;  title: string;&#xA;}&#xA;&#xA;type Data = {&#xA;  posts: Post[]&#xA;}&#xA;&#xA;// Extend Low class with a new `chain` field&#xA;class LowWithLodash&amp;lt;T&amp;gt; extends Low&amp;lt;T&amp;gt; {&#xA;  chain: lodash.ExpChain&amp;lt;this[&#39;data&#39;]&amp;gt; = lodash.chain(this).get(&#39;data&#39;)&#xA;}&#xA;&#xA;const adapter = new JSONFile&amp;lt;Data&amp;gt;(&#39;db.json&#39;)&#xA;const db = new LowWithLodash(adapter)&#xA;await db.read()&#xA;&#xA;// Instead of db.data use db.chain to access lodash API&#xA;const post = db.chain&#xA;  .get(&#39;posts&#39;)&#xA;  .find({ id: 1 })&#xA;  .value() // Important: value() must be called to execute chain&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI, Server and Browser usage&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/typicode/lowdb/main/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;h3&gt;Classes&lt;/h3&gt; &#xA;&lt;p&gt;Lowdb has two classes (for asynchronous and synchronous adapters).&lt;/p&gt; &#xA;&lt;h4&gt;&lt;code&gt;new Low(adapter)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Low } from &#39;lowdb&#39;&#xA;import { JSONFile } from &#39;lowdb/node&#39;&#xA;&#xA;const db = new Low(new JSONFile(&#39;file.json&#39;))&#xA;await db.read()&#xA;await db.write()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;new LowSync(adapterSync)&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { LowSync } from &#39;lowdb&#39;&#xA;import { JSONFileSync } from &#39;lowdb/node&#39;&#xA;&#xA;const db = new LowSync(new JSONFileSync(&#39;file.json&#39;))&#xA;db.read()&#xA;db.write()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Methods&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;db.read()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Calls &lt;code&gt;adapter.read()&lt;/code&gt; and sets &lt;code&gt;db.data&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;JSONFile&lt;/code&gt; and &lt;code&gt;JSONFileSync&lt;/code&gt; adapters will set &lt;code&gt;db.data&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt; if file doesn&#39;t exist.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;db.data // === null&#xA;db.read()&#xA;db.data // !== null&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;db.write()&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Calls &lt;code&gt;adapter.write(db.data)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;db.data = { posts: [] }&#xA;db.write() // file.json will be { posts: [] }&#xA;db.data = {}&#xA;db.write() // file.json will be {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Properties&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;db.data&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Holds your db content. If you&#39;re using the adapters coming with lowdb, it can be any type supported by &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/JSON/stringify&#34;&gt;&lt;code&gt;JSON.stringify&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;db.data = &#39;string&#39;&#xA;db.data = [1, 2, 3]&#xA;db.data = { key: &#39;value&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adapters&lt;/h2&gt; &#xA;&lt;h3&gt;Lowdb adapters&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;JSONFile&lt;/code&gt; &lt;code&gt;JSONFileSync&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Adapters for reading and writing JSON files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { JSONFile, JSONFileSync } from &#39;lowdb/node&#39;&#xA;&#xA;new Low(new JSONFile(filename))&#xA;new LowSync(new JSONFileSync(filename))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;Memory&lt;/code&gt; &lt;code&gt;MemorySync&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In-memory adapters. Useful for speeding up unit tests. See &lt;a href=&#34;https://raw.githubusercontent.com/typicode/lowdb/main/examples&#34;&gt;&lt;code&gt;examples/&lt;/code&gt;&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Memory, MemorySync } from &#39;lowdb&#39;&#xA;&#xA;new Low(new Memory())&#xA;new LowSync(new MemorySync())&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;LocalStorage&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Synchronous adapter for &lt;code&gt;window.localStorage&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { LocalStorage } from &#39;lowdb/browser&#39;&#xA;&#xA;new LowSync(new LocalStorage(name))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;code&gt;TextFile&lt;/code&gt; &lt;code&gt;TextFileSync&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Adapters for reading and writing text. Useful for creating custom adapters.&lt;/p&gt; &#xA;&lt;h3&gt;Third-party adapters&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;ve published an adapter for lowdb, feel free to create a PR to add it here.&lt;/p&gt; &#xA;&lt;h3&gt;Writing your own adapter&lt;/h3&gt; &#xA;&lt;p&gt;You may want to create an adapter to write &lt;code&gt;db.data&lt;/code&gt; to YAML, XML, encrypt data, a remote storage, ...&lt;/p&gt; &#xA;&lt;p&gt;An adapter is a simple class that just needs to expose two methods:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;class AsyncAdapter {&#xA;  read() { /* ... */ } // should return Promise&amp;lt;data&amp;gt;&#xA;  write(data) { /* ... */ } // should return Promise&amp;lt;void&amp;gt;&#xA;}&#xA;&#xA;class SyncAdapter {&#xA;  read() { /* ... */ } // should return data&#xA;  write(data) { /* ... */ } // should return nothing&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For example, let&#39;s say you have some async storage and want to create an adapter for it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { api } from &#39;./AsyncStorage&#39;&#xA;&#xA;class CustomAsyncAdapter {&#xA;  // Optional: your adapter can take arguments&#xA;  constructor(args) {&#xA;    // ...&#xA;  }&#xA;&#xA;  async read() {&#xA;    const data = await api.read()&#xA;    return data&#xA;  }&#xA;&#xA;  async write(data) {&#xA;    await api.write(data)&#xA;  }&#xA;}&#xA;&#xA;const adapter = new CustomAsyncAdapter()&#xA;const db = new Low(adapter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/typicode/lowdb/main/src/adapters&#34;&gt;&lt;code&gt;src/adapters/&lt;/code&gt;&lt;/a&gt; for more examples.&lt;/p&gt; &#xA;&lt;h4&gt;Custom serialization&lt;/h4&gt; &#xA;&lt;p&gt;To create an adapter for another format than JSON, you can use &lt;code&gt;TextFile&lt;/code&gt; or &lt;code&gt;TextFileSync&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { Adapter, Low } from &#39;lowdb&#39;&#xA;import { TextFile } from &#39;lowdb/node&#39;&#xA;import YAML from &#39;yaml&#39;&#xA;&#xA;class YAMLFile {&#xA;  constructor(filename) {&#xA;    this.adapter = new TextFile(filename)&#xA;  }&#xA;&#xA;  async read() {&#xA;    const data = await this.adapter.read()&#xA;    if (data === null) {&#xA;      return null&#xA;    } else {&#xA;      return YAML.parse(data)&#xA;    }&#xA;  }&#xA;&#xA;  write(obj) {&#xA;    return this.adapter.write(YAML.stringify(obj))&#xA;  }&#xA;}&#xA;&#xA;const adapter = new YAMLFile(&#39;file.yaml&#39;)&#xA;const db = new Low(adapter)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Limits&lt;/h2&gt; &#xA;&lt;p&gt;Lowdb doesn&#39;t support Node&#39;s cluster module.&lt;/p&gt; &#xA;&lt;p&gt;If you have large JavaScript objects (&lt;code&gt;~10-100MB&lt;/code&gt;) you may hit some performance issues. This is because whenever you call &lt;code&gt;db.write&lt;/code&gt;, the whole &lt;code&gt;db.data&lt;/code&gt; is serialized using &lt;code&gt;JSON.stringify&lt;/code&gt; and written to storage.&lt;/p&gt; &#xA;&lt;p&gt;Depending on your use case, this can be fine or not. It can be mitigated by doing batch operations and calling &lt;code&gt;db.write&lt;/code&gt; only when you need it.&lt;/p&gt; &#xA;&lt;p&gt;If you plan to scale, it&#39;s highly recommended to use databases like PostgreSQL or MongoDB instead.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Matt-Fontes/SendScriptWhatsApp</title>
    <updated>2022-10-24T01:35:46Z</updated>
    <id>tag:github.com,2022-10-24:/Matt-Fontes/SendScriptWhatsApp</id>
    <link href="https://github.com/Matt-Fontes/SendScriptWhatsApp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Script para enviar o Roteiro do filme Shrek, linha por linha, no WhatsApp&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SendScriptWhatsApp&lt;/h1&gt; &#xA;&lt;p&gt;C√≥digo para enviar o Script inteiro de Shrek ou Bee Movie para seus amigos ou grupos do WhatsApp&lt;/p&gt; &#xA;&lt;h2&gt;Utiliza√ß√£o&lt;/h2&gt; &#xA;&lt;p&gt;Abra &lt;a href=&#34;https://github.com/Matt-Fontes/SendScriptWhatsApp/raw/main/shrekSendScript.js&#34;&gt;shrekSendScript.js&lt;/a&gt; Ou Abra &lt;a href=&#34;https://github.com/Matt-Fontes/SendScriptWhatsApp/raw/main/beeMovieSendScript.js&#34;&gt;beeMovieSendScript.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copie todo o conte√∫do (clique em raw -&amp;gt; ctrl+a -&amp;gt; ctrl+c)&lt;/p&gt; &#xA;&lt;p&gt;No WhatsApp Web abra o console do Browser&lt;/p&gt; &#xA;&lt;p&gt;Cole o c√≥digo no console e aperte Enter&lt;/p&gt; &#xA;&lt;p&gt;Pronto&lt;/p&gt;</summary>
  </entry>
</feed>