<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-26T01:38:06Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mholt/PapaParse</title>
    <updated>2023-03-26T01:38:06Z</updated>
    <id>tag:github.com,2023-03-26:/mholt/PapaParse</id>
    <link href="https://github.com/mholt/PapaParse" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast and powerful CSV (delimited text) parser that gracefully handles large files and malformed input&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Parse CSV with JavaScript&lt;/h1&gt; &#xA;&lt;p&gt;Papa Parse is the fastest in-browser CSV (or delimited text) parser for JavaScript. It is reliable and correct according to &lt;a href=&#34;https://tools.ietf.org/html/rfc4180&#34;&gt;RFC 4180&lt;/a&gt;, and it comes with these features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Parse CSV files directly (local or over the network)&lt;/li&gt; &#xA; &lt;li&gt;Fast mode&lt;/li&gt; &#xA; &lt;li&gt;Stream large files (even via HTTP)&lt;/li&gt; &#xA; &lt;li&gt;Reverse parsing (converts JSON to CSV)&lt;/li&gt; &#xA; &lt;li&gt;Auto-detect delimiter&lt;/li&gt; &#xA; &lt;li&gt;Worker threads to keep your web page reactive&lt;/li&gt; &#xA; &lt;li&gt;Header row support&lt;/li&gt; &#xA; &lt;li&gt;Pause, resume, abort&lt;/li&gt; &#xA; &lt;li&gt;Can convert numbers and booleans to their types&lt;/li&gt; &#xA; &lt;li&gt;Optional jQuery integration to get files from &lt;code&gt;&amp;lt;input type=&#34;file&#34;&amp;gt;&lt;/code&gt; elements&lt;/li&gt; &#xA; &lt;li&gt;One of the only parsers that correctly handles line-breaks and quotations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Papa Parse has &lt;strong&gt;no dependencies&lt;/strong&gt; - not even jQuery.&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;papaparse is available on &lt;a href=&#34;https://www.npmjs.com/package/papaparse&#34;&gt;npm&lt;/a&gt;. It can be installed with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install papaparse&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t want to use npm, &lt;a href=&#34;https://unpkg.com/papaparse@latest/papaparse.min.js&#34;&gt;papaparse.min.js&lt;/a&gt; can be downloaded to your project source.&lt;/p&gt; &#xA;&lt;h2&gt;Homepage &amp;amp; Demo&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://papaparse.com&#34;&gt;Homepage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://papaparse.com/demo&#34;&gt;Demo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn how to use Papa Parse:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://papaparse.com/docs&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The website is hosted on &lt;a href=&#34;https://pages.github.com/&#34;&gt;Github Pages&lt;/a&gt;. Its content is also included in the docs folder of this repository. If you want to contribute on it just clone the master of this repository and open a pull request.&lt;/p&gt; &#xA;&lt;h2&gt;Papa Parse for Node&lt;/h2&gt; &#xA;&lt;p&gt;Papa Parse can parse a &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_streams&#34;&gt;Readable Stream&lt;/a&gt; instead of a &lt;a href=&#34;https://www.w3.org/TR/FileAPI/&#34;&gt;File&lt;/a&gt; when used in Node.js environments (in addition to plain strings). In this mode, &lt;code&gt;encoding&lt;/code&gt; must, if specified, be a Node-supported character encoding. The &lt;code&gt;Papa.LocalChunkSize&lt;/code&gt;, &lt;code&gt;Papa.RemoteChunkSize&lt;/code&gt; , &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;withCredentials&lt;/code&gt; and &lt;code&gt;worker&lt;/code&gt; config options are unavailable.&lt;/p&gt; &#xA;&lt;p&gt;Papa Parse can also parse in a node streaming style which makes &lt;code&gt;.pipe&lt;/code&gt; available. Simply pipe the &lt;a href=&#34;https://nodejs.org/api/stream.html#stream_readable_streams&#34;&gt;Readable Stream&lt;/a&gt; to the stream returned from &lt;code&gt;Papa.parse(Papa.NODE_STREAM_INPUT, options)&lt;/code&gt;. The &lt;code&gt;Papa.LocalChunkSize&lt;/code&gt;, &lt;code&gt;Papa.RemoteChunkSize&lt;/code&gt; , &lt;code&gt;download&lt;/code&gt;, &lt;code&gt;withCredentials&lt;/code&gt;, &lt;code&gt;worker&lt;/code&gt;, &lt;code&gt;step&lt;/code&gt;, and &lt;code&gt;complete&lt;/code&gt; config options are unavailable. To register a callback with the stream to process data, use the &lt;code&gt;data&lt;/code&gt; event like so: &lt;code&gt;stream.on(&#39;data&#39;, callback)&lt;/code&gt; and to signal the end of stream, use the &#39;end&#39; event like so: &lt;code&gt;stream.on(&#39;end&#39;, callback)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Get Started&lt;/h2&gt; &#xA;&lt;p&gt;For usage instructions, see the &lt;a href=&#34;http://papaparse.com&#34;&gt;homepage&lt;/a&gt; and, for more detail, the &lt;a href=&#34;http://papaparse.com/docs&#34;&gt;documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;p&gt;Papa Parse is under test. Download this repository, run &lt;code&gt;npm install&lt;/code&gt;, then &lt;code&gt;npm test&lt;/code&gt; to run the tests.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;To discuss a new feature or ask a question, open an issue. To fix a bug, submit a pull request to be credited with the &lt;a href=&#34;https://github.com/mholt/PapaParse/graphs/contributors&#34;&gt;contributors&lt;/a&gt;! Remember, a pull request, &lt;em&gt;with test&lt;/em&gt;, is best. You may also discuss on Twitter with &lt;a href=&#34;https://twitter.com/search?q=%23PapaParse&amp;amp;src=typd&amp;amp;f=realtime&#34;&gt;#PapaParse&lt;/a&gt; or directly to me, &lt;a href=&#34;https://twitter.com/mholt6&#34;&gt;@mholt6&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you contribute a patch, ensure the tests suite is running correctly. We run continuous integration on each pull request and will not accept a patch that breaks the tests.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ruanyf/es6tutorial</title>
    <updated>2023-03-26T01:38:06Z</updated>
    <id>tag:github.com,2023-03-26:/ruanyf/es6tutorial</id>
    <link href="https://github.com/ruanyf/es6tutorial" rel="alternate"></link>
    <summary type="html">&lt;p&gt;《ECMAScript 6入门》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新增的语法特性。&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;ES6 入门教程&lt;/h1&gt; &#xA;&lt;p&gt;官方镜像：&lt;a href=&#34;https://wangdoc.com/es6/&#34;&gt;网道（WangDoc.com）&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;《ECMAScript 6 入门教程》是一本开源的 JavaScript 语言教程，全面介绍 ECMAScript 6 新引入的语法特性。&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ruanyf/es6tutorial/gh-pages/images/cover-3rd.jpg&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ruanyf/es6tutorial/gh-pages/images/cover_thumbnail_3rd.jpg&#34; alt=&#34;cover&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;本书覆盖 ES6 与上一个版本 ES5 的所有不同之处，对涉及的语法知识给予详细介绍，并给出大量简洁易懂的示例代码。&lt;/p&gt; &#xA;&lt;p&gt;本书为中级难度，适合已经掌握 ES5 的读者，用来了解这门语言的最新发展；也可当作参考手册，查寻新增的语法点。如果你是 JavaScript 语言的初学者，建议先学完&lt;a href=&#34;https://wangdoc.com/javascript/&#34;&gt;《JavaScript 语言入门教程》&lt;/a&gt;，再来看本书。&lt;/p&gt; &#xA;&lt;p&gt;全书已由电子工业出版社出版，2017年9月推出了第三版，书名为《ES6 标准入门》。纸版是基于网站内容排版印刷的。&lt;/p&gt; &#xA;&lt;p&gt;感谢张春雨编辑支持我将全书开源的做法。如果您认可这本书，建议购买纸版。这样可以使出版社不因出版开源书籍而亏钱，进而鼓励更多的作者开源自己的书籍。下面是第三版的购买地址。&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://s.taobao.com/search?q=ES6%E6%A0%87%E5%87%86%E5%85%A5%E9%97%A8+%E7%AC%AC3%E7%89%88&#34;&gt;淘宝&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://search.jd.com/Search?keyword=ES6%E6%A0%87%E5%87%86%E5%85%A5%E9%97%A8%20%E7%AC%AC3%E7%89%88&amp;amp;enc=utf-8&amp;amp;wq=ES6%E6%A0%87%E5%87%86%E5%85%A5%E9%97%A8%20%E7%AC%AC3%E7%89%88&#34;&gt;京东&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://product.dangdang.com/25156888.html&#34;&gt;当当&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.amazon.cn/ES6%E6%A0%87%E5%87%86%E5%85%A5%E9%97%A8-%E9%98%AE%E4%B8%80%E5%B3%B0/dp/B0755547ZZ&#34;&gt;亚马逊&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://product.china-pub.com/6504650&#34;&gt;China-pub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;版权许可&lt;/h3&gt; &#xA;&lt;p&gt;本书采用“保持署名—非商用”创意共享4.0许可证。&lt;/p&gt; &#xA;&lt;p&gt;只要保持原作者署名和非商用，您可以自由地阅读、分享、修改本书。&lt;/p&gt; &#xA;&lt;p&gt;详细的法律条文请参见&lt;a href=&#34;http://creativecommons.org/licenses/by-nc/4.0/&#34;&gt;创意共享&lt;/a&gt;网站。&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>github/safe-settings</title>
    <updated>2023-03-26T01:38:06Z</updated>
    <id>tag:github.com,2023-03-26:/github/safe-settings</id>
    <link href="https://github.com/github/safe-settings" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GitHub Safe-Settings&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/github/safe-settings/actions/workflows/create-release.yml&#34;&gt;&lt;img src=&#34;https://github.com/github/safe-settings/actions/workflows/create-release.yml/badge.svg?sanitize=true&#34; alt=&#34;Create a release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Safe-settings&lt;/code&gt;– an app to manage policy-as-code and apply repository settings to repositories across an organization.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;In &lt;code&gt;safe-settings&lt;/code&gt; all the settings are stored centrally in an &lt;code&gt;admin&lt;/code&gt; repo within the organization. This is important. Unlike &lt;a href=&#34;https://github.com/probot/settings&#34;&gt;Settings Probot&lt;/a&gt;, the settings files cannot be in individual repositories.&lt;br&gt; &lt;br&gt; &lt;span&gt;👋&lt;/span&gt;&lt;code&gt;NOTE:&lt;/code&gt; It is possible to overrride this behavior and specify a custom repo instead of the &lt;code&gt;admin&lt;/code&gt; repo.&lt;br&gt; This could be done by setting an &lt;code&gt;env&lt;/code&gt; variable called &lt;code&gt;ADMIN_REPO&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are 3 levels at which the settings could be managed:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Org-level settings are defined in &lt;code&gt;.github/settings.yml&lt;/code&gt;&lt;br&gt; &lt;br&gt; &lt;span&gt;👋&lt;/span&gt;&lt;code&gt;NOTE:&lt;/code&gt; It is possible to overrride this behavior and specify a different filename for the &lt;code&gt;settings&lt;/code&gt; yml repo.&lt;br&gt; This could be done by setting an &lt;code&gt;env&lt;/code&gt; variable called &lt;code&gt;SETTINGS_FILE_PATH&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Suborg&lt;/code&gt; level settings. A &lt;code&gt;suborg&lt;/code&gt; is an arbitrary collection of repos belonging to projects, business units, or teams. The &lt;code&gt;suborg&lt;/code&gt; settings reside in a yaml file for each &lt;code&gt;suborg&lt;/code&gt; in the &lt;code&gt;.github/suborgs&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;code&gt;Repo&lt;/code&gt; level settings. They reside in a repo specific yaml in &lt;code&gt;.github/repos&lt;/code&gt; folder&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is recommended to break the settings into org-level, suborg-level, and repo-level units. This will allow different teams to be define and manage policies for their specific projects or business units.With &lt;code&gt;CODEOWNERS&lt;/code&gt;, this will allow different people to be responsible for approving changes in different projects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;span&gt;👋&lt;/span&gt;&lt;code&gt;NOTE:&lt;/code&gt; &lt;code&gt;Suborg&lt;/code&gt; and &lt;code&gt;Repo&lt;/code&gt; level settings directory structure cannot be customized.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;👋&lt;/span&gt;&lt;code&gt;NOTE:&lt;/code&gt; The settings file must have a &lt;code&gt;.yml&lt;/code&gt;extension only. &lt;code&gt;.yaml&lt;/code&gt; extension is ignored, for now.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;The App listens to the following webhook events:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;push&lt;/strong&gt;: If the settings are created or modified, that is, if push happens in the &lt;code&gt;default&lt;/code&gt; branch of the &lt;code&gt;admin&lt;/code&gt; repo and the file added or changed is &lt;code&gt;.github/settings.yml&lt;/code&gt; or &lt;code&gt;.github/repos/*.yml&lt;/code&gt;or &lt;code&gt;.github/suborgs/*.yml&lt;/code&gt;, then the settings would be applied either globally to all the repos, or specific repos. For each repo, the settings that is actually applied depend on the default settings for the org, overlayed with settings for the suborg that the repo belongs to, overlayed with the settings for that specific repo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;repository.created&lt;/strong&gt;: If a repository is created in the org, the settings for the repo - the default settings for the org, overlayed with settings for the suborg that the repo belongs to, overlayed with the settings for that specific repo - is applied.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;branch_protection_rule&lt;/strong&gt;: If a branch protection rule is modified or deleted, &lt;code&gt;safe-settings&lt;/code&gt; will &lt;code&gt;sync&lt;/code&gt; the settings to prevent any unauthorized changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;repository.edited&lt;/strong&gt;: If the &lt;code&gt;default&lt;/code&gt; branch is changed if the the settings that would be applied for the repo&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pull_request.opened&lt;/strong&gt;, &lt;strong&gt;pull_request.reopened&lt;/strong&gt;, &lt;strong&gt;check_suite.requested&lt;/strong&gt;: If the settings are changed, but it is not in the &lt;code&gt;default&lt;/code&gt; branch, and there is an existing PR, the code will validate the settings changes by running safe-settings in &lt;code&gt;nop&lt;/code&gt; mode and update the PR with the &lt;code&gt;dry-run&lt;/code&gt; status.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Restricting &lt;code&gt;safe-settings&lt;/code&gt; to specific repos&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;safe-settings&lt;/code&gt; can be turned on only to a subset of repos by specifying them in the runtime settings file, &lt;code&gt;deployment-settings.yml&lt;/code&gt;.&lt;br&gt; If no file is specified, then the following repositories - &lt;code&gt;&#39;admin&#39;, &#39;.github&#39;, &#39;safe-settings&#39;&lt;/code&gt; are exempted by default.&lt;br&gt; A sample of &lt;code&gt;deployment-settings&lt;/code&gt; file is found &lt;a href=&#34;https://raw.githubusercontent.com/github/safe-settings/main-enterprise/docs/sample-settings/sample-deployment-settings.yml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To apply &lt;code&gt;safe-settings&lt;/code&gt; &lt;strong&gt;only&lt;/strong&gt; to a specific list of repos, add them to the &lt;code&gt;restrictedRepos&lt;/code&gt; section as &lt;code&gt;include&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;p&gt;To ignore &lt;code&gt;safe-settings&lt;/code&gt; for a specific list of repos, add them to the &lt;code&gt;restrictedRepos&lt;/code&gt; section as &lt;code&gt;exclude&lt;/code&gt; array.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The &lt;code&gt;include&lt;/code&gt; and &lt;code&gt;exclude&lt;/code&gt; attributes support as well regular expressions.&lt;/p&gt; &#xA;&lt;h3&gt;Custom rules&lt;/h3&gt; &#xA;&lt;p&gt;Admins setting up &lt;code&gt;safe-settings&lt;/code&gt; can include custom rules that would be used to validate before applying a setting or overridding a broader scoped setting.&lt;/p&gt; &#xA;&lt;p&gt;The code has to return &lt;code&gt;true&lt;/code&gt; if validation is successful, or &lt;code&gt;false&lt;/code&gt; if it isn&#39;t.&lt;/p&gt; &#xA;&lt;p&gt;If the validation fails, the &lt;code&gt;error&lt;/code&gt; attribute specified would be used to create the error message in the logs or in the &lt;code&gt;PR checks&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The first use case is where a custom rule has to be applied for a setting on its own. For e.g. No collaborator should be given &lt;code&gt;admin&lt;/code&gt; permissions.&lt;/p&gt; &#xA;&lt;p&gt;For this type of validations, admins can provide custom code as &lt;code&gt;configvalidators&lt;/code&gt; which validates the setting by itself.&lt;/p&gt; &#xA;&lt;p&gt;For e.g. for the case above, it would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;configvalidators:&#xA;  - plugin: collaborators&#xA;    error: |&#xA;      `Admin role cannot be assigned to collaborators`&#xA;    script: |&#xA;      console.log(`baseConfig ${JSON.stringify(baseconfig)}`)&#xA;      return baseconfig.permission != &#39;admin&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For convenience this script has access to a variable, &lt;code&gt;baseconfig&lt;/code&gt;, that contains the setting that is be applied.&lt;/p&gt; &#xA;&lt;p&gt;The second use case is where custom rule has to be applied when a setting in the org or suborg level is being overridden. Such as, when default branch protection is being overridden.&lt;/p&gt; &#xA;&lt;p&gt;For this type of validations, admins can provide custom code as &lt;code&gt;overridevalidators&lt;/code&gt;. The script can access two variables, &lt;code&gt;baseconfig&lt;/code&gt; and &lt;code&gt;overrideconfig&lt;/code&gt; which represent the base setting and the setting that is overridding it.&lt;/p&gt; &#xA;&lt;p&gt;A sample would look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;overridevalidators:&#xA;  - plugin: branches   &#xA;    error: |&#xA;      `Branch protection required_approving_review_count cannot be overidden to a lower value`&#xA;    script: |&#xA;      console.log(`baseConfig ${JSON.stringify(baseconfig)}`)&#xA;      console.log(`overrideConfig ${JSON.stringify(overrideconfig)}`)&#xA;      if (baseconfig.protection.required_pull_request_reviews.required_approving_review_count &amp;amp;&amp;amp; overrideconfig.protection.required_pull_request_reviews.required_approving_review_count ) {&#xA;        return overrideconfig.protection.required_pull_request_reviews.required_approving_review_count &amp;gt;= baseconfig.protection.required_pull_request_reviews.required_approving_review_count &#xA;      }&#xA;      return true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A sample of &lt;code&gt;deployment-settings&lt;/code&gt; file is found &lt;a href=&#34;https://raw.githubusercontent.com/github/safe-settings/main-enterprise/docs/sample-settings/sample-deployment-settings.yml&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Performance&lt;/h3&gt; &#xA;&lt;p&gt;When there are 1000s of repos to be managed -- and there is a global settings change -- safe-settings will have to work efficiently and only make the neccessary API calls.&lt;/p&gt; &#xA;&lt;p&gt;The app also has to complete the work within an hour: the lifetime of the GitHub app token.&lt;/p&gt; &#xA;&lt;p&gt;To address these constraints the following design decisions have been implemented:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Probot&lt;/code&gt; automatically handles &lt;code&gt;rate&lt;/code&gt; and &lt;code&gt;abuse&lt;/code&gt; limits.&lt;/li&gt; &#xA; &lt;li&gt;Instead of loading all the repo contents from &lt;code&gt;.github/repos/*&lt;/code&gt;, it will selectively load the specific repo file based on which &lt;code&gt;repo&lt;/code&gt; settings has changed, or a subset of the repo files associated with &lt;code&gt;suborg&lt;/code&gt; settings that has changed. The only time all the repo files will be loaded is if there is a &lt;code&gt;global&lt;/code&gt; settings file change.&lt;/li&gt; &#xA; &lt;li&gt;The PR check will only provide a summary of errors and changes. (Providing the details of changes for 1000s of repos will error out.)&lt;/li&gt; &#xA; &lt;li&gt;To ensure it handles updates to GitHub intelligently, it will compare the changes with the settings in GitHub, and will call the API only if there are &lt;code&gt;real&lt;/code&gt; changes.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Comparing changes with GitHub&lt;/h4&gt; &#xA;&lt;p&gt;To determine if there are &lt;code&gt;real&lt;/code&gt; changes, the code will generate a detailed list of &lt;code&gt;additions&lt;/code&gt;, &lt;code&gt;modifications&lt;/code&gt;, and &lt;code&gt;deletions&lt;/code&gt; compared to the settings in GitHub:&lt;/p&gt; &#xA;&lt;p&gt;For e.g:&lt;/p&gt; &#xA;&lt;p&gt;If the settings is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;branches&#34;: [&#xA;    {&#xA;      &#34;name&#34;: &#34;master&#34;,&#xA;      &#34;protection&#34;: {&#xA;        &#34;required_pull_request_reviews&#34;: {&#xA;          &#34;required_approving_review_count&#34;: 2,&#xA;          &#34;dismiss_stale_reviews&#34;: false,&#xA;          &#34;require_code_owner_reviews&#34;: true,&#xA;          &#34;dismissal_restrictions&#34;: {}&#xA;        },&#xA;        &#34;required_status_checks&#34;: {&#xA;          &#34;strict&#34;: true,&#xA;          &#34;contexts&#34;: []&#xA;        },&#xA;        &#34;enforce_admins&#34;: false&#xA;      }&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and the settings in GitHub is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;     &#34;branches&#34;: [&#xA;       {&#xA;         &#34;name&#34;: &#34;master&#34;,&#xA;         &#34;protection&#34;: {&#xA;            url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection&#34;,&#xA;           &#34;required_status_checks&#34;: {&#xA;              url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/required_status_checks&#34;,&#xA;             &#34;strict&#34;: true,&#xA;             &#34;contexts&#34;: [],&#xA;              contexts_url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/required_status_checks/contexts&#34;,&#xA;             &#34;checks&#34;: []&#xA;           },&#xA;           &#34;restrictions&#34;: {&#xA;              url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/restrictions&#34;,&#xA;              users_url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/restrictions/users&#34;,&#xA;              teams_url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/restrictions/teams&#34;,&#xA;              apps_url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/restrictions/apps&#34;,&#xA;             &#34;users&#34;: [],&#xA;             &#34;teams&#34;: [],&#xA;             &#34;apps&#34;: []&#xA;           },&#xA;           &#34;required_pull_request_reviews&#34;: {&#xA;              url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/required_pull_request_reviews&#34;,&#xA;             &#34;dismiss_stale_reviews&#34;: true,&#xA;             &#34;require_code_owner_reviews&#34;: true,&#xA;             &#34;required_approving_review_count&#34;: 2,&#xA;             &#34;dismissal_restrictions&#34;: {&#xA;                url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/dismissal_restrictions&#34;,&#xA;                users_url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/dismissal_restrictions/users&#34;,&#xA;                teams_url&#34;: &#34;https://api.github.com/repos/decyjphr-org/test/branches/develop/protection/dismissal_restrictions/teams&#34;,&#xA;               &#34;users&#34;: [],&#xA;               &#34;teams&#34;: []&#xA;             }&#xA;           },&#xA;           &#34;required_signatures&#34;: false,&#xA;           &#34;enforce_admins&#34;: false,&#xA;           &#34;required_linear_history&#34;: false,&#xA;           &#34;allow_force_pushes&#34;: {&#xA;             &#34;enabled&#34;: false&#xA;           },&#xA;           &#34;allow_deletions&#34;: false,&#xA;           &#34;required_conversation_resolution&#34;: false&#xA;         }&#xA;       }&#xA;     ]&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;the results of comparison would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;      &#34;additions&#34;: {},&#xA;      &#34;modifications&#34;: {&#xA;        &#34;branches&#34;: [&#xA;          {&#xA;            &#34;protection&#34;: {&#xA;              &#34;required_pull_request_reviews&#34;: {&#xA;                &#34;dismiss_stale_reviews&#34;: false&#xA;              }&#xA;            },&#xA;            &#34;name&#34;: &#34;master&#34;&#xA;          }&#xA;        ]&#xA;      },&#xA;      &#34;hasChanges&#34;: true&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Schedule&lt;/h3&gt; &#xA;&lt;p&gt;The App can be configured to apply the settings on a schedule. This could a way to address configuration drift since webhooks have not always guaranteed to be delivered.&lt;/p&gt; &#xA;&lt;p&gt;To set periodically converge the settings to the configuration, set the &lt;code&gt;CRON&lt;/code&gt; environment variable. This is based on &lt;a href=&#34;https://www.npmjs.com/package/node-cron&#34;&gt;node-cron&lt;/a&gt; and details on the possible values can be found [here](#Env variables).&lt;/p&gt; &#xA;&lt;h3&gt;Pull Request Workflow&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;Safe-settings&lt;/code&gt; explicitly looks in the &lt;code&gt;admin&lt;/code&gt; repo in the organization for the settings files. The &lt;code&gt;admin&lt;/code&gt; repo could be a restricted repository with &lt;code&gt;branch protections&lt;/code&gt; and &lt;code&gt;codeowners&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;In that set up, when a changes happen to the settings files and there is a PR for merging the changes back to the &lt;code&gt;default&lt;/code&gt; branch in the &lt;code&gt;admin&lt;/code&gt; repo, &lt;code&gt;safe-settings&lt;/code&gt; will run &lt;code&gt;checks&lt;/code&gt; – which will run in &lt;strong&gt;nop&lt;/strong&gt; mode and produce a report of the changes that would happen, including the API calls and the payload.&lt;/p&gt; &#xA;&lt;p&gt;The checks will fail if &lt;code&gt;org-level&lt;/code&gt;branch protections are overridden at the repo or suborg level with a lesser number of required approvers.&lt;/p&gt; &#xA;&lt;h3&gt;The Settings file&lt;/h3&gt; &#xA;&lt;p&gt;The settings file can be used to set the policies at the &lt;code&gt;Org&lt;/code&gt;, &lt;code&gt;suborg&lt;/code&gt; or &lt;code&gt;repo&lt;/code&gt; level.&lt;/p&gt; &#xA;&lt;p&gt;Using the settings, the following things could be configured:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Repository settings&lt;/code&gt; - home page, url, visibility, has_issues, has_projects, wikis, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;default branch&lt;/code&gt;naming and renaming&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Repository Topics&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Teams and permissions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Collaborators and permissions&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Issue labels&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Branch protections&lt;/code&gt;. If the name of the branch is &lt;code&gt;default&lt;/code&gt; in the settings, it is applied to the &lt;code&gt;default&lt;/code&gt; branch of the repo.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Autolinks&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;repository name validation&lt;/code&gt; using regex pattern&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is possible to provide an &lt;code&gt;include&lt;/code&gt; or &lt;code&gt;exclude&lt;/code&gt; settings to restrict the &lt;code&gt;collaborators&lt;/code&gt;, &lt;code&gt;teams&lt;/code&gt;, &lt;code&gt;labels&lt;/code&gt; to a list of repos or exclude a set of repos for a collaborator.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example settings file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# These settings are synced to GitHub by https://github.com/github/safe-settings&#xA;&#xA;repository: &#xA;  # This is the settings that need to be applied to all repositories in the org &#xA;  # See https://docs.github.com/en/rest/reference/repos#create-an-organization-repository for all available settings for a repository  &#xA;  # A short description of the repository that will show up on GitHub&#xA;  description: description of the repo&#xA;  &#xA;  # A URL with more information about the repository&#xA;  homepage: https://example.github.io/&#xA;    &#xA;  # Keep this as true for most cases&#xA;  # A lot of the policies below cannot be implemented on bare repos&#xA;  # Pass true to create an initial commit with empty README.&#xA;  auto_init: true&#xA;    &#xA;  # A list of topics to set on the repository - can alternatively set like this: [github, probot, new-topic, another-topic, topic-12]&#xA;  topics:&#xA;  - github&#xA;  - probot&#xA;  - new-topic&#xA;  - another-topic&#xA;  - topic-12&#xA;  &#xA;  # Either `true` to make the repository private, or `false` to make it public. &#xA;  # If this value is changed and if Org members cannot change the visibility of repos&#xA;  # it would result in an error when updating a repo&#xA;  private: true&#xA;  &#xA;  # Can be public or private. If your organization is associated with an enterprise account using &#xA;  # GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, visibility can also be internal. &#xA;  visibility: private&#xA;  &#xA;  # Either `true` to enable issues for this repository, `false` to disable them.&#xA;  has_issues: true&#xA;  &#xA;  # Either `true` to enable projects for this repository, or `false` to disable them.&#xA;  # If projects are disabled for the organization, passing `true` will cause an API error.&#xA;  has_projects: true&#xA;  &#xA;  # Either `true` to enable the wiki for this repository, `false` to disable it.&#xA;  has_wiki: true&#xA;  &#xA;  # The default branch for this repository.&#xA;  default_branch: main-enterprise&#xA;  &#xA;  # Desired language or platform [.gitignore template](https://github.com/github/gitignore) &#xA;  # to apply. Use the name of the template without the extension. &#xA;  # For example, &#34;Haskell&#34;.&#xA;  gitignore_template: node&#xA;  &#xA;  # Choose an [open source license template](https://choosealicense.com/) &#xA;  # that best suits your needs, and then use the &#xA;  # [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) &#xA;  # as the `license_template` string. For example, &#34;mit&#34; or &#34;mpl-2.0&#34;.&#xA;  license_template: mit&#xA;  &#xA;  # Either `true` to allow squash-merging pull requests, or `false` to prevent&#xA;  # squash-merging.&#xA;  allow_squash_merge: true&#xA;  &#xA;  # Either `true` to allow merging pull requests with a merge commit, or `false`&#xA;  # to prevent merging pull requests with merge commits.&#xA;  allow_merge_commit: true&#xA;  &#xA;  # Either `true` to allow rebase-merging pull requests, or `false` to prevent&#xA;  # rebase-merging.&#xA;  allow_rebase_merge: true&#xA;  &#xA;  # Either `true` to allow auto-merge on pull requests, &#xA;  # or `false` to disallow auto-merge.&#xA;  # Default: `false`&#xA;  allow_auto_merge: true&#xA;  &#xA;  # Either `true` to allow automatically deleting head branches &#xA;  # when pull requests are merged, or `false` to prevent automatic deletion.&#xA;  # Default: `false`&#xA;  delete_branch_on_merge: true  &#xA;      &#xA;# The following attributes are applied to any repo within the org&#xA;# So if a repo is not listed above is created or edited&#xA;# The app will apply the following settings to it&#xA;labels:&#xA;  # Labels: define labels for Issues and Pull Requests&#xA;  include:&#xA;    - name: bug&#xA;      color: CC0000&#xA;      description: An issue with the system&#xA;&#xA;    - name: feature&#xA;      # If including a `#`, make sure to wrap it with quotes!&#xA;      color: &#39;#336699&#39;&#xA;      description: New functionality.&#xA;&#xA;    - name: first-timers-only&#xA;      # include the old name to rename an existing label&#xA;      oldname: Help Wanted&#xA;      color: &#39;#326699&#39;&#xA;&#xA;    - name: new-label&#xA;      # include the old name to rename an existing label&#xA;      oldname: Help Wanted&#xA;      color: &#39;#326699&#39;&#xA;  exclude:&#xA;    # don&#39;t delete any labels created on GitHub that starts with &#34;release&#34;&#xA;    - name: ^release&#xA;&#xA;milestones:&#xA;# Milestones: define milestones for Issues and Pull Requests&#xA;  - title: milestone-title&#xA;    description: milestone-description&#xA;    # The state of the milestone. Either `open` or `closed`&#xA;    state: open&#xA;&#xA;collaborators:&#xA;# Collaborators: give specific users access to any repository.&#xA;# See https://docs.github.com/en/rest/reference/collaborators#add-a-repository-collaborator for available options&#xA;- username: regpaco&#xA;  permission: push&#xA;# The permission to grant the collaborator. Can be one of:&#xA;# * `pull` - can pull, but not push to or administer this repository.&#xA;# * `push` - can pull and push, but not administer this repository.&#xA;# * `admin` - can pull, push and administer this repository.&#xA;- username: beetlejuice&#xA;  permission: pull&#xA;# You can exclude a list of repos for this collaborator and all repos except these repos would have this collaborator&#xA;  exclude:&#xA;  - actions-demo&#xA;- username: thor&#xA;  permission: push&#xA;# You can include a list of repos for this collaborator and only those repos would have this collaborator&#xA;  include:&#xA;  - actions-demo&#xA;  - another-repo&#xA;&#xA;teams:&#xA;# Teams See https://docs.github.com/en/rest/reference/teams#create-a-team for available options&#xA;  - name: core&#xA;    # The permission to grant the team. Can be one of:&#xA;    # * `pull` - can pull, but not push to or administer this repository.&#xA;    # * `push` - can pull and push, but not administer this repository.&#xA;    # * `admin` - can pull, push and administer this repository.&#xA;    permission: admin&#xA;  - name: docss&#xA;    permission: push&#xA;  - name: docs&#xA;    permission: pull&#xA;  # Visibility is only honored when the team is created not for existing teams.&#xA;  # It can be either secret (default) or closed (visible to all members of the org)&#xA;  - name: globalteam&#xA;    permission: push&#xA;    visibility: closed&#xA;&#xA;branches:&#xA;  # If the name of the branch value is specified as `default`, then the app will create a branch protection rule to apply against the default branch in the repo&#xA;  - name: default&#xA;    # https://docs.github.com/en/rest/reference/branches#update-branch-protection&#xA;    # Branch Protection settings. Set to null to disable&#xA;    protection:&#xA;      # Required. Require at least one approving review on a pull request, before merging. Set to null to disable.&#xA;      required_pull_request_reviews:&#xA;        # The number of approvals required. (1-6)&#xA;        required_approving_review_count: 1&#xA;        # Dismiss approved reviews automatically when a new commit is pushed.&#xA;        dismiss_stale_reviews: true&#xA;        # Blocks merge until code owners have reviewed.&#xA;        require_code_owner_reviews: true&#xA;        # Specify which users and teams can dismiss pull request reviews. Pass an empty dismissal_restrictions object to disable. User and team dismissal_restrictions are only available for organization-owned repositories. Omit this parameter for personal repositories.&#xA;        dismissal_restrictions:&#xA;          users: []&#xA;          teams: []&#xA;      # Required. Require status checks to pass before merging. Set to null to disable&#xA;      required_status_checks:&#xA;        # Required. Require branches to be up to date before merging.&#xA;        strict: true&#xA;        # Required. The list of status checks to require in order to merge into this branch&#xA;        contexts: []&#xA;      # Required. Enforce all configured restrictions for administrators. Set to true to enforce required status checks for repository administrators. Set to null to disable.&#xA;      enforce_admins: true&#xA;      # Required. Restrict who can push to this branch. Team and user restrictions are only available for organization-owned repositories. Set to null to disable.&#xA;      restrictions:&#xA;        apps: []&#xA;        users: []&#xA;        teams: []&#xA;&#xA;# See the docs (https://docs.github.com/en/repositories/managing-your-repositorys-settings-and-features/managing-repository-settings/configuring-autolinks-to-reference-external-resources) for a description of autolinks and replacement values.&#xA;autolinks:&#xA;  - key_prefix: &#39;JIRA-&#39;&#xA;    url_template: &#39;https://jira.github.com/browse/JIRA-&amp;lt;num&amp;gt;&#39;&#xA;  - key_prefix: &#39;MYLINK-&#39;&#xA;    url_template: &#39;https://mywebsite.com/&amp;lt;num&amp;gt;&#39;&#xA;        &#xA;validator:&#xA;  #pattern: &#39;[a-zA-Z0-9_-]+_[a-zA-Z0-9_-]+.*&#39; &#xA;  pattern: &#39;[a-zA-Z0-9_-]+&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Additional values&lt;/h3&gt; &#xA;&lt;p&gt;In addition to these values above, the settings file can have some addtional values&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;force_create&lt;/code&gt;: This is set in the repo-level settings to force create the repo if the repo does not exist.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;template&lt;/code&gt;: This is set in the repo-level settings, and is used with the &lt;code&gt;force_create&lt;/code&gt;flag to use a specific repo template when creating the repo&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suborgrepos&lt;/code&gt;: This is set in the suborg-level settings to define an array of repos. This field can also take a &lt;code&gt;glob&lt;/code&gt; pattern to allow wild-card expression to specify repos in a suborg. For e.g. &lt;code&gt;test*&lt;/code&gt;would include &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;test1&lt;/code&gt;, &lt;code&gt;testing&lt;/code&gt;, etc.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;suborgteams&lt;/code&gt; section contains a list of teams, and all the repos belonging to the teams would be part of the &lt;code&gt;suborg&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Env variables&lt;/h3&gt; &#xA;&lt;p&gt;You can pass environment variables; easiest way to do it is in a &lt;code&gt;.env&lt;/code&gt;file.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;CRON&lt;/strong&gt; you can pass a cron input to run &lt;code&gt;safe-settings&lt;/code&gt; at a regular schedule. This is based on &lt;a href=&#34;https://www.npmjs.com/package/node-cron&#34;&gt;node-cron&lt;/a&gt;. For eg.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;# ┌────────────── second (optional)&#xA;# │ ┌──────────── minute&#xA;# │ │ ┌────────── hour&#xA;# │ │ │ ┌──────── day of month&#xA;# │ │ │ │ ┌────── month&#xA;# │ │ │ │ │ ┌──── day of week&#xA;# │ │ │ │ │ │&#xA;# │ │ │ │ │ │&#xA;# * * * * * *&#xA;CRON=* * * * * # Run every minute&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Logging level could be set using &lt;strong&gt;LOG_LEVEL&lt;/strong&gt;. For e.g.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;LOG_LEVEL=trace&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Runtime Settings&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Besides the above settings files, the application can be bootstrapped with &lt;code&gt;runtime&lt;/code&gt; settings.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;runtime&lt;/code&gt; settings are configured in &lt;code&gt;deployment-settings.yml&lt;/code&gt; that is in the directory from where the GitHub app is running.&lt;/li&gt; &#xA; &lt;li&gt;Currently the only setting that is possible are &lt;code&gt;restrictedRepos: [... ]&lt;/code&gt; which allows you to configure a list of repos within your &lt;code&gt;org&lt;/code&gt; that are excluded from the settings. If the &lt;code&gt;deployment-settings.yml&lt;/code&gt; is not present, the following repos are added by default to the &lt;code&gt;restricted&lt;/code&gt;repos list: &lt;code&gt;&#39;admin&#39;, &#39;.github&#39;, &#39;safe-settings&#39;&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Notes&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Label color can also start with &lt;code&gt;#&lt;/code&gt;, e.g. &lt;code&gt;color: &#39;#F341B2&#39;&lt;/code&gt;. Make sure to wrap it with quotes!&lt;/li&gt; &#xA; &lt;li&gt;Each top-level element under branch protection must be filled (eg: &lt;code&gt;required_pull_request_reviews&lt;/code&gt;, &lt;code&gt;required_status_checks&lt;/code&gt;, &lt;code&gt;enforce_admins&lt;/code&gt; and &lt;code&gt;restrictions&lt;/code&gt;). If you don&#39;t want to use one of them you must set it to &lt;code&gt;null&lt;/code&gt; (see comments in the example above). Otherwise, none of the settings will be applied.&lt;/li&gt; &#xA; &lt;li&gt;The precedence order is repository &amp;gt; suborg &amp;gt; org (.github/repos/&lt;em&gt;.yml &amp;gt; .github/suborgs/&lt;/em&gt;.yml &amp;gt; .github/settings.yml&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/safe-settings/main-enterprise/docs/deploy.md&#34;&gt;Install the app&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create an &lt;code&gt;admin&lt;/code&gt; repo within your organization (the repository must be called &lt;code&gt;admin&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the settings for the &lt;code&gt;org&lt;/code&gt;, &lt;code&gt;suborgs&lt;/code&gt;, and &lt;code&gt;repos&lt;/code&gt; . List of sample files could be found &lt;a href=&#34;https://raw.githubusercontent.com/github/safe-settings/main-enterprise/docs/sample-settings&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/github/safe-settings/main-enterprise/docs/deploy.md&#34;&gt;docs/deploy.md&lt;/a&gt; if you would like to run your own instance of this plugin.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;safe-settings&lt;/code&gt; is licensed under the &lt;a href=&#34;https://github.com/github/safe-settings/raw/master/LICENSE&#34;&gt;ISC license&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;safe-settings&lt;/code&gt; uses 3rd party libraries, each with their own license. These are found &lt;a href=&#34;https://github.com/github/safe-settings/raw/master/NOTICE.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>