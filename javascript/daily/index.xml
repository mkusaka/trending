<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T01:31:51Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>yangshun/tech-interview-handbook</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/yangshun/tech-interview-handbook</id>
    <link href="https://github.com/yangshun/tech-interview-handbook" rel="alternate"></link>
    <summary type="html">&lt;p&gt;💯 Curated interview preparation materials for busy engineers&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Tech Interview Handbook&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.techinterviewhandbook.org/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yangshun/tech-interview-handbook/master/website/static/img/logo.svg?sanitize=true&#34; alt=&#34;Tech Interview Handbook&#34; width=&#34;400&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;h3&gt; &lt;a href=&#34;https://www.techinterviewhandbook.org/&#34;&gt;Read on the website&lt;/a&gt; &lt;/h3&gt; &#xA; &lt;p&gt; Follow us on &lt;a href=&#34;https://facebook.com/techinterviewhandbook&#34;&gt;Facebook&lt;/a&gt; | &lt;a href=&#34;https://twitter.com/techinterviewhb&#34;&gt;Twitter&lt;/a&gt; | &lt;a href=&#34;https://t.me/techinterviewhandbook&#34;&gt;Telegram&lt;/a&gt; &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;a href=&#34;https://www.techinterviewhandbook.org/software-engineering-interview-guide/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/yangshun/tech-interview-handbook/master/assets/start-reading-button.jpg&#34; alt=&#34;Start Reading Tech Interview Handbook&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;What is this?&lt;/h2&gt; &#xA;&lt;p&gt;Not everyone has the time to do a few hundred LeetCode questions. Here are &lt;em&gt;free and curated&lt;/em&gt; technical interview preparation materials for busy engineers, brought to you by me, the author of &lt;a href=&#34;https://www.teamblind.com/post/New-Year-Gift---Curated-List-of-Top-75-LeetCode-Questions-to-Save-Your-Time-OaM1orEU&#34;&gt;Blind 75&lt;/a&gt;. Over 500,000 people have benefitted from this handbook!&lt;/p&gt; &#xA;&lt;p&gt;Besides the usual algorithm questions, other &lt;strong&gt;awesome&lt;/strong&gt; stuff includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/coding-interview-study-plan/&#34;&gt;Best practice questions&lt;/a&gt; for coding interviews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/grind75&#34;&gt;Grind 75&lt;/a&gt; the next evolution of Blind 75, bigger and better.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/coding-interview-prep/&#34;&gt;How to prepare&lt;/a&gt; for coding interviews&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/coding-interview-cheatsheet/&#34;&gt;Coding interview best practices&lt;/a&gt; - Straight-to-the-point Do&#39;s and Don&#39;ts&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/algorithms/study-cheatsheet/&#34;&gt;Algorithm cheatsheets and tips&lt;/a&gt; categorized by topic&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/resume/&#34;&gt;Step-by-step Software Engineer resume guide&lt;/a&gt; to prepare a FAANG-ready resume&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.techinterviewhandbook.org/behavioral-interview-questions/&#34;&gt;Behavioral questions&lt;/a&gt; asked by the top tech companies&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.frontendinterviewhandbook.com&#34;&gt;Front end interview preparation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Help from you in contributing content would be very much appreciated!&lt;/p&gt; &#xA;&lt;h2&gt;Why would you read this?&lt;/h2&gt; &#xA;&lt;p&gt;This repository has &lt;strong&gt;practical&lt;/strong&gt; content that covers all phases of a technical interview, from applying for a job to passing the interviews to offer negotiation. Technically competent candidates might still find the non-technical content helpful.&lt;/p&gt; &#xA;&lt;p&gt;The information in this repository is condensed. Ultimately, the key to succeeding in technical interviews is consistent practice and I don&#39;t want to bore you with too many words. I tell you the minimum you need to know on how to go about navigating the interview process, you go and practice and land your dream job.&lt;/p&gt; &#xA;&lt;h2&gt;Who is this for?&lt;/h2&gt; &#xA;&lt;p&gt;Anybody who wants to land a job at a tech company but is new to technical interviews, seasoned engineers who have not been on the other side of the interviewing table in a while and want to get back into the game, or anyone who wants to be better at technical interviewing.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;💡 Stop grinding LeetCode aimlessly! Study coding question patterns efficiently with &lt;a href=&#34;https://www.educative.io/courses/grokking-the-coding-interview?aff=x23W&#34;&gt;Grokking the Coding Interview&lt;/a&gt; on Educative 💡 &lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;How is this repository different?&lt;/h2&gt; &#xA;&lt;p&gt;There are many awesome books like &lt;a href=&#34;http://www.crackingthecodinginterview.com/&#34;&gt;Cracking the Coding Interview&lt;/a&gt; and interview-related repositories out there on GitHub, what makes this repository different? The difference is that many existing interview repositories contain mainly links to external resources whereas this repository contains top-quality curated content directly for your consumption.&lt;/p&gt; &#xA;&lt;p&gt;Also, existing resources focus mainly on algorithm questions and lack coverage for more domain-specific and non-technical questions. This handbook aims to cover content beyond the typical algorithmic coding questions. 😎&lt;/p&gt; &#xA;&lt;h2&gt;Looking for interview courses?&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;AlgoMonster&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;AlgoMonster aims to help you ace the technical interview &lt;strong&gt;in the shortest time possible&lt;/strong&gt;. By Google engineers, AlgoMonster uses a data-driven approach to teach you the most useful key question patterns and has contents to help you quickly revise basic data structures and algorithms. Best of all, AlgoMonster is not subscription-based - pay a one-time fee and get &lt;strong&gt;lifetime access&lt;/strong&gt;. &lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;&lt;strong&gt;Join today for a 70% discount →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.educative.io/courses/grokking-the-coding-interview?aff=x23W&#34;&gt;Grokking the Coding Interview: Patterns for Coding Questions&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;This course by Educative expands upon the questions on the recommended practice questions but approaches the practicing from a questions pattern perspective, which is an approach I also agree with for learning and have personally used to get better at coding interviews. The course allows you to practice selected questions in Java, Python, C++, JavaScript and also provides sample solutions in those languages. &lt;strong&gt;Learn and understand patterns, not memorize answers!&lt;/strong&gt; &lt;a href=&#34;https://www.educative.io/courses/grokking-the-coding-interview?aff=x23W&#34;&gt;&lt;strong&gt;Join today for a 10% discount →&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Looking for Front End content?&lt;/h2&gt; &#xA;&lt;p&gt;Front-end-related content has been moved to a separate website - &lt;a href=&#34;https://frontendinterviewhandbook.com&#34;&gt;Front End Interview Handbook&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Looking for System Design content?&lt;/h2&gt; &#xA;&lt;p&gt;We&#39;re still working on System Design content. In the meanwhile, check out Educative&#39;s &lt;a href=&#34;https://www.educative.io/courses/grokking-the-system-design-interview?aff=x23W&#34;&gt;Grokking the System Design Interview course&lt;/a&gt;, which in our opinion is one of the most useful resources for getting started on system design interviews preparation.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/facebook/docusaurus&#34;&gt;Docusaurus&lt;/a&gt; website has been created to provide a better reading experience. Check out the website &lt;a href=&#34;https://www.techinterviewhandbook.org&#34;&gt;here&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h3&gt;💡 Stop the grind and study with a plan! Developed by Google engineers, &lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;AlgoMonster&lt;/a&gt; is the fastest way to get a software engineering job. &lt;a href=&#34;https://shareasale.com/r.cfm?b=1873647&amp;amp;u=3114753&amp;amp;m=114505&amp;amp;urllink=&amp;amp;afftrack=&#34;&gt;Join today for a 70% discount!&lt;/a&gt; 💡&lt;/h3&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Related&lt;/h2&gt; &#xA;&lt;p&gt;If you are interested in how data structures are implemented, check out &lt;a href=&#34;https://github.com/yangshun/lago&#34;&gt;Lago&lt;/a&gt;, a Data Structures and Algorithms library for JavaScript. It is pretty much still WIP but I intend to make it into a library that can be used in production and also a reference resource for revising Data Structures and Algorithms.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are no formal contributing guidelines at the moment as things are still in flux and we might find a better approach to structure content as we go along. You are welcome to contribute whatever you think will be helpful to fellow engineers. If you would like to contribute content for different domains, feel free to create an issue or submit a pull request and we can discuss further.&lt;/p&gt; &#xA;&lt;h3&gt;Contributors&lt;/h3&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contributed. [&lt;a href=&#34;https://raw.githubusercontent.com/yangshun/tech-interview-handbook/master/CONTRIBUTING.md&#34;&gt;Contribute&lt;/a&gt;]. &lt;a href=&#34;https://github.com/yangshun/tech-interview-handbook/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Backers&lt;/h3&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/tech-interview-handbook#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tech-interview-handbook#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/yangshun&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: auto !important; width: auto !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo/profile picture will show up here with a link to your website. [&lt;a href=&#34;https://opencollective.com/tech-interview-handbook#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/tech-interview-handbook/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/tech-interview-handbook/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;I am providing code in the repository to you under an open source license. Because this is my personal repository, the license you receive to my code is from me and not my employer (Meta).&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Asabeneh/30-Days-Of-React</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/Asabeneh/30-Days-Of-React</id>
    <link href="https://github.com/Asabeneh/30-Days-Of-React" rel="alternate"></link>
    <summary type="html">&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. It requires HTML, CSS, and JavaScript knowledge. You should be comfortable with JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of JS. This challenge may take more than 100…&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;img align=&#34;right&#34; width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/30_days_of_react.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; 30 Days Of React&lt;/h1&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://www.linkedin.com/in/asabeneh/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://twitter.com/Asabeneh&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/asabeneh?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;sub&gt;Author: &lt;a href=&#34;https://www.linkedin.com/in/asabeneh/&#34; target=&#34;_blank&#34;&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; October, 2020&lt;/small&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;# Day&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Topics&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&#34;&gt;How to Use Repo&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;JavaScript Refresher&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md&#34;&gt;Getting Started React&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md&#34;&gt;Setting Up&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md&#34;&gt;Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md&#34;&gt;Props&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md&#34;&gt;List, Map and Keys&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md&#34;&gt;Class Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md&#34;&gt;States&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md&#34;&gt;Conditional Rendering&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md&#34;&gt;React Project Folder Structure&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md&#34;&gt;Events&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md&#34;&gt;Forms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md&#34;&gt;Controlled and Uncontrolled Component&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md&#34;&gt;Component Life Cycles&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md&#34;&gt;Third Party Packages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md&#34;&gt;Higher Order Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md&#34;&gt;React Router&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md&#34;&gt;Fetch versus Axios&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md&#34;&gt;Projects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md&#34;&gt;Projects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md&#34;&gt;Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md&#34;&gt;Forms Using Hook&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md&#34;&gt;Fetching Data Using Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md&#34;&gt;Project using Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md&#34;&gt;Custom Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md&#34;&gt;Context&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md&#34;&gt;Ref&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md&#34;&gt;project&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md&#34;&gt;Explore&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md&#34;&gt;Conclusions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.paypal.me/asabeneh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/paypal_lg.png&#34; alt=&#34;Paypal Logo&#34; style=&#34;width:10%&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&#34;&gt;How to Use Repo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo&#34;&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork&#34;&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch&#34;&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions&#34;&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions&#34;&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily&#34;&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs&#34;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser&#34;&gt;Browser&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome&#34;&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console&#34;&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console&#34;&gt;Writing Code on Browser Console&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog&#34;&gt;Console.log&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments&#34;&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics&#34;&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor&#34;&gt;Code Editor&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code&#34;&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code&#34;&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href=&#34;https://t.me/thirtydaysofreact&#34;&gt;telegram group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; &#xA;&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don&#39;t be surprised because I don&#39;t do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href=&#34;https://github.com/Asabeneh/30-Days-Of-JavaScript&#34;&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before you dive into this course, you may check the &lt;a href=&#34;https://t.me/thirtydaysofreact/992&#34;&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Motivation&lt;/li&gt; &#xA; &lt;li&gt;A computer&lt;/li&gt; &#xA; &lt;li&gt;Internet&lt;/li&gt; &#xA; &lt;li&gt;A browser&lt;/li&gt; &#xA; &lt;li&gt;A code editor&lt;/li&gt; &#xA; &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Use Repo&lt;/h2&gt; &#xA;&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; &#xA;&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; &#xA;&lt;h3&gt;Clone your Fork&lt;/h3&gt; &#xA;&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# note that an `ssh` link is used here, but an `https` link will work the same&#xA;git clone git@github.com:username/30-Days-Of-React.git&#xA;cd 30-Days-Of-React&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a New Branch&lt;/h3&gt; &#xA;&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; &#xA;&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories&#xA;touch solutions/day-01/level1.js # touch creates a file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; &#xA;&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add solutions/day-01/level1.js&#xA;git commit -m &#34;chore: exercise level1 complete&#34;&#xA;git push origin exercise-solutions # branch `exercise-solutions` was created earlier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; &#xA;&lt;p&gt;This repo will be updated daily throughout the month. When a new day&#39;s content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. switch to master branch&#xA;git checkout master&#xA;# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`&#xA;git remote -v&#xA;# 3. if not, add a link to original, you can choose any name for the link or use `upstream`&#xA;git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git&#xA;# 4. check again to confirm link added&#xA;git remote -v&#xA;# 5. now you can fetch updates from original repo, assuming you named this `upstream`&#xA;git fetch upstream&#xA;# 6. merge the updates to your local master branch&#xA;git merge upstream/master master&#xA;# 7. push the merged updates to your Forked copy on GitHub&#xA;git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git merge upstream/master exercise-solutions&#xA;git push origin exercise-solutions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Install Node.js&lt;/h3&gt; &#xA;&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png&#34; alt=&#34;Node download&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After downloading double click and install&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png&#34; alt=&#34;Install node&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asabeneh $ node -v&#xA;v12.14.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png&#34; alt=&#34;Google Chrome&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; &#xA;&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png&#34; alt=&#34;Opening chrome&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don&#39;t be lazy to open it during development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Mac&#xA;Command+Option+J&#xA;&#xA;Windows/Linux:&#xA;Ctl+Shift+J&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png&#34; alt=&#34;Opening console&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png&#34; alt=&#34;write code on console&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; &#xA;&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Mac&#xA;Command+Option+I&#xA;&#xA;Windows:&#xA;Ctl+Shift+I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Console.log&lt;/h5&gt; &#xA;&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed &#39;Hello, World&#39; as input data or argument in the console.log() function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png&#34; alt=&#34;console log multiple arguments&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello&#39;, &#39;World&#39;, &#39;!&#39;)&#xA;console.log(&#39;HAPPY&#39;, &#39;NEW&#39;, &#39;YEAR&#39;, 2020)&#xA;console.log(&#39;Welcome&#39;, &#39;to&#39;, 30, &#39;Days&#39;, &#39;Of&#39;, &#39;JavaScript&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don&#39;t keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; &#xA;&lt;h5&gt;Comments&lt;/h5&gt; &#xA;&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;// This is the first comment&lt;br&gt; // This is the second comment&lt;br&gt; // I am a single line comment&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/* This is a multiline comment&lt;br&gt; Multiline comments can take multiple lines&lt;br&gt; JavaScript is the language of the web&lt;br&gt; */&lt;/p&gt; &#xA;&lt;h5&gt;Syntax&lt;/h5&gt; &#xA;&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png&#34; alt=&#34;Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;console.log(&#39;Hello, World!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;console.log(&#39;Hello, World!&#39;)&#xA;console.log(`Hello, World!`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arithmetics&lt;/h4&gt; &#xA;&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png&#34; alt=&#34;Arithmetic&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(2 + 3) // Addition&#xA;console.log(3 - 2) // Subtraction&#xA;console.log(2 * 3) // Multiplication&#xA;console.log(3 / 2) // Division&#xA;console.log(3 % 2) // Modulus - finding remainder&#xA;console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code Editor&lt;/h3&gt; &#xA;&lt;p&gt;We can write our codes on the browser console, but it won&#39;t do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png&#34; alt=&#34;Vscode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; &#xA;&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png&#34; alt=&#34;Vscode ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png&#34; alt=&#34;Vscode add project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png&#34; alt=&#34;Vscode open project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png&#34; alt=&#34;script file&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png&#34; alt=&#34;Installing Live Server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png&#34; alt=&#34;running script&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png&#34; alt=&#34;coding running&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let&#39;s do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md&#34;&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; &#xA;&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sveltejs/kit</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/sveltejs/kit</id>
    <link href="https://github.com/sveltejs/kit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fastest way to build Svelte apps&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://svelte.dev/chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/457912077277855764?label=chat&amp;amp;logo=discord&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;READ THIS FIRST!&lt;/h1&gt; &#xA;&lt;p&gt;SvelteKit is still in beta. Expect bugs! Read more &lt;a href=&#34;https://svelte.dev/blog/sveltekit-beta&#34;&gt;here&lt;/a&gt;, and track progress towards 1.0 &lt;a href=&#34;https://github.com/sveltejs/kit/issues?q=is%3Aopen+is%3Aissue+milestone%3A1.0&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;The Fastest Way to Build Svelte Apps&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;💨 Blazing-Fast Production Sites&lt;/li&gt; &#xA; &lt;li&gt;🛠️ SSR, SPA, SSG, and In-Between&lt;/li&gt; &#xA; &lt;li&gt;⚡️ Instantly Visible Code Changes&lt;/li&gt; &#xA; &lt;li&gt;🔩 Existing Universe of Plugins&lt;/li&gt; &#xA; &lt;li&gt;🔑 Fully Typed APIs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Please see &lt;a href=&#34;https://kit.svelte.dev/docs&#34;&gt;the documentation&lt;/a&gt; for information about getting started and developing with SvelteKit.&lt;/p&gt; &#xA;&lt;h3&gt;Packages&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Package&lt;/th&gt; &#xA;   &lt;th&gt;Changelog&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/kit&#34;&gt;@sveltejs/kit&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/kit/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/create-svelte&#34;&gt;create-svelte&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/create-svelte/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-node&#34;&gt;@sveltejs/adapter-node&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-node/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-static&#34;&gt;@sveltejs/adapter-static&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-static/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-cloudflare-workers&#34;&gt;@sveltejs/adapter-cloudflare-workers&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-cloudflare-workers/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-cloudflare&#34;&gt;@sveltejs/adapter-cloudflare&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-cloudflare/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-netlify&#34;&gt;@sveltejs/adapter-netlify&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-netlify/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-vercel&#34;&gt;@sveltejs/adapter-vercel&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/packages/adapter-vercel/CHANGELOG.md&#34;&gt;Changelog&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;The SvelteKit community also makes additional &lt;a href=&#34;https://sveltesociety.dev/components#adapters&#34;&gt;SvelteKit adapters available for use&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Migrating from Sapper&lt;/h3&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://kit.svelte.dev/docs/migrating&#34;&gt;Migration Guide&lt;/a&gt; if you are upgrading from Sapper.&lt;/p&gt; &#xA;&lt;h2&gt;Bug reporting&lt;/h2&gt; &#xA;&lt;p&gt;Please make sure the issue you&#39;re reporting involves SvelteKit. Many issues related to how a project builds originate from &lt;a href=&#34;https://vitejs.dev/&#34;&gt;Vite&lt;/a&gt;, which is used to build a SvelteKit project. It&#39;s important to note that new Vite projects don&#39;t use SSR by default, and so if you create a new Vite project from scratch, many issues won&#39;t reproduce. You should thus start with a project that utilizes SSR, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/GrygrFlzr/vite-ssr-d3&#34;&gt;https://github.com/GrygrFlzr/vite-ssr-d3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sveltejs/vite-plugin-svelte/tree/main/packages/e2e-tests/vite-ssr&#34;&gt;https://github.com/sveltejs/vite-plugin-svelte/tree/main/packages/e2e-tests/vite-ssr&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If an issue originates from Vite, please report in the &lt;a href=&#34;https://github.com/vitejs/vite/issues&#34;&gt;Vite issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Changing SvelteKit locally&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/sveltejs/kit/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting Svelte&lt;/h2&gt; &#xA;&lt;p&gt;Svelte is an MIT-licensed open source project with its ongoing development made possible entirely by fantastic volunteers. If you&#39;d like to support their efforts, please consider:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/svelte&#34;&gt;Becoming a backer on Open Collective&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Funds donated via Open Collective will be used for compensating expenses related to Svelte&#39;s development such as hosting costs. If sufficient donations are received, funds may also be used to support Svelte&#39;s development more directly.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sveltejs/kit/raw/master/LICENSE&#34;&gt;MIT&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>omxmo/qg</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/omxmo/qg</id>
    <link href="https://github.com/omxmo/qg" rel="alternate"></link>
    <summary type="html">&lt;p&gt;618天猫/京东任务助手脚本。秒杀软件/抢购软件/抢购助手项目集合。 淘宝/天猫/淘特/京东/拼多多/苏宁易购/华为商城/小米商城/聚划算/百亿补贴/抖音/快手/酒仙网/直播/得物。手机抢购/茅台抢购/显卡抢购/耐克抢购/阿迪达斯鞋子抢购。 38女王节/618/1111/双11/双十一/1212/双12/双十二/年货节任务助手，年货节炸年兽/支付宝集五福/集福卡脚本。 直链/BP链接。 京东到家/九价疫苗/叮咚买菜/盒马/美团买菜/饿了么/每日优鲜/京东到家/山姆/大润发优鲜/多多买卖/&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt;你的 &lt;code&gt;Star&lt;/code&gt; 是长期更新的动力！&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;淘宝/京东618任务自动助手：在AuotoJS上运行618tb.js和618jd.js，或者直接下载打包好的APK：&lt;a href=&#34;https://wwc.lanzouq.com/b01cfbrbi&#34;&gt;https://wwc.lanzouq.com/b01cfbrbi&lt;/a&gt;&lt;br&gt; 基于AutoJS开发，AutoJS下载：&lt;a href=&#34;https://github.com/hyb1996/Auto.js&#34;&gt;https://github.com/hyb1996/Auto.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h5&gt;软件下载&lt;/h5&gt; &#xA;&lt;p&gt;各种抢购软件 &lt;code&gt;下载&lt;/code&gt; 和 &lt;code&gt;使用&lt;/code&gt; 互助交流、最新抢购线报请加群！&lt;br&gt; 618互助QQ群：&lt;a href=&#34;https://jq.qq.com/?_wv=1027&amp;amp;k=TkImzAX0&#34; title=&#34;点击链接&#34;&gt;点击加入&lt;/a&gt;&lt;br&gt; 微信群，扫码添加微信邀请加入，备注：抢购助手&lt;br&gt; &lt;img src=&#34;https://github.com/omxmo/xb/raw/main/wx.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;抢购秒杀项目集合&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;项目名称&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;最后更新时间&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;链接&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;山姆全自动抢购&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5月23日&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/sari3l/sams_helper&#34;&gt;点击链接&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;山姆抢购&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5月23日&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/robGoods/sams&#34;&gt;点击链接&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;叮咚买菜抢购&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5月21日&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/xiaorui16888/DingDongHelper&#34;&gt;点击链接&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;九价疫苗秒杀WPF&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5月17日&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SinnoSong/SecKill&#34;&gt;点击链接&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;网页版京东到家抢购&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;5月15日&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/cc3cccci/JD_rush&#34;&gt;点击链接&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;抢购助手&lt;/h3&gt; &#xA;&lt;p&gt;抢购助手是一款基于安卓系统的辅助脚本工具，模拟人工在手机屏幕上点击，实现自动化操作。方便、快捷、安全、无毒。支持淘宝/天猫、京东、拼多多等多个平台和聚划算、百亿补贴等多种活动，提供页面、购物车、BP链接和捡漏等抢购模式！&lt;/p&gt; &#xA;&lt;h3&gt;支持功能&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;淘宝&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;京东&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;拼多多&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;其他&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;大促活动&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;淘特 &lt;code&gt;抢购模式&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;收藏模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;收藏模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;淘金币助手&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;618任务助手&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;BP模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;页面模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;苏宁易购 &lt;code&gt;页面模式+购物车模式&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;双11任务助手&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;收藏模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;购物车模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;抖音 &lt;code&gt;橱窗+直播+刷屏&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;双12任务助手&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;页面模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;捡漏模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;小米商城&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;年货节任务助手&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;购物车模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;刷屏&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;华为商城&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;点击模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;考拉海购&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;百亿补贴模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;酒仙网&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;直播&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;多点&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;刷屏&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;华润&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;软件界面&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/omxmo/qg/raw/main/qg.png&#34; alt=&#34;&#34;&gt;&lt;br&gt; &lt;img src=&#34;https://github.com/omxmo/qg/raw/main/bp.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;提示&lt;/h3&gt; &#xA;&lt;p&gt;仅供测试和学习交流，严禁用于商业和违法行为！！！&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ashutosh1919/masterPortfolio</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ashutosh1919/masterPortfolio</id>
    <link href="https://github.com/ashutosh1919/masterPortfolio" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🔥 The Complete Customizable Software Developer Portfolio Template which lets you showcase your work and provides each and every detail about you as Software Developer.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/images/masterportfolio-banner-light.png&#34; align=&#34;center&#34; height=&#34;150&#34;&gt; &lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Software Developer Master Portfolio 🔥 &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; A clean, beautiful, responsive and 100% customizable portfolio &lt;br&gt; template for Software Developers! &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://hits.dwyl.com/ashutosh1919/masterPortfolio&#34;&gt;&lt;img alt=&#34;HitCounts&#34; src=&#34;http://hits.dwyl.com/ashutosh1919/masterPortfolio.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nodejs.org/en/blog/release/v12.13.0/&#34;&gt;&lt;img alt=&#34;NodeJS&#34; src=&#34;https://img.shields.io/badge/node-12.14.1-important?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/npm/v/6.13.4&#34;&gt;&lt;img alt=&#34;NPM&#34; src=&#34;https://img.shields.io/badge/npm-6.13.7-blueviolet?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reactjs.org/&#34;&gt;&lt;img alt=&#34;Made With React&#34; src=&#34;https://img.shields.io/badge/made%20with-react-61DAFB?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://join.slack.com/t/masterportfolio/shared_invite/zt-g772n1fo-Ns4usanURF8jVb8wk2lRAA&#34;&gt;&lt;img alt=&#34;Join Slack Channel For Support&#34; src=&#34;https://img.shields.io/badge/slack-masterPortfolio-yellow.svg?logo=slack?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;&lt;img alt=&#34;code style: prettier&#34; src=&#34;https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat-square?style=flat-square&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://app.netlify.com/sites/ashutosh1919portfolio/deploys&#34;&gt;&lt;img alt=&#34;Netlify Status&#34; src=&#34;https://api.netlify.com/api/v1/badges/abf59f82-3251-4040-b24c-949b86691642/deploy-status?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/badges/badgerbadgerbadger&#34;&gt;&lt;img alt=&#34;Build Status&#34; src=&#34;http://img.shields.io/travis/badges/badgerbadgerbadger.svg?style=flat-square?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badges.mit-license.org/&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;http://img.shields.io/:license-mit-blue.svg?style=flat-square?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits/master&#34;&gt;&lt;img alt=&#34;Maintenance&#34; src=&#34;https://img.shields.io/badge/maintained-yes-green.svg?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://badges.mit-license.org/&#34;&gt;&lt;img alt=&#34;Website&#34; src=&#34;https://img.shields.io/badge/website-up-yellow?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ashutoshhathidara.com/&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;http://img.shields.io/:license-mit-blue.svg?style=flat-square?style=flat-square&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://img.shields.io/badge/price-free-ff69b4&#34;&gt;&lt;img alt=&#34;Price&#34; src=&#34;https://img.shields.io/badge/price-free-ff69b4?style=flat-square&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;If you want to discuss about something, then you can ask on my &lt;a href=&#34;https://discord.com/invite/GkcbM5bwZr&#34;&gt;Discord Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://ashutosh1919.github.io&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/images/masterPortfolioThemes.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;⭐&lt;/span&gt; Star us on GitHub — it helps!&lt;/p&gt; &#xA;&lt;h1&gt;Sections 📚&lt;/h1&gt; &#xA;&lt;p&gt;✔️ Summary and About me&lt;br&gt; ✔️ Skills &lt;br&gt; ✔️ Open Source Projects Connected with Github&lt;br&gt; ✔️ Experience&lt;br&gt; ✔️ Certifications 🏆&lt;br&gt; ✔️ Blogs&lt;br&gt; ✔️ Education&lt;br&gt; ✔️ Contact me&lt;/p&gt; &#xA;&lt;p&gt;To view a live example, &lt;strong&gt;&lt;a href=&#34;https://ashutosh1919.github.io/&#34;&gt;click here&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Clone And Use 📋&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The website is completely built on &lt;code&gt;react-js&lt;/code&gt; library of &lt;code&gt;javascript&lt;/code&gt; and that&#39;s why we need &lt;code&gt;nodejs&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt; installed.&lt;/li&gt; &#xA; &lt;li&gt;While installing &lt;code&gt;nodejs&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;, try to install versions which are equal or greater than the versions mentioned in badges above.&lt;/li&gt; &#xA; &lt;li&gt;In case you want to help developing it or simply saving it, you can fork the repository just by clicking the button on the top-right corner of this page.&lt;/li&gt; &#xA; &lt;li&gt;After the successful installation of &lt;code&gt;nodejs&lt;/code&gt; and &lt;code&gt;npm&lt;/code&gt;, clone the repository into your local system using below command: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; git clone https://github.com/ashutosh1919/masterPortfolio.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;This will clone the whole repository in your system.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;To download required dependencies to your system, navigate to the directory where the cloned repository resides and execute following command: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Now, the project is ready to use.&lt;/li&gt; &#xA; &lt;li&gt;You can check it using &lt;code&gt;npm start&lt;/code&gt;, it will open the website locally on your browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Customize it to make your own portfolio ✏️&lt;/h1&gt; &#xA;&lt;p&gt;In this project, there are basically 4 things that you need to change to customize this to anyone else&#39;s portfolio: &lt;strong&gt;package.json&lt;/strong&gt;, &lt;strong&gt;Personal Information&lt;/strong&gt;, &lt;strong&gt;Github Information&lt;/strong&gt; and &lt;strong&gt;Splash Logo&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;package.json&lt;/h3&gt; &#xA;&lt;p&gt;Open this file, which is in the main cloned directory, choose any &#34;name&#34; and change &#34;homepage &#34; to &lt;code&gt;https://&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt;. Do not forget the &lt;code&gt;https://&lt;/code&gt;, otherwise fonts will not load.&lt;/p&gt; &#xA;&lt;h3&gt;Personal Information&lt;/h3&gt; &#xA;&lt;p&gt;You will find &lt;code&gt;src/portfolio.js&lt;/code&gt; file which contains the complete information about the user. The file looks something like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Home Page&#xA;const greeting = {&#xA;    ...&#xA;}&#xA;&#xA;// Social Media&#xA;const socialMediaLinks = {&#xA;    ...&#xA;}&#xA;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can change the personal information, experience, education, social media, certifications, blog information, contact information etc. in &lt;code&gt;src/portfolio.js&lt;/code&gt; to directly reflect them in portfolio website.&lt;/p&gt; &#xA;&lt;h3&gt;Github Information&lt;/h3&gt; &#xA;&lt;p&gt;You will find &lt;code&gt;git_data_fetcher.mjs&lt;/code&gt; file in the main directory of the repository. This file is used to fetch the data (Pull requests, Issues, Organizations, Pinned projects etc.) from your github. If you open the file, you will see below component at the top of the file. You need to change only that component.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const openSource = {&#xA;  githubConvertedToken: &#34;Your Github Token Here.&#34;,&#xA;  githubUserName: &#34;Your Github Username Here.&#34;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get a github token as described &lt;a href=&#34;https://docs.github.com/en/github/authenticating-to-github/creating-a-personal-access-token&#34;&gt;here&lt;/a&gt;. Give all permissions while generating token. Also add your &lt;code&gt;githubUserName&lt;/code&gt; in the correct field inside &lt;code&gt;git_data_fetcher.mjs&lt;/code&gt;. Now, you need to run following command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Treat your tokens like passwords and keep them secret. When working with the API, use tokens as environment variables instead of hardcoding them into your programs.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-node&#34;&gt;node git_data_fetcher.mjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will fetch all the data from your github and it will automatically replace my data with yours. Whenever you want to update the github related information on the website you need to run this command.&lt;/p&gt; &#xA;&lt;h3&gt;Splash Logo&lt;/h3&gt; &#xA;&lt;p&gt;Note here that if you click &lt;a href=&#34;https://ashutosh1919.github.io&#34;&gt;my portfolio&lt;/a&gt;, you can see animating the logo at the beginning. I have designed that logo in &lt;a href=&#34;https://www.figma.com/&#34;&gt;&lt;code&gt;Figma&lt;/code&gt;&lt;/a&gt; and then animated it using css. Therefore, this part of portfolio is not customizable. But don&#39;t worry we have a solution to this problem. You have below two alternatives:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;If you want to design your own logo, then you can design it using &lt;code&gt;Figma&lt;/code&gt; or &lt;code&gt;Adobe XD&lt;/code&gt; or &lt;code&gt;Adobe Illustrator&lt;/code&gt; or &lt;code&gt;Inkscape&lt;/code&gt;. If you want to animate it, you can refer to &lt;code&gt;./src/components/Loader&lt;/code&gt; directory which contains &lt;code&gt;js&lt;/code&gt; and &lt;code&gt;css&lt;/code&gt; files which animates the logo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don&#39;t want Splash screen or you don&#39;t know how to design logo, then this option is for you.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can open &lt;code&gt;src/portfolio.js&lt;/code&gt; file and at the top of this file you will see &lt;code&gt;settings&lt;/code&gt; component as below:&lt;/li&gt; &#xA;   &lt;li&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Website related settings&#xA;const settings = {&#xA;  isSplash: true,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Change &lt;code&gt;isSplash&lt;/code&gt; from &lt;code&gt;true&lt;/code&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Now, if you see your website using &lt;code&gt;npm start&lt;/code&gt;, it will directly open &lt;code&gt;home&lt;/code&gt; rather than animating logo &lt;code&gt;splash&lt;/code&gt; screen.&lt;/li&gt; &#xA;   &lt;li&gt;If you design your logo in future, then edit the files in &lt;code&gt;./src/components/Loader&lt;/code&gt; and then revert &lt;code&gt;isSplash&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in &lt;code&gt;src/portfolio.js&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Other&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You need to change the website title and other descriptions in &lt;code&gt;public/index.html&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can define your own favicon in &lt;code&gt;public/icons&lt;/code&gt; directory. If you don&#39;t have a favicon, you can generate favicons from &lt;a href=&#34;https://www.favicon-generator.org/&#34;&gt;Favicon Generator&lt;/a&gt; and &lt;a href=&#34;https://favicon.io/&#34;&gt;Favicon IO&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Also you can edit your website preview known as description image. Run your site locally, take a screenshot and replace with &lt;code&gt;public/icons/desc.png&lt;/code&gt;. Note that your screenshot should be 1280x640 for better preview&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Choose Theme 🌈&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;You can take a look at &lt;code&gt;src/theme.js&lt;/code&gt; file where all available themes are mentioned with their respective color codes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;At the bottom of this file you will see the below code:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;export const chosenTheme = blueTheme;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;You need to change the name from &lt;code&gt;blueTheme&lt;/code&gt; to whatever theme you want to set your website to.&lt;/li&gt; &#xA;   &lt;li&gt;You can define new theme similarly as other themes and you can assign name of that new defined theme to &lt;code&gt;chosenTheme&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;That&#39;s it. You just need to change the theme name and the code will take care of everything else.&lt;/p&gt; &lt;p&gt;Run &lt;code&gt;npm start&lt;/code&gt; to check if everything is ok.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Deployment 📦&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Once you are done with your setup and have successfully completed all steps above, you need to put your website online!&lt;/li&gt; &#xA; &lt;li&gt;I highly recommend using &lt;a href=&#34;https://create-react-app.dev/docs/deployment/#github-pages&#34;&gt;Github Pages&lt;/a&gt; to achieve this the EASIEST WAY.&lt;/li&gt; &#xA; &lt;li&gt;To deploy your website, you have two options. First you need to create a github repository with the name &lt;code&gt;&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt;. Please don&#39;t give it any other name.&lt;/li&gt; &#xA; &lt;li&gt;Now, you need to generate a production build and deploy the website.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Option 1:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;npm run build&lt;/code&gt; to generate the production build folder.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter the build folder, &lt;code&gt;git init&lt;/code&gt; and push the generated code to the &lt;code&gt;master&lt;/code&gt; branch of your new repository on github. That&#39;s it. It&#39;s Done.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You may need to &lt;code&gt;git init&lt;/code&gt; and force push at every new build. &lt;strong&gt;Option 2 (will not work with &lt;a href=&#34;https://docs.github.com/en/github/working-with-github-pages/about-github-pages&#34;&gt;user pages&lt;/a&gt;):&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;npm run deploy&lt;/code&gt; to build and create a branch called &lt;code&gt;gh-pages&lt;/code&gt;. It will push the &lt;code&gt;build&lt;/code&gt; files to that branch.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The last step in deploying is to enable &lt;code&gt;Github Pages&lt;/code&gt; in settings of the repository and select &lt;code&gt;gh-pages&lt;/code&gt; branch.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now, your website is successfully deployed and you can visit it at &lt;code&gt;&amp;lt;your-github-username&amp;gt;.github.io&lt;/code&gt;.&lt;br&gt; If you are stuck somewhere and want to observe the deployment process in depth, then please watch below video.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://www.youtube.com/watch?v=IwBS39TOmpA&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;http://img.youtube.com/vi/IwBS39TOmpA/0.jpg&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Technologies used 🛠️&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://graphql.org/&#34;&gt;graphql&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.apollographql.com/docs/react/get-started/&#34;&gt;apollo-boost&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/uber/baseweb&#34;&gt;baseui&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.react-reveal.com/&#34;&gt;react-reveal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://styled-components.com/&#34;&gt;styled-components&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;illustrations 🍥&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://undraw.co/illustrations&#34;&gt;UnDraw&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;License 📄&lt;/h1&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/LICENSE&#34;&gt;LICENSE.md&lt;/a&gt; file for details.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing 💡&lt;/h1&gt; &#xA;&lt;p&gt;If you can help us with these. Please don&#39;t hesitate to open an &lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/pulls&#34;&gt;pull request&lt;/a&gt; or &lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/issues&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Move to Gatsby&lt;/li&gt; &#xA; &lt;li&gt;Add Podcast Section and Video Section&lt;/li&gt; &#xA; &lt;li&gt;Add tests to automate review.&lt;/li&gt; &#xA; &lt;li&gt;Setup Travis workflow.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributors ✨&lt;/h1&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://ashutosh1919.github.io&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/20843596?s=460&amp;amp;u=7f184b911f73ae1dc5765ab686fff2b2e984830f&amp;amp;v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ashutosh Hathidara&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=ashutosh1919&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=ashutosh1919&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#design-ashutosh1919&#34; title=&#34;Design&#34;&gt;🎨&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#maintenance-ashutosh1919&#34; title=&#34;Maintenance&#34;&gt;🚧&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#ideas-ashutosh1919&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://danielmarostica.github.io/&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/3595998?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Daniel Marostica&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=danielmarostica&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#design-danielmarostica&#34; title=&#34;Design&#34;&gt;🎨&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dineshnadimpalli.com&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/13104926?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dinesh Nadimpalli&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=dineshnadimpalli&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://jivthesh.github.io&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/20579980?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jivthesh M R&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=jivthesh&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://jatinchauhan.tech&#34;&gt;&lt;img src=&#34;https://avatars2.githubusercontent.com/u/40722235?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jatin Chauhan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=mrjatinchauhan&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://th3c0d3br34ker.github.io/&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/60807938?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jainam Desai&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=th3c0d3br34ker&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#question-th3c0d3br34ker&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://miftaulmannan.wordpress.com/&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/42533823?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Miftaul Mannan&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=Tasin5541&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://a-mishra.github.io&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/10567548?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Ashutosh Mishra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=a-mishra&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://tamojit.wixsite.com/mrtamojit&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/40804626?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tamojit&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=tamojit-123&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://prabin-karki.com.np&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/43983896?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Prabin Karki&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=githubprabin143&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://praveen.science/&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/1830380?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Praveen Kumar Purushothaman&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=praveenscience&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://baul.ml&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/33395806?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;paul&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=baulml&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SandipDhang&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/50694884?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sandip Dhang&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=SandipDhang&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/ioribrn&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/43734587?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jawad Moustadif&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=ioribrn&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/priyanshk20&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/52736997?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Priyansh Khandelwal&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=priyanshk20&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#design-priyanshk20&#34; title=&#34;Design&#34;&gt;🎨&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/abdslam01&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/59281502?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Abdessalam Bahafid&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=abdslam01&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://dhruvkrishnavaid.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/69188774?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Dhruv Krishna Vaid&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=dhruvkrishnavaid&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=dhruvkrishnavaid&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#ideas-dhruvkrishnavaid&#34; title=&#34;Ideas, Planning, &amp;amp; Feedback&#34;&gt;🤔&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/ashutosh1919/masterPortfolio/master/#question-dhruvkrishnavaid&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://kasroudra.github.io&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/78908440?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;KasRoudra&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=KasRoudra&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://telegram.dog/AlbertEinstein_TG&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/73480087?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Albert Einstein&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=AlbertEinsteinTG&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/SurajPratap10&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/92919173?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Suraj Pratap&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=SurajPratap10&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://lightmap.dev&#34;&gt;&lt;img src=&#34;https://avatars.githubusercontent.com/u/40917760?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Sai Teja&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/ashutosh1919/masterPortfolio/commits?author=saiteja13427&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;h1&gt;References 👏🏻&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Some Design and Implementation Ideas are taken from &lt;a href=&#34;https://github.com/saadpasta/developerFolio&#34;&gt;Saad Pasta&#39;s Portfolio Project&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The Logo of MasterPortfolio is inspired from &lt;a href=&#34;https://github.com/prettier/prettier-logo&#34;&gt;prettier-logo&lt;/a&gt; for &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier&lt;/a&gt; designed by @ianstormtaylor.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>AMAI-GmbH/AI-Expert-Roadmap</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/AMAI-GmbH/AI-Expert-Roadmap</id>
    <link href="https://github.com/AMAI-GmbH/AI-Expert-Roadmap" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Roadmap to becoming an Artificial Intelligence Expert in 2022&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/AMAI-GmbH/AI-Expert-Roadmap&#34;&gt; &lt;img src=&#34;https://uploads-ssl.webflow.com/58e6a2b25c28230d367487ad/5c32232ecb585fcc5c4645e1_icon_machine-learning.svg?sanitize=true&#34; alt=&#34;Developer Roadmap&#34; width=&#34;96&#34; height=&#34;96&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;h2 align=&#34;center&#34;&gt;i.am.ai&lt;br&gt;AI Expert Roadmap&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt;Roadmap to becoming an Artificial Intelligence Expert in 2022&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/home?status=https://i.am.ai/roadmap Roadmap to becoming an Artificial Intelligence Expert in 2022&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tweet-blue.svg?logo=twitter&amp;amp;logoColor=white&#34; style=&#34;display: inherit;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.linkedin.com/shareArticle?mini=true&amp;amp;url=https://i.am.ai/roadmap&amp;amp;title=&amp;amp;summary=Roadmap to becoming an Artificial Intelligence Expert in 2022&amp;amp;source=&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/post-blue.svg?logo=linkedin&amp;amp;logoColor=white&#34; style=&#34;display: inherit;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AMAI-GmbH/AI-Expert-Roadmap&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Roadmap-2022-yellowgreen.svg?sanitize=true&#34; style=&#34;display: inherit;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://am.ai?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Badge&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;AMAI GmbH&#34; src=&#34;https://img.shields.io/badge/Author-AMAI GmbH-blue.svg&#34; style=&#34;display: inherit;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opensource.org/licenses/MIT/&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;MIT License&#34; src=&#34;https://img.shields.io/badge/License-MIT-blue.svg?sanitize=true&#34; style=&#34;display: inherit;&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;Below you find a set of charts demonstrating the paths that you can take and the technologies that you would want to adopt in order to become a data scientist, machine learning or an AI expert. We made these charts for our new employees to make them AI Experts but we wanted to share them here to help the community.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested to become an AI EXPERT at &lt;a href=&#34;https://www.linkedin.com/company/amai-gmbh/?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Become+Expert&#34;&gt;AMAI&lt;/a&gt; in Germany, or you want to &lt;a href=&#34;https://am.ai?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Hire+Expert&#34;&gt;hire an AI Expert&lt;/a&gt;, please say &lt;a href=&#34;mailto:hi@am.ai&#34;&gt;hi@am.ai&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Note&lt;/h2&gt; &#xA;&lt;p&gt;👉 An &lt;strong&gt;interactive version with links to follow&lt;/strong&gt; about each bullet of the list can be found at &lt;a href=&#34;https://i.am.ai/roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Interactive&#34;&gt;i.am.ai/roadmap&lt;/a&gt; 👈&lt;/p&gt; &#xA;&lt;p&gt;To receive updates &lt;a href=&#34;https://github.com/AMAI-GmbH/AI-Expert-Roadmap/stargazers&#34;&gt;star &lt;span&gt;⭐&lt;/span&gt;&lt;/a&gt; and watch &lt;span&gt;👀&lt;/span&gt; the &lt;a href=&#34;https://github.com/AMAI-GmbH/AI-Expert-Roadmap/&#34;&gt;GitHub Repo&lt;/a&gt; to get notified, when we add new content to stay on the top of the most recent research.&lt;/p&gt; &#xA;&lt;p&gt;Follow our &lt;a href=&#34;https://i.am.ai/newsletter?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Newsletter&#34;&gt;AI Newsletter&lt;/a&gt; to stay up to date with the latest developments in AI. We cover new use cases and research topics.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of these roadmaps is to give you an idea about the landscape and to guide you if you are confused about what to learn next and not to encourage you to pick what is hip and trendy. You should grow some understanding of why one tool would be better suited for some cases than the other and remember hip and trendy never means best suited for the job.&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://i.am.ai/roadmap#introduction?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Introduction&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/intro.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Fundamentals&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://i.am.ai/roadmap#fundamentals?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+Fundamentals&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/fundamentals.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Data Science Roadmap&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://i.am.ai/roadmap#data-science-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+DataScience&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/datascience.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Machine Learning Roadmap&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://i.am.ai/roadmap#machine-learning-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+MachineLearning&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/machine_learning.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Deep Learning Roadmap&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://i.am.ai/roadmap#deep-learning-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+DeepLearning&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/deep_learning.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Data Engineer Roadmap&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://i.am.ai/roadmap#data-engineer-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+DataEngineer&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/data_engineer.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Big Data Engineer Roadmap&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://i.am.ai/roadmap#big-data-engineer-roadmap?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+BigDataEngineer&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/big_data_engineer.svg?sanitize=true&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;🚦 Wrap Up&lt;/h2&gt; &#xA;&lt;p&gt;If you think any of the roadmaps can be improved, please do open a PR with any updates and submit any issues. Also, we will continue to improve this, so you might want to watch/star this repository to revisit.&lt;/p&gt; &#xA;&lt;h2&gt;🙌 Contribution&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Have a look at the &lt;a href=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/contributing.md&#34;&gt;contribution docs&lt;/a&gt; for how to update any of the roadmaps&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Open pull request with improvements&lt;/li&gt; &#xA; &lt;li&gt;Discuss ideas in issues&lt;/li&gt; &#xA; &lt;li&gt;Spread the word&lt;/li&gt; &#xA; &lt;li&gt;Reach out with any feedback&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported By&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.linkedin.com/company/amai-gmbh/?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap+SupportedBy&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;AMAI GmbH&#34; src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/logos/amai.svg?sanitize=true&#34; style=&#34;display: inherit;max-width: 150px;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://digitalhub-ai.de?utm_source=GitHub&amp;amp;utm_medium=Referral&amp;amp;utm_campaign=AI+Expert+Roadmap&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;AMAI GmbH&#34; src=&#34;https://raw.githubusercontent.com/AMAI-GmbH/AI-Expert-Roadmap/main/images/logos/de-hub.svg?sanitize=true&#34; style=&#34;display: inherit; max-width: 150px;&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ShyLoong/autojs-script</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ShyLoong/autojs-script</id>
    <link href="https://github.com/ShyLoong/autojs-script" rel="alternate"></link>
    <summary type="html">&lt;p&gt;autojs脚本程序,用于完成安卓设备上的重复性操作.包含脚本: 1.2021年京东618任务脚本 2.2021年京东燃动夏季活动脚本3.2021京东双十一热爱环游记4. 2022京东618热爱奇旅&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;auto-js-script&lt;/h1&gt; &#xA;&lt;p&gt;autojs脚本程序,用于完成安卓设备上的重复性操作. 包含脚本:&lt;/p&gt; &#xA;&lt;h3&gt;1. 2021年京东618任务脚本&lt;/h3&gt; &#xA;&lt;h3&gt;2. 2021年京东燃动夏季活动脚本&lt;/h3&gt; &#xA;&lt;h3&gt;3. 2021京东双十一热爱环游记&lt;/h3&gt; &#xA;&lt;h3&gt;4. 2022京东618热爱奇旅&lt;/h3&gt; &#xA;&lt;h4&gt;注意事项&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;请打开任务界面,再开启脚本&lt;/li&gt; &#xA; &lt;li&gt;有可能出现空指针,undefined等异常(很有可能是网络问题,把时间参数调大点,重新启动脚本即可).&lt;/li&gt; &#xA; &lt;li&gt;autojs版本为4.1.0&lt;/li&gt; &#xA; &lt;li&gt;使用该脚本有可能出现活动火爆(也就是无法参与活动),请谨慎使用&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;特别申明&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;本仓库仅用于测试和学习研究，禁止用于商业用途，不能保证其合法性，准确性，完整性和有效性，请根据情况自行判断。&lt;/li&gt; &#xA; &lt;li&gt;本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。&lt;/li&gt; &#xA; &lt;li&gt;本人对任何脚本问题概不负责，包括但不限于由任何脚本错误导致的任何损失或损害。&lt;/li&gt; &#xA; &lt;li&gt;请勿将此项目的任何内容用于商业或非法目的，否则后果自负。&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>actualbudget/actual-server</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/actualbudget/actual-server</id>
    <link href="https://github.com/actualbudget/actual-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Actual&#39;s server&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is the main project to run &lt;a href=&#34;https://github.com/actualbudget/actual&#34;&gt;Actual&lt;/a&gt;, a local-first personal finance tool. It comes with the latest version of Actual, and a server to persist changes and make data available across all devices.&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/pRYNYr4W5A&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Non-technical users&lt;/h2&gt; &#xA;&lt;p&gt;We are working on simpler one-button click deployments of Actual. This will reduce the friction for people not as comfortable with the command line. Some non-official options are listed at the bottom.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s very easy to get started. Clone this repo, install deps, and start it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/actualbudget/actual-server.git&#xA;cd actual-server&#xA;yarn install&#xA;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to &lt;a href=&#34;https://localhost:5006&#34;&gt;https://localhost:5006&lt;/a&gt; in your browser and you&#39;ll see Actual.&lt;/p&gt; &#xA;&lt;h2&gt;Running via Docker&lt;/h2&gt; &#xA;&lt;p&gt;To run using a Docker container you can use following commands;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/actualbudget/actual-server.git&#xA;cd actual-server&#xA;docker build -t actual-server .&#xA;docker run -p 5006:5006 actual-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Deploying&lt;/h2&gt; &#xA;&lt;p&gt;You should deploy your server so it&#39;s always running. We recommend &lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt; which makes it incredibly easy and provides a free plan.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt; allows running the application directly and provides a free tier. You should be comfortable with using the command line to set it up though.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://fly.io/app/sign-in&#34;&gt;Create an account&lt;/a&gt;. Although you are required to enter payment details, everything we do here will work on the free tier and you won&#39;t be charged.&lt;/p&gt; &#xA;&lt;p&gt;Next, &lt;a href=&#34;https://fly.io/docs/flyctl/installing/&#34;&gt;install the &lt;code&gt;flyctl&lt;/code&gt;&lt;/a&gt; utility. Run &lt;code&gt;flyctl auth login&lt;/code&gt; to sign into your account.&lt;/p&gt; &#xA;&lt;p&gt;Copy &lt;code&gt;fly.template.toml&lt;/code&gt; to &lt;code&gt;fly.toml&lt;/code&gt;. Open &lt;code&gt;fly.toml&lt;/code&gt; and customize the app name on the first line of the file.&lt;/p&gt; &#xA;&lt;p&gt;Now, run &lt;code&gt;flyctl launch&lt;/code&gt; from &lt;code&gt;actual-server&lt;/code&gt;. You should have a running app now!&lt;/p&gt; &#xA;&lt;p&gt;Whenever you want to update Actual, update the versions of &lt;code&gt;@actual-app/api&lt;/code&gt; and &lt;code&gt;@actual-app/web&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt; and run &lt;code&gt;flyctl deploy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Using a custom Docker setup&lt;/h3&gt; &#xA;&lt;p&gt;Actual is also available as a Docker image ready to be run in your own custom environment.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Docker Hub: &lt;code&gt;jlongster/actual-server&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Github Registry: &lt;code&gt;ghcr.io/actualbudget/actual-server&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Persisting server data&lt;/h3&gt; &#xA;&lt;p&gt;One problem with the above setup is every time you deploy, it will wipe away all the data on the server. You&#39;ll need to bootstrap the instance again and upload your files.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s move the data somewhere that persists. With &lt;a href=&#34;https://fly.io&#34;&gt;fly.io&lt;/a&gt; we can create a &lt;a href=&#34;https://fly.io/docs/reference/volumes/&#34;&gt;volume&lt;/a&gt;. Run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;flyctl volumes create actual_data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now we need to tell Actual to use this volume. Add this in &lt;code&gt;fly.toml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[mounts]&#xA;  source=&#34;actual_data&#34;&#xA;  destination=&#34;/data&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it! Actual will automatically check if the &lt;code&gt;/data&lt;/code&gt; directory exists and use it automatically.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;You can also configure the data dir with the &lt;code&gt;ACTUAL_USER_FILES&lt;/code&gt; environment variable.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;One-click hosting solutions&lt;/h3&gt; &#xA;&lt;p&gt;These are non-official methods of one-click solutions for running Actual. If you provide a service like this, feel free to open a PR and add it to this list. These run Actual via a Docker image.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;PikaPods: &lt;a href=&#34;https://www.pikapods.com/pods?run=actual&#34;&gt;Run on PikaPods&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuring the server URL&lt;/h2&gt; &#xA;&lt;p&gt;The Actual app is totally separate from the server. In this project, they happen to both be served by the same server, but the app doesn&#39;t know where the server lives.&lt;/p&gt; &#xA;&lt;p&gt;The server could live on a completely different domain. You might setup Actual so that the app and server are running in completely separate places.&lt;/p&gt; &#xA;&lt;p&gt;Since Actual doesn&#39;t know what server to use, the first thing it does is asks you for the server URL. If you are running this project, simply click &#34;Use this domain&#34; and it will automatically fill it in with the current domain. This works because we are serving the app and server in the same place.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mschwarzmueller/nextjs-course-code</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/mschwarzmueller/nextjs-course-code</id>
    <link href="https://github.com/mschwarzmueller/nextjs-course-code" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for my NextJS course (https://acad.link/nextjs)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This is a &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; project bootstrapped with &lt;a href=&#34;https://github.com/vercel/next.js/tree/canary/packages/create-next-app&#34;&gt;&lt;code&gt;create-next-app&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;First, run the development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;# or&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; with your browser to see the result.&lt;/p&gt; &#xA;&lt;p&gt;You can start editing the page by modifying &lt;code&gt;pages/index.js&lt;/code&gt;. The page auto-updates as you edit the file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nextjs.org/docs/api-routes/introduction&#34;&gt;API routes&lt;/a&gt; can be accessed on &lt;a href=&#34;http://localhost:3000/api/hello&#34;&gt;http://localhost:3000/api/hello&lt;/a&gt;. This endpoint can be edited in &lt;code&gt;pages/api/hello.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;pages/api&lt;/code&gt; directory is mapped to &lt;code&gt;/api/*&lt;/code&gt;. Files in this directory are treated as &lt;a href=&#34;https://nextjs.org/docs/api-routes/introduction&#34;&gt;API routes&lt;/a&gt; instead of React pages.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;To learn more about Next.js, take a look at the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/docs&#34;&gt;Next.js Documentation&lt;/a&gt; - learn about Next.js features and API.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/learn&#34;&gt;Learn Next.js&lt;/a&gt; - an interactive Next.js tutorial.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can check out &lt;a href=&#34;https://github.com/vercel/next.js/&#34;&gt;the Next.js GitHub repository&lt;/a&gt; - your feedback and contributions are welcome!&lt;/p&gt; &#xA;&lt;h2&gt;Deploy on Vercel&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to deploy your Next.js app is to use the &lt;a href=&#34;https://vercel.com/new?utm_medium=default-template&amp;amp;filter=next.js&amp;amp;utm_source=create-next-app&amp;amp;utm_campaign=create-next-app-readme&#34;&gt;Vercel Platform&lt;/a&gt; from the creators of Next.js.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://nextjs.org/docs/deployment&#34;&gt;Next.js deployment documentation&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ViktoryiaYatskova/clean-code-s1e1</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ViktoryiaYatskova/clean-code-s1e1</id>
    <link href="https://github.com/ViktoryiaYatskova/clean-code-s1e1" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;img width=&#34;1199&#34; alt=&#34;code-quality-task-screenshot&#34; src=&#34;https://user-images.githubusercontent.com/8201843/113413843-4080fb80-93c4-11eb-9f20-15e4b4c1e430.png&#34;&gt; &#xA;&lt;h1&gt;Функционал приложения :&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;- Добавление нового элемента в список задач &#34;TODO&#34;&#xA;- Редактирование элемента в списке задач &#34;TODO&#34;&#xA;- Удаление элемента из списка задач &#34;TODO&#34;&#xA;- Установка элемента в статус завершенного и перенос в список &#34;COMPLETED&#34; через checkbox&#xA;&#xA;- Удаление элемента из списка &#34;COMPLETED&#34;&#xA;- Редактирование элемента из списка &#34;COMPLETED&#34;&#xA;- Установка элемента в статус незавершенного и перенос в список &#34;TODO&#34; через checkbox&#xA;- Анимация на кнопке удаления&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>trekhleb/javascript-algorithms</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/trekhleb/javascript-algorithms</id>
    <link href="https://github.com/trekhleb/javascript-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🇺🇦 UKRAINE &lt;a href=&#34;https://twitter.com/MFA_Ukraine&#34;&gt;IS BEING ATTACKED&lt;/a&gt; BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Help Ukraine via &lt;a href=&#34;https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi&#34;&gt;National Bank of Ukraine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Help Ukraine via &lt;a href=&#34;https://savelife.in.ua/en/donate/&#34;&gt;SaveLife&lt;/a&gt; fund&lt;/li&gt; &#xA;  &lt;li&gt;More info on &lt;a href=&#34;https://war.ukraine.ua/&#34;&gt;war.ukraine.ua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/trekhleb/javascript-algorithms&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; &#xA;&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md&#34;&gt;&lt;em&gt;简体中文&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md&#34;&gt;&lt;em&gt;繁體中文&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md&#34;&gt;&lt;em&gt;한국어&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md&#34;&gt;&lt;em&gt;日本語&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md&#34;&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md&#34;&gt;&lt;em&gt;Français&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md&#34;&gt;&lt;em&gt;Español&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md&#34;&gt;&lt;em&gt;Português&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md&#34;&gt;&lt;em&gt;Русский&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md&#34;&gt;&lt;em&gt;Türk&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md&#34;&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md&#34;&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md&#34;&gt;&lt;em&gt;Українська&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md&#34;&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.vi-VN.md&#34;&gt;&lt;em&gt;Tiếng Việt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.de-DE.md&#34;&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;☝ Note that this project is meant to be used for learning and researching purposes only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list&#34;&gt;Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list&#34;&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table&#34;&gt;Hash Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap&#34;&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue&#34;&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie&#34;&gt;Trie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree&#34;&gt;Tree&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree&#34;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree&#34;&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree&#34;&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree&#34;&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph&#34;&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set&#34;&gt;Disjoint Set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter&#34;&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; &#xA;&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits&#34;&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/binary-floating-point&#34;&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial&#34;&gt;Factorial&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&#34;&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors&#34;&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan&#39;s theorem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test&#34;&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&#34;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple&#34;&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes&#34;&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two&#34;&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&#34;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number&#34;&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian&#34;&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&#34;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method&#34;&gt;Horner&#39;s method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&#34;&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-distance&#34;&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&#34;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root&#34;&gt;Square Root&lt;/a&gt; - Newton&#39;s method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui&#34;&gt;Liu Hui π Algorithm&lt;/a&gt; - approximate π calculations based on N-gons&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&#34;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product&#34;&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates&#34;&gt;Fisher–Yates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&#34;&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&#34;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&#34;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&#34;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&#34;&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;Knapsack Problem&lt;/a&gt; - &#34;0/1&#34; and &#34;Unbound&#34; ones&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt; - &#34;Brute Force&#34; and &#34;Dynamic Programming&#34; (Kadane&#39;s) versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&#34;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance&#34;&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/palindrome&#34;&gt;Palindrome&lt;/a&gt; - check if the string is the same in reverse&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&#34;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt&#34;&gt;Knuth–Morris–Pratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm&#34;&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp&#34;&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&#34;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&#34;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search&#34;&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&#34;&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search&#34;&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort&#34;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort&#34;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort&#34;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort&#34;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&#34;&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort&#34;&gt;Shellsort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort&#34;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort&#34;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal&#34;&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal&#34;&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&#34;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search&#34;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&#34;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search&#34;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&#34;&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&#34;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&#34;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&#34;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle&#34;&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&#34;&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting&#34;&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points&#34;&gt;Articulation Points&lt;/a&gt; - Tarjan&#39;s algorithm (DFS based)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges&#34;&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path&#34;&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury&#39;s algorithm - Visit every edge exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&#34;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components&#34;&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju&#39;s algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&#34;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash&#34;&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/rail-fence-cipher&#34;&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher&#34;&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/hill-cipher&#34;&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://github.com/trekhleb/nano-neuron&#34;&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/knn&#34;&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/k-means&#34;&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Processing&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&#34;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Statistics&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/statistics/weighted-random&#34;&gt;Weighted Random&lt;/a&gt; - select the random item from the list based on items&#39; weights&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evolutionary algorithms&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://github.com/trekhleb/self-parking-car-evolution&#34;&gt;Genetic algorithm&lt;/a&gt; - example of how the genetic algorithm may be applied for training the self-parking cars&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&#34;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation&#34;&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal&#39;s Triangle based examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&#34;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&#34;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&#34;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; &#xA;&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&#34;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&#34;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&#34;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&#34;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&#34;&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&#34;&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&#34;&gt;Binary Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&#34;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&#34;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&#34;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&#34;&gt;Quicksort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&#34;&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&#34;&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&#34;&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&#34;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&#34;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&#34;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&#34;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&#34;&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&#34;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&#34;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&#34;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&#34;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&#34;&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&#34;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&#34;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&#34;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a different path of finding a solution. Normally the DFS traversal of state-space is being used. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&#34;&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&#34;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&#34;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&#34;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&#34;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem, in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use this repository&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test -- &#39;LinkedList&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In case if linting or testing is failing try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -rf ./node_modules&#xA;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also make sure that you&#39;re using a correct Node version (&lt;code&gt;&amp;gt;=14.16.0&lt;/code&gt;). If you&#39;re using &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; for Node version management you may run &lt;code&gt;nvm use&lt;/code&gt; from the root folder of the project and the correct version will be picked up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test -- &#39;playground&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful Information&lt;/h2&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&#34;&gt;▶ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Big O Notation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png&#34; alt=&#34;Big O graphs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;http://bigocheatsheet.com/&#34;&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Big O Notation&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 10 elements&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 100 elements&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 1000 elements&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Constant&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logarithmic&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linear&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n log(n)&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;600&lt;/td&gt; &#xA;   &lt;td&gt;9000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quadratic&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;10000&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exponential&lt;/td&gt; &#xA;   &lt;td&gt;1024&lt;/td&gt; &#xA;   &lt;td&gt;1.26e+29&lt;/td&gt; &#xA;   &lt;td&gt;1.07e+301&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Factorial&lt;/td&gt; &#xA;   &lt;td&gt;3628800&lt;/td&gt; &#xA;   &lt;td&gt;9.3e+157&lt;/td&gt; &#xA;   &lt;td&gt;4.02e+2567&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Data Structure&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Access&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Search&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Insertion&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Deletion&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;False positives are possible while searching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Best&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Average&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Worst&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Memory&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Stable&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;depends on gap sequence&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;(log(n))&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;r - biggest number in array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;k - length of longest key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Project Backers&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You may support this project via ❤️️ &lt;a href=&#34;https://github.com/sponsors/trekhleb&#34;&gt;GitHub&lt;/a&gt; or ❤️️ &lt;a href=&#34;https://www.patreon.com/trekhleb&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms/raw/master/BACKERS.md&#34;&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;∑ = 0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ A few more &lt;a href=&#34;https://trekhleb.dev/projects/&#34;&gt;projects&lt;/a&gt; and &lt;a href=&#34;https://trekhleb.dev/blog/&#34;&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href=&#34;https://trekhleb.dev&#34;&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>spicetify/spicetify-cli</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/spicetify/spicetify-cli</id>
    <link href="https://github.com/spicetify/spicetify-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Commandline tool to customize Spotify client. Supports Windows, MacOS and Linux.&lt;/p&gt;&lt;hr&gt;&lt;h3 align=&#34;center&#34;&gt;&lt;a href=&#34;https://spicetify.app/&#34;&gt;&lt;img src=&#34;https://i.imgur.com/iwcLITQ.png&#34; width=&#34;600px&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://goreportcard.com/report/github.com/spicetify/spicetify-cli&#34;&gt;&lt;img src=&#34;https://goreportcard.com/badge/github.com/spicetify/spicetify-cli&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spicetify/spicetify-cli/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/spicetify/spicetify-cli/all.svg?colorB=97CA00?label=version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/spicetify/spicetify-cli/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/spicetify/spicetify-cli/total.svg?colorB=97CA00&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/VnevqPp2Rr&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/842219447716151306?label=chat&amp;amp;logo=discord&amp;amp;logoColor=discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/spicetify&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/spicetify?logo=reddit&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Command-line tool to customize the official Spotify client. Supports Windows, MacOS and Linux.&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/spicetify/spicetify-cli/master/.github/assets/logo.png&#34; alt=&#34;img&#34; align=&#34;right&#34; width=&#34;560px&#34; height=&#34;400px&#34;&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change colors whole UI&lt;/li&gt; &#xA; &lt;li&gt;Inject CSS for advanced customization&lt;/li&gt; &#xA; &lt;li&gt;Inject Extensions (Javascript script) to extend functionalities, manipulate UI and control player.&lt;/li&gt; &#xA; &lt;li&gt;Inject Custom apps&lt;/li&gt; &#xA; &lt;li&gt;Remove bloated components to improve performance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Links&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spicetify.app/docs/getting-started&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spicetify.app/docs/getting-started#basic-usage&#34;&gt;Basic Usage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spicetify.app/docs/development/customization&#34;&gt;Customization&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://spicetify.app/docs/faq&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>HashLips/hashlips_nft_minting_dapp</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/HashLips/hashlips_nft_minting_dapp</id>
    <link href="https://github.com/HashLips/hashlips_nft_minting_dapp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HashLips minting dapp is a quick and easy way to connect your smart contract and start minting NFTs.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to HashLips 👄&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/HashLips/hashlips_nft_minting_dapp/raw/main/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All the code in these repos was created and explained by HashLips on the main YouTube channel.&lt;/p&gt; &#xA;&lt;p&gt;To find out more please visit:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC1LV4_VQGBJHTJjEWUmy8nA&#34;&gt;📺 YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/qh6MWhMJDN&#34;&gt;👄 Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/hashlipsnft&#34;&gt;💬 Telegram&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashlipsnft&#34;&gt;🐦 Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hashlips.online/HashLips&#34;&gt;ℹ️ Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HashLips NFT minting dapp 🔥&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/HashLips/hashlips_nft_minting_dapp/raw/main/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo provides a nice and easy way for linking an existing NFT smart contract to this minting dapp. There are two ways of using this repo, you can go the simple route or the more complex one.&lt;/p&gt; &#xA;&lt;p&gt;The simple route is so simple, all you need to do is download the build folder on the release page and change the configuration to fit your needs. (Follow the video for a walk through).&lt;/p&gt; &#xA;&lt;p&gt;The more complex route allows you to add additional functionality if you are comfortable with coding in react.js. (Follow the below instructions for a walk through).&lt;/p&gt; &#xA;&lt;h2&gt;Installation 🛠️&lt;/h2&gt; &#xA;&lt;p&gt;If you are cloning the project then run this first, otherwise you can download the source code on the release page and skip this step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/HashLips/hashlips_nft_minting_dapp.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have node.js installed so you can use npm, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage ℹ️&lt;/h2&gt; &#xA;&lt;p&gt;In order to make use of this dapp, all you need to do is change the configurations to point to your smart contract as well as update the images and theme file.&lt;/p&gt; &#xA;&lt;p&gt;For the most part all the changes will be in the &lt;code&gt;public&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;To link up your existing smart contract, go to the &lt;code&gt;public/config/config.json&lt;/code&gt; file and update the following fields to fit your smart contract, network and marketplace details. The cost field should be in wei.&lt;/p&gt; &#xA;&lt;p&gt;Note: this dapp is designed to work with the intended NFT smart contract, that only takes one parameter in the mint function &#34;mintAmount&#34;. But you can change that in the App.js file if you need to use a smart contract that takes 2 params.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;CONTRACT_ADDRESS&#34;: &#34;0x827acb09a2dc20e39c9aad7f7190d9bc53534192&#34;,&#xA;  &#34;SCAN_LINK&#34;: &#34;https://polygonscan.com/token/0x827acb09a2dc20e39c9aad7f7190d9bc53534192&#34;,&#xA;  &#34;NETWORK&#34;: {&#xA;    &#34;NAME&#34;: &#34;Polygon&#34;,&#xA;    &#34;SYMBOL&#34;: &#34;Matic&#34;,&#xA;    &#34;ID&#34;: 137&#xA;  },&#xA;  &#34;NFT_NAME&#34;: &#34;Nerdy Coder Clones&#34;,&#xA;  &#34;SYMBOL&#34;: &#34;NCC&#34;,&#xA;  &#34;MAX_SUPPLY&#34;: 1000,&#xA;  &#34;WEI_COST&#34;: 75000000000000000,&#xA;  &#34;DISPLAY_COST&#34;: 0.075,&#xA;  &#34;GAS_LIMIT&#34;: 285000,&#xA;  &#34;MARKETPLACE&#34;: &#34;OpenSea&#34;,&#xA;  &#34;MARKETPLACE_LINK&#34;: &#34;https://opensea.io/collection/nerdy-coder-clones&#34;,&#xA;  &#34;SHOW_BACKGROUND&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you copy the contract ABI from remix and paste it in the &lt;code&gt;public/config/abi.json&lt;/code&gt; file. (follow the youtube video if you struggle with this part).&lt;/p&gt; &#xA;&lt;p&gt;Now you will need to create and change 2 images and a gif in the &lt;code&gt;public/config/images&lt;/code&gt; folder, &lt;code&gt;bg.png&lt;/code&gt;, &lt;code&gt;example.gif&lt;/code&gt; and &lt;code&gt;logo.png&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Next change the theme colors to your liking in the &lt;code&gt;public/config/theme.css&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;:root {&#xA;  --primary: #ebc908;&#xA;  --primary-text: #1a1a1a;&#xA;  --secondary: #ff1dec;&#xA;  --secondary-text: #ffffff;&#xA;  --accent: #ffffff;&#xA;  --accent-text: #000000;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you will need to create and change the &lt;code&gt;public/favicon.ico&lt;/code&gt;, &lt;code&gt;public/logo192.png&lt;/code&gt;, and &lt;code&gt;public/logo512.png&lt;/code&gt; to your brand images.&lt;/p&gt; &#xA;&lt;p&gt;Remember to update the title and description the &lt;code&gt;public/index.html&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;title&amp;gt;Nerdy Coder Clones&amp;lt;/title&amp;gt;&#xA;&amp;lt;meta name=&#34;description&#34; content=&#34;Mint your Nerdy Coder Clone NFT&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also remember to update the short_name and name fields in the &lt;code&gt;public/manifest.json&lt;/code&gt; file&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;short_name&#34;: &#34;NCC&#34;,&#xA;  &#34;name&#34;: &#34;Coder Clone NFT&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After all the changes you can run.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or create the build if you are ready to deploy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can host the contents of the build folder on a server.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it! you&#39;re done.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>rolling-scopes-school/tasks</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/rolling-scopes-school/tasks</id>
    <link href="https://github.com/rolling-scopes-school/tasks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Курс JS/Frontend-разработка&lt;/h1&gt; &#xA;&lt;p&gt;Это бесплатный курс по JavaScript / Front-end, проводимый сообществом с 2013 года. В RS School может учиться каждый, независимо от возраста, профессии, места жительства. Новый набор студентов стартует каждые полгода и насчитывает около 6000-7000 человек. Для продуктивного обучения студентам помогают 250+ менторов.&lt;/p&gt; &#xA;&lt;p&gt;Цель курса — получение студентами знаний и опыта, достаточного для трудоустройства на позицию Junior Software Engineer в области JavaScript / Front-end.&lt;/p&gt; &#xA;&lt;p&gt;За период с 1 октября 2020 по 1 июня 2021 только в компанию EPAM Systems трудоустроилось 208 выпускников нашего курса.&lt;/p&gt; &#xA;&lt;p&gt;Больше информации о RS School находится тут: &lt;a href=&#34;https://docs.rs.school/#/&#34;&gt;https://docs.rs.school/#/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Продолжительность обучения&lt;/h3&gt; &#xA;&lt;p&gt;5-7 месяцев. Для успешного прохождения программы вам потребуется 20-40 часов в неделю.&lt;/p&gt; &#xA;&lt;h3&gt;Программа обучения&lt;/h3&gt; &#xA;&lt;p&gt;Программа обучения находится &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/roadmap.md&#34;&gt;тут&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Регистрация&lt;/h1&gt; &#xA;&lt;p&gt;Мы предлагаем два варианта регистрации в зависимости от уровня вашей подготовки.&lt;/p&gt; &#xA;&lt;h3&gt;Регистрация на подготовительный курс&lt;/h3&gt; &#xA;&lt;p&gt;Подготовительный курс предназначен для тех, кто мало знаком или незнаком с программированием, но хотел бы в дальнейшем учиться на основном курсе JavaScript / Front-end.&lt;/p&gt; &#xA;&lt;p&gt;Программу обучения подготовительного курса можно посмотреть &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/stage0/&#34;&gt;тут&lt;/a&gt;. Регистрацию на ближайший запуск можно найти тут: &lt;a href=&#34;https://rs.school/js-stage0/&#34;&gt;https://rs.school/js-stage0/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Регистрация на основной курс JavaScript / Front-end&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Внимание!&lt;/strong&gt; Основной курс требует наличия у студентов базовых знаний:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;понимание основ HTML и CSS, наличие практических навыков вёрстки;&lt;/li&gt; &#xA; &lt;li&gt;знание основ JavaScript (типы данных, операторы, циклы, условные констуркции, функции);&lt;/li&gt; &#xA; &lt;li&gt;знание структуры данных и их организации (массив, список, стек, очередь, дерево и т.д.);&lt;/li&gt; &#xA; &lt;li&gt;умение реализовать достаточно простой алгоритм на языке программирования JavaScript. Например, сортировку или поиск элементов массива;&lt;/li&gt; &#xA; &lt;li&gt;умение решать задачи уровня 8-7 kyu на сайте &lt;a href=&#34;https://www.codewars.com/&#34;&gt;https://www.codewars.com/&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;(желательно) английский язык уровня Pre-intermediate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Программу обучения можно посмотреть &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/roadmap.md&#34;&gt;тут&lt;/a&gt;. Регистрацию на ближайший запуск можно найти тут: &lt;a href=&#34;https://rs.school/js/&#34;&gt;https://rs.school/js/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Где можно задать вопрос?&lt;/h3&gt; &#xA;&lt;p&gt;Вопросы можно задать в Discord чате: &lt;a href=&#34;https://discord.gg/8Dv4bAw6Hx&#34;&gt;https://discord.gg/8Dv4bAw6Hx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Имеет ли значения город проживания? Можно ли пройти курс полностью онлайн?&lt;/h3&gt; &#xA;&lt;p&gt;Город проживания значения не имеет. Все этапы обучения можно пройти онлайн.&lt;/p&gt; &#xA;&lt;h3&gt;Что делать до старта обучения?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Выполнить задания и тесты &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/stage0/&#34;&gt;подготовительного курса&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Пойти на курсы английского языка до получения уровня Pre-Intermediate (Минимум A2).&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>ryanmcdermott/clean-code-javascript</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ryanmcdermott/clean-code-javascript</id>
    <link href="https://github.com/ryanmcdermott/clean-code-javascript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🛁 Clean Code concepts adapted for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;clean-code-javascript&lt;/h1&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#variables&#34;&gt;Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#functions&#34;&gt;Functions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#objects-and-data-structures&#34;&gt;Objects and Data Structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#classes&#34;&gt;Classes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#solid&#34;&gt;SOLID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#concurrency&#34;&gt;Concurrency&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#error-handling&#34;&gt;Error Handling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#formatting&#34;&gt;Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#translation&#34;&gt;Translation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.osnews.com/images/comics/wtfm.jpg&#34; alt=&#34;Humorous image of software quality estimation as a count of how many expletives you shout when reading code&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Software engineering principles, from Robert C. Martin&#39;s book &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882&#34;&gt;&lt;em&gt;Clean Code&lt;/em&gt;&lt;/a&gt;, adapted for JavaScript. This is not a style guide. It&#39;s a guide to producing &lt;a href=&#34;https://github.com/ryanmcdermott/3rs-of-software-architecture&#34;&gt;readable, reusable, and refactorable&lt;/a&gt; software in JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;Not every principle herein has to be strictly followed, and even fewer will be universally agreed upon. These are guidelines and nothing more, but they are ones codified over many years of collective experience by the authors of &lt;em&gt;Clean Code&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our craft of software engineering is just a bit over 50 years old, and we are still learning a lot. When software architecture is as old as architecture itself, maybe then we will have harder rules to follow. For now, let these guidelines serve as a touchstone by which to assess the quality of the JavaScript code that you and your team produce.&lt;/p&gt; &#xA;&lt;p&gt;One more thing: knowing these won&#39;t immediately make you a better software developer, and working with them for many years doesn&#39;t mean you won&#39;t make mistakes. Every piece of code starts as a first draft, like wet clay getting shaped into its final form. Finally, we chisel away the imperfections when we review it with our peers. Don&#39;t beat yourself up for first drafts that need improvement. Beat up the code instead!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Variables&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use meaningful and pronounceable variable names&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const yyyymmdstr = moment().format(&#34;YYYY/MM/DD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const currentDate = moment().format(&#34;YYYY/MM/DD&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use the same vocabulary for the same type of variable&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getUserInfo();&#xA;getClientData();&#xA;getCustomerRecord();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getUser();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use searchable names&lt;/h3&gt; &#xA;&lt;p&gt;We will read more code than we will ever write. It&#39;s important that the code we do write is readable and searchable. By &lt;em&gt;not&lt;/em&gt; naming variables that end up being meaningful for understanding our program, we hurt our readers. Make your names searchable. Tools like &lt;a href=&#34;https://github.com/danielstjules/buddy.js&#34;&gt;buddy.js&lt;/a&gt; and &lt;a href=&#34;https://github.com/eslint/eslint/raw/660e0918933e6e7fede26bc675a0763a6b357c94/docs/rules/no-magic-numbers.md&#34;&gt;ESLint&lt;/a&gt; can help identify unnamed constants.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// What the heck is 86400000 for?&#xA;setTimeout(blastOff, 86400000);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Declare them as capitalized named constants.&#xA;const MILLISECONDS_PER_DAY = 60 * 60 * 24 * 1000; //86400000;&#xA;&#xA;setTimeout(blastOff, MILLISECONDS_PER_DAY);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use explanatory variables&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;&#xA;saveCityZipCode(&#xA;  address.match(cityZipCodeRegex)[1],&#xA;  address.match(cityZipCodeRegex)[2]&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const address = &#34;One Infinite Loop, Cupertino 95014&#34;;&#xA;const cityZipCodeRegex = /^[^,\\]+[,\\\s]+(.+?)\s*(\d{5})?$/;&#xA;const [_, city, zipCode] = address.match(cityZipCodeRegex) || [];&#xA;saveCityZipCode(city, zipCode);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Mental Mapping&lt;/h3&gt; &#xA;&lt;p&gt;Explicit is better than implicit.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const locations = [&#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34;];&#xA;locations.forEach(l =&amp;gt; {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  // Wait, what is `l` for again?&#xA;  dispatch(l);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const locations = [&#34;Austin&#34;, &#34;New York&#34;, &#34;San Francisco&#34;];&#xA;locations.forEach(location =&amp;gt; {&#xA;  doStuff();&#xA;  doSomeOtherStuff();&#xA;  // ...&#xA;  // ...&#xA;  // ...&#xA;  dispatch(location);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t add unneeded context&lt;/h3&gt; &#xA;&lt;p&gt;If your class/object name tells you something, don&#39;t repeat that in your variable name.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Car = {&#xA;  carMake: &#34;Honda&#34;,&#xA;  carModel: &#34;Accord&#34;,&#xA;  carColor: &#34;Blue&#34;&#xA;};&#xA;&#xA;function paintCar(car, color) {&#xA;  car.carColor = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Car = {&#xA;  make: &#34;Honda&#34;,&#xA;  model: &#34;Accord&#34;,&#xA;  color: &#34;Blue&#34;&#xA;};&#xA;&#xA;function paintCar(car, color) {&#xA;  car.color = color;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use default arguments instead of short circuiting or conditionals&lt;/h3&gt; &#xA;&lt;p&gt;Default arguments are often cleaner than short circuiting. Be aware that if you use them, your function will only provide default values for &lt;code&gt;undefined&lt;/code&gt; arguments. Other &#34;falsy&#34; values such as &lt;code&gt;&#39;&#39;&lt;/code&gt;, &lt;code&gt;&#34;&#34;&lt;/code&gt;, &lt;code&gt;false&lt;/code&gt;, &lt;code&gt;null&lt;/code&gt;, &lt;code&gt;0&lt;/code&gt;, and &lt;code&gt;NaN&lt;/code&gt;, will not be replaced by a default value.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMicrobrewery(name) {&#xA;  const breweryName = name || &#34;Hipster Brew Co.&#34;;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMicrobrewery(name = &#34;Hipster Brew Co.&#34;) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Functions&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Function arguments (2 or fewer ideally)&lt;/h3&gt; &#xA;&lt;p&gt;Limiting the amount of function parameters is incredibly important because it makes testing your function easier. Having more than three leads to a combinatorial explosion where you have to test tons of different cases with each separate argument.&lt;/p&gt; &#xA;&lt;p&gt;One or two arguments is the ideal case, and three should be avoided if possible. Anything more than that should be consolidated. Usually, if you have more than two arguments then your function is trying to do too much. In cases where it&#39;s not, most of the time a higher-level object will suffice as an argument.&lt;/p&gt; &#xA;&lt;p&gt;Since JavaScript allows you to make objects on the fly, without a lot of class boilerplate, you can use an object if you are finding yourself needing a lot of arguments.&lt;/p&gt; &#xA;&lt;p&gt;To make it obvious what properties the function expects, you can use the ES2015/ES6 destructuring syntax. This has a few advantages:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;When someone looks at the function signature, it&#39;s immediately clear what properties are being used.&lt;/li&gt; &#xA; &lt;li&gt;It can be used to simulate named parameters.&lt;/li&gt; &#xA; &lt;li&gt;Destructuring also clones the specified primitive values of the argument object passed into the function. This can help prevent side effects. Note: objects and arrays that are destructured from the argument object are NOT cloned.&lt;/li&gt; &#xA; &lt;li&gt;Linters can warn you about unused properties, which would be impossible without destructuring.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMenu(title, body, buttonText, cancellable) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu(&#34;Foo&#34;, &#34;Bar&#34;, &#34;Baz&#34;, true);&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createMenu({ title, body, buttonText, cancellable }) {&#xA;  // ...&#xA;}&#xA;&#xA;createMenu({&#xA;  title: &#34;Foo&#34;,&#xA;  body: &#34;Bar&#34;,&#xA;  buttonText: &#34;Baz&#34;,&#xA;  cancellable: true&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should do one thing&lt;/h3&gt; &#xA;&lt;p&gt;This is by far the most important rule in software engineering. When functions do more than one thing, they are harder to compose, test, and reason about. When you can isolate a function to just one action, it can be refactored easily and your code will read much cleaner. If you take nothing else away from this guide other than this, you&#39;ll be ahead of many developers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function emailClients(clients) {&#xA;  clients.forEach(client =&amp;gt; {&#xA;    const clientRecord = database.lookup(client);&#xA;    if (clientRecord.isActive()) {&#xA;      email(client);&#xA;    }&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function emailActiveClients(clients) {&#xA;  clients.filter(isActiveClient).forEach(email);&#xA;}&#xA;&#xA;function isActiveClient(client) {&#xA;  const clientRecord = database.lookup(client);&#xA;  return clientRecord.isActive();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function names should say what they do&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function addToDate(date, month) {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;&#xA;// It&#39;s hard to tell from the function name what is added&#xA;addToDate(date, 1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function addMonthToDate(month, date) {&#xA;  // ...&#xA;}&#xA;&#xA;const date = new Date();&#xA;addMonthToDate(1, date);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Functions should only be one level of abstraction&lt;/h3&gt; &#xA;&lt;p&gt;When you have more than one level of abstraction your function is usually doing too much. Splitting up functions leads to reusability and easier testing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function parseBetterJSAlternative(code) {&#xA;  const REGEXES = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  const statements = code.split(&#34; &#34;);&#xA;  const tokens = [];&#xA;  REGEXES.forEach(REGEX =&amp;gt; {&#xA;    statements.forEach(statement =&amp;gt; {&#xA;      // ...&#xA;    });&#xA;  });&#xA;&#xA;  const ast = [];&#xA;  tokens.forEach(token =&amp;gt; {&#xA;    // lex...&#xA;  });&#xA;&#xA;  ast.forEach(node =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function parseBetterJSAlternative(code) {&#xA;  const tokens = tokenize(code);&#xA;  const syntaxTree = parse(tokens);&#xA;  syntaxTree.forEach(node =&amp;gt; {&#xA;    // parse...&#xA;  });&#xA;}&#xA;&#xA;function tokenize(code) {&#xA;  const REGEXES = [&#xA;    // ...&#xA;  ];&#xA;&#xA;  const statements = code.split(&#34; &#34;);&#xA;  const tokens = [];&#xA;  REGEXES.forEach(REGEX =&amp;gt; {&#xA;    statements.forEach(statement =&amp;gt; {&#xA;      tokens.push(/* ... */);&#xA;    });&#xA;  });&#xA;&#xA;  return tokens;&#xA;}&#xA;&#xA;function parse(tokens) {&#xA;  const syntaxTree = [];&#xA;  tokens.forEach(token =&amp;gt; {&#xA;    syntaxTree.push(/* ... */);&#xA;  });&#xA;&#xA;  return syntaxTree;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove duplicate code&lt;/h3&gt; &#xA;&lt;p&gt;Do your absolute best to avoid duplicate code. Duplicate code is bad because it means that there&#39;s more than one place to alter something if you need to change some logic.&lt;/p&gt; &#xA;&lt;p&gt;Imagine if you run a restaurant and you keep track of your inventory: all your tomatoes, onions, garlic, spices, etc. If you have multiple lists that you keep this on, then all have to be updated when you serve a dish with tomatoes in them. If you only have one list, there&#39;s only one place to update!&lt;/p&gt; &#xA;&lt;p&gt;Oftentimes you have duplicate code because you have two or more slightly different things, that share a lot in common, but their differences force you to have two or more separate functions that do much of the same things. Removing duplicate code means creating an abstraction that can handle this set of different things with just one function/module/class.&lt;/p&gt; &#xA;&lt;p&gt;Getting the abstraction right is critical, that&#39;s why you should follow the SOLID principles laid out in the &lt;em&gt;Classes&lt;/em&gt; section. Bad abstractions can be worse than duplicate code, so be careful! Having said this, if you can make a good abstraction, do it! Don&#39;t repeat yourself, otherwise you&#39;ll find yourself updating multiple places anytime you want to change one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function showDeveloperList(developers) {&#xA;  developers.forEach(developer =&amp;gt; {&#xA;    const expectedSalary = developer.calculateExpectedSalary();&#xA;    const experience = developer.getExperience();&#xA;    const githubLink = developer.getGithubLink();&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      githubLink&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&#xA;function showManagerList(managers) {&#xA;  managers.forEach(manager =&amp;gt; {&#xA;    const expectedSalary = manager.calculateExpectedSalary();&#xA;    const experience = manager.getExperience();&#xA;    const portfolio = manager.getMBAProjects();&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience,&#xA;      portfolio&#xA;    };&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function showEmployeeList(employees) {&#xA;  employees.forEach(employee =&amp;gt; {&#xA;    const expectedSalary = employee.calculateExpectedSalary();&#xA;    const experience = employee.getExperience();&#xA;&#xA;    const data = {&#xA;      expectedSalary,&#xA;      experience&#xA;    };&#xA;&#xA;    switch (employee.type) {&#xA;      case &#34;manager&#34;:&#xA;        data.portfolio = employee.getMBAProjects();&#xA;        break;&#xA;      case &#34;developer&#34;:&#xA;        data.githubLink = employee.getGithubLink();&#xA;        break;&#xA;    }&#xA;&#xA;    render(data);&#xA;  });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Set default objects with Object.assign&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const menuConfig = {&#xA;  title: null,&#xA;  body: &#34;Bar&#34;,&#xA;  buttonText: null,&#xA;  cancellable: true&#xA;};&#xA;&#xA;function createMenu(config) {&#xA;  config.title = config.title || &#34;Foo&#34;;&#xA;  config.body = config.body || &#34;Bar&#34;;&#xA;  config.buttonText = config.buttonText || &#34;Baz&#34;;&#xA;  config.cancellable =&#xA;    config.cancellable !== undefined ? config.cancellable : true;&#xA;}&#xA;&#xA;createMenu(menuConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const menuConfig = {&#xA;  title: &#34;Order&#34;,&#xA;  // User did not include &#39;body&#39; key&#xA;  buttonText: &#34;Send&#34;,&#xA;  cancellable: true&#xA;};&#xA;&#xA;function createMenu(config) {&#xA;  let finalConfig = Object.assign(&#xA;    {&#xA;      title: &#34;Foo&#34;,&#xA;      body: &#34;Bar&#34;,&#xA;      buttonText: &#34;Baz&#34;,&#xA;      cancellable: true&#xA;    },&#xA;    config&#xA;  );&#xA;  return finalConfig&#xA;  // config now equals: {title: &#34;Order&#34;, body: &#34;Bar&#34;, buttonText: &#34;Send&#34;, cancellable: true}&#xA;  // ...&#xA;}&#xA;&#xA;createMenu(menuConfig);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t use flags as function parameters&lt;/h3&gt; &#xA;&lt;p&gt;Flags tell your user that this function does more than one thing. Functions should do one thing. Split out your functions if they are following different code paths based on a boolean.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createFile(name, temp) {&#xA;  if (temp) {&#xA;    fs.create(`./temp/${name}`);&#xA;  } else {&#xA;    fs.create(name);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function createFile(name) {&#xA;  fs.create(name);&#xA;}&#xA;&#xA;function createTempFile(name) {&#xA;  createFile(`./temp/${name}`);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;A function produces a side effect if it does anything other than take a value in and return another value or values. A side effect could be writing to a file, modifying some global variable, or accidentally wiring all your money to a stranger.&lt;/p&gt; &#xA;&lt;p&gt;Now, you do need to have side effects in a program on occasion. Like the previous example, you might need to write to a file. What you want to do is to centralize where you are doing this. Don&#39;t have several functions and classes that write to a particular file. Have one service that does it. One and only one.&lt;/p&gt; &#xA;&lt;p&gt;The main point is to avoid common pitfalls like sharing state between objects without any structure, using mutable data types that can be written to by anything, and not centralizing where your side effects occur. If you can do this, you will be happier than the vast majority of other programmers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Global variable referenced by following function.&#xA;// If we had another function that used this name, now it&#39;d be an array and it could break it.&#xA;let name = &#34;Ryan McDermott&#34;;&#xA;&#xA;function splitIntoFirstAndLastName() {&#xA;  name = name.split(&#34; &#34;);&#xA;}&#xA;&#xA;splitIntoFirstAndLastName();&#xA;&#xA;console.log(name); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function splitIntoFirstAndLastName(name) {&#xA;  return name.split(&#34; &#34;);&#xA;}&#xA;&#xA;const name = &#34;Ryan McDermott&#34;;&#xA;const newName = splitIntoFirstAndLastName(name);&#xA;&#xA;console.log(name); // &#39;Ryan McDermott&#39;;&#xA;console.log(newName); // [&#39;Ryan&#39;, &#39;McDermott&#39;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid Side Effects (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;In JavaScript, some values are unchangeable (immutable) and some are changeable (mutable). Objects and arrays are two kinds of mutable values so it&#39;s important to handle them carefully when they&#39;re passed as parameters to a function. A JavaScript function can change an object&#39;s properties or alter the contents of an array which could easily cause bugs elsewhere.&lt;/p&gt; &#xA;&lt;p&gt;Suppose there&#39;s a function that accepts an array parameter representing a shopping cart. If the function makes a change in that shopping cart array - by adding an item to purchase, for example - then any other function that uses that same &lt;code&gt;cart&lt;/code&gt; array will be affected by this addition. That may be great, however it could also be bad. Let&#39;s imagine a bad situation:&lt;/p&gt; &#xA;&lt;p&gt;The user clicks the &#34;Purchase&#34; button which calls a &lt;code&gt;purchase&lt;/code&gt; function that spawns a network request and sends the &lt;code&gt;cart&lt;/code&gt; array to the server. Because of a bad network connection, the &lt;code&gt;purchase&lt;/code&gt; function has to keep retrying the request. Now, what if in the meantime the user accidentally clicks an &#34;Add to Cart&#34; button on an item they don&#39;t actually want before the network request begins? If that happens and the network request begins, then that purchase function will send the accidentally added item because the &lt;code&gt;cart&lt;/code&gt; array was modified.&lt;/p&gt; &#xA;&lt;p&gt;A great solution would be for the &lt;code&gt;addItemToCart&lt;/code&gt; function to always clone the &lt;code&gt;cart&lt;/code&gt;, edit it, and return the clone. This would ensure that functions that are still using the old shopping cart wouldn&#39;t be affected by the changes.&lt;/p&gt; &#xA;&lt;p&gt;Two caveats to mention to this approach:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;There might be cases where you actually want to modify the input object, but when you adopt this programming practice you will find that those cases are pretty rare. Most things can be refactored to have no side effects!&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Cloning big objects can be very expensive in terms of performance. Luckily, this isn&#39;t a big issue in practice because there are &lt;a href=&#34;https://facebook.github.io/immutable-js/&#34;&gt;great libraries&lt;/a&gt; that allow this kind of programming approach to be fast and not as memory intensive as it would be for you to manually clone objects and arrays.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const addItemToCart = (cart, item) =&amp;gt; {&#xA;  cart.push({ item, date: Date.now() });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const addItemToCart = (cart, item) =&amp;gt; {&#xA;  return [...cart, { item, date: Date.now() }];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t write to global functions&lt;/h3&gt; &#xA;&lt;p&gt;Polluting globals is a bad practice in JavaScript because you could clash with another library and the user of your API would be none-the-wiser until they get an exception in production. Let&#39;s think about an example: what if you wanted to extend JavaScript&#39;s native Array method to have a &lt;code&gt;diff&lt;/code&gt; method that could show the difference between two arrays? You could write your new function to the &lt;code&gt;Array.prototype&lt;/code&gt;, but it could clash with another library that tried to do the same thing. What if that other library was just using &lt;code&gt;diff&lt;/code&gt; to find the difference between the first and last elements of an array? This is why it would be much better to just use ES2015/ES6 classes and simply extend the &lt;code&gt;Array&lt;/code&gt; global.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Array.prototype.diff = function diff(comparisonArray) {&#xA;  const hash = new Set(comparisonArray);&#xA;  return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class SuperArray extends Array {&#xA;  diff(comparisonArray) {&#xA;    const hash = new Set(comparisonArray);&#xA;    return this.filter(elem =&amp;gt; !hash.has(elem));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Favor functional programming over imperative programming&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript isn&#39;t a functional language in the way that Haskell is, but it has a functional flavor to it. Functional languages can be cleaner and easier to test. Favor this style of programming when you can.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const programmerOutput = [&#xA;  {&#xA;    name: &#34;Uncle Bobby&#34;,&#xA;    linesOfCode: 500&#xA;  },&#xA;  {&#xA;    name: &#34;Suzie Q&#34;,&#xA;    linesOfCode: 1500&#xA;  },&#xA;  {&#xA;    name: &#34;Jimmy Gosling&#34;,&#xA;    linesOfCode: 150&#xA;  },&#xA;  {&#xA;    name: &#34;Gracie Hopper&#34;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;let totalOutput = 0;&#xA;&#xA;for (let i = 0; i &amp;lt; programmerOutput.length; i++) {&#xA;  totalOutput += programmerOutput[i].linesOfCode;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const programmerOutput = [&#xA;  {&#xA;    name: &#34;Uncle Bobby&#34;,&#xA;    linesOfCode: 500&#xA;  },&#xA;  {&#xA;    name: &#34;Suzie Q&#34;,&#xA;    linesOfCode: 1500&#xA;  },&#xA;  {&#xA;    name: &#34;Jimmy Gosling&#34;,&#xA;    linesOfCode: 150&#xA;  },&#xA;  {&#xA;    name: &#34;Gracie Hopper&#34;,&#xA;    linesOfCode: 1000&#xA;  }&#xA;];&#xA;&#xA;const totalOutput = programmerOutput.reduce(&#xA;  (totalLines, output) =&amp;gt; totalLines + output.linesOfCode,&#xA;  0&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Encapsulate conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (fsm.state === &#34;fetching&#34; &amp;amp;&amp;amp; isEmpty(listNode)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function shouldShowSpinner(fsm, listNode) {&#xA;  return fsm.state === &#34;fetching&#34; &amp;amp;&amp;amp; isEmpty(listNode);&#xA;}&#xA;&#xA;if (shouldShowSpinner(fsmInstance, listNodeInstance)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid negative conditionals&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isDOMNodeNotPresent(node) {&#xA;  // ...&#xA;}&#xA;&#xA;if (!isDOMNodeNotPresent(node)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function isDOMNodePresent(node) {&#xA;  // ...&#xA;}&#xA;&#xA;if (isDOMNodePresent(node)) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid conditionals&lt;/h3&gt; &#xA;&lt;p&gt;This seems like an impossible task. Upon first hearing this, most people say, &#34;how am I supposed to do anything without an &lt;code&gt;if&lt;/code&gt; statement?&#34; The answer is that you can use polymorphism to achieve the same task in many cases. The second question is usually, &#34;well that&#39;s great but why would I want to do that?&#34; The answer is a previous clean code concept we learned: a function should only do one thing. When you have classes and functions that have &lt;code&gt;if&lt;/code&gt; statements, you are telling your user that your function does more than one thing. Remember, just do one thing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    switch (this.type) {&#xA;      case &#34;777&#34;:&#xA;        return this.getMaxAltitude() - this.getPassengerCount();&#xA;      case &#34;Air Force One&#34;:&#xA;        return this.getMaxAltitude();&#xA;      case &#34;Cessna&#34;:&#xA;        return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Airplane {&#xA;  // ...&#xA;}&#xA;&#xA;class Boeing777 extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getPassengerCount();&#xA;  }&#xA;}&#xA;&#xA;class AirForceOne extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude();&#xA;  }&#xA;}&#xA;&#xA;class Cessna extends Airplane {&#xA;  // ...&#xA;  getCruisingAltitude() {&#xA;    return this.getMaxAltitude() - this.getFuelExpenditure();&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 1)&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript is untyped, which means your functions can take any type of argument. Sometimes you are bitten by this freedom and it becomes tempting to do type-checking in your functions. There are many ways to avoid having to do this. The first thing to consider is consistent APIs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function travelToTexas(vehicle) {&#xA;  if (vehicle instanceof Bicycle) {&#xA;    vehicle.pedal(this.currentLocation, new Location(&#34;texas&#34;));&#xA;  } else if (vehicle instanceof Car) {&#xA;    vehicle.drive(this.currentLocation, new Location(&#34;texas&#34;));&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function travelToTexas(vehicle) {&#xA;  vehicle.move(this.currentLocation, new Location(&#34;texas&#34;));&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid type-checking (part 2)&lt;/h3&gt; &#xA;&lt;p&gt;If you are working with basic primitive values like strings and integers, and you can&#39;t use polymorphism but you still feel the need to type-check, you should consider using TypeScript. It is an excellent alternative to normal JavaScript, as it provides you with static typing on top of standard JavaScript syntax. The problem with manually type-checking normal JavaScript is that doing it well requires so much extra verbiage that the faux &#34;type-safety&#34; you get doesn&#39;t make up for the lost readability. Keep your JavaScript clean, write good tests, and have good code reviews. Otherwise, do all of that but with TypeScript (which, like I said, is a great alternative!).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(val1, val2) {&#xA;  if (&#xA;    (typeof val1 === &#34;number&#34; &amp;amp;&amp;amp; typeof val2 === &#34;number&#34;) ||&#xA;    (typeof val1 === &#34;string&#34; &amp;amp;&amp;amp; typeof val2 === &#34;string&#34;)&#xA;  ) {&#xA;    return val1 + val2;&#xA;  }&#xA;&#xA;  throw new Error(&#34;Must be of type String or Number&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(val1, val2) {&#xA;  return val1 + val2;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t over-optimize&lt;/h3&gt; &#xA;&lt;p&gt;Modern browsers do a lot of optimization under-the-hood at runtime. A lot of times, if you are optimizing then you are just wasting your time. &lt;a href=&#34;https://github.com/petkaantonov/bluebird/wiki/Optimization-killers&#34;&gt;There are good resources&lt;/a&gt; for seeing where optimization is lacking. Target those in the meantime, until they are fixed if they can be.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// On old browsers, each iteration with uncached `list.length` would be costly&#xA;// because of `list.length` recomputation. In modern browsers, this is optimized.&#xA;for (let i = 0, len = list.length; i &amp;lt; len; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;for (let i = 0; i &amp;lt; list.length; i++) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Remove dead code&lt;/h3&gt; &#xA;&lt;p&gt;Dead code is just as bad as duplicate code. There&#39;s no reason to keep it in your codebase. If it&#39;s not being called, get rid of it! It will still be safe in your version history if you still need it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function oldRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;function newRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = newRequestModule;&#xA;inventoryTracker(&#34;apples&#34;, req, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function newRequestModule(url) {&#xA;  // ...&#xA;}&#xA;&#xA;const req = newRequestModule;&#xA;inventoryTracker(&#34;apples&#34;, req, &#34;www.inventory-awesome.io&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Objects and Data Structures&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use getters and setters&lt;/h3&gt; &#xA;&lt;p&gt;Using getters and setters to access data on objects could be better than simply looking for a property on an object. &#34;Why?&#34; you might ask. Well, here&#39;s an unorganized list of reasons why:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When you want to do more beyond getting an object property, you don&#39;t have to look up and change every accessor in your codebase.&lt;/li&gt; &#xA; &lt;li&gt;Makes adding validation simple when doing a &lt;code&gt;set&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Encapsulates the internal representation.&lt;/li&gt; &#xA; &lt;li&gt;Easy to add logging and error handling when getting and setting.&lt;/li&gt; &#xA; &lt;li&gt;You can lazy load your object&#39;s properties, let&#39;s say getting it from a server.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeBankAccount() {&#xA;  // ...&#xA;&#xA;  return {&#xA;    balance: 0&#xA;    // ...&#xA;  };&#xA;}&#xA;&#xA;const account = makeBankAccount();&#xA;account.balance = 100;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeBankAccount() {&#xA;  // this one is private&#xA;  let balance = 0;&#xA;&#xA;  // a &#34;getter&#34;, made public via the returned object below&#xA;  function getBalance() {&#xA;    return balance;&#xA;  }&#xA;&#xA;  // a &#34;setter&#34;, made public via the returned object below&#xA;  function setBalance(amount) {&#xA;    // ... validate before updating the balance&#xA;    balance = amount;&#xA;  }&#xA;&#xA;  return {&#xA;    // ...&#xA;    getBalance,&#xA;    setBalance&#xA;  };&#xA;}&#xA;&#xA;const account = makeBankAccount();&#xA;account.setBalance(100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Make objects have private members&lt;/h3&gt; &#xA;&lt;p&gt;This can be accomplished through closures (for ES5 and below).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Employee = function(name) {&#xA;  this.name = name;&#xA;};&#xA;&#xA;Employee.prototype.getName = function getName() {&#xA;  return this.name;&#xA;};&#xA;&#xA;const employee = new Employee(&#34;John Doe&#34;);&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;delete employee.name;&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function makeEmployee(name) {&#xA;  return {&#xA;    getName() {&#xA;      return name;&#xA;    }&#xA;  };&#xA;}&#xA;&#xA;const employee = makeEmployee(&#34;John Doe&#34;);&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;delete employee.name;&#xA;console.log(`Employee name: ${employee.getName()}`); // Employee name: John Doe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Classes&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Prefer ES2015/ES6 classes over ES5 plain functions&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s very difficult to get readable class inheritance, construction, and method definitions for classical ES5 classes. If you need inheritance (and be aware that you might not), then prefer ES2015/ES6 classes. However, prefer small functions over classes until you find yourself needing larger and more complex objects.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Animal = function(age) {&#xA;  if (!(this instanceof Animal)) {&#xA;    throw new Error(&#34;Instantiate Animal with `new`&#34;);&#xA;  }&#xA;&#xA;  this.age = age;&#xA;};&#xA;&#xA;Animal.prototype.move = function move() {};&#xA;&#xA;const Mammal = function(age, furColor) {&#xA;  if (!(this instanceof Mammal)) {&#xA;    throw new Error(&#34;Instantiate Mammal with `new`&#34;);&#xA;  }&#xA;&#xA;  Animal.call(this, age);&#xA;  this.furColor = furColor;&#xA;};&#xA;&#xA;Mammal.prototype = Object.create(Animal.prototype);&#xA;Mammal.prototype.constructor = Mammal;&#xA;Mammal.prototype.liveBirth = function liveBirth() {};&#xA;&#xA;const Human = function(age, furColor, languageSpoken) {&#xA;  if (!(this instanceof Human)) {&#xA;    throw new Error(&#34;Instantiate Human with `new`&#34;);&#xA;  }&#xA;&#xA;  Mammal.call(this, age, furColor);&#xA;  this.languageSpoken = languageSpoken;&#xA;};&#xA;&#xA;Human.prototype = Object.create(Mammal.prototype);&#xA;Human.prototype.constructor = Human;&#xA;Human.prototype.speak = function speak() {};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Animal {&#xA;  constructor(age) {&#xA;    this.age = age;&#xA;  }&#xA;&#xA;  move() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&#xA;class Mammal extends Animal {&#xA;  constructor(age, furColor) {&#xA;    super(age);&#xA;    this.furColor = furColor;&#xA;  }&#xA;&#xA;  liveBirth() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&#xA;class Human extends Mammal {&#xA;  constructor(age, furColor, languageSpoken) {&#xA;    super(age, furColor);&#xA;    this.languageSpoken = languageSpoken;&#xA;  }&#xA;&#xA;  speak() {&#xA;    /* ... */&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Use method chaining&lt;/h3&gt; &#xA;&lt;p&gt;This pattern is very useful in JavaScript and you see it in many libraries such as jQuery and Lodash. It allows your code to be expressive, and less verbose. For that reason, I say, use method chaining and take a look at how clean your code will be. In your class functions, simply return &lt;code&gt;this&lt;/code&gt; at the end of every function, and you can chain further class methods onto it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Car {&#xA;  constructor(make, model, color) {&#xA;    this.make = make;&#xA;    this.model = model;&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  setMake(make) {&#xA;    this.make = make;&#xA;  }&#xA;&#xA;  setModel(model) {&#xA;    this.model = model;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  save() {&#xA;    console.log(this.make, this.model, this.color);&#xA;  }&#xA;}&#xA;&#xA;const car = new Car(&#34;Ford&#34;, &#34;F-150&#34;, &#34;red&#34;);&#xA;car.setColor(&#34;pink&#34;);&#xA;car.save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Car {&#xA;  constructor(make, model, color) {&#xA;    this.make = make;&#xA;    this.model = model;&#xA;    this.color = color;&#xA;  }&#xA;&#xA;  setMake(make) {&#xA;    this.make = make;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  setModel(model) {&#xA;    this.model = model;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    this.color = color;&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;&#xA;  save() {&#xA;    console.log(this.make, this.model, this.color);&#xA;    // NOTE: Returning this for chaining&#xA;    return this;&#xA;  }&#xA;}&#xA;&#xA;const car = new Car(&#34;Ford&#34;, &#34;F-150&#34;, &#34;red&#34;).setColor(&#34;pink&#34;).save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Prefer composition over inheritance&lt;/h3&gt; &#xA;&lt;p&gt;As stated famously in &lt;a href=&#34;https://en.wikipedia.org/wiki/Design_Patterns&#34;&gt;&lt;em&gt;Design Patterns&lt;/em&gt;&lt;/a&gt; by the Gang of Four, you should prefer composition over inheritance where you can. There are lots of good reasons to use inheritance and lots of good reasons to use composition. The main point for this maxim is that if your mind instinctively goes for inheritance, try to think if composition could model your problem better. In some cases it can.&lt;/p&gt; &#xA;&lt;p&gt;You might be wondering then, &#34;when should I use inheritance?&#34; It depends on your problem at hand, but this is a decent list of when inheritance makes more sense than composition:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Your inheritance represents an &#34;is-a&#34; relationship and not a &#34;has-a&#34; relationship (Human-&amp;gt;Animal vs. User-&amp;gt;UserDetails).&lt;/li&gt; &#xA; &lt;li&gt;You can reuse code from the base classes (Humans can move like all animals).&lt;/li&gt; &#xA; &lt;li&gt;You want to make global changes to derived classes by changing a base class. (Change the caloric expenditure of all animals when they move).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Employee {&#xA;  constructor(name, email) {&#xA;    this.name = name;&#xA;    this.email = email;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;// Bad because Employees &#34;have&#34; tax data. EmployeeTaxData is not a type of Employee&#xA;class EmployeeTaxData extends Employee {&#xA;  constructor(ssn, salary) {&#xA;    super();&#xA;    this.ssn = ssn;&#xA;    this.salary = salary;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class EmployeeTaxData {&#xA;  constructor(ssn, salary) {&#xA;    this.ssn = ssn;&#xA;    this.salary = salary;&#xA;  }&#xA;&#xA;  // ...&#xA;}&#xA;&#xA;class Employee {&#xA;  constructor(name, email) {&#xA;    this.name = name;&#xA;    this.email = email;&#xA;  }&#xA;&#xA;  setTaxData(ssn, salary) {&#xA;    this.taxData = new EmployeeTaxData(ssn, salary);&#xA;  }&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;SOLID&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Single Responsibility Principle (SRP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated in Clean Code, &#34;There should never be more than one reason for a class to change&#34;. It&#39;s tempting to jam-pack a class with a lot of functionality, like when you can only take one suitcase on your flight. The issue with this is that your class won&#39;t be conceptually cohesive and it will give it many reasons to change. Minimizing the amount of times you need to change a class is important. It&#39;s important because if too much functionality is in one class and you modify a piece of it, it can be difficult to understand how that will affect other dependent modules in your codebase.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserSettings {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;  }&#xA;&#xA;  changeSettings(settings) {&#xA;    if (this.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class UserAuth {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;  }&#xA;&#xA;  verifyCredentials() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class UserSettings {&#xA;  constructor(user) {&#xA;    this.user = user;&#xA;    this.auth = new UserAuth(user);&#xA;  }&#xA;&#xA;  changeSettings(settings) {&#xA;    if (this.auth.verifyCredentials()) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Open/Closed Principle (OCP)&lt;/h3&gt; &#xA;&lt;p&gt;As stated by Bertrand Meyer, &#34;software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.&#34; What does that mean though? This principle basically states that you should allow users to add new functionalities without changing existing code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;ajaxAdapter&#34;;&#xA;  }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;nodeAdapter&#34;;&#xA;  }&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(adapter) {&#xA;    this.adapter = adapter;&#xA;  }&#xA;&#xA;  fetch(url) {&#xA;    if (this.adapter.name === &#34;ajaxAdapter&#34;) {&#xA;      return makeAjaxCall(url).then(response =&amp;gt; {&#xA;        // transform response and return&#xA;      });&#xA;    } else if (this.adapter.name === &#34;nodeAdapter&#34;) {&#xA;      return makeHttpCall(url).then(response =&amp;gt; {&#xA;        // transform response and return&#xA;      });&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;function makeAjaxCall(url) {&#xA;  // request and return promise&#xA;}&#xA;&#xA;function makeHttpCall(url) {&#xA;  // request and return promise&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class AjaxAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;ajaxAdapter&#34;;&#xA;  }&#xA;&#xA;  request(url) {&#xA;    // request and return promise&#xA;  }&#xA;}&#xA;&#xA;class NodeAdapter extends Adapter {&#xA;  constructor() {&#xA;    super();&#xA;    this.name = &#34;nodeAdapter&#34;;&#xA;  }&#xA;&#xA;  request(url) {&#xA;    // request and return promise&#xA;  }&#xA;}&#xA;&#xA;class HttpRequester {&#xA;  constructor(adapter) {&#xA;    this.adapter = adapter;&#xA;  }&#xA;&#xA;  fetch(url) {&#xA;    return this.adapter.request(url).then(response =&amp;gt; {&#xA;      // transform response and return&#xA;    });&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Liskov Substitution Principle (LSP)&lt;/h3&gt; &#xA;&lt;p&gt;This is a scary term for a very simple concept. It&#39;s formally defined as &#34;If S is a subtype of T, then objects of type T may be replaced with objects of type S (i.e., objects of type S may substitute objects of type T) without altering any of the desirable properties of that program (correctness, task performed, etc.).&#34; That&#39;s an even scarier definition.&lt;/p&gt; &#xA;&lt;p&gt;The best explanation for this is if you have a parent class and a child class, then the base class and child class can be used interchangeably without getting incorrect results. This might still be confusing, so let&#39;s take a look at the classic Square-Rectangle example. Mathematically, a square is a rectangle, but if you model it using the &#34;is-a&#34; relationship via inheritance, you quickly get into trouble.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Rectangle {&#xA;  constructor() {&#xA;    this.width = 0;&#xA;    this.height = 0;&#xA;  }&#xA;&#xA;  setColor(color) {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area) {&#xA;    // ...&#xA;  }&#xA;&#xA;  setWidth(width) {&#xA;    this.width = width;&#xA;  }&#xA;&#xA;  setHeight(height) {&#xA;    this.height = height;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Rectangle {&#xA;  setWidth(width) {&#xA;    this.width = width;&#xA;    this.height = width;&#xA;  }&#xA;&#xA;  setHeight(height) {&#xA;    this.width = height;&#xA;    this.height = height;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeRectangles(rectangles) {&#xA;  rectangles.forEach(rectangle =&amp;gt; {&#xA;    rectangle.setWidth(4);&#xA;    rectangle.setHeight(5);&#xA;    const area = rectangle.getArea(); // BAD: Returns 25 for Square. Should be 20.&#xA;    rectangle.render(area);&#xA;  });&#xA;}&#xA;&#xA;const rectangles = [new Rectangle(), new Rectangle(), new Square()];&#xA;renderLargeRectangles(rectangles);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Shape {&#xA;  setColor(color) {&#xA;    // ...&#xA;  }&#xA;&#xA;  render(area) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class Rectangle extends Shape {&#xA;  constructor(width, height) {&#xA;    super();&#xA;    this.width = width;&#xA;    this.height = height;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.width * this.height;&#xA;  }&#xA;}&#xA;&#xA;class Square extends Shape {&#xA;  constructor(length) {&#xA;    super();&#xA;    this.length = length;&#xA;  }&#xA;&#xA;  getArea() {&#xA;    return this.length * this.length;&#xA;  }&#xA;}&#xA;&#xA;function renderLargeShapes(shapes) {&#xA;  shapes.forEach(shape =&amp;gt; {&#xA;    const area = shape.getArea();&#xA;    shape.render(area);&#xA;  });&#xA;}&#xA;&#xA;const shapes = [new Rectangle(4, 5), new Rectangle(4, 5), new Square(5)];&#xA;renderLargeShapes(shapes);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Interface Segregation Principle (ISP)&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript doesn&#39;t have interfaces so this principle doesn&#39;t apply as strictly as others. However, it&#39;s important and relevant even with JavaScript&#39;s lack of type system.&lt;/p&gt; &#xA;&lt;p&gt;ISP states that &#34;Clients should not be forced to depend upon interfaces that they do not use.&#34; Interfaces are implicit contracts in JavaScript because of duck typing.&lt;/p&gt; &#xA;&lt;p&gt;A good example to look at that demonstrates this principle in JavaScript is for classes that require large settings objects. Not requiring clients to setup huge amounts of options is beneficial, because most of the time they won&#39;t need all of the settings. Making them optional helps prevent having a &#34;fat interface&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class DOMTraverser {&#xA;  constructor(settings) {&#xA;    this.settings = settings;&#xA;    this.setup();&#xA;  }&#xA;&#xA;  setup() {&#xA;    this.rootNode = this.settings.rootNode;&#xA;    this.settings.animationModule.setup();&#xA;  }&#xA;&#xA;  traverse() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const $ = new DOMTraverser({&#xA;  rootNode: document.getElementsByTagName(&#34;body&#34;),&#xA;  animationModule() {} // Most of the time, we won&#39;t need to animate when traversing.&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class DOMTraverser {&#xA;  constructor(settings) {&#xA;    this.settings = settings;&#xA;    this.options = settings.options;&#xA;    this.setup();&#xA;  }&#xA;&#xA;  setup() {&#xA;    this.rootNode = this.settings.rootNode;&#xA;    this.setupOptions();&#xA;  }&#xA;&#xA;  setupOptions() {&#xA;    if (this.options.animationModule) {&#xA;      // ...&#xA;    }&#xA;  }&#xA;&#xA;  traverse() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const $ = new DOMTraverser({&#xA;  rootNode: document.getElementsByTagName(&#34;body&#34;),&#xA;  options: {&#xA;    animationModule() {}&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Dependency Inversion Principle (DIP)&lt;/h3&gt; &#xA;&lt;p&gt;This principle states two essential things:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;High-level modules should not depend on low-level modules. Both should depend on abstractions.&lt;/li&gt; &#xA; &lt;li&gt;Abstractions should not depend upon details. Details should depend on abstractions.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This can be hard to understand at first, but if you&#39;ve worked with AngularJS, you&#39;ve seen an implementation of this principle in the form of Dependency Injection (DI). While they are not identical concepts, DIP keeps high-level modules from knowing the details of its low-level modules and setting them up. It can accomplish this through DI. A huge benefit of this is that it reduces the coupling between modules. Coupling is a very bad development pattern because it makes your code hard to refactor.&lt;/p&gt; &#xA;&lt;p&gt;As stated previously, JavaScript doesn&#39;t have interfaces so the abstractions that are depended upon are implicit contracts. That is to say, the methods and properties that an object/class exposes to another object/class. In the example below, the implicit contract is that any Request module for an &lt;code&gt;InventoryTracker&lt;/code&gt; will have a &lt;code&gt;requestItems&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class InventoryRequester {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;HTTP&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryTracker {&#xA;  constructor(items) {&#xA;    this.items = items;&#xA;&#xA;    // BAD: We have created a dependency on a specific request implementation.&#xA;    // We should just have requestItems depend on a request method: `request`&#xA;    this.requester = new InventoryRequester();&#xA;  }&#xA;&#xA;  requestItems() {&#xA;    this.items.forEach(item =&amp;gt; {&#xA;      this.requester.requestItem(item);&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;const inventoryTracker = new InventoryTracker([&#34;apples&#34;, &#34;bananas&#34;]);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class InventoryTracker {&#xA;  constructor(items, requester) {&#xA;    this.items = items;&#xA;    this.requester = requester;&#xA;  }&#xA;&#xA;  requestItems() {&#xA;    this.items.forEach(item =&amp;gt; {&#xA;      this.requester.requestItem(item);&#xA;    });&#xA;  }&#xA;}&#xA;&#xA;class InventoryRequesterV1 {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;HTTP&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;class InventoryRequesterV2 {&#xA;  constructor() {&#xA;    this.REQ_METHODS = [&#34;WS&#34;];&#xA;  }&#xA;&#xA;  requestItem(item) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;// By constructing our dependencies externally and injecting them, we can easily&#xA;// substitute our request module for a fancy new one that uses WebSockets.&#xA;const inventoryTracker = new InventoryTracker(&#xA;  [&#34;apples&#34;, &#34;bananas&#34;],&#xA;  new InventoryRequesterV2()&#xA;);&#xA;inventoryTracker.requestItems();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Testing&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Testing is more important than shipping. If you have no tests or an inadequate amount, then every time you ship code you won&#39;t be sure that you didn&#39;t break anything. Deciding on what constitutes an adequate amount is up to your team, but having 100% coverage (all statements and branches) is how you achieve very high confidence and developer peace of mind. This means that in addition to having a great testing framework, you also need to use a &lt;a href=&#34;https://gotwarlost.github.io/istanbul/&#34;&gt;good coverage tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s no excuse to not write tests. There are &lt;a href=&#34;https://jstherightway.org/#testing-tools&#34;&gt;plenty of good JS test frameworks&lt;/a&gt;, so find one that your team prefers. When you find one that works for your team, then aim to always write tests for every new feature/module you introduce. If your preferred method is Test Driven Development (TDD), that is great, but the main point is to just make sure you are reaching your coverage goals before launching any feature, or refactoring an existing one.&lt;/p&gt; &#xA;&lt;h3&gt;Single concept per test&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import assert from &#34;assert&#34;;&#xA;&#xA;describe(&#34;MomentJS&#34;, () =&amp;gt; {&#xA;  it(&#34;handles date boundaries&#34;, () =&amp;gt; {&#xA;    let date;&#xA;&#xA;    date = new MomentJS(&#34;1/1/2015&#34;);&#xA;    date.addDays(30);&#xA;    assert.equal(&#34;1/31/2015&#34;, date);&#xA;&#xA;    date = new MomentJS(&#34;2/1/2016&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;02/29/2016&#34;, date);&#xA;&#xA;    date = new MomentJS(&#34;2/1/2015&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;03/01/2015&#34;, date);&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import assert from &#34;assert&#34;;&#xA;&#xA;describe(&#34;MomentJS&#34;, () =&amp;gt; {&#xA;  it(&#34;handles 30-day months&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;1/1/2015&#34;);&#xA;    date.addDays(30);&#xA;    assert.equal(&#34;1/31/2015&#34;, date);&#xA;  });&#xA;&#xA;  it(&#34;handles leap year&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;2/1/2016&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;02/29/2016&#34;, date);&#xA;  });&#xA;&#xA;  it(&#34;handles non-leap year&#34;, () =&amp;gt; {&#xA;    const date = new MomentJS(&#34;2/1/2015&#34;);&#xA;    date.addDays(28);&#xA;    assert.equal(&#34;03/01/2015&#34;, date);&#xA;  });&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Concurrency&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Use Promises, not callbacks&lt;/h3&gt; &#xA;&lt;p&gt;Callbacks aren&#39;t clean, and they cause excessive amounts of nesting. With ES2015/ES6, Promises are a built-in global type. Use them!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request&#34;;&#xA;import { writeFile } from &#34;fs&#34;;&#xA;&#xA;get(&#xA;  &#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;,&#xA;  (requestErr, response, body) =&amp;gt; {&#xA;    if (requestErr) {&#xA;      console.error(requestErr);&#xA;    } else {&#xA;      writeFile(&#34;article.html&#34;, body, writeErr =&amp;gt; {&#xA;        if (writeErr) {&#xA;          console.error(writeErr);&#xA;        } else {&#xA;          console.log(&#34;File written&#34;);&#xA;        }&#xA;      });&#xA;    }&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;get(&#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;)&#xA;  .then(body =&amp;gt; {&#xA;    return writeFile(&#34;article.html&#34;, body);&#xA;  })&#xA;  .then(() =&amp;gt; {&#xA;    console.log(&#34;File written&#34;);&#xA;  })&#xA;  .catch(err =&amp;gt; {&#xA;    console.error(err);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Async/Await are even cleaner than Promises&lt;/h3&gt; &#xA;&lt;p&gt;Promises are a very clean alternative to callbacks, but ES2017/ES8 brings async and await which offer an even cleaner solution. All you need is a function that is prefixed in an &lt;code&gt;async&lt;/code&gt; keyword, and then you can write your logic imperatively without a &lt;code&gt;then&lt;/code&gt; chain of functions. Use this if you can take advantage of ES2017/ES8 features today!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;get(&#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;)&#xA;  .then(body =&amp;gt; {&#xA;    return writeFile(&#34;article.html&#34;, body);&#xA;  })&#xA;  .then(() =&amp;gt; {&#xA;    console.log(&#34;File written&#34;);&#xA;  })&#xA;  .catch(err =&amp;gt; {&#xA;    console.error(err);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { get } from &#34;request-promise&#34;;&#xA;import { writeFile } from &#34;fs-extra&#34;;&#xA;&#xA;async function getCleanCodeArticle() {&#xA;  try {&#xA;    const body = await get(&#xA;      &#34;https://en.wikipedia.org/wiki/Robert_Cecil_Martin&#34;&#xA;    );&#xA;    await writeFile(&#34;article.html&#34;, body);&#xA;    console.log(&#34;File written&#34;);&#xA;  } catch (err) {&#xA;    console.error(err);&#xA;  }&#xA;}&#xA;&#xA;getCleanCodeArticle()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Error Handling&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Thrown errors are a good thing! They mean the runtime has successfully identified when something in your program has gone wrong and it&#39;s letting you know by stopping function execution on the current stack, killing the process (in Node), and notifying you in the console with a stack trace.&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t ignore caught errors&lt;/h3&gt; &#xA;&lt;p&gt;Doing nothing with a caught error doesn&#39;t give you the ability to ever fix or react to said error. Logging the error to the console (&lt;code&gt;console.log&lt;/code&gt;) isn&#39;t much better as often times it can get lost in a sea of things printed to the console. If you wrap any bit of code in a &lt;code&gt;try/catch&lt;/code&gt; it means you think an error may occur there and therefore you should have a plan, or create a code path, for when it occurs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  console.log(error);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  functionThatMightThrow();&#xA;} catch (error) {&#xA;  // One option (more noisy than console.log):&#xA;  console.error(error);&#xA;  // Another option:&#xA;  notifyUserOfError(error);&#xA;  // Another option:&#xA;  reportErrorToService(error);&#xA;  // OR do all three!&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Don&#39;t ignore rejected promises&lt;/h3&gt; &#xA;&lt;p&gt;For the same reason you shouldn&#39;t ignore caught errors from &lt;code&gt;try/catch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getdata()&#xA;  .then(data =&amp;gt; {&#xA;    functionThatMightThrow(data);&#xA;  })&#xA;  .catch(error =&amp;gt; {&#xA;    console.log(error);&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;getdata()&#xA;  .then(data =&amp;gt; {&#xA;    functionThatMightThrow(data);&#xA;  })&#xA;  .catch(error =&amp;gt; {&#xA;    // One option (more noisy than console.log):&#xA;    console.error(error);&#xA;    // Another option:&#xA;    notifyUserOfError(error);&#xA;    // Another option:&#xA;    reportErrorToService(error);&#xA;    // OR do all three!&#xA;  });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Formatting is subjective. Like many rules herein, there is no hard and fast rule that you must follow. The main point is DO NOT ARGUE over formatting. There are &lt;a href=&#34;https://standardjs.com/rules.html&#34;&gt;tons of tools&lt;/a&gt; to automate this. Use one! It&#39;s a waste of time and money for engineers to argue over formatting.&lt;/p&gt; &#xA;&lt;p&gt;For things that don&#39;t fall under the purview of automatic formatting (indentation, tabs vs. spaces, double vs. single quotes, etc.) look here for some guidance.&lt;/p&gt; &#xA;&lt;h3&gt;Use consistent capitalization&lt;/h3&gt; &#xA;&lt;p&gt;JavaScript is untyped, so capitalization tells you a lot about your variables, functions, etc. These rules are subjective, so your team can choose whatever they want. The point is, no matter what you all choose, just be consistent.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const daysInMonth = 30;&#xA;&#xA;const songs = [&#34;Back In Black&#34;, &#34;Stairway to Heaven&#34;, &#34;Hey Jude&#34;];&#xA;const Artists = [&#34;ACDC&#34;, &#34;Led Zeppelin&#34;, &#34;The Beatles&#34;];&#xA;&#xA;function eraseDatabase() {}&#xA;function restore_database() {}&#xA;&#xA;class animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const DAYS_IN_WEEK = 7;&#xA;const DAYS_IN_MONTH = 30;&#xA;&#xA;const SONGS = [&#34;Back In Black&#34;, &#34;Stairway to Heaven&#34;, &#34;Hey Jude&#34;];&#xA;const ARTISTS = [&#34;ACDC&#34;, &#34;Led Zeppelin&#34;, &#34;The Beatles&#34;];&#xA;&#xA;function eraseDatabase() {}&#xA;function restoreDatabase() {}&#xA;&#xA;class Animal {}&#xA;class Alpaca {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Function callers and callees should be close&lt;/h3&gt; &#xA;&lt;p&gt;If a function calls another, keep those functions vertically close in the source file. Ideally, keep the caller right above the callee. We tend to read code from top-to-bottom, like a newspaper. Because of this, make your code read that way.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class PerformanceReview {&#xA;  constructor(employee) {&#xA;    this.employee = employee;&#xA;  }&#xA;&#xA;  lookupPeers() {&#xA;    return db.lookup(this.employee, &#34;peers&#34;);&#xA;  }&#xA;&#xA;  lookupManager() {&#xA;    return db.lookup(this.employee, &#34;manager&#34;);&#xA;  }&#xA;&#xA;  getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  perfReview() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;  }&#xA;&#xA;  getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.perfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class PerformanceReview {&#xA;  constructor(employee) {&#xA;    this.employee = employee;&#xA;  }&#xA;&#xA;  perfReview() {&#xA;    this.getPeerReviews();&#xA;    this.getManagerReview();&#xA;    this.getSelfReview();&#xA;  }&#xA;&#xA;  getPeerReviews() {&#xA;    const peers = this.lookupPeers();&#xA;    // ...&#xA;  }&#xA;&#xA;  lookupPeers() {&#xA;    return db.lookup(this.employee, &#34;peers&#34;);&#xA;  }&#xA;&#xA;  getManagerReview() {&#xA;    const manager = this.lookupManager();&#xA;  }&#xA;&#xA;  lookupManager() {&#xA;    return db.lookup(this.employee, &#34;manager&#34;);&#xA;  }&#xA;&#xA;  getSelfReview() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&#xA;const review = new PerformanceReview(employee);&#xA;review.perfReview();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;Comments&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Only comment things that have business logic complexity.&lt;/h3&gt; &#xA;&lt;p&gt;Comments are an apology, not a requirement. Good code &lt;em&gt;mostly&lt;/em&gt; documents itself.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function hashIt(data) {&#xA;  // The hash&#xA;  let hash = 0;&#xA;&#xA;  // Length of string&#xA;  const length = data.length;&#xA;&#xA;  // Loop through every character in data&#xA;  for (let i = 0; i &amp;lt; length; i++) {&#xA;    // Get character code.&#xA;    const char = data.charCodeAt(i);&#xA;    // Make the hash&#xA;    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;&#xA;    // Convert to 32-bit integer&#xA;    hash &amp;amp;= hash;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function hashIt(data) {&#xA;  let hash = 0;&#xA;  const length = data.length;&#xA;&#xA;  for (let i = 0; i &amp;lt; length; i++) {&#xA;    const char = data.charCodeAt(i);&#xA;    hash = (hash &amp;lt;&amp;lt; 5) - hash + char;&#xA;&#xA;    // Convert to 32-bit integer&#xA;    hash &amp;amp;= hash;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t leave commented out code in your codebase&lt;/h3&gt; &#xA;&lt;p&gt;Version control exists for a reason. Leave old code in your history.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;doStuff();&#xA;// doOtherStuff();&#xA;// doSomeMoreStuff();&#xA;// doSoMuchStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;doStuff();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Don&#39;t have journal comments&lt;/h3&gt; &#xA;&lt;p&gt;Remember, use version control! There&#39;s no need for dead code, commented code, and especially journal comments. Use &lt;code&gt;git log&lt;/code&gt; to get history!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;/**&#xA; * 2016-12-20: Removed monads, didn&#39;t understand them (RM)&#xA; * 2016-10-01: Improved using special monads (JP)&#xA; * 2016-02-03: Removed type-checking (LI)&#xA; * 2015-03-14: Added combine with type-checking (JR)&#xA; */&#xA;function combine(a, b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function combine(a, b) {&#xA;  return a + b;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Avoid positional markers&lt;/h3&gt; &#xA;&lt;p&gt;They usually just add noise. Let the functions and variable names along with the proper indentation and formatting give the visual structure to your code.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Bad:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;////////////////////////////////////////////////////////////////////////////////&#xA;// Scope Model Instantiation&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;$scope.model = {&#xA;  menu: &#34;foo&#34;,&#xA;  nav: &#34;bar&#34;&#xA;};&#xA;&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;// Action setup&#xA;////////////////////////////////////////////////////////////////////////////////&#xA;const actions = function() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Good:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$scope.model = {&#xA;  menu: &#34;foo&#34;,&#xA;  nav: &#34;bar&#34;&#xA;};&#xA;&#xA;const actions = function() {&#xA;  // ...&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;This is also available in other languages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Armenia.png&#34; alt=&#34;am&#34;&gt; &lt;strong&gt;Armenian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/hanumanum/clean-code-javascript&#34;&gt;hanumanum/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bangladesh.png&#34; alt=&#34;bd&#34;&gt; &lt;strong&gt;Bangla(বাংলা)&lt;/strong&gt;: &lt;a href=&#34;https://github.com/InsomniacSabbir/clean-code-javascript/&#34;&gt;InsomniacSabbir/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png&#34; alt=&#34;br&#34;&gt; &lt;strong&gt;Brazilian Portuguese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/fesnt/clean-code-javascript&#34;&gt;fesnt/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png&#34; alt=&#34;cn&#34;&gt; &lt;strong&gt;Simplified Chinese&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/alivebao/clean-code-js&#34;&gt;alivebao/clean-code-js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/beginor/clean-code-javascript&#34;&gt;beginor/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png&#34; alt=&#34;tw&#34;&gt; &lt;strong&gt;Traditional Chinese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/AllJointTW/clean-code-javascript&#34;&gt;AllJointTW/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png&#34; alt=&#34;fr&#34;&gt; &lt;strong&gt;French&lt;/strong&gt;: &lt;a href=&#34;https://github.com/GavBaros/clean-code-javascript-fr&#34;&gt;GavBaros/clean-code-javascript-fr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png&#34; alt=&#34;de&#34;&gt; &lt;strong&gt;German&lt;/strong&gt;: &lt;a href=&#34;https://github.com/marcbruederlin/clean-code-javascript&#34;&gt;marcbruederlin/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Indonesia.png&#34; alt=&#34;id&#34;&gt; &lt;strong&gt;Indonesia&lt;/strong&gt;: &lt;a href=&#34;https://github.com/andirkh/clean-code-javascript/&#34;&gt;andirkh/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png&#34; alt=&#34;it&#34;&gt; &lt;strong&gt;Italian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/frappacchio/clean-code-javascript/&#34;&gt;frappacchio/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png&#34; alt=&#34;ja&#34;&gt; &lt;strong&gt;Japanese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mitsuruog/clean-code-javascript/&#34;&gt;mitsuruog/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png&#34; alt=&#34;kr&#34;&gt; &lt;strong&gt;Korean&lt;/strong&gt;: &lt;a href=&#34;https://github.com/qkraudghgh/clean-code-javascript-ko&#34;&gt;qkraudghgh/clean-code-javascript-ko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Poland.png&#34; alt=&#34;pl&#34;&gt; &lt;strong&gt;Polish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/greg-dev/clean-code-javascript-pl&#34;&gt;greg-dev/clean-code-javascript-pl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png&#34; alt=&#34;ru&#34;&gt; &lt;strong&gt;Russian&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/BoryaMogila/clean-code-javascript-ru/&#34;&gt;BoryaMogila/clean-code-javascript-ru/&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/maksugr/clean-code-javascript&#34;&gt;maksugr/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png&#34; alt=&#34;es&#34;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/tureey/clean-code-javascript&#34;&gt;tureey/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Uruguay.png&#34; alt=&#34;es&#34;&gt; &lt;strong&gt;Spanish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/andersontr15/clean-code-javascript-es&#34;&gt;andersontr15/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Serbia.png&#34; alt=&#34;rs&#34;&gt; &lt;strong&gt;Serbian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/doskovicmilos/clean-code-javascript&#34;&gt;doskovicmilos/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png&#34; alt=&#34;tr&#34;&gt; &lt;strong&gt;Turkish&lt;/strong&gt;: &lt;a href=&#34;https://github.com/bsonmez/clean-code-javascript/tree/turkish-translation&#34;&gt;bsonmez/clean-code-javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png&#34; alt=&#34;ua&#34;&gt; &lt;strong&gt;Ukrainian&lt;/strong&gt;: &lt;a href=&#34;https://github.com/mindfr1k/clean-code-javascript-ua&#34;&gt;mindfr1k/clean-code-javascript-ua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png&#34; alt=&#34;vi&#34;&gt; &lt;strong&gt;Vietnamese&lt;/strong&gt;: &lt;a href=&#34;https://github.com/hienvd/clean-code-javascript/&#34;&gt;hienvd/clean-code-javascript/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ryanmcdermott/clean-code-javascript/master/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ljt0515/618</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ljt0515/618</id>
    <link href="https://github.com/ljt0515/618" rel="alternate"></link>
    <summary type="html">&lt;p&gt;京东淘宝618助手 可自动完成热爱奇旅app任务 autojs和青龙面板两款脚本&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;脚本说明&lt;/h2&gt; &#xA;&lt;p&gt;青龙脚本以废弃 请使用autojs脚本运行或使用打包app运行&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;jd_nm.js 此脚本为京东618 青龙脚本 直接通过&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;del&gt;&lt;code&gt;ql raw https://raw.fastgit.org/ljt0515/618/main/jd_nm.js&lt;/code&gt;&lt;/del&gt; &lt;del&gt;添加至青龙面板&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;autojs脚本请使用jd618.js&lt;/p&gt; &#xA;&lt;p&gt;app下载路径 &lt;a href=&#34;https://cxzdy.lanzoub.com/b011nfded&#34;&gt;https://cxzdy.lanzoub.com/b011nfded&lt;/a&gt; 密码 jd618&lt;/p&gt; &#xA;&lt;p&gt;京东618，你还在找组织吗？来这里，加群获取最新消息，互助，脚本，每天固定组队 &lt;img src=&#34;https://raw.githubusercontent.com/ljt0515/618/main/87CE36BC9B5823EF634C12F86B0DA2F0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>actualbudget/actual</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/actualbudget/actual</id>
    <link href="https://github.com/actualbudget/actual" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A local-first personal finance system&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;Note from maintainer: don&#39;t expect responses or PR merges until May 16th.&lt;/strong&gt; 🏖️&lt;/p&gt; &#xA;&lt;p&gt;I (@jlongster) am currently away on vacation and not checking this. I am currently the only maintainer of Actual (person able to merge PRs, etc). I&#39;d like to fix this soon and if you are interested in helping, please help manage issues &amp;amp; PRs and I will bring on consistent contributors as maintainers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Please help&lt;/strong&gt; by making it as clear as possible what changes are being made. When I get back this will greatly help triage the work.&lt;/p&gt; &#xA;&lt;p&gt;When I get back, I will work on guides and structure to help anyone get involved, particularly explaining how the code works.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;This is the source code for &lt;a href=&#34;https://actualbudget.com&#34;&gt;Actual&lt;/a&gt;, a local-first personal finance tool. It is 100% free and open-source.&lt;/p&gt; &#xA;&lt;p&gt;If you are only interested in running the latest version, you don&#39;t need this repo. You can get the latest version through npm.&lt;/p&gt; &#xA;&lt;p&gt;More docs are available in the &lt;a href=&#34;https://github.com/actualbudget/actual/tree/master/docs&#34;&gt;docs&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;If you are interested in contributing, or want to know how development works, see &lt;a href=&#34;https://github.com/actualbudget/actual/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Join the &lt;a href=&#34;https://discord.gg/pRYNYr4W5A&#34;&gt;discord&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;The easy way: using a server (recommended)&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to get Actual running is to use the &lt;a href=&#34;https://github.com/actualbudget/actual-server&#34;&gt;actual-server&lt;/a&gt; project. That is the server for syncing changes across devices, and it comes with the latest version of Actual. The server will provide both the web project and a server for syncing.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/actualbudget/actual-server.git&#xA;cd actual-server&#xA;yarn install&#xA;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;a href=&#34;https://localhost:5006&#34;&gt;https://localhost:5006&lt;/a&gt; in your browser and you will see Actual.&lt;/p&gt; &#xA;&lt;p&gt;You should deploy the server somewhere so you can access your data from anywhere. See instructions on the &lt;a href=&#34;https://github.com/actualbudget/actual-server&#34;&gt;actual-server&lt;/a&gt; repo.&lt;/p&gt; &#xA;&lt;h3&gt;Without a server&lt;/h3&gt; &#xA;&lt;p&gt;This will give you a fully local web app without a server. This npm package is the &lt;code&gt;packages/desktop-client&lt;/code&gt; package in this repo built for production:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn add @actual-app/web&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you need to serve the files in &lt;code&gt;node_modules/@actual-app/web/build&lt;/code&gt;. One way to do it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd node_modules/@actual-app/web/build&#xA;npx http-server .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Navigate to &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; and you should see Actual.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;If you want to build the latest version, see &lt;a href=&#34;https://github.com/actualbudget/actual/raw/master/docs/releasing.md&#34;&gt;releasing.md&lt;/a&gt;. It provides instructions for building this code into the same artifacts that come from npm.&lt;/p&gt; &#xA;&lt;h2&gt;Run locally&lt;/h2&gt; &#xA;&lt;p&gt;Both the electron and web app can started with a single command. When running in development, it will store data in a &lt;code&gt;data&lt;/code&gt; directory in the root of the &lt;code&gt;actual&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;First, make sure to run &lt;code&gt;yarn install&lt;/code&gt; to install all dependencies.&lt;/p&gt; &#xA;&lt;p&gt;In the root of the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;yarn start            # Run the electron app&#xA;yarn start:browser    # Run the web app&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code structure&lt;/h2&gt; &#xA;&lt;p&gt;The app is split up into a few packages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;loot-core - The core application that runs on any platform&lt;/li&gt; &#xA; &lt;li&gt;loot-design - The generic design components that make up the UI&lt;/li&gt; &#xA; &lt;li&gt;desktop-client - The desktop UI&lt;/li&gt; &#xA; &lt;li&gt;desktop-electron - The desktop app&lt;/li&gt; &#xA; &lt;li&gt;mobile - The mobile app&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More docs are available in the &lt;a href=&#34;https://github.com/actualbudget/actual/tree/master/docs&#34;&gt;docs&lt;/a&gt; folder.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>livebud/bud</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/livebud/bud</id>
    <link href="https://github.com/livebud/bud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Full-Stack Web Framework for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bud&lt;/h1&gt; &#xA;&lt;p&gt;The Full-Stack Web Framework for Go. Bud writes the boring code for you, helping you launch your website faster.&lt;/p&gt; &#xA;&lt;h2&gt;Video Demo&lt;/h2&gt; &#xA;&lt;p&gt;Watch a video demonstrating how to build a minimal HN clone in 15 minutes with Bud.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LoypcRqn-xA&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/170299/168361927-9165c2f9-55d4-4fa0-a53e-966028a79b39.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69&#34;&gt;the documentation&lt;/a&gt; to learn how to get started with Bud.&lt;/p&gt; &#xA;&lt;h1&gt;Installing Bud&lt;/h1&gt; &#xA;&lt;p&gt;Bud ships as a single binary that runs on Linux and Mac. You can follow along for Windows support in &lt;a href=&#34;https://github.com/livebud/bud/issues/7&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to get started is by copying and pasting the command below in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;$ curl -sf https://raw.githubusercontent.com/livebud/bud/main/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will download the right binary for your operating system and move the binary to the right location in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Confirm that you&#39;ve installed Bud by typing &lt;code&gt;bud&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bud -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Usage:&#xA;    bud [flags] [command]&#xA;&#xA;Flags:&#xA;  -C, --chdir  Change the working directory&#xA;&#xA;Commands:&#xA;  build    build the production server&#xA;  create   create a new project&#xA;  run      run the development server&#xA;  tool     extra tools&#xA;  version  Show package versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;The following software is required to use Bud.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Node v14+&lt;/p&gt; &lt;p&gt;This is a temporary requirement that we plan to remove in &lt;a href=&#34;https://github.com/livebud/bud/discussions/21&#34;&gt;v0.3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go v1.16+&lt;/p&gt; &lt;p&gt;Bud relies heavily on &lt;code&gt;io/fs&lt;/code&gt; and will take advantage of generics in the future, so while Go v1.16 will work, we suggest running Go v1.18+ if you can.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Your First Project&lt;/h1&gt; &#xA;&lt;p&gt;With bud installed, you can now scaffold a new project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bud create hello&#xA;$ cd hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The create command will scaffold everything you need to get started with bud.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls&#xA;go.mod  node_modules/  package-lock.json  package.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... which is not very much by the way! Unlike most other fullstack frameworks, Bud starts out very minimal. As you add dependencies, Bud will generate all the boring code to glue your app together. Let&#39;s see this in action.&lt;/p&gt; &#xA;&lt;p&gt;Start the development server with &lt;code&gt;bud run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bud run&#xA;| Listening on http://127.0.0.1:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Click on the link to open the browser. You&#39;ll be greeted with bud&#39;s welcome page.&lt;/p&gt; &#xA;&lt;p&gt;Congrats! You&#39;re running your first web server with Bud. The welcome server is your jumping off point to learn more about the framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://denim-cub-301.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdb7f750b-a699-4117-ac07-303124e5d2f4%2FCleanShot_2022-05-12_at_22.00.192x.png?table=block&amp;amp;id=9488d91f-b72d-4c6d-9ce0-358c31f7f964&amp;amp;spaceId=faf0f409-6e25-40a4-871e-3b311037350f&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; alt=&#34;CleanShot 2022-05-12 at 22.00.19@2x.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;Check out the Hacker News &lt;a href=&#34;https://www.youtube.com/watch?v=LoypcRqn-xA&#34;&gt;demo&lt;/a&gt;, read the &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69#156ea69b8d044bacb65fc2897f3e52b8&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://cal.com/mattmueller/30min&#34;&gt;schedule a quick call&lt;/a&gt; or go on your own adventure. The only limit is your imagination.&lt;/p&gt; &#xA;&lt;p&gt;Recent discussions: &lt;a href=&#34;https://www.reddit.com/r/golang/comments/uoxocj/bud_the_fullstack_web_framework_for_go_developers/&#34;&gt;Reddit&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/item?id=31371340&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/golivebud&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How did Bud come into existence?&lt;/h1&gt; &#xA;&lt;p&gt;I started working on Bud 2 years ago after seeing how productive people could be in &lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel&lt;/a&gt;. I wanted the same for Go, so I decided to try creating Laravel for the Go ecosystem. However, my first version after 6 months needed to scaffold many files just to get started. If you are coming from &lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Rails&lt;/a&gt; or Laravel, you may shrug and consider this as pretty normal.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I have been spoiled by the renaissance in frontend frameworks like &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; that start barebones but every file you add incrementally enhances your web application. This keeps the initial complexity under control.&lt;/p&gt; &#xA;&lt;p&gt;With this additional inspiration, I worked on the next iteration for the ensuing 18 months.&lt;/p&gt; &#xA;&lt;p&gt;The goals are now:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate files only as you need them. Keep these generated files away from your application code and give developers the choice to keep them out of source control. You shouldn&#39;t need to care about the generated code. You may be surprised to learn that Go also generates code to turn your Go code into an executable, but it works so well you don&#39;t need to think about it. Bud should feel like this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feel like using a modern JS framework. This means it should work with &lt;a href=&#34;https://github.com/livebud/bud/discussions/8&#34;&gt;multiple&lt;/a&gt; modern frontend frameworks like &lt;a href=&#34;https://svelte.dev/&#34;&gt;Svelte&lt;/a&gt; and &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;, support &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69#4c7dff15ef3e458587b81fb9b1819afb&#34;&gt;live reload&lt;/a&gt;, and have &lt;a href=&#34;https://www.reddit.com/r/golang/comments/uoxocj/bud_the_fullstack_web_framework_for_go_developers/i8ke92h/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;server-side rendering&lt;/a&gt; for better performance and SEO.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The framework should be extensible from Day 1. Bud is too ambitious for one person. We&#39;re going to need an ambitious community behind this framework. Extensibility should be primarily driven by adding code, rather than by adding configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bud should provide high-level, type-safe APIs for developers while generating performant, low-level Go code under the covers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bud should compile to a single binary that contains your entire web app and can be copied to a server that doesn&#39;t even have Go installed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/livebud/bud/main/contributing/Readme.md&#34;&gt;Contributing Guide&lt;/a&gt; to learn how to develop Bud locally.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZainRk/SocialMedia-Frontend</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ZainRk/SocialMedia-Frontend</id>
    <link href="https://github.com/ZainRk/SocialMedia-Frontend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Getting Started with Create React App&lt;/h1&gt; &#xA;&lt;p&gt;This project was bootstrapped with &lt;a href=&#34;https://github.com/facebook/create-react-app&#34;&gt;Create React App&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available Scripts&lt;/h2&gt; &#xA;&lt;p&gt;In the project directory, you can run:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn start&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Runs the app in the development mode.&lt;br&gt; Open &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view it in your browser.&lt;/p&gt; &#xA;&lt;p&gt;The page will reload when you make changes.&lt;br&gt; You may also see any lint errors in the console.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn test&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Launches the test runner in the interactive watch mode.&lt;br&gt; See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/running-tests&#34;&gt;running tests&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn build&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Builds the app for production to the &lt;code&gt;build&lt;/code&gt; folder.&lt;br&gt; It correctly bundles React in production mode and optimizes the build for the best performance.&lt;/p&gt; &#xA;&lt;p&gt;The build is minified and the filenames include the hashes.&lt;br&gt; Your app is ready to be deployed!&lt;/p&gt; &#xA;&lt;p&gt;See the section about &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/deployment&#34;&gt;deployment&lt;/a&gt; for more information.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn eject&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: this is a one-way operation. Once you &lt;code&gt;eject&lt;/code&gt;, you can&#39;t go back!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t satisfied with the build tool and configuration choices, you can &lt;code&gt;eject&lt;/code&gt; at any time. This command will remove the single build dependency from your project.&lt;/p&gt; &#xA;&lt;p&gt;Instead, it will copy all the configuration files and the transitive dependencies (webpack, Babel, ESLint, etc) right into your project so you have full control over them. All of the commands except &lt;code&gt;eject&lt;/code&gt; will still work, but they will point to the copied scripts so you can tweak them. At this point you&#39;re on your own.&lt;/p&gt; &#xA;&lt;p&gt;You don&#39;t have to ever use &lt;code&gt;eject&lt;/code&gt;. The curated feature set is suitable for small and middle deployments, and you shouldn&#39;t feel obligated to use this feature. However we understand that this tool wouldn&#39;t be useful if you couldn&#39;t customize it when you are ready for it.&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;You can learn more in the &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/getting-started&#34;&gt;Create React App documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To learn React, check out the &lt;a href=&#34;https://reactjs.org/&#34;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Code Splitting&lt;/h3&gt; &#xA;&lt;p&gt;This section has moved here: &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/code-splitting&#34;&gt;https://facebook.github.io/create-react-app/docs/code-splitting&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Analyzing the Bundle Size&lt;/h3&gt; &#xA;&lt;p&gt;This section has moved here: &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size&#34;&gt;https://facebook.github.io/create-react-app/docs/analyzing-the-bundle-size&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Making a Progressive Web App&lt;/h3&gt; &#xA;&lt;p&gt;This section has moved here: &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app&#34;&gt;https://facebook.github.io/create-react-app/docs/making-a-progressive-web-app&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Configuration&lt;/h3&gt; &#xA;&lt;p&gt;This section has moved here: &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/advanced-configuration&#34;&gt;https://facebook.github.io/create-react-app/docs/advanced-configuration&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Deployment&lt;/h3&gt; &#xA;&lt;p&gt;This section has moved here: &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/deployment&#34;&gt;https://facebook.github.io/create-react-app/docs/deployment&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;yarn build&lt;/code&gt; fails to minify&lt;/h3&gt; &#xA;&lt;p&gt;This section has moved here: &lt;a href=&#34;https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify&#34;&gt;https://facebook.github.io/create-react-app/docs/troubleshooting#npm-run-build-fails-to-minify&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>leonardomso/33-js-concepts</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/leonardomso/33-js-concepts</id>
    <link href="https://github.com/leonardomso/33-js-concepts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📜 33 JavaScript concepts every developer should know.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/leonardomso/33&#34;&gt;&lt;img src=&#34;https://i.imgur.com/dsHmk6H.jpg&#34; alt=&#34;33 Concepts Every JS Developer Should Know&#34; width=&#34;200&amp;quot;&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;br&gt; 33 Concepts Every JavaScript Developer Should Know &lt;br&gt;&lt;br&gt; &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/leonardomso&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/leonardomso.svg?style=for-the-badge&#34; alt=&#34;Follow me&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository was created with the intention of helping developers master their concepts in JavaScript. It is not a requirement, but a guide for future studies. It is based on an article written by &lt;a href=&#34;https://twitter.com/stephenthecurt&#34;&gt;Stephen Curtis&lt;/a&gt; and you can read it &lt;a href=&#34;https://medium.com/@stephenthecurt/33-fundamentals-every-javascript-developer-should-know-13dd720a90d1&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;🚀 Considered by GitHub as one of the &lt;a href=&#34;https://blog.github.com/2018-12-13-new-open-source-projects/&#34;&gt;top open source projects of 2018!&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to submit a PR adding a link to your own recaps or reviews. If you want to translate the repo into your native language, please feel free to do so.&lt;/p&gt; &#xA;&lt;p&gt;All the translations for this repo will be listed below:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eldrinf/33-js-concepts-albanian.git&#34;&gt;Shqip (Albanian)&lt;/a&gt; — Eldrin Ereqi&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amrsekilly/33-js-concepts&#34;&gt;اَلْعَرَبِيَّةُ‎ (Arabic)&lt;/a&gt; — Amr Elsekilly&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/stephentian/33-js-concepts&#34;&gt;汉语 (Chinese)&lt;/a&gt; — Re Tian&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tiagoboeing/33-js-concepts&#34;&gt;Português do Brasil (Brazilian Portuguese) &lt;/a&gt; — Tiago Boeing&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/yjs03057/33-js-concepts.git&#34;&gt;한국어 (Korean)&lt;/a&gt; — Suin Lee&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/adonismendozaperez/33-js-conceptos&#34;&gt;Español (Spanish)&lt;/a&gt; — Adonis Mendoza&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ilker0/33-js-concepts&#34;&gt;Türkçe (Turkish)&lt;/a&gt; — İlker Demir&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gumennii/33-js-concepts&#34;&gt;русский язык (Russian)&lt;/a&gt; — Mihail Gumennii&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nguyentranchung/33-js-concepts&#34;&gt;Tiếng Việt (Vietnamese)&lt;/a&gt; — Nguyễn Trần Chung&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/lip3k/33-js-concepts&#34;&gt;Polski (Polish)&lt;/a&gt; — Dawid Lipinski&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/majidalavizadeh/33-js-concepts&#34;&gt;فارسی (Persian)&lt;/a&gt; — Majid Alavizadeh&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/rijdz/33-js-concepts&#34;&gt;Bahasa Indonesia (Indonesian)&lt;/a&gt; — Rijdzuan Sampoerna&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/robinmetral/33-concepts-js&#34;&gt;Français (French)&lt;/a&gt; — Robin Métral&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vikaschauhan/33-js-concepts&#34;&gt;हिन्दी (Hindi)&lt;/a&gt; — Vikas Chauhan&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/DimitrisZx/33-js-concepts&#34;&gt;Ελληνικά (Greek)&lt;/a&gt; — Dimitris Zarachanis&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/oimo23/33-js-concepts&#34;&gt;日本語 (Japanese)&lt;/a&gt; — oimo23&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/burhannn/33-js-concepts&#34;&gt;Deutsch (German)&lt;/a&gt; — burhannn&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/AndrewSavetchuk/33-js-concepts-ukrainian-translation&#34;&gt;украї́нська мо́ва (Ukrainian)&lt;/a&gt; — Andrew Savetchuk&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ududsha/33-js-concepts&#34;&gt;සිංහල (Sinhala)&lt;/a&gt; — Udaya Shamendra&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Donearm/33-js-concepts&#34;&gt;Italiano (Italian)&lt;/a&gt; — Gianluca Fiore&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/chrys-elrak/33-js-concepts&#34;&gt;Malagasy (Madagascar)&lt;/a&gt; — Chrys Rakotonimanana&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;&lt;a id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#1-call-stack&#34;&gt;Call Stack&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#2-primitive-types&#34;&gt;Primitive Types&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#3-value-types-and-reference-types&#34;&gt;Value Types and Reference Types&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#4-implicit-explicit-nominal-structuring-and-duck-typing&#34;&gt;Implicit, Explicit, Nominal, Structuring and Duck Typing&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#5--vs--vs-typeof&#34;&gt;== vs === vs typeof&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#6-function-scope-block-scope-and-lexical-scope&#34;&gt;Function Scope, Block Scope and Lexical Scope&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#7-expression-vs-statement&#34;&gt;Expression vs Statement&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#8-iife-modules-and-namespaces&#34;&gt;IIFE, Modules and Namespaces&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#9-message-queue-and-event-loop&#34;&gt;Message Queue and Event Loop&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#10-settimeout-setinterval-and-requestanimationframe&#34;&gt;setTimeout, setInterval and requestAnimationFrame&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#11-javascript-engines&#34;&gt;JavaScript Engines&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#12-bitwise-operators-type-arrays-and-array-buffers&#34;&gt;Bitwise Operators, Type Arrays and Array Buffers&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#13-dom-and-layout-trees&#34;&gt;DOM and Layout Trees&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#14-factories-and-classes&#34;&gt;Factories and Classes&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#15-this-call-apply-and-bind&#34;&gt;this, call, apply and bind&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#16-new-constructor-instanceof-and-instances&#34;&gt;new, Constructor, instanceof and Instances&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#17-prototype-inheritance-and-prototype-chain&#34;&gt;Prototype Inheritance and Prototype Chain&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#18-objectcreate-and-objectassign&#34;&gt;Object.create and Object.assign&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#19-map-reduce-filter&#34;&gt;map, reduce, filter&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#20-pure-functions-side-effects-state-mutation-and-event-propagation&#34;&gt;Pure Functions, Side Effects, State Mutation and Event Propagation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#21-closures&#34;&gt;Closures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#22-high-order-functions&#34;&gt;High Order Functions&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#23-recursion&#34;&gt;Recursion&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#24-collections-and-generators&#34;&gt;Collections and Generators&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#25-promises&#34;&gt;Promises&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#26-asyncawait&#34;&gt;async/await&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#27-data-structures&#34;&gt;Data Structures&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#28-expensive-operation-and-big-o-notation&#34;&gt;Expensive Operation and Big O Notation&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#29-algorithms&#34;&gt;Algorithms&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#30-inheritance-polymorphism-and-code-reuse&#34;&gt;Inheritance, Polymorphism and Code Reuse&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#31-design-patterns&#34;&gt;Design Patterns&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#32-partial-applications-currying-compose-and-pipe&#34;&gt;Partial Applications, Currying, Compose and Pipe&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#33-clean-code&#34;&gt;Clean Code&lt;/a&gt;&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;1. Call Stack&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Glossary/Call_stack&#34;&gt;Call Stack — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@gaurav.pandvia/understanding-javascript-function-executions-tasks-event-loop-call-stack-more-part-1-5683dea1f5ec&#34;&gt;Understanding Javascript Call Stack, Event Loops — Gaurav Pandvia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/understanding-the-javascript-call-stack-861e41ae61d4&#34;&gt;Understanding the JavaScript Call Stack — Charles Freeborn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://web.archive.org/web/20180701233338/https://www.valentinog.com/blog/js-execution-context-call-stack/&#34;&gt;Javascript: What Is The Execution Context? What Is The Call Stack? — Valentino Gagliardi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gist.github.com/jesstelford/9a35d20a2aa044df8bf241e00d7bc2d0&#34;&gt;What is the JS Event Loop and Call Stack? — Jess Telford&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-execution-context-and-execution-stack-in-javascript-1c9ea8642dd0&#34;&gt;Understanding Execution Context and Execution Stack in Javascript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.sessionstack.com/how-does-javascript-actually-work-part-1-b0bacc073cf&#34;&gt;How JavaScript Works: An Overview of the Engine, the Runtime, and the Call Stack — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/&#34;&gt;The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/bipinrajbhar/how-javascript-works-under-the-hood-an-overview-of-javascript-engine-heap-and-call-stack-1j5o&#34;&gt;How JavaScript Works Under The Hood: An Overview of JavaScript Engine, Heap and, Call Stack — Bipin Rajbhar&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=w6QGEiQceOM&#34;&gt;Javascript: the Call Stack explained — Coding Blocks India&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=W8AeMrVtFLY&#34;&gt;The JS Call Stack Explained In 9 Minutes — Colt Steele&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=w7QWQlkLY_s&#34;&gt;What is the Call Stack? — Eric Traub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Q2sFmqvpBe0&#34;&gt;The Call Stack — Kevin Drumm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Z6a1cLyq7Ac&amp;amp;list=PLWrQZnG8l0E4kd1T_nyuVoxQUaYEWFgcD&#34;&gt;Understanding JavaScript Execution — Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Nt-qa_LlUH0&#34;&gt;The Ultimate Guide to Execution Contexts, Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=8aGhZQkoFbQ&#34;&gt;What the heck is the event loop anyway? — Philip Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ygA5U7Wgsg8&#34;&gt;La PILA DE EJECUCIÓN (Call Stack) de JavaScript — La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=iLWTnMzWtj4&amp;amp;list=PLlasXeu85E9cQ32gLCvAvr9vNaUccPVNP&#34;&gt;How JavaScript Code is executed? ❤️&amp;amp; Call Stack — Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;2. Primitive Types&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values&#34;&gt;JavaScript data types and data structures — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://2ality.com/2012/04/number-encoding.html&#34;&gt;How numbers are encoded in JavaScript — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://indepth.dev/posts/1139/here-is-what-you-need-to-know-about-javascripts-number-type&#34;&gt;What You Need to Know About JavaScript Number Type — Max Wizard K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.chewxy.com/2014/02/24/what-every-javascript-developer-should-know-about-floating-point-numbers/&#34;&gt;What Every JavaScript Developer Should Know About Floating Point Numbers — Chewxy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascriptweblog.wordpress.com/2010/09/27/the-secret-life-of-javascript-primitives/&#34;&gt;The Secret Life of JavaScript Primitives — Angus Croll&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flow.org/en/docs/types/primitives/&#34;&gt;Primitive Types — Flow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/d4nyll/not-everything-in-javascript-is-an-object&#34;&gt;(Not) Everything in JavaScript is an Object — Daniel Li&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Data_structures#Primitive_values&#34;&gt;JavaScript data types and data structures — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/diving-deeper-in-javascripts-objects-318b1e13dc12&#34;&gt;Diving Deeper in JavaScripts Objects — Arfat Salman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@bolajiayodeji/the-differences-between-object-freeze-vs-const-in-javascript-4eacea534d7c&#34;&gt;The differences between Object.freeze() vs Const in JavaScript — Bolaji Ayodeji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/object-toprimitive&#34;&gt;Object to primitive conversion — JavaScript.info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9ooYYRLdg_g&#34;&gt;JavaScript Reference vs Primitive Types — Academind&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=HsbWQsSCE5Y&#34;&gt;JavaScript Primitive Types — Simon Sez IT&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=e-_mDyqm2oU&#34;&gt;Value Types and Reference Types in JavaScript — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qw3j0A3DIzQ&#34;&gt;JavaScript Primitive Data Types — Avelx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=MqHDDtVYJRI&#34;&gt;Everything you never wanted to know about JavaScript numbers — Bartek Szopka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=B4Bbmei_thw&#34;&gt;What are variables in Javascript? — JS For Everyone&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=cC65D2q5f8I&#34;&gt;TIPOS DE DATOS PRIMITIVOS en JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;3. Value Types and Reference Types&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/explaining-value-vs-reference-in-javascript-647a975e12a0&#34;&gt;Explaining Value vs. Reference in Javascript — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gist.github.com/branneman/7fb06d8a74d7e6d4cbcf75c50fec599c&#34;&gt;Primitive Types &amp;amp; Reference Types in JavaScript — Bran van der Meer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@benastontweet/lesson-1b-javascript-fundamentals-380f601ba851&#34;&gt;Value Types, Reference Types and Scope in JavaScript — Ben Aston&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/back-to-roots-javascript-value-vs-reference-8fb69d587a18&#34;&gt;Back to roots: JavaScript Value vs Reference — Miro Koczka&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/grasp-by-value-and-by-reference-in-javascript-7ed75efa1293&#34;&gt;Grasp “By Value” and “By Reference” in JavaScript — Léna Faure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-reference-and-copy-variables-b0103074fdf0&#34;&gt;JavaScript Reference and Copy Variables — Vítor Capretz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.javascripttutorial.net/javascript-primitive-vs-reference-values/&#34;&gt;JavaScript Primitive vs Reference Values&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://stackoverflow.com/questions/6605640/javascript-by-reference-vs-by-value&#34;&gt;JavaScript by Reference vs. by Value — nrabinowitz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/mostlyfocusedmike/javascript-interview-prep-primitive-vs-reference-types-3o4f&#34;&gt;JavaScript Interview Prep: Primitive vs. Reference Types — Mike Cronin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=E-dAnFdq8k8&#34;&gt;Javascript Pass by Value vs Pass by Reference — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=fD0t_DKREbE&#34;&gt;JavaScript Value vs Reference Types — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AvkyOrWkuQc&#34;&gt;VALORES vs REFERENCIAS en JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;4. Implicit, Explicit, Nominal, Structuring and Duck Typing&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/promhize/what-you-need-to-know-about-javascripts-implicit-coercion-e23&#34;&gt;What you need to know about Javascript&#39;s Implicit Coercion — Promise Tochi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/js-type-coercion-explained-27ba3d9a2839&#34;&gt;JavaScript Type Coercion Explained — Alexey Samoshkin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-coercion-explained-545c895213d3&#34;&gt;Javascript Coercion Explained — Ben Garrison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://stackoverflow.com/questions/19915688/what-exactly-is-type-coercion-in-javascript&#34;&gt;What exactly is Type Coercion in Javascript? - Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qGyqzN0bjhc&amp;amp;t&#34;&gt;== ? === ??? ...#@^% - Shirmung Bielefeld&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=b04Q_vyqEG8&#34;&gt;Coercion in Javascript - Hitesh Choudhary&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=z4-8wMSPJyI&#34;&gt;JavaScript Questions: What is Coercion? - Steven Hancock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=C5fr0LZLMAs&#34;&gt;Typing: Static vs Dynamic, Weak vs. Strong - Codexpanse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=0ei4nb49GKo&#34;&gt;EL SISTEMA de TIPOS DE JAVASCRIPT - La Cocina del Código&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1st-ed&#34;&gt;You Don&#39;t Know JS, 1st Edition: Types &amp;amp; Grammar — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;5. == vs === vs typeof&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-double-equals-vs-triple-equals-61d4ce5a121a&#34;&gt;JavaScript Double Equals vs. Triple Equals — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://bytearcher.com/articles/equality-comparison-operator-javascript/&#34;&gt;Should I use === or == equality comparison operator in JavaScript? — Panu Pitkamaki&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/javascript/tutorial/double-equals-and-coercion-in-javascript&#34;&gt;== vs === JavaScript: Double Equals and Coercion — AJ Meyghani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.impressivewebs.com/why-use-triple-equals-javascipt/&#34;&gt;Why Use the Triple-Equals Operator in JavaScript? — Louis Lazaris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.oreilly.com/learning/what-is-the-difference-between-and-in-javascript&#34;&gt;What is the difference between == and === in JavaScript? — Craig Buckler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://stackoverflow.com/questions/3787901/why-javascripts-typeof-always-return-object&#34;&gt;Why javascript&#39;s typeof always return &#34;object&#34;? — Stack Overflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://tobyho.com/2011/01/28/checking-types-in-javascript/&#34;&gt;Checking Types in Javascript — Toby Ho&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://webbjocke.com/javascript-check-data-types/&#34;&gt;How to better check data types in JavaScript — Webbjocke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://tomeraberba.ch/html/post/checking-for-the-absence-of-a-value-in-javascript.html&#34;&gt;Checking for the Absence of a Value in JavaScript — Tomer Aberbach&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ol_su88I3kw&#34;&gt;JavaScript - The typeof operator — Java Brains&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qPYhTPt_SbQ&#34;&gt;Javascript typeof operator — DevDelight&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;6. Function Scope, Block Scope and Lexical Scope&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/2nd-ed/scope-closures&#34;&gt;You Don&#39;t Know JS Yet, 2nd Edition: Scope &amp;amp; Closures — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-functions-understanding-the-basics-207dbf42ed99&#34;&gt;JavaScript Functions — Understanding The Basics — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.deadcoderising.com/2017-04-11-es6-var-let-and-const-the-battle-between-function-scope-and-block-scope/&#34;&gt;The battle between Function Scope and Block Scope — Marius Herring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://adripofjavascript.com/blog/drips/emulating-block-scope-in-javascript.html&#34;&gt;Emulating Block Scope in JavaScript — Josh Clanton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@josephcardillo/the-difference-between-function-and-block-scope-in-javascript-4296b2322abe&#34;&gt;The Difference Between Function and Block Scope in JavaScript — Joseph Cardillo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://edgecoders.com/function-scopes-and-block-scopes-in-javascript-25bbd7f293d7&#34;&gt;Function Scopes and Block Scopes in JavaScript — Samer Buna&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://ryanmorr.com/understanding-scope-and-context-in-javascript/&#34;&gt;Understanding Scope and Context in JavaScript — Ryan Morr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/javascript-scope-closures/&#34;&gt;JavaScript Scope and Closures — Zell Liew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.telerik.com/topics/web-development/understanding-scope-in-javascript/&#34;&gt;Understanding Scope in JavaScript — Wissam Abirached&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://speakingjs.com/es5/ch16.html&#34;&gt;Speaking JavaScript - Variables: Scopes, Environments, and Closures — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/understanding-scope-in-javascript&#34;&gt;Understanding Scope in JavaScript ― Hammad Ahmed&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/when-to-use-a-function-declarations-vs-a-function-expression-70f15152a0a0&#34;&gt;When to use a function declaration vs. a function expression ― Amber Wilkie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/alexandrafren/a-javascript-fundamentals-cheat-sheet-scope-context-and-this-28ai&#34;&gt;A JavaScript Fundamentals Cheat Sheet: Scope, Context, and “this” ― Alexandra Fren&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Functions#function_scope&#34;&gt;Functions / Function scope ― MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=SBwoFkRjZvE&#34;&gt;What Makes Javascript Weird ... and Awesome pt. 4 — LearnCode.academy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=dhp57T3p760&#34;&gt;Variable Scope in JavaScript — Kirupa Chinnathambi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=aK_nuUAdr8E&#34;&gt;JavaScript Block Scope and Function Scope — mmtuts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=GhNA0r10MmA&#34;&gt;What the Heck is Lexical Scope? — NWCalvank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=FyWdrCZZavQ&#34;&gt;Variable Scope — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;7. Expression vs Statement&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/promhize/javascript-in-depth-all-you-need-to-know-about-expressions-statements-and-expression-statements-5k2&#34;&gt;All you need to know about Javascript&#39;s Expressions, Statements and Expression Statements — Promise Tochi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/function-expressions-vs-declarations/&#34;&gt;Function Expressions vs Function Declarations — Paul Wilkins&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@raviroshan.talk/javascript-function-declaration-vs-expression-f5873b8c7b38&#34;&gt;JavaScript Function — Declaration vs Expression — Ravi Roshan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@mandeep1012/function-declarations-vs-function-expressions-b43646042052&#34;&gt;Function Declarations vs. Function Expressions — Mandeep Singh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascriptweblog.wordpress.com/2010/07/06/function-declarations-vs-function-expressions/&#34;&gt;Function Declarations vs. Function Expressions — Anguls Croll&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=WVyCrI1cHi8&#34;&gt;Expressions vs. Statements in JavaScript — Hexlet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=3jDpNGJkupA&#34;&gt;JavaScript - Expression vs. Statement — WebTunings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;8. IIFE, Modules and Namespaces&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@vvkchandra/essential-javascript-mastering-immediately-invoked-function-expressions-67791338ddc6&#34;&gt;Mastering Immediately-Invoked Function Expressions ― Chandra Gundamaraju&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hashnode.com/post/do-es6-modules-make-the-case-of-iifes-obsolete-civ96wet80scqgc538un20es0&#34;&gt;Do ES6 Modules make the case of IIFEs obsolete?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.jvandemo.com/a-10-minute-primer-to-javascript-modules-module-formats-module-loaders-and-module-bundlers/&#34;&gt;A 10 minute primer to JavaScript modules, module formats, module loaders and module bundlers ― Jurgen Van de Moere&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://exploringjs.com/es6/ch_modules.html&#34;&gt;Modules ― Exploring JS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hacks.mozilla.org/2018/03/es-modules-a-cartoon-deep-dive/&#34;&gt;ES modules: A cartoon deep-dive — Lin Clark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/understanding-es6-modules/&#34;&gt;Understanding ES6 Modules — Craig Buckler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.cloud66.com/an-overview-of-es6-modules-in-javascript/&#34;&gt;An overview of ES6 Modules in JavaScript — Brent Graham&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-modules-in-depth&#34;&gt;ES6 Modules in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/es6-modules-node-js-and-the-michael-jackson-solution-828dc244b8b&#34;&gt;ES6 modules, Node.js and the Michael Jackson Solution — Alberto Gimeno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-modules-a-beginner-s-guide-783f7d7a5fcc&#34;&gt;JavaScript Modules: A Beginner’s Guide — Preethi Kasireddy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developers.google.com/web/fundamentals/primers/modules&#34;&gt;Using JavaScript modules on the web — Addy Osmani &amp;amp; Mathias Bynens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/bhagatparwinder/iife-immediately-invoked-function-expressions-49c5&#34;&gt;IIFE: Immediately Invoked Function Expressions — Parwinder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://sassy-butter-197.notion.site/Javascript-bundlers-016932b17b0744e983c2cc0db31e6f02&#34;&gt;Javascript Module Bundlers — Vanshu Hassija&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=3cbiZV4H22c&#34;&gt;Immediately Invoked Function Expression - Beau teaches JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=I5EntfMeIIQ&#34;&gt;Understanding JavaScript IIFE — Sheo Narayan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=_3oSWwapPKQ&#34;&gt;JavaScript Modules: ES6 Import and Export — Kyle Robinson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=aQr2bV1BPyE&#34;&gt;ES6 - Modules — Ryan Christiani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=fIP4pjAqCtQ&#34;&gt;ES6 Modules in the Real World — Sam Thorogood&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=5P04OK6KlXA&#34;&gt;ES6 Modules — TempleCoding&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Xd7zgPFwVX8&amp;amp;&#34;&gt;JavaScript IIFE (Immediately Invoked Function Expressions) — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;9. Message Queue and Event Loop&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/javascript-event-loop-explained-4cd26af121d4&#34;&gt;JavaScript Event Loop Explained — Anoop Raveendran&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.carbonfive.com/2013/10/27/the-javascript-event-loop-explained/&#34;&gt;The JavaScript Event Loop: Explained — Erin Sweson-Healey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-js-the-event-loop-959beae3ac40&#34;&gt;Understanding JS: The Event Loop — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.zeolearn.com/magazine/understanding-the-javascript-event-loop&#34;&gt;Understanding the JavaScript Event Loop — Ashish Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flaviocopes.com/javascript-event-loop/&#34;&gt;The JavaScript Event Loop — Flavio Copes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.sessionstack.com/how-javascript-works-event-loop-and-the-rise-of-async-programming-5-ways-to-better-coding-with-2f077c4438b5&#34;&gt;How JavaScript works: Event loop — Alexander Zlatkov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jakearchibald.com/2015/tasks-microtasks-queues-and-schedules/&#34;&gt;Tasks, microtasks, queues and schedules — Jake Archibald&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/presto412/visualising-the-javascript-event-loop-with-a-pizza-restaurant-analogy-47a8&#34;&gt;Visualising the JavaScript Event Loop with a Pizza Restaurant analogy — Priyansh Jain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lydiahallie/javascript-visualized-event-loop-3dif&#34;&gt;JavaScript Visualized: Event Loop — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=8aGhZQkoFbQ&#34;&gt;What the heck is the event loop anyway? | JSConf EU — Philip Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XzXIMZMN9k4&#34;&gt;JavaScript Event Loop — ComScience Simplified&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=6MXRNXXgP_0&#34;&gt;I&#39;m stuck in an Event Loop — Philip Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=cCOL7MC4Pl0&#34;&gt;In The Loop - Jake Archibald | JSConf.Asia 2018&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Eqq2Rb7LzYE&#34;&gt;Desmitificando el Event Loop (Spanish)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;10. setTimeout, setInterval and requestAnimationFrame&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/settimeout-setinterval&#34;&gt;setTimeout and setInterval — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/akanksha_9560/why-not-to-use-setinterval--2na9&#34;&gt;Why not to use setInterval — Akanksha Sharma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://develoger.com/settimeout-vs-setinterval-cff85142555b&#34;&gt;setTimeout VS setInterval — Develoger&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/using-requestanimationframe/&#34;&gt;Using requestAnimationFrame — Chris Coyier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.javascriptkit.com/javatutors/requestanimationframe.shtml&#34;&gt;Understanding JavaScript&#39;s requestAnimationFrame() — JavaScript Kit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.amitmerchant.com/Handling-Time-Intervals-In-Javascript/&#34;&gt;Handling time intervals in JavaScript - Amit Merchant&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=6bPKyl8WYWI&#34;&gt;Javascript: How setTimeout and setInterval works — Coding Blocks India&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=TbCgGWe8LN8&#34;&gt;setTimeout and setInterval in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=0VVJSvlUgtg&#34;&gt;JavaScript Timers — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=mVKfrWCOB60&#34;&gt;JavaScript setTimeOut and setInterval Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;11. JavaScript Engines&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.softwaremag.com/javascript-engines/&#34;&gt;JavaScript Engines — Jen Looper&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/understanding-the-core-of-nodejs-the-powerful-chrome-v8-engine-79e7eb8af964&#34;&gt;Understanding How the Chrome V8 Engine Translates JavaScript into Machine Code — DroidHead&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/understanding-v8s-bytecode-317d46c94775&#34;&gt;Understanding V8’s Bytecode — Franziska Hinkelmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.mediacurrent.com/blog/brief-history-googles-v8-javascript-engine/&#34;&gt;A Brief History of Google’s V8 Javascript Engine — Clair Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-essentials-why-you-should-know-how-the-engine-works-c2cc0d321553&#34;&gt;JavaScript essentials: why you should know how the engine works - Rainer Hahnekamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://mathiasbynens.be/notes/shapes-ics&#34;&gt;JavaScript engine fundamentals: Shapes and Inline Caches&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://mathiasbynens.be/notes/prototypes&#34;&gt;JavaScript engine fundamentals: optimizing prototypes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://v8.dev/blog/elements-kinds&#34;&gt;How V8 optimizes array operations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=5nmpokoRaZI&#34;&gt;JavaScript Engines: The Good Parts™ — Mathias Bynens &amp;amp; Benedikt Meurer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=2WJL19wDH68&#34;&gt;JS Engine EXPOSED 🔥 Google&#39;s V8 Architecture 🚀 | Namaste JavaScript Ep. 16 - Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;12. Bitwise Operators, Type Arrays and Array Buffers&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/programming-with-js-bitwise-operations-393eb0745dc4&#34;&gt;Programming with JS: Bitwise Operations — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/using-javascript-bitwise-operators-in-real-life-f551a731ff5&#34;&gt;Using JavaScript’s Bitwise Operators in Real Life — ian m&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.w3resource.com/javascript/operators/bitwise-operator.php&#34;&gt;JavaScript Bitwise Operators — w3resource&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/bother7-blog/bitwise-operators-in-javascript-65c4c69be0d3&#34;&gt;Bitwise Operators in Javascript — Joe Cha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/techtrument/a-comprehensive-primer-on-binary-computation-and-bitwise-operators-in-javascript-81acf8341f04&#34;&gt;A Comprehensive Primer on Binary Computation and Bitwise Operators in Javascript — Paul Brown&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.quora.com/How-can-I-understand-Bitwise-operation-in-JavaScript&#34;&gt;How can I understand Bitwise operation in JavaScript?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=mesu75PTDC8&#34;&gt;JavaScript Bitwise Operators — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;13. DOM and Layout Trees&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://eloquentjavascript.net/14_dom.html&#34;&gt;Eloquent JavaScript, 3rd Edition: Ch. 14 - The Document Object Model&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/introduction-to-the-dom&#34;&gt;How To Understand and Modify the DOM in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/whats-the-document-object-model-and-why-you-should-know-how-to-use-it-1a2d0bc5429d&#34;&gt;What’s the Document Object Model, and why you should know how to use it — Leonardo Maldonado&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.guru99.com/how-to-use-dom-and-events-in-javascript.html&#34;&gt;JavaScript DOM Tutorial with Example — Guru99&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/dom/&#34;&gt;What is the DOM? — Chris Coyier&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://zellwk.com/blog/dom-traversals/&#34;&gt;Traversing the DOM with JavaScript — Zell Liew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/dom-nodes&#34;&gt;DOM Tree&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/how-to-traverse-the-dom-in-javascript-d6555c335b4e&#34;&gt;How to traverse the DOM in Javascript — Vojislav Grujić&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction&#34;&gt;Render Tree Construction — Ilya Grigorik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://bitsofco.de/what-exactly-is-the-dom/&#34;&gt;What exactly is the DOM?&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=FIORjGvT0kk&#34;&gt;JavaScript DOM — The Net Ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=0ik6X4DJKCc&#34;&gt;JavaScript DOM Crash Course — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;14. Factories and Classes&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-classes-in-javascript&#34;&gt;How To Use Classes in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/tech-tajawal/javascript-classes-under-the-hood-6b26d2667677&#34;&gt;Javascript Classes — Under The Hood — Majid&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.javascriptjanuary.com/blog/es6-classes&#34;&gt;ES6 Classes — Nathaniel Foster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/better-javascript-with-es6-pt-ii-a-deep-dive-into-classes&#34;&gt;Better JavaScript with ES6, Pt. II: A Deep Dive into Classes ― Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/understand-the-factory-design-pattern-in-plain-javascript-20b348c832bd&#34;&gt;Understand the Factory Design Pattern in Plain JavaScript — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://atendesigngroup.com/blog/factory-functions-javascript&#34;&gt;Factory Functions in JavaScript — Josh Miller&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@SntsDev/the-factory-pattern-in-js-es6-78f0afad17e9&#34;&gt;The Factory Pattern in JS ES6 — SnstsDev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/class-vs-factory-function-exploring-the-way-forward-73258b6a8d15&#34;&gt;Class vs Factory function: exploring the way forward — Cristi Salcescu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@robertgrosse/how-es6-classes-really-work-and-how-to-build-your-own-fd6085eb326a&#34;&gt;How ES6 classes really work and how to build your own — Robert Grosse&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jordankasper.com/understanding-super-in-javascript&#34;&gt;Understanding &lt;code&gt;super&lt;/code&gt; in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lawrence_eagles/an-easy-guide-to-understanding-classes-in-javascript-3bcm&#34;&gt;An Easy Guide To Understanding Classes In JavaScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=jpegXpQpb3o&#34;&gt;JavaScript Factory Functions — Programming with Mosh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ImwrezYhw4w&#34;&gt;Factory Functions in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=R7-IwpH80UE&#34;&gt;Javascript Tutorial Function Factories — Crypto Chan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;15. this, call, apply and bind&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call&#34;&gt;call() — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_objects/Function/bind&#34;&gt;bind() — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply&#34;&gt;apply() — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://levelup.gitconnected.com/grokking-call-apply-and-bind-methods-in-javascript-392351a4be8b&#34;&gt;Grokking call(), apply() and bind() methods in JavaScript — Aniket Kudale&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/niladrisekhardutta/how-to-call-apply-and-bind-in-javascript-8i1jca6jp&#34;&gt;How-to: call() , apply() and bind() in JavaScript — Niladri Sekhar Dutta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://javascriptissexy.com/javascript-apply-call-and-bind-methods-are-essential-for-javascript-professionals/&#34;&gt;JavaScript’s Apply, Call, and Bind Methods are Essential for JavaScript Professionals — Richard Bovell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://tylermcginnis.com/this-keyword-call-apply-bind-javascript/&#34;&gt;WTF is this - Understanding the this keyword, call, apply, and bind in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@omergoldberg/javascript-call-apply-and-bind-e5c27301f7bb&#34;&gt;Javascript: call(), apply() and bind() — Omer Goldberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@ivansifrim/the-differences-between-call-apply-bind-276724bb825b&#34;&gt;The difference between call / apply / bind — Ivan Sifrim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ritik_dev_js/what-the-hack-is-call-apply-bind-in-javascript-11ce&#34;&gt;What the hack is call, apply, bind in JavaScript — Ritik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://thenewstack.io/mastering-javascript-callbacks-bind-apply-call/&#34;&gt;Mastering &#39;this&#39; in JavaScript: Callbacks and bind(), apply(), call() — Michelle Gienow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/kbk0125/javascripts-apply-call-and-bind-explained-by-hosting-a-cookout-32jo&#34;&gt;JavaScript’s apply, call, and bind explained by hosting a cookout — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.eigenx.com/blog/https/mediumcom/eigen-x/how-and-when-to-use-bind-call-and-apply-in-javascript-77b6f42898fb&#34;&gt;How AND When to use bind, call, and apply in Javascript — Eigen X&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ycmjason/let-me-explain-to-you-what-is-this-javascript-44ja&#34;&gt;Let me explain to you what is &lt;code&gt;this&lt;/code&gt;. (Javascript) — Jason Yu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/quick-code/understanding-the-this-keyword-in-javascript-cb76d4c7c5e8&#34;&gt;Understanding the “this” Keyword in JavaScript — Pavan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-understand-the-keyword-this-and-context-in-javascript-cd624c6b74b8&#34;&gt;How to understand the keyword this and context in JavaScript — Lukas Gisder-Dubé&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/_hridaysharma/what-the-heck-is-this-in-javascript-37n1&#34;&gt;What the heck is this in Javascript? — Hridayesh Sharma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/steelvoltage/this-and-bind-in-javascript-2pam&#34;&gt;This and Bind In Javascript — Brian Barbour&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/canderson93/3-techniques-for-maintaining-your-sanity-using-this-in-javascript-3idf&#34;&gt;3 Techniques for Maintaining Your Sanity Using &#34;This&#34; in JavaScript — Carl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/aakashsr/mastering-the-javascript-this-keyword-4pfa&#34;&gt;Mastering the JavaScript &#34;this&#34; Keyword — Aakash Srivastav&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/sargalias/this-binding-in-javascript-4-new-binding-2p1n&#34;&gt;This binding in JavaScript – 4. New binding — Spyros Argalias&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/thatgalnatalie/a-quick-intro-to-this-in-javascript-2mhp&#34;&gt;A quick intro to &#39;this&#39; in JavaScript — Natalie Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/cat__logic/explaining-javascript-this-to-my-cat-1kig&#34;&gt;Explaining JavaScript &#39;this&#39; to my cat — Andrey K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/developerkaren/a-conversation-with-the-this-keyword-in-javascript-3j6g&#34;&gt;A conversation with the &#39;this&#39; keyword in Javascript — Karen Efereyan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jscurious.com/what-are-call-apply-and-bind-in-javascript/&#34;&gt;What are call(), apply() and bind() in JavaScript — Amitav Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://yasemincidem.medium.com/understanding-this-binding-in-javascript-86687397c76d&#34;&gt;Understanding &#39;this&#39; binding in JavaScript — Yasemin Cidem&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=c0mLRpw-9rI&#34;&gt;JavaScript call, apply and bind — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AYVYxezrMWA&#34;&gt;JavaScript Practical Applications of Call, Apply and Bind functions— techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Uy0NOXLBraE&#34;&gt;JavaScript (call, bind, apply) — curious aatma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AOSYY1_np_4&#34;&gt;Understanding Functions and &#39;this&#39; In The World of ES2017 — Bryan Hughes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=GhbhD1HR5vk&#34;&gt;bind and this - Object Creation in JavaScript - FunFunFunction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=uBdH0iB1VDM&#34;&gt;JS Function Methods call(), apply(), and bind() — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;16. new, Constructor, instanceof and Instances&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-for-beginners-the-new-operator-cee35beb669e&#34;&gt;JavaScript For Beginners: the ‘new’ operator — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/demystifying-javascripts-new-keyword-874df126184c&#34;&gt;Let’s demystify JavaScript’s ‘new’ keyword — Cynthia Lee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/constructor-new&#34;&gt;Constructor, operator &#34;new&#34; — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://css-tricks.com/understanding-javascript-constructors/&#34;&gt;Understanding JavaScript Constructors — Faraz Kelhini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://openclassrooms.com/en/courses/3523231-learn-to-code-with-javascript/4379006-use-constructor-functions&#34;&gt;Use Constructor Functions — Openclassrooms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://2ality.com/2017/08/type-right.html&#34;&gt;Beyond &lt;code&gt;typeof&lt;/code&gt; and &lt;code&gt;instanceof&lt;/code&gt;: simplifying dynamic type checks — Dr. Axel Rauschmayer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://appendto.com/2016/10/what-is-the-instanceof-operator-in-javascript/&#34;&gt;What Is the Instanceof Operator in JavaScript — appendTo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascriptrefined.io/function-and-object-instances-of-each-other-1e1095d5faac&#34;&gt;Function and Object, instances of each other — Kiro Risk&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;17. Prototype Inheritance and Prototype Chain&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain&#34;&gt;Inheritance and the prototype chain — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@parsyval/javascript-prototype-vs-class-a7015d5473b&#34;&gt;Javascript : Prototype vs Class — Valentin PARSY&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://mathiasbynens.be/notes/prototypes&#34;&gt;JavaScript engine fundamentals: optimizing prototypes — Mathias Bynens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-prototype-cb29d82b8809&#34;&gt;JavaScript Prototype — NC Patro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/sandeepranjan2007/prototype-in-javascipt-knbve0lqo&#34;&gt;Prototype in Javascript — Sandeep Ranjan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/prototypes-in-javascript-5bba2990e04b&#34;&gt;Prototypes in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/prototype-in-js-busted-5547ec68872&#34;&gt;Prototype in JavaScript: it’s quirky, but here’s how it works — Pranav Jindal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-javascript-prototype-and-inheritance-d55a9a23bde2&#34;&gt;Understanding JavaScript: Prototype and Inheritance — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/_hridaysharma/understanding-classes-es5-and-prototypal-inheritance-in-javascript-n8d&#34;&gt;Understanding Classes (ES5) and Prototypal Inheritance in JavaScript — Hridayesh Sharma&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/varundey/prototype-proto-and-prototypal-inheritance-in-javascript-2inl&#34;&gt;prototype, &lt;strong&gt;proto&lt;/strong&gt; and Prototypal inheritance in JavaScript — Varun Dey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/prototype-inheritance&#34;&gt;Prototypal Inheritance — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.digitalocean.com/community/tutorials/understanding-prototypes-and-inheritance-in-javascript&#34;&gt;How To Work with Prototypes and Inheritance in JavaScript — Tania Rascia&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/master-javascript-prototypes-inheritance-d0a9a5a75c4e&#34;&gt;Master JavaScript Prototypes &amp;amp; Inheritance — Arnav Aggarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/understanding-prototypal-inheritance-in-javascript-with-css-93b2fcda75e4&#34;&gt;JavaScript’s Prototypal Inheritance Explained Using CSS — Nash Vail&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gist.github.com/derhuerst/a585c4916b1c361cc6f0&#34;&gt;Prototypal Inheritance in JavaScript — Jannis Redmann&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/demystifying-es6-classes-and-prototypal-inheritance&#34;&gt;Demystifying ES6 Classes And Prototypal Inheritance ― Neo Ighodaro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/danny/intro-to-prototypal-inheritance---js-9di&#34;&gt;Intro To Prototypal Inheritance — Dharani Jayakanthan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/varche/let-s-build-prototypal-inheritance-in-js-56mm&#34;&gt;Let’s Build Prototypal Inheritance in JS — var-che&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/attacomsian/objects-prototypes-and-classes-in-javascript-3i9b&#34;&gt;Objects, Prototypes and Classes in JavaScript — Atta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ladybenko/the-magical-world-of-javascript-prototypes-1mhg&#34;&gt;The magical world of JavaScript prototypes — Belén&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lawrence_eagles/understanding-prototypal-inheritance-in-javascript-4f31#chp-4&#34;&gt;Understanding Prototypal Inheritance In JavaScript — Lawrence Eagles&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/irenejpopova/objects-and-prototypes-in-javascript-2eie&#34;&gt;Objects and Prototypes in JavaScript — Irena Popova&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=sOrtAjyk4lQ&#34;&gt;Javascript Prototype Inheritance — Avelx&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=7oNWNlMrkpc&#34;&gt;JavaScript Prototype Inheritance Explained pt. I — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=uIlj6_z_wL8&#34;&gt;JavaScript Prototype Inheritance Explained pt. II — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qMO-LTOrJaE&#34;&gt;JavaScript Prototype Inheritance Explained — Kyle Robinson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=G6l5CHl67HQ&#34;&gt;Advanced Javascript - Prototypal Inheritance In 1 Minute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=phwzuiJJPpQ&#34;&gt;An Overview Of Classical Javascript Classes and Prototypal Inheritance — Pentacode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=4jb4AYEyhRc&#34;&gt;Object Oriented JavaScript - Prototype — The Net Ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=2rkEbcptR64&#34;&gt;Prototype in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=oCwCcNvaXAQ&#34;&gt;JavaScript Using Prototypes — O&#39;Reilly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XskMWBXNbp0&#34;&gt;A Beginner&#39;s Guide to Javascript&#39;s Prototype — Tyler Mcginnis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=hS_WqkyUah8&#34;&gt;Prototypes in Javascript - p5.js Tutorial — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/getify/You-Dont-Know-JS/tree/1st-ed&#34;&gt;You Don&#39;t Know JS, 1st Edition: this &amp;amp; Object Prototypes — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;18. Object.create and Object.assign&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create&#34;&gt;Object.create() — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign&#34;&gt;Object.assign() — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@happymishra66/object-create-in-javascript-fa8674df6ed2&#34;&gt;Object.create in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.htmlgoodies.com/beyond/javascript/object.create-the-new-way-to-create-objects-in-javascript.html&#34;&gt;Object.create(): the New Way to Create Objects in JavaScript — Rob Gravelle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://adripofjavascript.com/blog/drips/basic-inheritance-with-object-create.html&#34;&gt;Basic Inheritance with Object.create — Joshua Clanton&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.geeksforgeeks.org/object-create-javascript/&#34;&gt;Object.create() In JavaScript — GeeksforGeeks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@jonathanvox01/understanding-the-difference-between-object-create-and-the-new-operator-b2a2f4749358&#34;&gt;Understanding the difference between Object.create() and the new operator — Jonathan Voxland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/javascript-object-creation-patterns-best-practises/&#34;&gt;JavaScript Object Creation: Patterns and Best Practices — Jeff Mott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://alligator.io/js/dealing-with-objects/&#34;&gt;Dealing With Objects in JavaScript With Object.assign, Object.keys and hasOwnProperty&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/bar-talk/copying-objects-in-javascript&#34;&gt;Copying Objects in JavaScript ― Orinami Olatunji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-object-assign-bc9696dcbb6e&#34;&gt;JavaScript: Object.assign() — Thiago S. Adriano&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flaviocopes.com/how-to-clone-javascript-object/&#34;&gt;How to deep clone a JavaScript Object — Flavio Copes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/vzing/object-create-when-and-why-to-use-20m9&#34;&gt;Object.create(): When and Why to Use — VZing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=aw7NfYhR5rc&#34;&gt;Object.assign() explained — Aaron Writes Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9Ky4X6inpi4&#34;&gt;Object.assign() Method — techsith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;19. map, reduce, filter&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/jsguru/javascript-functional-programming-map-filter-and-reduce-846ff9ba492d&#34;&gt;JavaScript Functional Programming — map, filter and reduce — Bojan Gvozderac&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@joomiguelcunha/learn-map-filter-and-reduce-in-javascript-ea59009593c4&#34;&gt;Learn map, filter and reduce in Javascript — João Miguel Cunha&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://danmartensen.svbtle.com/javascripts-map-reduce-and-filter&#34;&gt;JavaScript’s Map, Reduce, and Filter — Dan Martensen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://code.tutsplus.com/tutorials/how-to-use-map-filter-reduce-in-javascript--cms-26209&#34;&gt;How to Use Map, Filter, &amp;amp; Reduce in JavaScript — Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-learn-to-chain-map-filter-and-reduce-acd2d0562cd4&#34;&gt;JavaScript — Learn to Chain Map, Filter, and Reduce — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/write-beautiful-javascript-with-%CE%BB-fp-es6-350cd64ab5bf&#34;&gt;Javascript data structure with map, reduce, filter and ES6 — Deepak Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-map-filter-and-reduce-in-javascript-5df1c7eee464&#34;&gt;Understanding map, filter and reduce in Javascript — Luuk Gruijs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/functional-programming-in-js-map-filter-reduce-pt-5-308a205fdd5f&#34;&gt;Functional Programming in JS: map, filter, reduce (Pt. 5) — Omer Goldberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://wsvincent.com/functional-javascript-map-filter-reduce/&#34;&gt;JavaScript: Map, Filter, Reduce — William S. Vincent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/es6-arrow-functions-new-fat-concise-syntax-javascript/&#34;&gt;Arrow Functions: Fat and Concise Syntax in JavaScript — Kyle Pennell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-arrow-functions-for-beginners-926947fc0cdc&#34;&gt;JavaScript: Arrow Functions for Beginners — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/when-and-why-you-should-use-es6-arrow-functions-and-when-you-shouldnt-3d851d7f0b26&#34;&gt;When (and why) you should use ES6 arrow functions — and when you shouldn’t — Cynthia Lee&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-learn-understand-arrow-functions-fe2083533946&#34;&gt;JavaScript — Learn &amp;amp; Understand Arrow Functions — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/podiihq/javascript-arrow-functions-27d4c3334b83&#34;&gt;(JavaScript )=&amp;gt; Arrow functions — sigu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@panderson.dev/javascript-reduce-79aab078da23&#34;&gt;Javascript.reduce() — Paul Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://gofore.com/en/why-you-should-replace-foreach/&#34;&gt;Why you should replace forEach with map and filter in JavaScript — Roope Hakulinen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/poka-techblog/simplify-your-javascript-use-map-reduce-and-filter-bd02c593cc2d&#34;&gt;Simplify your JavaScript – Use .map(), .reduce(), and .filter() — Etienne Talbot&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.codeanalogies.com/2018/07/24/javascripts-reduce-method-explained-by-going-on-a-diet/&#34;&gt;JavaScript’s Reduce Method Explained By Going On a Diet — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@amiratak88/difference-between-map-filter-and-reduce-in-javascript-822ff79d5160&#34;&gt;Difference between map, filter and reduce in JavaScript — Amirata Khodaparast&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/map-filter-reduce-ebbed4be4201&#34;&gt;Map⇄Filter⇄Reduce↻ — ashay mandwarya&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/finding-your-way-with-map-aecb8ca038f6&#34;&gt;Finding Your Way With .map() — Brandon Wozniewicz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-write-your-own-map-filter-and-reduce-functions-in-javascript-ab1e35679d26&#34;&gt;How to write your own map, filter and reduce functions in JavaScript — Hemand Nair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/manipulating-arrays-in-javascript/&#34;&gt;How to Manipulate Arrays in JavaScript — Bolaji Ayodeji&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/15-useful-javascript-examples-of-map-reduce-and-filter-74cbbb5e0a1f&#34;&gt;How to simplify your codebase with map(), reduce(), and filter() in JavaScript — Alex Permyakov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/pickleat/map-filter-and-reduce-2efb&#34;&gt;.map(), .filter(), and .reduce() — Andy Pickle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/chrisachard/map-filter-reduce-crash-course-5gan&#34;&gt;Map/Filter/Reduce Crash Course — Chris Achard&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@js_tut/map-filter-and-reduce-animated-7fe391a35a47&#34;&gt;Map, Filter and Reduce – Animated — JavaScript Teacher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/uptheirons78/map-filter-reduce-and-others-arrays-iterators-you-must-know-to-become-an-algorithms-wizard-4209&#34;&gt;Map, Filter, Reduce and others Arrays Iterators You Must Know to Become an Algorithms Wizard — Mauro Bono&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/how-to-javascripts-map-vs-filter-vs-reduce-80d87a5a0a24&#34;&gt;How to Use JavaScript’s .map, .filter, and .reduce — Avery Duffin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://towardsdatascience.com/javascript-performance-test-for-vs-for-each-vs-map-reduce-filter-find-32c1113f19d7&#34;&gt;Javascript performance test - for vs for each vs (map, reduce, filter, find) — Deepak Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/using-map-filter-and-reduce-properly-50e07f80c8b2&#34;&gt;Using .map(), .filter() and .reduce() properly — Sasanka Kudagoda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/sanderdebr/mastering-the-javascript-reduce-method-2foj&#34;&gt;Mastering the JavaScript Reduce method ✂️ — sanderdebr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/javascript-map-how-to-use-the-js-map-function-array-method/&#34;&gt;JavaScript Map – How to Use the JS .map() Function (Array Method) — FreeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=UXiYii0Y7Nw&#34;&gt;Map, Filter and Reduce — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=vytzLlY_wmU&#34;&gt;Functional JavaScript: Map, forEach, Reduce, Filter — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qTeeVd8hOFY&#34;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part I) — Michael Rosata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=gIm9xLYudL0&#34;&gt;JavaScript Array superpowers: Map, Filter, Reduce (part 2) — Michael Rosata&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=zYBeEPxNSbw&#34;&gt;JavaScript Higher Order Functions - Filter, Map, Sort &amp;amp; Reduce — Epicop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=4qWlqD0yYTU&#34;&gt;[Array Methods 2/3] .filter + .map + .reduce — CodeWithNick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=6sQDTgOqh-I&#34;&gt;Arrow functions in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=e-5obm1G_FY&amp;amp;t=1521s&#34;&gt;Learning Functional Programming with JavaScript — Anjana Vakil - JSUnconf&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=bCqtb-Z5YGQ&amp;amp;t=17s&#34;&gt;Map - Parte 2 JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Wl98eZpkp-c&#34;&gt;Reduce basics - Part 3 of FP in JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=1DMolJ2FrNY&amp;amp;t=621s&#34;&gt;Reduce Advanced - Part 4 of FP in JavaScript - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=IXp06KekEjM&#34;&gt;reduce Array Method | JavaScript Tutorial - Florin Pop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=P4RAFdZDn3M&#34;&gt;map Array Method | JavaScript Tutorial - Florin Pop&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://youtu.be/Ah7-PPjQ5Ls&#34;&gt;Different array methods in 1 minute | Midudev (Spanish)&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;20. Pure Functions, Side Effects, State Mutation and Event Propagation&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-and-functional-programming-pt-3-pure-functions-d572bb52e21c&#34;&gt;Javascript and Functional Programming — Pure Functions — Omer Goldberg&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-pure-function-d1c076bec976&#34;&gt;Master the JavaScript Interview: What is a Pure Function? — Eric Elliott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@jamesjefferyuk/javascript-what-are-pure-functions-4d4d5392d49c&#34;&gt;JavaScript: What Are Pure Functions And Why Use Them? — James Jeffery&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.nicoespeon.com/en/2015/01/pure-functions-javascript/&#34;&gt;Pure functions in JavaScript — @nicoespeon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/functional-programming-pure-functions/&#34;&gt;Functional Programming: Pure Functions — Arne Brasseur&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://appdividend.com/2017/04/10/pure-functions-in-javascript/&#34;&gt;Pure Functions In Javascript — Krunal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://alistapart.com/article/making-your-javascript-pure&#34;&gt;Making your JavaScript Pure — Jack Franklin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@fknussel/arrays-objects-and-mutations-6b23348b54aa&#34;&gt;Arrays, Objects and Mutations — Federico Knüssel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/the-state-of-immutability-169d2cd11310&#34;&gt;The State of Immutability — Maciej Sikora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/zurvin/hablemos-de-inmutabilidad-3dc65d290783&#34;&gt;Hablemos de Inmutabilidad — Kike Sanchez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jrsinclair.com/articles/2018/how-to-deal-with-dirty-side-effects-in-your-pure-functional-javascript/&#34;&gt;How to deal with dirty side effects in your pure functional JavaScript — James Sinclair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://davidwalsh.name/preventing-sideeffects-javascript&#34;&gt;Preventing Side Effects in JavaScript — David Walsh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/wielding-pure-functions-in-javascript-and-function-composition&#34;&gt;Wielding Pure Functions in JavaScript and Function Composition — Peleke Sengstacke&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://wsvincent.com/javascript-pure-functions/&#34;&gt;JavaScript: Pure Functions — William S. Vincent&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/functional-programming-paradigms-in-modern-javascript-pure-functions-797d9abbee1&#34;&gt;Functional programming paradigms in modern JavaScript: Pure functions — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-javascript-mutation-and-pure-functions-7231cc2180d3&#34;&gt;Understanding Javascript Mutation and Pure Functions — Chidume Nnamdi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@bluepnume/functional-ish-javascript-205c05d0ed08&#34;&gt;Functional-ish JavaScript — Daniel Brain&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Building_blocks/Events&#34;&gt;Event Propagation — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/bubbling-and-capturing&#34;&gt;Event Propagation — Bubbling and capturing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=dZ41D6LDSBg&#34;&gt;Pure Functions — Hexlet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Jh_Uzqzz_wM&#34;&gt;Pure Functions - Functional Programming in JavaScript — Paul McBride&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=frT3H-eBmPc&#34;&gt;JavaScript Pure Functions — Seth Alexander&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=AHbRVJzpB54&#34;&gt;JavaScript Pure vs Impure Functions Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=BMUiFMZr7vk&#34;&gt;Pure Functions - Programação Funcional: Parte 1 - Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=JYc7gr9Ehl0&#34;&gt;Event Propagation - JavaScript Event Bubbling and Propagation - Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;21. Closures&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures&#34;&gt;Closures — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/closure&#34;&gt;Closure — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/i-never-understood-javascript-closures-9663703368e8&#34;&gt;I never understood JavaScript closures — Olivier De Meulder&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://javascriptissexy.com/understand-javascript-closures-with-ease/&#34;&gt;Understand JavaScript Closures With Ease — Richard Bovell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/understanding-javascript-closures-da6aab330302&#34;&gt;Understanding JavaScript Closures — Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/understand-closures-in-javascript-d07852fa51e7&#34;&gt;Understand Closures in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-closures-simplified-d0d23fa06ba4&#34;&gt;A simple guide to help you understand closures in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/understanding-javascript-closures-a-practical-approach&#34;&gt;Understanding JavaScript Closures: A Practical Approach — Paul Upendo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-javascript-closures-4188edf5ea1b&#34;&gt;Understanding JavaScript: Closures — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/how-to-use-javascript-closures-with-confidence-85cd1f841a6b&#34;&gt;How to use JavaScript closures with confidence — Léna Faure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://howchoo.com/g/mge2mji2mtq/javascript-closures-by-example&#34;&gt;JavaScript closures by example — tyler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-closures-and-scope-3784c75b9290&#34;&gt;JavaScript — Closures and Scope — Alex Aitken&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/discover-the-power-of-closures-in-javascript-5c472a7765d7&#34;&gt;Discover the power of closures in JavaScript — Cristi Salcescu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://tylermcginnis.com/ultimate-guide-to-execution-contexts-hoisting-scopes-and-closures-in-javascript/&#34;&gt;The Ultimate Guide to Hoisting, Scopes, and Closures in JavaScript — Tyler McGinnis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://reallifejs.com/the-meat/getting-closure/&#34;&gt;Getting Closure — RealLifeJS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ritik_dev_js/what-the-hack-is-closure-currying-and-iife-in-javascript-32m9&#34;&gt;Closure, Currying and IIFE in JavaScript — Ritik&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/a-beginners-guide-to-closures-in-javascript-97d372284dda&#34;&gt;Understanding Closures in JavaScript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/a-basic-guide-to-closures-in-javascript-9fc8b7e3463e&#34;&gt;A basic guide to Closures in JavaScript — Parathan Thiyagalingam&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/steelvoltage/closures-using-memoization-3597&#34;&gt;Closures: Using Memoization — Brian Barbour&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/a-brief-introduction-to-closures-and-lexical-scoping-in-javascript-8a5866496232&#34;&gt;A Brief Introduction to Closures and Lexical Scoping in JavaScript — Ashutosh K Singh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/stereobooster/demystify-closures-5g42&#34;&gt;Demystify Closures — stereobooster&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/boywithsilverwings/scopes-and-closures-javascript-concepts-4dfj&#34;&gt;Scopes and Closures - JavaScript Concepts — Agney Menon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/mattpopovich/understanding-closures-in-javascript-3k0d&#34;&gt;Understanding Closures in JavaScript — Matt Popovich&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://whatthefuck.is/closure&#34;&gt;whatthefuck.is · A Closure - Dan Abramov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/brandonleboeuf/closure-in-javascript-49n7&#34;&gt;Closures in JavaScript can... - Brandon LeBoeuf&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XTAzsODSCsM&#34;&gt;JavaScript The Hard Parts: Closure, Scope &amp;amp; Execution Context - Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=71AtaJpJHw0&#34;&gt;Javascript Closure — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=CQqwU2Ixu-U&#34;&gt;Closures — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=-xqJo5VRP4A&#34;&gt;Closures in JavaScript — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=yiEeiMN2Khs&#34;&gt;JavaScript Closures 101: What is a closure? — JavaScript Tutorials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=1JsJx1x35c0&#34;&gt;Closures — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=-rLrGAXK8WE&#34;&gt;JavaScript Closures — CodeWorkr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=qikxEIxsXco&#34;&gt;Closures in JS - Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://youtu.be/xa8lhVwQBw4&#34;&gt;CLOSURES en JavaScript: Qué son y cómo funcionan - Carlos Azaustre&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;22. High Order Functions&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://eloquentjavascript.net/05_higher_order.html&#34;&gt;Eloquent JavaScript, 3rd Edition: Ch. 5 - Higher-order Functions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/higher-order-functions-javascript/&#34;&gt;Higher-Order Functions in JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/higher-order-functions-in-javascript-d9101f9cf528&#34;&gt;Higher Order Functions: Using Filter, Map and Reduce for More Maintainable Code — Guido Schmitz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/effective-functional-javascript-first-class-and-higher-order-functions-713fde8df50a&#34;&gt;First-class and Higher Order Functions: Effective Functional JavaScript — Hugo Di Francesco&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.lullabot.com/articles/higher-order-functions-in-javascript&#34;&gt;Higher Order Functions in JavaScript — John Hannah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://derickbailey.com/2015/10/21/fun-with-higher-order-functions-in-javascript/&#34;&gt;Fun With Higher Order Functions In JavaScript — Derick&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/pedroapfilho/high-order-functions&#34;&gt;Just a reminder on how to use high order functions — Pedro Filho&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-higher-order-functions-in-javascript-75461803bad&#34;&gt;Understanding Higher-Order Functions in JavaScript — Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/nuel_ikwuoma/higher-order-functions-a-pragmatic-approach-51fb&#34;&gt;Higher Order Functions - A pragmatic approach — emmanuel ikwuoma&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=rRgD1yVwIvE&#34;&gt;JavaScript Higher Order Functions &amp;amp; Arrays — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=BMUiFMZr7vk&#34;&gt;Higher Order Functions — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=dTlpYnmBW9I&#34;&gt;Higher Order Functions in Javascript — Raja Yogan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=GYRMNp1SKXA&#34;&gt;Higher Order Iterators in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=H4awPsyugS0&#34;&gt;Higher Order Functions in JavaScript — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=7E8ctomPQJw&#34;&gt;Part 1: An Introduction to Callbacks and Higher Order Functions - Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=28MXziDZkE4&#34;&gt;Part 2: Understanding Why We Need Higher Order Functions - Codesmith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=HkWxvB1RJq0&#34;&gt;Higher-Order Functions ft. Functional Programming - Akshay Saini&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;23. Recursion&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/recursion-in-javascript-1608032c7a1f&#34;&gt;Recursion in JavaScript — Kevin Ennis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@zfrisch/understanding-recursion-in-javascript-992e96449e03&#34;&gt;Understanding Recursion in JavaScript — Zak Frisch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/learn-and-understand-recursion-in-javascript-b588218e87ea&#34;&gt;Learn and Understand Recursion in JavaScript — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/recursion-functional-javascript/&#34;&gt;Recursion in Functional JavaScript — M. David Green&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/programming-with-js-recursion-31371e2bf808&#34;&gt;Programming with JS: Recursion — Alexander Kondov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/simov/anonymous-recursion-in-javascript&#34;&gt;Anonymous Recursion in JavaScript — simo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.jstips.co/en/javascript/recursion-iteration-and-tail-calls-in-js/&#34;&gt;Recursion, iteration and tail calls in JS — loverajoel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.thecodingdelight.com/understanding-recursion-javascript/&#34;&gt;Understanding Recursion in JavaScript with Confidence — Jay&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@newmanbradm/intro-to-recursion-984a8bd50f4b&#34;&gt;Intro to Recursion — Brad Newman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/datadriveninvestor/accio-recursion-your-new-favorite-javascript-spell-7e10d3125fb3&#34;&gt;Accio Recursion!: Your New Favorite JavaScript Spell — Leanne Cabey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/christinamcmahon/recursion-explained-with-examples-4k1m&#34;&gt;Recursion Explained (with Examples) — Christina&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=VtG0WAUvq2w&#34;&gt;Recursion In JavaScript — techsith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=k7-N8R0-KY4&#34;&gt;Recursion — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=vLhHyGTkjCs&#34;&gt;Recursion and Recursive Functions — Hexlet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=kGXVsd8pBLw&#34;&gt;Recursion: Recursion() — JS Monthly — Lucas da Costa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=uyjsR9eNTIw&#34;&gt;Recursive Function in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Mv9NEXX1VHc&#34;&gt;What on Earth is Recursion? — Computerphile&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9NO5dXSlbv8&#34;&gt;Javascript Tutorial 34: Introduction To Recursion — codedamn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=FmiQr4nfoPQ&#34;&gt;Recursion, Iteration, and JavaScript: A Love Story | JSHeroes 2018 — Anjana Vakil&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=lMBVwYrmFZQ&amp;amp;ab_channel=ColtSteele&#34;&gt;Recursion crash course - Colt Steele&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;24. Collections and Generators&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator&#34;&gt;Generator — MDN web docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hacks.mozilla.org/2015/06/es6-in-depth-collections/&#34;&gt;ES6 In Depth: Collections — Jason Orendorff&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/es6-collections-map-set-weakmap-weakset/&#34;&gt;ES6 Collections: Using Map, Set, WeakMap, WeakSet — Kyle Pennell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-weakmaps-sets-and-weaksets-in-depth&#34;&gt;ES6 WeakMaps, Sets, and WeakSets in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://alligator.io/js/sets-introduction/&#34;&gt;Introduction to Sets in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://alligator.io/js/maps-introduction/&#34;&gt;Introduction to Maps in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/map-set-weakmap-weakset&#34;&gt;Map, Set, WeakMap and WeakSet — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/mildrenben/maps-in-es6---a-quick-guide-35pk&#34;&gt;Maps in ES6 - A Quick Guide — Ben Mildren&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/es6-set-vs-array-what-and-when-efc055655e1a&#34;&gt;ES6 — Set vs Array — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/es6-map-vs-object-what-and-when-b80621932373&#34;&gt;ES6 — Map vs Object — What and when? — Maya Shavin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.deadcoderising.com/es6-working-with-sets-in-javascript/&#34;&gt;ES6: Working with Sets in JavaScript — Dead Code Rising&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/array-vs-set-vs-map-vs-object-real-time-use-cases-in-javascript-es6-47ee3295329b&#34;&gt;Array vs Set vs Map vs Object — Real-time use cases in Javascript (ES6/ES7) — Rajesh Babu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/claireparker/how-to-create-an-array-of-unique-values-in-javascript-using-sets-5dg6&#34;&gt;How to create an array of unique values in JavaScript using Sets — Claire Parker-Jones&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/what-you-should-know-about-es6-maps-dc66af6b9a1e&#34;&gt;What You Should Know About ES6 Maps — Just Chris&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-maps-in-depth&#34;&gt;ES6 Maps in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/what-are-javascript-generators-and-how-to-use-them-c6f2713fd12e&#34;&gt;What are JavaScript Generators and how to use them — Vladislav Stepanov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/understanding-generators-in-es6-javascript-with-examples-6728834016d5&#34;&gt;Understanding JavaScript Generators With Examples — Arfat Salman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://davidwalsh.name/es6-generators&#34;&gt;The Basics of ES6 Generators — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/kallaugher/an-introduction-to-javascript-generators-1224&#34;&gt;An Introduction to JavaScript Generators — Alice Kallaugher&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ycohYSx5h9w&#34;&gt;JavaScript ES6 / ES2015 Set, Map, WeakSet and WeakMap — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=m4abICrldQI&#34;&gt;The Differences between ES6 Maps and Sets — Steve Griffith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=QO07THdLWQo&#34;&gt;Javascript Generators - THEY CHANGE EVERYTHING - ES6 Generators Harmony Generators — LearnCode.academy&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;25. Promises&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promise — MDN&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/javascript-promises-for-dummies&#34;&gt;JavaScript Promises for Dummies ― Jecelyn Yeen&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-promises-in-javascript-13d99df067c1&#34;&gt;Understanding promises in JavaScript — Gokul N K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261&#34;&gt;Master the JavaScript Interview: What is a Promise? — Eric Elliott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/overview-javascript-promises/&#34;&gt;An Overview of JavaScript Promises — Sandeep Panda&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/promises-in-javascript-explained-277b98850de&#34;&gt;How to use Promises in JavaScript — Prashant Ram&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-implement-promises-in-javascript-1ce2680a7f51&#34;&gt;Implementing Promises In JavaScript — Maciej Cieslar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-promises-explained-with-simple-real-life-analogies-dd6908092138&#34;&gt;JavaScript: Promises explained with simple real life analogies — Shruti Kapoor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://exploringjs.com/es6/ch_promises.html&#34;&gt;Promises for Asynchronous Programming — Exploring JS&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.codeanalogies.com/2018/08/26/javascript-promises-explained-by-gambling-at-a-casino/&#34;&gt;JavaScript Promises Explained By Gambling At A Casino — Kevin Kononenko&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/datafire-io/es6-promises-patterns-and-anti-patterns-bbb21a5d0918&#34;&gt;ES6 Promises: Patterns and Anti-Patterns — Bobby Brennan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/a-simple-guide-to-es6-promises-d71bacd2e13a&#34;&gt;A Simple Guide to ES6 Promises — Brandon Morelli&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/the-es6-promises-87a979ab27e4&#34;&gt;The ES6 Promises — Manoj Singh Negi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/es6-promises-in-depth&#34;&gt;ES6 Promises in Depth — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/playing-with-javascript-promises-a-comprehensive-approach-25ab752c78c3&#34;&gt;Playing with Javascript Promises: A Comprehensive Approach — Rajesh Babu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/how-to-write-a-javascript-promise-4ed8d44292b8&#34;&gt;How to Write a JavaScript Promise — Brandon Wozniewicz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@andrewly07/a-coding-writers-guide-an-introduction-to-es6-promises-9ff9f9e88f6c&#34;&gt;A Coding Writer’s Guide: An Introduction To ES6 Promises — Andrew Ly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/itnext/reverse-engineering-understand-promises-1jfc&#34;&gt;Understanding Promises in JavaScript — Chris Noring&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/zellwk/converting-callbacks-to-promises-nhn&#34;&gt;Converting callbacks to promises — Zell Liew&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/dailyjs/javascript-promises-zero-to-hero-plus-cheat-sheet-64d75051cffa&#34;&gt;JavaScript Promises: Zero To Hero Plus Cheat Sheet — Joshua Saunders&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/boywithsilverwings/promises-javascript-concepts-293c&#34;&gt;Promises - JavaScript concepts — Agney Menon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/iggredible/javascript-promise-101-3idl&#34;&gt;Javascript &lt;code&gt;Promise&lt;/code&gt; 101 — Igor Irianto&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/sunnysingh/simplify-javascript-promises-4djb&#34;&gt;Simplify JavaScript Promises — Sunny Singh&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/the-low-down-on-promises-af4a96bbb95f&#34;&gt;The Lowdown on Promises — Aphinya Dechalert&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke&#34;&gt;JavaScript Visualized: Promises &amp;amp; Async/Await — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/peterklingelhofer/promises-in-javascript-3h5k&#34;&gt;Promises in JavaScript — Peter Klingelhofer&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/somedood/best-practices-for-es6-promises-36da&#34;&gt;Best Practices for ES6 Promises — Basti Ortiz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/zurvin/lo-que-debemos-saber-de-escript-2020-5fc61da5e4cd&#34;&gt;Lo que debemos saber de EScript 2020 — Kike Sanchez&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/promise-basics&#34;&gt;Promise Basics - javascript.info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=vQ3MoXnKfuQ&#34;&gt;Let&#39;s Learn ES6 - Promises — Ryan Christiani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XJEHuBZQ5dU&#34;&gt;JavaScript ES6 / ES2015 Promises — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=2d7s3spWAzo&#34;&gt;Promises — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=f8IgdnYIwOU&#34;&gt;Error Handling Promises in JavaScript — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=QO4NXhWo_NM&#34;&gt;Promises Part 1 - Topics of JavaScript/ES6 — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=RvYYCGs45L4&#34;&gt;JavaScript Promise in 100 Seconds&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;26. async/await&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/async-await&#34;&gt;async/await — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://eloquentjavascript.net/11_async.html&#34;&gt;Eloquent JavaScript, 3rd Edition: Ch. 11 - Asynchronous Programming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://exploringjs.com/es6/ch_async.html&#34;&gt;Exploring JS: Asynchronous Programming&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/understanding-async-await-in-javascript-1d81bb079b2c&#34;&gt;Understanding async/await in Javascript — Gokul N K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://alligator.io/js/async-functions/&#34;&gt;Exploring Async/Await Functions in JavaScript — Alligator.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/tutorials/asynchronous-javascript-using-async-await&#34;&gt;Asynchronous Javascript using async/await — Joy Warugu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://flaviocopes.com/javascript-async-await/&#34;&gt;Modern Asynchronous JavaScript with async/await — Flavio Copes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.toptal.com/javascript/asynchronous-javascript-async-await-tutorial&#34;&gt;Asynchronous JavaScript: From Callback Hell to Async and Await — Demir Selmanovic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@_bengarrison/javascript-es8-introducing-async-await-functions-7a471ec7de8a&#34;&gt;Javascript — ES8 Introducing async/await Functions — Ben Garrison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/avoiding-the-async-await-hell-c77a0fb71c4c&#34;&gt;How to escape async/await hell — Aditya Agarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://ponyfoo.com/articles/understanding-javascript-async-await&#34;&gt;Understanding JavaScript’s async await — Nicolás Bevacqua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://techbrij.com/javascript-async-await-parallel-sequence&#34;&gt;JavaScript Async/Await: Serial, Parallel and Complex Flow — TechBrij&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.pusher.com/promises-async-await/&#34;&gt;From JavaScript Promises to Async/Await: why bother? — Chris Nwamba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/flow-control-callbacks-promises-async-await/&#34;&gt;Flow Control in Modern JS: Callbacks to Promises to Async/Await — Craig Buckler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dzone.com/articles/javascript-promises-and-why-asyncawait-wins-the-ba&#34;&gt;JavaScript: Promises and Why Async/Await Wins the Battle — Nick Parsons&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/improve-your-asynchronous-javascript-code-with-async-and-await-c02fc3813eda&#34;&gt;How to improve your asynchronous Javascript code with async and await — Indrek Lasn&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@micksheridan.24/making-fetches-easy-with-async-await-8a1246efa1f6&#34;&gt;Making Fetches Easy With Async Await — Mickey Sheridan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/gafi/7-reasons-to-always-use-async-await-over-plain-promises-tutorial-4ej9&#34;&gt;7 Reasons Why JavaScript Async/Await Is Better Than Plain Promises — Mostafa Gaafar&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/jscrambler/asynchronous-operations-in-javascript-2p6b&#34;&gt;Asynchronous Operations in JavaScript — Jscrambler&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/joeyhub/async-await-a-slight-design-flaw-2h2j&#34;&gt;Async/await: A slight design flaw. — Joey&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/should-i-use-promises-or-async-await-126ab5c98789&#34;&gt;JavaScript: Promises or async-await — Gokul N K&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/zhiyuanamos/async-await-from-zero-to-hero-a22&#34;&gt;Async / Await: From Zero to Hero — Zhi Yuan&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lydiahallie/javascript-visualized-promises-async-await-5gke&#34;&gt;JavaScript Visualized: Promises &amp;amp; Async/Await — Lydia Hallie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await&#34;&gt;Making asynchronous programming easier with async and await — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/javascript-async-await-tutorial-learn-callbacks-promises-async-await-by-making-icecream/&#34;&gt;JavaScript Async/Await Tutorial – Learn Callbacks, Promises, and Async/Await in JS by Making Ice Cream&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=9YkUCxvaLEk&#34;&gt;Async + Await — Wes Bos&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=SrNQS8J67zc&#34;&gt;Asynchrony: Under the Hood — Shelley Vohr&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=568g8hxJJp4&amp;amp;index=3&amp;amp;list=PL0zVEGEvSaeHJppaRLrqjeTPnCH6&#34;&gt;async/await in JavaScript - What, Why and How — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=XO77Fib9tSI&amp;amp;index=3&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&#34;&gt;async/await Part 1 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=chavThlNz3s&amp;amp;index=4&amp;amp;list=PLRqwX-V7Uu6bKLPQvPRNNE65kBL62mVfx&#34;&gt;async/await Part 2 - Topics of JavaScript/ES8 — The Coding Train&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=krAYA4rvbdA&#34;&gt;Complete Guide to JS Async &amp;amp; Await ES2017/ES8 — Colt Steele&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=_9vgd9XKlDQ&#34;&gt;Tips for using async/await in JavaScript — James Q Quick&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;27. Data Structures&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/siliconwat/data-structures-in-javascript-1b9aed0ea17c&#34;&gt;Data Structures in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://itnext.io/algorithms-and-data-structures-in-javascript-a71548f902cb&#34;&gt;Algorithms and Data Structures in JavaScript — Oleksii Trekhleb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/courses/10-need-to-know-javascript-concepts/data-structures-objects-and-arrays&#34;&gt;Data Structures: Objects and Arrays ― Chris Nwamba&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://blog.benoitvallon.com/data-structures-in-javascript/data-structures-in-javascript/&#34;&gt;Data structures in JavaScript — Benoit Vallon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.cloudboost.io/playing-with-data-structures-in-javascript-stack-a55ebe50f29d&#34;&gt;Playing with Data Structures in Javascript — Anish K.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/the-little-guide-of-queue-in-javascript-4f67e79260d9&#34;&gt;The Little Guide of Queue in JavaScript — Germán Cutraro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/barretlee/algorithms&#34;&gt;All algorithms writing with JavaScript in the book &#39;Algorithms Fourth Edition&#39;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/nzakas/computer-science-in-javascript&#34;&gt;Collection of classic computer science paradigms in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/jamiebuilds/itsy-bitsy-data-structures&#34;&gt;All the things you didn&#39;t know you wanted to know about data structures&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/miku86/series/3259&#34;&gt;JavaScript Data Structures: 40 Part Series — miku86&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/data-structures-understanding-graphs-82509d35e6b5&#34;&gt;Data Structures: Understanding Graphs — Rachel Hawa&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/freddieduffield/data-structures-two-ways-linked-list-2n61&#34;&gt;Data Structures Two Ways: Linked List (Pt 1) — Freddie Duffield&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/freddieduffield/data-structures-two-ways-linked-list-pt2-2i60&#34;&gt;Data Structures Two Ways: Linked List (Pt 2) — Freddie Duffield&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/amejiarosario/graph-data-structures-for-beginners-5edn&#34;&gt;Graph Data Structures Explained in JavaScript — Adrian Mejia&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=H_EBPZgiAas&amp;amp;list=PLDmvslp_VR0zYUSth_8O69p4_cmvZEgLa&#34;&gt;Algorithms In Javascript | Ace Your Interview — Eduonix Learning Solutions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Gj5qBheGOEo&amp;amp;list=PLWKjhJtqVAbkso-IbgiiP48n-O-JQA9PJ&#34;&gt;Data Structures and Algorithms in JavaScript — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Ymh_AurrMbA&#34;&gt;Learning JavaScript Data Structures and Algorithms: Sorting — Packt Video&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=41GSinwoMYA&amp;amp;ab_channel=Academind&#34;&gt;JavaScript Data Structures: Getting Started — Academind&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;28. Expensive Operation and Big O Notation&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/cesars-tech-insights/big-o-notation-javascript-25c79f50b19b&#34;&gt;Big O Notation in Javascript — César Antón Dorantes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/time-complexity-big-o-notation-1a4310c3ee4b&#34;&gt;Time Complexity/Big O Notation — Tim Roberts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@gmedina229/big-o-in-javascript-36ff67766051&#34;&gt;Big O in JavaScript — Gabriela Medina&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.bradoncode.com/blog/2012/04/big-o-algorithm-examples-in-javascript.html&#34;&gt;Big O Search Algorithms in JavaScript — Bradley Braithwaite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.jenniferbland.com/time-complexity-analysis-in-javascript/&#34;&gt;Time Complexity Analysis in JavaScript — Jennifer Bland&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c&#34;&gt;Algorithms in plain English: time complexity and Big-O Notation — Michael Olorunnisola&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/lofiandcode/an-introduction-to-big-o-notation-210o&#34;&gt;An Introduction to Big O Notation — Joseph Trettevik&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=HgA5VOFan5E&#34;&gt;JavaScript: Intro to Big O Notation and Function Runtime — Eric Traub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=KatlvCFHPRo&#34;&gt;Essential Big O for JavaScript Developers — Dave Smith&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=ALl86xJiTD8&#34;&gt;Big O Notation - Time Complexity Analysis — WebTunings&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;29. Algorithms&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/Crizstian/data-structure-and-algorithms-with-ES6&#34;&gt;Data Structures and Algorithms using ES6&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms&#34;&gt;Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://www.thatjsdude.com/interview/js1.html&#34;&gt;JS: Interview Algorithm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/siliconwat/algorithms-in-javascript-b0bed68f4038&#34;&gt;Algorithms in JavaScript — Thon Ly&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/javascript-objects-square-brackets-and-algorithms-e9a2916dc158&#34;&gt;JavaScript Objects, Square Brackets and Algorithms — Dmitri Grabov&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/felipernb/algorithms.js&#34;&gt;Atwood&#39;s Law applied to CS101 - Classic algorithms and data structures implemented in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/yangshun/lago&#34;&gt;Data Structures and Algorithms library in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/idosela/algorithms-in-javascript&#34;&gt;Collection of computer science algorithms and data structures written in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/trekhleb/algorithms-and-data-structures-in-javascript-49i3&#34;&gt;Algorithms and Data Structures in JavaScript — Oleksii Trekhleb&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;30. Inheritance, Polymorphism and Code Reuse&lt;/h2&gt; &#xA;&lt;h3&gt;Reference&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance&#34;&gt;Inheritance in JavaScript — MDN&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://javascript.info/class-inheritance&#34;&gt;Class inheritance, super — JavaScript.Info&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/inheritance-in-javascript-21d2b82ffa6f&#34;&gt;Inheritance in JavaScript — Rupesh Mishra&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/simple-inheritance-javascript/&#34;&gt;Simple Inheritance with JavaScript — David Catuhe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-inheritance-25fe61ab9f85&#34;&gt;JavaScript — Inheritance, delegation patterns and Object linking — NC Patro&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.knoldus.com/object-oriented-javascript-polymorphism-with-examples/&#34;&gt;Object Oriented JavaScript: Polymorphism with examples — Knoldus Blogs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/yld-engineering-blog/program-like-proteus-a-beginners-guide-to-polymorphism-in-javascript-867bea7c8be2&#34;&gt;Program Like Proteus — A beginner’s guide to polymorphism in Javascript — Sam Galson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/object-oriented-javascript-deep-dive-es6-classes/&#34;&gt;Object-oriented JavaScript: A Deep Dive into ES6 Classes — Jeff Mott&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=yXlFR81tDBM&#34;&gt;Inheritance in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=RBLIm5LMrmc&#34;&gt;JavaScript ES6 Classes and Inheritance — Traversy Media&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=zdovG9cuEBA&#34;&gt;Polymorphism in JavaScript — kudvenkat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;31. Design Patterns&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://addyosmani.com/resources/essentialjsdesignpatterns/book/&#34;&gt;Learning JavaScript Design Patterns — Addy Osmani &lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://scotch.io/bar-talk/4-javascript-design-patterns-you-should-know&#34;&gt;4 JavaScript Design Patterns You Should Know — Devan Patel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/beginners-guide-to-mobile-web-development/javascript-design-patterns-25f0faaaa15&#34;&gt;JavaScript Design Patterns – Beginner&#39;s Guide to Mobile Web Development — Soumyajit Pathak&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/front-end-hacking/javascript-design-patterns-ed9d4c144c81&#34;&gt;JavaScript Design Patterns — Akash Pal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://seesparkbox.com/foundry/javascript_design_patterns&#34;&gt;Javascript Design Patterns: What They Are &amp;amp; How To Use Them — Patrick Simpson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.bitsrc.io/understanding-design-patterns-in-javascript-13345223f2dd&#34;&gt;JavaScript Design Patterns: Understanding Design Patterns in JavaScript - Sukhjinder Arora&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/fbeline/Design-Patterns-JS&#34;&gt;All the 23 (GoF) design patterns implemented in Javascript — Felipe Beline&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/the-power-of-the-module-pattern-in-javascript-3c73f7cd10e8&#34;&gt;The Power of the Module Pattern in JavaScript — jsmanifest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/omensah/design-patterns-for-developers-using-javascript----part-one--b3e&#34;&gt;Design Patterns for Developers using JavaScript pt. I — Oliver Mensah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/omensah/design-patterns-for-developers-using-javascript---part-two--3p39&#34;&gt;Design Patterns for Developers using JavaScript pt. II — Oliver Mensah&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://levelup.gitconnected.com/design-patterns-in-modern-javascript-development-ec84d8be06ca&#34;&gt;Design patterns in modern JavaScript development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/carlillo/understanding-design-patterns-iterator-using-dev-to-and-medium-social-networks-3bdd&#34;&gt;Understanding Design Patterns: Iterator using Dev.to and Medium social networks! — Carlos Caballero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/kristijanfistrek/javascript-design-patterns-factory-pattern-562p&#34;&gt;JavaScript Design Patterns - Factory Pattern — KristijanFištrek&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-in-plain-english/javascript-design-pattern-module-pattern-555737eccecd&#34;&gt;JavaScript Design Pattern — Module Pattern - Factory Pattern — Moon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/better-programming/design-patterns-null-object-5ee839e37892&#34;&gt;Design Patterns: Null Object - Carlos Caballero&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/francescoxx/strategy-pattern-5oh&#34;&gt;Strategy Pattern - Francesco Ciulla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/francescoxx/adapter-pattern-5bjk&#34;&gt;Adapter Pattern - Francesco Ciulla&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/jsmanifest/the-power-of-composite-pattern-in-javascript-2732&#34;&gt;The Power of Composite Pattern in JavaScript - jsmanifest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/bytebodger/in-defense-of-defensive-programming-k45&#34;&gt;In Defense of Defensive Programming - Adam Nathaniel Davis&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.udacity.com/course/javascript-design-patterns--ud989&#34;&gt;JavaScript Design Patterns — Udacity&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=hO7mzO83N1Q&#34;&gt;JavaScript Patterns for 2017 — Scott Allen&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;32. Partial Applications, Currying, Compose and Pipe&lt;/h2&gt; &#xA;&lt;h3&gt;Books&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/getify/Functional-Light-JS/raw/master/manuscript/ch3.md&#34;&gt;Functional-Light JavaScript: Ch. 3 - Managing Function Inputs — Kyle Simpson&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.codementor.io/michelre/use-function-composition-in-javascript-gkmxos5mj&#34;&gt;Use function composition in JavaScript — Rémi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.benestudio.co/currying-in-javascript-es6-540d2ad09400&#34;&gt;Currying in JavaScript ES6 — Adam Bene&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@pragyan88/writing-middleware-composition-and-currying-elegance-in-javascript-8b15c98a541b&#34;&gt;Composition and Currying Elegance in JavaScript — Pragyan Das&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/javascript-functional-composition-for-every-day-use-22421ef65a10&#34;&gt;Functional JavaScript: Function Composition For Every Day Use — Joel Thoms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@acparas/what-i-learned-today-july-2-2017-ab9a46dbf85f&#34;&gt;Functional Composition: compose() and pipe() — Anton Paras&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://busypeoples.github.io/post/functional-composing-javascript/&#34;&gt;Why The Hipsters Compose Everything: Functional Composing In JavaScript — A. Sharif&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jrsinclair.com/articles/2016/gentle-introduction-to-functional-javascript-functions/&#34;&gt;A Gentle Introduction to Functional JavaScript pt III: Functions for making functions — James Sinclair&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://jsleao.wordpress.com/2015/02/22/curry-and-compose-why-you-should-be-using-something-like-ramda-in-your-code/&#34;&gt;Curry And Compose (why you should be using something like ramda in your code) — jsanchesleao&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://vanslaars.io/post/create-pipe-function/&#34;&gt;Function Composition in JavaScript with Pipe — Andy Van Slaars&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://developer.telerik.com/featured/practical-functional-javascript-ramda/&#34;&gt;Practical Functional JavaScript with Ramda — Andrew D&#39;Amelio, Yuri Takhteyev&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/the-beauty-in-partial-application-currying-and-function-composition-d885bdf0d574&#34;&gt;The beauty in Partial Application, Currying, and Function Composition — Joel Thoms&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/javascript-scene/curry-or-partial-application-8150044c78b8&#34;&gt;Curry or Partial Application? — Eric Elliott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://benalman.com/news/2012/09/partial-application-in-javascript/&#34;&gt;Partial Application in JavaScript — Ben Alman&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://hackernoon.com/partial-application-of-functions-dbe7d9b80760&#34;&gt;Partial Application of Functions — Functional Reactive Ninja&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/javascript-currying-vs-partial-application-4db5b2442be8&#34;&gt;Currying vs Partial Application — Deepak Gupta&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;http://raganwald.com/2015/04/01/partial-application.html&#34;&gt;Partial Application in ECMAScript 2015 — Ragan Wald&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://joecortopassi.com/articles/functional-composition-in-javascript/&#34;&gt;Functional Composition in Javascript — Joe Cortopassi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-1-1f15e387e536&#34;&gt;So You Want to be a Functional Programmer pt. I — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-2-7005682cec4a&#34;&gt;So You Want to be a Functional Programmer pt. II — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-3-1b0fd14eb1a7&#34;&gt;So You Want to be a Functional Programmer pt. III — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-4-18fbe3ea9e49&#34;&gt;So You Want to be a Functional Programmer pt. IV — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@cscalfani/so-you-want-to-be-a-functional-programmer-part-5-c70adc9cf56a&#34;&gt;So You Want to be a Functional Programmer pt. V — Charles Scalfani&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/an-introduction-to-the-basic-principles-of-functional-programming-a2c2a15c84&#34;&gt;An introduction to the basic principles of Functional Programming — TK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/the-renaissance-developer/concepts-of-functional-programming-in-javascript-6bc84220d2aa&#34;&gt;Concepts of Functional Programming in Javascript — TK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/an-introduction-to-functional-programming-style-in-javascript-71fcc050f064&#34;&gt;An Introduction to Functional Programming Style in JavaScript — JavaScript Teacher&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.freecodecamp.org/a-practical-guide-to-writing-more-functional-javascript-db49409f71&#34;&gt;A practical guide to writing more functional JavaScript — Nadeesha Cabral&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/benlesh/a-simple-explanation-of-functional-pipe-in-javascript-2hbj&#34;&gt;A simple explanation of functional pipe in JavaScript — Ben Lesh&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Wl2ejJOqHUU&#34;&gt;Compose vs Pipe: Functional Programming in JavaScript — Chyld Studios&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=jigHxo9YR30&#34;&gt;JavaScript Functional Programing: Compose — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=mth5WpEc4Qs&#34;&gt;Function Composition - Functional JavaScript — NWCalvank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Uam37AlzPYw&#34;&gt;JavaScript Function Composition Explained — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=VGB9HbL1GHk&#34;&gt;Let&#39;s code with function composition — Fun Fun Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=DzLkRsUN2vE&#34;&gt;Partial Application vs. Currying — NWCalvank&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=jkebgHEcvac&#34;&gt;JavaScript Partial Application — Theodore Anderson&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=75W8UPQ5l7k&amp;amp;t=261s&#34;&gt;call, apply and bind method in JavaScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;33. Clean Code&lt;/h2&gt; &#xA;&lt;h3&gt;Articles&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.freecodecamp.org/news/clean-coding-for-beginners/&#34;&gt;Clean Code Explained – A Practical Introduction to Clean Coding for Beginners — freeCodeCamp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/ryanmcdermott/clean-code-javascript&#34;&gt;Clean Code concepts adapted for JavaScript — Ryan McDermott&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.atyantik.com/clean-code-practices-javascript/&#34;&gt;Clean Code Practice: How to write clean code — Tirth Bodawala&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://blog.risingstack.com/javascript-clean-coding-best-practices-node-js-at-scale/&#34;&gt;JavaScript Clean Coding Best Practices — András Tóth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/@kevin_peters/function-parameters-in-javascript-clean-code-4caac109159b&#34;&gt;Function parameters in JavaScript Clean Code — Kevin Peters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://codeburst.io/keeping-your-code-clean-d30bcffd1a10&#34;&gt;Keeping your code clean — Samuel James&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.sitepoint.com/modern-javascript-best-practices/&#34;&gt;Best Practices for Using Modern JavaScript Syntax — M. David Green&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://github.com/cross-js/cross-js&#34;&gt;best practices for cross node/web development - Jimmy Wärting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/ganderzz/on-writing-clean-code-57cm&#34;&gt;Writing Clean Code - Dylan Paulus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/nityeshaga/writing-clean-code-and-the-practice-of-programming-actionable-advice-for-beginners-5f0k&#34;&gt;Writing Clean Code and The Practice of Programming - Nityesh Agarwal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/d_ir/clean-code-dirty-code-human-code-6nm&#34;&gt;Clean code, dirty code, human code - Daniel Irvine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://dev.to/taillogs/practical-ways-to-write-better-javascript-26d4&#34;&gt;Practical Ways to Write Better JavaScript - Ryland G&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://medium.com/swlh/the-must-know-clean-code-principles-1371a14a2e75&#34;&gt;The Must-Know Clean Code Principles - Kesk on Medium&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;a href=&#34;https://www.amazon.com/Clean-Code-Handbook-Software-Craftsmanship/dp/0132350882/&#34;&gt;The Clean Code Book - Robert C Martin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=Mus_vwhTCq0&#34;&gt;JavaScript Pro Tips - Code This, NOT That&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;🎥 &lt;a href=&#34;https://www.youtube.com/watch?v=b9c5GmmS7ks&amp;amp;list=PLWKjhJtqVAbkK24EaPurzMq0-kw5U9pJh&amp;amp;index=1&#34;&gt;Clean Code playlist - Beau teaches&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/leonardomso/33-js-concepts/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>curtinlv/gd</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/curtinlv/gd</id>
    <link href="https://github.com/curtinlv/gd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; 青龙安装Bot监控 &lt;br&gt; &lt;/h1&gt; - [x] 2022.4.9 已兼容青龙`2.12.x`版本路经 &#xA;&lt;h2&gt;1.进入容器内&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 进入青龙容器内，“qinglong” 为容器名字。&#xA;docker exec -it qinglong /bin/bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;2.安装依赖&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 一键安装&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -f install.sh* &amp;amp;&amp;amp; wget -q https://git.metauniverse-cn.com/https://raw.githubusercontent.com/curtinlv/gd/main/install.sh &amp;amp;&amp;amp; bash install.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;3.配置tg机器人参数&lt;/h2&gt; &#xA;&lt;h5&gt;青龙存放位置：&lt;code&gt;/ql/config&lt;/code&gt; 或&lt;code&gt; /ql/data/config&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;bot.json &lt;/code&gt; 填写你的机器人token 用户id等参数&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;diybotset.json&lt;/code&gt; 填写监控群组频道id等参数&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;code&gt;jk.json&lt;/code&gt; 自定义监控变量和应对脚本路径&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#登录青龙面板&#xA;菜单【配置文件】右上角选择对应配置文件进行编辑&#xA;bot.json&#xA;diybotset.json&#xA;&#xA;Ps: 可参考本仓库 conf/xxx.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;4.启动机器人&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#青龙2.10x&#xA;cd /ql/jbot/&#xA;#青龙2.12.x版本&#xA;cd /ql/data/jbot/&#xA;&#xA;#第一次启动是这样启动，后续启动参考底部相关命令&#xA;pm2 start ecosystem.config.js &#xA;#查看运行状态&#xA;pm2 status jbot &#xA;&#xA;# 查看日志：看看有没有报错。&#xA;tail -100f /ql/log/bot/run.log&#xA;#青龙2.12&#xA;tail -100f /ql/data/log/bot/run.log&#xA;#终止查看日志 按 Ctrl+C&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;​&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 如TG收到机器人信息，证明你填写的机器人参数是正确的∆。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/curtinlv/gd/main/img/p2.png&#34; alt=&#34;图2：完成登录，tg机器人发通知&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;strong&gt;登录user开启监控&lt;/strong&gt;&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; a.发送【/user】 点击 &lt;strong&gt;“重新登录”&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/curtinlv/gd/main/img/p5.png&#34; alt=&#34;图1：首次登录授权个人tg&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; b.输入手机号格式0086x x xx x x (要关闭两步验证)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/curtinlv/gd/main/img/p7.png&#34; alt=&#34;图2：登录&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; c.发送【user?】 给你的机器人，有以下回复，证明监控状态正常。&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/curtinlv/gd/main/img/p8.png&#34; alt=&#34;图3：测试1&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/curtinlv/gd/main/img/p9.png&#34; alt=&#34;图4：测试2&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; 在所监控的频道发出变量，机器人会马上通知：&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/curtinlv/gd/main/img/p4.png&#34; alt=&#34;图4：测试2&#34;&gt;&lt;/p&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; 恭喜你，部署已完成。 &lt;br&gt; &lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#################### 相关命令 ####################&#xA;操作环境：进入容器内&#xA;## 查看机器人运行状态&#xA;pm2 status jbot&#xA;&#xA;## 启动机器人：&#xA;pm2 start jbot&#xA;&#xA;## 停止机器人&#xA;pm2 stop jbot&#xA;&#xA;## 重启机器人&#xA;pm2 restart jbot&#xA;&#xA;## 一键更新1&#xA;rm -rf /ql/repo/gd &amp;amp;&amp;amp; cd /ql/repo/ &amp;amp;&amp;amp; git clone https://git.metauniverse-cn.com/https://github.com/curtinlv/gd.git &amp;amp;&amp;amp; pm2 stop jbot ; rm -rf /ql/jbot/* &amp;amp;&amp;amp; cp -a /ql/repo/gd/* /ql/jbot/ ; pm2 start jbot&#xA;&#xA;#或一键更新2&#xA;if [ -d /ql/data ];then QL=/ql/data;else QL=/ql; fi;cd ${QL} &amp;amp;&amp;amp; rm -f update.sh* &amp;amp;&amp;amp; wget  -q https://raw.githubusercontent.com/curtinlv/gd/main/update.sh &amp;gt;/dev/null &amp;amp;&amp;amp; bash update.sh&#xA;&#xA;## 卸载机器人&#xA;pm2 stop jbot &amp;amp;&amp;amp; pm2 delete jbot&#xA;rm -rf /ql/jbot/*&#xA;rm -rf /ql/data/jbot/*&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;机器人指令&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;/restart&lt;/code&gt; 重启机器人&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/upgd&lt;/code&gt; 更新机器人&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/user?&lt;/code&gt; 查看监控状态&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/clean&lt;/code&gt; 清理缓存日志，释放空间&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;/help&lt;/code&gt; 命令帮助&lt;/p&gt; &#xA;&lt;h2&gt;最近更新 2022.4.10(v1.3.0)&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;新增清理功能 /clean&lt;/li&gt; &#xA; &lt;li&gt;兼容青龙版本2.12.x&lt;/li&gt; &#xA; &lt;li&gt;优化变量匹配正则&lt;/li&gt; &#xA; &lt;li&gt;解决user？不回复问题&lt;/li&gt; &#xA; &lt;li&gt;优化队列问题&lt;/li&gt; &#xA; &lt;li&gt;/user 重复对话问题&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/curtinlv/gd/raw/main/updateLog.md&#34;&gt;更多&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;特别感谢&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;脚本的写作参考了: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/SuMaiKaDe&#34;&gt;SuMaiKaDe&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/SuMaiKaDe/bot&#34;&gt;bot&lt;/a&gt; 仓库&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/chiupam&#34;&gt;chiupam&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/chiupam/JD_Diy&#34;&gt;JD_Diy&lt;/a&gt; 仓库&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/msechen&#34;&gt;msechen&lt;/a&gt; 的 &lt;a href=&#34;https://github.com/msechen/jdrain&#34;&gt;jdrain&lt;/a&gt; 仓库&lt;/li&gt; &#xA;   &lt;li&gt;未完待定&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>HashLips/hashlips_art_engine</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/HashLips/hashlips_art_engine</id>
    <link href="https://github.com/HashLips/hashlips_art_engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HashLips Art Engine is a tool used to create multiple different instances of artworks based on provided layers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Welcome to HashLips 👄&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/HashLips/hashlips_art_engine/raw/main/logo.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;All the code in these repos was created and explained by HashLips on the main YouTube channel.&lt;/p&gt; &#xA;&lt;p&gt;To find out more please visit:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/channel/UC1LV4_VQGBJHTJjEWUmy8nA&#34;&gt;📺 YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.com/invite/qh6MWhMJDN&#34;&gt;👄 Discord&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://t.me/hashlipsnft&#34;&gt;💬 Telegram&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/hashlipsnft&#34;&gt;🐦 Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hashlips.online/HashLips&#34;&gt;ℹ️ Website&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;HashLips Art Engine 🔥&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/HashLips/hashlips_art_engine/raw/main/banner.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create generative art by using the canvas api and node js. Before you use the generation engine, make sure you have node.js(v10.18.0) installed.&lt;/p&gt; &#xA;&lt;h2&gt;Installation 🛠️&lt;/h2&gt; &#xA;&lt;p&gt;If you are cloning the project then run this first, otherwise you can download the source code on the release page and skip this step.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/HashLips/hashlips_art_engine.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Go to the root of your folder and run this command if you have yarn installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively you can run this command if you have node installed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage ℹ️&lt;/h2&gt; &#xA;&lt;p&gt;Create your different layers as folders in the &#39;layers&#39; directory, and add all the layer assets in these directories. You can name the assets anything as long as it has a rarity weight attached in the file name like so: &lt;code&gt;example element#70.png&lt;/code&gt;. You can optionally change the delimiter &lt;code&gt;#&lt;/code&gt; to anything you would like to use in the variable &lt;code&gt;rarityDelimiter&lt;/code&gt; in the &lt;code&gt;src/config.js&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;Once you have all your layers, go into &lt;code&gt;src/config.js&lt;/code&gt; and update the &lt;code&gt;layerConfigurations&lt;/code&gt; objects &lt;code&gt;layersOrder&lt;/code&gt; array to be your layer folders name in order of the back layer to the front layer.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; If you were creating a portrait design, you might have a background, then a head, a mouth, eyes, eyewear, and then headwear, so your &lt;code&gt;layersOrder&lt;/code&gt; would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const layerConfigurations = [&#xA;  {&#xA;    growEditionSizeTo: 100,&#xA;    layersOrder: [&#xA;      { name: &#34;Head&#34; },&#xA;      { name: &#34;Mouth&#34; },&#xA;      { name: &#34;Eyes&#34; },&#xA;      { name: &#34;Eyeswear&#34; },&#xA;      { name: &#34;Headwear&#34; },&#xA;    ],&#xA;  },&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;name&lt;/code&gt; of each layer object represents the name of the folder (in &lt;code&gt;/layers/&lt;/code&gt;) that the images reside in.&lt;/p&gt; &#xA;&lt;p&gt;Optionally you can now add multiple different &lt;code&gt;layerConfigurations&lt;/code&gt; to your collection. Each configuration can be unique and have different layer orders, use the same layers or introduce new ones. This gives the artist flexibility when it comes to fine tuning their collections to their needs.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example:&lt;/em&gt; If you were creating a portrait design, you might have a background, then a head, a mouth, eyes, eyewear, and then headwear and you want to create a new race or just simple re-order the layers or even introduce new layers, then you&#39;re &lt;code&gt;layerConfigurations&lt;/code&gt; and &lt;code&gt;layersOrder&lt;/code&gt; would look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const layerConfigurations = [&#xA;  {&#xA;    // Creates up to 50 artworks&#xA;    growEditionSizeTo: 50,&#xA;    layersOrder: [&#xA;      { name: &#34;Background&#34; },&#xA;      { name: &#34;Head&#34; },&#xA;      { name: &#34;Mouth&#34; },&#xA;      { name: &#34;Eyes&#34; },&#xA;      { name: &#34;Eyeswear&#34; },&#xA;      { name: &#34;Headwear&#34; },&#xA;    ],&#xA;  },&#xA;  {&#xA;    // Creates an additional 100 artworks&#xA;    growEditionSizeTo: 150,&#xA;    layersOrder: [&#xA;      { name: &#34;Background&#34; },&#xA;      { name: &#34;Head&#34; },&#xA;      { name: &#34;Eyes&#34; },&#xA;      { name: &#34;Mouth&#34; },&#xA;      { name: &#34;Eyeswear&#34; },&#xA;      { name: &#34;Headwear&#34; },&#xA;      { name: &#34;AlienHeadwear&#34; },&#xA;    ],&#xA;  },&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Update your &lt;code&gt;format&lt;/code&gt; size, ie the outputted image size, and the &lt;code&gt;growEditionSizeTo&lt;/code&gt; on each &lt;code&gt;layerConfigurations&lt;/code&gt; object, which is the amount of variation outputted.&lt;/p&gt; &#xA;&lt;p&gt;You can mix up the &lt;code&gt;layerConfigurations&lt;/code&gt; order on how the images are saved by setting the variable &lt;code&gt;shuffleLayerConfigurations&lt;/code&gt; in the &lt;code&gt;config.js&lt;/code&gt; file to true. It is false by default and will save all images in numerical order.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have logs to debug and see what is happening when you generate images you can set the variable &lt;code&gt;debugLogs&lt;/code&gt; in the &lt;code&gt;config.js&lt;/code&gt; file to true. It is false by default, so you will only see general logs.&lt;/p&gt; &#xA;&lt;p&gt;If you want to play around with different blending modes, you can add a &lt;code&gt;blend: MODE.colorBurn&lt;/code&gt; field to the layersOrder &lt;code&gt;options&lt;/code&gt; object.&lt;/p&gt; &#xA;&lt;p&gt;If you need a layers to have a different opacity then you can add the &lt;code&gt;opacity: 0.7&lt;/code&gt; field to the layersOrder &lt;code&gt;options&lt;/code&gt; object as well.&lt;/p&gt; &#xA;&lt;p&gt;If you want to have a layer &lt;em&gt;ignored&lt;/em&gt; in the DNA uniqueness check, you can set &lt;code&gt;bypassDNA: true&lt;/code&gt; in the &lt;code&gt;options&lt;/code&gt; object. This has the effect of making sure the rest of the traits are unique while not considering the &lt;code&gt;Background&lt;/code&gt; Layers as traits, for example. The layers &lt;em&gt;are&lt;/em&gt; included in the final image.&lt;/p&gt; &#xA;&lt;p&gt;To use a different metadata attribute name you can add the &lt;code&gt;displayName: &#34;Awesome Eye Color&#34;&lt;/code&gt; to the &lt;code&gt;options&lt;/code&gt; object. All options are optional and can be addes on the same layer if you want to.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example on how you can play around with both filter fields:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const layerConfigurations = [&#xA;  {&#xA;    growEditionSizeTo: 5,&#xA;    layersOrder: [&#xA;      { name: &#34;Background&#34; , {&#xA;        options: {&#xA;          bypassDNA: false;&#xA;        }&#xA;      }},&#xA;      { name: &#34;Eyeball&#34; },&#xA;      {&#xA;        name: &#34;Eye color&#34;,&#xA;        options: {&#xA;          blend: MODE.destinationIn,&#xA;          opacity: 0.2,&#xA;          displayName: &#34;Awesome Eye Color&#34;,&#xA;        },&#xA;      },&#xA;      { name: &#34;Iris&#34; },&#xA;      { name: &#34;Shine&#34; },&#xA;      { name: &#34;Bottom lid&#34;, options: { blend: MODE.overlay, opacity: 0.7 } },&#xA;      { name: &#34;Top lid&#34; },&#xA;    ],&#xA;  },&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a list of the different blending modes that you can optionally use.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const MODE = {&#xA;  sourceOver: &#34;source-over&#34;,&#xA;  sourceIn: &#34;source-in&#34;,&#xA;  sourceOut: &#34;source-out&#34;,&#xA;  sourceAtop: &#34;source-out&#34;,&#xA;  destinationOver: &#34;destination-over&#34;,&#xA;  destinationIn: &#34;destination-in&#34;,&#xA;  destinationOut: &#34;destination-out&#34;,&#xA;  destinationAtop: &#34;destination-atop&#34;,&#xA;  lighter: &#34;lighter&#34;,&#xA;  copy: &#34;copy&#34;,&#xA;  xor: &#34;xor&#34;,&#xA;  multiply: &#34;multiply&#34;,&#xA;  screen: &#34;screen&#34;,&#xA;  overlay: &#34;overlay&#34;,&#xA;  darken: &#34;darken&#34;,&#xA;  lighten: &#34;lighten&#34;,&#xA;  colorDodge: &#34;color-dodge&#34;,&#xA;  colorBurn: &#34;color-burn&#34;,&#xA;  hardLight: &#34;hard-light&#34;,&#xA;  softLight: &#34;soft-light&#34;,&#xA;  difference: &#34;difference&#34;,&#xA;  exclusion: &#34;exclusion&#34;,&#xA;  hue: &#34;hue&#34;,&#xA;  saturation: &#34;saturation&#34;,&#xA;  color: &#34;color&#34;,&#xA;  luminosity: &#34;luminosity&#34;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When you are ready, run the following command and your outputted art will be in the &lt;code&gt;build/images&lt;/code&gt; directory and the json in the &lt;code&gt;build/json&lt;/code&gt; directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;node index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The program will output all the images in the &lt;code&gt;build/images&lt;/code&gt; directory along with the metadata files in the &lt;code&gt;build/json&lt;/code&gt; directory. Each collection will have a &lt;code&gt;_metadata.json&lt;/code&gt; file that consists of all the metadata in the collection inside the &lt;code&gt;build/json&lt;/code&gt; directory. The &lt;code&gt;build/json&lt;/code&gt; folder also will contain all the single json files that represent each image file. The single json file of a image will look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;dna&#34;: &#34;d956cdf4e460508b5ff90c21974124f68d6edc34&#34;,&#xA;  &#34;name&#34;: &#34;#1&#34;,&#xA;  &#34;description&#34;: &#34;This is the description of your NFT project&#34;,&#xA;  &#34;image&#34;: &#34;https://hashlips/nft/1.png&#34;,&#xA;  &#34;edition&#34;: 1,&#xA;  &#34;date&#34;: 1731990799975,&#xA;  &#34;attributes&#34;: [&#xA;    { &#34;trait_type&#34;: &#34;Background&#34;, &#34;value&#34;: &#34;Black&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Eyeball&#34;, &#34;value&#34;: &#34;Red&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Eye color&#34;, &#34;value&#34;: &#34;Yellow&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Iris&#34;, &#34;value&#34;: &#34;Small&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Shine&#34;, &#34;value&#34;: &#34;Shapes&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Bottom lid&#34;, &#34;value&#34;: &#34;Low&#34; },&#xA;    { &#34;trait_type&#34;: &#34;Top lid&#34;, &#34;value&#34;: &#34;Middle&#34; }&#xA;  ],&#xA;  &#34;compiler&#34;: &#34;HashLips Art Engine&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also add extra metadata to each metadata file by adding your extra items, (key: value) pairs to the &lt;code&gt;extraMetadata&lt;/code&gt; object variable in the &lt;code&gt;config.js&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const extraMetadata = {&#xA;  creator: &#34;Daniel Eugene Botha&#34;,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t need extra metadata, simply leave the object empty. It is empty by default.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const extraMetadata = {};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That&#39;s it, you&#39;re done.&lt;/p&gt; &#xA;&lt;h2&gt;Utils&lt;/h2&gt; &#xA;&lt;h3&gt;Updating baseUri for IPFS and description&lt;/h3&gt; &#xA;&lt;p&gt;You might possibly want to update the baseUri and description after you have ran your collection. To update the baseUri and description simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run update_info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate a preview image&lt;/h3&gt; &#xA;&lt;p&gt;Create a preview image collage of your collection, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run preview&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate pixelated images from collection&lt;/h3&gt; &#xA;&lt;p&gt;In order to convert images into pixelated images you would need a list of images that you want to convert. So run the generator first.&lt;/p&gt; &#xA;&lt;p&gt;Then simply run this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run pixelate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All your images will be outputted in the &lt;code&gt;/build/pixel_images&lt;/code&gt; directory. If you want to change the ratio of the pixelation then you can update the ratio property on the &lt;code&gt;pixelFormat&lt;/code&gt; object in the &lt;code&gt;src/config.js&lt;/code&gt; file. The lower the number on the left, the more pixelated the image will be.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const pixelFormat = {&#xA;  ratio: 5 / 128,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Generate GIF images from collection&lt;/h3&gt; &#xA;&lt;p&gt;In order to export gifs based on the layers created, you just need to set the export on the &lt;code&gt;gif&lt;/code&gt; object in the &lt;code&gt;src/config.js&lt;/code&gt; file to &lt;code&gt;true&lt;/code&gt;. You can also play around with the &lt;code&gt;repeat&lt;/code&gt;, &lt;code&gt;quality&lt;/code&gt; and the &lt;code&gt;delay&lt;/code&gt; of the exported gif.&lt;/p&gt; &#xA;&lt;p&gt;Setting the &lt;code&gt;repeat: -1&lt;/code&gt; will produce a one time render and &lt;code&gt;repeat: 0&lt;/code&gt; will loop forever.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const gif = {&#xA;  export: true,&#xA;  repeat: 0,&#xA;  quality: 100,&#xA;  delay: 500,&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Printing rarity data (Experimental feature)&lt;/h3&gt; &#xA;&lt;p&gt;To see the percentages of each attribute across your collection, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm run rarity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The output will look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Trait type: Top lid&#xA;{&#xA;  trait: &#39;High&#39;,&#xA;  chance: &#39;30&#39;,&#xA;  occurrence: &#39;3 in 20 editions (15.00 %)&#39;&#xA;}&#xA;{&#xA;  trait: &#39;Low&#39;,&#xA;  chance: &#39;20&#39;,&#xA;  occurrence: &#39;3 in 20 editions (15.00 %)&#39;&#xA;}&#xA;{&#xA;  trait: &#39;Middle&#39;,&#xA;  chance: &#39;50&#39;,&#xA;  occurrence: &#39;14 in 20 editions (70.00 %)&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Hope you create some awesome artworks with this code 👄&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ccuuu/vue-learning</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ccuuu/vue-learning</id>
    <link href="https://github.com/ccuuu/vue-learning" rel="alternate"></link>
    <summary type="html">&lt;p&gt;vue超详细逐行解析版源码&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;超详细逐行注释版vue源码&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;注意：该注释版本只保留了src目录，并且删除了很多无用文件，目的是为了查阅更加清晰方便。因此仅供学习使用。&lt;/h4&gt; &#xA;&lt;h4&gt;建议大家下载一份全新源码，最好是 2.6.14 版本，结合注释版本阅读。&lt;/h4&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;下面是随手截的几张图：&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img-blog.csdnimg.cn/1508d97692f4425591fb6f7722feaffb.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img-blog.csdnimg.cn/48d0cd96007e4ee4a624563d74635aa2.png&#34; alt=&#34;&#34;&gt; &lt;img src=&#34;https://img-blog.csdnimg.cn/0866bcaa2a31460d89b9051fd34a8de4.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;当然，肯定不是每一个地方都如截图般详细。有些比较浅显的地方，也不需要大张旗鼓的去解释。不过重要的逻辑，我都尽量去解释清楚。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;文件结构分析&lt;/h3&gt; &#xA;&lt;h4&gt;src目录：&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;compiler：&lt;/strong&gt; 编译相关模块，也就是template模板转换为render函数的地方；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;core：&lt;/strong&gt; 核心模块，vue的初始化、整个生命周期都在这里实现；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;platforms：&lt;/strong&gt; 平台化模块，分为web和weex，而我们只需要关注web即可；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;server：&lt;/strong&gt; 服务端渲染模块，我们可以无需关注；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;sfc：&lt;/strong&gt; 对单文件组件的处理模块。同样，无需关注；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;shared：&lt;/strong&gt; 一些公用的工具方法。&lt;/p&gt; &#xA;&lt;p&gt;总结来说，在上述的文件中，我们需要重点关注的只有：compiler、core、platforms、shared。&lt;/p&gt; &#xA;&lt;h4&gt;compiler文件&lt;/h4&gt; &#xA;&lt;p&gt;整个compiler的核心作用就是生成render函数。而在该模块中的重点逻辑为 HTMLParser、parse、optimization、generate。在该文件中，会存在大量的高阶函数，在阅读该模块代码的时候也是以充分学习到函数式编程的思想。以下是对几个核心文件的简单介绍：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;codengen：&lt;/strong&gt; 主要功能是用AST生成render函数字符串；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;directives：&lt;/strong&gt; 存放一些指令的处理逻辑，如v-bind、v-model、v-on等；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;parser：&lt;/strong&gt; 主要功能是将template模板编译为AST；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;index：&lt;/strong&gt; compiler的入口文件；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;optimizer：&lt;/strong&gt; 用来对AST做一些剪枝操作的标记处理，会在codengen和vnode的patch中用到；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;to-function：&lt;/strong&gt; 将codengen生成的render函数字符串用new Function的方式最终生成render函数。&lt;/p&gt; &#xA;&lt;h4&gt;core文件&lt;/h4&gt; &#xA;&lt;p&gt;core模块为整个vue的核心模块，其中几乎包含了vue的所有核心内容。如vue实例化的选项合并，data、computed等属性的初始化，Watcher、Observer的实现、vue实例的挂载等等。内容很多，因此我们需要重点分析该模块：&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;components：&lt;/strong&gt; 名称取的比较让人迷惑，但其实他并不是组件创建或更新相关的模块，在其内部只存在一个keep-alive；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;glodbal-api：&lt;/strong&gt; 存在一些全局api，如extend、mixin等等，也包括assets属性（component、directive）的初始化逻辑；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;instance：&lt;/strong&gt; core模块中的核心，也是整个vue初始化的地方。包括了各种属性、事件的初始化，以及钩子函数的调用。其中的index文件，就是vue构造函数所在。而其他的文件，就像是一个个工厂，对vue进行层层加工，即初始化参数、初始化属性和方法等等；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;observer：&lt;/strong&gt; 响应式的实现所在，也就是数据劫持、依赖添加的具体逻辑实现。在我之前的博客中经常说到的Watcher、Dep、Observer都存放在这个文件中；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;util：&lt;/strong&gt; 工具文件。各种工具函数的所在。其中nextTick函数就存放在这儿；&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;vdom：&lt;/strong&gt; 也就是虚拟DOM（vonde）相关内容模块。包括普通节点vnode、component vnode、functional component等的初始化、patch函数等等。&lt;/p&gt; &#xA;&lt;h4&gt;paltforms文件和shared文件&lt;/h4&gt; &#xA;&lt;p&gt;paltforms文件的逻辑不多，也不复杂。其中最主要的就是改写mount函数、合并一些初始化选项、做一些差异化的处理，如属性和指令等。大家可以只关注web相关的内容即可。&lt;/p&gt; &#xA;&lt;p&gt;shared文件用来存放一些共享的工具函数（我个人最喜欢cache函数就放在这里）。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;阅读流程梳理&lt;/h3&gt; &#xA;&lt;p&gt;整个vue相对而言还是比较庞大的。合适的阅读顺序能为你省下不少精力。以下是我按照个人阅读经验梳理的顺序： &lt;img src=&#34;https://img-blog.csdnimg.cn/7568b94974a44fc3b9d90389b0a75a72.png#pic_center&#34; alt=&#34;&#34;&gt; 本想整理一份尽可能详细清晰的流程图，但是似乎其中的依赖关系比想象的复杂。我尽量将主线的顺序给梳理清楚，当然肯定会有细节上的疏漏。仅作参考。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;最后&lt;/h3&gt; &#xA;&lt;p&gt;由于该注释解析最初只是为个人学习所记录，并未有开源想法。因此，难免会有很多疏漏或者错别字。还请多多包涵~ 并且整个注释是随着个人的学习阅读进行的，难免会在刚开始有理解的不全面或不到位的地方。若有感到疑惑的地方，可以随时联系我~&lt;/p&gt; &#xA;&lt;p&gt;若存在错误，欢迎大家前来反馈，我会统一整理并更新。&lt;/p&gt; &#xA;&lt;p&gt;我在&lt;a href=&#34;https://blog.csdn.net/ccuucc?spm=1001.2101.3001.5343&#34;&gt;个人博客&lt;/a&gt;上有分享vue一些核心模块的源码分析，大家可以当作参考~&lt;/p&gt; &#xA;&lt;p&gt;祝大家学习愉快！&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jklepatch/eattheblocks</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/jklepatch/eattheblocks</id>
    <link href="https://github.com/jklepatch/eattheblocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Source code for Eat The Blocks, a screencast for Ethereum Dapp Developers&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;EaTheBlocks&lt;/h1&gt; &#xA;&lt;p&gt;Blockchain tutorials of EatTheBlocks. Learn how to build Decentralized Applications (Dapps) on Ethereum and Solidity Smart contracts&lt;/p&gt; &#xA;&lt;p&gt;Covers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ethereum&lt;/li&gt; &#xA; &lt;li&gt;Solidity&lt;/li&gt; &#xA; &lt;li&gt;Web3&lt;/li&gt; &#xA; &lt;li&gt;Truffle&lt;/li&gt; &#xA; &lt;li&gt;DeFi (Decentralized Finance)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Organization&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Youtube: &lt;code&gt;screencast&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Courses: other folders&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Courses&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eattheblocks.com/6-figure-blockchain-developer/&#34;&gt;6-Figures Blockchain Development&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://eattheblocks-pro.teachable.com/p/profitable-flashloans&#34;&gt;Profitable Flashloan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ZigZagExchange/market-maker</title>
    <updated>2022-05-31T01:31:51Z</updated>
    <id>tag:github.com,2022-05-31:/ZigZagExchange/market-maker</id>
    <link href="https://github.com/ZigZagExchange/market-maker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zigzag Market Maker&lt;/h1&gt; &#xA;&lt;p&gt;This is the reference market maker for Zigzag zksync markets. It works on both Rinkeby and Mainnet.&lt;/p&gt; &#xA;&lt;p&gt;This market maker uses existing price feeds to set bids and asks for a market. For now, in order to provide liquidity for a market, there must be an existing market with &lt;strong&gt;greater&lt;/strong&gt; liquidity listed on Cryptowatch, via either Uniswap or some other centralized exchange. It is crucial that the oracle market have more liquidity than the Zigzag one so that you are not prone to oracle attacks.&lt;/p&gt; &#xA;&lt;p&gt;Soon we will add the ability to run standalone markets and this will not be an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Activated zkSync account&lt;/li&gt; &#xA; &lt;li&gt;Ethereum private key of that account&lt;/li&gt; &#xA; &lt;li&gt;Funds in that account corresponding to the pairs you want to market make&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptowat.ch/account/api-access&#34;&gt;Cryptowatch API key&lt;/a&gt; (free for limited time)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Node.js 16 works on macOS, Windows and Linux (17 seems not)&lt;/li&gt; &#xA; &lt;li&gt;Optional: VPS when you have high ping running the bot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Copy the &lt;code&gt;config.json.EXAMPLE&lt;/code&gt; file to &lt;code&gt;config.json&lt;/code&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Set your &lt;code&gt;eth_privkey&lt;/code&gt; to be able to relay transactions. The ETH address with that private key should be loaded up with adequate funds for market making.&lt;/p&gt; &#xA;&lt;p&gt;Currently zkSync needs around 5 seconds to process a single swap and generate the receipt. So there is a upper limit of 12 swaps per wallet per minute. To circumvent this, there is also the option to use the &lt;code&gt;eth_privkeys&lt;/code&gt; array. Here you can add any number of private keys. Each should be loaded up with adequate funds for market making. The founds will be handled separately, therefor each additional wallet has the opportunity to process (at least) 12 more swaps per minute.&lt;/p&gt; &#xA;&lt;p&gt;To run the marketmaker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node marketmaker.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;h4&gt;Fee Token&lt;/h4&gt; &#xA;&lt;p&gt;With the defualt setting the bot will pay the zkSync fee wiht the same token as the user (buy currency for the bot). You can chose to override that by a fixed fee token. Check if your tokens is available to pay fees on zkSync &lt;a href=&#34;https://zkscan.io/explorer/tokens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;cryptowatchApiKey&#34;: &#34;aaaaxxx&#34;,&#xA;    &#34;ethPrivKeys&#34;: [&#xA;        &#34;&#34;,&#xA;        &#34;&#34;&#xA;    ],    &#xA;    &#34;zigzagChainId&#34;: 1,&#xA;    &#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;,&#xA;    &#34;feeToken&#34;: &#34;ETH&#34;, &amp;lt;- add this line if you eg. want to pay the fees in Ethereum &#xA;    &#34;pairs&#34;: {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet zkSync&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;zigzagChainId&#34;: 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rinkeby zkSync&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;zigzagWsUrl&#34;: &#34;wss://secret-thicket-93345.herokuapp.com&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;zigzagChainId&#34;: 1000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add, remove, and configure pair settings in the &lt;code&gt;pairs&lt;/code&gt; section. A pair setting looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;initPrice&#34;: null,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A market can be set inactive by flipping the active switch to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;side&lt;/code&gt; setting can be toggled for single-sided liquidity. By default, the side setting is set to &lt;code&gt;d&lt;/code&gt;, which stands for double-sided liquidity. To toggle single-sided liquidity, the value can be set to &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; for buy-side only or sell-side only.&lt;/p&gt; &#xA;&lt;p&gt;The slippage rate is the rate at which the spread increases as the base unit increases. For the example above, the spread goes up by 1e-5 for every 1 ETH in size added to an order. That&#39;s the equivalent of 0.1 bps / ETH in slippage.&lt;/p&gt; &#xA;&lt;p&gt;Orders coming in below the &lt;code&gt;minSpread&lt;/code&gt; from the price feed will not be filled. The spread is calculated as a decimal value. 0.01 is 1%, and 0.0002 is 2 basis points (bps).&lt;/p&gt; &#xA;&lt;h4&gt;Price Feed&lt;/h4&gt; &#xA;&lt;p&gt;There are 4 modes available with a 5th on the way.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cryptowatch&lt;/code&gt;: Follows an external price oracle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chainlink&lt;/code&gt; : Follows an external price oracle. Chainlink is WEB3 and might be slower then cryptowatch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;constant&lt;/code&gt;: Sets an fixed price and market makes around that price. Can be combined with single-sided liquidity to simulate limit orders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uniswapV3&lt;/code&gt;: Reads prices on-chain from a specified uniswapV3 pool&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;independent&lt;/code&gt;: Under development. The price is set independent of a price feed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Make sure your price feed is close to the price you see on zigzag. &lt;strong&gt;Otherwise, your mm can lose money!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For all modes the &lt;code&gt;slippageRate&lt;/code&gt;, &lt;code&gt;maxSize&lt;/code&gt;, &lt;code&gt;minSize&lt;/code&gt;, &lt;code&gt;minSpread&lt;/code&gt;, and &lt;code&gt;active&lt;/code&gt; settings are mandatory.&lt;/p&gt; &#xA;&lt;p&gt;The primary price feed is the price feed used to determine the bids and asks of the market maker. The secondary price feed is used to validate the first price feed and make sure the market isn&#39;t returning bad data. If the primary and secondary price feeds vary by more than 3%, the market maker will not fill orders.&lt;/p&gt; &#xA;&lt;h6&gt;Cryptowatch&lt;/h6&gt; &#xA;&lt;p&gt;You need a Cryptowatch API key to use the market maker. Once you obtain one, you can set the &lt;code&gt;cryptowatchApiKey&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;. And set it to your public key.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://api.cryptowat.ch/markets&#34;&gt;this link&lt;/a&gt; to download a JSON with all available market endpoints. Add those to you pair config as &#34;cryptowatch:&#xA; &lt;id&gt;&#xA;  &#34;.&#xA; &lt;/id&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Chainlink&lt;/h6&gt; &#xA;&lt;p&gt;With chainlink you have access to price oracles via blockchain. The requests are read-calls to a smart contract. The public ethers provider might be too slow for a higher number of pairs or at times of high demand. Therefore, it might be needed to have access to an Infura account (100000 Requests/Day for free). You can get an endpoint for your market maker (like &lt;a href=&#34;https://mainnet.infura.io/v3/&#34;&gt;https://mainnet.infura.io/v3/&lt;/a&gt;...), You can add this with the &lt;code&gt;infuraUrl&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&#34;infuraUrl&#34;: &#34;https://mainnet.infura.io/v3/xxxxxxxx&#34;,&#xA;&#34;pairs&#34;: {&#xA;  &#34;ETH-USDC&#34;: {&#xA;      &#34;zigzagChainId&#34;: 1,&#xA;      &#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;,&#xA;      ....&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get the available market contracts &lt;a href=&#34;https://docs.chain.link/docs/ethereum-addresses/&#34;&gt;here.&lt;/a&gt;Add those to you pair config as &#34;chainlink:&lt;/p&gt;&#xA;&lt;address&gt;&#34;, like this:&lt;p&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;chainlink:0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419&#34;,&#xA;    &#34;priceFeedSecondary&#34;: null,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;UniswapV3&lt;/h6&gt; &lt;p&gt;With uniswapV3 you have access to price feed&#39;s via blockchain. The requests are read-calls to a smart contract. The public ethers provider might be too slow for a higher number of pairs or at times of high demand. Therefore, it might be needed to have access to an Infura account (100000 Requests/Day for free). You can get an endpoint for your market maker (like &lt;a href=&#34;https://mainnet.infura.io/v3/&#34;&gt;https://mainnet.infura.io/v3/&lt;/a&gt;...), You can add this with the &lt;code&gt;infuraUrl&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;, like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;infuraUrl&#34;: &#34;https://mainnet.infura.io/v3/xxxxxxxx&#34;,&#xA;&#34;pairs&#34;: {&#xA;  &#34;ETH-USDC&#34;: {&#xA;      &#34;zigzagChainId&#34;: 1,&#xA;      &#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;,&#xA;      ....&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can get the available market contracts &lt;a href=&#34;https://info.uniswap.org&#34;&gt;here.&lt;/a&gt; Select a token and then a pool matching the pair you plan to market make. Make sure base and quote tokens match (USDC-ETH don&#39;t work for ETH-USDC). After selecting a pool, you can see the adress in the browser URL. Add that to your pair config as &#34;uniswapv3:&lt;/p&gt;&lt;address&gt;&#34;, like this:&lt;p&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;uniswapv3:0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419&#34;,&#xA;    &#34;priceFeedSecondary&#34;: null,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;Constant&lt;/h6&gt; &lt;p&gt;With constant mode, you can set a fixed price to market make. The bot will not change that price. Any secondary price feed will be ignored, if used as priceFeedPrimary. Also good as a &lt;code&gt;priceFeedSecondary&lt;/code&gt; on stablecoins.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;DAI-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;constant:1&#34;,&#xA;    &#34;priceFeedSecondary&#34;: null,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Pair Options&lt;/h2&gt; &lt;p&gt;These pair options can be set for each pair individual. You can even use more then on option per pair (though they might cancel each other out).&lt;/p&gt; &lt;h6&gt;delayAfterFill&lt;/h6&gt; &lt;p&gt;The market maker will stop market making on the pair, after successfully filling an order. This can be used to wait out bigger price moves. With the second parameter, you can set the minimum trade size (&lt;strong&gt;in base quantity&lt;/strong&gt;) to activate the option. This parameter is optional and can be omitted (like: &lt;code&gt;[60]&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Example, here a delay of &lt;strong&gt;60 seconds&lt;/strong&gt; is used:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;delayAfterFill&#34;: [60, 0.5]        &amp;lt;- This would pause the pair for 60 sec after a fill.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;increaseSpreadAfterFill&lt;/h6&gt; &lt;p&gt;The market maker increases the spread by the set amount. After the time (&lt;strong&gt;in seconds&lt;/strong&gt;) the spread will fall back to the old value. This can happen multiple times in case the mm fills again in the set time (e.g. 0.1 -&amp;gt; 0.2 -&amp;gt; 0.3). With the third parameter, you can set the minimum trade size (&lt;strong&gt;in base quantity&lt;/strong&gt;) to activate the option. This parameter is optional and can be omitted. Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;increaseSpreadAfterFill&#34;: [0.1, 300, 0.5]        &amp;lt;- This would increase the minSpread by 0.1 per fill for 300 sec each.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;changeSizeAfterFill&lt;/h6&gt; &lt;p&gt;The market maker increases the size (&lt;strong&gt;in base token&lt;/strong&gt;) by the set amount. After the time (&lt;strong&gt;in seconds&lt;/strong&gt;) the size will fall back to the old value. This can happen multiple times in case the mm fills again in the set time (e.g. 0.1 -&amp;gt; 0.2 -&amp;gt; 0.3). You can set a value below 0 to reduce size after fill (like: [-0.1, 300]). With the third parameter, you can set the minimum trade size (&lt;strong&gt;in base quantity&lt;/strong&gt;) to activate the option. This parameter is optional and can be omitted. Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;changeSizeAfterFill&#34;: [0.05, 300, 0.5]        &amp;lt;- This would increase the maxSize by 0.05 ETH (base token) per fill for 300 sec each.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;numOrdersIndicated&lt;/h6&gt; &lt;p&gt;On the UI, when indicating liquidity, by default will indicate the liquidity in 10 separate orders spaced evenly apart. To change the number of orders indicated, you can use the &lt;code&gt;numOrdersIndicated&lt;/code&gt; setting.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;numOrdersIndicated&#34;: 5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Pair Setting Examples&lt;/h2&gt; &lt;p&gt;Stable-Stable constant price:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;DAI-USDC&#34;: {&#xA;    &#34;priceFeedPrimary&#34;: &#34;constant:1&#34;,&#xA;    &#34;slippageRate&#34;: 1e-9,&#xA;    &#34;maxSize&#34;: 100000,&#xA;    &#34;minSize&#34;: 1,&#xA;    &#34;minSpread&#34;: 0.0003,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Single-sided accumulation:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Sell the rip:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;DYDX-USDC&#34;: {&#xA;    &#34;priceFeedPrimary&#34;: &#34;constant:20&#34;,&#xA;    &#34;side&#34;: &#34;s&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 1000,&#xA;    &#34;minSize&#34;: 0.5,&#xA;    &#34;minSpread&#34;: 0,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Configuration Via Environment Variables&lt;/h2&gt; &lt;p&gt;If your hosting service requires you to pass in configs via environment variables you can compress &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat config.json | tr -d &#39; &#39; | tr -d &#39;\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and set it to the value of the &lt;code&gt;MM_CONFIG&lt;/code&gt; environment variable to override the config file.&lt;/p&gt; &lt;p&gt;You can also override the private key in the config file with the &lt;code&gt;ETH_PRIVKEY&lt;/code&gt; environment variable, and the cryptowatch API key with the &lt;code&gt;CRYPTOWATCH_API_KEY&lt;/code&gt; environment variable, and the Infura provider url with &lt;code&gt;INFURA_URL&lt;/code&gt;&lt;/p&gt; &lt;/address&gt;&lt;/address&gt;</summary>
  </entry>
</feed>