<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-17T01:36:44Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>eKoopmans/html2pdf.js</title>
    <updated>2023-03-17T01:36:44Z</updated>
    <id>tag:github.com,2023-03-17:/eKoopmans/html2pdf.js</id>
    <link href="https://github.com/eKoopmans/html2pdf.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Client-side HTML-to-PDF rendering using pure JS.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;html2pdf.js&lt;/h1&gt; &#xA;&lt;p&gt;html2pdf.js converts any webpage or element into a printable PDF entirely client-side using &lt;a href=&#34;https://github.com/niklasvh/html2canvas&#34;&gt;html2canvas&lt;/a&gt; and &lt;a href=&#34;https://github.com/MrRio/jsPDF&#34;&gt;jsPDF&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;âš &lt;/span&gt; There have been several issues reported in v0.10. They are being investigated but in the meantime you may wish to remain on v0.9.3 (&#34;^0.9.3&#34; in npm, or &lt;a href=&#34;https://cdnjs.com/libraries/html2pdf.js/0.9.3&#34;&gt;use cdnjs for HTML script tags&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#getting-started&#34;&gt;Getting started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#cdn&#34;&gt;CDN&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#raw-js&#34;&gt;Raw JS&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#npm&#34;&gt;NPM&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#bower&#34;&gt;Bower&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#console&#34;&gt;Console&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#advanced-usage&#34;&gt;Advanced usage&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#workflow&#34;&gt;Workflow&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#worker-api&#34;&gt;Worker API&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#options&#34;&gt;Options&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#page-breaks&#34;&gt;Page-breaks&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#page-break-settings&#34;&gt;Page-break settings&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#page-break-modes&#34;&gt;Page-break modes&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#example-usage&#34;&gt;Example usage&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#image-type-and-quality&#34;&gt;Image type and quality&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#progress-tracking&#34;&gt;Progress tracking&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#issues&#34;&gt;Issues&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#tests&#34;&gt;Tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#pull-requests&#34;&gt;Pull requests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h4&gt;CDN&lt;/h4&gt; &#xA;&lt;p&gt;The simplest way to use html2pdf.js is to include it as a script in your HTML by using cdnjs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js&#34; integrity=&#34;sha512-GsLlZN/3F2ErC5ifS5QtgpiJtWd43JWSuIgh7mbzZ8zBps+dvLusV+eNQATqgA/HdeKFVgA5v3S/cIrLF7QnIg==&#34; crossorigin=&#34;anonymous&#34; referrerpolicy=&#34;no-referrer&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Using a CDN URL will lock you to a specific version, which should ensure stability and give you control over when to change versions. cdnjs gives you access to &lt;a href=&#34;https://cdnjs.com/libraries/html2pdf.js&#34;&gt;all past versions of html2pdf.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: &lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#dependencies&#34;&gt;Read about dependences&lt;/a&gt; for more information about using the unbundled version &lt;code&gt;dist/html2canvas.min.js&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Raw JS&lt;/h4&gt; &#xA;&lt;p&gt;You may also download &lt;code&gt;dist/html2pdf.bundle.min.js&lt;/code&gt; directly to your project folder and include it in your HTML with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;html2pdf.bundle.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;NPM&lt;/h4&gt; &#xA;&lt;p&gt;Install html2pdf.js and its dependencies using NPM with &lt;code&gt;npm install --save html2pdf.js&lt;/code&gt; (make sure to include &lt;code&gt;.js&lt;/code&gt; in the package name).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note: You can use NPM to create your project, but html2pdf.js &lt;strong&gt;will not run in Node.js&lt;/strong&gt;, it must be run in a browser.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bower&lt;/h4&gt; &#xA;&lt;p&gt;Install html2pdf.js and its dependencies using Bower with &lt;code&gt;bower install --save html2pdf.js&lt;/code&gt; (make sure to include &lt;code&gt;.js&lt;/code&gt; in the package name).&lt;/p&gt; &#xA;&lt;h4&gt;Console&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re on a webpage that you can&#39;t modify directly and wish to use html2pdf.js to capture a screenshot, you can follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open your browser&#39;s console (instructions for different browsers &lt;a href=&#34;https://webmasters.stackexchange.com/a/77337/94367&#34;&gt;here&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Paste in this code: &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function addScript(url) {&#xA;    var script = document.createElement(&#39;script&#39;);&#xA;    script.type = &#39;application/javascript&#39;;&#xA;    script.src = url;&#xA;    document.head.appendChild(script);&#xA;}&#xA;addScript(&#39;https://cdnjs.cloudflare.com/ajax/libs/html2pdf.js/0.10.1/html2pdf.bundle.min.js&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;You may now execute html2pdf.js commands directly from the console. To capture a default PDF of the entire page, use &lt;code&gt;html2pdf(document.body)&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Once installed, html2pdf.js is ready to use. The following command will generate a PDF of &lt;code&gt;#element-to-print&lt;/code&gt; and prompt the user to save the result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var element = document.getElementById(&#39;element-to-print&#39;);&#xA;html2pdf(element);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Advanced usage&lt;/h3&gt; &#xA;&lt;p&gt;Every step of html2pdf.js is configurable, using its new Promise-based API. If html2pdf.js is called without arguments, it will return a &lt;code&gt;Worker&lt;/code&gt; object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var worker = html2pdf();  // Or:  var worker = new html2pdf.Worker;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This worker has methods that can be chained sequentially, as each Promise resolves, and allows insertion of your own intermediate functions between steps. A prerequisite system allows you to skip over mandatory steps (like canvas creation) without any trouble:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// This will implicitly create the canvas and PDF objects before saving.&#xA;var worker = html2pdf().from(element).save();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Workflow&lt;/h4&gt; &#xA;&lt;p&gt;The basic workflow of html2pdf.js tasks (enforced by the prereq system) is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;.from() -&amp;gt; .toContainer() -&amp;gt; .toCanvas() -&amp;gt; .toImg() -&amp;gt; .toPdf() -&amp;gt; .save()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Worker API&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Arguments&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;from&lt;/td&gt; &#xA;   &lt;td&gt;src, type&lt;/td&gt; &#xA;   &lt;td&gt;Sets the source (HTML string or element) for the PDF. Optional &lt;code&gt;type&lt;/code&gt; specifies other sources: &lt;code&gt;&#39;string&#39;&lt;/code&gt;, &lt;code&gt;&#39;element&#39;&lt;/code&gt;, &lt;code&gt;&#39;canvas&#39;&lt;/code&gt;, or &lt;code&gt;&#39;img&#39;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;to&lt;/td&gt; &#xA;   &lt;td&gt;target&lt;/td&gt; &#xA;   &lt;td&gt;Converts the source to the specified target (&lt;code&gt;&#39;container&#39;&lt;/code&gt;, &lt;code&gt;&#39;canvas&#39;&lt;/code&gt;, &lt;code&gt;&#39;img&#39;&lt;/code&gt;, or &lt;code&gt;&#39;pdf&#39;&lt;/code&gt;). Each target also has its own &lt;code&gt;toX&lt;/code&gt; method that can be called directly: &lt;code&gt;toContainer()&lt;/code&gt;, &lt;code&gt;toCanvas()&lt;/code&gt;, &lt;code&gt;toImg()&lt;/code&gt;, and &lt;code&gt;toPdf()&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;output&lt;/td&gt; &#xA;   &lt;td&gt;type, options, src&lt;/td&gt; &#xA;   &lt;td&gt;Routes to the appropriate &lt;code&gt;outputPdf&lt;/code&gt; or &lt;code&gt;outputImg&lt;/code&gt; method based on specified &lt;code&gt;src&lt;/code&gt; (&lt;code&gt;&#39;pdf&#39;&lt;/code&gt; (default) or &lt;code&gt;&#39;img&#39;&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;outputPdf&lt;/td&gt; &#xA;   &lt;td&gt;type, options&lt;/td&gt; &#xA;   &lt;td&gt;Sends &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;options&lt;/code&gt; to the jsPDF object&#39;s &lt;code&gt;output&lt;/code&gt; method, and returns the result as a Promise (use &lt;code&gt;.then&lt;/code&gt; to access). See the &lt;a href=&#34;https://rawgit.com/MrRio/jsPDF/master/docs/jspdf.js.html#line992&#34;&gt;jsPDF source code&lt;/a&gt; for more info.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;outputImg&lt;/td&gt; &#xA;   &lt;td&gt;type, options&lt;/td&gt; &#xA;   &lt;td&gt;Returns the specified data type for the image as a Promise (use &lt;code&gt;.then&lt;/code&gt; to access). Supported types: &lt;code&gt;&#39;img&#39;&lt;/code&gt;, &lt;code&gt;&#39;datauristring&#39;&lt;/code&gt;/&lt;code&gt;&#39;dataurlstring&#39;&lt;/code&gt;, and &lt;code&gt;&#39;datauri&#39;&lt;/code&gt;/&lt;code&gt;&#39;dataurl&#39;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;save&lt;/td&gt; &#xA;   &lt;td&gt;filename&lt;/td&gt; &#xA;   &lt;td&gt;Saves the PDF object with the optional filename (creates user download prompt).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set&lt;/td&gt; &#xA;   &lt;td&gt;opt&lt;/td&gt; &#xA;   &lt;td&gt;Sets the specified properties. See &lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#options&#34;&gt;Options&lt;/a&gt; below for more details.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;get&lt;/td&gt; &#xA;   &lt;td&gt;key, cbk&lt;/td&gt; &#xA;   &lt;td&gt;Returns the property specified in &lt;code&gt;key&lt;/code&gt;, either as a Promise (use &lt;code&gt;.then&lt;/code&gt; to access), or by calling &lt;code&gt;cbk&lt;/code&gt; if provided.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;then&lt;/td&gt; &#xA;   &lt;td&gt;onFulfilled, onRejected&lt;/td&gt; &#xA;   &lt;td&gt;Standard Promise method, with &lt;code&gt;this&lt;/code&gt; re-bound to the Worker, and with added progress-tracking (see &lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#progress&#34;&gt;Progress&lt;/a&gt; below). Note that &lt;code&gt;.then&lt;/code&gt; returns a &lt;code&gt;Worker&lt;/code&gt;, which is a subclass of Promise.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;thenCore&lt;/td&gt; &#xA;   &lt;td&gt;onFulFilled, onRejected&lt;/td&gt; &#xA;   &lt;td&gt;Standard Promise method, with &lt;code&gt;this&lt;/code&gt; re-bound to the Worker (no progress-tracking). Note that &lt;code&gt;.thenCore&lt;/code&gt; returns a &lt;code&gt;Worker&lt;/code&gt;, which is a subclass of Promise.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;thenExternal&lt;/td&gt; &#xA;   &lt;td&gt;onFulfilled, onRejected&lt;/td&gt; &#xA;   &lt;td&gt;True Promise method. Using this &#39;exits&#39; the Worker chain - you will not be able to continue chaining Worker methods after &lt;code&gt;.thenExternal&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;catch, catchExternal&lt;/td&gt; &#xA;   &lt;td&gt;onRejected&lt;/td&gt; &#xA;   &lt;td&gt;Standard Promise method. &lt;code&gt;catchExternal&lt;/code&gt; exits the Worker chain - you will not be able to continue chaining Worker methods after &lt;code&gt;.catchExternal&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;error&lt;/td&gt; &#xA;   &lt;td&gt;msg&lt;/td&gt; &#xA;   &lt;td&gt;Throws an error in the Worker&#39;s Promise chain.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;A few aliases are also provided for convenience:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Alias&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;save&lt;/td&gt; &#xA;   &lt;td&gt;saveAs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;set&lt;/td&gt; &#xA;   &lt;td&gt;using&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;output&lt;/td&gt; &#xA;   &lt;td&gt;export&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;then&lt;/td&gt; &#xA;   &lt;td&gt;run&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;html2pdf.js can be configured using an optional &lt;code&gt;opt&lt;/code&gt; parameter:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var element = document.getElementById(&#39;element-to-print&#39;);&#xA;var opt = {&#xA;  margin:       1,&#xA;  filename:     &#39;myfile.pdf&#39;,&#xA;  image:        { type: &#39;jpeg&#39;, quality: 0.98 },&#xA;  html2canvas:  { scale: 2 },&#xA;  jsPDF:        { unit: &#39;in&#39;, format: &#39;letter&#39;, orientation: &#39;portrait&#39; }&#xA;};&#xA;&#xA;// New Promise-based usage:&#xA;html2pdf().set(opt).from(element).save();&#xA;&#xA;// Old monolithic-style usage:&#xA;html2pdf(element, opt);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;opt&lt;/code&gt; parameter has the following optional fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;margin&lt;/td&gt; &#xA;   &lt;td&gt;number or array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PDF margin (in jsPDF units). Can be a single number, &lt;code&gt;[vMargin, hMargin]&lt;/code&gt;, or &lt;code&gt;[top, left, bottom, right]&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;filename&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#39;file.pdf&#39;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The default filename of the exported PDF.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pagebreak&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{mode: [&#39;css&#39;, &#39;legacy&#39;]}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Controls the pagebreak behaviour on the page. See &lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#page-breaks&#34;&gt;Page-breaks&lt;/a&gt; below.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;image&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{type: &#39;jpeg&#39;, quality: 0.95}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The image type and quality used to generate the PDF. See &lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/#image-type-and-quality&#34;&gt;Image type and quality&lt;/a&gt; below.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;enableLinks&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;If enabled, PDF hyperlinks are automatically added ontop of all anchor tags.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;html2canvas&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configuration options sent directly to &lt;code&gt;html2canvas&lt;/code&gt; (&lt;a href=&#34;https://html2canvas.hertzen.com/configuration&#34;&gt;see here&lt;/a&gt; for usage).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;jsPDF&lt;/td&gt; &#xA;   &lt;td&gt;object&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Configuration options sent directly to &lt;code&gt;jsPDF&lt;/code&gt; (&lt;a href=&#34;http://rawgit.com/MrRio/jsPDF/master/docs/jsPDF.html&#34;&gt;see here&lt;/a&gt; for usage).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Page-breaks&lt;/h3&gt; &#xA;&lt;p&gt;html2pdf.js has the ability to automatically add page-breaks to clean up your document. Page-breaks can be added by CSS styles, set on individual elements using selectors, or avoided from breaking inside all elements (&lt;code&gt;avoid-all&lt;/code&gt; mode).&lt;/p&gt; &#xA;&lt;p&gt;By default, html2pdf.js will respect most CSS &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/break-before&#34;&gt;&lt;code&gt;break-before&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/break-after&#34;&gt;&lt;code&gt;break-after&lt;/code&gt;&lt;/a&gt;, and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/break-inside&#34;&gt;&lt;code&gt;break-inside&lt;/code&gt;&lt;/a&gt; rules, and also add page-breaks after any element with class &lt;code&gt;html2pdf__page-break&lt;/code&gt; (for legacy purposes).&lt;/p&gt; &#xA;&lt;h4&gt;Page-break settings&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Setting&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mode&lt;/td&gt; &#xA;   &lt;td&gt;string or array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[&#39;css&#39;, &#39;legacy&#39;]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The mode(s) on which to automatically add page-breaks. One or more of &lt;code&gt;&#39;avoid-all&#39;&lt;/code&gt;, &lt;code&gt;&#39;css&#39;&lt;/code&gt;, and &lt;code&gt;&#39;legacy&#39;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;before&lt;/td&gt; &#xA;   &lt;td&gt;string or array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;CSS selectors for which to add page-breaks before each element. Can be a specific element with an ID (&lt;code&gt;&#39;#myID&#39;&lt;/code&gt;), all elements of a type (e.g. &lt;code&gt;&#39;img&#39;&lt;/code&gt;), all of a class (&lt;code&gt;&#39;.myClass&#39;&lt;/code&gt;), or even &lt;code&gt;&#39;*&#39;&lt;/code&gt; to match every element.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;after&lt;/td&gt; &#xA;   &lt;td&gt;string or array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Like &#39;before&#39;, but adds a page-break immediately after the element.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avoid&lt;/td&gt; &#xA;   &lt;td&gt;string or array&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Like &#39;before&#39;, but avoids page-breaks on these elements. You can enable this feature on every element using the &#39;avoid-all&#39; mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Page-break modes&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Mode&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;avoid-all&lt;/td&gt; &#xA;   &lt;td&gt;Automatically adds page-breaks to avoid splitting any elements across pages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;css&lt;/td&gt; &#xA;   &lt;td&gt;Adds page-breaks according to the CSS &lt;code&gt;break-before&lt;/code&gt;, &lt;code&gt;break-after&lt;/code&gt;, and &lt;code&gt;break-inside&lt;/code&gt; properties. Only recognizes &lt;code&gt;always/left/right&lt;/code&gt; for before/after, and &lt;code&gt;avoid&lt;/code&gt; for inside.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;legacy&lt;/td&gt; &#xA;   &lt;td&gt;Adds page-breaks after elements with class &lt;code&gt;html2pdf__page-break&lt;/code&gt;. This feature may be removed in the future.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example usage&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Avoid page-breaks on all elements, and add one before #page2el.&#xA;html2pdf().set({&#xA;  pagebreak: { mode: &#39;avoid-all&#39;, before: &#39;#page2el&#39; }&#xA;});&#xA;&#xA;// Enable all &#39;modes&#39;, with no explicit elements.&#xA;html2pdf().set({&#xA;  pagebreak: { mode: [&#39;avoid-all&#39;, &#39;css&#39;, &#39;legacy&#39;] }&#xA;});&#xA;&#xA;// No modes, only explicit elements.&#xA;html2pdf().set({&#xA;  pagebreak: { before: &#39;.beforeClass&#39;, after: [&#39;#after1&#39;, &#39;#after2&#39;], avoid: &#39;img&#39; }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Image type and quality&lt;/h3&gt; &#xA;&lt;p&gt;You may customize the image type and quality exported from the canvas by setting the &lt;code&gt;image&lt;/code&gt; option. This must be an object with the following fields:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;type&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;jpeg&#39;&lt;/td&gt; &#xA;   &lt;td&gt;The image type. HTMLCanvasElement only supports &#39;png&#39;, &#39;jpeg&#39;, and &#39;webp&#39; (on Chrome).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;quality&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;0.95&lt;/td&gt; &#xA;   &lt;td&gt;The image quality, from 0 to 1. This setting is only used for jpeg/webp (not png).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These options are limited to the available settings for &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL&#34;&gt;HTMLCanvasElement.toDataURL()&lt;/a&gt;, which ignores quality settings for &#39;png&#39; images. To enable png image compression, try using the &lt;a href=&#34;https://github.com/ShyykoSerhiy/canvas-png-compression&#34;&gt;canvas-png-compression shim&lt;/a&gt;, which should be an in-place solution to enable png compression via the &lt;code&gt;quality&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h2&gt;Progress tracking&lt;/h2&gt; &#xA;&lt;p&gt;The Worker object returned by &lt;code&gt;html2pdf()&lt;/code&gt; has a built-in progress-tracking mechanism. It will be updated to allow a progress callback that will be called with each update, however it is currently a work-in-progress.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;html2pdf.js depends on the external packages &lt;a href=&#34;https://github.com/niklasvh/html2canvas&#34;&gt;html2canvas&lt;/a&gt;, &lt;a href=&#34;https://github.com/MrRio/jsPDF&#34;&gt;jsPDF&lt;/a&gt;, and &lt;a href=&#34;https://github.com/stefanpenner/es6-promise&#34;&gt;es6-promise&lt;/a&gt;. These dependencies are automatically loaded when using NPM or the bundled package.&lt;/p&gt; &#xA;&lt;p&gt;If using the unbundled &lt;code&gt;dist/html2pdf.min.js&lt;/code&gt; (or its un-minified version), you must also include each dependency. Order is important, otherwise html2canvas will be overridden by jsPDF&#39;s own internal implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;es6-promise.auto.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;jspdf.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;html2canvas.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;html2pdf.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Issues&lt;/h3&gt; &#xA;&lt;p&gt;When submitting an issue, please provide reproducible code that highlights the issue, preferably by creating a fork of &lt;a href=&#34;https://jsfiddle.net/u6o6ne41/&#34;&gt;this template jsFiddle&lt;/a&gt; (which has html2pdf.js already loaded). Remember that html2pdf.js uses &lt;a href=&#34;https://github.com/niklasvh/html2canvas&#34;&gt;html2canvas&lt;/a&gt; and &lt;a href=&#34;https://github.com/MrRio/jsPDF&#34;&gt;jsPDF&lt;/a&gt; as dependencies, so it&#39;s a good idea to check each of those repositories&#39; issue trackers to see if your problem has already been addressed.&lt;/p&gt; &#xA;&lt;h4&gt;Known issues&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rendering:&lt;/strong&gt; The rendering engine html2canvas isn&#39;t perfect (though it&#39;s pretty good!). If html2canvas isn&#39;t rendering your content correctly, I can&#39;t fix it.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can test this with something like &lt;a href=&#34;https://jsfiddle.net/eKoopmans/z1rupL4c/&#34;&gt;this fiddle&lt;/a&gt;, to see if there&#39;s a problem in the canvas creation itself.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Node cloning (CSS etc):&lt;/strong&gt; The way html2pdf.js clones your content before sending to html2canvas is buggy. A fix is currently being developed - try out:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;direct file: Go to &lt;a href=&#34;https://raw.githubusercontent.com/eKoopmans/html2pdf.js/master/eKoopmans/html2pdf.js/tree/bugfix/clone-nodes-BUILD&#34;&gt;html2pdf.js/bugfix/clone-nodes-BUILD&lt;/a&gt; and replace the files in your project with the relevant files (e.g. &lt;code&gt;dist/html2pdf.bundle.js&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;npm: &lt;code&gt;npm install eKoopmans/html2pdf.js#bugfix/clone-nodes-BUILD&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Related project: &lt;a href=&#34;https://github.com/eKoopmans/html2pdf.js/projects/9&#34;&gt;Bugfix: Cloned nodes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Resizing:&lt;/strong&gt; Currently, html2pdf.js resizes the root element to fit onto a PDF page (causing internal content to &#34;reflow&#34;).&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is often desired behaviour, but not always.&lt;/li&gt; &#xA;   &lt;li&gt;There are plans to add alternate behaviour (e.g. &#34;shrink-to-page&#34;), but nothing that&#39;s ready to test yet.&lt;/li&gt; &#xA;   &lt;li&gt;Related project: &lt;a href=&#34;https://github.com/eKoopmans/html2pdf.js/projects/1&#34;&gt;Feature: Single-page PDFs&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Rendered as image:&lt;/strong&gt; html2pdf.js renders all content into an image, then places that image into a PDF.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This means text is &lt;em&gt;not selectable or searchable&lt;/em&gt;, and causes large file sizes.&lt;/li&gt; &#xA;   &lt;li&gt;This is currently unavoidable, however recent improvements in jsPDF mean that it may soon be possible to render straight into vector graphics.&lt;/li&gt; &#xA;   &lt;li&gt;Related project: &lt;a href=&#34;https://github.com/eKoopmans/html2pdf.js/projects/4&#34;&gt;Feature: New renderer&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Promise clashes:&lt;/strong&gt; html2pdf.js relies on specific Promise behaviour, and can fail when used with custom Promise libraries.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In the next release, Promises will be sandboxed in html2pdf.js to remove this issue.&lt;/li&gt; &#xA;   &lt;li&gt;Related project: &lt;a href=&#34;https://github.com/eKoopmans/html2pdf.js/projects/11&#34;&gt;Bugfix: Sandboxed promises&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Maximum size:&lt;/strong&gt; HTML5 canvases have a &lt;a href=&#34;https://stackoverflow.com/a/11585939/4080966&#34;&gt;maximum height/width&lt;/a&gt;. Anything larger will fail to render.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is a limitation of HTML5 itself, and results in large PDFs rendering completely blank in html2pdf.js.&lt;/li&gt; &#xA;   &lt;li&gt;The jsPDF canvas renderer (mentioned in Known Issue #4) may be able to fix this issue!&lt;/li&gt; &#xA;   &lt;li&gt;Related project: &lt;a href=&#34;https://github.com/eKoopmans/html2pdf.js/projects/5&#34;&gt;Bugfix: Maximum canvas size&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;html2pdf.js is currently sorely lacking in unit tests. Any contributions or suggestions of automated (or manual) tests are welcome. This is high on the to-do list for this project.&lt;/p&gt; &#xA;&lt;h3&gt;Pull requests&lt;/h3&gt; &#xA;&lt;p&gt;If you want to create a new feature or bugfix, please feel free to fork and submit a pull request! Create a fork, branch off of &lt;code&gt;master&lt;/code&gt;, and make changes to the &lt;code&gt;/src/&lt;/code&gt; files (rather than directly to &lt;code&gt;/dist/&lt;/code&gt;). You can test your changes by rebuilding with &lt;code&gt;npm run build&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/eKoopmans&#34;&gt;Erik Koopmans&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Contributors&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/WilcoBreedt&#34;&gt;@WilcoBreedt&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ranger1230&#34;&gt;@Ranger1230&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Special thanks&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://saucelabs.com/&#34;&gt;Sauce Labs&lt;/a&gt; for unit testing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;The MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2017-2019 Erik Koopmans &amp;lt;&lt;a href=&#34;http://www.erik-koopmans.com/&#34;&gt;http://www.erik-koopmans.com/&lt;/a&gt;&amp;gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dice2o/BingGPT</title>
    <updated>2023-03-17T01:36:44Z</updated>
    <id>tag:github.com,2023-03-17:/dice2o/BingGPT</id>
    <link href="https://github.com/dice2o/BingGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;BingGPT desktop application (Windows, macOS and Linux)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;180&#34; src=&#34;https://raw.githubusercontent.com/dice2o/BingGPT/main/icon.png&#34; alt=&#34;BingGPT&#34;&gt; &lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;BingGPT&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt;BingGPT desktop application&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://opensource.org/licenses/Apache-2.0&#34;&gt; &lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/badge/license-Apache_2.0-green&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/dice2o/BingGPT&#34;&gt; &lt;img alt=&#34;Visitors&#34; src=&#34;https://visitor-badge.glitch.me/badge?page_id=dice2o.binggpt&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/dice2o/BingGPT/releases&#34;&gt; &lt;img alt=&#34;Downloads&#34; src=&#34;https://img.shields.io/github/downloads/dice2o/BingGPT/total?color=blue&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-win32-x64-Setup.exe&#34;&gt;BingGPT-0.1.7-win32-x64-Setup.exe&lt;/a&gt; (Installer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-win32-x64.zip&#34;&gt;BingGPT-0.1.7-win32-x64.zip&lt;/a&gt; (Portable)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-win32-arm64-Setup.exe&#34;&gt;BingGPT-0.1.7-win32-arm64-Setup.exe&lt;/a&gt; (Installer)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-win32-arm64.zip&#34;&gt;BingGPT-0.1.7-win32-arm64.zip&lt;/a&gt; (Portable)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-darwin-arm64.dmg&#34;&gt;BingGPT-0.1.7-darwin-arm64.dmg&lt;/a&gt; (Apple Silicon)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-darwin-x64.dmg&#34;&gt;BingGPT-0.1.7-darwin-x64.dmg&lt;/a&gt; (Intel chips)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-linux-x64.deb&#34;&gt;BingGPT-0.1.7-linux-x64.deb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-linux-arm64.deb&#34;&gt;BingGPT-0.1.7-linux-arm64.deb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-linux-x64.rpm&#34;&gt;BingGPT-0.1.7-linux-x64.rpm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dice2o/BingGPT/releases/download/v0.1.7/BingGPT-0.1.7-linux-arm64.rpm&#34;&gt;BingGPT-0.1.7-linux-arm64.rpm&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get access to the early preview of new Bing - &lt;a href=&#34;https://www.bing.com/new&#34;&gt;Join the waitlist&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Sign in to your Microsoft account&lt;/li&gt; &#xA; &lt;li&gt;Start chatting&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note: VPN is required when launching the app if new Bing is not available in your area. Make sure &lt;code&gt;bing.com&lt;/code&gt; and its subdomains are included in proxy rules. You can exit VPN while chatting.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Multi-platform&lt;/li&gt; &#xA; &lt;li&gt;Chat with new Bing without installing Microsoft Edge or browser plugins&lt;/li&gt; &#xA; &lt;li&gt;Export full conversation as image&lt;/li&gt; &#xA; &lt;li&gt;Follow system theme&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;img width=&#34;601&#34; src=&#34;https://raw.githubusercontent.com/dice2o/BingGPT/main/screenshot.png&#34; alt=&#34;BingGPT Screenshot&#34;&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Apache-2.0 License&lt;/p&gt;</summary>
  </entry>
</feed>