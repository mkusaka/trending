<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-29T01:31:01Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dotenvx/dotenvx</title>
    <updated>2024-06-29T01:31:01Z</updated>
    <id>tag:github.com,2024-06-29:/dotenvx/dotenvx</id>
    <link href="https://github.com/dotenvx/dotenvx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;a better dotenv‚Äìfrom the creator of `dotenv`&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://dotenvx.com&#34;&gt;&lt;img src=&#34;https://dotenvx.com/better-banner.png&#34; alt=&#34;dotenvx&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;a better dotenv&lt;/em&gt;‚Äìfrom the creator of &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;&lt;code&gt;dotenv&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;run anywhere (cross-platform)&lt;/li&gt; &#xA; &lt;li&gt;multi-environment&lt;/li&gt; &#xA; &lt;li&gt;encrypted envs&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h3&gt;Quickstart &lt;a href=&#34;https://www.npmjs.com/package/@dotenvx/dotenvx&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/@dotenvx/dotenvx.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotenvx/dotenvx/tree/main/tests&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://gist.githubusercontent.com/motdotenv/bb76445765a9731e7d824a6efdf53524/raw/dotenvxTestCount.json&#34; alt=&#34;test count&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/@dotenvx/dotenvx&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/@dotenvx/dotenvx&#34; alt=&#34;npm installs&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install and use it in code just like &lt;code&gt;dotenv&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install @dotenvx/dotenvx --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js&#xA;require(&#39;@dotenvx/dotenvx&#39;).config()&#xA;&#xA;console.log(`Hello ${process.env.HELLO}`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;p&gt;or install globally - &lt;em&gt;unlocks dotenv for any language, framework, or platform!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;with brew üç∫&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install dotenvx/brew/dotenvx&#xA;dotenvx help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/dotenvx/homebrew-brew/raw/main/Formula/dotenvx.rb&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/dotenvx/dotenvx/total?label=brew%20installs&#34; alt=&#34;brew installs&#34;&gt;&lt;/a&gt; &lt;sup&gt;*homebrew installs sourced from github releases - &lt;a href=&#34;https://github.com/dotenvx/homebrew-brew/raw/main/Formula/dotenvx.rb&#34;&gt;formula&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;with curl üåê &lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -sfS https://dotenvx.sh | sh&#xA;dotenvx help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/dotenvx/dotenvx.sh/raw/main/install.sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://dotenvx.sh/stats/curl/darwin&amp;amp;label=mac&#34; alt=&#34;mac&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotenvx/dotenvx.sh/raw/main/install.sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://dotenvx.sh/stats/curl/linux&amp;amp;label=linux&#34; alt=&#34;linux&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dotenvx/dotenvx.sh/raw/main/install.sh&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://dotenvx.sh/stats/curl/windows&amp;amp;label=windows&#34; alt=&#34;windows&#34;&gt;&lt;/a&gt; &lt;sup&gt;*curl installs sourced from npm binary packages - &lt;a href=&#34;https://www.npmjs.com/package/@dotenvx/dotenvx-linux-x86_64&#34;&gt;example&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt; &#xA; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;with docker üê≥&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run -it --rm -v $(pwd):/app dotenv/dotenvx help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://hub.docker.com/r/dotenv/dotenvx&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/dotenv/dotenvx&#34; alt=&#34;docker pulls&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;or with github releases üêô&lt;/summary&gt;&#xA; &lt;br&gt; &#xA; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -L -o dotenvx.tar.gz &#34;https://github.com/dotenvx/dotenvx/releases/latest/download/dotenvx-$(uname -s)-$(uname -m).tar.gz&#34;&#xA;tar -xzf dotenvx.tar.gz&#xA;./dotenvx help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/dotenvx/dotenvx/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/dotenvx/dotenvx/total&#34; alt=&#34;github releases&#34;&gt;&lt;/a&gt; &lt;sup&gt;*includes homebrew installs&lt;/sup&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Run Anywhere&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ node index.js&#xA;Hello undefined # without dotenvx&#xA;&#xA;$ dotenvx run -- node index.js&#xA;Hello World # with dotenvx&#xA;&amp;gt; :-D&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/quickstart&#34;&gt;extended quickstart guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More examples&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;TypeScript üìò&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// package.json&#xA;{&#xA;  &#34;type&#34;: &#34;module&#34;,&#xA;  &#34;dependencies&#34;: {&#xA;    &#34;chalk&#34;: &#34;^5.3.0&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.ts&#xA;import chalk from &#39;chalk&#39;&#xA;console.log(chalk.blue(`Hello ${process.env.HELLO}`))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install&#xA;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx run -- npx tsx index.ts&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Deno ü¶ï&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;console.log(&#39;Hello &#39; + Deno.env.get(&#39;HELLO&#39;))&#34; &amp;gt; index.ts&#xA;&#xA;$ deno run --allow-env index.ts&#xA;Hello undefined&#xA;&#xA;$ dotenvx run -- deno run --allow-env index.ts&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Bun ü•ü&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=Test&#34; &amp;gt; .env.test&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ bun index.js&#xA;Hello undefined&#xA;&#xA;$ dotenvx run -f .env.test -- bun index.js&#xA;Hello Test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Python üêç&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;import os;print(&#34;Hello &#34; + os.getenv(&#34;HELLO&#34;, &#34;&#34;))&#39; &amp;gt; index.py&#xA;&#xA;$ dotenvx run -- python3 index.py&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/quickstart&#34;&gt;extended python guide&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;PHP üêò&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;&amp;lt;?php echo &#34;Hello {$_SERVER[&#34;HELLO&#34;]}\n&#34;;&#39; &amp;gt; index.php&#xA;&#xA;$ dotenvx run -- php index.php&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/quickstart&#34;&gt;extended php guide&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Ruby üíé&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;puts &#34;Hello #{ENV[&#34;HELLO&#34;]}&#34;&#39; &amp;gt; index.rb&#xA;&#xA;$ dotenvx run -- ruby index.rb&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/quickstart&#34;&gt;extended ruby guide&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Go üêπ&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;package main; import (&#34;fmt&#34;; &#34;os&#34;); func main() { fmt.Printf(&#34;Hello %s\n&#34;, os.Getenv(&#34;HELLO&#34;)) }&#39; &amp;gt; main.go&#xA;&#xA;$ dotenvx run -- go run main.go&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/quickstart&#34;&gt;extended go guide&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Rust ü¶Ä&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;fn main() {let hello = std::env::var(&#34;HELLO&#34;).unwrap_or(&#34;&#34;.to_string());println!(&#34;Hello {hello}&#34;);}&#39; &amp;gt; src/main.rs&#xA;&#xA;$ dotenvx run -- cargo run&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/quickstart&#34;&gt;extended rust guide&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Java ‚òïÔ∏è&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;public class Index { public static void main(String[] args) { System.out.println(&#34;Hello &#34; + System.getenv(&#34;HELLO&#34;)); } }&#39; &amp;gt; index.java&#xA;&#xA;$ dotenvx run -- java index.java&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Clojure üåø&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;(println &#34;Hello&#34; (System/getenv &#34;HELLO&#34;))&#39; &amp;gt; index.clj&#xA;&#xA;$ dotenvx run -- clojure -M index.clj&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;.NET üîµ&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotnet new console -n HelloWorld -o HelloWorld&#xA;$ cd HelloWorld&#xA;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#39;Console.WriteLine($&#34;Hello {Environment.GetEnvironmentVariable(&#34;HELLO&#34;)}&#34;);&#39; &amp;gt; Program.cs&#xA;&#xA;$ dotenvx run -- dotnet run&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Bash üñ•Ô∏è&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx run --quiet -- sh -c &#39;echo Hello $HELLO&#39;&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Cron ‚è∞&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# run every day at 8am&#xA;0 8 * * * dotenvx run -- /path/to/myscript.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Frameworks ‚ñ≤&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx run -- next dev&#xA;$ dotenvx run -- npm start&#xA;$ dotenvx run -- bin/rails s&#xA;$ dotenvx run -- php artisan serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs#frameworks&#34;&gt;framework guides&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Docker üê≥&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ docker run -it --rm -v $(pwd):/app dotenv/dotenvx run -- node index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Or in any image:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;FROM node:latest&#xA;RUN echo &#34;HELLO=World&#34; &amp;gt; .env &amp;amp;&amp;amp; echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;RUN curl -fsS https://dotenvx.sh/install.sh | sh&#xA;CMD [&#34;dotenvx&#34;, &#34;run&#34;, &#34;--&#34;, &#34;echo&#34;, &#34;Hello $HELLO&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/platforms/docker&#34;&gt;docker guide&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;CI/CDs üêô&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: build&#xA;on: [push]&#xA;jobs:&#xA;  build:&#xA;    runs-on: ubuntu-latest&#xA;    steps:&#xA;    - uses: actions/checkout@v3&#xA;    - uses: actions/setup-node@v3&#xA;      with:&#xA;        node-version: 16&#xA;    - run: curl -fsS https://dotenvx.sh/install.sh | sh&#xA;    - run: dotenvx run -- node build.js&#xA;      env:&#xA;        DOTENV_KEY: ${{ secrets.DOTENV_KEY }}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs/cis/github-actions&#34;&gt;github actions guide&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Platforms&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# heroku&#xA;heroku buildpacks:add https://github.com/dotenvx/heroku-buildpack-dotenvx&#xA;&#xA;# docker&#xA;RUN curl -fsS https://dotenvx.sh/install.sh | sh&#xA;&#xA;# vercel&#xA;npm install @dotenvx/dotenvx --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs#platforms&#34;&gt;platform guides&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Process Managers&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// pm2&#xA;&#34;scripts&#34;: {&#xA;  &#34;start&#34;: &#34;dotenvx run -- pm2-runtime start ecosystem.config.js --env production&#34;&#xA;},&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;see &lt;a href=&#34;https://dotenvx.com/docs#process-managers&#34;&gt;process manager guides&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;npx&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# alternatively use npx&#xA;$ npx @dotenvx/dotenvx run -- node index.js&#xA;$ npx @dotenvx/dotenvx run -- next dev&#xA;$ npx @dotenvx/dotenvx run -- npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;npm&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm install @dotenvx/dotenvx --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;start&#34;: &#34;./node_modules/.bin/dotenvx run -- node index.js&#34;&#xA;  },&#xA;  &#34;dependencies&#34;: {&#xA;    &#34;@dotenvx/dotenvx&#34;: &#34;^0.5.0&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npm run start&#xA;&#xA;&amp;gt; start&#xA;&amp;gt; ./node_modules/.bin/dotenvx run -- node index.js&#xA;&#xA;[dotenvx][info] loading env (1) from .env&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Git&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# use as a git submodule&#xA;$ git dotenvx run -- node index.js&#xA;$ git dotenvx run -- next dev&#xA;$ git dotenvx run -- npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Variable Expansion&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Reference and expand variables already on your machine for use in your .env file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# .env&#xA;USERNAME=&#34;username&#34;&#xA;DATABASE_URL=&#34;postgres://${USERNAME}@localhost/my_database&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js&#xA;console.log(&#39;DATABASE_URL&#39;, process.env.DATABASE_URL)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx run --debug -- node index.js&#xA;[dotenvx@0.14.1] injecting env (2) from .env&#xA;DATABASE_URL postgres://username@localhost/my_database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;Command Substitution&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Add the output of a command to one of your variables in your .env file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# .env&#xA;DATABASE_URL=&#34;postgres://$(whoami)@localhost/my_database&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js&#xA;console.log(&#39;DATABASE_URL&#39;, process.env.DATABASE_URL)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx run --debug -- node index.js&#xA;[dotenvx@0.14.1] injecting env (1) from .env&#xA;DATABASE_URL postgres://yourusername@localhost/my_database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Multiple Environments&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Create a &lt;code&gt;.env.production&lt;/code&gt; file and use &lt;code&gt;-f&lt;/code&gt; to load it. It&#39;s straightforward, yet flexible.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -f .env.production -- node index.js&#xA;[dotenvx][info] loading env (1) from .env.production&#xA;Hello production&#xA;&amp;gt; ^^&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;multiple `.env` files&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=local&#34; &amp;gt; .env.local&#xA;&#xA;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx run -f .env.local -f .env -- node index.js&#xA;[dotenvx][info] loading env (1) from .env.local,.env&#xA;Hello local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`--overload` flag&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=local&#34; &amp;gt; .env.local&#xA;&#xA;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx run -f .env.local -f .env --overload -- node index.js&#xA;[dotenvx][info] loading env (1) from .env.local,.env&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt;&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`--verbose` flag&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx run -f .env.production --verbose -- node index.js&#xA;[dotenvx][verbose] injecting env from /path/to/.env.production&#xA;[dotenvx][verbose] HELLO set&#xA;[dotenvx][info] loading env (1) from .env.production&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt;&lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`--debug` flag&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx run -f .env.production --debug -- node index.js&#xA;[dotenvx][debug] configuring options&#xA;[dotenvx][debug] {&#34;envFile&#34;:[&#34;.env.production&#34;]}&#xA;[dotenvx][verbose] injecting env from /path/to/.env.production&#xA;[dotenvx][debug] reading env from /path/to/.env.production&#xA;[dotenvx][debug] parsing env from /path/to/.env.production&#xA;[dotenvx][debug] {&#34;HELLO&#34;:&#34;production&#34;}&#xA;[dotenvx][debug] writing env from /path/to/.env.production&#xA;[dotenvx][verbose] HELLO set&#xA;[dotenvx][debug] HELLO set to production&#xA;[dotenvx][info] loading env (1) from .env.production&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`--quiet` flag&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Use &lt;code&gt;--quiet&lt;/code&gt; to suppress all output (except errors).&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx run -f .env.production --quiet -- node index.js&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`--log-level` flag&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set &lt;code&gt;--log-level&lt;/code&gt; to whatever you wish. For example, to supress warnings (risky), set log level to &lt;code&gt;error&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx run -f .env.production --log-level=error -- node index.js&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Available log levels are &lt;code&gt;error, warn, info, verbose, debug, silly&lt;/code&gt;&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`--convention` flag&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Load envs using &lt;a href=&#34;https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#environment-variable-load-order&#34;&gt;Next.js&#39; convention&lt;/a&gt;. Set &lt;code&gt;--convention&lt;/code&gt; to &lt;code&gt;nextjs&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=development local&#34; &amp;gt; .env.development.local&#xA;$ echo &#34;HELLO=local&#34; &amp;gt; .env.local&#xA;$ echo &#34;HELLO=development&#34; &amp;gt; .env.development&#xA;$ echo &#34;HELLO=env&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx run --convention=nextjs -- node index.js&#xA;Hello development local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;(more conventions available upon request)&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Encryption&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Add encryption to your &lt;code&gt;.env&lt;/code&gt; files with a single command. Use &lt;code&gt;dotenvx encrypt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx encrypt&#xA;‚úî encrypted (.env)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/dotenvx/dotenvx/assets/3848/2a8c3dc5-cd8e-4a08-8a59-c24d0535c81a&#34; alt=&#34;encrypted .env&#34;&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A &lt;code&gt;DOTENV_PUBLIC_KEY&lt;/code&gt; (encryption key) and a &lt;code&gt;DOTENV_PRIVATE_KEY&lt;/code&gt; (decryption key) are generated using the same public-key cryptography as &lt;a href=&#34;https://en.bitcoin.it/wiki/Secp256k1&#34;&gt;Bitcoin&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;More examples&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`.env`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ dotenvx encrypt&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -- node index.js&#xA;[dotenvx] injecting env (2) from .env&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`.env.production`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=Production&#34; &amp;gt; .env.production&#xA;$ dotenvx encrypt -f .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ DOTENV_PRIVATE_KEY_PRODUCTION=&#34;&amp;lt;.env.production private key&amp;gt;&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (2) from .env.production&#xA;Hello Production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Note the &lt;code&gt;DOTENV_PRIVATE_KEY_PRODUCTION&lt;/code&gt; ends with &lt;code&gt;_PRODUCTION&lt;/code&gt;. This instructs &lt;code&gt;dotenvx run&lt;/code&gt; to load the &lt;code&gt;.env.production&lt;/code&gt; file.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`.env.ci`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=Ci&#34; &amp;gt; .env.ci&#xA;$ dotenvx encrypt -f .env.ci&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ DOTENV_PRIVATE_KEY_CI=&#34;&amp;lt;.env.ci private key&amp;gt;&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (2) from .env.ci&#xA;Hello Ci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Note the &lt;code&gt;DOTENV_PRIVATE_KEY_CI&lt;/code&gt; ends with &lt;code&gt;_CI&lt;/code&gt;. This instructs &lt;code&gt;dotenvx run&lt;/code&gt; to load the &lt;code&gt;.env.ci&lt;/code&gt; file. See the pattern?&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;combine multiple encrypted .env files&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx set HELLO World -f .env&#xA;$ dotenvx set HELLO Production -f .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ DOTENV_PRIVATE_KEY=&#34;&amp;lt;.env private key&amp;gt;&#34; DOTENV_PRIVATE_KEY_PRODUCTION=&#34;&amp;lt;.env.production private key&amp;gt;&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (3) from .env, .env.production&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Note the &lt;code&gt;DOTENV_PRIVATE_KEY&lt;/code&gt; instructs &lt;code&gt;dotenvx run&lt;/code&gt; to load the &lt;code&gt;.env&lt;/code&gt; file and the &lt;code&gt;DOTENV_PRIVATE_KEY_PRODUCTION&lt;/code&gt; instructs it to load the &lt;code&gt;.env.production&lt;/code&gt; file. See the pattern?&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;combine multiple encrypted .env files for monorepo&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ mkdir app1&#xA;$ mkdir app2&#xA;$ dotenvx set HELLO app1 -f app1/.env.ci&#xA;$ dotenvx set HELLO app2 -f app2/.env.ci&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ DOTENV_PRIVATE_KEY_CI=&#34;&amp;lt;app1/privat ci key&amp;gt;,&amp;lt;app2/private ci key&amp;gt;&#34; dotenvx run -f app1/.env.ci -f app2/.env.ci -- node index.js&#xA;[dotenvx] injecting env (2) from app1/.env.ci,app2/.env.ci&#xA;Hello app1&#xA;&#xA;$ DOTENV_PRIVATE_KEY_CI=&#34;&amp;lt;app1/privat ci key&amp;gt;,&amp;lt;app2/private ci key&amp;gt;&#34; dotenvx run -f app1/.env.ci -f app2/.env.ci --overload -- node index.js&#xA;[dotenvx] injecting env (2) from app1/.env.ci,app2/.env.ci&#xA;Hello app2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Note the &lt;code&gt;DOTENV_PRIVATE_KEY_CI&lt;/code&gt; (and any &lt;code&gt;DOTENV_PRIVATE_KEY*&lt;/code&gt;) can take multiple private keys by simply comma separating them.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;other curves&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;blockquote&gt; &#xA;    &lt;p&gt;&lt;code&gt;secp256k1&lt;/code&gt; is a well-known and battle tested curve, in use with Bitcoin and other cryptocurrencies, but we are open to adding support for more curves.&lt;/p&gt; &#xA;    &lt;p&gt;If your organization&#39;s compliance department requires &lt;a href=&#34;https://csrc.nist.gov/projects/elliptic-curve-cryptography&#34;&gt;NIST approved curves&lt;/a&gt; or other curves like &lt;code&gt;curve25519&lt;/code&gt;, please reach out at &lt;a href=&#34;mailto:security@dotenvx.com&#34;&gt;security@dotenvx.com&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/blockquote&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Advanced&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Become a &lt;code&gt;dotenvx&lt;/code&gt; power user.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run` - Variable Expansion&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Reference and expand variables already on your machine for use in your .env file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# .env&#xA;USERNAME=&#34;username&#34;&#xA;DATABASE_URL=&#34;postgres://${USERNAME}@localhost/my_database&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js&#xA;console.log(&#39;DATABASE_URL&#39;, process.env.DATABASE_URL)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx run --debug -- node index.js&#xA;[dotenvx] injecting env (2) from .env&#xA;DATABASE_URL postgres://username@localhost/my_database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run` - Command Substitution&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Add the output of a command to one of your variables in your .env file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# .env&#xA;DATABASE_URL=&#34;postgres://$(whoami)@localhost/my_database&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// index.js&#xA;console.log(&#39;DATABASE_URL&#39;, process.env.DATABASE_URL)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx run --debug -- node index.js&#xA;[dotenvx] injecting env (1) from .env&#xA;DATABASE_URL postgres://yourusername@localhost/my_database&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run` - Shell Expansion&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Prevent your shell from expanding inline &lt;code&gt;$VARIABLES&lt;/code&gt; before dotenvx has a chance to inject it. Use a subshell.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx run --env=&#34;HELLO=World&#34; -- sh -c &#39;echo Hello $HELLO&#39;&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run` - multiple `-f` flags&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Compose multiple &lt;code&gt;.env&lt;/code&gt; files for environment variables loading, as you need.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=local&#34; &amp;gt; .env.local&#xA;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -f .env.local -f .env -- node index.js&#xA;[dotenvx] injecting env (1) from .env.local, .env&#xA;Hello local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run --env HELLO=String`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set environment variables as a simple &lt;code&gt;KEY=value&lt;/code&gt; string pair.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run --env HELLO=String -f .env -- node index.js&#xA;[dotenvx] injecting env (1) from .env, and --env flag&#xA;Hello String&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run --overload`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Override existing env variables. These can be variables already on your machine or variables loaded as files consecutively. The last variable seen will &#39;win&#39;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=local&#34; &amp;gt; .env.local&#xA;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -f .env.local -f .env --overload -- node index.js&#xA;[dotenvx] injecting env (1) from .env.local, .env&#xA;Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`DOTENV_PRIVATE_KEY=key run`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Decrypt your encrypted &lt;code&gt;.env&lt;/code&gt; by setting &lt;code&gt;DOTENV_PRIVATE_KEY&lt;/code&gt; before &lt;code&gt;dotenvx run&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env&#xA;$ dotenvx set HELLO encrypted&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;# check your .env.keys files for your privateKey&#xA;$ DOTENV_PRIVATE_KEY=&#34;122...0b8&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (2) from .env&#xA;Hello encrypted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`DOTENV_PRIVATE_KEY_PRODUCTION=key run`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Decrypt your encrypted &lt;code&gt;.env.production&lt;/code&gt; by setting &lt;code&gt;DOTENV_PRIVATE_KEY_PRODUCTION&lt;/code&gt; before &lt;code&gt;dotenvx run&lt;/code&gt;. Alternatively, this can be already set on your server or cloud provider.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env.production&#xA;$ dotenvx set HELLO &#34;production encrypted&#34; -f .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;# check .env.keys for your privateKey&#xA;$ DOTENV_PRIVATE_KEY_PRODUCTION=&#34;122...0b8&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (2) from .env.production&#xA;Hello production encrypted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Note the &lt;code&gt;DOTENV_PRIVATE_KEY_PRODUCTION&lt;/code&gt; ends with &lt;code&gt;_PRODUCTION&lt;/code&gt;. This instructs dotenvx run to load the &lt;code&gt;.env.production&lt;/code&gt; file.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`DOTENV_PRIVATE_KEY_CI=key dotenvx run`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Decrypt your encrypted &lt;code&gt;.env.ci&lt;/code&gt; by setting &lt;code&gt;DOTENV_PRIVATE_KEY_CI&lt;/code&gt; before &lt;code&gt;dotenvx run&lt;/code&gt;. Alternatively, this can be already set on your server or cloud provider.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env.ci&#xA;$ dotenvx set HELLO &#34;ci encrypted&#34; -f .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;# check .env.keys for your privateKey&#xA;$ DOTENV_PRIVATE_KEY_CI=&#34;122...0b8&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (2) from .env.ci&#xA;Hello ci encrypted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Note the &lt;code&gt;DOTENV_PRIVATE_KEY_CI&lt;/code&gt; ends with &lt;code&gt;_CI&lt;/code&gt;. This instructs dotenvx run to load the &lt;code&gt;.env.ci&lt;/code&gt; file. See the pattern?&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`DOTENV_PRIVATE_KEY=key DOTENV_PRIVATE_KEY_PRODUCTION=key run` - Combine Multiple&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Decrypt your encrypted &lt;code&gt;.env&lt;/code&gt; and &lt;code&gt;.env.production&lt;/code&gt; files by setting &lt;code&gt;DOTENV_PRIVATE_KEY&lt;/code&gt; and &lt;code&gt;DOTENV_PRIVATE_KEY_PRODUCTION&lt;/code&gt; before &lt;code&gt;dotenvx run&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env&#xA;$ touch .env.production&#xA;$ dotenvx set HELLO encrypted&#xA;$ dotenvx set HELLO &#34;production encrypted&#34; -f .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;# check .env.keys for your privateKeys&#xA;$ DOTENV_PRIVATE_KEY=&#34;122...0b8&#34; DOTENV_PRIVATE_KEY_PRODUCTION=&#34;122...0b8&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (3) from .env, .env.production&#xA;Hello encrypted&#xA;&#xA;$ DOTENV_PRIVATE_KEY_PRODUCTION=&#34;122...0b8&#34; DOTENV_PRIVATE_KEY=&#34;122...0b8&#34; dotenvx run -- node index.js&#xA;[dotenvx] injecting env (3) from .env.production, .env&#xA;Hello production encrypted&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Compose any encrypted files you want this way. As long as a &lt;code&gt;DOTENV_PRIVATE_KEY_${environment}&lt;/code&gt; is set, the values from &lt;code&gt;.env.${environment}&lt;/code&gt; will be decrypted at runtime.&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run --verbose`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set log level to &lt;code&gt;verbose&lt;/code&gt;. (&lt;a href=&#34;https://github.com/winstonjs/winston?tab=readme-ov-file#logging&#34;&gt;log levels&lt;/a&gt;)&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -f .env.production --verbose -- node index.js&#xA;loading env from .env.production (/path/to/.env.production)&#xA;HELLO set&#xA;[dotenvx] injecting env (1) from .env.production&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run --debug`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set log level to &lt;code&gt;debug&lt;/code&gt;. (&lt;a href=&#34;https://github.com/winstonjs/winston?tab=readme-ov-file#logging&#34;&gt;log levels&lt;/a&gt;)&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -f .env.production --debug -- node index.js&#xA;process command [node index.js]&#xA;options: {&#34;env&#34;:[],&#34;envFile&#34;:[&#34;.env.production&#34;]}&#xA;loading env from .env.production (/path/to/.env.production)&#xA;{&#34;HELLO&#34;:&#34;production&#34;}&#xA;HELLO set&#xA;HELLO set to production&#xA;[dotenvx] injecting env (1) from .env.production&#xA;executing process command [node index.js]&#xA;expanding process command to [/opt/homebrew/bin/node index.js]&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run --quiet`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Use &lt;code&gt;--quiet&lt;/code&gt; to suppress all output (except errors). (&lt;a href=&#34;https://github.com/winstonjs/winston?tab=readme-ov-file#logging&#34;&gt;log levels&lt;/a&gt;)&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -f .env.production --quiet -- node index.js&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run --log-level`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set &lt;code&gt;--log-level&lt;/code&gt; to whatever you wish. For example, to supress warnings (risky), set log level to &lt;code&gt;error&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run -f .env.production --log-level=error -- node index.js&#xA;Hello production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;Available log levels are &lt;code&gt;error, warn, info, verbose, debug, silly&lt;/code&gt; (&lt;a href=&#34;https://github.com/winstonjs/winston?tab=readme-ov-file#logging&#34;&gt;source&lt;/a&gt;)&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`run --convention=nextjs`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Load envs using &lt;a href=&#34;https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#environment-variable-load-order&#34;&gt;Next.js&#39; convention&lt;/a&gt;. Set &lt;code&gt;--convention&lt;/code&gt; to &lt;code&gt;nextjs&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=development local&#34; &amp;gt; .env.development.local&#xA;$ echo &#34;HELLO=local&#34; &amp;gt; .env.local&#xA;$ echo &#34;HELLO=development&#34; &amp;gt; .env.development&#xA;$ echo &#34;HELLO=env&#34; &amp;gt; .env&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx run --convention=nextjs -- node index.js&#xA;[dotenvx] injecting env (1) from .env.development.local, .env.local, .env.development, .env&#xA;Hello development local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;(more conventions available upon request)&lt;/p&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get KEY`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Return a single environment variable&#39;s value.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx get HELLO&#xA;World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get KEY -f`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Return a single environment variable&#39;s value from a specific &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx get HELLO -f .env.production&#xA;production&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get KEY --env`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Return a single environment variable&#39;s value from a &lt;code&gt;--env&lt;/code&gt; string.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx get HELLO --env HELLO=String -f .env.production&#xA;String&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get KEY --overload`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Return a single environment variable&#39;s value where each found value is overloaded.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;HELLO=production&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx get HELLO -f .env.production --env HELLO=String -f .env --overload&#xA;World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get KEY --convention=nextjs`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Return a single environment variable&#39;s value using &lt;a href=&#34;https://nextjs.org/docs/pages/building-your-application/configuring/environment-variables#environment-variable-load-order&#34;&gt;Next.js&#39; convention&lt;/a&gt;. Set &lt;code&gt;--convention&lt;/code&gt; to &lt;code&gt;nextjs&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=development local&#34; &amp;gt; .env.development.local&#xA;$ echo &#34;HELLO=local&#34; &amp;gt; .env.local&#xA;$ echo &#34;HELLO=development&#34; &amp;gt; .env.development&#xA;$ echo &#34;HELLO=env&#34; &amp;gt; .env&#xA;$ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;$ dotenvx get HELLO --convention=nextjs&#xA;development local&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get` (json)&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Return a json response of all key/value pairs in a &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx get&#xA;{&#34;HELLO&#34;:&#34;World&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get --all`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Return preset machine envs as well.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx get --all&#xA;{&#34;PWD&#34;:&#34;/some/file/path&#34;,&#34;USER&#34;:&#34;username&#34;,&#34;LIBRARY_PATH&#34;:&#34;/usr/local/lib&#34;, ..., &#34;HELLO&#34;:&#34;World&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`get --all --pretty-print`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Make the output more readable - pretty print it.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx get --all --pretty-print&#xA;{&#xA;  &#34;PWD&#34;: &#34;/some/filepath&#34;,&#xA;  &#34;USER&#34;: &#34;username&#34;,&#xA;  &#34;LIBRARY_PATH&#34;: &#34;/usr/local/lib&#34;,&#xA;  ...,&#xA;  &#34;HELLO&#34;: &#34;World&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`set KEY value`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set an encrypted key/value (on by default).&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env&#xA;&#xA;$ dotenvx set HELLO World&#xA;set HELLO with encryption (.env)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`set KEY value -f`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set an (encrypted) key/value for another &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env.production&#xA;&#xA;$ dotenvx set HELLO production -f .env.production&#xA;set HELLO with encryption (.env.production)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`set KEY &#34;value with spaces&#34;`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set a value containing spaces.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env.ci&#xA;&#xA;$ dotenvx set HELLO &#34;my ci&#34; -f .env.ci&#xA;set HELLO with encryption (.env.ci)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`set KEY value --plain`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Set a plaintext key/value.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env&#xA;&#xA;$ dotenvx set HELLO World --plain&#xA;set HELLO (.env)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`encrypt`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Encrypt the contents of a &lt;code&gt;.env&lt;/code&gt; file to an encrypted &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx encrypt&#xA;‚úî encrypted (.env)&#xA;‚úî key added to .env.keys (DOTENV_PRIVATE_KEY)&#xA;‚Ñπ add .env.keys to .gitignore: [echo &#34;.env.keys&#34; &amp;gt;&amp;gt; .gitignore]&#xA;‚Ñπ run [DOTENV_PRIVATE_KEY=&#39;122...0b8&#39; dotenvx run -- yourcommand] to test decryption locally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`encrypt -f`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Encrypt the contents of a specified &lt;code&gt;.env&lt;/code&gt; file to an encrypted &lt;code&gt;.env&lt;/code&gt; file.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;HELLO=Production&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx encrypt -f .env.production&#xA;‚úî encrypted (.env.production)&#xA;‚úî key added to .env.keys (DOTENV_PRIVATE_KEY_PRODUCTION)&#xA;‚Ñπ add .env.keys to .gitignore: [echo &#34;.env.keys&#34; &amp;gt;&amp;gt; .gitignore]&#xA;‚Ñπ run [DOTENV_PRIVATE_KEY_PRODUCTION=&#39;bff..bc4&#39; dotenvx run -- yourcommand] to test decryption locally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`help`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Output help for &lt;code&gt;dotenvx&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx help&#xA;Usage: @dotenvx/dotenvx [options] [command]&#xA;&#xA;a better dotenv‚Äìfrom the creator of `dotenv`&#xA;&#xA;Options:&#xA;  -l, --log-level &amp;lt;level&amp;gt;           set log level (default: &#34;info&#34;)&#xA;  -q, --quiet                       sets log level to error&#xA;  -v, --verbose                     sets log level to verbose&#xA;  -d, --debug                       sets log level to debug&#xA;  -V, --version                     output the version number&#xA;  -h, --help                        display help for command&#xA;&#xA;Commands:&#xA;  run [options]                     inject env at runtime [dotenvx run -- yourcommand]&#xA;  get [options] [key]               return a single environment variable&#xA;  set [options] &amp;lt;KEY&amp;gt; &amp;lt;value&amp;gt;       set a single environment variable&#xA;  encrypt [options]                 convert .env file(s) to encrypted .env file(s)&#xA;  pro                               üèÜ pro&#xA;  ext                               üîå extensions&#xA;  help [command]                    display help for command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;p&gt;You can get more detailed help per command with &lt;code&gt;dotenvx help COMMAND&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx help run&#xA;Usage: @dotenvx/dotenvx run [options]&#xA;&#xA;inject env at runtime [dotenvx run -- yourcommand]&#xA;&#xA;Options:&#xA;  -e, --env &amp;lt;strings...&amp;gt;            environment variable(s) set as string (example: &#34;HELLO=World&#34;) (default: [])&#xA;  -f, --env-file &amp;lt;paths...&amp;gt;         path(s) to your env file(s) (default: [])&#xA;  -fv, --env-vault-file &amp;lt;paths...&amp;gt;  path(s) to your .env.vault file(s) (default: [])&#xA;  -o, --overload                    override existing env variables&#xA;  --convention &amp;lt;name&amp;gt;               load a .env convention (available conventions: [&#39;nextjs&#39;])&#xA;  -h, --help                        display help for command&#xA;&#xA;Examples:&#xA;&#xA;  $ dotenvx run -- npm run dev&#xA;  $ dotenvx run -- flask --app index run&#xA;  $ dotenvx run -- php artisan serve&#xA;  $ dotenvx run -- bin/rails s&#xA;&#xA;Try it:&#xA;&#xA;  $ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;  $ echo &#34;console.log(&#39;Hello &#39; + process.env.HELLO)&#34; &amp;gt; index.js&#xA;&#xA;  $ dotenvx run -- node index.js&#xA;  [dotenvx] injecting env (1) from .env&#xA;  Hello World&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`--version`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Check current version of &lt;code&gt;dotenvx&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx --version&#xA;X.X.X&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Extensions üîå&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext ls`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Print all &lt;code&gt;.env&lt;/code&gt; files in a tree structure.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env&#xA;$ touch .env.production&#xA;$ mkdir -p apps/backend&#xA;$ touch apps/backend/.env&#xA;&#xA;$ dotenvx ext ls&#xA;‚îú‚îÄ .env.production&#xA;‚îú‚îÄ .env&#xA;‚îî‚îÄ apps&#xA;   ‚îî‚îÄ backend&#xA;      ‚îî‚îÄ .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext ls directory`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Print all &lt;code&gt;.env&lt;/code&gt; files inside a specified path to a directory.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env&#xA;$ touch .env.production&#xA;$ mkdir -p apps/backend&#xA;$ touch apps/backend/.env&#xA;&#xA;$ dotenvx ext ls apps/backend&#xA;‚îî‚îÄ .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext ls -f`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Glob &lt;code&gt;.env&lt;/code&gt; filenames matching a wildcard.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ touch .env&#xA;$ touch .env.production&#xA;$ mkdir -p apps/backend&#xA;$ touch apps/backend/.env&#xA;$ touch apps/backend/.env.prod&#xA;&#xA;$ dotenvx ext ls -f **/.env.prod*&#xA;‚îú‚îÄ .env.production&#xA;‚îî‚îÄ apps&#xA;   ‚îî‚îÄ backend&#xA;      ‚îî‚îÄ .env.prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext genexample`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;In one command, generate a &lt;code&gt;.env.example&lt;/code&gt; file from your current &lt;code&gt;.env&lt;/code&gt; file contents.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;&#xA;$ dotenvx ext genexample&#xA;‚úî updated .env.example (1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# .env.example&#xA;HELLO=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext genexample -f`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Pass multiple &lt;code&gt;.env&lt;/code&gt; files to generate your &lt;code&gt;.env.example&lt;/code&gt; file from the combination of their contents.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ echo &#34;DB_HOST=example.com&#34; &amp;gt; .env.production&#xA;&#xA;$ dotenvx ext genexample -f .env -f .env.production&#xA;‚úî updated .env.example (2)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# .env.example&#xA;HELLO=&#34;&#34;&#xA;DB_HOST=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext genexample directory`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Generate a &lt;code&gt;.env.example&lt;/code&gt; file inside the specified directory. Useful for monorepos.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ echo &#34;HELLO=World&#34; &amp;gt; .env&#xA;$ mkdir -p apps/backend&#xA;$ echo &#34;HELLO=Backend&#34; &amp;gt; apps/backend/.env&#xA;&#xA;$ dotenvx ext genexample apps/backend&#xA;‚úî updated .env.example (1)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;# apps/backend/.env.example&#xA;HELLO=&#34;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext gitignore`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Gitignore your &lt;code&gt;.env&lt;/code&gt; files.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx ext gitignore&#xA;creating .gitignore&#xA;appending .env* to .gitignore&#xA;done&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext precommit`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Prevent &lt;code&gt;.env&lt;/code&gt; files from being committed to code.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx ext precommit&#xA;[dotenvx][precommit] success&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext precommit --install`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Install a shell script to &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt; to prevent accidentally committing any &lt;code&gt;.env&lt;/code&gt; files to source control.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx ext precommit --install&#xA;[dotenvx][precommit] dotenvx precommit installed [.git/hooks/pre-commit]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext prebuild`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Prevent &lt;code&gt;.env&lt;/code&gt; files from being built into your docker containers.&lt;/p&gt; &#xA;   &lt;p&gt;Add it to your &lt;code&gt;Dockerfile&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;RUN curl -fsS https://dotenvx.sh | sh&#xA;&#xA;...&#xA;&#xA;RUN dotenvx ext prebuild&#xA;CMD [&#34;dotenvx&#34;, &#34;run&#34;, &#34;--&#34;, &#34;node&#34;, &#34;index.js&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA; &lt;li&gt; &#xA;  &lt;details&gt;&#xA;   &lt;summary&gt;`ext scan`&lt;/summary&gt;&#xA;   &lt;br&gt; &#xA;   &lt;p&gt;Use &lt;a href=&#34;https://gitleaks.io&#34;&gt;gitleaks&lt;/a&gt; under the hood to scan for possible secrets in your code.&lt;/p&gt; &#xA;   &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ dotenvx ext scan&#xA;&#xA;    ‚óã&#xA;    ‚îÇ‚ï≤&#xA;    ‚îÇ ‚óã&#xA;    ‚óã ‚ñë&#xA;    ‚ñë    gitleaks&#xA;&#xA;100 commits scanned.&#xA;no leaks found&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;/details&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Guides&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Go deeper into using &lt;code&gt;dotenvx&lt;/code&gt; with detailed framework and platform guides.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/digital-ocean&#34;&gt;Digital Ocean &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/digitalocean.svg?sanitize=true&#34; alt=&#34;Digital Ocean Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#0080FF;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/docker&#34;&gt;Docker &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/docker.svg?sanitize=true&#34; alt=&#34;Docker Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#2496ED;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/fly&#34;&gt;Fly.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/cis/github-actions&#34;&gt;GitHub Actions &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/github.svg?sanitize=true&#34; alt=&#34;GitHub Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#181717;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/heroku&#34;&gt;Heroku &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/heroku.svg?sanitize=true&#34; alt=&#34;Heroku Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#430098;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/netlify&#34;&gt;Netlify &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/netlify.svg?sanitize=true&#34; alt=&#34;Netlify Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#00C7B7;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/package-managers/npm&#34;&gt;NPM &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/npm.svg?sanitize=true&#34; alt=&#34;NPM Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#CB3837;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/monorepos/nx&#34;&gt;Nx &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/nx.svg?sanitize=true&#34; alt=&#34;Nx Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#143055;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/render&#34;&gt;Render &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/render.svg?sanitize=true&#34; alt=&#34;Render Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#000000;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/railway&#34;&gt;Railway &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/railway.svg?sanitize=true&#34; alt=&#34;Railway Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#0B0D0E;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/monorepos/turborepo&#34;&gt;Turborepo &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/turborepo.svg?sanitize=true&#34; alt=&#34;Turborepo Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#EF4444;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/platforms/vercel&#34;&gt;Vercel &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/vercel.svg?sanitize=true&#34; alt=&#34;Vercel Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#000000;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/guides&#34;&gt;more&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/guides#node-js&#34;&gt;Node.js &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/nodejs.svg?sanitize=true&#34; alt=&#34;Node.js Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#5FA04E;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/guides#python&#34;&gt;Python &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/python.svg?sanitize=true&#34; alt=&#34;Python Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#3776AB;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/guides#php&#34;&gt;PHP &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/php.svg?sanitize=true&#34; alt=&#34;PHP Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#777BB4;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/guides#ruby&#34;&gt;Ruby &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/ruby.svg?sanitize=true&#34; alt=&#34;Ruby Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#CC342D;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://dotenvx.com/docs/guides#rust&#34;&gt;Rust &lt;img src=&#34;https://cdn.jsdelivr.net/npm/simple-icons@latest/icons/rust.svg?sanitize=true&#34; alt=&#34;Rust Logo&#34; width=&#34;20&#34; height=&#34;20&#34; style=&#34;fill:#000000;&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h4&gt;Why am I getting the error &lt;code&gt;node: .env: not found&lt;/code&gt;?&lt;/h4&gt; &#xA;&lt;p&gt;You are using Node 20 or greater and it adds a differing implementation of &lt;code&gt;--env-file&lt;/code&gt; flag support. Rather than warn on a missing &lt;code&gt;.env&lt;/code&gt; file (like dotenv has historically done), it raises an error: &lt;code&gt;node: .env: not found&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This fix is easy. Replace &lt;code&gt;--env-file&lt;/code&gt; with &lt;code&gt;-f&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# from this:&#xA;./node_modules/.bin/dotenvx run --env-file .env -- yourcommand&#xA;# to this:&#xA;./node_modules/.bin/dotenvx run -f .env -- yourcommand&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dotenvx/dotenvx/issues/131&#34;&gt;more context&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;What happened to the &lt;code&gt;.env.vault&lt;/code&gt; file?&lt;/h4&gt; &#xA;&lt;p&gt;I&#39;ve decided we should sunset it as a technological solution to this.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;.env.vault&lt;/code&gt; file got us far, but it had limitations such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;em&gt;Pull Requests&lt;/em&gt; - it was difficult to tell which key had been changed&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Security&lt;/em&gt; - there was no mechanism to give a teammate the ability to encrypt without also giving them the ability to decrypt. Sometimes you just want to let a contractor encrypt a new value, but you don&#39;t want them to know the rest of the secrets.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Conceptual&lt;/em&gt; - it takes more mental energy to understand the &lt;code&gt;.env.vault&lt;/code&gt; format. Encrypted values inside a &lt;code&gt;.env&lt;/code&gt; file is easier to quickly grasp.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Combining Multiple Files&lt;/em&gt; - there was simply no mechanism to do this well with the &lt;code&gt;.env.vault&lt;/code&gt; file format.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;That said, the &lt;code&gt;.env.vault&lt;/code&gt; tooling will still stick around for at least 1 year under &lt;code&gt;dotenvx vault&lt;/code&gt; parent command. I&#39;m still using it in projects as are many thousands of other people.&lt;/p&gt; &#xA;&lt;h4&gt;How do I migrate my &lt;code&gt;.env.vault&lt;/code&gt; file(s) to encrypted &lt;code&gt;.env&lt;/code&gt; files?&lt;/h4&gt; &#xA;&lt;p&gt;Run &lt;code&gt;$ dotenvx vault migrate&lt;/code&gt; and follow the instructions.&lt;/p&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;You can fork this repo and create &lt;a href=&#34;https://github.com/dotenvx/dotenvx/pulls&#34;&gt;pull requests&lt;/a&gt; or if you have questions or feedback:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dotenvx/dotenvx/issues&#34;&gt;github.com/dotenvx/dotenvx&lt;/a&gt; - bugs and discussions&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://x.com/dotenvx&#34;&gt;@dotenvx ùïè&lt;/a&gt; (DMs are open)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>