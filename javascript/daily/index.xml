<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-06T01:34:07Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>laravel/breeze-next</title>
    <updated>2022-10-06T01:34:07Z</updated>
    <id>tag:github.com,2022-10-06:/laravel/breeze-next</id>
    <link href="https://github.com/laravel/breeze-next" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An application / authentication starter kit frontend in Next.js for Laravel Breeze.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Laravel Breeze - Next.js Edition üèùÔ∏è&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;This repository is an implementing of the &lt;a href=&#34;https://laravel.com/docs/starter-kits&#34;&gt;Laravel Breeze&lt;/a&gt; application / authentication starter kit frontend in &lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;. All of the authentication boilerplate is already written for you - powered by &lt;a href=&#34;https://laravel.com/docs/sanctum&#34;&gt;Laravel Sanctum&lt;/a&gt;, allowing you to quickly begin pairing your beautiful Next.js frontend with a powerful Laravel backend.&lt;/p&gt; &#xA;&lt;h2&gt;Official Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;First, create a Next.js compatible Laravel backend by installing Laravel Breeze into a &lt;a href=&#34;https://laravel.com/docs/installation&#34;&gt;fresh Laravel application&lt;/a&gt; and installing Breeze&#39;s API scaffolding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Create the Laravel application...&#xA;laravel new next-backend&#xA;&#xA;cd next-backend&#xA;&#xA;# Install Breeze and dependencies...&#xA;composer require laravel/breeze --dev&#xA;&#xA;php artisan breeze:install api&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, ensure that your application&#39;s &lt;code&gt;APP_URL&lt;/code&gt; and &lt;code&gt;FRONTEND_URL&lt;/code&gt; environment variables are set to &lt;code&gt;http://localhost:8000&lt;/code&gt; and &lt;code&gt;http://localhost:3000&lt;/code&gt;, respectively.&lt;/p&gt; &#xA;&lt;p&gt;After defining the appropriate environment variables, you may serve the Laravel application using the &lt;code&gt;serve&lt;/code&gt; Artisan command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Serve the application...&#xA;php artisan serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Next, clone this repository and install its dependencies with &lt;code&gt;yarn install&lt;/code&gt; or &lt;code&gt;npm install&lt;/code&gt;. Then, copy the &lt;code&gt;.env.example&lt;/code&gt; file to &lt;code&gt;.env.local&lt;/code&gt; and supply the URL of your backend:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;NEXT_PUBLIC_BACKEND_URL=http://localhost:8000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Finally, run the application via &lt;code&gt;npm run dev&lt;/code&gt;. The application will be available at &lt;code&gt;http://localhost:3000&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: Currently, we recommend using &lt;code&gt;localhost&lt;/code&gt; during local development of your backend and frontend to avoid CORS &#34;Same-Origin&#34; issues.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Authentication Hook&lt;/h3&gt; &#xA;&lt;p&gt;This Next.js application contains a custom &lt;code&gt;useAuth&lt;/code&gt; React hook, designed to abstract all authentication logic away from your pages. In addition, the hook can be used to access the currently authenticated user:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const ExamplePage = () =&amp;gt; {&#xA;    const { logout, user } = useAuth({ middleware: &#39;auth&#39; })&#xA;&#xA;    return (&#xA;        &amp;lt;&amp;gt;&#xA;            &amp;lt;p&amp;gt;{user?.name}&amp;lt;/p&amp;gt;&#xA;&#xA;            &amp;lt;button onClick={logout}&amp;gt;Sign out&amp;lt;/button&amp;gt;&#xA;        &amp;lt;/&amp;gt;&#xA;    )&#xA;}&#xA;&#xA;export default ExamplePage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: You will need to use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining&#34;&gt;optional chaining&lt;/a&gt; (&lt;code&gt;user?.name&lt;/code&gt; instead of &lt;code&gt;user.name&lt;/code&gt;) when accessing properties on the user object to account for Next.js&#39;s initial server-side render.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Named Routes&lt;/h3&gt; &#xA;&lt;p&gt;For convenience, &lt;a href=&#34;https://github.com/tighten/ziggy#spas-or-separate-repos&#34;&gt;Ziggy&lt;/a&gt; may be used to reference your Laravel application&#39;s named route URLs from your React application.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Thank you for considering contributing to Breeze Next! The contribution guide can be found in the &lt;a href=&#34;https://laravel.com/docs/contributions&#34;&gt;Laravel documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;In order to ensure that the Laravel community is welcoming to all, please review and abide by the &lt;a href=&#34;https://laravel.com/docs/contributions#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Security Vulnerabilities&lt;/h2&gt; &#xA;&lt;p&gt;Please review &lt;a href=&#34;https://github.com/laravel/breeze-next/security/policy&#34;&gt;our security policy&lt;/a&gt; on how to report security vulnerabilities.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Laravel Breeze Next is open-sourced software licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/laravel/breeze-next/master/LICENSE.md&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>aFarkas/html5shiv</title>
    <updated>2022-10-06T01:34:07Z</updated>
    <id>tag:github.com,2022-10-06:/aFarkas/html5shiv</id>
    <link href="https://github.com/aFarkas/html5shiv" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This script is the defacto way to enable use of HTML5 sectioning elements in legacy Internet Explorer.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The HTML5 Shiv&lt;/h1&gt; &#xA;&lt;p&gt;The HTML5 Shiv enables use of HTML5 sectioning elements in legacy Internet Explorer and provides basic HTML5 styling for Internet Explorer 6-9, Safari 4.x (and iPhone 3.x), and Firefox 3.x.&lt;/p&gt; &#xA;&lt;h3&gt;What do these files do?&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;code&gt;html5shiv.js&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This includes the basic &lt;code&gt;createElement()&lt;/code&gt; shiv technique, along with monkeypatches for &lt;code&gt;document.createElement&lt;/code&gt; and &lt;code&gt;document.createDocumentFragment&lt;/code&gt; for IE6-8. It also applies &lt;a href=&#34;https://github.com/aFarkas/html5shiv/raw/51da98dabd3c537891b7fe6114633fb10de52473/src/html5shiv.js#L216-220&#34;&gt;basic styling&lt;/a&gt; for HTML5 elements for IE6-9, Safari 4.x and FF 3.x.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;&lt;code&gt;html5shiv-printshiv.js&lt;/code&gt;&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This includes all of the above, as well as a mechanism allowing HTML5 elements to be styled and contain children while being printed in IE 6-8.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Who can I get mad at now?&lt;/h3&gt; &#xA;&lt;p&gt;HTML5 Shiv is maintained by &lt;a href=&#34;https://github.com/aFarkas/&#34;&gt;Alexander Farkas&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/jon_neal&#34;&gt;Jonathan Neal&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/paul_irish&#34;&gt;Paul Irish&lt;/a&gt;, with many contributions from &lt;a href=&#34;https://twitter.com/jdalton&#34;&gt;John-David Dalton&lt;/a&gt;. It is also distributed with &lt;a href=&#34;http://modernizr.com/&#34;&gt;Modernizr&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have any issues in these implementations, you can report them here! :)&lt;/p&gt; &#xA;&lt;p&gt;For the full story of HTML5 Shiv and all of the people involved in making it, read &lt;a href=&#34;http://paulirish.com/2011/the-history-of-the-html5-shiv/&#34;&gt;The Story of the HTML5 Shiv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using &lt;a href=&#34;http://bower.io/&#34;&gt;Bower&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;bower install html5shiv --save&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;This will clone the latest version of the HTML5 shiv into the &lt;code&gt;bower_components&lt;/code&gt; directory at the root of your project and also create or update the file &lt;code&gt;bower.json&lt;/code&gt; which specifies your projects dependencies.&lt;/p&gt; &#xA;&lt;p&gt;Include the HTML5 shiv in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your page in a conditional comment and after any stylesheets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!--[if lt IE 9]&amp;gt;&#xA;&#x9;&amp;lt;script src=&#34;bower_components/html5shiv/dist/html5shiv.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;![endif]--&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manual installation&lt;/h3&gt; &#xA;&lt;p&gt;Download and extract the &lt;a href=&#34;https://github.com/aFarkas/html5shiv/archive/master.zip&#34;&gt;latest zip package&lt;/a&gt; from this repositiory and copy the two files &lt;code&gt;dist/html5shiv.js&lt;/code&gt; and &lt;code&gt;dist/html5shiv-printshiv.js&lt;/code&gt; into your project. Then include one of them into your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; as above.&lt;/p&gt; &#xA;&lt;h2&gt;HTML5 Shiv API&lt;/h2&gt; &#xA;&lt;p&gt;HTML5 Shiv works as a simple drop-in solution. In most cases there is no need to configure HTML5 Shiv or use methods provided by HTML5 Shiv.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;html5.elements&lt;/code&gt; option&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;elements&lt;/code&gt; option is a space separated string or array, which describes the &lt;strong&gt;full&lt;/strong&gt; list of the elements to shiv. see also &lt;code&gt;addElements&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuring &lt;code&gt;elements&lt;/code&gt; before &lt;code&gt;html5shiv.js&lt;/code&gt; is included.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//create a global html5 options object&#xA;window.html5 = {&#xA;  &#39;elements&#39;: &#39;mark section customelement&#39; &#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuring &lt;code&gt;elements&lt;/code&gt; after &lt;code&gt;html5shiv.js&lt;/code&gt; is included.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//change the html5shiv options object &#xA;window.html5.elements = &#39;mark section customelement&#39;;&#xA;//and re-invoke the `shivDocument` method&#xA;html5.shivDocument(document);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;html5.shivCSS&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If &lt;code&gt;shivCSS&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt; HTML5 Shiv will add basic styles (mostly display: block) to sectioning elements (like section, article). In most cases a webpage author should include those basic styles in his normal stylesheet to ensure older browser support (i.e. Firefox 3.6) without JavaScript.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;shivCSS&lt;/code&gt; is true by default and can be set false, only before html5shiv.js is included:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//create a global html5 options object&#xA;window.html5 = {&#xA;&#x9;&#39;shivCSS&#39;: false&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;html5.shivMethods&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If the &lt;code&gt;shivMethods&lt;/code&gt; option is set to &lt;code&gt;true&lt;/code&gt; (by default) HTML5 Shiv will override &lt;code&gt;document.createElement&lt;/code&gt;/&lt;code&gt;document.createDocumentFragment&lt;/code&gt; in Internet Explorer 6-8 to allow dynamic DOM creation of HTML5 elements.&lt;/p&gt; &#xA;&lt;p&gt;Known issue: If an element is created using the overridden &lt;code&gt;createElement&lt;/code&gt; method this element returns a document fragment as its &lt;code&gt;parentNode&lt;/code&gt;, but should be normally &lt;code&gt;null&lt;/code&gt;. If a script relies on this behavior, &lt;code&gt;shivMethods&lt;/code&gt;should be set to &lt;code&gt;false&lt;/code&gt;. Note: jQuery 1.7+ has implemented his own HTML5 DOM creation fix for Internet Explorer 6-8. If all your scripts (including Third party scripts) are using jQuery&#39;s manipulation and DOM creation methods, you might want to set this option to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuring &lt;code&gt;shivMethods&lt;/code&gt; before &lt;code&gt;html5shiv.js&lt;/code&gt; is included.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//create a global html5 options object&#xA;window.html5 = {&#xA;&#x9;&#39;shivMethods&#39;: false&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuring &lt;code&gt;elements&lt;/code&gt; after &lt;code&gt;html5shiv.js&lt;/code&gt; is included.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//change the html5shiv options object &#xA;window.html5.shivMethods = false;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;html5.addElements( newElements [, document] )&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;html5.addElements&lt;/code&gt; method extends the list of elements to shiv. The newElements argument can be a whitespace separated list or an array.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//extend list of elements to shiv&#xA;html5.addElements(&#39;element content&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;html5.createElement( nodeName [, document] )&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;html5.createElement&lt;/code&gt; method creates a shived element, even if &lt;code&gt;shivMethods&lt;/code&gt; is set to false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var container = html5.createElement(&#39;div&#39;);&#xA;//container is shived so we can add HTML5 elements using `innerHTML`&#xA;container.innerHTML = &#39;&amp;lt;section&amp;gt;This is a section&amp;lt;/section&amp;gt;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;html5.createDocumentFragment( [document] )&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;html5.createDocumentFragment&lt;/code&gt; method creates a shived document fragment, even if &lt;code&gt;shivMethods&lt;/code&gt; is set to false.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var fragment = html5.createDocumentFragment();&#xA;var container = document.createElement(&#39;div&#39;);&#xA;fragment.appendChild(container);&#xA;//fragment is shived so we can add HTML5 elements using `innerHTML`&#xA;container.innerHTML = &#39;&amp;lt;section&amp;gt;This is a section&amp;lt;/section&amp;gt;&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;HTML5 Shiv Known Issues and Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;shivMethods&lt;/code&gt; option (overriding &lt;code&gt;document.createElement&lt;/code&gt;) and the &lt;code&gt;html5.createElement&lt;/code&gt; method create elements, which are not disconnected and have a parentNode (see also issue #64)&lt;/li&gt; &#xA; &lt;li&gt;The cloneNode problem is currently not addressed by HTML5 Shiv. HTML5 elements can be dynamically created, but can&#39;t be cloned in all cases.&lt;/li&gt; &#xA; &lt;li&gt;The printshiv version of HTML5 Shiv has to alter the print styles and the whole DOM for printing. In case of complex websites and or a lot of print styles this might cause performance and/or styling issues. A possible solution could be the &lt;a href=&#34;https://github.com/aFarkas/html5shiv/tree/iepp-htc&#34;&gt;htc-branch&lt;/a&gt; of HTML5 Shiv, which uses another technique to implement print styles for Internet Explorer 6-8.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What about the other HTML5 element projects?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The original conception and community collaboration story of the project is described at &lt;a href=&#34;http://paulirish.com/2011/the-history-of-the-html5-shiv/&#34;&gt;The History of the HTML5 Shiv&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://code.google.com/p/ie-print-protector&#34;&gt;IEPP&lt;/a&gt;, by Jon Neal, addressed the printing fault of the original &lt;code&gt;html5shiv&lt;/code&gt;. It was merged into &lt;code&gt;html5shiv&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Shimprove&lt;/strong&gt;, in April 2010, patched &lt;code&gt;cloneNode&lt;/code&gt; and &lt;code&gt;createElement&lt;/code&gt; was later merged into &lt;code&gt;html5shiv&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;innerShiv&lt;/strong&gt;, introduced in August 2010 by JD Barlett, addressed dynamically adding new HTML5 elements into the DOM. &lt;a href=&#34;http://blog.jquery.com/2011/11/03/jquery-1-7-released/&#34;&gt;jQuery added support&lt;/a&gt; that made innerShiv redundant and &lt;code&gt;html5shiv&lt;/code&gt; addressed the same issues as well, so the project was completed.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;html5shim&lt;/strong&gt; and &lt;strong&gt;html5shiv&lt;/strong&gt; sites on Google Code are maintained by Remy Sharp and are identical distribution points of this &lt;code&gt;html5shiv&lt;/code&gt; project.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modernizr&lt;/strong&gt; is developed by the same people as &lt;code&gt;html5shiv&lt;/code&gt; and can include the latest version in any custom builds created at modernizr.com&lt;/li&gt; &#xA; &lt;li&gt;This &lt;code&gt;html5shiv&lt;/code&gt; repo now contains tests for all the edge cases pursued by the above libraries and has been extensively tested, both in development and production.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A &lt;a href=&#34;https://github.com/aFarkas/html5shiv/wiki&#34;&gt;detailed changelog of html5shiv&lt;/a&gt; is available.&lt;/p&gt; &#xA;&lt;h3&gt;Why is it called a &lt;em&gt;shiv&lt;/em&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;The term &lt;strong&gt;shiv&lt;/strong&gt; &lt;a href=&#34;http://ejohn.org/blog/html5-shiv/&#34;&gt;originates&lt;/a&gt; from &lt;a href=&#34;https://github.com/jeresig&#34;&gt;John Resig&lt;/a&gt;, who was thought to have used the word for its slang meaning, &lt;em&gt;a sharp object used as a knife-like weapon&lt;/em&gt;, intended for Internet Explorer. Truth be known, John probably intended to use the word &lt;a href=&#34;http://en.wikipedia.org/wiki/Shim_(computing)&#34;&gt;shim&lt;/a&gt;, which in computing means &lt;em&gt;an application compatibility workaround&lt;/em&gt;. Rather than correct his mispelling, most developers familiar with Internet Explorer appreciated the visual imagery. And that, kids, is &lt;a href=&#34;https://en.wikipedia.org/wiki/Etymology&#34;&gt;etymology&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Cryptogenic/PS5-4.03-Kernel-Exploit</title>
    <updated>2022-10-06T01:34:07Z</updated>
    <id>tag:github.com,2022-10-06:/Cryptogenic/PS5-4.03-Kernel-Exploit</id>
    <link href="https://github.com/Cryptogenic/PS5-4.03-Kernel-Exploit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An experimental webkit-based kernel exploit (Arb. R/W) for the PS5 on 4.03FW/4.50FW&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PS5 4.03 + 4.50 Kernel Exploit&lt;/h1&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Summary&lt;/h2&gt; &#xA;&lt;p&gt;This repo contains an experimental WebKit ROP implementation of a PS5 kernel exploit based on &lt;strong&gt;TheFlow&#39;s IPV6 Use-After-Free (UAF)&lt;/strong&gt;, which was &lt;a href=&#34;https://hackerone.com/reports/1441103&#34;&gt;reported on HackerOne&lt;/a&gt;. The exploit strategy is for the most part based on TheFlow&#39;s BSD/PS4 PoC with some changes to accommodate the annoying PS5 memory layout (for more see &lt;em&gt;Research Notes&lt;/em&gt; section). It establishes an arbitrary read / (semi-arbitrary) write primitive. This exploit and its capabilities have a lot of limitations, and as such, it&#39;s mostly intended for developers to play with to reverse engineer some parts of the system.&lt;/p&gt; &#xA;&lt;p&gt;Also note; stability is fairly low, especially compared to PS4 exploits. This is due to the bug&#39;s nature of being tied to a race condition as well as the mitigations and memory layout of the PS5. This document will contain research info about the PS5, and this exploit will undergo continued development and improvements as time goes on.&lt;/p&gt; &#xA;&lt;p&gt;This should now work on 4.03 as well as 4.50 firmware.&lt;/p&gt; &#xA;&lt;p&gt;Those interested in contributing to PS5 research/dev can join a discord I have setup &lt;a href=&#34;https://discord.gg/kbrzGuH3F6&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Currently Included&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Obtains arbitrary read/write and can run a basic RPC server for reads/writes (or a dump server for large reads) (must edit your own address/port into the exploit file on lines 673-677)&lt;/li&gt; &#xA; &lt;li&gt;Enables debug settings menu (note: you will have to fully exit settings and go back in to see it).&lt;/li&gt; &#xA; &lt;li&gt;Gets root privileges&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This exploit achieves read/write, &lt;strong&gt;but not code execution&lt;/strong&gt;. This is because we cannot currently dump kernel code for gadgets, as kernel .text pages are marked as eXecute Only Memory (XOM). Attempting to read kernel .text pointers will panic!&lt;/li&gt; &#xA; &lt;li&gt;As per the above + the hypervisor (HV) enforcing kernel write protection, this exploit also &lt;strong&gt;cannot install any patches or hooks into kernel space&lt;/strong&gt;, which means no homebrew-related code for the time being.&lt;/li&gt; &#xA; &lt;li&gt;Clang-based fine-grained Control Flow Integrity (CFI) is present and enforced.&lt;/li&gt; &#xA; &lt;li&gt;Supervisor Mode Access Prevention/Execution (SMAP/SMEP) cannot be disabled, due to the HV.&lt;/li&gt; &#xA; &lt;li&gt;The write primitive is somewhat constrained, as bytes 0x10-0x14 must be zero (or a valid network interface).&lt;/li&gt; &#xA; &lt;li&gt;The exploit&#39;s stability is currently poor. More on this below.&lt;/li&gt; &#xA; &lt;li&gt;On successful run, &lt;strong&gt;exit the browser with circle button, PS button panics for a currently unknown reason&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Configure fakedns via &lt;code&gt;dns.conf&lt;/code&gt; to point &lt;code&gt;manuals.playstation.net&lt;/code&gt; to your PCs IP address&lt;/li&gt; &#xA; &lt;li&gt;Run fake dns: &lt;code&gt;python fakedns.py -c dns.conf&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run HTTPS server: &lt;code&gt;python host.py&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go into PS5 advanced network settings and set primary DNS to your PCs IP address and leave secondary at &lt;code&gt;0.0.0.0&lt;/code&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Sometimes the manual still won&#39;t load and a restart is needed, unsure why it&#39;s really weird&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Go to user manual in settings and accept untrusted certificate prompt, run&lt;/li&gt; &#xA; &lt;li&gt;Optional: Run rpc/dump server scripts (note: address/port must be substituted in binary form into exploit.js).&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Future work&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Fix-up sockets to exit browser cleanly (top prio)&lt;/del&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Write some data patches (second prio) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Enable debug settings&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;del&gt;Patch creds for uid0&lt;/del&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Jailbreak w/ cr_prison overwrite&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve UAF reliability&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve victim socket reliability (third prio)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Use a better / more consistent leak target than kqueue&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Using RPC and Dumping Kernel .data&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;RPC&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;RPC is a very simple and limited setup.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit your IP+port (if changed) into exploit.js.&lt;/li&gt; &#xA; &lt;li&gt;Run the server via &lt;code&gt;python rpcserver.py&lt;/code&gt;, allow the PS5 to connect when the exploit finishes. The PS5 will send the kernel .data base address in ASCII and you can then send read and write commands. Example is below.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;[RPC] Connection from: (&#39;10.0.0.169&#39;, 59335)&#xA;[RPC] Received kernel .data base: 0x0xffffffff88530000&#xA;&amp;gt; r 0xffff81ce0334f000&#xA;42 06 00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 00 00 00&#xA;&amp;gt; w 0xffff81ce0334f004 0x1337&#xA;Wrote qword.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This setup is somewhat jank and a better system will be in place soon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Dump&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit your IP+port (if changed) into exploit.js.&lt;/li&gt; &#xA; &lt;li&gt;Comment the RPC code in exploit.js and uncomment dumper code.&lt;/li&gt; &#xA; &lt;li&gt;Run the server via &lt;code&gt;python dumpserver.py&lt;/code&gt;, allow the PS5 to connect and start dumping when exploit finishes. It will continue to dump data from the kernel base until it panics due to hitting unmapped memory. Note: read is somewhat slow at ~200kbps, so it may take 10 minutes or so to complete.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Exploit Stages&lt;/h2&gt; &#xA;&lt;p&gt;This exploit works in 5 stages, and for the most part follows the same exploit strategy as theflow&#39;s poc.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Trigger the initial UAF on &lt;code&gt;ip6_pktopts&lt;/code&gt; and get two sockets to point to the same &lt;code&gt;pktopts&lt;/code&gt; / overlap (master socket &amp;lt;-&amp;gt; overlap spray socket)&lt;/li&gt; &#xA; &lt;li&gt;Free the &lt;code&gt;pktopts&lt;/code&gt; on the master socket and fake it with an &lt;code&gt;ip6_rthdr&lt;/code&gt; spray containing a tagged &lt;code&gt;tclass&lt;/code&gt; overlap.&lt;/li&gt; &#xA; &lt;li&gt;Infoleak step. Use &lt;code&gt;pktopts&lt;/code&gt;/&lt;code&gt;rthdr&lt;/code&gt; overlap to leak a kqueue from the 0x200 slab and &lt;code&gt;pktopts&lt;/code&gt; from the 0x100 slab.&lt;/li&gt; &#xA; &lt;li&gt;Arbitrary read/write step. Fake &lt;code&gt;pktopts&lt;/code&gt; again and find the overlap socket to use &lt;code&gt;IPV6_RTHDR&lt;/code&gt; as a read/write primitive.&lt;/li&gt; &#xA; &lt;li&gt;Cleanup + patch step. Increase refcount on corrupted sockets for successful browser exit + patch data to enable debug menu and patch ucreds for uid0.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Stability Notes&lt;/h2&gt; &#xA;&lt;p&gt;Stability for this exploit is at about 30%, and has multiple potential points of failure. In order of observed descending liklihood:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;em&gt;Stage 1&lt;/em&gt; causes more than one UAF due to failing to catch one or more in the reclaim, causing latent corruption that causes a panic some time later on.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Stage 4&lt;/em&gt; finds the overlap/victim socket, but the pktopts is the same as the master socket&#39;s, causing the &#34;read&#34; primitive to just read back the pointer you attempt to read instead of that pointer&#39;s contents. This needs some improvement and to be fixed if possible because it&#39;s really annoying.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Stage 1&lt;/em&gt;&#39;s attempt to reclaim the UAF fails and something else steals the pointer, causing immediate panic.&lt;/li&gt; &#xA; &lt;li&gt;The kqueue leak fails and it fails to find a recognized kernel .data pointer.&lt;/li&gt; &#xA; &lt;li&gt;Leaving the browser through &#34;unusual&#34; means such as PS button, share button, or browser crash, will panic the kernel. Needs to be investigated.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Research Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It appears based on various testing and dumping with the read primitive, that the PS5 has reverted back to 0x1000 page size compared to the PS4&#39;s 0x4000.&lt;/li&gt; &#xA; &lt;li&gt;It also seems on PS5 that adjacent pages rarely belong to the same slab, as you&#39;ll get vastly different data in adjacent pages. Memory layout seems more scattered.&lt;/li&gt; &#xA; &lt;li&gt;Often when the PS5 panics (at least in webkit context), there will be awful audio output as the audio buffer gets corrupted in some way.&lt;/li&gt; &#xA; &lt;li&gt;Sometimes this audio corruption persists to the next boot, unsure why.&lt;/li&gt; &#xA; &lt;li&gt;Similar to PS4, the PS5 will require the power button to be manually pressed on the console twice to restart after a panic.&lt;/li&gt; &#xA; &lt;li&gt;It is normal for the PS5 to take an absurd amount of time to reboot from a panic if it&#39;s isolated from the internet (unfortunately). Expect boot to take 3-4 minutes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributors / Special Thanks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/theflow0&#34;&gt;Andy Nguyen / theflow0&lt;/a&gt; - Vulnerability and exploit strategy&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ChendoChap&#34;&gt;ChendoChap&lt;/a&gt; - Various help with testing and research&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/Znullptr&#34;&gt;Znullptr&lt;/a&gt; - Research/RE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/sleirsgoevy&#34;&gt;sleirsgoevy&lt;/a&gt; - Research/RE + exploit strat ideas&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/psxdev&#34;&gt;bigboss&lt;/a&gt; - Research/RE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/flat_z&#34;&gt;flatz&lt;/a&gt; - Research/RE + help w/ patches&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/notzecoxao&#34;&gt;zecoxao&lt;/a&gt; - Research/RE&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/SocraticBliss&#34;&gt;SocracticBliss&lt;/a&gt; - Research/RE&lt;/li&gt; &#xA; &lt;li&gt;laureeeeeee - Background low-level systems knowledge and assistance&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Thanks to testers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Dizz (4.50)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>