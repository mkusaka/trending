<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-12-16T01:31:17Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sfter/evm-inscription-mint</title>
    <updated>2023-12-16T01:31:17Z</updated>
    <id>tag:github.com,2023-12-16:/sfter/evm-inscription-mint</id>
    <link href="https://github.com/sfter/evm-inscription-mint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;兼容 evm 的铭文 Mint 工具&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;兼容EVM链的铭文自动化Mint脚本&lt;/h1&gt; &#xA;&lt;h2&gt;🛠 使用说明&lt;/h2&gt; &#xA;&lt;h3&gt;Step 1: 首先安装 nodejs&lt;/h3&gt; &#xA;&lt;p&gt;先去 Nodejs 官网下载安装自己电脑操作系统对应的版本&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://nodejs.org/en&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;然后看一下安装的版本，是否安装成功&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node -v&#xA;npm -v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果你更喜欢使用 yarn 则安装 yarn&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i -g yarn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 2: 下载脚本源代码&lt;/h3&gt; &#xA;&lt;p&gt;先用 git clone 源代码到本地&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/sfter/evm-inscription-mint.git&#xA;&#xA;cd evm-inscription-mint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;如果是 Windows 电脑没有安装 git，先去下面网站下载安装 git 软件&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;https://gitforwindows.org&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 3: 重命名当前目录下的 config.js.example 为 config.js 文件&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp config.js.example config.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 4: 修改当前目录下的 config.js 配置文件&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const config = {&#xA;    // 你想要打多少张，这里就设置多少，建议单次别超过 50，不然容易不上链&#xA;    repeatCount: 1,&#xA;&#xA;    // 在当前的 gas 基础上增加多少倍&#xA;    increaseGas: 1.2,&#xA;&#xA;    // 你钱包的私钥&#xA;    privateKey: &#34;&#34;,&#xA;&#xA;    // 铭文json数据（替换成你想打的铭文json格式数据）&#xA;    tokenJson: &#39;data:,{&#34;p&#34;:&#34;fair-20&#34;,&#34;op&#34;:&#34;mint&#34;,&#34;tick&#34;:&#34;fair&#34;,&#34;amt&#34;:&#34;1000&#34;}&#39;,&#xA;&#xA;    // RPC结点（兼容 evm 链都行）打哪条链就用哪条链的节点地址&#xA;    // eth =&amp;gt;  https://mainnet.infura.io/v3&#xA;    // arb =&amp;gt; https://arb1.arbitrum.io/rpc&#xA;    // polygon =&amp;gt; https://polygon-rpc.com&#xA;    // op =&amp;gt; https://mainnet.optimism.io&#xA;    // linea =&amp;gt; https://mainnet.infura.io/v3&#xA;    // scroll =&amp;gt; https://rpc.scroll.io&#xA;    // zks =&amp;gt; https://mainnet.era.zksync.io&#xA;    rpcUrl: &#34;https://arb1.arbitrum.io/rpc&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 5: 安装依赖包&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Step 6: 运行 Mint 脚本程序&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;node index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>BruceMacD/chatd</title>
    <updated>2023-12-16T01:31:17Z</updated>
    <id>tag:github.com,2023-12-16:/BruceMacD/chatd</id>
    <link href="https://github.com/BruceMacD/chatd" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Chat with your documents using local AI&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/BruceMacD/chatd/main/screenshots/logo.png&#34; width=&#34;300&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/BruceMacD/chatd/assets/5853428/a7d8b77c-beae-41a4-bfd6-0fd5cf932b43&#34;&gt;See a video demo.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Chat with your documents using local AI. All your data stays on your computer and is never sent to the cloud. Chatd is a completely private and secure way to interact with your documents.&lt;/p&gt; &#xA;&lt;p&gt;Chatd is a desktop application that lets you use a local large language model (&lt;code&gt;Mistral-7B&lt;/code&gt;) to chat with your documents. What makes chatd different from other &#34;chat with local documents&#34; apps is that it comes with the local LLM runner packaged in. This means that you don&#39;t need to install anything else to use chatd, just run the executable.&lt;/p&gt; &#xA;&lt;p&gt;Chatd uses Ollama to run the LLM. Ollama is an LLM server that provides a cross-platform LLM runner API. If you already have an Ollama instance running locally, chatd will automatically use it. Otherwise, chatd will start an Ollama server for you and manage its lifecycle.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/BruceMacD/chatd/main/screenshots/chat_screen.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/BruceMacD/chatd/main/screenshots/welcome_screen.png&#34; width=&#34;30%&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/BruceMacD/chatd/main/screenshots/home_screen.png&#34; width=&#34;30%&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest release from &lt;a href=&#34;https://chatd.ai&#34;&gt;chatd.ai&lt;/a&gt; or the &lt;a href=&#34;https://github.com/BruceMacD/chatd/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Unzip the downloaded file.&lt;/li&gt; &#xA; &lt;li&gt;Run the &lt;code&gt;chatd&lt;/code&gt; executable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Advanced Setup&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BruceMacD/chatd/main/docs/enable_gpu_support.md&#34;&gt;Enable GPU support.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BruceMacD/chatd/main/docs/select_a_custom_model.md&#34;&gt;Select a custom model.&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Links&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://chatd.ai&#34;&gt;chatd.ai&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ollama.ai&#34;&gt;ollama.ai&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;Run the following commands in the root directory.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Packaging and Distribution&lt;/h2&gt; &#xA;&lt;h3&gt;MacOS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the latest &lt;code&gt;ollama-darwin&lt;/code&gt; release for MacOS from &lt;a href=&#34;https://github.com/jmorganca/ollama/releases&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Make the downloaded binary executable: &lt;code&gt;chmod +x path/to/ollama-darwin&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;ollama-darwin&lt;/code&gt; executable to the &lt;code&gt;chatd/src/service/ollama/runners&lt;/code&gt; directory.&lt;/li&gt; &#xA; &lt;li&gt;Optional: The Electron app needs be signed to be able to run on MacOS systems other than the one it was compiled on, so you need a developer certificate. To sign the app, set the following environment variables:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;APPLE_ID=your_apple_id@example.com&#xA;APPLE_IDENTITY=&#34;Developer ID Application: Your Name (ABCDEF1234)&#34;&#xA;APPLE_ID_PASSWORD=your_apple_id_app_specific_password&#xA;APPLE_TEAM_ID=ABCDEF1234&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can find your Apple ID, Apple Team ID, and Apple ID Application in your Apple Developer account. You can create an app-specific password &lt;a href=&#34;https://appleid.apple.com/account/manage&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run package&lt;/code&gt; to package the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Windows&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build Ollama from source for Windows, this will support CPU only. See &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;ollama.exe&lt;/code&gt; executable to &lt;code&gt;chatd/src/service/ollama/runners/ollama.exe&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run package&lt;/code&gt; to package the app.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note: The Windows app is not signed, so you will get a warning when you run it.&lt;/p&gt; &#xA;&lt;h3&gt;Linux&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Build Ollama from source for Linux x64 to support CPU only, this allows for a smaller executable package. See &lt;a href=&#34;https://github.com/jmorganca/ollama&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;ollama&lt;/code&gt; executable to &lt;code&gt;chatd/src/service/ollama/runners/ollama-linux&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run package&lt;/code&gt; to package the app.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>