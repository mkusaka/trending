<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-24T01:36:02Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Zer0-bit/gaggiuino</title>
    <updated>2022-11-24T01:36:02Z</updated>
    <id>tag:github.com,2022-11-24:/Zer0-bit/gaggiuino</id>
    <link href="https://github.com/Zer0-bit/gaggiuino" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Gaggia Classic control project using microcontrollers.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://gaggiuino.github.io/#/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Zer0-bit/gaggiuino/release/stm32-blackpill/images/GAGGIUINO_LOGO_transp.png&#34; alt=&#34;Gaggiuino&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/Zer0-bit/gaggiuino/actions/workflows/compile-sketch.yml&#34;&gt;&lt;img src=&#34;https://github.com/Zer0-bit/gaggiuino/actions/workflows/compile-sketch.yml/badge.svg?sanitize=true&#34; alt=&#34;Compile Sketch&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/eJTDJA3xfh&#34; title=&#34;Join Discord Help Chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/890339612441063494&#34; alt=&#34;Discord Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Intro&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Gaggiuino started as an idea to improve an already capable coffee machine while keeping the machine appearance and button functionality as close as possible to the original. An important part is that no internal cables/connectors were modified; all the connections were made by creating splitters using the purchased spade connectors.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;For install instructions head to the project &lt;a href=&#34;https://gaggiuino.github.io/#/&#34;&gt;documentation&lt;/a&gt; section.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;For project related help join us on &lt;a href=&#34;https://discord.gg/eJTDJA3xfh&#34;&gt;discord&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tweetback/tweetback</title>
    <updated>2022-11-24T01:36:02Z</updated>
    <id>tag:github.com,2022-11-24:/tweetback/tweetback</id>
    <link href="https://github.com/tweetback/tweetback" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Take ownership of your Twitter data and get your tweets back&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;tweetback&lt;/code&gt; Twitter Archive&lt;/h1&gt; &#xA;&lt;p&gt;Take ownership of your Twitter data. First talked about at &lt;a href=&#34;https://www.zachleat.com/web/own-your-content/&#34;&gt;Jamstack Conf 2019&lt;/a&gt; and in &lt;a href=&#34;https://www.zachleat.com/web/own-my-tweets/&#34;&gt;this blog post&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.zachleat.com/twitter/&#34;&gt;https://www.zachleat.com/twitter/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.11ty.dev/&#34;&gt;https://twitter.11ty.dev/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Built with &lt;a href=&#34;https://www.11ty.dev/&#34;&gt;Eleventy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Each tweet has its own independent URL (with backwards/forwards threading!)&lt;/li&gt; &#xA; &lt;li&gt;Uses &lt;a href=&#34;https://github.com/tweetback/tweetback-canonical&#34;&gt;&lt;code&gt;@tweetback/canonical&lt;/code&gt;&lt;/a&gt; to resolve other Twitter archives URLs (internal links stay in the archive and donâ€™t link out to Twitter).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;t.co&lt;/code&gt; links are bypassed and original hyperlinks URLs are used.&lt;/li&gt; &#xA; &lt;li&gt;Links to users, tweets, non-truncated URLs.&lt;/li&gt; &#xA; &lt;li&gt;Nicer link formatting for links-to-tweets: @username/:id.&lt;/li&gt; &#xA; &lt;li&gt;Support some markdown: I sometimes use &lt;code&gt;backtick&lt;/code&gt; markdown notation for code in my tweet text. This translates to &lt;code&gt;&amp;lt;code&amp;gt;&lt;/code&gt; properly.&lt;/li&gt; &#xA; &lt;li&gt;Analytics: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See your most popular tweets&lt;/li&gt; &#xA;   &lt;li&gt;Who you retweet the most&lt;/li&gt; &#xA;   &lt;li&gt;Who you reply to the most&lt;/li&gt; &#xA;   &lt;li&gt;Frequently used swear words&lt;/li&gt; &#xA;   &lt;li&gt;Top emoji&lt;/li&gt; &#xA;   &lt;li&gt;Top hashtags&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Populate the database from your Twitter Archive zip&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Copy &lt;code&gt;./data/tweets.js&lt;/code&gt; from your Twitter Archive &lt;code&gt;zip&lt;/code&gt; file into the &lt;code&gt;./database&lt;/code&gt; directory of this project. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rename &lt;code&gt;window.YTD.tweet.part0&lt;/code&gt; in &lt;code&gt;tweets.js&lt;/code&gt; to &lt;code&gt;module.exports&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;If you want to exclude Twitter Circles tweets (these are included in the archive, why ðŸ˜­): copy &lt;code&gt;./data/twitter-circle-tweet.js&lt;/code&gt; from your Twitter Archive &lt;code&gt;zip&lt;/code&gt; file into the &lt;code&gt;./database&lt;/code&gt; directory of this project. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Rename &lt;code&gt;window.YTD.tweet.part0&lt;/code&gt; in &lt;code&gt;twitter-circle-tweet.js&lt;/code&gt; to &lt;code&gt;module.exports&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run import&lt;/code&gt; or &lt;code&gt;npm run import-without-circles&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Build the web site&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;_data/metadata.js&lt;/code&gt; file to add metadata information.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run build&lt;/code&gt; or &lt;code&gt;npm start&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Note that the first build may take quite a long time (depending on the size of your archive), as remote media is fetched/downloaded into your project locally. Repeat builds will be much faster.&lt;/p&gt; &#xA;&lt;h3&gt;Fetch additional tweets from the API (optional)&lt;/h3&gt; &#xA;&lt;p&gt;If you want to fetch additional tweets from the API and put them into your sqlite database:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;You will need a twitter developer token an a &lt;code&gt;TWITTER_BEARER_TOKEN&lt;/code&gt; environment variable (from the Twitter API v2).&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run fetch-new-data&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Add your production URL to &lt;code&gt;@tweetback/canonical&lt;/code&gt; (optional)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tweetback/tweetback-canonical&#34;&gt;https://github.com/tweetback/tweetback-canonical&lt;/a&gt; has a &lt;code&gt;mapping.js&lt;/code&gt; file that stores the existing twitter username =&amp;gt; canonical URL mappings. These will be transformed automatically to point to other archives in all &lt;code&gt;tweetback&lt;/code&gt; instances.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dapr/quickstarts</title>
    <updated>2022-11-24T01:36:02Z</updated>
    <id>tag:github.com,2022-11-24:/dapr/quickstarts</id>
    <link href="https://github.com/dapr/quickstarts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dapr quickstart code samples and tutorials showcasing core Dapr capabilities&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dapr Quickstarts and Tutorials&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dapr/quickstarts/actions?workflow=samples&#34;&gt;&lt;img src=&#34;https://github.com/dapr/quickstarts/workflows/samples/badge.svg?event=push&amp;amp;branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.com/channels/778680217417809931/778680217417809934&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/778680217417809931&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache-yellow.svg?sanitize=true&#34; alt=&#34;License: Apache 2.0&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you are new to Dapr and haven&#39;t done so already, it is recommended you go through the Dapr &lt;a href=&#34;https://docs.dapr.io/getting-started/install-dapr-cli/&#34;&gt;Getting Started&lt;/a&gt; instructions.&lt;/p&gt; &#xA;&lt;h3&gt;Quickstarts&lt;/h3&gt; &#xA;&lt;p&gt;Pick a building block API (for example, pub-sub, state management) and rapidly try it out in your favorite language SDK (recommended), or via HTTP. Visit the &lt;a href=&#34;https://docs.dapr.io/getting-started/quickstarts/&#34;&gt;Dapr Docs Quickstarts Guide&lt;/a&gt; for a comprehensive walkthrough of each example.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Dapr Quickstart&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/pub_sub&#34;&gt;Publish and Subscribe&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Asynchronous communication between two services using messaging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/service_invocation&#34;&gt;Service Invocation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Asynchronous communication between two services using HTTP&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/state_management/&#34;&gt;State Management&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Store a service&#39;s data as key/value pairs in supported state stores&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/bindings/&#34;&gt;Bindings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Work with external systems using input bindings to respond to events and output bindings to call operations&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/secrets_management/&#34;&gt;Secrets Management&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Securely fetch secrets&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Actors&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Coming soon...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Observability&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Coming soon...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Configuration&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Coming soon...&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Tutorials&lt;/h3&gt; &#xA;&lt;p&gt;Go deeper into a topic or scenario, oftentimes using building block APIs together to solve problems (for example, build a distributed calculator, build and deploy an app to Kubernetes).&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Tutorials&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/hello-world&#34;&gt;Hello-world&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to run Dapr locally. Highlights service invocation and state management.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/hello-kubernetes&#34;&gt;Hello-kubernetes&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to run Dapr in Kubernetes. Highlights service invocation and state management.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/distributed-calculator&#34;&gt;Distributed-calculator&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates a distributed calculator application that uses Dapr services to power a React web app. Highlights polyglot (multi-language) programming, service invocation and state management.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/pub-sub&#34;&gt;Pub-sub&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use Dapr to enable pub-sub applications. Uses Redis as a pub-sub component.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/bindings&#34;&gt;Bindings&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates how to use Dapr to create input and output bindings to other components. Uses bindings to Kafka.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/observability&#34;&gt;Observability&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates Dapr tracing capabilities. Uses Zipkin as a tracing component.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapr/quickstarts/master/tutorials/secretstore&#34;&gt;Secret Store&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Demonstrates the use of Dapr Secrets API to access secret stores.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;Please refer to our &lt;a href=&#34;https://github.com/dapr/community/raw/master/CODE-OF-CONDUCT.md&#34;&gt;Dapr Community Code of Conduct&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>