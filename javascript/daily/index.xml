<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-01-29T01:31:13Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>amin4139/share_file</title>
    <updated>2024-01-29T01:31:13Z</updated>
    <id>tag:github.com,2024-01-29:/amin4139/share_file</id>
    <link href="https://github.com/amin4139/share_file" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>chrisgoringe/cg-use-everywhere</title>
    <updated>2024-01-29T01:31:13Z</updated>
    <id>tag:github.com,2024-01-29:/chrisgoringe/cg-use-everywhere</id>
    <link href="https://github.com/chrisgoringe/cg-use-everywhere" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UE Nodes&lt;/h1&gt; &#xA;&lt;p&gt;Love this node? &lt;a href=&#34;https://www.buymeacoffee.com/chrisgoringe&#34;&gt;Buy me a coffee!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Getting started? Download the test workflow below and see how it works.&lt;/p&gt; &#xA;&lt;p&gt;Problems? Jump down to &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere/raw/main/README.md#loggingdebugging&#34;&gt;logging and debugging&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ideas for how to improve the nodes (or bug reports) - &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere/issues&#34;&gt;raise an issue&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Shameless plug for my other nodes -&amp;gt; Check out &lt;a href=&#34;https://github.com/chrisgoringe/cg-image-picker&#34;&gt;Image Picker&lt;/a&gt; for another way to make some workflows smoother. And leave a star if you like something!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Test workflow&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;This workflow uses all five nodes, and can be used to test (and understand!) the nodes. You wouldn&#39;t build it like this, it&#39;s just an example...&lt;/th&gt; &#xA;   &lt;th&gt;Here&#39;s an image with the workflow in&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/test-workflow-screenshot.png&#34; alt=&#34;screen&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/test-workflow.png&#34; alt=&#34;image&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Or &lt;a href=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/test-workflow.json&#34;&gt;the workflow as json&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Latest updates&lt;/h2&gt; &#xA;&lt;p&gt;4.6&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add Group Regex to &lt;code&gt;Anything Everywhere?&lt;/code&gt; node&lt;/li&gt; &#xA; &lt;li&gt;if you have workflow json files saved that now don&#39;t work, try &#39;workflow_fixer.py&#39;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.5&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add support for Comfy UI Group Nodes (UE nodes can be used to connect to group node inputs and outputs, but not within a group node)&lt;/li&gt; &#xA; &lt;li&gt;add &lt;code&gt;convert to real links&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.4&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;add (limited) support for converting regex in the &lt;code&gt;Anything Everywhere?&lt;/code&gt; node with inputs (only works if the link is from a node that is a simple string source)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.3&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added support for targetting &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere#highway-nodes&#34;&gt;Highway nodes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;improved performance of loop detection, especially with &lt;a href=&#34;https://github.com/Trung0246/ComfyUI-0246&#34;&gt;highway nodes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;updated docs to not use other custom nodes in examples&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.1.2&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;tweaks to improve handling of bypass&lt;/li&gt; &#xA; &lt;li&gt;fixed connecting to Seed Everywhere&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.1.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added option to turn animation off&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;4.1&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;added &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere#loop-checking&#34;&gt;loop detection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;added &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere#group-restriction&#34;&gt;group restriction&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The v1 nodes have been fully removed. If you were using one, you can just replace it with an &lt;code&gt;Anything Everywhere&lt;/code&gt; node.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Use Comfy Manager. If you really want to do it manually, just clone this repository in your custom_nodes directory.&lt;/p&gt; &#xA;&lt;h2&gt;Anything Everywhere (start here!)&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;Anything Everywhere&lt;/code&gt; node has a single input, initially labelled &#39;anything&#39;. Connect anything to it (directly - not via a reroute), and the input name changes to match the input type. Disconnect and it goes back to &#39;anything&#39;.&lt;/p&gt; &#xA;&lt;p&gt;When you run the prompt, any unconnected input, anywhere in the workflow, which matches that type, will act as if it were connected to the same input.&lt;/p&gt; &#xA;&lt;p&gt;To visualise what it&#39;s being connected to, right-click on the background canvas and select &lt;code&gt;Toggle UE Link Visibility&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Anything Everywhere? - control matching with regex rules&lt;/h2&gt; &#xA;&lt;p&gt;This node adds two widgets - title_regex and input_regex. It will only send to inputs which match. So in the example, title_regex is &#39;Preview&#39; so the image is sent to the Preview Image node but not the Save Image node. Note that you can rename node and input titles, which can help!&lt;/p&gt; &#xA;&lt;p&gt;(From 4.6 you can also specify a group regex to only match inputs on nodes which are in groups that match the regex.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/regex.png&#34; alt=&#34;regex&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;The matches are regular expressions, not string matches.&lt;/em&gt; Most simple strings will work (matching any part of the title or input name), but some characters have special meanings (including various sorts of brackets, ^, $, /, and . in particular) so just avoid them if you aren&#39;t regex-inclined.&lt;/p&gt; &#xA;&lt;p&gt;Using regex means you can use &lt;code&gt;^prompt&lt;/code&gt; to match &lt;code&gt;prompt&lt;/code&gt; at the beginning of the title only, to avoid matching &lt;code&gt;negative_prompt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Regex 101 - &lt;code&gt;^&lt;/code&gt; means &#39;the start&#39;, &lt;code&gt;$&lt;/code&gt; means &#39;the end&#39;, &lt;code&gt;.&lt;/code&gt; matches any single character, &lt;code&gt;.*&lt;/code&gt; matches anything of any length (including zero). For more than that, visit &lt;a href=&#34;https://regex101.com/&#34;&gt;regex101&lt;/a&gt; (the flavour you want is ECMAScript, though that probably won&#39;t matter).&lt;/p&gt; &#xA;&lt;h3&gt;Can I make the regex an input instead of a widget?&lt;/h3&gt; &#xA;&lt;p&gt;Sort of.&lt;/p&gt; &#xA;&lt;p&gt;Because the regex needs to be known before the workflow is submitted (in order to calculate the links), you can&#39;t pass a string into the &lt;code&gt;Anything Everywhere?&lt;/code&gt; node and expect it to work. The &lt;em&gt;only&lt;/em&gt; thing that is supported is if the input comes &lt;em&gt;directly&lt;/em&gt; from an node which consists solely of a string widget. The &lt;code&gt;Simple String&lt;/code&gt; node that is included in this pack will work. The same &lt;code&gt;Simple String&lt;/code&gt; can be connected to multiple &lt;code&gt;Anything Everywhere?&lt;/code&gt; nodes, but no other structures will work.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;This works&lt;/th&gt; &#xA;   &lt;th&gt;This doesn&#39;t. And never will.&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/image.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/imagex.png&#34; alt=&#34;no&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Seed Everywhere&lt;/h2&gt; &#xA;&lt;p&gt;Seed Everywhere connects to any unconnected INT input with &lt;code&gt;seed&lt;/code&gt; in the input name (seed, noise_seed, etc), and it has the control_after_generate feature. So if you convert the seed widgets to inputs you can use the same seed everywhere.&lt;/p&gt; &#xA;&lt;h2&gt;Anything Everywhere3 - One node, three inputs.&lt;/h2&gt; &#xA;&lt;p&gt;Really just three &lt;code&gt;Anything Everywhere&lt;/code&gt; nodes packaged together. Designed for the outputs of Checkpoint Loader.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/UE3.png&#34; alt=&#34;UE3&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Prompts Everywhere - two strings or conditionings&lt;/h2&gt; &#xA;&lt;p&gt;Prompt Everywhere has two inputs. They will be sent with regex matching rules of &lt;code&gt;(^prompt|^positive)&lt;/code&gt; and &lt;code&gt;neg&lt;/code&gt; respectively. These should match the various versions of names that get used for prompts and negative prompts or conditionings.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;strings&lt;/th&gt; &#xA;   &lt;th&gt;conditionings&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/PE.png&#34; alt=&#34;pe&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/conditioning.png&#34; alt=&#34;pe&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Primitives and COMBOs and the like&lt;/h1&gt; &#xA;&lt;p&gt;UE nodes don&#39;t work with primitives and COMBOs (the data type used for dropdown lists, which are also a type of primitive within Comfy). It&#39;s unlikely they ever will.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use UE to control sampler or sigma, you can do this with the built in &lt;code&gt;SamplerCustom&lt;/code&gt; nodes:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/sampler%20and%20sigma.png&#34; alt=&#34;sample and sigma&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more on this, see &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere/issues/69&#34;&gt;this discussion&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Other features&lt;/h1&gt; &#xA;&lt;h2&gt;Show links on mouse over&lt;/h2&gt; &#xA;&lt;p&gt;This is off by default - enable it in the main settings menu. If &lt;code&gt;Anything Everywhere show links on mouse over&lt;/code&gt; is enabled, UE links to and from nodes are shown when you move the mouse over the node.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/mouseOver.gif&#34; alt=&#34;mouseover&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Convert to real links&lt;/h2&gt; &#xA;&lt;p&gt;If you want to share a workflow without UE nodes being required, or to save an API version of a workflow, you can replace the virtual links created by UE nodes with real links (and remove the UE nodes).&lt;/p&gt; &#xA;&lt;p&gt;This can be done for a single node by right-clicking on it and selecting &lt;code&gt;Convert to real links&lt;/code&gt;, or for all UE nodes in a workflow by right-clicking the background and selecting &lt;code&gt;Convert all UEs to real links&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Shift drag&lt;/h2&gt; &#xA;&lt;p&gt;Shift click on an output node and drag then release to get an autocreate menu. This replaces the default behaviour (which gives you a search box), so you can disable it with the &lt;code&gt;Anything Everywhere replace search&lt;/code&gt; setting.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/auto.gif&#34; alt=&#34;auto&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Group and color restriction&lt;/h2&gt; &#xA;&lt;p&gt;Any UE node can be restricted to only send within the group(s) it is part of, or only to nodes of the same color (or both). Right-click on the node and select &lt;code&gt;Send only within my group(s)&lt;/code&gt;/&lt;code&gt;Remove group restriction&lt;/code&gt; or &lt;code&gt;Send only to matching color&lt;/code&gt;/&lt;code&gt;Remove color restriction&lt;/code&gt;. UE nodes which are restricted (in either or both ways) have a green circle in the top-left corner. Here&#39;s part of a workflow that compares two models using this feature:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/group.png&#34; alt=&#34;screen&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Highway nodes&lt;/h2&gt; &#xA;&lt;p&gt;Trung 0246&#39;s &lt;a href=&#34;https://github.com/Trung0246/ComfyUI-0246&#34;&gt;Highway nodes&lt;/a&gt; are a pretty cool way of piping data around. You can target them with an &lt;code&gt;Anything Everywhere?&lt;/code&gt; node by using an &lt;code&gt;input_regex&lt;/code&gt; which matches the unconnected input name with the &#39;+&#39;, like this: &lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/highway.png&#34; alt=&#34;highway&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is new, so please report any issues!&lt;/p&gt; &#xA;&lt;h2&gt;Loop checking&lt;/h2&gt; &#xA;&lt;p&gt;By default workflows are checked for loops before they are submitted (because UE can introduce them, and a loop results in a bad python outcome). If a loop is detected you&#39;ll get a JavaScript warning showing you the node ids involved. However, especially if there are other custom nodes involved, it&#39;s possible that the check will miss a loop, or flag one that isn&#39;t real.&lt;/p&gt; &#xA;&lt;p&gt;If you get a warning and don&#39;t believe there is a loop (having checked the node ids listed!) you can turn loop checking off in the main settings menu. If something flagged as a loop runs fine, please &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere/issues&#34;&gt;raise an issue&lt;/a&gt; and include the workflow in the report (save the json and zip it, because GitHub doesn&#39;t accept .json files). Likewise if a loop doesn&#39;t get caught.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve written code for the core Comfy backend to catch loops, maybe it&#39;ll be included - &lt;a href=&#34;https://github.com/comfyanonymous/ComfyUI/pull/1652&#34;&gt;PR for ComfyUI&lt;/a&gt; - or maybe they have another plan.&lt;/p&gt; &#xA;&lt;h2&gt;Priorities&lt;/h2&gt; &#xA;&lt;p&gt;If there is more than one sending node that matches an input, the basic rules is that the more specific node wins. The order of priorities is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Anything Everywhere?&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Seed Everywhere&lt;/code&gt; and &lt;code&gt;Prompts Everywhere&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Anything Everywhere&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Anything Everywhere3&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Within each group, UE nodes with group restriction are prioritised over those without.&lt;/p&gt; &#xA;&lt;p&gt;If two nodes with the same priority both match &lt;em&gt;neither will connect&lt;/em&gt; - better to fail fast than have an ambiguous outcome. If there are ambiguous matches you can display them using &lt;code&gt;Show UE broadcast clashes&lt;/code&gt; (right-click on background - the option only appears if there are clashes).&lt;/p&gt; &#xA;&lt;h2&gt;Visualise&lt;/h2&gt; &#xA;&lt;p&gt;If something isn&#39;t working right, right click on the background canvas and &lt;code&gt;Toggle UE Link Visibility&lt;/code&gt; to see all the links being made by the UE nodes.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Visualise off&lt;/th&gt; &#xA;   &lt;th&gt;Visualise on&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/off.png&#34; alt=&#34;off&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/on.png&#34; alt=&#34;on&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;If the animation effects are too much for your graphics (esp. when the workflow is running) you can turn them off in the main settings menu.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Connected inputs are also subtly marked as such - here the model, positive, and negative inputs are connected by UI, there is no connection to the latent, and the seed has a traditional connection. You can turn this effect off in the main preferences.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/connection-ui.png&#34; alt=&#34;con&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;See what is sent&lt;/h2&gt; &#xA;&lt;p&gt;The nodes which only have one output can also gain a text box showing exactly what passed through the node. You need to turn this on if you want it - it&#39;s in the main settings, &#39;Anything Everywhere node details&#39;.&lt;/p&gt; &#xA;&lt;h2&gt;Logging/Debugging&lt;/h2&gt; &#xA;&lt;p&gt;The JavaScript console (press f12 in some browsers) has logging information about what is being connected. You can change the level of detail by finding the file &lt;code&gt;[comfy_install]/custom_nodes/cg-use-everywhere/js/use_everywhre_utilities.js&lt;/code&gt; and near the top finding this bit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    static ERROR       = 0; // actual errors&#xA;    static PROBLEM     = 1; // things that stop the workflow working&#xA;    static INFORMATION = 2; // record of good things&#xA;    static DETAIL      = 3; // details&#xA;&#xA;    static LEVEL = Logger.PROBLEM;&#xA;    static TRACE = false;   // most of the method calls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the &lt;code&gt;LEVEL&lt;/code&gt; to &lt;code&gt;Logger.INFORMATION&lt;/code&gt; for more, or &lt;code&gt;Logger.DETAIL&lt;/code&gt; for even more; set &lt;code&gt;TRACE&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; for some other debugging information.&lt;/p&gt; &#xA;&lt;p&gt;If you have a problem, pressing f12 to see the JavaScript console can often help. The following steps are really helpful in making a good bug report:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;update to the latest version&lt;/li&gt; &#xA; &lt;li&gt;restart ComfyUI&lt;/li&gt; &#xA; &lt;li&gt;clear the canvas&lt;/li&gt; &#xA; &lt;li&gt;close the browser&lt;/li&gt; &#xA; &lt;li&gt;open a new Comfy window (with no workflow), look in console (f12) to see if there were any errors as ComfyUI started up&lt;/li&gt; &#xA; &lt;li&gt;load your workflow, and look again&lt;/li&gt; &#xA; &lt;li&gt;run, and look again&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The other thing worth trying is clearing out all the custom node javascript from where it gets copied when ComfyUI starts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;stop Comfy&lt;/li&gt; &#xA; &lt;li&gt;go to [comfy root]/web/extensions (&lt;em&gt;not&lt;/em&gt; under custom_nodes)&lt;/li&gt; &#xA; &lt;li&gt;remove everything there EXCEPT for &lt;code&gt;core&lt;/code&gt;. Leave &lt;code&gt;core&lt;/code&gt; (it&#39;s ComfyUI stuff)&lt;/li&gt; &#xA; &lt;li&gt;restart Comfy (all custom nodes will reinstall their javascript at startup)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you find a bug, please &lt;a href=&#34;https://github.com/chrisgoringe/cg-use-everywhere/issues&#34;&gt;raise an issue&lt;/a&gt; - if you can include the workflow, that&#39;s a huge help (you&#39;ll need to save it as .txt, or zip the .json file, because GitHub doesn&#39;t accept .json).&lt;/p&gt; &#xA;&lt;h2&gt;Cautions&lt;/h2&gt; &#xA;&lt;p&gt;Bypassing and disabling nodes works, but with one catch. If you have a UE nodes that does matching (&lt;code&gt;Anything Everywhere?&lt;/code&gt; and &lt;code&gt;Prompt Everywhere&lt;/code&gt;) and you bypass the node it matches to, the link won&#39;t be made. So&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;If you use a ? node to send to a node...&lt;/th&gt; &#xA;   &lt;th&gt;...and bypass the recipient, it doesn&#39;t get connected&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/bypass_catch1.png&#34; alt=&#34;1&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/chrisgoringe/cg-use-everywhere/main/docs/bypass_catch2.png&#34; alt=&#34;2&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;This is unlikely to be fixed, but should be fairly easy to avoid!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>BretFisher/udemy-docker-mastery</title>
    <updated>2024-01-29T01:31:13Z</updated>
    <id>tag:github.com,2024-01-29:/BretFisher/udemy-docker-mastery</id>
    <link href="https://github.com/BretFisher/udemy-docker-mastery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Docker Mastery Udemy course to build, compose, deploy, and manage containers from local development to high-availability in the cloud&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Udemy Course Docker Mastery: with Kubernetes+Swarm from a Docker Captain&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Build, test, and deploy containers with the best mega-course on Docker, Kubernetes, Compose, Swarm and Registry using a cloud native DevOps mindset&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This repository is for use in my Udemy Courses &#34;&lt;a href=&#34;https://www.udemy.com/course/docker-mastery/?referralCode=1410924A733D33635CCB&#34;&gt;Docker Mastery&lt;/a&gt;&#34; and &#34;&lt;a href=&#34;https://www.udemy.com/course/docker-swarm-mastery/?referralCode=4927D9CB156D4AE0228C&#34;&gt;Swarm Mastery&lt;/a&gt;&#34;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Get these courses with my &#34;cheapest on the internet&#34; coupon links: &lt;a href=&#34;https://www.bretfisher.com/courses&#34;&gt;bretfisher.com/courses&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Get the &lt;a href=&#34;https://www.bretfisher.com/newsletter&#34;&gt;weekly newsletter&lt;/a&gt; on all the cloud native DevOps content I&#39;m creating.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Course Sections&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Quick Start! &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BretFisher/udemy-docker-mastery/main/intro/README.md&#34;&gt;README&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/BretFisher/udemy-docker-mastery/main/references/S01%20Commands%20and%20Links.md&#34;&gt;Commands and Links&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Course Introduction&lt;/li&gt; &#xA; &lt;li&gt;The Best Way to Setup Docker for Your OS&lt;/li&gt; &#xA; &lt;li&gt;Creating and Using Containers Like a Boss&lt;/li&gt; &#xA; &lt;li&gt;Container Images, Where To Find Them and How To Build Them&lt;/li&gt; &#xA; &lt;li&gt;Container Lifetime &amp;amp; Persistent Data: Volumes, Volumes, Volumes&lt;/li&gt; &#xA; &lt;li&gt;Making It Easier with Docker Compose: The Multi-Container Tool&lt;/li&gt; &#xA; &lt;li&gt;Swarm Intro and Creating a 3-Node Swarm Cluster&lt;/li&gt; &#xA; &lt;li&gt;Swarm Basic Features and How to Use Them In Your Workflow&lt;/li&gt; &#xA; &lt;li&gt;Swarm App Lifecycle&lt;/li&gt; &#xA; &lt;li&gt;Container Registries: Image Storage and Distribution&lt;/li&gt; &#xA; &lt;li&gt;Docker in Production&lt;/li&gt; &#xA; &lt;li&gt;The What and Why of Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes Architecture and Install&lt;/li&gt; &#xA; &lt;li&gt;Your First Pods&lt;/li&gt; &#xA; &lt;li&gt;Inspecting Kubernetes Resources&lt;/li&gt; &#xA; &lt;li&gt;Exposing Kubernetes Ports&lt;/li&gt; &#xA; &lt;li&gt;Kubernetes Management Techniques&lt;/li&gt; &#xA; &lt;li&gt;Moving to Declarative Kubernetes YAML&lt;/li&gt; &#xA; &lt;li&gt;Your Next Steps and The Future of Kubernetes&lt;/li&gt; &#xA; &lt;li&gt;Automated CI Workflows&lt;/li&gt; &#xA; &lt;li&gt;GitHub Actions Workflow Examples&lt;/li&gt; &#xA; &lt;li&gt;Docker Security Good Defaults and Tools&lt;/li&gt; &#xA; &lt;li&gt;Docker 19.03 Release New Features&lt;/li&gt; &#xA; &lt;li&gt;DevOps and Docker Clips&lt;/li&gt; &#xA; &lt;li&gt;Dockerfiles and Docker Images in 2022&lt;/li&gt; &#xA; &lt;li&gt;Dockerfile and Compose File Reviews&lt;/li&gt; &#xA; &lt;li&gt;Extra&#39;s, Common Questions, and Resources&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Feel free to create issues or PRs if you find a problem with examples in this repository!&lt;/p&gt;</summary>
  </entry>
</feed>