<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-31T01:32:08Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Clooos/Bubble-Card</title>
    <updated>2023-08-31T01:32:08Z</updated>
    <id>tag:github.com,2023-08-31:/Clooos/Bubble-Card</id>
    <link href="https://github.com/Clooos/Bubble-Card" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Bubble Card is a minimalist card collection for Home Assistant with a nice pop-up touch.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bubble Card&lt;/h1&gt; &#xA;&lt;p&gt;Bubble Card is a minimalist card collection for Home Assistant with a nice pop-up touch.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Clooos/Bubble-Card/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/clooos/Bubble-Card&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Clooos/Bubble-Card/main/#&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/last-commit/clooos/Bubble-Card&#34; alt=&#34;Last commit&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/user/Clooooos/submitted/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Reddit-My%20stuff-orange?logo=reddit&#34; alt=&#34;Reddit Profile&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.buymeacoffee.com/clooos&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Buy%20me%20a-beer-yellow?logo=buy-me-a-coffee&#34; alt=&#34;Buy me a beer&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots and features&lt;/h2&gt; &#xA;&lt;img width=&#34;2048&#34; alt=&#34;Bubble Card Cover&#34; src=&#34;https://github.com/Clooos/Bubble-Card/assets/36499953/681e99e0-17ce-471d-a71b-9ef8158af6d5&#34;&gt; &#xA;&lt;img width=&#34;2048&#34; alt=&#34;Bubble Card 1&#34; src=&#34;https://github.com/Clooos/Bubble-Card/assets/36499953/286d3c0d-677f-4bd7-8d7e-667754af9019&#34;&gt; &#xA;&lt;img width=&#34;2048&#34; alt=&#34;Bubble Card 2&#34; src=&#34;https://github.com/Clooos/Bubble-Card/assets/36499953/dd182185-a092-43f2-8b5e-b194da85bcb9&#34;&gt; &#xA;&lt;img width=&#34;2048&#34; alt=&#34;Bubble Card 3&#34; src=&#34;https://github.com/Clooos/Bubble-Card/assets/36499953/c348db22-f3c7-46e2-b3ff-3978fcb4eb42&#34;&gt; &#xA;&lt;img width=&#34;2048&#34; alt=&#34;Bubble Card 4&#34; src=&#34;https://github.com/Clooos/Bubble-Card/assets/36499953/ca92ad56-4e59-49e3-b050-39544ad523e2&#34;&gt; &#xA;&lt;img width=&#34;2048&#34; alt=&#34;Bubble Card 5&#34; src=&#34;https://github.com/Clooos/Bubble-Card/assets/36499953/252a61c6-dc93-40e4-991a-28979a02eafc&#34;&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Without HACS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download this file: &lt;a href=&#34;https://raw.githubusercontent.com/Clooos/Bubble-Card/main/bubble-card.js&#34;&gt;bubble-card.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Add this file into your &lt;code&gt;&amp;lt;config&amp;gt;/www&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;On your dashboard click on the icon at the right top corner then on &lt;code&gt;Edit dashboard&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click again on that icon and then on &lt;code&gt;Manage resources&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;Add resource&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Copy and paste this: &lt;code&gt;/local/bubble-card.js?v=1&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Click on &lt;code&gt;JavaScript Module&lt;/code&gt; then &lt;code&gt;Create&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Go back and refresh your page&lt;/li&gt; &#xA; &lt;li&gt;You can now click on &lt;code&gt;Add card&lt;/code&gt; in the bottom right corner and search for &lt;code&gt;Bubble Card&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;After any update of the file you will have to edit &lt;code&gt;/local/bubble-card.js?v=1&lt;/code&gt; and change the version to any higher number&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;With HACS&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download HACS following the instructions on &lt;a href=&#34;https://hacs.xyz/docs/setup/download/&#34;&gt;https://hacs.xyz/docs/setup/download&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Proceed to the initial configuration following the instructions on &lt;a href=&#34;https://hacs.xyz/docs/configuration/basic&#34;&gt;https://hacs.xyz/docs/configuration/basic&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;On your sidebar go to &lt;code&gt;HACS&lt;/code&gt; &amp;gt; &lt;code&gt;Integrations&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;click on the icon at the right top corner then on &lt;code&gt;Custom repositories&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For the repository add this: &lt;code&gt;https://github.com/Clooos/Bubble-Card&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;For the category select &lt;code&gt;Lovelace&lt;/code&gt; then click &lt;code&gt;Add&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Now click on &lt;code&gt;Bubble Card&lt;/code&gt; then on the &lt;code&gt;Dowload&lt;/code&gt; button&lt;/li&gt; &#xA; &lt;li&gt;Go back on your dashboard and click on the icon at the right top corner then on &lt;code&gt;Edit dashboard&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can now click on &lt;code&gt;Add card&lt;/code&gt; in the bottom right corner and search for &lt;code&gt;Bubble Card&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Coming soon in the HACS default repo (still waiting for validation).&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;All cards and all options can fully be configured in the GUI editor, but it seems that there is still some issues in the editor 👀 But give it a try, most of it is functional.&lt;/p&gt; &#xA;&lt;h3&gt;Main options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Requirement&lt;/th&gt; &#xA;   &lt;th&gt;Supported options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;custom:bubble-card&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Type of the card&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;card_type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;button&lt;/code&gt;, &lt;code&gt;cover&lt;/code&gt;, &lt;code&gt;empty-column&lt;/code&gt;, &lt;code&gt;horizontal-buttons-stack&lt;/code&gt;, &lt;code&gt;pop-up&lt;/code&gt; or &lt;code&gt;separator&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Type of the Bubble Card, see below&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Pop-up&lt;/h2&gt; &#xA;&lt;p&gt;This card allows you to convert any &lt;code&gt;vertical-stack&lt;/code&gt; card into a pop-up. Each pop-up must have an unique hash (e.g. &lt;code&gt;#kitchen&lt;/code&gt;), you can open them with any card that allows &lt;code&gt;navigation_path&lt;/code&gt; or with the &lt;code&gt;horizontal-buttons-stack&lt;/code&gt; that is included. This card come with an header for your pop-up, if you add an entity to this card you will have a button to toggle this entity in that header, you can also display the state of an entity (e.g. the temperature of a room).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To add a pop-up you first need to add a &lt;code&gt;vertical-stack&lt;/code&gt; card to your dashboard&lt;/li&gt; &#xA; &lt;li&gt;This &lt;code&gt;vertical-stack&lt;/code&gt; must be after all your other cards (this is important)&lt;/li&gt; &#xA; &lt;li&gt;Now add a &lt;code&gt;Bubble Card&lt;/code&gt; with the type &lt;code&gt;pop-up&lt;/code&gt; in it&lt;/li&gt; &#xA; &lt;li&gt;Just fill in the required inputs and the ones you need&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Requirement&lt;/th&gt; &#xA;   &lt;th&gt;Supported options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;hash&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any unique hash (e.g. &lt;code&gt;&#39;#kitchen&#39;&lt;/code&gt;) with &#39; &#39;&lt;/td&gt; &#xA;   &lt;td&gt;This is how you will open your pop-up&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional but recommended&lt;/td&gt; &#xA;   &lt;td&gt;Any string&lt;/td&gt; &#xA;   &lt;td&gt;A name for your pop-up header&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional but recommended&lt;/td&gt; &#xA;   &lt;td&gt;Any &lt;code&gt;mdi:&lt;/code&gt; icon&lt;/td&gt; &#xA;   &lt;td&gt;An icon for your pop-up header&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;entity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any switchable entity&lt;/td&gt; &#xA;   &lt;td&gt;Display a button to toggle this entity&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;state&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any entity&lt;/td&gt; &#xA;   &lt;td&gt;Display its state in your pop-up header&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;state_unit&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any unit of measurement&lt;/td&gt; &#xA;   &lt;td&gt;An unit of measurement for the displayed state (e.g. &lt;code&gt;°F&lt;/code&gt;, &lt;code&gt;°C&lt;/code&gt;, &lt;code&gt;%&lt;/code&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;width_desktop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any CSS value&lt;/td&gt; &#xA;   &lt;td&gt;Width on desktop (&lt;code&gt;100%&lt;/code&gt; by default on mobile)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;margin_top_mobile&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any CSS value&lt;/td&gt; &#xA;   &lt;td&gt;Top margin on mobile (e.g. &lt;code&gt;-56px&lt;/code&gt; if your header is hidden)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;margin_top_desktop&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any CSS value&lt;/td&gt; &#xA;   &lt;td&gt;Top margin on desktop (e.g. &lt;code&gt;50%&lt;/code&gt; for an half sized pop-up)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;p&gt;A pop-up&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: vertical-stack&#xA;cards:&#xA;  - type: custom:bubble-card&#xA;    card_type: pop-up&#xA;    hash: &#39;#kitchen&#39;&#xA;    name: Kitchen&#xA;    icon: mdi:fridge&#xA;    entity: light.kitchen&#xA;    state: sensor.kitchen_temperature&#xA;    state_unit: °C&#xA;    width_desktop: 600px&#xA;    margin_top_mobile: 18px&#xA;    margin_top_desktop: 74px&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A button to open the pop-up&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: button&#xA;tap_action:&#xA;  action: navigate&#xA;  navigation_path: &#39;#kitchen&#39;&#xA;name: Kitchen&#xA;icon: mdi:fridge&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Horizontal buttons stack&lt;/h2&gt; &#xA;&lt;p&gt;This card is the companion to the pop-up card, allowing you to open the corresponding pop-ups. It also allows you to open any page of your dashboard. In addition, you can add your motion sensors so that the order of the buttons adapts according to the room you just entered. This card is scrollable, remains visible and acts as a footer. This card will have more features in the future.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Requirement&lt;/th&gt; &#xA;   &lt;th&gt;Supported options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;auto_order&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;true&lt;/code&gt; or &lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Change the order of the buttons according to the room you just entered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1_link&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The pop-up hash (e.g. &lt;code&gt;&#39;#kitchen&#39;&lt;/code&gt;) with &#39; &#39; or any link&lt;/td&gt; &#xA;   &lt;td&gt;A link to open&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1_name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional but recommended&lt;/td&gt; &#xA;   &lt;td&gt;Any string&lt;/td&gt; &#xA;   &lt;td&gt;A name for your button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1_icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional but recommended&lt;/td&gt; &#xA;   &lt;td&gt;Any &lt;code&gt;mdi:&lt;/code&gt; icon&lt;/td&gt; &#xA;   &lt;td&gt;An icon for your button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1_entity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any light or light group&lt;/td&gt; &#xA;   &lt;td&gt;Display the color of that light in background&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;1_pir_sensor&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt; if &lt;code&gt;auto_order&lt;/code&gt; is set to true&lt;/td&gt; &#xA;   &lt;td&gt;Any binary sensor&lt;/td&gt; &#xA;   &lt;td&gt;A pir sensor for &lt;code&gt;auto_order&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;The variables starting with a number defines your buttons, just change this number to add more buttons (see example below).&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: custom:bubble-card&#xA;card_type: horizontal-buttons-stack&#xA;auto_order: true&#xA;1_name: Living room&#xA;1_icon: mdi:sofa&#xA;1_link: &#39;#living-room&#39;&#xA;1_entity: light.living_room&#xA;1_pir_sensor: binary_sensor.living_room_motion&#xA;2_name: Kitchen&#xA;2_icon: mdi:fridge&#xA;2_link: &#39;#kitchen&#39;&#xA;2_entity: light.kitchen&#xA;2_pir_sensor: binary_sensor.kitchen_motion&#xA;3_name: Dining room&#xA;3_icon: mdi:silverware-fork-knife&#xA;3_link: &#39;#dining-room&#39;&#xA;3_entity: light.dining_room&#xA;3_pir_sensor: binary_sensor.dining_room_motion&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Button&lt;/h2&gt; &#xA;&lt;p&gt;This card can be a slider or a button, allowing you to toggle your entities or automations, control the brightness of your lights and the volume of your media players. To access color / control of an entity, simply tap on the icon.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Requirement&lt;/th&gt; &#xA;   &lt;th&gt;Supported options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;entity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any switchable entity, any media player or any light&lt;/td&gt; &#xA;   &lt;td&gt;An entity to control&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;button_type&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;switch&lt;/code&gt; (default) or &lt;code&gt;slider&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The behavior of your button&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any string&lt;/td&gt; &#xA;   &lt;td&gt;A name for your button, if not defined it will display the entity name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any &lt;code&gt;mdi:&lt;/code&gt; icon&lt;/td&gt; &#xA;   &lt;td&gt;An icon for your button, if not defined it will display the entity icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: custom:bubble-card&#xA;card_type: button&#xA;button_type: slider&#xA;entity: light.kitchen_led&#xA;name: Kitchen LED&#xA;icon: mdi:led-strip-variant&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Cover&lt;/h2&gt; &#xA;&lt;p&gt;This card allows you to control your covers.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Requirement&lt;/th&gt; &#xA;   &lt;th&gt;Supported options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;entity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Required&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Any cover&lt;/td&gt; &#xA;   &lt;td&gt;A cover to control&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any string&lt;/td&gt; &#xA;   &lt;td&gt;A name for your cover, if not defined it will display the entity name&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icon_open&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any &lt;code&gt;mdi:&lt;/code&gt; icon&lt;/td&gt; &#xA;   &lt;td&gt;An icon for your open cover, if not defined it will display the default open cover icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icon_closed&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any &lt;code&gt;mdi:&lt;/code&gt; icon&lt;/td&gt; &#xA;   &lt;td&gt;An icon for your closed cover, if not defined it will display the default closed cover icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;open_service&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any service or script&lt;/td&gt; &#xA;   &lt;td&gt;A service to open your cover, default to &lt;code&gt;cover.open_cover&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;stop_service&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any service or script&lt;/td&gt; &#xA;   &lt;td&gt;A service to stop your cover, default to &lt;code&gt;cover.stop_cover&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;close_service&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional&lt;/td&gt; &#xA;   &lt;td&gt;Any service or script&lt;/td&gt; &#xA;   &lt;td&gt;A service to close your cover, default to &lt;code&gt;cover.close_cover&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: custom:bubble-card&#xA;card_type: cover&#xA;entity: cover.kitchen&#xA;name: Kitchen&#xA;icon_open: mdi:roller-shade&#xA;icon_closed: mdi:roller-shade-closed&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Separator&lt;/h2&gt; &#xA;&lt;p&gt;This card is a simple separator for dividing your pop-up into categories / sections. e.g. Lights, Devices, Covers, Settings, Automations...&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Requirement&lt;/th&gt; &#xA;   &lt;th&gt;Supported options&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional but recommended&lt;/td&gt; &#xA;   &lt;td&gt;Any string&lt;/td&gt; &#xA;   &lt;td&gt;A name for your separator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;icon&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;Optional but recommended&lt;/td&gt; &#xA;   &lt;td&gt;Any &lt;code&gt;mdi:&lt;/code&gt; icon&lt;/td&gt; &#xA;   &lt;td&gt;An icon for your separator&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: custom:bubble-card&#xA;card_type: separator&#xA;name: Covers&#xA;icon: mdi:window-shutter&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Empty column&lt;/h2&gt; &#xA;&lt;p&gt;This card is here to fill an empty column. This is useful if you have an &lt;code&gt;horizontal-stack&lt;/code&gt; in your pop-up with only one card. Take a look at the bottom right corner of the second screenshot to (don&#39;t) see it.&lt;/p&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;This card has no options.&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;type: custom:bubble-card&#xA;card_type: empty-column&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Styling&lt;/h2&gt; &#xA;&lt;p&gt;There is no styling options (for now) but it fully support &lt;a href=&#34;https://github.com/thomasloven/lovelace-card-mod&#34;&gt;card-mod&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example on how you can change the font size:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;card_mod:&#xA;  style: |&#xA;    ha-card { &#xA;      font-size: 12px;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>i18next/react-i18next</title>
    <updated>2023-08-31T01:32:08Z</updated>
    <id>tag:github.com,2023-08-31:/i18next/react-i18next</id>
    <link href="https://github.com/i18next/react-i18next" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Internationalization for react done right. Using the i18next i18n ecosystem.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;react-i18next &lt;a href=&#34;https://twitter.com/intent/tweet?text=Awesome%20react-i18next%20for%20react.js%20based%20on%20i18next%20internationalization%20ecosystem%20&amp;amp;url=https://github.com/i18next/react-i18next&amp;amp;via=jamuhl&amp;amp;hashtags=i18n,reactjs,js,dev&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/url/http/shields.io.svg?style=social&#34; alt=&#34;Tweet&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/i18next/react-i18next&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/i18next/react-i18next.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codeclimate.com/github/i18next/react-i18next&#34;&gt;&lt;img src=&#34;https://codeclimate.com/github/codeclimate/codeclimate/badges/gpa.svg?sanitize=true&#34; alt=&#34;Code Climate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/github/i18next/react-i18next&#34;&gt;&lt;img src=&#34;https://coveralls.io/repos/github/i18next/react-i18next/badge.svg?sanitize=true&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagequality.com/#?package=react-i18next&#34;&gt;&lt;img src=&#34;https://npm.packagequality.com/shield/react-i18next.svg?sanitize=true&#34; alt=&#34;Quality&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npmjs.org/package/react-i18next&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/react-i18next&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;IMPORTANT:&lt;/h3&gt; &#xA;&lt;p&gt;Master Branch is the newest version using hooks (&amp;gt;= v10).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ &amp;gt;=v10.0.0&#xA;npm i react-i18next&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;react-native: To use hooks within react-native, you must use react-native v0.59.0 or higher&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the legacy version please use the &lt;a href=&#34;https://github.com/i18next/react-i18next/tree/v9.x.x&#34;&gt;v9.x.x Branch&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ v9.0.10 (legacy)&#xA;npm i react-i18next@legacy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;The documentation is published on &lt;a href=&#34;https://react.i18next.com&#34;&gt;react.i18next.com&lt;/a&gt; and PR changes can be supplied &lt;a href=&#34;https://github.com/i18next/react-i18next-gitbook&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general i18next documentation is published on &lt;a href=&#34;https://www.i18next.com&#34;&gt;www.i18next.com&lt;/a&gt; and PR changes can be supplied &lt;a href=&#34;https://github.com/i18next/i18next-gitbook&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;What will my code look like?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Before:&lt;/strong&gt; Your react code would have looked something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;...&#xA;&amp;lt;div&amp;gt;Just simple content&amp;lt;/div&amp;gt;&#xA;&amp;lt;div&amp;gt;&#xA;  Hello &amp;lt;strong title=&#34;this is your name&#34;&amp;gt;{name}&amp;lt;/strong&amp;gt;, you have {count} unread message(s). &amp;lt;Link to=&#34;/msgs&#34;&amp;gt;Go to messages&amp;lt;/Link&amp;gt;.&#xA;&amp;lt;/div&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;After:&lt;/strong&gt; With the trans component just change it to:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;...&#xA;&amp;lt;div&amp;gt;{t(&#39;simpleContent&#39;)}&amp;lt;/div&amp;gt;&#xA;&amp;lt;Trans i18nKey=&#34;userMessagesUnread&#34; count={count}&amp;gt;&#xA;  Hello &amp;lt;strong title={t(&#39;nameTitle&#39;)}&amp;gt;{{name}}&amp;lt;/strong&amp;gt;, you have {{count}} unread message. &amp;lt;Link to=&#34;/msgs&#34;&amp;gt;Go to messages&amp;lt;/Link&amp;gt;.&#xA;&amp;lt;/Trans&amp;gt;&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Head over to the &lt;strong&gt;interactive playground&lt;/strong&gt; at &lt;a href=&#34;https://codesandbox.io/s/1zxox032q&#34;&gt;codesandbox&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;📖 What others say&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://locize.com/blog/react-i18next/&#34;&gt;How to properly internationalize a React application using i18next&lt;/a&gt; by Adriano Raiano&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://alligator.io/react/i18n-with-react-and-i18next&#34;&gt;I18n with React and i18next&lt;/a&gt; via Alligator.io by Danny Hurlburt&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://itnext.io/ultimate-localization-of-react-mobx-app-with-i18next-efab77712149&#34;&gt;Ultimate Localization of React (Mobx) App with i18next&lt;/a&gt; via itnext.io by Viktor Shevchenko&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjsexample.com/internationalization-for-react-done-right-using-the-i18next-i18n-ecosystem/&#34;&gt;Internationalization for react done right Using the i18next i18n ecosystem&lt;/a&gt; via reactjsexample.com&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codetain.com/blog/how-to-translate-react-application-with-react-i18next/&#34;&gt;How to translate React application with react-i18next&lt;/a&gt; via codetain.co by Norbert Suski&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.gatsbyjs.org/blog/2017-10-17-building-i18n-with-gatsby/&#34;&gt;Building i18n with Gatsby&lt;/a&gt; via gatsbyjs.org by Samuel Goudie&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@jamuhl/get-your-react-js-application-translated-with-style-4ad090aefc2c&#34;&gt;Get your react.js application translated with style&lt;/a&gt; by Jan Mühlemann&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@jamuhl/translate-your-expo-io-react-native-mobile-application-aa220b2362d2&#34;&gt;Translate your expo.io / react-native mobile application&lt;/a&gt; by Jan Mühlemann&lt;/li&gt; &#xA; &lt;li&gt;You&#39;re welcome to share your story...&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why i18next?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simplicity:&lt;/strong&gt; no need to change your webpack configuration or add additional babel transpilers, just use create-react-app and go.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Production ready&lt;/strong&gt; we know there are more needs for production than just doing i18n on the clientside, so we offer wider support on &lt;a href=&#34;https://www.i18next.com/overview/supported-frameworks&#34;&gt;serverside&lt;/a&gt; too (nodejs, php, ruby, .net, ...). &lt;strong&gt;Learn once - translate everywhere&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Beyond i18n&lt;/strong&gt; comes with &lt;a href=&#34;https://locize.com&#34;&gt;locize&lt;/a&gt; bridging the gap between developement and translations - covering the whole translation process.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/i18next/i18next/master/assets/i18next-ecosystem.jpg&#34; alt=&#34;ecosystem&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Localization workflow&lt;/h3&gt; &#xA;&lt;p&gt;Want to learn more about how seamless your internationalization and translation process can be?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/osScyaGMVqo&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/i18next/react-i18next/master/example/locize/video_sample.png&#34; alt=&#34;video&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/osScyaGMVqo&#34;&gt;watch the video&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;p&gt;Source can be loaded via &lt;a href=&#34;https://www.npmjs.com/package/react-i18next&#34;&gt;npm&lt;/a&gt; or &lt;a href=&#34;https://github.com/i18next/react-i18next/raw/master/react-i18next.min.js&#34;&gt;downloaded&lt;/a&gt; from this repo.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# npm package&#xA;$ npm install react-i18next&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you don&#39;t use a module loader it will be added to &lt;code&gt;window.reactI18next&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Do you like to read a more complete step by step tutorial?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://locize.com/blog/react-i18next/&#34;&gt;Here&lt;/a&gt; you&#39;ll find a simple tutorial on how to best use react-i18next. Some basics of i18next and some cool possibilities on how to optimize your localization workflow.&lt;/p&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/react&#34;&gt;Example react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/react-typescript&#34;&gt;React examples with typescript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/locize&#34;&gt;Example locize.com&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;v9 samples&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/react&#34;&gt;Example react&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/preact&#34;&gt;Example preact&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/reactnative-expo&#34;&gt;Example react-native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/reactnative-expo&#34;&gt;Example expo.io&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/nextjs&#34;&gt;Example next.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/razzle-ssr&#34;&gt;Example razzle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/dat&#34;&gt;Example hashbase / beaker browser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/storybook&#34;&gt;Example storybook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/locize&#34;&gt;Example locize.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/tree/master/example/v9.x.x/test-jest&#34;&gt;Example test with jest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;react &amp;gt;= &lt;strong&gt;16.8.0&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;react-dom &amp;gt;= &lt;strong&gt;16.8.0&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;react-native &amp;gt;= &lt;strong&gt;0.59.0&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;i18next &amp;gt;= &lt;strong&gt;10.0.0&lt;/strong&gt; (typescript users: &amp;gt;=17.0.9)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;v9&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;react &amp;gt;= &lt;strong&gt;0.14.0&lt;/strong&gt; (in case of &amp;lt; v16 or preact you will need to define parent in &lt;a href=&#34;https://react.i18next.com/legacy-v9/trans-component#trans-props&#34;&gt;Trans component&lt;/a&gt; or globally in &lt;a href=&#34;https://react.i18next.com/legacy-v9/trans-component#additional-options-on-i-18-next-init&#34;&gt;i18next.react options&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;i18next &amp;gt;= &lt;strong&gt;2.0.0&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Core Contributors&lt;/h2&gt; &#xA;&lt;p&gt;Thanks goes to these wonderful people (&lt;a href=&#34;https://github.com/kentcdodds/all-contributors#emoji-key&#34;&gt;emoji key&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section --&gt; &#xA;&lt;!-- prettier-ignore-start --&gt; &#xA;&lt;!-- markdownlint-disable --&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://twitter.com/jamuhl&#34;&gt;&lt;img src=&#34;https://avatars3.githubusercontent.com/u/977772?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Jan Mühlemann&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/commits?author=jamuhl&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/i18next/react-i18next/master/#example-jamuhl&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt; &lt;a href=&#34;https://github.com/i18next/react-i18next/pulls?q=is%3Apr+reviewed-by%3Ajamuhl+&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://github.com/i18next/react-i18next/commits?author=jamuhl&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/i18next/react-i18next/master/#question-jamuhl&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;http://twitter.com/#!/adrirai&#34;&gt;&lt;img src=&#34;https://avatars0.githubusercontent.com/u/1086194?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Adriano Raiano&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/commits?author=adrai&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/i18next/react-i18next/master/#example-adrai&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt; &lt;a href=&#34;https://github.com/i18next/react-i18next/pulls?q=is%3Apr+reviewed-by%3Aadrai+&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://github.com/i18next/react-i18next/commits?author=adrai&#34; title=&#34;Documentation&#34;&gt;📖&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/i18next/react-i18next/master/#question-adrai&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://github.com/pedrodurek&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/12190482?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Pedro Durek&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/commits?author=pedrodurek&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/i18next/react-i18next/master/#example-pedrodurek&#34; title=&#34;Examples&#34;&gt;💡&lt;/a&gt; &lt;a href=&#34;https://github.com/i18next/react-i18next/pulls?q=is%3Apr+reviewed-by%3Apedrodurek+&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/i18next/react-i18next/master/#question-pedrodurek&#34; title=&#34;Answering Questions&#34;&gt;💬&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://tigerabrodi.dev/&#34;&gt;&lt;img src=&#34;https://avatars1.githubusercontent.com/u/49603590?v=4?s=100&#34; width=&#34;100px;&#34; alt=&#34;&#34;&gt;&lt;br&gt;&lt;sub&gt;&lt;b&gt;Tiger Abrodi&lt;/b&gt;&lt;/sub&gt;&lt;/a&gt;&lt;br&gt;&lt;a href=&#34;https://github.com/i18next/react-i18next/commits?author=tigerabrodi&#34; title=&#34;Code&#34;&gt;💻&lt;/a&gt; &lt;a href=&#34;https://github.com/i18next/react-i18next/pulls?q=is%3Apr+reviewed-by%3Atigerabrodi&#34; title=&#34;Reviewed Pull Requests&#34;&gt;👀&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;!-- markdownlint-restore --&gt; &#xA;&lt;!-- prettier-ignore-end --&gt; &#xA;&lt;!-- ALL-CONTRIBUTORS-LIST:END --&gt; &#xA;&lt;p&gt;This project follows the &lt;a href=&#34;https://github.com/kentcdodds/all-contributors&#34;&gt;all-contributors&lt;/a&gt; specification. Contributions of any kind are welcome!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;Gold Sponsors&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://locize.com/&#34; target=&#34;_blank&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/i18next/i18next/master/assets/locize_sponsor_240.gif&#34; width=&#34;240px&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;localization as a service - locize.com&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Needing a translation management? Want to edit your translations with an InContext Editor? Use the original provided to you by the maintainers of i18next!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://locize.com/img/ads/github_locize.png&#34; alt=&#34;locize&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With using &lt;a href=&#34;http://locize.com/?utm_source=react_i18next_readme&amp;amp;utm_medium=github&#34;&gt;locize&lt;/a&gt; you directly support the future of i18next and react-i18next.&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>mishoo/UglifyJS</title>
    <updated>2023-08-31T01:32:08Z</updated>
    <id>tag:github.com,2023-08-31:/mishoo/UglifyJS</id>
    <link href="https://github.com/mishoo/UglifyJS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JavaScript parser / mangler / compressor / beautifier toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;UglifyJS 3&lt;/h1&gt; &#xA;&lt;p&gt;UglifyJS is a JavaScript parser, minifier, compressor and beautifier toolkit.&lt;/p&gt; &#xA;&lt;h4&gt;Note:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;uglify-js&lt;/code&gt; supports JavaScript and most language features in ECMAScript.&lt;/li&gt; &#xA; &lt;li&gt;For more exotic parts of ECMAScript, process your source file with transpilers like &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt; before passing onto &lt;code&gt;uglify-js&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uglify-js@3&lt;/code&gt; has a simplified &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#api-reference&#34;&gt;API&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#command-line-usage&#34;&gt;CLI&lt;/a&gt; that is not backwards compatible with &lt;a href=&#34;https://github.com/mishoo/UglifyJS/tree/v2.x&#34;&gt;&lt;code&gt;uglify-js@2&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;First make sure you have installed the latest version of &lt;a href=&#34;http://nodejs.org/&#34;&gt;node.js&lt;/a&gt; (You may need to restart your computer after this step).&lt;/p&gt; &#xA;&lt;p&gt;From NPM for use as a command line app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install uglify-js -g&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From NPM for programmatic use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install uglify-js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Command line usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;uglifyjs [input files] [options]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UglifyJS can take multiple input files. It&#39;s recommended that you pass the input files first, then pass the options. UglifyJS will parse input files in sequence and apply any compression options. The files are parsed in the same global scope, that is, a reference from a file to some variable/function declared in another file will be matched properly.&lt;/p&gt; &#xA;&lt;p&gt;If no input file is specified, UglifyJS will read from STDIN.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to pass your options before the input files, separate the two with a double dash to prevent input files being used as option arguments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uglifyjs --compress --mangle -- input.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Command line options&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;    -h, --help                  Print usage information.&#xA;                                `--help options` for details on available options.&#xA;    -V, --version               Print version number.&#xA;    -p, --parse &amp;lt;options&amp;gt;       Specify parser options:&#xA;                                `acorn`  Use Acorn for parsing.&#xA;                                `bare_returns`  Allow return outside of functions.&#xA;                                                Useful when minifying CommonJS&#xA;                                                modules and Userscripts that may&#xA;                                                be anonymous function wrapped (IIFE)&#xA;                                                by the .user.js engine `caller`.&#xA;                                `spidermonkey`  Assume input files are SpiderMonkey&#xA;                                                AST format (as JSON).&#xA;    -c, --compress [options]    Enable compressor/specify compressor options:&#xA;                                `pure_funcs`  List of functions that can be safely&#xA;                                              removed when their return values are&#xA;                                              not used.&#xA;    -m, --mangle [options]      Mangle names/specify mangler options:&#xA;                                `reserved`  List of names that should not be mangled.&#xA;    --mangle-props [options]    Mangle properties/specify mangler options:&#xA;                                `builtins`  Mangle property names that overlaps&#xA;                                            with standard JavaScript globals.&#xA;                                `debug`  Add debug prefix and suffix.&#xA;                                `domprops`  Mangle property names that overlaps&#xA;                                            with DOM properties.&#xA;                                `keep_quoted`  Only mangle unquoted properties.&#xA;                                `regex`  Only mangle matched property names.&#xA;                                `reserved`  List of names that should not be mangled.&#xA;    -b, --beautify [options]    Beautify output/specify output options:&#xA;                                `beautify`  Enabled with `--beautify` by default.&#xA;                                `preamble`  Preamble to prepend to the output. You&#xA;                                            can use this to insert a comment, for&#xA;                                            example for licensing information.&#xA;                                            This will not be parsed, but the source&#xA;                                            map will adjust for its presence.&#xA;                                `quote_style`  Quote style:&#xA;                                               0 - auto&#xA;                                               1 - single&#xA;                                               2 - double&#xA;                                               3 - original&#xA;                                `wrap_iife`  Wrap IIFEs in parentheses. Note: you may&#xA;                                             want to disable `negate_iife` under&#xA;                                             compressor options.&#xA;    -O, --output-opts [options] Specify output options (`beautify` disabled by default).&#xA;    -o, --output &amp;lt;file&amp;gt;         Output file path (default STDOUT). Specify `ast` or&#xA;                                `spidermonkey` to write UglifyJS or SpiderMonkey AST&#xA;                                as JSON to STDOUT respectively.&#xA;    --annotations               Process and preserve comment annotations.&#xA;                                (`/*@__PURE__*/` or `/*#__PURE__*/`)&#xA;    --no-annotations            Ignore and discard comment annotations.&#xA;    --comments [filter]         Preserve copyright comments in the output. By&#xA;                                default this works like Google Closure, keeping&#xA;                                JSDoc-style comments that contain &#34;@license&#34; or&#xA;                                &#34;@preserve&#34;. You can optionally pass one of the&#xA;                                following arguments to this flag:&#xA;                                - &#34;all&#34; to keep all comments&#xA;                                - a valid JS RegExp like `/foo/` or `/^!/` to&#xA;                                keep only matching comments.&#xA;                                Note that currently not *all* comments can be&#xA;                                kept when compression is on, because of dead&#xA;                                code removal or cascading statements into&#xA;                                sequences.&#xA;    --config-file &amp;lt;file&amp;gt;        Read `minify()` options from JSON file.&#xA;    -d, --define &amp;lt;expr&amp;gt;[=value] Global definitions.&#xA;    -e, --enclose [arg[:value]] Embed everything in a big function, with configurable&#xA;                                argument(s) &amp;amp; value(s).&#xA;    --expression                Parse a single expression, rather than a program&#xA;                                (for parsing JSON).&#xA;    --ie                        Support non-standard Internet Explorer.&#xA;                                Equivalent to setting `ie: true` in `minify()`&#xA;                                for `compress`, `mangle` and `output` options.&#xA;                                By default UglifyJS will not try to be IE-proof.&#xA;    --keep-fargs                Do not mangle/drop function arguments.&#xA;    --keep-fnames               Do not mangle/drop function names.  Useful for&#xA;                                code relying on Function.prototype.name.&#xA;    --module                    Process input as ES module (implies --toplevel)&#xA;    --no-module                 Avoid optimizations which may alter runtime behavior&#xA;                                under prior versions of JavaScript.&#xA;    --name-cache &amp;lt;file&amp;gt;         File to hold mangled name mappings.&#xA;    --self                      Build UglifyJS as a library (implies --wrap UglifyJS)&#xA;    --source-map [options]      Enable source map/specify source map options:&#xA;                                `base`  Path to compute relative paths from input files.&#xA;                                `content`  Input source map, useful if you&#39;re compressing&#xA;                                           JS that was generated from some other original&#xA;                                           code. Specify &#34;inline&#34; if the source map is&#xA;                                           included within the sources.&#xA;                                `filename`  Filename and/or location of the output source&#xA;                                            (sets `file` attribute in source map).&#xA;                                `includeSources`  Pass this flag if you want to include&#xA;                                                  the content of source files in the&#xA;                                                  source map as sourcesContent property.&#xA;                                `names` Include symbol names in the source map.&#xA;                                `root`  Path to the original source to be included in&#xA;                                        the source map.&#xA;                                `url`  If specified, path to the source map to append in&#xA;                                       `//# sourceMappingURL`.&#xA;    --timings                   Display operations run time on STDERR.&#xA;    --toplevel                  Compress and/or mangle variables in top level scope.&#xA;    --v8                        Support non-standard Chrome &amp;amp; Node.js&#xA;                                Equivalent to setting `v8: true` in `minify()`&#xA;                                for `mangle` and `output` options.&#xA;                                By default UglifyJS will not try to be v8-proof.&#xA;    --verbose                   Print diagnostic messages.&#xA;    --warn                      Print warning messages.&#xA;    --webkit                    Support non-standard Safari/Webkit.&#xA;                                Equivalent to setting `webkit: true` in `minify()`&#xA;                                for `compress`, `mangle` and `output` options.&#xA;                                By default UglifyJS will not try to be Safari-proof.&#xA;    --wrap &amp;lt;name&amp;gt;               Embed everything in a big function, making the&#xA;                                “exports” and “global” variables available. You&#xA;                                need to pass an argument to this option to&#xA;                                specify the name that your module will take&#xA;                                when included in, say, a browser.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Specify &lt;code&gt;--output&lt;/code&gt; (&lt;code&gt;-o&lt;/code&gt;) to declare the output file. Otherwise the output goes to STDOUT.&lt;/p&gt; &#xA;&lt;h2&gt;CLI source map options&lt;/h2&gt; &#xA;&lt;p&gt;UglifyJS can generate a source map file, which is highly useful for debugging your compressed JavaScript. To get a source map, pass &lt;code&gt;--source-map --output output.js&lt;/code&gt; (source map will be written out to &lt;code&gt;output.js.map&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Additional options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--source-map &#34;filename=&#39;&amp;lt;NAME&amp;gt;&#39;&#34;&lt;/code&gt; to specify the name of the source map. The value of &lt;code&gt;filename&lt;/code&gt; is only used to set &lt;code&gt;file&lt;/code&gt; attribute (see &lt;a href=&#34;https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k&#34;&gt;the spec&lt;/a&gt;) in source map file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--source-map &#34;root=&#39;&amp;lt;URL&amp;gt;&#39;&#34;&lt;/code&gt; to pass the URL where the original files can be found.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--source-map &#34;names=false&#34;&lt;/code&gt; to omit symbol names if you want to reduce size of the source map file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--source-map &#34;url=&#39;&amp;lt;URL&amp;gt;&#39;&#34;&lt;/code&gt; to specify the URL where the source map can be found. Otherwise UglifyJS assumes HTTP &lt;code&gt;X-SourceMap&lt;/code&gt; is being used and will omit the &lt;code&gt;//# sourceMappingURL=&lt;/code&gt; directive.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uglifyjs js/file1.js js/file2.js \&#xA;         -o foo.min.js -c -m \&#xA;         --source-map &#34;root=&#39;http://foo.com/src&#39;,url=&#39;foo.min.js.map&#39;&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above will compress and mangle &lt;code&gt;file1.js&lt;/code&gt; and &lt;code&gt;file2.js&lt;/code&gt;, will drop the output in &lt;code&gt;foo.min.js&lt;/code&gt; and the source map in &lt;code&gt;foo.min.js.map&lt;/code&gt;. The source mapping will refer to &lt;code&gt;http://foo.com/src/js/file1.js&lt;/code&gt; and &lt;code&gt;http://foo.com/src/js/file2.js&lt;/code&gt; (in fact it will list &lt;code&gt;http://foo.com/src&lt;/code&gt; as the source map root, and the original files as &lt;code&gt;js/file1.js&lt;/code&gt; and &lt;code&gt;js/file2.js&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Composed source map&lt;/h3&gt; &#xA;&lt;p&gt;When you&#39;re compressing JS code that was output by a compiler such as CoffeeScript, mapping to the JS code won&#39;t be too helpful. Instead, you&#39;d like to map back to the original code (i.e. CoffeeScript). UglifyJS has an option to take an input source map. Assuming you have a mapping from CoffeeScript → compiled JS, UglifyJS can generate a map from CoffeeScript → compressed JS by mapping every token in the compiled JS to its original location.&lt;/p&gt; &#xA;&lt;p&gt;To use this feature pass &lt;code&gt;--source-map &#34;content=&#39;/path/to/input/source.map&#39;&#34;&lt;/code&gt; or &lt;code&gt;--source-map &#34;content=inline&#34;&lt;/code&gt; if the source map is included inline with the sources.&lt;/p&gt; &#xA;&lt;h2&gt;CLI compress options&lt;/h2&gt; &#xA;&lt;p&gt;You need to pass &lt;code&gt;--compress&lt;/code&gt; (&lt;code&gt;-c&lt;/code&gt;) to enable the compressor. Optionally you can pass a comma-separated list of &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#compress-options&#34;&gt;compress options&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Options are in the form &lt;code&gt;foo=bar&lt;/code&gt;, or just &lt;code&gt;foo&lt;/code&gt; (the latter implies a boolean option that you want to set &lt;code&gt;true&lt;/code&gt;; it&#39;s effectively a shortcut for &lt;code&gt;foo=true&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uglifyjs file.js -c toplevel,sequences=false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI mangle options&lt;/h2&gt; &#xA;&lt;p&gt;To enable the mangler you need to pass &lt;code&gt;--mangle&lt;/code&gt; (&lt;code&gt;-m&lt;/code&gt;). The following (comma-separated) options are supported:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eval&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — mangle names visible in scopes where &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;with&lt;/code&gt; are used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reserved&lt;/code&gt; (default: &lt;code&gt;[]&lt;/code&gt;) — when mangling is enabled but you want to prevent certain names from being mangled, you can declare those names with &lt;code&gt;--mangle reserved&lt;/code&gt; — pass a comma-separated list of names. For example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;uglifyjs ... -m reserved=[&#39;$&#39;,&#39;require&#39;,&#39;exports&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to prevent the &lt;code&gt;require&lt;/code&gt;, &lt;code&gt;exports&lt;/code&gt; and &lt;code&gt;$&lt;/code&gt; names from being changed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;CLI mangling property names (&lt;code&gt;--mangle-props&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; THIS WILL PROBABLY BREAK YOUR CODE. Mangling property names is a separate step, different from variable name mangling. Pass &lt;code&gt;--mangle-props&lt;/code&gt; to enable it. It will mangle all properties in the input code with the exception of built in DOM properties and properties in core JavaScript classes. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// example.js&#xA;var x = {&#xA;    baz_: 0,&#xA;    foo_: 1,&#xA;    calc: function() {&#xA;        return this.foo_ + this.baz_;&#xA;    }&#xA;};&#xA;x.bar_ = 2;&#xA;x[&#34;baz_&#34;] = 3;&#xA;console.log(x.calc());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mangle all properties (except for JavaScript &lt;code&gt;builtins&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uglifyjs example.js -c -m --mangle-props&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x={o:0,_:1,l:function(){return this._+this.o}};x.t=2,x.o=3,console.log(x.l());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mangle all properties except for &lt;code&gt;reserved&lt;/code&gt; properties:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uglifyjs example.js -c -m --mangle-props reserved=[foo_,bar_]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x={o:0,foo_:1,_:function(){return this.foo_+this.o}};x.bar_=2,x.o=3,console.log(x._());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Mangle all properties matching a &lt;code&gt;regex&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uglifyjs example.js -c -m --mangle-props regex=/_$/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x={o:0,_:1,calc:function(){return this._+this.o}};x.l=2,x.o=3,console.log(x.calc());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Combining mangle properties options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uglifyjs example.js -c -m --mangle-props regex=/_$/,reserved=[bar_]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var x={o:0,_:1,calc:function(){return this._+this.o}};x.bar_=2,x.o=3,console.log(x.calc());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In order for this to be of any use, we avoid mangling standard JS names by default (&lt;code&gt;--mangle-props builtins&lt;/code&gt; to override).&lt;/p&gt; &#xA;&lt;p&gt;A default exclusion file is provided in &lt;code&gt;tools/domprops.json&lt;/code&gt; which should cover most standard JS and DOM properties defined in various browsers. Pass &lt;code&gt;--mangle-props domprops&lt;/code&gt; to disable this feature.&lt;/p&gt; &#xA;&lt;p&gt;A regular expression can be used to define which property names should be mangled. For example, &lt;code&gt;--mangle-props regex=/^_/&lt;/code&gt; will only mangle property names that start with an underscore.&lt;/p&gt; &#xA;&lt;p&gt;When you compress multiple files using this option, in order for them to work together in the end we need to ensure somehow that one property gets mangled to the same name in all of them. For this, pass &lt;code&gt;--name-cache filename.json&lt;/code&gt; and UglifyJS will maintain these mappings in a file which can then be reused. It should be initially empty. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ rm -f /tmp/cache.json  # start fresh&#xA;$ uglifyjs file1.js file2.js --mangle-props --name-cache /tmp/cache.json -o part1.js&#xA;$ uglifyjs file3.js file4.js --mangle-props --name-cache /tmp/cache.json -o part2.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, &lt;code&gt;part1.js&lt;/code&gt; and &lt;code&gt;part2.js&lt;/code&gt; will be consistent with each other in terms of mangled property names.&lt;/p&gt; &#xA;&lt;p&gt;Using the name cache is not necessary if you compress all your files in a single call to UglifyJS.&lt;/p&gt; &#xA;&lt;h3&gt;Mangling unquoted names (&lt;code&gt;--mangle-props keep_quoted&lt;/code&gt;)&lt;/h3&gt; &#xA;&lt;p&gt;Using quoted property name (&lt;code&gt;o[&#34;foo&#34;]&lt;/code&gt;) reserves the property name (&lt;code&gt;foo&lt;/code&gt;) so that it is not mangled throughout the entire script even when used in an unquoted style (&lt;code&gt;o.foo&lt;/code&gt;). Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// stuff.js&#xA;var o = {&#xA;    &#34;foo&#34;: 1,&#xA;    bar: 3,&#xA;};&#xA;o.foo += o.bar;&#xA;console.log(o.foo);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uglifyjs stuff.js --mangle-props keep_quoted -c -m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var o={foo:1,o:3};o.foo+=o.o,console.log(o.foo);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the minified output will be processed again by UglifyJS, consider specifying &lt;code&gt;keep_quoted_props&lt;/code&gt; so the same property names are preserved:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uglifyjs stuff.js --mangle-props keep_quoted -c -m -O keep_quoted_props&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var o={&#34;foo&#34;:1,o:3};o.foo+=o.o,console.log(o.foo);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debugging property name mangling&lt;/h3&gt; &#xA;&lt;p&gt;You can also pass &lt;code&gt;--mangle-props debug&lt;/code&gt; in order to mangle property names without completely obscuring them. For example the property &lt;code&gt;o.foo&lt;/code&gt; would mangle to &lt;code&gt;o._$foo$_&lt;/code&gt; with this option. This allows property mangling of a large codebase while still being able to debug the code and identify where mangling is breaking things.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ uglifyjs stuff.js --mangle-props debug -c -m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var o={_$foo$_:1,_$bar$_:3};o._$foo$_+=o._$bar$_,console.log(o._$foo$_);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also pass a custom suffix using &lt;code&gt;--mangle-props debug=XYZ&lt;/code&gt;. This would then mangle &lt;code&gt;o.foo&lt;/code&gt; to &lt;code&gt;o._$foo$XYZ_&lt;/code&gt;. You can change this each time you compile a script to identify how a property got mangled. One technique is to pass a random number on every compile to simulate mangling changing with different inputs (e.g. as you update the input script with new properties), and to help identify mistakes like writing mangled keys to storage.&lt;/p&gt; &#xA;&lt;h1&gt;API Reference&lt;/h1&gt; &#xA;&lt;p&gt;Assuming installation via NPM, you can load UglifyJS in your application like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var UglifyJS = require(&#34;uglify-js&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is a single high level function, &lt;strong&gt;&lt;code&gt;minify(code, options)&lt;/code&gt;&lt;/strong&gt;, which will perform all minification &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#minify-options&#34;&gt;phases&lt;/a&gt; in a configurable manner. By default &lt;code&gt;minify()&lt;/code&gt; will enable the options &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#compress-options&#34;&gt;&lt;code&gt;compress&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#mangle-options&#34;&gt;&lt;code&gt;mangle&lt;/code&gt;&lt;/a&gt;. Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var code = &#34;function add(first, second) { return first + second; }&#34;;&#xA;var result = UglifyJS.minify(code);&#xA;console.log(result.error); // runtime error, or `undefined` if no error&#xA;console.log(result.code);  // minified output: function add(n,d){return n+d}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can &lt;code&gt;minify&lt;/code&gt; more than one JavaScript file at a time by using an object for the first argument where the keys are file names and the values are source code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var code = {&#xA;    &#34;file1.js&#34;: &#34;function add(first, second) { return first + second; }&#34;,&#xA;    &#34;file2.js&#34;: &#34;console.log(add(1 + 2, 3 + 4));&#34;&#xA;};&#xA;var result = UglifyJS.minify(code);&#xA;console.log(result.code);&#xA;// function add(d,n){return d+n}console.log(add(3,7));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;toplevel&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var code = {&#xA;    &#34;file1.js&#34;: &#34;function add(first, second) { return first + second; }&#34;,&#xA;    &#34;file2.js&#34;: &#34;console.log(add(1 + 2, 3 + 4));&#34;&#xA;};&#xA;var options = { toplevel: true };&#xA;var result = UglifyJS.minify(code, options);&#xA;console.log(result.code);&#xA;// console.log(3+7);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;nameCache&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var options = {&#xA;    mangle: {&#xA;        toplevel: true,&#xA;    },&#xA;    nameCache: {}&#xA;};&#xA;var result1 = UglifyJS.minify({&#xA;    &#34;file1.js&#34;: &#34;function add(first, second) { return first + second; }&#34;&#xA;}, options);&#xA;var result2 = UglifyJS.minify({&#xA;    &#34;file2.js&#34;: &#34;console.log(add(1 + 2, 3 + 4));&#34;&#xA;}, options);&#xA;console.log(result1.code);&#xA;// function n(n,r){return n+r}&#xA;console.log(result2.code);&#xA;// console.log(n(3,7));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You may persist the name cache to the file system in the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var cacheFileName = &#34;/tmp/cache.json&#34;;&#xA;var options = {&#xA;    mangle: {&#xA;        properties: true,&#xA;    },&#xA;    nameCache: JSON.parse(fs.readFileSync(cacheFileName, &#34;utf8&#34;))&#xA;};&#xA;fs.writeFileSync(&#34;part1.js&#34;, UglifyJS.minify({&#xA;    &#34;file1.js&#34;: fs.readFileSync(&#34;file1.js&#34;, &#34;utf8&#34;),&#xA;    &#34;file2.js&#34;: fs.readFileSync(&#34;file2.js&#34;, &#34;utf8&#34;)&#xA;}, options).code, &#34;utf8&#34;);&#xA;fs.writeFileSync(&#34;part2.js&#34;, UglifyJS.minify({&#xA;    &#34;file3.js&#34;: fs.readFileSync(&#34;file3.js&#34;, &#34;utf8&#34;),&#xA;    &#34;file4.js&#34;: fs.readFileSync(&#34;file4.js&#34;, &#34;utf8&#34;)&#xA;}, options).code, &#34;utf8&#34;);&#xA;fs.writeFileSync(cacheFileName, JSON.stringify(options.nameCache), &#34;utf8&#34;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An example of a combination of &lt;code&gt;minify()&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var code = {&#xA;    &#34;file1.js&#34;: &#34;function add(first, second) { return first + second; }&#34;,&#xA;    &#34;file2.js&#34;: &#34;console.log(add(1 + 2, 3 + 4));&#34;&#xA;};&#xA;var options = {&#xA;    toplevel: true,&#xA;    compress: {&#xA;        global_defs: {&#xA;            &#34;@console.log&#34;: &#34;alert&#34;&#xA;        },&#xA;        passes: 2&#xA;    },&#xA;    output: {&#xA;        beautify: false,&#xA;        preamble: &#34;/* uglified */&#34;&#xA;    }&#xA;};&#xA;var result = UglifyJS.minify(code, options);&#xA;console.log(result.code);&#xA;// /* uglified */&#xA;// alert(10);&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To produce warnings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var code = &#34;function f(){ var u; return 2 + 3; }&#34;;&#xA;var options = { warnings: true };&#xA;var result = UglifyJS.minify(code, options);&#xA;console.log(result.error);    // runtime error, `undefined` in this case&#xA;console.log(result.warnings); // [ &#39;Dropping unused variable u [0:1,18]&#39; ]&#xA;console.log(result.code);     // function f(){return 5}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An error example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = UglifyJS.minify({&#34;foo.js&#34; : &#34;if (0) else console.log(1);&#34;});&#xA;console.log(JSON.stringify(result.error));&#xA;// {&#34;message&#34;:&#34;Unexpected token: keyword (else)&#34;,&#34;filename&#34;:&#34;foo.js&#34;,&#34;line&#34;:1,&#34;col&#34;:7,&#34;pos&#34;:7}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: unlike &lt;code&gt;uglify-js@2.x&lt;/code&gt;, the &lt;code&gt;3.x&lt;/code&gt; API does not throw errors. To achieve a similar effect one could do the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = UglifyJS.minify(code, options);&#xA;if (result.error) throw result.error;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Minify options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotations&lt;/code&gt; — pass &lt;code&gt;false&lt;/code&gt; to ignore all comment annotations and elide them from output. Useful when, for instance, external tools incorrectly applied &lt;code&gt;/*@__PURE__*/&lt;/code&gt; or &lt;code&gt;/*#__PURE__*/&lt;/code&gt;. Pass &lt;code&gt;true&lt;/code&gt; to both compress and retain comment annotations in output to allow for further processing downstream.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;compress&lt;/code&gt; (default: &lt;code&gt;{}&lt;/code&gt;) — pass &lt;code&gt;false&lt;/code&gt; to skip compressing entirely. Pass an object to specify custom &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#compress-options&#34;&gt;compress options&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;expression&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — parse as a single expression, e.g. JSON.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ie&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — enable workarounds for Internet Explorer bugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keep_fargs&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; to prevent discarding or mangling of function arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keep_fnames&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; to prevent discarding or mangling of function names. Useful for code relying on &lt;code&gt;Function.prototype.name&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;mangle&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — pass &lt;code&gt;false&lt;/code&gt; to skip mangling names, or pass an object to specify &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#mangle-options&#34;&gt;mangle options&lt;/a&gt; (see below).&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;mangle.properties&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — a subcategory of the mangle option. Pass an object to specify custom &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#mangle-properties-options&#34;&gt;mangle property options&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;module&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — process input as ES module, i.e. implicit &lt;code&gt;&#34;use strict&#34;;&lt;/code&gt; and support for top-level &lt;code&gt;await&lt;/code&gt;. When explicitly specified, also enables &lt;code&gt;toplevel&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;nameCache&lt;/code&gt; (default: &lt;code&gt;null&lt;/code&gt;) — pass an empty object &lt;code&gt;{}&lt;/code&gt; or a previously used &lt;code&gt;nameCache&lt;/code&gt; object if you wish to cache mangled variable and property names across multiple invocations of &lt;code&gt;minify()&lt;/code&gt;. Note: this is a read/write property. &lt;code&gt;minify()&lt;/code&gt; will read the name cache state of this object and update it during minification so that it may be reused or externally persisted by the user.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;output&lt;/code&gt; (default: &lt;code&gt;null&lt;/code&gt;) — pass an object if you wish to specify additional &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#output-options&#34;&gt;output options&lt;/a&gt;. The defaults are optimized for best compression.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;parse&lt;/code&gt; (default: &lt;code&gt;{}&lt;/code&gt;) — pass an object if you wish to specify some additional &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#parse-options&#34;&gt;parse options&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sourceMap&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass an object if you wish to specify &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#source-map-options&#34;&gt;source map options&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;toplevel&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — set to &lt;code&gt;true&lt;/code&gt; if you wish to enable top level variable and function name mangling and to drop unused variables and functions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;v8&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — enable workarounds for Chrome &amp;amp; Node.js bugs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;warnings&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; to return compressor warnings in &lt;code&gt;result.warnings&lt;/code&gt;. Use the value &lt;code&gt;&#34;verbose&#34;&lt;/code&gt; for more detailed warnings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;webkit&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — enable workarounds for Safari/WebKit bugs. PhantomJS users should set this option to &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Minify options structure&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{&#xA;    parse: {&#xA;        // parse options&#xA;    },&#xA;    compress: {&#xA;        // compress options&#xA;    },&#xA;    mangle: {&#xA;        // mangle options&#xA;&#xA;        properties: {&#xA;            // mangle property options&#xA;        }&#xA;    },&#xA;    output: {&#xA;        // output options&#xA;    },&#xA;    sourceMap: {&#xA;        // source map options&#xA;    },&#xA;    nameCache: null, // or specify a name cache object&#xA;    toplevel: false,&#xA;    warnings: false,&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Source map options&lt;/h3&gt; &#xA;&lt;p&gt;To generate a source map:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = UglifyJS.minify({&#34;file1.js&#34;: &#34;var a = function() {};&#34;}, {&#xA;    sourceMap: {&#xA;        filename: &#34;out.js&#34;,&#xA;        url: &#34;out.js.map&#34;&#xA;    }&#xA;});&#xA;console.log(result.code); // minified output&#xA;console.log(result.map);  // source map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the source map is not saved in a file, it&#39;s just returned in &lt;code&gt;result.map&lt;/code&gt;. The value passed for &lt;code&gt;sourceMap.url&lt;/code&gt; is only used to set &lt;code&gt;//# sourceMappingURL=out.js.map&lt;/code&gt; in &lt;code&gt;result.code&lt;/code&gt;. The value of &lt;code&gt;filename&lt;/code&gt; is only used to set &lt;code&gt;file&lt;/code&gt; attribute (see &lt;a href=&#34;https://docs.google.com/document/d/1U1RGAehQwRypUTovF1KRlpiOFze0b-_2gc6fAH0KY0k&#34;&gt;the spec&lt;/a&gt;) in source map file.&lt;/p&gt; &#xA;&lt;p&gt;You can set option &lt;code&gt;sourceMap.url&lt;/code&gt; to be &lt;code&gt;&#34;inline&#34;&lt;/code&gt; and source map will be appended to code.&lt;/p&gt; &#xA;&lt;p&gt;You can also specify sourceRoot property to be included in source map:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = UglifyJS.minify({&#34;file1.js&#34;: &#34;var a = function() {};&#34;}, {&#xA;    sourceMap: {&#xA;        root: &#34;http://example.com/src&#34;,&#xA;        url: &#34;out.js.map&#34;&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re compressing compiled JavaScript and have a source map for it, you can use &lt;code&gt;sourceMap.content&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = UglifyJS.minify({&#34;compiled.js&#34;: &#34;compiled code&#34;}, {&#xA;    sourceMap: {&#xA;        content: &#34;content from compiled.js.map&#34;,&#xA;        url: &#34;minified.js.map&#34;&#xA;    }&#xA;});&#xA;// same as before, it returns `code` and `map`&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re using the &lt;code&gt;X-SourceMap&lt;/code&gt; header instead, you can just omit &lt;code&gt;sourceMap.url&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you wish to reduce file size of the source map, set option &lt;code&gt;sourceMap.names&lt;/code&gt; to be &lt;code&gt;false&lt;/code&gt; and all symbol names will be omitted.&lt;/p&gt; &#xA;&lt;h2&gt;Parse options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;bare_returns&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — support top level &lt;code&gt;return&lt;/code&gt; statements&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;html5_comments&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — process HTML comment as workaround for browsers which do not recognize &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tags&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;module&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — set to &lt;code&gt;true&lt;/code&gt; if you wish to process input as ES module, i.e. implicit &lt;code&gt;&#34;use strict&#34;;&lt;/code&gt; and support for top-level &lt;code&gt;await&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;shebang&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — support &lt;code&gt;#!command&lt;/code&gt; as the first line&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Compress options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotations&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — Pass &lt;code&gt;false&lt;/code&gt; to disable potentially dropping functions marked as &#34;pure&#34;. A function call is marked as &#34;pure&#34; if a comment annotation &lt;code&gt;/*@__PURE__*/&lt;/code&gt; or &lt;code&gt;/*#__PURE__*/&lt;/code&gt; immediately precedes the call. For example: &lt;code&gt;/*@__PURE__*/foo();&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;arguments&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — replace &lt;code&gt;arguments[index]&lt;/code&gt; with function parameter name whenever possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;arrows&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — apply optimizations to arrow functions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;assignments&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — apply optimizations to assignment expressions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;awaits&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — apply optimizations to &lt;code&gt;await&lt;/code&gt; expressions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;booleans&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — various optimizations for boolean context, for example &lt;code&gt;!!a ? b : c → a ? b : c&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;collapse_vars&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — Collapse single-use non-constant variables, side effects permitting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;comparisons&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — apply certain optimizations to binary nodes, e.g. &lt;code&gt;!(a &amp;lt;= b) → a &amp;gt; b&lt;/code&gt;, attempts to negate binary nodes, e.g. &lt;code&gt;a = !b &amp;amp;&amp;amp; !c &amp;amp;&amp;amp; !d &amp;amp;&amp;amp; !e → a=!(b||c||d||e)&lt;/code&gt; etc.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;conditionals&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — apply optimizations for &lt;code&gt;if&lt;/code&gt;-s and conditional expressions&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;dead_code&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — remove unreachable code&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;default_values&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — drop overshadowed default values&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;directives&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — remove redundant or non-standard directives&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;drop_console&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Pass &lt;code&gt;true&lt;/code&gt; to discard calls to &lt;code&gt;console.*&lt;/code&gt; functions. If you wish to drop a specific function call such as &lt;code&gt;console.info&lt;/code&gt; and/or retain side effects from function arguments after dropping the function call then use &lt;code&gt;pure_funcs&lt;/code&gt; instead.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;drop_debugger&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — remove &lt;code&gt;debugger;&lt;/code&gt; statements&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;evaluate&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — Evaluate expression for shorter constant representation. Pass &lt;code&gt;&#34;eager&#34;&lt;/code&gt; to always replace function calls whenever possible, or a positive integer to specify an upper bound for each individual evaluation in number of characters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;expression&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Pass &lt;code&gt;true&lt;/code&gt; to preserve completion values from terminal statements without &lt;code&gt;return&lt;/code&gt;, e.g. in bookmarklets.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;functions&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — convert declarations from &lt;code&gt;var&lt;/code&gt; to &lt;code&gt;function&lt;/code&gt; whenever possible.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;global_defs&lt;/code&gt; (default: &lt;code&gt;{}&lt;/code&gt;) — see &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#conditional-compilation&#34;&gt;conditional compilation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;hoist_exports&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — hoist &lt;code&gt;export&lt;/code&gt; statements to facilitate various &lt;code&gt;compress&lt;/code&gt; and &lt;code&gt;mangle&lt;/code&gt; optimizations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;hoist_funs&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — hoist function declarations&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;hoist_props&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — hoist properties from constant object and array literals into regular variables subject to a set of constraints. For example: &lt;code&gt;var o={p:1, q:2}; f(o.p, o.q);&lt;/code&gt; is converted to &lt;code&gt;f(1, 2);&lt;/code&gt;. Note: &lt;code&gt;hoist_props&lt;/code&gt; works best with &lt;code&gt;toplevel&lt;/code&gt; and &lt;code&gt;mangle&lt;/code&gt; enabled, alongside with &lt;code&gt;compress&lt;/code&gt; option &lt;code&gt;passes&lt;/code&gt; set to &lt;code&gt;2&lt;/code&gt; or higher.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;hoist_vars&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — hoist &lt;code&gt;var&lt;/code&gt; declarations (this is &lt;code&gt;false&lt;/code&gt; by default because it seems to increase the size of the output in general)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;if_return&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — optimizations for if/return and if/continue&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;imports&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — drop unreferenced import symbols when used with &lt;code&gt;unused&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;inline&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — inline calls to function with simple/&lt;code&gt;return&lt;/code&gt; statement:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;false&lt;/code&gt; — same as &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;0&lt;/code&gt; — disabled inlining&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;1&lt;/code&gt; — inline simple functions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;2&lt;/code&gt; — inline functions with arguments&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;3&lt;/code&gt; — inline functions with arguments and variables&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;4&lt;/code&gt; — inline functions with arguments, variables and statements&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;true&lt;/code&gt; — same as &lt;code&gt;4&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;join_vars&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — join consecutive &lt;code&gt;var&lt;/code&gt; statements&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keep_fargs&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — discard unused function arguments except when unsafe to do so, e.g. code which relies on &lt;code&gt;Function.prototype.length&lt;/code&gt;. Pass &lt;code&gt;true&lt;/code&gt; to always retain function arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keep_infinity&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Pass &lt;code&gt;true&lt;/code&gt; to prevent &lt;code&gt;Infinity&lt;/code&gt; from being compressed into &lt;code&gt;1/0&lt;/code&gt;, which may cause performance issues on Chrome.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;loops&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — optimizations for &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; and &lt;code&gt;for&lt;/code&gt; loops when we can statically determine the condition.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;merge_vars&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — combine and reuse variables.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;module&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — set to &lt;code&gt;true&lt;/code&gt; if you wish to process input as ES module, i.e. implicit &lt;code&gt;&#34;use strict&#34;;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;negate_iife&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — negate &#34;Immediately-Called Function Expressions&#34; where the return value is discarded, to avoid the parentheses that the code generator would insert.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;objects&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — compact duplicate keys in object literals.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;passes&lt;/code&gt; (default: &lt;code&gt;1&lt;/code&gt;) — The maximum number of times to run compress. In some cases more than one pass leads to further compressed code. Keep in mind more passes will take more time.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;properties&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — rewrite property access using the dot notation, for example &lt;code&gt;foo[&#34;bar&#34;] → foo.bar&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pure_funcs&lt;/code&gt; (default: &lt;code&gt;null&lt;/code&gt;) — You can pass an array of names and UglifyJS will assume that those functions do not produce side effects. DANGER: will not check if the name is redefined in scope. An example case here, for instance &lt;code&gt;var q = Math.floor(a/b)&lt;/code&gt;. If variable &lt;code&gt;q&lt;/code&gt; is not used elsewhere, UglifyJS will drop it, but will still keep the &lt;code&gt;Math.floor(a/b)&lt;/code&gt;, not knowing what it does. You can pass &lt;code&gt;pure_funcs: [ &#39;Math.floor&#39; ]&lt;/code&gt; to let it know that this function won&#39;t produce any side effect, in which case the whole statement would get discarded. The current implementation adds some overhead (compression will be slower). Make sure symbols under &lt;code&gt;pure_funcs&lt;/code&gt; are also under &lt;code&gt;mangle.reserved&lt;/code&gt; to avoid mangling.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;pure_getters&lt;/code&gt; (default: &lt;code&gt;&#34;strict&#34;&lt;/code&gt;) — If you pass &lt;code&gt;true&lt;/code&gt; for this, UglifyJS will assume that object property access (e.g. &lt;code&gt;foo.bar&lt;/code&gt; or &lt;code&gt;foo[&#34;bar&#34;]&lt;/code&gt;) doesn&#39;t have any side effects. Specify &lt;code&gt;&#34;strict&#34;&lt;/code&gt; to treat &lt;code&gt;foo.bar&lt;/code&gt; as side-effect-free only when &lt;code&gt;foo&lt;/code&gt; is certain to not throw, i.e. not &lt;code&gt;null&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reduce_funcs&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — Allows single-use functions to be inlined as function expressions when permissible allowing further optimization. Enabled by default. Option depends on &lt;code&gt;reduce_vars&lt;/code&gt; being enabled. Some code runs faster in the Chrome V8 engine if this option is disabled. Does not negatively impact other major browsers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reduce_vars&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — Improve optimization on variables assigned with and used as constant values.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;rests&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — apply optimizations to rest parameters&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;sequences&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — join consecutive simple statements using the comma operator. May be set to a positive integer to specify the maximum number of consecutive comma sequences that will be generated. If this option is set to &lt;code&gt;true&lt;/code&gt; then the default &lt;code&gt;sequences&lt;/code&gt; limit is &lt;code&gt;200&lt;/code&gt;. Set option to &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;0&lt;/code&gt; to disable. The smallest &lt;code&gt;sequences&lt;/code&gt; length is &lt;code&gt;2&lt;/code&gt;. A &lt;code&gt;sequences&lt;/code&gt; value of &lt;code&gt;1&lt;/code&gt; is grandfathered to be equivalent to &lt;code&gt;true&lt;/code&gt; and as such means &lt;code&gt;200&lt;/code&gt;. On rare occasions the default sequences limit leads to very slow compress times in which case a value of &lt;code&gt;20&lt;/code&gt; or less is recommended.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;side_effects&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — drop extraneous code which does not affect outcome of runtime execution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;spreads&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — flatten spread expressions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;strings&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — compact string concatenations.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;switches&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — de-duplicate and remove unreachable &lt;code&gt;switch&lt;/code&gt; branches&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;templates&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — compact template literals by embedding expressions and/or converting to string literals, e.g. &lt;code&gt; `foo ${42}` → &#34;foo 42&#34;&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;top_retain&lt;/code&gt; (default: &lt;code&gt;null&lt;/code&gt;) — prevent specific toplevel functions and variables from &lt;code&gt;unused&lt;/code&gt; removal (can be array, comma-separated, RegExp or function. Implies &lt;code&gt;toplevel&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;toplevel&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — drop unreferenced functions (&lt;code&gt;&#34;funcs&#34;&lt;/code&gt;) and/or variables (&lt;code&gt;&#34;vars&#34;&lt;/code&gt;) in the top level scope (&lt;code&gt;false&lt;/code&gt; by default, &lt;code&gt;true&lt;/code&gt; to drop both unreferenced functions and variables)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;typeofs&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — compress &lt;code&gt;typeof&lt;/code&gt; expressions, e.g. &lt;code&gt;typeof foo == &#34;undefined&#34; → void 0 === foo&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unsafe&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — apply &#34;unsafe&#34; transformations (discussion below)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unsafe_comps&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — assume operands cannot be (coerced to) &lt;code&gt;NaN&lt;/code&gt; in numeric comparisons, e.g. &lt;code&gt;a &amp;lt;= b&lt;/code&gt;. In addition, expressions involving &lt;code&gt;in&lt;/code&gt; or &lt;code&gt;instanceof&lt;/code&gt; would never throw.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unsafe_Function&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — compress and mangle &lt;code&gt;Function(args, code)&lt;/code&gt; when both &lt;code&gt;args&lt;/code&gt; and &lt;code&gt;code&lt;/code&gt; are string literals.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unsafe_math&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — optimize numerical expressions like &lt;code&gt;2 * x * 3&lt;/code&gt; into &lt;code&gt;6 * x&lt;/code&gt;, which may give imprecise floating point results.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unsafe_proto&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — optimize expressions like &lt;code&gt;Array.prototype.slice.call(a)&lt;/code&gt; into &lt;code&gt;[].slice.call(a)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unsafe_regexp&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — enable substitutions of variables with &lt;code&gt;RegExp&lt;/code&gt; values the same way as if they are constants.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unsafe_undefined&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — substitute &lt;code&gt;void 0&lt;/code&gt; if there is a variable named &lt;code&gt;undefined&lt;/code&gt; in scope (variable name will be mangled, typically reduced to a single character)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;unused&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — drop unreferenced functions and variables (simple direct variable assignments do not count as references unless set to &lt;code&gt;&#34;keep_assign&#34;&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;varify&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — convert block-scoped declarations into &lt;code&gt;var&lt;/code&gt; whenever safe to do so&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;yields&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — apply optimizations to &lt;code&gt;yield&lt;/code&gt; expressions&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Mangle options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;eval&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Pass &lt;code&gt;true&lt;/code&gt; to mangle names visible in scopes where &lt;code&gt;eval&lt;/code&gt; or &lt;code&gt;with&lt;/code&gt; are used.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reserved&lt;/code&gt; (default: &lt;code&gt;[]&lt;/code&gt;) — Pass an array of identifiers that should be excluded from mangling. Example: &lt;code&gt;[&#34;foo&#34;, &#34;bar&#34;]&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;toplevel&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Pass &lt;code&gt;true&lt;/code&gt; to mangle names declared in the top level scope.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// test.js&#xA;var globalVar;&#xA;function funcName(firstLongName, anotherLongName) {&#xA;    var myVariable = firstLongName +  anotherLongName;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var code = fs.readFileSync(&#34;test.js&#34;, &#34;utf8&#34;);&#xA;&#xA;UglifyJS.minify(code).code;&#xA;// &#39;function funcName(a,n){}var globalVar;&#39;&#xA;&#xA;UglifyJS.minify(code, { mangle: { reserved: [&#39;firstLongName&#39;] } }).code;&#xA;// &#39;function funcName(firstLongName,a){}var globalVar;&#39;&#xA;&#xA;UglifyJS.minify(code, { mangle: { toplevel: true } }).code;&#xA;// &#39;function n(n,a){}var a;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Mangle properties options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;builtins&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Use &lt;code&gt;true&lt;/code&gt; to allow the mangling of built-in properties of JavaScript API. Not recommended to override this setting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;debug&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Mangle names with the original name still present. Pass an empty string &lt;code&gt;&#34;&#34;&lt;/code&gt; to enable, or a non-empty string to set the debug suffix.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;domprops&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Use &lt;code&gt;true&lt;/code&gt; to allow the mangling of properties commonly found in Document Object Model. Not recommended to override this setting.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keep_fargs&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Use &lt;code&gt;true&lt;/code&gt; to prevent mangling of function arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keep_quoted&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — Only mangle unquoted property names.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;regex&lt;/code&gt; (default: &lt;code&gt;null&lt;/code&gt;) — Pass a RegExp literal to only mangle property names matching the regular expression.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;reserved&lt;/code&gt; (default: &lt;code&gt;[]&lt;/code&gt;) — Do not mangle property names listed in the &lt;code&gt;reserved&lt;/code&gt; array.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Output options&lt;/h2&gt; &#xA;&lt;p&gt;The code generator tries to output shortest code possible by default. In case you want beautified output, pass &lt;code&gt;--beautify&lt;/code&gt; (&lt;code&gt;-b&lt;/code&gt;). Optionally you can pass additional arguments that control the code output:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;annotations&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; to retain comment annotations &lt;code&gt;/*@__PURE__*/&lt;/code&gt; or &lt;code&gt;/*#__PURE__*/&lt;/code&gt;, otherwise they will be discarded even if &lt;code&gt;comments&lt;/code&gt; is set.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;ascii_only&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — escape Unicode characters in strings and regexps (affects directives with non-ascii characters becoming invalid)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;beautify&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — whether to actually beautify the output. Passing &lt;code&gt;-b&lt;/code&gt; will set this to true. Use &lt;code&gt;-O&lt;/code&gt; if you want to generate minified code and specify additional arguments.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;braces&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — always insert braces in &lt;code&gt;if&lt;/code&gt;, &lt;code&gt;for&lt;/code&gt;, &lt;code&gt;do&lt;/code&gt;, &lt;code&gt;while&lt;/code&gt; or &lt;code&gt;with&lt;/code&gt; statements, even if their body is a single statement.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;comments&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; or &lt;code&gt;&#34;all&#34;&lt;/code&gt; to preserve all comments, &lt;code&gt;&#34;some&#34;&lt;/code&gt; to preserve multi-line comments that contain &lt;code&gt;@cc_on&lt;/code&gt;, &lt;code&gt;@license&lt;/code&gt;, or &lt;code&gt;@preserve&lt;/code&gt; (case-insensitive), a regular expression string (e.g. &lt;code&gt;/^!/&lt;/code&gt;), or a function which returns &lt;code&gt;boolean&lt;/code&gt;, e.g.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function(node, comment) {&#xA;    return comment.value.indexOf(&#34;@type &#34; + node.TYPE) &amp;gt;= 0;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;extendscript&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — enable workarounds for Adobe ExtendScript bugs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;galio&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — enable workarounds for ANT Galio bugs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;indent_level&lt;/code&gt; (default: &lt;code&gt;4&lt;/code&gt;) — indent by specified number of spaces or the exact whitespace sequence supplied, e.g. &lt;code&gt;&#34;\t&#34;&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;indent_start&lt;/code&gt; (default: &lt;code&gt;0&lt;/code&gt;) — prefix all lines by whitespace sequence specified in the same format as &lt;code&gt;indent_level&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;inline_script&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — escape HTML comments and the slash in occurrences of &lt;code&gt;&amp;lt;/script&amp;gt;&lt;/code&gt; in strings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;keep_quoted_props&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — when turned on, prevents stripping quotes from property names in object literals.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;max_line_len&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — maximum line length (for uglified code)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;preamble&lt;/code&gt; (default: &lt;code&gt;null&lt;/code&gt;) — when passed it must be a string and it will be prepended to the output literally. The source map will adjust for this text. Can be used to insert a comment containing licensing information, for example.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;preserve_line&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; to retain line numbering on a best effort basis.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;quote_keys&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; to quote all keys in literal objects&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;quote_style&lt;/code&gt; (default: &lt;code&gt;0&lt;/code&gt;) — preferred quote style for strings (affects quoted property names and directives as well):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;0&lt;/code&gt; — prefers double quotes, switches to single quotes when there are more double quotes in the string itself. &lt;code&gt;0&lt;/code&gt; is best for gzip size.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;1&lt;/code&gt; — always use single quotes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;2&lt;/code&gt; — always use double quotes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;3&lt;/code&gt; — always use the original quotes&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;semicolons&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — separate statements with semicolons. If you pass &lt;code&gt;false&lt;/code&gt; then whenever possible we will use a newline instead of a semicolon, leading to more readable output of uglified code (size before gzip could be smaller; size after gzip insignificantly larger).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;shebang&lt;/code&gt; (default: &lt;code&gt;true&lt;/code&gt;) — preserve shebang &lt;code&gt;#!&lt;/code&gt; in preamble (bash scripts)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;width&lt;/code&gt; (default: &lt;code&gt;80&lt;/code&gt;) — only takes effect when beautification is on, this specifies an (orientative) line width that the beautifier will try to obey. It refers to the width of the line text (excluding indentation). It doesn&#39;t work very well currently, but it does make the code generated by UglifyJS more readable.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;wrap_iife&lt;/code&gt; (default: &lt;code&gt;false&lt;/code&gt;) — pass &lt;code&gt;true&lt;/code&gt; to wrap immediately invoked function expressions. See &lt;a href=&#34;https://github.com/mishoo/UglifyJS/issues/640&#34;&gt;#640&lt;/a&gt; for more details.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Miscellaneous&lt;/h1&gt; &#xA;&lt;h3&gt;Keeping copyright notices or other comments&lt;/h3&gt; &#xA;&lt;p&gt;You can pass &lt;code&gt;--comments&lt;/code&gt; to retain certain comments in the output. By default it will keep JSDoc-style comments that contain &#34;@preserve&#34;, &#34;@license&#34; or &#34;@cc_on&#34; (conditional compilation for IE). You can pass &lt;code&gt;--comments all&lt;/code&gt; to keep all the comments, or a valid JavaScript regexp to keep only comments that match this regexp. For example &lt;code&gt;--comments /^!/&lt;/code&gt; will keep comments like &lt;code&gt;/*! Copyright Notice */&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note, however, that there might be situations where comments are lost. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function f() {&#xA;    /** @preserve Foo Bar */&#xA;    function g() {&#xA;        // this function is never called&#xA;    }&#xA;    return something();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Even though it has &#34;@preserve&#34;, the comment will be lost because the inner function &lt;code&gt;g&lt;/code&gt; (which is the AST node to which the comment is attached to) is discarded by the compressor as not referenced.&lt;/p&gt; &#xA;&lt;p&gt;The safest comments where to place copyright information (or other info that needs to be kept in the output) are comments attached to toplevel nodes.&lt;/p&gt; &#xA;&lt;h3&gt;The &lt;code&gt;unsafe&lt;/code&gt; &lt;code&gt;compress&lt;/code&gt; option&lt;/h3&gt; &#xA;&lt;p&gt;It enables some transformations that &lt;em&gt;might&lt;/em&gt; break code logic in certain contrived cases, but should be fine for most code. You might want to try it on your own code, it should reduce the minified size. Here&#39;s what happens when this flag is on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;new Array(1, 2, 3)&lt;/code&gt; or &lt;code&gt;Array(1, 2, 3)&lt;/code&gt; → &lt;code&gt;[ 1, 2, 3 ]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;new Object()&lt;/code&gt; → &lt;code&gt;{}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;String(exp)&lt;/code&gt; or &lt;code&gt;exp.toString()&lt;/code&gt; → &lt;code&gt;&#34;&#34; + exp&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;new Object/RegExp/Function/Error/Array (...)&lt;/code&gt; → we discard the &lt;code&gt;new&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Conditional compilation&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;--define&lt;/code&gt; (&lt;code&gt;-d&lt;/code&gt;) switch in order to declare global variables that UglifyJS will assume to be constants (unless defined in scope). For example if you pass &lt;code&gt;--define DEBUG=false&lt;/code&gt; then, coupled with dead code removal UglifyJS will discard the following from the output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (DEBUG) {&#xA;    console.log(&#34;debug stuff&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can specify nested constants in the form of &lt;code&gt;--define env.DEBUG=false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;UglifyJS will warn about the condition being always false and about dropping unreachable code; for now there is no option to turn off only this specific warning, you can pass &lt;code&gt;warnings=false&lt;/code&gt; to turn off &lt;em&gt;all&lt;/em&gt; warnings.&lt;/p&gt; &#xA;&lt;p&gt;Another way of doing that is to declare your globals as constants in a separate file and include it into the build. For example you can have a &lt;code&gt;build/defines.js&lt;/code&gt; file with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var DEBUG = false;&#xA;var PRODUCTION = true;&#xA;// etc.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and build your code like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uglifyjs build/defines.js js/foo.js js/bar.js... -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;UglifyJS will notice the constants and, since they cannot be altered, it will evaluate references to them to the value itself and drop unreachable code as usual. The build will contain the &lt;code&gt;const&lt;/code&gt; declarations if you use them. If you are targeting &amp;lt; ES6 environments which does not support &lt;code&gt;const&lt;/code&gt;, using &lt;code&gt;var&lt;/code&gt; with &lt;code&gt;reduce_vars&lt;/code&gt; (enabled by default) should suffice.&lt;/p&gt; &#xA;&lt;h3&gt;Conditional compilation API&lt;/h3&gt; &#xA;&lt;p&gt;You can also use conditional compilation via the programmatic API. With the difference that the property name is &lt;code&gt;global_defs&lt;/code&gt; and is a compressor property:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var result = UglifyJS.minify(fs.readFileSync(&#34;input.js&#34;, &#34;utf8&#34;), {&#xA;    compress: {&#xA;        dead_code: true,&#xA;        global_defs: {&#xA;            DEBUG: false&#xA;        }&#xA;    }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To replace an identifier with an arbitrary non-constant expression it is necessary to prefix the &lt;code&gt;global_defs&lt;/code&gt; key with &lt;code&gt;&#34;@&#34;&lt;/code&gt; to instruct UglifyJS to parse the value as an expression:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;UglifyJS.minify(&#34;alert(&#39;hello&#39;);&#34;, {&#xA;    compress: {&#xA;        global_defs: {&#xA;            &#34;@alert&#34;: &#34;console.log&#34;&#xA;        }&#xA;    }&#xA;}).code;&#xA;// returns: &#39;console.log(&#34;hello&#34;);&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise it would be replaced as string literal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;UglifyJS.minify(&#34;alert(&#39;hello&#39;);&#34;, {&#xA;    compress: {&#xA;        global_defs: {&#xA;            &#34;alert&#34;: &#34;console.log&#34;&#xA;        }&#xA;    }&#xA;}).code;&#xA;// returns: &#39;&#34;console.log&#34;(&#34;hello&#34;);&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using native Uglify AST with &lt;code&gt;minify()&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// example: parse only, produce native Uglify AST&#xA;&#xA;var result = UglifyJS.minify(code, {&#xA;    parse: {},&#xA;    compress: false,&#xA;    mangle: false,&#xA;    output: {&#xA;        ast: true,&#xA;        code: false  // optional - faster if false&#xA;    }&#xA;});&#xA;&#xA;// result.ast contains native Uglify AST&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// example: accept native Uglify AST input and then compress and mangle&#xA;//          to produce both code and native AST.&#xA;&#xA;var result = UglifyJS.minify(ast, {&#xA;    compress: {},&#xA;    mangle: {},&#xA;    output: {&#xA;        ast: true,&#xA;        code: true  // optional - faster if false&#xA;    }&#xA;});&#xA;&#xA;// result.ast contains native Uglify AST&#xA;// result.code contains the minified code in string form.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Working with Uglify AST&lt;/h3&gt; &#xA;&lt;p&gt;Transversal and transformation of the native AST can be performed through &lt;a href=&#34;https://github.com/mishoo/UglifyJS/raw/master/lib/ast.js&#34;&gt;&lt;code&gt;TreeWalker&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/mishoo/UglifyJS/raw/master/lib/transform.js&#34;&gt;&lt;code&gt;TreeTransformer&lt;/code&gt;&lt;/a&gt; respectively.&lt;/p&gt; &#xA;&lt;h3&gt;ESTree / SpiderMonkey AST&lt;/h3&gt; &#xA;&lt;p&gt;UglifyJS has its own abstract syntax tree format; for &lt;a href=&#34;http://lisperator.net/blog/uglifyjs-why-not-switching-to-spidermonkey-ast/&#34;&gt;practical reasons&lt;/a&gt; we can&#39;t easily change to using the SpiderMonkey AST internally. However, UglifyJS now has a converter which can import a SpiderMonkey AST.&lt;/p&gt; &#xA;&lt;p&gt;For example &lt;a href=&#34;https://github.com/ternjs/acorn&#34;&gt;Acorn&lt;/a&gt; is a super-fast parser that produces a SpiderMonkey AST. It has a small CLI utility that parses one file and dumps the AST in JSON on the standard output. To use UglifyJS to mangle and compress that:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;acorn file.js | uglifyjs -p spidermonkey -m -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;-p spidermonkey&lt;/code&gt; option tells UglifyJS that all input files are not JavaScript, but JS code described in SpiderMonkey AST in JSON. Therefore we don&#39;t use our own parser in this case, but just transform that AST into our internal AST.&lt;/p&gt; &#xA;&lt;h3&gt;Use Acorn for parsing&lt;/h3&gt; &#xA;&lt;p&gt;More for fun, I added the &lt;code&gt;-p acorn&lt;/code&gt; option which will use Acorn to do all the parsing. If you pass this option, UglifyJS will &lt;code&gt;require(&#34;acorn&#34;)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Acorn is really fast (e.g. 250ms instead of 380ms on some 650K code), but converting the SpiderMonkey tree that Acorn produces takes another 150ms so in total it&#39;s a bit more than just using UglifyJS&#39;s own parser.&lt;/p&gt; &#xA;&lt;h3&gt;Uglify Fast Minify Mode&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s not well known, but whitespace removal and symbol mangling accounts for 95% of the size reduction in minified code for most JavaScript - not elaborate code transforms. One can simply disable &lt;code&gt;compress&lt;/code&gt; to speed up Uglify builds by 3 to 5 times.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;d3.js&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;minify size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;gzip size&lt;/th&gt; &#xA;   &lt;th align=&#34;right&#34;&gt;minify time (seconds)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;original&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;511,371&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;119,932&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;-&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uglify-js@3.13.0 mangle=false, compress=false&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;363,988&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;95,695&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.56&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uglify-js@3.13.0 mangle=true, compress=false&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;253,305&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;81,281&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;0.99&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;uglify-js@3.13.0 mangle=true, compress=true&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;244,436&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;79,854&lt;/td&gt; &#xA;   &lt;td align=&#34;right&#34;&gt;5.30&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;To enable fast minify mode from the CLI use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uglifyjs file.js -m&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To enable fast minify mode with the API use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;UglifyJS.minify(code, { compress: false, mangle: true });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Source maps and debugging&lt;/h3&gt; &#xA;&lt;p&gt;Various &lt;code&gt;compress&lt;/code&gt; transforms that simplify, rearrange, inline and remove code are known to have an adverse effect on debugging with source maps. This is expected as code is optimized and mappings are often simply not possible as some code no longer exists. For highest fidelity in source map debugging disable the Uglify &lt;code&gt;compress&lt;/code&gt; option and just use &lt;code&gt;mangle&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Compiler assumptions&lt;/h3&gt; &#xA;&lt;p&gt;To allow for better optimizations, the compiler makes various assumptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The code does not rely on preserving its runtime performance characteristics. Typically uglified code will run faster due to less instructions and easier inlining, but may be slower on rare occasions for a specific platform, e.g. see &lt;a href=&#34;https://raw.githubusercontent.com/mishoo/UglifyJS/master/#compress-options&#34;&gt;&lt;code&gt;reduce_funcs&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;.toString()&lt;/code&gt; and &lt;code&gt;.valueOf()&lt;/code&gt; don&#39;t have side effects, and for built-in objects they have not been overridden.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;undefined&lt;/code&gt;, &lt;code&gt;NaN&lt;/code&gt; and &lt;code&gt;Infinity&lt;/code&gt; have not been externally redefined.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;arguments.callee&lt;/code&gt;, &lt;code&gt;arguments.caller&lt;/code&gt; and &lt;code&gt;Function.prototype.caller&lt;/code&gt; are not used.&lt;/li&gt; &#xA; &lt;li&gt;The code doesn&#39;t expect the contents of &lt;code&gt;Function.prototype.toString()&lt;/code&gt; or &lt;code&gt;Error.prototype.stack&lt;/code&gt; to be anything in particular.&lt;/li&gt; &#xA; &lt;li&gt;Getting and setting properties on a plain object does not cause other side effects (using &lt;code&gt;.watch()&lt;/code&gt; or &lt;code&gt;Proxy&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Object properties can be added, removed and modified (not prevented with &lt;code&gt;Object.defineProperty()&lt;/code&gt;, &lt;code&gt;Object.defineProperties()&lt;/code&gt;, &lt;code&gt;Object.freeze()&lt;/code&gt;, &lt;code&gt;Object.preventExtensions()&lt;/code&gt; or &lt;code&gt;Object.seal()&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;If array destructuring is present, index-like properties in &lt;code&gt;Array.prototype&lt;/code&gt; have not been overridden: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Object.prototype[0] = 42;&#xA;var [ a ] = [];&#xA;var { 0: b } = {};&#xA;// 42 undefined&#xA;console.log([][0], a);&#xA;// 42 42&#xA;console.log({}[0], b);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Earlier versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;({&#xA;    p: 42,&#xA;    get p() {},&#xA;});&#xA;// SyntaxError: Object literal may not have data and accessor property with&#xA;//              the same name&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Iteration order of keys over an object which contains spread syntax in later versions of Chrome and Node.js may be altered.&lt;/li&gt; &#xA; &lt;li&gt;When &lt;code&gt;toplevel&lt;/code&gt; is enabled, UglifyJS effectively assumes input code is wrapped within &lt;code&gt;function(){ ... }&lt;/code&gt;, thus forbids aliasing of declared global variables: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;A = &#34;FAIL&#34;;&#xA;var B = &#34;FAIL&#34;;&#xA;// can be `global`, `self`, `window` etc.&#xA;var top = function() {&#xA;    return this;&#xA;}();&#xA;// &#34;PASS&#34;&#xA;top.A = &#34;PASS&#34;;&#xA;console.log(A);&#xA;// &#34;FAIL&#34; after compress and/or mangle&#xA;top.B = &#34;PASS&#34;;&#xA;console.log(B);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Use of &lt;code&gt;arguments&lt;/code&gt; alongside destructuring as function parameters, e.g. &lt;code&gt;function({}, arguments) {}&lt;/code&gt; will result in &lt;code&gt;SyntaxError&lt;/code&gt; in earlier versions of Chrome and Node.js - UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Earlier versions of Chrome and Node.js will throw &lt;code&gt;ReferenceError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var a;&#xA;try {&#xA;    throw 42;&#xA;} catch ({&#xA;    [a]: b,&#xA;    // ReferenceError: a is not defined&#xA;}) {&#xA;    let a;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Later versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;a =&amp;gt; {&#xA;    let a;&#xA;};&#xA;// SyntaxError: Identifier &#39;a&#39; has already been declared&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Later versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;    // ...&#xA;} catch ({ message: a }) {&#xA;    var a;&#xA;}&#xA;// SyntaxError: Identifier &#39;a&#39; has already been declared&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Some versions of Chrome and Node.js will throw &lt;code&gt;ReferenceError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(((a, b = function() {&#xA;    return a;&#xA;    // ReferenceError: a is not defined&#xA;}()) =&amp;gt; b)());&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Some arithmetic operations with &lt;code&gt;BigInt&lt;/code&gt; may throw &lt;code&gt;TypeError&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;1n + 1;&#xA;// TypeError: can&#39;t convert BigInt to number&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Some versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log(String.raw`\uFo`);&#xA;// SyntaxError: Invalid Unicode escape sequence&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Some versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {} catch (e) {&#xA;    for (var e of []);&#xA;}&#xA;// SyntaxError: Identifier &#39;e&#39; has already been declared&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Some versions of Chrome and Node.js will give incorrect results with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log({&#xA;    ...{&#xA;        set 42(v) {},&#xA;        42: &#34;PASS&#34;,&#xA;    },&#xA;});&#xA;// Expected: { &#39;42&#39;: &#39;PASS&#39; }&#xA;// Actual:   { &#39;42&#39;: undefined }&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Later versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var await;&#xA;class A {&#xA;    static p = await;&#xA;}&#xA;// SyntaxError: Unexpected reserved word&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Later versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var async;&#xA;for (async of []);&#xA;// SyntaxError: The left-hand side of a for-of loop may not be &#39;async&#39;.&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Some versions of Chrome and Node.js will give incorrect results with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;console.log({&#xA;    ...console,&#xA;    get 42() {&#xA;        return &#34;FAIL&#34;;&#xA;    },&#xA;    [42]: &#34;PASS&#34;,&#xA;}[42], {&#xA;    ...console,&#xA;    get 42() {&#xA;        return &#34;FAIL&#34;;&#xA;    },&#xA;    42: &#34;PASS&#34;,&#xA;}[42]);&#xA;// Expected: &#34;PASS PASS&#34;&#xA;// Actual:   &#34;PASS FAIL&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Earlier versions of JavaScript will throw &lt;code&gt;TypeError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(function() {&#xA;    {&#xA;        const a = &#34;foo&#34;;&#xA;    }&#xA;    {&#xA;        const a = &#34;bar&#34;;&#xA;    }&#xA;})();&#xA;// TypeError: const &#39;a&#39; has already been declared&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Later versions of Chrome and Node.js will give incorrect results with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;    class A {&#xA;        static 42;&#xA;        static get 42() {}&#xA;    }&#xA;    console.log(&#34;PASS&#34;);&#xA;} catch (e) {&#xA;    console.log(&#34;FAIL&#34;);&#xA;}&#xA;// Expected: &#34;PASS&#34;&#xA;// Actual:   &#34;FAIL&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Some versions of Chrome and Node.js will give incorrect results with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;(async function(a) {&#xA;    (function() {&#xA;        var b = await =&amp;gt; console.log(&#34;PASS&#34;);&#xA;        b();&#xA;    })();&#xA;})().catch(console.error);&#xA;// Expected: &#34;PASS&#34;&#xA;// Actual:   SyntaxError: Unexpected reserved word&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Later versions of Chrome and Node.js will give incorrect results with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;    f();&#xA;    function f() {&#xA;        throw 42;&#xA;    }&#xA;} catch (e) {&#xA;    console.log(typeof f, e);&#xA;}&#xA;// Expected: &#34;function 42&#34;&#xA;// Actual:   &#34;undefined 42&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Later versions of JavaScript will throw &lt;code&gt;SyntaxError&lt;/code&gt; with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&#34;use strict&#34;;&#xA;console.log(function f() {&#xA;    return f = &#34;PASS&#34;;&#xA;}());&#xA;// Expected: &#34;PASS&#34;&#xA;// Actual:   TypeError: invalid assignment to const &#39;f&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Adobe ExtendScript will give incorrect results with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;alert(true ? &#34;PASS&#34; : false ? &#34;FAIL&#34; : null);&#xA;// Expected: &#34;PASS&#34;&#xA;// Actual:   &#34;FAIL&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA; &lt;li&gt;Adobe ExtendScript will give incorrect results with the following: &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;alert(42 ? null ? &#34;FAIL&#34; : &#34;PASS&#34; : &#34;FAIL&#34;);&#xA;// Expected: &#34;PASS&#34;&#xA;// Actual:   SyntaxError: Expected: :&#xA;&lt;/code&gt;&lt;/pre&gt; UglifyJS may modify the input which in turn may suppress those errors.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>