<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-09T01:32:40Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>module-federation/core</title>
    <updated>2025-08-09T01:32:40Z</updated>
    <id>tag:github.com,2025-08-09:/module-federation/core</id>
    <link href="https://github.com/module-federation/core" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Module Federation is a concept that allows developers to share code and resources across multiple JavaScript applications&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;Module federation Banner&#34; width=&#34;260&#34; src=&#34;https://github.com/module-federation/core/assets/27547179/11234712-40fc-4696-a7fd-16e0c631005a&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Module Federation&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/@module-federation/runtime?activeTab=readme&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@module-federation/runtime?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&#34; alt=&#34;npm version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://npmcharts.com/compare/@module-federation/runtime?minimal=true&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/@module-federation/runtime.svg?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&#34; alt=&#34;downloads&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/web-infra-dev/rspack/raw/main/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/l/@module-federation/runtime?style=flat-square&amp;amp;colorA=564341&amp;amp;colorB=EDED91&#34; alt=&#34;license&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;You can consider the module federation capabilities provided by this repository as &#34;module federation 2.0&#34;. &#34;Module Federation 2.0&#34; differs from the &#34;Module Federation&#34; built into Webpack 5 by offering not only the core features of module export, loading, and dependency sharing but also additional dynamic type hinting, a &#34;Manifest&#34;, a &#34;Federation Runtime&#34;, and a &#34;Runtime Plugin System&#34;. These features make &#34;Module Federation&#34; more suitable for use as a micro-frontend architecture in large-scale web applications.&lt;/p&gt; &#xA;&lt;h2&gt;üí° What is Module Federation?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Module Federation is a concept that allows developers to share code and resources across multiple JavaScript applications&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Module Federation can be used to split monolithic applications into micro-front-end architectures&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Module Federation reuses common dependencies between modules as much as possible&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;‚ú® What new features does Module Federation provide?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üé® Module Federation Runtime&lt;/li&gt; &#xA; &lt;li&gt;üß© Runtime Plugins System&lt;/li&gt; &#xA; &lt;li&gt;üìù Manifest&lt;/li&gt; &#xA; &lt;li&gt;üöÄ Dynamic type prompt&lt;/li&gt; &#xA; &lt;li&gt;üõ†Ô∏è Chrome Devtool&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üìö Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Module Federation, see the &lt;a href=&#34;https://module-federation.io/guide/start/quick-start.html&#34;&gt;Quick Start&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üßë‚Äçüíª Community&lt;/h2&gt; &#xA;&lt;p&gt;Come and chat with us on &lt;a href=&#34;https://github.com/module-federation/universe/discussions&#34;&gt;Discussions&lt;/a&gt; or &lt;a href=&#34;https://discord.gg/n69NnT3ACV&#34;&gt;Discord&lt;/a&gt;! The Module federation team and users are active there, and we&#39;re always looking for contributions.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Contribution&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;New contributors welcome!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Please read the &lt;a href=&#34;https://github.com/module-federation/core/raw/main/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://repobeats.axiom.co/api/embed/856dc1d4a6965d225232b1bd2da5d54549dc169e.svg?sanitize=true&#34; alt=&#34;Alt&#34; title=&#34;Repobeats analytics image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üôå Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;This repo has adopted the Code of Conduct. Please check &lt;a href=&#34;https://raw.githubusercontent.com/module-federation/core/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; for more details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>benborla/mcp-server-mysql</title>
    <updated>2025-08-09T01:32:40Z</updated>
    <id>tag:github.com,2025-08-09:/benborla/mcp-server-mysql</id>
    <link href="https://github.com/benborla/mcp-server-mysql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Model Context Protocol server that provides read-only access to MySQL databases. This server enables LLMs to inspect database schemas and execute read-only queries.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;MCP Server for MySQL based on NodeJS&lt;/h1&gt; &#xA;&lt;p&gt;A Model Context Protocol server that provides access to MySQL databases. This server enables LLMs to inspect database schemas and execute SQL queries.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#installation&#34;&gt;Installation&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#using-smithery&#34;&gt;Smithery&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#running-from-local-repository&#34;&gt;Clone to Local Repository&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#run-in-remote-mode&#34;&gt;Remote mode&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#components&#34;&gt;Components&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#configuration&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#environment-variables&#34;&gt;Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#multi-db-mode&#34;&gt;Multi-DB Mode&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#schema-specific-permissions&#34;&gt;Schema-Specific Permissions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js v20 or higher&lt;/li&gt; &#xA; &lt;li&gt;MySQL 5.7 or higher (MySQL 8.0+ recommended)&lt;/li&gt; &#xA; &lt;li&gt;MySQL user with appropriate permissions for the operations you need&lt;/li&gt; &#xA; &lt;li&gt;For write operations: MySQL user with INSERT, UPDATE, and/or DELETE privileges&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;There are several ways to install and configure the MCP server but the most common would be checking this website &lt;a href=&#34;https://smithery.ai/server/@benborla29/mcp-server-mysql&#34;&gt;https://smithery.ai/server/@benborla29/mcp-server-mysql&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Cursor&lt;/h3&gt; &#xA;&lt;p&gt;For Cursor IDE, you can install this MCP server with the following command in your project:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Visit &lt;a href=&#34;https://smithery.ai/server/@benborla29/mcp-server-mysql&#34;&gt;https://smithery.ai/server/@benborla29/mcp-server-mysql&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow the instruction for Cursor&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;MCP Get provides a centralized registry of MCP servers and simplifies the installation process.&lt;/p&gt; &#xA;&lt;h3&gt;Claude Code&lt;/h3&gt; &#xA;&lt;h4&gt;Option 1: Import from Claude Desktop (Recommended if already configured)&lt;/h4&gt; &#xA;&lt;p&gt;If you already have this MCP server configured in Claude Desktop, you can import it automatically:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add-from-claude-desktop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will show an interactive dialog where you can select your &lt;code&gt;mcp_server_mysql&lt;/code&gt; server to import with all existing configuration.&lt;/p&gt; &#xA;&lt;h4&gt;Option 2: Manual Configuration&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using NPM/PNPM Global Installation:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;First, install the package globally:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using npm&#xA;npm install -g @benborla29/mcp-server-mysql&#xA;&#xA;# Using pnpm&#xA;pnpm add -g @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then add the server to Claude Code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add mcp_server_mysql \&#xA;  -e MYSQL_HOST=&#34;127.0.0.1&#34; \&#xA;  -e MYSQL_PORT=&#34;3306&#34; \&#xA;  -e MYSQL_USER=&#34;root&#34; \&#xA;  -e MYSQL_PASS=&#34;your_password&#34; \&#xA;  -e MYSQL_DB=&#34;your_database&#34; \&#xA;  -e ALLOW_INSERT_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_UPDATE_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_DELETE_OPERATION=&#34;false&#34; \&#xA;  -- npx @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using Local Repository (for development):&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re running from a cloned repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add mcp_server_mysql \&#xA;  -e MYSQL_HOST=&#34;127.0.0.1&#34; \&#xA;  -e MYSQL_PORT=&#34;3306&#34; \&#xA;  -e MYSQL_USER=&#34;root&#34; \&#xA;  -e MYSQL_PASS=&#34;your_password&#34; \&#xA;  -e MYSQL_DB=&#34;your_database&#34; \&#xA;  -e ALLOW_INSERT_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_UPDATE_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_DELETE_OPERATION=&#34;false&#34; \&#xA;  -e PATH=&#34;/path/to/node/bin:/usr/bin:/bin&#34; \&#xA;  -e NODE_PATH=&#34;/path/to/node/lib/node_modules&#34; \&#xA;  -- /path/to/node /full/path/to/mcp-server-mysql/dist/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Replace:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;/path/to/node&lt;/code&gt; with your Node.js binary path (find with &lt;code&gt;which node&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;/full/path/to/mcp-server-mysql&lt;/code&gt; with the full path to your cloned repository&lt;/li&gt; &#xA; &lt;li&gt;Update MySQL credentials to match your environment&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using Unix Socket Connection:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For local MySQL instances using Unix sockets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add mcp_server_mysql \&#xA;  -e MYSQL_SOCKET_PATH=&#34;/tmp/mysql.sock&#34; \&#xA;  -e MYSQL_USER=&#34;root&#34; \&#xA;  -e MYSQL_PASS=&#34;your_password&#34; \&#xA;  -e MYSQL_DB=&#34;your_database&#34; \&#xA;  -e ALLOW_INSERT_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_UPDATE_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_DELETE_OPERATION=&#34;false&#34; \&#xA;  -- npx @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Choosing the Right Scope&lt;/h4&gt; &#xA;&lt;p&gt;Consider which scope to use based on your needs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Local scope (default) - only available in current project&#xA;claude mcp add mcp_server_mysql [options...]&#xA;&#xA;# User scope - available across all your projects&#xA;claude mcp add mcp_server_mysql -s user [options...]&#xA;&#xA;# Project scope - shared with team members via .mcp.json&#xA;claude mcp add mcp_server_mysql -s project [options...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For database servers with credentials, &lt;strong&gt;local&lt;/strong&gt; or &lt;strong&gt;user&lt;/strong&gt; scope is recommended to keep credentials private.&lt;/p&gt; &#xA;&lt;h4&gt;Verification&lt;/h4&gt; &#xA;&lt;p&gt;After adding the server, verify it&#39;s configured correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# List all configured servers&#xA;claude mcp list&#xA;&#xA;# Get details for your MySQL server&#xA;claude mcp get mcp_server_mysql&#xA;&#xA;# Check server status within Claude Code&#xA;/mcp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Multi-Database Configuration&lt;/h4&gt; &#xA;&lt;p&gt;For multi-database mode, omit the &lt;code&gt;MYSQL_DB&lt;/code&gt; environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add mcp_server_mysql_multi \&#xA;  -e MYSQL_HOST=&#34;127.0.0.1&#34; \&#xA;  -e MYSQL_PORT=&#34;3306&#34; \&#xA;  -e MYSQL_USER=&#34;root&#34; \&#xA;  -e MYSQL_PASS=&#34;your_password&#34; \&#xA;  -e MULTI_DB_WRITE_MODE=&#34;false&#34; \&#xA;  -- npx @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Advanced Configuration&lt;/h4&gt; &#xA;&lt;p&gt;For advanced features, add additional environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;claude mcp add mcp_server_mysql \&#xA;  -e MYSQL_HOST=&#34;127.0.0.1&#34; \&#xA;  -e MYSQL_PORT=&#34;3306&#34; \&#xA;  -e MYSQL_USER=&#34;root&#34; \&#xA;  -e MYSQL_PASS=&#34;your_password&#34; \&#xA;  -e MYSQL_DB=&#34;your_database&#34; \&#xA;  -e MYSQL_POOL_SIZE=&#34;10&#34; \&#xA;  -e MYSQL_QUERY_TIMEOUT=&#34;30000&#34; \&#xA;  -e MYSQL_CACHE_TTL=&#34;60000&#34; \&#xA;  -e MYSQL_RATE_LIMIT=&#34;100&#34; \&#xA;  -e MYSQL_SSL=&#34;true&#34; \&#xA;  -e ALLOW_INSERT_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_UPDATE_OPERATION=&#34;false&#34; \&#xA;  -e ALLOW_DELETE_OPERATION=&#34;false&#34; \&#xA;  -e MYSQL_ENABLE_LOGGING=&#34;true&#34; \&#xA;  -- npx @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Troubleshooting Claude Code Setup&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server Connection Issues&lt;/strong&gt;: Use &lt;code&gt;/mcp&lt;/code&gt; command in Claude Code to check server status and authenticate if needed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Path Issues&lt;/strong&gt;: If using a local repository, ensure Node.js paths are correctly set:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Find your Node.js path&#xA;which node&#xA;&#xA;# For PATH environment variable&#xA;echo &#34;$(which node)/../&#34;&#xA;&#xA;# For NODE_PATH environment variable&#xA;echo &#34;$(which node)/../../lib/node_modules&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Permission Errors&lt;/strong&gt;: Ensure your MySQL user has appropriate permissions for the operations you&#39;ve enabled.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Server Not Starting&lt;/strong&gt;: Check Claude Code logs or run the server directly to debug:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Test the server directly&#xA;npx @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Using NPM/PNPM&lt;/h3&gt; &#xA;&lt;p&gt;For manual installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Using npm&#xA;npm install -g @benborla29/mcp-server-mysql&#xA;&#xA;# Using pnpm&#xA;pnpm add -g @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After manual installation, you&#39;ll need to configure your LLM application to use the MCP server (see Configuration section below).&lt;/p&gt; &#xA;&lt;h3&gt;Running from Local Repository&lt;/h3&gt; &#xA;&lt;p&gt;If you want to clone and run this MCP server directly from the source code, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/benborla/mcp-server-mysql.git&#xA;cd mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Install dependencies&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;# or&#xA;pnpm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Build the project&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build&#xA;# or&#xA;pnpm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configure Claude Desktop&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Add the following to your Claude Desktop configuration file (&lt;code&gt;claude_desktop_config.json&lt;/code&gt;):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mcp_server_mysql&#34;: {&#xA;      &#34;command&#34;: &#34;/path/to/node&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;/full/path/to/mcp-server-mysql/dist/index.js&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;MYSQL_HOST&#34;: &#34;127.0.0.1&#34;,&#xA;        &#34;MYSQL_PORT&#34;: &#34;3306&#34;,&#xA;        &#34;MYSQL_USER&#34;: &#34;root&#34;,&#xA;        &#34;MYSQL_PASS&#34;: &#34;your_password&#34;,&#xA;        &#34;MYSQL_DB&#34;: &#34;your_database&#34;,&#xA;        &#34;ALLOW_INSERT_OPERATION&#34;: &#34;false&#34;,&#xA;        &#34;ALLOW_UPDATE_OPERATION&#34;: &#34;false&#34;,&#xA;        &#34;ALLOW_DELETE_OPERATION&#34;: &#34;false&#34;,&#xA;        &#34;PATH&#34;: &#34;/Users/atlasborla/Library/Application Support/Herd/config/nvm/versions/node/v22.9.0/bin:/usr/bin:/bin&#34;, // &amp;lt;--- Important to add the following, run in your terminal `echo &#34;$(which node)/../&#34;` to get the path&#xA;        &#34;NODE_PATH&#34;: &#34;/Users/atlasborla/Library/Application Support/Herd/config/nvm/versions/node/v22.9.0/lib/node_modules&#34; // &amp;lt;--- Important to add the following, run in your terminal `echo &#34;$(which node)/../../lib/node_modules&#34;`&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Replace:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;/path/to/node&lt;/code&gt; with the full path to your Node.js binary (find it with &lt;code&gt;which node&lt;/code&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;/full/path/to/mcp-server-mysql&lt;/code&gt; with the full path to where you cloned the repository&lt;/li&gt; &#xA;   &lt;li&gt;Set the MySQL credentials to match your environment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Test the server&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the server directly to test&#xA;node dist/index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If it connects to MySQL successfully, you&#39;re ready to use it with Claude Desktop.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Run in remote mode&lt;/h3&gt; &#xA;&lt;p&gt;To run in remote mode, you&#39;ll need to provide &lt;a href=&#34;https://github.com/benborla/mcp-server-mysql?tab=readme-ov-file#environment-variables&#34;&gt;environment variables&lt;/a&gt; to the npx script.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Create env file in preferred directory &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# create .env file&#xA;touch .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Copy-paste &lt;a href=&#34;https://github.com/benborla/mcp-server-mysql/raw/main/.env&#34;&gt;example file&lt;/a&gt; from this repository&lt;/li&gt; &#xA; &lt;li&gt;Set the MySQL credentials to match your environment&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;IS_REMOTE_MCP=true&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Set &lt;code&gt;REMOTE_SECRET_KEY&lt;/code&gt; to a secure string.&lt;/li&gt; &#xA; &lt;li&gt;Provide custom &lt;code&gt;PORT&lt;/code&gt; if needed. Default is 3000.&lt;/li&gt; &#xA; &lt;li&gt;Load variables in current session: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source .env&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run the server &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Configure your agent to connect to the MCP with the next configuration:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mysql&#34;: {&#xA;      &#34;url&#34;: &#34;http://your-host:3000/mcp&#34;,&#xA;      &#34;type&#34;: &#34;streamableHttp&#34;,&#xA;      &#34;headers&#34;: {&#xA;        &#34;Authorization&#34;: &#34;Bearer &amp;lt;REMOTE_SECRET_KEY&amp;gt;&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Components&lt;/h2&gt; &#xA;&lt;h3&gt;Tools&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;mysql_query&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Execute SQL queries against the connected database&lt;/li&gt; &#xA;   &lt;li&gt;Input: &lt;code&gt;sql&lt;/code&gt; (string): The SQL query to execute&lt;/li&gt; &#xA;   &lt;li&gt;By default, limited to READ ONLY operations&lt;/li&gt; &#xA;   &lt;li&gt;Optional write operations (when enabled via configuration): &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;INSERT: Add new data to tables (requires &lt;code&gt;ALLOW_INSERT_OPERATION=true&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;UPDATE: Modify existing data (requires &lt;code&gt;ALLOW_UPDATE_OPERATION=true&lt;/code&gt;)&lt;/li&gt; &#xA;     &lt;li&gt;DELETE: Remove data (requires &lt;code&gt;ALLOW_DELETE_OPERATION=true&lt;/code&gt;)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;All operations are executed within a transaction with proper commit/rollback handling&lt;/li&gt; &#xA;   &lt;li&gt;Supports prepared statements for secure parameter handling&lt;/li&gt; &#xA;   &lt;li&gt;Configurable query timeouts and result pagination&lt;/li&gt; &#xA;   &lt;li&gt;Built-in query execution statistics&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Resources&lt;/h3&gt; &#xA;&lt;p&gt;The server provides comprehensive database information:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Table Schemas&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;JSON schema information for each table&lt;/li&gt; &#xA;   &lt;li&gt;Column names and data types&lt;/li&gt; &#xA;   &lt;li&gt;Index information and constraints&lt;/li&gt; &#xA;   &lt;li&gt;Foreign key relationships&lt;/li&gt; &#xA;   &lt;li&gt;Table statistics and metrics&lt;/li&gt; &#xA;   &lt;li&gt;Automatically discovered from database metadata&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;SQL injection prevention through prepared statements&lt;/li&gt; &#xA; &lt;li&gt;Query whitelisting/blacklisting capabilities&lt;/li&gt; &#xA; &lt;li&gt;Rate limiting for query execution&lt;/li&gt; &#xA; &lt;li&gt;Query complexity analysis&lt;/li&gt; &#xA; &lt;li&gt;Configurable connection encryption&lt;/li&gt; &#xA; &lt;li&gt;Read-only transaction enforcement&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Performance Optimizations&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Optimized connection pooling&lt;/li&gt; &#xA; &lt;li&gt;Query result caching&lt;/li&gt; &#xA; &lt;li&gt;Large result set streaming&lt;/li&gt; &#xA; &lt;li&gt;Query execution plan analysis&lt;/li&gt; &#xA; &lt;li&gt;Configurable query timeouts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring and Debugging&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Comprehensive query logging&lt;/li&gt; &#xA; &lt;li&gt;Performance metrics collection&lt;/li&gt; &#xA; &lt;li&gt;Error tracking and reporting&lt;/li&gt; &#xA; &lt;li&gt;Health check endpoints&lt;/li&gt; &#xA; &lt;li&gt;Query execution statistics&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;h3&gt;Automatic Configuration with Smithery&lt;/h3&gt; &#xA;&lt;p&gt;If you installed using Smithery, your configuration is already set up. You can view or modify it with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;smithery configure @benborla29/mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When reconfiguring, you can update any of the MySQL connection details as well as the write operation settings:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Basic connection settings&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;MySQL Host, Port, User, Password, Database&lt;/li&gt; &#xA;   &lt;li&gt;SSL/TLS configuration (if your database requires secure connections)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Write operation permissions&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Allow INSERT Operations: Set to true if you want to allow adding new data&lt;/li&gt; &#xA;   &lt;li&gt;Allow UPDATE Operations: Set to true if you want to allow updating existing data&lt;/li&gt; &#xA;   &lt;li&gt;Allow DELETE Operations: Set to true if you want to allow deleting data&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For security reasons, all write operations are disabled by default. Only enable these settings if you specifically need Claude to modify your database data.&lt;/p&gt; &#xA;&lt;h3&gt;Advanced Configuration Options&lt;/h3&gt; &#xA;&lt;p&gt;For more control over the MCP server&#39;s behavior, you can use these advanced configuration options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mcp_server_mysql&#34;: {&#xA;      &#34;command&#34;: &#34;/path/to/npx/binary/npx&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;-y&#34;,&#xA;        &#34;@benborla29/mcp-server-mysql&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        // Basic connection settings&#xA;        &#34;MYSQL_HOST&#34;: &#34;127.0.0.1&#34;,&#xA;        &#34;MYSQL_PORT&#34;: &#34;3306&#34;,&#xA;        &#34;MYSQL_USER&#34;: &#34;root&#34;,&#xA;        &#34;MYSQL_PASS&#34;: &#34;&#34;,&#xA;        &#34;MYSQL_DB&#34;: &#34;db_name&#34;,&#xA;        &#34;PATH&#34;: &#34;/path/to/node/bin:/usr/bin:/bin&#34;,&#xA;&#xA;        // Performance settings&#xA;        &#34;MYSQL_POOL_SIZE&#34;: &#34;10&#34;,&#xA;        &#34;MYSQL_QUERY_TIMEOUT&#34;: &#34;30000&#34;,&#xA;        &#34;MYSQL_CACHE_TTL&#34;: &#34;60000&#34;,&#xA;&#xA;        // Security settings&#xA;        &#34;MYSQL_RATE_LIMIT&#34;: &#34;100&#34;,&#xA;        &#34;MYSQL_MAX_QUERY_COMPLEXITY&#34;: &#34;1000&#34;,&#xA;        &#34;MYSQL_SSL&#34;: &#34;true&#34;,&#xA;&#xA;        // Monitoring settings&#xA;        &#34;ENABLE_LOGGING&#34;: &#34;true&#34;,&#xA;        &#34;MYSQL_LOG_LEVEL&#34;: &#34;info&#34;,&#xA;        &#34;MYSQL_METRICS_ENABLED&#34;: &#34;true&#34;,&#xA;&#xA;        // Write operation flags&#xA;        &#34;ALLOW_INSERT_OPERATION&#34;: &#34;false&#34;,&#xA;        &#34;ALLOW_UPDATE_OPERATION&#34;: &#34;false&#34;,&#xA;        &#34;ALLOW_DELETE_OPERATION&#34;: &#34;false&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Environment Variables&lt;/h2&gt; &#xA;&lt;h3&gt;Basic Connection&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_SOCKET_PATH&lt;/code&gt;: Unix socket path for local connections (e.g., &#34;/tmp/mysql.sock&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_HOST&lt;/code&gt;: MySQL server host (default: &#34;127.0.0.1&#34;) - ignored if MYSQL_SOCKET_PATH is set&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_PORT&lt;/code&gt;: MySQL server port (default: &#34;3306&#34;) - ignored if MYSQL_SOCKET_PATH is set&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_USER&lt;/code&gt;: MySQL username (default: &#34;root&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_PASS&lt;/code&gt;: MySQL password&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_DB&lt;/code&gt;: Target database name (leave empty for multi-DB mode)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Performance Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_POOL_SIZE&lt;/code&gt;: Connection pool size (default: &#34;10&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_QUERY_TIMEOUT&lt;/code&gt;: Query timeout in milliseconds (default: &#34;30000&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_CACHE_TTL&lt;/code&gt;: Cache time-to-live in milliseconds (default: &#34;60000&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Security Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_RATE_LIMIT&lt;/code&gt;: Maximum queries per minute (default: &#34;100&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_MAX_QUERY_COMPLEXITY&lt;/code&gt;: Maximum query complexity score (default: &#34;1000&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_SSL&lt;/code&gt;: Enable SSL/TLS encryption (default: &#34;false&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALLOW_INSERT_OPERATION&lt;/code&gt;: Enable INSERT operations (default: &#34;false&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALLOW_UPDATE_OPERATION&lt;/code&gt;: Enable UPDATE operations (default: &#34;false&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALLOW_DELETE_OPERATION&lt;/code&gt;: Enable DELETE operations (default: &#34;false&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ALLOW_DDL_OPERATION&lt;/code&gt;: Enable DDL operations (default: &#34;false&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SCHEMA_INSERT_PERMISSIONS&lt;/code&gt;: Schema-specific INSERT permissions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SCHEMA_UPDATE_PERMISSIONS&lt;/code&gt;: Schema-specific UPDATE permissions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SCHEMA_DELETE_PERMISSIONS&lt;/code&gt;: Schema-specific DELETE permissions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SCHEMA_DDL_PERMISSIONS&lt;/code&gt;: Schema-specific DDL permissions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MULTI_DB_WRITE_MODE&lt;/code&gt;: Enable write operations in multi-DB mode (default: &#34;false&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Monitoring Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_ENABLE_LOGGING&lt;/code&gt;: Enable query logging (default: &#34;false&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_LOG_LEVEL&lt;/code&gt;: Logging level (default: &#34;info&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;MYSQL_METRICS_ENABLED&lt;/code&gt;: Enable performance metrics (default: &#34;false&#34;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Remote MCP Configuration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;IS_REMOTE_MCP&lt;/code&gt;: Enable remote MCP mode (default: &#34;false&#34;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;REMOTE_SECRET_KEY&lt;/code&gt;: Secret key for remote MCP authentication (default: &#34;&#34;). If not provided, remote MCP mode will be disabled.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PORT&lt;/code&gt;: Port number for the remote MCP server (default: 3000)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Multi-DB Mode&lt;/h2&gt; &#xA;&lt;p&gt;MCP-Server-MySQL supports connecting to multiple databases when no specific database is set. This allows the LLM to query any database the MySQL user has access to. For full details, see &lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/README-MULTI-DB.md&#34;&gt;README-MULTI-DB.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Enabling Multi-DB Mode&lt;/h3&gt; &#xA;&lt;p&gt;To enable multi-DB mode, simply leave the &lt;code&gt;MYSQL_DB&lt;/code&gt; environment variable empty. In multi-DB mode, queries require schema qualification:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Use fully qualified table names&#xA;SELECT * FROM database_name.table_name;&#xA;&#xA;-- Or use USE statements to switch between databases&#xA;USE database_name;&#xA;SELECT * FROM table_name;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Schema-Specific Permissions&lt;/h2&gt; &#xA;&lt;p&gt;For fine-grained control over database operations, MCP-Server-MySQL now supports schema-specific permissions. This allows different databases to have different levels of access (read-only, read-write, etc.).&lt;/p&gt; &#xA;&lt;h3&gt;Configuration Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;SCHEMA_INSERT_PERMISSIONS=development:true,test:true,production:false&#xA;SCHEMA_UPDATE_PERMISSIONS=development:true,test:true,production:false&#xA;SCHEMA_DELETE_PERMISSIONS=development:false,test:true,production:false&#xA;SCHEMA_DDL_PERMISSIONS=development:false,test:true,production:false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For complete details and security recommendations, see &lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/README-MULTI-DB.md&#34;&gt;README-MULTI-DB.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;h3&gt;Database Setup&lt;/h3&gt; &#xA;&lt;p&gt;Before running tests, you need to set up the test database and seed it with test data:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create Test Database and User&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;-- Connect as root and create test database&#xA;CREATE DATABASE IF NOT EXISTS mcp_test;&#xA;&#xA;-- Create test user with appropriate permissions&#xA;CREATE USER IF NOT EXISTS &#39;mcp_test&#39;@&#39;localhost&#39; IDENTIFIED BY &#39;mcp_test_password&#39;;&#xA;GRANT ALL PRIVILEGES ON mcp_test.* TO &#39;mcp_test&#39;@&#39;localhost&#39;;&#xA;FLUSH PRIVILEGES;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run Database Setup Script&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the database setup script&#xA;pnpm run setup:test:db&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will create the necessary tables and seed data. The script is located in &lt;code&gt;scripts/setup-test-db.ts&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configure Test Environment&lt;/strong&gt; Create a &lt;code&gt;.env.test&lt;/code&gt; file in the project root (if not existing):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-env&#34;&gt;MYSQL_HOST=127.0.0.1&#xA;MYSQL_PORT=3306&#xA;MYSQL_USER=mcp_test&#xA;MYSQL_PASS=mcp_test_password&#xA;MYSQL_DB=mcp_test&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Update package.json Scripts&lt;/strong&gt; Add these scripts to your package.json:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;setup:test:db&#34;: &#34;ts-node scripts/setup-test-db.ts&#34;,&#xA;    &#34;pretest&#34;: &#34;pnpm run setup:test:db&#34;,&#xA;    &#34;test&#34;: &#34;vitest run&#34;,&#xA;    &#34;test:watch&#34;: &#34;vitest&#34;,&#xA;    &#34;test:coverage&#34;: &#34;vitest run --coverage&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;The project includes a comprehensive test suite to ensure functionality and reliability:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# First-time setup&#xA;pnpm run setup:test:db&#xA;&#xA;# Run all tests&#xA;pnpm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running evals&lt;/h2&gt; &#xA;&lt;p&gt;The evals package loads an mcp client that then runs the index.ts file, so there is no need to rebuild between tests. You can load environment variables by prefixing the npx command. Full documentation can be found &lt;a href=&#34;https://www.mcpevals.io/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;OPENAI_API_KEY=your-key  npx mcp-eval evals.ts index.ts&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;h3&gt;Common Issues&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connection Issues&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Verify MySQL server is running and accessible&lt;/li&gt; &#xA;   &lt;li&gt;Check credentials and permissions&lt;/li&gt; &#xA;   &lt;li&gt;Ensure SSL/TLS configuration is correct if enabled&lt;/li&gt; &#xA;   &lt;li&gt;Try connecting with a MySQL client to confirm access&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Performance Issues&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Adjust connection pool size&lt;/li&gt; &#xA;   &lt;li&gt;Configure query timeout values&lt;/li&gt; &#xA;   &lt;li&gt;Enable query caching if needed&lt;/li&gt; &#xA;   &lt;li&gt;Check query complexity settings&lt;/li&gt; &#xA;   &lt;li&gt;Monitor server resource usage&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Security Restrictions&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Review rate limiting configuration&lt;/li&gt; &#xA;   &lt;li&gt;Check query whitelist/blacklist settings&lt;/li&gt; &#xA;   &lt;li&gt;Verify SSL/TLS settings&lt;/li&gt; &#xA;   &lt;li&gt;Ensure the user has appropriate MySQL permissions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Path Resolution&lt;/strong&gt; If you encounter an error &#34;Could not connect to MCP server mcp-server-mysql&#34;, explicitly set the path of all required binaries:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;env&#34;: {&#xA;    &#34;PATH&#34;: &#34;/path/to/node/bin:/usr/bin:/bin&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;Where can I find my &lt;code&gt;node&lt;/code&gt; bin path&lt;/em&gt; Run the following command to get it:&lt;/p&gt; &#xA;&lt;p&gt;For &lt;strong&gt;PATH&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;$(which node)/../&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;strong&gt;NODE_PATH&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;echo &#34;$(which node)/../../lib/node_modules&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Claude Desktop Specific Issues&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you see &#34;Server disconnected&#34; logs in Claude Desktop, check the logs at &lt;code&gt;~/Library/Logs/Claude/mcp-server-mcp_server_mysql.log&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Ensure you&#39;re using the absolute path to both the Node binary and the server script&lt;/li&gt; &#xA;   &lt;li&gt;Check if your &lt;code&gt;.env&lt;/code&gt; file is being properly loaded; use explicit environment variables in the configuration&lt;/li&gt; &#xA;   &lt;li&gt;Try running the server directly from the command line to see if there are connection issues&lt;/li&gt; &#xA;   &lt;li&gt;If you need write operations (INSERT, UPDATE, DELETE), set the appropriate flags to &#34;true&#34; in your configuration: &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;env&#34;: {&#xA;  &#34;ALLOW_INSERT_OPERATION&#34;: &#34;true&#34;,  // Enable INSERT operations&#xA;  &#34;ALLOW_UPDATE_OPERATION&#34;: &#34;true&#34;,  // Enable UPDATE operations&#xA;  &#34;ALLOW_DELETE_OPERATION&#34;: &#34;true&#34;   // Enable DELETE operations&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Ensure your MySQL user has the appropriate permissions for the operations you&#39;re enabling&lt;/li&gt; &#xA;   &lt;li&gt;For direct execution configuration, use: &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;mcpServers&#34;: {&#xA;    &#34;mcp_server_mysql&#34;: {&#xA;      &#34;command&#34;: &#34;/full/path/to/node&#34;,&#xA;      &#34;args&#34;: [&#xA;        &#34;/full/path/to/mcp-server-mysql/dist/index.js&#34;&#xA;      ],&#xA;      &#34;env&#34;: {&#xA;        &#34;MYSQL_HOST&#34;: &#34;127.0.0.1&#34;,&#xA;        &#34;MYSQL_PORT&#34;: &#34;3306&#34;,&#xA;        &#34;MYSQL_USER&#34;: &#34;root&#34;,&#xA;        &#34;MYSQL_PASS&#34;: &#34;your_password&#34;,&#xA;        &#34;MYSQL_DB&#34;: &#34;your_database&#34;&#xA;      }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Authentication Issues&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;For MySQL 8.0+, ensure the server supports the &lt;code&gt;caching_sha2_password&lt;/code&gt; authentication plugin&lt;/li&gt; &#xA;   &lt;li&gt;Check if your MySQL user is configured with the correct authentication method&lt;/li&gt; &#xA;   &lt;li&gt;Try creating a user with legacy authentication if needed: &lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE USER &#39;user&#39;@&#39;localhost&#39; IDENTIFIED WITH mysql_native_password BY &#39;password&#39;;&#xA;&lt;/code&gt;&lt;/pre&gt; @lizhuangs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;I am encountering &lt;code&gt;Error [ERR_MODULE_NOT_FOUND]: Cannot find package &#39;dotenv&#39; imported from&lt;/code&gt; error try this workaround:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx -y -p @benborla29/mcp-server-mysql -p dotenv mcp-server-mysql&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Thanks to @lizhuangs&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please feel free to submit a Pull Request to &lt;a href=&#34;https://github.com/benborla/mcp-server-mysql&#34;&gt;https://github.com/benborla/mcp-server-mysql&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Many Thanks to the following Contributors:&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/benborla/mcp-server-mysql/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=benborla/mcp-server-mysql&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Development Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository&lt;/li&gt; &#xA; &lt;li&gt;Install dependencies: &lt;code&gt;pnpm install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build the project: &lt;code&gt;pnpm run build&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run tests: &lt;code&gt;pnpm test&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Project Roadmap&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re actively working on enhancing this MCP server. Check our &lt;a href=&#34;https://raw.githubusercontent.com/benborla/mcp-server-mysql/main/CHANGELOG.md&#34;&gt;CHANGELOG.md&lt;/a&gt; for details on planned features, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enhanced query capabilities with prepared statements&lt;/li&gt; &#xA; &lt;li&gt;Advanced security features&lt;/li&gt; &#xA; &lt;li&gt;Performance optimizations&lt;/li&gt; &#xA; &lt;li&gt;Comprehensive monitoring&lt;/li&gt; &#xA; &lt;li&gt;Expanded schema information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you&#39;d like to contribute to any of these areas, please check the issues on GitHub or open a new one to discuss your ideas.&lt;/p&gt; &#xA;&lt;h3&gt;Submitting Changes&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Create a feature branch: &lt;code&gt;git checkout -b feature/your-feature-name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Commit your changes: &lt;code&gt;git commit -am &#39;Add some feature&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push to the branch: &lt;code&gt;git push origin feature/your-feature-name&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Submit a pull request&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This MCP server is licensed under the MIT License. See the LICENSE file for details.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>automerge/automerge</title>
    <updated>2025-08-09T01:32:40Z</updated>
    <id>tag:github.com,2025-08-09:/automerge/automerge</id>
    <link href="https://github.com/automerge/automerge" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A JSON-like data structure (a CRDT) that can be modified concurrently by different users, and merged again automatically.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Automerge&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/automerge/automerge/main/img/sign.svg?sanitize=true&#34; width=&#34;500&#34; alt=&#34;Automerge logo&#34;&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://automerge.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/homepage-published-informational&#34; alt=&#34;homepage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://automerge.org/automerge/automerge/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-main-informational&#34; alt=&#34;main docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://docs.rs/automerge/latest/automerge&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-informational&#34; alt=&#34;latest docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/automerge/automerge/actions/workflows/ci.yaml&#34;&gt;&lt;img src=&#34;https://github.com/automerge/automerge/actions/workflows/ci.yaml/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Automerge is a library which provides fast implementations of several different CRDTs, a compact compression format for these CRDTs, and a sync protocol for efficiently transmitting those changes over the network. The objective of the project is to support &lt;a href=&#34;https://www.inkandswitch.com/local-first/&#34;&gt;local-first&lt;/a&gt; applications in the same way that relational databases support server applications - by providing mechanisms for persistence which allow application developers to avoid thinking about hard distributed computing problems. Automerge aims to be PostgreSQL for your local-first app.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re looking for documentation on the JavaScript implementation take a look at &lt;a href=&#34;https://automerge.org/docs/hello/&#34;&gt;https://automerge.org/docs/hello/&lt;/a&gt;. This repository also contains the core Rust library which is compiled to WebAssembly and exposed in JavaScript. The docs for this library can be found on &lt;a href=&#34;https://docs.rs/automerge/latest/automerge/&#34;&gt;docs.rs&lt;/a&gt;. Finally, there is a C library in &lt;code&gt;rust/automerge-c&lt;/code&gt;, take a look at the README there for more details.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re familiar with CRDTs and interested in the design of Automerge in particular take a look at &lt;a href=&#34;https://automerge.org/automerge-binary-format-spec&#34;&gt;https://automerge.org/automerge-binary-format-spec&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Finally, if you want to talk to us about this project please &lt;a href=&#34;https://discord.gg/HrpnPAU5zx&#34;&gt;join our Discord server&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This project is formed of a core Rust implementation which is exposed via FFI in javascript+WASM, C, and soon other languages. Alex (&lt;a href=&#34;https://github.com/alexjg/&#34;&gt;@alexjg&lt;/a&gt;) and Orion (&lt;a href=&#34;https://github.com/orionz&#34;&gt;@orionz&lt;/a&gt;) are working full time on maintaining automerge, other members of Ink and Switch are also contributing time and there are several other maintainers. We are currently focusing on a new implementation of the internals (with no API change) which achieves around a 100x reduction in memory usage.&lt;/p&gt; &#xA;&lt;p&gt;In general we try and respect semver.&lt;/p&gt; &#xA;&lt;h3&gt;JavaScript&lt;/h3&gt; &#xA;&lt;p&gt;A stable release of the javascript package is currently available as &lt;code&gt;@automerge/automerge@2.0.0&lt;/code&gt; where. pre-release verisions of the &lt;code&gt;2.0.1&lt;/code&gt; are available as &lt;code&gt;2.0.1-alpha.n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Rust&lt;/h3&gt; &#xA;&lt;p&gt;The rust codebase is currently oriented around producing a performant backend for the Javascript wrapper and as such the API for Rust code is low level and not well documented. We will be returning to this over the next few months but for now you will need to be comfortable reading the tests and asking questions to figure out how to use it. If you are looking to build rust applications which use automerge you may want to look into &lt;a href=&#34;https://github.com/automerge/autosurgeon&#34;&gt;autosurgeon&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Repository Organisation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;./rust&lt;/code&gt; - the rust implementation and also the Rust components of platform specific wrappers (e.g. &lt;code&gt;automerge-wasm&lt;/code&gt; for the WASM API or &lt;code&gt;automerge-c&lt;/code&gt; for the C FFI bindings)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./javascript&lt;/code&gt; - The javascript library which uses &lt;code&gt;automerge-wasm&lt;/code&gt; internally but presents a more idiomatic javascript interface&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./scripts&lt;/code&gt; - scripts which are useful to maintenance of the repository. This includes the scripts which are run in CI.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;./img&lt;/code&gt; - static assets for use in &lt;code&gt;.md&lt;/code&gt; files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To build this codebase you will need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;rust&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;yarn&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And if you are interested in building the automerge-c library&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cmake&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cmocka&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;doxygen&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ninja&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You will also need to install the following with &lt;code&gt;cargo install&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;wasm-bindgen-cli&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;wasm-opt&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cargo-deny&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And ensure you have added the &lt;code&gt;wasm32-unknown-unknown&lt;/code&gt; target for rust cross-compilation.&lt;/p&gt; &#xA;&lt;p&gt;The various subprojects (the rust code, the wrapper projects) have their own build instructions, but to run the tests that will be run in CI you can run &lt;code&gt;./scripts/ci/run&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;For macOS&lt;/h3&gt; &#xA;&lt;p&gt;These instructions worked to build locally on macOS 13.1 (arm64) as of Nov 29th 2022.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# clone the repo&#xA;git clone https://github.com/automerge/automerge&#xA;cd automerge&#xA;&#xA;# install rustup&#xA;curl --proto &#39;=https&#39; --tlsv1.2 -sSf https://sh.rustup.rs | sh&#xA;&#xA;# install homebrew&#xA;/bin/bash -c &#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)&#34;&#xA;&#xA;# install cmake, node, cmocka&#xA;brew install cmake node cmocka&#xA;&#xA;# install yarn&#xA;npm install --global yarn&#xA;&#xA;# install javascript dependencies&#xA;yarn --cwd ./javascript&#xA;&#xA;# install rust dependencies&#xA;cargo install wasm-bindgen-cli wasm-opt cargo-deny&#xA;&#xA;# get nightly rust to produce optimized automerge-c builds&#xA;rustup toolchain install nightly&#xA;rustup component add rust-src --toolchain nightly&#xA;&#xA;# add wasm target in addition to current architecture&#xA;rustup target add wasm32-unknown-unknown&#xA;&#xA;# Run ci script&#xA;./scripts/ci/run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If your build fails to find &lt;code&gt;cmocka.h&lt;/code&gt; you may need to teach it about homebrew&#39;s installation location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export CPATH=/opt/homebrew/include&#xA;export LIBRARY_PATH=/opt/homebrew/lib&#xA;./scripts/ci/run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nix Flake&lt;/h2&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix&lt;/a&gt; installed, there is a flake available with all of the dependencies configured and some helper scripts.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix develop&#xA;&#xA;  ____                                          _&#xA; / ___|___  _ __ ___  _ __ ___   __ _ _ __   __| |___&#xA;| |   / _ \| &#39;_ ` _ \| &#39;_ ` _ \ / _` | &#39;_ \ / _` / __|&#xA;| |__| (_) | | | | | | | | | | | (_| | | | | (_| \__ \&#xA; \____\___/|_| |_| |_|_| |_| |_|\__,_|_| |_|\__,_|___/&#xA;&#xA;&#xA;build:deno          | Build Deno-wrapped Wasm library&#xA;build:host          | Build for aarch64-darwin&#xA;build:node          | Build JS-wrapped Wasm library&#xA;build:wasi          | Build for Wasm32-WASI&#xA;build:wasm:nodejs   | Build for wasm32-unknown-unknown with Node.js bindgings&#xA;build:wasm:web      | Build for wasm32-unknown-unknown with web bindings&#xA;docs:build:host     | Refresh the docs&#xA;docs:build:wasm     | Refresh the docs with the wasm32-unknown-unknown target&#xA;docs:open:host      | Open refreshed docs&#xA;docs:open:wasm      | Open refreshed docs&#xA;# ‚úÇÔ∏è  SNIP ‚úÇÔ∏è&#xA;&#xA;$ rustc --version&#xA;rustc 1.82.0 (f6e511eec 2024-10-15) # latest at time of writing&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please try and split your changes up into relatively independent commits which change one subsystem at a time and add good commit messages which describe what the change is and why you&#39;re making it (err on the side of longer commit messages). &lt;code&gt;git blame&lt;/code&gt; should give future maintainers a good idea of why something is the way it is.&lt;/p&gt; &#xA;&lt;h3&gt;Releasing&lt;/h3&gt; &#xA;&lt;p&gt;There are four artefacts in this repository which need releasing:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;code&gt;@automerge/automerge&lt;/code&gt; NPM package&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;@automerge/automerge-wasm&lt;/code&gt; NPM package&lt;/li&gt; &#xA; &lt;li&gt;The automerge deno crate&lt;/li&gt; &#xA; &lt;li&gt;The &lt;code&gt;automerge&lt;/code&gt; rust crate&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;JS Packages&lt;/h4&gt; &#xA;&lt;p&gt;The NPM package is released automatically by CI tooling whenever a new Github release is created. This means that the process for releasing an ew JS version is:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Bump the version in &lt;code&gt;@automerge/automerge&lt;/code&gt; also in &lt;code&gt;javascript/package.json&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Put in a PR to main with the version bump, wait for tests to run and merge to &lt;code&gt;main&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Once merged to main, create a tag of the form &lt;code&gt;js/automerge-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a new release on Github referring to the tag in question&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;This does depend on an access token available as &lt;code&gt;NPM_TOKEN&lt;/code&gt; in the actions environment, this token is generated with a 30 day expiry date so needs (manually) refreshing every so often.&lt;/p&gt; &#xA;&lt;h4&gt;Rust Package&lt;/h4&gt; &#xA;&lt;p&gt;This is much easier, but less automatic. The steps to release are:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Bump the version in &lt;code&gt;automerge/Cargo.toml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push a PR and merge once clean&lt;/li&gt; &#xA; &lt;li&gt;Tag the release as &lt;code&gt;rust/automerge@&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Push the tag to the repository&lt;/li&gt; &#xA; &lt;li&gt;Publish the release with &lt;code&gt;cargo publish&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>