<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-02-04T01:37:26Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>varunshenoy/GraphGPT</title>
    <updated>2023-02-04T01:37:26Z</updated>
    <id>tag:github.com,2023-02-04:/varunshenoy/GraphGPT</id>
    <link href="https://github.com/varunshenoy/GraphGPT" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Extrapolating knowledge graphs from unstructured text using GPT-3 üïµÔ∏è‚Äç‚ôÇÔ∏è&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GraphGPT&lt;/h1&gt; &#xA;&lt;h3&gt;Natural Language ‚Üí Knowledge Graph&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/varunshenoy/GraphGPT/main/demo.gif&#34; alt=&#34;demo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;GraphGPT converts unstructured natural language into a knowledge graph. Pass in the synopsis of your favorite movie, a passage from a confusing Wikipedia page, or transcript from a video to generate a graph visualization of entities and their relationships.&lt;/p&gt; &#xA;&lt;p&gt;Successive queries can update the existing state of the graph or create an entirely new structure. For example, updating the current state could involve injecting new information through nodes and edges or changing the color of certain nodes.&lt;/p&gt; &#xA;&lt;p&gt;The current few-shot prompt guides GPT-3 in accurately understanding the JSON formatting GraphGPT requires for proper rendering. You can see the entire prompt in &lt;code&gt;public/prompts/main.prompt&lt;/code&gt;. A major issue at the moment is latency. Due to the nature of OpenAI API calls, it takes up to 20 seconds to receive a response.&lt;/p&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt; to download required dependencies (currently just &lt;a href=&#34;https://github.com/crubier/react-graph-vis&#34;&gt;react-graph-vis&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Enter your OPENAI_API_KEY in &lt;code&gt;src/App.js&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;npm run start&lt;/code&gt;. GraphGPT should open up in a new browser tab.&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>AlaSQL/alasql</title>
    <updated>2023-02-04T01:37:26Z</updated>
    <id>tag:github.com,2023-02-04:/AlaSQL/alasql</id>
    <link href="https://github.com/AlaSQL/alasql" rel="alternate"></link>
    <summary type="html">&lt;p&gt;AlaSQL.js - JavaScript SQL database for browser and Node.js. Handles both traditional relational tables and nested JSON data (NoSQL). Export, store, and import data from localStorage, IndexedDB, or Excel.&lt;/p&gt;&lt;hr&gt;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;AlaSQL is an unfunded open source project installed 100k+ times each month. &lt;a href=&#34;https://github.com/AlaSQL/alasql/issues?q=is%3Aopen+label%3A%22Help+wanted%22+sort%3Aupdated-desc&#34;&gt;Please donate your time&lt;/a&gt;. We appreciate any and all contributions we can get.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Have a question? Ask on &lt;a href=&#34;http://stackoverflow.com/questions/ask?tags=AlaSQL&#34;&gt;Stack Overflow&lt;/a&gt; using the &#34;alasql&#34; tag.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Wondering if you should upgrade to v3? You probably should, unless you are using WebSQL. Check the the breaking changes &lt;a href=&#34;https://github.com/AlaSQL/alasql/releases/tag/v3.0.0&#34;&gt;here&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alasql/alasql/actions&#34;&gt;&lt;img src=&#34;https://github.com/alasql/alasql/workflows/CI-test/badge.svg?sanitize=true&#34; alt=&#34;CI-test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://npm-stat.com/charts.html?package=alasql&#34;&gt;&lt;img src=&#34;http://img.shields.io/npm/dm/alasql.svg?style=flat&amp;amp;label=npm%20downloads&#34; alt=&#34;NPM downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://open-oss.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Open--OSS-%E2%9C%94-brightgreen.svg?sanitize=true&#34; alt=&#34;OPEN open source software&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/alasql&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/alasql/alasql.svg?label=npm&amp;amp;a&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/alasql/alasql&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/alasql/alasql.svg?label=Github%20%E2%98%85&amp;amp;a&#34; alt=&#34;Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://isitmaintained.com/project/%5Cn/alasql&#34; title=&#34;Average time to resolve an issue&#34;&gt;&lt;img src=&#34;http://isitmaintained.com/badge/resolution/alasql/alasql.svg?sanitize=true&#34; alt=&#34;Average time to resolve an issue&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://rawgit.com/alasql/alasql/develop/test/coverage/lcov-report/dist/alasql.fs.js.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/alasql/alasql/develop.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bestpractices.coreinfrastructure.org/projects/328&#34;&gt;&lt;img src=&#34;https://bestpractices.coreinfrastructure.org/projects/328/badge&#34; alt=&#34;CII Best Practices&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.jsdelivr.com/package/npm/alasql&#34;&gt;&lt;img src=&#34;https://data.jsdelivr.com/v1/package/npm/alasql/badge?style=rounded&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/code_style-prettier-ff69b4.svg?style=flat&#34; alt=&#34;code style: prettier&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;AlaSQL&lt;/h1&gt; &#xA;&lt;h2 align=&#34;center&#34;&gt;&lt;a href=&#34;http://alasql.org&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1063454/19309516/94f8007e-9085-11e6-810f-62fd60b42185.png&#34; alt=&#34;AlaSQL logo&#34; styl=&#34;max-width:80%&#34;&gt;&lt;/a&gt; &lt;/h2&gt; &#xA;&lt;p&gt;AlaSQL - &lt;em&gt;( &lt;a href=&#34;http://en.wiktionary.org/wiki/%C3%A0_la&#34;&gt;√† la&lt;/a&gt; &lt;a href=&#34;http://en.wikipedia.org/wiki/SQL&#34;&gt;SQL&lt;/a&gt; ) [√¶l√¶ …õskju:…õl]&lt;/em&gt; - is an open source SQL database for JavaScript with a strong focus on query speed and data source flexibility for both relational data and schemaless data. It works in the web browser, Node.js, and mobile apps.&lt;/p&gt; &#xA;&lt;p&gt;This library is designed for:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fast in-memory SQL data processing for BI and ERP applications on fat clients&lt;/li&gt; &#xA; &lt;li&gt;Easy ETL and options for persistence by data import / manipulation / export of several formats&lt;/li&gt; &#xA; &lt;li&gt;All major browsers, Node.js, and mobile applications&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We focus on &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Speed&#34;&gt;speed&lt;/a&gt; by taking advantage of the dynamic nature of JavaScript when building up queries. Real-world solutions demand flexibility regarding where data comes from and where it is to be stored. We focus on flexibility by making sure you can &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Import-export&#34;&gt;import/export&lt;/a&gt; and query directly on data stored in Excel (both &lt;code&gt;.xls&lt;/code&gt; and &lt;code&gt;.xlsx&lt;/code&gt;), CSV, JSON, TAB, IndexedDB, LocalStorage, and SQLite files.&lt;/p&gt; &#xA;&lt;p&gt;The library adds the comfort of a full database engine to your JavaScript app. No, really - it&#39;s working towards a full database engine complying with &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Supported-SQL-statements&#34;&gt;most of the SQL-99 language&lt;/a&gt;, spiced up with additional syntax for NoSQL (schema-less) data and graph networks.&lt;/p&gt; &#xA;&lt;h4&gt;Traditional SQL Table&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/* create SQL Table and add data */&#xA;alasql(&#34;CREATE TABLE cities (city string, pop number)&#34;);&#xA;&#xA;alasql(&#34;INSERT INTO cities VALUES (&#39;Paris&#39;,2249975),(&#39;Berlin&#39;,3517424),(&#39;Madrid&#39;,3041579)&#34;);&#xA;&#xA;/* execute query */&#xA;var res = alasql(&#34;SELECT * FROM cities WHERE pop &amp;lt; 3500000 ORDER BY pop DESC&#34;);&#xA;&#xA;// res = [ { &#34;city&#34;: &#34;Madrid&#34;, &#34;pop&#34;: 3041579 }, { &#34;city&#34;: &#34;Paris&#34;, &#34;pop&#34;: 2249975 } ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsfiddle.net/jqk80ard/&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Array of Objects&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var data = [ {a: 1, b: 10}, {a: 2, b: 20}, {a: 1, b: 30} ];&#xA;&#xA;var res = alasql(&#39;SELECT a, SUM(b) AS b FROM ? GROUP BY a&#39;,[data]);&#xA;&#xA;// res = [ { &#34;a&#34;: 1, &#34;b&#34;: 40},{ &#34;a&#34;: 2, &#34;b&#34;: 20 } ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsfiddle.net/8brvex4f/&#34;&gt;Live Demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Spreadsheet&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// file is read asynchronously (Promise returned when SQL given as array)&#xA;alasql([&#39;SELECT * FROM XLS(&#34;./data/mydata&#34;) WHERE lastname LIKE &#34;A%&#34; and city = &#34;London&#34; GROUP BY name &#39;])&#xA;    .then(function(res){&#xA;        console.log(res); // output depends on mydata.xls&#xA;    }).catch(function(err){&#xA;        console.log(&#39;Does the file exist? There was an error:&#39;, err);&#xA;    });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Bulk Data Load&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;alasql(&#34;CREATE TABLE example1 (a INT, b INT)&#34;);&#xA;&#xA;// alasql&#39;s data store for a table can be assigned directly&#xA;alasql.tables.example1.data = [&#xA;    {a:2,b:6},&#xA;    {a:3,b:4}&#xA;];&#xA;&#xA;// ... or manipulated with normal SQL&#xA;alasql(&#34;INSERT INTO example1 VALUES (1,5)&#34;);&#xA;&#xA;var res = alasql(&#34;SELECT * FROM example1 ORDER BY b DESC&#34;);&#xA;&#xA;console.log(res); // [{a:2,b:6},{a:1,b:5},{a:3,b:4}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are familiar with SQL it should come as no surprise that proper use of indexes on your tables is essential to get good performance.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add alasql                # yarn&#xA;&#xA;npm install alasql             # npm&#xA;&#xA;npm install -g alasql          # global install of command line tool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the browsers: include &lt;a href=&#34;https://cdn.jsdelivr.net/npm/alasql&#34;&gt;alasql.min.js&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;https://cdn.jsdelivr.net/npm/alasql@3&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Getting%20started&#34;&gt;&#34;Getting started&#34; section of the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;More advanced topics are covered in other wiki sections like &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Data-manipulation&#34;&gt;&#34;Data manipulation&#34;&lt;/a&gt; and in questions on &lt;a href=&#34;http://stackoverflow.com/questions/tagged/alasql&#34;&gt;Stack Overflow&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Other links:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Documentation: &lt;a href=&#34;https://github.com/alasql/alasql/wiki&#34;&gt;Github wiki&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Library CDN: &lt;a href=&#34;http://www.jsdelivr.com/#!alasql&#34;&gt;jsDelivr.com&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feedback: &lt;a href=&#34;https://github.com/alasql/alasql/issues/new&#34;&gt;Open an issue&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try online: &lt;a href=&#34;http://alasql.org/console?CREATE TABLE cities (city string, population number);INSERT INTO cities VALUES (&#39;Rome&#39;,2863223), (&#39;Paris&#39;,2249975),(&#39;Berlin&#39;,3517424), (&#39;Madrid&#39;,3041579);SELECT * FROM cities WHERE population &lt; 3500000 ORDER BY population DESC&#34;&gt;Playground&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Website: &lt;a href=&#34;http://AlaSQL.org&#34;&gt;alasql.org&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Please note&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;All contributions are extremely welcome and greatly appreciated(!)&lt;/strong&gt; - The project has never received any funding and is based on unpaid voluntary work: &lt;a href=&#34;https://github.com/alasql/alasql/raw/develop/CONTRIBUTING.md&#34;&gt;We really (really) love pull requests&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The AlaSQL project depends on your contribution of code and &lt;s&gt;may&lt;/s&gt; have &lt;a href=&#34;https://github.com/alasql/alasql/labels/%21%20Bug&#34;&gt;bugs&lt;/a&gt;. So please, submit any bugs and suggestions &lt;a href=&#34;https://github.com/alasql/alasql/issues/new&#34;&gt;as an issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Please check out the &lt;a href=&#34;https://github.com/alasql/alasql#limitations&#34;&gt;limitations of the library&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;AlaSQL is designed for speed and includes some of the classic SQL engine optimizations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Queries are cached as compiled functions&lt;/li&gt; &#xA; &lt;li&gt;Joined tables are pre-indexed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;WHERE&lt;/code&gt; expressions are pre-filtered for joins&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See more &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Speed&#34;&gt;performance-related info on the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features you might like&lt;/h2&gt; &#xA;&lt;h3&gt;Traditional SQL&lt;/h3&gt; &#xA;&lt;p&gt;Use &#34;good old&#34; SQL on your data with multiple levels of: &lt;code&gt;JOIN&lt;/code&gt;, &lt;code&gt;VIEW&lt;/code&gt;, &lt;code&gt;GROUP BY&lt;/code&gt;, &lt;code&gt;UNION&lt;/code&gt;, &lt;code&gt;PRIMARY KEY&lt;/code&gt;, &lt;code&gt;ANY&lt;/code&gt;, &lt;code&gt;ALL&lt;/code&gt;, &lt;code&gt;IN&lt;/code&gt;, &lt;code&gt;ROLLUP()&lt;/code&gt;, &lt;code&gt;CUBE()&lt;/code&gt;, &lt;code&gt;GROUPING SETS()&lt;/code&gt;, &lt;code&gt;CROSS APPLY&lt;/code&gt;, &lt;code&gt;OUTER APPLY&lt;/code&gt;, &lt;code&gt;WITH SELECT&lt;/code&gt;, and subqueries. &lt;a href=&#34;https://github.com/alasql/alasql/wiki/SQL%20keywords&#34;&gt;The wiki lists supported SQL statements and keywords&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;User-Defined Functions in your SQL&lt;/h3&gt; &#xA;&lt;p&gt;You can use all benefits of SQL and JavaScript together by defining your own custom functions. Just add new functions to the alasql.fn object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;alasql.fn.myfn = function(a,b) {&#xA;    return a*b+1;&#xA;};&#xA;var res = alasql(&#39;SELECT myfn(a,b) FROM one&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also define your own aggregator functions (like your own &lt;code&gt;SUM(...)&lt;/code&gt;). See more &lt;a href=&#34;https://github.com/alasql/alasql/wiki/User-Defined-Functions&#34;&gt;in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Compiled statements and functions&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var ins = alasql.compile(&#39;INSERT INTO one VALUES (?,?)&#39;);&#xA;ins(1,10);&#xA;ins(2,20);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Compile&#34;&gt;in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;SELECT against your JavaScript data&lt;/h3&gt; &#xA;&lt;p&gt;Group your JavaScript array of objects by field and count number of records in each group:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var data = [{a:1,b:1,c:1},{a:1,b:2,c:1},{a:1,b:3,c:1}, {a:2,b:1,c:1}];&#xA;var res = alasql(&#39;SELECT a, COUNT(*) AS b FROM ? GROUP BY a&#39;, [data] );&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more ideas for creative data manipulation &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Getting-started&#34;&gt;in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;JavaScript Sugar&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL extends &#34;good old&#34; SQL to make it closer to JavaScript. The &#34;sugar&#34; includes:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Write Json objects - &lt;code&gt;{a:&#39;1&#39;,b:@[&#39;1&#39;,&#39;2&#39;,&#39;3&#39;]}&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access object properties - &lt;code&gt;obj-&amp;gt;property-&amp;gt;subproperty&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access object and arrays elements - &lt;code&gt;obj-&amp;gt;(a*1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Access JavaScript functions - &lt;code&gt;obj-&amp;gt;valueOf()&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Format query output with &lt;code&gt;SELECT VALUE, ROW, COLUMN, MATRIX&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;ES5 multiline SQL with &lt;code&gt;var SQL = function(){/*SELECT &#39;MY MULTILINE SQL&#39;*/}&lt;/code&gt; and pass instead of SQL string (will not work if you compress your code)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Read and write Excel and raw data files&lt;/h3&gt; &#xA;&lt;p&gt;You can import from and export to CSV, TAB, TXT, and JSON files. File extensions can be omitted. Calls to files will always be asynchronous so multi-file queries should be chained:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var tabFile = &#39;mydata.tab&#39;;&#xA;&#xA;alasql.promise([&#xA;    &#34;SELECT * FROM txt(&#39;MyFile.log&#39;) WHERE [0] LIKE &#39;M%&#39;&#34;, // parameter-less query&#xA;    [ &#34;SELECT * FROM tab(?) ORDER BY [1]&#34;, [tabFile] ],    // [query, array of params]&#xA;    &#34;SELECT [3] AS city,[4] AS population FROM csv(&#39;./data/cities&#39;)&#34;,&#xA;    &#34;SELECT * FROM json(&#39;../config/myJsonfile&#39;)&#34;&#xA;]).then(function(results){&#xA;    console.log(results);&#xA;}).catch(console.error);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Read SQLite database files&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL can read (but not write) SQLite data files using &lt;a href=&#34;https://github.com/sql-js/sql.js&#34;&gt;SQL.js&lt;/a&gt; library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;alasql.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;sql.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;    alasql([&#xA;        &#39;ATTACH SQLITE DATABASE Chinook(&#34;Chinook_Sqlite.sqlite&#34;)&#39;,&#xA;        &#39;USE Chinook&#39;,&#xA;        &#39;SELECT * FROM Genre&#39;&#xA;    ]).then(function(res){&#xA;        console.log(&#34;Genres:&#34;,res.pop());&#xA;    });&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;sql.js&lt;/code&gt; calls will always be asynchronous.&lt;/p&gt; &#xA;&lt;h3&gt;AlaSQL works in the console - CLI&lt;/h3&gt; &#xA;&lt;p&gt;The node module ships with an &lt;code&gt;alasql&lt;/code&gt; command-line tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g alasql ## install the module globally&#xA;&#xA;$ alasql -h ## shows usage information&#xA;&#xA;$ alasql &#34;SET @data = @[{a:&#39;1&#39;,b:?},{a:&#39;2&#39;,b:?}]; SELECT a, b FROM @data;&#34; 10 20&#xA;[ 1, [ { a: 1, b: 10 }, { a: 2, b: 20 } ] ]&#xA;&#xA;$ alasql &#34;VALUE OF SELECT COUNT(*) AS abc FROM TXT(&#39;README.md&#39;) WHERE LENGTH([0]) &amp;gt; ?&#34; 140&#xA;// Number of lines with more than 140 characters in README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/alasql/alasql/wiki/AlaSQL-CLI&#34;&gt;More examples are included in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Features you might love&lt;/h2&gt; &#xA;&lt;h3&gt;AlaSQL ‚ô• D3.js&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL plays nice with d3.js and gives you a convenient way to integrate a specific subset of your data with the visual powers of D3. See more about &lt;a href=&#34;https://github.com/alasql/alasql/wiki/d3.js&#34;&gt;D3.js and AlaSQL in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AlaSQL ‚ô• Excel&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL can export data to both &lt;a href=&#34;https://github.com/alasql/alasql/wiki/XLS&#34;&gt;Excel 2003 (.xls)&lt;/a&gt; and &lt;a href=&#34;https://github.com/alasql/alasql/wiki/XLSX&#34;&gt;Excel 2007 (.xlsx)&lt;/a&gt; formats with coloring of cells and other Excel formatting functions.&lt;/p&gt; &#xA;&lt;h3&gt;AlaSQL ‚ô• Meteor&lt;/h3&gt; &#xA;&lt;p&gt;Meteor is amazing. You can query directly on your Meteor collections with SQL - simple and easy. See more about &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Meteor&#34;&gt;Meteor and AlaSQL in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AlaSQL ‚ô• Angular.js&lt;/h3&gt; &#xA;&lt;p&gt;Angular is great. In addition to normal data manipulation, AlaSQL works like a charm for exporting your present scope to Excel. See more about &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Angular.js&#34;&gt;Angular and AlaSQL in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AlaSQL ‚ô• Google Maps&lt;/h3&gt; &#xA;&lt;p&gt;Pinpointing data on a map should be easy. AlaSQL is great to prepare source data for Google Maps from, for example, Excel or CSV, making it one unit of work for fetching and identifying what&#39;s relevant. See more about &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Google-maps&#34;&gt;Google Maps and AlaSQL in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;AlaSQL ‚ô• Google Spreadsheets&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL can query data directly from a Google spreadsheet. A good &#34;partnership&#34; for easy editing and powerful data manipulation. See more about &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Google-Spreadsheets&#34;&gt;Google Spreadsheets and AlaSQL in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Miss a feature?&lt;/h3&gt; &#xA;&lt;p&gt;Take charge and &lt;a href=&#34;http://feathub.com/alasql/alasql/features/new&#34;&gt;add your idea&lt;/a&gt; or &lt;a href=&#34;http://feathub.com/alasql/alasql&#34;&gt;vote for your favorite feature&lt;/a&gt; to be implemented:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://feathub.com/alasql/alasql&#34;&gt;&lt;img src=&#34;http://feathub.com/alasql/alasql?format=svg&#34; alt=&#34;Feature Requests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;p&gt;Please be aware that AlaSQL has &lt;a href=&#34;https://github.com/alasql/alasql/labels/Bug&#34;&gt;bugs&lt;/a&gt;. Beside having some bugs, there are a number of limitations:&lt;/p&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;AlaSQL has a (long) list of keywords that must be escaped if used for column names. When selecting a field named &lt;code&gt;key&lt;/code&gt; please write &lt;code&gt;SELECT `key` FROM ...&lt;/code&gt; instead. This is also the case for words like &lt;code&gt;`value`&lt;/code&gt;, &lt;code&gt;`read`&lt;/code&gt;, &lt;code&gt;`count`&lt;/code&gt;, &lt;code&gt;`by`&lt;/code&gt;, &lt;code&gt;`top`&lt;/code&gt;, &lt;code&gt;`path`&lt;/code&gt;, &lt;code&gt;`deleted`&lt;/code&gt;, &lt;code&gt;`work`&lt;/code&gt; and &lt;code&gt;`offset`&lt;/code&gt;. Please consult the &lt;a href=&#34;https://github.com/alasql/alasql/wiki/AlaSQL-Keywords&#34;&gt;full list of keywords&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It is OK to &lt;code&gt;SELECT&lt;/code&gt; 1000000 records or to &lt;code&gt;JOIN&lt;/code&gt; two tables with 10000 records in each (You can use streaming functions to work with longer datasources - see &lt;a href=&#34;https://raw.githubusercontent.com/AlaSQL/alasql/develop/test/test143.js&#34;&gt;test/test143.js&lt;/a&gt;) but be aware that the workload is multiplied so &lt;code&gt;SELECT&lt;/code&gt;ing from more than 8 tables with just 100 rows in each will show bad performance. This is one of our top priorities to make better.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Limited functionality for transactions (supports only for localStorage) - Sorry, transactions are limited, because AlaSQL switched to more complex approach for handling &lt;code&gt;PRIMARY KEY&lt;/code&gt;s / &lt;code&gt;FOREIGN KEY&lt;/code&gt;s. Transactions will be fully turned on again in a future version.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A &lt;code&gt;(FULL) OUTER JOIN&lt;/code&gt; and &lt;code&gt;RIGHT JOIN&lt;/code&gt; of more than 2 tables will not produce expected results. &lt;code&gt;INNER JOIN&lt;/code&gt; and &lt;code&gt;LEFT JOIN&lt;/code&gt; are OK.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Please use aliases when you want fields with the same name from different tables (&lt;code&gt;SELECT a.id AS a_id, b.id AS b_id FROM ?&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;At the moment AlaSQL does not work with JSZip 3.0.0 - please use version 2.x.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;JOIN&lt;/code&gt;ing a sub-&lt;code&gt;SELECT&lt;/code&gt; does not work. Please use a &lt;code&gt;with&lt;/code&gt; structure (&lt;a href=&#34;https://github.com/alasql/alasql/issues/832#issuecomment-377574550&#34;&gt;Example here&lt;/a&gt;) or fetch the sub-&lt;code&gt;SELECT&lt;/code&gt; to a variable and pass it as an argument (&lt;a href=&#34;https://github.com/alasql/alasql/issues/832#issuecomment-377559478&#34;&gt;Example here&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;AlaSQL uses the &lt;a href=&#34;https://github.com/eligrey/FileSaver.js/&#34;&gt;FileSaver.js&lt;/a&gt; library for saving files locally from the browser. Please be aware that it does not save files in Safari 8.0.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;There are probably many others. Please help us fix them by &lt;a href=&#34;https://github.com/alasql/alasql/issues&#34;&gt;submitting an issue&lt;/a&gt;. Thank you!&lt;/p&gt; &#xA;&lt;h2&gt;How To&lt;/h2&gt; &#xA;&lt;h3&gt;Use AlaSQL to convert data from CSV to Excel&lt;/h3&gt; &#xA;&lt;p&gt;ETL example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;alasql([&#xA;    &#39;CREATE TABLE IF NOT EXISTS geo.country&#39;,&#xA;    &#39;SELECT * INTO geo.country FROM CSV(&#34;country.csv&#34;,{headers:true})&#39;,&#xA;    &#39;SELECT * INTO XLSX(&#34;asia&#34;) FROM geo.country WHERE continent_name = &#34;Asia&#34;&#39;&#xA;]).then(function(res){&#xA;    // results from the file asia.xlsx&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Use AlaSQL as a Web Worker&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL can run in a Web Worker. Please be aware that all interaction with AlaSQL when running must be async.&lt;/p&gt; &#xA;&lt;p&gt;From the browser thread, the browser build &lt;code&gt;alasql-worker.min.js&lt;/code&gt; automagically uses Web Workers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;alasql-worker.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;var arr = [{a:1},{a:2},{a:1}];&#xA;&#xA;alasql([[&#39;SELECT * FROM ?&#39;,[arr]]]).then(function(data){&#xA;    console.log(data);&#xA;});&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://jsfiddle.net/3vnmu2fo&#34;&gt;Live Demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The standard build &lt;code&gt;alasql.min.js&lt;/code&gt; will use Web Workers if &lt;code&gt;alasql.worker()&lt;/code&gt; is called:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;alasql.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;alasql.worker();&#xA;alasql([&#39;SELECT VALUE 10&#39;]).then(function(res){&#xA;    console.log(res);&#xA;}).catch(console.error);&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://jsfiddle.net/osxvdp5k/&#34;&gt;Live Demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;From a Web Worker, you can import &lt;code&gt;alasql.min.js&lt;/code&gt; with &lt;code&gt;importScripts&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;importScripts(&#39;alasql.min.js&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Webpack, Browserify, Vue and React (Native)&lt;/h3&gt; &#xA;&lt;p&gt;When targeting the browser, several code bundlers like Webpack and Browserify will pick up modules you might not want.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a list of modules that AlaSQL may require in certain environments or for certain features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;fs&lt;/li&gt; &#xA;   &lt;li&gt;net&lt;/li&gt; &#xA;   &lt;li&gt;tls&lt;/li&gt; &#xA;   &lt;li&gt;request&lt;/li&gt; &#xA;   &lt;li&gt;path&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;React Native &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;react-native&lt;/li&gt; &#xA;   &lt;li&gt;react-native-fs&lt;/li&gt; &#xA;   &lt;li&gt;react-native-fetch-blob&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Vertx &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;vertx&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Agonostic &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;XLSX/XLS support &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;cptable&lt;/li&gt; &#xA;     &lt;li&gt;jszip&lt;/li&gt; &#xA;     &lt;li&gt;xlsx&lt;/li&gt; &#xA;     &lt;li&gt;cpexcel&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;es6-promise&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Webpack&lt;/h4&gt; &#xA;&lt;p&gt;There are several ways to handle AlaSQL with Webpack:&lt;/p&gt; &#xA;&lt;h5&gt;IgnorePlugin&lt;/h5&gt; &#xA;&lt;p&gt;Ideal when you want to control which modules you want to import.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var IgnorePlugin =  require(&#34;webpack&#34;).IgnorePlugin;&#xA;&#xA;module.exports = {&#xA;  ...&#xA;  // Will ignore the modules fs, path, xlsx, request, vertx, and react-native modules&#xA;  plugins:[new IgnorePlugin(/(^fs$|cptable|jszip|xlsx|^es6-promise$|^net$|^tls$|^forever-agent$|^tough-cookie$|cpexcel|^path$|^request$|react-native|^vertx$)/)]&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;module.noParse&lt;/h5&gt; &#xA;&lt;p&gt;As of AlaSQL 0.3.5, you can simply tell Webpack not to parse AlaSQL, which avoids all the dynamic &lt;code&gt;require&lt;/code&gt; warnings and avoids using &lt;code&gt;eval&lt;/code&gt;/clashing with CSP with script-loader. &lt;a href=&#34;https://webpack.js.org/configuration/module/#modulenoparse&#34;&gt;Read the Webpack docs about noParse&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;//Don&#39;t parse alasql&#xA;{module:noParse:[/alasql/]}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;script-loader&lt;/h5&gt; &#xA;&lt;p&gt;If both of the solutions above fail to meet your requirements, you can load AlaSQL with &lt;a href=&#34;https://github.com/webpack/script-loader&#34;&gt;script-loader&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;//Load alasql in the global scope with script-loader&#xA;import &#34;script!alasql&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This can cause issues if you have a CSP that doesn&#39;t allow &lt;code&gt;eval&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Browserify&lt;/h4&gt; &#xA;&lt;p&gt;Read up on &lt;a href=&#34;https://github.com/substack/browserify-handbook#excluding&#34;&gt;excluding&lt;/a&gt;, &lt;a href=&#34;https://github.com/substack/browserify-handbook#ignoring&#34;&gt;ignoring&lt;/a&gt;, and &lt;a href=&#34;https://github.com/substack/browserify-handbook#shimming&#34;&gt;shimming&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example (using excluding)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var browserify = require(&#34;browserify&#34;);&#xA;var b = browserify(&#34;./main.js&#34;).bundle();&#xA;//Will ignore the modules fs, path, xlsx&#xA;[&#34;fs&#34;,&#34;path&#34;,&#34;xlsx&#34;,  ... ].forEach(ignore =&amp;gt; { b.ignore(ignore) });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Vue&lt;/h4&gt; &#xA;&lt;p&gt;For some frameworks (lige Vue) alasql cant access XLSX by it self. We recommend handling it by including AlaSQL the following way:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-import&#34;&gt;import XLSX from &#39;xlsx&#39;;&#xA;alasql.utils.isBrowserify = false;&#xA;alasql.utils.global.XLSX = XLSX;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;jQuery&lt;/h4&gt; &#xA;&lt;p&gt;Please remember to send the original event, and not the jQuery event, for elements. (Use &lt;code&gt;event.originalEvent&lt;/code&gt; instead of &lt;code&gt;myEvent&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;h3&gt;JSON-object&lt;/h3&gt; &#xA;&lt;p&gt;You can use JSON objects in your databases (do not forget use == and !== operators for deep comparison of objects):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;&#xA;alasql&amp;gt; SELECT VALUE {a:&#39;1&#39;,b:&#39;2&#39;}&#xA;&#xA;{a:1,b:2}&#xA;&#xA;alasql&amp;gt; SELECT VALUE {a:&#39;1&#39;,b:&#39;2&#39;} == {a:&#39;1&#39;,b:&#39;2&#39;}&#xA;&#xA;true&#xA;&#xA;alasql&amp;gt; SELECT VALUE {a:&#39;1&#39;,b:&#39;2&#39;}-&amp;gt;b&#xA;&#xA;2&#xA;&#xA;alasql&amp;gt; SELECT VALUE {a:&#39;1&#39;,b:(2*2)}-&amp;gt;b&#xA;&#xA;4&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try AlaSQL JSON objects in Console [sample](&lt;a href=&#34;http://alasql.org/console?drop&#34;&gt;http://alasql.org/console?drop&lt;/a&gt; table if exists one;create table one;insert into one values {a:@[1,2,3],c:{e:23}}, {a:@[{b:@[1,2,3]}]};select * from one)&lt;/p&gt; &#xA;&lt;h2&gt;Experimental&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Useful stuff, but there might be dragons&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Graphs&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL is a multi-paradigm database with support for graphs that can be searched or manipulated.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Who loves lovers of Alice?&#xA;var res = alasql(&#39;SEARCH / ANY(&amp;gt;&amp;gt; &amp;gt;&amp;gt; #Alice) name&#39;);&#xA;console.log(res) // [&#39;Olga&#39;,&#39;Helen&#39;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See more &lt;a href=&#34;https://github.com/alasql/alasql/wiki/GRAPH&#34;&gt;in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;localStorage and DOM-storage&lt;/h3&gt; &#xA;&lt;p&gt;You can use browser localStorage and &lt;a href=&#34;https://github.com/node-browser-compat/dom-storage&#34;&gt;DOM-storage&lt;/a&gt; as a data storage. Here is a sample:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;alasql(&#39;CREATE localStorage DATABASE IF NOT EXISTS Atlas&#39;);&#xA;alasql(&#39;ATTACH localStorage DATABASE Atlas AS MyAtlas&#39;);&#xA;alasql(&#39;CREATE TABLE IF NOT EXISTS MyAtlas.City (city string, population number)&#39;);&#xA;alasql(&#39;SELECT * INTO MyAtlas.City FROM ?&#39;,[ [&#xA;        {city:&#39;Vienna&#39;, population:1731000},&#xA;        {city:&#39;Budapest&#39;, population:1728000}&#xA;] ]);&#xA;var res = alasql(&#39;SELECT * FROM MyAtlas.City&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Try this sample in &lt;a href=&#34;http://jsfiddle.net/agershun/x1gq3wf2/&#34;&gt;jsFiddle&lt;/a&gt;. Run this sample two or three times, and AlaSQL store more and more data in localStorage. Here, &#34;Atlas&#34; is the name of localStorage database, where &#34;MyAtlas&#34; is a memory AlaSQL database.&lt;/p&gt; &#xA;&lt;p&gt;You can use localStorage in two modes: &lt;code&gt;SET AUTOCOMMIT ON&lt;/code&gt; to immediate save data to localStorage after each statement or &lt;code&gt;SET AUTOCOMMIT OFF&lt;/code&gt;. In this case, you need to use &lt;code&gt;COMMIT&lt;/code&gt; statement to save all data from in-memory mirror to localStorage.&lt;/p&gt; &#xA;&lt;h3&gt;Plugins&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL supports plugins. To install a plugin you need to use the &lt;code&gt;REQUIRE&lt;/code&gt; statement. See more &lt;a href=&#34;https://github.com/alasql/alasql/wiki/Plugins&#34;&gt;in the wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Alaserver - simple database server&lt;/h3&gt; &#xA;&lt;p&gt;Yes, you can even use AlaSQL as a very simple server for tests.&lt;/p&gt; &#xA;&lt;p&gt;To run enter the command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ alaserver&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;then open &lt;a href=&#34;http://127.0.0.1:1337/?SELECT%20VALUE%20(2*2)&#34;&gt;http://127.0.0.1:1337/?SELECT%20VALUE%20(2*2)&lt;/a&gt; in your browser&lt;/p&gt; &#xA;&lt;p&gt;Warning: Alaserver is not multi-threaded, not concurrent, and not secured.&lt;/p&gt; &#xA;&lt;h2&gt;Tests&lt;/h2&gt; &#xA;&lt;h3&gt;Regression tests&lt;/h3&gt; &#xA;&lt;p&gt;AlaSQL currently has over 1200 regression tests, but they only cover &lt;a href=&#34;https://rawgit.com/alasql/alasql/develop/test/coverage/lcov-report/dist/alasql.fs.js.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/alasql/alasql/develop.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; of the codebase.&lt;/p&gt; &#xA;&lt;p&gt;AlaSQL uses &lt;code&gt;mocha&lt;/code&gt; for regression tests. Install &lt;code&gt;mocha&lt;/code&gt; and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or open &lt;a href=&#34;https://raw.githubusercontent.com/AlaSQL/alasql/develop/test/index.html&#34;&gt;test/index.html&lt;/a&gt; for in-browser tests (Please serve via localhost with, for example, &lt;code&gt;http-server&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h4&gt;Tests with AlaSQL ASSERT from SQL&lt;/h4&gt; &#xA;&lt;p&gt;You can use AlaSQL&#39;s &lt;a href=&#34;https://raw.githubusercontent.com/AlaSQL/alasql/develop/wiki/Assert&#34;&gt;ASSERT&lt;/a&gt; operator to test the results of previous operation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE one (a INT);             ASSERT 1;&#xA;INSERT INTO one VALUES (1),(2),(3);   ASSERT 3;&#xA;SELECT * FROM one ORDER BY a DESC;    ASSERT [{a:3},{a:2},{a:1}];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;SQLLOGICTEST&lt;/h4&gt; &#xA;&lt;p&gt;AlaSQL uses &lt;code&gt;SQLLOGICTEST&lt;/code&gt; to test its compatibility with SQL-99. The tests include about 2 million queries and statements.&lt;/p&gt; &#xA;&lt;p&gt;The testruns can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/AlaSQL/alasql/develop/TESTLOG.md&#34;&gt;testlog&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/AlaSQL/alasql/develop/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to all the people who already contributed!&lt;/p&gt; &#xA;&lt;a href=&#34;https://github.com/alasql/alasql/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contributors-img.web.app/image?repo=alasql/alasql&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT - see &lt;a href=&#34;https://raw.githubusercontent.com/AlaSQL/alasql/develop/LICENSE&#34;&gt;MIT licence information&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Main contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/alasql&#34;&gt;Andrey Gershun&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/rangelwulff&#34;&gt;Mathias Rangel Wulff&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;AlaSQL is an &lt;a href=&#34;http://openopensource.org/&#34;&gt;OPEN Open Source Project&lt;/a&gt;. This means that:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We appreciate any and all contributions we can get. If you feel like contributing, have a look at &lt;a href=&#34;https://github.com/alasql/alasql/raw/develop/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Many thanks to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Zach Carter for &lt;a href=&#34;https://github.com/zaach/jison&#34;&gt;Jison parser-generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Andrew Kent for &lt;a href=&#34;https://github.com/forward/sql-parser&#34;&gt;JS SQL Parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Eli Grey for &lt;a href=&#34;https://github.com/eligrey/FileSaver.js&#34;&gt;FileSaver.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sheetjs.com&#34;&gt;SheetJS&lt;/a&gt; for &lt;a href=&#34;https://github.com/SheetJS/js-xlsx&#34;&gt;JS XLSX Library&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and other people for useful tools, which make our work much easier.&lt;/p&gt; &#xA;&lt;h3&gt;Related projects that have inspired us&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/alasql/alax&#34;&gt;AlaX&lt;/a&gt; - Export to Excel with colors and formats&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/alasql/alamdx&#34;&gt;AlaMDX&lt;/a&gt; - JavaScript MDX OLAP library (work in progress)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/alasql/alasql/wiki/Similar-Projects.md&#34;&gt;Other similar projects&lt;/a&gt; - list of databases on JavaScript&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://alasql.org&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1063454/14003946/d6e5c076-f156-11e5-8238-e62d2a8d20dc.png&#34; align=&#34;right&#34; alt=&#34;AlaSQL logo&#34;&gt;&lt;/a&gt; ¬© 2014-2023, Andrey Gershun (&lt;a href=&#34;mailto:agershun@gmail.com&#34;&gt;agershun@gmail.com&lt;/a&gt;) &amp;amp; Mathias Rangel Wulff (&lt;a href=&#34;mailto:m@rawu.dk&#34;&gt;m@rawu.dk&lt;/a&gt;)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mgechev/google-interview-preparation-problems</title>
    <updated>2023-02-04T01:37:26Z</updated>
    <id>tag:github.com,2023-02-04:/mgechev/google-interview-preparation-problems</id>
    <link href="https://github.com/mgechev/google-interview-preparation-problems" rel="alternate"></link>
    <summary type="html">&lt;p&gt;leetcode problems I solved to prepare for my Google interview.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Problems&lt;/h1&gt; &#xA;&lt;p&gt;Collection of problems and solutions of &lt;a href=&#34;https://leetcode.com/&#34;&gt;leetcode&lt;/a&gt;, &lt;a href=&#34;https://www.geeksforgeeks.org/&#34;&gt;geeksforgeeks&lt;/a&gt; challenges I solved while preparing for my Google interview.&lt;/p&gt; &#xA;&lt;h2&gt;Why?&lt;/h2&gt; &#xA;&lt;p&gt;Very often, I get asked how I prepared for my Google interview. This collection of problems from &lt;a href=&#34;https://leetcode.com/&#34;&gt;leetcode&lt;/a&gt;, &lt;a href=&#34;https://www.geeksforgeeks.org/&#34;&gt;geeksforgeeks&lt;/a&gt; was an essential part of the process.&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;Keep in mind that this is a small part of the entire journey. It does not contain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Study materials. You and the interviewer should have a common language for communication. This means that you&#39;d have to have a good understanding of the fundamental computer science terminology.&lt;/li&gt; &#xA; &lt;li&gt;Thought process. During the interview, you should explain your thought process and approach the problems in a certain way. To understand this part, I&#39;d recommend you looking at &#34;&lt;a href=&#34;https://www.amazon.com/Cracking-Coding-Interview-Programming-Questions/dp/098478280X&#34;&gt;Cracking the coding interview&lt;/a&gt;&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Some of the solutions in the repo might not be the most optimal ones. Feel free to open a PR with an alternative version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;These are not problems I got on my interviews&lt;/strong&gt;. These are sample problems from &lt;a href=&#34;https://leetcode.com&#34;&gt;leetcode&lt;/a&gt;, &lt;a href=&#34;https://www.geeksforgeeks.org/&#34;&gt;geeksforgeeks&lt;/a&gt;, which have similar complexity to what you&#39;d get on your interviews.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;MIT&lt;/p&gt;</summary>
  </entry>
</feed>