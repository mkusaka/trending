<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-11T01:29:07Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>safak/react-estate-ui</title>
    <updated>2024-03-11T01:29:07Z</updated>
    <id>tag:github.com,2024-03-11:/safak/react-estate-ui</id>
    <link href="https://github.com/safak/react-estate-ui" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Real Estate UI Design&lt;/h1&gt;</summary>
  </entry>
  <entry>
    <title>bruhbruhroblox/wallstreetlocal</title>
    <updated>2024-03-11T01:29:07Z</updated>
    <id>tag:github.com,2024-03-11:/bruhbruhroblox/wallstreetlocal</id>
    <link href="https://github.com/bruhbruhroblox/wallstreetlocal" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Free and open-source stock tracking website for America&#39;s biggest money managers. Democratizing SEC filings by making them more accessible and useful.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://wallstreetlocal.com&#34; target=&#34;_blank&#34;&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;img alt=&#34;wallstreetlocal&#34; src=&#34;https://raw.githubusercontent.com/bruhbruhroblox/wallstreetlocal/main/public/static/logo.png&#34; style=&#34;max-width: 100%;&#34;&gt; &#xA;  &lt;/picture&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A website that allows you to view the investments of America&#39;s largest investors. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; This repository holds the front-end code for wallstreetlocal, for the back-end, see &lt;a href=&#34;https://github.com/bruhbruhroblox/pinestreetlocal&#34; target=&#34;_blank&#34;&gt;here&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;!-- ![wallstreetlocal logo](./public//static/logo.png) --&gt; &#xA;&lt;h1 align=&#34;center&#34; color=&#34;red&#34;&gt; The site may be down currently due to excessive traffic. &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Creating a website is time consuming, and hosting is expensive. If you can, please consider &lt;a href=&#34;https://ko-fi.com/wallstreetlocal&#34; target=&#34;_blank&#34;&gt;donating&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;The Securities and Exchange Commission (SEC) keeps record of every company in the United States. Companies whose holdings surpass $100 million though, are required to file a special type of form: the 13F form. This form, filed quarterly, discloses the filer&#39;s holdings, providing transparency into their investment activities and allowing the public and other market participants to monitor them.&lt;/p&gt; &#xA;&lt;p&gt;The problem though, is that these holdings are often cumbersome to access, and valuable analysis is often hidden behind a paywall. Through &lt;strong&gt;wallstreetlocal&lt;/strong&gt;, the SEC&#39;s 13F filers become more accessible and open.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Large:&lt;/strong&gt; With over 850,000 companies archived, any filer registered with the SEC can be queried. Download the database &lt;a href=&#34;https://drive.google.com/file/d/1LT4xiFJkh6YlAPQDcov8YIKqcvevFlEE/view&#34;&gt;here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Recent Data:&lt;/strong&gt; View stocks in aggregation as the back-end collects and organizes holdings from individual filers. With thousands of cached stocks in our database, accurate and recent data is available for any evaluation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Historical Data:&lt;/strong&gt; View individual filings and their holdings in the explorer, or visit the SEC directly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://wallstreetlocal.com&#34; target=&#34;_blank&#34;&gt;Visit&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Query 13F filers from the SEC&lt;/li&gt; &#xA; &lt;li&gt;Update filers with up-to-date stock info&lt;/li&gt; &#xA; &lt;li&gt;View filer stocks in an accessible format&lt;/li&gt; &#xA; &lt;li&gt;Download any data in either JSON or CSV&lt;/li&gt; &#xA; &lt;li&gt;View filer historical filings and compare them&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;View wallstreetlocal at &lt;a href=&#34;https://wallstreetlocal.com&#34;&gt;&lt;code&gt;wallstreetlocal.com&lt;/code&gt;&lt;/a&gt;, or self-host using the following instructions.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Deploy.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Or for a production build, run&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run build &amp;amp;&amp;amp; npm run start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The back-end for this installation is already configured to &lt;a href=&#34;https://content.wallstreetlocal.com&#34;&gt;&lt;code&gt;content.wallstreetlocal.com&lt;/code&gt;&lt;/a&gt;, but if you want to self-host that too, you can find the back-end repository &lt;a href=&#34;https://github.com/bruhbruhroblox/pinestreetlocal&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more information on configuration, see the respective docs for wallstreetlocal&#39;s development stack.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/&#34;&gt;FastAPI&lt;/a&gt; for the back-end work.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nextjs.org/&#34;&gt;NextJS&lt;/a&gt; for the front-end.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.docker.com/&#34;&gt;Docker&lt;/a&gt; for all the different microservices.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/docs/&#34;&gt;MongoDB&lt;/a&gt; for the database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.meilisearch.com/docs&#34;&gt;Meilisearch&lt;/a&gt; for the search database.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nginxproxymanager.com/&#34;&gt;NGINX Proxy Manager&lt;/a&gt; for the reverse-proxy.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://grafana.com/&#34;&gt;Grafana&lt;/a&gt; for telemetry, using Prometheus, Tempo, Loki, and OpenTelemetry.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you feel you can contribute to this project, create an issue or a pull request.&lt;/p&gt; &#xA;&lt;p&gt;This project is soley mantained so it is prone to bugs and anti-patterns, please call them out where you see them. All contributions are highly appreciated!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bruhbruhroblox/wallstreetlocal/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/bruhbruhroblox/wallstreetlocal/main/CODE_OF_CONDUCT.MD&#34;&gt;Community Code of Conduct&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>open-ibc/ibc-app-solidity-template</title>
    <updated>2024-03-11T01:29:07Z</updated>
    <id>tag:github.com,2024-03-11:/open-ibc/ibc-app-solidity-template</id>
    <link href="https://github.com/open-ibc/ibc-app-solidity-template" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Template starter for IBC enabled contracts in Solidity for use with vibc-core-smart-contracts&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;‚õìÔ∏èüîó‚õìÔ∏è Template for IBC enabled Solidity contracts&lt;/h1&gt; &#xA;&lt;p&gt;This repo provides a starter project to build &lt;a href=&#34;https://github.com/cosmos/ibc&#34;&gt;IBC&lt;/a&gt; enabled Solidity contracts that connect rollups to one another Polymer Hub, through the &lt;a href=&#34;https://github.com/open-ibc/vibc-core-smart-contracts&#34;&gt;vIBC core contracts&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The repository is a &lt;em&gt;GitHub template&lt;/em&gt; repository so you can click &#34;Use this template&#34; to create your own project repository without having the entire commit history of the template.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/open-ibc/ibc-app-solidity-template/main/img/gh_template.png&#34; alt=&#34;GitHub template&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üìö Documentation&lt;/h2&gt; &#xA;&lt;p&gt;There&#39;s some basic information here in the README but a more comprehensive documentation can be found in &lt;a href=&#34;https://docs.polymerlabs.org/docs/category/build-ibc-dapps-1&#34;&gt;the official Polymer documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üìã Prerequisites&lt;/h2&gt; &#xA;&lt;p&gt;The repo is &lt;strong&gt;compatible with both Hardhat and Foundry&lt;/strong&gt; development environments.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have &lt;a href=&#34;https://git-scm.com/downloads&#34;&gt;git&lt;/a&gt; installed&lt;/li&gt; &#xA; &lt;li&gt;Have &lt;a href=&#34;https://nodejs.org&#34;&gt;node&lt;/a&gt; installed (v18+)&lt;/li&gt; &#xA; &lt;li&gt;Have &lt;a href=&#34;https://book.getfoundry.sh/getting-started/installation&#34;&gt;Foundry&lt;/a&gt; installed (Hardhat will be installed when running &lt;code&gt;npm install&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Have &lt;a href=&#34;https://just.systems/man/en/chapter_1.html&#34;&gt;just&lt;/a&gt; installed (recommended but not strictly necessary)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You&#39;ll need some API keys from third party&#39;s:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://optimism-sepolia.blockscout.com/account/api-key&#34;&gt;Optimism Sepolia&lt;/a&gt; and &lt;a href=&#34;https://base-sepolia.blockscout.com/account/api-key&#34;&gt;Base Sepolia&lt;/a&gt; Blockscout Explorer API keys&lt;/li&gt; &#xA; &lt;li&gt;Have an &lt;a href=&#34;https://docs.alchemy.com/docs/alchemy-quickstart-guide&#34;&gt;Alchemy API key&lt;/a&gt; for OP and Base Sepolia&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some basic knowledge of all of these tools is also required, although the details are abstracted away for basic usage.&lt;/p&gt; &#xA;&lt;h2&gt;üß∞ Install dependencies&lt;/h2&gt; &#xA;&lt;p&gt;To compile your contracts and start testing, make sure that you have all dependencies installed.&lt;/p&gt; &#xA;&lt;p&gt;From the root directory run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install the &lt;a href=&#34;https://github.com/open-ibc/vibc-core-smart-contracts&#34;&gt;vIBC core smart contracts&lt;/a&gt; as a dependency.&lt;/p&gt; &#xA;&lt;p&gt;Additionally Hardhat will be installed as a dev dependency with some useful plugins. Check &lt;code&gt;package.json&lt;/code&gt; for an exhaustive list.&lt;/p&gt; &#xA;&lt;h2&gt;‚öôÔ∏è Set up your environment variables&lt;/h2&gt; &#xA;&lt;p&gt;Convert the &lt;code&gt;.env.example&lt;/code&gt; file into an &lt;code&gt;.env&lt;/code&gt; file. This will ignore the file for future git commits as well as expose the environment variables. Add your private keys and update the other values if you want to customize (advanced usage feature).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cp .env.example .env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will enable you to sign transactions with your private key(s). If not added, the scripts from the justfile will fail.&lt;/p&gt; &#xA;&lt;h3&gt;Obtaining testnet ETH&lt;/h3&gt; &#xA;&lt;p&gt;The account associated with your private key must have both Base Sepolia and Optimism Sepolia ETH. To obtain the testnet ETH visit:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alchemy.com/faucets/optimism-sepolia&#34;&gt;Optimism Sepolia Faucet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.alchemy.com/faucets/base-sepolia&#34;&gt;Base Sepolia Faucet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üèÉüèΩüèÉüèª‚Äç‚ôÄÔ∏è Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;The project comes with a built-in dummy application called x-counter. You can find the contracts in the &lt;code&gt;/contracts&lt;/code&gt; directory as XCounterUC.sol and XCounter.sol (the former when using the universal channel, the latter when creating a custom IBC channel).&lt;/p&gt; &#xA;&lt;h3&gt;Custom IBC channel&lt;/h3&gt; &#xA;&lt;p&gt;The default setup (&lt;code&gt;.env&lt;/code&gt;, &lt;code&gt;config.json&lt;/code&gt;) are preconfigured to try to send packets over a custom channel.&lt;/p&gt; &#xA;&lt;p&gt;Run the following command to go through a full E2E sweep of the project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Usage: just do-it&#xA;just do-it&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It does the following under the hood:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Run the full E2E flow by setting the contracts, deploying them, creating a channel, and sending a packet&#xA;# Usage: just do-it&#xA;do-it:&#xA;    echo &#34;Running the full E2E flow...&#34;&#xA;    just set-contracts optimism XCounter &amp;amp;&amp;amp; just set-contracts base XCounter&#xA;    just deploy optimism base false&#xA;    just create-channel&#xA;    just send-packet optimism false&#xA;    echo &#34;You&#39;ve done it!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It makes sure you&#39;ve got the correct contracts set, deploys new instances, creates a channel and sends a packet over the channel once created.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: by default the sim-client is used to improve latency. This is useful for iterative development and testing BUT also insecure as it involves no proofs. Make sure to move to the client &lt;strong&gt;with proofs&lt;/strong&gt; by running another just command...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Usage: just switch-client [universal=true]&#xA;just switch-client false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check if the packet got through on the &lt;a href=&#34;https://sepolia.polymer.zone/packets&#34;&gt;Polymer IBC explorer&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Universal channels&lt;/h3&gt; &#xA;&lt;p&gt;Soon...&lt;/p&gt; &#xA;&lt;!-- TODO: add how to check for the packet on explorer or set up an event listener --&gt; &#xA;&lt;h2&gt;üíª Develop your custom application&lt;/h2&gt; &#xA;&lt;p&gt;The main work for you as a developer is to develop the contracts that make up your cross-chain logic.&lt;/p&gt; &#xA;&lt;p&gt;You can use the contracts in the &#34;/contracts/base&#34; directory as base contracts for creating IBC enabled contracts that can either send packets over the universal channel or create their own channel to send packets over.&lt;/p&gt; &#xA;&lt;p&gt;A complete walkthrough on how to develop these contracts is provided in the &lt;a href=&#34;https://docs.polymerlabs.org/docs/build/ibc-solidity/&#34;&gt;official Polymer documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üïπÔ∏è Interaction with the contracts&lt;/h2&gt; &#xA;&lt;p&gt;When the contracts are ready, you can go ahead and interact with the contracts through scripts. There is a Justfile to for the most common commands, with the underlying scripts in the /scripts folder.&lt;/p&gt; &#xA;&lt;p&gt;There&#39;s three types of default scripts in the project:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;_deploy.js&lt;/code&gt; and &lt;code&gt;deploy-config.js&lt;/code&gt; allow you to deploy your application contract&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;_create-channel.js&lt;/code&gt; and &lt;code&gt;create-channel-config.js&lt;/code&gt; creates a channel&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;send-packet.js&lt;/code&gt; sends packets over an existing custom channel, and &lt;code&gt;send-universal-packet.js&lt;/code&gt; is specifically for sending packets over a universal channel&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For every script you&#39;ll find a field in the configuration file!!&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: These are the default scripts provided. They provide the most generic interactions with the contracts to deploy, create channels and send packets. For more complicated use cases you will want to customize the scripts to your use case. See &lt;a href=&#34;https://raw.githubusercontent.com/open-ibc/ibc-app-solidity-template/main/#%F0%9F%A6%BE-advanced-usage&#34;&gt;advanced usage&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Deploy&lt;/h3&gt; &#xA;&lt;p&gt;Before deploying, make sure to update the config.json with your contract type to deploy for each of the chain you wish to deploy to.&lt;/p&gt; &#xA;&lt;p&gt;Do this by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Usage: just set-contracts [chain] [contract_type]&#xA;just set-contracts optimism MyContract&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to deploy &lt;em&gt;MyContract&lt;/em&gt; artefact to the Optimism (Sepolia) chain.&lt;/p&gt; &#xA;&lt;p&gt;Then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Usage: just deploy [source] [destination] [universal]&#xA;just deploy optimism base true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for an application that will use a universal channel, or:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# or&#xA;just deploy optimism base false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;for an application that uses custom channels.&lt;/p&gt; &#xA;&lt;p&gt;The script will take the output of the deployment and update the config file with all the relevant information.&lt;/p&gt; &#xA;&lt;p&gt;Before moving on, you&#39;ll want to check if the variables in your .env and config files line up with what is stored in the actual deployed contracts... especially when you&#39;re actively playing around with different configuration files and contracts.&lt;/p&gt; &#xA;&lt;p&gt;To do a sanity check, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Usage: just sanity-check [universal=true]&#xA;just sanity-check false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pick false for custom channels and true (or leave empty) for universal channels.&lt;/p&gt; &#xA;&lt;h3&gt;Create a channel&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re &lt;strong&gt;using universal channels, channel creation is not required&lt;/strong&gt;. Your contract will send and receive packet data from the Universal channel handler contract which already has a universal channel to send packets over. You can directly proceed to sending (universal) packets in that case.&lt;/p&gt; &#xA;&lt;p&gt;To create a custom channel, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just create-channel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates a channel between base and optimism. Note that the &lt;strong&gt;ORDER MATTERS&lt;/strong&gt;; if you picked optimism as the source chain (first argument) above, by default it will create the channel from optimism and vice versa.&lt;/p&gt; &#xA;&lt;p&gt;The script will take the output of the channel creation and update the config file with all the relevant information.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://explorer.prod.testnet.polymer.zone/channels&#34;&gt;channel tab in the explorer&lt;/a&gt; to find out if the correct channel-id&#39;s related to your contracts were updated in the config.&lt;/p&gt; &#xA;&lt;h3&gt;Send packets&lt;/h3&gt; &#xA;&lt;p&gt;Finally Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Usage: just send-packet [source] [universal]&#xA;just send-packet optimism true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to send a packet over a &lt;strong&gt;universal channel&lt;/strong&gt;. You can pick either optimism or base to send the packet from.&lt;/p&gt; &#xA;&lt;p&gt;Or run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;just send-packet optimism false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to send a packet over a &lt;strong&gt;custom channel&lt;/strong&gt;. You can pick either optimism or base to send the packet from.&lt;/p&gt; &#xA;&lt;h2&gt;Verify, don&#39;t trust&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: by default the sim-client is used to improve latency. This is useful for iterative development and testing BUT also insecure as it involves no proofs. Make sure to move to the client &lt;strong&gt;with proofs&lt;/strong&gt; by running another just command...&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Usage: just switch-client [universal=true]&#xA;just switch-client false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will use the op-stack client with proofs, making sure that the relayer is proving what is being submitted every step along the way, ensuring there&#39;s no trust assumption on the relayer.&lt;/p&gt; &#xA;&lt;h2&gt;ü¶æ Advanced usage&lt;/h2&gt; &#xA;&lt;p&gt;For advanced users, there&#39;s multiple custimizations to follow. These includes configuring the config.json manually and/or running the scripts without using just.&lt;/p&gt; &#xA;&lt;p&gt;For example, the last action to send a packet on a universal channel could be executed with this command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx hardhat run scripts/send-universal-packet.js --network base&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To send a universal packet from the contract specified in the config.sendUniversalPacket field in the config.&lt;/p&gt; &#xA;&lt;h2&gt;ü§ù Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome and encourage contributions from our community! Here‚Äôs how you can contribute.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at the open issues. If there&#39;s an issue that has the &lt;em&gt;help wanted&lt;/em&gt; label or &lt;em&gt;good first issue&lt;/em&gt;, those are up for grabs. Assign yourself to the issue so people know you&#39;re working on it.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively you can open an issue for a new idea or piece of feedback.&lt;/p&gt; &#xA;&lt;p&gt;When you want to contribute code, please follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fork the Repository:&lt;/strong&gt; Start by forking this repository.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Apply the improvements:&lt;/strong&gt; Want to optimize something or add support for additional developer tooling? Add your changes!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Create a Pull Request:&lt;/strong&gt; Once you&#39;re ready and have tested your added code, submit a PR to the repo and we&#39;ll review as soon as possible.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üí° Questions or Suggestions?&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open an issue for questions, suggestions, or discussions related to this repository. For further discussion as well as a showcase of some community projects, check out the &lt;a href=&#34;https://forum.polymerlabs.org&#34;&gt;Polymer developer forum&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thank you for being a part of our community!&lt;/p&gt;</summary>
  </entry>
</feed>