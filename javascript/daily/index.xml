<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-04-05T01:31:10Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>bholmesdev/simple-rsc</title>
    <updated>2023-04-05T01:31:10Z</updated>
    <id>tag:github.com,2023-04-05:/bholmesdev/simple-rsc</id>
    <link href="https://github.com/bholmesdev/simple-rsc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple React Server Components implementation that you can build yourself üôå&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Simple RSC ‚öõÔ∏è&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A simple React Server Components implementation that you can build yourself üôå&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=Fctw7WjmxpU&#34;&gt;Watch the live demo with Dan Abramov here!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;‚≠êÔ∏è Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;‚öôÔ∏è Demo a build process to bundle server components and handle client components with the &lt;code&gt;&#34;use client&#34;&lt;/code&gt; directive.&lt;/li&gt; &#xA; &lt;li&gt;üåä Show how React server components are streamed to the browser with a simple Node server.&lt;/li&gt; &#xA; &lt;li&gt;üìù Reveal how a server component requests appear to the client with a robust developer panel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;First, install dependencies with &#34;peer dependency&#34; errors disabled:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm i --legacy-peer-deps&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;This is due to experimental version conflicts. React Server Components are still quite new!&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then, start the Node development server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should trigger a build and start your server at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; üëÄ&lt;/p&gt; &#xA;&lt;p&gt;Hint: Try editing the &lt;code&gt;app/page.jsx&lt;/code&gt; file to see changes appear in your browser.&lt;/p&gt; &#xA;&lt;h2&gt;Project structure&lt;/h2&gt; &#xA;&lt;p&gt;This project is broken up into the &lt;code&gt;app/&lt;/code&gt; and &lt;code&gt;server/&lt;/code&gt; directories. The most important entrypoints are listed below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;app/ # ü•û your full-stack application&#xA;  page.jsx # server index route.&#xA;  _router.jsx # client script that requests your `page.jsx`.&#xA;&#xA;server/ # üíø your backend that builds and renders the `app/`&#xA;  index.js # server router for streaming React server components&#xA;  build.js # bundler to process server and client components&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;üôã‚Äç‚ôÄÔ∏è What is &lt;em&gt;not&lt;/em&gt; included?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;File-based routing conventions.&lt;/strong&gt; This repo includes a &lt;em&gt;single&lt;/em&gt; index route, with support for processing query params. If you need multiple routes, you can try &lt;a href=&#34;https://beta.nextjs.org/docs/routing/defining-routes&#34;&gt;NextJS&#39; new &lt;code&gt;app/&lt;/code&gt; directory.&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advance bundling for CSS-in-JS.&lt;/strong&gt; &lt;a href=&#34;https://tailwindcss.com/docs/installation/play-cdn&#34;&gt;A Tailwind script&lt;/a&gt; is included for playing with styles.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Advice on production deploys.&lt;/strong&gt; This is a &lt;em&gt;learning tool&lt;/em&gt; to show how React Server Components are used, &lt;em&gt;not&lt;/em&gt; the bedrock for your next side project! See &lt;a href=&#34;https://react.dev/learn/start-a-new-react-project&#34;&gt;React&#39;s updated &#34;Start a New React Project&#34; guide&lt;/a&gt; for advice on building production-ready apps.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cure53/DOMPurify</title>
    <updated>2023-04-05T01:31:10Z</updated>
    <id>tag:github.com,2023-04-05:/cure53/DOMPurify</id>
    <link href="https://github.com/cure53/DOMPurify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;DOMPurify - a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG. DOMPurify works with a secure default, but offers a lot of configurability and hooks. Demo:&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;DOMPurify&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://badge.fury.io/js/dompurify&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/dompurify.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://github.com/cure53/DOMPurify/workflows/Build%20and%20Test/badge.svg?branch=main&#34; alt=&#34;Build and Test&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/dompurify&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/dompurify.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cdn.jsdelivr.net/npm/dompurify/dist/purify.min.js&#34;&gt;&lt;img src=&#34;https://badgen.net/bundlephobia/min/dompurify?color=green&amp;amp;label=minified&#34; alt=&#34;minified size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://packagephobia.now.sh/result?p=dompurify&#34;&gt;&lt;img src=&#34;https://badgen.net/bundlephobia/minzip/dompurify?color=green&amp;amp;label=gzipped&#34; alt=&#34;gzip size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/cure53/DOMPurify/network/dependents&#34;&gt;&lt;img src=&#34;https://badgen.net/github/dependents-repo/cure53/dompurify?color=green&amp;amp;label=dependents&#34; alt=&#34;dependents&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodei.co/npm/dompurify/&#34;&gt;&lt;img src=&#34;https://nodei.co/npm/dompurify.png&#34; alt=&#34;NPM&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;DOMPurify is a DOM-only, super-fast, uber-tolerant XSS sanitizer for HTML, MathML and SVG.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s also very simple to use and get started with. DOMPurify was &lt;a href=&#34;https://github.com/cure53/DOMPurify/commit/a630922616927373485e0e787ab19e73e3691b2b&#34;&gt;started in February 2014&lt;/a&gt; and, meanwhile, has reached version 3.0.1.&lt;/p&gt; &#xA;&lt;p&gt;DOMPurify is written in JavaScript and works in all modern browsers (Safari (10+), Opera (15+), Edge, Firefox and Chrome - as well as almost anything else using Blink, Gecko or WebKit). It doesn&#39;t break on MSIE or other legacy browsers. It simply does nothing.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note that &lt;a href=&#34;https://github.com/cure53/DOMPurify/releases/tag/2.4.4&#34;&gt;DOMPurify v2.4.5&lt;/a&gt; is the final version supporting MSIE. For important security updates compatible with MSIE, please use the &lt;a href=&#34;https://github.com/cure53/DOMPurify/tree/2.x&#34;&gt;2.x branch&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Our automated tests cover &lt;a href=&#34;https://github.com/cure53/DOMPurify/raw/main/test/karma.custom-launchers.config.js#L5&#34;&gt;19 different browsers&lt;/a&gt; right now, more to come. We also cover Node.js v16.x, v17.x, v18.x and v19.x, running DOMPurify on &lt;a href=&#34;https://github.com/jsdom/jsdom&#34;&gt;jsdom&lt;/a&gt;. Older Node versions are known to work as well, but hey... no guarantees.&lt;/p&gt; &#xA;&lt;p&gt;DOMPurify is written by security people who have vast background in web attacks and XSS. Fear not. For more details please also read about our &lt;a href=&#34;https://github.com/cure53/DOMPurify/wiki/Security-Goals-&amp;amp;-Threat-Model&#34;&gt;Security Goals &amp;amp; Threat Model&lt;/a&gt;. Please, read it. Like, really.&lt;/p&gt; &#xA;&lt;h2&gt;What does it do?&lt;/h2&gt; &#xA;&lt;p&gt;DOMPurify sanitizes HTML and prevents XSS attacks. You can feed DOMPurify with string full of dirty HTML and it will return a string (unless configured otherwise) with clean HTML. DOMPurify will strip out everything that contains dangerous HTML and thereby prevent XSS attacks and other nastiness. It&#39;s also damn bloody fast. We use the technologies the browser provides and turn them into an XSS filter. The faster your browser, the faster DOMPurify will be.&lt;/p&gt; &#xA;&lt;h2&gt;How do I use it?&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s easy. Just include DOMPurify on your website.&lt;/p&gt; &#xA;&lt;h3&gt;Using the unminified development version&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;src/purify.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Using the minified and tested production version (source-map available)&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;dist/purify.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Afterwards you can sanitize strings by executing the following code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let clean = DOMPurify.sanitize(dirty);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or maybe this, if you love working with Angular or alike:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import * as DOMPurify from &#39;dompurify&#39;;&#xA;&#xA;let clean = DOMPurify.sanitize(&#39;&amp;lt;b&amp;gt;hello there&amp;lt;/b&amp;gt;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting HTML can be written into a DOM element using &lt;code&gt;innerHTML&lt;/code&gt; or the DOM using &lt;code&gt;document.write()&lt;/code&gt;. That is fully up to you. Note that by default, we permit HTML, SVG &lt;strong&gt;and&lt;/strong&gt; MathML. If you only need HTML, which might be a very common use-case, you can easily set that up as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let clean = DOMPurify.sanitize(dirty, { USE_PROFILES: { html: true } });&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Where are the TypeScript type definitions?&lt;/h3&gt; &#xA;&lt;p&gt;They can be found here: &lt;a href=&#34;https://github.com/DefinitelyTyped/DefinitelyTyped/tree/master/types/dompurify&#34;&gt;@types/dompurify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Is there any foot-gun potential?&lt;/h3&gt; &#xA;&lt;p&gt;Well, please note, if you &lt;em&gt;first&lt;/em&gt; sanitize HTML and then modify it &lt;em&gt;afterwards&lt;/em&gt;, you might easily &lt;strong&gt;void the effects of sanitization&lt;/strong&gt;. If you feed the sanitized markup to another library &lt;em&gt;after&lt;/em&gt; sanitization, please be certain that the library doesn&#39;t mess around with the HTML on its own.&lt;/p&gt; &#xA;&lt;h3&gt;Okay, makes sense, let&#39;s move on&lt;/h3&gt; &#xA;&lt;p&gt;After sanitizing your markup, you can also have a look at the property &lt;code&gt;DOMPurify.removed&lt;/code&gt; and find out, what elements and attributes were thrown out. Please &lt;strong&gt;do not use&lt;/strong&gt; this property for making any security critical decisions. This is just a little helper for curious minds.&lt;/p&gt; &#xA;&lt;h3&gt;Running DOMPurify on the server&lt;/h3&gt; &#xA;&lt;p&gt;DOMPurify technically also works server-side with Node.js. Our support strives to follow the &lt;a href=&#34;https://nodejs.org/en/about/releases/&#34;&gt;Node.js release cycle&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Running DOMPurify on the server requires a DOM to be present, which is probably no surprise. Usually, &lt;a href=&#34;https://github.com/jsdom/jsdom&#34;&gt;jsdom&lt;/a&gt; is the tool of choice and we &lt;strong&gt;strongly recommend&lt;/strong&gt; to use the latest version of &lt;em&gt;jsdom&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Why? Because older versions of &lt;em&gt;jsdom&lt;/em&gt; are known to be buggy in ways that result in XSS &lt;em&gt;even if&lt;/em&gt; DOMPurify does everything 100% correctly. There are &lt;strong&gt;known attack vectors&lt;/strong&gt; in, e.g. &lt;em&gt;jsdom v19.0.0&lt;/em&gt; that are fixed in &lt;em&gt;jsdom v20.0.0&lt;/em&gt; - and we really recommend to keep &lt;em&gt;jsdom&lt;/em&gt; up to date because of that.&lt;/p&gt; &#xA;&lt;p&gt;Other than that, you are fine to use DOMPurify on the server. Probably. This really depends on &lt;em&gt;jsdom&lt;/em&gt; or whatever DOM you utilize server-side. If you can live with that, this is how you get it to work:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install dompurify&#xA;npm install jsdom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For &lt;em&gt;jsdom&lt;/em&gt; (please use an up-to-date version), this should do the trick:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const createDOMPurify = require(&#39;dompurify&#39;);&#xA;const { JSDOM } = require(&#39;jsdom&#39;);&#xA;&#xA;const window = new JSDOM(&#39;&#39;).window;&#xA;const DOMPurify = createDOMPurify(window);&#xA;const clean = DOMPurify.sanitize(&#39;&amp;lt;b&amp;gt;hello there&amp;lt;/b&amp;gt;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or even this, if you prefer working with imports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { JSDOM } from &#39;jsdom&#39;;&#xA;import DOMPurify from &#39;dompurify&#39;;&#xA;&#xA;const window = new JSDOM(&#39;&#39;).window;&#xA;const purify = DOMPurify(window);&#xA;const clean = purify.sanitize(&#39;&amp;lt;b&amp;gt;hello there&amp;lt;/b&amp;gt;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you have problems making it work in your specific setup, consider looking at the amazing &lt;a href=&#34;https://github.com/kkomelin/isomorphic-dompurify&#34;&gt;isomorphic-dompurify&lt;/a&gt; project which solves lots of problems people might run into.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install isomorphic-dompurify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import DOMPurify from &#39;isomorphic-dompurify&#39;;&#xA;&#xA;const clean = DOMPurify.sanitize(&#39;&amp;lt;s&amp;gt;hello&amp;lt;/s&amp;gt;&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Is there a demo?&lt;/h2&gt; &#xA;&lt;p&gt;Of course there is a demo! &lt;a href=&#34;https://cure53.de/purify&#34;&gt;Play with DOMPurify&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What if I find a &lt;em&gt;security&lt;/em&gt; bug?&lt;/h2&gt; &#xA;&lt;p&gt;First of all, please immediately contact us via &lt;a href=&#34;mailto:mario@cure53.de&#34;&gt;email&lt;/a&gt; so we can work on a fix. &lt;a href=&#34;https://keyserver.ubuntu.com/pks/lookup?op=vindex&amp;amp;search=0xC26C858090F70ADA&#34;&gt;PGP key&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Also, you probably qualify for a bug bounty! The fine folks over at &lt;a href=&#34;https://www.fastmail.com/&#34;&gt;Fastmail&lt;/a&gt; use DOMPurify for their services and added our library to their bug bounty scope. So, if you find a way to bypass or weaken DOMPurify, please also have a look at their website and the &lt;a href=&#34;https://www.fastmail.com/about/bugbounty/&#34;&gt;bug bounty info&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Some purification samples please?&lt;/h2&gt; &#xA;&lt;p&gt;How does purified markup look like? Well, &lt;a href=&#34;https://cure53.de/purify&#34;&gt;the demo&lt;/a&gt; shows it for a big bunch of nasty elements. But let&#39;s also show some smaller examples!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DOMPurify.sanitize(&#39;&amp;lt;img src=x onerror=alert(1)//&amp;gt;&#39;); // becomes &amp;lt;img src=&#34;x&#34;&amp;gt;&#xA;DOMPurify.sanitize(&#39;&amp;lt;svg&amp;gt;&amp;lt;g/onload=alert(2)//&amp;lt;p&amp;gt;&#39;); // becomes &amp;lt;svg&amp;gt;&amp;lt;g&amp;gt;&amp;lt;/g&amp;gt;&amp;lt;/svg&amp;gt;&#xA;DOMPurify.sanitize(&#39;&amp;lt;p&amp;gt;abc&amp;lt;iframe//src=jAva&amp;amp;Tab;script:alert(3)&amp;gt;def&amp;lt;/p&amp;gt;&#39;); // becomes &amp;lt;p&amp;gt;abc&amp;lt;/p&amp;gt;&#xA;DOMPurify.sanitize(&#39;&amp;lt;math&amp;gt;&amp;lt;mi//xlink:href=&#34;data:x,&amp;lt;script&amp;gt;alert(4)&amp;lt;/script&amp;gt;&#34;&amp;gt;&#39;); // becomes &amp;lt;math&amp;gt;&amp;lt;mi&amp;gt;&amp;lt;/mi&amp;gt;&amp;lt;/math&amp;gt;&#xA;DOMPurify.sanitize(&#39;&amp;lt;TABLE&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;HELLO&amp;lt;/tr&amp;gt;&amp;lt;/TABL&amp;gt;&#39;); // becomes &amp;lt;table&amp;gt;&amp;lt;tbody&amp;gt;&amp;lt;tr&amp;gt;&amp;lt;td&amp;gt;HELLO&amp;lt;/td&amp;gt;&amp;lt;/tr&amp;gt;&amp;lt;/tbody&amp;gt;&amp;lt;/table&amp;gt;&#xA;DOMPurify.sanitize(&#39;&amp;lt;UL&amp;gt;&amp;lt;li&amp;gt;&amp;lt;A HREF=//google.com&amp;gt;click&amp;lt;/UL&amp;gt;&#39;); // becomes &amp;lt;ul&amp;gt;&amp;lt;li&amp;gt;&amp;lt;a href=&#34;//google.com&#34;&amp;gt;click&amp;lt;/a&amp;gt;&amp;lt;/li&amp;gt;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is supported?&lt;/h2&gt; &#xA;&lt;p&gt;DOMPurify currently supports HTML5, SVG and MathML. DOMPurify per default allows CSS, HTML custom data attributes. DOMPurify also supports the Shadow DOM - and sanitizes DOM templates recursively. DOMPurify also allows you to sanitize HTML for being used with the jQuery &lt;code&gt;$()&lt;/code&gt; and &lt;code&gt;elm.html()&lt;/code&gt; API without any known problems.&lt;/p&gt; &#xA;&lt;h2&gt;What about legacy browsers like Internet Explorer?&lt;/h2&gt; &#xA;&lt;p&gt;DOMPurify does nothing at all. It simply returns exactly the string that you fed it. DOMPurify exposes a property called &lt;code&gt;isSupported&lt;/code&gt;, which tells you whether it will be able to do its job, so you can come up with your own backup plan.&lt;/p&gt; &#xA;&lt;h2&gt;What about DOMPurify and Trusted Types?&lt;/h2&gt; &#xA;&lt;p&gt;In version 1.0.9, support for &lt;a href=&#34;https://github.com/w3c/webappsec-trusted-types&#34;&gt;Trusted Types API&lt;/a&gt; was added to DOMPurify. In version 2.0.0, a config flag was added to control DOMPurify&#39;s behavior regarding this.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;DOMPurify.sanitize&lt;/code&gt; is used in an environment where the Trusted Types API is available and &lt;code&gt;RETURN_TRUSTED_TYPE&lt;/code&gt; is set to &lt;code&gt;true&lt;/code&gt;, it tries to return a &lt;code&gt;TrustedHTML&lt;/code&gt; value instead of a string (the behavior for &lt;code&gt;RETURN_DOM&lt;/code&gt; and &lt;code&gt;RETURN_DOM_FRAGMENT&lt;/code&gt; config options does not change).&lt;/p&gt; &#xA;&lt;h2&gt;Can I configure DOMPurify?&lt;/h2&gt; &#xA;&lt;p&gt;Yes. The included default configuration values are pretty good already - but you can of course override them. Check out the &lt;a href=&#34;https://github.com/cure53/DOMPurify/tree/main/demos&#34;&gt;&lt;code&gt;/demos&lt;/code&gt;&lt;/a&gt; folder to see a bunch of examples on how you can &lt;a href=&#34;https://github.com/cure53/DOMPurify/tree/main/demos#what-is-this&#34;&gt;customize DOMPurify&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;/**&#xA; * General settings&#xA; */&#xA;&#xA;// strip {{ ... }}, ${ ... } and &amp;lt;% ... %&amp;gt; to make output safe for template systems&#xA;// be careful please, this mode is not recommended for production usage.&#xA;// allowing template parsing in user-controlled HTML is not advised at all.&#xA;// only use this mode if there is really no alternative.&#xA;var clean = DOMPurify.sanitize(dirty, {SAFE_FOR_TEMPLATES: true});&#xA;&#xA;/**&#xA; * Control our allow-lists and block-lists&#xA; */&#xA;// allow only &amp;lt;b&amp;gt; elements, very strict&#xA;var clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: [&#39;b&#39;]});&#xA;&#xA;// allow only &amp;lt;b&amp;gt; and &amp;lt;q&amp;gt; with style attributes&#xA;var clean = DOMPurify.sanitize(dirty, {ALLOWED_TAGS: [&#39;b&#39;, &#39;q&#39;], ALLOWED_ATTR: [&#39;style&#39;]});&#xA;&#xA;// allow all safe HTML elements but neither SVG nor MathML&#xA;// note that the USE_PROFILES setting will override the ALLOWED_TAGS setting&#xA;// so don&#39;t use them together&#xA;var clean = DOMPurify.sanitize(dirty, {USE_PROFILES: {html: true}});&#xA;&#xA;// allow all safe SVG elements and SVG Filters, no HTML or MathML&#xA;var clean = DOMPurify.sanitize(dirty, {USE_PROFILES: {svg: true, svgFilters: true}});&#xA;&#xA;// allow all safe MathML elements and SVG, but no SVG Filters&#xA;var clean = DOMPurify.sanitize(dirty, {USE_PROFILES: {mathMl: true, svg: true}});&#xA;&#xA;// change the default namespace from HTML to something different&#xA;var clean = DOMPurify.sanitize(dirty, {NAMESPACE: &#39;http://www.w3.org/2000/svg&#39;});&#xA;&#xA;// leave all safe HTML as it is and add &amp;lt;style&amp;gt; elements to block-list&#xA;var clean = DOMPurify.sanitize(dirty, {FORBID_TAGS: [&#39;style&#39;]});&#xA;&#xA;// leave all safe HTML as it is and add style attributes to block-list&#xA;var clean = DOMPurify.sanitize(dirty, {FORBID_ATTR: [&#39;style&#39;]});&#xA;&#xA;// extend the existing array of allowed tags and add &amp;lt;my-tag&amp;gt; to allow-list&#xA;var clean = DOMPurify.sanitize(dirty, {ADD_TAGS: [&#39;my-tag&#39;]});&#xA;&#xA;// extend the existing array of allowed attributes and add my-attr to allow-list&#xA;var clean = DOMPurify.sanitize(dirty, {ADD_ATTR: [&#39;my-attr&#39;]});&#xA;&#xA;// prohibit ARIA attributes, leave other safe HTML as is (default is true)&#xA;var clean = DOMPurify.sanitize(dirty, {ALLOW_ARIA_ATTR: false});&#xA;&#xA;// prohibit HTML5 data attributes, leave other safe HTML as is (default is true)&#xA;var clean = DOMPurify.sanitize(dirty, {ALLOW_DATA_ATTR: false});&#xA;&#xA;/**&#xA; * Control behavior relating to Custom Elements&#xA; */&#xA;&#xA;// DOMPurify allows to define rules for Custom Elements. When using the CUSTOM_ELEMENT_HANDLING&#xA;// literal, it is possible to define exactly what elements you wish to allow (by default, none are allowed).&#xA;//&#xA;// The same goes for their attributes. By default, the built-in or configured allow.list is used.&#xA;//&#xA;// You can use a RegExp literal to specify what is allowed or a predicate, examples for both can be seen below.&#xA;// The default values are very restrictive to prevent accidental XSS bypasses. Handle with great care!&#xA;&#xA;&#xA;var clean = DOMPurify.sanitize(&#xA;    &#39;&amp;lt;foo-bar baz=&#34;foobar&#34; forbidden=&#34;true&#34;&amp;gt;&amp;lt;/foo-bar&amp;gt;&amp;lt;div is=&#34;foo-baz&#34;&amp;gt;&amp;lt;/div&amp;gt;&#39;,&#xA;    {&#xA;        CUSTOM_ELEMENT_HANDLING: {&#xA;            tagNameCheck: null, // no custom elements are allowed&#xA;            attributeNameCheck: null, // default / standard attribute allow-list is used&#xA;            allowCustomizedBuiltInElements: false, // no customized built-ins allowed&#xA;        },&#xA;    }&#xA;); // &amp;lt;div is=&#34;&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&#xA;var clean = DOMPurify.sanitize(&#xA;    &#39;&amp;lt;foo-bar baz=&#34;foobar&#34; forbidden=&#34;true&#34;&amp;gt;&amp;lt;/foo-bar&amp;gt;&amp;lt;div is=&#34;foo-baz&#34;&amp;gt;&amp;lt;/div&amp;gt;&#39;,&#xA;    {&#xA;        CUSTOM_ELEMENT_HANDLING: {&#xA;            tagNameCheck: /^foo-/, // allow all tags starting with &#34;foo-&#34;&#xA;            attributeNameCheck: /baz/, // allow all attributes containing &#34;baz&#34;&#xA;            allowCustomizedBuiltInElements: true, // customized built-ins are allowed&#xA;        },&#xA;    }&#xA;); // &amp;lt;foo-bar baz=&#34;foobar&#34;&amp;gt;&amp;lt;/foo-bar&amp;gt;&amp;lt;div is=&#34;&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&#xA;var clean = DOMPurify.sanitize(&#xA;    &#39;&amp;lt;foo-bar baz=&#34;foobar&#34; forbidden=&#34;true&#34;&amp;gt;&amp;lt;/foo-bar&amp;gt;&amp;lt;div is=&#34;foo-baz&#34;&amp;gt;&amp;lt;/div&amp;gt;&#39;,&#xA;    {&#xA;        CUSTOM_ELEMENT_HANDLING: {&#xA;            tagNameCheck: (tagName) =&amp;gt; tagName.match(/^foo-/), // allow all tags starting with &#34;foo-&#34;&#xA;            attributeNameCheck: (attr) =&amp;gt; attr.match(/baz/), // allow all containing &#34;baz&#34;&#xA;            allowCustomizedBuiltInElements: true, // allow customized built-ins&#xA;        },&#xA;    }&#xA;); // &amp;lt;foo-bar baz=&#34;foobar&#34;&amp;gt;&amp;lt;/foo-bar&amp;gt;&amp;lt;div is=&#34;foo-baz&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&#xA;/**&#xA; * Control behavior relating to URI values&#xA; */&#xA;// extend the existing array of elements that can use Data URIs&#xA;var clean = DOMPurify.sanitize(dirty, {ADD_DATA_URI_TAGS: [&#39;a&#39;, &#39;area&#39;]});&#xA;&#xA;// extend the existing array of elements that are safe for URI-like values (be careful, XSS risk)&#xA;var clean = DOMPurify.sanitize(dirty, {ADD_URI_SAFE_ATTR: [&#39;my-attr&#39;]});&#xA;&#xA;/**&#xA; * Control permitted attribute values&#xA; */&#xA;// allow external protocol handlers in URL attributes (default is false, be careful, XSS risk)&#xA;// by default only http, https, ftp, ftps, tel, mailto, callto, sms, cid and xmpp are allowed.&#xA;var clean = DOMPurify.sanitize(dirty, {ALLOW_UNKNOWN_PROTOCOLS: true});&#xA;&#xA;// allow specific protocols handlers in URL attributes via regex (default is false, be careful, XSS risk)&#xA;// by default only http, https, ftp, ftps, tel, mailto, callto, sms, cid and xmpp are allowed.&#xA;// Default RegExp: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i;&#xA;var clean = DOMPurify.sanitize(dirty, {ALLOWED_URI_REGEXP: /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp|xxx):|[^a-z]|[a-z+.\-]+(?:[^a-z+.\-:]|$))/i;});&#xA;&#xA;/**&#xA; * Influence the return-type&#xA; */&#xA;// return a DOM HTMLBodyElement instead of an HTML string (default is false)&#xA;var clean = DOMPurify.sanitize(dirty, {RETURN_DOM: true});&#xA;&#xA;// return a DOM DocumentFragment instead of an HTML string (default is false)&#xA;var clean = DOMPurify.sanitize(dirty, {RETURN_DOM_FRAGMENT: true});&#xA;&#xA;// use the RETURN_TRUSTED_TYPE flag to turn on Trusted Types support if available&#xA;var clean = DOMPurify.sanitize(dirty, {RETURN_TRUSTED_TYPE: true}); // will return a TrustedHTML object instead of a string if possible&#xA;&#xA;/**&#xA; * Influence how we sanitize&#xA; */&#xA;// return entire document including &amp;lt;html&amp;gt; tags (default is false)&#xA;var clean = DOMPurify.sanitize(dirty, {WHOLE_DOCUMENT: true});&#xA;&#xA;// disable DOM Clobbering protection on output (default is true, handle with care, minor XSS risks here)&#xA;var clean = DOMPurify.sanitize(dirty, {SANITIZE_DOM: false});&#xA;&#xA;// enforce strict DOM Clobbering protection via namespace isolation (default is false)&#xA;// when enabled, isolates the namespace of named properties (i.e., `id` and `name` attributes) &#xA;// from JS variables by prefixing them with the string `user-content-` &#xA;var clean = DOMPurify.sanitize(dirty, {SANITIZE_NAMED_PROPS: true});&#xA;&#xA;// keep an element&#39;s content when the element is removed (default is true)&#xA;var clean = DOMPurify.sanitize(dirty, {KEEP_CONTENT: false});&#xA;&#xA;// glue elements like style, script or others to document.body and prevent unintuitive browser behavior in several edge-cases (default is false)&#xA;var clean = DOMPurify.sanitize(dirty, {FORCE_BODY: true});&#xA;&#xA;// remove all &amp;lt;a&amp;gt; elements under &amp;lt;p&amp;gt; elements that are removed&#xA;var clean = DOMPurify.sanitize(dirty, {FORBID_CONTENTS: [&#39;a&#39;], FORBID_TAGS: [&#39;p&#39;]});&#xA;&#xA;// change the parser type so sanitized data is treated as XML and not as HTML, which is the default&#xA;var clean = DOMPurify.sanitize(dirty, {PARSER_MEDIA_TYPE: &#39;application/xhtml+xml&#39;});&#xA;&#xA;/**&#xA; * Influence where we sanitize&#xA; */&#xA;// use the IN_PLACE mode to sanitize a node &#34;in place&#34;, which is much faster depending on how you use DOMPurify&#xA;var dirty = document.createElement(&#39;a&#39;);&#xA;dirty.setAttribute(&#39;href&#39;, &#39;javascript:alert(1)&#39;);&#xA;var clean = DOMPurify.sanitize(dirty, {IN_PLACE: true}); // see https://github.com/cure53/DOMPurify/issues/288 for more info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;There is even &lt;a href=&#34;https://github.com/cure53/DOMPurify/tree/main/demos#what-is-this&#34;&gt;more examples here&lt;/a&gt;, showing how you can run, customize and configure DOMPurify to fit your needs.&lt;/p&gt; &#xA;&lt;h2&gt;Persistent Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Instead of repeatedly passing the same configuration to &lt;code&gt;DOMPurify.sanitize&lt;/code&gt;, you can use the &lt;code&gt;DOMPurify.setConfig&lt;/code&gt; method. Your configuration will persist until your next call to &lt;code&gt;DOMPurify.setConfig&lt;/code&gt;, or until you invoke &lt;code&gt;DOMPurify.clearConfig&lt;/code&gt; to reset it. Remember that there is only one active configuration, which means once it is set, all extra configuration parameters passed to &lt;code&gt;DOMPurify.sanitize&lt;/code&gt; are ignored.&lt;/p&gt; &#xA;&lt;h2&gt;Hooks&lt;/h2&gt; &#xA;&lt;p&gt;DOMPurify allows you to augment its functionality by attaching one or more functions with the &lt;code&gt;DOMPurify.addHook&lt;/code&gt; method to one of the following hooks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeSanitizeElements&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uponSanitizeElement&lt;/code&gt; (No &#39;s&#39; - called for every element)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;afterSanitizeElements&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeSanitizeAttributes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uponSanitizeAttribute&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;afterSanitizeAttributes&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeSanitizeShadowDOM&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uponSanitizeShadowNode&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;afterSanitizeShadowDOM&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It passes the currently processed DOM node, when needed a literal with verified node and attribute data and the DOMPurify configuration to the callback. Check out the &lt;a href=&#34;https://github.com/cure53/DOMPurify/raw/main/demos/hooks-mentaljs-demo.html&#34;&gt;MentalJS hook demo&lt;/a&gt; to see how the API can be used nicely.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Example&lt;/em&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;DOMPurify.addHook(&#xA;  &#39;beforeSanitizeElements&#39;,&#xA;  function (currentNode, hookEvent, config) {&#xA;    // Do something with the current node and return it&#xA;    // You can also mutate hookEvent (i.e. set hookEvent.forceKeepAttr = true)&#xA;    return currentNode;&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Continuous Integration&lt;/h2&gt; &#xA;&lt;p&gt;We are currently using Github Actions in combination with BrowserStack. This gives us the possibility to confirm for each and every commit that all is going according to plan in all supported browsers. Check out the build logs here: &lt;a href=&#34;https://github.com/cure53/DOMPurify/actions&#34;&gt;https://github.com/cure53/DOMPurify/actions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can further run local tests by executing &lt;code&gt;npm test&lt;/code&gt;. The tests work fine with Node.js v0.6.2 and jsdom@8.5.0.&lt;/p&gt; &#xA;&lt;p&gt;All relevant commits will be signed with the key &lt;code&gt;0x24BB6BF4&lt;/code&gt; for additional security (since 8th of April 2016).&lt;/p&gt; &#xA;&lt;h3&gt;Development and contributing&lt;/h3&gt; &#xA;&lt;h4&gt;Installation (&lt;code&gt;npm i&lt;/code&gt;)&lt;/h4&gt; &#xA;&lt;p&gt;We support &lt;code&gt;npm&lt;/code&gt; officially. GitHub Actions workflow is configured to install dependencies using &lt;code&gt;npm&lt;/code&gt;. When using deprecated version of &lt;code&gt;npm&lt;/code&gt; we can not fully ensure the versions of installed dependencies which might lead to unanticipated problems.&lt;/p&gt; &#xA;&lt;h4&gt;Scripts&lt;/h4&gt; &#xA;&lt;p&gt;We rely on npm run-scripts for integrating with our tooling infrastructure. We use ESLint as a pre-commit hook to ensure code consistency. Moreover, to ease formatting we use &lt;a href=&#34;https://github.com/prettier/prettier&#34;&gt;prettier&lt;/a&gt; while building the &lt;code&gt;/dist&lt;/code&gt; assets happens through &lt;code&gt;rollup&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;These are our npm scripts:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run dev&lt;/code&gt; to start building while watching sources for changes&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run test&lt;/code&gt; to run our test suite via jsdom and karma &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;test:jsdom&lt;/code&gt; to only run tests through jsdom&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;test:karma&lt;/code&gt; to only run tests through karma&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run lint&lt;/code&gt; to lint the sources using ESLint (via xo)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run format&lt;/code&gt; to format our sources using prettier to ease to pass ESLint&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;npm run build&lt;/code&gt; to build our distribution assets minified and unminified as a UMD module &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run build:umd&lt;/code&gt; to only build an unminified UMD module&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;npm run build:umd:min&lt;/code&gt; to only build a minified UMD module&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: all run scripts triggered via &lt;code&gt;npm run &amp;lt;script&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;There are more npm scripts but they are mainly to integrate with CI or are meant to be &#34;private&#34; for instance to amend build distribution files with every commit.&lt;/p&gt; &#xA;&lt;h2&gt;Security Mailing List&lt;/h2&gt; &#xA;&lt;p&gt;We maintain a mailing list that notifies whenever a security-critical release of DOMPurify was published. This means, if someone found a bypass and we fixed it with a release (which always happens when a bypass was found) a mail will go out to that list. This usually happens within minutes or few hours after learning about a bypass. The list can be subscribed to here:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://lists.ruhr-uni-bochum.de/mailman/listinfo/dompurify-security&#34;&gt;https://lists.ruhr-uni-bochum.de/mailman/listinfo/dompurify-security&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Feature releases will not be announced to this list.&lt;/p&gt; &#xA;&lt;h2&gt;Who contributed?&lt;/h2&gt; &#xA;&lt;p&gt;Many people helped and help DOMPurify become what it is and need to be acknowledged here!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jgraph&#34;&gt;JGraph üí∏&lt;/a&gt;, &lt;a href=&#34;https://github.com/github&#34;&gt;GitHub üí∏&lt;/a&gt;, &lt;a href=&#34;https://github.com/CynegeticIO&#34;&gt;CynegeticIO üí∏&lt;/a&gt;, &lt;a href=&#34;https://github.com/getsentry&#34;&gt;Sentry üí∏&lt;/a&gt;, &lt;a href=&#34;https://github.com/jarrodldavis&#34;&gt;jarrodldavis üí∏&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/kevin_mizu&#34;&gt;kevin_mizu&lt;/a&gt;, &lt;a href=&#34;https://github.com/GrantGryczan&#34;&gt;GrantGryczan&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/lowdefy&#34;&gt;Lowdefy üí∏&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/MaximeVeit&#34;&gt;granlem &lt;/a&gt;, &lt;a href=&#34;https://github.com/oreoshake&#34;&gt;oreoshake &lt;/a&gt;, &lt;a href=&#34;https://github.com/dcramer&#34;&gt;dcramer üí∏&lt;/a&gt;,&lt;a href=&#34;https://github.com/tdeekens&#34;&gt;tdeekens ‚ù§Ô∏è&lt;/a&gt;, &lt;a href=&#34;https://github.com/peernohell&#34;&gt;peernohell ‚ù§Ô∏è&lt;/a&gt;, &lt;a href=&#34;https://github.com/is2ei&#34;&gt;is2ei&lt;/a&gt;, &lt;a href=&#34;https://github.com/SoheilKhodayari&#34;&gt;SoheilKhodayari&lt;/a&gt;, &lt;a href=&#34;https://github.com/franktopel&#34;&gt;franktopel&lt;/a&gt;, &lt;a href=&#34;https://github.com/NateScarlet&#34;&gt;NateScarlet&lt;/a&gt;, &lt;a href=&#34;https://github.com/neilj&#34;&gt;neilj&lt;/a&gt;, &lt;a href=&#34;https://github.com/fhemberger&#34;&gt;fhemberger&lt;/a&gt;, &lt;a href=&#34;https://github.com/Joris-van-der-Wel&#34;&gt;Joris-van-der-Wel&lt;/a&gt;, &lt;a href=&#34;https://github.com/ydaniv&#34;&gt;ydaniv&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/terjanq&#34;&gt;terjanq&lt;/a&gt;, &lt;a href=&#34;https://github.com/filedescriptor&#34;&gt;filedescriptor&lt;/a&gt;, &lt;a href=&#34;https://github.com/ConradIrwin&#34;&gt;ConradIrwin&lt;/a&gt;, &lt;a href=&#34;https://github.com/gibson042&#34;&gt;gibson042&lt;/a&gt;, &lt;a href=&#34;https://github.com/choumx&#34;&gt;choumx&lt;/a&gt;, &lt;a href=&#34;https://github.com/0xSobky&#34;&gt;0xSobky&lt;/a&gt;, &lt;a href=&#34;https://github.com/styfle&#34;&gt;styfle&lt;/a&gt;, &lt;a href=&#34;https://github.com/koto&#34;&gt;koto&lt;/a&gt;, &lt;a href=&#34;https://github.com/tlau88&#34;&gt;tlau88&lt;/a&gt;, &lt;a href=&#34;https://github.com/strugee&#34;&gt;strugee&lt;/a&gt;, &lt;a href=&#34;https://github.com/oparoz&#34;&gt;oparoz&lt;/a&gt;, &lt;a href=&#34;https://github.com/mathiasbynens&#34;&gt;mathiasbynens&lt;/a&gt;, &lt;a href=&#34;https://github.com/edg2s&#34;&gt;edg2s&lt;/a&gt;, &lt;a href=&#34;https://github.com/dnkolegov&#34;&gt;dnkolegov&lt;/a&gt;, &lt;a href=&#34;https://github.com/dhardtke&#34;&gt;dhardtke&lt;/a&gt;, &lt;a href=&#34;https://github.com/wirehead&#34;&gt;wirehead&lt;/a&gt;, &lt;a href=&#34;https://github.com/thorn0&#34;&gt;thorn0&lt;/a&gt;, &lt;a href=&#34;https://github.com/styu&#34;&gt;styu&lt;/a&gt;, &lt;a href=&#34;https://github.com/mozfreddyb&#34;&gt;mozfreddyb&lt;/a&gt;, &lt;a href=&#34;https://github.com/mikesamuel&#34;&gt;mikesamuel&lt;/a&gt;, &lt;a href=&#34;https://github.com/jorangreef&#34;&gt;jorangreef&lt;/a&gt;, &lt;a href=&#34;https://github.com/jimmyhchan&#34;&gt;jimmyhchan&lt;/a&gt;, &lt;a href=&#34;https://github.com/jameydeorio&#34;&gt;jameydeorio&lt;/a&gt;, &lt;a href=&#34;https://github.com/jameskraus&#34;&gt;jameskraus&lt;/a&gt;, &lt;a href=&#34;https://github.com/hyderali&#34;&gt;hyderali&lt;/a&gt;, &lt;a href=&#34;https://github.com/hansottowirtz&#34;&gt;hansottowirtz&lt;/a&gt;, &lt;a href=&#34;https://github.com/hackvertor&#34;&gt;hackvertor&lt;/a&gt;, &lt;a href=&#34;https://github.com/freddyb&#34;&gt;freddyb&lt;/a&gt;, &lt;a href=&#34;https://github.com/flavorjones&#34;&gt;flavorjones&lt;/a&gt;, &lt;a href=&#34;https://github.com/djfarrelly&#34;&gt;djfarrelly&lt;/a&gt;, &lt;a href=&#34;https://github.com/devd&#34;&gt;devd&lt;/a&gt;, &lt;a href=&#34;https://github.com/camerondunford&#34;&gt;camerondunford&lt;/a&gt;, &lt;a href=&#34;https://github.com/buu700&#34;&gt;buu700&lt;/a&gt;, &lt;a href=&#34;https://github.com/buildog&#34;&gt;buildog&lt;/a&gt;, &lt;a href=&#34;https://github.com/alabiaga&#34;&gt;alabiaga&lt;/a&gt;, &lt;a href=&#34;https://github.com/Vector919&#34;&gt;Vector919&lt;/a&gt;, &lt;a href=&#34;https://github.com/Robbert&#34;&gt;Robbert&lt;/a&gt;, &lt;a href=&#34;https://github.com/GreLI&#34;&gt;GreLI&lt;/a&gt;, &lt;a href=&#34;https://github.com/FuzzySockets&#34;&gt;FuzzySockets&lt;/a&gt;, &lt;a href=&#34;https://github.com/ArtemBernatskyy&#34;&gt;ArtemBernatskyy&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/garethheyes&#34;&gt;@garethheyes&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/shafigullin&#34;&gt;@shafigullin&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mmrupp&#34;&gt;@mmrupp&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/irsdl&#34;&gt;@irsdl&lt;/a&gt;,&lt;a href=&#34;https://github.com/ShikariSenpai&#34;&gt;ShikariSenpai&lt;/a&gt;, &lt;a href=&#34;https://github.com/ansjdnakjdnajkd&#34;&gt;ansjdnakjdnajkd&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/asutherland&#34;&gt;@asutherland&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/mathias&#34;&gt;@mathias&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/cgvwzq&#34;&gt;@cgvwzq&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/robbertatwork&#34;&gt;@robbertatwork&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/giutro&#34;&gt;@giutro&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/CmdEngineer_&#34;&gt;@CmdEngineer_&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/avr4mit&#34;&gt;@avr4mit&lt;/a&gt; and especially &lt;a href=&#34;https://twitter.com/securitymb&#34;&gt;@securitymb ‚ù§Ô∏è&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://twitter.com/masatokinugawa&#34;&gt;@masatokinugawa ‚ù§Ô∏è&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Testing powered by&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://www.browserstack.com/&#34;&gt;&lt;img width=&#34;200&#34; src=&#34;https://www.browserstack.com/images/layout/browserstack-logo-600x315.png&#34;&gt;&lt;/a&gt;&lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;And last but not least, thanks to &lt;a href=&#34;https://www.browserstack.com/open-source&#34;&gt;BrowserStack Open-Source Program&lt;/a&gt; for supporting this project with their services for free and delivering excellent, dedicated and very professional support on top of that.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>conventional-changelog/standard-version</title>
    <updated>2023-04-05T01:31:10Z</updated>
    <id>tag:github.com,2023-04-05:/conventional-changelog/standard-version</id>
    <link href="https://github.com/conventional-changelog/standard-version" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üèÜ Automate versioning and CHANGELOG generation, with semver.org and conventionalcommits.org&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Standard Version&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;&lt;code&gt;standard-version&lt;/code&gt; is deprecated&lt;/strong&gt;. If you&#39;re a GitHub user, I recommend &lt;a href=&#34;https://github.com/googleapis/release-please&#34;&gt;release-please&lt;/a&gt; as an alternative. I encourage folks to fork this repository and, if a fork gets popular, I will link to it in this README.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;A utility for versioning using &lt;a href=&#34;https://semver.org/&#34;&gt;semver&lt;/a&gt; and CHANGELOG generation powered by &lt;a href=&#34;https://conventionalcommits.org&#34;&gt;Conventional Commits&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/conventional-changelog/standard-version/workflows/ci/badge.svg?sanitize=true&#34; alt=&#34;ci&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/standard-version&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/standard-version.svg?sanitize=true&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/conventional-changelog/standard-version&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/conventional-changelog/standard-version/branch/master/graph/badge.svg?token=J7zMN7vTTd&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://conventionalcommits.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Conventional%20Commits-1.0.0-yellow.svg?sanitize=true&#34; alt=&#34;Conventional Commits&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://devtoolscommunity.herokuapp.com&#34;&gt;&lt;img src=&#34;http://devtoolscommunity.herokuapp.com/badge.svg?sanitize=true&#34; alt=&#34;Community slack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Having problems? Want to contribute? Join us on the &lt;a href=&#34;http://devtoolscommunity.herokuapp.com&#34;&gt;node-tooling community Slack&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;How It Works:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Follow the &lt;a href=&#34;https://conventionalcommits.org&#34;&gt;Conventional Commits Specification&lt;/a&gt; in your repository.&lt;/li&gt; &#xA; &lt;li&gt;When you&#39;re ready to release, run &lt;code&gt;standard-version&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;code&gt;standard-version&lt;/code&gt; will then do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Retrieve the current version of your repository by looking at &lt;code&gt;packageFiles&lt;/code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#bumpfiles-packagefiles-and-updaters&#34;&gt;[1]&lt;/a&gt;, falling back to the last &lt;code&gt;git tag&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bump&lt;/code&gt; the version in &lt;code&gt;bumpFiles&lt;/code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#bumpfiles-packagefiles-and-updaters&#34;&gt;[1]&lt;/a&gt; based on your commits.&lt;/li&gt; &#xA; &lt;li&gt;Generates a &lt;code&gt;changelog&lt;/code&gt; based on your commits (uses &lt;a href=&#34;https://github.com/conventional-changelog/conventional-changelog&#34;&gt;conventional-changelog&lt;/a&gt; under the hood).&lt;/li&gt; &#xA; &lt;li&gt;Creates a new &lt;code&gt;commit&lt;/code&gt; including your &lt;code&gt;bumpFiles&lt;/code&gt;&lt;a href=&#34;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#bumpfiles-packagefiles-and-updaters&#34;&gt;[1]&lt;/a&gt; and updated CHANGELOG.&lt;/li&gt; &#xA; &lt;li&gt;Creates a new &lt;code&gt;tag&lt;/code&gt; with the new version number.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;&lt;code&gt;bumpFiles&lt;/code&gt;, &lt;code&gt;packageFiles&lt;/code&gt; and &lt;code&gt;updaters&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;standard-version&lt;/code&gt; uses a few key concepts for handling version bumping in your project.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;packageFiles&lt;/code&gt;&lt;/strong&gt; ‚Äì User-defined files where versions can be read from &lt;em&gt;and&lt;/em&gt; be &#34;bumped&#34;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Examples: &lt;code&gt;package.json&lt;/code&gt;, &lt;code&gt;manifest.json&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;In most cases (including the default), &lt;code&gt;packageFiles&lt;/code&gt; are a subset of &lt;code&gt;bumpFiles&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;bumpFiles&lt;/code&gt;&lt;/strong&gt; ‚Äì&amp;nbsp;User-defined files where versions should be &#34;bumped&#34;, but not explicitly read from. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Examples: &lt;code&gt;package-lock.json&lt;/code&gt;, &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;&lt;code&gt;updaters&lt;/code&gt;&lt;/strong&gt; ‚Äì&amp;nbsp;Simple modules used for reading &lt;code&gt;packageFiles&lt;/code&gt; and writing to &lt;code&gt;bumpFiles&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;By default, &lt;code&gt;standard-version&lt;/code&gt; assumes you&#39;re working in a NodeJS based project... because of this, for the majority of projects you might never need to interact with these options.&lt;/p&gt; &#xA;&lt;p&gt;That said, if you find your self asking &lt;a href=&#34;https://raw.githubusercontent.com/conventional-changelog/standard-version/master/#can-i-use-standard-version-for-additional-metadata-files-languages-or-version-files&#34;&gt;How can I use standard-version for additional metadata files, languages or version files?&lt;/a&gt; ‚Äì these configuration options will help!&lt;/p&gt; &#xA;&lt;h2&gt;Installing &lt;code&gt;standard-version&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;As a local &lt;code&gt;npm run&lt;/code&gt; script&lt;/h3&gt; &#xA;&lt;p&gt;Install and add to &lt;code&gt;devDependencies&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i --save-dev standard-version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add an &lt;a href=&#34;https://docs.npmjs.com/cli/run-script&#34;&gt;&lt;code&gt;npm run&lt;/code&gt; script&lt;/a&gt; to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;release&#34;: &#34;standard-version&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use &lt;code&gt;npm run release&lt;/code&gt; in place of &lt;code&gt;npm version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This has the benefit of making your repo/package more portable, so that other developers can cut releases without having to globally install &lt;code&gt;standard-version&lt;/code&gt; on their machine.&lt;/p&gt; &#xA;&lt;h3&gt;As global &lt;code&gt;bin&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Install globally (add to your &lt;code&gt;PATH&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i -g standard-version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now you can use &lt;code&gt;standard-version&lt;/code&gt; in place of &lt;code&gt;npm version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This has the benefit of allowing you to use &lt;code&gt;standard-version&lt;/code&gt; on any repo/package without adding a dev dependency to each one.&lt;/p&gt; &#xA;&lt;h3&gt;Using &lt;code&gt;npx&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;As of &lt;code&gt;npm@5.2.0&lt;/code&gt;, &lt;code&gt;npx&lt;/code&gt; is installed alongside &lt;code&gt;npm&lt;/code&gt;. Using &lt;code&gt;npx&lt;/code&gt; you can use &lt;code&gt;standard-version&lt;/code&gt; without having to keep a &lt;code&gt;package.json&lt;/code&gt; file by running: &lt;code&gt;npx standard-version&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This method is especially useful when using &lt;code&gt;standard-version&lt;/code&gt; in non-JavaScript projects.&lt;/p&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;You can configure &lt;code&gt;standard-version&lt;/code&gt; either by:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Placing a &lt;code&gt;standard-version&lt;/code&gt; stanza in your &lt;code&gt;package.json&lt;/code&gt; (assuming your project is JavaScript).&lt;/li&gt; &#xA; &lt;li&gt;Creating a &lt;code&gt;.versionrc&lt;/code&gt;, &lt;code&gt;.versionrc.json&lt;/code&gt; or &lt;code&gt;.versionrc.js&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you are using a &lt;code&gt;.versionrc.js&lt;/code&gt; your default export must be a configuration object, or a function returning a configuration object.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Any of the command line parameters accepted by &lt;code&gt;standard-version&lt;/code&gt; can instead be provided via configuration. Please refer to the &lt;a href=&#34;https://github.com/conventional-changelog/conventional-changelog-config-spec/&#34;&gt;conventional-changelog-config-spec&lt;/a&gt; for details on available configuration options.&lt;/p&gt; &#xA;&lt;h3&gt;Customizing CHANGELOG Generation&lt;/h3&gt; &#xA;&lt;p&gt;By default (as of &lt;code&gt;6.0.0&lt;/code&gt;), &lt;code&gt;standard-version&lt;/code&gt; uses the &lt;a href=&#34;https://github.com/conventional-changelog/conventional-changelog/tree/master/packages/conventional-changelog-conventionalcommits&#34;&gt;conventionalcommits preset&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This preset:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Adheres closely to the &lt;a href=&#34;https://www.conventionalcommits.org&#34;&gt;conventionalcommits.org&lt;/a&gt; specification.&lt;/li&gt; &#xA; &lt;li&gt;Is highly configurable, following the configuration specification &lt;a href=&#34;https://github.com/conventional-changelog/conventional-changelog-config-spec&#34;&gt;maintained here&lt;/a&gt;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;em&gt;We&#39;ve documented these config settings as a recommendation to other tooling makers.&lt;/em&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are a variety of dials and knobs you can turn related to CHANGELOG generation.&lt;/p&gt; &#xA;&lt;p&gt;As an example, suppose you&#39;re using GitLab, rather than GitHub, you might modify the following variables:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;commitUrlFormat&lt;/code&gt;: the URL format of commit SHAs detected in commit messages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;compareUrlFormat&lt;/code&gt;: the URL format used to compare two tags.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issueUrlFormat&lt;/code&gt;: the URL format used to link to issues.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Making these URLs match GitLab&#39;s format, rather than GitHub&#39;s.&lt;/p&gt; &#xA;&lt;h2&gt;CLI Usage&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; To pass nested configurations to the CLI without defining them in the &lt;code&gt;package.json&lt;/code&gt; use dot notation as the parameters &lt;code&gt;e.g. --skip.changelog&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;First Release&lt;/h3&gt; &#xA;&lt;p&gt;To generate your changelog for your first release, simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# npm run script&#xA;npm run release -- --first-release&#xA;# global bin&#xA;standard-version --first-release&#xA;# npx&#xA;npx standard-version --first-release&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will tag a release &lt;strong&gt;without bumping the version &lt;code&gt;bumpFiles&lt;/code&gt;&lt;a href=&#34;&#34;&gt;1&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When you are ready, push the git tag and &lt;code&gt;npm publish&lt;/code&gt; your first release. \o/&lt;/p&gt; &#xA;&lt;h3&gt;Cutting Releases&lt;/h3&gt; &#xA;&lt;p&gt;If you typically use &lt;code&gt;npm version&lt;/code&gt; to cut a new release, do this instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# npm run script&#xA;npm run release&#xA;# or global bin&#xA;standard-version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As long as your git commit messages are conventional and accurate, you no longer need to specify the semver type - and you get CHANGELOG generation for free! \o/&lt;/p&gt; &#xA;&lt;p&gt;After you cut a release, you can push the new git tag and &lt;code&gt;npm publish&lt;/code&gt; (or &lt;code&gt;npm publish --tag next&lt;/code&gt;) when you&#39;re ready.&lt;/p&gt; &#xA;&lt;h3&gt;Release as a Pre-Release&lt;/h3&gt; &#xA;&lt;p&gt;Use the flag &lt;code&gt;--prerelease&lt;/code&gt; to generate pre-releases:&lt;/p&gt; &#xA;&lt;p&gt;Suppose the last version of your code is &lt;code&gt;1.0.0&lt;/code&gt;, and your code to be committed has patched changes. Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# npm run script&#xA;npm run release -- --prerelease&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will tag your version as: &lt;code&gt;1.0.1-0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to name the pre-release, you specify the name via &lt;code&gt;--prerelease &amp;lt;name&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For example, suppose your pre-release should contain the &lt;code&gt;alpha&lt;/code&gt; prefix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# npm run script&#xA;npm run release -- --prerelease alpha&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will tag the version as: &lt;code&gt;1.0.1-alpha.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Release as a Target Type Imperatively (&lt;code&gt;npm version&lt;/code&gt;-like)&lt;/h3&gt; &#xA;&lt;p&gt;To forgo the automated version bump use &lt;code&gt;--release-as&lt;/code&gt; with the argument &lt;code&gt;major&lt;/code&gt;, &lt;code&gt;minor&lt;/code&gt; or &lt;code&gt;patch&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Suppose the last version of your code is &lt;code&gt;1.0.0&lt;/code&gt;, you&#39;ve only landed &lt;code&gt;fix:&lt;/code&gt; commits, but you would like your next release to be a &lt;code&gt;minor&lt;/code&gt;. Simply run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# npm run script&#xA;npm run release -- --release-as minor&#xA;# Or&#xA;npm run release -- --release-as 1.1.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will get version &lt;code&gt;1.1.0&lt;/code&gt; rather than what would be the auto-generated version &lt;code&gt;1.0.1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; you can combine &lt;code&gt;--release-as&lt;/code&gt; and &lt;code&gt;--prerelease&lt;/code&gt; to generate a release. This is useful when publishing experimental feature(s).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Prevent Git Hooks&lt;/h3&gt; &#xA;&lt;p&gt;If you use git hooks, like pre-commit, to test your code before committing, you can prevent hooks from being verified during the commit step by passing the &lt;code&gt;--no-verify&lt;/code&gt; option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# npm run script&#xA;npm run release -- --no-verify&#xA;# or global bin&#xA;standard-version --no-verify&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Signing Commits and Tags&lt;/h3&gt; &#xA;&lt;p&gt;If you have your GPG key set up, add the &lt;code&gt;--sign&lt;/code&gt; or &lt;code&gt;-s&lt;/code&gt; flag to your &lt;code&gt;standard-version&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h3&gt;Lifecycle Scripts&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;standard-version&lt;/code&gt; supports lifecycle scripts. These allow you to execute your own supplementary commands during the release. The following hooks are available and execute in the order documented:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;prerelease&lt;/code&gt;: executed before anything happens. If the &lt;code&gt;prerelease&lt;/code&gt; script returns a non-zero exit code, versioning will be aborted, but it has no other effect on the process.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prebump&lt;/code&gt;/&lt;code&gt;postbump&lt;/code&gt;: executed before and after the version is bumped. If the &lt;code&gt;prebump&lt;/code&gt; script returns a version #, it will be used rather than the version calculated by &lt;code&gt;standard-version&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;prechangelog&lt;/code&gt;/&lt;code&gt;postchangelog&lt;/code&gt;: executes before and after the CHANGELOG is generated.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;precommit&lt;/code&gt;/&lt;code&gt;postcommit&lt;/code&gt;: called before and after the commit step.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pretag&lt;/code&gt;/&lt;code&gt;posttag&lt;/code&gt;: called before and after the tagging step.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Simply add the following to your package.json to configure lifecycle scripts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;standard-version&#34;: {&#xA;    &#34;scripts&#34;: {&#xA;      &#34;prebump&#34;: &#34;echo 9.9.9&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As an example to change from using GitHub to track your items to using your projects Jira use a &lt;code&gt;postchangelog&lt;/code&gt; script to replace the url fragment containing &#39;&lt;a href=&#34;https://github.com/%60myproject%60/issues/&#34;&gt;https://github.com/`myproject`/issues/&lt;/a&gt;&#39; with a link to your Jira - assuming you have already installed &lt;a href=&#34;https://www.npmjs.com/package/replace&#34;&gt;replace&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;standard-version&#34;: {&#xA;    &#34;scripts&#34;: {&#xA;      &#34;postchangelog&#34;: &#34;replace &#39;https://github.com/myproject/issues/&#39; &#39;https://myjira/browse/&#39; CHANGELOG.md&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Skipping Lifecycle Steps&lt;/h3&gt; &#xA;&lt;p&gt;You can skip any of the lifecycle steps (&lt;code&gt;bump&lt;/code&gt;, &lt;code&gt;changelog&lt;/code&gt;, &lt;code&gt;commit&lt;/code&gt;, &lt;code&gt;tag&lt;/code&gt;), by adding the following to your package.json:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;standard-version&#34;: {&#xA;    &#34;skip&#34;: {&#xA;      &#34;changelog&#34;: true&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Committing Generated Artifacts in the Release Commit&lt;/h3&gt; &#xA;&lt;p&gt;If you want to commit generated artifacts in the release commit, you can use the &lt;code&gt;--commit-all&lt;/code&gt; or &lt;code&gt;-a&lt;/code&gt; flag. You will need to stage the artifacts you want to commit, so your &lt;code&gt;release&lt;/code&gt; command could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;standard-version&#34;: {&#xA;    &#34;scripts&#34;: {&#xA;      &#34;prerelease&#34;: &#34;webpack -p --bail &amp;amp;&amp;amp; git add &amp;lt;file(s) to commit&amp;gt;&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;release&#34;: &#34;standard-version -a&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dry Run Mode&lt;/h3&gt; &#xA;&lt;p&gt;running &lt;code&gt;standard-version&lt;/code&gt; with the flag &lt;code&gt;--dry-run&lt;/code&gt; allows you to see what commands would be run, without committing to git or updating files.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# npm run script&#xA;npm run release -- --dry-run&#xA;# or global bin&#xA;standard-version --dry-run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Prefix Tags&lt;/h3&gt; &#xA;&lt;p&gt;Tags are prefixed with &lt;code&gt;v&lt;/code&gt; by default. If you would like to prefix your tags with something else, you can do so with the &lt;code&gt;-t&lt;/code&gt; flag.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;standard-version -t @scope/package\@&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will prefix your tags to look something like &lt;code&gt;@scope/package@2.0.0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not want to have any tag prefix you can use the &lt;code&gt;-t&lt;/code&gt; flag and provide it with an &lt;strong&gt;empty string&lt;/strong&gt; as value.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note: simply -t or --tag-prefix without any value will fallback to the default &#39;v&#39;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;CLI Help&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# npm run script&#xA;npm run release -- --help&#xA;# or global bin&#xA;standard-version --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Code Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const standardVersion = require(&#39;standard-version&#39;)&#xA;&#xA;// Options are the same as command line, except camelCase&#xA;// standardVersion returns a Promise&#xA;standardVersion({&#xA;  noVerify: true,&#xA;  infile: &#39;docs/CHANGELOG.md&#39;,&#xA;  silent: true&#xA;}).then(() =&amp;gt; {&#xA;  // standard-version is done&#xA;}).catch(err =&amp;gt; {&#xA;    console.error(`standard-version failed with message: ${err.message}`)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;TIP: Use the &lt;code&gt;silent&lt;/code&gt; option to prevent &lt;code&gt;standard-version&lt;/code&gt; from printing to the &lt;code&gt;console&lt;/code&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;How is &lt;code&gt;standard-version&lt;/code&gt; different from &lt;code&gt;semantic-release&lt;/code&gt;?&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/semantic-release/semantic-release&#34;&gt;&lt;code&gt;semantic-release&lt;/code&gt;&lt;/a&gt; is described as:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;semantic-release automates the whole package release workflow including: determining the next version number, generating the release notes and publishing the package.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;While both are based on the same foundation of structured commit messages, &lt;code&gt;standard-version&lt;/code&gt; takes a different approach by handling versioning, changelog generation, and git tagging for you &lt;strong&gt;without&lt;/strong&gt; automatic pushing (to GitHub) or publishing (to an npm registry). Use of &lt;code&gt;standard-version&lt;/code&gt; only affects your local git repo - it doesn&#39;t affect remote resources at all. After you run &lt;code&gt;standard-version&lt;/code&gt;, you can review your release state, correct mistakes and follow the release strategy that makes the most sense for your codebase.&lt;/p&gt; &#xA;&lt;p&gt;We think they are both fantastic tools, and we encourage folks to use &lt;code&gt;semantic-release&lt;/code&gt; instead of &lt;code&gt;standard-version&lt;/code&gt; if it makes sense for their use-case.&lt;/p&gt; &#xA;&lt;h3&gt;Should I always squash commits when merging PRs?&lt;/h3&gt; &#xA;&lt;p&gt;The instructions to squash commits when merging pull requests assumes that &lt;strong&gt;one PR equals, at most, one feature or fix&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you have multiple features or fixes landing in a single PR and each commit uses a structured message, then you can do a standard merge when accepting the PR. This will preserve the commit history from your branch after the merge.&lt;/p&gt; &#xA;&lt;p&gt;Although this will allow each commit to be included as separate entries in your CHANGELOG, the entries will &lt;strong&gt;not&lt;/strong&gt; be able to reference the PR that pulled the changes in because the preserved commit messages do not include the PR number.&lt;/p&gt; &#xA;&lt;p&gt;For this reason, we recommend keeping the scope of each PR to one general feature or fix. In practice, this allows you to use unstructured commit messages when committing each little change and then squash them into a single commit with a structured message (referencing the PR number) once they have been reviewed and accepted.&lt;/p&gt; &#xA;&lt;h3&gt;Can I use &lt;code&gt;standard-version&lt;/code&gt; for additional metadata files, languages or version files?&lt;/h3&gt; &#xA;&lt;p&gt;As of version &lt;code&gt;7.1.0&lt;/code&gt; you can configure multiple &lt;code&gt;bumpFiles&lt;/code&gt; and &lt;code&gt;packageFiles&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Specify a custom &lt;code&gt;bumpFile&lt;/code&gt; &#34;&lt;code&gt;filename&lt;/code&gt;&#34;, this is the path to the file you want to &#34;bump&#34;&lt;/li&gt; &#xA; &lt;li&gt;Specify the &lt;code&gt;bumpFile&lt;/code&gt; &#34;&lt;code&gt;updater&lt;/code&gt;&#34;, this is &lt;em&gt;how&lt;/em&gt; the file will be bumped. a. If you&#39;re using a common type, you can use one of &lt;code&gt;standard-version&lt;/code&gt;&#39;s built-in &lt;code&gt;updaters&lt;/code&gt; by specifying a &lt;code&gt;type&lt;/code&gt;. b. If your using an less-common version file, you can create your own &lt;code&gt;updater&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// .versionrc&#xA;{&#xA;  &#34;bumpFiles&#34;: [&#xA;    {&#xA;      &#34;filename&#34;: &#34;MY_VERSION_TRACKER.txt&#34;,&#xA;      // The `plain-text` updater assumes the file contents represents the version.&#xA;      &#34;type&#34;: &#34;plain-text&#34;&#xA;    },&#xA;    {&#xA;      &#34;filename&#34;: &#34;a/deep/package/dot/json/file/package.json&#34;,&#xA;      // The `json` updater assumes the version is available under a `version` key in the provided JSON document.&#xA;      &#34;type&#34;: &#34;json&#34;&#xA;    },&#xA;    {&#xA;      &#34;filename&#34;: &#34;VERSION_TRACKER.json&#34;,&#xA;      //  See &#34;Custom `updater`s&#34; for more details.&#xA;      &#34;updater&#34;: &#34;standard-version-updater.js&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;.versionrc.js&lt;/code&gt; as your configuration file, the &lt;code&gt;updater&lt;/code&gt; may also be set as an object, rather than a path:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// .versionrc.js&#xA;const tracker = {&#xA;  filename: &#39;VERSION_TRACKER.json&#39;,&#xA;  updater: require(&#39;./path/to/custom-version-updater&#39;)&#xA;}&#xA;&#xA;module.exports = {&#xA;  bumpFiles: [tracker],&#xA;  packageFiles: [tracker]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Custom &lt;code&gt;updater&lt;/code&gt;s&lt;/h4&gt; &#xA;&lt;p&gt;An &lt;code&gt;updater&lt;/code&gt; is expected to be a Javascript module with &lt;em&gt;atleast&lt;/em&gt; two methods exposed: &lt;code&gt;readVersion&lt;/code&gt; and &lt;code&gt;writeVersion&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;readVersion(contents = string): string&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This method is used to read the version from the provided file contents.&lt;/p&gt; &#xA;&lt;p&gt;The return value is expected to be a semantic version string.&lt;/p&gt; &#xA;&lt;h5&gt;&lt;code&gt;writeVersion(contents = string, version: string): string&lt;/code&gt;&lt;/h5&gt; &#xA;&lt;p&gt;This method is used to write the version to the provided contents.&lt;/p&gt; &#xA;&lt;p&gt;The return value will be written directly (overwrite) to the provided file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Let&#39;s assume our &lt;code&gt;VERSION_TRACKER.json&lt;/code&gt; has the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;tracker&#34;: {&#xA;    &#34;package&#34;: {&#xA;      &#34;version&#34;: &#34;1.0.0&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An acceptable &lt;code&gt;standard-version-updater.js&lt;/code&gt; would be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// standard-version-updater.js&#xA;const stringifyPackage = require(&#39;stringify-package&#39;)&#xA;const detectIndent = require(&#39;detect-indent&#39;)&#xA;const detectNewline = require(&#39;detect-newline&#39;)&#xA;&#xA;module.exports.readVersion = function (contents) {&#xA;  return JSON.parse(contents).tracker.package.version;&#xA;}&#xA;&#xA;module.exports.writeVersion = function (contents, version) {&#xA;  const json = JSON.parse(contents)&#xA;  let indent = detectIndent(contents).indent&#xA;  let newline = detectNewline(contents)&#xA;  json.tracker.package.version = version&#xA;  return stringifyPackage(json, indent, newline)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;ISC&lt;/p&gt;</summary>
  </entry>
</feed>