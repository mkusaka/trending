<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-07-02T01:38:39Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>homanp/superagent</title>
    <updated>2023-07-02T01:38:39Z</updated>
    <id>tag:github.com,2023-07-02:/homanp/superagent</id>
    <link href="https://github.com/homanp/superagent" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü•∑ Superagent - Build, deploy, and manage LLM-powered agents&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;Superagent ü•∑&lt;/h1&gt; &#xA; &lt;p&gt;&lt;strong&gt;Build, deploy, and manage LLM-powered agents&lt;/strong&gt; &lt;a href=&#34;https://Superagent.sh&#34;&gt;Superagent.sh&lt;/a&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;img alt=&#34;GitHub Contributors&#34; src=&#34;https://img.shields.io/github/contributors/homanp/Superagent&#34;&gt; &lt;img alt=&#34;GitHub Last Commit&#34; src=&#34;https://img.shields.io/github/last-commit/homanp/Superagent&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/github/repo-size/homanp/Superagent&#34;&gt; &lt;img alt=&#34;GitHub Issues&#34; src=&#34;https://img.shields.io/github/issues/homanp/Superagent&#34;&gt; &lt;img alt=&#34;GitHub Pull Requests&#34; src=&#34;https://img.shields.io/github/issues-pr/homanp/Superagent&#34;&gt; &lt;img alt=&#34;Github License&#34; src=&#34;https://img.shields.io/badge/License-MIT-yellow.svg?sanitize=true&#34;&gt; &lt;img alt=&#34;Discord&#34; src=&#34;https://img.shields.io/discord/1110910277110743103?label=Discord&amp;amp;logo=discord&amp;amp;logoColor=white&amp;amp;style=plastic&amp;amp;color=d7b023)%5D(https://discord.gg/e8j7mgjDUK&#34;&gt; &lt;/p&gt; &#xA; &lt;br&gt; &#xA; &lt;img alt=&#34;Superagent UI&#34; src=&#34;https://raw.githubusercontent.com/homanp/superagent/main/ui/public/superagent.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;üßê What is this?&lt;/h2&gt; &#xA;&lt;p&gt;Superagent is a powerful tool that simplifies the configuration and deployment of LLM (Large Language Model) Agents to production. It provides a range of features and functionalities to make it easier for developers to build, manage and deploy AI agents to production including features such as built in memory and document retrieval via vector dbs, powerful tools, webhooks, cron jobs etc.&lt;/p&gt; &#xA;&lt;h2&gt;ü•∑ Superagent Cloud&lt;/h2&gt; &#xA;&lt;p&gt;If you are looking for a plug-n-play way getting started be sure to checkout &lt;a href=&#34;https://Superagent.sh&#34;&gt;Superagent.sh&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üîé Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Checkout the &lt;a href=&#34;https://docs.Superagent.sh/&#34;&gt;full documentation here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;üöß Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;You can follow the &lt;a href=&#34;https://github.com/users/homanp/projects/4&#34;&gt;roadmap here&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;üõ†Ô∏è Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get started with Superagent, follow these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the Superagent repository into a public GitHub repository or fork it from &lt;a href=&#34;https://github.com/homanp/Superagent/fork&#34;&gt;https://github.com/homanp/Superagent/fork&lt;/a&gt;. If you plan to distribute the code, keep the source code public.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/homanp/Superagent.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To run the script, simply execute it using:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;bash setup.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See the setup instructions for the UI in the &lt;code&gt;ui&lt;/code&gt; folder.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;üí° Examples&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Runing Superagent with &lt;a href=&#34;https://github.com/homanp/nextjs-Superagent&#34;&gt;NextJS&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üë®üèΩ‚Äçüíª SDKs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/homanp/superagent-js&#34;&gt;Javascript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/homanp/superagent-py&#34;&gt;Python&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;ü´∂ Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Superagent is an open-source project, and contributions are welcome. If you would like to contribute, you can create new features, fix bugs, or improve the infrastructure. Please refer to the &lt;a href=&#34;https://github.com/homanp/Superagent/raw/main/.github/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; file in the repository for more information on how to contribute.&lt;/p&gt; &#xA;&lt;p&gt;We appreciate your contributions and aim to make it easy for anyone to create and run LLM Agents in production using Superagent.&lt;/p&gt; &#xA;&lt;h2&gt;‚≠ê Partners&lt;/h2&gt; &#xA;&lt;p&gt;A big thanks to all partners that support the development of &lt;strong&gt;Superagent&lt;/strong&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;üåø &lt;a href=&#34;https://buildwithfern.com/&#34;&gt;Fern&lt;/a&gt;&lt;/strong&gt;: Fern helps create SDKs and client libraries from OpenAPI specs. Superagent uses Fern for all of the client libraries and SDKs we provide. A big shout out for the support!&lt;/p&gt; &#xA;&lt;h2&gt;üôè Support&lt;/h2&gt; &#xA;&lt;p&gt;We appreciate all the support you can give us, either with contributions, feedback, bug reports or feature requests. Drop a star and share Superagent to the world!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kudoai/chatgpt.js</title>
    <updated>2023-07-02T01:38:39Z</updated>
    <id>tag:github.com,2023-07-02:/kudoai/chatgpt.js</id>
    <link href="https://github.com/kudoai/chatgpt.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ü§ñ A powerful client-side JavaScript library for ChatGPT&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;div align=&#34;right&#34;&gt; &#xA;  &lt;h6&gt;English | &lt;a href=&#34;https://raw.githubusercontent.com/kudoai/chatgpt.js/main/zh-cn#readme&#34;&gt;ÁÆÄ‰Ωì‰∏≠Êñá&lt;/a&gt;&lt;/h6&gt; &#xA; &lt;/div&gt; &#xA; &lt;h3&gt; &#xA;  &lt;picture&gt; &#xA;   &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://raw.githubusercontent.com/kudoai/chatgpt.js/main/media/images/chatgpt.js-logo-dark-mode-5995x619.png&#34;&gt; &#xA;   &lt;img width=&#34;700&#34; src=&#34;https://raw.githubusercontent.com/kudoai/chatgpt.js/main/media/images/chatgpt.js-logo-light-mode-5995x619.png&#34;&gt; &#xA;  &lt;/picture&gt; &lt;br&gt;&lt;br&gt; &lt;p&gt;ü§ñ A powerful client-side JavaScript library for ChatGPT &lt;br&gt;&lt;br&gt;&lt;/p&gt; &lt;/h3&gt;&#xA;&lt;/div&gt;  &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/kudoai/chatgpt.js/raw/main/LICENSE.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-MIT-green.svg?labelColor=464646&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/kudoai/chatgpt.js/commits/main&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/commit-activity/m/kudoai/chatgpt.js?label=Commits&amp;amp;labelColor=464646&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/size/kudoai/chatgpt.js/dist/chatgpt-1.10.6.min.js?label=Minified%20Size&amp;amp;labelColor=464646&amp;amp;color=ff69b4&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt; &lt;a href=&#34;https://www.codefactor.io/repository/github/kudoai/chatgpt.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/codefactor/grade/github/kudoai/chatgpt.js?labelColor=464646&amp;amp;label=Code+Quality&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/jsdelivr/gh/hm/chatgptjs/chatgpt.js?labelColor=464646&amp;amp;color=ff6427&amp;amp;label=jsDelivr+Hits&amp;amp;style=flat-square&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;chatgpt.js&lt;/strong&gt; is a powerful JavaScript library that allows for super easy interaction w/ the ChatGPT DOM.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Feature-rich&lt;/li&gt; &#xA; &lt;li&gt;Object-oriented&lt;/li&gt; &#xA; &lt;li&gt;Easy-to-use&lt;/li&gt; &#xA; &lt;li&gt;Lightweight (yet optimally performant)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img type=&#34;separator&#34; height=&#34;8px&#34; width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Importing the library&lt;/h2&gt; &#xA;&lt;h3&gt;ES6:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(async () =&amp;gt; {&#xA;    await import(&#39;https://code.chatgptjs.org/chatgpt-latest.min.js&#39;);    &#xA;    // Your code here...&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;ES5:&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var xhr = new XMLHttpRequest()&#xA;xhr.open(&#39;GET&#39;, &#39;https://code.chatgptjs.org/chatgpt-latest.min.js&#39;)&#xA;xhr.onload = function() {&#xA;    if (xhr.status === 200) {&#xA;        var chatgptJS = document.createElement(&#39;script&#39;)&#xA;        chatgptJS.textContent = xhr.responseText&#xA;        document.head.appendChild(chatgptJS)&#xA;        yourCode() // runs your code&#xA;    }&#xA;}&#xA;xhr.send()&#xA;&#xA;function yourCode() {&#xA;    // Your code here...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;img style=&#34;margin: 0 2px -0.065rem 0&#34; height=&#34;17&#34; src=&#34;https://i.imgur.com/SATGr8j.png&#34;&gt;&lt;img style=&#34;margin: 0 2px -0.035rem 1px&#34; height=&#34;17.5&#34; src=&#34;https://i.imgur.com/wcCg3al.png&#34;&gt; Greasemonkey:&lt;/h3&gt; &#xA;&lt;p&gt;Userscript repositories like Greasy Fork maintain a whitelist of pre-approved CDNs (such as commit-specific references from &lt;code&gt;cdn.jsdelivr.net&lt;/code&gt;) so the import URL is substantially lengthier to preserve publishability to these sites:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;// @require https://cdn.jsdelivr.net/gh/kudoai/chatgpt.js@4fdaa0ede3dd0847e20722568ddce38b7a00f49a/dist/chatgpt-1.10.6.min.js&#xA;// ==/UserScript==&#xA;&#xA;// Your code here...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you don&#39;t plan on publishing to these repos, the simpler &lt;code&gt;https://code.chatgptjs.org/chatgpt-latest.min.js&lt;/code&gt; can be used instead to import the latest minified release.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img style=&#34;margin: 0 2px -1px 0&#34; height=&#34;16&#34; src=&#34;https://www.google.com/chrome/static/images/favicons/apple-icon-60x60.png&#34;&gt; Chrome:&lt;/h3&gt; &#xA;&lt;p&gt;Since Google will &lt;a href=&#34;https://developer.chrome.com/docs/extensions/migrating/mv2-sunset/&#34;&gt;eventually phase out&lt;/a&gt; Manifest V2, remote code will no longer be allowed, so importing chatgpt.js locally is ideal:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Save &lt;a href=&#34;https://raw.githubusercontent.com/kudoai/chatgpt.js/main/chatgpt.js&#34;&gt;https://raw.githubusercontent.com/kudoai/chatgpt.js/main/chatgpt.js&lt;/a&gt; to a subdirectory (&lt;code&gt;lib&lt;/code&gt; in this example)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add ES6 export statement to end of &lt;code&gt;lib/chatgpt.js&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;...&#xA;export { chatgpt }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;In project&#39;s (V3) &lt;code&gt;manifest.json&lt;/code&gt;, add &lt;code&gt;lib/chatgpt.js&lt;/code&gt; as a web accessible resource&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;    &#34;web_accessible_resources&#34;: [{&#xA;        &#34;matches&#34;: [&#34;&amp;lt;all_urls&amp;gt;&#34;],&#xA;        &#34;resources&#34;: [&#34;lib/chatgpt.js&#34;]&#xA;    }],&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;In scripts that need &lt;code&gt;chatgpt.js&lt;/code&gt; (foreground/background alike), import it like so:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;(async () =&amp;gt; {&#xA;    const { chatgpt } = await import(chrome.runtime.getURL(&#39;lib/chatgpt.js&#39;));&#xA;    // Your code here...&#xA;})();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img type=&#34;separator&#34; height=&#34;8px&#34; width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;chatgpt.js&lt;/strong&gt; was written w/ ultra flexibility in mind.&lt;/p&gt; &#xA;&lt;p&gt;For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;chatgpt.getLastResponse()&#xA;chatgpt.getLastReply()&#xA;chatgpt.get(&#39;reply&#39;, &#39;last&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each call equally fetches the last response. If you think it works, it probabily will... so just type it! (Who has time for docs?)&lt;/p&gt; &#xA;&lt;p&gt;If it didn&#39;t, simply submit an &lt;a href=&#34;https://github.com/kudoai/chatgpt.js/issues&#34;&gt;issue&lt;/a&gt; or &lt;a href=&#34;https://github.com/kudoai/chatgpt.js/pulls&#34;&gt;PR&lt;/a&gt; and it will be integrated, ezpz!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img type=&#34;separator&#34; height=&#34;8px&#34; width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Made with chatgpt.js&lt;/h2&gt; &#xA;&lt;h3&gt;&#xA; &lt;picture&gt;&#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://i.imgur.com/RduASbD.png&#34;&gt;&#xA;  &lt;img width=&#34;16&#34; src=&#34;https://raw.githubusercontent.com/adamlui/chatgpt-addons/main/media/icons/openai-favicon64.png&#34;&gt;&#xA; &lt;/picture&gt; &lt;a href=&#34;https://chatgptevo.com/autoclear&#34;&gt;Autoclear ChatGPT History&lt;/a&gt; &lt;a href=&#34;https://github.com/awesome-scripts/awesome-userscripts#privacy&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; style=&#34;margin:0 0 -2px 5px&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Auto-clear your ChatGPT query history for maximum privacy. &lt;br&gt;&lt;a href=&#34;https://greasyfork.org/scripts/460805-auto-clear-chatgpt-history&#34;&gt;Install&lt;/a&gt; / &lt;a href=&#34;https://github.com/adamlui/autoclear-chatgpt-history#readme&#34;&gt;Readme&lt;/a&gt; / &lt;a href=&#34;https://github.com/adamlui/autoclear-chatgpt-history/discussions&#34;&gt;Discuss&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img width=&#34;16&#34; src=&#34;https://i.imgur.com/1yjmK3W.png&#34;&gt; &lt;a href=&#34;https://github.com/madkarmaa/automatic-chatgpt-dan&#34;&gt;Automatic ChatGPT DAN&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Automatically send DAN prompts to ChatGPT. &lt;br&gt;&lt;a href=&#34;https://github.com/madkarmaa/automatic-chatgpt-dan#%EF%B8%8F-installation&#34;&gt;Install&lt;/a&gt; / &lt;a href=&#34;https://github.com/madkarmaa/automatic-chatgpt-dan#readme&#34;&gt;Readme&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://media.bravegpt.com/images/bravegpt-icon48.png&#34; width=&#34;18&#34;&gt; &lt;a href=&#34;https://bravegpt.com&#34;&gt;BraveGPT&lt;/a&gt; &lt;a href=&#34;https://www.producthunt.com/posts/bravegpt?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-bravegpt&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=385630&amp;amp;theme=light&#34; style=&#34;width: 112px; height: 24px; margin:0 0 -4px 5px;&#34; width=&#34;112&#34; height=&#34;24&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Display ChatGPT answers in Brave Search sidebar (powered by GPT-4!) &lt;br&gt;&lt;a href=&#34;https://greasyfork.org/scripts/462440-bravegpt&#34;&gt;Install&lt;/a&gt; / &lt;a href=&#34;https://github.bravegpt.com/#readme&#34;&gt;Readme&lt;/a&gt; / &lt;a href=&#34;https://github.bravegpt.com/discussions&#34;&gt;Discuss&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&#xA; &lt;picture&gt;&#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://i.imgur.com/RduASbD.png&#34;&gt;&#xA;  &lt;img width=&#34;16&#34; src=&#34;https://raw.githubusercontent.com/adamlui/chatgpt-userscripts/main/media/icons/openai-favicon64.png&#34;&gt;&#xA; &lt;/picture&gt; &lt;a href=&#34;https://chatgptevo.com/autocontinue/github&#34;&gt;ChatGPT Auto-Continue ‚è©&lt;/a&gt; &lt;a href=&#34;https://github.com/awesome-scripts/awesome-userscripts#chatgpt&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; style=&#34;margin:0 0 -3px 3px&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Automatically continue generating multiple ChatGPT responses.&lt;br&gt; &lt;a href=&#34;https://greasyfork.org/scripts/466789-chatgpt-auto-continue&#34;&gt;Install&lt;/a&gt; / &lt;a href=&#34;https://github.com/adamlui/chatgpt-auto-continue#readme&#34;&gt;Readme&lt;/a&gt; / &lt;a href=&#34;https://chatgptevo.com/autocontinue/discussions&#34;&gt;Discuss&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&#xA; &lt;picture&gt;&#xA;  &lt;source media=&#34;(prefers-color-scheme: dark)&#34; srcset=&#34;https://i.imgur.com/RduASbD.png&#34;&gt;&#xA;  &lt;img width=&#34;16&#34; src=&#34;https://raw.githubusercontent.com/adamlui/chatgpt-addons/main/media/icons/openai-favicon64.png&#34;&gt;&#xA; &lt;/picture&gt; &lt;a href=&#34;https://chatgptevo.com/autorefresh&#34;&gt;ChatGPT Auto Refresh ‚Üª&lt;/a&gt; &lt;a href=&#34;https://github.com/awesome-scripts/awesome-userscripts#chatgpt&#34;&gt;&lt;img src=&#34;https://awesome.re/mentioned-badge.svg?sanitize=true&#34; style=&#34;margin:0 0 -2px 5px&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Keeps ChatGPT sessions fresh to eliminate network errors + Cloudflare checks. &lt;br&gt;&lt;a href=&#34;https://greasyfork.org/scripts/462422-chatgpt-auto-refresh&#34;&gt;Install&lt;/a&gt; / &lt;a href=&#34;https://github.com/adamlui/chatgpt-auto-refresh#readme&#34;&gt;Readme&lt;/a&gt; / &lt;a href=&#34;https://github.com/adamlui/chatgpt-auto-refresh/discussions&#34;&gt;Discuss&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;&lt;img src=&#34;https://media.duckduckgpt.com/images/ddgpt-icon48.png&#34; width=&#34;17&#34;&gt; &lt;a href=&#34;https://duckduckgpt.com&#34;&gt;DuckDuckGPT&lt;/a&gt; &lt;a href=&#34;https://www.producthunt.com/posts/duckduckgpt?utm_source=badge-featured&amp;amp;utm_medium=badge&amp;amp;utm_souce=badge-duckduckgpt&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://api.producthunt.com/widgets/embed-image/v1/featured.svg?post_id=379261&amp;amp;theme=light&#34; style=&#34;width: 112px; height: 24px; margin:0 0 -4px 5px;&#34; width=&#34;112&#34; height=&#34;24&#34;&gt;&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Display ChatGPT answers in DuckDuckGo sidebar (powered by GPT-4!) &lt;br&gt;&lt;a href=&#34;https://greasyfork.org/scripts/459849-duckduckgpt&#34;&gt;Install&lt;/a&gt; / &lt;a href=&#34;https://github.duckduckgpt.com/#readme&#34;&gt;Readme&lt;/a&gt; / &lt;a href=&#34;https://github.duckduckgpt.com/discussions&#34;&gt;Discuss&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chatgptinfinity.com&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;555&#34; src=&#34;https://raw.githubusercontent.com/adamlui/chatgpt-infinity/main/chrome/media/images/tiles/marquee-promo-tile-1400x560.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://chatgptwidescreen.com&#34; target=&#34;_blank&#34;&gt;&lt;img width=&#34;555&#34; src=&#34;https://raw.githubusercontent.com/adamlui/chatgpt-widescreen/main/chrome/media/images/tiles/marquee-promo-tile-1400x560.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;If you&#39;ve made something w/ chatgpt.js you want to share, email &lt;a href=&#34;mailto:showcase@chatgptjs.org&#34;&gt;showcase@chatgptjs.org&lt;/a&gt; or just open a &lt;a href=&#34;https://github.com/kudoai/chatgpt.js/pulls&#34;&gt;pull request&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;p&gt;&lt;img type=&#34;separator&#34; height=&#34;8px&#34; width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/andreasbm/readme/master/assets/lines/aqua.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;p&gt;This library exists thanks to code, translations, issues &amp;amp; ideas from the following contributors:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/adamlui&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/10906554?first-contrib=2023.03.15&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@adamlui&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mefengl&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/71683364?first-contrib=2023.03.16-get-functions&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@mefengl&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/Zin6969&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/131989355?first-contrib=2023.04.30-doc-translations&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@Zin6969&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/madruga8&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/30551844?first-contrib=2023.05.02-getlastresponse-bug-report&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@madruga8&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/XiaoYingYo&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/54934866?first-contrib=2023.05.01-clearchats-discard-fix&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@XiaoYingYo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/AliAlSarre&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/129722778?first-contrib=2023.05.24-css-readability&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@AliAlSarre&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/madkarmaa&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/100418457?first-contrib=2023.06.02-send-function-bug-report&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@madkarmaa&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wamoyo&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/1170326?first-contrib=2023.06.10-html-parser-idea&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@wamoyo&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/meiraleal&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/u/33952?first-contrib=2023.06.10-html-parser-idea&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;@meiraleal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/dependabot&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://avatars.githubusercontent.com/in/29110&amp;amp;h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;Dependabot&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chat.openai.com&#34;&gt;&lt;img src=&#34;https://images.weserv.nl/?url=https://i.imgur.com/tNyIPmG.jpg?h=50&amp;amp;w=50&amp;amp;mask=circle&amp;amp;maxage=7d&#34; alt=&#34;&#34; title=&#34;ChatGPT&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/kudoai/chatgpt.js/tree/main/dist&#34;&gt;&lt;strong&gt;Releases&lt;/strong&gt;&lt;/a&gt; / &lt;a href=&#34;https://github.com/kudoai/chatgpt.js/discussions&#34;&gt;Discuss&lt;/a&gt; / &lt;a href=&#34;https://raw.githubusercontent.com/kudoai/chatgpt.js/main/#---------a-powerful-client-side-javascript-library-for-chatgpt&#34;&gt;Back to top ‚Üë&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mengjian-github/copilot-analysis</title>
    <updated>2023-07-02T01:38:39Z</updated>
    <id>tag:github.com,2023-07-02:/mengjian-github/copilot-analysis</id>
    <link href="https://github.com/mengjian-github/copilot-analysis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ëä±‰∫ÜÂ§ßÂçä‰∏™ÊúàÔºåÊàëÁªà‰∫éÈÄÜÂêëÂàÜÊûê‰∫ÜGithub Copilot&lt;/h1&gt; &#xA;&lt;h2&gt;ËÉåÊôØ&lt;/h2&gt; &#xA;&lt;p&gt;‰ºóÊâÄÂë®Áü•ÔºåGithub CopilotÊòØ‰∏ÄÁßçÂü∫‰∫éÊú∫Âô®Â≠¶‰π†ÁöÑ‰ª£Á†ÅËá™Âä®Ë°•ÂÖ®Â∑•ÂÖ∑„ÄÇÂÆÉ‰ΩøÁî®‰∫ÜÊù•Ëá™GitHubÁöÑÂ§ßÈáè‰ª£Á†Å‰Ωú‰∏∫ËÆ≠ÁªÉÊï∞ÊçÆÔºåÂπ∂‰ΩøÁî®OpenAIÁöÑËØ≠Ë®ÄÊ®°ÂûãÊù•ÁîüÊàê‰ª£Á†Å„ÄÇCopilotËøòÂèØ‰ª•Â≠¶‰π†Áî®Êà∑ÁöÑÁºñÁ†Å‰π†ÊÉØÔºåÂπ∂Ê†πÊçÆ‰∏ä‰∏ãÊñáÊé®Êñ≠Âá∫Ê≠£Á°ÆÁöÑ‰ª£Á†ÅÁâáÊÆµ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Âú®ÂÆûÈôÖ‰ΩøÁî®‰∏≠ÂèëÁé∞Â§ßÈÉ®‰ªΩÊèêÁ§∫ËøòÊòØÈùûÂ∏∏Â•ΩÁî®ÁöÑÔºåËÉΩÂ§üËæÉ‰∏∫ÂáÜÁ°ÆÁöÑÊé®ÊµãÂá∫Áî®Êà∑ÊÑèÂõæÔºåÁîöËá≥ÊòØÂü∫‰∫éÈ°πÁõÆÂÖ∂‰ªñÊñá‰ª∂ÁöÑ‰∏ä‰∏ãÊñáËøõË°åÊé®ÁêÜ„ÄÇÊØîËæÉÂ•ΩÂ•áËøôÈáåÊòØÊÄé‰πàÂÅöÂà∞ÁöÑÔºå‰∫éÊòØÊé¢Á¥¢‰∫ÜËøô‰∏™VSCodeÊèí‰ª∂ÁöÑËØ¶ÁªÜÂÆûÁé∞„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÂáÜÂ§áÂ∑•‰Ωú&lt;/h2&gt; &#xA;&lt;p&gt;Áî±‰∫éCopilotÂπ∂Ê≤°ÊúâÂºÄÊ∫êÔºåÂõ†Ê≠§Êàë‰ª¨ÈúÄË¶ÅÂÅö‰∏Ä‰∫õÈÄÜÂêëÁöÑÂáÜÂ§á„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;È¶ñÂÖàÔºåÊâæÂà∞VSCodeÊèí‰ª∂ÁöÑÂÆâË£ÖÁõÆÂΩïÔºåÊãøÂà∞&lt;code&gt;extension.js&lt;/code&gt;Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/8966f2a1-c7ee-457d-a233-b53d18d4f80f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Âú®mac‰∏ãÊèí‰ª∂ÁõÆÂΩïÂú®&lt;code&gt;~/.vscode&lt;/code&gt;‰∏ãÔºåÊàë‰ª¨ÂèØ‰ª•ÊãøÂà∞‰∏Ä‰∏™ÁªèËøáÂéãÁº©Ê∑∑Ê∑ÜÁöÑÊñá‰ª∂Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/1c2b9452-87f1-45d3-8ba7-4b2fc1a69a56.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1. ÂàÜÂâ≤&lt;code&gt;webpack_modules&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;ÈíàÂØπÊï¥‰∏™webpackÂéãÁº©Ê∑∑Ê∑ÜÁöÑjsÔºåÊàë‰ª¨È¶ñÂÖàË¶ÅÂ∞Ü‰∏çÂêåÁöÑbundleËØÜÂà´Âá∫Êù•ÔºåÂàÜÂâ≤ÊàêÂçï‰∏™Êñá‰ª∂Ôºå‰ª•‰æø‰∫éÂêéÁª≠ÁöÑÂàÜÊûê„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Áî±‰∫éÂéãÁº©ÂêéÁöÑ‰ª£Á†ÅÂ≠òÂú®ÂæàÂ§ö‰∏çÁ°ÆÂÆöÊÄßÔºå‰∏ÄÂºÄÂßãÊâìÁÆóÂ∞ùËØïÈÄöËøáÊ≠£ÂàôÊèêÂèñÔºå‰ΩÜÊó†ËÆ∫Â¶Ç‰ΩïÈÉΩÊúâÂêÑÁßçËæπÁïåÊÉÖÂÜµÂØºËá¥ÊèêÂèñ‰∏çÊ≠£Á°ÆÔºåÊúÄÁÆÄÂçïÁöÑÊñπÊ≥ïËøòÊòØÈÄöËøáASTÊù•ÊèêÂèñ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;È¶ñÂÖàÔºåÈÄöËøábabel-parserÂ∞ÜÊ∫êÁ†ÅËß£Êûê‰∏∫ASTÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const ast = parser.parse(source);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÁÑ∂ÂêéÔºåÈÄöËøábabel-traverseÈÅçÂéÜÊï¥‰∏™ASTÔºåÊâæÂà∞modulesÁöÑÂèòÈáèÔºåÂèñÂá∫ÈáåÈù¢ÁöÑÂÄºÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function parseModules() {&#xA;  traverse(ast, {&#xA;    enter(path) {&#xA;      if (&#xA;        path.node.type === &#34;VariableDeclarator&#34; &amp;amp;&amp;amp;&#xA;        path.node.id.name === &#34;__webpack_modules__&#34;&#xA;      ) {&#xA;        const modules = path.node.init.properties;&#xA;        for (const module of modules) {&#xA;          const moduleId = module.key.value;&#xA;          const moduleAst = module.value;&#xA;          const moduleSource = generate(moduleAst).code;&#xA;&#xA;          try {&#xA;            const ast = transformRequire(prettier(clearfyParams(moduleId, moduleSource)));&#xA;&#xA;            const mainBody = ast.program.body[0].expression.body.body;&#xA;            const moduleCode = generate(types.Program(mainBody)).code;&#xA;            fs.writeFileSync(&#xA;              &#34;./prettier/modules/&#34; + moduleId + &#34;.js&#34;,&#xA;              moduleCode,&#xA;              &#34;utf8&#34;&#xA;            );&#xA;          } catch (e) {&#xA;            console.log(e);&#xA;          }&#xA;        }&#xA;      }&#xA;    },&#xA;  });&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÊúÄÂêéÔºåÂ∞ÜÂ§ÑÁêÜËøáÂêéÁöÑastÈÄöËøábabel-generatorÂíåbabel-typesÈáçÊñ∞ÁîüÊàêÊñ∞ÁöÑastÂÜôÂÖ•Êñá‰ª∂„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ËøôÊ†∑ÔºåÊàë‰ª¨Â∞±ÂæóÂà∞‰∫Ü‰ª•Ê®°ÂùóidÂëΩÂêçÁöÑÁã¨Á´ãbundleÔºåÂú®ÊàëÁöÑËøô‰∏ÄÁâà‰∏≠ÔºåËß£ÊûêÂá∫Êù•ÁöÑcopilotÁöÑbundleÂ∑≤ÁªèÈùûÂ∏∏Â§ö‰∫ÜÔºåËææÂà∞752‰∏™„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/3a674c5a-0b99-4706-a5cb-b58316767cf1.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;2. ËØÜÂà´Ê®°Âùó‰æùËµñ&lt;/h3&gt; &#xA;&lt;p&gt;Êàë‰ª¨Ëß£ÊûêÂá∫Êù•ÁöÑbundleÔºåÁ¨¨‰∏ÄÂ±ÇÂáΩÊï∞Â§ßÊ¶ÇÊòØËøôÊ†∑Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/8ab939a1-0421-4870-ac58-76807ffe91e9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ÂØπ‰∫éwebpackÊù•ËØ¥ÔºåËøôÂá†‰∏™ÂèÇÊï∞ÊòØÂõ∫ÂÆöÁöÑÔºåÂàÜÂà´ÊòØ&lt;code&gt;module&lt;/code&gt;„ÄÅ&lt;code&gt;exports&lt;/code&gt;„ÄÅ&lt;code&gt;require&lt;/code&gt;ÔºåÊâÄ‰ª•Êàë‰ª¨‰ºòÂÖàÊääËøôÂá†‰∏™ÂèÇÊï∞ËØÜÂà´Âá∫Êù•ÔºåËøõË°å‰ΩúÁî®ÂüüÁöÑÊõøÊç¢ÔºåËøôÊ†∑ÊâçÂèØ‰ª•ÁúãÂá∫Ê®°ÂùóÈó¥ÁöÑ‰æùËµñÂÖ≥Á≥ªÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function clearfyParams(moduleId, moduleSource) {&#xA;  if (moduleSource.trim().startsWith(&#34;function&#34;)) {&#xA;    // change `function(e, t, n) {` to `(e, t, n) =&amp;gt; {`&#xA;    moduleSource = moduleSource.replace(&#34;function&#34;, &#34;&#34;);&#xA;    moduleSource = moduleSource.replace(&#34;)&#34;, &#34;) =&amp;gt;&#34;);&#xA;  }&#xA;&#xA;  const moduleAst = parser.parse(moduleSource);&#xA;  let flag = false;&#xA;&#xA;  traverse(moduleAst, {&#xA;    ArrowFunctionExpression(path) {&#xA;      if (flag) return;&#xA;      const params = path.node.params;&#xA;      params.forEach((param) =&amp;gt; {&#xA;        if (param.name === &#34;e&#34; || param.name === &#34;t&#34; || param.name === &#34;n&#34;) {&#xA;          path.scope.rename(&#xA;            param.name,&#xA;            {&#xA;              e: &#34;module&#34;,&#xA;              t: &#34;exports&#34;,&#xA;              n: &#34;require&#34;,&#xA;            }[param.name]&#xA;          );&#xA;        }&#xA;      });&#xA;      flag = true;&#xA;    },&#xA;  });&#xA;  return moduleAst;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËøôÊ†∑ÔºåÊàë‰ª¨Â∞±ÂæóÂà∞‰∫ÜÁ±ª‰ººËøôÊ†∑ÁöÑÊúârequireÂíåexportsÁöÑ‰ª£Á†ÅÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;var r = require(12781).Stream;&#xA;var i = require(73837);&#xA;function o() {&#xA;  this.source = null;&#xA;  this.dataSize = 0;&#xA;  this.maxDataSize = 1048576;&#xA;  this.pauseStream = !0;&#xA;  this._maxDataSizeExceeded = !1;&#xA;  this._released = !1;&#xA;  this._bufferedEvents = [];&#xA;}&#xA;module.exports = o;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. ‰ºòÂåñÂéãÁº©ÂêéÁöÑËØ≠Ê≥ï&lt;/h3&gt; &#xA;&lt;p&gt;JS‰ª£Á†ÅÁªèËøáÂéãÁº©ÂêéÔºå‰ºö‰∫ßÁîüÂ§ßÈáèÁöÑÈÄóÂè∑ËøêÁÆóÁ¨¶„ÄÅÁü≠Ë∑ØÂÜôÊ≥ï„ÄÅ‰∏âÂÖÉË°®ËææÂºè„ÄÅÊã¨Âè∑Èó≠ÂåÖÁ≠âÁ≠âÔºåÈùûÂ∏∏ÈòªÁ¢çÈòÖËØªÔºåËøôÈáåÂèÇËÄÉ‰∫Ü&lt;a href=&#34;https://github.com/thakkarparth007/copilot-explorer&#34;&gt;https://github.com/thakkarparth007/copilot-explorer&lt;/a&gt; Ëøô‰∏™È°πÁõÆÊâÄÂÅöÁöÑ‰∏Ä‰∫õÈÄÜÂêëÂ∑•‰ΩúÔºåÂØπËØ≠Ê≥ïËøõË°å‰∫Ü‰∏ÄÁ≥ªÂàóÂ§ÑÁêÜÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function prettier(ast) {&#xA;  const moduleTransformer = {&#xA;    // e.g., `(0, r.getConfig)(e, r.ConfigKey.DebugOverrideProxyUrl);`&#xA;    // gets transformed to r.getConfig(e, r.ConfigKey.DebugOverrideProxyUrl);&#xA;    CallExpression(path) {&#xA;      if (path.node.callee.type != &#34;SequenceExpression&#34;) {&#xA;        return;&#xA;      }&#xA;      if (&#xA;        path.node.callee.expressions.length == 2 &amp;amp;&amp;amp;&#xA;        path.node.callee.expressions[0].type == &#34;NumericLiteral&#34;&#xA;      ) {&#xA;        path.node.callee = path.node.callee.expressions[1];&#xA;      }&#xA;    },&#xA;    ExpressionStatement(path) {&#xA;      if (path.node.expression.type == &#34;SequenceExpression&#34;) {&#xA;        const exprs = path.node.expression.expressions;&#xA;        let exprStmts = exprs.map((e) =&amp;gt; {&#xA;          return types.expressionStatement(e);&#xA;        });&#xA;        path.replaceWithMultiple(exprStmts);&#xA;        return;&#xA;      }&#xA;      if (path.node.expression.type == &#34;AssignmentExpression&#34;) {&#xA;        // handle cases like: `a = (expr1, expr2, expr3)`&#xA;        // convert to: `expr1; expr2; a = expr3;`&#xA;        if (path.node.expression.right.type == &#34;SequenceExpression&#34;) {&#xA;          const exprs = path.node.expression.right.expressions;&#xA;          let exprStmts = exprs.map((e) =&amp;gt; {&#xA;            return types.expressionStatement(e);&#xA;          });&#xA;          let lastExpr = exprStmts.pop();&#xA;          path.node.expression.right = lastExpr.expression;&#xA;          exprStmts.push(path.node);&#xA;          path.replaceWithMultiple(exprStmts);&#xA;          return;&#xA;        }&#xA;&#xA;        // handle cases like: `exports.GoodExplainableName = a;` where `a` is a function or a class&#xA;        // rename `a` to `GoodExplainableName` everywhere in the module&#xA;        if (&#xA;          path.node.expression.left.type == &#34;MemberExpression&#34; &amp;amp;&amp;amp;&#xA;          path.node.expression.left.object.type == &#34;Identifier&#34; &amp;amp;&amp;amp;&#xA;          path.node.expression.left.object.name == &#34;exports&#34; &amp;amp;&amp;amp;&#xA;          path.node.expression.left.property.type == &#34;Identifier&#34; &amp;amp;&amp;amp;&#xA;          path.node.expression.left.property.name != &#34;default&#34; &amp;amp;&amp;amp;&#xA;          path.node.expression.right.type == &#34;Identifier&#34; &amp;amp;&amp;amp;&#xA;          path.node.expression.right.name.length == 1&#xA;        ) {&#xA;          path.scope.rename(&#xA;            path.node.expression.right.name,&#xA;            path.node.expression.left.property.name&#xA;          );&#xA;          return;&#xA;        }&#xA;      }&#xA;      if (path.node.expression.type == &#34;ConditionalExpression&#34;) {&#xA;        // handle cases like: `&amp;lt;test&amp;gt; ? c : d;`&#xA;        // convert to: `if (&amp;lt;test&amp;gt;) { c; } else { d; }`&#xA;        const test = path.node.expression.test;&#xA;        const consequent = path.node.expression.consequent;&#xA;        const alternate = path.node.expression.alternate;&#xA;&#xA;        const ifStmt = types.ifStatement(&#xA;          test,&#xA;          types.blockStatement([types.expressionStatement(consequent)]),&#xA;          types.blockStatement([types.expressionStatement(alternate)])&#xA;        );&#xA;        path.replaceWith(ifStmt);&#xA;        return;&#xA;      }&#xA;      if (path.node.expression.type == &#34;LogicalExpression&#34;) {&#xA;        // handle cases like: `a &amp;amp;&amp;amp; b;`&#xA;        // convert to: `if (a) { b; }`&#xA;        const test = path.node.expression.left;&#xA;        const consequent = path.node.expression.right;&#xA;&#xA;        const ifStmt = types.ifStatement(&#xA;          test,&#xA;          types.blockStatement([types.expressionStatement(consequent)]),&#xA;          null&#xA;        );&#xA;        path.replaceWith(ifStmt);&#xA;        return;&#xA;      }&#xA;    },&#xA;    IfStatement(path) {&#xA;      if (!path.node.test || path.node.test.type != &#34;SequenceExpression&#34;) {&#xA;        return;&#xA;      }&#xA;      const exprs = path.node.test.expressions;&#xA;      let exprStmts = exprs.map((e) =&amp;gt; {&#xA;        return types.expressionStatement(e);&#xA;      });&#xA;      let lastExpr = exprStmts.pop();&#xA;      path.node.test = lastExpr.expression;&#xA;      exprStmts.push(path.node);&#xA;      path.replaceWithMultiple(exprStmts);&#xA;    },&#xA;    ReturnStatement(path) {&#xA;      if (&#xA;        !path.node.argument ||&#xA;        path.node.argument.type != &#34;SequenceExpression&#34;&#xA;      ) {&#xA;        return;&#xA;      }&#xA;      const exprs = path.node.argument.expressions;&#xA;      let exprStmts = exprs.map((e) =&amp;gt; {&#xA;        return types.expressionStatement(e);&#xA;      });&#xA;      let lastExpr = exprStmts.pop();&#xA;      let returnStmt = types.returnStatement(lastExpr.expression);&#xA;      exprStmts.push(returnStmt);&#xA;      path.replaceWithMultiple(exprStmts);&#xA;    },&#xA;    VariableDeclaration(path) {&#xA;      // change `const a = 1, b = 2;` to `const a = 1; const b = 2;`&#xA;      if (path.node.declarations.length &amp;gt; 1) {&#xA;        let newDecls = path.node.declarations.map((d) =&amp;gt; {&#xA;          return types.variableDeclaration(path.node.kind, [d]);&#xA;        });&#xA;        path.replaceWithMultiple(newDecls);&#xA;      }&#xA;    },&#xA;  };&#xA;  traverse(ast, moduleTransformer);&#xA;  return ast;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. requireÁöÑÊ®°ÂùóidÂèñÂêç&lt;/h3&gt; &#xA;&lt;p&gt;Áî±‰∫éÂéãÁº©‰πãÂêéÁöÑ‰ª£Á†ÅÔºårequire‰æùËµñÂè™ÊúâmoduleidÔºåÂ∑≤ÁªèÂ§±Âéª‰∫ÜÂéüÊù•ÁöÑÊñá‰ª∂ÂêçÁß∞ÔºåÊâÄ‰ª•ËøôÈáåÊàë‰ª¨ÈúÄË¶ÅÊâãÂä®Êò†Â∞ÑÔºàÂΩìÁÑ∂‰πüÂèØ‰ª•ÂÄüÂä©GPTÔºâÊé®Êñ≠‰∏Ä‰∏ã‰∏çÂêåÊñá‰ª∂ÁöÑÂêçÁß∞ÔºåÁª¥Êä§‰∏Ä‰∏™mapÊñá‰ª∂ÔºåÁÑ∂ÂêéÂú®astÈáåÂ∞ÜÊ®°ÂùóidÊõøÊç¢‰∏∫ÊúâËØ≠‰πâÁöÑÊ®°ÂùóÂêçÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function transformRequire(ast) {&#xA;  const moduleTransformer = {&#xA;    VariableDeclaration(path) {&#xA;        if (path.node.declarations[0].init &amp;amp;&amp;amp; path.node.declarations[0].init.type === &#34;CallExpression&#34;) {&#xA;            if (path.node.declarations[0].init.callee.name === &#34;require&#34;) {&#xA;                const moduleId = path.node.declarations[0].init.arguments[0].value;&#xA;                if (NameMap[moduleId]) {&#xA;                    const { name, path: modulePath} = NameMap[moduleId];&#xA;&#xA;                    path.node.declarations[0].init.arguments[0].value = &#39;&#34;&#39;+modulePath+&#39;&#34;&#39;;&#xA;                    path.scope.rename(path.node.declarations[0].id.name, name);&#xA;                }&#xA;              }&#xA;        }&#xA;      &#xA;    },&#xA;  };&#xA;  traverse(ast, moduleTransformer);&#xA;  return ast;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ëá≥Ê≠§ÔºåÊàë‰ª¨ÈÄÜÂêëÁõ∏ÂÖ≥ÁöÑÂáÜÂ§áÂ∑•‰ΩúÂ∞±ÂÆåÊàê‰∫Ü„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;ÂÖ•Âè£ÂàÜÊûê&lt;/h2&gt; &#xA;&lt;p&gt;ËôΩÁÑ∂ÂâçÈù¢Êàë‰ª¨Â∑≤Áªè‰∏∫ÈÄÜÂêëÂÅö‰∫ÜÂ§ßÈáèÁöÑÂ∑•‰ΩúÔºå‰ΩÜÂÆûÈôÖ‰∏äÔºåÈÄÜÂêëJS‰ª£Á†ÅËøòÊòØ‰∏Ä‰∏™‰ΩìÂäõÊ¥ªÔºåÂú®ÊúâÈôêÁöÑÁ≤æÂäõ‰∏ãÔºåÊàë‰ª¨‰πüÂè™ËÉΩÊâãÂä®Â∞Ü‰∏Ä‰∫õ‰∏ä‰∏ãÊñáÂéãÁº©ÂèòÈáèËøõË°åÊé®Êñ≠ÊõøÊç¢ÔºåÂ∞ΩÂèØËÉΩËøòÂéü‰∏Ä‰∫õÊ†∏ÂøÉÊñá‰ª∂ÁöÑ‰ª£Á†Å„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÂÖ•Âè£ÂèØ‰ª•ÂæàËΩªÊòìÊâæÂà∞ÂÆÉÁöÑÊ®°ÂùóidÊòØ91238Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/3e853967-0df6-4443-b95c-c7e9594ed381.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ÁªèËøá‰∏ÄÁ≥ªÂàóÁöÑÊâãÂä®‰ºòÂåñÊìç‰ΩúÔºåÊàë‰ª¨ÂèØ‰ª•Â§ßËá¥ËøòÂéüËøô‰∏™ÂÖ•Âè£Êñá‰ª∂ÁöÑÂéüÂßãÊ†∑Ë≤åÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/e9823fac-23da-474c-86ce-296bd0e9cc55.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Âú®VSCodeÁöÑactiveÂáΩÊï∞‰∏≠ÔºåcopilotÂÅö‰∫ÜÂ§ßÈáèÂàùÂßãÂåñÁõ∏ÂÖ≥ÁöÑÂ∑•‰ΩúÔºå‰ª•ÂèäÂ∞ÜÂêÑ‰∏™Ê®°ÂùóÁöÑÁ§∫‰æãÊ≥®ÂÜåÂà∞context‰∏≠ÔºåÂêéÁª≠ÂèñÂÆû‰æãÂ∞±‰ªécontext‰∏ä‰∏ãÊñáÊù•Âèñ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êàë‰ª¨ÁöÑÊ†∏ÂøÉËøòÊòØÊÉ≥Êé¢Á¥¢copilotÁöÑ‰ª£Á†ÅË°•ÂÖ®ËÉΩÂäõÔºåÂÖ•Âè£Êñá‰ª∂ÁöÑÁªÜËäÇÂú®ËøôÈáåÂ∞±‰∏çÂ±ïÂºÄ‰∫Ü„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;‰ª£Á†ÅÊèêÁ§∫ÂÖ•Âè£ÈÄªËæë&lt;/h2&gt; &#xA;&lt;p&gt;‰ª£Á†ÅÊèêÁ§∫ÈÄªËæëÊòØÂú®&lt;code&gt;registerGhostText&lt;/code&gt;‰∏≠Ê≥®ÂÜåÁöÑÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/7a5b9151-3050-4daa-a46c-be52ce524450.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Âú®vscode‰∏≠Ôºå‰∏ªË¶ÅÈÄöËøá&lt;code&gt;InlineCompletionItemProvider&lt;/code&gt;Êù•ÂÆûÁé∞ÁºñËæëÂô®‰∏≠ÁöÑ‰ª£Á†ÅË°•ÂÖ®ËÉΩÂäõ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Êï¥‰∏™ÂÆûÁé∞ÁöÑÂÖ•Âè£ÈÄªËæëÁªèËøáËøòÂéüÂêéÂ§ßËá¥Â¶Ç‰∏ãÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/fad4aa2b-ac0e-4fef-b2f9-881592a8aad6.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Êï¥‰ΩìËøòÊòØÊØîËæÉÊ∏ÖÊô∞ÁöÑÔºåÂÆÉÂ§ßËá¥ÂÅö‰∫Ü‰ª•‰∏ãÂá†‰ª∂‰∫ãÊÉÖÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Â¶ÇÊûúÁî®Êà∑ÂÖ≥Èó≠‰∫Ü&lt;code&gt;InlineSuggestEnable&lt;/code&gt;„ÄÅÊàñËÄÖdocument‰∏çÂú®Â§ÑÁêÜÁôΩÂêçÂçïÂÜÖÔºåÊàñËÄÖÁî®Êà∑ÂèñÊ∂à‰∫ÜËæìÂÖ•ÔºåÈÉΩ‰ºöÊèêÂâçreturnÔºå‰∏çËøõË°å‰ª£Á†ÅÊèêÁ§∫„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Ë∞ÉÁî®&lt;code&gt;getGhostText&lt;/code&gt;ÊñπÊ≥ïÊãøÂà∞textsÔºåËøô‰∏™Â§ßÊ¶ÇÂ∞±ÊòØÊúÄÁªà‰ºöËøîÂõûÁªôÁî®Êà∑ÁöÑ‰ª£Á†ÅÊèêÁ§∫ÊñáÊú¨„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;Ë∞ÉÁî®&lt;code&gt;completionsFromGhostTextResults&lt;/code&gt;ÔºåÊãøÂà∞ÊúÄÁªàÁöÑcompletions„ÄÇËøô‰∏™ÂáΩÊï∞ÊØîËæÉÁÆÄÂçïÔºå‰∏ªË¶ÅÂØπÊñáÊú¨ËøõË°å‰∫Ü‰∏Ä‰∫õÊ†ºÂºèÂåñÁöÑÂ§ÑÁêÜÔºåÊØîÂ¶ÇÂ§ÑÁêÜTabÁ©∫Ê†ºÁöÑÈóÆÈ¢òÔºå‰ª•ÂèäÊ†πÊçÆÂÖâÊ†áÂΩìÂâçÁöÑ‰ΩçÁΩÆËÆ°ÁÆóÂá∫‰ª£Á†ÅÊèêÁ§∫Â∫îÂΩìÊòæÁ§∫Âú®ÁºñËæëÂô®‰∏≠ÁöÑÂùêÊ†áËåÉÂõ¥„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;getGhostTextÊ†∏ÂøÉÈÄªËæë&lt;/h2&gt; &#xA;&lt;p&gt;getGhostTextÊòØËé∑ÂèñÊèêÁ§∫‰ª£Á†ÅÁöÑÊ†∏ÂøÉÊñπÊ≥ïÔºåÊï¥‰Ωì‰ª£Á†ÅËæÉÂ§öÔºåÊàë‰ª¨Â∞ÜÂÖ∂ÊãÜÂàÜ‰∏Ä‰∏ãÔºö&lt;/p&gt; &#xA;&lt;h3&gt;1. ÊèêÂèñPrompt&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const prompt = await extractprompt.extractPrompt(ctx, document, position);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÊèêÂèñpromptÊòØ‰∏Ä‰∏™ÊØîËæÉÂ§çÊùÇÁöÑÊìç‰ΩúÔºåÊé•‰∏ãÊù•Êàë‰ª¨ÂçïÁã¨ÊãÜ‰∏ÄÂ∞èËäÇËØ¶ÁªÜÂàÜÊûê„ÄÇ&lt;/p&gt; &#xA;&lt;h3&gt;2. ËæπÁïåÂà§Êñ≠&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;if (&#34;copilotNotAvailable&#34; === prompt.type) {&#xA;    exports.ghostTextLogger.debug(&#xA;      ctx,&#xA;      &#34;Copilot not available, due to the .copilotignore settings&#34;&#xA;    );&#xA;    return {&#xA;      type: &#34;abortedBeforeIssued&#34;,&#xA;      reason: &#34;Copilot not available due to the .copilotignore settings&#34;,&#xA;    };&#xA;  }&#xA;  if (&#34;contextTooShort&#34; === prompt.type) {&#xA;    exports.ghostTextLogger.debug(ctx, &#34;Breaking, not enough context&#34;);&#xA;    return {&#xA;      type: &#34;abortedBeforeIssued&#34;,&#xA;      reason: &#34;Not enough context&#34;,&#xA;    };&#xA;  }&#xA;  if (token?.isCancellationRequested) {&#xA;    exports.ghostTextLogger.info(ctx, &#34;Cancelled after extractPrompt&#34;);&#xA;    return {&#xA;      type: &#34;abortedBeforeIssued&#34;,&#xA;      reason: &#34;Cancelled after extractPrompt&#34;,&#xA;    };&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËøôÈáåÁöÑËæπÁïåËåÉÂõ¥‰∏ªË¶ÅÊòØ‰∏âÁßçÊÉÖÂÜµÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂåÖÂê´Âú®.copilotignoreÈáåÁöÑÊñá‰ª∂&lt;/li&gt; &#xA; &lt;li&gt;‰∏ä‰∏ãÊñáÂ§™Â∞ë‰∫Ü&lt;/li&gt; &#xA; &lt;li&gt;Áî®Êà∑Â∑≤ÁªèÂèñÊ∂à‰∫Ü&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;3. ‰∫åÁ∫ßÁºìÂ≠ò&lt;/h3&gt; &#xA;&lt;p&gt;Âú®copilotÂÜÖÈÉ®ÂÅö‰∫Ü‰∏§Â±ÇÁºìÂ≠òÂ§ÑÁêÜÔºåÁ¨¨‰∏ÄÂ±ÇÁºìÂ≠òÊòØ‰øùÂ≠ò‰∫Ü‰∏ä‰∏ÄÊ¨°ÁöÑ&lt;code&gt;prefix&lt;/code&gt;Âíå&lt;code&gt;suffix&lt;/code&gt;Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function updateGlobalCacheKey(prefix, suffix, promptKey) {&#xA;  prefixCache = prefix;&#xA;  suffixCache = suffix;&#xA;  promptKeyCache = promptKey;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËøôÈáåÁöÑ&lt;code&gt;promptKey&lt;/code&gt;ÊòØÊ†πÊçÆ&lt;code&gt;prefix&lt;/code&gt;Âíå&lt;code&gt;suffix&lt;/code&gt;ÁöÑÂÜÖÂÆπËÆ°ÁÆóÂæóÂà∞„ÄÇÂú®copilotÂêëÂêéÂè∞ÂèëËµ∑ËØ∑Ê±ÇÂâçÔºåÂ¶ÇÊûúÂà§Êñ≠ËøôÊ¨°ËØ∑Ê±ÇÁöÑprefixÂíåsuffixËøòÊòØÂíå‰πãÂâçÁöÑ‰∏ÄÊ†∑ÔºåÂàô‰ºöËØªÂèñÁºìÂ≠òÁöÑÂÜÖÂÆπÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/91ea686c-7696-452f-a18b-927b96243cac.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Á¥ßÊé•ÁùÄÔºåÂ¶ÇÊûú‰∏ä‰∏ÄÂ±ÇÁöÑÁºìÂ≠òÊ≤°ÊúâÂëΩ‰∏≠ÔºåcopilotËøò‰ºöËÆ°ÁÆó‰∫åÁ∫ßÁºìÂ≠òÔºå‰ºöËÆ°ÁÆóÂΩìÂâçÁöÑpromptÂú®‰∏çÂú®ÁºìÂ≠òËåÉÂõ¥ÂÜÖÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/d7ff3141-d12c-4b10-89f1-c217cbe32681.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Âú®ËøôÈáåÔºåcopilotÈááÂèñÁöÑÁºìÂ≠òÊòØLRUÁºìÂ≠òÁ≠ñÁï•ÔºåpromptÈªòËÆ§‰ºöÁºìÂ≠ò100Êù°Ôºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;exports.completionCache = new s.LRUCacheMap(100);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËÄåkeyForPromptÂáΩÊï∞Â∞±ÊòØ‰∏Ä‰∏™ÂØπprefixÂíåsuffixÁöÑhashÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;exports.keyForPrompt = function (e) {&#xA;  return r.SHA256(e.prefix + e.suffix).toString();&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;4. ÁúüÊ≠£ÂèëËµ∑ËØ∑Ê±Ç&lt;/h3&gt; &#xA;&lt;p&gt;Âà∞‰∫ÜÁúüÊ≠£Âà∞ÂêëÂêéÂè∞ÂèëÈÄÅpromptËØ∑Ê±ÇÁöÑÊó∂ÂÄôÔºåcopilotËøòÊòØÂÅö‰∫Ü‰∏§‰ª∂ÊØîËæÉÁªÜËá¥ÁöÑ‰∫ãÊÉÖÔºö&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;ËÆæÁΩÆ&lt;code&gt;Debounce&lt;/code&gt;Êó∂Âª∂&lt;/li&gt; &#xA; &lt;li&gt;Âà§Êñ≠&lt;code&gt;contexualFilterScore&lt;/code&gt;ÊòØÂê¶ËææÂà∞ÈòàÂÄº&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;È¶ñÂÖàÔºå‰∏∫‰∫ÜÈÅøÂÖçÈ¢ëÁπÅÂêëÂêéÂè∞ÂèëÈÄÅËØ∑Ê±ÇÔºåcopilotÂÅö‰∫ÜdebounceÔºåË¶ÅÁü•ÈÅìÊ®°ÂûãËÆ°ÁÆóÊòØÂçÅÂàÜÊ∂àËÄóÁÆóÂäõÁöÑÔºåÂõ†Ê≠§Âú®Ëøô‰∏™Âú∫ÊôØ‰∏ãÔºåÂøÖÈ°ªË¶ÅÂÅödebounce„ÄÇcopilotÁöÑËøô‰∏™debounce‰πü‰∏çÊòØ‰∏ÄËà¨ÁöÑÔºåËÆ©Êàë‰ª¨ÁúãÁúãÂÆÉÁöÑÂÆûÁé∞ÁªÜËäÇÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;exports.getDebounceLimit = async function (e, t) {&#xA;  let n;&#xA;  if ((await e.get(r.Features).debouncePredict()) &amp;amp;&amp;amp; t.measurements.contextualFilterScore) {&#xA;    const e = t.measurements.contextualFilterScore;&#xA;    const r = .3475;&#xA;    const i = 7;&#xA;    n = 25 + 250 / (1 + Math.pow(e / r, i));&#xA;  } else n = await e.get(r.Features).debounceMs();&#xA;  return n &amp;gt; 0 ? n : 75;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;copilotÊúâ‰∏Ä‰∏™È¢ÑÊµãÂºÄÂÖ≥ÔºåÂ¶ÇÊûúËøô‰∏™È¢ÑÊµãÂºÄÂÖ≥ÊâìÂºÄÔºå‰ºöÊ†πÊçÆÂΩìÂâçÁöÑÂÜÖÂÆπÁõ∏ÂÖ≥ÊÄßËØÑÂàÜÈ¢ÑÊµãÂΩìÂâçÁöÑdebounceÊó∂Âª∂ÔºåËøô‰∏™Â§ÑÁêÜÂ∞±ÊØîËæÉÈ´òÁ∫ß‰∫Ü„ÄÇÂΩìÁÑ∂Âú®ÂºÄÂÖ≥Ê≤°ÊâìÂºÄÁöÑÊÉÖÂÜµ‰∏ãÈªòËÆ§ÂÄº‰∏∫75ms„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÂÖ∂Ê¨°Â∞±ÊòØ&lt;code&gt;contexualFilterScore&lt;/code&gt; ‰∫ÜÔºåËøô‰∏™ÂÄº‰ª£Ë°®ÁöÑÊòØ‰∏ä‰∏ãÊñáÁöÑËØÑÂàÜÔºåcopilot‰ºöËÆ∞ÂΩï‰πãÂâçÂá†Ê¨°‰∏ä‰∏ãÊñáÊúâÊ≤°ÊúâÈááÁ∫≥ÁöÑÁªìÊûúÔºåË≤å‰ººÊòØÈÄöËøá‰∏Ä‰∏™ÁÆÄÂçïÁöÑÁ∫øÊÄßÂõûÂΩíÊù•È¢ÑÊµãÂΩìÂâçÁöÑ‰∏ä‰∏ãÊñáË¢´ÈááÁ∫≥ÁöÑÂèØËÉΩÊÄßÔºåÂ¶ÇÊûúÂ∞è‰∫é‰∏ÄÂÆöÁöÑÈòàÂÄºÔºåÂàô‰∏ç‰ºöÂÜçÁªôÁî®Êà∑ËøõË°åÊèêÁ§∫Ôºå‰ºòÂåñÁî®Êà∑‰ΩìÈ™å„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/c175e519-bb25-4781-a9a3-3ca46628e407.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ÂΩìÂâçÁâàÊú¨ÁöÑÈòàÂÄºÂ∫îËØ•ÊòØ35%„ÄÇËøô‰∏™&lt;code&gt;contextualFilterEnable&lt;/code&gt;ÂºÄÂÖ≥ÈªòËÆ§ÊòØÊâìÂºÄÁöÑ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÊúÄÂêéÔºåÂ∞±ÊòØÂêëÂêéÂè∞ÁúüÊ≠£ÂèëËµ∑ËØ∑Ê±Ç‰∫ÜÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/18128a56-2953-4871-ac50-fa4367b24c5f.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;5. ÊµÅÁ®ãÊÄªÁªì&lt;/h3&gt; &#xA;&lt;p&gt;Áîª‰∏™ÂõæÊÄªÁªì‰∏Ä‰∏ãcopilotÂêëÂêéÂè∞ÂèëËµ∑ËØ∑Ê±Ç‰πãÂâçÂÅöÁöÑ‰∫ãÊÉÖÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/7653b58f-20d4-405e-bd88-744a6c622999.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ExtractÊ†∏ÂøÉÈÄªËæë&lt;/h2&gt; &#xA;&lt;p&gt;ExtractÈ¶ñÂ±ÇÈÄªËæëÂÖ∂ÂÆûÂπ∂‰∏çÂ§çÊùÇÔºåÊúÄÁªàËøîÂõû‰∫ÜpromptÂØπË±°Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/6913fceb-3f73-4381-a906-1d6ccde0a896.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;‰∏äÂõæ‰∏≠Áî®Á∫¢Ê°ÜÊ†áÂá∫ÁöÑÂ≠óÊÆµÊù•Ê∫ê‰∫éÈÖçÁΩÆÔºåÂÖ∂‰ªñÁöÑÂ≠óÊÆµÊù•Ëá™‰∫é&lt;code&gt;getPrompt&lt;/code&gt;ÊñπÊ≥ïÁöÑËøîÂõûÔºågetPromptÊòØËé∑ÂèñpromptÁöÑÊ†∏ÂøÉÈÄªËæëÔºåËøôÂùóÊàë‰ª¨Êé•‰∏ãÊù•ÂçïÁã¨Â±ïÂºÄËÆ®ËÆ∫ÔºåÂÖàÊù•ÁúãÁúãÈÖçÁΩÆÁöÑÈóÆÈ¢ò„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Âú®copilotÔºàVSCodeÔºâ‰ΩìÁ≥ª‰∏≠ÔºåÊúâÂæàÂ§öÈÖçÁΩÆÊòØÂØπÊé•‰∫ÜÂæÆËΩØÁöÑABÂÆûÈ™åÂπ≥Âè∞ÁöÑÔºåÂèØ‰ª•Âú®Êñá‰ª∂‰∏≠ÊâæÂà∞ËøôÊ†∑ÁöÑÊ®°ÂùóÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;async fetchExperiments(e, t) {&#xA;      const n = e.get(r.Fetcher);&#xA;      let o;&#xA;      try {&#xA;        o = await n.fetch(&#34;https://default.exp-tas.com/vscode/ab&#34;, {&#xA;          method: &#34;GET&#34;,&#xA;          headers: t&#xA;        });&#xA;      } catch (t) {&#xA;        return i.ExpConfig.createFallbackConfig(e, `Error fetching ExP config: ${t}`);&#xA;      }&#xA;      if (!o.ok) return i.ExpConfig.createFallbackConfig(e, `ExP responded with ${o.status}`);&#xA;      const s = await o.json(),&#xA;        a = s.Configs.find(e =&amp;gt; &#34;vscode&#34; === e.Id) ?? {&#xA;          Id: &#34;vscode&#34;,&#xA;          Parameters: {}&#xA;        },&#xA;        c = Object.entries(a.Parameters).map(([e, t]) =&amp;gt; e + (t ? &#34;&#34; : &#34;cf&#34;));&#xA;      return new i.ExpConfig(a.Parameters, s.AssignmentContext, c.join(&#34;;&#34;));&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ëøô‰∏™Â∞±ÊòØÊãâÂèñ‰∫ÜabÂÆûÈ™åÁöÑÂπ≥Âè∞ÔºåÂæàÂ§öÁâπÊÄßÂºÄÂÖ≥ÈÉΩÊòØÈÄöËøáÈÖçÁΩÆ‰∏ãÂèëÔºåcopilotÁöÑÁõ∏ÂÖ≥ÈÖçÁΩÆ‰πü‰∏ç‰æãÂ§ñ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Ëøô‰∫õÈÖçÁΩÆÂú®Âπ≥Âè∞Ê≤°ÊúâÊåáÂÆöÁöÑÊó∂ÂÄôÔºåÈÉΩÊòØ‰ª•ÂÆÉÁöÑÈªòËÆ§ÂÄº„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÁªèËøáÊàëÂÆûÈôÖÊäìÂåÖÔºåÂèëÁé∞ÊàëÁöÑCopilotÊèí‰ª∂ÈÖçÁΩÆÂ•ΩÂÉèÊ≤°ÊúâÁªèËøáÈÖçÁΩÆÂπ≥Âè∞ÂçïÁã¨ÊåáÂÆöÔºåÂõ†Ê≠§Êï¥‰∏™Â≠óÊÆµÂ∫îËØ•ÂèñÁöÑÈªòËÆ§ÂÄºÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;suffixPercent&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫15.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;fimSuffixLengthThreshold&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;maxPromptCompletionTokens&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫2048&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;neighboringTabsOption&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫eager&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;neighboringSnippetTypes&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫NeighboringSnippets&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;numberOfSnippets&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫4&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snippetPercent&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suffixStartMode&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫CursorTrimStart&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;tokenizerNameÔºå&lt;/code&gt; ÈªòËÆ§ÂÄº‰∏∫cushman002&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indentationMinLength&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫undefined&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;indentationMaxLength&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫undefined&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cursorContextFix&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫false&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ëøô‰∫õ‰ºö‰Ωú‰∏∫PromptÁöÑÂü∫Á°ÄÈÖçÁΩÆÂ≠óÊÆµ‰º†ÁªôgetPromptÊñπÊ≥ï„ÄÇ&lt;/p&gt; &#xA;&lt;h2&gt;getPromptÊ†∏ÂøÉÈÄªËæë&lt;/h2&gt; &#xA;&lt;h3&gt;‰∏Ä‰∫õÈ¢ùÂ§ñÁöÑÈÖçÁΩÆÂ≠óÊÆµ&lt;/h3&gt; &#xA;&lt;p&gt;Âú®getPromptÈÄªËæëÈáåÔºåÈ¶ñÂÖàÊâ©ÂÖÖ‰∫Ü‰∏ÄÁ≥ªÂàóÈÖçÁΩÆÂ≠óÊÆµÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;languageMarker&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫Top&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pathMarker&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫Top&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;localImportContext&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫Declarations&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;snippetPosition&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫TopOfText&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lineEnding&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫ConvertToUnix&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suffixMatchThreshold&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫0&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;suffixMatchCriteria&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫&lt;code&gt;Levenshtein&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cursorSnippetsPickingStrategy&lt;/code&gt;ÔºåÈªòËÆ§ÂÄº‰∏∫&lt;code&gt;CursorJaccard&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;promptÁöÑÁªÑÊàê&lt;/h3&gt; &#xA;&lt;p&gt;Âú®Copilot‰∏≠ÔºåpromptÊòØÁî±Â§öÁßçÁ±ªÂûãÁªÑÂêàËÄåÊàêÔºåÂèØ‰ª•Âú®PromptElementKind‰∏≠ÊâæÂà∞Ôºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;BeforeCursor&lt;/code&gt;ÔºåÊòØÂÖâÊ†áÂâçÁöÑÂÜÖÂÆπ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AfterCursor&lt;/code&gt;ÔºåÊòØÂÖâÊ†áÂêéÁöÑÂÜÖÂÆπ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SimilarFile&lt;/code&gt;Ôºå‰∏éÂΩìÂâçÊñá‰ª∂Áõ∏‰ººÂ∫¶ËæÉÈ´òÁöÑÂÜÖÂÆπ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ImportedFile&lt;/code&gt;Ôºöimport‰æùËµñ&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;LanguageMarkder&lt;/code&gt;ÔºåÊñá‰ª∂ÂºÄÂ§¥ÁöÑÊ†áËÆ∞ËØ≠Ê≥ï&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;PathMarker&lt;/code&gt;ÔºåÊñá‰ª∂ÁöÑË∑ØÂæÑ‰ø°ÊÅØ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PromptElementÁöÑ‰ºòÂÖàÁ∫ß&lt;/h3&gt; &#xA;&lt;p&gt;CopilotÂÆûÁé∞‰∫Ü‰∏Ä‰∏™‰ºòÂÖàÁ∫ßÁöÑËæÖÂä©Á±ªÔºåÁî®Êù•ËÆæÁΩÆ‰∏çÂêåÁ±ªÂûãÁöÑElement‰ºòÂÖàÁ∫ßÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class Priorities {&#xA;  constructor() {&#xA;    this.registeredPriorities = [0, 1];&#xA;  }&#xA;  register(e) {&#xA;    if (e &amp;gt; Priorities.TOP || e &amp;lt; Priorities.BOTTOM) throw new Error(&#34;Priority must be between 0 and 1&#34;);&#xA;    this.registeredPriorities.push(e);&#xA;    return e;&#xA;  }&#xA;  justAbove(...e) {&#xA;    const t = Math.max(...e);&#xA;    const n = Math.min(...this.registeredPriorities.filter(e =&amp;gt; e &amp;gt; t));&#xA;    return this.register((n + t) / 2);&#xA;  }&#xA;  justBelow(...e) {&#xA;    const t = Math.min(...e);&#xA;    const n = Math.max(...this.registeredPriorities.filter(e =&amp;gt; e &amp;lt; t));&#xA;    return this.register((n + t) / 2);&#xA;  }&#xA;  between(e, t) {&#xA;    if (this.registeredPriorities.some(n =&amp;gt; n &amp;gt; e &amp;amp;&amp;amp; n &amp;lt; t) || !this.registeredPriorities.includes(e) || !this.registeredPriorities.includes(t)) throw new Error(&#34;Priorities must be adjacent in the list of priorities&#34;);&#xA;    return this.register((e + t) / 2);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂèØ‰ª•ÁúãÂà∞justAboveÂíåjustBelowÔºåÂ∞±ÊòØÁîüÊàê‰∏Ä‰∏™ÊØî‰º†ÂÖ•‰ºòÂÖàÁ∫ßÁï•È´òÊàñÁï•‰ΩéÁöÑ‰ºòÂÖàÁ∫ßÔºå‰øùËØÅËøô‰∏™‰ºòÂÖàÁ∫ßÂú®ÁõÆÂâçÁöÑÊÉÖÂÜµ‰∏ãÂè™ÊØî‰º†ÂÖ•ÁöÑ‰ºòÂÖàÁ∫ßÈ´òÊàñ‰Ωé‰∏ÄÁÇπ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Âú®Copilot‰∏≠Ôºå‰∏çÂêåÁ±ªÂûãÁöÑ‰ºòÂÖàÁ∫ßÊòØËøôÊ†∑‰∫ßÁîüÁöÑÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const beforeCursorPriority = priorities.justBelow(p.Priorities.TOP);&#xA;  const languageMarkerPriority =&#xA;    promptOpts.languageMarker === h.Always&#xA;      ? priorities.justBelow(p.Priorities.TOP)&#xA;      : priorities.justBelow(beforeCursorPriority);&#xA;  const pathMarkerPriority =&#xA;    promptOpts.pathMarker === f.Always ? priorities.justBelow(p.Priorities.TOP) : priorities.justBelow(beforeCursorPriority);&#xA;  const importedFilePriority = priorities.justBelow(beforeCursorPriority);&#xA;  const lowSnippetPriority = priorities.justBelow(importedFilePriority);&#xA;  const highSnippetPriority = priorities.justAbove(beforeCursorPriority);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËøôÈáåÂèØ‰ª•ÁÆÄÂçïÊé®Êñ≠‰∏Ä‰∏ãÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeCursorPriority&lt;/code&gt;Ôºå‰∏∫0.5&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;languageMarkerPriority&lt;/code&gt;Ôºå‰∏∫0.25&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pathMarkderPriority&lt;/code&gt;Ôºå‰∏∫0.375&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;importedFilePriority&lt;/code&gt;Ôºå‰∏∫0.4375&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lowSnippetPriority&lt;/code&gt;Ôºå‰∏∫0.40625&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;highSnippetPriority&lt;/code&gt;Ôºå‰∏∫0.75&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ÊâÄ‰ª•Âú®ÈªòËÆ§ÁöÑÂú∫ÊôØ‰∏ãÔºåËøôÂá†ÁßçÁ±ªÂûãÁöÑ‰ºòÂÖàÁ∫ßÊéíÂ∫è‰∏∫Ôºö&lt;code&gt;highSnippetPriority&lt;/code&gt; &amp;gt; &lt;code&gt;beforeCursorPriority&lt;/code&gt; &amp;gt; &lt;code&gt;importedFilePriority&lt;/code&gt; &amp;gt; &lt;code&gt;lowSnippetPriority&lt;/code&gt; &amp;gt; &lt;code&gt;pathMarkderPriority&lt;/code&gt; &amp;gt; &lt;code&gt;languageMarkerPriority&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;PromptElement‰∏ªË¶ÅÂÜÖÂÆπ&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;languageMarkerÂíåpathMarker&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;languageMarkerÂíåpathMarkerÊòØÊúÄÂÖàË¢´ÊîæËøõpromptWishList‰∏≠ÁöÑÔºåÁªèËøáÂâçÈù¢ÁöÑÂàÜÊûêÔºåÊàë‰ª¨Áü•ÈÅìÂú®ÈÖçÁΩÆ‰∏≠ÔºålanguageMarkerÂíåpathMarkerÈÉΩÊòØÊúâÈªòËÆ§ÂÄºÁöÑÔºåÂõ†Ê≠§‰∏ãÈù¢ÁöÑÂà§Êñ≠ÂàÜÊîØ‰∏ÄÂÆö‰ºöËµ∞Âà∞Ôºö&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;  if (promptOpts.languageMarker !== h.NoMarker) {&#xA;      const e = newLineEnded(r.getLanguageMarker(resourceInfo));&#xA;      languageMarkerId = promptWishlist.append(e, p.PromptElementKind.LanguageMarker, languageMarkerPriority);&#xA;    }&#xA;    if (promptOpts.pathMarker !== f.NoMarker) {&#xA;      const e = newLineEnded(r.getPathMarker(resourceInfo));&#xA;      if (e.length &amp;gt; 0) {&#xA;        pathMarkerId = promptWishlist.append(e, p.PromptElementKind.PathMarker, pathMarkerPriority);&#xA;      }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Ëøô‰∏§‰∏™ÂáΩÊï∞ÂÆûÁé∞‰πüÊØîËæÉÁÆÄÂçïÔºåÊàë‰ª¨ÂÖàÊù•Áúã‰∏Ä‰∏ãgetLanguageMarkerÔºö&#xA;&#xA;```jsx&#xA;exports.getLanguageMarker = function (e) {&#xA;  const {&#xA;    languageId: t&#xA;  } = e;&#xA;  return -1 !== n.indexOf(t) || hasLanguageMarker(e) ? &#34;&#34; : t in r ? r[t] : comment(`Language: ${t}`, t);&#xA;};&#xA;```&#xA;&#xA;ËøôÈáåÈ¶ñÂÖàÁ°ÆËÆ§‰∫ÜlanguageIdÔºå‰∏çÂú®ignoreListÂΩì‰∏≠ÔºåÂú®copilot‰∏≠ÔºåÊúâ‰∏§ÁßçËØ≠Ë®ÄÊòØË¢´ÊéíÈô§Âú®Â§ñÁöÑÔºö&#xA;&#xA;```jsx&#xA;const n = [&#34;php&#34;, &#34;plaintext&#34;];&#xA;```&#xA;&#xA;ÂÖ∂Ê¨°ÂÜçÁúã‰∏Ä‰∏ãËØ≠Ë®ÄÊú¨Ë∫´ÊòØÂê¶ÊúâÊ†áËÆ∞ËØ≠Ê≥ïÔºåÂú®Ëøô‰∏™Map‰∏≠ÔºàHTML„ÄÅPython„ÄÅRuby„ÄÅShell„ÄÅYAMLÔºâÔºö&#xA;&#xA;```jsx&#xA;const r = {&#xA;  html: &#34;&amp;lt;!DOCTYPE html&amp;gt;&#34;,&#xA;  python: &#34;#!/usr/bin/env python3&#34;,&#xA;  ruby: &#34;#!/usr/bin/env ruby&#34;,&#xA;  shellscript: &#34;#!/bin/sh&#34;,&#xA;  yaml: &#34;# YAML data&#34;&#xA;};&#xA;```&#xA;&#xA;ÂÖ∂‰ΩôÁöÑÊÉÖÂÜµÂ∞±ËøîÂõû‰∏ÄË°åÊ≥®ÈáäÔºåÁ±ª‰ººËøôÊ†∑Ôºö&#xA;&#xA;```jsx&#xA;// Language: ${languageId}&#xA;```&#xA;&#xA;getPathMarkerÈÄªËæëÊõ¥ÁÆÄÂçï‰∫õÔºåÂè™ÊòØ‰∏ÄË°åÊ≥®ÈáäÔºåÊ†áÊòéÊñá‰ª∂Ë∑ØÂæÑÔºàÊöÇÊó∂Êêû‰∏çÊ∏ÖÊ•öËøô‰∏™‰ø°ÊÅØÁªôÊ®°ÂûãÊúâ‰ªÄ‰πàÁî®ÔºåÂèØËÉΩË∑ØÂæÑÈáåÈù¢ÂåÖÂê´‰∫ÜÁõÆÂΩïÁªìÊûÑ‰ø°ÊÅØÂíåÊñá‰ª∂ÂêçÂ∏ÆÂä©Ê®°ÂûãÊõ¥Â•ΩËøõË°åÊé®Êñ≠ÔºüÔºâÔºö&#xA;&#xA;```jsx&#xA;exports.getPathMarker = function (e) {&#xA;  return e.relativePath ? comment(`Path: ${e.relativePath}`, e.languageId) : &#34;&#34;;&#xA;};&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;localImportContext&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;localImportContextÁöÑÂÆûÁé∞Ë¶ÅÂ§çÊùÇ‰∏ÄÁÇπÔºåÈÄöËøá‰∏äÈù¢ÁöÑÈÖçÁΩÆÊàë‰ª¨ÂèØ‰ª•ÁúãÂà∞Ëøô‰∏™‰πüÊòØÈªòËÆ§ÊúâÂÄºÁöÑÔºå‰ºöËøõÂà∞‰∏ãÈù¢Ëøô‰∏™ÂàÜÊîØÂΩì‰∏≠Ôºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;if (promptOpts.localImportContext !== y.NoContext)&#xA;    for (const e of await i.extractLocalImportContext(resourceInfo, promptOpts.fs))&#xA;      promptWishlist.append(newLineEnded(e), p.PromptElementKind.ImportedFile, importedFilePriority);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;extractLocalImportContextÊòØ‰∏Ä‰∏™ÂºÇÊ≠•ÂáΩÊï∞ÔºåËÆ©Êàë‰ª¨Áúã‰∏Ä‰∏ãËøôÈáåÈù¢ÁöÑÂÆûÁé∞Ôºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const reg = /^\s*import\s*(type|)\s*\{[^}]*\}\s*from\s*[&#39;&#34;]\./gm;&#xA;  exports.extractLocalImportContext = async function (resourceInfo, fs) {&#xA;    let {&#xA;      source: source,&#xA;      uri: uri,&#xA;      languageId: languageId&#xA;    } = resourceInfo;&#xA;    return fs &amp;amp;&amp;amp; &#34;typescript&#34; === languageId ? async function (source, uri, fs) {&#xA;      let language = &#34;typescript&#34;;&#xA;      let result = [];&#xA;      const importEndIndex = function (source) {&#xA;        let match;&#xA;        let lastIndex = -1;&#xA;        reg.lastIndex = -1;&#xA;        do {&#xA;            match = reg.exec(source);&#xA;          if (match) {&#xA;            lastIndex = reg.lastIndex + match.length;&#xA;          }&#xA;        } while (match);&#xA;        if (-1 === lastIndex) return -1;&#xA;        const nextNewLine = source.indexOf(&#34;\n&#34;, lastIndex);&#xA;        return -1 !== nextNewLine ? nextNewLine : source.length;&#xA;      }(source);&#xA;      if (-1 === importEndIndex) return result;&#xA;      source = source.substring(0, importEndIndex);&#xA;      let ast = await i.parseTreeSitter(language, source);&#xA;      try {&#xA;        for (let node of function (node) {&#xA;          let t = [];&#xA;          for (let childNode of node.namedChildren) if (&#34;import_statement&#34; === childNode.type) {&#xA;            t.push(childNode);&#xA;          }&#xA;          return t;&#xA;        }(ast.rootNode)) {&#xA;          let filePath = getTSFilePath(uri, node);&#xA;          if (!filePath) continue;&#xA;          let namedImports = parseNamedImport(node);&#xA;          if (0 === namedImports.length) continue;&#xA;          let exports = await getExports(filePath, language, fs);&#xA;          for (let e of namedImports) if (exports.has(e.name)) {&#xA;            result.push(...exports.get(e.name));&#xA;          }&#xA;        }&#xA;      } finally {&#xA;        ast.delete();&#xA;      }&#xA;      return result;&#xA;    }(source, uri, fs) : [];&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;È¶ñÂÖàÊàë‰ª¨ÂèØ‰ª•ÂÖ≥Ê≥®Âà∞ÁöÑÊòØÔºåËøô‰∏™ÂáΩÊï∞ÂÖàÂà§Êñ≠‰∫ÜTypescriptÁöÑËØ≠Ë®ÄÔºå‰πüÂ∞±ÊÑèÂë≥ÁùÄÂΩìÂâçÁâàÊú¨ÁöÑCopilotÔºåÂè™ÂØπtsÊñá‰ª∂ÁöÑimport‰æùËµñÂÅö‰∫ÜÂ§ÑÁêÜ„ÄÇ&lt;/p&gt; &lt;p&gt;Ëøô‰∏™ÂáΩÊï∞‰πãÊâÄ‰ª•ÊòØÂºÇÊ≠•ÁöÑÔºåÂ∞±ÊòØËøôÈáåË¶ÅÊãøÂà∞importËØ≠Âè•ÁöÑËØ≠Ê≥ïÊ†ëÔºåËøô‰∏™ËøáÁ®ãÊØîËæÉÂ§çÊùÇÔºåcopilotÊòØ‰ΩøÁî®‰∫ÜwasmÁöÑÊñπÂºèÔºåÈÄöËøátree-sitterÊù•Ëß£ÊûêËØ≠Ê≥ïÊ†ëÁöÑÔºåËøô‰∏™ËøáÁ®ãÊòØÂºÇÊ≠•ÁöÑ„ÄÇ&lt;/p&gt; &lt;p&gt;ÊúÄÂêéÔºåcopilotÊèêÂèñÂá∫ÊâÄÊúâÁöÑimportÔºåÂπ∂‰∏îËøîÂõû‰∫ÜÊâÄÊúânamed importÂØπÂ∫îÁöÑexport‰ª£Á†ÅÔºå‰πüÂ∞±ÊòØÊúÄÁªàÁ¥¢ÂºïÂà∞‰∫Ü‰æùËµñÊñá‰ª∂ÔºåÂ∞ÜÁî®Âà∞ÁöÑexportÈÉΩ‰Ωú‰∏∫‰∏ä‰∏ãÊñáextractÂá∫Êù•„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;snippets&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;snippetsÁöÑÂ§ÑÁêÜÊòØÊØîËæÉÂ§çÊùÇÁöÑÔºåÂú®Copilot‰∏≠ÔºåÈ¶ñÂÖàÊãøÂà∞‰∫Ü‰∏Ä‰∏™snippetsÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const snippets = [&#xA;    ...retrievalSnippets,&#xA;    ...(promptOpts.neighboringTabs === a.NeighboringTabsOption.None || 0 === neighborDocs.length&#xA;      ? []&#xA;      : await a.getNeighborSnippets(&#xA;          resourceInfo,&#xA;          neighborDocs,&#xA;          promptOpts.neighboringSnippetTypes,&#xA;          promptOpts.neighboringTabs,&#xA;          promptOpts.cursorContextFix,&#xA;          promptOpts.indentationMinLength,&#xA;          promptOpts.indentationMaxLength,&#xA;          promptOpts.snippetSelection,&#xA;          promptOpts.snippetSelectionK,&#xA;          lineCursorHistory,&#xA;          promptOpts.cursorSnippetsPickingStrategy&#xA;        )),&#xA;  ];&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Âú®ÈªòËÆ§ÁöÑÂú∫ÊôØ‰∏ãÔºå&lt;code&gt;retrievalSnippets&lt;/code&gt;ÊòØÁ©∫ÁöÑÔºåËÄå&lt;code&gt;neighboringTabs&lt;/code&gt;Âú®Êàë‰ª¨ÂâçÈù¢ÁöÑÂàÜÊûê‰∏≠ÊòØ&lt;code&gt;eager&lt;/code&gt;ÔºåÊâÄ‰ª•‰ºöÈÄöËøá&lt;code&gt;getNeighborSnippets&lt;/code&gt;ÂéªÊãøÂà∞Ëøô‰∏™Êï∞ÁªÑ„ÄÇ&lt;/p&gt; &lt;p&gt;Ê≥®ÊÑèËøôÈáå‰º†ÂÖ•‰∫Ü&lt;code&gt;neighborDocs&lt;/code&gt;ÔºåËøô‰∏™ÊòØÂú®extractÁöÑÂÖ•Âè£Â∞±‰º†ËøáÊù•ÁöÑÔºåÂØπÂ∫îÁöÑ‰ª£Á†ÅÊòØÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;let neighborDocs = [];&#xA;      let neighborSource = new Map();&#xA;      try {&#xA;        const t = await u.NeighborSource.getNeighborFiles(ctx, uri, repoUserData);&#xA;        neighborDocs = t.docs;&#xA;        neighborSource = t.neighborSource;&#xA;      } catch (t) {&#xA;        telemetry.telemetryException(ctx, t, &#34;prompt.getPromptForSource.exception&#34;);&#xA;      }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Âú®ÈªòËÆ§ÁöÑÊÉÖÂÜµ‰∏ãÔºåËøôÈáåÊãøÂà∞ÁöÑfileTypeÊòØ&lt;code&gt;OpenTabs&lt;/code&gt;ÔºåÊâÄ‰ª•‰ºöÈªòËÆ§ÈÄöËøáVSCodeÊãøÂà∞ÁõÆÂâçÊâìÂºÄÁöÑtab‰∏≠ÔºåÂåÖÂê´ÂêåÁ±ªÂûãËØ≠Ë®ÄÊñá‰ª∂ÁöÑÊâÄÊúâÂÜÖÂÆπ(ÊåâËÆøÈóÆÊó∂Èó¥ÊéíÂ∫è)ÔºåÂØπÂ∫îÁöÑ‰ª£Á†ÅÂ¶Ç‰∏ãÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;exports.OpenTabFiles = class {&#xA;  constructor(e, t) {&#xA;    this.docManager = e;&#xA;    this.neighboringLanguageType = t;&#xA;  }&#xA;  async truncateDocs(e, t, n, r) {&#xA;    const o = [];&#xA;    let s = 0;&#xA;    for (const a of e) if (!(s + a.getText().length &amp;gt; i.NeighborSource.MAX_NEIGHBOR_AGGREGATE_LENGTH) &amp;amp;&amp;amp; (&#34;file&#34; == a.uri.scheme &amp;amp;&amp;amp; a.fileName !== t &amp;amp;&amp;amp; i.considerNeighborFile(n, a.languageId, this.neighboringLanguageType) &amp;amp;&amp;amp; (o.push({&#xA;      uri: a.uri.toString(),&#xA;      relativePath: await this.docManager.getRelativePath(a),&#xA;      languageId: a.languageId,&#xA;      source: a.getText()&#xA;    }), s += a.getText().length), o.length &amp;gt;= r)) break;&#xA;    return o;&#xA;  }&#xA;  async getNeighborFiles(e, t, n, o) {&#xA;    let s = [];&#xA;    const a = new Map();&#xA;    s = await this.truncateDocs(utils2.sortByAccessTimes(this.docManager.textDocuments), e.fsPath, n, o);&#xA;    a.set(i.NeighboringFileType.OpenTabs, s.map(e =&amp;gt; e.uri));&#xA;    return {&#xA;      docs: s,&#xA;      neighborSource: a&#xA;    };&#xA;  }&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Êé•ÁùÄÊàë‰ª¨Êù•Áúã‰∏Ä‰∏ã&lt;code&gt;getNeighborSnippets&lt;/code&gt;ÁöÑÂÆûÁé∞Ôºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;exports.getNeighborSnippets = async function (&#xA;  resourceInfo,&#xA;  neighborDocs,&#xA;  neighboringSnippetTypes,&#xA;  neighboringTabs,&#xA;  cursorContextFix,&#xA;  indentationMinLength,&#xA;  indentationMaxLength,&#xA;  snippetSelection,&#xA;  snippetSelectionK,&#xA;  lineCursorHistory,&#xA;  cursorSnippetsPickingStrategy&#xA;) {&#xA;  const options = {&#xA;    ...exports.neighborOptionToSelection[neighboringTabs],&#xA;  };&#xA;  const y = (function (&#xA;    resourceInfo,&#xA;    neighboringSnippetTypes,&#xA;    options,&#xA;    cursorContextFix,&#xA;    indentationMinLength,&#xA;    indentationMaxLength,&#xA;    lineCursorHistory,&#xA;    cursorSnippetsPickingStrategy = i.CursorSnippetsPickingStrategy&#xA;      .CursorJaccard&#xA;  ) {&#xA;    let d;&#xA;    if (neighboringSnippetTypes === s.NeighboringSnippets) {&#xA;      d =&#xA;        void 0 !== indentationMinLength &amp;amp;&amp;amp; void 0 !== indentationMaxLength&#xA;          ? o.IndentationBasedJaccardMatcher.FACTORY(&#xA;              indentationMinLength,&#xA;              indentationMaxLength,&#xA;              cursorContextFix&#xA;            )&#xA;          : o.FixedWindowSizeJaccardMatcher.FACTORY(&#xA;              options.snippetLength,&#xA;              cursorContextFix&#xA;            );&#xA;    } else {&#xA;      if (neighboringSnippetTypes === s.NeighboringFunctions) {&#xA;        d = o.FunctionJaccardMatcher.FACTORY(&#xA;          options.snippetLength,&#xA;          cursorContextFix,&#xA;          indentationMinLength,&#xA;          indentationMaxLength&#xA;        );&#xA;      } else {&#xA;        r.ok(&#xA;          void 0 !== lineCursorHistory,&#xA;          &#34;lineCursorHistory should not be undefined&#34;&#xA;        );&#xA;        d = i.CursorHistoryMatcher.FACTORY(&#xA;          options.snippetLength,&#xA;          lineCursorHistory,&#xA;          cursorSnippetsPickingStrategy,&#xA;          cursorContextFix&#xA;        );&#xA;      }&#xA;    }&#xA;    return d.to(resourceInfo);&#xA;  })(&#xA;    resourceInfo,&#xA;    neighboringSnippetTypes,&#xA;    options,&#xA;    cursorContextFix,&#xA;    indentationMinLength,&#xA;    indentationMaxLength,&#xA;    lineCursorHistory,&#xA;    cursorSnippetsPickingStrategy&#xA;  );&#xA;  return 0 === options.numberOfSnippets&#xA;    ? []&#xA;    : (&#xA;        await neighborDocs&#xA;          .filter((e) =&amp;gt; e.source.length &amp;lt; 1e4 &amp;amp;&amp;amp; e.source.length &amp;gt; 0)&#xA;          .slice(0, 20)&#xA;          .reduce(&#xA;            async (e, t) =&amp;gt;&#xA;              (&#xA;                await e&#xA;              ).concat(&#xA;                (&#xA;                  await y.findMatches(t, snippetSelection, snippetSelectionK)&#xA;                ).map((e) =&amp;gt; ({&#xA;                  relativePath: t.relativePath,&#xA;                  ...e,&#xA;                }))&#xA;              ),&#xA;            Promise.resolve([])&#xA;          )&#xA;      )&#xA;        .filter((e) =&amp;gt; e.score &amp;amp;&amp;amp; e.snippet &amp;amp;&amp;amp; e.score &amp;gt; options.threshold)&#xA;        .sort((e, t) =&amp;gt; e.score - t.score)&#xA;        .slice(-options.numberOfSnippets);&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Âú®Ëøô‰∏™ÂÆûÁé∞‰∏≠ÔºåÊàë‰ª¨ÂèØ‰ª•ÂæóÂà∞‰ª•‰∏ãÂÖ≥ÈîÆ‰ø°ÊÅØÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;neighboringSnippetTypesÈªòËÆ§‰∏∫NeighboringSnippetsÔºåÊâÄ‰ª•‰ºöËµ∞Âà∞&lt;code&gt;FixedWindowSizeJaccardMatcher&lt;/code&gt;ÁöÑÈÄªËæëÈáå&lt;/li&gt; &#xA;   &lt;li&gt;ËøîÂõûÂÄºÊòØÊ†πÊçÆneighborDocsÁöÑÂÜÖÂÆπÔºåËøáÊª§ÊéâËøáÂ∞èÂíåËøáÂ§ßÊñá‰ª∂ÔºåÁªèËøáfindMatchersÊãøÂà∞ÁöÑÁªìÊûú&lt;/li&gt; &#xA;   &lt;li&gt;ÊúÄÂêéËøáÊª§ÊéâscoreËæÉ‰ΩéÁöÑÔºå‰∏çËøáthresholdÈªòËÆ§‰∏∫0ÔºåÊâÄ‰ª•ËøôÈáåÂ∫îËØ•‰øùÁïô‰∫ÜÊâÄÊúâÁöÑÂÜÖÂÆπ&lt;/li&gt; &#xA;   &lt;li&gt;Ê†πÊçÆscoreËøõË°åÊéíÂ∫èÔºåÈÄâÂèñËæÉÂ§ßÁöÑ4Êù°ÔºànumberOfSnippetsÈªòËÆ§‰∏∫4Ôºâ&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Á¥ßÊé•ÁùÄÊàë‰ª¨Â∞±Êù•ÁúãÁúã&lt;code&gt;FixedWindowSizeJaccardMatcher&lt;/code&gt;ÁöÑÈÄªËæëÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class FixedWindowSizeJaccardMatcher extends i.WindowedMatcher {&#xA;    constructor(resourceInfo, snippetLength, cursorContextFix) {&#xA;      super(resourceInfo, cursorContextFix);&#xA;      this.windowLength = snippetLength;&#xA;      this.cursorContextFix = cursorContextFix;&#xA;    }&#xA;    id() {&#xA;      return &#34;fixed:&#34; + this.windowLength;&#xA;    }&#xA;    getWindowsDelineations(e) {&#xA;      return o.getBasicWindowDelineations(this.windowLength, e);&#xA;    }&#xA;    trimDocument(e) {&#xA;      return e.source.slice(0, e.offset).split(&#34;\n&#34;).slice(-this.windowLength).join(&#34;\n&#34;);&#xA;    }&#xA;    _getCursorContextInfo(e) {&#xA;      return r.getCursorContext(e, {&#xA;        maxLineCount: this.windowLength,&#xA;        cursorContextFix: this.cursorContextFix&#xA;      });&#xA;    }&#xA;    similarityScore(e, t) {&#xA;      return computeScore(e, t);&#xA;    }&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ËøôÈáåÁöÑ&lt;code&gt;snippetLength&lt;/code&gt; Âú®eagerÁöÑÊÉÖÂÜµ‰∏ãÈªòËÆ§‰∏∫60Ôºå‰πüÂ∞±ÊÑèÂë≥ÁùÄsnippetÊúÄÂ§ö‰∏çË∂ÖËøá60Ë°å„ÄÇ&lt;/p&gt; &lt;p&gt;Ëøô‰∏™Á±ªÁªßÊâø‰∫Ü&lt;code&gt;WindowedMatcher&lt;/code&gt;ÔºåfindMatchesÂ∞±Âú®WindowedMatcherÈáåÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;async findMatches(e, t = i.SnippetSelectionOption.BestMatch, n) {&#xA;      if (t == i.SnippetSelectionOption.BestMatch) {&#xA;        const t = await this.findBestMatch(e);&#xA;        return t ? [t] : [];&#xA;      }&#xA;      return t == i.SnippetSelectionOption.TopK &amp;amp;&amp;amp; (await this.findTopKMatches(e, n)) || [];&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Âú®ËøôÈáåÁ¨¨‰∫å‰∏™ÂèÇÊï∞ÂÖ∂ÂÆûÈªòËÆ§ÊòØundefinedÔºåÊâÄ‰ª•ÈªòËÆ§Ëµ∞Âà∞BestMatchÁöÑÂàÜÊîØÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;async findBestMatch(e) {&#xA;      if (0 === e.source.length || 0 === this.referenceTokens.size) return;&#xA;      const t = e.source.split(&#34;\n&#34;);&#xA;      const n = this.retrieveAllSnippets(e, s.Descending);&#xA;      return 0 !== n.length &amp;amp;&amp;amp; 0 !== n[0].score ? {&#xA;        snippet: t.slice(n[0].startLine, n[0].endLine).join(&#34;\n&#34;),&#xA;        semantics: o.SnippetSemantics.Snippet,&#xA;        provider: o.SnippetProvider.NeighboringTabs,&#xA;        ...n[0]&#xA;      } : void 0;&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ÂèØ‰ª•ÁúãÂà∞ÊâÄË∞ìBestMatchÔºåÂ∞±ÊòØÂèñÂá∫&lt;code&gt;retrieveAllSnippets&lt;/code&gt; ÁöÑÁ¨¨0Êù°ÁªìÊûú‰Ωú‰∏∫snippetËøîÂõû„ÄÇ&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;retrieveAllSnippets(e, t = s.Descending) {&#xA;      const n = [];&#xA;      if (0 === e.source.length || 0 === this.referenceTokens.size) return n;&#xA;      const sourceArr = e.source.split(&#34;\n&#34;);&#xA;      const key = this.id() + &#34;:&#34; + e.source;&#xA;      const result = c.get(key) ?? [];&#xA;      const noCache = 0 == result.length;&#xA;      const tokens = noCache ? sourceArr.map(this.tokenizer.tokenize, this.tokenizer) : [];&#xA;      for (const [index, [startLine, endLine]] of this.getWindowsDelineations(sourceArr).entries()) {&#xA;        if (noCache) {&#xA;          const e = new Set();&#xA;          tokens.slice(startLine, endLine).forEach(t =&amp;gt; t.forEach(e.add, e));&#xA;          result.push(e);&#xA;        }&#xA;        const r = result[index];&#xA;        const s = this.similarityScore(r, this.referenceTokens);&#xA;        n.push({&#xA;          score: s,&#xA;          startLine: startLine,&#xA;          endLine: endLine&#xA;        });&#xA;      }&#xA;      if (noCache) {&#xA;        c.put(key, result);&#xA;      }&#xA;      return this.sortScoredSnippets(n, t);&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ËøôÊÆµ‰ª£Á†ÅÁöÑÊ†∏ÂøÉÊòØÊ†πÊçÆÁ™óÂè£ËÆ°ÁÆóÂá∫‰∏çÂêåÁöÑ‰ª£Á†ÅÁâáÊÆµ‰∏éÂΩìÂâçÊñá‰ª∂ÁöÑÁõ∏‰ººÂ∫¶ÔºåÂπ∂ËøîÂõûÊéíÂ∫èÂêéÁöÑÁâáÊÆµÂàóË°®„ÄÇ&lt;/p&gt; &lt;p&gt;È¶ñÂÖàËøôÈáåÂÅö‰∫Ü‰∏™ÁºìÂ≠òÂ§ÑÁêÜÔºåÁî®Êù•ÁºìÂ≠òÂ∑≤ÁªèËÆ°ÁÆóËøáÁõ∏‰ººÂ∫¶ÁöÑ‰ª£Á†ÅÔºõ&lt;/p&gt; &lt;p&gt;ÁÑ∂ÂêéÊàë‰ª¨ÈáçÁÇπÂÖ≥Ê≥®‰∏ãËøôÈáåÁöÑÂá†‰∏™ÈÄªËæëÔºö&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;ÁªèËøátokenizeËé∑ÂèñÂà∞ÂΩìÂâç‰ª£Á†ÅÁâáÊÆµÊØè‰∏ÄË°åÁöÑtoken&lt;/li&gt; &#xA;   &lt;li&gt;ÈÄöËøágetWindowsDelineationsÂ∞Ü‰ª£Á†ÅÂàÜÂâ≤Êàê‰∏çÂêåÁöÑÂ∞èÁ™óÂè£ÔºàÊ≠•Èïø‰∏∫1Ôºâ&lt;/li&gt; &#xA;   &lt;li&gt;ÊØè‰∏™Á™óÂè£ÁöÑtokenÂíåÂΩìÂâçÊñá‰ª∂ÔºàreferenceDocÔºâÁöÑtokenÂÅö‰∏ÄÊ¨°Áõ∏‰ººÂ∫¶ËÆ°ÁÆóÔºà&lt;code&gt;Jaccard&lt;/code&gt;Áõ∏‰ººÂ∫¶Ôºâ&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;Ëøô‰∏â‰∏™ÁÇπÈÉΩÈùûÂ∏∏ÂÖ≥ÈîÆÔºåÊàë‰ª¨Â±ïÂºÄÊù•ÂàÜÊûê‰∏ãÔºö&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;tokenizeËÆ°ÁÆóÊØè‰∏ÄË°åÁöÑtoken&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const p = new Set([&#34;we&#34;, &#34;our&#34;, &#34;you&#34;, &#34;it&#34;, &#34;its&#34;, &#34;they&#34;, &#34;them&#34;, &#34;their&#34;, &#34;this&#34;, &#34;that&#34;, &#34;these&#34;, &#34;those&#34;, &#34;is&#34;, &#34;are&#34;, &#34;was&#34;, &#34;were&#34;, &#34;be&#34;, &#34;been&#34;, &#34;being&#34;, &#34;have&#34;, &#34;has&#34;, &#34;had&#34;, &#34;having&#34;, &#34;do&#34;, &#34;does&#34;, &#34;did&#34;, &#34;doing&#34;, &#34;can&#34;, &#34;don&#34;, &#34;t&#34;, &#34;s&#34;, &#34;will&#34;, &#34;would&#34;, &#34;should&#34;, &#34;what&#34;, &#34;which&#34;, &#34;who&#34;, &#34;when&#34;, &#34;where&#34;, &#34;why&#34;, &#34;how&#34;, &#34;a&#34;, &#34;an&#34;, &#34;the&#34;, &#34;and&#34;, &#34;or&#34;, &#34;not&#34;, &#34;no&#34;, &#34;but&#34;, &#34;because&#34;, &#34;as&#34;, &#34;until&#34;, &#34;again&#34;, &#34;further&#34;, &#34;then&#34;, &#34;once&#34;, &#34;here&#34;, &#34;there&#34;, &#34;all&#34;, &#34;any&#34;, &#34;both&#34;, &#34;each&#34;, &#34;few&#34;, &#34;more&#34;, &#34;most&#34;, &#34;other&#34;, &#34;some&#34;, &#34;such&#34;, &#34;above&#34;, &#34;below&#34;, &#34;to&#34;, &#34;during&#34;, &#34;before&#34;, &#34;after&#34;, &#34;of&#34;, &#34;at&#34;, &#34;by&#34;, &#34;about&#34;, &#34;between&#34;, &#34;into&#34;, &#34;through&#34;, &#34;from&#34;, &#34;up&#34;, &#34;down&#34;, &#34;in&#34;, &#34;out&#34;, &#34;on&#34;, &#34;off&#34;, &#34;over&#34;, &#34;under&#34;, &#34;only&#34;, &#34;own&#34;, &#34;same&#34;, &#34;so&#34;, &#34;than&#34;, &#34;too&#34;, &#34;very&#34;, &#34;just&#34;, &#34;now&#34;]);&#xA;const d = new Set([&#34;if&#34;, &#34;then&#34;, &#34;else&#34;, &#34;for&#34;, &#34;while&#34;, &#34;with&#34;, &#34;def&#34;, &#34;function&#34;, &#34;return&#34;, &#34;TODO&#34;, &#34;import&#34;, &#34;try&#34;, &#34;catch&#34;, &#34;raise&#34;, &#34;finally&#34;, &#34;repeat&#34;, &#34;switch&#34;, &#34;case&#34;, &#34;match&#34;, &#34;assert&#34;, &#34;continue&#34;, &#34;break&#34;, &#34;const&#34;, &#34;class&#34;, &#34;enum&#34;, &#34;struct&#34;, &#34;static&#34;, &#34;new&#34;, &#34;super&#34;, &#34;this&#34;, &#34;var&#34;, ...p]);&#xA;&#xA;tokenize(e) {&#xA;  return new Set(splitIntoWords(e).filter(e =&amp;gt; !this.stopsForLanguage.has(e)));&#xA;}&#xA;&#xA;function splitIntoWords(e) {&#xA;  return e.split(/[^a-zA-Z0-9]/).filter(e =&amp;gt; e.length &amp;gt; 0);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ÂèØ‰ª•ÁúãÂà∞Â§ÑÁêÜtokensÂÖ∂ÂÆûÂ∞±ÊòØÂàÜËØçÁöÑËøáÁ®ãÔºåÊØîÊôÆÈÄöÂçïËØçÂàÜÂâ≤Â§ö‰∫Ü‰∏ÄÊ≠•ÔºåÂ∞±ÊòØËøáÊª§Â∏∏ËßÅÁöÑÂÖ≥ÈîÆËØçÔºåËøô‰∫õÂÖ≥ÈîÆËØç‰∏çÂΩ±ÂìçÁõ∏‰ººÂ∫¶ÁöÑËÆ°ÁÆóÔºàÊØîÂ¶Çif„ÄÅforËøôÁßçÔºâ„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;getWindowsDelineationsÂàÜÂâ≤Á™óÂè£&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;exports.getBasicWindowDelineations = function (e, t) {&#xA;  const n = [];&#xA;  const r = t.length;&#xA;  if (0 == r) return [];&#xA;  if (r &amp;lt; e) return [[0, r]];&#xA;  for (let t = 0; t &amp;lt; r - e + 1; t++) n.push([t, t + e]);&#xA;  return n;&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;getWindowsDelineations&lt;/code&gt; Êú¨Ë∫´ÈÄªËæëÂπ∂‰∏çÂ§çÊùÇÔºåÂ∞±ÊòØÊ†πÊçÆ‰º†ÂÖ•ÁöÑwindowSizeËøîÂõû‰∏Ä‰∏™‰∫åÁª¥Êï∞ÁªÑÔºåËøô‰∏™‰∫åÁª¥Êï∞ÁªÑÁöÑÊØè‰∏ÄÈ°πÈÉΩÊòØ‰∏Ä‰∏™Ëµ∑ÂßãË°åÊï∞ÂíåÁªàÊ≠¢Ë°åÊï∞ÔºåÂÆÉËøîÂõûÁöÑÊòØÊ≠•Èïø‰∏∫1ÔºåÂú®Êñá‰ª∂ÈáåÈù¢windowSizeÈïøÂ∫¶ÂÜÖÁöÑÊâÄÊúâÂèØËÉΩÂå∫Èó¥„ÄÇ&lt;/p&gt; &lt;p&gt;ÂæóÂà∞Ëøô‰∫õÂå∫Èó¥ÂêéÔºå‰ºöË∑üÂΩìÂâçÁöÑÂÜÖÂÆπÔºàÂêåÊ†∑windowSizeÔºâËøõË°åÁõ∏‰ººÂ∫¶ËÆ°ÁÆóÔºåÈÄâÊã©Âá∫Áõ∏‰ººÂ∫¶ÊúÄÈ´òÁöÑÂå∫Èó¥ÂÜÖÂÆπËøîÂõûÔºåËøô‰∏™ÂÜÖÂÆπÂ∞±ÊòØÊúÄÁªàÁöÑsnippet„ÄÇ&lt;/p&gt; &lt;p&gt;ÂÖ∂‰∏≠ÔºåËé∑ÂèñÂΩìÂâçÂÜÖÂÆπÁöÑÊñπÊ≥ïÂ¶Ç‰∏ãÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;get referenceTokens() {&#xA;  if (void 0 === this._referenceTokens) {&#xA;    this._referenceTokens = this.tokenizer.tokenize(this._getCursorContextInfo(this.referenceDoc).context);&#xA;  }&#xA;  return this._referenceTokens;&#xA;}&#xA;&#xA;exports.getCursorContext = function e(doc, opts = {}) {&#xA;    const opts = function (e) {&#xA;      return {&#xA;        ...i,&#xA;        ...e&#xA;      };&#xA;    }(opts);&#xA;    const s = r.getTokenizer(opts.tokenizerName);&#xA;    &#xA;    if (void 0 === opts.maxTokenLength &amp;amp;&amp;amp; void 0 !== opts.maxLineCount) {&#xA;      const e = doc.source.slice(0, doc.offset).split(&#34;\n&#34;).slice(-opts.maxLineCount);&#xA;      const n = e.join(&#34;\n&#34;);&#xA;      return {&#xA;        context: n,&#xA;        lineCount: e.length,&#xA;        tokenLength: s.tokenLength(n),&#xA;        tokenizerName: opts.tokenizerName&#xA;      };&#xA;    }&#xA;&#x9;&#x9;// ...&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ÂèØ‰ª•ÁúãÂà∞ÔºåËøôÈáåÂèñÁöÑÊòØÂΩìÂâçÂÖâÊ†áÂâçÊâÄÊúâÂÜÖÂÆπÂú®Á™óÂè£Â§ßÂ∞èÁöÑÊà™Êñ≠ÔºåËøô‰∏™‰ºötokenÂàÜËØç‰πãÂêé‰∏éÂØπÂ∫îÁöÑÁõ∏ÂÖ≥Êñá‰ª∂tokenËøõË°åÁõ∏‰ººÂ∫¶ËÆ°ÁÆó„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Áõ∏‰ººÂ∫¶ËÆ°ÁÆóÔºà&lt;code&gt;Jaccard&lt;/code&gt;Ôºâ&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;CopilotÈÄöËøá‰∏Ä‰∏™ÈùûÂ∏∏ÁÆÄÂçïÁöÑ**&lt;code&gt;Jaccard&lt;/code&gt;** Áõ∏‰ººÂ∫¶ËÆ°ÁÆóÊñπÊ≥ïÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function computeScore(e, t) {&#xA;    const n = new Set();&#xA;    e.forEach(e =&amp;gt; {&#xA;      if (t.has(e)) {&#xA;        n.add(e);&#xA;      }&#xA;    });&#xA;    return n.size / (e.size + t.size - n.size);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ÂÆûÈôÖ‰∏äÔºåJaccardÁõ∏‰ººÂ∫¶ËÆ°ÁÆóÂÖ¨Âºè‰∏∫Ôºö&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/c038f44c-7dce-4a3a-9de8-2dc4dc518b4b.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &lt;p&gt;ËøôÊòØ‰∏Ä‰∏™ÈùûÂ∏∏ÁÆÄÂçïÁöÑÈõÜÂêàËøêÁÆóÔºåÂà©Áî®‰∫§ÈõÜÂç†ÊØîÊù•Ê±ÇÁõ∏‰ººÂ∫¶ÔºåCopilotÂà©Áî®‰∏§‰∏™ÂàÜËØçÈõÜÂêàÊù•Âø´ÈÄüËÆ°ÁÆóÊñáÊú¨Áõ∏‰ººÂ∫¶„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;ÊúÄÂêéÔºåcopilotË∞ÉÁî®‰∫ÜprocessSnippetsForWishlistÔºåÂ∞ÜsnippetÂä†ÂÖ•Âà∞wishListÂΩì‰∏≠Ôºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function $() {&#xA;    const maxSnippetLength = Math.round((promptOpts.snippetPercent / 100) * promptOpts.maxPromptLength);&#xA;    c.processSnippetsForWishlist(&#xA;      snippets,&#xA;      resourceInfo.languageId,&#xA;      tokenizer,&#xA;      promptOpts.snippetProviderOptions,&#xA;      {&#xA;        priorities: priorities,&#xA;        low: lowSnippetPriority,&#xA;        high: highSnippetPriority,&#xA;      },&#xA;      promptOpts.numberOfSnippets,&#xA;      maxSnippetLength&#xA;    ).forEach((e) =&amp;gt; {&#xA;      let t = p.PromptElementKind.SimilarFile;&#xA;      if (e.provider === c.SnippetProvider.Retrieval) {&#xA;        t = p.PromptElementKind.RetrievalSnippet;&#xA;      } else {&#xA;        if (e.provider == c.SnippetProvider.SymbolDef) {&#xA;          t = p.PromptElementKind.SymbolDefinition;&#xA;        }&#xA;      }&#xA;      promptWishlist.append(e.announcedSnippet, t, e.priority, e.tokens, e.normalizedScore);&#xA;    });&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;‰ªéÂâçÈù¢Êàë‰ª¨ÂèØ‰ª•ÂæóÁü•snippetPercentÈªòËÆ§‰∏∫0ÔºåÊâÄ‰ª•ËøôÈáåmaxSnippetLength‰πü‰∏∫0.&lt;/p&gt; &lt;p&gt;Êàë‰ª¨Ê∑±ÂÖ•Áúã‰∏Ä‰∏ãprocessSnippetsForWishListÁöÑÂÆûÁé∞Ôºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;exports.processSnippetsForWishlist = function (snippets, languageId, tokenizer, snippetProviderOptions, priorities, numberOfSnippets, maxSnippetLength) {&#xA;    const {&#xA;      reserved: reserved,&#xA;      candidates: candidates&#xA;    } = selectSnippets(snippets, numberOfSnippets, snippetProviderOptions);&#xA;    let d = 0;&#xA;    let h = [];&#xA;    let highPriorities = priorities.high;&#xA;    let lowPriorities = priorities.low;&#xA;    function g(snippet, r) {&#xA;      const o = announceSnippet(snippet, languageId);&#xA;      const c = tokenizer.tokenLength(o);&#xA;      let l;&#xA;      if (r + c &amp;lt;= maxSnippetLength) {&#xA;        l = highPriorities;&#xA;        highPriorities = priorities.priorities.justBelow(l);&#xA;      } else {&#xA;        l = lowPriorities;&#xA;        lowPriorities = priorities.priorities.justBelow(l);&#xA;      }&#xA;      h.push({&#xA;        announcedSnippet: o,&#xA;        provider: snippet.provider,&#xA;        providerScore: snippet.providerScore,&#xA;        normalizedScore: snippet.normalizedScore,&#xA;        priority: l,&#xA;        tokens: c,&#xA;        relativePath: snippet.relativePath&#xA;      });&#xA;      return r + c;&#xA;    }&#xA;    for (const snippet of [...reserved, ...candidates]) {&#xA;      if (h.length &amp;gt;= numberOfSnippets) break;&#xA;      d = g(snippete, d);&#xA;    }&#xA;    l(h);&#xA;    h.reverse();&#xA;    return h;&#xA;  };&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ÂèØ‰ª•ÁúãÂà∞ËøôÈáåmaxSnippetLengthÂΩ±ÂìçÁöÑÊòØPriorityÔºåÂú®ËøôÈáåÈªòËÆ§ÊÉÖÂÜµ‰∏ãÂ∞±ÊòØlowPriority‰∫Ü„ÄÇ&lt;/p&gt; &lt;p&gt;ËøôÈáåÁöÑÂ§ÑÁêÜÂÖ∂ÂÆûÊú¨Ë¥®‰∏äÊòØÂØπscoreËøõË°åÊ≠£ÂàôÂåñÔºåÈáçÊéíÂ∫èÔºåÁÑ∂ÂêéËøîÂõûannouncedSnippetÔºåËøô‰∏™announceSnippetÂ∞±ÊòØÊúÄÂêéË¢´Âä†ÂÖ•Âà∞PromptÊñáÊú¨ÈáåÁöÑÂÜÖÂÆπÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function announceSnippet(e, t) {&#xA;    const n = s[e.semantics];&#xA;    let i = (e.relativePath ? `Compare this ${n} from ${e.relativePath}:` : `Compare this ${n}:`) + &#34;\n&#34; + e.snippet;&#xA;    if (i.endsWith(&#34;\n&#34;)) {&#xA;      i += &#34;\n&#34;;&#xA;    }&#xA;    return r.commentBlockAsSingles(i, t);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ÂèØ‰ª•ÁúãÂà∞ËøôÈáåÔºåÁõ∏ÂÖ≥Êñá‰ª∂ÁöÑsnippet‰ºöÂåÖË£πÂú®Ê≥®ÈáäÈáåÔºåÂπ∂Âú®Â§¥ÈÉ®Âä†‰∏ä‰∏ÄË°å&lt;code&gt;Compare this ‚Ä¶&lt;/code&gt;ÁöÑÊñáÊ°àÔºåÊèê‰æõÁªôÊ®°Âûã„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;beforeCursor&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;beforeCursorÁöÑ‰ª£Á†ÅÊØîËæÉÁÆÄÂçïÔºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;promptWishlist.appendLineForLine(source.substring(0, offset), p.PromptElementKind.BeforeCursor, beforeCursorPriority).forEach((e) =&amp;gt;&#xA;      V.push(e)&#xA;    );&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Ê≥®ÊÑèËøôÈáåÁî®‰∫ÜappendLineForLineÔºåËÄå‰∏çÊòØappendÔºåËÆ©Êàë‰ª¨Áúã‰∏Ä‰∏ãappendLineForLineÁöÑÂÆûÁé∞Ôºö&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;appendLineForLine(text, kind, priority) {&#xA;    const lineArr = (lines = this.convertLineEndings(text)).split(&#34;\n&#34;);&#xA;    for (let i = 0; i &amp;lt; lineArr.length - 1; i++) lineArr[i] += &#34;\n&#34;;&#xA;    const lines = [];&#xA;    lineArr.forEach((line) =&amp;gt; {&#xA;      if (&#34;\n&#34; === line &amp;amp;&amp;amp; lines.length &amp;gt; 0 &amp;amp;&amp;amp; !lines[lines.length - 1].endsWith(&#34;\n\n&#34;)) {&#xA;        lines[lines.length - 1] += &#34;\n&#34;;&#xA;      } else {&#xA;        lines.push(line);&#xA;      }&#xA;    });&#xA;    const result = [];&#xA;    lines.forEach((text, index) =&amp;gt; {&#xA;      if (&#34;&#34; !== text) {&#xA;        result.push(this.append(text, kind, priority));&#xA;        if (index &amp;gt; 0) {&#xA;          this.content[this.content.length - 2].requires = [&#xA;            this.content[this.content.length - 1],&#xA;          ];&#xA;        }&#xA;      }&#xA;    });&#xA;    return result;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;ÂÆûÈôÖ‰∏äËøôÊÆµ‰ª£Á†ÅÁöÑ‰ΩúÁî®Â∞±ÊòØÂ∞ÜÂÖâÊ†áÂâçÁöÑÂÜÖÂÆπÊåâË°åappendÔºåËøôÊ†∑Âú®tokenÊúâÈôêÁöÑÊÉÖÂÜµ‰∏ãÔºåËÉΩÂ§üÊåâË°å‰øùÁïôÊúÄÂ§ßÁöÑ‰∏ä‰∏ãÊñá„ÄÇ&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;wishListÁöÑfullfillÊï¥ÂêàÂ§ÑÁêÜ&lt;/h3&gt; &#xA;&lt;p&gt;Âú®Êé•‰∏ãÊù•Â∞±ÊòØ‰∏ÄÁ≥ªÂàó‰æùËµñÂÖ≥Á≥ªÁöÑÂ§ÑÁêÜÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;if (h.Top === promptOpts.languageMarker &amp;amp;&amp;amp; V.length &amp;gt; 0 &amp;amp;&amp;amp; void 0 !== languageMarkerId) {&#xA;    promptWishlist.require(languageMarkerId, V[0]);&#xA;  }&#xA;  if (f.Top === promptOpts.pathMarker &amp;amp;&amp;amp; V.length &amp;gt; 0 &amp;amp;&amp;amp; void 0 !== pathMarkerId) {&#xA;    if (languageMarkerId) {&#xA;      promptWishlist.require(pathMarkerId, languageMarkerId);&#xA;    } else {&#xA;      promptWishlist.require(pathMarkerId, V[0]);&#xA;    }&#xA;  }&#xA;  if (void 0 !== languageMarkerId &amp;amp;&amp;amp; void 0 !== pathMarkerId) {&#xA;    promptWishlist.exclude(pathMarkerId, languageMarkerId);&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ËøôÈáåÂÖ∂ÂÆûÊàë‰∏çÂ§™ÁêÜËß£ÁöÑ‰∏ÄÁÇπÊòØÔºåpathMarkerÂíålanguageMarkerÂú®Ëøô‰∏™ÈÄªËæëÈáå‰∫íÊñ•‰∫ÜÔºåÂú®Êàë‰ª¨‰∏äÈù¢ÂàÜÊûêÂèØ‰ª•ÁúãÂà∞pathMarkerÁöÑ‰ºòÂÖàÁ∫ßÊØîlanguageMarker‰ºòÂÖàÁ∫ßÈ´òÔºåËøôÈáåÂä†‰∫Ü‰∏Ä‰∏™excludeÔºå‰πüÂ∞±ÊÑèÂë≥ÁùÄlanguageMarkerÊ∞∏Ëøú‰∏çÂèØËÉΩÂá∫Áé∞‰∫Ü„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;ÊúÄÂêéÔºåÂ¶ÇÊûúÊòØsuffixPercent‰∏∫0ÁöÑÊÉÖÂÜµ‰∏ãÔºå‰ª£Á†ÅÂà∞ËøôÈáåÂ∞±Áõ¥Êé•ÁªìÊùü‰∫ÜÔºåË∞ÉÁî®fullfillÊñπÊ≥ïËøîÂõûÊúÄÁªàÁöÑÁªìÊûúÔºö&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;if (0 === promptOpts.suffixPercent || q.length &amp;lt;= promptOpts.fimSuffixLengthThreshold)&#xA;    return promptWishlist.fulfill(promptOpts.maxPromptLength);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;ÂΩìÁÑ∂ÔºåÁªèËøáÊàë‰ª¨‰∏äÈù¢ÁöÑÂàÜÊûêsuffixPercentÂú®ÂΩìÂâçÁâàÊú¨ÁöÑÈªòËÆ§ÂÄºÊòØ15Ôºå‰∏ç‰∏∫0Ôºå‰ºöËµ∞Âà∞suffixÁöÑÈÄªËæë„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;‰∏çËøáÊàë‰ª¨ÂèØ‰ª•ÂÖàÁúã‰∏Ä‰∏ãfullfillÁöÑÂ§ÑÁêÜÔºåsuffixÈÄªËæëÊàë‰ª¨Â∞±‰∏çÂàÜÊûê‰∫Ü:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;fulfill(maxPromptLength) {&#xA;    const promptChoices = new PromptChoices();&#xA;    const promptBackground = new PromptBackground();&#xA;    const elements = this.content.map((e, t) =&amp;gt; ({&#xA;      element: e,&#xA;      index: t,&#xA;    }));&#xA;    elements.sort((e, t) =&amp;gt;&#xA;      e.element.priority === t.element.priority&#xA;        ? t.index - e.index&#xA;        : t.element.priority - e.element.priority&#xA;    );&#xA;    const requires = new Set();&#xA;    const excludes = new Set();&#xA;    let lastElement;&#xA;    const results = [];&#xA;    let promptLength = maxPromptLength;&#xA;    elements.forEach((e) =&amp;gt; {&#xA;      const element = e.element;&#xA;      const index = e.index;&#xA;      if (&#xA;        promptLength &amp;gt;= 0 &amp;amp;&amp;amp;&#xA;        (promptLength &amp;gt; 0 || void 0 === lastElement) &amp;amp;&amp;amp;&#xA;        element.requires.every((e) =&amp;gt; requires.has(e.id)) &amp;amp;&amp;amp;&#xA;        !excludes.has(r.id)&#xA;      ) {&#xA;        let tokens = element.tokens;&#xA;        const nextElement = (function (e, t) {&#xA;          let n;&#xA;          let r = 1 / 0;&#xA;          for (const i of e)&#xA;            if (i.index &amp;gt; t &amp;amp;&amp;amp; i.index &amp;lt; r) {&#xA;              n = i;&#xA;              r = i.index;&#xA;            }&#xA;          return n;&#xA;        })(results, index)?.element;&#xA;        if (element.text.endsWith(&#34;\n\n&#34;) &amp;amp;&amp;amp; nextElement &amp;amp;&amp;amp; !nextElement.text.match(/^\s/)) {&#xA;          tokens++;&#xA;        }&#xA;        if (promptLength &amp;gt;= tokens) {&#xA;            promptLength -= tokens;&#xA;            requires.add(r.id);&#xA;          element.excludes.forEach((e) =&amp;gt; excludes.add(e.id));&#xA;          promptChoices.markUsed(element);&#xA;          promptBackground.markUsed(element);&#xA;          results.push(e);&#xA;        } else {&#xA;          if (void 0 === lastElement) {&#xA;            lastElement = e;&#xA;          } else {&#xA;            promptChoices.markUnused(e.element);&#xA;            promptBackground.markUnused(e.element);&#xA;          }&#xA;        }&#xA;      } else {&#xA;        promptChoices.markUnused(element);&#xA;        promptBackground.markUnused(element);&#xA;      }&#xA;    });&#xA;    results.sort((e, t) =&amp;gt; e.index - t.index);&#xA;    let prefix = results.reduce((e, t) =&amp;gt; e + t.element.text, &#34;&#34;);&#xA;    let prefixLength = this.tokenizer.tokenLength(prefix);&#xA;    for (; prefixLength &amp;gt; maxPromptLength; ) {&#xA;      u.sort((e, t) =&amp;gt;&#xA;        t.element.priority === e.element.priority&#xA;          ? t.index - e.index&#xA;          : t.element.priority - e.element.priority&#xA;      );&#xA;      const e = u.pop();&#xA;      if (e) {&#xA;        promptChoices.undoMarkUsed(e.element);&#xA;        promptChoices.markUnused(e.element);&#xA;        promptBackground.undoMarkUsed(e.element);&#xA;        promptBackground.markUnused(e.element);&#xA;        if (void 0 !== lastElement) {&#xA;          promptChoices.markUnused(lastElement.element);&#xA;          promptBackground.markUnused(lastElement.element);&#xA;        }&#xA;        lastElement = void 0;&#xA;      }&#xA;      u.sort((e, t) =&amp;gt; e.index - t.index);&#xA;      prefix = u.reduce((e, t) =&amp;gt; e + t.element.text, &#34;&#34;);&#xA;      prefixLength = this.tokenizer.tokenLength(prefix);&#xA;    }&#xA;    const f = [...u];&#xA;    if (void 0 !== lastElement) {&#xA;      f.push(lastElement);&#xA;      f.sort((e, t) =&amp;gt; e.index - t.index);&#xA;      const prefix = f.reduce((e, t) =&amp;gt; e + t.element.text, &#34;&#34;);&#xA;      const prefixLength = this.tokenizer.tokenLength(prefix);&#xA;      if (prefixLength &amp;lt;= maxPromptLength) {&#xA;        promptChoices.markUsed(l.element);&#xA;        promptBackground.markUsed(l.element);&#xA;        const promptElementRanges = new PromptElementRanges(f);&#xA;        return {&#xA;          prefix: prefix,&#xA;          suffix: &#34;&#34;,&#xA;          prefixLength: prefixLength,&#xA;          suffixLength: 0,&#xA;          promptChoices: promptChoices,&#xA;          promptBackground: promptBackground,&#xA;          promptElementRanges: promptElementRanges,&#xA;        };&#xA;      }&#xA;      promptChoices.markUnused(l.element);&#xA;      promptBackground.markUnused(l.element);&#xA;    }&#xA;    const m = new PromptElementRanges(u);&#xA;    return {&#xA;      prefix: prefix,&#xA;      suffix: &#34;&#34;,&#xA;      prefixLength: prefixLength,&#xA;      suffixLength: 0,&#xA;      promptChoices: promptChoices,&#xA;      promptBackground: promptBackground,&#xA;      promptElementRanges: m,&#xA;    };&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ëøô‰∏™fullfillÈÄªËæëÊ†∏ÂøÉÊúâ‰∏§ÁÇπÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;È¶ñÂÖàÊåâÁÖßPriorityÊéíÂ∫èÔºàPriorityÁõ∏ÂêåÊåâindexÔºâÔºåÂ§ÑÁêÜÊñáÊú¨ÂÜÖÂÆπÔºåËøôÂ∞±ÊÑèÂë≥ÁùÄÔºåÂú®ÊúâÈôêÁöÑToken‰∏ãÔºåPriorityË∂äÈ´òÁöÑÊñáÊú¨Ë∂äËÉΩË¢´‰øùÈöú„ÄÇ&lt;/li&gt; &#xA; &lt;li&gt;ËæìÂá∫ÁöÑÊó∂ÂÄôÔºåÊòØÊåâÁÖßindexÊéíÂ∫èÁöÑÔºå‰πüÂ∞±ÊòØËØ¥PriorityÂè™Áî®‰ΩúÂ§ÑÁêÜÊñáÊú¨ÁöÑ‰ºòÂÖàÁ∫ßÔºåÊúÄÁªàÁªÑÂêàÁöÑprefixÊñáÊú¨ÁöÑÈ°∫Â∫èÊòØÊåâÁÖßÊèíÂÖ•wishListÁöÑÂÖàÂêéÈ°∫Â∫èÁöÑ„ÄÇ&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ÊâÄ‰ª•Êàë‰ª¨Ê†πÊçÆÂâçÈù¢ÁöÑÂàÜÊûêÔºåÂèØ‰ª•ÁúãÂà∞ÊñáÊú¨‰ºòÂÖàÁ∫ßÊòØËøôÊ†∑ÁöÑÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;languageMarker&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pathMarkder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;importedFile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Snippet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeCursor&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;ËÄåÂ§ÑÁêÜ‰ºòÂÖàÁ∫ßÊòØËøôÊ†∑ÁöÑÔºà‰ºòÂÖà‰øùËØÅÁöÑÂÜÖÂÆπÔºâÔºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;beforeCursor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;importedFile&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Snippet&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;pathMarkder&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;languageMarker&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;PromptÁªÑÊàêÁöÑÂõæÁ§∫&lt;/h3&gt; &#xA;&lt;p&gt;prompt‰ªé‰ª£Á†Å‰∏äÁúãÊØîËæÉÂ§çÊùÇÔºåÊàë‰ª¨Êï¥‰ΩìÊääprefixÁöÑÁªÑÊàêÁîª‰∏Ä‰∏ãÂÅö‰∏™ÊÄªÁªìÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/390d7bd0-4fa5-457d-bb0e-9c929aa72ae2.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;ÊäìÂåÖÂÆûÈ™å‰∏Ä‰∏ã&lt;/h2&gt; &#xA;&lt;p&gt;Êàë‰ª¨Êâæ‰∏™TSÊñá‰ª∂Êù•ËØïËØïÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/fc5484f9-4d01-4d20-a056-68bbb5256902.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;ÂèØ‰ª•ÁúãÂà∞ÔºåÂú®CopilotÂèëËµ∑ÁöÑËØ∑Ê±Ç‰∏≠ÔºåpromptÂåÖÂê´‰∫ÜPath MarkerÂíåBeforeCursor‰∏§‰∏™ÈÉ®ÂàÜÔºåËøô‰πüÊòØÊàë‰ª¨Âú®‰ΩøÁî®ËøáÁ®ã‰∏≠ÁªùÂ§ßÂ§öÊï∞ÁöÑÈù¢‰∏¥Âú∫ÊôØ„ÄÇ&lt;/p&gt; &#xA;&lt;p&gt;Â¶ÇÊûú‰ª£Á†ÅÁõ∏ÂÖ≥ÊÄßÂ§üÈ´òÔºåÂèØ‰ª•ÁúãÂà∞snippetÁöÑÈÉ®ÂàÜÔºåÊØîÂ¶ÇÊàë‰ª¨Êã∑Ë¥ù‰∫Ü‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊñá‰ª∂Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/119e8984-ea31-4b10-89ea-b8773b80b0c9.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Ëøô‰∏™Êó∂ÂÄôÂ∞±‰ºöÁîüÊàêÂØπÂ∫îÁöÑsnippetÔºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://files.mdnice.com/user/13429/f3748c7d-a605-41d1-bcac-9c16f5e334be.png&#34; alt=&#34;image&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Â∞èÁªì&lt;/h2&gt; &#xA;&lt;p&gt;‰ªéCopilot‰∏≠ÔºåÊàë‰ª¨ÂèØ‰ª•‰∫ÜËß£Âà∞ÂÄºÂæóÂ≠¶‰π†ÁöÑÂá†‰∏™Ê†∏ÂøÉÊÄùÊÉ≥Ôºö&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;ÂØπ‰∫éÁºñËæëÂô®ËæìÂÖ•ÁöÑËæπÁïåÂà§Êñ≠ÔºåÂåÖÊã¨Â§™Â∞ë„ÄÅÂ§™Â§ö„ÄÅÂèñÊ∂àÁ≠âÁ≠âÂæàÂ§öÂú∫ÊôØÈΩêÂÖ®ÁöÑËÄÉËôë&lt;/li&gt; &#xA; &lt;li&gt;ÁºìÂ≠òÊÄùÊÉ≥ÔºåÂà©Áî®Â§öÁ∫ßÁºìÂ≠òÁ≠ñÁï•‰øùÊä§ÂêéÂè∞ÔºåÊ®°ÂûãËøêÁÆóÊú¨Ë∫´Â∞±ÊòØ‰∏Ä‰ª∂ÊòÇË¥µÁöÑ‰∫ãÊÉÖ&lt;/li&gt; &#xA; &lt;li&gt;promptÁöÑËÆæËÆ°Ôºå‰∏ç‰ªÖ‰ªÖÂåÖÂê´‰∫Ü‰∏ä‰∏ãÊñá‰ª£Á†ÅÔºåÂú®Êñá‰ª∂Ëß£Êûê„ÄÅÁºñËæëÂô®ÊâìÂºÄÁöÑÁõ∏ÂÖ≥‰ª£Á†Å‰∏äËøòÂÅö‰∫ÜÂæàÂ§ö&lt;/li&gt; &#xA; &lt;li&gt;Âà©Áî®ÁÆÄÂçïÁöÑJaccardÁÆóÊ≥ïËÆ°ÁÆóÂàÜËØçÂêéÁöÑÊñáÊú¨Áõ∏‰ººÂ∫¶ÔºåËÉΩÂ§üÂø´ÈÄüÂÜ≥Á≠ñÂá∫ÂΩìÂâç‰∏ä‰∏ãÊñáÁõ∏ÂÖ≥ÁöÑsnippet&lt;/li&gt; &#xA; &lt;li&gt;ÂÆûÈ™åÁâπÊÄßÔºåÂú®Copilot‰∏≠ÔºåÂ§ßÈáèÁöÑÂèÇÊï∞„ÄÅ‰ºòÂÖàÁ∫ß„ÄÅËÆæÁΩÆÂ≠óÊÆµÈÉΩÊòØÈÄöËøáÂÆûÈ™åÊù•ÊéßÂà∂ÁöÑÔºåÊúâ‰∏ÄÂ•óÂÆåÊï¥ÁöÑÁõëÊéß‰∏äÊä•‰ΩìÁ≥ªÔºåÂ∏ÆÂä©CopilotÂéªË∞ÉÊï¥Ëøô‰∫õÂèÇÊï∞Ôºå‰ª•ËææÂà∞Êõ¥Â•ΩÁöÑÊïàÊûú&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;CopilotÁöÑÈÄªËæëÊØîÊàëÊÉ≥Ë±°‰∏≠Ë¶ÅÂ§çÊùÇËÆ∏Â§öÔºåÈÄÜÂêëÂàÜÊûêÈöæÂ∫¶Â∞±Êõ¥È´ò‰∫Ü„ÄÇËÄóË¥π‰∫ÜÂæàÂ§öÊó∂Èó¥Âú®Ëß£ÊûêÂ∑•‰Ωú‰∏äÔºåÊú¨ÊñáÁõ∏ÂÖ≥ÁöÑÂ∑•ÂÖ∑ÈìæÂíå‰ª£Á†ÅÈÉΩÂ∑≤‰∏ä‰º†GithubÔºåÂ∏åÊúõËÉΩÂ§üÁªô‰∏Ä‰∫õÊúâÈúÄË¶ÅÁöÑÂêåÂ≠¶Êèê‰æõÂ∏ÆÂä©Ôºö&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mengjian-github/copilot-analysis&#34;&gt;https://github.com/mengjian-github/copilot-analysis&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>