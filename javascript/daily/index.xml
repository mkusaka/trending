<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-29T01:32:48Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>livebud/bud</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/livebud/bud</id>
    <link href="https://github.com/livebud/bud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Full-Stack Web Framework for Go&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bud&lt;/h1&gt; &#xA;&lt;p&gt;The Full-Stack Web Framework for Go. Bud writes the boring code for you, helping you launch your website faster.&lt;/p&gt; &#xA;&lt;h2&gt;Video Demo&lt;/h2&gt; &#xA;&lt;p&gt;Watch a video demonstrating how to build a minimal HN clone in 15 minutes with Bud.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=LoypcRqn-xA&#34;&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/170299/168361927-9165c2f9-55d4-4fa0-a53e-966028a79b39.png&#34; alt=&#34;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Read &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69&#34;&gt;the documentation&lt;/a&gt; to learn how to get started with Bud.&lt;/p&gt; &#xA;&lt;h1&gt;Installing Bud&lt;/h1&gt; &#xA;&lt;p&gt;Bud ships as a single binary that runs on Linux and Mac. You can follow along for Windows support in &lt;a href=&#34;https://github.com/livebud/bud/issues/7&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to get started is by copying and pasting the command below in your terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-diff&#34;&gt;$ curl -sf https://raw.githubusercontent.com/livebud/bud/main/install.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script will download the right binary for your operating system and move the binary to the right location in your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Confirm that you&#39;ve installed Bud by typing &lt;code&gt;bud&lt;/code&gt; in your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bud -h&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should see the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Usage:&#xA;    bud [flags] [command]&#xA;&#xA;Flags:&#xA;  -C, --chdir  Change the working directory&#xA;&#xA;Commands:&#xA;  build    build the production server&#xA;  create   create a new project&#xA;  run      run the development server&#xA;  tool     extra tools&#xA;  version  Show package versions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Requirements&lt;/h1&gt; &#xA;&lt;p&gt;The following software is required to use Bud.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Node v14+&lt;/p&gt; &lt;p&gt;This is a temporary requirement that we plan to remove in &lt;a href=&#34;https://github.com/livebud/bud/discussions/21&#34;&gt;v0.3&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go v1.16+&lt;/p&gt; &lt;p&gt;Bud relies heavily on &lt;code&gt;io/fs&lt;/code&gt; and will take advantage of generics in the future, so while Go v1.16 will work, we suggest running Go v1.18+ if you can.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Your First Project&lt;/h1&gt; &#xA;&lt;p&gt;With bud installed, you can now scaffold a new project:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bud create hello&#xA;$ cd hello&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The create command will scaffold everything you need to get started with bud.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls&#xA;go.mod  node_modules/  package-lock.json  package.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... which is not very much by the way! Unlike most other fullstack frameworks, Bud starts out very minimal. As you add dependencies, Bud will generate all the boring code to glue your app together. Let&#39;s see this in action.&lt;/p&gt; &#xA;&lt;p&gt;Start the development server with &lt;code&gt;bud run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bud run&#xA;| Listening on http://127.0.0.1:3000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Click on the link to open the browser. You&#39;ll be greeted with bud&#39;s welcome page.&lt;/p&gt; &#xA;&lt;p&gt;Congrats! You&#39;re running your first web server with Bud. The welcome server is your jumping off point to learn more about the framework.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://denim-cub-301.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fdb7f750b-a699-4117-ac07-303124e5d2f4%2FCleanShot_2022-05-12_at_22.00.192x.png?table=block&amp;amp;id=9488d91f-b72d-4c6d-9ce0-358c31f7f964&amp;amp;spaceId=faf0f409-6e25-40a4-871e-3b311037350f&amp;amp;width=2000&amp;amp;userId=&amp;amp;cache=v2&#34; alt=&#34;CleanShot 2022-05-12 at 22.00.19@2x.png&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Next Steps&lt;/h2&gt; &#xA;&lt;p&gt;Check out the Hacker News &lt;a href=&#34;https://www.youtube.com/watch?v=LoypcRqn-xA&#34;&gt;demo&lt;/a&gt;, read the &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69#156ea69b8d044bacb65fc2897f3e52b8&#34;&gt;documentation&lt;/a&gt;, &lt;a href=&#34;https://cal.com/mattmueller/30min&#34;&gt;schedule a quick call&lt;/a&gt; or go on your own adventure. The only limit is your imagination.&lt;/p&gt; &#xA;&lt;p&gt;Recent discussions: &lt;a href=&#34;https://www.reddit.com/r/golang/comments/uoxocj/bud_the_fullstack_web_framework_for_go_developers/&#34;&gt;Reddit&lt;/a&gt;, &lt;a href=&#34;https://news.ycombinator.com/item?id=31371340&#34;&gt;Hacker News&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/golivebud&#34;&gt;Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How did Bud come into existence?&lt;/h1&gt; &#xA;&lt;p&gt;I started working on Bud 2 years ago after seeing how productive people could be in &lt;a href=&#34;https://laravel.com/&#34;&gt;Laravel&lt;/a&gt;. I wanted the same for Go, so I decided to try creating Laravel for the Go ecosystem. However, my first version after 6 months needed to scaffold many files just to get started. If you are coming from &lt;a href=&#34;https://github.com/rails/rails&#34;&gt;Rails&lt;/a&gt; or Laravel, you may shrug and consider this as pretty normal.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, I have been spoiled by the renaissance in frontend frameworks like &lt;a href=&#34;https://nextjs.org/&#34;&gt;Next.js&lt;/a&gt; that start barebones but every file you add incrementally enhances your web application. This keeps the initial complexity under control.&lt;/p&gt; &#xA;&lt;p&gt;With this additional inspiration, I worked on the next iteration for the ensuing 18 months.&lt;/p&gt; &#xA;&lt;p&gt;The goals are now:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Generate files only as you need them. Keep these generated files away from your application code and give developers the choice to keep them out of source control. You shouldn&#39;t need to care about the generated code. You may be surprised to learn that Go also generates code to turn your Go code into an executable, but it works so well you don&#39;t need to think about it. Bud should feel like this.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Feel like using a modern JS framework. This means it should work with &lt;a href=&#34;https://github.com/livebud/bud/discussions/8&#34;&gt;multiple&lt;/a&gt; modern frontend frameworks like &lt;a href=&#34;https://svelte.dev/&#34;&gt;Svelte&lt;/a&gt; and &lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt;, support &lt;a href=&#34;https://denim-cub-301.notion.site/Hey-Bud-4d81622cc49942f9917c5033e5205c69#4c7dff15ef3e458587b81fb9b1819afb&#34;&gt;live reload&lt;/a&gt;, and have &lt;a href=&#34;https://www.reddit.com/r/golang/comments/uoxocj/bud_the_fullstack_web_framework_for_go_developers/i8ke92h/?utm_source=reddit&amp;amp;utm_medium=web2x&amp;amp;context=3&#34;&gt;server-side rendering&lt;/a&gt; for better performance and SEO.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The framework should be extensible from Day 1. Bud is too ambitious for one person. We&#39;re going to need an ambitious community behind this framework. Extensibility should be primarily driven by adding code, rather than by adding configuration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bud should provide high-level, type-safe APIs for developers while generating performant, low-level Go code under the covers.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Bud should compile to a single binary that contains your entire web app and can be copied to a server that doesn&#39;t even have Go installed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Please refer to the &lt;a href=&#34;https://raw.githubusercontent.com/livebud/bud/main/Contributing.md&#34;&gt;Contributing Guide&lt;/a&gt; to learn how to run and test Bud locally.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hyzaw/AllJDScripts</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/hyzaw/AllJDScripts</id>
    <link href="https://github.com/hyzaw/AllJDScripts" rel="alternate"></link>
    <summary type="html">&lt;p&gt;https://t.me/JDSharer&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>kenwheeler/slick</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/kenwheeler/slick</id>
    <link href="https://github.com/kenwheeler/slick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;the last carousel you&#39;ll ever need&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;slick&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;the last carousel you&#39;ll ever need&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Demo&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://kenwheeler.github.io/slick/&#34;&gt;http://kenwheeler.github.io/slick&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;CDN&lt;/h4&gt; &#xA;&lt;p&gt;To start working with Slick right away, there&#39;s a couple of CDN choices availabile to serve the files as close, and fast as possible to your users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cdnjs.com/libraries/slick-carousel&#34;&gt;https://cdnjs.com/libraries/slick-carousel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jsdelivr.com/projects/jquery.slick&#34;&gt;https://www.jsdelivr.com/projects/jquery.slick&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h5&gt;Example using jsDelivr&lt;/h5&gt; &#xA;&lt;p&gt;Just add a link to the css file in your &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Add the slick-theme.css if you want default styling --&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.css&#34;/&amp;gt;&#xA;&amp;lt;!-- Add the slick-theme.css if you want default styling --&amp;gt;&#xA;&amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick-theme.css&#34;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, before your closing &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; tag add:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script type=&#34;text/javascript&#34; src=&#34;//cdn.jsdelivr.net/npm/slick-carousel@1.8.1/slick/slick.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Package Managers&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Bower&#xA;bower install --save slick-carousel&#xA;&#xA;# NPM&#xA;npm install slick-carousel&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Contributing&lt;/h4&gt; &#xA;&lt;p&gt;PLEASE review CONTRIBUTING.markdown prior to requesting a feature, filing a pull request or filing an issue.&lt;/p&gt; &#xA;&lt;h3&gt;Data Attribute Settings&lt;/h3&gt; &#xA;&lt;p&gt;In slick 1.5 you can now add settings using the data-slick attribute. You still need to call $(element).slick() to initialize slick on the element.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div data-slick=&#39;{&#34;slidesToShow&#34;: 4, &#34;slidesToScroll&#34;: 4}&#39;&amp;gt;&#xA;  &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;1&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;2&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;3&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;4&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;5&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&#xA;  &amp;lt;div&amp;gt;&amp;lt;h3&amp;gt;6&amp;lt;/h3&amp;gt;&amp;lt;/div&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Settings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;accessibility&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enables tabbing and arrow key navigation. Unless &lt;code&gt;autoplay: true&lt;/code&gt;, sets browser focus to current slide (or first of current slide set, if multiple &lt;code&gt;slidesToShow&lt;/code&gt;) after slide change. For full a11y compliance enable focusOnChange in addition to this.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;adaptiveHeight&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Adapts slider height to the current slide&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;appendArrows&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;$(element)&lt;/td&gt; &#xA;   &lt;td&gt;Change where the navigation arrows are attached (Selector, htmlString, Array, Element, jQuery object)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;appendDots&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;$(element)&lt;/td&gt; &#xA;   &lt;td&gt;Change where the navigation dots are attached (Selector, htmlString, Array, Element, jQuery object)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;arrows&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enable Next/Prev arrows&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;asNavFor&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;$(element)&lt;/td&gt; &#xA;   &lt;td&gt;Enables syncing of multiple sliders&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoplay&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Enables auto play of slides&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;autoplaySpeed&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;3000&lt;/td&gt; &#xA;   &lt;td&gt;Auto play change interval&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;centerMode&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Enables centered view with partial prev/next slides. Use with odd numbered slidesToShow counts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;centerPadding&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;50px&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Side padding when in center mode. (px or %)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;cssEase&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;ease&#39;&lt;/td&gt; &#xA;   &lt;td&gt;CSS3 easing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;customPaging&lt;/td&gt; &#xA;   &lt;td&gt;function&lt;/td&gt; &#xA;   &lt;td&gt;n/a&lt;/td&gt; &#xA;   &lt;td&gt;Custom paging templates. See source for use example.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dots&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Current slide indicator dots&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;dotsClass&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;slick-dots&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Class for slide indicator dots container&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;draggable&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enables desktop dragging&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;easing&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;linear&#39;&lt;/td&gt; &#xA;   &lt;td&gt;animate() fallback easing&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;edgeFriction&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;   &lt;td&gt;0.15&lt;/td&gt; &#xA;   &lt;td&gt;Resistance when swiping edges of non-infinite carousels&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;fade&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Enables fade&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;focusOnSelect&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Enable focus on selected element (click)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;focusOnChange&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Puts focus on slide after change&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;infinite&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Infinite looping&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;initialSlide&lt;/td&gt; &#xA;   &lt;td&gt;integer&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Slide to start on&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lazyLoad&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;ondemand&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Accepts &#39;ondemand&#39; or &#39;progressive&#39; for lazy load technique. &#39;ondemand&#39; will load the image as soon as you slide to it, &#39;progressive&#39; loads one image after the other when the page loads.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;mobileFirst&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Responsive settings use mobile first calculation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;nextArrow&lt;/td&gt; &#xA;   &lt;td&gt;string (html | jQuery selector) | object (DOM node | jQuery object)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;button type=&#34;button&#34; class=&#34;slick-next&#34;&amp;gt;Next&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allows you to select a node or customize the HTML for the &#34;Next&#34; arrow.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pauseOnDotsHover&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Pauses autoplay when a dot is hovered&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pauseOnFocus&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Pauses autoplay when slider is focussed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;pauseOnHover&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Pauses autoplay on hover&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;prevArrow&lt;/td&gt; &#xA;   &lt;td&gt;string (html | jQuery selector) | object (DOM node | jQuery object)&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;&amp;lt;button type=&#34;button&#34; class=&#34;slick-prev&#34;&amp;gt;Previous&amp;lt;/button&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Allows you to select a node or customize the HTML for the &#34;Previous&#34; arrow.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;respondTo&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;window&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Width that responsive object responds to. Can be &#39;window&#39;, &#39;slider&#39; or &#39;min&#39; (the smaller of the two).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;responsive&lt;/td&gt; &#xA;   &lt;td&gt;array&lt;/td&gt; &#xA;   &lt;td&gt;null&lt;/td&gt; &#xA;   &lt;td&gt;Array of objects &lt;a href=&#34;https://raw.githubusercontent.com/kenwheeler/slick/master/#responsive-option-example&#34;&gt;containing breakpoints and settings objects (see example)&lt;/a&gt;. Enables settings at given &lt;code&gt;breakpoint&lt;/code&gt;. Set &lt;code&gt;settings&lt;/code&gt; to &#34;unslick&#34; instead of an object to disable slick at a given breakpoint.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rows&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Setting this to more than 1 initializes grid mode. Use slidesPerRow to set how many slides should be in each row.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;rtl&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Change the slider&#39;s direction to become right-to-left&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slide&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Slide element query&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slidesPerRow&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;With grid mode initialized via the rows option, this sets how many slides are in each grid row.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slidesToScroll&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;# of slides to scroll at a time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;slidesToShow&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;# of slides to show at a time&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;speed&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;300&lt;/td&gt; &#xA;   &lt;td&gt;Transition speed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;swipe&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enables touch swipe&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;swipeToSlide&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Swipe to slide irrespective of slidesToScroll&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;touchMove&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enables slide moving with touch&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;touchThreshold&lt;/td&gt; &#xA;   &lt;td&gt;int&lt;/td&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;To advance slides, the user must swipe a length of (1/touchThreshold) * the width of the slider.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useCSS&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enable/Disable CSS Transitions&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;useTransform&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Enable/Disable CSS Transforms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;variableWidth&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Disables automatic slide width calculation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;vertical&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Vertical slide direction&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;verticalSwiping&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;false&lt;/td&gt; &#xA;   &lt;td&gt;Changes swipe direction to vertical&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;waitForAnimate&lt;/td&gt; &#xA;   &lt;td&gt;boolean&lt;/td&gt; &#xA;   &lt;td&gt;true&lt;/td&gt; &#xA;   &lt;td&gt;Ignores requests to advance the slide while animating&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;zIndex&lt;/td&gt; &#xA;   &lt;td&gt;number&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;   &lt;td&gt;Set the zIndex values for slides, useful for IE9 and lower&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h5&gt;Responsive Option Example&lt;/h5&gt; &#xA;&lt;p&gt;The responsive option, and value, is quite unique and powerful. You can use it like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(&#34;.slider&#34;).slick({&#xA;&#xA;  // normal options...&#xA;  infinite: false,&#xA;&#xA;  // the magic&#xA;  responsive: [{&#xA;&#xA;      breakpoint: 1024,&#xA;      settings: {&#xA;        slidesToShow: 3,&#xA;        infinite: true&#xA;      }&#xA;&#xA;    }, {&#xA;&#xA;      breakpoint: 600,&#xA;      settings: {&#xA;        slidesToShow: 2,&#xA;        dots: true&#xA;      }&#xA;&#xA;    }, {&#xA;&#xA;      breakpoint: 300,&#xA;      settings: &#34;unslick&#34; // destroys slick&#xA;&#xA;    }]&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Events&lt;/h3&gt; &#xA;&lt;p&gt;In slick 1.4, callback methods were deprecated and replaced with events. Use them before the initialization of slick as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// On swipe event&#xA;$(&#39;.your-element&#39;).on(&#39;swipe&#39;, function(event, slick, direction){&#xA;  console.log(direction);&#xA;  // left&#xA;});&#xA;&#xA;// On edge hit&#xA;$(&#39;.your-element&#39;).on(&#39;edge&#39;, function(event, slick, direction){&#xA;  console.log(&#39;edge was hit&#39;)&#xA;});&#xA;&#xA;// On before slide change&#xA;$(&#39;.your-element&#39;).on(&#39;beforeChange&#39;, function(event, slick, currentSlide, nextSlide){&#xA;  console.log(nextSlide);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Event&lt;/th&gt; &#xA;   &lt;th&gt;Params&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;afterChange&lt;/td&gt; &#xA;   &lt;td&gt;event, slick, currentSlide&lt;/td&gt; &#xA;   &lt;td&gt;After slide change callback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;beforeChange&lt;/td&gt; &#xA;   &lt;td&gt;event, slick, currentSlide, nextSlide&lt;/td&gt; &#xA;   &lt;td&gt;Before slide change callback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;breakpoint&lt;/td&gt; &#xA;   &lt;td&gt;event, slick, breakpoint&lt;/td&gt; &#xA;   &lt;td&gt;Fires after a breakpoint is hit&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;destroy&lt;/td&gt; &#xA;   &lt;td&gt;event, slick&lt;/td&gt; &#xA;   &lt;td&gt;When slider is destroyed, or unslicked.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;edge&lt;/td&gt; &#xA;   &lt;td&gt;event, slick, direction&lt;/td&gt; &#xA;   &lt;td&gt;Fires when an edge is overscrolled in non-infinite mode.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;init&lt;/td&gt; &#xA;   &lt;td&gt;event, slick&lt;/td&gt; &#xA;   &lt;td&gt;When Slick initializes for the first time callback. Note that this event should be defined before initializing the slider.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;reInit&lt;/td&gt; &#xA;   &lt;td&gt;event, slick&lt;/td&gt; &#xA;   &lt;td&gt;Every time Slick (re-)initializes callback&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;setPosition&lt;/td&gt; &#xA;   &lt;td&gt;event, slick&lt;/td&gt; &#xA;   &lt;td&gt;Every time Slick recalculates position&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;swipe&lt;/td&gt; &#xA;   &lt;td&gt;event, slick, direction&lt;/td&gt; &#xA;   &lt;td&gt;Fires after swipe/drag&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lazyLoaded&lt;/td&gt; &#xA;   &lt;td&gt;event, slick, image, imageSource&lt;/td&gt; &#xA;   &lt;td&gt;Fires after image loads lazily&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;lazyLoadError&lt;/td&gt; &#xA;   &lt;td&gt;event, slick, image, imageSource&lt;/td&gt; &#xA;   &lt;td&gt;Fires after image fails to load&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Methods&lt;/h4&gt; &#xA;&lt;p&gt;Methods are called on slick instances through the slick method itself in version 1.4, see below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Add a slide&#xA;$(&#39;.your-element&#39;).slick(&#39;slickAdd&#39;,&#34;&amp;lt;div&amp;gt;&amp;lt;/div&amp;gt;&#34;);&#xA;&#xA;// Get the current slide&#xA;var currentSlide = $(&#39;.your-element&#39;).slick(&#39;slickCurrentSlide&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This new syntax allows you to call any internal slick method as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Manually refresh positioning of slick&#xA;$(&#39;.your-element&#39;).slick(&#39;setPosition&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Method&lt;/th&gt; &#xA;   &lt;th&gt;Argument&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slick&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;options : object&lt;/td&gt; &#xA;   &lt;td&gt;Initializes Slick&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;unslick&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Destroys Slick&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickNext&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Triggers next slide&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickPrev&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Triggers previous slide&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickPause&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Pause Autoplay&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickPlay&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Start Autoplay (&lt;em&gt;will also set &lt;code&gt;autoplay&lt;/code&gt; option to &lt;code&gt;true&lt;/code&gt;&lt;/em&gt;)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickGoTo&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;index : int, dontAnimate : bool&lt;/td&gt; &#xA;   &lt;td&gt;Goes to slide by index, skipping animation if second parameter is set to true&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickCurrentSlide&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Returns the current slide index&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickAdd&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;element : html or DOM object, index: int, addBefore: bool&lt;/td&gt; &#xA;   &lt;td&gt;Add a slide. If an index is provided, will add at that index, or before if addBefore is set. If no index is provided, add to the end or to the beginning if addBefore is set. Accepts HTML String&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickRemove&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;index: int, removeBefore: bool&lt;/td&gt; &#xA;   &lt;td&gt;Remove slide by index. If removeBefore is set true, remove slide preceding index, or the first slide if no index is specified. If removeBefore is set to false, remove the slide following index, or the last slide if no index is set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickFilter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;filter : selector or function&lt;/td&gt; &#xA;   &lt;td&gt;Filters slides using jQuery .filter syntax&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickUnfilter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Removes applied filter&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickGetOption&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;option : string(option name)&lt;/td&gt; &#xA;   &lt;td&gt;Gets an option value.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;slickSetOption&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change an option, &lt;code&gt;refresh&lt;/code&gt; is always &lt;code&gt;boolean&lt;/code&gt; and will update UI changes...&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;option, value, refresh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change a &lt;a href=&#34;https://github.com/kenwheeler/slick#settings&#34;&gt;single &lt;code&gt;option&lt;/code&gt;&lt;/a&gt; to given &lt;code&gt;value&lt;/code&gt;; &lt;code&gt;refresh&lt;/code&gt; is optional.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;&#34;responsive&#34;, [{ breakpoint: n, settings: {} }, ... ], refresh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change or add &lt;a href=&#34;https://raw.githubusercontent.com/kenwheeler/slick/master/#responsive-option-example&#34;&gt;whole sets of responsive options&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ option: value, option: value, ... }, refresh&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;change &lt;a href=&#34;https://github.com/kenwheeler/slick#settings&#34;&gt;multiple &lt;code&gt;option&lt;/code&gt;s&lt;/a&gt; to corresponding &lt;code&gt;value&lt;/code&gt;s.&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;p&gt;Initialize with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(element).slick({&#xA;  dots: true,&#xA;  speed: 500&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Change the speed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(element).slick(&#39;slickSetOption&#39;, &#39;speed&#39;, 5000, true);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Destroy with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;$(element).slick(&#39;unslick&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Sass Variables&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Variable&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-font-path&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#34;./fonts/&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Directory path for the slick icon font&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-font-family&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#34;slick&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Font-family for slick icon font&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-loader-path&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#34;./&#34;&lt;/td&gt; &#xA;   &lt;td&gt;Directory path for the loader image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-arrow-color&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;white&lt;/td&gt; &#xA;   &lt;td&gt;Color of the left/right arrow icons&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-dot-color&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;black&lt;/td&gt; &#xA;   &lt;td&gt;Color of the navigation dots&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-dot-color-active&lt;/td&gt; &#xA;   &lt;td&gt;color&lt;/td&gt; &#xA;   &lt;td&gt;$slick-dot-color&lt;/td&gt; &#xA;   &lt;td&gt;Color of the active navigation dot&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-prev-character&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;\2190&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Unicode character code for the previous arrow icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-next-character&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;\2192&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Unicode character code for the next arrow icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-dot-character&lt;/td&gt; &#xA;   &lt;td&gt;string&lt;/td&gt; &#xA;   &lt;td&gt;&#39;\2022&#39;&lt;/td&gt; &#xA;   &lt;td&gt;Unicode character code for the navigation dot icon&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;$slick-dot-size&lt;/td&gt; &#xA;   &lt;td&gt;pixels&lt;/td&gt; &#xA;   &lt;td&gt;6px&lt;/td&gt; &#xA;   &lt;td&gt;Size of the navigation dots&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;Browser support&lt;/h4&gt; &#xA;&lt;p&gt;Slick works on IE8+ in addition to other modern browsers such as Chrome, Firefox, and Safari.&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;jQuery 1.7&lt;/p&gt; &#xA;&lt;h4&gt;License&lt;/h4&gt; &#xA;&lt;p&gt;Copyright (c) 2017 Ken Wheeler&lt;/p&gt; &#xA;&lt;p&gt;Licensed under the MIT license.&lt;/p&gt; &#xA;&lt;p&gt;Free as in Bacon.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dccice/jdautojs</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/dccice/jdautojs</id>
    <link href="https://github.com/dccice/jdautojs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;京东炸年兽&lt;/h1&gt; &#xA;&lt;p&gt;测试了大部分任务都可以完成&lt;/p&gt; &#xA;&lt;h1&gt;特别申明&lt;/h1&gt; &#xA;&lt;p&gt;本仓库仅用于测试和学习研究，禁止用于商业用途，不能保证其合法性，准确性，完整性和有效性，请根据情况自行判断。&lt;/p&gt; &#xA;&lt;p&gt;本项目内所有资源文件，禁止任何公众号、自媒体进行任何形式的转载、发布。&lt;/p&gt; &#xA;&lt;p&gt;本人对任何脚本问题概不负责，包括但不限于由任何脚本错误导致的任何损失或损害。&lt;/p&gt; &#xA;&lt;p&gt;请勿将此项目的任何内容用于商业或非法目的，否则后果自负。&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;出现bug直接提issue，请附上机型、系统版本、截图、错误日志等&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>facebook/react</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/facebook/react</id>
    <link href="https://github.com/facebook/react" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative, efficient, and flexible JavaScript library for building user interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://reactjs.org/&#34;&gt;React&lt;/a&gt; · &lt;a href=&#34;https://github.com/facebook/react/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;GitHub license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/react&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/react.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/facebook/react&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/facebook/react.svg?style=shield&amp;amp;circle-token=:circle-token&#34; alt=&#34;CircleCI Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html#your-first-pull-request&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;React is a JavaScript library for building user interfaces.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative:&lt;/strong&gt; React makes it painless to create interactive UIs. Design simple views for each state in your application, and React will efficiently update and render just the right components when your data changes. Declarative views make your code more predictable, simpler to understand, and easier to debug.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Component-Based:&lt;/strong&gt; Build encapsulated components that manage their state, then compose them to make complex UIs. Since component logic is written in JavaScript instead of templates, you can easily pass rich data through your app and keep the state out of the DOM.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Learn Once, Write Anywhere:&lt;/strong&gt; We don&#39;t make assumptions about the rest of your technology stack, so you can develop new features in React without rewriting existing code. React can also render on the server using Node and power mobile apps using &lt;a href=&#34;https://reactnative.dev/&#34;&gt;React Native&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;Learn how to use React in your project&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;React has been designed for gradual adoption from the start, and &lt;strong&gt;you can use as little or as much React as you need&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use &lt;a href=&#34;https://reactjs.org/docs/getting-started.html#online-playgrounds&#34;&gt;Online Playgrounds&lt;/a&gt; to get a taste of React.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/add-react-to-a-website.html&#34;&gt;Add React to a Website&lt;/a&gt; as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag in one minute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/create-a-new-react-app.html&#34;&gt;Create a New React App&lt;/a&gt; if you&#39;re looking for a powerful JavaScript toolchain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can use React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag from a &lt;a href=&#34;https://reactjs.org/docs/cdn-links.html&#34;&gt;CDN&lt;/a&gt;, or as a &lt;code&gt;react&lt;/code&gt; package on &lt;a href=&#34;https://www.npmjs.com/package/react&#34;&gt;npm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the React documentation &lt;a href=&#34;https://reactjs.org/&#34;&gt;on the website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;Getting Started&lt;/a&gt; page for a quick overview.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is divided into several sections:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/tutorial/tutorial.html&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/hello-world.html&#34;&gt;Main Concepts&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/jsx-in-depth.html&#34;&gt;Advanced Guides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/react-api.html&#34;&gt;API Reference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/community/support.html&#34;&gt;Where to Get Support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can improve it by sending pull requests to &lt;a href=&#34;https://github.com/reactjs/reactjs.org&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;We have several examples &lt;a href=&#34;https://reactjs.org/&#34;&gt;on the website&lt;/a&gt;. Here is the first one to get you started:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { createRoot } from &#39;react-dom/client&#39;;&#xA;&#xA;function HelloMessage({ name }) {&#xA;  return &amp;lt;div&amp;gt;Hello {name}&amp;lt;/div&amp;gt;;&#xA;}&#xA;&#xA;const root = createRoot(document.getElementById(&#39;container&#39;));&#xA;root.render(&amp;lt;HelloMessage name=&#34;Taylor&#34; /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This example will render &#34;Hello Taylor&#34; into a container on the page.&lt;/p&gt; &#xA;&lt;p&gt;You&#39;ll notice that we used an HTML-like syntax; &lt;a href=&#34;https://reactjs.org/docs/introducing-jsx.html&#34;&gt;we call it JSX&lt;/a&gt;. JSX is not required to use React, but it makes code more readable and writing it feels like writing HTML. If you&#39;re using React as a &lt;code&gt;&amp;lt;script&amp;gt;&lt;/code&gt; tag, read &lt;a href=&#34;https://reactjs.org/docs/add-react-to-a-website.html#optional-try-react-with-jsx&#34;&gt;this section&lt;/a&gt; on integrating JSX; otherwise, the &lt;a href=&#34;https://reactjs.org/docs/create-a-new-react-app.html&#34;&gt;recommended JavaScript toolchains&lt;/a&gt; handle it automatically.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;The main purpose of this repository is to continue evolving React core, making it faster and easier to use. Development of React happens in the open on GitHub, and we are grateful to the community for contributing bugfixes and improvements. Read below to learn how you can take part in improving React.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://code.fb.com/codeofconduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read &lt;a href=&#34;https://code.fb.com/codeofconduct&#34;&gt;the full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://reactjs.org/docs/how-to-contribute.html&#34;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React.&lt;/p&gt; &#xA;&lt;h3&gt;Good First Issues&lt;/h3&gt; &#xA;&lt;p&gt;To help you get your feet wet and get you familiar with our contribution process, we have a list of &lt;a href=&#34;https://github.com/facebook/react/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; that contain bugs that have a relatively limited scope. This is a great place to get started.&lt;/p&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;React is &lt;a href=&#34;https://raw.githubusercontent.com/facebook/react/main/LICENSE&#34;&gt;MIT licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>trekhleb/javascript-algorithms</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/trekhleb/javascript-algorithms</id>
    <link href="https://github.com/trekhleb/javascript-algorithms" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📝 Algorithms and data structures implemented in JavaScript with explanations and links to further readings&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JavaScript Algorithms and Data Structures&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🇺🇦 UKRAINE &lt;a href=&#34;https://twitter.com/MFA_Ukraine&#34;&gt;IS BEING ATTACKED&lt;/a&gt; BY RUSSIAN ARMY. CIVILIANS ARE GETTING KILLED. RESIDENTIAL AREAS ARE GETTING BOMBED.&lt;/p&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;Help Ukraine via &lt;a href=&#34;https://bank.gov.ua/en/news/all/natsionalniy-bank-vidkriv-spetsrahunok-dlya-zboru-koshtiv-na-potrebi-armiyi&#34;&gt;National Bank of Ukraine&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Help Ukraine via &lt;a href=&#34;https://savelife.in.ua/en/donate/&#34;&gt;SaveLife&lt;/a&gt; fund&lt;/li&gt; &#xA;  &lt;li&gt;More info on &lt;a href=&#34;https://war.ukraine.ua/&#34;&gt;war.ukraine.ua&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms/actions?query=workflow%3ACI+branch%3Amaster&#34;&gt;&lt;img src=&#34;https://github.com/trekhleb/javascript-algorithms/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/trekhleb/javascript-algorithms&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/trekhleb/javascript-algorithms/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;codecov&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository contains JavaScript based examples of many popular algorithms and data structures.&lt;/p&gt; &#xA;&lt;p&gt;Each algorithm and data structure has its own separate README with related explanations and links for further reading (including ones to YouTube videos).&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Read this in other languages:&lt;/em&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-CN.md&#34;&gt;&lt;em&gt;简体中文&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.zh-TW.md&#34;&gt;&lt;em&gt;繁體中文&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ko-KR.md&#34;&gt;&lt;em&gt;한국어&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ja-JP.md&#34;&gt;&lt;em&gt;日本語&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pl-PL.md&#34;&gt;&lt;em&gt;Polski&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.fr-FR.md&#34;&gt;&lt;em&gt;Français&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.es-ES.md&#34;&gt;&lt;em&gt;Español&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.pt-BR.md&#34;&gt;&lt;em&gt;Português&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ru-RU.md&#34;&gt;&lt;em&gt;Русский&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.tr-TR.md&#34;&gt;&lt;em&gt;Türk&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.it-IT.md&#34;&gt;&lt;em&gt;Italiana&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.id-ID.md&#34;&gt;&lt;em&gt;Bahasa Indonesia&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.uk-UA.md&#34;&gt;&lt;em&gt;Українська&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.ar-AR.md&#34;&gt;&lt;em&gt;Arabic&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.vi-VN.md&#34;&gt;&lt;em&gt;Tiếng Việt&lt;/em&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/README.de-DE.md&#34;&gt;&lt;em&gt;Deutsch&lt;/em&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;☝ Note that this project is meant to be used for learning and researching purposes only, and it is &lt;strong&gt;not&lt;/strong&gt; meant to be used for production.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Data Structures&lt;/h2&gt; &#xA;&lt;p&gt;A data structure is a particular way of organizing and storing data in a computer so that it can be accessed and modified efficiently. More precisely, a data structure is a collection of data values, the relationships among them, and the functions or operations that can be applied to the data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/linked-list&#34;&gt;Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/doubly-linked-list&#34;&gt;Doubly Linked List&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/queue&#34;&gt;Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/stack&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/hash-table&#34;&gt;Hash Table&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/heap&#34;&gt;Heap&lt;/a&gt; - max and min heap versions&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/priority-queue&#34;&gt;Priority Queue&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/trie&#34;&gt;Trie&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree&#34;&gt;Tree&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/binary-search-tree&#34;&gt;Binary Search Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/avl-tree&#34;&gt;AVL Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/red-black-tree&#34;&gt;Red-Black Tree&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/segment-tree&#34;&gt;Segment Tree&lt;/a&gt; - with min/max/sum range queries examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/tree/fenwick-tree&#34;&gt;Fenwick Tree&lt;/a&gt; (Binary Indexed Tree)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/graph&#34;&gt;Graph&lt;/a&gt; (both directed and undirected)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/disjoint-set&#34;&gt;Disjoint Set&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/data-structures/bloom-filter&#34;&gt;Bloom Filter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Algorithms&lt;/h2&gt; &#xA;&lt;p&gt;An algorithm is an unambiguous specification of how to solve a class of problems. It is a set of rules that precisely define a sequence of operations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;B&lt;/code&gt; - Beginner, &lt;code&gt;A&lt;/code&gt; - Advanced&lt;/p&gt; &#xA;&lt;h3&gt;Algorithms by Topic&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Math&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/bits&#34;&gt;Bit Manipulation&lt;/a&gt; - set/get/update/clear bits, multiplication/division by two, make negative etc.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/binary-floating-point&#34;&gt;Binary Floating Point&lt;/a&gt; - binary representation of the floating-point numbers.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/factorial&#34;&gt;Factorial&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&#34;&gt;Fibonacci Number&lt;/a&gt; - classic and closed-form versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/prime-factors&#34;&gt;Prime Factors&lt;/a&gt; - finding prime factors and counting them using Hardy-Ramanujan&#39;s theorem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/primality-test&#34;&gt;Primality Test&lt;/a&gt; (trial division method)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&#34;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/least-common-multiple&#34;&gt;Least Common Multiple&lt;/a&gt; (LCM)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/sieve-of-eratosthenes&#34;&gt;Sieve of Eratosthenes&lt;/a&gt; - finding all prime numbers up to any given limit&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/is-power-of-two&#34;&gt;Is Power of Two&lt;/a&gt; - check if the number is power of two (naive and bitwise algorithms)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&#34;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/complex-number&#34;&gt;Complex Number&lt;/a&gt; - complex numbers and basic operations with them&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/radian&#34;&gt;Radian &amp;amp; Degree&lt;/a&gt; - radians to degree and backwards conversion&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&#34;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/horner-method&#34;&gt;Horner&#39;s method&lt;/a&gt; - polynomial evaluation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&#34;&gt;Matrices&lt;/a&gt; - matrices and basic matrix operations (multiplication, transposition, etc.)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-distance&#34;&gt;Euclidean Distance&lt;/a&gt; - distance between two points/vectors/matrices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&#34;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/square-root&#34;&gt;Square Root&lt;/a&gt; - Newton&#39;s method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/liu-hui&#34;&gt;Liu Hui π Algorithm&lt;/a&gt; - approximate π calculations based on N-gons&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&#34;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sets&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/cartesian-product&#34;&gt;Cartesian Product&lt;/a&gt; - product of multiple sets&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/fisher-yates&#34;&gt;Fisher–Yates Shuffle&lt;/a&gt; - random permutation of a finite sequence&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&#34;&gt;Power Set&lt;/a&gt; - all subsets of a set (bitwise and backtracking solutions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&#34;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&#34;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&#34;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&#34;&gt;Shortest Common Supersequence&lt;/a&gt; (SCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;Knapsack Problem&lt;/a&gt; - &#34;0/1&#34; and &#34;Unbound&#34; ones&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt; - &#34;Brute Force&#34; and &#34;Dynamic Programming&#34; (Kadane&#39;s) versions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&#34;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strings&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/hamming-distance&#34;&gt;Hamming Distance&lt;/a&gt; - number of positions at which the symbols are different&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/palindrome&#34;&gt;Palindrome&lt;/a&gt; - check if the string is the same in reverse&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&#34;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/knuth-morris-pratt&#34;&gt;Knuth–Morris–Pratt Algorithm&lt;/a&gt; (KMP Algorithm) - substring search (pattern matching)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/z-algorithm&#34;&gt;Z Algorithm&lt;/a&gt; - substring search (pattern matching)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/rabin-karp&#34;&gt;Rabin Karp Algorithm&lt;/a&gt; - substring search&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&#34;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Searches&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&#34;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/jump-search&#34;&gt;Jump Search&lt;/a&gt; (or Block Search) - search in sorted array&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&#34;&gt;Binary Search&lt;/a&gt; - search in sorted array&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/interpolation-search&#34;&gt;Interpolation Search&lt;/a&gt; - search in uniformly distributed sorted array&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sorting&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/bubble-sort&#34;&gt;Bubble Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/selection-sort&#34;&gt;Selection Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/insertion-sort&#34;&gt;Insertion Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/heap-sort&#34;&gt;Heap Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&#34;&gt;Quicksort&lt;/a&gt; - in-place and non-in-place implementations&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/shell-sort&#34;&gt;Shellsort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/counting-sort&#34;&gt;Counting Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/radix-sort&#34;&gt;Radix Sort&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Linked Lists&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/traversal&#34;&gt;Straight Traversal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/linked-list/reverse-traversal&#34;&gt;Reverse Traversal&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trees&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&#34;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/breadth-first-search&#34;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Graphs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&#34;&gt;Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/breadth-first-search&#34;&gt;Breadth-First Search&lt;/a&gt; (BFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&#34;&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&#34;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&#34;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest paths to all graph vertices from single vertex&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&#34;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/detect-cycle&#34;&gt;Detect Cycle&lt;/a&gt; - for both directed and undirected graphs (DFS and Disjoint Set based versions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&#34;&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/topological-sorting&#34;&gt;Topological Sorting&lt;/a&gt; - DFS method&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/articulation-points&#34;&gt;Articulation Points&lt;/a&gt; - Tarjan&#39;s algorithm (DFS based)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bridges&#34;&gt;Bridges&lt;/a&gt; - DFS based algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/eulerian-path&#34;&gt;Eulerian Path and Eulerian Circuit&lt;/a&gt; - Fleury&#39;s algorithm - Visit every edge exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&#34;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/strongly-connected-components&#34;&gt;Strongly Connected Components&lt;/a&gt; - Kosaraju&#39;s algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&#34;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cryptography&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/polynomial-hash&#34;&gt;Polynomial Hash&lt;/a&gt; - rolling hash function based on polynomial&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/rail-fence-cipher&#34;&gt;Rail Fence Cipher&lt;/a&gt; - a transposition cipher algorithm for encoding messages&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/caesar-cipher&#34;&gt;Caesar Cipher&lt;/a&gt; - simple substitution cipher&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/cryptography/hill-cipher&#34;&gt;Hill Cipher&lt;/a&gt; - substitution cipher based on linear algebra&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Machine Learning&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://github.com/trekhleb/nano-neuron&#34;&gt;NanoNeuron&lt;/a&gt; - 7 simple JS functions that illustrate how machines can actually learn (forward/backward propagation)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/knn&#34;&gt;k-NN&lt;/a&gt; - k-nearest neighbors classification algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/ml/k-means&#34;&gt;k-Means&lt;/a&gt; - k-Means clustering algorithm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Image Processing&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&#34;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Statistics&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/statistics/weighted-random&#34;&gt;Weighted Random&lt;/a&gt; - select the random item from the list based on items&#39; weights&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Evolutionary algorithms&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://github.com/trekhleb/self-parking-car-evolution&#34;&gt;Genetic algorithm&lt;/a&gt; - example of how the genetic algorithm may be applied for training the self-parking cars&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Uncategorized&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&#34;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/square-matrix-rotation&#34;&gt;Square Matrix Rotation&lt;/a&gt; - in-place algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt; - backtracking, dynamic programming (top-down + bottom-up) and greedy examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt; - backtracking, dynamic programming and Pascal&#39;s Triangle based examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem (dynamic programming and brute force versions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top (4 solutions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&#34;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&#34;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&#34;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Algorithms by Paradigm&lt;/h3&gt; &#xA;&lt;p&gt;An algorithmic paradigm is a generic method or approach which underlies the design of a class of algorithms. It is an abstraction higher than the notion of an algorithm, just as an algorithm is an abstraction higher than a computer program.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brute Force&lt;/strong&gt; - look at all the possibilities and selects the best solution &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/linear-search&#34;&gt;Linear Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/travelling-salesman&#34;&gt;Travelling Salesman Problem&lt;/a&gt; - shortest possible route that visits each city and returns to the origin city&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fourier-transform&#34;&gt;Discrete Fourier Transform&lt;/a&gt; - decompose a function of time (a signal) into the frequencies that make it up&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Greedy&lt;/strong&gt; - choose the best option at the current time, without any consideration for the future &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;Unbound Knapsack Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/dijkstra&#34;&gt;Dijkstra Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/prim&#34;&gt;Prim’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/kruskal&#34;&gt;Kruskal’s Algorithm&lt;/a&gt; - finding Minimum Spanning Tree (MST) for weighted undirected graph&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Divide and Conquer&lt;/strong&gt; - divide the problem into smaller parts and then solve those parts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/search/binary-search&#34;&gt;Binary Search&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/hanoi-tower&#34;&gt;Tower of Hanoi&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/pascal-triangle&#34;&gt;Pascal&#39;s Triangle&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/euclidean-algorithm&#34;&gt;Euclidean Algorithm&lt;/a&gt; - calculate the Greatest Common Divisor (GCD)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/merge-sort&#34;&gt;Merge Sort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sorting/quick-sort&#34;&gt;Quicksort&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/tree/depth-first-search&#34;&gt;Tree Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/depth-first-search&#34;&gt;Graph Depth-First Search&lt;/a&gt; (DFS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/matrix&#34;&gt;Matrices&lt;/a&gt; - generating and traversing the matrices of different shapes&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fast-powering&#34;&gt;Fast Powering&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/best-time-to-buy-sell-stocks&#34;&gt;Best Time To Buy Sell Stocks&lt;/a&gt; - divide and conquer and one-pass examples&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/permutations&#34;&gt;Permutations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combinations&#34;&gt;Combinations&lt;/a&gt; (with and without repetitions)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Dynamic Programming&lt;/strong&gt; - build up a solution using previously found sub-solutions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/fibonacci&#34;&gt;Fibonacci Number&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/rain-terraces&#34;&gt;Rain Terraces&lt;/a&gt; - trapping rain water problem&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/recursive-staircase&#34;&gt;Recursive Staircase&lt;/a&gt; - count the number of ways to reach to the top&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/image-processing/seam-carving&#34;&gt;Seam Carving&lt;/a&gt; - content-aware image resizing algorithm&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/levenshtein-distance&#34;&gt;Levenshtein Distance&lt;/a&gt; - minimum edit distance between two sequences&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-common-subsequence&#34;&gt;Longest Common Subsequence&lt;/a&gt; (LCS)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/longest-common-substring&#34;&gt;Longest Common Substring&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/longest-increasing-subsequence&#34;&gt;Longest Increasing Subsequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/shortest-common-supersequence&#34;&gt;Shortest Common Supersequence&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/knapsack-problem&#34;&gt;0/1 Knapsack Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/math/integer-partition&#34;&gt;Integer Partition&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/maximum-subarray&#34;&gt;Maximum Subarray&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/bellman-ford&#34;&gt;Bellman-Ford Algorithm&lt;/a&gt; - finding the shortest path to all graph vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/floyd-warshall&#34;&gt;Floyd-Warshall Algorithm&lt;/a&gt; - find the shortest paths between all pairs of vertices&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/string/regular-expression-matching&#34;&gt;Regular Expression Matching&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Backtracking&lt;/strong&gt; - similarly to brute force, try to generate all possible solutions, but each time you generate next solution you test if it satisfies all conditions, and only then continue generating subsequent solutions. Otherwise, backtrack, and go on a different path of finding a solution. Normally the DFS traversal of state-space is being used. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/jump-game&#34;&gt;Jump Game&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/unique-paths&#34;&gt;Unique Paths&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;B&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/power-set&#34;&gt;Power Set&lt;/a&gt; - all subsets of a set&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/graph/hamiltonian-cycle&#34;&gt;Hamiltonian Cycle&lt;/a&gt; - Visit every vertex exactly once&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/n-queens&#34;&gt;N-Queens Problem&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/uncategorized/knight-tour&#34;&gt;Knight&#39;s Tour&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;A&lt;/code&gt; &lt;a href=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/src/algorithms/sets/combination-sum&#34;&gt;Combination Sum&lt;/a&gt; - find all combinations that form specific sum&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Branch &amp;amp; Bound&lt;/strong&gt; - remember the lowest-cost solution found at each stage of the backtracking search, and use the cost of the lowest-cost solution found so far as a lower bound on the cost of a least-cost solution to the problem, in order to discard partial solutions with costs larger than the lowest-cost solution found so far. Normally BFS traversal in combination with DFS traversal of state-space tree is being used.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use this repository&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Install all dependencies&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run ESLint&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may want to run it to check code quality.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run all tests&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Run tests by name&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test -- &#39;LinkedList&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Troubleshooting&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;In case if linting or testing is failing try to delete the &lt;code&gt;node_modules&lt;/code&gt; folder and re-install npm packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;rm -rf ./node_modules&#xA;npm i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also make sure that you&#39;re using a correct Node version (&lt;code&gt;&amp;gt;=14.16.0&lt;/code&gt;). If you&#39;re using &lt;a href=&#34;https://github.com/nvm-sh/nvm&#34;&gt;nvm&lt;/a&gt; for Node version management you may run &lt;code&gt;nvm use&lt;/code&gt; from the root folder of the project and the correct version will be picked up.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Playground&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;You may play with data-structures and algorithms in &lt;code&gt;./src/playground/playground.js&lt;/code&gt; file and write tests for it in &lt;code&gt;./src/playground/__test__/playground.test.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Then just simply run the following command to test if your playground code works as expected:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test -- &#39;playground&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Useful Information&lt;/h2&gt; &#xA;&lt;h3&gt;References&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.youtube.com/playlist?list=PLLXdhg_r2hKA7DPDsunoDZ-Z769jWn4R8&#34;&gt;▶ Data Structures and Algorithms on YouTube&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Big O Notation&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Big O notation&lt;/em&gt; is used to classify algorithms according to how their running time or space requirements grow as the input size grows. On the chart below you may find most common orders of growth of algorithms specified in Big O notation.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/trekhleb/javascript-algorithms/master/assets/big-o-graph.png&#34; alt=&#34;Big O graphs&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Source: &lt;a href=&#34;http://bigocheatsheet.com/&#34;&gt;Big O Cheat Sheet&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is the list of some of the most used Big O notations and their performance comparisons against different sizes of the input data.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Big O Notation&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 10 elements&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 100 elements&lt;/th&gt; &#xA;   &lt;th&gt;Computations for 1000 elements&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(1)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Constant&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(log N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Logarithmic&lt;/td&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Linear&lt;/td&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;1000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N log N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;n log(n)&lt;/td&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;600&lt;/td&gt; &#xA;   &lt;td&gt;9000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N^2)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Quadratic&lt;/td&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;10000&lt;/td&gt; &#xA;   &lt;td&gt;1000000&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(2^N)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Exponential&lt;/td&gt; &#xA;   &lt;td&gt;1024&lt;/td&gt; &#xA;   &lt;td&gt;1.26e+29&lt;/td&gt; &#xA;   &lt;td&gt;1.07e+301&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;O(N!)&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Factorial&lt;/td&gt; &#xA;   &lt;td&gt;3628800&lt;/td&gt; &#xA;   &lt;td&gt;9.3e+157&lt;/td&gt; &#xA;   &lt;td&gt;4.02e+2567&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Data Structure Operations Complexity&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Data Structure&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Access&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Search&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Insertion&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Deletion&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Array&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Queue&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Linked List&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Hash Table&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In case of perfect hash function costs would be O(1)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Binary Search Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In case of balanced tree costs would be O(log(n))&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;B-Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Red-Black Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;AVL Tree&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bloom Filter&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;-&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;False positives are possible while searching&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Array Sorting Algorithms Complexity&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Best&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Average&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Worst&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Memory&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Stable&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Comments&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Bubble sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Insertion sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Selection sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Heap sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Merge sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Quick sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quicksort is usually done in-place with O(log(n)) stack space&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Shell sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;log(n)&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;depends on gap sequence&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n&amp;nbsp;(log(n))&lt;sup&gt;2&lt;/sup&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;1&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;No&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Counting sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + r&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;r - biggest number in array&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Radix sort&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n * k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;n + k&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Yes&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;k - length of longest key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Project Backers&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You may support this project via ❤️️ &lt;a href=&#34;https://github.com/sponsors/trekhleb&#34;&gt;GitHub&lt;/a&gt; or ❤️️ &lt;a href=&#34;https://www.patreon.com/trekhleb&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/trekhleb/javascript-algorithms/raw/master/BACKERS.md&#34;&gt;Folks who are backing this project&lt;/a&gt; &lt;code&gt;∑ = 0&lt;/code&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;ℹ️ A few more &lt;a href=&#34;https://trekhleb.dev/projects/&#34;&gt;projects&lt;/a&gt; and &lt;a href=&#34;https://trekhleb.dev/blog/&#34;&gt;articles&lt;/a&gt; about JavaScript and algorithms on &lt;a href=&#34;https://trekhleb.dev&#34;&gt;trekhleb.dev&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt;</summary>
  </entry>
  <entry>
    <title>6dylan6/jdpro</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/6dylan6/jdpro</id>
    <link href="https://github.com/6dylan6/jdpro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;青龙脚本库&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;DY&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;收自全网，加密代码审查确保CK安全，测运行无重复，定期移除失效，默认无加购，一键配置内部互助(可选模式),自动安装运行依赖（需青龙2.8+）;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;欢迎大家issue、pr，会一一回复！&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;请注意安全，不用不明js，app，exe！被偷回到解放前！！！&lt;/h2&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://t.me/dylan_jdpro&#34;&gt;TG频道&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;青龙面板&lt;a href=&#34;https://github.com/6dylan6/jdpro/tree/main/docker&#34;&gt;INSTALL&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;h2&gt;拉库指令&lt;/h2&gt; &#xA;&lt;p&gt;【注意】2.11.1前版本青龙config.sh配置把GithubProxyUrl=&#34;&lt;a href=&#34;https://ghproxy.com/&#34;&gt;https://ghproxy.com/&lt;/a&gt; （差不在多19行）&#34; 修改为GithubProxyUrl=&#34;&#34;，否则拉取失败，以上版本无需配置。&lt;/p&gt; &#xA;&lt;p&gt;国内机用下面指令（带代理）：（之前代理挂了，更换）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://js.dayplus.xyz/https://github.com/6dylan6/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;国外机用下面指令：&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://github.com/6dylan6/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;怎么都拉不下来就用gitee版吧，用下面指令！(更新会慢点）&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ql repo https://gitee.com/dylanote/jdpro.git &#34;jd_|jx_|jddj_&#34; &#34;backUp&#34; &#34;^jd[^_]|USER|JD|function|sendNotify&#34;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;任务定时建议 50 7-23/2 * * *&lt;/p&gt; &#xA;&lt;h2&gt;依赖安装&lt;/h2&gt; &#xA;&lt;p&gt;拉库后，执行&#39;依赖安装&#39;任务安装此库脚本所需依赖，脚本名jd_indeps，首次拉库执行一次即可，有新依赖再次执行。&lt;/p&gt; &#xA;&lt;h2&gt;互助指南&lt;/h2&gt; &#xA;&lt;p&gt;1、修改青龙config.sh配置，差不多在17行（特别注意，没有修改此配置，会少依赖安装任务和获取互助任务）&lt;/p&gt; &#xA;&lt;p&gt;RepoFileExtensions=&#34;js py&#34;修改为&lt;/p&gt; &#xA;&lt;p&gt;RepoFileExtensions=&#34;js py sh ts&#34;&lt;/p&gt; &#xA;&lt;p&gt;保存&lt;/p&gt; &#xA;&lt;p&gt;2、执行拉库任务。&lt;/p&gt; &#xA;&lt;p&gt;3、执行&#39;获取互助码&#39;任务即可自动完成互助配置（脚本名jd_sharecode),互助码获取情况可查看任务运行日志（首次使用此库需等待任务运行一遍后产生日志才会获取到互助码，可以看jd_sharecode日志获取情况）&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;使用技巧与问题解答&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#xA;&lt;p&gt;1、涉及兑换或需要抢的可以配置任务并发，就是全部一起跑。&lt;/p&gt;&#xA;&lt;p&gt;并发配置方法：&lt;/p&gt;&#xA;&lt;p&gt;在任务后面加conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;如 task XXXXX.js conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;任务分组运行方法：&lt;/p&gt;&#xA;&lt;p&gt;在任务后面加desi JD_COOKIE 需要运行的ck序号&lt;/p&gt;&#xA;&lt;p&gt;如 task XXXX.js desi JD_COOKIE 1-10 前10个一组运行，2 8 9就是第2/8/9序号的ck执行，以此类推。&lt;/p&gt;&#xA;&lt;p&gt;2、极速版签到建议并发，号多跑很久的，一个号要30多分钟。。&lt;/p&gt;&#xA;&lt;p&gt;task 6dylan6_jdpro_jd_speed_sign.js conc JD_COOKIE （具体任务路径不同版本不一样，按自己的写）&lt;/p&gt;&#xA;&lt;p&gt;3、保价建议并发，否则可能前几个号正常跑，后面会报频繁！&lt;/p&gt;&#xA;&lt;p&gt;task 6dylan6_jdpro_jd_price.js conc JD_COOKIE&lt;/p&gt;&#xA;&lt;p&gt;4、通知支持一对一推送和显示备注，还有分组通知等用法参考&lt;a href=&#34;https://raw.githubusercontent.com/6dylan6/jdpro/main/notify.md&#34;&gt;notify.md&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;备注显示变量如下&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;1&#34; 不做任何变动&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;2&#34; 效果是 : 账号名称：别名(备注)&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;3&#34; 效果是 : 账号名称：pin(备注)&lt;/p&gt;&#xA;&lt;p&gt;export NOTIFY_SHOWNAMETYPE=&#34;4&#34; 效果是 : 账号名称：备注&lt;/p&gt;&#xA;&lt;p&gt;5、因为青龙有随机延时（可以在配置文件设置为0，默认300秒），所以涉及准点运行的任务，最后加now，如果是desi或conc不用加也会准时跑。&lt;/p&gt;&#xA;&lt;p&gt;6、青龙系统通知（新增删除任务、登录等通知），需把通知变量写到config.sh文件，在环境变量里只发脚本运行通知哈。&lt;/p&gt;&#xA;&lt;p&gt;7、本库开卡任务默认不执行，如需运行请设置变量export DY_OPENALL=&#34;true&#34;，所有开卡任务通用。&lt;/p&gt;&#xA;&lt;p&gt;8、如果通知文件发现和库里的不一致，那是青龙自带的覆盖了，正常库里会自动覆盖掉青龙的通知文件，如果没有自动那就手动拷贝一份到deps目录下吧，或者直接删掉deps目录下的sendnotify.js&lt;/p&gt;&#xA;&lt;/code&gt;&lt;p&gt;&lt;code&gt;9、建议调整任务运行超时时间，青龙默认1小时有些脚本跑不完就被强制kill，config.sh里配置。CommandTimeoutTime=&#34;3h&#34; 即改为3小时，根据自己的号数量调整。 &lt;/code&gt;&lt;/p&gt;&lt;/pre&gt;&#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;加密脚本清单&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;加密脚本清单，已审查， 不放心可禁用&lt;/summary&gt; &#xA; &lt;pre&gt;&lt;code&gt;&#xA;jd_zjd.js (赚京豆，全加密）&#xA;jddj_fruit.js（到家果园，全加密）&#xA;jd_fans.js （粉丝互动，全加密）&#xA;jd_half_redrain.js (半点京豆雨，全加密）&#xA;jd_jxmc.js （京喜牧场，算法加密）&#xA;jd_cfd.js （京喜财富岛，算法加密）&#xA;jd_cfd_loop.js (京喜财富岛捡贝壳，算法加密）&#xA;jd_speed_sign.js （极速版签到，算法加密）&#xA;jd_speed_signred.js  （极速版红包，算法加密）&#xA;开卡系列全部都有算法加密 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;控制脚本功能环境变量&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;归属&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;属性&lt;/th&gt; &#xA;   &lt;th&gt;说明&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;PET_NOTIFY_CONTROL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;东东萌宠&lt;br&gt;推送开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制京东萌宠是否静默运行,&lt;br&gt;&lt;code&gt;false&lt;/code&gt;为否(发送推送通知消息),&lt;code&gt;true&lt;/code&gt;为是(即：不发送推送通知消息)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;FRUIT_NOTIFY_CONTROL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;东东农场&lt;br&gt;推送开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制京东农场是否静默运行,&lt;br&gt;&lt;code&gt;false&lt;/code&gt;为否(发送推送通知消息),&lt;code&gt;true&lt;/code&gt;为是(即：不发送推送通知消息)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;NOTIFY_AUTOCHECKCK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;自动禁用失效CK开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;有CK失效自动禁用并通知，true为自动禁用，false不自动禁用，默认false&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JOY_FEED_COUNT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;宠汪汪喂食数量&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制&lt;code&gt;jd_joy_feedPets.js&lt;/code&gt;脚本喂食数量,可以填的数字10,20,40,80,其他数字不可.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;NOTIFY_SKIP_LIST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;控制关闭某些标题的通知&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;通知标题在此变量里面存在(&amp;amp;隔开),则屏蔽不发送通知.例 : export NOTIFY_SKIP_LIST=&#34;临期京豆换喜豆&amp;amp;京东资产统计&#34;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;FRUIT_BEAN_CARD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;农场&lt;br&gt;使用水滴换豆卡&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;农场使用水滴换豆卡(如果出现限时活动时100g水换20豆,此时比浇水划算,推荐换豆),&lt;br&gt;&lt;code&gt;true&lt;/code&gt;表示换豆(不浇水),&lt;code&gt;false&lt;/code&gt;表示不换豆(继续浇水),脚本默认是浇水&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JD_UNSUB&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;批量取消商品与店铺关注开关&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制jd_unsubscribe.js运行，默认为true取关，false不取关&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;JD_CART_REMOVE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;清空购物车&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制jd_clean_car.js运行 ，默认false不清空，true清空&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;MONEY_TREE_SELL_FRUIT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;摇钱树&lt;br&gt;是否卖出金果&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;控制摇钱树脚本是否自动卖出金果兑换成金币，&lt;code&gt;true&lt;/code&gt;卖出，&lt;code&gt;false&lt;/code&gt;不卖出，默认卖出&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;QCARD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;店铺退会链接&lt;br&gt;是否运行&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;按需运行，&lt;code&gt;true&lt;/code&gt;运行，默认&lt;code&gt;false&lt;/code&gt;不运行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;Ev_Start&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;自动评价&lt;br&gt;是否运行&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;选择运行，&lt;code&gt;true&lt;/code&gt;运行，默认&lt;code&gt;false&lt;/code&gt;不运行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;exjxbeans&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;临期京豆换喜豆&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认为false不换，设置true换7天内过期京豆换喜豆&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;WSKEY_DISCHECK&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;wskey转换&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认为false检查，设置true为不检查直接转换&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt; HelpType&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;互助模式&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认顺序助力，0是全部一样顺序助力，1是均等机会助力，2是随机顺序助力，例： export HelpType=1&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;PandaToken&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;领现金使用&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;Token去&lt;a href=&#34;https://t.me/pang_da_bot&#34;&gt;TG&lt;/a&gt; 获取，获取一次7天有效期1000次调用，export PandaToken=&#39;你获取的token&#39;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;DY_OPENALL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;开卡系列&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;开卡系列任务默认不执行，设置变量DY_OPENALL=&#39;true&#39;执行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;DY_ZJD&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;赚京豆&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认不执行，设置变量DY_ZJD=&#39;true&#39;执行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;code&gt;DY_19E&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;618活动&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;非必须&lt;/td&gt; &#xA;   &lt;td&gt;默认不执行，设置变量DY_19E=&#39;true&#39;执行&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
  <entry>
    <title>174726435803085/create-react-app-project</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/174726435803085/create-react-app-project</id>
    <link href="https://github.com/174726435803085/create-react-app-project" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>rolling-scopes-school/tasks</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/rolling-scopes-school/tasks</id>
    <link href="https://github.com/rolling-scopes-school/tasks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Курс JS/Frontend-разработка&lt;/h1&gt; &#xA;&lt;p&gt;Это бесплатный курс по JavaScript / Front-end, проводимый сообществом с 2013 года. В RS School может учиться каждый, независимо от возраста, профессии, места жительства. Новый набор студентов стартует каждые полгода и насчитывает около 6000-7000 человек. Для продуктивного обучения студентам помогают 250+ менторов.&lt;/p&gt; &#xA;&lt;p&gt;Цель курса — получение студентами знаний и опыта, достаточного для трудоустройства на позицию Junior Software Engineer в области JavaScript / Front-end.&lt;/p&gt; &#xA;&lt;p&gt;За период с 1 октября 2020 по 1 июня 2021 только в компанию EPAM Systems трудоустроилось 208 выпускников нашего курса.&lt;/p&gt; &#xA;&lt;p&gt;Больше информации о RS School находится тут: &lt;a href=&#34;https://docs.rs.school/#/&#34;&gt;https://docs.rs.school/#/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Продолжительность обучения&lt;/h3&gt; &#xA;&lt;p&gt;5-7 месяцев. Для успешного прохождения программы вам потребуется 20-40 часов в неделю.&lt;/p&gt; &#xA;&lt;h3&gt;Программа обучения&lt;/h3&gt; &#xA;&lt;p&gt;Программа обучения находится &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/roadmap.md&#34;&gt;тут&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Регистрация&lt;/h1&gt; &#xA;&lt;p&gt;Мы предлагаем два варианта регистрации в зависимости от уровня вашей подготовки.&lt;/p&gt; &#xA;&lt;h3&gt;Регистрация на подготовительный курс&lt;/h3&gt; &#xA;&lt;p&gt;Подготовительный курс предназначен для тех, кто мало знаком или незнаком с программированием, но хотел бы в дальнейшем учиться на основном курсе JavaScript / Front-end.&lt;/p&gt; &#xA;&lt;p&gt;Программу обучения подготовительного курса можно посмотреть &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/stage0/&#34;&gt;тут&lt;/a&gt;. Регистрацию на ближайший запуск можно найти тут: &lt;a href=&#34;https://rs.school/js-stage0/&#34;&gt;https://rs.school/js-stage0/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Регистрация на основной курс JavaScript / Front-end&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Внимание!&lt;/strong&gt; Основной курс требует наличия у студентов базовых знаний:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;понимание основ HTML и CSS, наличие практических навыков вёрстки;&lt;/li&gt; &#xA; &lt;li&gt;знание основ JavaScript (типы данных, операторы, циклы, условные констуркции, функции);&lt;/li&gt; &#xA; &lt;li&gt;знание структуры данных и их организации (массив, список, стек, очередь, дерево и т.д.);&lt;/li&gt; &#xA; &lt;li&gt;умение реализовать достаточно простой алгоритм на языке программирования JavaScript. Например, сортировку или поиск элементов массива;&lt;/li&gt; &#xA; &lt;li&gt;умение решать задачи уровня 8-7 kyu на сайте &lt;a href=&#34;https://www.codewars.com/&#34;&gt;https://www.codewars.com/&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;(желательно) английский язык уровня Pre-intermediate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Программу обучения можно посмотреть &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/roadmap.md&#34;&gt;тут&lt;/a&gt;. Регистрацию на ближайший запуск можно найти тут: &lt;a href=&#34;https://rs.school/js/&#34;&gt;https://rs.school/js/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;h3&gt;Где можно задать вопрос?&lt;/h3&gt; &#xA;&lt;p&gt;Вопросы можно задать в Discord чате: &lt;a href=&#34;https://discord.gg/8Dv4bAw6Hx&#34;&gt;https://discord.gg/8Dv4bAw6Hx&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Имеет ли значения город проживания? Можно ли пройти курс полностью онлайн?&lt;/h3&gt; &#xA;&lt;p&gt;Город проживания значения не имеет. Все этапы обучения можно пройти онлайн.&lt;/p&gt; &#xA;&lt;h3&gt;Что делать до старта обучения?&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Выполнить задания и тесты &lt;a href=&#34;https://raw.githubusercontent.com/rolling-scopes-school/tasks/master/stage0/&#34;&gt;подготовительного курса&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Пойти на курсы английского языка до получения уровня Pre-Intermediate (Минимум A2).&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>Asabeneh/30-Days-Of-React</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/Asabeneh/30-Days-Of-React</id>
    <link href="https://github.com/Asabeneh/30-Days-Of-React" rel="alternate"></link>
    <summary type="html">&lt;p&gt;30 Days of React challenge is a step by step guide to learn React in 30 days. It requires HTML, CSS, and JavaScript knowledge. You should be comfortable with JavaScript before you start to React. If you are not comfortable with JavaScript check out 30DaysOfJavaScript. This is a continuation of 30 Days Of JS. This challenge may take more than 100…&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;img align=&#34;right&#34; width=&#34;100%&#34; src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/30_days_of_react.jpg&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt; 30 Days Of React&lt;/h1&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://www.linkedin.com/in/asabeneh/&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/style--5eba00.svg?label=LinkedIn&amp;amp;logo=linkedin&amp;amp;style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;a class=&#34;header-badge&#34; target=&#34;_blank&#34; href=&#34;https://twitter.com/Asabeneh&#34;&gt; &lt;img alt=&#34;Twitter Follow&#34; src=&#34;https://img.shields.io/twitter/follow/asabeneh?style=social&#34;&gt; &lt;/a&gt; &#xA; &lt;p&gt;&lt;sub&gt;Author: &lt;a href=&#34;https://www.linkedin.com/in/asabeneh/&#34; target=&#34;_blank&#34;&gt;Asabeneh Yetayeh&lt;/a&gt;&lt;br&gt; &lt;small&gt; October, 2020&lt;/small&gt;&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;# Day&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Topics&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;00&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&#34;&gt;How to Use Repo&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;br&gt; &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&#34;&gt;Setup&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;01&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;JavaScript Refresher&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;02&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/02_Day_Introduction_to_React/02_introduction_to_react.md&#34;&gt;Getting Started React&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;03&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/03_Day_Setting_Up/03_setting_up.md&#34;&gt;Setting Up&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;04&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/04_Day_Components/04_components.md&#34;&gt;Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;05&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/05_Day_Props/05_props.md&#34;&gt;Props&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;06&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/06_Day_Map_List_Keys/06_map_list_keys.md&#34;&gt;List, Map and Keys&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;07&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/07_Day_Class_Components/07_class_components.md&#34;&gt;Class Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;08&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/08_Day_States/08_states.md&#34;&gt;States&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;09&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/09_Day_Conditional_Rendering/09_conditional_rendering.md&#34;&gt;Conditional Rendering&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/10_React_Project_Folder_Structure/10_react_project_folder_structure.md&#34;&gt;React Project Folder Structure&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/11_Day_Events/11_events.md&#34;&gt;Events&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/12_Day_Forms/12_forms.md&#34;&gt;Forms&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/13_Day_Controlled_Versus_Uncontrolled_Input/13_uncontrolled_input.md&#34;&gt;Controlled and Uncontrolled Component&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/14_Day_Component_Life_Cycles/14_component_life_cycles.md&#34;&gt;Component Life Cycles&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/15_Third_Party_Packages/15_third_party_packages.md&#34;&gt;Third Party Packages&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/16_Higher_Order_Component/16_higher_order_component.md&#34;&gt;Higher Order Components&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/17_React_Router/17_react_router.md&#34;&gt;React Router&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/18_Fetch_And_Axios/18_fetch_axios.md&#34;&gt;Fetch versus Axios&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/19_projects/19_projects.md&#34;&gt;Projects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/20_projects/20_projects.md&#34;&gt;Projects&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/21_Introducing_Hooks/21_introducing_hooks.md&#34;&gt;Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/22_Form_Using_Hooks/22_form_using_hooks.md&#34;&gt;Forms Using Hook&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/23_Fetching_Data_Using_Hooks/23_fetching_data_using_hooks.md&#34;&gt;Fetching Data Using Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/24_projects/24_projects.md&#34;&gt;Project using Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/25_Custom_Hooks/25_custom_hooks.md&#34;&gt;Custom Hooks&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/26_Context/26_context.md&#34;&gt;Context&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/27_Ref/27_ref.md&#34;&gt;Ref&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/28_project/28_project.md&#34;&gt;project&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/29_explore/29_explore.md&#34;&gt;Explore&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/30_conclusions/30_conclusions.md&#34;&gt;Conclusions&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;🧡🧡🧡 HAPPY CODING 🧡🧡🧡&lt;/p&gt; &#xA;&lt;div&gt; &#xA; &lt;small&gt;Support the &lt;strong&gt;author&lt;/strong&gt; to create more educational materials&lt;/small&gt; &#xA; &lt;br&gt; &#xA; &lt;a href=&#34;https://www.paypal.me/asabeneh&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/paypal_lg.png&#34; alt=&#34;Paypal Logo&#34; style=&#34;width:10%&#34;&gt;&lt;/a&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#introduction&#34;&gt;Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-repo&#34;&gt;How to Use Repo&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#star-and-fork-this-repo&#34;&gt;Star and Fork this Repo&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#clone-your-fork&#34;&gt;Clone your Fork&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#create-a-new-branch&#34;&gt;Create a New Branch&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#structure-exercise-solutions&#34;&gt;Structure Exercise Solutions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#commit-exercise-solutions&#34;&gt;Commit Exercise Solutions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#update-your-fork-daily&#34;&gt;Update your Fork Daily&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#setup&#34;&gt;Setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#install-nodejs&#34;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#browser&#34;&gt;Browser&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-google-chrome&#34;&gt;Installing Google Chrome&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#opening-google-chrome-console&#34;&gt;Opening Google Chrome Console&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#writing-code-on-browser-console&#34;&gt;Writing Code on Browser Console&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog&#34;&gt;Console.log&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#consolelog-with-multiple-arguments&#34;&gt;Console.log with Multiple Arguments&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#comments&#34;&gt;Comments&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#syntax&#34;&gt;Syntax&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#arithmetics&#34;&gt;Arithmetics&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#code-editor&#34;&gt;Code Editor&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#installing-visual-studio-code&#34;&gt;Installing Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/#how-to-use-visual-studio-code&#34;&gt;How to Use Visual Studio Code&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Congratulations&lt;/strong&gt; on deciding to participate in 30 days of React programming challenge. In this challenge you will learn everything you need to use to develop a React application. In the end of the challenge you will get a 30DaysOfReact programming challenge completion certificate. In case you need help or if you would like to help others you may join the &lt;a href=&#34;https://t.me/thirtydaysofreact&#34;&gt;telegram group&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;A 30DaysOfReact&lt;/strong&gt; challenge is a guide for both beginners and advanced JavaScript and React developers. Welcome to 30 Days Of React. React is a JavaScript library. I enjoy using and teaching React and I hope you will do so too. In this step by step 30 Days React challenge, you will learn React which is one of most popular user interface JavaScript libraries. React can do everything that JavaScript can do. React can be used &lt;strong&gt;&lt;em&gt;to add interactivity to websites, to develop mobile apps, desktop applications, games&lt;/em&gt;&lt;/strong&gt;. I believe you will learn quite a lot in the next 30 days and your programming and problem solving skills will also be improved significantly.&lt;/p&gt; &#xA;&lt;p&gt;I will use conversational English and less jargons to write this challenge. The content will be continuously updated. If you find a typo or grammar mistakes don&#39;t be surprised because I don&#39;t do any proof read before I publish it. I would recommend you to focus on the main message of the challenge instead of the English and some minor mistakes. I really appreciate if you send me pull requests for improvement and remember to pull first from master before you send pull requests. Most of the images I have used in this challenge came from 30DaysOfJavaScript challenge therefore you may need to rename file names and folders 30DaysOfReact. If you are good at arrays, loops, functions, objects, functional programming, destructuring and spreading and class then you will be able to follow the challenge properly. Otherwise, I strongly recommend you to check &lt;a href=&#34;https://github.com/Asabeneh/30-Days-Of-JavaScript&#34;&gt;30DaysOfJavaScript&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Before you dive into this course, you may check the &lt;a href=&#34;https://t.me/thirtydaysofreact/992&#34;&gt;review&lt;/a&gt; of 30 Days Of React.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;To get along with the challenge you need to have the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Motivation&lt;/li&gt; &#xA; &lt;li&gt;A computer&lt;/li&gt; &#xA; &lt;li&gt;Internet&lt;/li&gt; &#xA; &lt;li&gt;A browser&lt;/li&gt; &#xA; &lt;li&gt;A code editor&lt;/li&gt; &#xA; &lt;li&gt;HTML, CSS and JavaScript intermediate level skill&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;How to Use Repo&lt;/h2&gt; &#xA;&lt;h3&gt;Star and Fork this Repo&lt;/h3&gt; &#xA;&lt;p&gt;Star this repo to support this work and Fork the repo to create your own copy to work from.&lt;/p&gt; &#xA;&lt;h3&gt;Clone your Fork&lt;/h3&gt; &#xA;&lt;p&gt;You should always work directly from your forked copy.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# note that an `ssh` link is used here, but an `https` link will work the same&#xA;git clone git@github.com:username/30-Days-Of-React.git&#xA;cd 30-Days-Of-React&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Create a New Branch&lt;/h3&gt; &#xA;&lt;p&gt;To complete daily exercises, my suggestion is to create a separate branch to house your exercise folder or any other changes you make. This will keep your master branch clean at all times, which means your master will always be similar to the original master.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git checkout -b exercise-solutions # `-b` creates the branch if it does not exist&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Structure Exercise Solutions&lt;/h3&gt; &#xA;&lt;p&gt;In your new branch, you can use files/folders to structure your solutions to daily exercises&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p solutions/day-01 # `-p` helps create nested directories&#xA;touch solutions/day-01/level1.js # touch creates a file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Commit Exercise Solutions&lt;/h3&gt; &#xA;&lt;p&gt;Commit your solutions to your Fork&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git add solutions/day-01/level1.js&#xA;git commit -m &#34;chore: exercise level1 complete&#34;&#xA;git push origin exercise-solutions # branch `exercise-solutions` was created earlier&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Update your Fork Daily&lt;/h3&gt; &#xA;&lt;p&gt;This repo will be updated daily throughout the month. When a new day&#39;s content becomes available, you can update your forked copy with the steps below.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# 1. switch to master branch&#xA;git checkout master&#xA;# 2. check if your local copy has a link to original `...Asabeneh/30-Days-Of-React.git`&#xA;git remote -v&#xA;# 3. if not, add a link to original, you can choose any name for the link or use `upstream`&#xA;git remote add upstream git@github.com:Asabeneh/30-Days-Of-React.git&#xA;# 4. check again to confirm link added&#xA;git remote -v&#xA;# 5. now you can fetch updates from original repo, assuming you named this `upstream`&#xA;git fetch upstream&#xA;# 6. merge the updates to your local master branch&#xA;git merge upstream/master master&#xA;# 7. push the merged updates to your Forked copy on GitHub&#xA;git push origin master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that the updates are only applied to the master branch. If you wish to update any other branch, repeat steps 6-7 with the branch name. See snippet below for &lt;code&gt;exercise-solutions&lt;/code&gt; branch&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git merge upstream/master exercise-solutions&#xA;git push origin exercise-solutions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;I believe you have the motivation and a strong desire to be a developer, a computer and Internet. In addition to that basic to intermediate level HTML, CSS and JS. If you have those, then you have everything to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Install Node.js&lt;/h3&gt; &#xA;&lt;p&gt;You may not need node.js right now but you may need it for later. Install &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;node.js&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/download_node.png&#34; alt=&#34;Node download&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After downloading double click and install&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/install_node.png&#34; alt=&#34;Install node&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can check if node is installed on our local machine by opening our device terminal or command prompt.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;asabeneh $ node -v&#xA;v12.14.0&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When making this tutorial I was using node version 12.14.0, but now the recommended version of node.js for download is 12.17.0.&lt;/p&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;p&gt;There are many browsers out there. However, I strongly recommend Google Chrome.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Google Chrome&lt;/h4&gt; &#xA;&lt;p&gt;Install &lt;a href=&#34;https://www.google.com/chrome/&#34;&gt;google chrome&lt;/a&gt; if you do not have one yet. We can write small JavaScript code on the browser console, but we do not use the browser console to develop applications.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/google_chrome.png&#34; alt=&#34;Google Chrome&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Opening Google Chrome Console&lt;/h4&gt; &#xA;&lt;p&gt;You can open Google Chrome console either by clicking three dots at the top right corner of the browser, selecting &lt;em&gt;More tools -&amp;gt; Developer tools&lt;/em&gt; or using a keyboard shortcut. I prefer using shortcuts.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_developer_tool.png&#34; alt=&#34;Opening chrome&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To open the Chrome console using a keyboard shortcut. It is good to know the shortcut too as a JavaScript and React developer you will spend much time on a browser console and don&#39;t be lazy to open it during development.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Mac&#xA;Command+Option+J&#xA;&#xA;Windows/Linux:&#xA;Ctl+Shift+J&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_chrome_console_shortcut.png&#34; alt=&#34;Opening console&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;After you open the Google Chrome console, try to explore the marked buttons. We will spend most of the time on the Console. The Console is the place where your JavaScript code goes. The Google Console V8 engine changes your JavaScript code to machine code. Let us write a JavaScript code on the Google Chrome console:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/js_code_on_chrome_console.png&#34; alt=&#34;write code on console&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Writing Code on Browser Console&lt;/h4&gt; &#xA;&lt;p&gt;We can write any JavaScript code on the Google console or any browser console. However, for this challenge, we only focus on Google Chrome console. Open the console using:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;Mac&#xA;Command+Option+I&#xA;&#xA;Windows:&#xA;Ctl+Shift+I&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Console.log&lt;/h5&gt; &#xA;&lt;p&gt;To write our first JavaScript code, we used a built-in function &lt;strong&gt;console.log()&lt;/strong&gt;. We passed an argument as input data, and the function displays the output. We passed &#39;Hello, World&#39; as input data or argument in the console.log() function.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h5&gt;Console.log with Multiple Arguments&lt;/h5&gt; &#xA;&lt;p&gt;The &lt;strong&gt;console.log()&lt;/strong&gt; function can take multiple parameters separated by comma. The syntax looks like as follows:&lt;strong&gt;console.log(param1, param2, param3)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/console_log_multipl_arguments.png&#34; alt=&#34;console log multiple arguments&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello&#39;, &#39;World&#39;, &#39;!&#39;)&#xA;console.log(&#39;HAPPY&#39;, &#39;NEW&#39;, &#39;YEAR&#39;, 2020)&#xA;console.log(&#39;Welcome&#39;, &#39;to&#39;, 30, &#39;Days&#39;, &#39;Of&#39;, &#39;JavaScript&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As you can see from the snippet code above, &lt;em&gt;console.log()&lt;/em&gt; can take multiple arguments. It is recommended to use as many console.log() prints to check what is happening in your code but don&#39;t keep all console.log() tests on your code forever. Make your life easy by keeping the browser console open.&lt;/p&gt; &#xA;&lt;h5&gt;Comments&lt;/h5&gt; &#xA;&lt;p&gt;We add comments to our code. Comments are very important to make code more readable and to leave remarks in our code. JavaScript does not execute the comment part of our code.In JavaScript, any text line starting with // in JavaScript is a comment, and anything enclosed like this /* */ is also a comment.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Single Line Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;// This is the first comment&lt;br&gt; // This is the second comment&lt;br&gt; // I am a single line comment&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example: Multiline Comment&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;/* This is a multiline comment&lt;br&gt; Multiline comments can take multiple lines&lt;br&gt; JavaScript is the language of the web&lt;br&gt; */&lt;/p&gt; &#xA;&lt;h5&gt;Syntax&lt;/h5&gt; &#xA;&lt;p&gt;Programming languages are similar to human languages. English or many other language uses words, phrases, sentences, compound sentences and other more to convey a meaningful message. The English meaning of syntax is &lt;em&gt;the arrangement of words and phrases to create well-formed sentences in a language&lt;/em&gt;. The technical definition of syntax is &lt;em&gt;the structure of statements in a computer language.&lt;/em&gt; Programing languages have syntax. JavaScript is a programming language and like other programming languages it has its own syntax. If we do not write a syntax that JavaScript understands, it will raise different types of errors. We will explore different kinds of JavaScript errors later. For now, let us see syntax errors.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/raising_syntax_error.png&#34; alt=&#34;Error&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;I made a deliberate mistake. As a result, the console raises syntax errors. Actually, the syntax is very informative. It informs what type of mistake was made. By reading the error feedback guideline, we can correct the syntax and fix the problem. The process of identifying and removing errors from a program is called debugging. Let us fix the errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;console.log(&#39;Hello, World!&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;So far, we saw how to display text using the &lt;em&gt;console.log()&lt;/em&gt;. If we are printing text or string using &lt;em&gt;console.log()&lt;/em&gt;, the text has to be inside the single quotes, double quotes, or a backtick quotes. &lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(&#39;Hello, World!&#39;)&#xA;console.log(&#39;Hello, World!&#39;)&#xA;console.log(`Hello, World!`)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Arithmetics&lt;/h4&gt; &#xA;&lt;p&gt;Now, let us practice more writing JavaScript codes using &lt;em&gt;console.log()&lt;/em&gt; on google chrome console for number data types. In addition to the text, we can also do mathematical calculations using JavaScript. Let us do the following simple calculations. The console can directly take arguments without the &lt;strong&gt;&lt;em&gt;console.log()&lt;/em&gt;&lt;/strong&gt; function. However, it is included in this introduction because most of this challenge would be taking place in a text editor where the usage of the function would be mandatory. You can play around directly with instructions on the console.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/arithmetic.png&#34; alt=&#34;Arithmetic&#34;&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;console.log(2 + 3) // Addition&#xA;console.log(3 - 2) // Subtraction&#xA;console.log(2 * 3) // Multiplication&#xA;console.log(3 / 2) // Division&#xA;console.log(3 % 2) // Modulus - finding remainder&#xA;console.log(3 ** 2) // Exponentiation 3 ** 2 == 3 * 3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code Editor&lt;/h3&gt; &#xA;&lt;p&gt;We can write our codes on the browser console, but it won&#39;t do for bigger projects. In a real working environment, developers use different code editors to write their codes. In this 30 days JavaScript challenge, we will be using Visual Studio Code.&lt;/p&gt; &#xA;&lt;h4&gt;Installing Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;Visual studio code is a very popular open-source text editor. I would recommend to &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;download Visual Studio Code&lt;/a&gt;, but if you are in favor of other editors, feel free to follow with what you have.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode.png&#34; alt=&#34;Vscode&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you installed Visual Studio Code, let us start using it.&lt;/p&gt; &#xA;&lt;h4&gt;How to Use Visual Studio Code&lt;/h4&gt; &#xA;&lt;p&gt;Open the Visual Studio Code by double-clicking its icon. When you open it, you will get this kind of interface. Try to interact with the labeled icons.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vscode_ui.png&#34; alt=&#34;Vscode ui&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/adding_project_to_vscode.png&#34; alt=&#34;Vscode add project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/opening_project_on_vscode.png&#34; alt=&#34;Vscode open project&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/scripts_on_vscode.png&#34; alt=&#34;script file&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/vsc_live_server.png&#34; alt=&#34;Installing Live Server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/running_script.png&#34; alt=&#34;running script&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/images/launched_on_new_tab.png&#34; alt=&#34;coding running&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Congratulations! You have completed the setup you need to get started with React, but before we dive into React let&#39;s do a JavaScript refresher. If you are very comfortable with JavaScript you may skip day 1 JavaScript refresher. The JavaScript refresher section is vast and it may take more than one day. From my experience people usually get stuck in React because their JavaScript knowledge is very shallow therefore to fill that gap all the necessary JavaScript features which can be used in React are covered in the JavaScript refresher section. There are many exercises but you are not required to solve them. Click &lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/30-Days-Of-React/02_Day_Introduction_to_React/02_introduction_to_react.md&#34;&gt;here&lt;/a&gt; if you want skip JavaScript and jump directly into React.&lt;/p&gt; &#xA;&lt;p&gt;🎉 CONGRATULATIONS ! 🎉&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Asabeneh/30-Days-Of-React/master/01_Day_JavaScript_Refresher/01_javascript_refresher.md&#34;&gt;Day 1 &amp;gt;&amp;gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>thunlp/WantWords</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/thunlp/WantWords</id>
    <link href="https://github.com/thunlp/WantWords" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source online reverse dictionary.&lt;/p&gt;&lt;hr&gt;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/thunlp/WantWords/main/README_ZH.md&#34;&gt;中&lt;/a&gt;|En&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://wantwords.thunlp.org/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/wantwords_logo.svg?sanitize=true&#34; width=&#34;300&#34; alt=&#34;WantWords Logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;An Open-source Online Reverse Dictionary [&lt;a href=&#34;https://wantwords.net/&#34;&gt;link&lt;/a&gt;] &lt;/h3&gt; &#xA;&lt;h2&gt;News&lt;/h2&gt; &#xA;&lt;p&gt;The WantWords MiniProgram has been launched. Welcome to scan the following QR code to try it!&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/miniprogram.jpg&#34; width=&#34;300&#34; alt=&#34;MiniProgram QR code&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What Is a Reverse Dictionary?&lt;/h2&gt; &#xA;&lt;p&gt;Opposite to a regular (forward) dictionary that provides definitions for query words, a reverse dictionary returns words semantically matching the query descriptions.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/rd_example.png&#34; alt=&#34;rd_example&#34; width=&#34;600&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;What Can a Reverse Dictionary Do?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Solve the &lt;em&gt;tip-of-the-tongue problem&lt;/em&gt;, the phenomenon of failing to retrieve a word from memory&lt;/li&gt; &#xA; &lt;li&gt;Help new language learners&lt;/li&gt; &#xA; &lt;li&gt;Help word selection (or word dictionary) anomia patients, people who can recognize and describe an object but fail to name it due to neurological disorder&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Our System&lt;/h2&gt; &#xA;&lt;h3&gt;Workflow&lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/workflow.png&#34; alt=&#34;workflow&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Core Model&lt;/h3&gt; &#xA;&lt;p&gt;The core model of WantWords is based on our proposed &lt;strong&gt;Multi-channel Reverse Dictionary Model&lt;/strong&gt; [&lt;a href=&#34;https://ojs.aaai.org/index.php/AAAI/article/view/5365/5221&#34;&gt;paper&lt;/a&gt;] [&lt;a href=&#34;https://github.com/thunlp/MultiRD&#34;&gt;code&lt;/a&gt;], as illustrate in the following figure.&lt;/p&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/thunlp/WantWords/main/resources/MRD_model.png&#34; alt=&#34;model&#34; width=&#34;500&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h3&gt;Pre-trained Models and Data&lt;/h3&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://cloud.tsinghua.edu.cn/d/811dcb428ed24480bc60/&#34;&gt;download&lt;/a&gt; and decompress the pre-trained models and data to &lt;code&gt;BASE_PATH/website_RD/&lt;/code&gt; to reimplement the system.&lt;/p&gt; &#xA;&lt;h3&gt;Key Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Django==2.2.5&lt;/li&gt; &#xA; &lt;li&gt;django-cors-headers==3.5.0&lt;/li&gt; &#xA; &lt;li&gt;numpy==1.17.2&lt;/li&gt; &#xA; &lt;li&gt;pytorch-transformers==1.2.0&lt;/li&gt; &#xA; &lt;li&gt;requests==2.22.0&lt;/li&gt; &#xA; &lt;li&gt;scikit-learn==0.22.1&lt;/li&gt; &#xA; &lt;li&gt;scipy==1.4.1&lt;/li&gt; &#xA; &lt;li&gt;thulac==0.2.0&lt;/li&gt; &#xA; &lt;li&gt;torch==1.2.0&lt;/li&gt; &#xA; &lt;li&gt;urllib3==1.25.6&lt;/li&gt; &#xA; &lt;li&gt;uWSGI==2.0.18&lt;/li&gt; &#xA; &lt;li&gt;uwsgitop==0.11&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Cite&lt;/h2&gt; &#xA;&lt;p&gt;If the code or data help you, please cite the following two papers.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@inproceedings{qi2020wantwords,&#xA;  title={WantWords: An Open-source Online Reverse Dictionary System},&#xA;  author={Qi, Fanchao and Zhang, Lei and Yang, Yanhui and Liu, Zhiyuan and Sun, Maosong},&#xA;  booktitle={Proceedings of the 2020 Conference on Empirical Methods in Natural Language Processing: System Demonstrations},&#xA;  pages={175--181},&#xA;  year={2020}&#xA;}&#xA;&#xA;@inproceedings{zhang2020multi,&#xA;  title={Multi-channel reverse dictionary model},&#xA;  author={Zhang, Lei and Qi, Fanchao and Liu, Zhiyuan and Wang, Yasheng and Liu, Qun and Sun, Maosong},&#xA;  booktitle={Proceedings of the AAAI Conference on Artificial Intelligence},&#xA;  pages={312--319},&#xA;  year={2020}&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>facebook/react-native</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/facebook/react-native</id>
    <link href="https://github.com/facebook/react-native" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A framework for building native applications using React&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://reactnative.dev/&#34;&gt; React Native &lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;strong&gt;Learn once, write anywhere:&lt;/strong&gt;&lt;br&gt; Build mobile apps with React. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/LICENSE&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/license-MIT-blue.svg?sanitize=true&#34; alt=&#34;React Native is released under the MIT license.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/facebook/react-native&#34;&gt; &lt;img src=&#34;https://circleci.com/gh/facebook/react-native.svg?style=shield&#34; alt=&#34;Current CircleCI build status.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://www.npmjs.org/package/react-native&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/react-native?color=brightgreen&amp;amp;label=npm%20package&#34; alt=&#34;Current npm package version.&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?sanitize=true&#34; alt=&#34;PRs welcome!&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=reactnative&#34;&gt; &lt;img src=&#34;https://img.shields.io/twitter/follow/reactnative.svg?label=Follow%20@reactnative&#34; alt=&#34;Follow @reactnative&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; &lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;Getting Started&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/docs/tutorial&#34;&gt;Learn the Basics&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/showcase&#34;&gt;Showcase&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt;Contribute&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://reactnative.dev/help&#34;&gt;Community&lt;/a&gt; &lt;span&gt; · &lt;/span&gt; &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/.github/SUPPORT.md&#34;&gt;Support&lt;/a&gt; &lt;/h3&gt; &#xA;&lt;p&gt;React Native brings &lt;a href=&#34;https://reactjs.org/&#34;&gt;&lt;strong&gt;React&lt;/strong&gt;&#39;s&lt;/a&gt; declarative UI framework to iOS and Android. With React Native, you use native UI controls and have full access to the native platform.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Declarative.&lt;/strong&gt; React makes it painless to create interactive UIs. Declarative views make your code more predictable and easier to debug.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Component-Based.&lt;/strong&gt; Build encapsulated components that manage their state, then compose them to make complex UIs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Developer Velocity.&lt;/strong&gt; See local changes in seconds. Changes to JavaScript code can be live reloaded without rebuilding the native app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portability.&lt;/strong&gt; Reuse code across iOS, Android, and &lt;a href=&#34;https://reactnative.dev/docs/out-of-tree-platforms&#34;&gt;other platforms&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;React Native is developed and supported by many companies and individual core contributors. Find out more in our &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/ECOSYSTEM.md&#34;&gt;ecosystem overview&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-requirements&#34;&gt;Requirements&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-building-your-first-react-native-app&#34;&gt;Building your first React Native app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-upgrading&#34;&gt;Upgrading&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-how-to-contribute&#34;&gt;How to Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/facebook/react-native/main/#-license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📋 Requirements&lt;/h2&gt; &#xA;&lt;p&gt;React Native apps may target iOS 11.0 and Android 5.0 (API 21) or newer. You may use Windows, macOS, or Linux as your development operating system, though building and running iOS apps is limited to macOS. Tools like &lt;a href=&#34;https://expo.io&#34;&gt;Expo&lt;/a&gt; can be used to work around this.&lt;/p&gt; &#xA;&lt;h2&gt;🎉 Building your first React Native app&lt;/h2&gt; &#xA;&lt;p&gt;Follow the &lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;Getting Started guide&lt;/a&gt;. The recommended way to install React Native depends on your project. Here you can find short guides for the most common scenarios:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://snack.expo.io/@hramos/hello,-world!&#34;&gt;Trying out React Native&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;Creating a New Application&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://reactnative.dev/docs/integration-with-existing-apps&#34;&gt;Adding React Native to an Existing Application&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📖 Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The full documentation for React Native can be found on our &lt;a href=&#34;https://reactnative.dev/docs/getting-started&#34;&gt;website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The React Native documentation discusses components, APIs, and topics that are specific to React Native. For further documentation on the React API that is shared between React Native and React DOM, refer to the &lt;a href=&#34;https://reactjs.org/docs/getting-started.html&#34;&gt;React documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The source for the React Native documentation and website is hosted on a separate repo, &lt;a href=&#34;https://github.com/facebook/react-native-website&#34;&gt;&lt;strong&gt;@facebook/react-native-website&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 Upgrading&lt;/h2&gt; &#xA;&lt;p&gt;Upgrading to new versions of React Native may give you access to more APIs, views, developer tools, and other goodies. See the &lt;a href=&#34;https://reactnative.dev/docs/upgrading&#34;&gt;Upgrading Guide&lt;/a&gt; for instructions.&lt;/p&gt; &#xA;&lt;p&gt;React Native releases are discussed &lt;a href=&#34;https://github.com/reactwg/react-native-releases/discussions&#34;&gt;in this discussion repo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;👏 How to Contribute&lt;/h2&gt; &#xA;&lt;p&gt;The main purpose of this repository is to continue evolving React Native core. We want to make contributing to this project as easy and transparent as possible, and we are grateful to the community for contributing bug fixes and improvements. Read below to learn how you can take part in improving React Native.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://code.fb.com/codeofconduct/&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Facebook has adopted a Code of Conduct that we expect project participants to adhere to. Please read the &lt;a href=&#34;https://code.fb.com/codeofconduct/&#34;&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt;Contributing Guide&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://reactnative.dev/docs/contributing&#34;&gt;&lt;strong&gt;Contributing Guide&lt;/strong&gt;&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to React Native.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/facebook/react-native/wiki/Roadmap&#34;&gt;Open Source Roadmap&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;You can learn more about our vision for React Native in the &lt;a href=&#34;https://github.com/facebook/react-native/wiki/Roadmap&#34;&gt;&lt;strong&gt;Roadmap&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Good First Issues&lt;/h3&gt; &#xA;&lt;p&gt;We have a list of &lt;a href=&#34;https://github.com/facebook/react-native/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; &#xA;&lt;h3&gt;Discussions&lt;/h3&gt; &#xA;&lt;p&gt;Larger discussions and proposals are discussed in &lt;a href=&#34;https://github.com/react-native-community/discussions-and-proposals&#34;&gt;&lt;strong&gt;@react-native-community/discussions-and-proposals&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;📄 License&lt;/h2&gt; &#xA;&lt;p&gt;React Native is MIT licensed, as found in the &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;React Native documentation is Creative Commons licensed, as found in the &lt;a href=&#34;https://github.com/facebook/react-native/raw/HEAD/LICENSE-docs&#34;&gt;LICENSE-docs&lt;/a&gt; file.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>sudheerj/reactjs-interview-questions</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/sudheerj/reactjs-interview-questions</id>
    <link href="https://github.com/sudheerj/reactjs-interview-questions" rel="alternate"></link>
    <summary type="html">&lt;p&gt;List of top 500 ReactJS Interview Questions &amp; Answers....Coding exercise questions are coming soon!!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React Interview Questions &amp;amp; Answers&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Click &lt;span&gt;⭐&lt;/span&gt;if you like the project. Pull Request are highly appreciated. Follow me &lt;a href=&#34;https://twitter.com/SudheerJonna&#34;&gt;@SudheerJonna&lt;/a&gt; for technical updates.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;div&gt;&#xA;  Learn to code and get hired with &#xA; &lt;a href=&#34;https://zerotomastery.io/?utm_source=github&amp;amp;utm_medium=sponsor&amp;amp;utm_campaign=reactjs-interview-questions&#34;&gt;Zero To Mastery:&lt;/a&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;This &lt;a href=&#34;https://links.zerotomastery.io/react_sudheer&#34;&gt;React course&lt;/a&gt; is good if you’re struggling to learn React beyond the basics&lt;/li&gt; &#xA;  &lt;li&gt;This &lt;a href=&#34;http://links.zerotomastery.io/mci_sudheer&#34;&gt;coding interview bootcamp&lt;/a&gt; is helpful if you’re serious about getting hired as a developer&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/div&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This repository is specific to ReactJS. Please check &lt;a href=&#34;https://github.com/sudheerj/javascript-interview-questions&#34;&gt;Javascript Interview questions&lt;/a&gt; for core javascript questions.&lt;/p&gt; &#xA;&lt;h2&gt;Downloading PDF/Epub formats&lt;/h2&gt; &#xA;&lt;p&gt;You can download the PDF and Epub version of this repository from the latest run on the &lt;a href=&#34;https://github.com/sudheerj/reactjs-interview-questions/actions&#34;&gt;actions tab&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Table of Contents&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;No.&lt;/th&gt; &#xA;   &lt;th&gt;Questions&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Core React&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react&#34;&gt;What is React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-major-features-of-react&#34;&gt;What are the major features of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jsx&#34;&gt;What is JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-element-and-component&#34;&gt;What is the difference between Element and Component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-components-in-react&#34;&gt;How to create components in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-to-use-a-class-component-over-a-function-component&#34;&gt;When to use a Class Component over a Function Component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-pure-components&#34;&gt;What are Pure Components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-in-react&#34;&gt;What is state in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-props-in-react&#34;&gt;What are props in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-state-and-props&#34;&gt;What is the difference between state and props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-we-not-update-the-state-directly&#34;&gt;Why should we not update the state directly?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-callback-function-as-an-argument-of-setstate&#34;&gt;What is the purpose of callback function as an argument of setState()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-html-and-react-event-handling&#34;&gt;What is the difference between HTML and React event handling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-bind-methods-or-event-handlers-in-jsx-callbacks&#34;&gt;How to bind methods or event handlers in JSX callbacks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-a-parameter-to-an-event-handler-or-callback&#34;&gt;How to pass a parameter to an event handler or callback?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-synthetic-events-in-react&#34;&gt;What are synthetic events in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-inline-conditional-expressions&#34;&gt;What are inline conditional expressions?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-key-prop-and-what-is-the-benefit-of-using-it-in-arrays-of-elements&#34;&gt;What is &#34;key&#34; prop and what is the benefit of using it in arrays of elements?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-refs&#34;&gt;What is the use of refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-refs&#34;&gt;How to create refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-forward-refs&#34;&gt;What are forward refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#which-is-preferred-option-with-in-callback-refs-and-finddomnode&#34;&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-string-refs-legacy&#34;&gt;Why are String Refs legacy?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;24&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-virtual-dom&#34;&gt;What is Virtual DOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-virtual-dom-works&#34;&gt;How Virtual DOM works?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;26&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-shadow-dom-and-virtual-dom&#34;&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;27&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-fiber&#34;&gt;What is React Fiber?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;28&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-goal-of-react-fiber&#34;&gt;What is the main goal of React Fiber?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;29&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-controlled-components&#34;&gt;What are controlled components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;30&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-uncontrolled-components&#34;&gt;What are uncontrolled components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;31&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-createelement-and-cloneelement&#34;&gt;What is the difference between createElement and cloneElement?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;32&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-lifting-state-up-in-react&#34;&gt;What is Lifting State Up in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;33&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-phases-of-component-lifecycle&#34;&gt;What are the different phases of component lifecycle?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;34&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-of-react&#34;&gt;What are the lifecycle methods of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;35&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-higher-order-components&#34;&gt;What are Higher-Order components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;36&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-props-proxy-for-hoc-component&#34;&gt;How to create props proxy for HOC component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;37&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-context&#34;&gt;What is context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;38&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-children-prop&#34;&gt;What is children prop?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;39&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-write-comments-in-react&#34;&gt;How to write comments in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;40&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-using-super-constructor-with-props-argument&#34;&gt;What is the purpose of using super constructor with props argument?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;41&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reconciliation&#34;&gt;What is reconciliation?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;42&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-state-with-a-dynamic-key-name&#34;&gt;How to set state with a dynamic key name?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;43&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-would-be-the-common-mistake-of-function-being-called-every-time-the-component-renders&#34;&gt;What would be the common mistake of function being called every time the component renders?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;44&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-lazy-function-supports-named-exports&#34;&gt;Is lazy function supports named exports?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;45&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-uses-classname-over-class-attribute&#34;&gt;Why React uses className over class attribute?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;46&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-fragments&#34;&gt;What are fragments?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;47&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-fragments-are-better-than-container-divs&#34;&gt;Why fragments are better than container divs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;48&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-portals-in-react&#34;&gt;What are portals in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;49&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateless-components&#34;&gt;What are stateless components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;50&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-stateful-components&#34;&gt;What are stateful components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;51&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-apply-validation-on-props-in-react&#34;&gt;How to apply validation on props in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;52&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react&#34;&gt;What are the advantages of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;53&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-of-react&#34;&gt;What are the limitations of React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;54&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-error-boundaries-in-react-v16&#34;&gt;What are error boundaries in React v16&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;55&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-error-boundaries-handled-in-react-v15&#34;&gt;How error boundaries handled in React v15?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;56&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-recommended-ways-for-static-type-checking&#34;&gt;What are the recommended ways for static type checking?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;57&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-react-dom-package&#34;&gt;What is the use of react-dom package?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;58&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-render-method-of-react-dom&#34;&gt;What is the purpose of render method of react-dom?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;59&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reactdomserver&#34;&gt;What is ReactDOMServer?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;60&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-innerhtml-in-react&#34;&gt;How to use InnerHtml in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;61&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-styles-in-react&#34;&gt;How to use styles in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;62&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-events-are-different-in-react&#34;&gt;How events are different in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;63&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-setstate-in-constructor&#34;&gt;What will happen if you use setState in constructor?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;64&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-impact-of-indexes-as-keys&#34;&gt;What is the impact of indexes as keys?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;65&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-setstate-in-componentwillmount-method&#34;&gt;Is it good to use setState() in componentWillMount() method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;66&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-will-happen-if-you-use-props-in-initial-state&#34;&gt;What will happen if you use props in initial state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;67&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-conditionally-render-components&#34;&gt;How do you conditionally render components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;68&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-be-careful-when-spreading-props-on-dom-elements&#34;&gt;Why we need to be careful when spreading props on DOM elements??&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;69&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-use-decorators-in-react&#34;&gt;How you use decorators in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;70&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-memoize-a-component&#34;&gt;How do you memoize a component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;71&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-you-implement-server-side-rendering-or-ssr&#34;&gt;How you implement Server-Side Rendering or SSR?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;72&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-enable-production-mode-in-react&#34;&gt;How to enable production mode in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;73&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-cra-and-its-benefits&#34;&gt;What is CRA and its benefits?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;74&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-lifecycle-methods-order-in-mounting&#34;&gt;What is the lifecycle methods order in mounting?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;75&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-lifecycle-methods-going-to-be-deprecated-in-react-v16&#34;&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;76&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromprops-lifecycle-method&#34;&gt;What is the purpose of getDerivedStateFromProps() lifecycle method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;77&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getsnapshotbeforeupdate-lifecycle-method&#34;&gt;What is the purpose of getSnapshotBeforeUpdate() lifecycle method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;78&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-hooks-replace-render-props-and-higher-order-components&#34;&gt;Do Hooks replace render props and higher order components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;79&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-way-for-naming-components&#34;&gt;What is the recommended way for naming components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;80&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-ordering-of-methods-in-component-class&#34;&gt;What is the recommended ordering of methods in component class?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;81&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-switching-component&#34;&gt;What is a switching component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;82&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-we-need-to-pass-a-function-to-setstate&#34;&gt;Why we need to pass a function to setState()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;83&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-strict-mode-in-react&#34;&gt;What is strict mode in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;84&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-mixins&#34;&gt;What are React Mixins?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;85&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-ismounted-an-anti-pattern-and-what-is-the-proper-solution&#34;&gt;Why is isMounted() an anti-pattern and what is the proper solution?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;86&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-pointer-events-supported-in-react&#34;&gt;What are the Pointer Events supported in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;87&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-component-names-start-with-capital-letter&#34;&gt;Why should component names start with capital letter?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;88&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-custom-dom-attributes-supported-in-react-v16&#34;&gt;Are custom DOM attributes supported in React v16?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;89&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-constructor-and-getinitialstate&#34;&gt;What is the difference between constructor and getInitialState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;90&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-force-a-component-to-re-render-without-calling-setstate&#34;&gt;Can you force a component to re-render without calling setState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;91&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-super-and-superprops-in-react-using-es6-classes&#34;&gt;What is the difference between super() and super(props) in React using ES6 classes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;92&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-loop-inside-jsx&#34;&gt;How to loop inside JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;93&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-props-in-attribute-quotes&#34;&gt;How do you access props in attribute quotes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;94&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-proptype-array-with-shape&#34;&gt;What is React PropType array with shape?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;95&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-conditionally-apply-class-attributes&#34;&gt;How to conditionally apply class attributes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;96&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-reactdom&#34;&gt;What is the difference between React and ReactDOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;97&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-reactdom-is-separated-from-react&#34;&gt;Why ReactDOM is separated from React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;98&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-react-label-element&#34;&gt;How to use React label element?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;99&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-combine-multiple-inline-style-objects&#34;&gt;How to combine multiple inline style objects?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-re-render-the-view-when-the-browser-is-resized&#34;&gt;How to re-render the view when the browser is resized?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;101&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-setstate-and-replacestate-methods&#34;&gt;What is the difference between setState and replaceState methods?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;102&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-listen-to-state-changes&#34;&gt;How to listen to state changes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;103&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-recommended-approach-of-removing-an-array-element-in-react-state&#34;&gt;What is the recommended approach of removing an array element in react state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;104&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-rendering-html&#34;&gt;Is it possible to use React without rendering HTML?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;105&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pretty-print-json-with-react&#34;&gt;How to pretty print JSON with React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;106&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-cant-update-props-in-react&#34;&gt;Why you can&#39;t update props in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;107&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-focus-an-input-element-on-page-load&#34;&gt;How to focus an input element on page load?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;108&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-ways-of-updating-objects-in-state&#34;&gt;What are the possible ways of updating objects in state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;110&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-can-we-find-the-version-of-react-at-runtime-in-the-browser&#34;&gt;How can we find the version of React at runtime in the browser?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;111&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-approaches-to-include-polyfills-in-your-create-react-app&#34;&gt;What are the approaches to include polyfills in your create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;112&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-https-instead-of-http-in-create-react-app&#34;&gt;How to use https instead of http in create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;113&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-avoid-using-relative-path-imports-in-create-react-app&#34;&gt;How to avoid using relative path imports in create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;114&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-google-analytics-for-react-router&#34;&gt;How to add Google Analytics for react-router?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;115&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-update-a-component-every-second&#34;&gt;How to update a component every second?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;116&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-apply-vendor-prefixes-to-inline-styles-in-react&#34;&gt;How do you apply vendor prefixes to inline styles in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;117&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-import-and-export-components-using-react-and-es6&#34;&gt;How to import and export components using react and ES6?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;118&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-exceptions-on-react-component-naming&#34;&gt;What are the exceptions on React component naming?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;119&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-a-component-constructor-called-only-once&#34;&gt;Why is a component constructor called only once?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;120&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-define-constants-in-react&#34;&gt;How to define constants in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;121&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-programmatically-trigger-click-event-in-react&#34;&gt;How to programmatically trigger click event in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;122&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-asyncawait-in-plain-react&#34;&gt;Is it possible to use async/await in plain React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;123&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-common-folder-structures-for-react&#34;&gt;What are the common folder structures for React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;124&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-packages-for-animation&#34;&gt;What are the popular packages for animation?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;125&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-styles-modules&#34;&gt;What is the benefit of styles modules?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;126&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-popular-react-specific-linters&#34;&gt;What are the popular React-specific linters?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;127&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-call-and-in-which-component-lifecycle-methods-should-i-make-an-ajax-call&#34;&gt;How to make AJAX call and In which component lifecycle methods should I make an AJAX call?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;128&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-render-props&#34;&gt;What are render props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Router&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;129&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-router&#34;&gt;What is React Router?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;130&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-router-is-different-from-history-library&#34;&gt;How React Router is different from history library?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;131&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-router-components-of-react-router-v4&#34;&gt;What are the &amp;lt;Router&amp;gt; components of React Router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;132&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-push-and-replace-methods-of-history&#34;&gt;What is the purpose of push and replace methods of history?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;133&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-programmatically-navigate-using-react-router-v4&#34;&gt;How do you programmatically navigate using React router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;134&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-query-parameters-in-react-router-v4&#34;&gt;How to get query parameters in React Router v4&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;135&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-you-get-router-may-have-only-one-child-element-warning&#34;&gt;Why you get &#34;Router may have only one child element&#34; warning?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;136&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-params-to-historypush-method-in-react-router-v4&#34;&gt;How to pass params to history.push method in React Router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;137&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-implement-default-or-notfound-page&#34;&gt;How to implement default or NotFound page?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;138&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-get-history-on-react-router-v4&#34;&gt;How to get history on React Router v4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;139&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-perform-automatic-redirect-after-login&#34;&gt;How to perform automatic redirect after login?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Internationalization&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;140&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-intl&#34;&gt;What is React-Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;141&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-react-intl&#34;&gt;What are the main features of React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;142&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-two-ways-of-formatting-in-react-intl&#34;&gt;What are the two ways of formatting in React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;143&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-formattedmessage-as-placeholder-using-react-intl&#34;&gt;How to use FormattedMessage as placeholder using React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;144&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-current-locale-with-react-intl&#34;&gt;How to access current locale with React Intl&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;145&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-format-date-using-react-intl&#34;&gt;How to format date using React Intl?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Testing&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;146&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-shallow-renderer-in-react-testing&#34;&gt;What is Shallow Renderer in React testing?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;147&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-testrenderer-package-in-react&#34;&gt;What is TestRenderer package in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;148&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-reacttestutils-package&#34;&gt;What is the purpose of ReactTestUtils package?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;149&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-jest&#34;&gt;What is Jest?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;150&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-jest-over-jasmine&#34;&gt;What are the advantages of Jest over Jasmine?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;151&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-a-simple-example-of-jest-test-case&#34;&gt;Give a simple example of Jest test case&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Redux&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;152&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flux&#34;&gt;What is Flux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;153&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux&#34;&gt;What is Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;154&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-core-principles-of-redux&#34;&gt;What are the core principles of Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;155&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-downsides-of-redux-compared-to-flux&#34;&gt;What are the downsides of Redux compared to Flux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;156&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-mapstatetoprops-and-mapdispatchtoprops&#34;&gt;What is the difference between mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;157&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-dispatch-an-action-in-reducer&#34;&gt;Can I dispatch an action in reducer?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;158&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-access-redux-store-outside-a-component&#34;&gt;How to access Redux store outside a component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;159&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-drawbacks-of-mvw-pattern&#34;&gt;What are the drawbacks of MVW pattern&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;160&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#are-there-any-similarities-between-redux-and-rxjs&#34;&gt;Are there any similarities between Redux and RxJS?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;161&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-dispatch-an-action-on-load&#34;&gt;How to dispatch an action on load?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;162&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-connect-from-react-redux&#34;&gt;How to use connect from React Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;163&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-reset-state-in-redux&#34;&gt;How to reset state in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;164&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#whats-the-purpose-of-at-symbol-in-the-redux-connect-decorator&#34;&gt;Whats the purpose of at symbol in the redux connect decorator?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;165&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-context-and-react-redux&#34;&gt;What is the difference between React context and React Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;166&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-redux-state-functions-called-reducers&#34;&gt;Why are Redux state functions called reducers?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;167&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-make-ajax-request-in-redux&#34;&gt;How to make AJAX request in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;168&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-keep-all-components-state-in-redux-store&#34;&gt;Should I keep all component&#39;s state in Redux store?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;169&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-way-to-access-redux-store&#34;&gt;What is the proper way to access Redux store?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;170&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-component-and-container-in-react-redux&#34;&gt;What is the difference between component and container in React Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;171&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-the-constants-in-redux&#34;&gt;What is the purpose of the constants in Redux? &lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;172&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-different-ways-to-write-mapdispatchtoprops&#34;&gt;What are the different ways to write mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;173&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-use-of-the-ownprops-parameter-in-mapstatetoprops-and-mapdispatchtoprops&#34;&gt;What is the use of the ownProps parameter in mapStateToProps() and mapDispatchToProps()?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;174&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-structure-redux-top-level-directories&#34;&gt;How to structure Redux top level directories?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;175&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-saga&#34;&gt;What is redux-saga?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;176&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-mental-model-of-redux-saga&#34;&gt;What is the mental model of redux-saga?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;177&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-call-and-put-in-redux-saga&#34;&gt;What are the differences between call and put in redux-saga&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;178&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-thunk&#34;&gt;What is Redux Thunk?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;179&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-saga-and-redux-thunk&#34;&gt;What are the differences between redux-saga and redux-thunk&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-devtools&#34;&gt;What is Redux DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;181&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-redux-devtools&#34;&gt;What are the features of Redux DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;182&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-redux-selectors-and-why-to-use-them&#34;&gt;What are Redux selectors and Why to use them?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;183&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-redux-form&#34;&gt;What is Redux Form?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;184&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-redux-form&#34;&gt;What are the main features of Redux Form?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;185&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-multiple-middlewares-to-redux&#34;&gt;How to add multiple middlewares to Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;186&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-set-initial-state-in-redux&#34;&gt;How to set initial state in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;187&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-relay-is-different-from-redux&#34;&gt;How Relay is different from Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;188&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-an-action-in-redux&#34;&gt;What is an action in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React Native&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;188&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-native-and-react&#34;&gt;What is the difference between React Native and React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;189&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-test-react-native-apps&#34;&gt;How to test React Native apps?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;190&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-do-logging-in-react-native&#34;&gt;How to do logging in React Native?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;191&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-your-react-native&#34;&gt;How to debug your React Native?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;React supported libraries and Integration&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;192&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-reselect-and-how-it-works&#34;&gt;What is reselect and how it works?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;193&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-flow&#34;&gt;What is Flow?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;194&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-flow-and-proptypes&#34;&gt;What is the difference between Flow and PropTypes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;195&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-font-awesome-icons-in-react&#34;&gt;How to use font-awesome icons in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;196&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-dev-tools&#34;&gt;What is React Dev Tools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;197&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-is-devtools-not-loading-in-chrome-for-local-files&#34;&gt;Why is DevTools not loading in Chrome for local files?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;198&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-polymer-in-react&#34;&gt;How to use Polymer in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;199&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-react-over-vuejs&#34;&gt;What are the advantages of React over Vue.js?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;200&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-react-and-angular&#34;&gt;What is the difference between React and Angular?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;201&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-react-tab-is-not-showing-up-in-devtools&#34;&gt;Why React tab is not showing up in DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;202&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-styled-components&#34;&gt;What are styled components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;203&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-styled-components&#34;&gt;Give an example of Styled Components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;204&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-relay&#34;&gt;What is Relay?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;205&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-typescript-in-create-react-app-application&#34;&gt;How to use TypeScript in create-react-app application?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;206&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-main-features-of-reselect-library&#34;&gt;What are the main features of reselect library?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;207&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-of-reselect-usage&#34;&gt;Give an example of reselect usage?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;209&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-the-statics-object-work-with-es6-classes-in-react&#34;&gt;Does the statics object work with ES6 classes in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;210&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-redux-only-be-used-with-react&#34;&gt;Can Redux only be used with React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;211&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-you-need-to-have-a-particular-build-tool-to-use-redux&#34;&gt;Do you need to have a particular build tool to use Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;212&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-redux-form-initialvalues-get-updated-from-state&#34;&gt;How Redux Form initialValues get updated from state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;213&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-react-proptypes-allow-different-types-for-one-prop&#34;&gt;How React PropTypes allow different type for one prop?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;214&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-import-an-svg-file-as-react-component&#34;&gt;Can I import an SVG file as react component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;215&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-are-inline-ref-callbacks-or-functions-not-recommended&#34;&gt;Why are inline ref callbacks or functions not recommended?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;216&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-render-hijacking-in-react&#34;&gt;What is render hijacking in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;217&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hoc-factory-implementations&#34;&gt;What are HOC factory implementations?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;218&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-pass-numbers-to-react-component&#34;&gt;How to pass numbers to React component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;219&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-keep-all-my-state-into-redux-should-i-ever-use-react-internal-state&#34;&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;220&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-registerserviceworker-in-react&#34;&gt;What is the purpose of registerServiceWorker in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;221&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-memo-function&#34;&gt;What is React memo function?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;222&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-lazy-function&#34;&gt;What is React lazy function?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;223&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-unnecessary-updates-using-setstate&#34;&gt;How to prevent unnecessary updates using setState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;224&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-render-array-strings-and-numbers-in-react-16-version&#34;&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;225&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-use-class-field-declarations-syntax-in-react-classes&#34;&gt;How to use class field declarations syntax in React classes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;226&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-hooks&#34;&gt;What are hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;227&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-rules-need-to-be-followed-for-hooks&#34;&gt;What rules need to be followed for hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;228&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-ensure-hooks-followed-the-rules-in-your-project&#34;&gt;How to ensure hooks followed the rules in your project?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;229&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-flux-and-redux&#34;&gt;What are the differences between Flux and Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;230&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-react-router-v4&#34;&gt;What are the benefits of React Router V4?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;231&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-describe-about-componentdidcatch-lifecycle-method-signature&#34;&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;232&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#in-which-scenarios-error-boundaries-do-not-catch-errors&#34;&gt;In which scenarios error boundaries do not catch errors?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;233&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-need-error-boundaries-for-event-handlers&#34;&gt;Why do you not need error boundaries for event handlers?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;234&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-try-catch-block-and-error-boundaries&#34;&gt;What is the difference between try catch block and error boundaries?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;235&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-behavior-of-uncaught-errors-in-react-16&#34;&gt;What is the behavior of uncaught errors in react 16?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;236&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-proper-placement-for-error-boundaries&#34;&gt;What is the proper placement for error boundaries?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;237&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-component-stack-trace-from-error-boundary&#34;&gt;What is the benefit of component stack trace from error boundary?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;238&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-required-method-to-be-defined-for-a-class-component&#34;&gt;What is the required method to be defined for a class component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;239&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-possible-return-types-of-render-method&#34;&gt;What are the possible return types of render method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;240&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-main-purpose-of-constructor&#34;&gt;What is the main purpose of constructor?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;241&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-mandatory-to-define-constructor-for-react-component&#34;&gt;Is it mandatory to define constructor for React component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;242&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-default-props&#34;&gt;What are default props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;243&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-should-not-call-setstate-in-componentwillunmount&#34;&gt;Why should not call setState in componentWillUnmount?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;244&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-getderivedstatefromerror&#34;&gt;What is the purpose of getDerivedStateFromError?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;245&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-methods-order-when-component-re-rendered&#34;&gt;What is the methods order when component re-rendered?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;246&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-methods-invoked-during-error-handling&#34;&gt;What are the methods invoked during error handling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;247&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-displayname-class-property&#34;&gt;What is the purpose of displayName class property?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;248&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-browser-support-for-react-applications&#34;&gt;What is the browser support for react applications?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;249&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-unmountcomponentatnode-method&#34;&gt;What is the purpose of unmountComponentAtNode method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;250&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-code-splitting&#34;&gt;What is code-splitting?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;251&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-benefit-of-strict-mode&#34;&gt;What is the benefit of strict mode?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;252&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-keyed-fragments&#34;&gt;What are Keyed Fragments?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;253&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#does-react-support-all-html-attributes&#34;&gt;Does React support all HTML attributes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;254&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-limitations-with-hocs&#34;&gt;What are the limitations with HOCs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;255&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-debug-forwardrefs-in-devtools&#34;&gt;How to debug forwardRefs in DevTools?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;256&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-component-props-defaults-to-true&#34;&gt;When component props defaults to true?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;257&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-nextjs-and-major-features-of-it&#34;&gt;What is NextJS and major features of it?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;258&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-an-event-handler-to-a-component&#34;&gt;How do you pass an event handler to a component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;259&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-good-to-use-arrow-functions-in-render-methods&#34;&gt;Is it good to use arrow functions in render methods?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;260&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-a-function-from-being-called-multiple-times&#34;&gt;How to prevent a function from being called multiple times?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;261&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-jsx-prevents-injection-attacks&#34;&gt;How JSX prevents Injection Attacks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;262&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-update-rendered-elements&#34;&gt;How do you update rendered elements?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;263&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-props-are-read-only&#34;&gt;How do you say that props are read only?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;264&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-say-that-state-updates-are-merged&#34;&gt;How do you say that state updates are merged?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;265&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-pass-arguments-to-an-event-handler&#34;&gt;How do you pass arguments to an event handler?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;266&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-prevent-component-from-rendering&#34;&gt;How to prevent component from rendering?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;267&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-conditions-to-safely-use-the-index-as-a-key&#34;&gt;What are the conditions to safely use the index as a key?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;268&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-keys-should-be-globally-unique&#34;&gt;Is it keys should be globally unique?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;269&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-popular-choice-for-form-handling&#34;&gt;What is the popular choice for form handling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;270&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-advantages-of-formik-over-redux-form-library&#34;&gt;What are the advantages of formik over redux form library?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;271&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-not-required-to-use-inheritance&#34;&gt;Why do you not required to use inheritance?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;272&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-web-components-in-react-application&#34;&gt;Can I use web components in react application?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;273&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-dynamic-import&#34;&gt;What is dynamic import?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;274&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-loadable-components&#34;&gt;What are loadable components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;275&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-suspense-component&#34;&gt;What is suspense component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;276&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-route-based-code-splitting&#34;&gt;What is route based code splitting?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;277&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#give-an-example-on-how-to-use-context&#34;&gt;Give an example on How to use context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;278&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-default-value-in-context&#34;&gt;What is the purpose of default value in context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;279&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-use-contexttype&#34;&gt;How do you use contextType?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;280&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-a-consumer&#34;&gt;What is a consumer?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;281&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-solve-performance-corner-cases-while-using-context&#34;&gt;How do you solve performance corner cases while using context?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;282&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-forward-ref-in-hocs&#34;&gt;What is the purpose of forward ref in HOCs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;283&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-ref-argument-available-for-all-functions-or-class-components&#34;&gt;Is it ref argument available for all functions or class components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;284&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-you-need-additional-care-for-component-libraries-while-using-forward-refs&#34;&gt;Why do you need additional care for component libraries while using forward refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;285&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-create-react-class-components-without-es6&#34;&gt;How to create react class components without ES6?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;286&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-possible-to-use-react-without-jsx&#34;&gt;Is it possible to use react without JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;287&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-diffing-algorithm&#34;&gt;What is diffing algorithm?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;288&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-rules-covered-by-diffing-algorithm&#34;&gt;What are the rules covered by diffing algorithm?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;289&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#when-do-you-need-to-use-refs&#34;&gt;When do you need to use refs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;290&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-prop-must-be-named-as-render-for-render-props&#34;&gt;Is it prop must be named as render for render props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;291&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-problems-of-using-render-props-with-pure-components&#34;&gt;What are the problems of using render props with pure components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;292&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-create-hoc-using-render-props&#34;&gt;How do you create HOC using render props?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;293&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-windowing-technique&#34;&gt;What is windowing technique?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;294&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-print-falsy-values-in-jsx&#34;&gt;How do you print falsy values in JSX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;295&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-typical-use-case-of-portals&#34;&gt;What is the typical use case of portals?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;296&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-set-default-value-for-uncontrolled-component&#34;&gt;How do you set default value for uncontrolled component?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;297&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-your-favorite-react-stack&#34;&gt;What is your favorite React stack?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;298&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-real-dom-and-virtual-dom&#34;&gt;What is the difference between Real DOM and Virtual DOM?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;299&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-add-bootstrap-to-a-react-application&#34;&gt;How to add Bootstrap to a react application?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;300&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-you-list-down-top-websites-or-applications-using-react-as-front-end-framework&#34;&gt;Can you list down top websites or applications using react as front end framework?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;301&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-it-recommended-to-use-css-in-js-technique-in-react&#34;&gt;Is it recommended to use CSS In JS technique in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;302&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-i-need-to-rewrite-all-my-class-components-with-hooks&#34;&gt;Do I need to rewrite all my class components with hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;303&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-to-fetch-data-with-react-hooks&#34;&gt;How to fetch data with React Hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;304&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#is-hooks-cover-all-use-cases-for-classes&#34;&gt;Is Hooks cover all use cases for classes?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;305&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-stable-release-for-hooks-support&#34;&gt;What is the stable release for hooks support?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;306&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#why-do-we-use-array-destructuring-square-brackets-notation-in-usestate&#34;&gt;Why do we use array destructuring (square brackets notation) in useState?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;307&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-sources-used-for-introducing-hooks&#34;&gt;What are the sources used for introducing hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;308&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-access-imperative-api-of-web-components&#34;&gt;How do you access imperative API of web components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;309&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-formik&#34;&gt;What is formik?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;310&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-typical-middleware-choices-for-handling-asynchronous-calls-in-redux&#34;&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;311&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#do-browsers-understand-jsx-code&#34;&gt;Do browsers understand JSX code?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;312&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#describe-about-data-flow-in-react&#34;&gt;Describe about data flow in react?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;313&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-react-scripts&#34;&gt;What is react scripts?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;314&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-features-of-create-react-app&#34;&gt;What are the features of create react app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;315&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-rendertonodestream-method&#34;&gt;What is the purpose of renderToNodeStream method?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;316&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-mobx&#34;&gt;What is MobX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;317&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-differences-between-redux-and-mobx&#34;&gt;What are the differences between Redux and MobX?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;318&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#should-i-learn-es6-before-learning-reactjs&#34;&gt;Should I learn ES6 before learning ReactJS?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;319&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-concurrent-rendering&#34;&gt;What is Concurrent Rendering?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;320&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-async-mode-and-concurrent-mode&#34;&gt;What is the difference between async mode and concurrent mode?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;321&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#can-i-use-javascript-urls-in-react169&#34;&gt;Can I use javascript urls in react16.9?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;322&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-purpose-of-eslint-plugin-for-hooks&#34;&gt;What is the purpose of eslint plugin for hooks?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;323&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-imperative-and-declarative-in-react&#34;&gt;What is the difference between Imperative and Declarative in React?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;324&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-using-typescript-with-reactjs&#34;&gt;What are the benefits of using typescript with reactjs?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;325&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-make-sure-that-user-remains-authenticated-on-page-refresh-while-using-context-api-state-management&#34;&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;326&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-the-benefits-of-new-jsx-transform&#34;&gt;What are the benefits of new JSX transform?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;327&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-does-new-jsx-transform-different-from-old-transform&#34;&gt;How does new JSX transform different from old transform?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;328&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#how-do-you-get-redux-scaffolding-using-create-react-app&#34;&gt;How do you get redux scaffolding using create-react-app?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;329&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-are-react-server-components&#34;&gt;What are React Server components?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;330&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-prop-drilling&#34;&gt;What is prop drilling?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;331&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-state-mutation-and-how-to-prevent-it&#34;&gt;What is state mutation and how to prevent it?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;332&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#what-is-the-difference-between-usestate-and-useref-hook&#34;&gt;What is the difference between useState and useRef hook?&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Core React&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React?&lt;/h3&gt; &lt;p&gt;React is an &lt;strong&gt;open-source front-end JavaScript library&lt;/strong&gt; that is used for building user interfaces, especially for single-page applications. It is used for handling view layer for web and mobile apps. React was created by &lt;a href=&#34;https://github.com/jordwalke&#34;&gt;Jordan Walke&lt;/a&gt;, a software engineer working for Facebook. React was first deployed on Facebook&#39;s News Feed in 2011 and on Instagram in 2012.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the major features of React?&lt;/h3&gt; &lt;p&gt;The major features of React are:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;It uses &lt;strong&gt;VirtualDOM&lt;/strong&gt; instead of RealDOM considering that RealDOM manipulations are expensive.&lt;/li&gt; &#xA;   &lt;li&gt;Supports &lt;strong&gt;server-side rendering&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Follows &lt;strong&gt;Unidirectional&lt;/strong&gt; data flow or data binding.&lt;/li&gt; &#xA;   &lt;li&gt;Uses &lt;strong&gt;reusable/composable&lt;/strong&gt; UI components to develop the view.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is JSX?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;JSX&lt;/em&gt; is a XML-like syntax extension to ECMAScript (the acronym stands for &lt;em&gt;JavaScript XML&lt;/em&gt;). Basically it just provides syntactic sugar for the &lt;code&gt;React.createElement()&lt;/code&gt; function, giving us expressiveness of JavaScript along with HTML like template syntax.&lt;/p&gt; &lt;p&gt;In the example below text inside &lt;code&gt;&amp;lt;h1&amp;gt;&lt;/code&gt; tag is returned as JavaScript function to the render function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class App extends React.Component {&#xA;  render() {&#xA;    return(&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;h1&amp;gt;{&#39;Welcome to React world!&#39;}&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Element and Component?&lt;/h3&gt; &lt;p&gt;An &lt;em&gt;Element&lt;/em&gt; is a plain object describing what you want to appear on the screen in terms of the DOM nodes or other components. &lt;em&gt;Elements&lt;/em&gt; can contain other &lt;em&gt;Elements&lt;/em&gt; in their props. Creating a React element is cheap. Once an element is created, it is never mutated.&lt;/p&gt; &lt;p&gt;The object representation of React Element would be as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const element = React.createElement(&#xA;  &#39;div&#39;,&#xA;  {id: &#39;login-btn&#39;},&#xA;  &#39;Login&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above &lt;code&gt;React.createElement()&lt;/code&gt; function returns an object:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;  type: &#39;div&#39;,&#xA;  props: {&#xA;    children: &#39;Login&#39;,&#xA;    id: &#39;login-btn&#39;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And finally it renders to the DOM using &lt;code&gt;ReactDOM.render()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div id=&#39;login-btn&#39;&amp;gt;Login&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas a &lt;strong&gt;component&lt;/strong&gt; can be declared in several different ways. It can be a class with a &lt;code&gt;render()&lt;/code&gt; method or it can be defined as a function. In either case, it takes props as an input, and returns a JSX tree as the output:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Button = ({ onLogin }) =&amp;gt;&#xA;  &amp;lt;div id={&#39;login-btn&#39;} onClick={onLogin}&amp;gt;Login&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then JSX gets transpiled to a &lt;code&gt;React.createElement()&lt;/code&gt; function tree:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const Button = ({ onLogin }) =&amp;gt; React.createElement(&#xA;  &#39;div&#39;,&#xA;  { id: &#39;login-btn&#39;, onClick: onLogin },&#xA;  &#39;Login&#39;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create components in React?&lt;/h3&gt; &lt;p&gt;There are two possible ways to create a component.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Function Components:&lt;/strong&gt; This is the simplest way to create a component. Those are pure JavaScript functions that accept props object as the first parameter and return React elements:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Greeting({ message }) {&#xA;  return &amp;lt;h1&amp;gt;{`Hello, ${message}`}&amp;lt;/h1&amp;gt;&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Class Components:&lt;/strong&gt; You can also use ES6 class to define a component. The above function component can be written as:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class Greeting extends React.Component {&#xA;  render() {&#xA;    return &amp;lt;h1&amp;gt;{`Hello, ${this.props.message}`}&amp;lt;/h1&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;When to use a Class Component over a Function Component?&lt;/h3&gt; &lt;p&gt;If the component needs &lt;em&gt;state or lifecycle methods&lt;/em&gt; then use class component otherwise use function component. &lt;em&gt;However, from React 16.8 with the addition of Hooks, you could use state , lifecycle methods and other features that were only available in class component right in your function component.&lt;/em&gt; *So, it is always recommended to use Function components, unless you need a React functionality whose Function component equivalent is not present yet, like Error Boundaries *&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Pure Components?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;&lt;code&gt;React.PureComponent&lt;/code&gt;&lt;/em&gt; is exactly the same as &lt;em&gt;&lt;code&gt;React.Component&lt;/code&gt;&lt;/em&gt; except that it handles the &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; method for you. When props or state changes, &lt;em&gt;PureComponent&lt;/em&gt; will do a shallow comparison on both props and state. &lt;em&gt;Component&lt;/em&gt; on the other hand won&#39;t compare current props and state to next out of the box. Thus, the component will re-render by default whenever &lt;code&gt;shouldComponentUpdate&lt;/code&gt; is called.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is state in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;State&lt;/em&gt; of a component is an object that holds some information that may change over the lifetime of the component. We should always try to make our state as simple as possible and minimize the number of stateful components.&lt;/p&gt; &lt;p&gt;Let&#39;s create a user component with message state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class User extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    this.state = {&#xA;      message: &#39;Welcome to React world&#39;&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;h1&amp;gt;{this.state.message}&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/state.jpg&#34; alt=&#34;state&#34;&gt;&lt;/p&gt; &lt;p&gt;State is similar to props, but it is private and fully controlled by the component ,i.e., it is not accessible to any other component till the owner component decides to pass it.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are props in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Props&lt;/em&gt; are inputs to components. They are single values or objects containing a set of values that are passed to components on creation using a naming convention similar to HTML-tag attributes. They are data passed down from a parent component to a child component.&lt;/p&gt; &lt;p&gt;The primary purpose of props in React is to provide following component functionality:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Pass custom data to your component.&lt;/li&gt; &#xA;   &lt;li&gt;Trigger state changes.&lt;/li&gt; &#xA;   &lt;li&gt;Use via &lt;code&gt;this.props.reactProp&lt;/code&gt; inside component&#39;s &lt;code&gt;render()&lt;/code&gt; method.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;For example, let us create an element with &lt;code&gt;reactProp&lt;/code&gt; property:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Element reactProp={&#39;1&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This &lt;code&gt;reactProp&lt;/code&gt; (or whatever you came up with) name then becomes a property attached to React&#39;s native props object which originally already exists on all components created using React library.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;props.reactProp&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between state and props?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;props&lt;/em&gt; and &lt;em&gt;state&lt;/em&gt; are plain JavaScript objects. While both of them hold information that influences the output of render, they are different in their functionality with respect to component. Props get passed to the component similar to function parameters whereas state is managed within the component similar to variables declared within a function.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;11&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why should we not update the state directly?&lt;/h3&gt; &lt;p&gt;If you try to update the state directly then it won&#39;t re-render the component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//Wrong&#xA;this.state.message = &#39;Hello world&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead use &lt;code&gt;setState()&lt;/code&gt; method. It schedules an update to a component&#39;s state object. When state changes, the component responds by re-rendering.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//Correct&#xA;this.setState({ message: &#39;Hello World&#39; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You can directly assign to the state object either in &lt;em&gt;constructor&lt;/em&gt; or using latest javascript&#39;s class field declaration syntax.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;12&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of callback function as an argument of &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;The callback function is invoked when setState finished and the component gets rendered. Since &lt;code&gt;setState()&lt;/code&gt; is &lt;strong&gt;asynchronous&lt;/strong&gt; the callback function is used for any post action.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is recommended to use lifecycle method rather than this callback function.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;setState({ name: &#39;John&#39; }, () =&amp;gt; console.log(&#39;The name has updated and component re-rendered&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;13&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between HTML and React event handling?&lt;/h3&gt; &lt;p&gt;Below are some of the main differences between HTML and React event handling,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;In HTML, the event name usually represents in &lt;em&gt;lowercase&lt;/em&gt; as a convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button onclick=&#39;activateLasers()&#39;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React it follows &lt;em&gt;camelCase&lt;/em&gt; convention:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={activateLasers}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;In HTML, you can return &lt;code&gt;false&lt;/code&gt; to prevent default behavior:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;a href=&#39;#&#39; onclick=&#39;console.log(&#34;The link was clicked.&#34;); return false;&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas in React you must call &lt;code&gt;preventDefault()&lt;/code&gt; explicitly:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function handleClick(event) {&#xA;  event.preventDefault()&#xA;  console.log(&#39;The link was clicked.&#39;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;In HTML, you need to invoke the function by appending &lt;code&gt;()&lt;/code&gt; Whereas in react you should not append &lt;code&gt;()&lt;/code&gt; with the function name. (refer &#34;activateLasers&#34; function in the first point for example)&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;14&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to bind methods or event handlers in JSX callbacks?&lt;/h3&gt; &lt;p&gt;There are 3 possible ways to achieve this:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Binding in Constructor:&lt;/strong&gt; In JavaScript classes, the methods are not bound by default. The same thing applies for React event handlers defined as class methods. Normally we bind them in constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Foo extends Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.handleClick = this.handleClick.bind(this);&#xA;  }&#xA;  handleClick() {&#xA;    console.log(&#39;Click happened&#39;);&#xA;  }&#xA;  render() {&#xA;    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;;&#xA;  }&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Public class fields syntax:&lt;/strong&gt; If you don&#39;t like to use bind approach then &lt;em&gt;public class fields syntax&lt;/em&gt; can be used to correctly bind callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;handleClick = () =&amp;gt; {&#xA;  console.log(&#39;this is:&#39;, this)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;&#xA;  {&#39;Click me&#39;}&#xA;&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Arrow functions in callbacks:&lt;/strong&gt; You can use &lt;em&gt;arrow functions&lt;/em&gt; directly in the callbacks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;handleClick() {&#xA;    console.log(&#39;Click happened&#39;);&#xA;}&#xA;render() {&#xA;    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If the callback is passed as prop to child components, those components might do an extra re-rendering. In those cases, it is preferred to go with &lt;code&gt;.bind()&lt;/code&gt; or &lt;em&gt;public class fields syntax&lt;/em&gt; approach considering performance.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;15&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pass a parameter to an event handler or callback?&lt;/h3&gt; &lt;p&gt;You can use an &lt;em&gt;arrow function&lt;/em&gt; to wrap around an &lt;em&gt;event handler&lt;/em&gt; and pass parameters:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={() =&amp;gt; this.handleClick(id)} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is an equivalent to calling &lt;code&gt;.bind&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={this.handleClick.bind(this, id)} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Apart from these two approaches, you can also pass arguments to a function which is defined as arrow function&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button onClick={this.handleClick(id)} /&amp;gt;&#xA;handleClick = (id) =&amp;gt; () =&amp;gt; {&#xA;    console.log(&#34;Hello, your ticket number is&#34;, id)&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;16&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are synthetic events in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;SyntheticEvent&lt;/code&gt; is a cross-browser wrapper around the browser&#39;s native event. Its API is same as the browser&#39;s native event, including &lt;code&gt;stopPropagation()&lt;/code&gt; and &lt;code&gt;preventDefault()&lt;/code&gt;, except the events work identically across all browsers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;17&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are inline conditional expressions?&lt;/h3&gt; &lt;p&gt;You can use either &lt;em&gt;if statements&lt;/em&gt; or &lt;em&gt;ternary expressions&lt;/em&gt; which are available from JS to conditionally render expressions. Apart from these approaches, you can also embed any expressions in JSX by wrapping them in curly braces and then followed by JS logical operator &lt;code&gt;&amp;amp;&amp;amp;&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;h1&amp;gt;Hello!&amp;lt;/h1&amp;gt;&#xA;{&#xA;    messages.length &amp;gt; 0 &amp;amp;&amp;amp; !isLogin?&#xA;      &amp;lt;h2&amp;gt;&#xA;          You have {messages.length} unread messages.&#xA;      &amp;lt;/h2&amp;gt;&#xA;      :&#xA;      &amp;lt;h2&amp;gt;&#xA;          You don&#39;t have unread messages.&#xA;      &amp;lt;/h2&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;18&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is &#34;key&#34; prop and what is the benefit of using it in arrays of elements?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;key&lt;/code&gt; is a special string attribute you &lt;strong&gt;should&lt;/strong&gt; include when creating arrays of elements. &lt;em&gt;Key&lt;/em&gt; prop helps React identify which items have changed, are added, or are removed.&lt;/p&gt; &lt;p&gt;Most often we use ID from our data as &lt;em&gt;key&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((todo) =&amp;gt;&#xA;  &amp;lt;li key={todo.id}&amp;gt;&#xA;    {todo.text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;When you don&#39;t have stable IDs for rendered items, you may use the item &lt;em&gt;index&lt;/em&gt; as a &lt;em&gt;key&lt;/em&gt; as a last resort:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((todo, index) =&amp;gt;&#xA;  &amp;lt;li key={index}&amp;gt;&#xA;    {todo.text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Using &lt;em&gt;indexes&lt;/em&gt; for &lt;em&gt;keys&lt;/em&gt; is &lt;strong&gt;not recommended&lt;/strong&gt; if the order of items may change. This can negatively impact performance and may cause issues with component state.&lt;/li&gt; &#xA;   &lt;li&gt;If you extract list item as separate component then apply &lt;em&gt;keys&lt;/em&gt; on list component instead of &lt;code&gt;li&lt;/code&gt; tag.&lt;/li&gt; &#xA;   &lt;li&gt;There will be a warning message in the console if the &lt;code&gt;key&lt;/code&gt; prop is not present on list items.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;19&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the use of refs?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;ref&lt;/em&gt; is used to return a reference to the element. They &lt;em&gt;should be avoided&lt;/em&gt; in most cases, however, they can be useful when you need a direct access to the DOM element or an instance of a component.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;20&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create refs?&lt;/h3&gt; &lt;p&gt;There are two approaches&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;This is a recently added approach. &lt;em&gt;Refs&lt;/em&gt; are created using &lt;code&gt;React.createRef()&lt;/code&gt; method and attached to React elements via the &lt;code&gt;ref&lt;/code&gt; attribute. In order to use &lt;em&gt;refs&lt;/em&gt; throughout the component, just assign the &lt;em&gt;ref&lt;/em&gt; to the instance property within constructor.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.myRef = React.createRef()&#xA;  }&#xA;  render() {&#xA;    return &amp;lt;div ref={this.myRef} /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can also use ref callbacks approach regardless of React version. For example, the search bar component&#39;s input element is accessed as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class SearchBar extends Component {&#xA;   constructor(props) {&#xA;      super(props);&#xA;      this.txtSearch = null;&#xA;      this.state = { term: &#39;&#39; };&#xA;      this.setInputSearchRef = e =&amp;gt; {&#xA;         this.txtSearch = e;&#xA;      }&#xA;   }&#xA;   onInputChange(event) {&#xA;      this.setState({ term: this.txtSearch.value });&#xA;   }&#xA;   render() {&#xA;      return (&#xA;         &amp;lt;input&#xA;            value={this.state.term}&#xA;            onChange={this.onInputChange.bind(this)}&#xA;            ref={this.setInputSearchRef} /&amp;gt;&#xA;      );&#xA;   }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;You can also use &lt;em&gt;refs&lt;/em&gt; in function components using &lt;strong&gt;closures&lt;/strong&gt;. &lt;strong&gt;Note&lt;/strong&gt;: You can also use inline ref callbacks even though it is not a recommended approach.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;21&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are forward refs?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Ref forwarding&lt;/em&gt; is a feature that lets some components take a &lt;em&gt;ref&lt;/em&gt; they receive, and pass it further down to a child.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const ButtonElement = React.forwardRef((props, ref) =&amp;gt; (&#xA;  &amp;lt;button ref={ref} className=&#34;CustomButton&#34;&amp;gt;&#xA;    {props.children}&#xA;  &amp;lt;/button&amp;gt;&#xA;));&#xA;&#xA;// Create ref to the DOM button:&#xA;const ref = React.createRef();&#xA;&amp;lt;ButtonElement ref={ref}&amp;gt;{&#39;Forward Ref&#39;}&amp;lt;/ButtonElement&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;22&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Which is preferred option with in callback refs and findDOMNode()?&lt;/h3&gt; &lt;p&gt;It is preferred to use &lt;em&gt;callback refs&lt;/em&gt; over &lt;code&gt;findDOMNode()&lt;/code&gt; API. Because &lt;code&gt;findDOMNode()&lt;/code&gt; prevents certain improvements in React in the future.&lt;/p&gt; &lt;p&gt;The &lt;strong&gt;legacy&lt;/strong&gt; approach of using &lt;code&gt;findDOMNode&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends Component {&#xA;  componentDidMount() {&#xA;    findDOMNode(this).scrollIntoView()&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The recommended approach is:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends Component {&#xA;  constructor(props){&#xA;    super(props);&#xA;    this.node = createRef();&#xA;  }&#xA;  componentDidMount() {&#xA;    this.node.current.scrollIntoView();&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div ref={this.node} /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;23&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are String Refs legacy?&lt;/h3&gt; &lt;p&gt;If you worked with React before, you might be familiar with an older API where the &lt;code&gt;ref&lt;/code&gt; attribute is a string, like &lt;code&gt;ref={&#39;textInput&#39;}&lt;/code&gt;, and the DOM node is accessed as &lt;code&gt;this.refs.textInput&lt;/code&gt;. We advise against it because &lt;em&gt;string refs have below issues&lt;/em&gt;, and are considered legacy. String refs were &lt;strong&gt;removed in React v16&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;They &lt;em&gt;force React to keep track of currently executing component&lt;/em&gt;. This is problematic because it makes react module stateful, and thus causes weird errors when react module is duplicated in the bundle.&lt;/li&gt; &#xA;   &lt;li&gt;They are &lt;em&gt;not composable&lt;/em&gt; — if a library puts a ref on the passed child, the user can&#39;t put another ref on it. Callback refs are perfectly composable.&lt;/li&gt; &#xA;   &lt;li&gt;They &lt;em&gt;don&#39;t work with static analysis&lt;/em&gt; like Flow. Flow can&#39;t guess the magic that framework does to make the string ref appear on &lt;code&gt;this.refs&lt;/code&gt;, as well as its type (which could be different). Callback refs are friendlier to static analysis.&lt;/li&gt; &#xA;   &lt;li&gt;It doesn&#39;t work as most people would expect with the &#34;render callback&#34; pattern (e.g. &#xA;    &lt;datagrid renderRow=&#34;{this.renderRow}&#34; /&gt;) &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends Component {&#xA;  renderRow = (index) =&amp;gt; {&#xA;    // This won&#39;t work. Ref will get attached to DataTable rather than MyComponent:&#xA;    return &amp;lt;input ref={&#39;input-&#39; + index} /&amp;gt;;&#xA;&#xA;    // This would work though! Callback refs are awesome.&#xA;    return &amp;lt;input ref={input =&amp;gt; this[&#39;input-&#39; + index] = input} /&amp;gt;;&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;DataTable data={this.props.data} renderRow={this.renderRow} /&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;24&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; (VDOM) is an in-memory representation of &lt;em&gt;Real DOM&lt;/em&gt;. The representation of a UI is kept in memory and synced with the &#34;real&#34; DOM. It&#39;s a step that happens between the render function being called and the displaying of elements on the screen. This entire process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;25&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How Virtual DOM works?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Virtual DOM&lt;/em&gt; works in three simple steps.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Whenever any underlying data changes, the entire UI is re-rendered in Virtual DOM representation.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom1.png&#34; alt=&#34;vdom&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Then the difference between the previous DOM representation and the new one is calculated.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom2.png&#34; alt=&#34;vdom2&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Once the calculations are done, the real DOM will be updated with only the things that have actually changed.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/vdom3.png&#34; alt=&#34;vdom3&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;26&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Shadow DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;Shadow DOM&lt;/em&gt; is a browser technology designed primarily for scoping variables and CSS in &lt;em&gt;web components&lt;/em&gt;. The &lt;em&gt;Virtual DOM&lt;/em&gt; is a concept implemented by libraries in JavaScript on top of browser APIs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;27&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Fiber?&lt;/h3&gt; &lt;p&gt;Fiber is the new &lt;em&gt;reconciliation&lt;/em&gt; engine or reimplementation of core algorithm in React v16. The goal of React Fiber is to increase its suitability for areas like animation, layout, gestures, ability to pause, abort, or reuse work and assign priority to different types of updates; and new concurrency primitives.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;28&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the main goal of React Fiber?&lt;/h3&gt; &lt;p&gt;The goal of &lt;em&gt;React Fiber&lt;/em&gt; is to increase its suitability for areas like animation, layout, and gestures. Its headline feature is &lt;strong&gt;incremental rendering&lt;/strong&gt;: the ability to split rendering work into chunks and spread it out over multiple frames.&lt;/p&gt; &lt;p&gt;&lt;em&gt;from documentation&lt;/em&gt;&lt;/p&gt; &lt;p&gt;Its main goals are:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Ability to split interruptible work in chunks.&lt;/li&gt; &#xA;   &lt;li&gt;Ability to prioritize, rebase and reuse work in progress.&lt;/li&gt; &#xA;   &lt;li&gt;Ability to yield back and forth between parents and children to support layout in React.&lt;/li&gt; &#xA;   &lt;li&gt;Ability to return multiple elements from render().&lt;/li&gt; &#xA;   &lt;li&gt;Better support for error boundaries.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;29&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are controlled components?&lt;/h3&gt; &lt;p&gt;A component that controls the input elements within the forms on subsequent user input is called &lt;strong&gt;Controlled Component&lt;/strong&gt;, i.e, every state mutation will have an associated handler function.&lt;/p&gt; &lt;p&gt;For example, to write all the names in uppercase letters, we use handleChange as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;handleChange(event) {&#xA;  this.setState({value: event.target.value.toUpperCase()})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;30&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are uncontrolled components?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;Uncontrolled Components&lt;/strong&gt; are the ones that store their own state internally, and you query the DOM using a ref to find its current value when you need it. This is a bit more like traditional HTML.&lt;/p&gt; &lt;p&gt;In the below UserProfile component, the &lt;code&gt;name&lt;/code&gt; input is accessed using ref.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class UserProfile extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.handleSubmit = this.handleSubmit.bind(this)&#xA;    this.input = React.createRef()&#xA;  }&#xA;&#xA;  handleSubmit(event) {&#xA;    alert(&#39;A name was submitted: &#39; + this.input.current.value)&#xA;    event.preventDefault()&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;        &amp;lt;label&amp;gt;&#xA;          {&#39;Name:&#39;}&#xA;          &amp;lt;input type=&#34;text&#34; ref={this.input} /&amp;gt;&#xA;        &amp;lt;/label&amp;gt;&#xA;        &amp;lt;input type=&#34;submit&#34; value=&#34;Submit&#34; /&amp;gt;&#xA;      &amp;lt;/form&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In most cases, it&#39;s recommend to use controlled components to implement forms. In a controlled component, form data is handled by a React component. The alternative is uncontrolled components, where form data is handled by the DOM itself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;31&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between createElement and cloneElement?&lt;/h3&gt; &lt;p&gt;JSX elements will be transpiled to &lt;code&gt;React.createElement()&lt;/code&gt; functions to create React elements which are going to be used for the object representation of UI. Whereas &lt;code&gt;cloneElement&lt;/code&gt; is used to clone an element and pass it new props.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;32&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Lifting State Up in React?&lt;/h3&gt; &lt;p&gt;When several components need to share the same changing data then it is recommended to &lt;em&gt;lift the shared state up&lt;/em&gt; to their closest common ancestor. That means if two child components share the same data from its parent, then move the state to parent instead of maintaining local state in both of the child components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;33&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the different phases of component lifecycle?&lt;/h3&gt; &lt;p&gt;The component lifecycle has three distinct lifecycle phases:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Mounting:&lt;/strong&gt; The component is ready to mount in the browser DOM. This phase covers initialization from &lt;code&gt;constructor()&lt;/code&gt;, &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, and &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Updating:&lt;/strong&gt; In this phase, the component gets updated in two ways, sending the new props and updating the state either from &lt;code&gt;setState()&lt;/code&gt; or &lt;code&gt;forceUpdate()&lt;/code&gt;. This phase covers &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt;, &lt;code&gt;shouldComponentUpdate()&lt;/code&gt;, &lt;code&gt;render()&lt;/code&gt;, &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; and &lt;code&gt;componentDidUpdate()&lt;/code&gt; lifecycle methods.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unmounting:&lt;/strong&gt; In this last phase, the component is not needed and gets unmounted from the browser DOM. This phase includes &lt;code&gt;componentWillUnmount()&lt;/code&gt; lifecycle method.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;It&#39;s worth mentioning that React internally has a concept of phases when applying changes to the DOM. They are separated as follows&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Render&lt;/strong&gt; The component will render without any side effects. This applies to Pure components and in this phase, React can pause, abort, or restart the render.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Pre-commit&lt;/strong&gt; Before the component actually applies the changes to the DOM, there is a moment that allows React to read from the DOM through the &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Commit&lt;/strong&gt; React works with the DOM and executes the final lifecycles respectively &lt;code&gt;componentDidMount()&lt;/code&gt; for mounting, &lt;code&gt;componentDidUpdate()&lt;/code&gt; for updating, and &lt;code&gt;componentWillUnmount()&lt;/code&gt; for unmounting.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;React 16.3+ Phases (or an &lt;a href=&#34;http://projects.wojtekmaj.pl/react-lifecycle-methods-diagram/&#34;&gt;interactive version&lt;/a&gt;)&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases16.4.png&#34; alt=&#34;phases 16.4+&#34;&gt;&lt;/p&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/phases.png&#34; alt=&#34;phases 16.2&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;34&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the lifecycle methods of React?&lt;/h3&gt; &lt;p&gt;Before React 16.3&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillMount:&lt;/strong&gt; Executed before rendering and is used for App level configuration in your root component.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and here all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillReceiveProps:&lt;/strong&gt; Executed when particular prop updates to trigger state transitions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after state or props are updated, you can return false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives new prop.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillUpdate:&lt;/strong&gt; Executed before re-rendering the component when there are props &amp;amp; state changes confirmed by &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; which returns true.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillUnmount:&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;React 16.3+&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;getDerivedStateFromProps:&lt;/strong&gt; Invoked right before calling &lt;code&gt;render()&lt;/code&gt; and is invoked on &lt;em&gt;every&lt;/em&gt; render. This exists for rare use cases where you need a derived state. Worth reading &lt;a href=&#34;https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html&#34;&gt;if you need derived state&lt;/a&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidMount:&lt;/strong&gt; Executed after first rendering and where all AJAX requests, DOM or state updates, and set up event listeners should occur.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;shouldComponentUpdate:&lt;/strong&gt; Determines if the component will be updated or not. By default, it returns &lt;code&gt;true&lt;/code&gt;. If you are sure that the component doesn&#39;t need to render after the state or props are updated, you can return a false value. It is a great place to improve performance as it allows you to prevent a re-render if component receives a new prop.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;getSnapshotBeforeUpdate:&lt;/strong&gt; Executed right before rendered output is committed to the DOM. Any value returned by this will be passed into &lt;code&gt;componentDidUpdate()&lt;/code&gt;. This is useful to capture information from the DOM i.e. scroll position.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentDidUpdate:&lt;/strong&gt; Mostly it is used to update the DOM in response to prop or state changes. This will not fire if &lt;code&gt;shouldComponentUpdate()&lt;/code&gt; returns &lt;code&gt;false&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;componentWillUnmount&lt;/strong&gt; It will be used to cancel any outgoing network requests, or remove all event listeners associated with the component.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;35&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Higher-Order Components?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;higher-order component&lt;/em&gt; (&lt;em&gt;HOC&lt;/em&gt;) is a function that takes a component and returns a new component. Basically, it&#39;s a pattern that is derived from React&#39;s compositional nature.&lt;/p&gt; &lt;p&gt;We call them &lt;strong&gt;pure components&lt;/strong&gt; because they can accept any dynamically provided child component but they won&#39;t modify or copy any behavior from their input components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const EnhancedComponent = higherOrderComponent(WrappedComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;HOC can be used for many use cases:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Code reuse, logic and bootstrap abstraction.&lt;/li&gt; &#xA;   &lt;li&gt;Render hijacking.&lt;/li&gt; &#xA;   &lt;li&gt;State abstraction and manipulation.&lt;/li&gt; &#xA;   &lt;li&gt;Props manipulation.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;36&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create props proxy for HOC component?&lt;/h3&gt; &lt;p&gt;You can add/edit props passed to the component using &lt;em&gt;props proxy&lt;/em&gt; pattern like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function HOC(WrappedComponent) {&#xA;  return class Test extends Component {&#xA;    render() {&#xA;      const newProps = {&#xA;        title: &#39;New Header&#39;,&#xA;        footer: false,&#xA;        showFeatureX: false,&#xA;        showFeatureY: true&#xA;      }&#xA;&#xA;      return &amp;lt;WrappedComponent {...this.props} {...newProps} /&amp;gt;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;37&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is context?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Context&lt;/em&gt; provides a way to pass data through the component tree without having to pass props down manually at every level.&lt;/p&gt; &lt;p&gt;For example, authenticated users, locale preferences, UI themes need to be accessed in the application by many components.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const {Provider, Consumer} = React.createContext(defaultValue)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;38&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is children prop?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Children&lt;/em&gt; is a prop (&lt;code&gt;this.props.children&lt;/code&gt;) that allows you to pass components as data to other components, just like any other prop you use. Component tree put between component&#39;s opening and closing tag will be passed to that component as &lt;code&gt;children&lt;/code&gt; prop.&lt;/p&gt; &lt;p&gt;There are several methods available in the React API to work with this prop. These include &lt;code&gt;React.Children.map&lt;/code&gt;, &lt;code&gt;React.Children.forEach&lt;/code&gt;, &lt;code&gt;React.Children.count&lt;/code&gt;, &lt;code&gt;React.Children.only&lt;/code&gt;, &lt;code&gt;React.Children.toArray&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;A simple usage of children prop looks as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyDiv = React.createClass({&#xA;  render: function() {&#xA;    return &amp;lt;div&amp;gt;{this.props.children}&amp;lt;/div&amp;gt;&#xA;  }&#xA;})&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;MyDiv&amp;gt;&#xA;    &amp;lt;span&amp;gt;{&#39;Hello&#39;}&amp;lt;/span&amp;gt;&#xA;    &amp;lt;span&amp;gt;{&#39;World&#39;}&amp;lt;/span&amp;gt;&#xA;  &amp;lt;/MyDiv&amp;gt;,&#xA;  node&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;39&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to write comments in React?&lt;/h3&gt; &lt;p&gt;The comments in React/JSX are similar to JavaScript Multiline comments but are wrapped in curly braces.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Single-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div&amp;gt;&#xA;  {/* Single-line comments(In vanilla JavaScript, the single-line comments are represented by double slash(//)) */}&#xA;  {`Welcome ${user}, let&#39;s play React`}&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Multi-line comments:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div&amp;gt;&#xA;  {/* Multi-line comments for more than&#xA;   one line */}&#xA;  {`Welcome ${user}, let&#39;s play React`}&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;40&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of using super constructor with props argument?&lt;/h3&gt; &lt;p&gt;A child class constructor cannot make use of &lt;code&gt;this&lt;/code&gt; reference until the &lt;code&gt;super()&lt;/code&gt; method has been called. The same applies to ES6 sub-classes as well. The main reason for passing props parameter to &lt;code&gt;super()&lt;/code&gt; call is to access &lt;code&gt;this.props&lt;/code&gt; in your child constructors.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Not passing props:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super()&#xA;&#xA;    console.log(this.props) // prints undefined&#xA;&#xA;    // but props parameter is still available&#xA;    console.log(props) // prints { name: &#39;John&#39;, age: 42 }&#xA;  }&#xA;&#xA;  render() {&#xA;    // no difference outside constructor&#xA;    console.log(this.props) // prints { name: &#39;John&#39;, age: 42 }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code snippets reveals that &lt;code&gt;this.props&lt;/code&gt; is different only within the constructor. It would be the same outside the constructor.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;41&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is reconciliation?&lt;/h3&gt; &lt;p&gt;When a component&#39;s props or state change, React decides whether an actual DOM update is necessary by comparing the newly returned element with the previously rendered one. When they are not equal, React will update the DOM. This process is called &lt;em&gt;reconciliation&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;42&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to set state with a dynamic key name?&lt;/h3&gt; &lt;p&gt;If you are using ES6 or the Babel transpiler to transform your JSX code then you can accomplish this with &lt;em&gt;computed property names&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;handleInputChange(event) {&#xA;  this.setState({ [event.target.id]: event.target.value })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;43&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What would be the common mistake of function being called every time the component renders?&lt;/h3&gt; &lt;p&gt;You need to make sure that function is not being called while passing the function as a parameter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  // Wrong: handleClick is called instead of passed as a reference!&#xA;  return &amp;lt;button onClick={this.handleClick()}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead, pass the function itself without parenthesis:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  // Correct: handleClick is passed as a reference!&#xA;  return &amp;lt;button onClick={this.handleClick}&amp;gt;{&#39;Click Me&#39;}&amp;lt;/button&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;44&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is lazy function supports named exports?&lt;/h3&gt; No, currently &lt;code&gt;React.lazy&lt;/code&gt; function supports default exports only. If you would like to import modules which are named exports, you can create an intermediate module that reexports it as the default. It also ensures that tree shaking keeps working and don’t pull unused components. Let&#39;s take a component file which exports multiple named components, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// MoreComponents.js&#xA;export const SomeComponent = /* ... */;&#xA;export const UnusedComponent = /* ... */;&#xA;&lt;/code&gt;&lt;/pre&gt; and reexport &lt;code&gt;MoreComponents.js&lt;/code&gt; components in an intermediate file &lt;code&gt;IntermediateComponent.js&lt;/code&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// IntermediateComponent.js&#xA;export { SomeComponent as default } from &#34;./MoreComponents.js&#34;;&#xA;&lt;/code&gt;&lt;/pre&gt; Now you can import the module using lazy function as below, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { lazy } from &#39;react&#39;;&#xA;const SomeComponent = lazy(() =&amp;gt; import(&#34;./IntermediateComponent.js&#34;));&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;45&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why React uses &lt;code&gt;className&lt;/code&gt; over &lt;code&gt;class&lt;/code&gt; attribute?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;class&lt;/code&gt; is a keyword in JavaScript, and JSX is an extension of JavaScript. That&#39;s the principal reason why React uses &lt;code&gt;className&lt;/code&gt; instead of &lt;code&gt;class&lt;/code&gt;. Pass a string as the &lt;code&gt;className&lt;/code&gt; prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return &amp;lt;span className={&#39;menu navigation-menu&#39;}&amp;gt;{&#39;Menu&#39;}&amp;lt;/span&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;46&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are fragments?&lt;/h3&gt; &lt;p&gt;It&#39;s a common pattern in React which is used for a component to return multiple elements. &lt;em&gt;Fragments&lt;/em&gt; let you group a list of children without adding extra nodes to the DOM.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;React.Fragment&amp;gt;&#xA;      &amp;lt;ChildA /&amp;gt;&#xA;      &amp;lt;ChildB /&amp;gt;&#xA;      &amp;lt;ChildC /&amp;gt;&#xA;    &amp;lt;/React.Fragment&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;There is also a &lt;em&gt;shorter syntax&lt;/em&gt;, but it&#39;s not supported in many tools:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;ChildA /&amp;gt;&#xA;      &amp;lt;ChildB /&amp;gt;&#xA;      &amp;lt;ChildC /&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;47&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why fragments are better than container divs?&lt;/h3&gt; &lt;p&gt;Below are the list of reasons,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Fragments are a bit faster and use less memory by not creating an extra DOM node. This only has a real benefit on very large and deep trees.&lt;/li&gt; &#xA;   &lt;li&gt;Some CSS mechanisms like &lt;em&gt;Flexbox&lt;/em&gt; and &lt;em&gt;CSS Grid&lt;/em&gt; have a special parent-child relationships, and adding divs in the middle makes it hard to keep the desired layout.&lt;/li&gt; &#xA;   &lt;li&gt;The DOM Inspector is less cluttered.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;48&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are portals in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Portal&lt;/em&gt; is a recommended way to render children into a DOM node that exists outside the DOM hierarchy of the parent component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ReactDOM.createPortal(child, container)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The first argument is any render-able React child, such as an element, string, or fragment. The second argument is a DOM element.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;49&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are stateless components?&lt;/h3&gt; &lt;p&gt;If the behaviour is independent of its state then it can be a stateless component. You can use either a function or a class for creating stateless components. But unless you need to use a lifecycle hook in your components, you should go for function components. There are a lot of benefits if you decide to use function components here; they are easy to write, understand, and test, a little faster, and you can avoid the &lt;code&gt;this&lt;/code&gt; keyword altogether.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;50&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are stateful components?&lt;/h3&gt; &lt;p&gt;If the behaviour of a component is dependent on the &lt;em&gt;state&lt;/em&gt; of the component then it can be termed as stateful component. These &lt;em&gt;stateful components&lt;/em&gt; are always &lt;em&gt;class components&lt;/em&gt; and have a state that gets initialized in the &lt;code&gt;constructor&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = { count: 0 }&#xA;  }&#xA;&#xA;  render() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;React 16.8 Update:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Hooks let you use state and other React features without writing classes.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; import React, {useState} from &#39;react&#39;;&#xA;&#xA; const App = (props) =&amp;gt; {&#xA;   const [count, setCount] = useState(0);&#xA;&#xA;   return (&#xA;     // JSX&#xA;   )&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;51&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to apply validation on props in React?&lt;/h3&gt; &lt;p&gt;When the application is running in &lt;em&gt;development mode&lt;/em&gt;, React will automatically check all props that we set on components to make sure they have &lt;em&gt;correct type&lt;/em&gt;. If the type is incorrect, React will generate warning messages in the console. It&#39;s disabled in &lt;em&gt;production mode&lt;/em&gt; due to performance impact. The mandatory props are defined with &lt;code&gt;isRequired&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;The set of predefined prop types:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.string&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.array&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.func&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.node&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.element&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.bool&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.symbol&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;PropTypes.any&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;We can define &lt;code&gt;propTypes&lt;/code&gt; for &lt;code&gt;User&lt;/code&gt; component as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import PropTypes from &#39;prop-types&#39;&#xA;&#xA;class User extends React.Component {&#xA;  static propTypes = {&#xA;    name: PropTypes.string.isRequired,&#xA;    age: PropTypes.number.isRequired&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;&amp;gt;&#xA;        &amp;lt;h1&amp;gt;{`Welcome, ${this.props.name}`}&amp;lt;/h1&amp;gt;&#xA;        &amp;lt;h2&amp;gt;{`Age, ${this.props.age}`}&amp;lt;/h2&amp;gt;&#xA;      &amp;lt;/&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; In React v15.5 &lt;em&gt;PropTypes&lt;/em&gt; were moved from &lt;code&gt;React.PropTypes&lt;/code&gt; to &lt;code&gt;prop-types&lt;/code&gt; library.&lt;/p&gt; &lt;p&gt;&lt;em&gt;The Equivalent Functional Component&lt;/em&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import PropTypes from &#39;prop-types&#39;&#xA;&#xA;function User({name, age}) {&#xA;  return (&#xA;    &amp;lt;&amp;gt;&#xA;      &amp;lt;h1&amp;gt;{`Welcome, ${name}`}&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;h2&amp;gt;{`Age, ${age}`}&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;/&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;User.propTypes = {&#xA;    name: PropTypes.string.isRequired,&#xA;    age: PropTypes.number.isRequired&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;52&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of React?&lt;/h3&gt; &lt;p&gt;Below are the list of main advantages of React,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Increases the application&#39;s performance with &lt;em&gt;Virtual DOM&lt;/em&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;JSX makes code easy to read and write.&lt;/li&gt; &#xA;   &lt;li&gt;It renders both on client and server side (&lt;em&gt;SSR&lt;/em&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Easy to integrate with frameworks (Angular, Backbone) since it is only a view library.&lt;/li&gt; &#xA;   &lt;li&gt;Easy to write unit and integration tests with tools such as Jest.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;53&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the limitations of React?&lt;/h3&gt; &lt;p&gt;Apart from the advantages, there are few limitations of React too,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React is just a view library, not a full framework.&lt;/li&gt; &#xA;   &lt;li&gt;There is a learning curve for beginners who are new to web development.&lt;/li&gt; &#xA;   &lt;li&gt;Integrating React into a traditional MVC framework requires some additional configuration.&lt;/li&gt; &#xA;   &lt;li&gt;The code complexity increases with inline templating and JSX.&lt;/li&gt; &#xA;   &lt;li&gt;Too many smaller components leading to over engineering or boilerplate.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;54&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are error boundaries in React v16?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Error boundaries&lt;/em&gt; are components that catch JavaScript errors anywhere in their child component tree, log those errors, and display a fallback UI instead of the component tree that crashed.&lt;/p&gt; &lt;p&gt;A class component becomes an error boundary if it defines a new lifecycle method called &lt;code&gt;componentDidCatch(error, info)&lt;/code&gt; or &lt;code&gt;static getDerivedStateFromError() &lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class ErrorBoundary extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = { hasError: false }&#xA;  }&#xA;&#xA;  componentDidCatch(error, info) {&#xA;    // You can also log the error to an error reporting service&#xA;    logErrorToMyService(error, info)&#xA;  }&#xA;&#xA;  static getDerivedStateFromError(error) {&#xA;     // Update state so the next render will show the fallback UI.&#xA;     return { hasError: true };&#xA;   }&#xA;&#xA;  render() {&#xA;    if (this.state.hasError) {&#xA;      // You can render any custom fallback UI&#xA;      return &amp;lt;h1&amp;gt;{&#39;Something went wrong.&#39;}&amp;lt;/h1&amp;gt;&#xA;    }&#xA;    return this.props.children&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that use it as a regular component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;ErrorBoundary&amp;gt;&#xA;  &amp;lt;MyWidget /&amp;gt;&#xA;&amp;lt;/ErrorBoundary&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;55&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How error boundaries handled in React v15?&lt;/h3&gt; &lt;p&gt;React v15 provided very basic support for &lt;em&gt;error boundaries&lt;/em&gt; using &lt;code&gt;unstable_handleError&lt;/code&gt; method. It has been renamed to &lt;code&gt;componentDidCatch&lt;/code&gt; in React v16.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;56&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the recommended ways for static type checking?&lt;/h3&gt; &lt;p&gt;Normally we use &lt;em&gt;PropTypes library&lt;/em&gt; (&lt;code&gt;React.PropTypes&lt;/code&gt; moved to a &lt;code&gt;prop-types&lt;/code&gt; package since React v15.5) for &lt;em&gt;type checking&lt;/em&gt; in the React applications. For large code bases, it is recommended to use &lt;em&gt;static type checkers&lt;/em&gt; such as Flow or TypeScript, that perform type checking at compile time and provide auto-completion features.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;57&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the use of &lt;code&gt;react-dom&lt;/code&gt; package?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-dom&lt;/code&gt; package provides &lt;em&gt;DOM-specific methods&lt;/em&gt; that can be used at the top level of your app. Most of the components are not required to use this module. Some of the methods of this package are:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;hydrate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;unmountComponentAtNode()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;findDOMNode()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;createPortal()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;58&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of render method of &lt;code&gt;react-dom&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;This method is used to render a React element into the DOM in the supplied container and return a reference to the component. If the React element was previously rendered into container, it will perform an update on it and only mutate the DOM as necessary to reflect the latest changes.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;ReactDOM.render(element, container[, callback])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If the optional callback is provided, it will be executed after the component is rendered or updated.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;59&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is ReactDOMServer?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;ReactDOMServer&lt;/code&gt; object enables you to render components to static markup (typically used on node server). This object is mainly used for &lt;em&gt;server-side rendering&lt;/em&gt; (SSR). The following methods can be used in both the server and browser environments:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;renderToString()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;renderToStaticMarkup()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;For example, you generally run a Node-based web server like Express, Hapi, or Koa, and you call &lt;code&gt;renderToString&lt;/code&gt; to render your root component to a string, which you then send as response.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// using Express&#xA;import { renderToString } from &#39;react-dom/server&#39;&#xA;import MyPage from &#39;./MyPage&#39;&#xA;&#xA;app.get(&#39;/&#39;, (req, res) =&amp;gt; {&#xA;  res.write(&#39;&amp;lt;!DOCTYPE html&amp;gt;&amp;lt;html&amp;gt;&amp;lt;head&amp;gt;&amp;lt;title&amp;gt;My Page&amp;lt;/title&amp;gt;&amp;lt;/head&amp;gt;&amp;lt;body&amp;gt;&#39;)&#xA;  res.write(&#39;&amp;lt;div id=&#34;content&#34;&amp;gt;&#39;)&#xA;  res.write(renderToString(&amp;lt;MyPage/&amp;gt;))&#xA;  res.write(&#39;&amp;lt;/div&amp;gt;&amp;lt;/body&amp;gt;&amp;lt;/html&amp;gt;&#39;)&#xA;  res.end()&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;60&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use innerHTML in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute is React&#39;s replacement for using &lt;code&gt;innerHTML&lt;/code&gt; in the browser DOM. Just like &lt;code&gt;innerHTML&lt;/code&gt;, it is risky to use this attribute considering cross-site scripting (XSS) attacks. You just need to pass a &lt;code&gt;__html&lt;/code&gt; object as key and HTML text as value.&lt;/p&gt; &lt;p&gt;In this example MyComponent uses &lt;code&gt;dangerouslySetInnerHTML&lt;/code&gt; attribute for setting HTML markup:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function createMarkup() {&#xA;  return { __html: &#39;First &amp;amp;middot; Second&#39; }&#xA;}&#xA;&#xA;function MyComponent() {&#xA;  return &amp;lt;div dangerouslySetInnerHTML={createMarkup()} /&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;61&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use styles in React?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;style&lt;/code&gt; attribute accepts a JavaScript object with camelCased properties rather than a CSS string. This is consistent with the DOM style JavaScript property, is more efficient, and prevents XSS security holes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const divStyle = {&#xA;  color: &#39;blue&#39;,&#xA;  backgroundImage: &#39;url(&#39; + imgUrl + &#39;)&#39;&#xA;};&#xA;&#xA;function HelloWorldComponent() {&#xA;  return &amp;lt;div style={divStyle}&amp;gt;Hello World!&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Style keys are camelCased in order to be consistent with accessing the properties on DOM nodes in JavaScript (e.g. &lt;code&gt;node.style.backgroundImage&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;62&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How events are different in React?&lt;/h3&gt; &lt;p&gt;Handling events in React elements has some syntactic differences:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React event handlers are named using camelCase, rather than lowercase.&lt;/li&gt; &#xA;   &lt;li&gt;With JSX you pass a function as the event handler, rather than a string.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;63&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What will happen if you use &lt;code&gt;setState()&lt;/code&gt; in constructor?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt;, then apart from assigning to the object state React also re-renders the component and all its children. You would get error like this: &lt;em&gt;Can only update a mounted or mounting component.&lt;/em&gt; So we need to use &lt;code&gt;this.state&lt;/code&gt; to initialize variables inside constructor.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;64&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the impact of indexes as keys?&lt;/h3&gt; &lt;p&gt;Keys should be stable, predictable, and unique so that React can keep track of elements.&lt;/p&gt; &lt;p&gt;In the below code snippet each element&#39;s key will be based on ordering, rather than tied to the data that is being represented. This limits the optimizations that React can do.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;{todos.map((todo, index) =&amp;gt;&#xA;  &amp;lt;Todo&#xA;    {...todo}&#xA;    key={index}&#xA;  /&amp;gt;&#xA;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you use element data for unique key, assuming todo.id is unique to this list and stable, React would be able to reorder elements without needing to reevaluate them as much.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;{todos.map((todo) =&amp;gt;&#xA;  &amp;lt;Todo {...todo}&#xA;    key={todo.id} /&amp;gt;&#xA;)}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;65&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it good to use &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillMount()&lt;/code&gt; method?&lt;/h3&gt; &lt;p&gt;Yes, it is safe to use &lt;code&gt;setState()&lt;/code&gt; inside &lt;code&gt;componentWillMount()&lt;/code&gt; method. But at the same it is recommended to avoid async initialization in &lt;code&gt;componentWillMount()&lt;/code&gt; lifecycle method. &lt;code&gt;componentWillMount()&lt;/code&gt; is invoked immediately before mounting occurs. It is called before &lt;code&gt;render()&lt;/code&gt;, therefore setting state in this method will not trigger a re-render. Avoid introducing any side-effects or subscriptions in this method. We need to make sure async calls for component initialization happened in &lt;code&gt;componentDidMount()&lt;/code&gt; instead of &lt;code&gt;componentWillMount()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;componentDidMount() {&#xA;  axios.get(`api/todos`)&#xA;    .then((result) =&amp;gt; {&#xA;      this.setState({&#xA;        messages: [...result.data]&#xA;      })&#xA;    })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;66&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What will happen if you use props in initial state?&lt;/h3&gt; &lt;p&gt;If the props on the component are changed without the component being refreshed, the new prop value will never be displayed because the constructor function will never update the current state of the component. The initialization of state from props only runs when the component is first created.&lt;/p&gt; &lt;p&gt;The below component won&#39;t display the updated input value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    this.state = {&#xA;      records: [],&#xA;      inputValue: this.props.inputValue&#xA;    };&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;{this.state.inputValue}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using props inside render method will update the value:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;&#xA;    this.state = {&#xA;      record: []&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;{this.props.inputValue}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;67&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you conditionally render components?&lt;/h3&gt; &lt;p&gt;In some cases you want to render different components depending on some state. JSX does not render &lt;code&gt;false&lt;/code&gt; or &lt;code&gt;undefined&lt;/code&gt;, so you can use conditional &lt;em&gt;short-circuiting&lt;/em&gt; to render a given part of your component only if a certain condition is true.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyComponent = ({ name, address }) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;&#xA;    {address &amp;amp;&amp;amp;&#xA;      &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;&#xA;    }&#xA;  &amp;lt;/div&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you need an &lt;code&gt;if-else&lt;/code&gt; condition then use &lt;em&gt;ternary operator&lt;/em&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyComponent = ({ name, address }) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;&#xA;    &amp;lt;h2&amp;gt;{name}&amp;lt;/h2&amp;gt;&#xA;    {address&#xA;      ? &amp;lt;p&amp;gt;{address}&amp;lt;/p&amp;gt;&#xA;      : &amp;lt;p&amp;gt;{&#39;Address is not available&#39;}&amp;lt;/p&amp;gt;&#xA;    }&#xA;  &amp;lt;/div&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;68&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why we need to be careful when spreading props on DOM elements?&lt;/h3&gt; &lt;p&gt;When we &lt;em&gt;spread props&lt;/em&gt; we run into the risk of adding unknown HTML attributes, which is a bad practice. Instead we can use prop destructuring with &lt;code&gt;...rest&lt;/code&gt; operator, so it will add only required props.&lt;/p&gt; &lt;p&gt;For example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const ComponentA = () =&amp;gt;&#xA;  &amp;lt;ComponentB isDisplay={true} className={&#39;componentStyle&#39;} /&amp;gt;&#xA;&#xA;const ComponentB = ({ isDisplay, ...domProps }) =&amp;gt;&#xA;  &amp;lt;div {...domProps}&amp;gt;{&#39;ComponentB&#39;}&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;69&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How you use decorators in React?&lt;/h3&gt; &lt;p&gt;You can &lt;em&gt;decorate&lt;/em&gt; your &lt;em&gt;class&lt;/em&gt; components, which is the same as passing the component into a function. &lt;strong&gt;Decorators&lt;/strong&gt; are flexible and readable way of modifying component functionality.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;@setTitle(&#39;Profile&#39;)&#xA;class Profile extends React.Component {&#xA;    //....&#xA;}&#xA;&#xA;/*&#xA;  title is a string that will be set as a document title&#xA;  WrappedComponent is what our decorator will receive when&#xA;  put directly above a component class as seen in the example above&#xA;*/&#xA;const setTitle = (title) =&amp;gt; (WrappedComponent) =&amp;gt; {&#xA;  return class extends React.Component {&#xA;    componentDidMount() {&#xA;      document.title = title&#xA;    }&#xA;&#xA;    render() {&#xA;      return &amp;lt;WrappedComponent {...this.props} /&amp;gt;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Decorators are a feature that didn&#39;t make it into ES7, but are currently a &lt;em&gt;stage 2 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;70&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you memoize a component?&lt;/h3&gt; &lt;p&gt;There are memoize libraries available which can be used on function components.&lt;/p&gt; &lt;p&gt;For example &lt;code&gt;moize&lt;/code&gt; library can memoize the component in another component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import moize from &#39;moize&#39;&#xA;import Component from &#39;./components/Component&#39; // this module exports a non-memoized component&#xA;&#xA;const MemoizedFoo = moize.react(Component)&#xA;&#xA;const Consumer = () =&amp;gt; {&#xA;  &amp;lt;div&amp;gt;&#xA;    {&#39;I will memoize the following entry:&#39;}&#xA;    &amp;lt;MemoizedFoo/&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Update:&lt;/strong&gt; Since React v16.6.0, we have a &lt;code&gt;React.memo&lt;/code&gt;. It provides a higher order component which memoizes component unless the props change. To use it, simply wrap the component using React.memo before you use it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  const MemoComponent = React.memo(function MemoComponent(props) {&#xA;    /* render using props */&#xA;  });&#xA;  OR&#xA;  export default React.memo(MyFunctionComponent);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;71&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How you implement Server Side Rendering or SSR?&lt;/h3&gt; &lt;p&gt;React is already equipped to handle rendering on Node servers. A special version of the DOM renderer is available, which follows the same pattern as on the client side.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import ReactDOMServer from &#39;react-dom/server&#39;&#xA;import App from &#39;./App&#39;&#xA;&#xA;ReactDOMServer.renderToString(&amp;lt;App /&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This method will output the regular HTML as a string, which can be then placed inside a page body as part of the server response. On the client side, React detects the pre-rendered content and seamlessly picks up where it left off.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;72&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to enable production mode in React?&lt;/h3&gt; &lt;p&gt;You should use Webpack&#39;s &lt;code&gt;DefinePlugin&lt;/code&gt; method to set &lt;code&gt;NODE_ENV&lt;/code&gt; to &lt;code&gt;production&lt;/code&gt;, by which it strip out things like propType validation and extra warnings. Apart from this, if you minify the code, for example, Uglify&#39;s dead-code elimination to strip out development only code and comments, it will drastically reduce the size of your bundle.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;73&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is CRA and its benefits?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;create-react-app&lt;/code&gt; CLI tool allows you to quickly create &amp;amp; run React applications with no configuration step.&lt;/p&gt; &lt;p&gt;Let&#39;s create Todo App using &lt;em&gt;CRA&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;# Installation&#xA;$ npm install -g create-react-app&#xA;&#xA;# Create new project&#xA;$ create-react-app todo-app&#xA;$ cd todo-app&#xA;&#xA;# Build, test and run&#xA;$ npm run build&#xA;$ npm run test&#xA;$ npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It includes everything we need to build a React app:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React, JSX, ES6, and Flow syntax support.&lt;/li&gt; &#xA;   &lt;li&gt;Language extras beyond ES6 like the object spread operator.&lt;/li&gt; &#xA;   &lt;li&gt;Autoprefixed CSS, so you don’t need -webkit- or other prefixes.&lt;/li&gt; &#xA;   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting.&lt;/li&gt; &#xA;   &lt;li&gt;A live development server that warns about common mistakes.&lt;/li&gt; &#xA;   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;74&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the lifecycle methods order in mounting?&lt;/h3&gt; &lt;p&gt;The lifecycle methods are called in the following order when an instance of a component is being created and inserted into the DOM.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;static getDerivedStateFromProps()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;75&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the lifecycle methods going to be deprecated in React v16?&lt;/h3&gt; &lt;p&gt;The following lifecycle methods going to be unsafe coding practices and will be more problematic with async rendering.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;Starting with React v16.3 these methods are aliased with &lt;code&gt;UNSAFE_&lt;/code&gt; prefix, and the unprefixed version will be removed in React v17.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;76&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new static &lt;code&gt;getDerivedStateFromProps()&lt;/code&gt; lifecycle method is invoked after a component is instantiated as well as before it is re-rendered. It can return an object to update state, or &lt;code&gt;null&lt;/code&gt; to indicate that the new props do not require any state updates.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  static getDerivedStateFromProps(props, state) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillReceiveProps()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;77&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method?&lt;/h3&gt; &lt;p&gt;The new &lt;code&gt;getSnapshotBeforeUpdate()&lt;/code&gt; lifecycle method is called right before DOM updates. The return value from this method will be passed as the third parameter to &lt;code&gt;componentDidUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  getSnapshotBeforeUpdate(prevProps, prevState) {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This lifecycle method along with &lt;code&gt;componentDidUpdate()&lt;/code&gt; covers all the use cases of &lt;code&gt;componentWillUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;78&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do Hooks replace render props and higher order components?&lt;/h3&gt; &lt;p&gt;Both render props and higher-order components render only a single child but in most of the cases Hooks are a simpler way to serve this by reducing nesting in your tree.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;79&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the recommended way for naming components?&lt;/h3&gt; &lt;p&gt;It is recommended to name the component by reference instead of using &lt;code&gt;displayName&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Using &lt;code&gt;displayName&lt;/code&gt; for naming component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default React.createClass({&#xA;  displayName: &#39;TodoApp&#39;,&#xA;  // ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;strong&gt;recommended&lt;/strong&gt; approach:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export default class TodoApp extends React.Component {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;also&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const TodoApp = () =&amp;gt; {&#xA; //...&#xA;}&#xA;export default TodoApp;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;80&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the recommended ordering of methods in component class?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Recommended&lt;/em&gt; ordering of methods from &lt;em&gt;mounting&lt;/em&gt; to &lt;em&gt;render stage&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;static&lt;/code&gt; methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;constructor()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getChildContext()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillMount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentDidMount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillReceiveProps()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;shouldComponentUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentDidUpdate()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;componentWillUnmount()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;click handlers or event handlers like &lt;code&gt;onClickSubmit()&lt;/code&gt; or &lt;code&gt;onChangeDescription()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;getter methods for render like &lt;code&gt;getSelectReason()&lt;/code&gt; or &lt;code&gt;getFooterContent()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;optional render methods like &lt;code&gt;renderNavigation()&lt;/code&gt; or &lt;code&gt;renderProfilePicture()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;render()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;81&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is a switching component?&lt;/h3&gt; &lt;p&gt;A &lt;em&gt;switching component&lt;/em&gt; is a component that renders one of many components. We need to use object to map prop values to components.&lt;/p&gt; &lt;p&gt;For example, a switching component to display different pages based on &lt;code&gt;page&lt;/code&gt; prop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import HomePage from &#39;./HomePage&#39;&#xA;import AboutPage from &#39;./AboutPage&#39;&#xA;import ServicesPage from &#39;./ServicesPage&#39;&#xA;import ContactPage from &#39;./ContactPage&#39;&#xA;&#xA;const PAGES = {&#xA;  home: HomePage,&#xA;  about: AboutPage,&#xA;  services: ServicesPage,&#xA;  contact: ContactPage&#xA;}&#xA;&#xA;const Page = (props) =&amp;gt; {&#xA;  const Handler = PAGES[props.page] || ContactPage&#xA;&#xA;  return &amp;lt;Handler {...props} /&amp;gt;&#xA;}&#xA;&#xA;// The keys of the PAGES object can be used in the prop types to catch dev-time errors.&#xA;Page.propTypes = {&#xA;  page: PropTypes.oneOf(Object.keys(PAGES)).isRequired&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;82&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why we need to pass a function to setState()?&lt;/h3&gt; &lt;p&gt;The reason behind for this is that &lt;code&gt;setState()&lt;/code&gt; is an asynchronous operation. React batches state changes for performance reasons, so the state may not change immediately after &lt;code&gt;setState()&lt;/code&gt; is called. That means you should not rely on the current state when calling &lt;code&gt;setState()&lt;/code&gt; since you can&#39;t be sure what that state will be. The solution is to pass a function to &lt;code&gt;setState()&lt;/code&gt;, with the previous state as an argument. By doing this you can avoid issues with the user getting the old state value on access due to the asynchronous nature of &lt;code&gt;setState()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Let&#39;s say the initial count value is zero. After three consecutive increment operations, the value is going to be incremented only by one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// assuming this.state.count === 0&#xA;this.setState({ count: this.state.count + 1 })&#xA;this.setState({ count: this.state.count + 1 })&#xA;this.setState({ count: this.state.count + 1 })&#xA;// this.state.count === 1, not 3&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If we pass a function to &lt;code&gt;setState()&lt;/code&gt;, the count gets incremented correctly.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.setState((prevState, props) =&amp;gt; ({&#xA;  count: prevState.count + props.increment&#xA;}))&#xA;// this.state.count === 3 as expected&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;(OR)&lt;/strong&gt;&lt;/p&gt; &lt;h3&gt;Why function is preferred over object for &lt;code&gt;setState()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;React may batch multiple &lt;code&gt;setState()&lt;/code&gt; calls into a single update for performance. Because &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; may be updated asynchronously, you should not rely on their values for calculating the next state.&lt;/p&gt; &lt;p&gt;This counter example will fail to update as expected:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Wrong&#xA;this.setState({&#xA;  counter: this.state.counter + this.props.increment,&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The preferred approach is to call &lt;code&gt;setState()&lt;/code&gt; with function rather than object. That function will receive the previous state as the first argument, and the props at the time the update is applied as the second argument.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Correct&#xA;this.setState((prevState, props) =&amp;gt; ({&#xA;  counter: prevState.counter + props.increment&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;83&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is strict mode in React?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;React.StrictMode&lt;/code&gt; is a useful component for highlighting potential problems in an application. Just like &lt;code&gt;&amp;lt;Fragment&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;StrictMode&amp;gt;&lt;/code&gt; does not render any extra DOM elements. It activates additional checks and warnings for its descendants. These checks apply for &lt;em&gt;development mode&lt;/em&gt; only.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;&#xA;function ExampleApplication() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;Header /&amp;gt;&#xA;      &amp;lt;React.StrictMode&amp;gt;&#xA;        &amp;lt;div&amp;gt;&#xA;          &amp;lt;ComponentOne /&amp;gt;&#xA;          &amp;lt;ComponentTwo /&amp;gt;&#xA;        &amp;lt;/div&amp;gt;&#xA;      &amp;lt;/React.StrictMode&amp;gt;&#xA;      &amp;lt;Header /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the example above, the &lt;em&gt;strict mode&lt;/em&gt; checks apply to &lt;code&gt;&amp;lt;ComponentOne&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;ComponentTwo&amp;gt;&lt;/code&gt; components only.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;84&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are React Mixins?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Mixins&lt;/em&gt; are a way to totally separate components to have a common functionality. Mixins &lt;strong&gt;should not be used&lt;/strong&gt; and can be replaced with &lt;em&gt;higher-order components&lt;/em&gt; or &lt;em&gt;decorators&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;One of the most commonly used mixins is &lt;code&gt;PureRenderMixin&lt;/code&gt;. You might be using it in some components to prevent unnecessary re-renders when the props and state are shallowly equal to the previous props and state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const PureRenderMixin = require(&#39;react-addons-pure-render-mixin&#39;)&#xA;&#xA;const Button = React.createClass({&#xA;  mixins: [PureRenderMixin],&#xA;  // ...&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;!-- TODO: mixins are deprecated --&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;85&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why is &lt;code&gt;isMounted()&lt;/code&gt; an anti-pattern and what is the proper solution?&lt;/h3&gt; &lt;p&gt;The primary use case for &lt;code&gt;isMounted()&lt;/code&gt; is to avoid calling &lt;code&gt;setState()&lt;/code&gt; after a component has been unmounted, because it will emit a warning.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if (this.isMounted()) {&#xA;  this.setState({...})&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Checking &lt;code&gt;isMounted()&lt;/code&gt; before calling &lt;code&gt;setState()&lt;/code&gt; does eliminate the warning, but it also defeats the purpose of the warning. Using &lt;code&gt;isMounted()&lt;/code&gt; is a code smell because the only reason you would check is because you think you might be holding a reference after the component has unmounted.&lt;/p&gt; &lt;p&gt;An optimal solution would be to find places where &lt;code&gt;setState()&lt;/code&gt; might be called after a component has unmounted, and fix them. Such situations most commonly occur due to callbacks, when a component is waiting for some data and gets unmounted before the data arrives. Ideally, any callbacks should be canceled in &lt;code&gt;componentWillUnmount()&lt;/code&gt;, prior to unmounting.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;86&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the Pointer Events supported in React?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Pointer Events&lt;/em&gt; provide a unified way of handling all input events. In the old days we had a mouse and respective event listeners to handle them but nowadays we have many devices which don&#39;t correlate to having a mouse, like phones with touch surface or pens. We need to remember that these events will only work in browsers that support the &lt;em&gt;Pointer Events&lt;/em&gt; specification.&lt;/p&gt; &lt;p&gt;The following event types are now available in &lt;em&gt;React DOM&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerDown&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerMove&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerUp&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerCancel&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onGotPointerCapture&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onLostPointerCapture&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerEnter&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerLeave&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerOver&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;onPointerOut&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;87&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why should component names start with capital letter?&lt;/h3&gt; &lt;p&gt;If you are rendering your component using JSX, the name of that component has to begin with a capital letter otherwise React will throw an error as an unrecognized tag. This convention is because only HTML elements and SVG tags can begin with a lowercase letter.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class SomeComponent extends Component {&#xA; // Code goes here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can define component class which name starts with lowercase letter, but when it&#39;s imported it should have capital letter. Here lowercase is fine:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class myComponent extends Component {&#xA;  render() {&#xA;    return &amp;lt;div /&amp;gt;&#xA;  }&#xA;}&#xA;&#xA;export default myComponent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While when imported in another file it should start with capital letter:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import MyComponent from &#39;./MyComponent&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h4&gt;What are the exceptions on React component naming?&lt;/h4&gt; &lt;p&gt;The component names should start with an uppercase letter but there are few exceptions to this convention. The lowercase tag names with a dot (property accessors) are still considered as valid component names. For example, the below tag can be compiled to a valid component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;     render() {&#xA;          return (&#xA;            &amp;lt;obj.component/&amp;gt; // `React.createElement(obj.component)`&#xA;          )&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;88&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Are custom DOM attributes supported in React v16?&lt;/h3&gt; &lt;p&gt;Yes. In the past, React used to ignore unknown DOM attributes. If you wrote JSX with an attribute that React doesn&#39;t recognize, React would just skip it.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take a look at the below attribute:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div mycustomattribute={&#39;something&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Would render an empty div to the DOM with React v15:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In React v16 any unknown attributes will end up in the DOM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div mycustomattribute=&#39;something&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is useful for supplying browser-specific non-standard attributes, trying new DOM APIs, and integrating with opinionated third-party libraries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;89&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between constructor and getInitialState?&lt;/h3&gt; &lt;p&gt;You should initialize state in the constructor when using ES6 classes, and &lt;code&gt;getInitialState()&lt;/code&gt; method when using &lt;code&gt;React.createClass()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using ES6 classes:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = { /* initial state */ }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const MyComponent = React.createClass({&#xA;  getInitialState() {&#xA;    return { /* initial state */ }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.createClass()&lt;/code&gt; is deprecated and removed in React v16. Use plain JavaScript classes instead.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;90&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can you force a component to re-render without calling setState?&lt;/h3&gt; &lt;p&gt;By default, when your component&#39;s state or props change, your component will re-render. If your &lt;code&gt;render()&lt;/code&gt; method depends on some other data, you can tell React that the component needs re-rendering by calling &lt;code&gt;forceUpdate()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;component.forceUpdate(callback)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to avoid all uses of &lt;code&gt;forceUpdate()&lt;/code&gt; and only read from &lt;code&gt;this.props&lt;/code&gt; and &lt;code&gt;this.state&lt;/code&gt; in &lt;code&gt;render()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;91&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;super()&lt;/code&gt; and &lt;code&gt;super(props)&lt;/code&gt; in React using ES6 classes?&lt;/h3&gt; &lt;p&gt;When you want to access &lt;code&gt;this.props&lt;/code&gt; in &lt;code&gt;constructor()&lt;/code&gt; then you should pass props to &lt;code&gt;super()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super(props)&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    console.log(this.props) // { name: &#39;John&#39;, ... }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;super()&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super()&#xA;    console.log(this.props) // undefined&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Outside &lt;code&gt;constructor()&lt;/code&gt; both will display same value for &lt;code&gt;this.props&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;92&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to loop inside JSX?&lt;/h3&gt; &lt;p&gt;You can simply use &lt;code&gt;Array.prototype.map&lt;/code&gt; with ES6 &lt;em&gt;arrow function&lt;/em&gt; syntax.&lt;/p&gt; &lt;p&gt;For example, the &lt;code&gt;items&lt;/code&gt; array of objects is mapped into an array of components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;tbody&amp;gt;&#xA;  {items.map(item =&amp;gt; &amp;lt;SomeComponent key={item.id} name={item.name} /&amp;gt;)}&#xA;&amp;lt;/tbody&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can&#39;t iterate using &lt;code&gt;for&lt;/code&gt; loop:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;tbody&amp;gt;&#xA;  for (let i = 0; i &amp;lt; items.length; i++) {&#xA;    &amp;lt;SomeComponent key={items[i].id} name={items[i].name} /&amp;gt;&#xA;  }&#xA;&amp;lt;/tbody&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This is because JSX tags are transpiled into &lt;em&gt;function calls&lt;/em&gt;, and you can&#39;t use statements inside expressions. This may change thanks to &lt;code&gt;do&lt;/code&gt; expressions which are &lt;em&gt;stage 1 proposal&lt;/em&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;93&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you access props in attribute quotes?&lt;/h3&gt; &lt;p&gt;React (or JSX) doesn&#39;t support variable interpolation inside an attribute value. The below representation won&#39;t work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;img className=&#39;image&#39; src=&#39;images/{this.props.image}&#39; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can put any JS expression inside curly braces as the entire attribute value. So the below expression works:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;img className=&#39;image&#39; src={&#39;images/&#39; + this.props.image} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Using &lt;em&gt;template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;img className=&#39;image&#39; src={`images/${this.props.image}`} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;94&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React proptype array with shape?&lt;/h3&gt; &lt;p&gt;If you want to pass an array of objects to a component with a particular shape then use &lt;code&gt;React.PropTypes.shape()&lt;/code&gt; as an argument to &lt;code&gt;React.PropTypes.arrayOf()&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ReactComponent.propTypes = {&#xA;  arrayWithShape: React.PropTypes.arrayOf(React.PropTypes.shape({&#xA;    color: React.PropTypes.string.isRequired,&#xA;    fontSize: React.PropTypes.number.isRequired&#xA;  })).isRequired&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;95&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to conditionally apply class attributes?&lt;/h3&gt; &lt;p&gt;You shouldn&#39;t use curly braces inside quotes because it is going to be evaluated as a string.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div className=&#34;btn-panel {this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}&#34;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Instead you need to move curly braces outside (don&#39;t forget to include spaces between class names):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div className={&#39;btn-panel &#39; + (this.props.visible ? &#39;show&#39; : &#39;hidden&#39;)}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Template strings&lt;/em&gt; will also work:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div className={`btn-panel ${this.props.visible ? &#39;show&#39; : &#39;hidden&#39;}`}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;96&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React and ReactDOM?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react&lt;/code&gt; package contains &lt;code&gt;React.createElement()&lt;/code&gt;, &lt;code&gt;React.Component&lt;/code&gt;, &lt;code&gt;React.Children&lt;/code&gt;, and other helpers related to elements and component classes. You can think of these as the isomorphic or universal helpers that you need to build components. The &lt;code&gt;react-dom&lt;/code&gt; package contains &lt;code&gt;ReactDOM.render()&lt;/code&gt;, and in &lt;code&gt;react-dom/server&lt;/code&gt; we have &lt;em&gt;server-side rendering&lt;/em&gt; support with &lt;code&gt;ReactDOMServer.renderToString()&lt;/code&gt; and &lt;code&gt;ReactDOMServer.renderToStaticMarkup()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;97&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why ReactDOM is separated from React?&lt;/h3&gt; &lt;p&gt;The React team worked on extracting all DOM-related features into a separate library called &lt;em&gt;ReactDOM&lt;/em&gt;. React v0.14 is the first release in which the libraries are split. By looking at some of the packages, &lt;code&gt;react-native&lt;/code&gt;, &lt;code&gt;react-art&lt;/code&gt;, &lt;code&gt;react-canvas&lt;/code&gt;, and &lt;code&gt;react-three&lt;/code&gt;, it has become clear that the beauty and essence of React has nothing to do with browsers or the DOM.&lt;/p&gt; &lt;p&gt;To build more environments that React can render to, React team planned to split the main React package into two: &lt;code&gt;react&lt;/code&gt; and &lt;code&gt;react-dom&lt;/code&gt;. This paves the way to writing components that can be shared between the web version of React and React Native.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;98&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use React label element?&lt;/h3&gt; &lt;p&gt;If you try to render a &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; element bound to a text input using the standard &lt;code&gt;for&lt;/code&gt; attribute, then it produces HTML missing that attribute and prints a warning to the console.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;label for={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;&#xA;&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Since &lt;code&gt;for&lt;/code&gt; is a reserved keyword in JavaScript, use &lt;code&gt;htmlFor&lt;/code&gt; instead.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;label htmlFor={&#39;user&#39;}&amp;gt;{&#39;User&#39;}&amp;lt;/label&amp;gt;&#xA;&amp;lt;input type={&#39;text&#39;} id={&#39;user&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;99&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to combine multiple inline style objects?&lt;/h3&gt; &lt;p&gt;You can use &lt;em&gt;spread operator&lt;/em&gt; in regular React:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt; &amp;lt;button style={{...styles.panel.button, ...styles.panel.submitButton}}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you&#39;re using React Native then you can use the array notation:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;button style={[styles.panel.button, styles.panel.submitButton]}&amp;gt;{&#39;Submit&#39;}&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;100&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to re-render the view when the browser is resized?&lt;/h3&gt; &lt;p&gt;You can listen to the &lt;code&gt;resize&lt;/code&gt; event in &lt;code&gt;componentDidMount()&lt;/code&gt; and then update the dimensions (&lt;code&gt;width&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt;). You should remove the listener in &lt;code&gt;componentWillUnmount()&lt;/code&gt; method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class WindowDimensions extends React.Component {&#xA;  constructor(props){&#xA;    super(props);&#xA;    this.updateDimensions = this.updateDimensions.bind(this);&#xA;  }&#xA;   &#xA;  componentWillMount() {&#xA;    this.updateDimensions()&#xA;  }&#xA;&#xA;  componentDidMount() {&#xA;    window.addEventListener(&#39;resize&#39;, this.updateDimensions)&#xA;  }&#xA;&#xA;  componentWillUnmount() {&#xA;    window.removeEventListener(&#39;resize&#39;, this.updateDimensions)&#xA;  }&#xA;&#xA;  updateDimensions() {&#xA;    this.setState({width: window.innerWidth, height: window.innerHeight})&#xA;  }&#xA;&#xA;  render() {&#xA;    return &amp;lt;span&amp;gt;{this.state.width} x {this.state.height}&amp;lt;/span&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;101&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;setState()&lt;/code&gt; and &lt;code&gt;replaceState()&lt;/code&gt; methods?&lt;/h3&gt; &lt;p&gt;When you use &lt;code&gt;setState()&lt;/code&gt; the current and previous states are merged. &lt;code&gt;replaceState()&lt;/code&gt; throws out the current state, and replaces it with only what you provide. Usually &lt;code&gt;setState()&lt;/code&gt; is used unless you really need to remove all previous keys for some reason. You can also set state to &lt;code&gt;false&lt;/code&gt;/&lt;code&gt;null&lt;/code&gt; in &lt;code&gt;setState()&lt;/code&gt; instead of using &lt;code&gt;replaceState()&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;102&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to listen to state changes?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;componentDidUpdate&lt;/code&gt; lifecycle method will be called when state changes. You can compare provided state and props values with current state and props to determine if something meaningful changed.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;componentDidUpdate(object prevProps, object prevState)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The previous releases of ReactJS also uses &lt;code&gt;componentWillUpdate(object nextProps, object nextState)&lt;/code&gt; for state changes. It has been deprecated in latest releases.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;103&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the recommended approach of removing an array element in React state?&lt;/h3&gt; &lt;p&gt;The better approach is to use &lt;code&gt;Array.prototype.filter()&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;For example, let&#39;s create a &lt;code&gt;removeItem()&lt;/code&gt; method for updating the state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;removeItem(index) {&#xA;  this.setState({&#xA;    data: this.state.data.filter((item, i) =&amp;gt; i !== index)&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;104&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it possible to use React without rendering HTML?&lt;/h3&gt; &lt;p&gt;It is possible with latest version (&amp;gt;=16.2). Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return false&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return null&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return []&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return &amp;lt;React.Fragment&amp;gt;&amp;lt;/React.Fragment&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA;  return &amp;lt;&amp;gt;&amp;lt;/&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Returning &lt;code&gt;undefined&lt;/code&gt; won&#39;t work.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;105&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pretty print JSON with React?&lt;/h3&gt; &lt;p&gt;We can use &lt;code&gt;&amp;lt;pre&amp;gt;&lt;/code&gt; tag so that the formatting of the &lt;code&gt;JSON.stringify()&lt;/code&gt; is retained:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const data = { name: &#39;John&#39;, age: 42 }&#xA;&#xA;class User extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;pre&amp;gt;&#xA;        {JSON.stringify(data, null, 2)}&#xA;      &amp;lt;/pre&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;React.render(&amp;lt;User /&amp;gt;, document.getElementById(&#39;container&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;106&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why you can&#39;t update props in React?&lt;/h3&gt; &lt;p&gt;The React philosophy is that props should be &lt;em&gt;immutable&lt;/em&gt; and &lt;em&gt;top-down&lt;/em&gt;. This means that a parent can send any prop values to a child, but the child can&#39;t modify received props.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;107&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to focus an input element on page load?&lt;/h3&gt; &lt;p&gt;You can do it by creating &lt;em&gt;ref&lt;/em&gt; for &lt;code&gt;input&lt;/code&gt; element and using it in &lt;code&gt;componentDidMount()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class App extends React.Component{&#xA;  componentDidMount() {&#xA;    this.nameInput.focus()&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;input&#xA;          defaultValue={&#39;Won\&#39;t focus&#39;}&#xA;        /&amp;gt;&#xA;        &amp;lt;input&#xA;          ref={(input) =&amp;gt; this.nameInput = input}&#xA;          defaultValue={&#39;Will focus&#39;}&#xA;        /&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Also in Functional component (react 16.08 and above)&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React, {useEffect, useRef} from &#39;react&#39;;&#xA;&#xA;const App = () =&amp;gt; {&#xA;  const inputElRef = useRef(null)&#xA;  &#xA;  useEffect(()=&amp;gt;{&#xA;    inputElRef.current.focus()&#xA;  }, [])&#xA;  &#xA;  return(&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;input&#xA;        defaultValue={&#39;Won\&#39;t focus&#39;}&#xA;      /&amp;gt;&#xA;      &amp;lt;input&#xA;        ref={inputElRef}&#xA;        defaultValue={&#39;Will focus&#39;}&#xA;      /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;app&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;108&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the possible ways of updating objects in state?&lt;/h3&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with an object to merge with state:&lt;/strong&gt;&lt;/p&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Using &lt;code&gt;Object.assign()&lt;/code&gt; to create a copy of the object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const user = Object.assign({}, this.state.user, { age: 42 })&#xA;this.setState({ user })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Using &lt;em&gt;spread operator&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const user = { ...this.state.user, age: 42 }&#xA;this.setState({ user })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Calling &lt;code&gt;setState()&lt;/code&gt; with a function:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.setState(prevState =&amp;gt; ({&#xA;  user: {&#xA;    ...prevState.user,&#xA;    age: 42&#xA;  }&#xA;}))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;110&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How can we find the version of React at runtime in the browser?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;React.version&lt;/code&gt; to get the version.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const REACT_VERSION = React.version&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;div&amp;gt;{`React version: ${REACT_VERSION}`}&amp;lt;/div&amp;gt;,&#xA;  document.getElementById(&#39;app&#39;)&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;111&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the approaches to include polyfills in your &lt;code&gt;create-react-app&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are approaches to include polyfills in create-react-app,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Manual import from &lt;code&gt;core-js&lt;/code&gt;:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Create a file called (something like) &lt;code&gt;polyfills.js&lt;/code&gt; and import it into root &lt;code&gt;index.js&lt;/code&gt; file. Run &lt;code&gt;npm install core-js&lt;/code&gt; or &lt;code&gt;yarn add core-js&lt;/code&gt; and import your specific required features.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;core-js/fn/array/find&#39;&#xA;import &#39;core-js/fn/array/includes&#39;&#xA;import &#39;core-js/fn/number/is-nan&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using Polyfill service:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use the polyfill.io CDN to retrieve custom, browser-specific polyfills by adding this line to &lt;code&gt;index.html&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#39;https://cdn.polyfill.io/v2/polyfill.min.js?features=default,Array.prototype.includes&#39;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above script we had to explicitly request the &lt;code&gt;Array.prototype.includes&lt;/code&gt; feature as it is not included in the default feature set.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;112&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use https instead of http in create-react-app?&lt;/h3&gt; &lt;p&gt;You just need to use &lt;code&gt;HTTPS=true&lt;/code&gt; configuration. You can edit your &lt;code&gt;package.json&lt;/code&gt; scripts section:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&#34;scripts&#34;: {&#xA;  &#34;start&#34;: &#34;set HTTPS=true &amp;amp;&amp;amp; react-scripts start&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or just run &lt;code&gt;set HTTPS=true &amp;amp;&amp;amp; npm start&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;113&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to avoid using relative path imports in create-react-app?&lt;/h3&gt; &lt;p&gt;Create a file called &lt;code&gt;.env&lt;/code&gt; in the project root and write the import path:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;NODE_PATH=src/app&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;After that restart the development server. Now you should be able to import anything inside &lt;code&gt;src/app&lt;/code&gt; without relative paths.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;114&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to add Google Analytics for React Router?&lt;/h3&gt; &lt;p&gt;Add a listener on the &lt;code&gt;history&lt;/code&gt; object to record each page view:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;history.listen(function (location) {&#xA;  window.ga(&#39;set&#39;, &#39;page&#39;, location.pathname + location.search)&#xA;  window.ga(&#39;send&#39;, &#39;pageview&#39;, location.pathname + location.search)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;115&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to update a component every second?&lt;/h3&gt; &lt;p&gt;You need to use &lt;code&gt;setInterval()&lt;/code&gt; to trigger the change, but you also need to clear the timer when the component unmounts to prevent errors and memory leaks.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;componentDidMount() {&#xA;  this.interval = setInterval(() =&amp;gt; this.setState({ time: Date.now() }), 1000)&#xA;}&#xA;&#xA;componentWillUnmount() {&#xA;  clearInterval(this.interval)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;116&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you apply vendor prefixes to inline styles in React?&lt;/h3&gt; &lt;p&gt;React &lt;em&gt;does not&lt;/em&gt; apply &lt;em&gt;vendor prefixes&lt;/em&gt; automatically. You need to add vendor prefixes manually.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;div style={{&#xA;  transform: &#39;rotate(90deg)&#39;,&#xA;  WebkitTransform: &#39;rotate(90deg)&#39;, // note the capital &#39;W&#39; here&#xA;  msTransform: &#39;rotate(90deg)&#39; // &#39;ms&#39; is the only lowercase vendor prefix&#xA;}} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;117&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to import and export components using React and ES6?&lt;/h3&gt; &lt;p&gt;You should use default for exporting the components&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import User from &#39;user&#39;&#xA;&#xA;export default class MyProfile extends React.Component {&#xA;  render(){&#xA;    return (&#xA;      &amp;lt;User type=&#34;customer&#34;&amp;gt;&#xA;        //...&#xA;      &amp;lt;/User&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;With the export specifier, the MyProfile is going to be the member and exported to this module and the same can be imported without mentioning the name in other components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;119&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why is a component constructor called only once?&lt;/h3&gt; &lt;p&gt;React&#39;s &lt;em&gt;reconciliation&lt;/em&gt; algorithm assumes that without any information to the contrary, if a custom component appears in the same place on subsequent renders, it&#39;s the same component as before, so reuses the previous instance rather than creating a new one.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;120&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to define constants in React?&lt;/h3&gt; &lt;p&gt;You can use ES7 &lt;code&gt;static&lt;/code&gt; field to define constant.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  static DEFAULT_PAGINATION = 10&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;121&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to programmatically trigger click event in React?&lt;/h3&gt; &lt;p&gt;You could use the ref prop to acquire a reference to the underlying &lt;code&gt;HTMLInputElement&lt;/code&gt; object through a callback, store the reference as a class property, then use that reference to later trigger a click from your event handlers using the &lt;code&gt;HTMLElement.click&lt;/code&gt; method.&lt;/p&gt; &lt;p&gt;This can be done in two steps:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create ref in render method:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;input ref={input =&amp;gt; this.inputElement = input} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Apply click event in your event handler:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.inputElement.click()&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;122&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it possible to use async/await in plain React?&lt;/h3&gt; &lt;p&gt;If you want to use &lt;code&gt;async&lt;/code&gt;/&lt;code&gt;await&lt;/code&gt; in React, you will need &lt;em&gt;Babel&lt;/em&gt; and &lt;a href=&#34;https://babeljs.io/docs/en/babel-plugin-transform-async-to-generator&#34;&gt;transform-async-to-generator&lt;/a&gt; plugin. React Native ships with Babel and a set of transforms.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;123&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the common folder structures for React?&lt;/h3&gt; &lt;p&gt;There are two common practices for React project file structure.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by features or routes:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;One common way to structure projects is locate CSS, JS, and tests together, grouped by feature or route.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;common/&#xA;├─ Avatar.js&#xA;├─ Avatar.css&#xA;├─ APIUtils.js&#xA;└─ APIUtils.test.js&#xA;feed/&#xA;├─ index.js&#xA;├─ Feed.js&#xA;├─ Feed.css&#xA;├─ FeedStory.js&#xA;├─ FeedStory.test.js&#xA;└─ FeedAPI.js&#xA;profile/&#xA;├─ index.js&#xA;├─ Profile.js&#xA;├─ ProfileHeader.js&#xA;├─ ProfileHeader.css&#xA;└─ ProfileAPI.js&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Grouping by file type:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Another popular way to structure projects is to group similar files together.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;api/&#xA;├─ APIUtils.js&#xA;├─ APIUtils.test.js&#xA;├─ ProfileAPI.js&#xA;└─ UserAPI.js&#xA;components/&#xA;├─ Avatar.js&#xA;├─ Avatar.css&#xA;├─ Feed.js&#xA;├─ Feed.css&#xA;├─ FeedStory.js&#xA;├─ FeedStory.test.js&#xA;├─ Profile.js&#xA;├─ ProfileHeader.js&#xA;└─ ProfileHeader.css&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;124&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the popular packages for animation?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Transition Group&lt;/em&gt; and &lt;em&gt;React Motion&lt;/em&gt; are popular animation packages in React ecosystem.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;125&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the benefit of styles modules?&lt;/h3&gt; &lt;p&gt;It is recommended to avoid hard coding style values in components. Any values that are likely to be used across different UI components should be extracted into their own modules.&lt;/p&gt; &lt;p&gt;For example, these styles could be extracted into a separate component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const colors = {&#xA;  white,&#xA;  black,&#xA;  blue&#xA;}&#xA;&#xA;export const space = [&#xA;  0,&#xA;  8,&#xA;  16,&#xA;  32,&#xA;  64&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then imported individually in other components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { space, colors } from &#39;./styles&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;126&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the popular React-specific linters?&lt;/h3&gt; &lt;p&gt;ESLint is a popular JavaScript linter. There are plugins available that analyse specific code styles. One of the most common for React is an npm package called &lt;code&gt;eslint-plugin-react&lt;/code&gt;. By default, it will check a number of best practices, with rules checking things from keys in iterators to a complete set of prop types.&lt;/p&gt; &lt;p&gt;Another popular plugin is &lt;code&gt;eslint-plugin-jsx-a11y&lt;/code&gt;, which will help fix common issues with accessibility. As JSX offers slightly different syntax to regular HTML, issues with &lt;code&gt;alt&lt;/code&gt; text and &lt;code&gt;tabindex&lt;/code&gt;, for example, will not be picked up by regular plugins.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;127&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to make AJAX call and in which component lifecycle methods should I make an AJAX call?&lt;/h3&gt; &lt;p&gt;You can use AJAX libraries such as Axios, jQuery AJAX, and the browser built-in &lt;code&gt;fetch&lt;/code&gt;. You should fetch data in the &lt;code&gt;componentDidMount()&lt;/code&gt; lifecycle method. This is so you can use &lt;code&gt;setState()&lt;/code&gt; to update your component when the data is retrieved.&lt;/p&gt; &lt;p&gt;For example, the employees list fetched from API and set local state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props)&#xA;    this.state = {&#xA;      employees: [],&#xA;      error: null&#xA;    }&#xA;  }&#xA;&#xA;  componentDidMount() {&#xA;    fetch(&#39;https://api.example.com/items&#39;)&#xA;      .then(res =&amp;gt; res.json())&#xA;      .then(&#xA;        (result) =&amp;gt; {&#xA;          this.setState({&#xA;            employees: result.employees&#xA;          })&#xA;        },&#xA;        (error) =&amp;gt; {&#xA;          this.setState({ error })&#xA;        }&#xA;      )&#xA;  }&#xA;&#xA;  render() {&#xA;    const { error, employees } = this.state&#xA;    if (error) {&#xA;      return &amp;lt;div&amp;gt;Error: {error.message}&amp;lt;/div&amp;gt;;&#xA;    } else {&#xA;      return (&#xA;        &amp;lt;ul&amp;gt;&#xA;          {employees.map(employee =&amp;gt; (&#xA;            &amp;lt;li key={employee.name}&amp;gt;&#xA;              {employee.name}-{employee.experience}&#xA;            &amp;lt;/li&amp;gt;&#xA;          ))}&#xA;        &amp;lt;/ul&amp;gt;&#xA;      )&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;128&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are render props?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Render Props&lt;/strong&gt; is a simple technique for sharing code between components using a prop whose value is a function. The below component uses render prop which returns a React element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;DataProvider render={data =&amp;gt; (&#xA;  &amp;lt;h1&amp;gt;{`Hello ${data.target}`}&amp;lt;/h1&amp;gt;&#xA;)}/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Libraries such as React Router and DownShift are using this pattern.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Router&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;129&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Router?&lt;/h3&gt; &lt;p&gt;React Router is a powerful routing library built on top of React that helps you add new screens and flows to your application incredibly quickly, all while keeping the URL in sync with what&#39;s being displayed on the page.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;130&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How React Router is different from history library?&lt;/h3&gt; &lt;p&gt;React Router is a wrapper around the &lt;code&gt;history&lt;/code&gt; library which handles interaction with the browser&#39;s &lt;code&gt;window.history&lt;/code&gt; with its browser and hash histories. It also provides memory history which is useful for environments that don&#39;t have global history, such as mobile app development (React Native) and unit testing with Node.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;131&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components of React Router v4?&lt;/h3&gt; &lt;p&gt;React Router v4 provides below 3 &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; components:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;HashRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&amp;lt;MemoryRouter&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The above components will create &lt;em&gt;browser&lt;/em&gt;, &lt;em&gt;hash&lt;/em&gt;, and &lt;em&gt;memory&lt;/em&gt; history instances. React Router v4 makes the properties and methods of the &lt;code&gt;history&lt;/code&gt; instance associated with your router available through the context in the &lt;code&gt;router&lt;/code&gt; object.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;132&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods of &lt;code&gt;history&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;A history instance has two methods for navigation purpose.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;code&gt;push()&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;replace()&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;If you think of the history as an array of visited locations, &lt;code&gt;push()&lt;/code&gt; will add a new location to the array and &lt;code&gt;replace()&lt;/code&gt; will replace the current location in the array with the new one.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;133&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you programmatically navigate using React Router v4?&lt;/h3&gt; &lt;p&gt;There are three different ways to achieve programmatic routing/navigation within components.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using the &lt;code&gt;withRouter()&lt;/code&gt; higher-order function:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;withRouter()&lt;/code&gt; higher-order function will inject the history object as a prop of the component. This object provides &lt;code&gt;push()&lt;/code&gt; and &lt;code&gt;replace()&lt;/code&gt; methods to avoid the usage of context.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { withRouter } from &#39;react-router-dom&#39; // this also works with &#39;react-router-native&#39;&#xA;&#xA;const Button = withRouter(({ history }) =&amp;gt; (&#xA;  &amp;lt;button&#xA;    type=&#39;button&#39;&#xA;    onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}&#xA;  &amp;gt;&#xA;    {&#39;Click Me!&#39;}&#xA;  &amp;lt;/button&amp;gt;&#xA;))&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component and render props pattern:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; component passes the same props as &lt;code&gt;withRouter()&lt;/code&gt;, so you will be able to access the history methods through the history prop.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Route } from &#39;react-router-dom&#39;&#xA;&#xA;const Button = () =&amp;gt; (&#xA;  &amp;lt;Route render={({ history }) =&amp;gt; (&#xA;    &amp;lt;button&#xA;      type=&#39;button&#39;&#xA;      onClick={() =&amp;gt; { history.push(&#39;/new-location&#39;) }}&#xA;    &amp;gt;&#xA;      {&#39;Click Me!&#39;}&#xA;    &amp;lt;/button&amp;gt;&#xA;  )} /&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using context:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;This option is not recommended and treated as unstable API.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const Button = (props, context) =&amp;gt; (&#xA;  &amp;lt;button&#xA;    type=&#39;button&#39;&#xA;    onClick={() =&amp;gt; {&#xA;      context.history.push(&#39;/new-location&#39;)&#xA;    }}&#xA;  &amp;gt;&#xA;    {&#39;Click Me!&#39;}&#xA;  &amp;lt;/button&amp;gt;&#xA;)&#xA;&#xA;Button.contextTypes = {&#xA;  history: React.PropTypes.shape({&#xA;    push: React.PropTypes.func.isRequired&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;134&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to get query parameters in React Router v4?&lt;/h3&gt; &lt;p&gt;The ability to parse query strings was taken out of React Router v4 because there have been user requests over the years to support different implementation. So the decision has been given to users to choose the implementation they like. The recommended approach is to use query strings library.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const queryString = require(&#39;query-string&#39;);&#xA;const parsed = queryString.parse(props.location.search);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also use &lt;code&gt;URLSearchParams&lt;/code&gt; if you want something native:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const params = new URLSearchParams(props.location.search)&#xA;const foo = params.get(&#39;name&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You should use a &lt;em&gt;polyfill&lt;/em&gt; for IE11.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;135&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why you get &#34;Router may have only one child element&#34; warning?&lt;/h3&gt; &lt;p&gt;You have to wrap your Route&#39;s in a &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block because &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; is unique in that it renders a route exclusively.&lt;/p&gt; &lt;p&gt;At first you need to add &lt;code&gt;Switch&lt;/code&gt; to your imports:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { Switch, Router, Route } from &#39;react-router&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then define the routes within &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; block:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Router&amp;gt;&#xA;  &amp;lt;Switch&amp;gt;&#xA;    &amp;lt;Route {/* ... */} /&amp;gt;&#xA;    &amp;lt;Route {/* ... */} /&amp;gt;&#xA;  &amp;lt;/Switch&amp;gt;&#xA;&amp;lt;/Router&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;136&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pass params to &lt;code&gt;history.push&lt;/code&gt; method in React Router v4?&lt;/h3&gt; &lt;p&gt;While navigating you can pass props to the &lt;code&gt;history&lt;/code&gt; object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;this.props.history.push({&#xA;  pathname: &#39;/template&#39;,&#xA;  search: &#39;?name=sudheer&#39;,&#xA;  state: { detail: response.data }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;search&lt;/code&gt; property is used to pass query params in &lt;code&gt;push()&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;137&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to implement &lt;em&gt;default&lt;/em&gt; or &lt;em&gt;NotFound&lt;/em&gt; page?&lt;/h3&gt; &lt;p&gt;A &lt;code&gt;&amp;lt;Switch&amp;gt;&lt;/code&gt; renders the first child &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; that matches. A &lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt; with no path always matches. So you just need to simply drop path attribute as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Switch&amp;gt;&#xA;  &amp;lt;Route exact path=&#34;/&#34; component={Home}/&amp;gt;&#xA;  &amp;lt;Route path=&#34;/user&#34; component={User}/&amp;gt;&#xA;  &amp;lt;Route component={NotFound} /&amp;gt;&#xA;&amp;lt;/Switch&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;138&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to get history on React Router v4?&lt;/h3&gt; &lt;p&gt;Below are the list of steps to get history object on React Router v4,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create a module that exports a &lt;code&gt;history&lt;/code&gt; object and import this module across the project.&lt;/p&gt; &lt;p&gt;For example, create &lt;code&gt;history.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createBrowserHistory } from &#39;history&#39;&#xA;&#xA;export default createBrowserHistory({&#xA;  /* pass a configuration object here if needed */&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You should use the &lt;code&gt;&amp;lt;Router&amp;gt;&lt;/code&gt; component instead of built-in routers. Import the above &lt;code&gt;history.js&lt;/code&gt; inside &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Router } from &#39;react-router-dom&#39;&#xA;import history from &#39;./history&#39;&#xA;import App from &#39;./App&#39;&#xA;&#xA;ReactDOM.render((&#xA;  &amp;lt;Router history={history}&amp;gt;&#xA;    &amp;lt;App /&amp;gt;&#xA;  &amp;lt;/Router&amp;gt;&#xA;), holder)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;You can also use push method of &lt;code&gt;history&lt;/code&gt; object similar to built-in history object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// some-other-file.js&#xA;import history from &#39;./history&#39;&#xA;&#xA;history.push(&#39;/go-here&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;139&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to perform automatic redirect after login?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;react-router&lt;/code&gt; package provides &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; component in React Router. Rendering a &lt;code&gt;&amp;lt;Redirect&amp;gt;&lt;/code&gt; will navigate to a new location. Like server-side redirects, the new location will override the current location in the history stack.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;&#xA;import { Redirect } from &#39;react-router&#39;&#xA;&#xA;export default class LoginComponent extends Component {&#xA;  render() {&#xA;    if (this.state.isLoggedIn === true) {&#xA;      return &amp;lt;Redirect to=&#34;/your/redirect/page&#34; /&amp;gt;&#xA;    } else {&#xA;      return &amp;lt;div&amp;gt;{&#39;Login Please&#39;}&amp;lt;/div&amp;gt;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Internationalization&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;140&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;em&gt;React Intl&lt;/em&gt; library makes internalization in React straightforward, with off-the-shelf components and an API that can handle everything from formatting strings, dates, and numbers, to pluralization. React Intl is part of &lt;em&gt;FormatJS&lt;/em&gt; which provides bindings to React via its components and API.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;141&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the main features of React Intl?&lt;/h3&gt; &lt;p&gt;Below are the main features of React Intl,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Display numbers with separators.&lt;/li&gt; &#xA;   &lt;li&gt;Display dates and times correctly.&lt;/li&gt; &#xA;   &lt;li&gt;Display dates relative to &#34;now&#34;.&lt;/li&gt; &#xA;   &lt;li&gt;Pluralize labels in strings.&lt;/li&gt; &#xA;   &lt;li&gt;Support for 150+ languages.&lt;/li&gt; &#xA;   &lt;li&gt;Runs in the browser and Node.&lt;/li&gt; &#xA;   &lt;li&gt;Built on standards.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;142&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the two ways of formatting in React Intl?&lt;/h3&gt; &lt;p&gt;The library provides two ways to format strings, numbers, and dates:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using react components:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;FormattedMessage&#xA;  id={&#39;account&#39;}&#xA;  defaultMessage={&#39;The amount is less than minimum balance.&#39;}&#xA;/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Using an API:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const messages = defineMessages({&#xA;  accountMessage: {&#xA;    id: &#39;account&#39;,&#xA;    defaultMessage: &#39;The amount is less than minimum balance.&#39;,&#xA;  }&#xA;})&#xA;&#xA;formatMessage(messages.accountMessage)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;143&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;&amp;lt;FormattedMessage&amp;gt;&lt;/code&gt; as placeholder using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;&amp;lt;Formatted... /&amp;gt;&lt;/code&gt; components from &lt;code&gt;react-intl&lt;/code&gt; return elements, not plain text, so they can&#39;t be used for placeholders, alt text, etc. In that case, you should use lower level API &lt;code&gt;formatMessage()&lt;/code&gt;. You can inject the &lt;code&gt;intl&lt;/code&gt; object into your component using &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component and then format the message using &lt;code&gt;formatMessage()&lt;/code&gt; available on that object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import { injectIntl, intlShape } from &#39;react-intl&#39;&#xA;&#xA;const MyComponent = ({ intl }) =&amp;gt; {&#xA;  const placeholder = intl.formatMessage({id: &#39;messageId&#39;})&#xA;  return &amp;lt;input placeholder={placeholder} /&amp;gt;&#xA;}&#xA;&#xA;MyComponent.propTypes = {&#xA;  intl: intlShape.isRequired&#xA;}&#xA;&#xA;export default injectIntl(MyComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;144&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to access current locale with React Intl?&lt;/h3&gt; &lt;p&gt;You can get the current locale in any component of your application using &lt;code&gt;injectIntl()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;&#xA;&#xA;const MyComponent = ({ intl }) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;{`The current locale is ${intl.locale}`}&amp;lt;/div&amp;gt;&#xA;)&#xA;&#xA;MyComponent.propTypes = {&#xA;  intl: intlShape.isRequired&#xA;}&#xA;&#xA;export default injectIntl(MyComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;145&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to format date using React Intl?&lt;/h3&gt; &lt;p&gt;The &lt;code&gt;injectIntl()&lt;/code&gt; higher-order component will give you access to the &lt;code&gt;formatDate()&lt;/code&gt; method via the props in your component. The method is used internally by instances of &lt;code&gt;FormattedDate&lt;/code&gt; and it returns the string representation of the formatted date.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { injectIntl, intlShape } from &#39;react-intl&#39;&#xA;&#xA;const stringDate = this.props.intl.formatDate(date, {&#xA;  year: &#39;numeric&#39;,&#xA;  month: &#39;numeric&#39;,&#xA;  day: &#39;numeric&#39;&#xA;})&#xA;&#xA;const MyComponent = ({intl}) =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;{`The formatted date is ${stringDate}`}&amp;lt;/div&amp;gt;&#xA;)&#xA;&#xA;MyComponent.propTypes = {&#xA;  intl: intlShape.isRequired&#xA;}&#xA;&#xA;export default injectIntl(MyComponent)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;146&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Shallow Renderer in React testing?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Shallow rendering&lt;/em&gt; is useful for writing unit test cases in React. It lets you render a component &lt;em&gt;one level deep&lt;/em&gt; and assert facts about what its render method returns, without worrying about the behavior of child components, which are not instantiated or rendered.&lt;/p&gt; &lt;p&gt;For example, if you have the following component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function MyComponent() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;&#xA;      &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Then you can assert as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import ShallowRenderer from &#39;react-test-renderer/shallow&#39;&#xA;&#xA;// in your test&#xA;const renderer = new ShallowRenderer()&#xA;renderer.render(&amp;lt;MyComponent /&amp;gt;)&#xA;&#xA;const result = renderer.getRenderOutput()&#xA;&#xA;expect(result.type).toBe(&#39;div&#39;)&#xA;expect(result.props.children).toEqual([&#xA;  &amp;lt;span className={&#39;heading&#39;}&amp;gt;{&#39;Title&#39;}&amp;lt;/span&amp;gt;,&#xA;  &amp;lt;span className={&#39;description&#39;}&amp;gt;{&#39;Description&#39;}&amp;lt;/span&amp;gt;&#xA;])&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;147&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is &lt;code&gt;TestRenderer&lt;/code&gt; package in React?&lt;/h3&gt; &lt;p&gt;This package provides a renderer that can be used to render components to pure JavaScript objects, without depending on the DOM or a native mobile environment. This package makes it easy to grab a snapshot of the platform view hierarchy (similar to a DOM tree) rendered by a ReactDOM or React Native without using a browser or &lt;code&gt;jsdom&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import TestRenderer from &#39;react-test-renderer&#39;&#xA;&#xA;const Link = ({page, children}) =&amp;gt; &amp;lt;a href={page}&amp;gt;{children}&amp;lt;/a&amp;gt;&#xA;&#xA;const testRenderer = TestRenderer.create(&#xA;  &amp;lt;Link page={&#39;https://www.facebook.com/&#39;}&amp;gt;{&#39;Facebook&#39;}&amp;lt;/Link&amp;gt;&#xA;)&#xA;&#xA;console.log(testRenderer.toJSON())&#xA;// {&#xA;//   type: &#39;a&#39;,&#xA;//   props: { href: &#39;https://www.facebook.com/&#39; },&#xA;//   children: [ &#39;Facebook&#39; ]&#xA;// }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;148&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of ReactTestUtils package?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;ReactTestUtils&lt;/em&gt; are provided in the &lt;code&gt;with-addons&lt;/code&gt; package and allow you to perform actions against a simulated DOM for the purpose of unit testing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;149&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Jest?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Jest&lt;/em&gt; is a JavaScript unit testing framework created by Facebook based on Jasmine and provides automated mock creation and a &lt;code&gt;jsdom&lt;/code&gt; environment. It&#39;s often used for testing components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;150&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of Jest over Jasmine?&lt;/h3&gt; &lt;p&gt;There are couple of advantages compared to Jasmine:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Automatically finds tests to execute in your source code.&lt;/li&gt; &#xA;   &lt;li&gt;Automatically mocks dependencies when running your tests.&lt;/li&gt; &#xA;   &lt;li&gt;Allows you to test asynchronous code synchronously.&lt;/li&gt; &#xA;   &lt;li&gt;Runs your tests with a fake DOM implementation (via &lt;code&gt;jsdom&lt;/code&gt;) so that your tests can be run on the command line.&lt;/li&gt; &#xA;   &lt;li&gt;Runs tests in parallel processes so that they finish sooner.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;151&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Give a simple example of Jest test case&lt;/h3&gt; &lt;p&gt;Let&#39;s write a test for a function that adds two numbers in &lt;code&gt;sum.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const sum = (a, b) =&amp;gt; a + b&#xA;&#xA;export default sum&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Create a file named &lt;code&gt;sum.test.js&lt;/code&gt; which contains actual test:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import sum from &#39;./sum&#39;&#xA;&#xA;test(&#39;adds 1 + 2 to equal 3&#39;, () =&amp;gt; {&#xA;  expect(sum(1, 2)).toBe(3)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;And then add the following section to your &lt;code&gt;package.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;scripts&#34;: {&#xA;    &#34;test&#34;: &#34;jest&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Finally, run &lt;code&gt;yarn test&lt;/code&gt; or &lt;code&gt;npm test&lt;/code&gt; and Jest will print a result:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ yarn test&#xA;PASS ./sum.test.js&#xA;✓ adds 1 + 2 to equal 3 (2ms)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React Redux&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;152&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is flux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flux&lt;/em&gt; is an &lt;em&gt;application design paradigm&lt;/em&gt; used as a replacement for the more traditional MVC pattern. It is not a framework or a library but a new kind of architecture that complements React and the concept of Unidirectional Data Flow. Facebook uses this pattern internally when working with React.&lt;/p&gt; &lt;p&gt;The workflow between dispatcher, stores and views components with distinct inputs and outputs as follows:&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/flux.png&#34; alt=&#34;flux&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;153&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux&lt;/em&gt; is a predictable state container for JavaScript apps based on the &lt;em&gt;Flux design pattern&lt;/em&gt;. Redux can be used together with React, or with any other view library. It is tiny (about 2kB) and has no dependencies.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;154&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the core principles of Redux?&lt;/h3&gt; &lt;p&gt;Redux follows three fundamental principles:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Single source of truth:&lt;/strong&gt; The state of your whole application is stored in an object tree within a single store. The single state tree makes it easier to keep track of changes over time and debug or inspect the application.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;State is read-only:&lt;/strong&gt; The only way to change the state is to emit an action, an object describing what happened. This ensures that neither the views nor the network callbacks will ever write directly to the state.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Changes are made with pure functions:&lt;/strong&gt; To specify how the state tree is transformed by actions, you write reducers. Reducers are just pure functions that take the previous state and an action as parameters, and return the next state.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;155&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the downsides of Redux compared to Flux?&lt;/h3&gt; &lt;p&gt;Instead of saying downsides we can say that there are few compromises of using Redux over Flux. Those are as follows:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;You will need to learn to avoid mutations:&lt;/strong&gt; Flux is un-opinionated about mutating data, but Redux doesn&#39;t like mutations and many packages complementary to Redux assume you never mutate the state. You can enforce this with dev-only packages like &lt;code&gt;redux-immutable-state-invariant&lt;/code&gt;, Immutable.js, or instructing your team to write non-mutating code.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;You&#39;re going to have to carefully pick your packages:&lt;/strong&gt; While Flux explicitly doesn&#39;t try to solve problems such as undo/redo, persistence, or forms, Redux has extension points such as middleware and store enhancers, and it has spawned a rich ecosystem.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;There is no nice Flow integration yet:&lt;/strong&gt; Flux currently lets you do very impressive static type checks which Redux doesn&#39;t support yet.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;156&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;mapStateToProps()&lt;/code&gt; is a utility which helps your component get updated state (which is updated by some other components):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapStateToProps = (state) =&amp;gt; {&#xA;  return {&#xA;    todos: getVisibleTodos(state.todos, state.visibilityFilter)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;code&gt;mapDispatchToProps()&lt;/code&gt; is a utility which will help your component to fire an action event (dispatching action which may cause change of application state):&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; {&#xA;  return {&#xA;    onTodoClick: (id) =&amp;gt; {&#xA;      dispatch(toggleTodo(id))&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;It is recommended to always use the “object shorthand” form for the &lt;code&gt;mapDispatchToProps&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Redux wraps it in another function that looks like (…args) =&amp;gt; dispatch(onTodoClick(…args)), and pass that wrapper function as a prop to your component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; const mapDispatchToProps = ({&#xA;   onTodoClick&#xA; })&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;157&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I dispatch an action in reducer?&lt;/h3&gt; &lt;p&gt;Dispatching an action within a reducer is an &lt;strong&gt;anti-pattern&lt;/strong&gt;. Your reducer should be &lt;em&gt;without side effects&lt;/em&gt;, simply digesting the action payload and returning a new state object. Adding listeners and dispatching actions within the reducer can lead to chained actions and other side effects.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;158&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to access Redux store outside a component?&lt;/h3&gt; &lt;p&gt;You just need to export the store from the module where it created with &lt;code&gt;createStore()&lt;/code&gt;. Also, it shouldn&#39;t pollute the global window object.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;store = createStore(myReducer)&#xA;&#xA;export default store&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;159&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the drawbacks of MVW pattern?&lt;/h3&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;DOM manipulation is very expensive which causes applications to behave slow and inefficient.&lt;/li&gt; &#xA;   &lt;li&gt;Due to circular dependencies, a complicated model was created around models and views.&lt;/li&gt; &#xA;   &lt;li&gt;Lot of data changes happens for collaborative applications(like Google Docs).&lt;/li&gt; &#xA;   &lt;li&gt;No way to do undo (travel back in time) easily without adding so much extra code.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;160&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Are there any similarities between Redux and RxJS?&lt;/h3&gt; &lt;p&gt;These libraries are very different for very different purposes, but there are some vague similarities.&lt;/p&gt; &lt;p&gt;Redux is a tool for managing state throughout the application. It is usually used as an architecture for UIs. Think of it as an alternative to (half of) Angular. RxJS is a reactive programming library. It is usually used as a tool to accomplish asynchronous tasks in JavaScript. Think of it as an alternative to Promises. Redux uses the Reactive paradigm because the Store is reactive. The Store observes actions from a distance, and changes itself. RxJS also uses the Reactive paradigm, but instead of being an architecture, it gives you basic building blocks, Observables, to accomplish this pattern.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;161&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to dispatch an action on load?&lt;/h3&gt; &lt;p&gt;You can dispatch an action in &lt;code&gt;componentDidMount()&lt;/code&gt; method and in &lt;code&gt;render()&lt;/code&gt; method you can verify the data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends Component {&#xA;  componentDidMount() {&#xA;    this.props.fetchData()&#xA;  }&#xA;&#xA;  render() {&#xA;    return this.props.isLoaded&#xA;      ? &amp;lt;div&amp;gt;{&#39;Loaded&#39;}&amp;lt;/div&amp;gt;&#xA;      : &amp;lt;div&amp;gt;{&#39;Not Loaded&#39;}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&#xA;const mapStateToProps = (state) =&amp;gt; ({&#xA;  isLoaded: state.isLoaded&#xA;})&#xA;&#xA;const mapDispatchToProps = { fetchData }&#xA;&#xA;export default connect(mapStateToProps, mapDispatchToProps)(App)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;162&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use &lt;code&gt;connect()&lt;/code&gt; from React Redux?&lt;/h3&gt; &lt;p&gt;You need to follow two steps to use your store in your container:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Use &lt;code&gt;mapStateToProps()&lt;/code&gt;:&lt;/strong&gt; It maps the state variables from your store to the props that you specify.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Connect the above props to your container:&lt;/strong&gt; The object returned by the &lt;code&gt;mapStateToProps&lt;/code&gt; function is connected to the container. You can import &lt;code&gt;connect()&lt;/code&gt; from &lt;code&gt;react-redux&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import React from &#39;react&#39;&#xA;import { connect } from &#39;react-redux&#39;&#xA;&#xA;class App extends React.Component {&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;{this.props.containerData}&amp;lt;/div&amp;gt;&#xA;  }&#xA;}&#xA;&#xA;function mapStateToProps(state) {&#xA;  return { containerData: state.data }&#xA;}&#xA;&#xA;export default connect(mapStateToProps)(App)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;163&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to reset state in Redux?&lt;/h3&gt; &lt;p&gt;You need to write a &lt;em&gt;root reducer&lt;/em&gt; in your application which delegate handling the action to the reducer generated by &lt;code&gt;combineReducers()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take &lt;code&gt;rootReducer()&lt;/code&gt; to return the initial state after &lt;code&gt;USER_LOGOUT&lt;/code&gt; action. As we know, reducers are supposed to return the initial state when they are called with &lt;code&gt;undefined&lt;/code&gt; as the first argument, no matter the action.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const appReducer = combineReducers({&#xA;  /* your app&#39;s top-level reducers */&#xA;})&#xA;&#xA;const rootReducer = (state, action) =&amp;gt; {&#xA;  if (action.type === &#39;USER_LOGOUT&#39;) {&#xA;    state = undefined&#xA;  }&#xA;&#xA;  return appReducer(state, action)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In case of using &lt;code&gt;redux-persist&lt;/code&gt;, you may also need to clean your storage. &lt;code&gt;redux-persist&lt;/code&gt; keeps a copy of your state in a storage engine. First, you need to import the appropriate storage engine and then, to parse the state before setting it to undefined and clean each storage state key.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const appReducer = combineReducers({&#xA;  /* your app&#39;s top-level reducers */&#xA;})&#xA;&#xA;const rootReducer = (state, action) =&amp;gt; {&#xA;  if (action.type === &#39;USER_LOGOUT&#39;) {&#xA;    Object.keys(state).forEach(key =&amp;gt; {&#xA;      storage.removeItem(`persist:${key}`)&#xA;    })&#xA;&#xA;    state = undefined&#xA;  }&#xA;&#xA;  return appReducer(state, action)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;164&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Whats the purpose of &lt;code&gt;at&lt;/code&gt; symbol in the Redux connect decorator?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;@&lt;/strong&gt; symbol is in fact a JavaScript expression used to signify decorators. &lt;em&gt;Decorators&lt;/em&gt; make it possible to annotate and modify classes and properties at design time.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example setting up Redux without and with a decorator.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Without decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;import * as actionCreators from &#39;./actionCreators&#39;&#xA;import { bindActionCreators } from &#39;redux&#39;&#xA;import { connect } from &#39;react-redux&#39;&#xA;&#xA;function mapStateToProps(state) {&#xA;  return { todos: state.todos }&#xA;}&#xA;&#xA;function mapDispatchToProps(dispatch) {&#xA;  return { actions: bindActionCreators(actionCreators, dispatch) }&#xA;}&#xA;&#xA;class MyApp extends React.Component {&#xA;  // ...define your main app here&#xA;}&#xA;&#xA;export default connect(mapStateToProps, mapDispatchToProps)(MyApp)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;With decorator:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;import * as actionCreators from &#39;./actionCreators&#39;&#xA;import { bindActionCreators } from &#39;redux&#39;&#xA;import { connect } from &#39;react-redux&#39;&#xA;&#xA;function mapStateToProps(state) {&#xA;  return { todos: state.todos }&#xA;}&#xA;&#xA;function mapDispatchToProps(dispatch) {&#xA;  return { actions: bindActionCreators(actionCreators, dispatch) }&#xA;}&#xA;&#xA;@connect(mapStateToProps, mapDispatchToProps)&#xA;export default class MyApp extends React.Component {&#xA;  // ...define your main app here&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;The above examples are almost similar except the usage of decorator. The decorator syntax isn&#39;t built into any JavaScript runtimes yet, and is still experimental and subject to change. You can use babel for the decorators support.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;165&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React context and React Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;strong&gt;Context&lt;/strong&gt; in your application directly and is going to be great for passing down data to deeply nested components which what it was designed for.&lt;/p&gt; &lt;p&gt;Whereas &lt;strong&gt;Redux&lt;/strong&gt; is much more powerful and provides a large number of features that the Context API doesn&#39;t provide. Also, React Redux uses context internally but it doesn&#39;t expose this fact in the public API.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;166&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are Redux state functions called reducers?&lt;/h3&gt; &lt;p&gt;Reducers always return the accumulation of the state (based on all previous and current actions). Therefore, they act as a reducer of state. Each time a Redux reducer is called, the state and action are passed as parameters. This state is then reduced (or accumulated) based on the action, and then the next state is returned. You could &lt;em&gt;reduce&lt;/em&gt; a collection of actions and an initial state (of the store) on which to perform these actions to get the resulting final state.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;167&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to make AJAX request in Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;redux-thunk&lt;/code&gt; middleware which allows you to define async actions.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of fetching specific account as an AJAX call using &lt;em&gt;fetch API&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export function fetchAccount(id) {&#xA;  return dispatch =&amp;gt; {&#xA;    dispatch(setLoadingAccountState()) // Show a loading spinner&#xA;    fetch(`/account/${id}`, (response) =&amp;gt; {&#xA;      dispatch(doneFetchingAccount()) // Hide loading spinner&#xA;      if (response.status === 200) {&#xA;        dispatch(setAccount(response.json)) // Use a normal function to set the received state&#xA;      } else {&#xA;        dispatch(someError)&#xA;      }&#xA;    })&#xA;  }&#xA;}&#xA;&#xA;function setAccount(data) {&#xA; return { type: &#39;SET_Account&#39;, data: data }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;168&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Should I keep all component&#39;s state in Redux store?&lt;/h3&gt; &lt;p&gt;Keep your data in the Redux store, and the UI related state internally in the component.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;169&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the proper way to access Redux store?&lt;/h3&gt; &lt;p&gt;The best way to access your store in a component is to use the &lt;code&gt;connect()&lt;/code&gt; function, that creates a new component that wraps around your existing one. This pattern is called &lt;em&gt;Higher-Order Components&lt;/em&gt;, and is generally the preferred way of extending a component&#39;s functionality in React. This allows you to map state and action creators to your component, and have them passed in automatically as your store updates.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of &lt;code&gt;&amp;lt;FilterLink&amp;gt;&lt;/code&gt; component using connect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { connect } from &#39;react-redux&#39;&#xA;import { setVisibilityFilter } from &#39;../actions&#39;&#xA;import Link from &#39;../components/Link&#39;&#xA;&#xA;const mapStateToProps = (state, ownProps) =&amp;gt; ({&#xA;  active: ownProps.filter === state.visibilityFilter&#xA;})&#xA;&#xA;const mapDispatchToProps = (dispatch, ownProps) =&amp;gt; ({&#xA;  onClick: () =&amp;gt; dispatch(setVisibilityFilter(ownProps.filter))&#xA;})&#xA;&#xA;const FilterLink = connect(&#xA;  mapStateToProps,&#xA;  mapDispatchToProps&#xA;)(Link)&#xA;&#xA;export default FilterLink&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Due to it having quite a few performance optimizations and generally being less likely to cause bugs, the Redux developers almost always recommend using &lt;code&gt;connect()&lt;/code&gt; over accessing the store directly (using context API).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent {&#xA;  someMethod() {&#xA;    doSomethingWith(this.context.store)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;170&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between component and container in React Redux?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Component&lt;/strong&gt; is a class or function component that describes the presentational part of your application.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Container&lt;/strong&gt; is an informal term for a component that is connected to a Redux store. Containers &lt;em&gt;subscribe&lt;/em&gt; to Redux state updates and &lt;em&gt;dispatch&lt;/em&gt; actions, and they usually don&#39;t render DOM elements; they delegate rendering to presentational child components.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;171&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of the constants in Redux?&lt;/h3&gt; &lt;p&gt;Constants allows you to easily find all usages of that specific functionality across the project when you use an IDE. It also prevents you from introducing silly bugs caused by typos – in which case, you will get a &lt;code&gt;ReferenceError&lt;/code&gt; immediately.&lt;/p&gt; &lt;p&gt;Normally we will save them in a single file (&lt;code&gt;constants.js&lt;/code&gt; or &lt;code&gt;actionTypes.js&lt;/code&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;export const ADD_TODO = &#39;ADD_TODO&#39;&#xA;export const DELETE_TODO = &#39;DELETE_TODO&#39;&#xA;export const EDIT_TODO = &#39;EDIT_TODO&#39;&#xA;export const COMPLETE_TODO = &#39;COMPLETE_TODO&#39;&#xA;export const COMPLETE_ALL = &#39;COMPLETE_ALL&#39;&#xA;export const CLEAR_COMPLETED = &#39;CLEAR_COMPLETED&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In Redux, you use them in two places:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;During action creation:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s take &lt;code&gt;actions.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;;&#xA;&#xA;export function addTodo(text) {&#xA;  return { type: ADD_TODO, text }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;In reducers:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Let&#39;s create &lt;code&gt;reducer.js&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { ADD_TODO } from &#39;./actionTypes&#39;&#xA;&#xA;export default (state = [], action) =&amp;gt; {&#xA;  switch (action.type) {&#xA;    case ADD_TODO:&#xA;      return [&#xA;        ...state,&#xA;        {&#xA;          text: action.text,&#xA;          completed: false&#xA;        }&#xA;      ];&#xA;    default:&#xA;      return state&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;172&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the different ways to write &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;There are a few ways of binding &lt;em&gt;action creators&lt;/em&gt; to &lt;code&gt;dispatch()&lt;/code&gt; in &lt;code&gt;mapDispatchToProps()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Below are the possible options:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({&#xA; action: () =&amp;gt; dispatch(action())&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = (dispatch) =&amp;gt; ({&#xA; action: bindActionCreators(action, dispatch)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const mapDispatchToProps = { action }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The third option is just a shorthand for the first one.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;173&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the use of the &lt;code&gt;ownProps&lt;/code&gt; parameter in &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;If the &lt;code&gt;ownProps&lt;/code&gt; parameter is specified, React Redux will pass the props that were passed to the component into your &lt;em&gt;connect&lt;/em&gt; functions. So, if you use a connected component:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import ConnectedComponent from &#39;./containers/ConnectedComponent&#39;;&#xA;&#xA;&amp;lt;ConnectedComponent user={&#39;john&#39;} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The &lt;code&gt;ownProps&lt;/code&gt; inside your &lt;code&gt;mapStateToProps()&lt;/code&gt; and &lt;code&gt;mapDispatchToProps()&lt;/code&gt; functions will be an object:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;{ user: &#39;john&#39; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can use this object to decide what to return from those functions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;174&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to structure Redux top level directories?&lt;/h3&gt; &lt;p&gt;Most of the applications has several top-level directories as below:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Components&lt;/strong&gt;: Used for &lt;em&gt;dumb&lt;/em&gt; components unaware of Redux.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Containers&lt;/strong&gt;: Used for &lt;em&gt;smart&lt;/em&gt; components connected to Redux.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Actions&lt;/strong&gt;: Used for all action creators, where file names correspond to part of the app.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Reducers&lt;/strong&gt;: Used for all reducers, where files name correspond to state key.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Store&lt;/strong&gt;: Used for store initialization.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;This structure works well for small and medium size apps.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;175&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;redux-saga&lt;/code&gt; is a library that aims to make side effects (asynchronous things like data fetching and impure things like accessing the browser cache) in React/Redux applications easier and better.&lt;/p&gt; &lt;p&gt;It is available in NPM:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npm install --save redux-saga&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;176&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the mental model of redux-saga?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Saga&lt;/em&gt; is like a separate thread in your application, that&#39;s solely responsible for side effects. &lt;code&gt;redux-saga&lt;/code&gt; is a redux &lt;em&gt;middleware&lt;/em&gt;, which means this thread can be started, paused and cancelled from the main application with normal Redux actions, it has access to the full Redux application state and it can dispatch Redux actions as well.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;177&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; in redux-saga?&lt;/h3&gt; &lt;p&gt;Both &lt;code&gt;call()&lt;/code&gt; and &lt;code&gt;put()&lt;/code&gt; are effect creator functions. &lt;code&gt;call()&lt;/code&gt; function is used to create effect description, which instructs middleware to call the promise. &lt;code&gt;put()&lt;/code&gt; function creates an effect, which instructs middleware to dispatch an action to the store.&lt;/p&gt; &lt;p&gt;Let&#39;s take example of how these effects work for fetching particular user data.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function* fetchUserSaga(action) {&#xA;  // `call` function accepts rest arguments, which will be passed to `api.fetchUser` function.&#xA;  // Instructing middleware to call promise, it resolved value will be assigned to `userData` variable&#xA;  const userData = yield call(api.fetchUser, action.userId)&#xA;&#xA;  // Instructing middleware to dispatch corresponding action.&#xA;  yield put({&#xA;    type: &#39;FETCH_USER_SUCCESS&#39;,&#xA;    userData&#xA;  })&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;178&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux Thunk?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Thunk&lt;/em&gt; middleware allows you to write action creators that return a function instead of an action. The thunk can be used to delay the dispatch of an action, or to dispatch only if a certain condition is met. The inner function receives the store methods &lt;code&gt;dispatch()&lt;/code&gt; and &lt;code&gt;getState()&lt;/code&gt; as parameters.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;179&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between &lt;code&gt;redux-saga&lt;/code&gt; and &lt;code&gt;redux-thunk&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;Both &lt;em&gt;Redux Thunk&lt;/em&gt; and &lt;em&gt;Redux Saga&lt;/em&gt; take care of dealing with side effects. In most of the scenarios, Thunk uses &lt;em&gt;Promises&lt;/em&gt; to deal with them, whereas Saga uses &lt;em&gt;Generators&lt;/em&gt;. Thunk is simple to use and Promises are familiar to many developers, Sagas/Generators are more powerful but you will need to learn them. But both middleware can coexist, so you can start with Thunks and introduce Sagas when/if you need them.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;180&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux DevTools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux DevTools&lt;/em&gt; is a live-editing time travel environment for Redux with hot reloading, action replay, and customizable UI. If you don&#39;t want to bother with installing Redux DevTools and integrating it into your project, consider using Redux DevTools Extension for Chrome and Firefox.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;181&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the features of Redux DevTools?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux DevTools are below,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Lets you inspect every state and action payload.&lt;/li&gt; &#xA;   &lt;li&gt;Lets you go back in time by &lt;em&gt;cancelling&lt;/em&gt; actions.&lt;/li&gt; &#xA;   &lt;li&gt;If you change the reducer code, each &lt;em&gt;staged&lt;/em&gt; action will be re-evaluated.&lt;/li&gt; &#xA;   &lt;li&gt;If the reducers throw, you will see during which action this happened, and what the error was.&lt;/li&gt; &#xA;   &lt;li&gt;With &lt;code&gt;persistState()&lt;/code&gt; store enhancer, you can persist debug sessions across page reloads.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;182&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Redux selectors and why to use them?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Selectors&lt;/em&gt; are functions that take Redux state as an argument and return some data to pass to the component.&lt;/p&gt; &lt;p&gt;For example, to get user details from the state:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const getUserData = state =&amp;gt; state.user.data&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These selectors have two main benefits,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The selector can compute derived data, allowing Redux to store the minimal possible state&lt;/li&gt; &#xA;   &lt;li&gt;The selector is not recomputed unless one of its arguments changes&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;183&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Redux Form?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Redux Form&lt;/em&gt; works with React and Redux to enable a form in React to use Redux to store all of its state. Redux Form can be used with raw HTML5 inputs, but it also works very well with common UI frameworks like Material UI, React Widgets and React Bootstrap.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;184&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the main features of Redux Form?&lt;/h3&gt; &lt;p&gt;Some of the main features of Redux Form are:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Field values persistence via Redux store.&lt;/li&gt; &#xA;   &lt;li&gt;Validation (sync/async) and submission.&lt;/li&gt; &#xA;   &lt;li&gt;Formatting, parsing and normalization of field values.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;185&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to add multiple middlewares to Redux?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;applyMiddleware()&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, you can add &lt;code&gt;redux-thunk&lt;/code&gt; and &lt;code&gt;logger&lt;/code&gt; passing them as arguments to &lt;code&gt;applyMiddleware()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createStore, applyMiddleware } from &#39;redux&#39;&#xA;const createStoreWithMiddleware = applyMiddleware(ReduxThunk, logger)(createStore)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;186&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to set initial state in Redux?&lt;/h3&gt; &lt;p&gt;You need to pass initial state as second argument to createStore:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const rootReducer = combineReducers({&#xA;  todos: todos,&#xA;  visibilityFilter: visibilityFilter&#xA;})&#xA;&#xA;const initialState = {&#xA;  todos: [{ id: 123, name: &#39;example&#39;, completed: false }]&#xA;}&#xA;&#xA;const store = createStore(&#xA;  rootReducer,&#xA;  initialState&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;187&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How Relay is different from Redux?&lt;/h3&gt; &lt;p&gt;Relay is similar to Redux in that they both use a single store. The main difference is that relay only manages state originated from the server, and all access to the state is used via &lt;em&gt;GraphQL&lt;/em&gt; queries (for reading data) and mutations (for changing data). Relay caches the data for you and optimizes data fetching for you, by fetching only changed data and nothing more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is an action in Redux?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Actions&lt;/em&gt; are plain JavaScript objects or payloads of information that send data from your application to your store. They are the only source of information for the store. Actions must have a type property that indicates the type of action being performed.&lt;/p&gt; &lt;p&gt;For example, let&#39;s take an action which represents adding a new todo item:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;{&#xA;  type: ADD_TODO,&#xA;  text: &#39;Add todo item&#39;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;React Native&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;188&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React Native and React?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React&lt;/strong&gt; is a JavaScript library, supporting both front end web and being run on the server, for building user interfaces and web applications.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;React Native&lt;/strong&gt; is a mobile framework that compiles to native app components, allowing you to build native mobile applications (iOS, Android, and Windows) in JavaScript that allows you to use React to build your components, and implements React under the hood.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;189&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to test React Native apps?&lt;/h3&gt; &lt;p&gt;React Native can be tested only in mobile simulators like iOS and Android. You can run the app in your mobile using expo app (&lt;a href=&#34;https://expo.io&#34;&gt;https://expo.io&lt;/a&gt;) Where it syncs using QR code, your mobile and computer should be in same wireless network.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;190&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to do logging in React Native?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;console.log&lt;/code&gt;, &lt;code&gt;console.warn&lt;/code&gt;, etc. As of React Native v0.29 you can simply run the following to see logs in the console:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ react-native log-ios&#xA;$ react-native log-android&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;191&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to debug your React Native?&lt;/h3&gt; &lt;p&gt;Follow the below steps to debug React Native app:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Run your application in the iOS simulator.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;Command + D&lt;/code&gt; and a webpage should open up at &lt;code&gt;http://localhost:8081/debugger-ui&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Enable &lt;em&gt;Pause On Caught Exceptions&lt;/em&gt; for a better debugging experience.&lt;/li&gt; &#xA;   &lt;li&gt;Press &lt;code&gt;Command + Option + I&lt;/code&gt; to open the Chrome Developer tools, or open it via &lt;code&gt;View&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer&lt;/code&gt; -&amp;gt; &lt;code&gt;Developer Tools&lt;/code&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;You should now be able to debug as you normally would.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;React supported libraries &amp;amp; Integration&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;192&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is reselect and how it works?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Reselect&lt;/em&gt; is a &lt;strong&gt;selector library&lt;/strong&gt; (for Redux) which uses &lt;em&gt;memoization&lt;/em&gt; concept. It was originally written to compute derived data from Redux-like applications state, but it can&#39;t be tied to any architecture or library.&lt;/p&gt; &lt;p&gt;Reselect keeps a copy of the last inputs/outputs of the last call, and recomputes the result only if one of the inputs changes. If the the same inputs are provided twice in a row, Reselect returns the cached output. It&#39;s memoization and cache are fully customizable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;193&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Flow?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;Flow&lt;/em&gt; is a &lt;em&gt;static type checker&lt;/em&gt; designed to find type errors in JavaScript. Flow types can express much more fine-grained distinctions than traditional type systems. For example, Flow helps you catch errors involving &lt;code&gt;null&lt;/code&gt;, unlike most type systems.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;194&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Flow and PropTypes?&lt;/h3&gt; &lt;p&gt;Flow is a &lt;em&gt;static analysis tool&lt;/em&gt; (static checker) which uses a superset of the language, allowing you to add type annotations to all of your code and catch an entire class of bugs at compile time.&lt;/p&gt; &lt;p&gt;PropTypes is a &lt;em&gt;basic type checker&lt;/em&gt; (runtime checker) which has been patched onto React. It can&#39;t check anything other than the types of the props being passed to a given component. If you want more flexible typechecking for your entire project Flow/TypeScript are appropriate choices.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;195&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use Font Awesome icons in React?&lt;/h3&gt; &lt;p&gt;The below steps followed to include Font Awesome in React:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Install &lt;code&gt;font-awesome&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ npm install --save font-awesome&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Import &lt;code&gt;font-awesome&lt;/code&gt; in your &lt;code&gt;index.js&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import &#39;font-awesome/css/font-awesome.min.css&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Add Font Awesome classes in &lt;code&gt;className&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;  return &amp;lt;div&amp;gt;&amp;lt;i className={&#39;fa fa-spinner&#39;} /&amp;gt;&amp;lt;/div&amp;gt;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;196&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React Dev Tools?&lt;/h3&gt; &lt;p&gt;&lt;em&gt;React Developer Tools&lt;/em&gt; let you inspect the component hierarchy, including component props and state. It exists both as a browser extension (for Chrome and Firefox), and as a standalone app (works with other environments including Safari, IE, and React Native).&lt;/p&gt; &lt;p&gt;The official extensions available for different browsers or environments.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Chrome extension&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Firefox extension&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Standalone app&lt;/strong&gt; (Safari, React Native, etc)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;197&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why is DevTools not loading in Chrome for local files?&lt;/h3&gt; &lt;p&gt;If you opened a local HTML file in your browser (&lt;code&gt;file://...&lt;/code&gt;) then you must first open &lt;em&gt;Chrome Extensions&lt;/em&gt; and check &lt;code&gt;Allow access to file URLs&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;198&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use Polymer in React?&lt;/h3&gt; &lt;p&gt;You need to follow below steps to use Polymer in React,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create a Polymer element:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;../../bower_components/polymer/polymer.html&#39; /&amp;gt;&#xA;Polymer({&#xA;  is: &#39;calender-element&#39;,&#xA;  ready: function() {&#xA;    this.textContent = &#39;I am a calender&#39;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Create the Polymer component HTML tag by importing it in a HTML document, e.g. import it in the &lt;code&gt;index.html&lt;/code&gt; of your React application:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link rel=&#39;import&#39; href=&#39;./src/polymer-components/calender-element.html&#39;&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;Use that element in the JSX file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;&#xA;class MyComponent extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;calender-element /&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&#xA;export default MyComponent&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;199&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of React over Vue.js?&lt;/h3&gt; &lt;p&gt;React has the following advantages over Vue.js:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Gives more flexibility in large apps developing.&lt;/li&gt; &#xA;   &lt;li&gt;Easier to test.&lt;/li&gt; &#xA;   &lt;li&gt;Suitable for mobile apps creating.&lt;/li&gt; &#xA;   &lt;li&gt;More information and solutions available.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of advantages are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;200&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between React and Angular?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the difference between React and Angular in a table format.&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;React&lt;/th&gt; &#xA;     &lt;th&gt;Angular&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React is a library and has only the View layer&lt;/td&gt; &#xA;     &lt;td&gt;Angular is a framework and has complete MVC functionality&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React handles rendering on the server side&lt;/td&gt; &#xA;     &lt;td&gt;AngularJS renders only on the client side but Angular 2 and above renders on the server side&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React uses JSX that looks like HTML in JS which can be confusing&lt;/td&gt; &#xA;     &lt;td&gt;Angular follows the template approach for HTML, which makes code shorter and easy to understand&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React Native, which is a React type to build mobile applications are faster and more stable&lt;/td&gt; &#xA;     &lt;td&gt;Ionic, Angular&#39;s mobile native app is relatively less stable and slower&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;In React, data flows only in one way and hence debugging is easy&lt;/td&gt; &#xA;     &lt;td&gt;In Angular, data flows both way i.e it has two-way data binding between children and parent and hence debugging is often difficult&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The above list of differences are purely opinionated and it vary based on the professional experience. But they are helpful as base parameters.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;201&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why React tab is not showing up in DevTools?&lt;/h3&gt; &lt;p&gt;When the page loads, &lt;em&gt;React DevTools&lt;/em&gt; sets a global named &lt;code&gt;__REACT_DEVTOOLS_GLOBAL_HOOK__&lt;/code&gt;, then React communicates with that hook during initialization. If the website is not using React or if React fails to communicate with DevTools then it won&#39;t show up the tab.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;202&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Styled Components?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;styled-components&lt;/code&gt; is a JavaScript library for styling React applications. It removes the mapping between styles and components, and lets you write actual CSS augmented with JavaScript.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;203&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Give an example of Styled Components?&lt;/h3&gt; &lt;p&gt;Lets create &lt;code&gt;&amp;lt;Title&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;Wrapper&amp;gt;&lt;/code&gt; components with specific styles for each.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React from &#39;react&#39;&#xA;import styled from &#39;styled-components&#39;&#xA;&#xA;// Create a &amp;lt;Title&amp;gt; component that renders an &amp;lt;h1&amp;gt; which is centered, red and sized at 1.5em&#xA;const Title = styled.h1`&#xA;  font-size: 1.5em;&#xA;  text-align: center;&#xA;  color: palevioletred;&#xA;`&#xA;&#xA;// Create a &amp;lt;Wrapper&amp;gt; component that renders a &amp;lt;section&amp;gt; with some padding and a papayawhip background&#xA;const Wrapper = styled.section`&#xA;  padding: 4em;&#xA;  background: papayawhip;&#xA;`&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These two variables, &lt;code&gt;Title&lt;/code&gt; and &lt;code&gt;Wrapper&lt;/code&gt;, are now components that you can render just like any other react component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Wrapper&amp;gt;&#xA;  &amp;lt;Title&amp;gt;{&#39;Lets start first styled component!&#39;}&amp;lt;/Title&amp;gt;&#xA;&amp;lt;/Wrapper&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;204&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Relay?&lt;/h3&gt; &lt;p&gt;Relay is a JavaScript framework for providing a data layer and client-server communication to web applications using the React view layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;205&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use TypeScript in &lt;code&gt;create-react-app&lt;/code&gt; application?&lt;/h3&gt; &lt;p&gt;Starting from react-scripts@2.1.0 or higher, there is a built-in support for typescript. i.e, &lt;code&gt;create-react-app&lt;/code&gt; now supports typescript natively. You can just pass &lt;code&gt;--typescript&lt;/code&gt; option as below&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-react-app my-app --typescript&#xA;&#xA;# or&#xA;&#xA;yarn create react-app my-app --typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But for lower versions of react scripts, just supply &lt;code&gt;--scripts-version&lt;/code&gt; option as &lt;code&gt;react-scripts-ts&lt;/code&gt; while you create a new project. &lt;code&gt;react-scripts-ts&lt;/code&gt; is a set of adjustments to take the standard &lt;code&gt;create-react-app&lt;/code&gt; project pipeline and bring TypeScript into the mix.&lt;/p&gt; &lt;p&gt;Now the project layout should look like the following:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;my-app/&#xA;├─ .gitignore&#xA;├─ images.d.ts&#xA;├─ node_modules/&#xA;├─ public/&#xA;├─ src/&#xA;│  └─ ...&#xA;├─ package.json&#xA;├─ tsconfig.json&#xA;├─ tsconfig.prod.json&#xA;├─ tsconfig.test.json&#xA;└─ tslint.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Miscellaneous&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;206&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the main features of Reselect library?&lt;/h3&gt; &lt;p&gt;Let&#39;s see the main features of Reselect library,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Selectors can compute derived data, allowing Redux to store the minimal possible state.&lt;/li&gt; &#xA;   &lt;li&gt;Selectors are efficient. A selector is not recomputed unless one of its arguments changes.&lt;/li&gt; &#xA;   &lt;li&gt;Selectors are composable. They can be used as input to other selectors.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h4&gt;Give an example of Reselect usage?&lt;/h4&gt; &lt;p&gt;Let&#39;s take calculations and different amounts of a shipment order with the simplified usage of Reselect:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { createSelector } from &#39;reselect&#39;&#xA;&#xA;const shopItemsSelector = state =&amp;gt; state.shop.items&#xA;const taxPercentSelector = state =&amp;gt; state.shop.taxPercent&#xA;&#xA;const subtotalSelector = createSelector(&#xA;  shopItemsSelector,&#xA;  items =&amp;gt; items.reduce((acc, item) =&amp;gt; acc + item.value, 0)&#xA;)&#xA;&#xA;const taxSelector = createSelector(&#xA;  subtotalSelector,&#xA;  taxPercentSelector,&#xA;  (subtotal, taxPercent) =&amp;gt; subtotal * (taxPercent / 100)&#xA;)&#xA;&#xA;export const totalSelector = createSelector(&#xA;  subtotalSelector,&#xA;  taxSelector,&#xA;  (subtotal, tax) =&amp;gt; ({ total: subtotal + tax })&#xA;)&#xA;&#xA;let exampleState = {&#xA;  shop: {&#xA;    taxPercent: 8,&#xA;    items: [&#xA;      { name: &#39;apple&#39;, value: 1.20 },&#xA;      { name: &#39;orange&#39;, value: 0.95 },&#xA;    ]&#xA;  }&#xA;}&#xA;&#xA;console.log(subtotalSelector(exampleState)) // 2.15&#xA;console.log(taxSelector(exampleState))      // 0.172&#xA;console.log(totalSelector(exampleState))    // { total: 2.322 }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;209&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Does the statics object work with ES6 classes in React?&lt;/h3&gt; &lt;p&gt;No, &lt;code&gt;statics&lt;/code&gt; only works with &lt;code&gt;React.createClass()&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;someComponent= React.createClass({&#xA;  statics: {&#xA;    someMethod: function() {&#xA;      // ..&#xA;    }&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But you can write statics inside ES6+ classes as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Component extends React.Component {&#xA;  static propTypes = {&#xA;    // ...&#xA;  }&#xA;&#xA;  static someMethod() {&#xA;    // ...&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or writing them outside class as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Component extends React.Component {&#xA;   ....&#xA;}&#xA;&#xA;Component.propTypes = {...}&#xA;Component.someMethod = function(){....}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;210&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can Redux only be used with React?&lt;/h3&gt; &lt;p&gt;Redux can be used as a data store for any UI layer. The most common usage is with React and React Native, but there are bindings available for Angular, Angular 2, Vue, Mithril, and more. Redux simply provides a subscription mechanism which can be used by any other code.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;211&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do you need to have a particular build tool to use Redux?&lt;/h3&gt; &lt;p&gt;Redux is originally written in ES6 and transpiled for production into ES5 with Webpack and Babel. You should be able to use it regardless of your JavaScript build process. Redux also offers a UMD build that can be used directly without any build process at all.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;212&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How Redux Form &lt;code&gt;initialValues&lt;/code&gt; get updated from state?&lt;/h3&gt; &lt;p&gt;You need to add &lt;code&gt;enableReinitialize : true&lt;/code&gt; setting.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const InitializeFromStateForm = reduxForm({&#xA;  form: &#39;initializeFromState&#39;,&#xA;  enableReinitialize : true&#xA;})(UserEdit)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If your &lt;code&gt;initialValues&lt;/code&gt; prop gets updated, your form will update too.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;213&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How React PropTypes allow different types for one prop?&lt;/h3&gt; &lt;p&gt;You can use &lt;code&gt;oneOfType()&lt;/code&gt; method of &lt;code&gt;PropTypes&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, the height property can be defined with either &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;number&lt;/code&gt; type as below:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Component.propTypes = {&#xA;  size: PropTypes.oneOfType([&#xA;    PropTypes.string,&#xA;    PropTypes.number&#xA;  ])&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;214&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I import an SVG file as react component?&lt;/h3&gt; &lt;p&gt;You can import SVG directly as component instead of loading it as a file. This feature is available with &lt;code&gt;react-scripts@2.0.0&lt;/code&gt; and higher.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { ReactComponent as Logo } from &#39;./logo.svg&#39;&#xA;&#xA;const App = () =&amp;gt; (&#xA;  &amp;lt;div&amp;gt;&#xA;    {/* Logo is an actual react component */}&#xA;    &amp;lt;Logo /&amp;gt;&#xA;  &amp;lt;/div&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: Don&#39;t forget about the curly braces in the import.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;215&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are inline ref callbacks or functions not recommended?&lt;/h3&gt; &lt;p&gt;If the ref callback is defined as an inline function, it will get called twice during updates, first with null and then again with the DOM element. This is because a new instance of the function is created with each render, so React needs to clear the old ref and set up the new one.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class UserForm extends Component {&#xA;  handleSubmit = () =&amp;gt; {&#xA;    console.log(&#34;Input Value is: &#34;, this.input.value)&#xA;  }&#xA;&#xA;&#xA;  render () {&#xA;   return (&#xA;     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;       &amp;lt;input&#xA;         type=&#39;text&#39;&#xA;         ref={(input) =&amp;gt; this.input = input} /&amp;gt; // Access DOM input in handle submit&#xA;       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;&#xA;     &amp;lt;/form&amp;gt;&#xA;   )&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But our expectation is for the ref callback to get called once, when the component mounts. One quick fix is to use the ES7 class property syntax to define the function&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class UserForm extends Component {&#xA; handleSubmit = () =&amp;gt; {&#xA;   console.log(&#34;Input Value is: &#34;, this.input.value)&#xA; }&#xA;&#xA; setSearchInput = (input) =&amp;gt; {&#xA;   this.input = input&#xA; }&#xA;&#xA; render () {&#xA;   return (&#xA;     &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;       &amp;lt;input&#xA;         type=&#39;text&#39;&#xA;         ref={this.setSearchInput} /&amp;gt; // Access DOM input in handle submit&#xA;       &amp;lt;button type=&#39;submit&#39;&amp;gt;Submit&amp;lt;/button&amp;gt;&#xA;     &amp;lt;/form&amp;gt;&#xA;   )&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;**Note:** In React v16.3,&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;216&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is render hijacking in react?&lt;/h3&gt; &lt;p&gt;The concept of render hijacking is the ability to control what a component will output from another component. It means that you decorate your component by wrapping it into a Higher-Order component. By wrapping, you can inject additional props or make other changes, which can cause changing logic of rendering. It does not actually enable hijacking, but by using HOC you make your component behave differently.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;217&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are HOC factory implementations?&lt;/h3&gt; &lt;p&gt;There are two main ways of implementing HOCs in React.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Props Proxy (PP) and&lt;/li&gt; &#xA;   &lt;li&gt;Inheritance Inversion (II).&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;But they follow different approaches for manipulating the &lt;em&gt;WrappedComponent&lt;/em&gt;.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Props Proxy&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the render method of the HOC returns a React Element of the type of the WrappedComponent. We also pass through the props that the HOC receives, hence the name &lt;strong&gt;Props Proxy&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&#xA;function ppHOC(WrappedComponent) {&#xA; return class PP extends React.Component {&#xA;   render() {&#xA;     return &amp;lt;WrappedComponent {...this.props}/&amp;gt;&#xA;   }&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Inheritance Inversion&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;In this approach, the returned HOC class (Enhancer) extends the WrappedComponent. It is called Inheritance Inversion because instead of the WrappedComponent extending some Enhancer class, it is passively extended by the Enhancer. In this way the relationship between them seems &lt;strong&gt;inverse&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function iiHOC(WrappedComponent) {&#xA; return class Enhancer extends WrappedComponent {&#xA;   render() {&#xA;     return super.render()&#xA;   }&#xA; }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;218&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to pass numbers to React component?&lt;/h3&gt; &lt;p&gt;You should be passing the numbers via curly braces({}) where as strings in quotes&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;   React.render(&amp;lt;User age={30} department={&#34;IT&#34;} /&amp;gt;, document.getElementById(&#39;container&#39;));&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;219&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do I need to keep all my state into Redux? Should I ever use react internal state?&lt;/h3&gt; &lt;p&gt;It is up to the developer&#39;s decision, i.e., it is developer&#39;s job to determine what kinds of state make up your application, and where each piece of state should live. Some users prefer to keep every single piece of data in Redux, to maintain a fully serializable and controlled version of their application at all times. Others prefer to keep non-critical or UI state, such as “is this dropdown currently open”, inside a component&#39;s internal state.&lt;/p&gt; &lt;p&gt;Below are the thumb rules to determine what kind of data should be put into Redux&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Do other parts of the application care about this data?&lt;/li&gt; &#xA;   &lt;li&gt;Do you need to be able to create further derived data based on this original data?&lt;/li&gt; &#xA;   &lt;li&gt;Is the same data being used to drive multiple components?&lt;/li&gt; &#xA;   &lt;li&gt;Is there value to you in being able to restore this state to a given point in time (ie, time travel debugging)?&lt;/li&gt; &#xA;   &lt;li&gt;Do you want to cache the data (i.e, use what&#39;s in state if it&#39;s already there instead of re-requesting it)?&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;220&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of registerServiceWorker in React?&lt;/h3&gt; &lt;p&gt;React creates a service worker for you without any configuration by default. The service worker is a web API that helps you cache your assets and other files so that when the user is offline or on a slow network, he/she can still see results on the screen, as such, it helps you build a better user experience, that&#39;s what you should know about service worker for now. It&#39;s all about adding offline capabilities to your site.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;   import React from &#39;react&#39;;&#xA;   import ReactDOM from &#39;react-dom&#39;;&#xA;   import App from &#39;./App&#39;;&#xA;   import registerServiceWorker from &#39;./registerServiceWorker&#39;;&#xA;&#xA;   ReactDOM.render(&amp;lt;App /&amp;gt;, document.getElementById(&#39;root&#39;));&#xA;   registerServiceWorker();&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;221&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React memo function?&lt;/h3&gt; &lt;p&gt;Class components can be restricted from re-rendering when their input props are the same using &lt;strong&gt;PureComponent or shouldComponentUpdate&lt;/strong&gt;. Now you can do the same with function components by wrapping them in &lt;strong&gt;React.memo&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const MyComponent = React.memo(function MyComponent(props) {&#xA; /* only rerenders if props change */&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;222&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is React lazy function?&lt;/h3&gt; The &lt;code&gt;React.lazy&lt;/code&gt; function lets you render a dynamic import as a regular component. It will automatically load the bundle containing the &lt;code&gt;OtherComponent&lt;/code&gt; when the component gets rendered. This must return a Promise which resolves to a module with a default export containing a React component. &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));&#xA;&#xA;function MyComponent() {&#xA; return (&#xA;   &amp;lt;div&amp;gt;&#xA;     &amp;lt;OtherComponent /&amp;gt;&#xA;   &amp;lt;/div&amp;gt;&#xA; );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; &lt;code&gt;React.lazy&lt;/code&gt; and &lt;code&gt;Suspense&lt;/code&gt; is not yet available for server-side rendering. If you want to do code-splitting in a server rendered app, we still recommend React Loadable.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;223&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to prevent unnecessary updates using setState?&lt;/h3&gt; &lt;p&gt;You can compare the current value of the state with an existing state value and decide whether to rerender the page or not. If the values are the same then you need to return &lt;strong&gt;null&lt;/strong&gt; to stop re-rendering otherwise return the latest state value.&lt;/p&gt; &lt;p&gt;For example, the user profile information is conditionally rendered as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;getUserProfile = user =&amp;gt; {&#xA;  const latestAddress = user.address;&#xA;  this.setState(state =&amp;gt; {&#xA;    if (state.address === latestAddress) {&#xA;      return null;&#xA;    } else {&#xA;      return { title: latestAddress };&#xA;    }&#xA;  });&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;224&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you render Array, Strings and Numbers in React 16 Version?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Arrays&lt;/strong&gt;: Unlike older releases, you don&#39;t need to make sure &lt;strong&gt;render&lt;/strong&gt; method return a single element in React16. You are able to return multiple sibling elements without a wrapping element by returning an array.&lt;/p&gt; &lt;p&gt;For example, let us take the below list of developers,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const ReactJSDevs = () =&amp;gt; {&#xA;  return [&#xA;    &amp;lt;li key=&#34;1&#34;&amp;gt;John&amp;lt;/li&amp;gt;,&#xA;    &amp;lt;li key=&#34;2&#34;&amp;gt;Jackie&amp;lt;/li&amp;gt;,&#xA;    &amp;lt;li key=&#34;3&#34;&amp;gt;Jordan&amp;lt;/li&amp;gt;&#xA;  ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can also merge this array of items in another array component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const JSDevs = () =&amp;gt; {&#xA;  return (&#xA;    &amp;lt;ul&amp;gt;&#xA;      &amp;lt;li&amp;gt;Brad&amp;lt;/li&amp;gt;&#xA;      &amp;lt;li&amp;gt;Brodge&amp;lt;/li&amp;gt;&#xA;      &amp;lt;ReactJSDevs/&amp;gt;&#xA;      &amp;lt;li&amp;gt;Brandon&amp;lt;/li&amp;gt;&#xA;    &amp;lt;/ul&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Strings and Numbers:&lt;/strong&gt; You can also return string and number type from the render method.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;render() {&#xA; return &#39;Welcome to ReactJS questions&#39;;&#xA;}&#xA;// Number&#xA;render() {&#xA; return 2018;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;225&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to use class field declarations syntax in React classes?&lt;/h3&gt; &lt;p&gt;React Class Components can be made much more concise using the class field declarations. You can initialize the local state without using the constructor and declare class methods by using arrow functions without the extra need to bind them.&lt;/p&gt; &lt;p&gt;Let&#39;s take a counter example to demonstrate class field declarations for state without using constructor and methods without binding,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;class Counter extends Component {&#xA;  state = { value: 0 };&#xA;&#xA;  handleIncrement = () =&amp;gt; {&#xA;    this.setState(prevState =&amp;gt; ({&#xA;      value: prevState.value + 1&#xA;    }));&#xA;  };&#xA;&#xA;  handleDecrement = () =&amp;gt; {&#xA;    this.setState(prevState =&amp;gt; ({&#xA;      value: prevState.value - 1&#xA;    }));&#xA;  };&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        {this.state.value}&#xA;&#xA;        &amp;lt;button onClick={this.handleIncrement}&amp;gt;+&amp;lt;/button&amp;gt;&#xA;        &amp;lt;button onClick={this.handleDecrement}&amp;gt;-&amp;lt;/button&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    )&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;226&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are hooks?&lt;/h3&gt; &lt;p&gt;Hooks is a new feature(React 16.8) that lets you use state and other React features without writing a class.&lt;/p&gt; &lt;p&gt;Let&#39;s see an example of useState hook:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { useState } from &#39;react&#39;;&#xA;&#xA;function Example() {&#xA;  // Declare a new state variable, which we&#39;ll call &#34;count&#34;&#xA;  const [count, setCount] = useState(0);&#xA;&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;p&amp;gt;You clicked {count} times&amp;lt;/p&amp;gt;&#xA;      &amp;lt;button onClick={() =&amp;gt; setCount(count + 1)}&amp;gt;&#xA;        Click me&#xA;      &amp;lt;/button&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;227&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What rules need to be followed for hooks?&lt;/h3&gt; &lt;p&gt;You need to follow two rules in order to use hooks,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Call Hooks only at the top level of your react functions. i.e, You shouldn’t call Hooks inside loops, conditions, or nested functions. This will ensure that Hooks are called in the same order each time a component renders and it preserves the state of Hooks between multiple useState and useEffect calls.&lt;/li&gt; &#xA;   &lt;li&gt;Call Hooks from React Functions only. i.e, You shouldn’t call Hooks from regular JavaScript functions.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;228&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to ensure hooks followed the rules in your project?&lt;/h3&gt; React team released an ESLint plugin called &lt;strong&gt;eslint-plugin-react-hooks&lt;/strong&gt; that enforces these two rules. You can add this plugin to your project using the below command, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm install eslint-plugin-react-hooks@next&#xA;&lt;/code&gt;&lt;/pre&gt; And apply the below config in your ESLint config file, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Your ESLint configuration&#xA;{&#xA;  &#34;plugins&#34;: [&#xA;    // ...&#xA;    &#34;react-hooks&#34;&#xA;  ],&#xA;  &#34;rules&#34;: {&#xA;    // ...&#xA;    &#34;react-hooks/rules-of-hooks&#34;: &#34;error&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;strong&gt;Note:&lt;/strong&gt; This plugin is intended to use in Create React App by default.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;229&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between Flux and Redux?&lt;/h3&gt; &lt;p&gt;Below are the major differences between Flux and Redux&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Flux&lt;/th&gt; &#xA;     &lt;th&gt;Redux&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;State is mutable&lt;/td&gt; &#xA;     &lt;td&gt;State is immutable&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;The Store contains both state and change logic&lt;/td&gt; &#xA;     &lt;td&gt;The Store and change logic are separate&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;There are multiple stores exist&lt;/td&gt; &#xA;     &lt;td&gt;There is only one store exist&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;All the stores are disconnected and flat&lt;/td&gt; &#xA;     &lt;td&gt;Single store with hierarchical reducers&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;It has a singleton dispatcher&lt;/td&gt; &#xA;     &lt;td&gt;There is no concept of dispatcher&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;React components subscribe to the store&lt;/td&gt; &#xA;     &lt;td&gt;Container components uses connect function&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;230&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the benefits of React Router V4?&lt;/h3&gt; &lt;p&gt;Below are the main benefits of React Router V4 module,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;In React Router v4(version 4), the API is completely about components. A router can be visualized as a single component(&lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt;) which wraps specific child router components(&lt;code&gt;&amp;lt;Route&amp;gt;&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;You don&#39;t need to manually set history. The router module will take care history by wrapping routes with &lt;code&gt;&amp;lt;BrowserRouter&amp;gt;&lt;/code&gt; component.&lt;/li&gt; &#xA;   &lt;li&gt;The application size is reduced by adding only the specific router module(Web, core, or native)&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;231&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can you describe about componentDidCatch lifecycle method signature?&lt;/h3&gt; &lt;p&gt;The &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycle method is invoked after an error has been thrown by a descendant component. The method receives two parameters,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;error: - The error object which was thrown&lt;/li&gt; &#xA;   &lt;li&gt;info: - An object with a componentStack key contains the information about which component threw the error.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The method structure would be as follows&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;componentDidCatch(error, info)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;232&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;In which scenarios error boundaries do not catch errors?&lt;/h3&gt; &lt;p&gt;Below are the cases in which error boundaries doesn&#39;t work,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Inside Event handlers&lt;/li&gt; &#xA;   &lt;li&gt;Asynchronous code using &lt;strong&gt;setTimeout or requestAnimationFrame&lt;/strong&gt; callbacks&lt;/li&gt; &#xA;   &lt;li&gt;During Server side rendering&lt;/li&gt; &#xA;   &lt;li&gt;When errors thrown in the error boundary code itself&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;233&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why do you not need error boundaries for event handlers?&lt;/h3&gt; &lt;p&gt;Error boundaries do not catch errors inside event handlers.&lt;/p&gt; &lt;p&gt;React doesn’t need error boundaries to recover from errors in event handlers. Unlike the render method and lifecycle methods, the event handlers don’t happen during rendering. So if they throw, React still knows what to display on the screen.&lt;/p&gt; &lt;p&gt;If you need to catch an error inside an event handler, use the regular JavaScript try / catch statement:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyComponent extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = { error: null };&#xA;    this.handleClick = this.handleClick.bind(this);&#xA;  }&#xA;&#xA;  handleClick() {&#xA;    try {&#xA;      // Do something that could throw&#xA;    } catch (error) {&#xA;      this.setState({ error });&#xA;    }&#xA;  }&#xA;&#xA;  render() {&#xA;    if (this.state.error) {&#xA;      return &amp;lt;h1&amp;gt;Caught an error.&amp;lt;/h1&amp;gt;&#xA;    }&#xA;    return &amp;lt;button onClick={this.handleClick}&amp;gt;Click Me&amp;lt;/button&amp;gt;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Note that the above example is demonstrating regular JavaScript behavior and doesn’t use error boundaries.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;234&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between try catch block and error boundaries?&lt;/h3&gt; &lt;p&gt;Try catch block works with imperative code whereas error boundaries are meant for declarative code to render on the screen.&lt;/p&gt; &lt;p&gt;For example, the try catch block used for below imperative code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;try {&#xA;  showButton();&#xA;} catch (error) {&#xA;  // ...&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas error boundaries wrap declarative code as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;ErrorBoundary&amp;gt;&#xA;  &amp;lt;MyComponent /&amp;gt;&#xA;&amp;lt;/ErrorBoundary&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;So if an error occurs in a &lt;strong&gt;componentDidUpdate&lt;/strong&gt; method caused by a &lt;strong&gt;setState&lt;/strong&gt; somewhere deep in the tree, it will still correctly propagate to the closest error boundary.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;235&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the behavior of uncaught errors in react 16?&lt;/h3&gt; In React 16, errors that were not caught by any error boundary will result in unmounting of the whole React component tree. The reason behind this decision is that it is worse to leave corrupted UI in place than to completely remove it. For example, it is worse for a payments app to display a wrong amount than to render nothing.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;236&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the proper placement for error boundaries?&lt;/h3&gt; The granularity of error boundaries usage is up to the developer based on project needs. You can follow either of these approaches, &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;You can wrap top-level route components to display a generic error message for the entire application.&lt;/li&gt; &#xA;   &lt;li&gt;You can also wrap individual components in an error boundary to protect them from crashing the rest of the application.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;237&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the benefit of component stack trace from error boundary?&lt;/h3&gt; &lt;p&gt;Apart from error messages and javascript stack, React16 will display the component stack trace with file names and line numbers using error boundary concept.&lt;/p&gt; &lt;p&gt;For example, BuggyCounter component displays the component stack trace as below,&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/images/error_boundary.png&#34; alt=&#34;stacktrace&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;238&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the required method to be defined for a class component?&lt;/h3&gt; The &lt;code&gt;render()&lt;/code&gt; method is the only required method in a class component. i.e, All methods other than render method are optional for a class component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;239&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the possible return types of render method?&lt;/h3&gt; &lt;p&gt;Below are the list of following types used and return from render method,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;React elements:&lt;/strong&gt; Elements that instruct React to render a DOM node. It includes html elements such as &lt;code&gt;&amp;lt;div/&amp;gt;&lt;/code&gt; and user defined elements.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Arrays and fragments:&lt;/strong&gt; Return multiple elements to render as Arrays and Fragments to wrap multiple elements&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Portals:&lt;/strong&gt; Render children into a different DOM subtree.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;String and numbers:&lt;/strong&gt; Render both Strings and Numbers as text nodes in the DOM&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Booleans or null:&lt;/strong&gt; Doesn&#39;t render anything but these types are used to conditionally render content.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;240&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the main purpose of constructor?&lt;/h3&gt; &lt;p&gt;The constructor is mainly used for two purposes,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;To initialize local state by assigning object to this.state&lt;/li&gt; &#xA;   &lt;li&gt;For binding event handler methods to the instance For example, the below code covers both the above cases,&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;constructor(props) {&#xA;  super(props);&#xA;  // Don&#39;t call this.setState() here!&#xA;  this.state = { counter: 0 };&#xA;  this.handleClick = this.handleClick.bind(this);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;241&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it mandatory to define constructor for React component?&lt;/h3&gt; No, it is not mandatory. i.e, If you don’t initialize state and you don’t bind methods, you don’t need to implement a constructor for your React component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;242&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are default props?&lt;/h3&gt; &lt;p&gt;The defaultProps are defined as a property on the component class to set the default props for the class. This is used for undefined props, but not for null props.&lt;/p&gt; &lt;p&gt;For example, let us create color default prop for the button component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyButton extends React.Component {&#xA;  // ...&#xA;}&#xA;&#xA;MyButton.defaultProps = {&#xA;  color: &#39;red&#39;&#xA;};&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If &lt;code&gt;props.color&lt;/code&gt; is not provided then it will set the default value to &#39;red&#39;. i.e, Whenever you try to access the color prop it uses default value&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;   return &amp;lt;MyButton /&amp;gt; ; // props.color will be set to red&#xA; }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you provide null value then it remains null value.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;243&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why should not call setState in componentWillUnmount?&lt;/h3&gt; You should not call &lt;code&gt;setState()&lt;/code&gt; in &lt;code&gt;componentWillUnmount()&lt;/code&gt; because once a component instance is unmounted, it will never be mounted again.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;244&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of getDerivedStateFromError?&lt;/h3&gt; &lt;p&gt;This lifecycle method is invoked after an error has been thrown by a descendant component. It receives the error that was thrown as a parameter and should return a value to update state.&lt;/p&gt; &lt;p&gt;The signature of the lifecycle method is as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;static getDerivedStateFromError(error)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let us take error boundary use case with the above lifecycle method for demonstration purpose,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class ErrorBoundary extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = { hasError: false };&#xA;  }&#xA;&#xA;  static getDerivedStateFromError(error) {&#xA;    // Update state so the next render will show the fallback UI.&#xA;    return { hasError: true };&#xA;  }&#xA;&#xA;  render() {&#xA;    if (this.state.hasError) {&#xA;      // You can render any custom fallback UI&#xA;      return &amp;lt;h1&amp;gt;Something went wrong.&amp;lt;/h1&amp;gt;;&#xA;    }&#xA;&#xA;    return this.props.children;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;245&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the methods order when component re-rendered?&lt;/h3&gt; &lt;p&gt;An update can be caused by changes to props or state. The below methods are called in the following order when a component is being re-rendered.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;static getDerivedStateFromProps()&lt;/li&gt; &#xA;   &lt;li&gt;shouldComponentUpdate()&lt;/li&gt; &#xA;   &lt;li&gt;render()&lt;/li&gt; &#xA;   &lt;li&gt;getSnapshotBeforeUpdate()&lt;/li&gt; &#xA;   &lt;li&gt;componentDidUpdate()&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;246&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the methods invoked during error handling?&lt;/h3&gt; &lt;p&gt;Below methods are called when there is an error during rendering, in a lifecycle method, or in the constructor of any child component.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;static getDerivedStateFromError()&lt;/li&gt; &#xA;   &lt;li&gt;componentDidCatch()&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;247&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of displayName class property?&lt;/h3&gt; &lt;p&gt;The displayName string is used in debugging messages. Usually, you don’t need to set it explicitly because it’s inferred from the name of the function or class that defines the component. You might want to set it explicitly if you want to display a different name for debugging purposes or when you create a higher-order component.&lt;/p&gt; &lt;p&gt;For example, To ease debugging, choose a display name that communicates that it’s the result of a withSubscription HOC.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function withSubscription(WrappedComponent) {&#xA;  class WithSubscription extends React.Component {/* ... */}&#xA;  WithSubscription.displayName = `WithSubscription(${getDisplayName(WrappedComponent)})`;&#xA;  return WithSubscription;&#xA;}&#xA;function getDisplayName(WrappedComponent) {&#xA;  return WrappedComponent.displayName || WrappedComponent.name || &#39;Component&#39;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;248&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the browser support for react applications?&lt;/h3&gt; React supports all popular browsers, including Internet Explorer 9 and above, although some polyfills are required for older browsers such as IE 9 and IE 10. If you use &lt;strong&gt;es5-shim and es5-sham&lt;/strong&gt; polyfill then it even support old browsers that doesn&#39;t support ES5 methods.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;249&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of unmountComponentAtNode method?&lt;/h3&gt; &lt;p&gt;This method is available from react-dom package and it removes a mounted React component from the DOM and clean up its event handlers and state. If no component was mounted in the container, calling this function does nothing. Returns true if a component was unmounted and false if there was no component to unmount.&lt;/p&gt; &lt;p&gt;The method signature would be as follows,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;ReactDOM.unmountComponentAtNode(container)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;250&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is code-splitting?&lt;/h3&gt; &lt;p&gt;Code-Splitting is a feature supported by bundlers like Webpack and Browserify which can create multiple bundles that can be dynamically loaded at runtime. The react project supports code splitting via dynamic import() feature.&lt;/p&gt; &lt;p&gt;For example, in the below code snippets, it will make moduleA.js and all its unique dependencies as a separate chunk that only loads after the user clicks the &#39;Load&#39; button. &lt;strong&gt;moduleA.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const moduleA = &#39;Hello&#39;;&#xA;&#xA;export { moduleA };&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;&#xA;&#xA;class App extends Component {&#xA;  handleClick = () =&amp;gt; {&#xA;    import(&#39;./moduleA&#39;)&#xA;      .then(({ moduleA }) =&amp;gt; {&#xA;        // Use moduleA&#xA;      })&#xA;      .catch(err =&amp;gt; {&#xA;        // Handle failure&#xA;      });&#xA;  };&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div&amp;gt;&#xA;        &amp;lt;button onClick={this.handleClick}&amp;gt;Load&amp;lt;/button&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&#xA;export default App;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;251&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the benefit of strict mode?&lt;/h3&gt; &lt;p&gt;The &#xA;   &lt;strictmode&gt;&#xA;     will be helpful in the below cases&#xA;   &lt;/strictmode&gt;&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Identifying components with &lt;strong&gt;unsafe lifecycle methods&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Warning about &lt;strong&gt;legacy string ref&lt;/strong&gt; API usage.&lt;/li&gt; &#xA;   &lt;li&gt;Detecting unexpected &lt;strong&gt;side effects&lt;/strong&gt;.&lt;/li&gt; &#xA;   &lt;li&gt;Detecting &lt;strong&gt;legacy context&lt;/strong&gt; API.&lt;/li&gt; &#xA;   &lt;li&gt;Warning about deprecated findDOMNode usage&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;252&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are Keyed Fragments?&lt;/h3&gt; &lt;p&gt;The Fragments declared with the explicit &amp;lt;React.Fragment&amp;gt; syntax may have keys. The general use case is mapping a collection to an array of fragments as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Glossary(props) {&#xA;  return (&#xA;    &amp;lt;dl&amp;gt;&#xA;      {props.items.map(item =&amp;gt; (&#xA;        // Without the `key`, React will fire a key warning&#xA;        &amp;lt;React.Fragment key={item.id}&amp;gt;&#xA;          &amp;lt;dt&amp;gt;{item.term}&amp;lt;/dt&amp;gt;&#xA;          &amp;lt;dd&amp;gt;{item.description}&amp;lt;/dd&amp;gt;&#xA;        &amp;lt;/React.Fragment&amp;gt;&#xA;      ))}&#xA;    &amp;lt;/dl&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; key is the only attribute that can be passed to Fragment. In the future, there might be a support for additional attributes, such as event handlers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;253&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Does React support all HTML attributes?&lt;/h3&gt; &lt;p&gt;As of React 16, both standard or custom DOM attributes are fully supported. Since React components often take both custom and DOM-related props, React uses the camelCase convention just like the DOM APIs.&lt;/p&gt; &lt;p&gt;Let us take few props with respect to standard HTML attributes,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;div tabIndex=&#34;-1&#34; /&amp;gt;      // Just like node.tabIndex DOM API&#xA;&amp;lt;div className=&#34;Button&#34; /&amp;gt; // Just like node.className DOM API&#xA;&amp;lt;input readOnly={true} /&amp;gt;  // Just like node.readOnly DOM API&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;These props work similarly to the corresponding HTML attributes, with the exception of the special cases. It also support all SVG attributes.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;254&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the limitations with HOCs?&lt;/h3&gt; &lt;p&gt;Higher-order components come with a few caveats apart from its benefits. Below are the few listed in an order,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Don’t use HOCs inside the render method:&lt;/strong&gt; It is not recommended to apply a HOC to a component within the render method of a component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;  // A new version of EnhancedComponent is created on every render&#xA;  // EnhancedComponent1 !== EnhancedComponent2&#xA;  const EnhancedComponent = enhance(MyComponent);&#xA;  // That causes the entire subtree to unmount/remount each time!&#xA;  return &amp;lt;EnhancedComponent /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above code impacts on performance by remounting a component that causes the state of that component and all of its children to be lost. Instead, apply HOCs outside the component definition so that the resulting component is created only once.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static methods must be copied over:&lt;/strong&gt; When you apply a HOC to a component the new component does not have any of the static methods of the original component&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Define a static method&#xA;WrappedComponent.staticMethod = function() {/*...*/}&#xA;// Now apply a HOC&#xA;const EnhancedComponent = enhance(WrappedComponent);&#xA;&#xA;// The enhanced component has no static method&#xA;typeof EnhancedComponent.staticMethod === &#39;undefined&#39; // true&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can overcome this by copying the methods onto the container before returning it,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function enhance(WrappedComponent) {&#xA;  class Enhance extends React.Component {/*...*/}&#xA;  // Must know exactly which method(s) to copy :(&#xA;  Enhance.staticMethod = WrappedComponent.staticMethod;&#xA;  return Enhance;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Refs aren’t passed through:&lt;/strong&gt; For HOCs you need to pass through all props to the wrapped component but this does not work for refs. This is because ref is not really a prop similar to key. In this case you need to use the React.forwardRef API&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;255&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to debug forwardRefs in DevTools?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;React.forwardRef&lt;/strong&gt; accepts a render function as parameter and DevTools uses this function to determine what to display for the ref forwarding component.&lt;/p&gt; &lt;p&gt;For example, If you don&#39;t name the render function or not using displayName property then it will appear as ”ForwardRef” in the DevTools,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const WrappedComponent = React.forwardRef((props, ref) =&amp;gt; {&#xA;  return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;But If you name the render function then it will appear as &lt;strong&gt;”ForwardRef(myFunction)”&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const WrappedComponent = React.forwardRef(&#xA;  function myFunction(props, ref) {&#xA;    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;  }&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As an alternative, You can also set displayName property for forwardRef function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function logProps(Component) {&#xA;  class LogProps extends React.Component {&#xA;    // ...&#xA;  }&#xA;&#xA;  function forwardRef(props, ref) {&#xA;    return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;  }&#xA;&#xA;  // Give this component a more helpful display name in DevTools.&#xA;  // e.g. &#34;ForwardRef(logProps(MyComponent))&#34;&#xA;  const name = Component.displayName || Component.name;&#xA;  forwardRef.displayName = `logProps(${name})`;&#xA;&#xA;  return React.forwardRef(forwardRef);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;256&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;When component props defaults to true?&lt;/h3&gt; &lt;p&gt;If you pass no value for a prop, it defaults to true. This behavior is available so that it matches the behavior of HTML.&lt;/p&gt; &lt;p&gt;For example, below expressions are equivalent,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;MyInput autocomplete /&amp;gt;&#xA;&#xA;&amp;lt;MyInput autocomplete={true} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; It is not recommended to use this approach because it can be confused with the ES6 object shorthand (example, &lt;code&gt;{name}&lt;/code&gt; which is short for &lt;code&gt;{name: name}&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;257&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is NextJS and major features of it?&lt;/h3&gt; &lt;p&gt;Next.js is a popular and lightweight framework for static and server‑rendered applications built with React. It also provides styling and routing solutions. Below are the major features provided by NextJS,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Server-rendered by default&lt;/li&gt; &#xA;   &lt;li&gt;Automatic code splitting for faster page loads&lt;/li&gt; &#xA;   &lt;li&gt;Simple client-side routing (page based)&lt;/li&gt; &#xA;   &lt;li&gt;Webpack-based dev environment which supports (HMR)&lt;/li&gt; &#xA;   &lt;li&gt;Able to implement with Express or any other Node.js HTTP server&lt;/li&gt; &#xA;   &lt;li&gt;Customizable with your own Babel and Webpack configurations&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;258&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you pass an event handler to a component?&lt;/h3&gt; &lt;p&gt;You can pass event handlers and other functions as props to child components. It can be used in child component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;button onClick={this.handleClick}&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;259&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it good to use arrow functions in render methods?&lt;/h3&gt; &lt;p&gt;Yes, You can use. It is often the easiest way to pass parameters to callback functions. But you need to optimize the performance while using it.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Foo extends Component {&#xA;  handleClick() {&#xA;    console.log(&#39;Click happened&#39;);&#xA;  }&#xA;  render() {&#xA;    return &amp;lt;button onClick={() =&amp;gt; this.handleClick()}&amp;gt;Click Me&amp;lt;/button&amp;gt;;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Using an arrow function in render method creates a new function each time the component renders, which may have performance implications&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;260&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to prevent a function from being called multiple times?&lt;/h3&gt; &lt;p&gt;If you use an event handler such as &lt;strong&gt;onClick or onScroll&lt;/strong&gt; and want to prevent the callback from being fired too quickly, then you can limit the rate at which callback is executed. This can be achieved in the below possible ways,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Throttling:&lt;/strong&gt; Changes based on a time based frequency. For example, it can be used using _.throttle lodash function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Debouncing:&lt;/strong&gt; Publish changes after a period of inactivity. For example, it can be used using _.debounce lodash function&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;RequestAnimationFrame throttling:&lt;/strong&gt; Changes based on requestAnimationFrame. For example, it can be used using raf-schd lodash function&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;261&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How JSX prevents Injection Attacks?&lt;/h3&gt; &lt;p&gt;React DOM escapes any values embedded in JSX before rendering them. Thus it ensures that you can never inject anything that’s not explicitly written in your application. Everything is converted to a string before being rendered.&lt;/p&gt; &lt;p&gt;For example, you can embed user input as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const name = response.potentiallyMaliciousInput;&#xA;const element = &amp;lt;h1&amp;gt;{name}&amp;lt;/h1&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way you can prevent XSS(Cross-site-scripting) attacks in the application.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;262&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you update rendered elements?&lt;/h3&gt; &lt;p&gt;You can update UI(represented by rendered element) by passing the newly created element to ReactDOM&#39;s render method.&lt;/p&gt; &lt;p&gt;For example, lets take a ticking clock example, where it updates the time by calling render method multiple times,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function tick() {&#xA;  const element = (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;h1&amp;gt;Hello, world!&amp;lt;/h1&amp;gt;&#xA;      &amp;lt;h2&amp;gt;It is {new Date().toLocaleTimeString()}.&amp;lt;/h2&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;  ReactDOM.render(element, document.getElementById(&#39;root&#39;));&#xA;}&#xA;&#xA;setInterval(tick, 1000);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;263&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you say that props are readonly?&lt;/h3&gt; &lt;p&gt;When you declare a component as a function or a class, it must never modify its own props.&lt;/p&gt; &lt;p&gt;Let us take a below capital function,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function capital(amount, interest) {&#xA;   return amount + interest;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The above function is called “pure” because it does not attempt to change their inputs, and always return the same result for the same inputs. Hence, React has a single rule saying &#34;All React components must act like pure functions with respect to their props.&#34;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;264&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you say that state updates are merged?&lt;/h3&gt; &lt;p&gt;When you call setState() in the component, React merges the object you provide into the current state.&lt;/p&gt; &lt;p&gt;For example, let us take a facebook user with posts and comments details as state variables,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {&#xA;      posts: [],&#xA;      comments: []&#xA;    };&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now you can update them independently with separate &lt;code&gt;setState()&lt;/code&gt; calls as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; componentDidMount() {&#xA;    fetchPosts().then(response =&amp;gt; {&#xA;      this.setState({&#xA;        posts: response.posts&#xA;      });&#xA;    });&#xA;&#xA;    fetchComments().then(response =&amp;gt; {&#xA;      this.setState({&#xA;        comments: response.comments&#xA;      });&#xA;    });&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code snippets, &lt;code&gt;this.setState({comments})&lt;/code&gt; updates only comments variable without modifying or replacing &lt;code&gt;posts&lt;/code&gt; variable.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;265&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you pass arguments to an event handler?&lt;/h3&gt; &lt;p&gt;During iterations or loops, it is common to pass an extra parameter to an event handler. This can be achieved through arrow functions or bind method.&lt;/p&gt; &lt;p&gt;Let us take an example of user details updated in a grid,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;button onClick={(e) =&amp;gt; this.updateUser(userId, e)}&amp;gt;Update User details&amp;lt;/button&amp;gt;&#xA;&amp;lt;button onClick={this.updateUser.bind(this, userId)}&amp;gt;Update User details&amp;lt;/button&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the both approaches, the synthetic argument &lt;code&gt;e&lt;/code&gt; is passed as a second argument. You need to pass it explicitly for arrow functions and it will be passed automatically for &lt;code&gt;bind&lt;/code&gt; method.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;266&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to prevent component from rendering?&lt;/h3&gt; &lt;p&gt;You can prevent component from rendering by returning null based on specific condition. This way it can conditionally render component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Greeting(props) {&#xA;  if (!props.loggedIn) {&#xA;    return null;&#xA;  }&#xA;&#xA;  return (&#xA;    &amp;lt;div className=&#34;greeting&#34;&amp;gt;&#xA;      welcome, {props.name}&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class User extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {loggedIn: false, name: &#39;John&#39;};&#xA;  }&#xA;&#xA;  render() {&#xA;   return (&#xA;       &amp;lt;div&amp;gt;&#xA;         //Prevent component render if it is not loggedIn&#xA;         &amp;lt;Greeting loggedIn={this.state.loggedIn} /&amp;gt;&#xA;         &amp;lt;UserDetails name={this.state.name}&amp;gt;&#xA;       &amp;lt;/div&amp;gt;&#xA;   );&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above example, the &lt;code&gt;greeting&lt;/code&gt; component skips its rendering section by applying condition and returning null value.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;267&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the conditions to safely use the index as a key?&lt;/h3&gt; &lt;p&gt;There are three conditions to make sure, it is safe use the index as a key.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The list and items are static– they are not computed and do not change&lt;/li&gt; &#xA;   &lt;li&gt;The items in the list have no ids&lt;/li&gt; &#xA;   &lt;li&gt;The list is never reordered or filtered.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;268&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Should keys be globally unique?&lt;/h3&gt; &lt;p&gt;The keys used within arrays should be unique among their siblings but they don’t need to be globally unique. i.e, You can use the same keys with two different arrays.&lt;/p&gt; &lt;p&gt;For example, the below &lt;code&gt;Book&lt;/code&gt; component uses two arrays with different arrays,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function Book(props) {&#xA;  const index = (&#xA;    &amp;lt;ul&amp;gt;&#xA;      {props.pages.map((page) =&amp;gt;&#xA;        &amp;lt;li key={page.id}&amp;gt;&#xA;          {page.title}&#xA;        &amp;lt;/li&amp;gt;&#xA;      )}&#xA;    &amp;lt;/ul&amp;gt;&#xA;  );&#xA;  const content = props.pages.map((page) =&amp;gt;&#xA;    &amp;lt;div key={page.id}&amp;gt;&#xA;      &amp;lt;h3&amp;gt;{page.title}&amp;lt;/h3&amp;gt;&#xA;      &amp;lt;p&amp;gt;{page.content}&amp;lt;/p&amp;gt;&#xA;      &amp;lt;p&amp;gt;{page.pageNumber}&amp;lt;/p&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      {index}&#xA;      &amp;lt;hr /&amp;gt;&#xA;      {content}&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;269&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the popular choice for form handling?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;Formik&lt;/code&gt; is a form library for react which provides solutions such as validation, keeping track of the visited fields, and handling form submission.&lt;/p&gt; &lt;p&gt;In detail, You can categorize them as follows,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; &#xA;   &lt;li&gt;Validation and error messages&lt;/li&gt; &#xA;   &lt;li&gt;Handling form submission&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;It is used to create a scalable, performant, form helper with a minimal API to solve annoying stuff.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;270&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the advantages of formik over redux form library?&lt;/h3&gt; &lt;p&gt;Below are the main reasons to recommend formik over redux form library,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;The form state is inherently short-term and local, so tracking it in Redux (or any kind of Flux library) is unnecessary.&lt;/li&gt; &#xA;   &lt;li&gt;Redux-Form calls your entire top-level Redux reducer multiple times ON EVERY SINGLE KEYSTROKE. This way it increases input latency for large apps.&lt;/li&gt; &#xA;   &lt;li&gt;Redux-Form is 22.5 kB minified gzipped whereas Formik is 12.7 kB&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;271&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why are you not required to use inheritance?&lt;/h3&gt; In React, it is recommended to use composition over inheritance to reuse code between components. Both Props and composition give you all the flexibility you need to customize a component’s look and behavior explicitly and safely. Whereas, If you want to reuse non-UI functionality between components, it is suggested to extract it into a separate JavaScript module. Later components import it and use that function, object, or class, without extending it.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;272&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I use web components in react application?&lt;/h3&gt; &lt;p&gt;Yes, you can use web components in a react application. Even though many developers won&#39;t use this combination, it may require especially if you are using third-party UI components that are written using Web Components.&lt;/p&gt; &lt;p&gt;For example, let us use &lt;code&gt;Vaadin&lt;/code&gt; date picker web component as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { Component } from &#39;react&#39;;&#xA;import &#39;./App.css&#39;;&#xA;import &#39;@vaadin/vaadin-date-picker&#39;;&#xA;class App extends Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;div className=&#34;App&#34;&amp;gt;&#xA;        &amp;lt;vaadin-date-picker label=&#34;When were you born?&#34;&amp;gt;&amp;lt;/vaadin-date-picker&amp;gt;&#xA;      &amp;lt;/div&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;273&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is dynamic import?&lt;/h3&gt; &lt;p&gt;You can achieve code-splitting in your app using dynamic import.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example of addition,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Normal Import&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { add } from &#39;./math&#39;;&#xA;console.log(add(10, 20));&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Dynamic Import&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import(&#34;./math&#34;).then(math =&amp;gt; {&#xA;  console.log(math.add(10, 20));&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;274&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are loadable components?&lt;/h3&gt; &lt;p&gt;If you want to do code-splitting in a server rendered app, it is recommend to use Loadable Components because React.lazy and Suspense is not yet available for server-side rendering. Loadable lets you render a dynamic import as a regular component.&lt;/p&gt; &lt;p&gt;Lets take an example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import loadable from &#39;@loadable/component&#39;&#xA;&#xA;const OtherComponent = loadable(() =&amp;gt; import(&#39;./OtherComponent&#39;))&#xA;&#xA;function MyComponent() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;OtherComponent /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now OtherComponent will be loaded in a separated bundle&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;275&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is suspense component?&lt;/h3&gt; &lt;p&gt;If the module containing the dynamic import is not yet loaded by the time parent component renders, you must show some fallback content while you’re waiting for it to load using a loading indicator. This can be done using &lt;strong&gt;Suspense&lt;/strong&gt; component.&lt;/p&gt; &lt;p&gt;For example, the below code uses suspense component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const OtherComponent = React.lazy(() =&amp;gt; import(&#39;./OtherComponent&#39;));&#xA;&#xA;function MyComponent() {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;&#xA;        &amp;lt;OtherComponent /&amp;gt;&#xA;      &amp;lt;/Suspense&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;As mentioned in the above code, Suspense is wrapped above the lazy component.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;276&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is route based code splitting?&lt;/h3&gt; &lt;p&gt;One of the best place to do code splitting is with routes. The entire page is going to re-render at once so users are unlikely to interact with other elements in the page at the same time. Due to this, the user experience won&#39;t be disturbed.&lt;/p&gt; &lt;p&gt;Let us take an example of route based website using libraries like React Router with React.lazy,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import { BrowserRouter as Router, Route, Switch } from &#39;react-router-dom&#39;;&#xA;import React, { Suspense, lazy } from &#39;react&#39;;&#xA;&#xA;const Home = lazy(() =&amp;gt; import(&#39;./routes/Home&#39;));&#xA;const About = lazy(() =&amp;gt; import(&#39;./routes/About&#39;));&#xA;&#xA;const App = () =&amp;gt; (&#xA;  &amp;lt;Router&amp;gt;&#xA;    &amp;lt;Suspense fallback={&amp;lt;div&amp;gt;Loading...&amp;lt;/div&amp;gt;}&amp;gt;&#xA;      &amp;lt;Switch&amp;gt;&#xA;        &amp;lt;Route exact path=&#34;/&#34; component={Home}/&amp;gt;&#xA;        &amp;lt;Route path=&#34;/about&#34; component={About}/&amp;gt;&#xA;      &amp;lt;/Switch&amp;gt;&#xA;    &amp;lt;/Suspense&amp;gt;&#xA;  &amp;lt;/Router&amp;gt;&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;In the above code, the code splitting will happen at each route level.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;277&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Give an example on How to use context?&lt;/h3&gt; &lt;p&gt;&lt;strong&gt;Context&lt;/strong&gt; is designed to share data that can be considered &lt;strong&gt;global&lt;/strong&gt; for a tree of React components.&lt;/p&gt; &lt;p&gt;For example, in the code below lets manually thread through a “theme” prop in order to style the Button component.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;//Lets create a context with a default theme value &#34;luna&#34;&#xA;const ThemeContext = React.createContext(&#39;luna&#39;);&#xA;// Create App component where it uses provider to pass theme value in the tree&#xA;class App extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;ThemeContext.Provider value=&#34;nova&#34;&amp;gt;&#xA;        &amp;lt;Toolbar /&amp;gt;&#xA;      &amp;lt;/ThemeContext.Provider&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;// A middle component where you don&#39;t need to pass theme prop anymore&#xA;function Toolbar(props) {&#xA;  return (&#xA;    &amp;lt;div&amp;gt;&#xA;      &amp;lt;ThemedButton /&amp;gt;&#xA;    &amp;lt;/div&amp;gt;&#xA;  );&#xA;}&#xA;// Lets read theme value in the button component to use&#xA;class ThemedButton extends React.Component {&#xA;  static contextType = ThemeContext;&#xA;  render() {&#xA;    return &amp;lt;Button theme={this.context} /&amp;gt;;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;278&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of default value in context?&lt;/h3&gt; &lt;p&gt;The defaultValue argument is only used when a component does not have a matching Provider above it in the tree. This can be helpful for testing components in isolation without wrapping them.&lt;/p&gt; &lt;p&gt;Below code snippet provides default theme value as Luna.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const MyContext = React.createContext(defaultValue);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;279&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you use contextType?&lt;/h3&gt; &lt;p&gt;ContextType is used to consume the context object. The contextType property can be used in two ways,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;contextType as property of class:&lt;/strong&gt; The contextType property on a class can be assigned a Context object created by React.createContext(). After that, you can consume the nearest current value of that Context type using this.context in any of the lifecycle methods and render function.&lt;/p&gt; &lt;p&gt;Lets assign contextType property on MyClass as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyClass extends React.Component {&#xA;  componentDidMount() {&#xA;    let value = this.context;&#xA;    /* perform a side-effect at mount using the value of MyContext */&#xA;  }&#xA;  componentDidUpdate() {&#xA;    let value = this.context;&#xA;    /* ... */&#xA;  }&#xA;  componentWillUnmount() {&#xA;    let value = this.context;&#xA;    /* ... */&#xA;  }&#xA;  render() {&#xA;    let value = this.context;&#xA;    /* render something based on the value of MyContext */&#xA;  }&#xA;}&#xA;MyClass.contextType = MyContext;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;strong&gt;Static field&lt;/strong&gt; You can use a static class field to initialize your contextType using public class field syntax.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class MyClass extends React.Component {&#xA;  static contextType = MyContext;&#xA;  render() {&#xA;    let value = this.context;&#xA;    /* render something based on the value */&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;280&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is a consumer?&lt;/h3&gt; &lt;p&gt;A Consumer is a React component that subscribes to context changes. It requires a function as a child which receives current context value as argument and returns a react node. The value argument passed to the function will be equal to the value prop of the closest Provider for this context above in the tree.&lt;/p&gt; &lt;p&gt;Lets take a simple example,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;MyContext.Consumer&amp;gt;&#xA;  {value =&amp;gt; /* render something based on the context value */}&#xA;&amp;lt;/MyContext.Consumer&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;281&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you solve performance corner cases while using context?&lt;/h3&gt; &lt;p&gt;The context uses reference identity to determine when to re-render, there are some gotchas that could trigger unintentional renders in consumers when a provider’s parent re-renders.&lt;/p&gt; &lt;p&gt;For example, the code below will re-render all consumers every time the Provider re-renders because a new object is always created for value.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends React.Component {&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;Provider value={{something: &#39;something&#39;}}&amp;gt;&#xA;        &amp;lt;Toolbar /&amp;gt;&#xA;      &amp;lt;/Provider&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This can be solved by lifting up the value to parent state,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class App extends React.Component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {&#xA;      value: {something: &#39;something&#39;},&#xA;    };&#xA;  }&#xA;&#xA;  render() {&#xA;    return (&#xA;      &amp;lt;Provider value={this.state.value}&amp;gt;&#xA;        &amp;lt;Toolbar /&amp;gt;&#xA;      &amp;lt;/Provider&amp;gt;&#xA;    );&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;282&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of forward ref in HOCs?&lt;/h3&gt; &lt;p&gt;Refs will not get passed through because ref is not a prop. It is handled differently by React just like &lt;strong&gt;key&lt;/strong&gt;. If you add a ref to a HOC, the ref will refer to the outermost container component, not the wrapped component. In this case, you can use Forward Ref API. For example, we can explicitly forward refs to the inner FancyButton component using the React.forwardRef API.&lt;/p&gt; &lt;p&gt;The below HOC logs all props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    function logProps(Component) {&#xA;      class LogProps extends React.Component {&#xA;        componentDidUpdate(prevProps) {&#xA;          console.log(&#39;old props:&#39;, prevProps);&#xA;          console.log(&#39;new props:&#39;, this.props);&#xA;        }&#xA;&#xA;        render() {&#xA;          const {forwardedRef, ...rest} = this.props;&#xA;&#xA;          // Assign the custom prop &#34;forwardedRef&#34; as a ref&#xA;          return &amp;lt;Component ref={forwardedRef} {...rest} /&amp;gt;;&#xA;        }&#xA;      }&#xA;&#xA;      return React.forwardRef((props, ref) =&amp;gt; {&#xA;        return &amp;lt;LogProps {...props} forwardedRef={ref} /&amp;gt;;&#xA;      });&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Let&#39;s use this HOC to log all props that get passed to our “fancy button” component,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    class FancyButton extends React.Component {&#xA;      focus() {&#xA;        // ...&#xA;      }&#xA;&#xA;      // ...&#xA;    }&#xA;    export default logProps(FancyButton);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now let&#39;s create a ref and pass it to FancyButton component. In this case, you can set focus to button element.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;    import FancyButton from &#39;./FancyButton&#39;;&#xA;&#xA;    const ref = React.createRef();&#xA;    ref.current.focus();&#xA;    &amp;lt;FancyButton&#xA;      label=&#34;Click Me&#34;&#xA;      handleClick={handleClick}&#xA;      ref={ref}&#xA;    /&amp;gt;;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;283&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is ref argument available for all functions or class components?&lt;/h3&gt; Regular function or class components don’t receive the ref argument, and ref is not available in props either. The second ref argument only exists when you define a component with React.forwardRef call.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;284&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why do you need additional care for component libraries while using forward refs?&lt;/h3&gt; When you start using forwardRef in a component library, you should treat it as a breaking change and release a new major version of your library. This is because your library likely has a different behavior such as what refs get assigned to, and what types are exported. These changes can break apps and other libraries that depend on the old behavior.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;285&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to create react class components without ES6?&lt;/h3&gt; &lt;p&gt;If you don’t use ES6 then you may need to use the create-react-class module instead. For default props, you need to define getDefaultProps() as a function on the passed object. Whereas for initial state, you have to provide a separate getInitialState method that returns the initial state.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var Greeting = createReactClass({&#xA;  getDefaultProps: function() {&#xA;      return {&#xA;        name: &#39;Jhohn&#39;&#xA;      };&#xA;    },&#xA;  getInitialState: function() {&#xA;      return {message: this.props.message};&#xA;    },&#xA;  handleClick: function() {&#xA;     console.log(this.state.message);&#xA;  },&#xA;  render: function() {&#xA;    return &amp;lt;h1&amp;gt;Hello, {this.props.name}&amp;lt;/h1&amp;gt;;&#xA;  }&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you use createReactClass then auto binding is available for all methods. i.e, You don&#39;t need to use &lt;code&gt;.bind(this)&lt;/code&gt; with in constructor for event handlers.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;286&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it possible to use react without JSX?&lt;/h3&gt; &lt;p&gt;Yes, JSX is not mandatory for using React. Actually it is convenient when you don’t want to set up compilation in your build environment. Each JSX element is just syntactic sugar for calling &lt;code&gt;React.createElement(component, props, ...children)&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For example, let us take a greeting example with JSX,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Greeting extends React.Component {&#xA;  render() {&#xA;    return &amp;lt;div&amp;gt;Hello {this.props.message}&amp;lt;/div&amp;gt;;&#xA;  }&#xA;}&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;Greeting message=&#34;World&#34; /&amp;gt;,&#xA;  document.getElementById(&#39;root&#39;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can write the same code without JSX as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class Greeting extends React.Component {&#xA;  render() {&#xA;    return React.createElement(&#39;div&#39;, null, `Hello ${this.props.message}`);&#xA;  }&#xA;}&#xA;&#xA;ReactDOM.render(&#xA;  React.createElement(Greeting, {message: &#39;World&#39;}, null),&#xA;  document.getElementById(&#39;root&#39;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;287&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is diffing algorithm?&lt;/h3&gt; &lt;p&gt;React needs to use algorithms to find out how to efficiently update the UI to match the most recent tree. The diffing algorithms is generating the minimum number of operations to transform one tree into another. However, the algorithms have a complexity in the order of O(n3) where n is the number of elements in the tree.&lt;/p&gt; &lt;p&gt;In this case, displaying 1000 elements would require in the order of one billion comparisons. This is far too expensive. Instead, React implements a heuristic O(n) algorithm based on two assumptions:&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Two elements of different types will produce different trees.&lt;/li&gt; &#xA;   &lt;li&gt;The developer can hint at which child elements may be stable across different renders with a key prop.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;288&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the rules covered by diffing algorithm?&lt;/h3&gt; &lt;p&gt;When diffing two trees, React first compares the two root elements. The behavior is different depending on the types of the root elements. It covers the below rules during reconciliation algorithm,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Elements Of Different Types:&lt;/strong&gt; Whenever the root elements have different types, React will tear down the old tree and build the new tree from scratch. For example, elements &lt;a&gt; to &lt;img&gt;, or from &#xA;     &lt;article&gt;&#xA;       to &#xA;      &lt;comment&gt;&#xA;        of different types lead a full rebuild.&#xA;      &lt;/comment&gt;&#xA;     &lt;/article&gt;&lt;/a&gt;&lt;/li&gt;&#xA;   &lt;a&gt; &lt;li&gt;&lt;strong&gt;DOM Elements Of The Same Type:&lt;/strong&gt; When comparing two React DOM elements of the same type, React looks at the attributes of both, keeps the same underlying DOM node, and only updates the changed attributes. Lets take an example with same DOM elements except className attribute, &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;div className=&#34;show&#34; title=&#34;ReactJS&#34; /&amp;gt;&#xA;&#xA;&amp;lt;div className=&#34;hide&#34; title=&#34;ReactJS&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Component Elements Of The Same Type:&lt;/strong&gt; When a component updates, the instance stays the same, so that state is maintained across renders. React updates the props of the underlying component instance to match the new element, and calls componentWillReceiveProps() and componentWillUpdate() on the underlying instance. After that, the render() method is called and the diff algorithm recurses on the previous result and the new result.&lt;/li&gt; &lt;li&gt;&lt;strong&gt;Recursing On Children:&lt;/strong&gt; when recursing on the children of a DOM node, React just iterates over both lists of children at the same time and generates a mutation whenever there’s a difference. For example, when adding an element at the end of the children, converting between these two trees works well. &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&#xA;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li&amp;gt;first&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;second&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li&amp;gt;third&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &lt;li&gt;&lt;strong&gt;Handling keys:&lt;/strong&gt; React supports a key attribute. When children have keys, React uses the key to match children in the original tree with children in the subsequent tree. For example, adding a key can make the tree conversion efficient,&lt;/li&gt; &lt;/a&gt;&#xA;  &lt;/ol&gt;&lt;a&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li key=&#34;2015&#34;&amp;gt;Duke&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li key=&#34;2016&#34;&amp;gt;Villanova&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&#xA;&amp;lt;ul&amp;gt;&#xA;  &amp;lt;li key=&#34;2014&#34;&amp;gt;Connecticut&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li key=&#34;2015&#34;&amp;gt;Duke&amp;lt;/li&amp;gt;&#xA;  &amp;lt;li key=&#34;2016&#34;&amp;gt;Villanova&amp;lt;/li&amp;gt;&#xA;&amp;lt;/ul&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/a&gt;&lt;/li&gt;&#xA; &lt;a&gt; &lt;/a&gt;&#xA;&lt;/ol&gt;&#xA;&lt;a&gt; &lt;/a&gt;&#xA;&lt;p&gt;&lt;a&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/a&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;289&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;When do you need to use refs?&lt;/h3&gt; &lt;p&gt;There are few use cases to go for refs,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Managing focus, text selection, or media playback.&lt;/li&gt; &#xA;   &lt;li&gt;Triggering imperative animations.&lt;/li&gt; &#xA;   &lt;li&gt;Integrating with third-party DOM libraries.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;290&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Must prop be named as render for render props?&lt;/h3&gt; &lt;p&gt;Even though the pattern named render props, you don’t have to use a prop named render to use this pattern. i.e, Any prop that is a function that a component uses to know what to render is technically a “render prop”. Lets take an example with the children prop for render props,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Mouse children={mouse =&amp;gt; (&#xA;  &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;&#xA;)}/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Actually children prop doesn’t need to be named in the list of “attributes” in JSX element. Instead, you can keep it directly inside element,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;Mouse&amp;gt;&#xA;  {mouse =&amp;gt; (&#xA;    &amp;lt;p&amp;gt;The mouse position is {mouse.x}, {mouse.y}&amp;lt;/p&amp;gt;&#xA;  )}&#xA;&amp;lt;/Mouse&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;While using this above technique(without any name), explicitly state that children should be a function in your propTypes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;Mouse.propTypes = {&#xA;  children: PropTypes.func.isRequired&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;291&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the problems of using render props with pure components?&lt;/h3&gt; If you create a function inside a render method, it negates the purpose of pure component. Because the shallow prop comparison will always return false for new props, and each render in this case will generate a new value for the render prop. You can solve this issue by defining the render function as instance method.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;292&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you create HOC using render props?&lt;/h3&gt; &lt;p&gt;You can implement most higher-order components (HOC) using a regular component with a render prop. For example, if you would prefer to have a withMouse HOC instead of a &#xA;   &lt;mouse&gt;&#xA;     component, you could easily create one using a regular &#xA;    &lt;mouse&gt;&#xA;      with a render prop.&#xA;    &lt;/mouse&gt;&#xA;   &lt;/mouse&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function withMouse(Component) {&#xA;  return class extends React.Component {&#xA;    render() {&#xA;      return (&#xA;        &amp;lt;Mouse render={mouse =&amp;gt; (&#xA;          &amp;lt;Component {...this.props} mouse={mouse} /&amp;gt;&#xA;        )}/&amp;gt;&#xA;      );&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This way render props gives the flexibility of using either pattern.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;293&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is windowing technique?&lt;/h3&gt; Windowing is a technique that only renders a small subset of your rows at any given time, and can dramatically reduce the time it takes to re-render the components as well as the number of DOM nodes created. If your application renders long lists of data then this technique is recommended. Both react-window and react-virtualized are popular windowing libraries which provides several reusable components for displaying lists, grids, and tabular data.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;294&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you print falsy values in JSX?&lt;/h3&gt; &lt;p&gt;The falsy values such as false, null, undefined, and true are valid children but they don&#39;t render anything. If you still want to display them then you need to convert it to string. Let&#39;s take an example on how to convert to a string,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;&amp;lt;div&amp;gt;&#xA;  My JavaScript variable is {String(myVariable)}.&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;295&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the typical use case of portals?&lt;/h3&gt; &lt;p&gt;React portals are very useful when a parent component has overflow: hidden or has properties that affect the stacking context (e.g. z-index, position, opacity) and you need to visually “break out” of its container.&lt;/p&gt; &lt;p&gt;For example, dialogs, global message notifications, hovercards, and tooltips.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;296&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you set default value for uncontrolled component?&lt;/h3&gt; &lt;p&gt;In React, the value attribute on form elements will override the value in the DOM. With an uncontrolled component, you might want React to specify the initial value, but leave subsequent updates uncontrolled. To handle this case, you can specify a &lt;strong&gt;defaultValue&lt;/strong&gt; attribute instead of &lt;strong&gt;value&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;render() {&#xA;  return (&#xA;    &amp;lt;form onSubmit={this.handleSubmit}&amp;gt;&#xA;      &amp;lt;label&amp;gt;&#xA;        User Name:&#xA;        &amp;lt;input&#xA;          defaultValue=&#34;John&#34;&#xA;          type=&#34;text&#34;&#xA;          ref={this.input} /&amp;gt;&#xA;      &amp;lt;/label&amp;gt;&#xA;      &amp;lt;input type=&#34;submit&#34; value=&#34;Submit&#34; /&amp;gt;&#xA;    &amp;lt;/form&amp;gt;&#xA;  );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The same applies for &lt;code&gt;select&lt;/code&gt; and &lt;code&gt;textArea&lt;/code&gt; inputs. But you need to use &lt;strong&gt;defaultChecked&lt;/strong&gt; for &lt;code&gt;checkbox&lt;/code&gt; and &lt;code&gt;radio&lt;/code&gt; inputs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;297&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is your favorite React stack?&lt;/h3&gt; Even though the tech stack varies from developer to developer, the most popular stack is used in react boilerplate project code. It mainly uses Redux and redux-saga for state management and asynchronous side-effects, react-router for routing purpose, styled-components for styling react components, axios for invoking REST api, and other supported stack such as webpack, reselect, ESNext, Babel. You can clone the project &lt;a href=&#34;https://github.com/react-boilerplate/react-boilerplate&#34;&gt;https://github.com/react-boilerplate/react-boilerplate&lt;/a&gt; and start working on any new react project.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;298&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Real DOM and Virtual DOM?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Real DOM and Virtual DOM,&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Real DOM&lt;/th&gt; &#xA;     &lt;th&gt;Virtual DOM&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Updates are slow&lt;/td&gt; &#xA;     &lt;td&gt;Updates are fast&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;DOM manipulation is very expensive.&lt;/td&gt; &#xA;     &lt;td&gt;DOM manipulation is very easy&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;You can update HTML directly.&lt;/td&gt; &#xA;     &lt;td&gt;You Can’t directly update HTML&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;It causes too much of memory wastage&lt;/td&gt; &#xA;     &lt;td&gt;There is no memory wastage&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Creates a new DOM if element updates&lt;/td&gt; &#xA;     &lt;td&gt;It updates the JSX if element update&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;299&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to add Bootstrap to a react application?&lt;/h3&gt; &lt;p&gt;Bootstrap can be added to your React app in a three possible ways,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Using the Bootstrap CDN: This is the easiest way to add bootstrap. Add both bootstrap CSS and JS resources in a head tag.&lt;/li&gt; &#xA;   &lt;li&gt;Bootstrap as Dependency: If you are using a build tool or a module bundler such as Webpack, then this is the preferred option for adding Bootstrap to your React application &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;npm install bootstrap&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;React Bootstrap Package: In this case, you can add Bootstrap to our React app is by using a package that has rebuilt Bootstrap components to work particularly as React components. Below packages are popular in this category, &#xA;    &lt;ol&gt; &#xA;     &lt;li&gt;react-bootstrap&lt;/li&gt; &#xA;     &lt;li&gt;reactstrap&lt;/li&gt; &#xA;    &lt;/ol&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;300&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can you list down top websites or applications using react as front end framework?&lt;/h3&gt; &lt;p&gt;Below are the &lt;code&gt;top 10 websites&lt;/code&gt; using React as their front-end framework,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Facebook&lt;/li&gt; &#xA;   &lt;li&gt;Uber&lt;/li&gt; &#xA;   &lt;li&gt;Instagram&lt;/li&gt; &#xA;   &lt;li&gt;WhatsApp&lt;/li&gt; &#xA;   &lt;li&gt;Khan Academy&lt;/li&gt; &#xA;   &lt;li&gt;Airbnb&lt;/li&gt; &#xA;   &lt;li&gt;Dropbox&lt;/li&gt; &#xA;   &lt;li&gt;Flipboard&lt;/li&gt; &#xA;   &lt;li&gt;Netflix&lt;/li&gt; &#xA;   &lt;li&gt;PayPal&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;301&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is it recommended to use CSS In JS technique in React?&lt;/h3&gt; React does not have any opinion about how styles are defined but if you are a beginner then good starting point is to define your styles in a separate *.css file as usual and refer to them using className. This functionality is not part of React but came from third-party libraries. But If you want to try a different approach(CSS-In-JS) then styled-components library is a good option.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;302&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do I need to rewrite all my class components with hooks?&lt;/h3&gt; No. But you can try Hooks in a few components(or new components) without rewriting any existing code. Because there are no plans to remove classes in ReactJS.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;303&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How to fetch data with React Hooks?&lt;/h3&gt; &lt;p&gt;The effect hook called &lt;code&gt;useEffect&lt;/code&gt; is used to fetch the data with axios from the API and to set the data in the local state of the component with the state hook’s update function.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example in which it fetches list of react articles from the API&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import React, { useState, useEffect } from &#39;react&#39;;&#xA;import axios from &#39;axios&#39;;&#xA;&#xA;function App() {&#xA;  const [data, setData] = useState({ hits: [] });&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    (async () =&amp;gt; {&#xA;      const result = await axios(&#xA;        &#39;http://hn.algolia.com/api/v1/search?query=react&#39;,&#xA;      );&#xA;&#xA;      setData(result.data);&#xA;    })()&#xA;  }, []);&#xA;&#xA;  return (&#xA;    &amp;lt;ul&amp;gt;&#xA;      {data.hits.map(item =&amp;gt; (&#xA;        &amp;lt;li key={item.objectID}&amp;gt;&#xA;          &amp;lt;a href={item.url}&amp;gt;{item.title}&amp;lt;/a&amp;gt;&#xA;        &amp;lt;/li&amp;gt;&#xA;      ))}&#xA;    &amp;lt;/ul&amp;gt;&#xA;  );&#xA;}&#xA;&#xA;export default App;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember we provided an empty array as second argument to the effect hook to avoid activating it on component updates but only on mounting of the component. i.e, It fetches only on component mount.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;304&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Is Hooks cover all use cases for classes?&lt;/h3&gt; Hooks doesn&#39;t cover all use cases of classes but there is a plan to add them soon. Currently there are no Hook equivalents to the uncommon &lt;strong&gt;getSnapshotBeforeUpdate&lt;/strong&gt; and &lt;strong&gt;componentDidCatch&lt;/strong&gt; lifecycles yet.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;305&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the stable release for hooks support?&lt;/h3&gt; &lt;p&gt;React includes a stable implementation of React Hooks in 16.8 release for below packages&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React DOM&lt;/li&gt; &#xA;   &lt;li&gt;React DOM Server&lt;/li&gt; &#xA;   &lt;li&gt;React Test Renderer&lt;/li&gt; &#xA;   &lt;li&gt;React Shallow Renderer&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;306&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Why do we use array destructuring (square brackets notation) in &lt;code&gt;useState&lt;/code&gt;?&lt;/h3&gt; &lt;p&gt;When we declare a state variable with &lt;code&gt;useState&lt;/code&gt;, it returns a pair — an array with two items. The first item is the current value, and the second is a function that updates the value. Using [0] and [1] to access them is a bit confusing because they have a specific meaning. This is why we use array destructuring instead.&lt;/p&gt; &lt;p&gt;For example, the array index access would look as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt; var userStateVariable = useState(&#39;userProfile&#39;); // Returns an array pair&#xA; var user = userStateVariable[0]; // Access first item&#xA; var setUser = userStateVariable[1]; // Access second item&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Whereas with array destructuring the variables can be accessed as follows:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const [user, setUser] = useState(&#39;userProfile&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the sources used for introducing hooks?&lt;/h3&gt; &lt;p&gt;Hooks got the ideas from several different sources. Below are some of them,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Previous experiments with functional APIs in the react-future repository&lt;/li&gt; &#xA;   &lt;li&gt;Community experiments with render prop APIs such as Reactions Component&lt;/li&gt; &#xA;   &lt;li&gt;State variables and state cells in DisplayScript.&lt;/li&gt; &#xA;   &lt;li&gt;Subscriptions in Rx.&lt;/li&gt; &#xA;   &lt;li&gt;Reducer components in ReasonReact.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;308&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you access imperative API of web components?&lt;/h3&gt; Web Components often expose an imperative API to implement its functions. You will need to use a &lt;strong&gt;ref&lt;/strong&gt; to interact with the DOM node directly if you want to access imperative API of a web component. But if you are using third-party Web Components, the best solution is to write a React component that behaves as a &lt;strong&gt;wrapper&lt;/strong&gt; for your Web Component.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;309&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is formik?&lt;/h3&gt; &lt;p&gt;Formik is a small react form library that helps you with the three major problems,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Getting values in and out of form state&lt;/li&gt; &#xA;   &lt;li&gt;Validation and error messages&lt;/li&gt; &#xA;   &lt;li&gt;Handling form submission&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;310&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are typical middleware choices for handling asynchronous calls in Redux?&lt;/h3&gt; Some of the popular middleware choices for handling asynchronous calls in Redux eco system are &lt;code&gt;Redux Thunk, Redux Promise, Redux Saga&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;311&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Do browsers understand JSX code?&lt;/h3&gt; No, browsers can&#39;t understand JSX code. You need a transpiler to convert your JSX to regular Javascript that browsers can understand. The most widely used transpiler right now is Babel.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;312&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Describe about data flow in react?&lt;/h3&gt; React implements one-way reactive data flow using props which reduce boilerplate and is easier to understand than traditional two-way data binding.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;313&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is react scripts?&lt;/h3&gt; The &lt;code&gt;react-scripts&lt;/code&gt; package is a set of scripts from the create-react-app starter pack which helps you kick off projects without configuring. The &lt;code&gt;react-scripts start&lt;/code&gt; command sets up the development environment and starts a server, as well as hot module reloading.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;314&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the features of create react app?&lt;/h3&gt; &lt;p&gt;Below are the list of some of the features provided by create react app.&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;React, JSX, ES6, Typescript and Flow syntax support.&lt;/li&gt; &#xA;   &lt;li&gt;Autoprefixed CSS&lt;/li&gt; &#xA;   &lt;li&gt;CSS Reset/Normalize&lt;/li&gt; &#xA;   &lt;li&gt;A live development server&lt;/li&gt; &#xA;   &lt;li&gt;A fast interactive unit test runner with built-in support for coverage reporting&lt;/li&gt; &#xA;   &lt;li&gt;A build script to bundle JS, CSS, and images for production, with hashes and sourcemaps&lt;/li&gt; &#xA;   &lt;li&gt;An offline-first service worker and a web app manifest, meeting all the Progressive Web App criteria.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;315&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of renderToNodeStream method?&lt;/h3&gt; The &lt;code&gt;ReactDOMServer#renderToNodeStream&lt;/code&gt; method is used to generate HTML on the server and send the markup down on the initial request for faster page loads. It also helps search engines to crawl your pages easily for SEO purposes. &lt;strong&gt;Note:&lt;/strong&gt; Remember this method is not available in the browser but only server.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;316&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is MobX?&lt;/h3&gt; MobX is a simple, scalable and battle tested state management solution for applying functional reactive programming (TFRP). For reactJs application, you need to install below packages, &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install mobx --save&#xA;npm install mobx-react --save&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;317&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the differences between Redux and MobX?&lt;/h3&gt; &lt;p&gt;Below are the main differences between Redux and MobX,&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th&gt;Topic&lt;/th&gt; &#xA;     &lt;th&gt;Redux&lt;/th&gt; &#xA;     &lt;th&gt;MobX&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Definition&lt;/td&gt; &#xA;     &lt;td&gt;It is a javascript library for managing the application state&lt;/td&gt; &#xA;     &lt;td&gt;It is a library for reactively managing the state of your applications&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Programming&lt;/td&gt; &#xA;     &lt;td&gt;It is mainly written in ES6&lt;/td&gt; &#xA;     &lt;td&gt;It is written in JavaScript(ES5)&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Data Store&lt;/td&gt; &#xA;     &lt;td&gt;There is only one large store exist for data storage&lt;/td&gt; &#xA;     &lt;td&gt;There is more than one store for storage&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Usage&lt;/td&gt; &#xA;     &lt;td&gt;Mainly used for large and complex applications&lt;/td&gt; &#xA;     &lt;td&gt;Used for simple applications&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;Performance&lt;/td&gt; &#xA;     &lt;td&gt;Need to be improved&lt;/td&gt; &#xA;     &lt;td&gt;Provides better performance&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td&gt;How it stores&lt;/td&gt; &#xA;     &lt;td&gt;Uses JS Object to store&lt;/td&gt; &#xA;     &lt;td&gt;Uses observable to store the data&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;318&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Should I learn ES6 before learning ReactJS?&lt;/h3&gt; &lt;p&gt;No, you don’t have to learn es2015/es6 to learn react. But you may find many resources or React ecosystem uses ES6 extensively. Let&#39;s see some of the frequently used ES6 features,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Destructuring:&lt;/strong&gt; To get props and use them in a component &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// in es 5&#xA; var someData = this.props.someData&#xA; var dispatch = this.props.dispatch&#xA;&#xA;// in es6&#xA;const { someData, dispatch } = this.props&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Spread operator: Helps in passing props down into a component &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// in es 5&#xA;&amp;lt;SomeComponent someData={this.props.someData} dispatch={this.props.dispatch} /&amp;gt;&#xA;&#xA;// in es6&#xA;&amp;lt;SomeComponent {...this.props} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;   &lt;li&gt;Arrow functions: Makes compact syntax &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// es 5&#xA;var users = usersList.map(function (user) {&#xA; return &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;&#xA;})&#xA;// es 6&#xA;const users = usersList.map(user =&amp;gt; &amp;lt;li&amp;gt;{user.name}&amp;lt;/li&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;319&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is Concurrent Rendering?&lt;/h3&gt; &lt;p&gt;The Concurrent rendering makes React apps to be more responsive by rendering component trees without blocking the main UI thread. It allows React to interrupt a long-running render to handle a high-priority event. i.e, When you enabled concurrent Mode, React will keep an eye on other tasks that need to be done, and if there&#39;s something with a higher priority it will pause what it is currently rendering and let the other task finish first. You can enable this in two ways,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// 1. Part of an app by wrapping with ConcurrentMode&#xA;&amp;lt;React.unstable_ConcurrentMode&amp;gt;&#xA;  &amp;lt;Something /&amp;gt;&#xA;&amp;lt;/React.unstable_ConcurrentMode&amp;gt;&#xA;&#xA;// 2. Whole app using createRoot&#xA;ReactDOM.unstable_createRoot(domNode).render(&amp;lt;App /&amp;gt;);&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;320&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between async mode and concurrent mode?&lt;/h3&gt; Both refers the same thing. Previously concurrent Mode being referred to as &#34;Async Mode&#34; by React team. The name has been changed to highlight React’s ability to perform work on different priority levels. So it avoids the confusion from other approaches to Async Rendering.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;321&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;Can I use javascript urls in react16.9?&lt;/h3&gt; &lt;p&gt;Yes, you can use javascript: URLs but it will log a warning in the console. Because URLs starting with javascript: are dangerous by including unsanitized output in a tag like &lt;code&gt;&amp;lt;a href&amp;gt;&lt;/code&gt; and create a security hole.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const companyProfile = {&#xA;  website: &#34;javascript: alert(&#39;Your website is hacked&#39;)&#34;,&#xA;};&#xA;// It will log a warning&#xA;&amp;lt;a href={companyProfile.website}&amp;gt;More details&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Remember that the future versions will throw an error for javascript URLs.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;322&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the purpose of eslint plugin for hooks?&lt;/h3&gt; &lt;p&gt;The ESLint plugin enforces rules of Hooks to avoid bugs. It assumes that any function starting with ”use” and a capital letter right after it is a Hook. In particular, the rule enforces that,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Calls to Hooks are either inside a PascalCase function (assumed to be a component) or another useSomething function (assumed to be a custom Hook).&lt;/li&gt; &#xA;   &lt;li&gt;Hooks are called in the same order on every render.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;323&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between Imperative and Declarative in React?&lt;/h3&gt; &lt;p&gt;Imagine a simple UI component, such as a &#34;Like&#34; button. When you tap it, it turns blue if it was previously grey, and grey if it was previously blue.&lt;/p&gt; &lt;p&gt;The imperative way of doing this would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if( user.likes() ) {&#xA;    if( hasBlue() ) {&#xA;        removeBlue();&#xA;        addGrey();&#xA;    } else {&#xA;        removeGrey();&#xA;        addBlue();&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Basically, you have to check what is currently on the screen and handle all the changes necessary to redraw it with the current state, including undoing the changes from the previous state. You can imagine how complex this could be in a real-world scenario.&lt;/p&gt; &lt;p&gt;In contrast, the declarative approach would be:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;if( this.state.liked ) {&#xA;    return &amp;lt;blueLike /&amp;gt;;&#xA;} else {&#xA;    return &amp;lt;greyLike /&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Because the declarative approach separates concerns, this part of it only needs to handle how the UI should look in a sepecific state, and is therefore much simpler to understand.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;324&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the benefits of using typescript with reactjs?&lt;/h3&gt; &lt;p&gt;Below are some of the benefits of using typescript with Reactjs,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;It is possible to use latest JavaScript features&lt;/li&gt; &#xA;   &lt;li&gt;Use of interfaces for complex type definitions&lt;/li&gt; &#xA;   &lt;li&gt;IDEs such as VS Code was made for TypeScript&lt;/li&gt; &#xA;   &lt;li&gt;Avoid bugs with the ease of readability and Validation&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you make sure that user remains authenticated on page refresh while using Context API State Management?&lt;/h3&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;When a user logs in and reload, to persist the state generally we add the load user action in the useEffect hooks in the main App.js. While using Redux, loadUser action can be easily accessed.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {loadUser}  from &#39;../actions/auth&#39;;&#xA;store.dispatch(loadUser());&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;But while using &lt;strong&gt;Context API&lt;/strong&gt;, to access context in App.js, wrap the AuthState in index.js so that App.js can access the auth context. Now whenever the page reloads, no matter what route you are on, the user will be authenticated as &lt;strong&gt;loadUser&lt;/strong&gt; action will be triggered on each re-render.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;index.js&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#39;react&#39;;&#xA;import ReactDOM from &#39;react-dom&#39;;&#xA;import App from &#39;./App&#39;;&#xA;import AuthState from &#39;./context/auth/AuthState&#39;&#xA;&#xA;ReactDOM.render(&#xA;  &amp;lt;React.StrictMode&amp;gt;&#xA;    &amp;lt;AuthState&amp;gt;&#xA;      &amp;lt;App /&amp;gt;&#xA;    &amp;lt;/AuthState&amp;gt;&#xA;  &amp;lt;/React.StrictMode&amp;gt;,&#xA;  document.getElementById(&#39;root&#39;)&#xA;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;App.js&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;  const authContext = useContext(AuthContext);&#xA;&#xA;  const { loadUser } = authContext;&#xA;&#xA;  useEffect(() =&amp;gt; {&#xA;    loadUser();&#xA;  },[])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;loadUser&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;    const loadUser = async () =&amp;gt; {&#xA;        const token = sessionStorage.getItem(&#39;token&#39;);&#xA;&#xA;        if(!token){&#xA;            dispatch({&#xA;                type: ERROR&#xA;            })&#xA;        }&#xA;        setAuthToken(token);&#xA;&#xA;        try {&#xA;            const res = await axios(&#39;/api/auth&#39;); &#xA;&#xA;            dispatch({&#xA;                type: USER_LOADED,&#xA;                payload: res.data.data&#xA;            })&#xA;            &#xA;        } catch (err) {&#xA;           console.error(err); &#xA;        }&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;326&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are the benefits of new JSX transform?&lt;/h3&gt; &lt;p&gt;There are three major benefits of new JSX transform,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;It is possible to use JSX without importing React packages&lt;/li&gt; &#xA;   &lt;li&gt;The compiled output might improve the bundle size in a small amount&lt;/li&gt; &#xA;   &lt;li&gt;The future improvements provides the flexibility to reduce the number of concepts to learn React.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;327&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How does new JSX transform different from old transform?&lt;/h3&gt; &lt;p&gt;The new JSX transform doesn’t require React to be in scope. i.e, You don&#39;t need to import React package for simple scenarios.&lt;/p&gt; &lt;p&gt;Let&#39;s take an example to look at the main differences between the old and the new transform,&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Old Transform:&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#39;react&#39;;&#xA;&#xA;function App() {&#xA;  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Now JSX transform convert the above code into regular JavaScript as below,&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import React from &#39;react&#39;;&#xA;&#xA;function App() {&#xA;  return React.createElement(&#39;h1&#39;, null, &#39;Good morning!!&#39;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;New Transform:&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The new JSX transform doesn&#39;t require any React imports&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;function App() {&#xA;  return &amp;lt;h1&amp;gt;Good morning!!&amp;lt;/h1&amp;gt;;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Under the hood JSX transform compiles to below code&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import {jsx as _jsx} from &#39;react/jsx-runtime&#39;;&#xA;&#xA;function App() {&#xA;  return _jsx(&#39;h1&#39;, { children: &#39;Good morning!!&#39; });&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; You still need to import React to use Hooks.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;328&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;How do you get redux scaffolding using create-react-app?&lt;/h3&gt; &lt;p&gt;Redux team has provided official redux+js or redux+typescript templates for create-react-app project. The generated project setup includes,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;Redux Toolkit and React-Redux dependencies&lt;/li&gt; &#xA;   &lt;li&gt;Create and configure Redux store&lt;/li&gt; &#xA;   &lt;li&gt;React-Redux &lt;code&gt;&amp;lt;Provider&amp;gt;&lt;/code&gt; passing the store to React components&lt;/li&gt; &#xA;   &lt;li&gt;Small &#34;counter&#34; example to demo how to add redux logic and React-Redux hooks API to interact with the store from components&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;p&gt;The below commands need to be executed along with template option as below,&lt;/p&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Javascript template:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npx create-react-app my-app --template redux&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;  &lt;ol start=&#34;2&#34;&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Typescript template:&lt;/strong&gt;&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;npx create-react-app my-app --template redux-typescript&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;329&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What are React Server components?&lt;/h3&gt; &lt;p&gt;React Server Component is a way to write React component that gets rendered in the server-side with the purpose of improving React app performance. These components allow us to load components from the backend.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; React Server Components is still under development and not recommended for production yet.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;330&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is prop drilling?&lt;/h3&gt; Prop Drilling is the process by which you pass data from one component of the React Component tree to another by going through other components that do not need the data but only help in passing it around.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;331&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is state mutation and how to prevent it?&lt;/h3&gt; &lt;p&gt;&lt;code&gt;State mutation&lt;/code&gt; happens when you try to update the state of a component without actually using &lt;code&gt;setState&lt;/code&gt; function. This can happen when you are trying to do some computations using a state variable and unknowingly save the result in the same state variable. This is the main reason why it is advised to return new instances of state variables from the reducers by using Object.assign({}, ...) or spread syntax.&lt;/p&gt; &lt;p&gt;This can cause unknown issues in the UI as the value of the state variable got updated without telling React to check what all components were being affected from this update and it can cause UI bugs.&lt;/p&gt; &lt;p&gt;Ex:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;class A extends React.component {&#xA;  constructor(props) {&#xA;    super(props);&#xA;    this.state = {&#xA;      loading: false&#xA;    }&#xA; }&#xA;&#xA;componentDidMount() {&#xA;  let { loading } = this.state;&#xA;  loading = (() =&amp;gt; true)(); // Trying to perform an operation and directly saving in a state variable&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;How to prevent it:&lt;/strong&gt; Make sure your state variables are immutable by either enforcing immutability by using plugins like Immutable.js, always using &lt;code&gt;setState&lt;/code&gt; to make updates, and returning new instances in reducers when sending updated state values.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol start=&#34;332&#34;&gt; &#xA; &lt;li&gt; &lt;h3&gt;What is the difference between useState and useRef hook?&lt;/h3&gt; &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;useState causes components to re-render after state updates whereas useRef doesn’t cause a component to re-render when the value or state changes. Essentially, useRef is like a “box” that can hold a mutable value in its (.current) property.&lt;/li&gt; &#xA;   &lt;li&gt;useState allows us to update the state inside components. While useRef allows refrencing DOM elements.&lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sudheerj/reactjs-interview-questions/master/#table-of-contents&#34;&gt;⬆ Back to Top&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The questions provided in this repository are the summary of frequently asked questions across numerous companies. We cannot guarantee that these questions will actually be asked during your interview process, nor should you focus on memorizing all of them. The primary purpose is for you to get a sense of what some companies might ask — do not get discouraged if you don&#39;t know the answer to all of them ⁠— that is ok!&lt;/p&gt; &#xA;&lt;p&gt;Good luck with your interview 😊&lt;/p&gt; &#xA;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>cypress-io/cypress</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/cypress-io/cypress</id>
    <link href="https://github.com/cypress-io/cypress" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, easy and reliable testing for anything that runs in a browser.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.cypress.io&#34;&gt;&lt;img src=&#34;https://cloud.githubusercontent.com/assets/1268976/20607953/d7ae489c-b24a-11e6-9cc4-91c6c74c5e88.png&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://on.cypress.io&#34;&gt;Documentation&lt;/a&gt; | &lt;a href=&#34;https://on.cypress.io/changelog&#34;&gt;Changelog&lt;/a&gt; | &lt;a href=&#34;https://on.cypress.io/roadmap&#34;&gt;Roadmap&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; The web has evolved. Finally, testing has too. &lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Fast, easy and reliable testing for anything that runs in a browser. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Join us, we&#39;re &lt;a href=&#34;https://cypress.io/jobs&#34;&gt;hiring&lt;/a&gt;. &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/cypress&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/dm/cypress.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://gitter.im/cypress-io/cypress&#34;&gt; &lt;img src=&#34;https://img.shields.io/gitter/room/cypress-io/cypress.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://stackshare.io/cypress&#34;&gt; &lt;img src=&#34;https://img.stackshare.io/misc/follow-on-stackshare-badge.svg?sanitize=true&#34; alt=&#34;StackShare&#34;&gt; &lt;/a&gt;&lt;br&gt; &lt;/p&gt; &#xA;&lt;h2&gt;What is Cypress?&lt;/h2&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://player.vimeo.com/video/237527670&#34;&gt; &lt;img alt=&#34;Why Cypress Video&#34; src=&#34;https://user-images.githubusercontent.com/1271364/31739717-dbdff0ee-b41c-11e7-9b16-bfa1b6ac1814.png&#34; width=&#34;75%&#34; height=&#34;75%&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://badge.fury.io/js/cypress&#34;&gt;&lt;img src=&#34;https://badge.fury.io/js/cypress.svg?sanitize=true&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Install Cypress for Mac, Linux, or Windows, then &lt;a href=&#34;https://on.cypress.io/install&#34;&gt;get started&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install cypress --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn add cypress --dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/1271364/31740846-7bf607f0-b420-11e7-855f-41c996040d31.gif&#34; alt=&#34;installing-cli e1693232&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com/gh/cypress-io/cypress/tree/develop&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/cypress-io/cypress/tree/develop.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; - &lt;code&gt;develop&lt;/code&gt; branch&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com/gh/cypress-io/cypress/tree/master&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/cypress-io/cypress/tree/master.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; - &lt;code&gt;master&lt;/code&gt; branch&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress/develop/CONTRIBUTING.md&#34;&gt;Contributing Guideline&lt;/a&gt; which explains repo organization, linting, testing, and other steps.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cypress-io/cypress/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MIT-green.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project is licensed under the terms of the &lt;a href=&#34;https://raw.githubusercontent.com/cypress-io/cypress/develop/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Badges&lt;/h2&gt; &#xA;&lt;p&gt;Let the world know your project is using Cypress.io to test with this cool badge&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.cypress.io/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg?sanitize=true&#34; alt=&#34;Cypress.io&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;[![Cypress.io](https://img.shields.io/badge/tested%20with-Cypress-04C38E.svg)](https://www.cypress.io/)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>YMFE/yapi</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/YMFE/yapi</id>
    <link href="https://github.com/YMFE/yapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;YApi 是一个可本地部署的、打通前后端及QA的、可视化的接口管理平台&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;YApi 可视化接口管理平台&lt;/h2&gt; &#xA;&lt;p&gt;体验地址：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://yapi.smart-xwork.cn/&#34;&gt;http://yapi.smart-xwork.cn/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;文档：&lt;/p&gt; &#xA;&lt;p&gt;&lt;a target=&#34;_blank&#34; href=&#34;https://hellosean1025.github.io/yapi&#34;&gt;hellosean1025.github.io/yapi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;平台介绍&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/YMFE/yapi/master/yapi-base-flow.jpg&#34; alt=&#34;avatar&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;YApi 是&lt;strong&gt;高效&lt;/strong&gt;、&lt;strong&gt;易用&lt;/strong&gt;、&lt;strong&gt;功能强大&lt;/strong&gt;的 api 管理平台，旨在为开发、产品、测试人员提供更优雅的接口管理服务。可以帮助开发者轻松创建、发布、维护 API，YApi 还为用户提供了优秀的交互体验，开发人员只需利用平台提供的接口数据写入工具以及简单的点击操作就可以实现接口的管理。&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;QQ交流群&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;p&gt;644642474 &lt;strong&gt;主群可能已满&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;941802405 &lt;strong&gt;群2欢迎加入&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h3&gt;特性&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;基于 Json5 和 Mockjs 定义接口返回数据的结构和文档，效率提升多倍&lt;/li&gt; &#xA; &lt;li&gt;扁平化权限设计，即保证了大型企业级项目的管理，又保证了易用性&lt;/li&gt; &#xA; &lt;li&gt;类似 postman 的接口调试&lt;/li&gt; &#xA; &lt;li&gt;自动化测试, 支持对 Response 断言&lt;/li&gt; &#xA; &lt;li&gt;MockServer 除支持普通的随机 mock 外，还增加了 Mock 期望功能，根据设置的请求过滤规则，返回期望数据&lt;/li&gt; &#xA; &lt;li&gt;支持 postman, har, swagger 数据导入&lt;/li&gt; &#xA; &lt;li&gt;免费开源，内网部署，信息再也不怕泄露了&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;内网部署&lt;/h3&gt; &#xA;&lt;h4&gt;环境要求&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nodejs（7.6+)&lt;/li&gt; &#xA; &lt;li&gt;mongodb（2.6+）&lt;/li&gt; &#xA; &lt;li&gt;git&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;安装&lt;/h4&gt; &#xA;&lt;p&gt;使用我们提供的 yapi-cli 工具，部署 YApi 平台是非常容易的。执行 yapi server 启动可视化部署程序，输入相应的配置和点击开始部署，就能完成整个网站的部署。部署完成之后，可按照提示信息，执行 node/{网站路径/server/app.js} 启动服务器。在浏览器打开指定url, 点击登录输入您刚才设置的管理员邮箱，默认密码为 ymfe.org 登录系统（默认密码可在个人中心修改）。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install -g yapi-cli --registry https://registry.npm.taobao.org&#xA;yapi server &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;服务管理&lt;/h4&gt; &#xA;&lt;p&gt;利用pm2方便服务管理维护。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install pm2 -g  //安装pm2&#xA;cd  {项目目录}&#xA;pm2 start &#34;vendors/server/app.js&#34; --name yapi //pm2管理yapi服务&#xA;pm2 info yapi //查看服务信息&#xA;pm2 stop yapi //停止服务&#xA;pm2 restart yapi //重启服务&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;升级&lt;/h4&gt; &#xA;&lt;p&gt;升级项目版本是非常容易的，并且不会影响已有的项目数据，只会同步 vendors 目录下的源码文件。&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd  {项目目录}&#xA;yapi ls //查看版本号列表&#xA;yapi update //更新到最新版本&#xA;yapi update -v {Version} //更新到指定版本&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;教程&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5acc879f6fb9a028c42e8822&#34;&gt;使用 YApi 管理 API 文档，测试， mock&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5af500e251882567096140dd&#34;&gt;自动更新 Swagger 接口数据到 YApi 平台&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://juejin.im/post/5a388892f265da430e4f4681&#34;&gt;自动化测试&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/z66f7bRX8aAOppAtBIB7Uw&#34;&gt;GTest(基于YApi)接口研发效能提升10倍 实战&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;YApi 插件&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/YMFE/yapi-plugin-qsso&#34;&gt;yapi sso 登录插件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wsfe/yapi-plugin-cas&#34;&gt;yapi cas 登录插件&lt;/a&gt; By wsfe&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cyj0122/yapi-plugin-gitlab&#34;&gt;yapi gitlab集成插件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xwxsee2014/yapi-plugin-oauth2&#34;&gt;oauth2.0登录&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/wxxcarl/yapi-plugin-import-rap&#34;&gt;rap平台数据导入&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zgs225/yapi-plugin-dding&#34;&gt;dingding&lt;/a&gt; 钉钉机器人推送插件&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/inceptiongt/Yapi-plugin-export-docx-data&#34;&gt;export-docx-data&lt;/a&gt; 数据导出docx文档&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shouldnotappearcalm/yapi-plugin-interface-oauth2-token&#34;&gt;interface-oauth-token&lt;/a&gt; 定时自动获取鉴权token的插件&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/follow-my-heart/yapi-plugin-import-swagger-customize&#34;&gt;import-swagger-customize&lt;/a&gt; 导入指定swagger接口&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;代码生成&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fjc0k/yapi-to-typescript&#34;&gt;yapi-to-typescript：根据 YApi 的接口定义生成 TypeScript 的请求函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hellosean1025/yapi-gen-js-code&#34;&gt;yapi-gen-js-code: 根据 YApi 的接口定义生成 javascript 的请求函数&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CodeOcenS/SwiftJSONModeler&#34;&gt;SwiftJSONModeler:根据 YApi 的接口生成 Swift 模型代码&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;YApi docker部署（非官方）&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.jianshu.com/p/a97d2efb23c5&#34;&gt;使用 alpine 版 docker 镜像快速部署 yapi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Ryan-Miao/docker-yapi&#34;&gt;docker-yapi: 基于官方yapi-cli的docker-compose方案&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jinfeijie/yapi&#34;&gt;docker-compose一键部署yapi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fjc0k/docker-YApi&#34;&gt;docker-YApi: 更易用的 YApi 镜像&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MyHerux/daily-code/raw/master/Program/%E5%B7%A5%E5%85%B7%E7%AF%87/Yapi/%E4%BD%BF%E7%94%A8DockerCompose%E6%9E%84%E5%BB%BA%E9%83%A8%E7%BD%B2Yapi.md&#34;&gt;使用DockerCompose构建部署Yapi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/williamlsh/yapi-docker&#34;&gt;yapi-docker: dockerized yapi deployment all in one&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;YApi 一些工具&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Forgus/api-generator&#34;&gt;Api Generator&lt;/a&gt; 接口文档自动生成插件（零入侵）&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hellosean1025/http-mysql-server&#34;&gt;mysql服务http工具,可配合做自动化测试&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/diwand/YapiIdeaUploadPlugin&#34;&gt;idea 一键上传接口到yapi插件&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://easyyapi.com/&#34;&gt;idea 接口上传调试插件 easy-yapi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/shouldnotappearcalm/http-postgres-server&#34;&gt;执行 postgres sql 的服务&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/NoBugBoy/YDoc&#34;&gt;SpringBoot依赖自动生成YApi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jetplugins/yapix&#34;&gt;Yapi X 一键生成接口文档, 上传到yapi, rap2, eolinker等（IDEA插件）&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;YApi 的一些客户&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;去哪儿&lt;/li&gt; &#xA; &lt;li&gt;携程&lt;/li&gt; &#xA; &lt;li&gt;艺龙&lt;/li&gt; &#xA; &lt;li&gt;美团&lt;/li&gt; &#xA; &lt;li&gt;百度&lt;/li&gt; &#xA; &lt;li&gt;腾讯&lt;/li&gt; &#xA; &lt;li&gt;阿里巴巴&lt;/li&gt; &#xA; &lt;li&gt;京东&lt;/li&gt; &#xA; &lt;li&gt;今日头条&lt;/li&gt; &#xA; &lt;li&gt;唯品支付&lt;/li&gt; &#xA; &lt;li&gt;链家网&lt;/li&gt; &#xA; &lt;li&gt;快手&lt;/li&gt; &#xA; &lt;li&gt;便利蜂&lt;/li&gt; &#xA; &lt;li&gt;中商惠民&lt;/li&gt; &#xA; &lt;li&gt;新浪&lt;/li&gt; &#xA; &lt;li&gt;VIPKID&lt;/li&gt; &#xA; &lt;li&gt;马蜂窝&lt;/li&gt; &#xA; &lt;li&gt;伴鱼&lt;/li&gt; &#xA; &lt;li&gt;旷视科技&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hellosean1025&#34;&gt;hellosean1025&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gaoxiaomumu&#34;&gt;gaoxiaomumu&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/amnsss&#34;&gt;zwjamnsss&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dwb1994&#34;&gt;dwb1994&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fungezi&#34;&gt;fungezi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ariesly15&#34;&gt;ariesly15&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;License&lt;/h3&gt; &#xA;&lt;p&gt;Apache License 2.0&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>vercel/next.js</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/vercel/next.js</id>
    <link href="https://github.com/vercel/next.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The React Framework&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://nextjs.org&#34;&gt; &lt;img src=&#34;https://assets.vercel.com/image/upload/v1607554385/repositories/next-js/next-logo.png&#34; height=&#34;128&#34;&gt; &lt;/a&gt;&lt;/p&gt;&#xA;&lt;h1 align=&#34;center&#34;&gt;&lt;a href=&#34;https://nextjs.org&#34;&gt;Next.js&lt;/a&gt;&lt;/h1&gt;&#xA;&lt;a href=&#34;https://nextjs.org&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a aria-label=&#34;Vercel logo&#34; href=&#34;https://vercel.com&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/MADE%20BY%20Vercel-000000.svg?style=for-the-badge&amp;amp;logo=Vercel&amp;amp;labelColor=000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;NPM version&#34; href=&#34;https://www.npmjs.com/package/next&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/v/next.svg?style=for-the-badge&amp;amp;labelColor=000000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;License&#34; href=&#34;https://github.com/vercel/next.js/raw/canary/license.md&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/npm/l/next.svg?style=for-the-badge&amp;amp;labelColor=000000&#34;&gt; &lt;/a&gt; &lt;a aria-label=&#34;Join the community on GitHub&#34; href=&#34;https://github.com/vercel/next.js/discussions&#34;&gt; &lt;img alt=&#34;&#34; src=&#34;https://img.shields.io/badge/Join%20the%20community-blueviolet.svg?style=for-the-badge&amp;amp;logo=Next.js&amp;amp;labelColor=000000&amp;amp;logoWidth=20&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a aria-label=&#34;next.js learn&#34; href=&#34;https://nextjs.org/learn&#34;&gt;&lt;/a&gt;&lt;a href=&#34;https://nextjs.org/learn&#34;&gt;https://nextjs.org/learn&lt;/a&gt; to get started with Next.js.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;https://nextjs.org/docs&#34;&gt;https://nextjs.org/docs&lt;/a&gt; to view the full documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Who is using Next.js?&lt;/h2&gt; &#xA;&lt;p&gt;Next.js is used by the world&#39;s leading companies. Check out the &lt;a href=&#34;https://nextjs.org/showcase&#34;&gt;Next.js Showcase&lt;/a&gt; to learn more.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;p&gt;The Next.js community can be found on &lt;a href=&#34;https://github.com/vercel/next.js/discussions&#34;&gt;GitHub Discussions&lt;/a&gt;, where you can ask questions, voice ideas, and share your projects.&lt;/p&gt; &#xA;&lt;p&gt;To chat with other community members you can join the &lt;a href=&#34;https://nextjs.org/discord&#34;&gt;Next.js Discord&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;a href=&#34;https://github.com/vercel/next.js/raw/canary/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; applies to all Next.js community channels.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please see our &lt;a href=&#34;https://raw.githubusercontent.com/vercel/next.js/canary/contributing.md&#34;&gt;contributing.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Good First Issues&lt;/h3&gt; &#xA;&lt;p&gt;We have a list of &lt;a href=&#34;https://github.com/vercel/next.js/labels/good%20first%20issue&#34;&gt;good first issues&lt;/a&gt; that contain bugs which have a relatively limited scope. This is a great place to get started, gain experience, and get familiar with our contribution process.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Tim Neutkens (&lt;a href=&#34;https://twitter.com/timneutkens&#34;&gt;@timneutkens&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com/about/timneutkens&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Naoyuki Kanezawa (&lt;a href=&#34;https://twitter.com/nkzawa&#34;&gt;@nkzawa&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com/about/nkzawa&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Guillermo Rauch (&lt;a href=&#34;https://twitter.com/rauchg&#34;&gt;@rauchg&lt;/a&gt;) – &lt;a href=&#34;https://vercel.com/about/rauchg&#34;&gt;Vercel&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Arunoda Susiripala (&lt;a href=&#34;https://twitter.com/arunoda&#34;&gt;@arunoda&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Tony Kovanen (&lt;a href=&#34;https://twitter.com/tonykovanen&#34;&gt;@tonykovanen&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Dan Zajdband (&lt;a href=&#34;https://twitter.com/impronunciable&#34;&gt;@impronunciable&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>troyeguo/koodo-reader</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/troyeguo/koodo-reader</id>
    <link href="https://github.com/troyeguo/koodo-reader" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A modern ebook manager and reader with sync and backup capacities for Windows, macOS, Linux and Web&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;left&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/troyeguo/koodo-reader/raw/master/README_cn.md&#34;&gt;简体中文&lt;/a&gt; | English&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/07/30/ZKNMmz54Q3uqlrW.png&#34; width=&#34;96px&#34; height=&#34;96px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt; Koodo Reader &lt;/h1&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt; A cross-platform ebook reader &lt;/h3&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://koodo.960960.xyz/en&#34;&gt;Download&lt;/a&gt; | &lt;a href=&#34;https://reader.960960.xyz&#34;&gt;Preview&lt;/a&gt; | &lt;a href=&#34;https://troyeguo.notion.site/d1c19a132932465bae1d89dd963c92ea?v=ca8aa69cf25849c18c92b92ba868663b&#34;&gt;Roadmap&lt;/a&gt; | &lt;a href=&#34;https://troyeguo.notion.site/Koodo-Reader-Document-9c767af3d66c459db996bdd08a34c34b&#34;&gt;Document&lt;/a&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Preview&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/I37WPYFJcC1jltn.png&#34;&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/G7WvUQFTrEpSCKg.png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;Feature&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format support: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;EPUB (&lt;strong&gt;.epub&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Scanned document (&lt;strong&gt;.pdf&lt;/strong&gt;, &lt;strong&gt;.djvu&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;DRM-free Mobipocket (&lt;strong&gt;.mobi&lt;/strong&gt;) and Kindle (&lt;strong&gt;.azw3&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Plain text (&lt;strong&gt;.txt&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;FictionBook (&lt;strong&gt;.fb2&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Comic book archive (&lt;strong&gt;.cbr&lt;/strong&gt;, &lt;strong&gt;.cbz&lt;/strong&gt;, &lt;strong&gt;.cbt&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Rich text (&lt;strong&gt;.md&lt;/strong&gt;, &lt;strong&gt;.docx&lt;/strong&gt;, &lt;strong&gt;.rtf&lt;/strong&gt;)&lt;/li&gt; &#xA;   &lt;li&gt;Hyper Text (&lt;strong&gt;.html&lt;/strong&gt;, &lt;strong&gt;.xml&lt;/strong&gt;, &lt;strong&gt;.xhtml&lt;/strong&gt;, &lt;strong&gt;.htm&lt;/strong&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Platform support: &lt;strong&gt;Windows&lt;/strong&gt;, &lt;strong&gt;macOS&lt;/strong&gt;, &lt;strong&gt;Linux&lt;/strong&gt; and &lt;strong&gt;Web&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Save your data to &lt;strong&gt;Dropbox&lt;/strong&gt; or &lt;strong&gt;Webdav&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Customize the source folder and synchronize among multiple devices using OneDrive, iCloud, Dropbox, etc.&lt;/li&gt; &#xA; &lt;li&gt;Single-column, two-column, or continuous scrolling layouts&lt;/li&gt; &#xA; &lt;li&gt;Text-to-speech, translation, progress slider, touch screen support, batch import&lt;/li&gt; &#xA; &lt;li&gt;Add bookmarks, notes, highlights to your books&lt;/li&gt; &#xA; &lt;li&gt;Adjust font size, font family, line-spacing, paragraph spacing, background color, text color, margins, and brightness&lt;/li&gt; &#xA; &lt;li&gt;Night mode and theme color&lt;/li&gt; &#xA; &lt;li&gt;Text highlight, underline, boldness, italics and shadow&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Desktop Version: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stable Version (Recommended): &lt;a href=&#34;https://koodo.960960.xyz/en&#34;&gt;Download&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Developer Version: &lt;a href=&#34;https://github.com/troyeguo/koodo-reader/releases/latest&#34;&gt;Download&lt;/a&gt; ( With new feature and bug fix, but may induce some unknown bugs)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Web Version：&lt;a href=&#34;https://reader.960960.xyz&#34;&gt;Preview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install with Scoop:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;scoop bucket add dorado https://github.com/chawyehsu/dorado&#xA;scoop install dorado/koodo-reader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with Homebrew:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;brew install --cask koodo-reader&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Install with Docker:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker-compose up -d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;b&gt;List mode&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/JyNHfThMs184Um2.png&#34;&gt; &#xA; &lt;b&gt;Cover mode&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/76zkDEAobd4qsmR.png&#34;&gt; &#xA; &lt;b&gt;Reader menu&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/LeEN9gnOvFmfVWA.png&#34;&gt; &#xA; &lt;b&gt;Backup and restore&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/aRIAiYT2dGJQhC1.png&#34;&gt; &#xA; &lt;b&gt;Dark mode and theme color&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/08/ynqUNpX93xZefdw.png&#34;&gt; &#xA; &lt;b&gt;Note management&lt;/b&gt; &#xA; &lt;img src=&#34;https://i.loli.net/2021/08/09/sARQBoefvGklHwC.png&#34;&gt; &#xA;&lt;/div&gt;  &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;Make sure that you have installed yarn and git, node&#39;s version on your computer is larger than 14.0.0.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the repo&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/troyeguo/koodo-reader.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter desktop mode&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter web mode&lt;/p&gt; &lt;pre&gt;&lt;code&gt;yarn&#xA;yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Translation&lt;/h2&gt; &#xA;&lt;p&gt;Koodo Reader use POEditor to manage localization, Visit &lt;a href=&#34;https://poeditor.com/join/project?hash=fk4qbQTlsk&#34;&gt;here&lt;/a&gt; to edit current translation or add new language&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>axoletl/not-br</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/axoletl/not-br</id>
    <link href="https://github.com/axoletl/not-br" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Site source for Not BR (https://not-br.neocities.org/)&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Not Bionic Reading Site source for &lt;a href=&#34;https://not-br.neocities.org/&#34;&gt;https://not-br.neocities.org/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;I haven&#39;t taken any time to actually pack any of this neatly, but if this helps you make an extension or anything that&#39;d be sick.&lt;/p&gt; &#xA;&lt;p&gt;This is a pretty basic plain HTML/CSS/JS page. Most of the text processing happens in index.js/processText().&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Koenkk/zigbee2mqtt</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/Koenkk/zigbee2mqtt</id>
    <link href="https://github.com/Koenkk/zigbee2mqtt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Zigbee 🐝 to MQTT bridge 🌉, get rid of your proprietary Zigbee bridges 🔨&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://github.com/koenkk/zigbee2mqtt&#34;&gt; &lt;img width=&#34;150&#34; height=&#34;150&#34; src=&#34;https://raw.githubusercontent.com/Koenkk/zigbee2mqtt/master/images/logo.png&#34;&gt; &lt;/a&gt; &#xA; &lt;br&gt; &#xA; &lt;br&gt; &#xA; &lt;div style=&#34;display: flex;&#34;&gt; &#xA;  &lt;a href=&#34;https://github.com/Koenkk/zigbee2mqtt/actions?query=workflow%3ACI&#34;&gt; &lt;img src=&#34;https://github.com/koenkk/zigbee2mqtt/workflows/CI/badge.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/Koenkk/zigbee2mqtt/releases&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/release/koenkk/zigbee2mqtt.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://github.com/Koenkk/zigbee2mqtt/stargazers&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/stars/koenkk/zigbee2mqtt.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.paypal.me/koenkk&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-blue.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://discord.gg/dadfWYE&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/556563650429583360.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;http://zigbee2mqtt.discourse.group/&#34;&gt; &lt;img src=&#34;https://img.shields.io/discourse/https/zigbee2mqtt.discourse.group/status.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;  &lt;a&gt; &lt;img src=&#34;https://img.shields.io/badge/Coverage-100%25-brightgreen.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.codacy.com/manual/Koenkk/zigbee2mqtt?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=Koenkk/zigbee2mqtt&amp;amp;utm_campaign=Badge_Grade&#34;&gt; &lt;img src=&#34;https://api.codacy.com/project/badge/Grade/24f1e0fe39f04daa810e8a1416693d3f&#34;&gt; &lt;/a&gt; &#xA;  &lt;a href=&#34;https://www.npmjs.com/package/zigbee2mqtt&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/zigbee2mqtt&#34;&gt; &lt;/a&gt; &#xA; &lt;/div&gt; &#xA; &lt;h1&gt;Zigbee2MQTT 🌉 🐝&lt;/h1&gt; &#xA; &lt;p&gt; Allows you to use your Zigbee devices &lt;b&gt;without&lt;/b&gt; the vendor&#39;s bridge or gateway. &lt;/p&gt; &#xA; &lt;p&gt; It bridges events and allows you to control your Zigbee devices via MQTT. In this way you can integrate your Zigbee devices with whatever smart home infrastructure you are using. &lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.zigbee2mqtt.io/guide/getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://www.zigbee2mqtt.io/&#34;&gt;documentation&lt;/a&gt; provides you all the information needed to get up and running! Make sure you don&#39;t skip sections if this is your first visit, as there might be important details in there for you.&lt;/p&gt; &#xA;&lt;p&gt;If you aren&#39;t familiar with &lt;strong&gt;Zigbee&lt;/strong&gt; terminology make sure you &lt;a href=&#34;https://www.zigbee2mqtt.io/advanced/zigbee/01_zigbee_network.html&#34;&gt;read this&lt;/a&gt; to help you out.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://www.zigbee2mqtt.io/guide/usage/integrations.html&#34;&gt;Integrations&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Zigbee2MQTT integrates well with (almost) every home automation solution because it uses MQTT. However the following integrations are worth mentioning:&lt;/p&gt; &#xA;&lt;img align=&#34;left&#34; height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://user-images.githubusercontent.com/7738048/40914297-49e6e560-6800-11e8-8904-36cce896e5a8.png&#34;&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.home-assistant.io/&#34;&gt;Home Assistant&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.home-assistant.io/hassio/&#34;&gt;Home Assistant&lt;/a&gt;: Using &lt;a href=&#34;https://github.com/zigbee2mqtt/hassio-zigbee2mqtt&#34;&gt;the official addon&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Generic install or Hassbian: Using instructions &lt;a href=&#34;https://www.zigbee2mqtt.io/guide/usage/integrations/home_assistant.html&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;img align=&#34;left&#34; height=&#34;100px&#34; width=&#34;100px&#34; src=&#34;https://user-images.githubusercontent.com/2734836/47615848-b8dd8700-dabd-11e8-9d77-175002dd8987.png&#34;&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://www.domoticz.com/&#34;&gt;Domoticz&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integration implemented in &lt;a href=&#34;https://github.com/stas-demydiuk/domoticz-zigbee2mqtt-plugin&#34;&gt;domoticz-zigbee2mqtt-plugin&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Koenkk/zigbee2mqtt/master/images/architecture.png&#34; alt=&#34;Architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Internal Architecture&lt;/h3&gt; &#xA;&lt;p&gt;Zigbee2MQTT is made up of three modules, each developed in its own Github project. Starting from the hardware (adapter) and moving up; &lt;a href=&#34;https://github.com/koenkk/zigbee-herdsman&#34;&gt;zigbee-herdsman&lt;/a&gt; connects to your Zigbee adapter and makes an API available to the higher levels of the stack. For e.g. Texas Instruments hardware, zigbee-herdsman uses the &lt;a href=&#34;https://github.com/koenkk/zigbee-herdsman/raw/master/docs/Z-Stack%20Monitor%20and%20Test%20API.pdf&#34;&gt;TI zStack monitoring and test API&lt;/a&gt; to communicate with the adapter. Zigbee-herdsman handles the core Zigbee communication. The module &lt;a href=&#34;https://github.com/koenkk/zigbee-herdsman-converters&#34;&gt;zigbee-herdsman-converters&lt;/a&gt; handles the mapping from individual device models to the Zigbee clusters they support. &lt;a href=&#34;https://github.com/Koenkk/zigbee-herdsman/raw/master/docs/07-5123-08-Zigbee-Cluster-Library.pdf&#34;&gt;Zigbee clusters&lt;/a&gt; are the layers of the Zigbee protocol on top of the base protocol that define things like how lights, sensors and switches talk to each other over the Zigbee network. Finally, the Zigbee2MQTT module drives zigbee-herdsman and maps the zigbee messages to MQTT messages. Zigbee2MQTT also keeps track of the state of the system. It uses a &lt;code&gt;database.db&lt;/code&gt; file to store this state; a text file with a JSON database of connected devices and their capabilities. Zigbee2MQTT provides a &lt;a href=&#34;https://github.com/nurikk/zigbee2mqtt-frontend&#34;&gt;web-based interface&lt;/a&gt; that allows monitoring and configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Developing&lt;/h3&gt; &#xA;&lt;p&gt;Zigbee2MQTT uses TypeScript (partially for now). Therefore after making changes to files in the &lt;code&gt;lib/&lt;/code&gt; directory you need to recompile Zigbee2MQTT. This can be done by executing &lt;code&gt;npm run build&lt;/code&gt;. For faster development instead of running &lt;code&gt;npm run build&lt;/code&gt; you can run &lt;code&gt;npm run build-watch&lt;/code&gt; in another terminal session, this will recompile as you change files.&lt;/p&gt; &#xA;&lt;h2&gt;Supported devices&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://www.zigbee2mqtt.io/supported-devices&#34;&gt;Supported devices&lt;/a&gt; to check whether your device is supported. There is quite an extensive list, including devices from vendors like Xiaomi, Ikea, Philips, OSRAM and more.&lt;/p&gt; &#xA;&lt;p&gt;If it&#39;s not listed in &lt;a href=&#34;https://www.zigbee2mqtt.io/supported-devices&#34;&gt;Supported devices&lt;/a&gt;, support can be added (fairly) easily, see &lt;a href=&#34;https://www.zigbee2mqtt.io/advanced/support-new-devices/01_support_new_devices.html&#34;&gt;How to support new devices&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support &amp;amp; help&lt;/h2&gt; &#xA;&lt;p&gt;If you need assistance you can check &lt;a href=&#34;https://github.com/Koenkk/zigbee2mqtt/issues&#34;&gt;opened issues&lt;/a&gt;. Feel free to help with Pull Requests when you were able to fix things or add new devices or just share the love on social media.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mrdoob/three.js</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/mrdoob/three.js</id>
    <link href="https://github.com/mrdoob/three.js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JavaScript 3D Library.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;three.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/three&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/three&#34; alt=&#34;NPM Package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://bundlephobia.com/result?p=three&#34;&gt;&lt;img src=&#34;https://badgen.net/bundlephobia/minzip/three&#34; alt=&#34;Build Size&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmtrends.com/three&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dw/three&#34; alt=&#34;NPM Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepscan.io/dashboard#view=project&amp;amp;tid=16600&amp;amp;pid=19901&amp;amp;bid=525701&#34;&gt;&lt;img src=&#34;https://deepscan.io/api/teams/16600/projects/19901/branches/525701/badge/grade.svg?sanitize=true&#34; alt=&#34;DeepScan&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/56GBJwAnUS&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/685241246557667386&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;JavaScript 3D library&lt;/h4&gt; &#xA;&lt;p&gt;The aim of the project is to create an easy to use, lightweight, cross-browser, general purpose 3D library. The current builds only include a WebGL renderer but WebGPU (experimental), SVG and CSS3D renderers are also available in the examples.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://threejs.org/examples/&#34;&gt;Examples&lt;/a&gt; — &lt;a href=&#34;https://threejs.org/docs/&#34;&gt;Documentation&lt;/a&gt; — &lt;a href=&#34;https://github.com/mrdoob/three.js/wiki&#34;&gt;Wiki&lt;/a&gt; — &lt;a href=&#34;https://github.com/mrdoob/three.js/wiki/Migration-Guide&#34;&gt;Migrating&lt;/a&gt; — &lt;a href=&#34;https://stackoverflow.com/questions/tagged/three.js&#34;&gt;Questions&lt;/a&gt; — &lt;a href=&#34;https://discourse.threejs.org/&#34;&gt;Forum&lt;/a&gt; — &lt;a href=&#34;https://join.slack.com/t/threejs/shared_invite/zt-rnuegz5e-FQpc6YboDVW~5idlp7GfDw&#34;&gt;Slack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;p&gt;This code creates a scene, a camera, and a geometric cube, and it adds the cube to the scene. It then creates a &lt;code&gt;WebGL&lt;/code&gt; renderer for the scene and camera, and it adds that viewport to the &lt;code&gt;document.body&lt;/code&gt; element. Finally, it animates the cube within the scene for the camera.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;import * as THREE from &#39;three&#39;;&#xA;&#xA;// init&#xA;&#xA;const camera = new THREE.PerspectiveCamera( 70, window.innerWidth / window.innerHeight, 0.01, 10 );&#xA;camera.position.z = 1;&#xA;&#xA;const scene = new THREE.Scene();&#xA;&#xA;const geometry = new THREE.BoxGeometry( 0.2, 0.2, 0.2 );&#xA;const material = new THREE.MeshNormalMaterial();&#xA;&#xA;const mesh = new THREE.Mesh( geometry, material );&#xA;scene.add( mesh );&#xA;&#xA;const renderer = new THREE.WebGLRenderer( { antialias: true } );&#xA;renderer.setSize( window.innerWidth, window.innerHeight );&#xA;renderer.setAnimationLoop( animation );&#xA;document.body.appendChild( renderer.domElement );&#xA;&#xA;// animation&#xA;&#xA;function animation( time ) {&#xA;&#xA;&#x9;mesh.rotation.x = time / 2000;&#xA;&#x9;mesh.rotation.y = time / 1000;&#xA;&#xA;&#x9;renderer.render( scene, camera );&#xA;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If everything went well, you should see &lt;a href=&#34;https://jsfiddle.net/7u84j6kp/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Cloning this repository&lt;/h3&gt; &#xA;&lt;p&gt;Cloning the repo with all its history results in a ~2 GB download. If you don&#39;t need the whole history you can use the &lt;code&gt;depth&lt;/code&gt; parameter to significantly reduce download size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone --depth=1 https://github.com/mrdoob/three.js.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Change log&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/mrdoob/three.js/releases&#34;&gt;Releases&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>RobinLinus/snapdrop</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/RobinLinus/snapdrop</id>
    <link href="https://github.com/RobinLinus/snapdrop" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Progressive Web App for local file sharing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Snapdrop&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://snapdrop.net&#34;&gt;Snapdrop&lt;/a&gt;: local file sharing in your browser. Inspired by Apple&#39;s Airdrop.&lt;/p&gt; &#xA;&lt;h4&gt;Snapdrop is built with the following awesome technologies:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vanilla HTML5 / ES6 / CSS3 frontend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://webrtc.org/&#34;&gt;WebRTC&lt;/a&gt; / &lt;a href=&#34;http://www.websocket.org/&#34;&gt;WebSockets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/&#34;&gt;NodeJS&lt;/a&gt; backend&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wikipedia.org/wiki/Progressive_Web_App&#34;&gt;Progressive Web App&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Have any questions? Read our &lt;a href=&#34;https://raw.githubusercontent.com/RobinLinus/snapdrop/master/docs/faq.md&#34;&gt;FAQ&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can &lt;a href=&#34;https://raw.githubusercontent.com/RobinLinus/snapdrop/master/docs/local-dev.md&#34;&gt;host your own instance with Docker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Support the Snapdrop Community&lt;/h2&gt; &#xA;&lt;p&gt;Snapdrop is free. Still, we have to pay for the server. If you want to contribute, please use PayPal:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;amp;hosted_button_id=FTP9DXUR7LA7Q&amp;amp;source=url&#34;&gt;&lt;img src=&#34;https://www.paypalobjects.com/en_US/i/btn/btn_donateCC_LG.gif&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;or Bitcoin:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://coins.github.io/thx/#1K9zQ8f4iTyhKyHWmiDKt21cYX2QSDckWB?label=Snapdrop&amp;amp;message=Thanks!%20Your%20contribution%20helps%20to%20keep%20Snapdrop%20free%20for%20everybody!&#34;&gt;&lt;img src=&#34;https://coins.github.io/thx/logo-color-large-pill-320px.png&#34; alt=&#34;CoinThx&#34; width=&#34;200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can become a &lt;a href=&#34;https://github.com/sponsors/RobinLinus&#34;&gt;Github Sponsor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Thanks a lot for supporting free and open software!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ZigZagExchange/market-maker</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/ZigZagExchange/market-maker</id>
    <link href="https://github.com/ZigZagExchange/market-maker" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Zigzag Market Maker&lt;/h1&gt; &#xA;&lt;p&gt;This is the reference market maker for Zigzag zksync markets. It works on both Rinkeby and Mainnet.&lt;/p&gt; &#xA;&lt;p&gt;This market maker uses existing price feeds to set bids and asks for a market. For now, in order to provide liquidity for a market, there must be an existing market with &lt;strong&gt;greater&lt;/strong&gt; liquidity listed on Cryptowatch, via either Uniswap or some other centralized exchange. It is crucial that the oracle market have more liquidity than the Zigzag one so that you are not prone to oracle attacks.&lt;/p&gt; &#xA;&lt;p&gt;Soon we will add the ability to run standalone markets and this will not be an issue.&lt;/p&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Activated zkSync account&lt;/li&gt; &#xA; &lt;li&gt;Ethereum private key of that account&lt;/li&gt; &#xA; &lt;li&gt;Funds in that account corresponding to the pairs you want to market make&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cryptowat.ch/account/api-access&#34;&gt;Cryptowatch API key&lt;/a&gt; (free for limited time)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download/&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Node.js 16 works on macOS, Windows and Linux (17 seems not)&lt;/li&gt; &#xA; &lt;li&gt;Optional: VPS when you have high ping running the bot&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Setup&lt;/h2&gt; &#xA;&lt;p&gt;Copy the &lt;code&gt;config.json.EXAMPLE&lt;/code&gt; file to &lt;code&gt;config.json&lt;/code&gt; to get started.&lt;/p&gt; &#xA;&lt;p&gt;Set your &lt;code&gt;eth_privkey&lt;/code&gt; to be able to relay transactions. The ETH address with that private key should be loaded up with adequate funds for market making.&lt;/p&gt; &#xA;&lt;p&gt;Currently zkSync needs around 5 seconds to process a single swap and generate the receipt. So there is a upper limit of 12 swaps per wallet per minute. To circumvent this, there is also the option to use the &lt;code&gt;eth_privkeys&lt;/code&gt; array. Here you can add any number of private keys. Each should be loaded up with adequate funds for market making. The founds will be handled separately, therefor each additional wallet has the opportunity to process (at least) 12 more swaps per minute.&lt;/p&gt; &#xA;&lt;p&gt;To run the marketmaker:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;node marketmaker.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;h4&gt;Fee Token&lt;/h4&gt; &#xA;&lt;p&gt;With the defualt setting the bot will pay the zkSync fee wiht the same token as the user (buy currency for the bot). You can chose to override that by a fixed fee token. Check if your tokens is available to pay fees on zkSync &lt;a href=&#34;https://zkscan.io/explorer/tokens&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;    &#34;cryptowatchApiKey&#34;: &#34;aaaaxxx&#34;,&#xA;    &#34;ethPrivKeys&#34;: [&#xA;        &#34;&#34;,&#xA;        &#34;&#34;&#xA;    ],    &#xA;    &#34;zigzagChainId&#34;: 1,&#xA;    &#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;,&#xA;    &#34;feeToken&#34;: &#34;ETH&#34;, &amp;lt;- add this line if you eg. want to pay the fees in Ethereum &#xA;    &#34;pairs&#34;: {&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Mainnet zkSync&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;zigzagChainId&#34;: 1&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Rinkeby zkSync&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&#34;zigzagWsUrl&#34;: &#34;wss://secret-thicket-93345.herokuapp.com&#34;&lt;/li&gt; &#xA; &lt;li&gt;&#34;zigzagChainId&#34;: 1000&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can add, remove, and configure pair settings in the &lt;code&gt;pairs&lt;/code&gt; section. A pair setting looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;initPrice&#34;: null,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A market can be set inactive by flipping the active switch to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;side&lt;/code&gt; setting can be toggled for single-sided liquidity. By default, the side setting is set to &lt;code&gt;d&lt;/code&gt;, which stands for double-sided liquidity. To toggle single-sided liquidity, the value can be set to &lt;code&gt;b&lt;/code&gt; or &lt;code&gt;s&lt;/code&gt; for buy-side only or sell-side only.&lt;/p&gt; &#xA;&lt;p&gt;The slippage rate is the rate at which the spread increases as the base unit increases. For the example above, the spread goes up by 1e-5 for every 1 ETH in size added to an order. That&#39;s the equivalent of 0.1 bps / ETH in slippage.&lt;/p&gt; &#xA;&lt;p&gt;Orders coming in below the &lt;code&gt;minSpread&lt;/code&gt; from the price feed will not be filled. The spread is calculated as a decimal value. 0.01 is 1%, and 0.0002 is 2 basis points (bps).&lt;/p&gt; &#xA;&lt;h4&gt;Price Feed&lt;/h4&gt; &#xA;&lt;p&gt;There are 4 modes available with a 5th on the way.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cryptowatch&lt;/code&gt;: Follows an external price oracle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;chainlink&lt;/code&gt; : Follows an external price oracle. Chainlink is WEB3 and might be slower then cryptowatch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;constant&lt;/code&gt;: Sets an fixed price and market makes around that price. Can be combined with single-sided liquidity to simulate limit orders.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;uniswapV3&lt;/code&gt;: Reads prices on-chain from a specified uniswapV3 pool&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;independent&lt;/code&gt;: Under development. The price is set independent of a price feed.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Make sure your price feed is close to the price you see on zigzag. &lt;strong&gt;Otherwise, your mm can lose money!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;For all modes the &lt;code&gt;slippageRate&lt;/code&gt;, &lt;code&gt;maxSize&lt;/code&gt;, &lt;code&gt;minSize&lt;/code&gt;, &lt;code&gt;minSpread&lt;/code&gt;, and &lt;code&gt;active&lt;/code&gt; settings are mandatory.&lt;/p&gt; &#xA;&lt;p&gt;The primary price feed is the price feed used to determine the bids and asks of the market maker. The secondary price feed is used to validate the first price feed and make sure the market isn&#39;t returning bad data. If the primary and secondary price feeds vary by more than 3%, the market maker will not fill orders.&lt;/p&gt; &#xA;&lt;h6&gt;Cryptowatch&lt;/h6&gt; &#xA;&lt;p&gt;You need a Cryptowatch API key to use the market maker. Once you obtain one, you can set the &lt;code&gt;cryptowatchApiKey&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;. And set it to your public key.&lt;/p&gt; &#xA;&lt;p&gt;You can use &lt;a href=&#34;https://api.cryptowat.ch/markets&#34;&gt;this link&lt;/a&gt; to download a JSON with all available market endpoints. Add those to you pair config as &#34;cryptowatch:&#xA; &lt;id&gt;&#xA;  &#34;.&#xA; &lt;/id&gt;&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h6&gt;Chainlink&lt;/h6&gt; &#xA;&lt;p&gt;With chainlink you have access to price oracles via blockchain. The requests are read-calls to a smart contract. The public ethers provider might be too slow for a higher number of pairs or at times of high demand. Therefore, it might be needed to have access to an Infura account (100000 Requests/Day for free). You can get an endpoint for your market maker (like &lt;a href=&#34;https://mainnet.infura.io/v3/&#34;&gt;https://mainnet.infura.io/v3/&lt;/a&gt;...), You can add this with the &lt;code&gt;infuraUrl&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#xA;&#34;infuraUrl&#34;: &#34;https://mainnet.infura.io/v3/xxxxxxxx&#34;,&#xA;&#34;pairs&#34;: {&#xA;  &#34;ETH-USDC&#34;: {&#xA;      &#34;zigzagChainId&#34;: 1,&#xA;      &#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;,&#xA;      ....&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can get the available market contracts &lt;a href=&#34;https://docs.chain.link/docs/ethereum-addresses/&#34;&gt;here.&lt;/a&gt;Add those to you pair config as &#34;chainlink:&lt;/p&gt;&#xA;&lt;address&gt;&#34;, like this:&lt;p&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;chainlink:0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419&#34;,&#xA;    &#34;priceFeedSecondary&#34;: null,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;UniswapV3&lt;/h6&gt; &lt;p&gt;With uniswapV3 you have access to price feed&#39;s via blockchain. The requests are read-calls to a smart contract. The public ethers provider might be too slow for a higher number of pairs or at times of high demand. Therefore, it might be needed to have access to an Infura account (100000 Requests/Day for free). You can get an endpoint for your market maker (like &lt;a href=&#34;https://mainnet.infura.io/v3/&#34;&gt;https://mainnet.infura.io/v3/&lt;/a&gt;...), You can add this with the &lt;code&gt;infuraUrl&lt;/code&gt; field in &lt;code&gt;config.json&lt;/code&gt;, like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;infuraUrl&#34;: &#34;https://mainnet.infura.io/v3/xxxxxxxx&#34;,&#xA;&#34;pairs&#34;: {&#xA;  &#34;ETH-USDC&#34;: {&#xA;      &#34;zigzagChainId&#34;: 1,&#xA;      &#34;zigzagWsUrl&#34;: &#34;wss://zigzag-exchange.herokuapp.com&#34;,&#xA;      ....&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;You can get the available market contracts &lt;a href=&#34;https://info.uniswap.org&#34;&gt;here.&lt;/a&gt; Select a token and then a pool matching the pair you plan to market make. Make sure base and quote tokens match (USDC-ETH don&#39;t work for ETH-USDC). After selecting a pool, you can see the adress in the browser URL. Add that to your pair config as &#34;uniswapv3:&lt;/p&gt;&lt;address&gt;&#34;, like this:&lt;p&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;uniswapv3:0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419&#34;,&#xA;    &#34;priceFeedSecondary&#34;: null,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;Constant&lt;/h6&gt; &lt;p&gt;With constant mode, you can set a fixed price to market make. The bot will not change that price. Any secondary price feed will be ignored, if used as priceFeedPrimary. Also good as a &lt;code&gt;priceFeedSecondary&lt;/code&gt; on stablecoins.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;DAI-USDC&#34;: {&#xA;    &#34;side&#34;: &#34;d&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;constant:1&#34;,&#xA;    &#34;priceFeedSecondary&#34;: null,&#xA;    ....&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Pair Options&lt;/h2&gt; &lt;p&gt;These pair options can be set for each pair individual. You can even use more then on option per pair (though they might cancel each other out).&lt;/p&gt; &lt;h6&gt;delayAfterFill&lt;/h6&gt; &lt;p&gt;The market maker will stop market making on the pair, after successfully filling an order. This can be used to wait out bigger price moves. With the second parameter, you can set the minimum trade size (&lt;strong&gt;in base quantity&lt;/strong&gt;) to activate the option. This parameter is optional and can be omitted (like: &lt;code&gt;[60]&lt;/code&gt;)&lt;/p&gt; &lt;p&gt;Example, here a delay of &lt;strong&gt;60 seconds&lt;/strong&gt; is used:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;delayAfterFill&#34;: [60, 0.5]        &amp;lt;- This would pause the pair for 60 sec after a fill.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;increaseSpreadAfterFill&lt;/h6&gt; &lt;p&gt;The market maker increases the spread by the set amount. After the time (&lt;strong&gt;in seconds&lt;/strong&gt;) the spread will fall back to the old value. This can happen multiple times in case the mm fills again in the set time (e.g. 0.1 -&amp;gt; 0.2 -&amp;gt; 0.3). With the third parameter, you can set the minimum trade size (&lt;strong&gt;in base quantity&lt;/strong&gt;) to activate the option. This parameter is optional and can be omitted. Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;increaseSpreadAfterFill&#34;: [0.1, 300, 0.5]        &amp;lt;- This would increase the minSpread by 0.1 per fill for 300 sec each.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;changeSizeAfterFill&lt;/h6&gt; &lt;p&gt;The market maker increases the size (&lt;strong&gt;in base token&lt;/strong&gt;) by the set amount. After the time (&lt;strong&gt;in seconds&lt;/strong&gt;) the size will fall back to the old value. This can happen multiple times in case the mm fills again in the set time (e.g. 0.1 -&amp;gt; 0.2 -&amp;gt; 0.3). You can set a value below 0 to reduce size after fill (like: [-0.1, 300]). With the third parameter, you can set the minimum trade size (&lt;strong&gt;in base quantity&lt;/strong&gt;) to activate the option. This parameter is optional and can be omitted. Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;changeSizeAfterFill&#34;: [0.05, 300, 0.5]        &amp;lt;- This would increase the maxSize by 0.05 ETH (base token) per fill for 300 sec each.&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h6&gt;numOrdersIndicated&lt;/h6&gt; &lt;p&gt;On the UI, when indicating liquidity, by default will indicate the liquidity in 10 separate orders spaced evenly apart. To change the number of orders indicated, you can use the &lt;code&gt;numOrdersIndicated&lt;/code&gt; setting.&lt;/p&gt; &lt;p&gt;Example:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true,&#xA;    &#34;numOrdersIndicated&#34;: 5&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Pair Setting Examples&lt;/h2&gt; &lt;p&gt;Stable-Stable constant price:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;DAI-USDC&#34;: {&#xA;    &#34;priceFeedPrimary&#34;: &#34;constant:1&#34;,&#xA;    &#34;slippageRate&#34;: 1e-9,&#xA;    &#34;maxSize&#34;: 100000,&#xA;    &#34;minSize&#34;: 1,&#xA;    &#34;minSpread&#34;: 0.0003,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Single-sided accumulation:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;ETH-USDC&#34;: {&#xA;    &#34;mode&#34;: &#34;pricefeed&#34;,&#xA;    &#34;side&#34;: &#34;b&#34;,&#xA;    &#34;priceFeedPrimary&#34;: &#34;cryptowatch:6631&#34;,&#xA;    &#34;priceFeedSecondary&#34;: &#34;cryptowatch:588&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 100,&#xA;    &#34;minSize&#34;: 0.0003,&#xA;    &#34;minSpread&#34;: 0.0005,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Sell the rip:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;&#34;DYDX-USDC&#34;: {&#xA;    &#34;priceFeedPrimary&#34;: &#34;constant:20&#34;,&#xA;    &#34;side&#34;: &#34;s&#34;,&#xA;    &#34;slippageRate&#34;: 1e-5,&#xA;    &#34;maxSize&#34;: 1000,&#xA;    &#34;minSize&#34;: 0.5,&#xA;    &#34;minSpread&#34;: 0,&#xA;    &#34;active&#34;: true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;h2&gt;Configuration Via Environment Variables&lt;/h2&gt; &lt;p&gt;If your hosting service requires you to pass in configs via environment variables you can compress &lt;code&gt;config.json&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cat config.json | tr -d &#39; &#39; | tr -d &#39;\n&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;and set it to the value of the &lt;code&gt;MM_CONFIG&lt;/code&gt; environment variable to override the config file.&lt;/p&gt; &lt;p&gt;You can also override the private key in the config file with the &lt;code&gt;ETH_PRIVKEY&lt;/code&gt; environment variable, and the cryptowatch API key with the &lt;code&gt;CRYPTOWATCH_API_KEY&lt;/code&gt; environment variable, and the Infura provider url with &lt;code&gt;INFURA_URL&lt;/code&gt;&lt;/p&gt; &lt;/address&gt;&lt;/address&gt;</summary>
  </entry>
  <entry>
    <title>strapi/strapi</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/strapi/strapi</id>
    <link href="https://github.com/strapi/strapi" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🚀 Open source Node.js Headless CMS to easily build customisable APIs&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://strapi.io/#gh-light-mode-only&#34;&gt; &lt;img src=&#34;https://strapi.io/assets/strapi-logo-dark.svg?sanitize=true&#34; width=&#34;318px&#34; alt=&#34;Strapi logo&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://strapi.io/#gh-dark-mode-only&#34;&gt; &lt;img src=&#34;https://strapi.io/assets/strapi-logo-light.svg?sanitize=true&#34; width=&#34;318px&#34; alt=&#34;Strapi logo&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3 align=&#34;center&#34;&gt;API creation made simple, secure and fast.&lt;/h3&gt; &#xA;&lt;p align=&#34;center&#34;&gt;The most advanced open-source headless CMS to build powerful APIs with no effort.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt;&lt;a href=&#34;https://strapi.io/demo&#34;&gt;Try live demo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.org/package/@strapi/strapi&#34;&gt; &lt;img src=&#34;https://img.shields.io/npm/v/@strapi/strapi/latest.svg?sanitize=true&#34; alt=&#34;NPM Version&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/strapi/strapi/actions/workflows/tests.yml&#34;&gt; &lt;img src=&#34;https://github.com/strapi/strapi/actions/workflows/tests.yml/badge.svg?branch=master&#34; alt=&#34;Tests&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://discord.strapi.io&#34;&gt; &lt;img src=&#34;https://img.shields.io/discord/811989166782021633?label=Discord&#34; alt=&#34;Strapi on Discord&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://strapi.io&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/strapi/strapi/0bcebf77b37182fe021cb59cc19be8f5db4a18ac/public/assets/administration_panel.png&#34; alt=&#34;Administration panel&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Strapi is a free and open-source headless CMS delivering your content anywhere you need.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Keep control over your data&lt;/strong&gt;. With Strapi, you know where your data is stored, and you keep full control at all times.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Self-hosted&lt;/strong&gt;. You can host and scale Strapi projects the way you want. You can choose any hosting platform you want: AWS, Render, Netlify, Heroku, a VPS, or a dedicated server. You can scale as you grow, 100% independent.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Database agnostic&lt;/strong&gt;. Strapi works with SQL databases. You can choose the database you prefer: PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Customizable&lt;/strong&gt;. You can quickly build your logic by fully customizing APIs, routes, or plugins to fit your needs perfectly.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html&#34; target=&#34;_blank&#34;&gt;Read the Getting Started tutorial&lt;/a&gt; or follow the steps below:&lt;/p&gt; &#xA;&lt;h3&gt;⏳ Installation&lt;/h3&gt; &#xA;&lt;p&gt;Install Strapi with this &lt;strong&gt;Quickstart&lt;/strong&gt; command to create a Strapi project instantly:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Use &lt;strong&gt;yarn&lt;/strong&gt; to install the Strapi project (recommended). &lt;a href=&#34;https://yarnpkg.com/lang/en/docs/install/&#34;&gt;Install yarn with these docs&lt;/a&gt;.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;yarn create strapi-app my-project --quickstart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;or&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Use npm/npx to install the Strapi project.)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx create-strapi-app my-project --quickstart&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command generates a brand new project with the default features (authentication, permissions, content management, content type builder &amp;amp; file upload). The &lt;strong&gt;Quickstart&lt;/strong&gt; command installs Strapi using a &lt;strong&gt;SQLite&lt;/strong&gt; database which is used for prototyping in development.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy 🎉&lt;/p&gt; &#xA;&lt;h3&gt;🖐 Requirements&lt;/h3&gt; &#xA;&lt;p&gt;Complete installation requirements can be found in the documentation under &lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/setup-deployment-guides/deployment.html&#34;&gt;Installation Requirements&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Supported operating systems&lt;/strong&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ubuntu LTS/Debian 9.x&lt;/li&gt; &#xA; &lt;li&gt;CentOS/RHEL 8&lt;/li&gt; &#xA; &lt;li&gt;macOS Mojave&lt;/li&gt; &#xA; &lt;li&gt;Windows 10&lt;/li&gt; &#xA; &lt;li&gt;Docker - &lt;a href=&#34;https://github.com/strapi/strapi-docker&#34;&gt;Docker-Repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;(Please note that Strapi may work on other operating systems, but these are not tested nor officially supported at this time.)&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Node:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;NodeJS &amp;gt;= 12 &amp;lt;= 16&lt;/li&gt; &#xA; &lt;li&gt;NPM &amp;gt;= 6.x&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Database:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;MySQL &amp;gt;= 5.7.8&lt;/li&gt; &#xA; &lt;li&gt;MariaDB &amp;gt;= 10.2.7&lt;/li&gt; &#xA; &lt;li&gt;PostgreSQL &amp;gt;= 10&lt;/li&gt; &#xA; &lt;li&gt;SQLite &amp;gt;= 3&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;We recommend always using the latest version of Strapi to start your new projects&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Modern Admin Panel:&lt;/strong&gt; Elegant, entirely customizable and a fully extensible admin panel.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Secure by default:&lt;/strong&gt; Reusable policies, CORS, CSP, P3P, Xframe, XSS, and more.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Plugins Oriented:&lt;/strong&gt; Install the auth system, content management, custom plugins, and more, in seconds.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Blazing Fast:&lt;/strong&gt; Built on top of Node.js, Strapi delivers amazing performance.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Front-end Agnostic:&lt;/strong&gt; Use any front-end framework (React, Vue, Angular, etc.), mobile apps or even IoT.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Powerful CLI:&lt;/strong&gt; Scaffold projects and APIs on the fly.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;SQL databases:&lt;/strong&gt; Works with PostgreSQL, MySQL, MariaDB, and SQLite.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;&lt;a href=&#34;https://strapi.io/overview&#34;&gt;See more on our website&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read our &lt;a href=&#34;https://raw.githubusercontent.com/strapi/strapi/master/CONTRIBUTING.md&#34;&gt;Contributing Guide&lt;/a&gt; before submitting a Pull Request to the project.&lt;/p&gt; &#xA;&lt;h2&gt;Community support&lt;/h2&gt; &#xA;&lt;p&gt;For general help using Strapi, please refer to &lt;a href=&#34;https://docs.strapi.io&#34;&gt;the official Strapi documentation&lt;/a&gt;. For additional help, you can use one of these channels to ask a question:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.strapi.io&#34;&gt;Discord&lt;/a&gt; (For live discussion with the Community and Strapi team)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/strapi/strapi&#34;&gt;GitHub&lt;/a&gt; (Bug reports, Contributions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://forum.strapi.io&#34;&gt;Community Forum&lt;/a&gt; (Questions and Discussions)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://feedback.strapi.io&#34;&gt;Feedback section&lt;/a&gt; (Roadmap, Feature requests)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://twitter.com/strapijs&#34;&gt;Twitter&lt;/a&gt; (Get the news fast)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.facebook.com/Strapi-616063331867161&#34;&gt;Facebook&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/strapi&#34;&gt;YouTube Channel&lt;/a&gt; (Learn from Video Tutorials)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Migration&lt;/h2&gt; &#xA;&lt;p&gt;Follow our &lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/update-migration-guides/migration-guides.html&#34;&gt;migration guides&lt;/a&gt; on the documentation to keep your projects up-to-date.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://feedback.strapi.io&#34;&gt;roadmap&lt;/a&gt; to get informed of the latest features released and the upcoming ones. You may also give us insights and vote for a specific feature.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;See our dedicated &lt;a href=&#34;https://github.com/strapi/documentation&#34;&gt;repository&lt;/a&gt; for the Strapi documentation, or view our documentation live:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.strapi.io/developer-docs/latest/getting-started/introduction.html&#34;&gt;Developer docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.strapi.io/user-docs/latest/getting-started/introduction.html&#34;&gt;User guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Try live demo&lt;/h2&gt; &#xA;&lt;p&gt;See for yourself what&#39;s under the hood by getting access to a &lt;a href=&#34;https://strapi.io/demo&#34;&gt;hosted Strapi project&lt;/a&gt; with sample data.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/strapi/strapi/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt; file for licensing information.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>fengyuanchen/cropperjs</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/fengyuanchen/cropperjs</id>
    <link href="https://github.com/fengyuanchen/cropperjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;JavaScript image cropper.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cropper.js&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/cropperjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/cropperjs.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/cropperjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/cropperjs.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://unpkg.com/cropperjs/dist/cropper.common.js&#34;&gt;&lt;img src=&#34;https://img.shields.io/bundlephobia/minzip/cropperjs.svg?sanitize=true&#34; alt=&#34;Gzip Size&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;JavaScript image cropper. This is the branch for v1.x, for v2.x, check out the &lt;a href=&#34;https://github.com/fengyuanchen/cropperjs/tree/v2&#34;&gt;&lt;code&gt;v2&lt;/code&gt;&lt;/a&gt; branch.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fengyuanchen.github.io/cropperjs&#34;&gt;Website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fengyuanchen.github.io/photo-editor&#34;&gt;Photo Editor&lt;/a&gt; - An advanced example of Cropper.js.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fengyuanchen/jquery-cropper&#34;&gt;jquery-cropper&lt;/a&gt; - A jQuery plugin wrapper for Cropper.js.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#features&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#main&#34;&gt;Main&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#getting-started&#34;&gt;Getting started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#methods&#34;&gt;Methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#events&#34;&gt;Events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#no-conflict&#34;&gt;No conflict&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#browser-support&#34;&gt;Browser support&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Supports 39 &lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#options&#34;&gt;options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports 27 &lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#methods&#34;&gt;methods&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports 6 &lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#events&#34;&gt;events&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Supports touch (mobile)&lt;/li&gt; &#xA; &lt;li&gt;Supports zooming&lt;/li&gt; &#xA; &lt;li&gt;Supports rotating&lt;/li&gt; &#xA; &lt;li&gt;Supports scaling (flipping)&lt;/li&gt; &#xA; &lt;li&gt;Supports multiple croppers&lt;/li&gt; &#xA; &lt;li&gt;Supports cropping on a canvas&lt;/li&gt; &#xA; &lt;li&gt;Supports cropping an image on the browser-side by canvas&lt;/li&gt; &#xA; &lt;li&gt;Supports translating Exif Orientation information&lt;/li&gt; &#xA; &lt;li&gt;Cross-browser support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Main files&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;dist/&#xA;├── cropper.css&#xA;├── cropper.min.css   (compressed)&#xA;├── cropper.js        (UMD)&#xA;├── cropper.min.js    (UMD, compressed)&#xA;├── cropper.common.js (CommonJS, default)&#xA;└── cropper.esm.js    (ES Module)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;npm install cropperjs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In browser:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;link  href=&#34;/path/to/cropper.css&#34; rel=&#34;stylesheet&#34;&amp;gt;&#xA;&amp;lt;script src=&#34;/path/to/cropper.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cdnjs/cdnjs&#34;&gt;cdnjs&lt;/a&gt; provides CDN support for Cropper.js&#39;s CSS and JavaScript. You can find the links &lt;a href=&#34;https://cdnjs.com/libraries/cropperjs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Usage&lt;/h3&gt; &#xA;&lt;h4&gt;Syntax&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Cropper(element[, options])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;element&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;HTMLImageElement&lt;/code&gt; or &lt;code&gt;HTMLCanvasElement&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The target image or canvas element for cropping.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;options&lt;/strong&gt; (optional)&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The options for cropping. Check out the available &lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#options&#34;&gt;options&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Example&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- Wrap the image or canvas element with a block element (container) --&amp;gt;&#xA;&amp;lt;div&amp;gt;&#xA;  &amp;lt;img id=&#34;image&#34; src=&#34;picture.jpg&#34;&amp;gt;&#xA;&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;/* Ensure the size of the image fit the container perfectly */&#xA;img {&#xA;  display: block;&#xA;&#xA;  /* This rule is very important, please don&#39;t ignore this */&#xA;  max-width: 100%;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// import &#39;cropperjs/dist/cropper.css&#39;;&#xA;import Cropper from &#39;cropperjs&#39;;&#xA;&#xA;const image = document.getElementById(&#39;image&#39;);&#xA;const cropper = new Cropper(image, {&#xA;  aspectRatio: 16 / 9,&#xA;  crop(event) {&#xA;    console.log(event.detail.x);&#xA;    console.log(event.detail.y);&#xA;    console.log(event.detail.width);&#xA;    console.log(event.detail.height);&#xA;    console.log(event.detail.rotate);&#xA;    console.log(event.detail.scaleX);&#xA;    console.log(event.detail.scaleY);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;FAQ&lt;/h4&gt; &#xA;&lt;p&gt;How to crop a new area after zooming in or zooming out?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just double-click your mouse to enter crop mode.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;How to move the image after cropping an area?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just double-click your mouse to enter move mode.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;How to fix the aspect ratio in free ratio mode?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just hold the &lt;code&gt;Shift&lt;/code&gt; key when you resize the crop box.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;How to crop a square area in free ratio mode?&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Just hold the &lt;code&gt;Shift&lt;/code&gt; key when you crop on the image.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Notes&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The size of the cropper inherits from the size of the image&#39;s parent element (wrapper), so be sure to wrap the image with a &lt;strong&gt;visible block element&lt;/strong&gt;.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;If you are using cropper in a modal, you should initialize the cropper after the modal is shown completely. Otherwise, you will not get the correct cropper.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The outputted cropped data is based on the original image size, so you can use them to crop the image directly.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you try to start cropper on a cross-origin image, please make sure that your browser supports HTML5 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes&#34;&gt;CORS settings attributes&lt;/a&gt;, and your image server supports the &lt;code&gt;Access-Control-Allow-Origin&lt;/code&gt; option (see the &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Access_control_CORS&#34;&gt;HTTP access control (CORS)&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Known issues&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/AppleApplications/Reference/SafariWebContent/CreatingContentforSafarioniPhone/CreatingContentforSafarioniPhone.html&#34;&gt;Known iOS resource limits&lt;/a&gt;: As iOS devices limit memory, the browser may crash when you are cropping a large image (iPhone camera resolution). To avoid this, you may resize the image first (preferably below 1024 pixels) before starting a cropper.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Known image size increase: When exporting the cropped image on the browser side with the &lt;code&gt;HTMLCanvasElement.toDataURL&lt;/code&gt; method, the size of the exported image may be greater than the original image&#39;s. This is because the type of the exported image is not the same as the original image. So just pass the original image&#39;s type as the first parameter to &lt;code&gt;toDataURL&lt;/code&gt; to fix this. For example, if the original type is JPEG, then use &lt;code&gt;cropper.getCroppedCanvas().toDataURL(&#39;image/jpeg&#39;)&lt;/code&gt; to export image.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;You may set cropper options with &lt;code&gt;new Cropper(image, options)&lt;/code&gt;. If you want to change the global default options, You may use &lt;code&gt;Cropper.setDefaults(options)&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;viewMode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;0&lt;/code&gt;: no restrictions&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;1&lt;/code&gt;: restrict the crop box not to exceed the size of the canvas.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;2&lt;/code&gt;: restrict the minimum canvas size to fit within the container. If the proportions of the canvas and the container differ, the minimum canvas will be surrounded by extra space in one of the dimensions.&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;3&lt;/code&gt;: restrict the minimum canvas size to fill fit the container. If the proportions of the canvas and the container are different, the container will not be able to fit the whole canvas in one of the dimensions.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Define the view mode of the cropper. If you set &lt;code&gt;viewMode&lt;/code&gt; to &lt;code&gt;0&lt;/code&gt;, the crop box can extend outside the canvas, while a value of &lt;code&gt;1&lt;/code&gt;, &lt;code&gt;2&lt;/code&gt;, or &lt;code&gt;3&lt;/code&gt; will restrict the crop box to the size of the canvas. &lt;code&gt;viewMode&lt;/code&gt; of &lt;code&gt;2&lt;/code&gt; or &lt;code&gt;3&lt;/code&gt; will additionally restrict the canvas to the container. There is no difference between &lt;code&gt;2&lt;/code&gt; and &lt;code&gt;3&lt;/code&gt; when the proportions of the canvas and the container are the same.&lt;/p&gt; &#xA;&lt;h3&gt;dragMode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;&#39;crop&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Options: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;crop&#39;&lt;/code&gt;: create a new crop box&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;move&#39;&lt;/code&gt;: move the canvas&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;&#39;none&#39;&lt;/code&gt;: do nothing&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Define the dragging mode of the cropper.&lt;/p&gt; &#xA;&lt;h3&gt;initialAspectRatio&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Define the initial aspect ratio of the crop box. By default, it is the same as the aspect ratio of the canvas (image wrapper).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Only available when the &lt;code&gt;aspectRatio&lt;/code&gt; option is set to &lt;code&gt;NaN&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;aspectRatio&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;NaN&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Define the fixed aspect ratio of the crop box. By default, the crop box has a free ratio.&lt;/p&gt; &#xA;&lt;h3&gt;data&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The previous cropped data you stored will be passed to the &lt;code&gt;setData&lt;/code&gt; method automatically when initialized.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Only available when the &lt;code&gt;autoCrop&lt;/code&gt; option had set to the &lt;code&gt;true&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;preview&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Element&lt;/code&gt;, &lt;code&gt;Array&lt;/code&gt; (elements), &lt;code&gt;NodeList&lt;/code&gt; or &lt;code&gt;String&lt;/code&gt; (selector)&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;&#39;&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;An element or an array of elements or a node list object or a valid selector for &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/Document/querySelectorAll&#34;&gt;Document.querySelectorAll&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Add extra elements (containers) for preview.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The maximum width is the initial width of the preview container.&lt;/li&gt; &#xA; &lt;li&gt;The maximum height is the initial height of the preview container.&lt;/li&gt; &#xA; &lt;li&gt;If you set an &lt;code&gt;aspectRatio&lt;/code&gt; option, be sure to set the same aspect ratio to the preview container.&lt;/li&gt; &#xA; &lt;li&gt;If the preview does not display correctly, set the &lt;code&gt;overflow: hidden&lt;/code&gt; style to the preview container.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;responsive&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Re-render the cropper when resizing the window.&lt;/p&gt; &#xA;&lt;h3&gt;restore&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Restore the cropped area after resizing the window.&lt;/p&gt; &#xA;&lt;h3&gt;checkCrossOrigin&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check if the current image is a cross-origin image.&lt;/p&gt; &#xA;&lt;p&gt;If so, a &lt;code&gt;crossOrigin&lt;/code&gt; attribute will be added to the cloned image element, and a timestamp parameter will be added to the &lt;code&gt;src&lt;/code&gt; attribute to reload the source image to avoid browser cache error.&lt;/p&gt; &#xA;&lt;p&gt;Adding a &lt;code&gt;crossOrigin&lt;/code&gt; attribute to the image element will stop adding a timestamp to the image URL and stop reloading the image. But the request (XMLHttpRequest) to read the image data for orientation checking will require a timestamp to bust the cache to avoid browser cache error. You can set the &lt;code&gt;checkOrientation&lt;/code&gt; option to &lt;code&gt;false&lt;/code&gt; to cancel this request.&lt;/p&gt; &#xA;&lt;p&gt;If the value of the image&#39;s &lt;code&gt;crossOrigin&lt;/code&gt; attribute is &lt;code&gt;&#34;use-credentials&#34;&lt;/code&gt;, then the &lt;code&gt;withCredentials&lt;/code&gt; attribute will set to &lt;code&gt;true&lt;/code&gt; when read the image data by XMLHttpRequest.&lt;/p&gt; &#xA;&lt;h3&gt;checkOrientation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Check the current image&#39;s Exif Orientation information. Note that only a JPEG image may contain Exif Orientation information.&lt;/p&gt; &#xA;&lt;p&gt;Exactly, read the Orientation value for rotating or flipping the image, and then override the Orientation value with &lt;code&gt;1&lt;/code&gt; (the default value) to avoid some issues (&lt;a href=&#34;https://github.com/fengyuanchen/cropper/issues/120&#34;&gt;1&lt;/a&gt;, &lt;a href=&#34;https://github.com/fengyuanchen/cropper/issues/509&#34;&gt;2&lt;/a&gt;) on iOS devices.&lt;/p&gt; &#xA;&lt;p&gt;Requires to set both the &lt;code&gt;rotatable&lt;/code&gt; and &lt;code&gt;scalable&lt;/code&gt; options to &lt;code&gt;true&lt;/code&gt; at the same time.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Do not trust this all the time as some JPG images may have incorrect (non-standard) Orientation values&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/TypedArray&#34;&gt;Typed Arrays&lt;/a&gt; support (&lt;a href=&#34;https://caniuse.com/typedarrays&#34;&gt;IE 10+&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;modal&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Show the black modal above the image and under the crop box.&lt;/p&gt; &#xA;&lt;h3&gt;guides&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Show the dashed lines above the crop box.&lt;/p&gt; &#xA;&lt;h3&gt;center&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Show the center indicator above the crop box.&lt;/p&gt; &#xA;&lt;h3&gt;highlight&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Show the white modal above the crop box (highlight the crop box).&lt;/p&gt; &#xA;&lt;h3&gt;background&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Show the grid background of the container.&lt;/p&gt; &#xA;&lt;h3&gt;autoCrop&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to crop the image automatically when initialized.&lt;/p&gt; &#xA;&lt;h3&gt;autoCropArea&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;0.8&lt;/code&gt; (80% of the image)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It should be a number between 0 and 1. Define the automatic cropping area size (percentage).&lt;/p&gt; &#xA;&lt;h3&gt;movable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to move the image.&lt;/p&gt; &#xA;&lt;h3&gt;rotatable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to rotate the image.&lt;/p&gt; &#xA;&lt;h3&gt;scalable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: `Boolean&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to scale the image.&lt;/p&gt; &#xA;&lt;h3&gt;zoomable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to zoom the image.&lt;/p&gt; &#xA;&lt;h3&gt;zoomOnTouch&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to zoom the image by dragging touch.&lt;/p&gt; &#xA;&lt;h3&gt;zoomOnWheel&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to zoom the image by mouse wheeling.&lt;/p&gt; &#xA;&lt;h3&gt;wheelZoomRatio&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;0.1&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Define zoom ratio when zooming the image by mouse wheeling.&lt;/p&gt; &#xA;&lt;h3&gt;cropBoxMovable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to move the crop box by dragging.&lt;/p&gt; &#xA;&lt;h3&gt;cropBoxResizable&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to resize the crop box by dragging.&lt;/p&gt; &#xA;&lt;h3&gt;toggleDragModeOnDblclick&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;true&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enable to toggle drag mode between &lt;code&gt;&#34;crop&#34;&lt;/code&gt; and &lt;code&gt;&#34;move&#34;&lt;/code&gt; when clicking twice on the cropper.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Events/dblclick&#34;&gt;&lt;code&gt;dblclick&lt;/code&gt;&lt;/a&gt; event support.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;minContainerWidth&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;200&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimum width of the container.&lt;/p&gt; &#xA;&lt;h3&gt;minContainerHeight&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;100&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimum height of the container.&lt;/p&gt; &#xA;&lt;h3&gt;minCanvasWidth&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimum width of the canvas (image wrapper).&lt;/p&gt; &#xA;&lt;h3&gt;minCanvasHeight&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimum height of the canvas (image wrapper).&lt;/p&gt; &#xA;&lt;h3&gt;minCropBoxWidth&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimum width of the crop box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This size is relative to the page, not the image.&lt;/p&gt; &#xA;&lt;h3&gt;minCropBoxHeight&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The minimum height of the crop box.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This size is relative to the page, not the image.&lt;/p&gt; &#xA;&lt;h3&gt;ready&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A shortcut to the &lt;code&gt;ready&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;h3&gt;cropstart&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A shortcut to the &lt;code&gt;cropstart&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;h3&gt;cropmove&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A shortcut to the &lt;code&gt;cropmove&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;h3&gt;cropend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A shortcut to the &lt;code&gt;cropend&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;h3&gt;crop&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A shortcut to the &lt;code&gt;crop&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;h3&gt;zoom&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type: &lt;code&gt;Function&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Default: &lt;code&gt;null&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;A shortcut to the &lt;code&gt;zoom&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Methods&lt;/h2&gt; &#xA;&lt;p&gt;As there is an &lt;strong&gt;asynchronous&lt;/strong&gt; process when loading the image, you &lt;strong&gt;should call most of the methods after ready&lt;/strong&gt;, except &lt;code&gt;setAspectRatio&lt;/code&gt;, &lt;code&gt;replace&lt;/code&gt; and &lt;code&gt;destroy&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;If a method doesn&#39;t need to return any value, it will return the cropper instance (&lt;code&gt;this&lt;/code&gt;) for chain composition.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Cropper(image, {&#xA;  ready() {&#xA;    // this.cropper[method](argument1, , argument2, ..., argumentN);&#xA;    this.cropper.move(1, -1);&#xA;&#xA;    // Allows chain composition&#xA;    this.cropper.move(1, -1).rotate(45).scale(1, -1);&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;crop()&lt;/h3&gt; &#xA;&lt;p&gt;Show the crop box manually.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;new Cropper(image, {&#xA;  autoCrop: false,&#xA;  ready() {&#xA;    // Do something here&#xA;    // ...&#xA;&#xA;    // And then&#xA;    this.cropper.crop();&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;reset()&lt;/h3&gt; &#xA;&lt;p&gt;Reset the image and crop box to its initial states.&lt;/p&gt; &#xA;&lt;h3&gt;clear()&lt;/h3&gt; &#xA;&lt;p&gt;Clear the crop box.&lt;/p&gt; &#xA;&lt;h3&gt;replace(url[, hasSameSize])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;url&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A new image url.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;hasSameSize&lt;/strong&gt; (optional):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;If the new image has the same size as the old one, then it will not rebuild the cropper and only update the URLs of all related images. This can be used for applying filters.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Replace the image&#39;s src and rebuild the cropper.&lt;/p&gt; &#xA;&lt;h3&gt;enable()&lt;/h3&gt; &#xA;&lt;p&gt;Enable (unfreeze) the cropper.&lt;/p&gt; &#xA;&lt;h3&gt;disable()&lt;/h3&gt; &#xA;&lt;p&gt;Disable (freeze) the cropper.&lt;/p&gt; &#xA;&lt;h3&gt;destroy()&lt;/h3&gt; &#xA;&lt;p&gt;Destroy the cropper and remove the instance from the image.&lt;/p&gt; &#xA;&lt;h3&gt;move(offsetX[, offsetY])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;offsetX&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Moving size (px) in the horizontal direction.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;offsetY&lt;/strong&gt; (optional):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Moving size (px) in the vertical direction.&lt;/li&gt; &#xA;   &lt;li&gt;If not present, its default value is &lt;code&gt;offsetX&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Move the canvas (image wrapper) with relative offsets.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cropper.move(1);&#xA;cropper.move(1, 0);&#xA;cropper.move(0, -1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;moveTo(x[, y])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;x&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;left&lt;/code&gt; value of the canvas&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;y&lt;/strong&gt; (optional):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The &lt;code&gt;top&lt;/code&gt; value of the canvas&lt;/li&gt; &#xA;   &lt;li&gt;If not present, its default value is &lt;code&gt;x&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Move the canvas (image wrapper) to an absolute point.&lt;/p&gt; &#xA;&lt;h3&gt;zoom(ratio)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;ratio&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Zoom in: requires a positive number (ratio &amp;gt; 0)&lt;/li&gt; &#xA;   &lt;li&gt;Zoom out: requires a negative number (ratio &amp;lt; 0)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Zoom the canvas (image wrapper) with a relative ratio.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cropper.zoom(0.1);&#xA;cropper.zoom(-0.1);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;zoomTo(ratio[, pivot])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;ratio&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Requires a positive number (ratio &amp;gt; 0)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;pivot&lt;/strong&gt; (optional):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Schema: &lt;code&gt;{ x: Number, y: Number }&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The coordinate of the center point for zooming, base on the top left corner of the cropper container.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Zoom the canvas (image wrapper) to an absolute ratio.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cropper.zoomTo(1); // 1:1 (canvasData.width === canvasData.naturalWidth)&#xA;&#xA;const containerData = cropper.getContainerData();&#xA;&#xA;// Zoom to 50% from the center of the container.&#xA;cropper.zoomTo(.5, {&#xA;  x: containerData.width / 2,&#xA;  y: containerData.height / 2,&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rotate(degree)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;degree&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Rotate right: requires a positive number (degree &amp;gt; 0)&lt;/li&gt; &#xA;   &lt;li&gt;Rotate left: requires a negative number (degree &amp;lt; 0)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rotate the image to a relative degree.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/transform&#34;&gt;CSS3 2D Transforms&lt;/a&gt; support (&lt;a href=&#34;https://caniuse.com/transforms2d&#34;&gt;IE 9+&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cropper.rotate(90);&#xA;cropper.rotate(-90);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;rotateTo(degree)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;degree&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rotate the image to an absolute degree.&lt;/p&gt; &#xA;&lt;h3&gt;scale(scaleX[, scaleY])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scaleX&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The scaling factor applies to the abscissa of the image.&lt;/li&gt; &#xA;   &lt;li&gt;When equal to &lt;code&gt;1&lt;/code&gt; it does nothing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;scaleY&lt;/strong&gt; (optional):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The scaling factor to apply on the ordinate of the image.&lt;/li&gt; &#xA;   &lt;li&gt;If not present, its default value is &lt;code&gt;scaleX&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scale the image.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Requires &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/transform&#34;&gt;CSS3 2D Transforms&lt;/a&gt; support (&lt;a href=&#34;https://caniuse.com/transforms2d&#34;&gt;IE 9+&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cropper.scale(-1); // Flip both horizontal and vertical&#xA;cropper.scale(-1, 1); // Flip horizontal&#xA;cropper.scale(1, -1); // Flip vertical&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;scaleX(scaleX)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;scaleX&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The scaling factor applies to the abscissa of the image.&lt;/li&gt; &#xA;   &lt;li&gt;When equal to &lt;code&gt;1&lt;/code&gt; it does nothing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scale the abscissa of the image.&lt;/p&gt; &#xA;&lt;h3&gt;scaleY(scaleY)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;scaleY&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The scaling factor to apply on the ordinate of the image.&lt;/li&gt; &#xA;   &lt;li&gt;When equal to &lt;code&gt;1&lt;/code&gt; it does nothing.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scale the ordinate of the image.&lt;/p&gt; &#xA;&lt;h3&gt;getData([rounded])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;rounded&lt;/strong&gt; (optional):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Boolean&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;false&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Set &lt;code&gt;true&lt;/code&gt; to get rounded values.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(return value):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;x&lt;/code&gt;: the offset left of the cropped area&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;y&lt;/code&gt;: the offset top of the cropped area&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the width of the cropped area&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the height of the cropped area&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;rotate&lt;/code&gt;: the rotated degrees of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;scaleX&lt;/code&gt;: the scaling factor to apply on the abscissa of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;scaleY&lt;/code&gt;: the scaling factor to apply on the ordinate of the image&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Output the final cropped area position and size data (based on the natural size of the original image).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;You can send the data to the server-side to crop the image directly:&lt;/p&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;Rotate the image with the &lt;code&gt;rotate&lt;/code&gt; property.&lt;/li&gt; &#xA;  &lt;li&gt;Scale the image with the &lt;code&gt;scaleX&lt;/code&gt; and &lt;code&gt;scaleY&lt;/code&gt; properties.&lt;/li&gt; &#xA;  &lt;li&gt;Crop the image with the &lt;code&gt;x&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;width&lt;/code&gt;, and &lt;code&gt;height&lt;/code&gt; properties.&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/docs/images/data.jpg&#34; alt=&#34;A schematic diagram for data&#39;s properties&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;setData(data)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: See the &lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#getdatarounded&#34;&gt;&lt;code&gt;getData&lt;/code&gt;&lt;/a&gt; method.&lt;/li&gt; &#xA;   &lt;li&gt;You may need to round the data properties before passing them in.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change the cropped area position and size with new data (based on the original image).&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This method only available when the value of the &lt;code&gt;viewMode&lt;/code&gt; option is greater than or equal to &lt;code&gt;1&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;getContainerData()&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(return value): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the current width of the container&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the current height of the container&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Output the container size data.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/docs/images/layers.jpg&#34; alt=&#34;A schematic diagram for cropper&#39;s layers&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;getImageData()&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(return value): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;left&lt;/code&gt;: the offset left of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;top&lt;/code&gt;: the offset top of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the width of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the height of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;naturalWidth&lt;/code&gt;: the natural width of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;naturalHeight&lt;/code&gt;: the natural height of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;aspectRatio&lt;/code&gt;: the aspect ratio of the image&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;rotate&lt;/code&gt;: the rotated degrees of the image if it is rotated&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;scaleX&lt;/code&gt;: the scaling factor to apply on the abscissa of the image if scaled&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;scaleY&lt;/code&gt;: the scaling factor to apply on the ordinate of the image if scaled&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Output the image position, size, and other related data.&lt;/p&gt; &#xA;&lt;h3&gt;getCanvasData()&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(return value): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;left&lt;/code&gt;: the offset left of the canvas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;top&lt;/code&gt;: the offset top of the canvas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the width of the canvas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the height of the canvas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;naturalWidth&lt;/code&gt;: the natural width of the canvas (read only)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;naturalHeight&lt;/code&gt;: the natural height of the canvas (read only)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Output the canvas (image wrapper) position and size data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const imageData = cropper.getImageData();&#xA;const canvasData = cropper.getCanvasData();&#xA;&#xA;if (imageData.rotate % 180 === 0) {&#xA;  console.log(canvasData.naturalWidth === imageData.naturalWidth);&#xA;  // &amp;gt; true&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;setCanvasData(data)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;left&lt;/code&gt;: the new offset left of the canvas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;top&lt;/code&gt;: the new offset top of the canvas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the new width of the canvas&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the new height of the canvas&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change the canvas (image wrapper) position and size with new data.&lt;/p&gt; &#xA;&lt;h3&gt;getCropBoxData()&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(return value): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;left&lt;/code&gt;: the offset left of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;top&lt;/code&gt;: the offset top of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the width of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the height of the crop box&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Output the crop box position and size data.&lt;/p&gt; &#xA;&lt;h3&gt;setCropBoxData(data)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;data&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;left&lt;/code&gt;: the new offset left of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;top&lt;/code&gt;: the new offset top of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the new width of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the new height of the crop box&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change the crop box position and size with new data.&lt;/p&gt; &#xA;&lt;h3&gt;getCroppedCanvas([options])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;options&lt;/strong&gt; (optional):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Object&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Properties: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;width&lt;/code&gt;: the destination width of the output canvas.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;height&lt;/code&gt;: the destination height of the output canvas.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;minWidth&lt;/code&gt;: the minimum destination width of the output canvas, the default value is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;minHeight&lt;/code&gt;: the minimum destination height of the output canvas, the default value is &lt;code&gt;0&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;maxWidth&lt;/code&gt;: the maximum destination width of the output canvas, the default value is &lt;code&gt;Infinity&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;maxHeight&lt;/code&gt;: the maximum destination height of the output canvas, the default value is &lt;code&gt;Infinity&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;fillColor&lt;/code&gt;: a color to fill any alpha values in the output canvas, the default value is the &lt;code&gt;transparent&lt;/code&gt;.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingEnabled&#34;&gt;&lt;code&gt;imageSmoothingEnabled&lt;/code&gt;&lt;/a&gt;: set to change if images are smoothed (&lt;code&gt;true&lt;/code&gt;, default) or not (&lt;code&gt;false&lt;/code&gt;).&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/imageSmoothingQuality&#34;&gt;&lt;code&gt;imageSmoothingQuality&lt;/code&gt;&lt;/a&gt;: set the quality of image smoothing, one of &#34;low&#34; (default), &#34;medium&#34;, or &#34;high&#34;.&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;(return value):&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;HTMLCanvasElement&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A canvas drawn the cropped image.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Notes:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The aspect ratio of the output canvas will be fitted to the aspect ratio of the crop box automatically.&lt;/li&gt; &#xA;   &lt;li&gt;If you intend to get a JPEG image from the output canvas, you should set the &lt;code&gt;fillColor&lt;/code&gt; option first, if not, the transparent part in the JPEG image will become black by default.&lt;/li&gt; &#xA;   &lt;li&gt;Uses the Browser&#39;s native &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob&#34;&gt;canvas.toBlob&lt;/a&gt; API to do the compression work, which means it is &lt;strong&gt;lossy compression&lt;/strong&gt;. For better image quality, you can upload the original image and the cropped data to a server and do the crop work on the server.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Browser support:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Basic image: requires &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement&#34;&gt;Canvas&lt;/a&gt; support (&lt;a href=&#34;https://caniuse.com/canvas&#34;&gt;IE 9+&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Rotated image: requires &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS/transform&#34;&gt;CSS3 2D Transforms&lt;/a&gt; support (&lt;a href=&#34;https://caniuse.com/transforms2d&#34;&gt;IE 9+&lt;/a&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;Cross-origin image: requires HTML5 &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML/CORS_settings_attributes&#34;&gt;CORS settings attributes&lt;/a&gt; support (&lt;a href=&#34;https://caniuse.com/cors&#34;&gt;IE 11+&lt;/a&gt;).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Get a canvas drawn from the cropped image (lossy compression). If it is not cropped, then returns a canvas drawn the whole image.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;After then, you can display the canvas as an image directly, or use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toDataURL&#34;&gt;HTMLCanvasElement.toDataURL&lt;/a&gt; to get a Data URL, or use &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/toBlob&#34;&gt;HTMLCanvasElement.toBlob&lt;/a&gt; to get a blob and upload it to server with &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/API/FormData&#34;&gt;FormData&lt;/a&gt; if the browser supports these APIs.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Avoid getting a blank (or black) output image, you might need to set the &lt;code&gt;maxWidth&lt;/code&gt; and &lt;code&gt;maxHeight&lt;/code&gt; properties to limited numbers, because of &lt;a href=&#34;https://stackoverflow.com/questions/6081483/maximum-size-of-a-canvas-element&#34;&gt;the size limits of a canvas element&lt;/a&gt;. Also, you should limit the maximum zoom ratio (in the &lt;code&gt;zoom&lt;/code&gt; event) for the same reason.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;cropper.getCroppedCanvas();&#xA;&#xA;cropper.getCroppedCanvas({&#xA;  width: 160,&#xA;  height: 90,&#xA;  minWidth: 256,&#xA;  minHeight: 256,&#xA;  maxWidth: 4096,&#xA;  maxHeight: 4096,&#xA;  fillColor: &#39;#fff&#39;,&#xA;  imageSmoothingEnabled: false,&#xA;  imageSmoothingQuality: &#39;high&#39;,&#xA;});&#xA;&#xA;// Upload cropped image to server if the browser supports `HTMLCanvasElement.toBlob`.&#xA;// The default value for the second parameter of `toBlob` is &#39;image/png&#39;, change it if necessary.&#xA;cropper.getCroppedCanvas().toBlob((blob) =&amp;gt; {&#xA;  const formData = new FormData();&#xA;&#xA;  // Pass the image file name as the third parameter if necessary.&#xA;  formData.append(&#39;croppedImage&#39;, blob/*, &#39;example.png&#39; */);&#xA;&#xA;  // Use `jQuery.ajax` method for example&#xA;  $.ajax(&#39;/path/to/upload&#39;, {&#xA;    method: &#39;POST&#39;,&#xA;    data: formData,&#xA;    processData: false,&#xA;    contentType: false,&#xA;    success() {&#xA;      console.log(&#39;Upload success&#39;);&#xA;    },&#xA;    error() {&#xA;      console.log(&#39;Upload error&#39;);&#xA;    },&#xA;  });&#xA;}/*, &#39;image/png&#39; */);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;setAspectRatio(aspectRatio)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;aspectRatio&lt;/strong&gt;: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Requires a positive number.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change the aspect ratio of the crop box.&lt;/p&gt; &#xA;&lt;h3&gt;setDragMode([mode])&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;mode&lt;/strong&gt; (optional): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default: &lt;code&gt;&#39;none&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Options: &lt;code&gt;&#39;none&#39;&lt;/code&gt;, &lt;code&gt;&#39;crop&#39;&lt;/code&gt;, &lt;code&gt;&#39;move&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Change the drag mode.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Tips:&lt;/strong&gt; You can toggle the &#34;crop&#34; and &#34;move&#34; mode by double clicking on the cropper.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Events&lt;/h2&gt; &#xA;&lt;h3&gt;ready&lt;/h3&gt; &#xA;&lt;p&gt;This event fires when the target image has been loaded and the cropper instance is ready for operating.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let cropper;&#xA;&#xA;image.addEventListener(&#39;ready&#39;, function () {&#xA;  console.log(this.cropper === cropper);&#xA;  // &amp;gt; true&#xA;});&#xA;&#xA;cropper = new Cropper(image);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;cropstart&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.originalEvent&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Event&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Options: &lt;code&gt;pointerdown&lt;/code&gt;, &lt;code&gt;touchstart&lt;/code&gt;, and &lt;code&gt;mousedown&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.action&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Options: &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;crop&#39;&lt;/code&gt;: create a new crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;move&#39;&lt;/code&gt;: move the canvas (image wrapper)&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;zoom&#39;&lt;/code&gt;: zoom in / out the canvas (image wrapper) by touch.&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;e&#39;&lt;/code&gt;: resize the east side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;w&#39;&lt;/code&gt;: resize the west side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;s&#39;&lt;/code&gt;: resize the south side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;n&#39;&lt;/code&gt;: resize the north side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;se&#39;&lt;/code&gt;: resize the southeast side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;sw&#39;&lt;/code&gt;: resize the southwest side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;ne&#39;&lt;/code&gt;: resize the northeast side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;nw&#39;&lt;/code&gt;: resize the northwest side of the crop box&lt;/li&gt; &#xA;     &lt;li&gt;&lt;code&gt;&#39;all&#39;&lt;/code&gt;: move the crop box (all directions)&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This event fires when the canvas (image wrapper) or the crop box starts to change.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;image.addEventListener(&#39;cropstart&#39;, (event) =&amp;gt; {&#xA;  console.log(event.detail.originalEvent);&#xA;  console.log(event.detail.action);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;cropmove&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.originalEvent&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Event&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Options: &lt;code&gt;pointermove&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt;, and &lt;code&gt;mousemove&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.action&lt;/strong&gt;: the same as &#34;cropstart&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This event fires when the canvas (image wrapper) or the crop box is changing.&lt;/p&gt; &#xA;&lt;h3&gt;cropend&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.originalEvent&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Event&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Options: &lt;code&gt;pointerup&lt;/code&gt;, &lt;code&gt;pointercancel&lt;/code&gt;, &lt;code&gt;touchend&lt;/code&gt;, &lt;code&gt;touchcancel&lt;/code&gt;, and &lt;code&gt;mouseup&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.action&lt;/strong&gt;: the same as &#34;cropstart&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This event fires when the canvas (image wrapper) or the crop box stops changing.&lt;/p&gt; &#xA;&lt;h3&gt;crop&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;event.detail.x&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event.detail.y&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event.detail.width&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event.detail.height&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event.detail.rotate&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event.detail.scaleX&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;event.detail.scaleY&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;About these properties, see the &lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#getdatarounded&#34;&gt;&lt;code&gt;getData&lt;/code&gt;&lt;/a&gt; method.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;This event fires when the canvas (image wrapper) or the crop box changes.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Notes:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When the &lt;code&gt;autoCrop&lt;/code&gt; option is set to the &lt;code&gt;true&lt;/code&gt;, a &lt;code&gt;crop&lt;/code&gt; event will be triggered before the &lt;code&gt;ready&lt;/code&gt; event.&lt;/li&gt; &#xA; &lt;li&gt;When the &lt;code&gt;data&lt;/code&gt; option is set, another &lt;code&gt;crop&lt;/code&gt; event will be triggered before the &lt;code&gt;ready&lt;/code&gt; event.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;zoom&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.originalEvent&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Event&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Options: &lt;code&gt;wheel&lt;/code&gt;, &lt;code&gt;pointermove&lt;/code&gt;, &lt;code&gt;touchmove&lt;/code&gt;, and &lt;code&gt;mousemove&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.oldRatio&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The old (current) ratio of the canvas&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;event.detail.ratio&lt;/strong&gt;:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Type: &lt;code&gt;Number&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The new (next) ratio of the canvas (&lt;code&gt;canvasData.width / canvasData.naturalWidth&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This event fires when a cropper instance starts to zoom in or zoom out its canvas (image wrapper).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;image.addEventListener(&#39;zoom&#39;, (event) =&amp;gt; {&#xA;  // Zoom in&#xA;  if (event.detail.ratio &amp;gt; event.detail.oldRatio) {&#xA;    event.preventDefault(); // Prevent zoom in&#xA;  }&#xA;&#xA;  // Zoom out&#xA;  // ...&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;No conflict&lt;/h2&gt; &#xA;&lt;p&gt;If you have to use another cropper with the same namespace, just call the &lt;code&gt;Cropper.noConflict&lt;/code&gt; static method to revert to it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;script src=&#34;other-cropper.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script src=&#34;cropper.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;script&amp;gt;&#xA;  Cropper.noConflict();&#xA;  // Code that uses other `Cropper` can follow here.&#xA;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Browser support&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Chrome (latest)&lt;/li&gt; &#xA; &lt;li&gt;Firefox (latest)&lt;/li&gt; &#xA; &lt;li&gt;Safari (latest)&lt;/li&gt; &#xA; &lt;li&gt;Opera (latest)&lt;/li&gt; &#xA; &lt;li&gt;Edge (latest)&lt;/li&gt; &#xA; &lt;li&gt;Internet Explorer 9+&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please read through our &lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/.github/CONTRIBUTING.md&#34;&gt;contributing guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;Maintained under the &lt;a href=&#34;https://semver.org/&#34;&gt;Semantic Versioning guidelines&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT&lt;/a&gt; © &lt;a href=&#34;https://chenfengyuan.com/&#34;&gt;Chen Fengyuan&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Related projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/matheusdavidson/angular-cropperjs&#34;&gt;angular-cropperjs&lt;/a&gt; by @matheusdavidson&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/danielthall/ember-cropperjs&#34;&gt;ember-cropperjs&lt;/a&gt; by @danielthall&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/safetychanger/iron-cropper&#34;&gt;iron-cropper&lt;/a&gt; by @safetychanger&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/react-cropper/react-cropper&#34;&gt;react-cropper&lt;/a&gt; by @roadmanfong&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Agontuk/vue-cropperjs&#34;&gt;vue-cropperjs&lt;/a&gt; by @Agontuk&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fengyuanchen/cropperjs/main/#table-of-contents&#34;&gt;⬆ back to top&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>parse-community/parse-server</title>
    <updated>2022-05-29T01:32:48Z</updated>
    <id>tag:github.com,2022-05-29:/parse-community/parse-server</id>
    <link href="https://github.com/parse-community/parse-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;API server module for Node/Express&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/5673677/138278489-7d0cebc5-1e31-4d3c-8ffb-53efcda6f29d.png&#34; alt=&#34;parse-repository-header-server&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/parse-community/parse-server/actions?query=workflow%3Aci+branch%3Aalpha&#34;&gt;&lt;img src=&#34;https://github.com/parse-community/parse-server/workflows/ci/badge.svg?branch=alpha&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/parse-community/parse-server&#34;&gt;&lt;img src=&#34;https://snyk.io/test/github/parse-community/parse-server/badge.svg?sanitize=true&#34; alt=&#34;Snyk Badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/github/parse-community/parse-server?branch=alpha&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/parse-community/parse-server/alpha.svg?sanitize=true&#34; alt=&#34;Coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/parse-community/parse-dashboard/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/%F0%9F%9A%80-auto--release-9e34eb.svg?sanitize=true&#34; alt=&#34;auto-release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nodejs.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/nodejs-12,_14,_16,_17,_18-green.svg?logo=node.js&amp;amp;style=flat&#34; alt=&#34;Node Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.mongodb.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/mongodb-4.0,_4.2,_4.4,_5.0,_5.1,_5.2-green.svg?logo=mongodb&amp;amp;style=flat&#34; alt=&#34;MongoDB Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.postgresql.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/postgresql-11,_12,_13,_14-green.svg?logo=postgresql&amp;amp;style=flat&#34; alt=&#34;Postgres Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/parse-server/latest.svg?sanitize=true&#34; alt=&#34;npm latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/parse-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/parse-server/beta.svg?sanitize=true&#34; alt=&#34;npm beta version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/parse-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/parse-server/alpha.svg?sanitize=true&#34; alt=&#34;npm alpha version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/parse-server&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/backers/badge.svg?sanitize=true&#34; alt=&#34;Backers on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsors/badge.svg?sanitize=true&#34; alt=&#34;Sponsors on Open Collective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD-lightgrey.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.parseplatform.org/c/parse-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/discourse/https/community.parseplatform.org/topics.svg?sanitize=true&#34; alt=&#34;Forum&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=ParsePlatform&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/ParsePlatform.svg?label=Follow&amp;amp;style=social&#34; alt=&#34;Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://chat.parseplatform.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Chat-Join!-%23fff?style=social&amp;amp;logo=slack&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Parse Server is an open source backend that can be deployed to any infrastructure that can run Node.js. Parse Server works with the Express web application framework. It can be added to existing web applications, or run by itself.&lt;/p&gt; &#xA;&lt;p&gt;The full documentation for Parse Server is available in the &lt;a href=&#34;https://github.com/parse-community/parse-server/wiki&#34;&gt;wiki&lt;/a&gt;. The &lt;a href=&#34;http://docs.parseplatform.org/parse-server/guide/&#34;&gt;Parse Server guide&lt;/a&gt; is a good place to get started. An &lt;a href=&#34;http://parseplatform.org/parse-server/api/&#34;&gt;API reference&lt;/a&gt; and &lt;a href=&#34;https://docs.parseplatform.org/cloudcode/guide/&#34;&gt;Cloud Code guide&lt;/a&gt; are also available. If you&#39;re interested in developing for Parse Server, the &lt;a href=&#34;http://docs.parseplatform.org/parse-server/guide/#development-guide&#34;&gt;Development guide&lt;/a&gt; will help you get set up.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A big &lt;em&gt;thank you&lt;/em&gt; 🙏 to our &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#sponsors&#34;&gt;sponsors&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#backers&#34;&gt;backers&lt;/a&gt; who support the development of Parse Platform!&lt;/p&gt; &#xA;&lt;h3&gt;Diamond Sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/parse-server/contribute/diamond-sponsor-10560&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/tiers/diamond-sponsor.svg?avatarHeight=70&amp;amp;button=false&#34; alt=&#34;Diamond Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Bronze Sponsors&lt;/h4&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/parse-server/contribute/bronze-sponsor-10559&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/tiers/bronze-sponsor.svg?avatarHeight=36&amp;amp;button=false&#34; alt=&#34;Bronze Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#getting-started&#34;&gt;Getting Started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#running-parse-server&#34;&gt;Running Parse Server&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#compatibility&#34;&gt;Compatibility&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#nodejs&#34;&gt;Node.js&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#mongodb&#34;&gt;MongoDB&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#postgresql&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#locally&#34;&gt;Locally&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#docker-container&#34;&gt;Docker Container&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#saving-an-object&#34;&gt;Saving an Object&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#connect-an-sdk&#34;&gt;Connect an SDK&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#running-parse-server-elsewhere&#34;&gt;Running Parse Server elsewhere&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#sample-application&#34;&gt;Sample Application&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#parse-server--express&#34;&gt;Parse Server + Express&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#basic-options&#34;&gt;Basic Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#client-key-options&#34;&gt;Client Key Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#email-verification-and-password-reset&#34;&gt;Email Verification and Password Reset&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#password-and-account-policy&#34;&gt;Password and Account Policy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#custom-routes&#34;&gt;Custom Routes&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#example&#34;&gt;Example&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#reserved-paths&#34;&gt;Reserved Paths&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#parameters&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#custom-pages&#34;&gt;Custom Pages&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#using-environment-variables&#34;&gt;Using Environment Variables&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#available-adapters&#34;&gt;Available Adapters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#configuring-file-adapters&#34;&gt;Configuring File Adapters&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#idempotency-enforcement&#34;&gt;Idempotency Enforcement&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#localization&#34;&gt;Localization&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#pages&#34;&gt;Pages&lt;/a&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#localization-with-directory-structure&#34;&gt;Localization with Directory Structure&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#localization-with-json-resource&#34;&gt;Localization with JSON Resource&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#dynamic-placeholders&#34;&gt;Dynamic placeholders&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#reserved-keys&#34;&gt;Reserved Keys&lt;/a&gt;&lt;/li&gt; &#xA;       &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#parameters-1&#34;&gt;Parameters&lt;/a&gt;&lt;/li&gt; &#xA;      &lt;/ul&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#deprecations&#34;&gt;Deprecations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#live-query&#34;&gt;Live Query&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#graphql&#34;&gt;GraphQL&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#running&#34;&gt;Running&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#using-the-cli&#34;&gt;Using the CLI&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#using-docker&#34;&gt;Using Docker&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#using-expressjs&#34;&gt;Using Express.js&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#checking-the-api-health&#34;&gt;Checking the API health&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#creating-your-first-class&#34;&gt;Creating your first class&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#using-automatically-generated-operations&#34;&gt;Using automatically generated operations&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#customizing-your-graphql-schema&#34;&gt;Customizing your GraphQL Schema&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#learning-more&#34;&gt;Learning more&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#upgrading-to-300&#34;&gt;Upgrading to 3.0.0&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#want-to-ride-the-bleeding-edge&#34;&gt;Want to ride the bleeding edge?&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#contributors&#34;&gt;Contributors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#sponsors&#34;&gt;Sponsors&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#backers&#34;&gt;Backers&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;The fastest and easiest way to get started is to run MongoDB and Parse Server locally.&lt;/p&gt; &#xA;&lt;h2&gt;Running Parse Server&lt;/h2&gt; &#xA;&lt;p&gt;Before you start make sure you have installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/&#34;&gt;NodeJS&lt;/a&gt; that includes &lt;code&gt;npm&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.mongodb.com/&#34;&gt;MongoDB&lt;/a&gt; or &lt;a href=&#34;https://www.postgresql.org/&#34;&gt;PostgreSQL&lt;/a&gt;(with &lt;a href=&#34;https://postgis.net&#34;&gt;PostGIS&lt;/a&gt; 2.2.0 or higher)&lt;/li&gt; &#xA; &lt;li&gt;Optionally &lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Compatibility&lt;/h3&gt; &#xA;&lt;h4&gt;Node.js&lt;/h4&gt; &#xA;&lt;p&gt;Parse Server is continuously tested with the most recent releases of Node.js to ensure compatibility. We follow the &lt;a href=&#34;https://github.com/nodejs/Release&#34;&gt;Node.js Long Term Support plan&lt;/a&gt; and only test against versions that are officially supported and have not reached their end-of-life date.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Latest Version&lt;/th&gt; &#xA;   &lt;th&gt;End-of-Life&lt;/th&gt; &#xA;   &lt;th&gt;Compatible&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node.js 12&lt;/td&gt; &#xA;   &lt;td&gt;12.22.11&lt;/td&gt; &#xA;   &lt;td&gt;April 2022&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node.js 14&lt;/td&gt; &#xA;   &lt;td&gt;14.19.1&lt;/td&gt; &#xA;   &lt;td&gt;April 2023&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node.js 16&lt;/td&gt; &#xA;   &lt;td&gt;16.14.2&lt;/td&gt; &#xA;   &lt;td&gt;April 2024&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node.js 17&lt;/td&gt; &#xA;   &lt;td&gt;17.9.0&lt;/td&gt; &#xA;   &lt;td&gt;June 2022&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Node.js 18&lt;/td&gt; &#xA;   &lt;td&gt;18.1.0&lt;/td&gt; &#xA;   &lt;td&gt;April 2025&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;MongoDB&lt;/h4&gt; &#xA;&lt;p&gt;Parse Server is continuously tested with the most recent releases of MongoDB to ensure compatibility. We follow the &lt;a href=&#34;https://www.mongodb.com/support-policy&#34;&gt;MongoDB support schedule&lt;/a&gt; and only test against versions that are officially supported and have not reached their end-of-life date.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;Latest Version&lt;/th&gt; &#xA;   &lt;th&gt;End-of-Life&lt;/th&gt; &#xA;   &lt;th&gt;Compatible&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB 4.0&lt;/td&gt; &#xA;   &lt;td&gt;4.0.28&lt;/td&gt; &#xA;   &lt;td&gt;April 2022&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB 4.2&lt;/td&gt; &#xA;   &lt;td&gt;4.2.19&lt;/td&gt; &#xA;   &lt;td&gt;TBD&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB 4.4&lt;/td&gt; &#xA;   &lt;td&gt;4.4.13&lt;/td&gt; &#xA;   &lt;td&gt;TBD&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB 5.0&lt;/td&gt; &#xA;   &lt;td&gt;5.0.6&lt;/td&gt; &#xA;   &lt;td&gt;TBD&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB 5.1&lt;/td&gt; &#xA;   &lt;td&gt;5.1.1&lt;/td&gt; &#xA;   &lt;td&gt;TBD&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;MongoDB 5.2&lt;/td&gt; &#xA;   &lt;td&gt;5.2.1&lt;/td&gt; &#xA;   &lt;td&gt;TBD&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h4&gt;PostgreSQL&lt;/h4&gt; &#xA;&lt;p&gt;Parse Server is continuously tested with the most recent releases of PostgreSQL and PostGIS to ensure compatibility, using &lt;a href=&#34;https://registry.hub.docker.com/r/postgis/postgis/tags?page=1&amp;amp;ordering=last_updated&#34;&gt;PostGIS docker images&lt;/a&gt;. We follow the &lt;a href=&#34;https://www.postgresql.org/support/versioning&#34;&gt;PostgreSQL support schedule&lt;/a&gt; and &lt;a href=&#34;https://www.postgis.net/eol_policy/&#34;&gt;PostGIS support schedule&lt;/a&gt; and only test against versions that are officially supported and have not reached their end-of-life date. Due to the extensive PostgreSQL support duration of 5 years, Parse Server drops support if a version is older than 3.5 years and a newer version has been available for at least 2.5 years.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;PostGIS Version&lt;/th&gt; &#xA;   &lt;th&gt;End-of-Life&lt;/th&gt; &#xA;   &lt;th&gt;Parse Server Support End&lt;/th&gt; &#xA;   &lt;th&gt;Compatible&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Postgres 11&lt;/td&gt; &#xA;   &lt;td&gt;3.0, 3.1, 3.2&lt;/td&gt; &#xA;   &lt;td&gt;November 2023&lt;/td&gt; &#xA;   &lt;td&gt;April 2022&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Postgres 12&lt;/td&gt; &#xA;   &lt;td&gt;3.2&lt;/td&gt; &#xA;   &lt;td&gt;November 2024&lt;/td&gt; &#xA;   &lt;td&gt;April 2023&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Postgres 13&lt;/td&gt; &#xA;   &lt;td&gt;3.2&lt;/td&gt; &#xA;   &lt;td&gt;November 2025&lt;/td&gt; &#xA;   &lt;td&gt;April 2024&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Postgres 14&lt;/td&gt; &#xA;   &lt;td&gt;3.2&lt;/td&gt; &#xA;   &lt;td&gt;November 2026&lt;/td&gt; &#xA;   &lt;td&gt;April 2025&lt;/td&gt; &#xA;   &lt;td&gt;✅ Yes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Locally&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g parse-server mongodb-runner&#xA;$ mongodb-runner start&#xA;$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;If installation with&lt;/em&gt; &lt;code&gt;-g&lt;/code&gt; &lt;em&gt;fails due to permission problems&lt;/em&gt; (&lt;code&gt;npm ERR! code &#39;EACCES&#39;&lt;/code&gt;), &lt;em&gt;please refer to &lt;a href=&#34;https://docs.npmjs.com/getting-started/fixing-npm-permissions&#34;&gt;this link&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Docker Container&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/parse-community/parse-server&#xA;$ cd parse-server&#xA;$ docker build --tag parse-server .&#xA;$ docker run --name my-mongo -d mongo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Parse Server Image &#xA; &lt;!-- omit in toc --&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --name my-parse-server -v config-vol:/parse-server/config -p 1337:1337 --link my-mongo:mongo -d parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://mongo/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;If you want to use &lt;a href=&#34;https://docs.parseplatform.org/cloudcode/guide/&#34;&gt;Cloud Code&lt;/a&gt;, add &lt;code&gt;-v cloud-code-vol:/parse-server/cloud --cloud /parse-server/cloud/main.js&lt;/code&gt; to the command above. Make sure &lt;code&gt;main.js&lt;/code&gt; is in the &lt;code&gt;cloud-code-vol&lt;/code&gt; directory before starting Parse Server.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can use any arbitrary string as your application id and master key. These will be used by your clients to authenticate with the Parse Server.&lt;/p&gt; &#xA;&lt;p&gt;That&#39;s it! You are now running a standalone version of Parse Server on your machine.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Using a remote MongoDB?&lt;/strong&gt; Pass the &lt;code&gt;--databaseURI DATABASE_URI&lt;/code&gt; parameter when starting &lt;code&gt;parse-server&lt;/code&gt;. Learn more about configuring Parse Server &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#configuration&#34;&gt;here&lt;/a&gt;. For a full list of available options, run &lt;code&gt;parse-server --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Saving an Object&lt;/h3&gt; &#xA;&lt;p&gt;Now that you&#39;re running Parse Server, it is time to save your first object. We&#39;ll use the &lt;a href=&#34;http://docs.parseplatform.org/rest/guide&#34;&gt;REST API&lt;/a&gt;, but you can easily do the same using any of the &lt;a href=&#34;http://parseplatform.org/#sdks&#34;&gt;Parse SDKs&lt;/a&gt;. Run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -X POST \&#xA;-H &#34;X-Parse-Application-Id: APPLICATION_ID&#34; \&#xA;-H &#34;Content-Type: application/json&#34; \&#xA;-d &#39;{&#34;score&#34;:1337,&#34;playerName&#34;:&#34;Sean Plott&#34;,&#34;cheatMode&#34;:false}&#39; \&#xA;http://localhost:1337/parse/classes/GameScore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should get a response similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;objectId&#34;: &#34;2ntvSpRGIK&#34;,&#xA;  &#34;createdAt&#34;: &#34;2016-03-11T23:51:48.050Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now retrieve this object directly (make sure to replace &lt;code&gt;2ntvSpRGIK&lt;/code&gt; with the actual &lt;code&gt;objectId&lt;/code&gt; you received when the object was created):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -X GET \&#xA;  -H &#34;X-Parse-Application-Id: APPLICATION_ID&#34; \&#xA;  http://localhost:1337/parse/classes/GameScore/2ntvSpRGIK&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// Response&#xA;{&#xA;  &#34;objectId&#34;: &#34;2ntvSpRGIK&#34;,&#xA;  &#34;score&#34;: 1337,&#xA;  &#34;playerName&#34;: &#34;Sean Plott&#34;,&#xA;  &#34;cheatMode&#34;: false,&#xA;  &#34;updatedAt&#34;: &#34;2016-03-11T23:51:48.050Z&#34;,&#xA;  &#34;createdAt&#34;: &#34;2016-03-11T23:51:48.050Z&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Keeping tracks of individual object ids is not ideal, however. In most cases you will want to run a query over the collection, like so:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ curl -X GET \&#xA;  -H &#34;X-Parse-Application-Id: APPLICATION_ID&#34; \&#xA;  http://localhost:1337/parse/classes/GameScore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;// The response will provide all the matching objects within the `results` array:&#xA;{&#xA;  &#34;results&#34;: [&#xA;    {&#xA;      &#34;objectId&#34;: &#34;2ntvSpRGIK&#34;,&#xA;      &#34;score&#34;: 1337,&#xA;      &#34;playerName&#34;: &#34;Sean Plott&#34;,&#xA;      &#34;cheatMode&#34;: false,&#xA;      &#34;updatedAt&#34;: &#34;2016-03-11T23:51:48.050Z&#34;,&#xA;      &#34;createdAt&#34;: &#34;2016-03-11T23:51:48.050Z&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To learn more about using saving and querying objects on Parse Server, check out the &lt;a href=&#34;http://docs.parseplatform.org&#34;&gt;Parse documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Connect an SDK&lt;/h3&gt; &#xA;&lt;p&gt;Parse provides SDKs for all the major platforms. Refer to the Parse Server guide to &lt;a href=&#34;https://docs.parseplatform.org/parse-server/guide/#using-parse-sdks-with-parse-server&#34;&gt;learn how to connect your app to Parse Server&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Running Parse Server elsewhere&lt;/h2&gt; &#xA;&lt;p&gt;Once you have a better understanding of how the project works, please refer to the &lt;a href=&#34;https://github.com/parse-community/parse-server/wiki&#34;&gt;Parse Server wiki&lt;/a&gt; for in-depth guides to deploy Parse Server to major infrastructure providers. Read on to learn more about additional ways of running Parse Server.&lt;/p&gt; &#xA;&lt;h3&gt;Sample Application&lt;/h3&gt; &#xA;&lt;p&gt;We have provided a basic &lt;a href=&#34;https://github.com/parse-community/parse-server-example&#34;&gt;Node.js application&lt;/a&gt; that uses the Parse Server module on Express and can be easily deployed to various infrastructure providers:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://devcenter.heroku.com/articles/deploying-a-parse-server-to-heroku&#34;&gt;Heroku and mLab&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mobile.awsblog.com/post/TxCD57GZLM2JR/How-to-set-up-Parse-Server-on-AWS-using-AWS-Elastic-Beanstalk&#34;&gt;AWS and Elastic Beanstalk&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://medium.com/@justinbeckwith/deploying-parse-server-to-google-app-engine-6bc0b7451d50&#34;&gt;Google App Engine&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://azure.microsoft.com/en-us/blog/azure-welcomes-parse-developers/&#34;&gt;Microsoft Azure&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://blog.sashido.io/tag/migration/&#34;&gt;SashiDo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.digitalocean.com/community/tutorials/how-to-run-parse-server-on-ubuntu-14-04&#34;&gt;Digital Ocean&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cf-platform-eng/pws-parse-server&#34;&gt;Pivotal Web Services&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.back4app.com/docs/get-started/welcome&#34;&gt;Back4app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://glitch.com/edit/#!/parse-server&#34;&gt;Glitch&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://flynn.io/blog/parse-apps-on-flynn&#34;&gt;Flynn&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Parse Server + Express&lt;/h3&gt; &#xA;&lt;p&gt;You can also create an instance of Parse Server, and mount it on a new or existing Express website:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var express = require(&#39;express&#39;);&#xA;var ParseServer = require(&#39;parse-server&#39;).ParseServer;&#xA;var app = express();&#xA;&#xA;var api = new ParseServer({&#xA;  databaseURI: &#39;mongodb://localhost:27017/dev&#39;, // Connection string for your MongoDB database&#xA;  cloud: &#39;./cloud/main.js&#39;, // Path to your Cloud Code&#xA;  appId: &#39;myAppId&#39;,&#xA;  masterKey: &#39;myMasterKey&#39;, // Keep this key secret!&#xA;  fileKey: &#39;optionalFileKey&#39;,&#xA;  serverURL: &#39;http://localhost:1337/parse&#39; // Don&#39;t forget to change to https if needed&#xA;});&#xA;&#xA;// Serve the Parse API on the /parse URL prefix&#xA;app.use(&#39;/parse&#39;, api);&#xA;&#xA;app.listen(1337, function() {&#xA;  console.log(&#39;parse-server-example running on port 1337.&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a full list of available options, run &lt;code&gt;parse-server --help&lt;/code&gt; or take a look at &lt;a href=&#34;http://parseplatform.org/parse-server/api/master/ParseServerOptions.html&#34;&gt;Parse Server Configurations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Configuration&lt;/h1&gt; &#xA;&lt;p&gt;Parse Server can be configured using the following options. You may pass these as parameters when running a standalone &lt;code&gt;parse-server&lt;/code&gt;, or by loading a configuration file in JSON format using &lt;code&gt;parse-server path/to/configuration.json&lt;/code&gt;. If you&#39;re using Parse Server on Express, you may also pass these to the &lt;code&gt;ParseServer&lt;/code&gt; object as options.&lt;/p&gt; &#xA;&lt;p&gt;For the full list of available options, run &lt;code&gt;parse-server --help&lt;/code&gt; or take a look at &lt;a href=&#34;http://parseplatform.org/parse-server/api/master/ParseServerOptions.html&#34;&gt;Parse Server Configurations&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Basic Options&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;appId&lt;/code&gt; &lt;strong&gt;(required)&lt;/strong&gt; - The application id to host with this server instance. You can use any arbitrary string. For migrated apps, this should match your hosted Parse app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;masterKey&lt;/code&gt; &lt;strong&gt;(required)&lt;/strong&gt; - The master key to use for overriding ACL security. You can use any arbitrary string. Keep it secret! For migrated apps, this should match your hosted Parse app.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;databaseURI&lt;/code&gt; &lt;strong&gt;(required)&lt;/strong&gt; - The connection string for your database, i.e. &lt;code&gt;mongodb://user:pass@host.com/dbname&lt;/code&gt;. Be sure to &lt;a href=&#34;https://app.zencoder.com/docs/guides/getting-started/special-characters-in-usernames-and-passwords&#34;&gt;URL encode your password&lt;/a&gt; if your password has special characters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;port&lt;/code&gt; - The default port is 1337, specify this parameter to use a different port.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;serverURL&lt;/code&gt; - URL to your Parse Server (don&#39;t forget to specify http:// or https://). This URL will be used when making requests to Parse Server from Cloud Code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cloud&lt;/code&gt; - The absolute path to your cloud code &lt;code&gt;main.js&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;push&lt;/code&gt; - Configuration options for APNS and GCM push. See the &lt;a href=&#34;https://docs.parseplatform.org/parse-server/guide/#push-notifications-quick-start&#34;&gt;Push Notifications quick start&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Client Key Options&lt;/h2&gt; &#xA;&lt;p&gt;The client keys used with Parse are no longer necessary with Parse Server. If you wish to still require them, perhaps to be able to refuse access to older clients, you can set the keys at initialization time. Setting any of these keys will require all requests to provide one of the configured keys.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;clientKey&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;javascriptKey&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;restAPIKey&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dotNetKey&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Email Verification and Password Reset&lt;/h2&gt; &#xA;&lt;p&gt;Verifying user email addresses and enabling password reset via email requires an email adapter. There are many email adapters provided and maintained by the community. The following is an example configuration with an example email adapter. See the &lt;a href=&#34;https://parseplatform.org/parse-server/api/master/ParseServerOptions.html&#34;&gt;Parse Server Options&lt;/a&gt; for more details and a full list of available options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const server = ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  // Enable email verification&#xA;  verifyUserEmails: true,&#xA;&#xA;  // Set email verification token validity to 2 hours&#xA;  emailVerifyTokenValidityDuration: 2 * 60 * 60,&#xA;&#xA;  // Set email adapter&#xA;  emailAdapter: {&#xA;    module: &#39;example-mail-adapter&#39;,&#xA;    options: {&#xA;      // Additional adapter options&#xA;      ...mailAdapterOptions&#xA;    }&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Email adapters contributed by the community:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-api-mail-adapter&#34;&gt;parse-server-api-mail-adapter&lt;/a&gt; (localization, templates, universally supports any email provider)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-smtp-template&#34;&gt;parse-smtp-template&lt;/a&gt; (localization, templates)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-postmark-adapter&#34;&gt;parse-server-postmark-adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-sendgrid-adapter&#34;&gt;parse-server-sendgrid-adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-mandrill-adapter&#34;&gt;parse-server-mandrill-adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-simple-ses-adapter&#34;&gt;parse-server-simple-ses-adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-mailgun-adapter-template&#34;&gt;parse-server-mailgun-adapter-template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-sendinblue-adapter&#34;&gt;parse-server-sendinblue-adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-mailjet-adapter&#34;&gt;parse-server-mailjet-adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/simple-parse-smtp-adapter&#34;&gt;simple-parse-smtp-adapter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.npmjs.com/package/parse-server-generic-email-adapter&#34;&gt;parse-server-generic-email-adapter&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Password and Account Policy&lt;/h2&gt; &#xA;&lt;p&gt;Set a password and account policy that meets your security requirements. The following is an example configuration. See the &lt;a href=&#34;https://parseplatform.org/parse-server/api/master/ParseServerOptions.html&#34;&gt;Parse Server Options&lt;/a&gt; for more details and a full list of available options.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const server = ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  // The account lock policy&#xA;  accountLockout: {&#xA;    // Lock the account for 5 minutes.&#xA;    duration: 5,&#xA;    // Lock an account after 3 failed log-in attempts&#xA;    threshold: 3,&#xA;    // Unlock the account after a successful password reset&#xA;    unlockOnPasswordReset: true,&#xA;  },&#xA;&#xA;  // The password policy&#xA;  passwordPolicy: {    &#xA;    // Enforce a password of at least 8 characters which contain at least 1 lower case, 1 upper case and 1 digit&#xA;    validatorPattern: /^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/,&#xA;    // Do not allow the username as part of the password&#xA;    doNotAllowUsername: true,&#xA;    // Do not allow to re-use the last 5 passwords when setting a new password&#xA;    maxPasswordHistory: 5,&#xA;  },&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom Routes&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution, this is an experimental feature that may not be appropriate for production.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom routes allow to build user flows with webpages, similar to the existing password reset and email verification features. Custom routes are defined with the &lt;code&gt;pages&lt;/code&gt; option in the Parse Server configuration:&lt;/p&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const api = new ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  pages: {&#xA;    enableRouter: true, // Enables the experimental feature; required for custom routes&#xA;    customRoutes: [{&#xA;      method: &#39;GET&#39;,&#xA;      path: &#39;custom_route&#39;,&#xA;      handler: async request =&amp;gt; {&#xA;        // custom logic&#xA;        // ...&#xA;        // then, depending on the outcome, return a HTML file as response&#xA;        return { file: &#39;custom_page.html&#39; };&#xA;      }&#xA;    }]&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above route can be invoked by sending a &lt;code&gt;GET&lt;/code&gt; request to: &lt;code&gt;https://[parseServerPublicUrl]/[parseMount]/[pagesEndpoint]/[appId]/[customRoute]&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;handler&lt;/code&gt; receives the &lt;code&gt;request&lt;/code&gt; and returns a &lt;code&gt;custom_page.html&lt;/code&gt; webpage from the &lt;code&gt;pages.pagesPath&lt;/code&gt; directory as response. The advantage of building a custom route this way is that it automatically makes use of Parse Server&#39;s built-in capabilities, such as &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#pages&#34;&gt;page localization&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/#dynamic-placeholders&#34;&gt;dynamic placeholders&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Reserved Paths&lt;/h3&gt; &#xA;&lt;p&gt;The following paths are already used by Parse Server&#39;s built-in features and are therefore not available for custom routes. Custom routes with an identical combination of &lt;code&gt;path&lt;/code&gt; and &lt;code&gt;method&lt;/code&gt; are ignored.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Path&lt;/th&gt; &#xA;   &lt;th&gt;HTTP Method&lt;/th&gt; &#xA;   &lt;th&gt;Feature&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify_email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;email verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;resend_verification_email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;email verification&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;choose_password&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;password reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;request_password_reset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;password reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;request_password_reset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;password reset&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Parameters&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Optional&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Example values&lt;/th&gt; &#xA;   &lt;th&gt;Environment variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The options for pages such as password reset and email verification.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.enableRouter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_ENABLE_ROUTER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is &lt;code&gt;true&lt;/code&gt; if the pages router should be enabled; this is required for any of the pages options to take effect. &lt;strong&gt;Caution, this is an experimental feature that may not be appropriate for production.&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customRoutes&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_ROUTES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The custom routes. The routes are added in the order they are defined here, which has to be considered since requests traverse routes in an ordered manner. Custom routes are traversed after build-in routes such as password reset and email verification.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customRoutes.method&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;GET&lt;/code&gt;, &lt;code&gt;POST&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;The HTTP method of the custom route.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customRoutes.path&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;custom_page&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;The path of the custom route. Note that the same path can used if the &lt;code&gt;method&lt;/code&gt; is different, for example a path &lt;code&gt;custom_page&lt;/code&gt; can have two routes, a &lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;POST&lt;/code&gt; route, which will be invoked depending on the HTTP request method.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customRoutes.handler&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;AsyncFunction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;async () =&amp;gt; { ... }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;The route handler that is invoked when the route matches the HTTP request. If the handler does not return a page, the request is answered with a 404 &lt;code&gt;Not found.&lt;/code&gt; response.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Custom Pages&lt;/h2&gt; &#xA;&lt;p&gt;It’s possible to change the default pages of the app and redirect the user to another path or domain.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var server = ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  customPages: {&#xA;    passwordResetSuccess: &#34;http://yourapp.com/passwordResetSuccess&#34;,&#xA;    verifyEmailSuccess: &#34;http://yourapp.com/verifyEmailSuccess&#34;,&#xA;    parseFrameURL: &#34;http://yourapp.com/parseFrameURL&#34;,&#xA;    linkSendSuccess: &#34;http://yourapp.com/linkSendSuccess&#34;,&#xA;    linkSendFail: &#34;http://yourapp.com/linkSendFail&#34;,&#xA;    invalidLink: &#34;http://yourapp.com/invalidLink&#34;,&#xA;    invalidVerificationLink: &#34;http://yourapp.com/invalidVerificationLink&#34;,&#xA;    choosePassword: &#34;http://yourapp.com/choosePassword&#34;&#xA;  }&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Environment Variables&lt;/h2&gt; &#xA;&lt;p&gt;You may configure the Parse Server using environment variables:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;PORT&#xA;PARSE_SERVER_APPLICATION_ID&#xA;PARSE_SERVER_MASTER_KEY&#xA;PARSE_SERVER_DATABASE_URI&#xA;PARSE_SERVER_URL&#xA;PARSE_SERVER_CLOUD&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default port is 1337, to use a different port set the PORT environment variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ PORT=8080 parse-server --appId APPLICATION_ID --masterKey MASTER_KEY&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For the full list of configurable environment variables, run &lt;code&gt;parse-server --help&lt;/code&gt; or take a look at &lt;a href=&#34;https://github.com/parse-community/parse-server/raw/master/src/Options/Definitions.js&#34;&gt;Parse Server Configuration&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Available Adapters&lt;/h2&gt; &#xA;&lt;p&gt;All official adapters are distributed as scoped packages on &lt;a href=&#34;https://www.npmjs.com/search?q=scope%3Aparse&#34;&gt;npm (@parse)&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some well maintained adapters are also available on the &lt;a href=&#34;https://github.com/parse-server-modules&#34;&gt;Parse Server Modules&lt;/a&gt; organization.&lt;/p&gt; &#xA;&lt;p&gt;You can also find more adapters maintained by the community by searching on &lt;a href=&#34;https://www.npmjs.com/search?q=parse-server%20adapter&amp;amp;page=1&amp;amp;ranking=optimal&#34;&gt;npm&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Configuring File Adapters&lt;/h2&gt; &#xA;&lt;p&gt;Parse Server allows developers to choose from several options when hosting files:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;GridFSBucketAdapter&lt;/code&gt; - which is backed by MongoDB&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;S3Adapter&lt;/code&gt; - which is backed by &lt;a href=&#34;https://aws.amazon.com/s3/&#34;&gt;Amazon S3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;GCSAdapter&lt;/code&gt; - which is backed by &lt;a href=&#34;https://cloud.google.com/storage/&#34;&gt;Google Cloud Storage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FSAdapter&lt;/code&gt; - local file storage&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;GridFSBucketAdapter&lt;/code&gt; is used by default and requires no setup, but if you&#39;re interested in using Amazon S3, Google Cloud Storage, or local file storage, additional configuration information is available in the &lt;a href=&#34;http://docs.parseplatform.org/parse-server/guide/#configuring-file-adapters&#34;&gt;Parse Server guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Idempotency Enforcement&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution, this is an experimental feature that may not be appropriate for production.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;This feature deduplicates identical requests that are received by Parse Server multiple times, typically due to network issues or network adapter access restrictions on mobile operating systems.&lt;/p&gt; &#xA;&lt;p&gt;Identical requests are identified by their request header &lt;code&gt;X-Parse-Request-Id&lt;/code&gt;. Therefore a client request has to include this header for deduplication to be applied. Requests that do not contain this header cannot be deduplicated and are processed normally by Parse Server. This means rolling out this feature to clients is seamless as Parse Server still processes requests without this header when this feature is enabled.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;This feature needs to be enabled on the client side to send the header and on the server to process the header. Refer to the specific Parse SDK docs to see whether the feature is supported yet.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Deduplication is only done for object creation and update (&lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; requests). Deduplication is not done for object finding and deletion (&lt;code&gt;GET&lt;/code&gt; and &lt;code&gt;DELETE&lt;/code&gt; requests), as these operations are already idempotent by definition.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration example &#xA; &lt;!-- omit in toc --&gt;&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;let api = new ParseServer({&#xA;    idempotencyOptions: {&#xA;        paths: [&#34;.*&#34;],       // enforce for all requests&#xA;        ttl: 120             // keep request IDs for 120s&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Parameters &#xA; &lt;!-- omit in toc --&gt;&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Optional&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Example values&lt;/th&gt; &#xA;   &lt;th&gt;Environment variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idempotencyOptions&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;PARSE_SERVER_EXPERIMENTAL_IDEMPOTENCY_OPTIONS&lt;/td&gt; &#xA;   &lt;td&gt;Setting this enables idempotency enforcement for the specified paths.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idempotencyOptions.paths&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Array&amp;lt;String&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.*&lt;/code&gt; (all paths, includes the examples below), &lt;br&gt;&lt;code&gt;functions/.*&lt;/code&gt; (all functions), &lt;br&gt;&lt;code&gt;jobs/.*&lt;/code&gt; (all jobs), &lt;br&gt;&lt;code&gt;classes/.*&lt;/code&gt; (all classes), &lt;br&gt;&lt;code&gt;functions/.*&lt;/code&gt; (all functions), &lt;br&gt;&lt;code&gt;users&lt;/code&gt; (user creation / update), &lt;br&gt;&lt;code&gt;installations&lt;/code&gt; (installation creation / update)&lt;/td&gt; &#xA;   &lt;td&gt;PARSE_SERVER_EXPERIMENTAL_IDEMPOTENCY_PATHS&lt;/td&gt; &#xA;   &lt;td&gt;An array of path patterns that have to match the request path for request deduplication to be enabled. The mount path must not be included, for example to match the request path &lt;code&gt;/parse/functions/myFunction&lt;/code&gt; specify the path pattern &lt;code&gt;functions/myFunction&lt;/code&gt;. A trailing slash of the request path is ignored, for example the path pattern &lt;code&gt;functions/myFunction&lt;/code&gt; matches both &lt;code&gt;/parse/functions/myFunction&lt;/code&gt; and &lt;code&gt;/parse/functions/myFunction/&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;idempotencyOptions.ttl&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Integer&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;300&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;60&lt;/code&gt; (60 seconds)&lt;/td&gt; &#xA;   &lt;td&gt;PARSE_SERVER_EXPERIMENTAL_IDEMPOTENCY_TTL&lt;/td&gt; &#xA;   &lt;td&gt;The duration in seconds after which a request record is discarded from the database. Duplicate requests due to network issues can be expected to arrive within milliseconds up to several seconds. This value must be greater than &lt;code&gt;0&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Postgres &#xA; &lt;!-- omit in toc --&gt;&lt;/h3&gt; &#xA;&lt;p&gt;To use this feature in Postgres, you will need to create a cron job using &lt;a href=&#34;https://www.pgadmin.org/docs/pgadmin4/development/pgagent_jobs.html&#34;&gt;pgAdmin&lt;/a&gt; or similar to call the Postgres function &lt;code&gt;idempotency_delete_expired_records()&lt;/code&gt; that deletes expired idempotency records. You can find an example script below. Make sure the script has the same privileges to log into Postgres as Parse Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;&#xA;set -e&#xA;psql -v ON_ERROR_STOP=1 --username &#34;$POSTGRES_USER&#34; --dbname &#34;$POSTGRES_DB&#34; &amp;lt;&amp;lt;-EOSQL&#xA;    SELECT idempotency_delete_expired_records();&#xA;EOSQL&#xA;&#xA;exec &#34;$@&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Assuming the script above is named, &lt;code&gt;parse_idempotency_delete_expired_records.sh&lt;/code&gt;, a cron job that runs the script every 2 minutes may look like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;2 * * * * /root/parse_idempotency_delete_expired_records.sh &amp;gt;/dev/null 2&amp;gt;&amp;amp;1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Localization&lt;/h2&gt; &#xA;&lt;h3&gt;Pages&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Caution, this is an experimental feature that may not be appropriate for production.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Custom pages as well as feature pages (e.g. password reset, email verification) can be localized with the &lt;code&gt;pages&lt;/code&gt; option in the Parse Server configuration:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const api = new ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  pages: {&#xA;    enableRouter: true, // Enables the experimental feature; required for localization&#xA;    enableLocalization: true,&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Localization is achieved by matching a request-supplied &lt;code&gt;locale&lt;/code&gt; parameter with localized page content. The locale can be supplied in either the request query, body or header with the following keys:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;query: &lt;code&gt;locale&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;body: &lt;code&gt;locale&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;header: &lt;code&gt;x-parse-page-param-locale&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For example, a password reset link with the locale parameter in the query could look like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://example.com/parse/apps/[appId]/request_password_reset?token=[token]&amp;amp;username=[username]&amp;amp;locale=de-AT&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Localization is only available for pages in the pages directory as set with &lt;code&gt;pages.pagesPath&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Localization for feature pages (e.g. password reset, email verification) is disabled if &lt;code&gt;pages.customUrls&lt;/code&gt; are set, even if the custom URLs point to the pages within the pages path.&lt;/li&gt; &#xA; &lt;li&gt;Only &lt;code&gt;.html&lt;/code&gt; files are considered for localization when localizing custom pages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pages can be localized in two ways:&lt;/p&gt; &#xA;&lt;h4&gt;Localization with Directory Structure&lt;/h4&gt; &#xA;&lt;p&gt;Pages are localized by using the corresponding file in the directory structure where the files are placed in subdirectories named after the locale or language. The file in the base directory is the default file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Directory Structure:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;root/&#xA;├── public/                  // pages base path&#xA;│   ├── example.html         // default file&#xA;│   └── de/                  // de language folder&#xA;│   │   └── example.html     // de localized file&#xA;│   └── de-AT/               // de-AT locale folder&#xA;│   │   └── example.html     // de-AT localized file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Files are matched with the locale in the following order:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Locale match, e.g. locale &lt;code&gt;de-AT&lt;/code&gt; matches file in folder &lt;code&gt;de-AT&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Language match, e.g. locale &lt;code&gt;de-CH&lt;/code&gt; matches file in folder &lt;code&gt;de&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Default; file in base folder is returned.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuration Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const api = new ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  pages: {&#xA;    enableRouter: true, // Enables the experimental feature; required for localization&#xA;    enableLocalization: true,&#xA;    customUrls: {&#xA;      passwordReset: &#39;https://example.com/page.html&#39;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;All files are complete in their content and can be easily opened and previewed by viewing the file in a browser.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In most cases, a localized page differs only slightly from the default page, which could cause a lot of duplicate code that is difficult to maintain.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Localization with JSON Resource&lt;/h4&gt; &#xA;&lt;p&gt;Pages are localized by adding placeholders in the HTML files and providing a JSON resource that contains the translations to fill into the placeholders.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example Directory Structure:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;root/&#xA;├── public/                  // pages base path&#xA;│   ├── example.html         // the page containing placeholders&#xA;├── private/                 // folder outside of public scope&#xA;│   └── translations.json    // JSON resource file&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The JSON resource file loosely follows the &lt;a href=&#34;https://github.com/i18next/i18next&#34;&gt;i18next&lt;/a&gt; syntax, which is a syntax that is often supported by translation platforms, making it easy to manage translations, exporting them for use in Parse Server, and even to automate this workflow.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example JSON Content:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;en&#34;: {               // resource for language `en` (English)&#xA;    &#34;translation&#34;: {&#xA;      &#34;greeting&#34;: &#34;Hello!&#34;&#xA;    }&#xA;  },&#xA;  &#34;de&#34;: {               // resource for language `de` (German)&#xA;    &#34;translation&#34;: {&#xA;      &#34;greeting&#34;: &#34;Hallo!&#34;&#xA;    }&#xA;  }&#xA;  &#34;de-AT&#34;: {            // resource for locale `de-AT` (Austrian German)&#xA;    &#34;translation&#34;: {&#xA;      &#34;greeting&#34;: &#34;Servus!&#34;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuration Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const api = new ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  pages: {&#xA;    enableRouter: true, // Enables the experimental feature; required for localization&#xA;    enableLocalization: true,&#xA;    localizationJsonPath: &#39;./private/localization.json&#39;,&#xA;    localizationFallbackLocale: &#39;en&#39;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pros:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is only one HTML file to maintain that contains the placeholders that are filled with the translations according to the locale.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Cons:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Files cannot be easily previewed by viewing the file in a browser because the content contains only placeholders and even HTML or CSS changes may be dynamically applied, e.g. when a localization requires a Right-To-Left layout direction.&lt;/li&gt; &#xA; &lt;li&gt;Style and other fundamental layout changes may be more difficult to apply.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Dynamic placeholders&lt;/h4&gt; &#xA;&lt;p&gt;In addition to feature related default parameters such as &lt;code&gt;appId&lt;/code&gt; and the translations provided via JSON resource, it is possible to define custom dynamic placeholders as part of the router configuration. This works independently of localization and, also if &lt;code&gt;enableLocalization&lt;/code&gt; is disabled.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Configuration Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const api = new ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  pages: {&#xA;    enableRouter: true, // Enables the experimental feature; required for localization&#xA;    placeholders: {&#xA;      exampleKey: &#39;exampleValue&#39;&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The placeholders can also be provided as function or as async function, with the &lt;code&gt;locale&lt;/code&gt; and other feature related parameters passed through, to allow for dynamic placeholder values:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const api = new ParseServer({&#xA;  ...otherOptions,&#xA;&#xA;  pages: {&#xA;    enableRouter: true, // Enables the experimental feature; required for localization&#xA;    placeholders: async (params) =&amp;gt; {&#xA;      const value = await doSomething(params.locale);&#xA;      return {&#xA;        exampleKey: value&#xA;      };&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Reserved Keys&lt;/h4&gt; &#xA;&lt;p&gt;The following parameter and placeholder keys are reserved because they are used related to features such as password reset or email verification. They should not be used as translation keys in the JSON resource or as manually defined placeholder keys in the configuration: &lt;code&gt;appId&lt;/code&gt;, &lt;code&gt;appName&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;error&lt;/code&gt;, &lt;code&gt;locale&lt;/code&gt;, &lt;code&gt;publicServerUrl&lt;/code&gt;, &lt;code&gt;token&lt;/code&gt;, &lt;code&gt;username&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Parameters&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Parameter&lt;/th&gt; &#xA;   &lt;th&gt;Optional&lt;/th&gt; &#xA;   &lt;th&gt;Type&lt;/th&gt; &#xA;   &lt;th&gt;Default value&lt;/th&gt; &#xA;   &lt;th&gt;Example values&lt;/th&gt; &#xA;   &lt;th&gt;Environment variable&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The options for pages such as password reset and email verification.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.enableRouter&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_ENABLE_ROUTER&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is &lt;code&gt;true&lt;/code&gt; if the pages router should be enabled; this is required for any of the pages options to take effect. &lt;strong&gt;Caution, this is an experimental feature that may not be appropriate for production.&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.enableLocalization&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_ENABLE_LOCALIZATION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is true if pages should be localized; this has no effect on custom page redirects.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.localizationJsonPath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;./private/translations.json&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_LOCALIZATION_JSON_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The path to the JSON file for localization; the translations will be used to fill template placeholders according to the locale.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.localizationFallbackLocale&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;en&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;en&lt;/code&gt;, &lt;code&gt;en-GB&lt;/code&gt;, &lt;code&gt;default&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_LOCALIZATION_FALLBACK_LOCALE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The fallback locale for localization if no matching translation is provided for the given locale. This is only relevant when providing translation resources via JSON file.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.placeholders&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt;, &lt;code&gt;Function&lt;/code&gt;, &lt;code&gt;AsyncFunction&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;undefined&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ exampleKey: &#39;exampleValue&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_PLACEHOLDERS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The placeholder keys and values which will be filled in pages; this can be a simple object or a callback function.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.forceRedirect&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Boolean&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;false&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_FORCE_REDIRECT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Is &lt;code&gt;true&lt;/code&gt; if responses should always be redirects and never content, &lt;code&gt;false&lt;/code&gt; if the response type should depend on the request type (&lt;code&gt;GET&lt;/code&gt; request -&amp;gt; content response; &lt;code&gt;POST&lt;/code&gt; request -&amp;gt; redirect response).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.pagesPath&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;./public&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;./files/pages&lt;/code&gt;, &lt;code&gt;../../pages&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_PAGES_PATH&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The path to the pages directory; this also defines where the static endpoint &lt;code&gt;/apps&lt;/code&gt; points to.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.pagesEndpoint&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;apps&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_PAGES_ENDPOINT&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The API endpoint for the pages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Object&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{}&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{ passwordReset: &#39;https://example.com/page.html&#39; }&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URLS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URLs to the custom pages&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.passwordReset&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;password_reset.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_PASSWORD_RESET&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for password reset.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.passwordResetSuccess&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;password_reset_success.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_PASSWORD_RESET_SUCCESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for password reset -&amp;gt; success.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.passwordResetLinkInvalid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;password_reset_link_invalid.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_PASSWORD_RESET_LINK_INVALID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for password reset -&amp;gt; link invalid.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.emailVerificationSuccess&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;email_verification_success.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_SUCCESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for email verification -&amp;gt; success.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.emailVerificationSendFail&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;email_verification_send_fail.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_SEND_FAIL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for email verification -&amp;gt; link send fail.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.emailVerificationSendSuccess&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;email_verification_send_success.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_SEND_SUCCESS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for email verification -&amp;gt; resend link -&amp;gt; success.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.emailVerificationLinkInvalid&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;email_verification_link_invalid.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_LINK_INVALID&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for email verification -&amp;gt; link invalid.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;pages.customUrls.emailVerificationLinkExpired&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;yes&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;String&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;email_verification_link_expired.html&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;-&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;PARSE_SERVER_PAGES_CUSTOM_URL_EMAIL_VERIFICATION_LINK_EXPIRED&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The URL to the custom page for email verification -&amp;gt; link expired.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Notes &#xA; &lt;!-- omit in toc --&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;In combination with the &lt;a href=&#34;https://www.npmjs.com/package/parse-server-api-mail-adapter&#34;&gt;Parse Server API Mail Adapter&lt;/a&gt; Parse Server provides a fully localized flow (emails -&amp;gt; pages) for the user. The email adapter sends a localized email and adds a locale parameter to the password reset or email verification link, which is then used to respond with localized pages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Parse Server will, by default, log:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;to the console&lt;/li&gt; &#xA; &lt;li&gt;daily rotating files as new line delimited JSON&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Logs are also viewable in Parse Dashboard.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to log each request and response?&lt;/strong&gt; Set the &lt;code&gt;VERBOSE&lt;/code&gt; environment variable when starting &lt;code&gt;parse-server&lt;/code&gt;. Usage :- &lt;code&gt;VERBOSE=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want logs to be placed in a different folder?&lt;/strong&gt; Pass the &lt;code&gt;PARSE_SERVER_LOGS_FOLDER&lt;/code&gt; environment variable when starting &lt;code&gt;parse-server&lt;/code&gt;. Usage :- &lt;code&gt;PARSE_SERVER_LOGS_FOLDER=&#39;&amp;lt;path-to-logs-folder&amp;gt;&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want to log specific levels?&lt;/strong&gt; Pass the &lt;code&gt;logLevel&lt;/code&gt; parameter when starting &lt;code&gt;parse-server&lt;/code&gt;. Usage :- &lt;code&gt;parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --logLevel LOG_LEVEL&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Want new line delimited JSON error logs (for consumption by CloudWatch, Google Cloud Logging, etc)?&lt;/strong&gt; Pass the &lt;code&gt;JSON_LOGS&lt;/code&gt; environment variable when starting &lt;code&gt;parse-server&lt;/code&gt;. Usage :- &lt;code&gt;JSON_LOGS=&#39;1&#39; parse-server --appId APPLICATION_ID --masterKey MASTER_KEY&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Deprecations&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/parse-community/parse-server/raw/master/DEPRECATIONS.md&#34;&gt;Deprecation Plan&lt;/a&gt; for an overview of deprecations and planned breaking changes.&lt;/p&gt; &#xA;&lt;h1&gt;Live Query&lt;/h1&gt; &#xA;&lt;p&gt;Live queries are meant to be used in real-time reactive applications, where just using the traditional query paradigm could cause several problems, like increased response time and high network and server usage. Live queries should be used in cases where you need to continuously update a page with fresh data coming from the database, which often happens in (but is not limited to) online games, messaging clients and shared to-do lists.&lt;/p&gt; &#xA;&lt;p&gt;Take a look at &lt;a href=&#34;https://docs.parseplatform.org/parse-server/guide/#live-queries&#34;&gt;Live Query Guide&lt;/a&gt;, &lt;a href=&#34;https://docs.parseplatform.org/parse-server/guide/#scalability&#34;&gt;Live Query Server Setup Guide&lt;/a&gt; and &lt;a href=&#34;https://github.com/parse-community/parse-server/wiki/Parse-LiveQuery-Protocol-Specification&#34;&gt;Live Query Protocol Specification&lt;/a&gt;. You can setup a standalone server or multiple instances for scalability (recommended).&lt;/p&gt; &#xA;&lt;h1&gt;GraphQL&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://graphql.org/&#34;&gt;GraphQL&lt;/a&gt;, developed by Facebook, is an open-source data query and manipulation language for APIs. In addition to the traditional REST API, Parse Server automatically generates a GraphQL API based on your current application schema. Parse Server also allows you to define your custom GraphQL queries and mutations, whose resolvers can be bound to your cloud code functions.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;h3&gt;Using the CLI&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to run the Parse GraphQL API is through the CLI:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npm install -g parse-server mongodb-runner&#xA;$ mongodb-runner start&#xA;$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test --publicServerURL http://localhost:1337/parse --mountGraphQL --mountPlayground&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After starting the server, you can visit &lt;a href=&#34;http://localhost:1337/playground&#34;&gt;http://localhost:1337/playground&lt;/a&gt; in your browser to start playing with your GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; Do &lt;em&gt;&lt;strong&gt;NOT&lt;/strong&gt;&lt;/em&gt; use --mountPlayground option in production. &lt;a href=&#34;https://github.com/parse-community/parse-dashboard&#34;&gt;Parse Dashboard&lt;/a&gt; has a built-in GraphQL Playground and it is the recommended option for production apps.&lt;/p&gt; &#xA;&lt;h3&gt;Using Docker&lt;/h3&gt; &#xA;&lt;p&gt;You can also run the Parse GraphQL API inside a Docker container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/parse-community/parse-server&#xA;$ cd parse-server&#xA;$ docker build --tag parse-server .&#xA;$ docker run --name my-mongo -d mongo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running the Parse Server Image &#xA; &lt;!-- omit in toc --&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker run --name my-parse-server --link my-mongo:mongo -v config-vol:/parse-server/config -p 1337:1337 -d parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://mongo/test --publicServerURL http://localhost:1337/parse --mountGraphQL --mountPlayground&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; &lt;em&gt;If you want to use &lt;a href=&#34;https://docs.parseplatform.org/cloudcode/guide/&#34;&gt;Cloud Code&lt;/a&gt;, add &lt;code&gt;-v cloud-code-vol:/parse-server/cloud --cloud /parse-server/cloud/main.js&lt;/code&gt; to the command above. Make sure &lt;code&gt;main.js&lt;/code&gt; is in the &lt;code&gt;cloud-code-vol&lt;/code&gt; directory before starting Parse Server.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;After starting the server, you can visit &lt;a href=&#34;http://localhost:1337/playground&#34;&gt;http://localhost:1337/playground&lt;/a&gt; in your browser to start playing with your GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; Do &lt;em&gt;&lt;strong&gt;NOT&lt;/strong&gt;&lt;/em&gt; use --mountPlayground option in production. &lt;a href=&#34;https://github.com/parse-community/parse-dashboard&#34;&gt;Parse Dashboard&lt;/a&gt; has a built-in GraphQL Playground and it is the recommended option for production apps.&lt;/p&gt; &#xA;&lt;h3&gt;Using Express.js&lt;/h3&gt; &#xA;&lt;p&gt;You can also mount the GraphQL API in an Express.js application together with the REST API or solo. You first need to create a new project and install the required dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ mkdir my-app&#xA;$ cd my-app&#xA;$ npm install parse-server express --save&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, create an &lt;code&gt;index.js&lt;/code&gt; file with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const express = require(&#39;express&#39;);&#xA;const { default: ParseServer, ParseGraphQLServer } = require(&#39;parse-server&#39;);&#xA;&#xA;const app = express();&#xA;&#xA;const parseServer = new ParseServer({&#xA;  databaseURI: &#39;mongodb://localhost:27017/test&#39;,&#xA;  appId: &#39;APPLICATION_ID&#39;,&#xA;  masterKey: &#39;MASTER_KEY&#39;,&#xA;  serverURL: &#39;http://localhost:1337/parse&#39;,&#xA;  publicServerURL: &#39;http://localhost:1337/parse&#39;&#xA;});&#xA;&#xA;const parseGraphQLServer = new ParseGraphQLServer(&#xA;  parseServer,&#xA;  {&#xA;    graphQLPath: &#39;/graphql&#39;,&#xA;    playgroundPath: &#39;/playground&#39;&#xA;  }&#xA;);&#xA;&#xA;app.use(&#39;/parse&#39;, parseServer.app); // (Optional) Mounts the REST API&#xA;parseGraphQLServer.applyGraphQL(app); // Mounts the GraphQL API&#xA;parseGraphQLServer.applyPlayground(app); // (Optional) Mounts the GraphQL Playground - do NOT use in Production&#xA;&#xA;app.listen(1337, function() {&#xA;  console.log(&#39;REST API running on http://localhost:1337/parse&#39;);&#xA;  console.log(&#39;GraphQL API running on http://localhost:1337/graphql&#39;);&#xA;  console.log(&#39;GraphQL Playground running on http://localhost:1337/playground&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally start your app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ npx mongodb-runner start&#xA;$ node index.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After starting the app, you can visit &lt;a href=&#34;http://localhost:1337/playground&#34;&gt;http://localhost:1337/playground&lt;/a&gt; in your browser to start playing with your GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/em&gt; Do &lt;em&gt;&lt;strong&gt;NOT&lt;/strong&gt;&lt;/em&gt; mount the GraphQL Playground in production. &lt;a href=&#34;https://github.com/parse-community/parse-dashboard&#34;&gt;Parse Dashboard&lt;/a&gt; has a built-in GraphQL Playground and it is the recommended option for production apps.&lt;/p&gt; &#xA;&lt;h2&gt;Checking the API health&lt;/h2&gt; &#xA;&lt;p&gt;Run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;query Health {&#xA;  health&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should receive the following response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;health&#34;: true&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating your first class&lt;/h2&gt; &#xA;&lt;p&gt;Since your application does not have any schema yet, you can use the &lt;code&gt;createClass&lt;/code&gt; mutation to create your first class. Run the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;mutation CreateClass {&#xA;  createClass(&#xA;    name: &#34;GameScore&#34;&#xA;    schemaFields: {&#xA;      addStrings: [{ name: &#34;playerName&#34; }]&#xA;      addNumbers: [{ name: &#34;score&#34; }]&#xA;      addBooleans: [{ name: &#34;cheatMode&#34; }]&#xA;    }&#xA;  ) {&#xA;    name&#xA;    schemaFields {&#xA;      name&#xA;      __typename&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should receive the following response:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;createClass&#34;: {&#xA;      &#34;name&#34;: &#34;GameScore&#34;,&#xA;      &#34;schemaFields&#34;: [&#xA;        {&#xA;          &#34;name&#34;: &#34;objectId&#34;,&#xA;          &#34;__typename&#34;: &#34;SchemaStringField&#34;&#xA;        },&#xA;        {&#xA;          &#34;name&#34;: &#34;updatedAt&#34;,&#xA;          &#34;__typename&#34;: &#34;SchemaDateField&#34;&#xA;        },&#xA;        {&#xA;          &#34;name&#34;: &#34;createdAt&#34;,&#xA;          &#34;__typename&#34;: &#34;SchemaDateField&#34;&#xA;        },&#xA;        {&#xA;          &#34;name&#34;: &#34;playerName&#34;,&#xA;          &#34;__typename&#34;: &#34;SchemaStringField&#34;&#xA;        },&#xA;        {&#xA;          &#34;name&#34;: &#34;score&#34;,&#xA;          &#34;__typename&#34;: &#34;SchemaNumberField&#34;&#xA;        },&#xA;        {&#xA;          &#34;name&#34;: &#34;cheatMode&#34;,&#xA;          &#34;__typename&#34;: &#34;SchemaBooleanField&#34;&#xA;        },&#xA;        {&#xA;          &#34;name&#34;: &#34;ACL&#34;,&#xA;          &#34;__typename&#34;: &#34;SchemaACLField&#34;&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using automatically generated operations&lt;/h2&gt; &#xA;&lt;p&gt;Parse Server learned from the first class that you created and now you have the &lt;code&gt;GameScore&lt;/code&gt; class in your schema. You can now start using the automatically generated operations!&lt;/p&gt; &#xA;&lt;p&gt;Run the following to create your first object:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;mutation CreateGameScore {&#xA;  createGameScore(&#xA;    fields: {&#xA;      playerName: &#34;Sean Plott&#34;&#xA;      score: 1337&#xA;      cheatMode: false&#xA;    }&#xA;  ) {&#xA;    id&#xA;    updatedAt&#xA;    createdAt&#xA;    playerName&#xA;    score&#xA;    cheatMode&#xA;    ACL&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should receive a response similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;createGameScore&#34;: {&#xA;      &#34;id&#34;: &#34;XN75D94OBD&#34;,&#xA;      &#34;updatedAt&#34;: &#34;2019-09-17T06:50:26.357Z&#34;,&#xA;      &#34;createdAt&#34;: &#34;2019-09-17T06:50:26.357Z&#34;,&#xA;      &#34;playerName&#34;: &#34;Sean Plott&#34;,&#xA;      &#34;score&#34;: 1337,&#xA;      &#34;cheatMode&#34;: false,&#xA;      &#34;ACL&#34;: null&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also run a query to this new class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;query GameScores {&#xA;  gameScores {&#xA;    results {&#xA;      id&#xA;      updatedAt&#xA;      createdAt&#xA;      playerName&#xA;      score&#xA;      cheatMode&#xA;      ACL&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should receive a response similar to this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;gameScores&#34;: {&#xA;      &#34;results&#34;: [&#xA;        {&#xA;          &#34;id&#34;: &#34;XN75D94OBD&#34;,&#xA;          &#34;updatedAt&#34;: &#34;2019-09-17T06:50:26.357Z&#34;,&#xA;          &#34;createdAt&#34;: &#34;2019-09-17T06:50:26.357Z&#34;,&#xA;          &#34;playerName&#34;: &#34;Sean Plott&#34;,&#xA;          &#34;score&#34;: 1337,&#xA;          &#34;cheatMode&#34;: false,&#xA;          &#34;ACL&#34;: null&#xA;        }&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Customizing your GraphQL Schema&lt;/h2&gt; &#xA;&lt;p&gt;Parse GraphQL Server allows you to create a custom GraphQL schema with own queries and mutations to be merged with the auto-generated ones. You can resolve these operations using your regular cloud code functions.&lt;/p&gt; &#xA;&lt;p&gt;To start creating your custom schema, you need to code a &lt;code&gt;schema.graphql&lt;/code&gt; file and initialize Parse Server with &lt;code&gt;--graphQLSchema&lt;/code&gt; and &lt;code&gt;--cloud&lt;/code&gt; options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ parse-server --appId APPLICATION_ID --masterKey MASTER_KEY --databaseURI mongodb://localhost/test --publicServerURL http://localhost:1337/parse --cloud ./cloud/main.js --graphQLSchema ./cloud/schema.graphql --mountGraphQL --mountPlayground&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Creating your first custom query &#xA; &lt;!-- omit in toc --&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Use the code below for your &lt;code&gt;schema.graphql&lt;/code&gt; and &lt;code&gt;main.js&lt;/code&gt; files. Then restart your Parse Server.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;# schema.graphql&#xA;extend type Query {&#xA;  hello: String! @resolve&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// main.js&#xA;Parse.Cloud.define(&#39;hello&#39;, async () =&amp;gt; {&#xA;  return &#39;Hello world!&#39;;&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can now run your custom query using GraphQL Playground:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-graphql&#34;&gt;query {&#xA;  hello&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should receive the response below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;data&#34;: {&#xA;    &#34;hello&#34;: &#34;Hello world!&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Learning more&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://docs.parseplatform.org/graphql/guide/&#34;&gt;Parse GraphQL Guide&lt;/a&gt; is a very good source for learning how to use the Parse GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;You also have a very powerful tool inside your GraphQL Playground. Please look at the right side of your GraphQL Playground. You will see the &lt;code&gt;DOCS&lt;/code&gt; and &lt;code&gt;SCHEMA&lt;/code&gt; menus. They are automatically generated by analyzing your application schema. Please refer to them and learn more about everything that you can do with your Parse GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, the &lt;a href=&#34;https://graphql.org/learn/&#34;&gt;GraphQL Learn Section&lt;/a&gt; is a very good source to learn more about the power of the GraphQL language.&lt;/p&gt; &#xA;&lt;h1&gt;Upgrading to 3.0.0&lt;/h1&gt; &#xA;&lt;p&gt;Starting 3.0.0, parse-server uses the JS SDK version 2.0. In short, parse SDK v2.0 removes the backbone style callbacks as well as the Parse.Promise object in favor of native promises. All the Cloud Code interfaces also have been updated to reflect those changes, and all backbone style response objects are removed and replaced by Promise style resolution.&lt;/p&gt; &#xA;&lt;p&gt;We have written up a &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/3.0.0.md&#34;&gt;migration guide&lt;/a&gt;, hoping this will help you transition to the next major release.&lt;/p&gt; &#xA;&lt;h1&gt;Want to ride the bleeding edge?&lt;/h1&gt; &#xA;&lt;p&gt;It is recommend to use builds deployed npm for many reasons, but if you want to use the latest not-yet-released version of parse-server, you can do so by depending directly on this branch:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install parse-community/parse-server.git#master&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Experimenting &#xA; &lt;!-- omit in toc --&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You can also use your own forks, and work in progress branches by specifying them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install github:myUsername/parse-server#my-awesome-feature&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And don&#39;t forget, if you plan to deploy it remotely, you should run &lt;code&gt;npm install&lt;/code&gt; with the &lt;code&gt;--save&lt;/code&gt; option.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;We really want Parse to be yours, to see it grow and thrive in the open source community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/parse-community/parse-server/alpha/CONTRIBUTING.md&#34;&gt;Contributing to Parse Server guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Contributors&lt;/h1&gt; &#xA;&lt;p&gt;This project exists thanks to all the people who contribute... we&#39;d love to see your face on this list!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/parse-community/graphs/contributors&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/contributors.svg?width=890&amp;amp;button=false&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Sponsors&lt;/h1&gt; &#xA;&lt;p&gt;Support this project by becoming a sponsor. Your logo will show up here with a link to your website. &lt;a href=&#34;https://opencollective.com/parse-server#sponsor&#34;&gt;Become a sponsor!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/parse-server/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/11/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/11/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/12/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/12/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/13/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/13/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/14/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/14/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/15/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/15/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/16/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/16/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/17/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/17/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/18/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/18/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/19/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/19/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/20/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/20/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/21/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/21/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/22/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/22/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/23/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/23/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/24/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/24/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/25/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/25/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/26/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/26/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/27/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/27/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/28/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/28/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/parse-server/sponsor/29/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/sponsor/29/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Backers&lt;/h1&gt; &#xA;&lt;p&gt;Support us with a monthly donation and help us continue our activities. &lt;a href=&#34;https://opencollective.com/parse-server#backer&#34;&gt;Become a backer!&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/parse-server#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/parse-server/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;As of April 5, 2017, Parse, LLC has transferred this code to the parse-community organization, and will no longer be contributing to or distributing this code.&lt;/p&gt;</summary>
  </entry>
</feed>