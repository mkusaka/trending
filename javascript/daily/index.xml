<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-09T01:37:54Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Stuk/jszip</title>
    <updated>2022-11-09T01:37:54Z</updated>
    <id>tag:github.com,2022-11-09:/Stuk/jszip</id>
    <link href="https://github.com/Stuk/jszip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Create, read and edit .zip files with Javascript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSZip&lt;/h1&gt; &#xA;&lt;p&gt;A library for creating, reading and editing .zip files with JavaScript, with a lovely and simple API.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://stuk.github.io/jszip&#34;&gt;https://stuk.github.io/jszip&lt;/a&gt; for all the documentation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const zip = new JSZip();&#xA;&#xA;zip.file(&#34;Hello.txt&#34;, &#34;Hello World\n&#34;);&#xA;&#xA;const img = zip.folder(&#34;images&#34;);&#xA;img.file(&#34;smile.gif&#34;, imgData, {base64: true});&#xA;&#xA;zip.generateAsync({type:&#34;blob&#34;}).then(function(content) {&#xA;    // see FileSaver.js&#xA;    saveAs(content, &#34;example.zip&#34;);&#xA;});&#xA;&#xA;/*&#xA;Results in a zip containing&#xA;Hello.txt&#xA;images/&#xA;    smile.gif&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;JSZip is dual-licensed. You may use it under the MIT license &lt;em&gt;or&lt;/em&gt; the GPLv3 license. See &lt;a href=&#34;https://raw.githubusercontent.com/Stuk/jszip/main/LICENSE.markdown&#34;&gt;LICENSE.markdown&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elsewhencode/project-guidelines</title>
    <updated>2022-11-09T01:37:54Z</updated>
    <id>tag:github.com,2022-11-09:/elsewhencode/project-guidelines</id>
    <link href="https://github.com/elsewhencode/project-guidelines" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A set of best practices for JavaScript projects&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README-zh.md&#34;&gt;中文版&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README-ja.md&#34;&gt;日本語版&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README-ko.md&#34;&gt;한국어&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README-ru.md&#34;&gt;Русский&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README-pt-BR.md&#34;&gt;Português&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README-it.md&#34;&gt;Italiana&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.elsewhen.com/&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/elsewhen-logo.png&#34; width=&#34;180&#34; height=&#34;180&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Project Guidelines · &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square&#34; alt=&#34;PRs Welcome&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;While developing a new project is like rolling on a green field for you, maintaining it is a potential dark twisted nightmare for someone else. Here&#39;s a list of guidelines we&#39;ve found, written and gathered that (we think) works really well with most JavaScript projects here at &lt;a href=&#34;https://www.elsewhen.com&#34;&gt;elsewhen&lt;/a&gt;. If you want to share a best practice, or think one of these guidelines should be removed, &lt;a href=&#34;http://makeapullrequest.com&#34;&gt;feel free to share it with us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;hr&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#git&#34;&gt;Git&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#some-git-rules&#34;&gt;Some Git rules&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#git-workflow&#34;&gt;Git workflow&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#writing-good-commit-messages&#34;&gt;Writing good commit messages&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#environments&#34;&gt;Environments&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#consistent-dev-environments&#34;&gt;Consistent dev environments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#consistent-dependencies&#34;&gt;Consistent dependencies&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#dependencies&#34;&gt;Dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#testing&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#structure-and-naming&#34;&gt;Structure and Naming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#code-style&#34;&gt;Code style&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#code-style-check&#34;&gt;Some code style guidelines&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#enforcing-code-style-standards&#34;&gt;Enforcing code style standards&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#logging&#34;&gt;Logging&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#api-design&#34;&gt;API design&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#api-security&#34;&gt;API security&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#api-documentation&#34;&gt;API documentation&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#a11y&#34;&gt;Accessibility&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;git&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;1. Git&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/branching.png&#34; alt=&#34;Git&#34;&gt; &lt;a name=&#34;some-git-rules&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1.1 Some Git rules&lt;/h3&gt; &#xA;&lt;p&gt;There are a set of rules to keep in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Perform work in a feature branch.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Because this way all work is done in isolation on a dedicated branch rather than the main branch. It allows you to submit multiple pull requests without confusion. You can iterate without polluting the master branch with potentially unstable, unfinished code. &lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Branch out from &lt;code&gt;develop&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This way, you can make sure that code in master will almost always build without problems, and can be mostly used directly for releases (this might be overkill for some projects).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Never push into &lt;code&gt;develop&lt;/code&gt; or &lt;code&gt;master&lt;/code&gt; branch. Make a Pull Request.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It notifies team members that they have completed a feature. It also enables easy peer-review of the code and dedicates forum for discussing the proposed feature.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your local &lt;code&gt;develop&lt;/code&gt; branch and do an interactive rebase before pushing your feature and making a Pull Request.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Rebasing will merge in the requested branch (&lt;code&gt;master&lt;/code&gt; or &lt;code&gt;develop&lt;/code&gt;) and apply the commits that you have made locally to the top of the history without creating a merge commit (assuming there were no conflicts). Resulting in a nice and clean history. &lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing&#34;&gt;read more ...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Resolve potential conflicts while rebasing and before making a Pull Request.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Delete local and remote feature branches after merging.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It will clutter up your list of branches with dead branches. It ensures you only ever merge the branch back into (&lt;code&gt;master&lt;/code&gt; or &lt;code&gt;develop&lt;/code&gt;) once. Feature branches should only exist while the work is still in progress.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before making a Pull Request, make sure your feature branch builds successfully and passes all tests (including code style checks).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You are about to add your code to a stable branch. If your feature-branch tests fail, there is a high chance that your destination branch build will fail too. Additionally, you need to apply code style check before making a Pull Request. It aids readability and reduces the chance of formatting fixes being mingled in with actual changes.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/.gitignore&#34;&gt;this&lt;/a&gt; &lt;code&gt;.gitignore&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It already has a list of system files that should not be sent with your code into a remote repository. In addition, it excludes setting folders and files for most used editors, as well as most common dependency folders.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Protect your &lt;code&gt;develop&lt;/code&gt; and &lt;code&gt;master&lt;/code&gt; branch.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It protects your production-ready branches from receiving unexpected and irreversible changes. read more... &lt;a href=&#34;https://help.github.com/articles/about-protected-branches/&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://confluence.atlassian.com/bitbucketserver/using-branch-permissions-776639807.html&#34;&gt;Bitbucket&lt;/a&gt; and &lt;a href=&#34;https://docs.gitlab.com/ee/user/project/protected_branches.html&#34;&gt;GitLab&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;git-workflow&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1.2 Git workflow&lt;/h3&gt; &#xA;&lt;p&gt;Because of most of the reasons above, we use &lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows#feature-branch-workflow&#34;&gt;Feature-branch-workflow&lt;/a&gt; with &lt;a href=&#34;https://www.atlassian.com/git/tutorials/merging-vs-rebasing#the-golden-rule-of-rebasing&#34;&gt;Interactive Rebasing&lt;/a&gt; and some elements of &lt;a href=&#34;https://www.atlassian.com/git/tutorials/comparing-workflows#gitflow-workflow&#34;&gt;Gitflow&lt;/a&gt; (naming and having a develop branch). The main steps are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;For a new project, initialize a git repository in the project directory. &lt;strong&gt;For subsequent features/changes this step should be ignored&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cd &amp;lt;project directory&amp;gt;&#xA;git init&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Checkout a new feature/bug-fix branch.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout -b &amp;lt;branchname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make Changes.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ...&#xA;git commit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;git add &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ... &lt;/code&gt; - you should add only files that make up a small and coherent change.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;git commit&lt;/code&gt; will start an editor which lets you separate the subject from the body.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Read more about it in &lt;em&gt;section 1.3&lt;/em&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;Tip:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You could use &lt;code&gt;git add -p&lt;/code&gt; instead, which will give you chance to review all of the introduced changes one by one, and decide whether to include them in the commit or not.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Sync with remote to get changes you’ve missed.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout develop&#xA;git pull&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This will give you a chance to deal with conflicts on your machine while rebasing (later) rather than creating a Pull Request that contains conflicts.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Update your feature branch with latest changes from develop by interactive rebase.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git checkout &amp;lt;branchname&amp;gt;&#xA;git rebase -i --autosquash develop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You can use --autosquash to squash all your commits to a single commit. Nobody wants many commits for a single feature in develop branch. &lt;a href=&#34;https://robots.thoughtbot.com/autosquashing-git-commits&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don’t have conflicts, skip this step. If you have conflicts, &lt;a href=&#34;https://help.github.com/articles/resolving-a-merge-conflict-using-the-command-line/&#34;&gt;resolve them&lt;/a&gt; and continue rebase.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git add &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ...&#xA;git rebase --continue&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Push your branch. Rebase will change history, so you&#39;ll have to use &lt;code&gt;-f&lt;/code&gt; to force changes into the remote branch. If someone else is working on your branch, use the less destructive &lt;code&gt;--force-with-lease&lt;/code&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git push -f&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;When you do a rebase, you are changing the history on your feature branch. As a result, Git will reject normal &lt;code&gt;git push&lt;/code&gt;. Instead, you&#39;ll need to use the -f or --force flag. &lt;a href=&#34;https://developer.atlassian.com/blog/2015/04/force-with-lease/&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a Pull Request.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pull request will be accepted, merged and close by a reviewer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove your local feature branch if you&#39;re done.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git branch -d &amp;lt;branchname&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;to remove all branches which are no longer on remote&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git fetch -p &amp;amp;&amp;amp; for branch in `git branch -vv --no-color | grep &#39;: gone]&#39; | awk &#39;{print $1}&#39;`; do git branch -D $branch; done&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;writing-good-commit-messages&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;1.3 Writing good commit messages&lt;/h3&gt; &#xA;&lt;p&gt;Having a good guideline for creating commits and sticking to it makes working with Git and collaborating with others a lot easier. Here are some rules of thumb (&lt;a href=&#34;https://chris.beams.io/posts/git-commit/#seven-rules&#34;&gt;source&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Separate the subject from the body with a newline between the two.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Git is smart enough to distinguish the first line of your commit message as your summary. In fact, if you try git shortlog, instead of git log, you will see a long list of commit messages, consisting of the id of the commit, and the summary only.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Limit the subject line to 50 characters and Wrap the body at 72 characters.&lt;/p&gt; &lt;p&gt;&lt;em&gt;why&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Commits should be as fine-grained and focused as possible, it is not the place to be verbose. &lt;a href=&#34;https://medium.com/@preslavrachev/what-s-with-the-50-72-rule-8a906f61f09c&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Capitalize the subject line.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Do not end the subject line with a period.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;a href=&#34;https://en.wikipedia.org/wiki/Imperative_mood&#34;&gt;imperative mood&lt;/a&gt; in the subject line.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Rather than writing messages that say what a committer has done. It&#39;s better to consider these messages as the instructions for what is going to be done after the commit is applied on the repository. &lt;a href=&#34;https://news.ycombinator.com/item?id=2079612&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use the body to explain &lt;strong&gt;what&lt;/strong&gt; and &lt;strong&gt;why&lt;/strong&gt; as opposed to &lt;strong&gt;how&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;2. Documentation&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/documentation.png&#34; alt=&#34;Documentation&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Use this &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README.sample.md&#34;&gt;template&lt;/a&gt; for &lt;code&gt;README.md&lt;/code&gt;, Feel free to add uncovered sections.&lt;/li&gt; &#xA; &lt;li&gt;For projects with more than one repository, provide links to them in their respective &lt;code&gt;README.md&lt;/code&gt; files.&lt;/li&gt; &#xA; &lt;li&gt;Keep &lt;code&gt;README.md&lt;/code&gt; updated as a project evolves.&lt;/li&gt; &#xA; &lt;li&gt;Comment your code. Try to make it as clear as possible what you are intending with each major section.&lt;/li&gt; &#xA; &lt;li&gt;If there is an open discussion on GitHub or stackoverflow about the code or approach you&#39;re using, include the link in your comment.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use comments as an excuse for a bad code. Keep your code clean.&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t use clean code as an excuse to not comment at all.&lt;/li&gt; &#xA; &lt;li&gt;Keep comments relevant as your code evolves.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;environments&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;3. Environments&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/laptop.png&#34; alt=&#34;Environments&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Define separate &lt;code&gt;development&lt;/code&gt;, &lt;code&gt;test&lt;/code&gt; and &lt;code&gt;production&lt;/code&gt; environments if needed.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Different data, tokens, APIs, ports etc... might be needed in different environments. You may want an isolated &lt;code&gt;development&lt;/code&gt; mode that calls fake API which returns predictable data, making both automated and manual testing much easier. Or you may want to enable Google Analytics only on &lt;code&gt;production&lt;/code&gt; and so on. &lt;a href=&#34;https://stackoverflow.com/questions/8332333/node-js-setting-up-environment-specific-configs-to-be-used-with-everyauth&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Load your deployment specific configurations from environment variables and never add them to the codebase as constants, &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/config.sample.js&#34;&gt;look at this sample&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You have tokens, passwords and other valuable information in there. Your config should be correctly separated from the app internals as if the codebase could be made public at any moment.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;How:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;.env&lt;/code&gt; files to store your variables and add them to &lt;code&gt;.gitignore&lt;/code&gt; to be excluded. Instead, commit a &lt;code&gt;.env.example&lt;/code&gt; which serves as a guide for developers. For production, you should still set your environment variables in the standard way. &lt;a href=&#34;https://medium.com/@rafaelvidaurre/managing-environment-variables-in-node-js-2cb45a55195f&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It’s recommended to validate environment variables before your app starts. &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/configWithTest.sample.js&#34;&gt;Look at this sample&lt;/a&gt; using &lt;code&gt;joi&lt;/code&gt; to validate provided values. &lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It may save others from hours of troubleshooting.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;consistent-dev-environments&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.1 Consistent dev environments:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Set your node version in &lt;code&gt;engines&lt;/code&gt; in &lt;code&gt;package.json&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It lets others know the version of node the project works on. &lt;a href=&#34;https://docs.npmjs.com/files/package.json#engines&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Additionally, use &lt;code&gt;nvm&lt;/code&gt; and create a &lt;code&gt;.nvmrc&lt;/code&gt; in your project root. Don&#39;t forget to mention it in the documentation.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Any one who uses &lt;code&gt;nvm&lt;/code&gt; can simply use &lt;code&gt;nvm use&lt;/code&gt; to switch to the suitable node version. &lt;a href=&#34;https://github.com/creationix/nvm&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It&#39;s a good idea to setup a &lt;code&gt;preinstall&lt;/code&gt; script that checks node and npm versions.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Some dependencies may fail when installed by newer versions of npm.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Docker image if you can.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It can give you a consistent environment across the entire workflow. Without much need to fiddle with dependencies or configs. &lt;a href=&#34;https://hackernoon.com/how-to-dockerize-a-node-js-application-4fbab45a0c19&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use local modules instead of using globally installed modules.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Lets you share your tooling with your colleague instead of expecting them to have it globally on their systems.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;consistent-dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;3.2 Consistent dependencies:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure your team members get the exact same dependencies as you.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Because you want the code to behave as expected and identical in any development machine &lt;a href=&#34;https://kostasbariotis.com/consistent-dependencies-across-teams/&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;how:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Use &lt;code&gt;package-lock.json&lt;/code&gt; on &lt;code&gt;npm@5&lt;/code&gt; or higher&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;I don&#39;t have npm@5:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Alternatively you can use &lt;code&gt;Yarn&lt;/code&gt; and make sure to mention it in &lt;code&gt;README.md&lt;/code&gt;. Your lock file and &lt;code&gt;package.json&lt;/code&gt; should have the same versions after each dependency update. &lt;a href=&#34;https://yarnpkg.com/en/&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;I don&#39;t like the name &lt;code&gt;Yarn&lt;/code&gt;:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Too bad. For older versions of &lt;code&gt;npm&lt;/code&gt;, use &lt;code&gt;—save --save-exact&lt;/code&gt; when installing a new dependency and create &lt;code&gt;npm-shrinkwrap.json&lt;/code&gt; before publishing. &lt;a href=&#34;https://docs.npmjs.com/files/package-locks&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;dependencies&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;4. Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/modules.png&#34; alt=&#34;Github&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep track of your currently available packages: e.g., &lt;code&gt;npm ls --depth=0&lt;/code&gt;. &lt;a href=&#34;https://docs.npmjs.com/cli/ls&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;See if any of your packages have become unused or irrelevant: &lt;code&gt;depcheck&lt;/code&gt;. &lt;a href=&#34;https://www.npmjs.com/package/depcheck&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You may include an unused library in your code and increase the production bundle size. Find unused dependencies and get rid of them.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before using a dependency, check its download statistics to see if it is heavily used by the community: &lt;code&gt;npm-stat&lt;/code&gt;. &lt;a href=&#34;https://npm-stat.com/&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;More usage mostly means more contributors, which usually means better maintenance, and all of these result in quickly discovered bugs and quickly developed fixes.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Before using a dependency, check to see if it has a good, mature version release frequency with a large number of maintainers: e.g., &lt;code&gt;npm view async&lt;/code&gt;. &lt;a href=&#34;https://docs.npmjs.com/cli/view&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Having loads of contributors won&#39;t be as effective if maintainers don&#39;t merge fixes and patches quickly enough.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If a less known dependency is needed, discuss it with the team before using it.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Always make sure your app works with the latest version of its dependencies without breaking: &lt;code&gt;npm outdated&lt;/code&gt;. &lt;a href=&#34;https://docs.npmjs.com/cli/outdated&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Dependency updates sometimes contain breaking changes. Always check their release notes when updates show up. Update your dependencies one by one, that makes troubleshooting easier if anything goes wrong. Use a cool tool such as &lt;a href=&#34;https://github.com/tjunnone/npm-check-updates&#34;&gt;npm-check-updates&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check to see if the package has known security vulnerabilities with, e.g., &lt;a href=&#34;https://snyk.io/test?utm_source=risingstack_blog&#34;&gt;Snyk&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;testing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;5. Testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/testing.png&#34; alt=&#34;Testing&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Have a &lt;code&gt;test&lt;/code&gt; mode environment if needed.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;While sometimes end to end testing in &lt;code&gt;production&lt;/code&gt; mode might seem enough, there are some exceptions: One example is you may not want to enable analytical information on a &#39;production&#39; mode and pollute someone&#39;s dashboard with test data. The other example is that your API may have rate limits in &lt;code&gt;production&lt;/code&gt; and blocks your test calls after a certain amount of requests.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Place your test files next to the tested modules using &lt;code&gt;*.test.js&lt;/code&gt; or &lt;code&gt;*.spec.js&lt;/code&gt; naming convention, like &lt;code&gt;moduleName.spec.js&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You don&#39;t want to dig through a folder structure to find a unit test. &lt;a href=&#34;https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put your additional test files into a separate test folder to avoid confusion.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Some test files don&#39;t particularly relate to any specific implementation file. You have to put it in a folder that is most likely to be found by other developers: &lt;code&gt;__test__&lt;/code&gt; folder. This name: &lt;code&gt;__test__&lt;/code&gt; is also standard now and gets picked up by most JavaScript testing frameworks.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write testable code, avoid side effects, extract side effects, write pure functions&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You want to test a business logic as separate units. You have to &#34;minimize the impact of randomness and nondeterministic processes on the reliability of your code&#34;. &lt;a href=&#34;https://medium.com/javascript-scene/tdd-the-rite-way-53c9b46f45e3&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;A pure function is a function that always returns the same output for the same input. Conversely, an impure function is one that may have side effects or depends on conditions from the outside to produce a value. That makes it less predictable. &lt;a href=&#34;https://hackernoon.com/structure-your-javascript-code-for-testability-9bc93d9c72dc&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a static type checker&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Sometimes you may need a Static type checker. It brings a certain level of reliability to your code. &lt;a href=&#34;https://medium.freecodecamp.org/why-use-static-types-in-javascript-part-1-8382da1e0adb&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run tests locally before making any pull requests to &lt;code&gt;develop&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You don&#39;t want to be the one who caused production-ready branch build to fail. Run your tests after your &lt;code&gt;rebase&lt;/code&gt; and before pushing your feature-branch to a remote repository.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Document your tests including instructions in the relevant section of your &lt;code&gt;README.md&lt;/code&gt; file.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It&#39;s a handy note you leave behind for other developers or DevOps experts or QA or anyone who gets lucky enough to work on your code.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;structure-and-naming&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;6. Structure and Naming&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/folder-tree.png&#34; alt=&#34;Structure and Naming&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Organize your files around product features / pages / components, not roles. Also, place your test files next to their implementation.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Bad&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;.&#xA;├── controllers&#xA;|   ├── product.js&#xA;|   └── user.js&#xA;├── models&#xA;|   ├── product.js&#xA;|   └── user.js&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Good&lt;/strong&gt;&lt;/p&gt; &lt;pre&gt;&lt;code&gt;.&#xA;├── product&#xA;|   ├── index.js&#xA;|   ├── product.js&#xA;|   └── product.test.js&#xA;├── user&#xA;|   ├── index.js&#xA;|   ├── user.js&#xA;|   └── user.test.js&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Instead of a long list of files, you will create small modules that encapsulate one responsibility including its test and so on. It gets much easier to navigate through and things can be found at a glance.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put your additional test files to a separate test folder to avoid confusion.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It is a time saver for other developers or DevOps experts in your team.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a &lt;code&gt;./config&lt;/code&gt; folder and don&#39;t make different config files for different environments.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;When you break down a config file for different purposes (database, API and so on); putting them in a folder with a very recognizable name such as &lt;code&gt;config&lt;/code&gt; makes sense. Just remember not to make different config files for different environments. It doesn&#39;t scale cleanly, as more deploys of the app are created, new environment names are necessary. Values to be used in config files should be provided by environment variables. &lt;a href=&#34;https://medium.com/@fedorHK/no-config-b3f1171eecd5&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Put your scripts in a &lt;code&gt;./scripts&lt;/code&gt; folder. This includes &lt;code&gt;bash&lt;/code&gt; and &lt;code&gt;node&lt;/code&gt; scripts.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It&#39;s very likely you may end up with more than one script, production build, development build, database feeders, database synchronization and so on.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Place your build output in a &lt;code&gt;./build&lt;/code&gt; folder. Add &lt;code&gt;build/&lt;/code&gt; to &lt;code&gt;.gitignore&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Name it what you like, &lt;code&gt;dist&lt;/code&gt; is also cool. But make sure that keep it consistent with your team. What gets in there is most likely generated (bundled, compiled, transpiled) or moved there. What you can generate, your teammates should be able to generate too, so there is no point committing them into your remote repository. Unless you specifically want to.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;code-style&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;7. Code style&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/code-style.png&#34; alt=&#34;Code style&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;code-style-check&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;7.1 Some code style guidelines&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use stage-2 and higher JavaScript (modern) syntax for new projects. For old project stay consistent with existing syntax unless you intend to modernise the project.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This is all up to you. We use transpilers to use advantages of new syntax. stage-2 is more likely to eventually become part of the spec with only minor revisions.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Include code style check in your build process.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Breaking your build is one way of enforcing code style to your code. It prevents you from taking it less seriously. Do it for both client and server-side code. &lt;a href=&#34;https://www.robinwieruch.de/react-eslint-webpack-babel/&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;a href=&#34;http://eslint.org/&#34;&gt;ESLint - Pluggable JavaScript linter&lt;/a&gt; to enforce code style.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;We simply prefer &lt;code&gt;eslint&lt;/code&gt;, you don&#39;t have to. It has more rules supported, the ability to configure the rules, and ability to add custom rules.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;a href=&#34;https://github.com/airbnb/javascript&#34;&gt;Airbnb JavaScript Style Guide&lt;/a&gt; for JavaScript, &lt;a href=&#34;https://www.gitbook.com/book/duk/airbnb-javascript-guidelines/details&#34;&gt;Read more&lt;/a&gt;. Use the javascript style guide required by the project or your team.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We use &lt;a href=&#34;https://github.com/gajus/eslint-plugin-flowtype&#34;&gt;Flow type style check rules for ESLint&lt;/a&gt; when using &lt;a href=&#34;https://flow.org/&#34;&gt;FlowType&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Flow introduces few syntaxes that also need to follow certain code style and be checked.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;code&gt;.eslintignore&lt;/code&gt; to exclude files or folders from code style checks.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;You don&#39;t have to pollute your code with &lt;code&gt;eslint-disable&lt;/code&gt; comments whenever you need to exclude a couple of files from style checking.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Remove any of your &lt;code&gt;eslint&lt;/code&gt; disable comments before making a Pull Request.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It&#39;s normal to disable style check while working on a code block to focus more on the logic. Just remember to remove those &lt;code&gt;eslint-disable&lt;/code&gt; comments and follow the rules.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Depending on the size of the task use &lt;code&gt;//TODO:&lt;/code&gt; comments or open a ticket.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;So then you can remind yourself and others about a small task (like refactoring a function or updating a comment). For larger tasks use &lt;code&gt;//TODO(#3456)&lt;/code&gt; which is enforced by a lint rule and the number is an open ticket.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Always comment and keep them relevant as code changes. Remove commented blocks of code.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Your code should be as readable as possible, you should get rid of anything distracting. If you refactored a function, don&#39;t just comment out the old one, remove it.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Avoid irrelevant or funny comments, logs or naming.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;While your build process may(should) get rid of them, sometimes your source code may get handed over to another company/client and they may not share the same banter.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your names search-able with meaningful distinctions avoid shortened names. For functions use long, descriptive names. A function name should be a verb or a verb phrase, and it needs to communicate its intention.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It makes it more natural to read the source code.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Organize your functions in a file according to the step-down rule. Higher level functions should be on top and lower levels below.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;It makes it more natural to read the source code.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;enforcing-code-style-standards&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;7.2 Enforcing code style standards&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a &lt;a href=&#34;http://editorconfig.org/&#34;&gt;.editorconfig&lt;/a&gt; file which helps developers define and maintain consistent coding styles between different editors and IDEs on the project.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The EditorConfig project consists of a file format for defining coding styles and a collection of text editor plugins that enable editors to read the file format and adhere to defined styles. EditorConfig files are easily readable and they work nicely with version control systems.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Have your editor notify you about code style errors. Use &lt;a href=&#34;https://github.com/prettier/eslint-plugin-prettier&#34;&gt;eslint-plugin-prettier&lt;/a&gt; and &lt;a href=&#34;https://github.com/prettier/eslint-config-prettier&#34;&gt;eslint-config-prettier&lt;/a&gt; with your existing ESLint configuration. &lt;a href=&#34;https://github.com/prettier/eslint-config-prettier#installation&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consider using Git hooks.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Git hooks greatly increase a developer&#39;s productivity. Make changes, commit and push to staging or production environments without the fear of breaking builds. &lt;a href=&#34;http://githooks.com/&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use Prettier with a precommit hook.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;While &lt;code&gt;prettier&lt;/code&gt; itself can be very powerful, it&#39;s not very productive to run it simply as an npm task alone each time to format code. This is where &lt;code&gt;lint-staged&lt;/code&gt; (and &lt;code&gt;husky&lt;/code&gt;) come into play. Read more on configuring &lt;code&gt;lint-staged&lt;/code&gt; &lt;a href=&#34;https://github.com/okonet/lint-staged#configuration&#34;&gt;here&lt;/a&gt; and on configuring &lt;code&gt;husky&lt;/code&gt; &lt;a href=&#34;https://github.com/typicode/husky&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;logging&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;8. Logging&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/logging.png&#34; alt=&#34;Logging&#34;&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Avoid client-side console logs in production&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Even though your build process can (should) get rid of them, make sure that your code style checker warns you about leftover console logs.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Produce readable production logging. Ideally use logging libraries to be used in production mode (such as &lt;a href=&#34;https://github.com/winstonjs/winston&#34;&gt;winston&lt;/a&gt; or &lt;a href=&#34;https://github.com/trentm/node-bunyan&#34;&gt;node-bunyan&lt;/a&gt;).&lt;/p&gt; &lt;pre&gt;&lt;code&gt;_Why:_&#xA;&amp;gt; It makes your troubleshooting less unpleasant with colorization, timestamps, log to a file in addition to the console or even logging to a file that rotates daily. [read more...](https://blog.risingstack.com/node-js-logging-tutorial/)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;api&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;9. API&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a name=&#34;api-design&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/api.png&#34; alt=&#34;API&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;9.1 API design&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Because we try to enforce development of sanely constructed RESTful interfaces, which team members and clients can consume simply and consistently.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Lack of consistency and simplicity can massively increase integration and maintenance costs. Which is why &lt;code&gt;API design&lt;/code&gt; is included in this document.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;We mostly follow resource-oriented design. It has three main factors: resources, collection, and URLs.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;A resource has data, gets nested, and there are methods that operate against it.&lt;/li&gt; &#xA;   &lt;li&gt;A group of resources is called a collection.&lt;/li&gt; &#xA;   &lt;li&gt;URL identifies the online location of resource or collection.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This is a very well-known design to developers (your main API consumers). Apart from readability and ease of use, it allows us to write generic libraries and connectors without even knowing what the API is about.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;use kebab-case for URLs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;use camelCase for parameters in the query string or resource fields.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;use plural kebab-case for resource names in URLs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Always use a plural nouns for naming a url pointing to a collection: &lt;code&gt;/users&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Basically, it reads better and keeps URLs consistent. &lt;a href=&#34;https://apigee.com/about/blog/technology/restful-api-design-plural-nouns-and-concrete-names&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the source code convert plurals to variables and properties with a List suffix.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why&lt;/em&gt;:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Plural is nice in the URL but in the source code, it’s just too subtle and error-prone.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Always use a singular concept that starts with a collection and ends to an identifier:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;/students/245743&#xA;/airports/kjfk&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Avoid URLs like this:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;GET /blogs/:blogId/posts/:postId/summary&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This is not pointing to a resource but to a property instead. You can pass the property as a parameter to trim your response.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Keep verbs out of your resource URLs.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Because if you use a verb for each resource operation you soon will have a huge list of URLs and no consistent pattern which makes it difficult for developers to learn. Plus we use verbs for something else.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use verbs for non-resources. In this case, your API doesn&#39;t return any resources. Instead, you execute an operation and return the result. These &lt;strong&gt;are not&lt;/strong&gt; CRUD (create, retrieve, update, and delete) operations:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;/translate?text=Hallo&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Because for CRUD we use HTTP methods on &lt;code&gt;resource&lt;/code&gt; or &lt;code&gt;collection&lt;/code&gt; URLs. The verbs we were talking about are actually &lt;code&gt;Controllers&lt;/code&gt;. You usually don&#39;t develop many of these. &lt;a href=&#34;https://github.com/byrondover/api-guidelines/raw/master/Guidelines.md#controller&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The request body or response type is JSON then please follow &lt;code&gt;camelCase&lt;/code&gt; for &lt;code&gt;JSON&lt;/code&gt; property names to maintain the consistency.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This is a JavaScript project guideline, where the programming language for generating and parsing JSON is assumed to be JavaScript.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Even though a resource is a singular concept that is similar to an object instance or database record, you should not use your &lt;code&gt;table_name&lt;/code&gt; for a resource name and &lt;code&gt;column_name&lt;/code&gt; resource property.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Because your intention is to expose Resources, not your database schema details.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Again, only use nouns in your URL when naming your resources and don’t try to explain their functionality.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Only use nouns in your resource URLs, avoid endpoints like &lt;code&gt;/addNewUser&lt;/code&gt; or &lt;code&gt;/updateUser&lt;/code&gt; . Also avoid sending resource operations as a parameter.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Explain the CRUD functionalities using HTTP methods:&lt;/p&gt; &lt;p&gt;&lt;em&gt;How:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;GET&lt;/code&gt;: To retrieve a representation of a resource.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;POST&lt;/code&gt;: To create new resources and sub-resources.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;PUT&lt;/code&gt;: To update existing resources.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;PATCH&lt;/code&gt;: To update existing resources. It only updates the fields that were supplied, leaving the others alone.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;DELETE&lt;/code&gt;: To delete existing resources.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For nested resources, use the relation between them in the URL. For instance, using &lt;code&gt;id&lt;/code&gt; to relate an employee to a company.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;This is a natural way to make resources explorable.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;How:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;GET /schools/2/students &lt;/code&gt; , should get the list of all students from school 2.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;GET /schools/2/students/31&lt;/code&gt; , should get the details of student 31, which belongs to school 2.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;DELETE /schools/2/students/31&lt;/code&gt; , should delete student 31, which belongs to school 2.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;PUT /schools/2/students/31&lt;/code&gt; , should update info of student 31, Use PUT on resource-URL only, not collection.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;code&gt;POST /schools&lt;/code&gt; , should create a new school and return the details of the new school created. Use POST on collection-URLs.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use a simple ordinal number for a version with a &lt;code&gt;v&lt;/code&gt; prefix (v1, v2). Move it all the way to the left in the URL so that it has the highest scope:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;http://api.domain.com/v1/schools/3/students&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;When your APIs are public for other third parties, upgrading the APIs with some breaking change would also lead to breaking the existing products or services using your APIs. Using versions in your URL can prevent that from happening. &lt;a href=&#34;https://apigee.com/about/blog/technology/restful-api-design-tips-versioning&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Response messages must be self-descriptive. A good error message response might look something like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;code&#34;: 1234,&#xA;  &#34;message&#34;: &#34;Something bad happened&#34;,&#xA;  &#34;description&#34;: &#34;More details&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;or for validation errors:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;code&#34;: 2314,&#xA;  &#34;message&#34;: &#34;Validation Failed&#34;,&#xA;  &#34;errors&#34;: [&#xA;    {&#xA;      &#34;code&#34;: 1233,&#xA;      &#34;field&#34;: &#34;email&#34;,&#xA;      &#34;message&#34;: &#34;Invalid email&#34;&#xA;    },&#xA;    {&#xA;      &#34;code&#34;: 1234,&#xA;      &#34;field&#34;: &#34;password&#34;,&#xA;      &#34;message&#34;: &#34;No password provided&#34;&#xA;    }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;developers depend on well-designed errors at the critical times when they are troubleshooting and resolving issues after the applications they&#39;ve built using your APIs are in the hands of their users.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;&lt;em&gt;Note: Keep security exception messages as generic as possible. For instance, Instead of saying ‘incorrect password’, you can reply back saying ‘invalid username or password’ so that we don’t unknowingly inform user that username was indeed correct and only the password was incorrect.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use these status codes to send with your response to describe whether &lt;strong&gt;everything worked&lt;/strong&gt;, The &lt;strong&gt;client app did something wrong&lt;/strong&gt; or The &lt;strong&gt;API did something wrong&lt;/strong&gt;.&lt;/p&gt; &lt;pre&gt;&lt;code&gt;_Which ones:_&#xA;&amp;gt; `200 OK` response represents success for `GET`, `PUT` or `POST` requests.&#xA;&#xA;&amp;gt; `201 Created` for when a new instance is created. Creating a new instance, using `POST` method returns `201` status code.&#xA;&#xA;&amp;gt; `204 No Content` response represents success but there is no content to be sent in the response. Use it when `DELETE` operation succeeds.&#xA;&#xA;&amp;gt; `304 Not Modified` response is to minimize information transfer when the recipient already has cached representations.&#xA;&#xA;&amp;gt; `400 Bad Request` for when the request was not processed, as the server could not understand what the client is asking for.&#xA;&#xA;&amp;gt; `401 Unauthorized` for when the request lacks valid credentials and it should re-request with the required credentials.&#xA;&#xA;&amp;gt; `403 Forbidden` means the server understood the request but refuses to authorize it.&#xA;&#xA;&amp;gt; `404 Not Found` indicates that the requested resource was not found.&#xA;&#xA;&amp;gt; `500 Internal Server Error` indicates that the request is valid, but the server could not fulfill it due to some unexpected condition.&#xA;&#xA;_Why:_&#xA;&amp;gt; Most API providers use a small subset HTTP status codes. For example, the Google GData API uses only 10 status codes, Netflix uses 9, and Digg, only 8. Of course, these responses contain a body with additional information. There are over 70 HTTP status codes. However, most developers don&#39;t have all 70 memorized. So if you choose status codes that are not very common you will force application developers away from building their apps and over to wikipedia to figure out what you&#39;re trying to tell them. [read more...](https://apigee.com/about/blog/technology/restful-api-design-what-about-errors)&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide total numbers of resources in your response.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Accept &lt;code&gt;limit&lt;/code&gt; and &lt;code&gt;offset&lt;/code&gt; parameters.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The amount of data the resource exposes should also be taken into account. The API consumer doesn&#39;t always need the full representation of a resource. Use a fields query parameter that takes a comma separated list of fields to include:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;GET /students?fields=id,name,age,class&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Pagination, filtering, and sorting don’t need to be supported from start for all resources. Document those resources that offer filtering and sorting.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;api-security&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;9.2 API security&lt;/h3&gt; &#xA;&lt;p&gt;These are some basic security best practices:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Don&#39;t use basic authentication unless over a secure connection (HTTPS). Authentication tokens must not be transmitted in the URL: &lt;code&gt;GET /users/123?token=asdf....&lt;/code&gt;&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Because Token, or user ID and password are passed over the network as clear text (it is base64 encoded, but base64 is a reversible encoding), the basic authentication scheme is not secure. &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTTP/Authentication&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Tokens must be transmitted using the Authorization header on every request: &lt;code&gt;Authorization: Bearer xxxxxx, Extra yyyyy&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Authorization Code should be short-lived.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Reject any non-TLS requests by not responding to any HTTP request to avoid any insecure data exchange. Respond to HTTP requests by &lt;code&gt;403 Forbidden&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consider using Rate Limiting.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;To protect your APIs from bot threats that call your API thousands of times per hour. You should consider implementing rate limit early on.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Setting HTTP headers appropriately can help to lock down and secure your web application. &lt;a href=&#34;https://github.com/helmetjs/helmet&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Your API should convert the received data to their canonical form or reject them. Return 400 Bad Request with details about any errors from bad or missing data.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;All the data exchanged with the REST API must be validated by the API.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Serialize your JSON.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;A key concern with JSON encoders is preventing arbitrary JavaScript remote code execution within the browser... or, if you&#39;re using node.js, on the server. It&#39;s vital that you use a proper JSON serializer to encode user-supplied data properly to prevent the execution of user-supplied input on the browser.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Validate the content-type and mostly use &lt;code&gt;application/*json&lt;/code&gt; (Content-Type header).&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;For instance, accepting the &lt;code&gt;application/x-www-form-urlencoded&lt;/code&gt; mime type allows the attacker to create a form and trigger a simple POST request. The server should never assume the Content-Type. A lack of Content-Type header or an unexpected Content-Type header should result in the server rejecting the content with a &lt;code&gt;4XX&lt;/code&gt; response.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Check the API Security Checklist Project. &lt;a href=&#34;https://github.com/shieldfy/API-Security-Checklist&#34;&gt;read more...&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;api-documentation&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;9.3 API documentation&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fill the &lt;code&gt;API Reference&lt;/code&gt; section in &lt;a href=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/README.sample.md&#34;&gt;README.md template&lt;/a&gt; for API.&lt;/li&gt; &#xA; &lt;li&gt;Describe API authentication methods with a code sample.&lt;/li&gt; &#xA; &lt;li&gt;Explaining The URL Structure (path only, no root URL) including The request type (Method).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For each endpoint explain:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;URL Params If URL Params exist, specify them in accordance with name mentioned in URL section:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Required: id=[integer]&#xA;Optional: photo_id=[alphanumeric]&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If the request type is POST, provide working examples. URL Params rules apply here too. Separate the section into Optional and Required.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Success Response, What should be the status code and is there any return data? This is useful when people need to know what their callbacks should expect:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;Code: 200&#xA;Content: { id : 12 }&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Error Response, Most endpoints have many ways to fail. From unauthorized access to wrongful parameters etc. All of those should be listed here. It might seem repetitive, but it helps prevent assumptions from being made. For example&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;code&#34;: 401,&#xA;  &#34;message&#34;: &#34;Authentication failed&#34;,&#xA;  &#34;description&#34;: &#34;Invalid username or password&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use API design tools, There are lots of open source tools for good documentation such as &lt;a href=&#34;https://apiblueprint.org/&#34;&gt;API Blueprint&lt;/a&gt; and &lt;a href=&#34;https://swagger.io/&#34;&gt;Swagger&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a name=&#34;a11y&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;10. Accessibility (&lt;a href=&#34;https://www.a11yproject.com/&#34;&gt;a11y&lt;/a&gt;)&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/accessibility.png&#34; alt=&#34;Accessibility&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;10.1 Laying accessibility practices in place&lt;/h3&gt; &#xA;&lt;p&gt;Take the following steps &lt;strong&gt;at the start of your project&lt;/strong&gt; to ensure an intentional level of accessibility is sustained:&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Web content is &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Learn/Accessibility/HTML&#34;&gt;accessible by default&lt;/a&gt;. We compromise this when we build complex features. It&#39;s much easier to reduce this impact by considering accessibility from the start rather than re-implement these features later.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Arrange to do regular audits using &lt;a href=&#34;https://developers.google.com/web/tools/lighthouse#devtools&#34;&gt;lighthouse&lt;/a&gt; &lt;a href=&#34;https://web.dev/lighthouse-accessibility/&#34;&gt;accessibility&lt;/a&gt; or the &lt;a href=&#34;https://chrome.google.com/webstore/detail/axe-devtools-web-accessib/lhdoppojpmngadmnindnejefpokejbdd?hl=en-US&#34;&gt;axe DevTools extension&lt;/a&gt;. Agree on a minimum score based on your projects requirements. The scoring in both tools is based on &lt;a href=&#34;https://github.com/dequelabs/axe-core/raw/develop/doc/rule-descriptions.md#wcag-21-level-a--aa-rules&#34;&gt;axe user impact assessments&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; &lt;a href=&#34;https://web.dev/lighthouse-accessibility/#additional-items-to-manually-check&#34;&gt;some important checks&lt;/a&gt; must be done manually, e.g. logical tab order. The above tools list these as manual/guided tests alongside the automated results. With axe you have to save your automated results to view these.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install an a11y linter:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;React: &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-jsx-a11y&#34;&gt;eslint-plugin-jsx-a11y&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Angular: &lt;a href=&#34;https://github.com/mgechev/codelyzer&#34;&gt;Angular Codelyzer&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Vue: &lt;a href=&#34;https://github.com/vue-a11y/eslint-plugin-vuejs-accessibility&#34;&gt;eslint-plugin-vuejs-accessibility&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;A linter will automatically check that a basic level of accessibility is met by your project and is relatively easy to set up.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Set up and use a11y testing using &lt;a href=&#34;https://www.youtube.com/watch?v=-n5Ul7WPc3Y&amp;amp;list=PLMlWGnpsViOMt24a-Y_dybv68H-kj6Un6&amp;amp;t=1649s&#34;&gt;axe-core&lt;/a&gt; or similar.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you&#39;re using storybook, do &lt;a href=&#34;https://storybook.js.org/blog/accessibility-testing-with-storybook/&#34;&gt;this&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Including a11y checks in your tests will help you to catch any changes that affect your projects accessibility and your audit score.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Consider using an accessible design system such as &lt;a href=&#34;https://react-spectrum.adobe.com/react-spectrum/&#34;&gt;React Spectrum&lt;/a&gt; or &lt;a href=&#34;https://material.io/design&#34;&gt;Material Design&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;These components are highly accessible out of the box.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;10.2 Some basic accessibility rules to add to your project:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure link names are accessible. Use aria-label to describe links&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Inaccessible link elements pose barriers to accessibility.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure lists are structured correctly and list elements are used semantically.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Lists must have both parent and child elements for it to be valid. Screen readers inform users when they come to a list and how many items are in a list.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure the heading order is semantically correct.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Headers convey the structure of the page. When applied correctly the page becomes easier to navigate.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ensure text elements have sufficient contrast against page background.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Some people with low vision experience low contrast, meaning that there aren&#39;t very many bright or dark areas. Everything tends to appear about the same brightness, which makes it hard to distinguish outlines, borders, edges, and details. Text that is too close in luminance (brightness) to the background can be hard to read.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Provide alternative text for images.&lt;/p&gt; &lt;p&gt;&lt;em&gt;Why:&lt;/em&gt;&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Screen readers have no way of translating an image into words that gets read to the user, even if the image only consists of text. As a result, it&#39;s necessary for images to have short, descriptive alt text so screen reader users clearly understand the image&#39;s contents and purpose.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More accessibility rules can be found &lt;a href=&#34;https://dequeuniversity.com/rules/axe&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a name=&#34;licensing&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;11. Licensing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/elsewhencode/project-guidelines/master/images/licensing.png&#34; alt=&#34;Licensing&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Make sure you use resources that you have the rights to use. If you use libraries, remember to look for MIT, Apache or BSD but if you modify them, then take a look at the license details. Copyrighted images and videos may cause legal problems.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Sources: &lt;a href=&#34;https://blog.risingstack.com/&#34;&gt;RisingStack Engineering&lt;/a&gt;, &lt;a href=&#34;https://developer.mozilla.org/&#34;&gt;Mozilla Developer Network&lt;/a&gt;, &lt;a href=&#34;https://devcenter.heroku.com&#34;&gt;Heroku Dev Center&lt;/a&gt;, &lt;a href=&#34;https://github.com/airbnb/javascript&#34;&gt;Airbnb/javascript&lt;/a&gt;, &lt;a href=&#34;https://www.atlassian.com/git/tutorials&#34;&gt;Atlassian Git tutorials&lt;/a&gt;, &lt;a href=&#34;https://apigee.com/about/blog&#34;&gt;Apigee&lt;/a&gt;, &lt;a href=&#34;https://blog.wishtack.com&#34;&gt;Wishtack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Icons by &lt;a href=&#34;https://icons8.com/&#34;&gt;icons8&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>import-js/eslint-plugin-import</title>
    <updated>2022-11-09T01:37:54Z</updated>
    <id>tag:github.com,2022-11-09:/import-js/eslint-plugin-import</id>
    <link href="https://github.com/import-js/eslint-plugin-import" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ESLint plugin with rules that help validate proper imports.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;eslint-plugin-import&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/import-js/eslint-plugin-import&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?url=https://github-actions-badge-u3jn4tfpocch.runkit.sh/import-js/eslint-plugin-import&#34; alt=&#34;github actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/import-js/eslint-plugin-import&#34;&gt;&lt;img src=&#34;https://travis-ci.org/import-js/eslint-plugin-import.svg?branch=main&#34; alt=&#34;travis-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/import-js/eslint-plugin-import/&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/import-js/eslint-plugin-import/branch/main/graphs/badge.svg?sanitize=true&#34; alt=&#34;coverage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/import-js/eslint-plugin-import/branch/main&#34;&gt;&lt;img src=&#34;https://ci.appveyor.com/api/projects/status/3mw2fifalmjlqf56/branch/main?svg=true&#34; alt=&#34;win32 build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/eslint-plugin-import&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/eslint-plugin-import.svg?sanitize=true&#34; alt=&#34;npm&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmtrends.com/eslint-plugin-import&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dt/eslint-plugin-import.svg?maxAge=2592000&#34; alt=&#34;npm downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This plugin intends to support linting of ES2015+ (ES6+) import/export syntax, and prevent issues with misspelling of file paths and import names. All the goodness that the ES2015+ static module syntax intends to provide, marked up in your editor.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IF YOU ARE USING THIS WITH SUBLIME&lt;/strong&gt;: see the &lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/#sublimelinter-eslint&#34;&gt;bottom section&lt;/a&gt; for important info.&lt;/p&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;!-- begin auto-generated rules list --&gt; &#xA;&lt;p&gt;💼 Configurations enabled in.&lt;br&gt; ⚠️ Configurations set to warn in.&lt;br&gt; 🚫 Configurations disabled in.&lt;br&gt; ❗ Set in the &lt;code&gt;errors&lt;/code&gt; configuration.&lt;br&gt; ☑️ Set in the &lt;code&gt;recommended&lt;/code&gt; configuration.&lt;br&gt; ⌨️ Set in the &lt;code&gt;typescript&lt;/code&gt; configuration.&lt;br&gt; 🚸 Set in the &lt;code&gt;warnings&lt;/code&gt; configuration.&lt;br&gt; 🔧 Automatically fixable by the &lt;a href=&#34;https://eslint.org/docs/user-guide/command-line-interface#--fix&#34;&gt;&lt;code&gt;--fix&lt;/code&gt; CLI option&lt;/a&gt;.&lt;br&gt; 💡 Manually fixable by &lt;a href=&#34;https://eslint.org/docs/developer-guide/working-with-rules#providing-suggestions&#34;&gt;editor suggestions&lt;/a&gt;.&lt;br&gt; ❌ Deprecated.&lt;/p&gt; &#xA;&lt;h3&gt;Helpful warnings&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💼&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;⚠️&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🚫&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🔧&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💡&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;❌&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/export.md&#34;&gt;export&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid any invalid exports, i.e. re-export of the same name.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❗ ☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-deprecated.md&#34;&gt;no-deprecated&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid imported names marked with &lt;code&gt;@deprecated&lt;/code&gt; documentation tag.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-empty-named-blocks.md&#34;&gt;no-empty-named-blocks&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid empty named import blocks.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;💡&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-extraneous-dependencies.md&#34;&gt;no-extraneous-dependencies&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid the use of extraneous packages.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-mutable-exports.md&#34;&gt;no-mutable-exports&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid the use of mutable exports with &lt;code&gt;var&lt;/code&gt; or &lt;code&gt;let&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-named-as-default.md&#34;&gt;no-named-as-default&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid use of exported name as identifier of default export.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;☑️ 🚸&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-named-as-default-member.md&#34;&gt;no-named-as-default-member&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid use of exported name as property of default export.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;☑️ 🚸&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-unused-modules.md&#34;&gt;no-unused-modules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid modules without exports, or exports without matching import in another module.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Module systems&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💼&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;⚠️&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🚫&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🔧&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💡&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;❌&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-amd.md&#34;&gt;no-amd&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid AMD &lt;code&gt;require&lt;/code&gt; and &lt;code&gt;define&lt;/code&gt; calls.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-commonjs.md&#34;&gt;no-commonjs&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid CommonJS &lt;code&gt;require&lt;/code&gt; calls and &lt;code&gt;module.exports&lt;/code&gt; or &lt;code&gt;exports.*&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-import-module-exports.md&#34;&gt;no-import-module-exports&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid import statements with CommonJS module.exports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-nodejs-modules.md&#34;&gt;no-nodejs-modules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid Node.js builtin modules.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/unambiguous.md&#34;&gt;unambiguous&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid potentially ambiguous parse goal (&lt;code&gt;script&lt;/code&gt; vs. &lt;code&gt;module&lt;/code&gt;).&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Static analysis&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💼&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;⚠️&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🚫&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🔧&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💡&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;❌&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/default.md&#34;&gt;default&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure a default export is present, given a default import.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❗ ☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/named.md&#34;&gt;named&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure named imports correspond to a named export in the remote file.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❗ ☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;⌨️&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/namespace.md&#34;&gt;namespace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure imported namespaces contain dereferenced properties as they are dereferenced.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❗ ☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-absolute-path.md&#34;&gt;no-absolute-path&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid import of modules using absolute paths.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-cycle.md&#34;&gt;no-cycle&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid a module from importing a module with a dependency path back to itself.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-dynamic-require.md&#34;&gt;no-dynamic-require&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid &lt;code&gt;require()&lt;/code&gt; calls with expressions.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-internal-modules.md&#34;&gt;no-internal-modules&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid importing the submodules of other modules.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-relative-packages.md&#34;&gt;no-relative-packages&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid importing packages through relative paths.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-relative-parent-imports.md&#34;&gt;no-relative-parent-imports&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid importing modules from parent directories.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-restricted-paths.md&#34;&gt;no-restricted-paths&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce which files can be imported in a given folder.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-self-import.md&#34;&gt;no-self-import&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid a module from importing itself.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-unresolved.md&#34;&gt;no-unresolved&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure imports point to a file/module that can be resolved.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❗ ☑️&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-useless-path-segments.md&#34;&gt;no-useless-path-segments&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid unnecessary path segments in import and require statements.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-webpack-loader-syntax.md&#34;&gt;no-webpack-loader-syntax&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid webpack loader syntax in imports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Style guide&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Name&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💼&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;⚠️&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🚫&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;🔧&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;💡&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;❌&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/consistent-type-specifier-style.md&#34;&gt;consistent-type-specifier-style&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce or ban the use of inline type-only markers for named imports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/dynamic-import-chunkname.md&#34;&gt;dynamic-import-chunkname&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce a leading comment with the webpackChunkName for dynamic imports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/exports-last.md&#34;&gt;exports-last&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure all exports appear after other statements.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/extensions.md&#34;&gt;extensions&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure consistent use of file extension within the import path.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/first.md&#34;&gt;first&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ensure all imports appear before other statements.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/group-exports.md&#34;&gt;group-exports&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prefer named exports to be grouped together in a single export declaration&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/imports-first.md&#34;&gt;imports-first&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Replaced by &lt;code&gt;import/first&lt;/code&gt;.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/max-dependencies.md&#34;&gt;max-dependencies&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce the maximum number of dependencies a module can have.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/newline-after-import.md&#34;&gt;newline-after-import&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce a newline after import statements.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-anonymous-default-export.md&#34;&gt;no-anonymous-default-export&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid anonymous values as default exports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-default-export.md&#34;&gt;no-default-export&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid default exports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-duplicates.md&#34;&gt;no-duplicates&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid repeated import of the same module in multiple places.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;☑️ 🚸&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-named-default.md&#34;&gt;no-named-default&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid named default exports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-named-export.md&#34;&gt;no-named-export&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid named exports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-namespace.md&#34;&gt;no-namespace&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid namespace (a.k.a. &#34;wildcard&#34; &lt;code&gt;*&lt;/code&gt;) imports.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-unassigned-import.md&#34;&gt;no-unassigned-import&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Forbid unassigned imports&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/order.md&#34;&gt;order&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Enforce a convention in module import order.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;🔧&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/prefer-default-export.md&#34;&gt;prefer-default-export&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Prefer a default export if module exports a single name.&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!-- end auto-generated rules list --&gt; &#xA;&lt;h2&gt;&lt;code&gt;eslint-plugin-import&lt;/code&gt; for enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription.&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of &lt;code&gt;eslint-plugin-import&lt;/code&gt; and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/npm-eslint-plugin-import?utm_source=npm-eslint-plugin-import&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# inside your project&#39;s working tree&#xA;npm install eslint-plugin-import --save-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All rules are off by default. However, you may configure them manually in your &lt;code&gt;.eslintrc.(yml|json|js)&lt;/code&gt;, or extend one of the canned configs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;---&#xA;extends:&#xA;  - eslint:recommended&#xA;  - plugin:import/recommended&#xA;  # alternatively, &#39;recommended&#39; is the combination of these two rule sets:&#xA;  - plugin:import/errors&#xA;  - plugin:import/warnings&#xA;&#xA;# or configure manually:&#xA;plugins:&#xA;  - import&#xA;&#xA;rules:&#xA;  import/no-unresolved: [2, {commonjs: true, amd: true}]&#xA;  import/named: 2&#xA;  import/namespace: 2&#xA;  import/default: 2&#xA;  import/export: 2&#xA;  # etc...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;TypeScript&lt;/h1&gt; &#xA;&lt;p&gt;You may use the following snippet or assemble your own config using the granular settings described below it.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have installed &lt;a href=&#34;https://github.com/typescript-eslint/typescript-eslint/tree/HEAD/packages/parser&#34;&gt;&lt;code&gt;@typescript-eslint/parser&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/import-js/eslint-import-resolver-typescript&#34;&gt;&lt;code&gt;eslint-import-resolver-typescript&lt;/code&gt;&lt;/a&gt; which are used in the following configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;extends:&#xA;  - eslint:recommended&#xA;  - plugin:import/recommended&#xA;# the following lines do the trick&#xA;  - plugin:import/typescript&#xA;settings:&#xA;  import/resolver:&#xA;    # You will also need to install and configure the TypeScript resolver&#xA;    # See also https://github.com/import-js/eslint-import-resolver-typescript#configuration&#xA;    typescript: true&#xA;    node: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Resolvers&lt;/h1&gt; &#xA;&lt;p&gt;With the advent of module bundlers and the current state of modules and module syntax specs, it&#39;s not always obvious where &lt;code&gt;import x from &#39;module&#39;&lt;/code&gt; should look to find the file behind &lt;code&gt;module&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Up through v0.10ish, this plugin has directly used substack&#39;s &lt;a href=&#34;https://www.npmjs.com/package/resolve&#34;&gt;&lt;code&gt;resolve&lt;/code&gt;&lt;/a&gt; plugin, which implements Node&#39;s import behavior. This works pretty well in most cases.&lt;/p&gt; &#xA;&lt;p&gt;However, webpack allows a number of things in import module source strings that Node does not, such as loaders (&lt;code&gt;import &#39;file!./whatever&#39;&lt;/code&gt;) and a number of aliasing schemes, such as &lt;a href=&#34;https://webpack.github.io/docs/library-and-externals.html&#34;&gt;&lt;code&gt;externals&lt;/code&gt;&lt;/a&gt;: mapping a module id to a global name at runtime (allowing some modules to be included more traditionally via script tags).&lt;/p&gt; &#xA;&lt;p&gt;In the interest of supporting both of these, v0.11 introduces resolvers.&lt;/p&gt; &#xA;&lt;p&gt;Currently &lt;a href=&#34;https://www.npmjs.com/package/eslint-import-resolver-node&#34;&gt;Node&lt;/a&gt; and &lt;a href=&#34;https://www.npmjs.com/package/eslint-import-resolver-webpack&#34;&gt;webpack&lt;/a&gt; resolution have been implemented, but the resolvers are just npm packages, so &lt;a href=&#34;https://github.com/import-js/eslint-plugin-import/wiki/Resolvers&#34;&gt;third party packages are supported&lt;/a&gt; (and encouraged!).&lt;/p&gt; &#xA;&lt;p&gt;You can reference resolvers in several ways (in order of precedence):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as a conventional &lt;code&gt;eslint-import-resolver&lt;/code&gt; name, like &lt;code&gt;eslint-import-resolver-foo&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .eslintrc.yml&#xA;settings:&#xA;  # uses &#39;eslint-import-resolver-foo&#39;:&#xA;  import/resolver: foo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// .eslintrc.js&#xA;module.exports = {&#xA;  settings: {&#xA;    &#39;import/resolver&#39;: {&#xA;      foo: { someConfig: value }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with a full npm module name, like &lt;code&gt;my-awesome-npm-module&lt;/code&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .eslintrc.yml&#xA;settings:&#xA;  import/resolver: &#39;my-awesome-npm-module&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// .eslintrc.js&#xA;module.exports = {&#xA;  settings: {&#xA;    &#39;import/resolver&#39;: {&#xA;      &#39;my-awesome-npm-module&#39;: { someConfig: value }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;with a filesystem path to resolver, defined in this example as a &lt;code&gt;computed property&lt;/code&gt; name:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// .eslintrc.js&#xA;module.exports = {&#xA;  settings: {&#xA;    &#39;import/resolver&#39;: {&#xA;      [path.resolve(&#39;../../../my-resolver&#39;)]: { someConfig: value }&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Relative paths will be resolved relative to the source&#39;s nearest &lt;code&gt;package.json&lt;/code&gt; or the process&#39;s current working directory if no &lt;code&gt;package.json&lt;/code&gt; is found.&lt;/p&gt; &#xA;&lt;p&gt;If you are interesting in writing a resolver, see the &lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/resolvers/README.md&#34;&gt;spec&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Settings&lt;/h2&gt; &#xA;&lt;p&gt;You may set the following settings in your &lt;code&gt;.eslintrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/extensions&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A list of file extensions that will be parsed as modules and inspected for &lt;code&gt;export&lt;/code&gt;s.&lt;/p&gt; &#xA;&lt;p&gt;This defaults to &lt;code&gt;[&#39;.js&#39;]&lt;/code&gt;, unless you are using the &lt;code&gt;react&lt;/code&gt; shared config, in which case it is specified as &lt;code&gt;[&#39;.js&#39;, &#39;.jsx&#39;]&lt;/code&gt;. Despite the default, if you are using TypeScript (without the &lt;code&gt;plugin:import/typescript&lt;/code&gt; config described above) you must specify the new extensions (&lt;code&gt;.ts&lt;/code&gt;, and also &lt;code&gt;.tsx&lt;/code&gt; if using React).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;settings&#34;: {&#xA;  &#34;import/extensions&#34;: [&#xA;    &#34;.js&#34;,&#xA;    &#34;.jsx&#34;&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you require more granular extension definitions, you can use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&#34;settings&#34;: {&#xA;  &#34;import/resolver&#34;: {&#xA;    &#34;node&#34;: {&#xA;      &#34;extensions&#34;: [&#xA;        &#34;.js&#34;,&#xA;        &#34;.jsx&#34;&#xA;      ]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that this is different from (and likely a subset of) any &lt;code&gt;import/resolver&lt;/code&gt; extensions settings, which may include &lt;code&gt;.json&lt;/code&gt;, &lt;code&gt;.coffee&lt;/code&gt;, etc. which will still factor into the &lt;code&gt;no-unresolved&lt;/code&gt; rule.&lt;/p&gt; &#xA;&lt;p&gt;Also, the following &lt;code&gt;import/ignore&lt;/code&gt; patterns will overrule this list.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/ignore&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A list of regex strings that, if matched by a path, will not report the matching module if no &lt;code&gt;export&lt;/code&gt;s are found. In practice, this means rules other than &lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-unresolved.md#ignore&#34;&gt;&lt;code&gt;no-unresolved&lt;/code&gt;&lt;/a&gt; will not report on any &lt;code&gt;import&lt;/code&gt;s with (absolute filesystem) paths matching this pattern.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;no-unresolved&lt;/code&gt; has its own &lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/docs/rules/no-unresolved.md#ignore&#34;&gt;&lt;code&gt;ignore&lt;/code&gt;&lt;/a&gt; setting.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;settings:&#xA;  import/ignore:&#xA;    - \.coffee$          # fraught with parse errors&#xA;    - \.(scss|less|css)$ # can&#39;t parse unprocessed CSS modules, either&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/core-modules&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;An array of additional modules to consider as &#34;core&#34; modules--modules that should be considered resolved but have no path on the filesystem. Your resolver may already define some of these (for example, the Node resolver knows about &lt;code&gt;fs&lt;/code&gt; and &lt;code&gt;path&lt;/code&gt;), so you need not redefine those.&lt;/p&gt; &#xA;&lt;p&gt;For example, Electron exposes an &lt;code&gt;electron&lt;/code&gt; module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;electron&#39;  // without extra config, will be flagged as unresolved!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;that would otherwise be unresolved. To avoid this, you may provide &lt;code&gt;electron&lt;/code&gt; as a core module:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .eslintrc.yml&#xA;settings:&#xA;  import/core-modules: [ electron ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Electron&#39;s specific case, there is a shared config named &lt;code&gt;electron&lt;/code&gt; that specifies this for you.&lt;/p&gt; &#xA;&lt;p&gt;Contribution of more such shared configs for other platforms are welcome!&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/external-module-folders&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;An array of folders. Resolved modules only from those folders will be considered as &#34;external&#34;. By default - &lt;code&gt;[&#34;node_modules&#34;]&lt;/code&gt;. Makes sense if you have configured your path or webpack to handle your internal paths differently and want to consider modules from some folders, for example &lt;code&gt;bower_components&lt;/code&gt; or &lt;code&gt;jspm_modules&lt;/code&gt;, as &#34;external&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This option is also useful in a monorepo setup: list here all directories that contain monorepo&#39;s packages and they will be treated as external ones no matter which resolver is used.&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;code&gt;yarn&lt;/code&gt; PnP as your package manager, add the &lt;code&gt;.yarn&lt;/code&gt; folder and all your installed dependencies will be considered as &lt;code&gt;external&lt;/code&gt;, instead of &lt;code&gt;internal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Each item in this array is either a folder&#39;s name, its subpath, or its absolute prefix path:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;jspm_modules&lt;/code&gt; will match any file or folder named &lt;code&gt;jspm_modules&lt;/code&gt; or which has a direct or non-direct parent named &lt;code&gt;jspm_modules&lt;/code&gt;, e.g. &lt;code&gt;/home/me/project/jspm_modules&lt;/code&gt; or &lt;code&gt;/home/me/project/jspm_modules/some-pkg/index.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;packages/core&lt;/code&gt; will match any path that contains these two segments, for example &lt;code&gt;/home/me/project/packages/core/src/utils.js&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;/home/me/project/packages&lt;/code&gt; will only match files and directories inside this directory, and the directory itself.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please note that incomplete names are not allowed here so &lt;code&gt;components&lt;/code&gt; won&#39;t match &lt;code&gt;bower_components&lt;/code&gt; and &lt;code&gt;packages/ui&lt;/code&gt; won&#39;t match &lt;code&gt;packages/ui-utils&lt;/code&gt; (but will match &lt;code&gt;packages/ui/utils&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/parsers&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A map from parsers to file extension arrays. If a file extension is matched, the dependency parser will require and use the map key as the parser instead of the configured ESLint parser. This is useful if you&#39;re inter-op-ing with TypeScript directly using webpack, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .eslintrc.yml&#xA;settings:&#xA;  import/parsers:&#xA;    @typescript-eslint/parser: [ .ts, .tsx ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In this case, &lt;a href=&#34;https://www.npmjs.com/package/@typescript-eslint/parser&#34;&gt;&lt;code&gt;@typescript-eslint/parser&lt;/code&gt;&lt;/a&gt; must be installed and require-able from the running &lt;code&gt;eslint&lt;/code&gt; module&#39;s location (i.e., install it as a peer of ESLint).&lt;/p&gt; &#xA;&lt;p&gt;This is currently only tested with &lt;code&gt;@typescript-eslint/parser&lt;/code&gt; (and its predecessor, &lt;code&gt;typescript-eslint-parser&lt;/code&gt;) but should theoretically work with any moderately ESTree-compliant parser.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s difficult to say how well various plugin features will be supported, too, depending on how far down the rabbit hole goes. Submit an issue if you find strange behavior beyond here, but steel your heart against the likely outcome of closing with &lt;code&gt;wontfix&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/resolver&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/#resolvers&#34;&gt;resolvers&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/cache&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Settings for cache behavior. Memoization is used at various levels to avoid the copious amount of &lt;code&gt;fs.statSync&lt;/code&gt;/module parse calls required to correctly report errors.&lt;/p&gt; &#xA;&lt;p&gt;For normal &lt;code&gt;eslint&lt;/code&gt; console runs, the cache lifetime is irrelevant, as we can strongly assume that files should not be changing during the lifetime of the linter process (and thus, the cache in memory)&lt;/p&gt; &#xA;&lt;p&gt;For long-lasting processes, like &lt;a href=&#34;https://www.npmjs.com/package/eslint_d&#34;&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://www.npmjs.com/package/eslint-loader&#34;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt;, however, it&#39;s important that there be some notion of staleness.&lt;/p&gt; &#xA;&lt;p&gt;If you never use &lt;a href=&#34;https://www.npmjs.com/package/eslint_d&#34;&gt;&lt;code&gt;eslint_d&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://www.npmjs.com/package/eslint-loader&#34;&gt;&lt;code&gt;eslint-loader&lt;/code&gt;&lt;/a&gt;, you may set the cache lifetime to &lt;code&gt;Infinity&lt;/code&gt; and everything should be fine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .eslintrc.yml&#xA;settings:&#xA;  import/cache:&#xA;    lifetime: ∞  # or Infinity&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Otherwise, set some integer, and cache entries will be evicted after that many seconds have elapsed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .eslintrc.yml&#xA;settings:&#xA;  import/cache:&#xA;    lifetime: 5  # 30 is the default&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;import/internal-regex&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;A regex for packages should be treated as internal. Useful when you are utilizing a monorepo setup or developing a set of packages that depend on each other.&lt;/p&gt; &#xA;&lt;p&gt;By default, any package referenced from &lt;a href=&#34;https://raw.githubusercontent.com/import-js/eslint-plugin-import/main/#importexternal-module-folders&#34;&gt;&lt;code&gt;import/external-module-folders&lt;/code&gt;&lt;/a&gt; will be considered as &#34;external&#34;, including packages in a monorepo like yarn workspace or lerna environment. If you want to mark these packages as &#34;internal&#34; this will be useful.&lt;/p&gt; &#xA;&lt;p&gt;For example, if your packages in a monorepo are all in &lt;code&gt;@scope&lt;/code&gt;, you can configure &lt;code&gt;import/internal-regex&lt;/code&gt; like this&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;# .eslintrc.yml&#xA;settings:&#xA;  import/internal-regex: ^@scope/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;SublimeLinter-eslint&lt;/h2&gt; &#xA;&lt;p&gt;SublimeLinter-eslint introduced a change to support &lt;code&gt;.eslintignore&lt;/code&gt; files which altered the way file paths are passed to ESLint when linting during editing. This change sends a relative path instead of the absolute path to the file (as ESLint normally provides), which can make it impossible for this plugin to resolve dependencies on the filesystem.&lt;/p&gt; &#xA;&lt;p&gt;This workaround should no longer be necessary with the release of ESLint 2.0, when &lt;code&gt;.eslintignore&lt;/code&gt; will be updated to work more like a &lt;code&gt;.gitignore&lt;/code&gt;, which should support proper ignoring of absolute paths via &lt;code&gt;--stdin-filename&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;In the meantime, see &lt;a href=&#34;https://github.com/roadhump/SublimeLinter-eslint/issues/58&#34;&gt;roadhump/SublimeLinter-eslint#58&lt;/a&gt; for more details and discussion, but essentially, you may find you need to add the following &lt;code&gt;SublimeLinter&lt;/code&gt; config to your Sublime project file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;folders&#34;:&#xA;    [&#xA;        {&#xA;            &#34;path&#34;: &#34;code&#34;&#xA;        }&#xA;    ],&#xA;    &#34;SublimeLinter&#34;:&#xA;    {&#xA;        &#34;linters&#34;:&#xA;        {&#xA;            &#34;eslint&#34;:&#xA;            {&#xA;                &#34;chdir&#34;: &#34;${project}/code&#34;&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that &lt;code&gt;${project}/code&lt;/code&gt; matches the &lt;code&gt;code&lt;/code&gt; provided at &lt;code&gt;folders[0].path&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The purpose of the &lt;code&gt;chdir&lt;/code&gt; setting, in this case, is to set the working directory from which ESLint is executed to be the same as the directory on which SublimeLinter-eslint bases the relative path it provides.&lt;/p&gt; &#xA;&lt;p&gt;See the SublimeLinter docs on &lt;a href=&#34;https://www.sublimelinter.com/en/latest/linter_settings.html#chdir&#34;&gt;&lt;code&gt;chdir&lt;/code&gt;&lt;/a&gt; for more information, in case this does not work with your project.&lt;/p&gt; &#xA;&lt;p&gt;If you are not using &lt;code&gt;.eslintignore&lt;/code&gt;, or don&#39;t have a Sublime project file, you can also do the following via a &lt;code&gt;.sublimelinterrc&lt;/code&gt; file in some ancestor directory of your code:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;linters&#34;: {&#xA;    &#34;eslint&#34;: {&#xA;      &#34;args&#34;: [&#34;--stdin-filename&#34;, &#34;@&#34;]&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I also found that I needed to set &lt;code&gt;rc_search_limit&lt;/code&gt; to &lt;code&gt;null&lt;/code&gt;, which removes the file hierarchy search limit when looking up the directory tree for &lt;code&gt;.sublimelinterrc&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;p&gt;In Package Settings / SublimeLinter / User Settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;user&#34;: {&#xA;    &#34;rc_search_limit&#34;: null&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;I believe this defaults to &lt;code&gt;3&lt;/code&gt;, so you may not need to alter it depending on your project folder max depth.&lt;/p&gt;</summary>
  </entry>
</feed>