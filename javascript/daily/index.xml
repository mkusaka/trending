<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-31T01:33:27Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>TheOfficialFloW/HENlo</title>
    <updated>2022-12-31T01:33:27Z</updated>
    <id>tag:github.com,2022-12-31:/TheOfficialFloW/HENlo</id>
    <link href="https://github.com/TheOfficialFloW/HENlo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;WebKit+Kernel exploit chain for all PS Vita firmwares&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>ai/nanoid</title>
    <updated>2022-12-31T01:33:27Z</updated>
    <id>tag:github.com,2022-12-31:/ai/nanoid</id>
    <link href="https://github.com/ai/nanoid" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny (130 bytes), secure, URL-friendly, unique string ID generator for JavaScript&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Nano ID&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://ai.github.io/nanoid/logo.svg?sanitize=true&#34; align=&#34;right&#34; alt=&#34;Nano ID logo by Anton Lovchikov&#34; width=&#34;180&#34; height=&#34;94&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;English&lt;/strong&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.ru.md&#34;&gt;Русский&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.zh-CN.md&#34;&gt;简体中文&lt;/a&gt; | &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.id-ID.md&#34;&gt;Bahasa Indonesia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A tiny, secure, URL-friendly, unique&amp;nbsp;string ID&amp;nbsp;generator for&amp;nbsp;JavaScript.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;“An amazing level of senseless perfectionism, which is simply impossible not to respect.”&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Small.&lt;/strong&gt; 130 bytes (minified and gzipped). No&amp;nbsp;dependencies. &lt;a href=&#34;https://github.com/ai/size-limit&#34;&gt;Size Limit&lt;/a&gt; controls the size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Safe.&lt;/strong&gt; It uses hardware random generator. Can be used in clusters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Short IDs.&lt;/strong&gt; It uses a&amp;nbsp;larger alphabet than UUID (&lt;code&gt;A-Za-z0-9_-&lt;/code&gt;). So ID size was reduced from&amp;nbsp;36&amp;nbsp;to&amp;nbsp;21&amp;nbsp;symbols.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Portable.&lt;/strong&gt; Nano ID was ported to &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/README.md#other-programming-languages&#34;&gt;20 programming languages&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid&#39;&#xA;model.id = nanoid() //=&amp;gt; &#34;V1StGXR8_Z5jdHi6B-myT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Supports modern browsers, IE &lt;a href=&#34;https://developer.epages.com/blog/coding/how-to-transpile-node-modules-with-babel-and-webpack-in-a-monorepo/&#34;&gt;with Babel&lt;/a&gt;, Node.js and React Native.&lt;/p&gt; &#xA;&lt;a href=&#34;https://evilmartians.com/?utm_source=nanoid&#34;&gt; &lt;img src=&#34;https://evilmartians.com/badges/sponsored-by-evil-martians.svg?sanitize=true&#34; alt=&#34;Sponsored by Evil Martians&#34; width=&#34;236&#34; height=&#34;54&#34;&gt; &lt;/a&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#comparison-with-uuid&#34;&gt;Comparison with UUID&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#benchmark&#34;&gt;Benchmark&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#security&#34;&gt;Security&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#api&#34;&gt;API&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#blocking&#34;&gt;Blocking&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#async&#34;&gt;Async&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#non-secure&#34;&gt;Non-Secure&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-alphabet-or-size&#34;&gt;Custom Alphabet or Size&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-random-bytes-generator&#34;&gt;Custom Random Bytes Generator&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#react&#34;&gt;React&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#react-native&#34;&gt;React Native&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#pouchdb-and-couchdb&#34;&gt;PouchDB and CouchDB&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#web-workers&#34;&gt;Web Workers&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#jest&#34;&gt;Jest&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#cli&#34;&gt;CLI&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#other-programming-languages&#34;&gt;Other Programming Languages&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#tools&#34;&gt;Tools&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Comparison with UUID&lt;/h2&gt; &#xA;&lt;p&gt;Nano ID is quite comparable to UUID v4 (random-based). It has a similar number of random bits in the ID (126&amp;nbsp;in&amp;nbsp;Nano&amp;nbsp;ID&amp;nbsp;and&amp;nbsp;122&amp;nbsp;in&amp;nbsp;UUID), so&amp;nbsp;it&amp;nbsp;has&amp;nbsp;a similar&amp;nbsp;collision&amp;nbsp;probability:&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;For there to be a one in a billion chance of duplication, 103 trillion version 4 IDs must be generated.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;There are three main differences between Nano ID and UUID v4:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Nano ID uses a bigger alphabet, so a similar number of random bits are packed in just 21&amp;nbsp;symbols&amp;nbsp;instead of 36.&lt;/li&gt; &#xA; &lt;li&gt;Nano ID code is &lt;strong&gt;4 times smaller&lt;/strong&gt; than &lt;code&gt;uuid/v4&lt;/code&gt; package: 130 bytes instead of 423.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-rust&#34;&gt;$ node ./test/benchmark.js&#xA;crypto.randomUUID         21,119,429 ops/sec&#xA;uuid v4                   20,368,447 ops/sec&#xA;@napi-rs/uuid             11,493,890 ops/sec&#xA;uid/secure                 8,409,962 ops/sec&#xA;@lukeed/uuid               6,871,405 ops/sec&#xA;nanoid                     5,652,148 ops/sec&#xA;customAlphabet             3,565,656 ops/sec&#xA;secure-random-string         394,201 ops/sec&#xA;uid-safe.sync                393,176 ops/sec&#xA;cuid                         208,131 ops/sec&#xA;shortid                       49,916 ops/sec&#xA;&#xA;Async:&#xA;nanoid/async                 135,260 ops/sec&#xA;async customAlphabet         136,059 ops/sec&#xA;async secure-random-string   135,213 ops/sec&#xA;uid-safe                     119,587 ops/sec&#xA;&#xA;Non-secure:&#xA;uid                       58,860,241 ops/sec&#xA;nanoid/non-secure          2,744,615 ops/sec&#xA;rndm                       2,718,063 ops/sec&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test configuration: ThinkPad X1 Carbon Gen 9, Fedora 36, Node.js 18.9.&lt;/p&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;See a good article about random generators theory: &lt;a href=&#34;https://gist.github.com/joepie91/7105003c3b26e65efcea63f3db82dfba&#34;&gt;Secure random values (in Node.js)&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Unpredictability.&lt;/strong&gt; Instead of using the unsafe &lt;code&gt;Math.random()&lt;/code&gt;, Nano ID uses the &lt;code&gt;crypto&lt;/code&gt; module in Node.js and&amp;nbsp;the&amp;nbsp;Web&amp;nbsp;Crypto&amp;nbsp;API&amp;nbsp;in&amp;nbsp;browsers. These modules use unpredictable hardware random generator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Uniformity.&lt;/strong&gt; &lt;code&gt;random % alphabet&lt;/code&gt; is a popular mistake to make when coding an ID generator. The distribution will not be even; there&amp;nbsp;will be&amp;nbsp;a&amp;nbsp;lower chance for some symbols to appear compared to others. So, it will reduce the number of tries when&amp;nbsp;brute-forcing. Nano ID uses a &lt;a href=&#34;https://github.com/ai/nanoid/raw/main/index.js&#34;&gt;better algorithm&lt;/a&gt; and is tested for uniformity.&lt;/p&gt; &lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/ai/nanoid/main/img/distribution.png&#34; alt=&#34;Nano ID uniformity&#34; width=&#34;340&#34; height=&#34;135&#34;&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Well-documented:&lt;/strong&gt; all Nano ID hacks are documented. See comments in &lt;a href=&#34;https://github.com/ai/nanoid/raw/main/index.js&#34;&gt;the source&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Vulnerabilities:&lt;/strong&gt; to report a security vulnerability, please use the &lt;a href=&#34;https://tidelift.com/security&#34;&gt;Tidelift security contact&lt;/a&gt;. Tidelift&amp;nbsp;will&amp;nbsp;coordinate&amp;nbsp;the&amp;nbsp;fix&amp;nbsp;and&amp;nbsp;disclosure.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install --save nanoid&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For quick hacks, you can load Nano ID from CDN. Though, it is not recommended to be used in production because of the lower loading performance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;https://cdn.jsdelivr.net/npm/nanoid/nanoid.js&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Nano ID provides ES modules. You do not need to do anything to use Nano ID as ESM in webpack, Rollup, Parcel, or Node.js.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;p&gt;Nano ID has 3 APIs: normal (blocking), asynchronous, and non-secure.&lt;/p&gt; &#xA;&lt;p&gt;By default, Nano ID uses URL-friendly symbols (&lt;code&gt;A-Za-z0-9_-&lt;/code&gt;) and returns an ID with 21 characters (to&amp;nbsp;have&amp;nbsp;a&amp;nbsp;collision&amp;nbsp;probability&amp;nbsp;similar to&amp;nbsp;UUID v4).&lt;/p&gt; &#xA;&lt;h3&gt;Blocking&lt;/h3&gt; &#xA;&lt;p&gt;The safe and easiest way to use Nano ID.&lt;/p&gt; &#xA;&lt;p&gt;In rare cases could block CPU from other work while noise collection for hardware random generator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid&#39;&#xA;model.id = nanoid() //=&amp;gt; &#34;V1StGXR8_Z5jdHi6B-myT&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to reduce the ID size (and increase collisions probability), you can pass the size as&amp;nbsp;an&amp;nbsp;argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;nanoid(10) //=&amp;gt; &#34;IRFa-VaY2b&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Don’t forget to check the&amp;nbsp;safety of your ID size in our &lt;a href=&#34;https://zelark.github.io/nano-id-cc/&#34;&gt;ID collision probability&lt;/a&gt; calculator.&lt;/p&gt; &#xA;&lt;p&gt;You can also use a &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-alphabet-or-size&#34;&gt;custom alphabet&lt;/a&gt; or a &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-random-bytes-generator&#34;&gt;random generator&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Async&lt;/h3&gt; &#xA;&lt;p&gt;To generate hardware random bytes, CPU collects electromagnetic noise. For most cases, entropy will be already collected.&lt;/p&gt; &#xA;&lt;p&gt;In the synchronous API during&amp;nbsp;the noise&amp;nbsp;collection, the&amp;nbsp;CPU is busy and cannot do anything useful (for instance, process another HTTP request).&lt;/p&gt; &#xA;&lt;p&gt;Using the asynchronous API of Nano ID, another code can run during the entropy collection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid/async&#39;&#xA;&#xA;async function createUser() {&#xA;  user.id = await nanoid()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Read more about entropy collection in &lt;a href=&#34;https://nodejs.org/api/crypto.html#crypto_crypto_randombytes_size_callback&#34;&gt;&lt;code&gt;crypto.randomBytes&lt;/code&gt;&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;p&gt;Unfortunately, you will lose Web Crypto API advantages in a browser if you use the asynchronous API. So, currently, in the browser, you are limited with either security (&lt;code&gt;nanoid&lt;/code&gt;), asynchronous behavior (&lt;code&gt;nanoid/async&lt;/code&gt;), or non-secure behavior (&lt;code&gt;nanoid/non-secure&lt;/code&gt;) that will be explained in the next part of the documentation.&lt;/p&gt; &#xA;&lt;h3&gt;Non-Secure&lt;/h3&gt; &#xA;&lt;p&gt;By default, Nano ID uses hardware random bytes generation for security and low collision probability. If you are not so concerned with security, you can use the faster non-secure generator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid/non-secure&#39;&#xA;const id = nanoid() //=&amp;gt; &#34;Uakgb_J5m9g-0JDMbcJqLJ&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Alphabet or Size&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;customAlphabet&lt;/code&gt; returns a function that allows you to create &lt;code&gt;nanoid&lt;/code&gt; with your own alphabet and ID size.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customAlphabet } from &#39;nanoid&#39;&#xA;const nanoid = customAlphabet(&#39;1234567890abcdef&#39;, 10)&#xA;model.id = nanoid() //=&amp;gt; &#34;4f90d13a42&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customAlphabet } from &#39;nanoid/async&#39;&#xA;const nanoid = customAlphabet(&#39;1234567890abcdef&#39;, 10)&#xA;async function createUser() {&#xA;  user.id = await nanoid()&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customAlphabet } from &#39;nanoid/non-secure&#39;&#xA;const nanoid = customAlphabet(&#39;1234567890abcdef&#39;, 10)&#xA;user.id = nanoid()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check the&amp;nbsp;safety of your custom alphabet and ID size in our &lt;a href=&#34;https://zelark.github.io/nano-id-cc/&#34;&gt;ID collision probability&lt;/a&gt; calculator. For&amp;nbsp;more&amp;nbsp;alphabets,&amp;nbsp;check&amp;nbsp;out&amp;nbsp;the&amp;nbsp;options in&amp;nbsp;&lt;a href=&#34;https://github.com/CyberAP/nanoid-dictionary&#34;&gt;&lt;code&gt;nanoid-dictionary&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alphabet must contain 256 symbols or less. Otherwise, the security of the internal generator algorithm is not guaranteed.&lt;/p&gt; &#xA;&lt;p&gt;In addition to setting a default size, you can change the ID size when calling the function:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customAlphabet } from &#39;nanoid&#39;&#xA;const nanoid = customAlphabet(&#39;1234567890abcdef&#39;, 10)&#xA;model.id = nanoid(5) //=&amp;gt; &#34;f01a2&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Custom Random Bytes Generator&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;customRandom&lt;/code&gt; allows you to create a &lt;code&gt;nanoid&lt;/code&gt; and replace alphabet and the default random bytes generator.&lt;/p&gt; &#xA;&lt;p&gt;In&amp;nbsp;this&amp;nbsp;example,&amp;nbsp;a&amp;nbsp;seed-based&amp;nbsp;generator is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { customRandom } from &#39;nanoid&#39;&#xA;&#xA;const rng = seedrandom(seed)&#xA;const nanoid = customRandom(&#39;abcdef&#39;, 10, size =&amp;gt; {&#xA;  return (new Uint8Array(size)).map(() =&amp;gt; 256 * rng())&#xA;})&#xA;&#xA;nanoid() //=&amp;gt; &#34;fbaefaadeb&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;random&lt;/code&gt; callback must accept the array size and return an array with random numbers.&lt;/p&gt; &#xA;&lt;p&gt;If you want to use the same URL-friendly symbols with &lt;code&gt;customRandom&lt;/code&gt;, you can get the default alphabet using&amp;nbsp;the&amp;nbsp;&lt;code&gt;urlAlphabet&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const { customRandom, urlAlphabet } = require(&#39;nanoid&#39;)&#xA;const nanoid = customRandom(urlAlphabet, 10, random)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Asynchronous and non-secure APIs are not available for &lt;code&gt;customRandom&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Note, that between Nano ID versions we may change random generator call sequence. If you are using seed-based generators, we do not guarantee the same result.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;React&lt;/h3&gt; &#xA;&lt;p&gt;There’s no correct way to use Nano ID for React &lt;code&gt;key&lt;/code&gt; prop since it should be consistent among renders.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;function Todos({todos}) {&#xA;  return (&#xA;    &amp;lt;ul&amp;gt;&#xA;      {todos.map(todo =&amp;gt; (&#xA;        &amp;lt;li key={nanoid()}&amp;gt; /* DON’T DO IT */&#xA;          {todo.text}&#xA;        &amp;lt;/li&amp;gt;&#xA;      ))}&#xA;    &amp;lt;/ul&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You should rather try to reach for stable ID inside your list item.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((todo) =&amp;gt;&#xA;  &amp;lt;li key={todo.id}&amp;gt;&#xA;    {todo.text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you don’t have stable IDs you&#39;d rather use index as &lt;code&gt;key&lt;/code&gt; instead of &lt;code&gt;nanoid()&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const todoItems = todos.map((text, index) =&amp;gt;&#xA;  &amp;lt;li key={index}&amp;gt; /* Still not recommended but preferred over nanoid().&#xA;                      Only do this if items have no stable IDs. */&#xA;    {text}&#xA;  &amp;lt;/li&amp;gt;&#xA;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In case you just need random IDs to link elements like labels and input fields together, &lt;a href=&#34;https://reactjs.org/docs/hooks-reference.html#useid&#34;&gt;&lt;code&gt;useId&lt;/code&gt;&lt;/a&gt; is recommended. That hook was added in React 18.&lt;/p&gt; &#xA;&lt;h3&gt;React Native&lt;/h3&gt; &#xA;&lt;p&gt;React Native does not have built-in random generator. The following polyfill works for plain React Native and Expo starting with &lt;code&gt;39.x&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Check &lt;a href=&#34;https://github.com/LinusU/react-native-get-random-values&#34;&gt;&lt;code&gt;react-native-get-random-values&lt;/code&gt;&lt;/a&gt; docs and install it.&lt;/li&gt; &#xA; &lt;li&gt;Import it before Nano ID.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import &#39;react-native-get-random-values&#39;&#xA;import { nanoid } from &#39;nanoid&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PouchDB and CouchDB&lt;/h3&gt; &#xA;&lt;p&gt;In PouchDB and CouchDB, IDs can’t start with an underscore &lt;code&gt;_&lt;/code&gt;. A prefix is required to prevent this issue, as Nano ID might use a &lt;code&gt;_&lt;/code&gt; at the start of the ID by default.&lt;/p&gt; &#xA;&lt;p&gt;Override the default ID with the following option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;db.put({&#xA;  _id: &#39;id&#39; + nanoid(),&#xA;  …&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Web Workers&lt;/h3&gt; &#xA;&lt;p&gt;Web Workers do not have access to a secure random generator.&lt;/p&gt; &#xA;&lt;p&gt;Security is important in IDs when IDs should be unpredictable. For instance, in &#34;access by URL&#34; link generation. If you do not need unpredictable IDs, but you need to use Web Workers, you&amp;nbsp;can use the non‑secure&amp;nbsp;ID&amp;nbsp;generator.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { nanoid } from &#39;nanoid/non-secure&#39;&#xA;nanoid() //=&amp;gt; &#34;Uakgb_J5m9g-0JDMbcJqLJ&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note: non-secure IDs are more prone to collision attacks.&lt;/p&gt; &#xA;&lt;h3&gt;Jest&lt;/h3&gt; &#xA;&lt;p&gt;Jest test runner with &lt;code&gt;jest-environment-jsdom&lt;/code&gt; will use browser’s version of Nano ID. You will need polyfill for Web Crypto API.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import { randomFillSync } from &#39;crypto&#39;&#xA;&#xA;window.crypto = {&#xA;  getRandomValues(buffer) {&#xA;    return randomFillSync(buffer)&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;CLI&lt;/h3&gt; &#xA;&lt;p&gt;You can get unique ID in terminal by calling &lt;code&gt;npx nanoid&lt;/code&gt;. You need only Node.js in the system. You do not need Nano ID to be installed anywhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npx nanoid&#xA;npx: installed 1 in 0.63s&#xA;LZfXLFzPPR4NNrgjlWDxn&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Size of generated ID can be specified with &lt;code&gt;--size&lt;/code&gt; (or &lt;code&gt;-s&lt;/code&gt;) option:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npx nanoid --size 10&#xA;L3til0JS4z&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Custom alphabet can be specified with &lt;code&gt;--alphabet&lt;/code&gt; (or &lt;code&gt;-a&lt;/code&gt;) option (note that in this case &lt;code&gt;--size&lt;/code&gt; is required):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ npx nanoid --alphabet abc --size 15&#xA;bccbcabaabaccab&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Other Programming Languages&lt;/h3&gt; &#xA;&lt;p&gt;Nano ID was ported to many languages. You can use these ports to have the same ID generator on the client and server side.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/codeyu/nanoid-net&#34;&gt;C#&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mcmikecreations/nanoid_cpp&#34;&gt;C++&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/zelark/nano-id&#34;&gt;Clojure and ClojureScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/JamoCA/cfml-nanoid&#34;&gt;ColdFusion/CFML&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mamantoha/nanoid.cr&#34;&gt;Crystal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pd4d10/nanoid-dart&#34;&gt;Dart &amp;amp; Flutter&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ianfabs/nanoid&#34;&gt;Deno&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jaevor/go-nanoid&#34;&gt;Go&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/railsmechanic/nanoid&#34;&gt;Elixir&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/MichelBoucey/NanoID&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flashultra/uuid&#34;&gt;Haxe&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://sr.ht/~statianzo/janet-nanoid/&#34;&gt;Janet&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/aventrix/jnanoid&#34;&gt;Java&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/icyphox/nanoid.nim&#34;&gt;Nim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/routineco/ocaml-nanoid&#34;&gt;OCaml&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tkzwtks/Nanoid-perl&#34;&gt;Perl&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hidehalo/nanoid-php&#34;&gt;PHP&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/puyuan/py-nanoid&#34;&gt;Python&lt;/a&gt; with &lt;a href=&#34;https://pypi.org/project/nanoid-dictionary&#34;&gt;dictionaries&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Postgres &lt;a href=&#34;https://github.com/spa5k/uids-postgres&#34;&gt;Extension&lt;/a&gt; and &lt;a href=&#34;https://github.com/viascom/nanoid-postgres&#34;&gt;Native Function&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/hrbrmstr/nanoid&#34;&gt;R&lt;/a&gt; (with dictionaries)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/radeno/nanoid.rb&#34;&gt;Ruby&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/nikolay-govorov/nanoid&#34;&gt;Rust&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/antiflasher/NanoID&#34;&gt;Swift&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://share.unison-lang.org/latest/namespaces/hojberg/nanoid&#34;&gt;Unison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/invipal/nanoid&#34;&gt;V&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/SasLuca/zig-nanoid&#34;&gt;Zig&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For other environments, &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#cli&#34;&gt;CLI&lt;/a&gt; is available to generate IDs from a command line.&lt;/p&gt; &#xA;&lt;h2&gt;Tools&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://zelark.github.io/nano-id-cc/&#34;&gt;ID size calculator&lt;/a&gt; shows collision probability when adjusting the ID alphabet or size.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/CyberAP/nanoid-dictionary&#34;&gt;&lt;code&gt;nanoid-dictionary&lt;/code&gt;&lt;/a&gt; with popular alphabets to use with &lt;a href=&#34;https://raw.githubusercontent.com/ai/nanoid/main/#custom-alphabet-or-size&#34;&gt;&lt;code&gt;customAlphabet&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/y-gagar1n/nanoid-good&#34;&gt;&lt;code&gt;nanoid-good&lt;/code&gt;&lt;/a&gt; to be sure that your ID doesn’t contain any obscene words.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>SheetJS/sheetjs</title>
    <updated>2022-12-31T01:33:27Z</updated>
    <id>tag:github.com,2022-12-31:/SheetJS/sheetjs</id>
    <link href="https://github.com/SheetJS/sheetjs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📗 SheetJS Community Edition -- Spreadsheet Data Toolkit&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://sheetjs.com&#34;&gt;SheetJS&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;The SheetJS Community Edition offers battle-tested open-source solutions for extracting useful data from almost any complex spreadsheet and generating new spreadsheets that will work with legacy and modern software alike.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sheetjs.com/pro&#34;&gt;SheetJS Pro&lt;/a&gt; offers solutions beyond data processing: Edit complex templates with ease; let out your inner Picasso with styling; make custom sheets with images/graphs/PivotTables; evaluate formula expressions and port calculations to web apps; automate common spreadsheet tasks, and much more!&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SheetJS/sheetjs/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/SheetJS/sheetjs&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SheetJS/sheetjs/actions&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/sheetjs/sheetjs/Tests:%20node.js&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://snyk.io/test/github/SheetJS/sheetjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/snyk/vulnerabilities/github/SheetJS/sheetjs&#34; alt=&#34;Snyk Vulnerabilities&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cdn.sheetjs.com/&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/xlsx.svg?sanitize=true&#34; alt=&#34;npm Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/SheetJS/sheetjs&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/stars/SheetJS/sheetjs?style=social&#34; alt=&#34;GitHub Repo stars&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/SheetJS/sheetjs&#34;&gt;&lt;img src=&#34;https://ga-beacon.appspot.com/UA-36810333-1/SheetJS/sheetjs?pixel&#34; alt=&#34;Analytics&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://saucelabs.com/u/sheetjs&#34;&gt;&lt;img src=&#34;https://saucelabs.com/browser-matrix/sheetjs.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.sheetjs.com&#34;&gt;API and Usage Documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://cdn.sheetjs.com&#34;&gt;Downloadable Scripts and Modules&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Related Projects&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://oss.sheetjs.com/notes/&#34;&gt;https://oss.sheetjs.com/notes/&lt;/a&gt;: File Format Notes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SheetJS/sheetjs/master/packages/ssf&#34;&gt;&lt;code&gt;ssf&lt;/code&gt;&lt;/a&gt;: Format data using ECMA-376 spreadsheet format codes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/SheetJS/sheetjs/master/packages/xlsx-cli/&#34;&gt;&lt;code&gt;xlsx-cli&lt;/code&gt;&lt;/a&gt;: NodeJS command-line tool for processing files&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SheetJS/test_files&#34;&gt;&lt;code&gt;test_files&lt;/code&gt;&lt;/a&gt;: Sample spreadsheets&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SheetJS/js-cfb&#34;&gt;&lt;code&gt;cfb&lt;/code&gt;&lt;/a&gt;: Container (OLE/ZIP) format library&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/SheetJS/js-codepage&#34;&gt;&lt;code&gt;codepage&lt;/code&gt;&lt;/a&gt;: Legacy text encodings&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Please consult the attached LICENSE file for details. All rights not explicitly granted by the Apache 2.0 License are reserved by the Original Author.&lt;/p&gt;</summary>
  </entry>
</feed>