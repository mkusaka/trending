<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-27T01:27:11Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>zk-Call/zkp-hmac-communication-js</title>
    <updated>2024-04-27T01:27:11Z</updated>
    <id>tag:github.com,2024-04-27:/zk-Call/zkp-hmac-communication-js</id>
    <link href="https://github.com/zk-Call/zkp-hmac-communication-js" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;Zero-Knowledge&#34; Proof Implementation with HMAC Communication in JavaScript&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;assets/zk-Call Preview [JS].png&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;h1 align=&#34;center&#34;&gt;zk-Call &amp;amp; Labs&lt;/h1&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;strong&gt;&#34;Zero-Knowledge&#34; Proof Implementation with HMAC Communication in JavaScript&lt;/strong&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;img src=&#34;http://badges.github.io/stability-badges/dist/experimental.svg?sanitize=true&#34; alt=&#34;Experimental&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;sub&gt; Built by &lt;a href=&#34;https://github.com/zk-Call&#34;&gt; zk-Call&lt;/a&gt; :) &lt;/sub&gt; &#xA;&lt;/div&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Table of Contents&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/#credits&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/#purpose&#34;&gt;Purpose&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/#how-it-works&#34;&gt;How it Works&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/#api&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/#example-usage&#34;&gt;Example Usage&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;This repository hosts a refined implementation of &lt;a href=&#34;https://en.wikipedia.org/wiki/Schnorr_signature&#34;&gt;&lt;strong&gt;Schnorr&#39;s Protocol&lt;/strong&gt;&lt;/a&gt;, innovatively incorporating a state seed for enhanced security measures. While the underlying proofs may appear intricate, I aim to elucidate their functionality to the best of my ability. However, for a deeper understanding, I encourage referencing the seminal research papers underpinning this implementation, as they offer comprehensive insights.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/Schnorr&#39;s%20Protocol.png&#34; alt=&#34;Detailed Schematic Overview of Schnorr&#39;s Protocol (Example)&#34;&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;For further exploration:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://arxiv.org/pdf/1107.1626.pdf&#34;&gt;&lt;strong&gt;Elliptic Curve Based &#34;Zero-Knowledge&#34; Proofs and Their Applicability on Resource Constrained Devices by Ioannis Chatzigiannakis, Apostolos Pyrgelis, Paul G. Spirakis, and Yannis C. Stamatiou&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/Elliptic%20Curve.png&#34; alt=&#34;Detailed Schematic Overview of Elliptic Curves (Example)&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;Additionally, this repository delves into the concepts of &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt; and &lt;strong&gt;Hash-based Message Authentication Codes (HMACs)&lt;/strong&gt;. &lt;strong&gt;ZKPs&lt;/strong&gt; are cryptographic protocols that allow one party &lt;strong&gt;(the prover)&lt;/strong&gt; to prove to another party &lt;strong&gt;(the verifier)&lt;/strong&gt; that a given statement is true, without revealing any additional information beyond the validity of the statement itself. This property is particularly valuable for preserving privacy while establishing trust. &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;On the other hand, &lt;strong&gt;HMACs&lt;/strong&gt; are a type of cryptographic hash function used for message authentication. They involve a cryptographic hash function &lt;strong&gt;(such as SHA-256)&lt;/strong&gt; and a secret cryptographic key. &lt;strong&gt;HMACs&lt;/strong&gt; provide a way to verify both the data integrity and the authenticity of a message, ensuring that it has not been altered or tampered with during transmission and that it indeed originates from the purported sender. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Purpose&lt;/h1&gt; &#xA;&lt;p&gt;In today&#39;s rapidly evolving IT and application development landscape, &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt; emerge as a pivotal paradigm for authentication security. Their capacity to affirm the validity of a claim, such as proving possession of a secret password — without revealing any sensitive information about the claim itself, such as passwords or hashes, revolutionizes the assurance of secure &lt;strong&gt;AAA operations&lt;/strong&gt; (&lt;strong&gt;authentication&lt;/strong&gt;, &lt;strong&gt;authorization&lt;/strong&gt;, and &lt;strong&gt;accounting&lt;/strong&gt;).&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/Purpose-1.png&#34; alt=&#34;The Purpose of our Repositories and The Overall Technology&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;zk-Call &amp;amp; Labs&lt;/strong&gt; represents an implementation of a &lt;a href=&#34;https://en.wikipedia.org/wiki/Non-interactive_zero-knowledge_proof&#34;&gt;&lt;strong&gt;Non-Interactive &#34;Zero-Knowledge&#34; Proof&lt;/strong&gt;&lt;/a&gt; &lt;strong&gt;(NIZKP)&lt;/strong&gt; protocol tailored specifically for validating text-based secrets. This framework proves invaluable for safeguarding passwords and other authentication mechanisms, ensuring robust security measures without compromising privacy. Additionally, the integration of &lt;strong&gt;HMAC (Hash-Based Message Authentication Code)&lt;/strong&gt; further fortifies the authentication process, enhancing data integrity and thwarting potential security breaches. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;How It Works&lt;/h1&gt; &#xA;&lt;p&gt;The authentication protocol employed in this system operates based on two fundamental concepts: &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt; and &lt;strong&gt;Hash-Based Message Authentication Code (HMAC)&lt;/strong&gt;. Let&#39;s delve into each of these components and understand how they synergize to ensure secure authentication in messaging applications. &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs):&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;ZKPs&lt;/strong&gt; form the bedrock of privacy-preserving authentication mechanisms. These proofs allow one party &lt;strong&gt;(the prover)&lt;/strong&gt; to demonstrate the validity of a claim to another party &lt;strong&gt;(the verifier)&lt;/strong&gt; without revealing any additional information beyond the claim&#39;s validity. In essence, &lt;strong&gt;ZKPs&lt;/strong&gt; enable authentication without the need for the prover to disclose sensitive data, such as passwords or cryptographic keys.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/ZKP-HMAC-1.png&#34; alt=&#34;Detailed Schematic Overview of &amp;quot;Zero-Knowledge&amp;quot; Technology (1)&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/ZKP-HMAC-2.png&#34; alt=&#34;Detailed Schematic Overview of &amp;quot;Zero-Knowledge&amp;quot; Technology (2)&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/ZKP-HMAC-3.png&#34; alt=&#34;Detailed Schematic Overview of &amp;quot;Zero-Knowledge&amp;quot; Technology (3)&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/ZKP-HMAC-4.png&#34; alt=&#34;Detailed Schematic Overview of &amp;quot;Zero-Knowledge&amp;quot; Technology (4)&#34;&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Application in Authentication:&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In the context of messaging applications, &lt;strong&gt;ZKPs&lt;/strong&gt; play a pivotal role in verifying a user&#39;s identity without the need to transmit explicit credentials over the network. Instead, users can generate cryptographic proofs attesting to their identity or possession of certain credentials without exposing those credentials themselves. This ensures that sensitive information remains confidential during the authentication process, bolstering security and privacy. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Hash-Based Message Authentication Code (HMAC)&lt;/h2&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Hash-Based Message Authentication Code (HMAC):&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;HMAC&lt;/strong&gt; provides a robust mechanism for verifying the integrity and authenticity of messages exchanged between parties. It involves the use of a cryptographic hash function in conjunction with a secret key to generate a unique code &lt;strong&gt;(the HMAC)&lt;/strong&gt; for each message. This code serves as a digital signature, allowing the recipient to verify that the message has not been tampered with or altered during transmission.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/HMAC.png&#34; alt=&#34;Detailed Schematic Overview of HMAC Encryption&#34;&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;strong&gt;Application in Authentication:&lt;/strong&gt;&lt;/h4&gt; &#xA;&lt;p&gt;In messaging applications, &lt;strong&gt;HMAC&lt;/strong&gt; can be employed to authenticate message senders and ensure the integrity of communication channels. By appending an &lt;strong&gt;HMAC&lt;/strong&gt; to each message using a shared secret key, both the sender and recipient can validate the message&#39;s authenticity upon receipt. Any unauthorized modifications to the message would result in a mismatch between the &lt;strong&gt;computed HMAC&lt;/strong&gt; and the &lt;strong&gt;received HMAC&lt;/strong&gt;, thereby alerting the recipient to potential tampering. &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Synergistic Operation&lt;/h2&gt; &#xA;&lt;p&gt;When combined, &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs&lt;/strong&gt; and &lt;strong&gt;HMAC&lt;/strong&gt; create a formidable framework for secure authentication in messaging applications. &lt;strong&gt;ZKPs&lt;/strong&gt; facilitate identity verification without divulging sensitive information, while &lt;strong&gt;HMAC&lt;/strong&gt; ensures the integrity and authenticity of messages exchanged between parties. Together, these mechanisms uphold the confidentiality, integrity, and authenticity of communication channels, safeguarding users&#39; privacy and security in the digital realm.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/Synergistic%20Operation.png&#34; alt=&#34;The Advantages of Synergy between &amp;quot;Zero-Knowledge&amp;quot; Proof and HMAC&#34;&gt; &lt;br&gt; &lt;br&gt;&lt;/p&gt; &#xA;&lt;h1&gt;API&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;&#34;Zero-Knowledge&#34;&lt;/code&gt;&lt;/strong&gt; JavaScript API is meant to be simple and intuitive:&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Core Components&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;Core Components&lt;/code&gt;&lt;/strong&gt; are key for establishing a secure and efficient framework for cryptographic protocols; streamlining the creation and validation of &lt;strong&gt;&#34;Zero-Knowledge&#34; Proofs (ZKPs)&lt;/strong&gt;. They enhance anonymous, data-safe proof validations.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/Core%20Components%20(JS).png&#34; alt=&#34;Detailed Schematic Overview of Core Components&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeParams&lt;/h4&gt; &#xA;&lt;p&gt;The parameters &lt;strong&gt;used to initialize the &#34;Zero-Knowledge&#34;&lt;/strong&gt; crypto system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeParams(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Parameters used to construct a Zero-Knowledge Proof state, utilizing an elliptic curve and a random salt&#xA;    &#34;&#34;&#34;&#xA;    algorithm: str                    # Hashing algorithm name&#xA;    curve: str                  # Standard Elliptic Curve name to use&#xA;    s: int                      # Random salt for the state&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeSignature&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;strong&gt;cryptographic &#34;Zero-Knowledge&#34;&lt;/strong&gt; signature that can be used to verify future messages.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeSignature(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Cryptographic public signature designed to verify future messages&#xA;    &#34;&#34;&#34;&#xA;    params: ZeroKnowledgeParams       # Reference ZeroKnowledge Parameters&#xA;    signature: int              # The public key derived from your original secret&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeProof&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;strong&gt;cryptographic proof&lt;/strong&gt; that can be verified against a signature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeProof(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Non-deterministic cryptographic Zero-Knowledge Proof designed to confirm that the&#xA;    private key creating the proof matches the key used to generate the signature&#xA;    &#34;&#34;&#34;&#xA;    params: ZeroKnowledgeParams        # Reference ZeroKnowledge Parameters&#xA;    c: int                      # The hash of the signed data and random point, R&#xA;    m: int                      # The offset from the secret `r` (`R=r*g`) from c * Hash(secret)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ZeroKnowledge.models.ZeroKnowledgeData&lt;/h4&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wrapper&lt;/strong&gt; that contains &lt;strong&gt;a proof and the necessary data&lt;/strong&gt; to validate the proof against a signature.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;class ZeroKnowledgeData(NamedTuple):&#xA;    &#34;&#34;&#34;&#xA;    Wrapper designed to hold data along with its corresponding signed proof&#xA;    &#34;&#34;&#34;&#xA;    data: Union[str, bytes, int]&#xA;    proof: ZeroKnowledgeProof&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;ZeroKnowledge&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;strong&gt;&lt;code&gt;ZeroKnowledge&lt;/code&gt;&lt;/strong&gt; class is the central component of &lt;strong&gt;&lt;code&gt;ZeroKnowledge&lt;/code&gt;&lt;/strong&gt; and its state (defined by &lt;strong&gt;&lt;code&gt;ZeroKnowledgeParams&lt;/code&gt;&lt;/strong&gt;) should be inherently known to both the &lt;strong&gt;Client (Prover)&lt;/strong&gt; and &lt;strong&gt;Server (Verifier)&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/zk-Call/zkp-hmac-communication-js/main/assets/ZeroKnowledge%20(JS).png&#34; alt=&#34;Comprehensive Visual Guide to ZeroKnowledge Framework&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h4&gt;Instance Methods&lt;/h4&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;th width=&#34;9%&#34;&gt;Method&lt;/th&gt; &#xA;   &lt;th width=&#34;46%&#34;&gt;Params&lt;/th&gt; &#xA;   &lt;th width=&#34;10%&#34;&gt;Role&lt;/th&gt; &#xA;   &lt;th width=&#34;35%&#34;&gt;Purpose&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;create_signature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;secret: Union[str, bytes]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prover&lt;/td&gt; &#xA;   &lt;td&gt;Create a cryptographic &lt;code&gt;signature&lt;/code&gt; derived from the value &lt;code&gt;secret&lt;/code&gt; to be generated during initial registration and stored for subsequent &lt;code&gt;challenge&lt;/code&gt; proofs.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sign&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;secret: Union[str, bytes]&lt;/code&gt; &lt;br&gt; &lt;code&gt;data: Union[str, bytes, int]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prover&lt;/td&gt; &#xA;   &lt;td&gt;Create a &lt;code&gt;ZeroKnowledgeData&lt;/code&gt; object using the &lt;code&gt;secret&lt;/code&gt; and any additional data. &lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;verify&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;challenge: Union[ZeroKnowledgeData, ZeroKnowledgeProof]&lt;/code&gt; &lt;br&gt; &lt;code&gt;signature: ZeroKnowledgeSignature&lt;/code&gt; &lt;br&gt; &lt;code&gt;data: Optional[Union[str, bytes, int]]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Verifier&lt;/td&gt; &#xA;   &lt;td&gt;Verify the user-provided &lt;code&gt;challenge&lt;/code&gt; against the stored &lt;code&gt;signature&lt;/code&gt; and randomly generated token to verify the validity of the &lt;code&gt;challenge&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Example Usage&lt;/h1&gt; &#xA;&lt;p&gt;TODO: Include &lt;strong&gt;&lt;code&gt;Example Usage&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Example 1&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;import {HMACClient} from &#39;./src/HMAC/core/base.mjs&#39;;&#xA;import {SeedGenerator} from &#39;./src/SeedGeneration/core/base.mjs&#39;;&#xA;&#xA;// DEBUG constant used for enabling/disabling debugging messages&#xA;const DEBUG = true;&#xA;&#xA;// Function to print messages with specific formatting if DEBUG is enabled&#xA;function printMsg(who, message) {&#xA;    if (DEBUG) {&#xA;      console.log(`[${who}] ${message}\n`);&#xA;    }&#xA;}&#xA;&#xA;// The main function of the script&#xA;function main() {&#xA;    // Generating a client seed using a SeedGenerator instance&#xA;    const client_seed = new SeedGenerator(&#34;job&#34;).generate();&#xA;&#xA;    // Creating an HMAC client instance for the client using sha256 algorithm and the generated seed&#xA;    const client_hmac = new HMACClient(&#34;sha256&#34;, client_seed, 1);&#xA;&#xA;    // Creating an HMAC server instance for the server using sha256 algorithm and the same generated seed&#xA;    const serverhmac = new HMACClient(&#34;sha256&#34;, client_seed, 1);&#xA;&#xA;    // Checking if the encrypted message from client and server matches&#xA;    if (client_hmac.encrypt_message(&#39;&#39;) === serverhmac.encrypt_message(&#39;&#39;)) {&#xA;        // Defining a message to be sent from client to server&#xA;        const client_message = &#39;hello&#39;;&#xA;&#xA;        // Encrypting the client message in chunks using the client HMAC instance&#xA;        const client_encrypted_message_for_server = client_hmac.encrypt_message_by_chunks(client_message)&#xA;&#xA;        // Printing a message indicating that client has sent an encrypted message&#xA;        printMsg(&#39;client&#39;, &#39;sent has encrypted message&#39;)&#xA;&#xA;        // Decrypting the message received from client by the server using server HMAC instance&#xA;        const server_decrypted_message = serverhmac.decrypt_message_by_chunks(client_encrypted_message_for_server)&#xA;        // Printing a message indicating that server has decrypted the message&#xA;        printMsg(&#39;server&#39;, &#39;server has decrypt message&#39;)&#xA;&#xA;        // Encrypting the decrypted message by the server&#xA;        const server_response = serverhmac.encrypt_message(server_decrypted_message)&#xA;        // Printing a message indicating that server has encrypted the message&#xA;        printMsg(&#39;server&#39;, &#39;server has encrypted message&#39;)&#xA;&#xA;        // Checking if the encrypted message from client matches the server&#39;s response&#xA;        if (client_hmac.encrypt_message(client_message) === server_response) {&#xA;            // Printing a message indicating that server has successfully read the message from client&#xA;            printMsg(&#39;client&#39;, &#39;server has read message&#39;)&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// Calling the main function to start the script execution&#xA;main()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Example 2&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Importing necessary modules&#xA;import { ZeroKnowledge } from &#34;./src/ZeroKnowledge/core/base.mjs&#34;; // Importing ZeroKnowledge class&#xA;import { ZeroKnowledgeData } from &#34;./src/ZeroKnowledge/models/base.mjs&#34;; // Importing ZeroKnowledgeData class&#xA;&#xA;// DEBUG constant used for enabling/disabling debugging messages&#xA;const DEBUG = true;&#xA;&#xA;// Function to print messages with specific formatting if DEBUG is enabled&#xA;function printMsg(who, message) {&#xA;    if (DEBUG) {&#xA;        console.log(`[${who}] ${message}\n`); // Print formatted message&#xA;    }&#xA;}&#xA;&#xA;// The main function of the script&#xA;function main() {&#xA;    // Generating a client seed using a SeedGenerator instance&#xA;    const server_password = &#34;SecretServerPassword&#34;; // Define server password&#xA;&#xA;    // Creating ZeroKnowledge instances for server and client&#xA;    const server_object = ZeroKnowledge.new(&#34;secp256k1&#34;, &#34;sha3_256&#34;); // Initialize server ZeroKnowledge instance&#xA;    const client_object = ZeroKnowledge.new(&#34;secp256k1&#34;, &#34;sha3_256&#34;); // Initialize client ZeroKnowledge instance&#xA;&#xA;    // Creating signatures for server and client&#xA;    const server_signature = server_object.create_signature(server_password); // Generate server signature&#xA;    printMsg(&#34;Server&#34;, `Server signature: ${server_signature}`); // Print server signature&#xA;    const idenity = &#39;John&#39;; // Define client identity&#xA;    const client_sig = client_object.create_signature(idenity); // Generate client signature&#xA;    printMsg(&#34;Client&#34;, `Client signature: ${client_sig}`); // Print client signature&#xA;&#xA;    // Signing and generating token for server and client&#xA;    const server_token = server_object.sign(server_password, client_object.token()); // Sign and generate token for server&#xA;    printMsg(&#34;Server&#34;, `Server token: ${server_token}`); // Print server token&#xA;    const client_proof = client_object.sign(idenity, server_token.data); // Sign token data for client&#xA;    printMsg(&#34;Client&#34;, `Client proof: ${client_proof}`); // Print client proof&#xA;&#xA;    // Creating ZeroKnowledgeData instance for token verification&#xA;    const token_veif = new ZeroKnowledgeData(client_proof.data, client_proof.proof);&#xA;&#xA;    // Verifying the token against server signature&#xA;    const server_verif = server_object.verify(token_veif, server_signature); // Verify token against server signature&#xA;    printMsg(&#34;Server&#34;, `Server verification: ${server_verif}`); // Print server verification&#xA;}&#xA;&#xA;// Calling the main function to start the script execution&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Example 3&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;// Importing necessary modules&#xA;import {ZeroKnowledge} from &#34;./src/ZeroKnowledge/core/base.mjs&#34;; // Importing ZeroKnowledge class&#xA;import {ZeroKnowledgeData} from &#34;./src/ZeroKnowledge/models/base.mjs&#34;;&#xA;import {SeedGenerator} from &#34;./src/SeedGeneration/core/base.mjs&#34;;&#xA;import {HMACClient} from &#34;./src/HMAC/core/base.mjs&#34;; // Importing ZeroKnowledgeData class&#xA;&#xA;// DEBUG constant used for enabling/disabling debugging messages&#xA;const DEBUG = true;&#xA;&#xA;// Function to print messages with specific formatting if DEBUG is enabled&#xA;function printMsg(who, message) {&#xA;    if (DEBUG) {&#xA;        console.log(`[${who}] ${message}\n`); // Print formatted message&#xA;    }&#xA;}&#xA;&#xA;// The main function of the script&#xA;function main() {&#xA;    // Generating a client seed using a SeedGenerator instance&#xA;    const server_password = &#34;SecretServerPassword&#34;; // Define server password&#xA;&#xA;    // Creating ZeroKnowledge instances for server and client&#xA;    const server_object = ZeroKnowledge.new(&#34;secp256k1&#34;, &#34;sha3_256&#34;); // Initialize server ZeroKnowledge instance&#xA;    const client_object = ZeroKnowledge.new(&#34;secp256k1&#34;, &#34;sha3_256&#34;); // Initialize client ZeroKnowledge instance&#xA;&#xA;    // Creating signatures for server and client&#xA;    const server_signature = server_object.create_signature(server_password); // Generate server signature&#xA;    printMsg(&#34;Server&#34;, `Server signature: ${server_signature}`); // Print server signature&#xA;    const idenity = &#39;John&#39;; // Define client identity&#xA;    const client_sig = client_object.create_signature(idenity); // Generate client signature&#xA;    printMsg(&#34;Client&#34;, `Client signature: ${client_sig}`); // Print client signature&#xA;&#xA;    // Signing and generating token for server and client&#xA;    const server_token = server_object.sign(server_password, client_object.token()); // Sign and generate token for server&#xA;    printMsg(&#34;Server&#34;, `Server token: ${server_token}`); // Print server token&#xA;    const client_proof = client_object.sign(idenity, server_token.data); // Sign token data for client&#xA;    printMsg(&#34;Client&#34;, `Client proof: ${client_proof}`); // Print client proof&#xA;&#xA;    // Creating ZeroKnowledgeData instance for token verification&#xA;    const token_veif = new ZeroKnowledgeData(client_proof.data, client_proof.proof);&#xA;&#xA;    // Verifying the token against server signature&#xA;    const server_verif = server_object.verify(token_veif, server_signature); // Verify token against server signature&#xA;    printMsg(&#34;Server&#34;, `Server verification: ${server_verif}`); // Print server verification&#xA;    if (server_verif) {&#xA;        // Generating a client seed using a SeedGenerator instance&#xA;        const client_seed = new SeedGenerator(&#34;job&#34;).generate();&#xA;&#xA;        // Creating an HMAC client instance for the client using sha256 algorithm and the generated seed&#xA;        const client_hmac = new HMACClient(&#34;sha256&#34;, client_seed, 1);&#xA;&#xA;        // Creating an HMAC server instance for the server using sha256 algorithm and the same generated seed&#xA;        const serverhmac = new HMACClient(&#34;sha256&#34;, client_seed, 1);&#xA;&#xA;        // Checking if the encrypted message from client and server matches&#xA;        if (client_hmac.encrypt_message(&#39;&#39;) === serverhmac.encrypt_message(&#39;&#39;)) {&#xA;            // Defining a message to be sent from client to server&#xA;            const client_message = &#39;hello&#39;;&#xA;&#xA;            // Encrypting the client message in chunks using the client HMAC instance&#xA;            const client_encrypted_message_for_server = client_hmac.encrypt_message_by_chunks(client_message)&#xA;&#xA;            // Printing a message indicating that client has sent an encrypted message&#xA;            printMsg(&#39;client&#39;, &#39;sent has encrypted message&#39;)&#xA;&#xA;            // Decrypting the message received from client by the server using server HMAC instance&#xA;            const server_decrypted_message = serverhmac.decrypt_message_by_chunks(client_encrypted_message_for_server)&#xA;            // Printing a message indicating that server has decrypted the message&#xA;            printMsg(&#39;server&#39;, &#39;server has decrypt message&#39;)&#xA;&#xA;            // Encrypting the decrypted message by the server&#xA;            const server_response = serverhmac.encrypt_message(server_decrypted_message)&#xA;            // Printing a message indicating that server has encrypted the message&#xA;            printMsg(&#39;server&#39;, &#39;server has encrypted message&#39;)&#xA;&#xA;            // Checking if the encrypted message from client matches the server&#39;s response&#xA;            if (client_hmac.encrypt_message(client_message) === server_response) {&#xA;                // Printing a message indicating that server has successfully read the message from client&#xA;                printMsg(&#39;client&#39;, &#39;server has read message&#39;)&#xA;            }&#xA;        }&#xA;    }&#xA;}&#xA;&#xA;// Calling the main function to start the script execution&#xA;main();&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>fatwang2/search2ai</title>
    <updated>2024-04-27T01:27:11Z</updated>
    <id>tag:github.com,2024-04-27:/fatwang2/search2ai</id>
    <link href="https://github.com/fatwang2/search2ai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Help your LLMs online&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;strong&gt;简体中文&lt;/strong&gt; · &lt;a href=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/README-EN.md&#34;&gt;English&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;用户交流&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://sum4all.one/telegram&#34;&gt;telegram频道&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;友情赞助&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/fatwang2&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 60px !important;width: 217px !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;版本更新&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;V0.2.6，20240425，支持 SearXNG 免费搜索服务，有损支持 Moonshot 流式模式&lt;/li&gt; &#xA; &lt;li&gt;V0.2.5，20240425，为了解决隐私担忧，开源搜索接口部分的代码&lt;/li&gt; &#xA; &lt;li&gt;V0.2.4，20240424，支持 Groq 的llama-3、mistral等模型，速度起飞&lt;/li&gt; &#xA; &lt;li&gt;V0.2.3，20240423，Cloudflare Worker版本支持Azure OpenAI；支持授权码，可自定义用户的请求key&lt;/li&gt; &#xA; &lt;li&gt;V0.2.2，20240420，支持 Moonshot 的非流式模式&lt;/li&gt; &#xA; &lt;li&gt;V0.2.1，20240310，支持Google、Bing、Duckduckgo、Search1API新闻类搜索；支持通过环境变量MAX_RESULTS调整搜索结果数量；支持通过环境变量CRAWL_RESULTS调整希望深度搜索的数量&lt;/li&gt; &#xA; &lt;li&gt;V0.2.0，20240310，优化openai.js，cloudflare worker版本，这次速度真的更快了！&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;更多历史更新，请参见 &lt;a href=&#34;https://github.com/fatwang2/search2ai/releases&#34;&gt;版本记录&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;S2A&lt;/h1&gt; &#xA;&lt;p&gt;让你的 大模型 API 支持联网，搜索、新闻、网页总结，已支持OpenAI、Gemini、Moonshot(非流式)，大模型会根据你的输入判断是否联网，不是每次都联网搜索，不需要安装任何插件，也不需要更换key，直接在你常用的三方客户端替换自定义地址即可，也支持自行部署，不会影响使用的其他功能，如画图、语音等&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/pictures/Opencatnews.png&#34; alt=&#34;效果示例&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/pictures/BotGem.png&#34; alt=&#34;效果示例&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/pictures/Lobehub.png&#34; alt=&#34;效果示例&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/pictures/url.png&#34; alt=&#34;效果示例&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h1&gt;功能&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;模型&lt;/th&gt; &#xA;   &lt;th&gt;功能&lt;/th&gt; &#xA;   &lt;th&gt;流式输出&lt;/th&gt; &#xA;   &lt;th&gt;部署方式&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OpenAI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;联网、新闻、内容爬取&lt;/td&gt; &#xA;   &lt;td&gt;流式、非流式&lt;/td&gt; &#xA;   &lt;td&gt;Zeabur、本地部署、Cloudflare Worker、Vercel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Azure OpenAI&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;联网、新闻、内容爬取&lt;/td&gt; &#xA;   &lt;td&gt;流式、非流式&lt;/td&gt; &#xA;   &lt;td&gt;Cloudflare Worker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Groq&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;联网、新闻、内容爬取&lt;/td&gt; &#xA;   &lt;td&gt;流式、非流式&lt;/td&gt; &#xA;   &lt;td&gt;Cloudflare Worker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Gemini&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;联网&lt;/td&gt; &#xA;   &lt;td&gt;流式、非流式&lt;/td&gt; &#xA;   &lt;td&gt;Cloudflare Worker&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Moonshot&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;联网、新闻、内容爬取&lt;/td&gt; &#xA;   &lt;td&gt;部分流式、非流式&lt;/td&gt; &#xA;   &lt;td&gt;Zeabur、本地部署、Cloudflare Worker（流式）、Vercel&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;使用&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;替换客户端自定义域名为你部署后的地址&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/pictures/NextChat.png&#34; alt=&#34;效果示例&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;h1&gt;部署&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Zeabur一键部署&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;点击按钮即可一键部署，修改环境变量&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zeabur.com/templates/A4HGYF?referralCode=fatwang2&#34;&gt;&lt;img src=&#34;https://zeabur.com/button.svg?sanitize=true&#34; alt=&#34;Deploy on Zeabur&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;如需保持项目更新，建议先fork本仓库，再通过Zeabur部署你的分支&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://zeabur.com?referralCode=fatwang2&amp;amp;utm_source=fatwang2&amp;amp;utm_campaign=oss&#34;&gt;&lt;img src=&#34;https://zeabur.com/deployed-on-zeabur-dark.svg?sanitize=true&#34; alt=&#34;Deployed on Zeabur&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;本地部署&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;克隆仓库到本地&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/fatwang2/search2ai&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;复制.env.template为.env，配置环境变量&lt;/li&gt; &#xA; &lt;li&gt;进入api目录，运行程序，实时显示日志&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd api &amp;amp;&amp;amp; nohup node index.js &amp;gt; output.log 2&amp;gt;&amp;amp;1 &amp;amp; tail -f output.log&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;端口3014，拼接后的完整地址如下，可根据客户端的需求配置apibase地址使用（如需https，需用nginx进行反代，网上教程很多）&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;http://localhost:3014/v1/chat/completions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cloudflare Worker部署&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;复制&lt;a href=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/search2openai.js&#34;&gt;search2openai.js&lt;/a&gt;或者&lt;a href=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/search2gemini.js&#34;&gt;search2gemini.js&lt;/a&gt;或者&lt;a href=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/search2groq.js&#34;&gt;search2groq.js&lt;/a&gt;的代码，不需要任何修改！在cloudflare的worker里部署，上线后的worker的地址可作为你接口调用时的自定义域名地址，注意拼接，worker地址仅代表v1前的部分&lt;/li&gt; &#xA; &lt;li&gt;在worker中配置环境变量 &lt;img src=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/pictures/worker.png&#34; alt=&#34;效果示例&#34;&gt;&lt;/li&gt; &#xA; &lt;li&gt;worker里配置触发器-自定义域名，国内直接访问worker的地址可能会出问题，需要替换为自定义域名 &lt;img src=&#34;https://raw.githubusercontent.com/fatwang2/search2ai/main/pictures/%E5%9F%9F%E5%90%8D.png&#34; alt=&#34;Alt text&#34;&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Vercel部署&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;特别说明：vercel项目暂不支持流式输出，且有10s响应限制，实际使用体验不佳，放出来主要是想等大神给我pull request&lt;/p&gt; &#xA;&lt;p&gt;一键部署&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vercel.com/new/clone?repository-url=https%3A%2F%2Fgithub.com%2Ffatwang2%2Fsearch2ai&amp;amp;env=SEARCH_SERVICE&amp;amp;envDescription=%E6%9A%82%E6%97%B6%E6%94%AF%E6%8C%81google%E3%80%81bing%E3%80%81serpapi%E3%80%81serper%E3%80%81duckduckgo%EF%BC%8C%E5%BF%85%E5%A1%AB&#34;&gt;&lt;img src=&#34;https://vercel.com/button&#34; alt=&#34;Deploy with Vercel&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;为保证更新，也可以先fork本项目后自己在vercel上部署&lt;/p&gt; &#xA;&lt;h1&gt;环境变量&lt;/h1&gt; &#xA;&lt;p&gt;该项目提供了一些额外的配置项，通过环境变量设置：&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;环境变量&lt;/th&gt; &#xA;   &lt;th&gt;是否必须&lt;/th&gt; &#xA;   &lt;th&gt;描述&lt;/th&gt; &#xA;   &lt;th&gt;例子&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SEARCH_SERVICE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Yes&lt;/td&gt; &#xA;   &lt;td&gt;你的搜索服务，选择什么服务，就需要配置什么服务的key&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;search1api, google, bing, serpapi, serper, duckduckgo, searxng&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;APIBASE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;三方代理地址&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://api.openai.com, https://api.moonshot.cn, https://api.groq.com/openai&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;MAX_RESULTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;搜索结果条数&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;10&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CRAWL_RESULTS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;要进行深度搜索（搜索后获取网页正文）的数量，目前仅支持 search1api，深度速度会慢&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;1&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SEARCH1API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选search1api必填，我自己搭建的搜索服务，又快又便宜，申请地址 &lt;a href=&#34;https://search21api.com&#34;&gt;https://search21api.com&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;BING_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选bing搜索必填，请自行搜索教程，申请地址 &lt;a href=&#34;https://search2ai.online/bing&#34;&gt;https://search2ai.online/bing&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GOOGLE_CX&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选Google搜索必填，Search engine ID，请自行搜索教程，申请地址 &lt;a href=&#34;https://search2ai.online/googlecx&#34;&gt;https://search2ai.online/googlecx&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;GOOGLE_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选Google搜索必填，API key，申请地址 &lt;a href=&#34;https://search2ai.online/googlekey&#34;&gt;https://search2ai.online/googlekey&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SERPAPI_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选serpapi必填，免费100次/月，注册地址 &lt;a href=&#34;https://search2ai.online/serpapi&#34;&gt;https://search2ai.online/serpapi&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SERPER_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选serper必填，6个月免费额度2500次，注册地址 &lt;a href=&#34;https://search2ai.online/serper&#34;&gt;https://search2ai.online/serper&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;SEARXNG_BASE_URL&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选searxng必填，填写自建searXNG服务域名，教程 &lt;a href=&#34;https://github.com/searxng/searxng%EF%BC%8C%E9%9C%80%E6%89%93%E5%BC%80&#34;&gt;https://github.com/searxng/searxng，需打开&lt;/a&gt; json 模式&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;https://search.xxx.xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_TYPE&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;openai供给来源，默认为openai&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;openai, azure&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;RESOURCE_NAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选azure必填&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;DEPLOY_NAME&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选azure必填&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;gpt-35-turbo&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;API_VERSION&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选azure必填&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;2024-02-15-preview&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AZURE_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如选azure必填&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;xxxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AUTH_KEYS&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如果希望用户请求的时候单独定义授权码作为key，则需要填写，如选azure则必填&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;000,1111,2222&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;OPENAI_API_KEY&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;No&lt;/td&gt; &#xA;   &lt;td&gt;如果希望用户请求openai的时候也单独定义授权码作为key，则需要填写&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;sk-xxx&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;后续迭代&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;修复Vercel项目流式输出问题&lt;/li&gt; &#xA; &lt;li&gt;提升流式输出的速度&lt;/li&gt; &#xA; &lt;li&gt;支持更多垂类搜索&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>