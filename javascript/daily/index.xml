<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-17T01:37:03Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>ewanhowell5195/MinecraftTitleGenerator</title>
    <updated>2023-06-17T01:37:03Z</updated>
    <id>tag:github.com,2023-06-17:/ewanhowell5195/MinecraftTitleGenerator</id>
    <link href="https://github.com/ewanhowell5195/MinecraftTitleGenerator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Textures and fonts for the Minecraft Title Generator Blockbench plugin&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Minecraft Title Generator&lt;/h1&gt; &#xA;&lt;p&gt;This plugin adds a new format that allows you to create Minecraft-styled title models that you can render in high quality.&lt;/p&gt; &#xA;&lt;p&gt;Plugin Homepages: &lt;a href=&#34;https://ewanhowell.com/plugins/minecraft-title-generator&#34;&gt;ewanhowell.com&lt;/a&gt; and &lt;a href=&#34;https://www.blockbench.net/plugins/minecraft_title_generator&#34;&gt;blockbench.net&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repo contains the fonts and textures that the plugin uses. To download and use the plugin, go to the plugin store within Blockbench (&lt;code&gt;File &amp;gt; Plugins &amp;gt; Available&lt;/code&gt;) and install it. For more information, please see the plugin homepage.&lt;/p&gt; &#xA;&lt;h1&gt;Submissions&lt;/h1&gt; &#xA;&lt;p&gt;Anyone can submit fonts and textures to this plugin, as long as they meet the requirements and follow the rules.&lt;/p&gt; &#xA;&lt;h3&gt;General rules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fonts/textures must be somewhat high quality. No low-effort submissions.&lt;/li&gt; &#xA; &lt;li&gt;Fonts/textures must be somewhat unique from other fonts/textures. Try not to re-use other textures.&lt;/li&gt; &#xA; &lt;li&gt;Full credit must be provided. If you are basing a font/texture off of someone else&#39;s design, credit them too!&lt;/li&gt; &#xA; &lt;li&gt;Font/texture IDs must be in the snake_case format, and only use &lt;code&gt;a-z&lt;/code&gt;, &lt;code&gt;0-9&lt;/code&gt;, and underscores.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to make a submission&lt;/h2&gt; &#xA;&lt;p&gt;To make a submission, create a fork of this repository and edit/upload the necessary files. After all the changes are made, create a pull request and explain what you are adding.&lt;/p&gt; &#xA;&lt;p&gt;For larger submissions like fonts, it will be a lot easier to clone the repo to your PC and use an app like &lt;a href=&#34;https://desktop.github.com/&#34;&gt;GitHub Desktop&lt;/a&gt; to manage changes.&lt;/p&gt; &#xA;&lt;h3&gt;Compiling&lt;/h3&gt; &#xA;&lt;p&gt;After making a submission of either a font or a texture, it would be really helpful if you could compile it. If you don&#39;t understand how to do this, you can skip this step and I can do it for you.&lt;/p&gt; &#xA;&lt;h4&gt;First time setup:&lt;/h4&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Install &lt;a href=&#34;https://nodejs.org/&#34;&gt;Node.js&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Clone the repo to your PC, add your changes, and then navigate to the &lt;code&gt;scripts&lt;/code&gt; directory in the repo.&lt;/li&gt; &#xA; &lt;li&gt;Open a terminal inside this directory. On Windows, this can be done by typing &lt;code&gt;cmd&lt;/code&gt; into the address bar in file explorer.&lt;/li&gt; &#xA; &lt;li&gt;Run the command &lt;code&gt;npm i&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Compiling:&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If on Windows, just run the &lt;code&gt;compile.bat&lt;/code&gt; file.&lt;/li&gt; &#xA; &lt;li&gt;If on macOS or Linux, run the command &lt;code&gt;node compile.js&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Wait until the script finishes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Textures&lt;/h1&gt; &#xA;&lt;h2&gt;Creating a texture&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To create a new texture, start by using another texture as a template. &lt;code&gt;flat.png&lt;/code&gt; is the best template for general textures.&lt;/li&gt; &#xA; &lt;li&gt;Textures can be found at &lt;code&gt;fonts/fontname/textures&lt;/code&gt;, and overlays can be found in &lt;code&gt;fonts/fontname/overlays&lt;/code&gt;. Save your texture to either the &lt;code&gt;textures&lt;/code&gt; or &lt;code&gt;overlays&lt;/code&gt; folder, depending on what you made.&lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;textures.json&lt;/code&gt; file located at &lt;code&gt;fonts/fontname/textures.json&lt;/code&gt; and add your texture to it. This file follows the following formatting:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;textures&#34;: { // If you are adding a texture, it goes in here&#xA;    &#34;texture_id&#34;: { // The ID of the texture you are adding (required)&#xA;      &#34;name&#34;: &#34;Texture Name&#34;, // The name of the texture if it doesn&#39;t match the ID (optional)&#xA;      &#34;author&#34;: &#34;Author Name&#34;, // Your name (required)&#xA;      &#34;variants&#34;: { // The variants for this texture (optional)&#xA;        &#34;variant_id&#34;: {&#xA;          &#34;name&#34;: &#34;Variant Name&#34;, // (optional)&#xA;          &#34;author&#34;: &#34;Author Name&#34; // Only needed if different from texture author (optional)&#xA;        }&#xA;      }&#xA;    }&#xA;  },&#xA;  &#34;overlays&#34;: { // If you are adding an overlay, it goes in here&#xA;    &#34;overlay_id&#34;: { // The ID of the overlay you are adding (required)&#xA;      &#34;name&#34;: &#34;Overlay Name&#34;, // The name of the overlay if it doesn&#39;t match the ID (optional)&#xA;      &#34;author&#34;: &#34;Author Name&#34; // Your name (required)&#xA;    }&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;sub&gt;Note: Overlays do not support variants&lt;/sub&gt;&lt;/p&gt; &#xA;&lt;p&gt;Thumbnails are generated through the compile script. Do not make them manually.&lt;/p&gt; &#xA;&lt;h3&gt;Texture rules&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Textures must use the exact same shapes as the &lt;code&gt;flat.png&lt;/code&gt; texture. This means no extra cut-outs or filling parts in.&lt;/li&gt; &#xA; &lt;li&gt;Textures must be one of these three sizes: &lt;code&gt;1000x320&lt;/code&gt;, &lt;code&gt;2000x640&lt;/code&gt;, or &lt;code&gt;4000x1280&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Do not add too many variants to a single texture. If I feel a variant is unnecessary, or there are too many, it will be denied.&lt;/li&gt; &#xA; &lt;li&gt;The border colour at the bottom (under all character lines) must be the same colour for the entire thing. It will not work if you try to use multiple colours.&lt;/li&gt; &#xA; &lt;li&gt;Do not submit textures generated using the plugin.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Fonts&lt;/h1&gt; &#xA;&lt;p&gt;Fonts require you to create a model for every character.&lt;/p&gt; &#xA;&lt;p&gt;These are the characters for a font. Some characters use a name instead, since the characters are invalid for file names.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Required characters&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;creeper&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;a&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;b&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;c&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;d&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;e&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;f&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;g&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;h&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;i&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;j&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;k&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;l&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;m&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;n&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;o&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;p&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;q&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;r&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;t&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;u&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;v&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;w&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;x&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;y&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;z&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;£&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;€&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;0&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;1&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;2&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;3&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;4&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;5&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;6&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;7&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;8&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;9&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&amp;amp;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;#&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;(&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;)&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;[&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;]&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;{&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;forwardslash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;backwardslash&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;questionmark&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;!&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;.&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;colon&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;-&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;openquote&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;&#39;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;+&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;=&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;lessthan&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;greaterthan&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;%&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;^&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;asterisk&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;~&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;end&lt;/code&gt; - The start terminator&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;start&lt;/code&gt; - The end terminator&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;,&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;;&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;_&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;$&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;@&lt;/code&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Optional characters&lt;/summary&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;space&lt;/code&gt; - The font will use this character instead of automatically generating a space&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;spacer&lt;/code&gt; - A 1px wide model to use when character spacing is used. This model will be stretched to fill the space.&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;If you want to make a font using different characters, please make an issue about it first.&lt;/p&gt; &#xA;&lt;h2&gt;Creating a font&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;To create a font, create a new folder inside the &lt;code&gt;fonts&lt;/code&gt; directory with the ID of your font.&lt;/li&gt; &#xA; &lt;li&gt;Inside this new folder, create the folders &lt;code&gt;characters&lt;/code&gt;, &lt;code&gt;textures&lt;/code&gt;, and &lt;code&gt;overlays&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;flat.png&lt;/code&gt; texture inside the &lt;code&gt;textures&lt;/code&gt; folder. This will be used for your UV.&lt;/li&gt; &#xA; &lt;li&gt;Create the full layout for your UV. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Characters need to be arranged into rows, with the top face directly above the character, and the bottom face directly below.&lt;/li&gt; &#xA;   &lt;li&gt;You can have as many rows as you need, as long as you leave room for the border UV at the bottom.&lt;/li&gt; &#xA;   &lt;li&gt;2px-wide spaces must be between the characters and the rows.&lt;/li&gt; &#xA;   &lt;li&gt;The orders of the characters doesn&#39;t matter, apart from the first 4, which must be: &lt;code&gt;Creeper A&lt;/code&gt;, &lt;code&gt;A&lt;/code&gt;, &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;. These 4 characters must also all be the same width.&lt;/li&gt; &#xA;   &lt;li&gt;If some characters are taller than the standard character height, they can go into their own rows.&lt;/li&gt; &#xA;   &lt;li&gt;You do not need to worry about making the border UVs at this time.&lt;/li&gt; &#xA;   &lt;li&gt;See the &lt;code&gt;minecraft-ten&lt;/code&gt; and &lt;code&gt;minecraft-five-bold&lt;/code&gt; textures for example UVs.&lt;/li&gt; &#xA;   &lt;li&gt;Font UVs must be &lt;code&gt;1000x320&lt;/code&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Now it is time to create the models. For every character, create a model for it and save it to the characters folder using the name listed above in the characters list. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Characters are modelled using the &lt;code&gt;Java Block/Item&lt;/code&gt; format. You will probably need to enable the &lt;code&gt;Deactivate Size Limit&lt;/code&gt; Blockbench setting.&lt;/li&gt; &#xA;   &lt;li&gt;The borders for each character must be 2px thick (if your font has borders).&lt;/li&gt; &#xA;   &lt;li&gt;You can now add the border UVs to the texture as you create the borders. If you are unsure on how borders should work, see the &lt;code&gt;minecraft-ten&lt;/code&gt; and &lt;code&gt;minecraft-five-bold&lt;/code&gt; models for examples.&lt;/li&gt; &#xA;   &lt;li&gt;The UV for the borders must be located underneath all the character rows.&lt;/li&gt; &#xA;   &lt;li&gt;The baseline for the text must be at Y level 2, with the border going to Y level 0. If the font does not have a border, the text baseline needs to be Y level 0.&lt;/li&gt; &#xA;   &lt;li&gt;Keep characters centred in the scene.&lt;/li&gt; &#xA;   &lt;li&gt;Groups and textures in the model do not matter, they will be ignored when the font is compiled.&lt;/li&gt; &#xA;   &lt;li&gt;Try to create optimised models without unnecessary elements.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;textures.json&lt;/code&gt; file, following the formatting explained in the textures section. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The first texture must be &lt;code&gt;flat&lt;/code&gt;, and is required for all fonts.&lt;/li&gt; &#xA;   &lt;li&gt;The second texture is the main texture, and will be the one that is automatically selected in the plugin.&lt;/li&gt; &#xA;   &lt;li&gt;All the other textures will be sorted by popularity over the last week.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Create at least one overlay texture. It doesn&#39;t matter what it is, but at least one is required.&lt;/li&gt; &#xA; &lt;li&gt;Add your font to the &lt;code&gt;fonts.json&lt;/code&gt; file found at the root of the repo. This file follows the following formatting:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;[&#xA;  {&#xA;    &#34;id&#34;: &#34;font-id&#34;, // Font ID (required)&#xA;    &#34;author&#34;: &#34;Ewan Howell&#34;, // Font author (required)&#xA;    &#34;width&#34;: 36, // Width of first 4 characters, including border (required)&#xA;    &#34;height&#34;: 36, // Character height, including border, but not characters that go above or below the baselines, such as a comma (required)&#xA;    &#34;border&#34;: 212, // The Y coordinate of the top of the border UV (required)&#xA;    &#34;faces&#34;: [ // List of coordinates defining the front faces of the rows of characters (required)&#xA;      [16, 48], // When there are two values, these are the top and bottom of the face&#xA;      [148, 154, 186, 194] // When there are four values, these are the top of the section over the topline, the top of the normal height, but bottom of the normal height, and the bottom of the section below the baseline. The first and second values can be the same if there is no section above the topline. Same goes for the baseline.&#xA;    ],&#xA;    &#34;ends&#34;: [ // List of coordinates defining the top and bottom faces of the rows of characters (required)&#xA;      [0, 16, 48, 64], // First two values are the top and bottom Y coordinates of the top face, second two are the bottom face&#xA;      [132, 132, 186, 186] // If your font does not have top and bottom faces, you can make the top and bottom the same values, which should match the top and bottom of the front faces.&#xA;    ],&#xA;    &#34;terminatorSpace&#34;: true, // The terminator characters should have a space between itself and the text (optional)&#xA;    &#34;forcedTerminators&#34;: true, // The terminator characters will always be used and cannot be disabled (optional)&#xA;    &#34;autoBorder&#34;: true, // Will generate an automatic border which is a single element around the entire text row (optional)&#xA;    &#34;borderless&#34;: true, // The font has no border (optional)&#xA;    &#34;overlay&#34;: true // The font has an overlay texture that is applied over the top of the &#34;gradient&#34; texture mode. Requires an &#34;overlay.png&#34; in the textures folder. See the &#34;minecraft-five-bold-block&#34; for an example (optional)&#xA;  }&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testing your font&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to test your font is to modify the plugin to use your fork of this repo instead of the official one.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the plugin file from the &lt;a href=&#34;https://github.com/JannisX11/blockbench-plugins/raw/master/plugins/minecraft_title_generator.js&#34;&gt;Blockbench Plugins&lt;/a&gt; repository.&lt;/li&gt; &#xA; &lt;li&gt;Edit the &lt;code&gt;repo&lt;/code&gt; variable on line 2 to be your repo.&lt;/li&gt; &#xA; &lt;li&gt;Uninstall the official plugin and install your modified one by dragging and dropping the file into Blockbench.&lt;/li&gt; &#xA; &lt;li&gt;Compile the font using the compile script and commit the font to your fork, then view the font from within Blockbench!&lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>vogler/free-games-claimer</title>
    <updated>2023-06-17T01:37:03Z</updated>
    <id>tag:github.com,2023-06-17:/vogler/free-games-claimer</id>
    <link href="https://github.com/vogler/free-games-claimer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Automatically claims free games on the Epic Games Store, Amazon Prime Gaming and GOG.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;logo-free-games-claimer&#34; src=&#34;https://user-images.githubusercontent.com/493741/214588518-a4c89998-127e-4a8c-9b1e-ee4a9d075715.png&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;free-games-claimer&lt;/h1&gt; &#xA;&lt;p&gt;Claims free games periodically on&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/3/31/Epic_Games_logo.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &lt;a href=&#34;https://www.epicgames.com/store/free-games&#34;&gt;Epic Games Store&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://seeklogo.com/images/P/prime-gaming-logo-61A701B3F5-seeklogo.com.png&#34; width=&#34;32&#34;&gt; &lt;a href=&#34;https://gaming.amazon.com&#34;&gt;Amazon Prime Gaming&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://static.wikia.nocookie.net/this-war-of-mine/images/1/1a/Logo_GoG.png/revision/latest?cb=20160711062658&#34; width=&#34;32&#34;&gt; &lt;a href=&#34;https://www.gog.com&#34;&gt;GOG&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://www.freepnglogos.com/uploads/xbox-logo-picture-png-14.png&#34; width=&#34;32&#34;&gt; &lt;a href=&#34;https://www.xbox.com/en-US/live/gold#gameswithgold&#34;&gt;Xbox Live Games with Gold&lt;/a&gt; - planned&lt;/li&gt; &#xA; &lt;li&gt;&lt;img src=&#34;https://cdn2.unrealengine.com/ue-logo-white-e34b6ba9383f.svg?sanitize=true&#34; width=&#34;32&#34;&gt; &lt;a href=&#34;https://www.unrealengine.com/marketplace/en-US/assets?count=20&amp;amp;sortBy=effectiveDate&amp;amp;sortDir=DESC&amp;amp;start=0&amp;amp;tag=4910&#34;&gt;Unreal Engine (Assets)&lt;/a&gt; (&lt;a href=&#34;https://github.com/vogler/free-games-claimer/issues/44&#34;&gt;experimental&lt;/a&gt;, same login as Epic Games)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Pull requests welcome :)&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/493741/214667078-eb5c1877-2bdd-40c1-b94e-4a50d6852c06.png&#34; alt=&#34;Telegram Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Works on Windows/macOS/Linux.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;Raspberry Pi (3, 4, Zero 2): &lt;a href=&#34;https://github.com/vogler/free-games-claimer/issues/3&#34;&gt;requires 64-bit OS&lt;/a&gt; like Raspberry Pi OS or Ubuntu (Raspbian won&#39;t work since it&#39;s 32-bit).&lt;/p&gt; &#xA;&lt;h2&gt;How to run&lt;/h2&gt; &#xA;&lt;p&gt;Easy option: &lt;a href=&#34;https://docs.docker.com/get-docker/&#34;&gt;install Docker&lt;/a&gt; (or &lt;a href=&#34;https://podman-desktop.io/&#34;&gt;podman&lt;/a&gt;) and run this command in a terminal (Windows: &lt;code&gt;cmd&lt;/code&gt;, &lt;code&gt;.bat&lt;/code&gt; file):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --rm -it -p 6080:6080 -v fgc:/fgc/data --pull=always ghcr.io/vogler/free-games-claimer&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run &lt;code&gt;node epic-games; node prime-gaming; node gog&lt;/code&gt; - if you only want to claim games for one of the stores, you can override the default command by appending e.g. &lt;code&gt;node epic-games&lt;/code&gt; at the end of the &lt;code&gt;docker run&lt;/code&gt; command, or if you want several &lt;code&gt;bash -c &#34;node epic-games.js; node gog.js&#34;&lt;/code&gt;. Data (including json files with claimed games, codes to redeem, screenshots) is stored in the Docker volume &lt;code&gt;fgc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;I want to run without Docker or develop locally.&lt;/summary&gt; &#xA; &lt;ol&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;Install Node.js&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Clone/download this repository and &lt;code&gt;cd&lt;/code&gt; into it in a terminal&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;npm install&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;li&gt;Run &lt;code&gt;pip install apprise&lt;/code&gt; to install &lt;a href=&#34;https://github.com/caronc/apprise&#34;&gt;apprise&lt;/a&gt; if you want notifications&lt;/li&gt; &#xA; &lt;/ol&gt; &#xA; &lt;p&gt;During &lt;code&gt;npm install&lt;/code&gt; Playwright will download its Firefox to a cache in home (&lt;a href=&#34;https://playwright.dev/docs/browsers#managing-browser-binaries&#34;&gt;doc&lt;/a&gt;). If you are missing some dependencies for the browser on your system, you can use &lt;code&gt;sudo npx playwright install firefox --with-deps&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;If you don&#39;t want to use Docker for quasi-headless mode, you could run inside a virtual machine, on a server, or you wake your PC at night to avoid being interrupted.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;All scripts start an automated Firefox instance, either with the browser GUI shown or hidden (&lt;em&gt;headless mode&lt;/em&gt;). By default, you won&#39;t see any browser open on your host system.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;When running inside Docker, the browser will be shown only inside the container. You can open &lt;a href=&#34;http://localhost:6080&#34;&gt;http://localhost:6080&lt;/a&gt; to interact with the browser running inside the container via noVNC (or use other VNC clients on port 5900).&lt;/li&gt; &#xA; &lt;li&gt;When running the scripts outside of Docker, the browser will be hidden by default; you can use &lt;code&gt;SHOW=1 ...&lt;/code&gt; to show the UI (see options below).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;When running the first time, you have to login for each store you want to claim games on. You can login indirectly via the terminal or directly in the browser. The scripts will wait until you are successfully logged in.&lt;/p&gt; &#xA;&lt;p&gt;There will be prompts in the terminal asking you to enter email, password, and afterwards some OTP (one time password / security code) if you have 2FA/MFA (two-/multi-factor authentication) enabled. If you want to login yourself via the browser, you can press escape in the terminal to skip the prompts.&lt;/p&gt; &#xA;&lt;p&gt;After login, the script will continue claiming the current games. If it still waits after you are already logged in, you can restart it (and open an issue). If you run the scripts regularly, you should not have to login again.&lt;/p&gt; &#xA;&lt;h3&gt;Configuration / Options&lt;/h3&gt; &#xA;&lt;p&gt;Options are set via &lt;a href=&#34;https://kinsta.com/knowledgebase/what-is-an-environment-variable/&#34;&gt;environment variables&lt;/a&gt; which allow for flexible configuration.&lt;/p&gt; &#xA;&lt;p&gt;TODO: &lt;del&gt;On the first run, the script will guide you through configuration and save all settings to &lt;code&gt;data/config.env&lt;/code&gt;. You can edit this file directly or run &lt;code&gt;node fgc config&lt;/code&gt; to run the configuration assistant again.&lt;/del&gt;&lt;/p&gt; &#xA;&lt;p&gt;Available options/variables and their default values:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;SHOW&lt;/td&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;Show browser if 1. Default for Docker, not shown when running outside.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;WIDTH&lt;/td&gt; &#xA;   &lt;td&gt;1280&lt;/td&gt; &#xA;   &lt;td&gt;Width of the opened browser (and of screen for VNC in Docker).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;HEIGHT&lt;/td&gt; &#xA;   &lt;td&gt;1280&lt;/td&gt; &#xA;   &lt;td&gt;Height of the opened browser (and of screen for VNC in Docker).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;VNC_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;VNC password for Docker. No password used by default!&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NOTIFY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Notification services to use (Pushover, Slack, Telegram...), see below.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;NOTIFY_TITLE&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Optional title for notifications, e.g. for Pushover.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;BROWSER_DIR&lt;/td&gt; &#xA;   &lt;td&gt;data/browser&lt;/td&gt; &#xA;   &lt;td&gt;Directory for browser profile, e.g. for multiple accounts.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;TIMEOUT&lt;/td&gt; &#xA;   &lt;td&gt;60&lt;/td&gt; &#xA;   &lt;td&gt;Timeout for any page action. Should be fine even on slow machines.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;LOGIN_TIMEOUT&lt;/td&gt; &#xA;   &lt;td&gt;180&lt;/td&gt; &#xA;   &lt;td&gt;Timeout for login in seconds. Will wait twice (prompt + manual login).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EMAIL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default email for any login.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Default password for any login.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EG_EMAIL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Epic Games email for login. Overrides EMAIL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EG_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Epic Games password for login. Overrides PASSWORD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EG_OTPKEY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Epic Games MFA OTP key.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;EG_PARENTALPIN&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Epic Games Parental Controls PIN.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PG_EMAIL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prime Gaming email for login. Overrides EMAIL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PG_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prime Gaming password for login. Overrides PASSWORD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PG_OTPKEY&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Prime Gaming MFA OTP key.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PG_REDEEM&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Prime Gaming: try to redeem keys on external stores (&lt;a href=&#34;https://github.com/vogler/free-games-claimer/issues/5&#34;&gt;experimental&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PG_CLAIMDLC&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Prime Gaming: try to claim DLCs (&lt;a href=&#34;https://github.com/vogler/free-games-claimer/issues/55&#34;&gt;experimental&lt;/a&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOG_EMAIL&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GOG email for login. Overrides EMAIL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOG_PASSWORD&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;GOG password for login. Overrides PASSWORD.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GOG_NEWSLETTER&lt;/td&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Do not unsubscribe from newsletter after claiming a game if 1.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;See &lt;code&gt;config.js&lt;/code&gt; for all options.&lt;/p&gt; &#xA;&lt;h4&gt;How to set options&lt;/h4&gt; &#xA;&lt;p&gt;You can add options directly in the command or put them in a file to load.&lt;/p&gt; &#xA;&lt;h5&gt;Docker&lt;/h5&gt; &#xA;&lt;p&gt;You can pass variables using &lt;code&gt;-e VAR=VAL&lt;/code&gt;, for example &lt;code&gt;docker run -e EMAIL=foo@bar.baz -e NOTIFY=&#39;tgram://...&#39; ...&lt;/code&gt; or using &lt;code&gt;--env-file fgc.env&lt;/code&gt; where &lt;code&gt;fgc.env&lt;/code&gt; is a file on your host system (see &lt;a href=&#34;https://docs.docker.com/engine/reference/commandline/run/#env&#34;&gt;docs&lt;/a&gt;). You can also &lt;code&gt;docker cp&lt;/code&gt; your configuration file to &lt;code&gt;/fgc/data/config.env&lt;/code&gt; in the &lt;code&gt;fgc&lt;/code&gt; volume to store it with the rest of the data instead of on the host (&lt;a href=&#34;https://github.com/moby/moby/issues/25245#issuecomment-365980572&#34;&gt;example&lt;/a&gt;). If you are using &lt;a href=&#34;https://docs.docker.com/compose/environment-variables/&#34;&gt;docker compose&lt;/a&gt; (or Portainer etc.), you can put options in the &lt;code&gt;environment:&lt;/code&gt; section.&lt;/p&gt; &#xA;&lt;h5&gt;Without Docker&lt;/h5&gt; &#xA;&lt;p&gt;On Linux/macOS you can prefix the variables you want to set, for example &lt;code&gt;EMAIL=foo@bar.baz SHOW=1 node epic-games&lt;/code&gt; will show the browser and skip asking you for your login email. You can also put options in &lt;code&gt;data/config.env&lt;/code&gt; which will be loaded by &lt;a href=&#34;https://github.com/motdotla/dotenv&#34;&gt;dotenv&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Notifications&lt;/h3&gt; &#xA;&lt;p&gt;The scripts will try to send notifications for successfully claimed games and any errors like needing to log in or encountered captchas (should not happen).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/caronc/apprise&#34;&gt;apprise&lt;/a&gt; is used for notifications and offers many services including Pushover, Slack, Telegram, SMS, Email, desktop and custom notifications. You just need to set &lt;code&gt;NOTIFY&lt;/code&gt; to the notification services you want to use, e.g. &lt;code&gt;NOTIFY=&#39;mailto://myemail:mypass@gmail.com&#39; &#39;pbul://o.gn5kj6nfhv736I7jC3cj3QLRiyhgl98b&#39;&lt;/code&gt; - refer to their list of services and &lt;a href=&#34;https://github.com/caronc/apprise#command-line-usage&#34;&gt;examples&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Automatic login, two-factor authentication&lt;/h3&gt; &#xA;&lt;p&gt;If you set the options for email, password and OTP key, there will be no prompts and logins should happen automatically. This is optional since all stores should stay logged in since cookies are refreshed. To get the OTP key, it is easiest to follow the store&#39;s guide for adding an authenticator app. You should also scan the shown QR code with your favorite app to have an alternative method for 2FA.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Epic Games&lt;/strong&gt;: visit &lt;a href=&#34;https://www.epicgames.com/account/password&#34;&gt;password &amp;amp; security&lt;/a&gt;, enable &#39;third-party authenticator app&#39;, copy the &#39;Manual Entry Key&#39; and use it to set &lt;code&gt;EG_OTPKEY&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Prime Gaming&lt;/strong&gt;: visit Amazon &#39;Your Account › Login &amp;amp; security&#39;, 2-step verification › Manage › Add new app › Can&#39;t scan the barcode, copy the bold key and use it to set &lt;code&gt;PG_OTPKEY&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;GOG&lt;/strong&gt;: only offers OTP via email&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Beware that storing passwords and OTP keys as clear text may be a security risk. Use a unique/generated password! TODO: maybe at least offer to base64 encode for storage.&lt;/p&gt; &#xA;&lt;h3&gt;Epic Games Store&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;node epic-games&lt;/code&gt; (locally or in Docker).&lt;/p&gt; &#xA;&lt;h3&gt;Amazon Prime Gaming&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;node prime-gaming&lt;/code&gt; (locally or in Docker).&lt;/p&gt; &#xA;&lt;p&gt;Claiming the Amazon Games works out-of-the-box, however, for games on external stores you need to either link your account or redeem a key.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Stores that require account linking: Epic Games, Battle.net, Origin.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Stores that require redeeming a key: GOG.com, Microsoft Games, Legacy Games.&lt;/p&gt; &lt;p&gt;Keys and URLs are printed to the console, included in notifications and saved in &lt;code&gt;data/prime-gaming.json&lt;/code&gt;. A screenshot of the page with the key is also saved to &lt;code&gt;data/screenshots&lt;/code&gt;. &lt;a href=&#34;https://github.com/vogler/free-games-claimer/issues/5&#34;&gt;TODO&lt;/a&gt;: &lt;del&gt;redeem keys on external stores.&lt;/del&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Run periodically&lt;/h3&gt; &#xA;&lt;h4&gt;How often?&lt;/h4&gt; &#xA;&lt;p&gt;Epic Games usually has two free games &lt;em&gt;every week&lt;/em&gt;, before Christmas every day. Prime Gaming has new games &lt;em&gt;every month&lt;/em&gt; or more often during Prime days. GOG usually has one new game every couples of weeks.&lt;/p&gt; &#xA;&lt;p&gt;It is save to run the scripts every day.&lt;/p&gt; &#xA;&lt;h4&gt;How to schedule?&lt;/h4&gt; &#xA;&lt;p&gt;The container/scripts will claim currently available games and then exit. If you want it to run regularly, you have to schedule the runs yourself:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Linux/macOS: &lt;code&gt;crontab -e&lt;/code&gt; (&lt;a href=&#34;https://github.com/vogler/free-games-claimer/discussions/56&#34;&gt;example&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;macOS: &lt;a href=&#34;https://stackoverflow.com/questions/132955/how-do-i-set-a-task-to-run-every-so-often&#34;&gt;launchd&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Windows: &lt;a href=&#34;https://active-directory-wp.com/docs/Usage/How_to_add_a_cron_job_on_Windows/Scheduled_tasks_and_cron_jobs_on_Windows/index.html&#34;&gt;task scheduler&lt;/a&gt;, &lt;a href=&#34;https://stackoverflow.com/questions/132971/what-is-the-windows-version-of-cron&#34;&gt;other options&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;any OS: use a process manager like &lt;a href=&#34;https://pm2.keymetrics.io/docs/usage/restart-strategies/&#34;&gt;pm2&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;TODO: &lt;del&gt;add some server-mode where the script just keeps running and claims games e.g. every day.&lt;/del&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Problems?&lt;/h3&gt; &#xA;&lt;p&gt;Check the open &lt;a href=&#34;https://github.com/vogler/free-games-claimer/issues&#34;&gt;issues&lt;/a&gt; and comment there or open a new issue.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re a developer, you can use &lt;code&gt;PWDEBUG=1 ...&lt;/code&gt; to &lt;a href=&#34;https://playwright.dev/docs/inspector&#34;&gt;inspect&lt;/a&gt; which opens a debugger where you can step through the script.&lt;/p&gt; &#xA;&lt;h2&gt;History/DevLog&lt;/h2&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Click to expand&lt;/summary&gt; &#xA; &lt;p&gt;Tried &lt;a href=&#34;https://github.com/Revadike/epicgames-freebies-claimer&#34;&gt;epicgames-freebies-claimer&lt;/a&gt;, but had problems since epicgames introduced hcaptcha (see &lt;a href=&#34;https://github.com/Revadike/epicgames-freebies-claimer/issues/172&#34;&gt;issue&lt;/a&gt;).&lt;/p&gt; &#xA; &lt;p&gt;Played around with puppeteer before, now trying newer &lt;a href=&#34;https://playwright.dev&#34;&gt;https://playwright.dev&lt;/a&gt; which is pretty similar. Playwright Inspector and &lt;code&gt;codegen&lt;/code&gt; to generate scripts are nice, but failed to generate the right code for clicking a button in an iframe.&lt;/p&gt; &#xA; &lt;p&gt;Added &lt;a href=&#34;https://github.com/vogler/epicgames-claimer/commit/e5ce7916ab6329cfc7134677c4d89c2b3fa3ba97#diff-d18d03e9c407a20e05fbf03cbd6f9299857740544fb6b50d6a70b9c6fbc35831&#34;&gt;main.spec.ts&lt;/a&gt; which was the test script generated by &lt;code&gt;npx playwright codegen&lt;/code&gt; with manual fix for clicking buttons in the created iframe. Can be executed by &lt;code&gt;npx playwright test&lt;/code&gt;. The test runner has options &lt;code&gt;--debug&lt;/code&gt; and &lt;code&gt;--timeout&lt;/code&gt; and can execute typescript which is nice. However, this only worked up to the button &#39;I Agree&#39;, and then showed an hcaptcha.&lt;/p&gt; &#xA; &lt;p&gt;Added &lt;a href=&#34;https://github.com/vogler/epicgames-claimer/commit/e5ce7916ab6329cfc7134677c4d89c2b3fa3ba97#diff-d18d03e9c407a20e05fbf03cbd6f9299857740544fb6b50d6a70b9c6fbc35831&#34;&gt;main.captcha.js&lt;/a&gt; which uses beta of &lt;code&gt;playwright-extra@next&lt;/code&gt; and &lt;code&gt;@extra/recaptcha@next&lt;/code&gt; (from &lt;a href=&#34;https://github.com/berstend/puppeteer-extra/pull/303#issuecomment-775277480&#34;&gt;comment on puppeteer-extra&lt;/a&gt;). However, &lt;code&gt;playwright-extra&lt;/code&gt; seems to be old and missing &lt;code&gt;:has-text&lt;/code&gt; selector (fixed &lt;a href=&#34;https://github.com/vogler/epicgames-claimer/commit/ba97a0e840b65f4476cca18e28d8461b0c703420&#34;&gt;here&lt;/a&gt;) and &lt;code&gt;page.frameLocator&lt;/code&gt;, so the script did not run without adjustments. Also, solving via &lt;a href=&#34;https://2captcha.com?from=13225256&#34;&gt;2captcha&lt;/a&gt; is a paid service which takes time and may be unreliable.&lt;/p&gt; &#xA; &lt;!-- Alternative: https://anti-captcha.com --&gt; &#xA; &lt;p&gt;Added &lt;a href=&#34;https://github.com/vogler/epicgames-claimer/commit/64d0ba8ce71baec3947d1b64acd567befcb39340#diff-f70d3bd29df4a343f11062a97063953173491ce30fe34f69a0fc52517adbf342&#34;&gt;main.stealth.js&lt;/a&gt; which uses the stealth plugin without &lt;code&gt;playwright-extra&lt;/code&gt; wrapper but up-to-date &lt;code&gt;playwright&lt;/code&gt; (from &lt;a href=&#34;https://github.com/berstend/puppeteer-extra/issues/454#issuecomment-917437212&#34;&gt;comment&lt;/a&gt;). The listed evasions are enough to not show an hcaptcha. Script claimed game successfully in non-headless mode.&lt;/p&gt; &#xA; &lt;p&gt;Removed &lt;code&gt;main.captcha.js&lt;/code&gt;. Using Playwright Test (&lt;code&gt;main.spec.ts&lt;/code&gt;) instead of Library (&lt;code&gt;main.stealth.js&lt;/code&gt;) has the advantage of free CLI like &lt;code&gt;--debug&lt;/code&gt; and &lt;code&gt;--timeout&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;!-- TODO: check if stealth plugin can be setup with `contextOptions` ([doc](https://playwright.dev/docs/test-configuration#more-browser-and-context-options)). --&gt; &#xA; &lt;p&gt;Button selectors should preferably use text in order to be more stable against changes in the DOM.&lt;/p&gt; &#xA; &lt;p&gt;Renamed repository from epicgames-claimer to free-games-claimer since a script for Amazon Prime Gaming was also added. Removed all old scripts in favor of just &lt;code&gt;epic-games.js&lt;/code&gt; and &lt;code&gt;prime-gaming.js&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;epic games: &lt;code&gt;headless&lt;/code&gt; mode gets hcaptcha challenge. More details/references in &lt;a href=&#34;https://github.com/vogler/free-games-claimer/issues/2&#34;&gt;issue&lt;/a&gt;.&lt;/p&gt; &#xA; &lt;p&gt;&lt;a href=&#34;https://github.com/vogler/free-games-claimer/pull/11&#34;&gt;https://github.com/vogler/free-games-claimer/pull/11&lt;/a&gt; introduced a Dockerfile for running non-headless inside the container via xvfb which makes it headless for the host running the container.&lt;/p&gt; &#xA; &lt;p&gt;v1.0 Standalone scripts node epic-games and node prime-gaming using Chromium.&lt;/p&gt; &#xA; &lt;p&gt;Changed to Firefox for all scripts since Chromium led to captchas. Claiming then also worked in headless mode without Docker.&lt;/p&gt; &#xA; &lt;p&gt;Added options via env vars, configurable in &lt;code&gt;data/config.env&lt;/code&gt;.&lt;/p&gt; &#xA; &lt;p&gt;Added OTP generation via otplib for automatic login, even with 2FA.&lt;/p&gt; &#xA; &lt;p&gt;Added notifications via &lt;a href=&#34;https://github.com/caronc/apprise&#34;&gt;apprise&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://star-history.com/#vogler/free-games-claimer&amp;amp;Date&#34;&gt;&lt;img src=&#34;https://api.star-history.com/svg?repos=vogler/free-games-claimer&amp;amp;type=Date&#34; alt=&#34;Star History Chart&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Logo with smaller aspect ratio (for Telegram bot etc.): 👾 - &lt;a href=&#34;https://emojipedia.org/alien-monster/&#34;&gt;emojipedia&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/493741/214589922-093d6557-6393-421c-b577-da58ff3671bc.png&#34; alt=&#34;logo-fgc&#34;&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>josdejong/jsoneditor</title>
    <updated>2023-06-17T01:37:03Z</updated>
    <id>tag:github.com,2023-06-17:/josdejong/jsoneditor</id>
    <link href="https://github.com/josdejong/jsoneditor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A web-based tool to view, edit, format, and validate JSON&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;JSON Editor&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/jsoneditor&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/jsoneditor.svg?sanitize=true&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/jsoneditor&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/jsoneditor.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/josdejong/jsoneditor/pulse&#34;&gt;&lt;img src=&#34;https://img.shields.io/maintenance/yes/2023.svg?sanitize=true&#34; alt=&#34;Maintenance&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/josdejong/jsoneditor/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/josdejong/jsoneditor.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.fossa.io/projects/git%2Bgithub.com%2Fjosdejong%2Fjsoneditor?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.io/api/projects/git%2Bgithub.com%2Fjosdejong%2Fjsoneditor.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;JSON Editor is a web-based tool to view, edit, format, and validate JSON. It has various modes such as a tree editor, a code editor, and a plain text editor. The editor can be used as a component in your own web application. It can be loaded as CommonJS module, AMD module, or as a regular javascript file.&lt;/p&gt; &#xA;&lt;p&gt;The library was originally developed as core component of the popular web application &lt;a href=&#34;https://jsoneditoronline.org&#34;&gt;https://jsoneditoronline.org&lt;/a&gt; and has been open sourced since then.&lt;/p&gt; &#xA;&lt;p&gt;Supported browsers: Chrome, Firefox, Safari, Opera, Edge, Internet Explorer 11.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img alt=&#34;json editor&#34; src=&#34;https://raw.github.com/josdejong/jsoneditor/master/misc/jsoneditor.png&#34;&gt; &amp;nbsp; &lt;img alt=&#34;code editor&#34; src=&#34;https://raw.github.com/josdejong/jsoneditor/master/misc/codeeditor.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Cross browser testing for JSONEditor is generously provided by &lt;a href=&#34;https://www.browserstack.com&#34; target=&#34;_blank&#34;&gt;BrowserStack&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.browserstack.com&#34; target=&#34;_blank&#34;&gt;&lt;img alt=&#34;BrowserStack&#34; src=&#34;https://raw.github.com/josdejong/jsoneditor/master/misc/browserstack.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Successor: svelte-jsoneditor&lt;/h2&gt; &#xA;&lt;p&gt;This library &lt;a href=&#34;https://github.com/josdejong/jsoneditor&#34;&gt;&lt;code&gt;jsoneditor&lt;/code&gt;&lt;/a&gt; has a successor: &lt;a href=&#34;https://github.com/josdejong/svelte-jsoneditor&#34;&gt;&lt;code&gt;svelte-jsoneditor&lt;/code&gt;&lt;/a&gt;. The new editor is not a one-to-one replacement, so there may be reasons to stick with &lt;code&gt;jsoneditor&lt;/code&gt;. The main differences between the two &lt;a href=&#34;https://github.com/josdejong/svelte-jsoneditor#differences-between-josdejongsvelte-jsoneditor-and-josdejongjsoneditor&#34;&gt;are described here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;JSONEditor has various modes, with the following features.&lt;/p&gt; &#xA;&lt;h3&gt;Tree mode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Change, add, move, remove, and duplicate fields and values.&lt;/li&gt; &#xA; &lt;li&gt;Sort arrays and objects.&lt;/li&gt; &#xA; &lt;li&gt;Transform JSON using &lt;a href=&#34;http://jmespath.org/&#34;&gt;JMESPath&lt;/a&gt; queries.&lt;/li&gt; &#xA; &lt;li&gt;Colorized code.&lt;/li&gt; &#xA; &lt;li&gt;Color picker.&lt;/li&gt; &#xA; &lt;li&gt;Search &amp;amp; highlight text in the tree view.&lt;/li&gt; &#xA; &lt;li&gt;Undo and redo all actions.&lt;/li&gt; &#xA; &lt;li&gt;JSON schema validation (powered by &lt;a href=&#34;https://github.com/epoberezkin/ajv&#34;&gt;ajv&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code mode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Colorized code (powered by &lt;a href=&#34;https://ace.c9.io&#34;&gt;Ace&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Inspect JSON (powered by &lt;a href=&#34;https://ace.c9.io&#34;&gt;Ace&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Format and compact JSON.&lt;/li&gt; &#xA; &lt;li&gt;Repair JSON.&lt;/li&gt; &#xA; &lt;li&gt;JSON schema validation (powered by &lt;a href=&#34;https://github.com/epoberezkin/ajv&#34;&gt;ajv&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Text mode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Format and compact JSON.&lt;/li&gt; &#xA; &lt;li&gt;Repair JSON.&lt;/li&gt; &#xA; &lt;li&gt;JSON schema validation (powered by &lt;a href=&#34;https://github.com/epoberezkin/ajv&#34;&gt;ajv&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Preview mode&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Handle large JSON documents up to 500 MiB.&lt;/li&gt; &#xA; &lt;li&gt;Transform JSON using &lt;a href=&#34;http://jmespath.org/&#34;&gt;JMESPath&lt;/a&gt; queries.&lt;/li&gt; &#xA; &lt;li&gt;Format and compact JSON.&lt;/li&gt; &#xA; &lt;li&gt;Repair JSON.&lt;/li&gt; &#xA; &lt;li&gt;JSON schema validation (powered by &lt;a href=&#34;https://github.com/epoberezkin/ajv&#34;&gt;ajv&lt;/a&gt;).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Documentation: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/josdejong/jsoneditor/tree/master/docs/api.md&#34;&gt;API&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/josdejong/jsoneditor/tree/master/docs/usage.md&#34;&gt;Usage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/josdejong/jsoneditor/tree/master/docs/shortcut_keys.md&#34;&gt;Shortcut keys&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/josdejong/jsoneditor/tree/master/examples&#34;&gt;Examples&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/josdejong/jsoneditor&#34;&gt;Source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/josdejong/jsoneditor/raw/master/HISTORY.md&#34;&gt;History&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;with npm (recommended):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install jsoneditor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that to use JSONEditor in Internet Explorer 11, it is necessary to load a polyfill for &lt;code&gt;Promise&lt;/code&gt; in your application.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alternatively, you can use another JavaScript package manager like &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;https://yarnpkg.com/&lt;/a&gt;, or a CDN such as &lt;a href=&#34;https://cdnjs.com/&#34;&gt;https://cdnjs.com/&lt;/a&gt; or &lt;a href=&#34;https://www.jsdelivr.com/&#34;&gt;https://www.jsdelivr.com/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Use&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note that in the following example, you&#39;ll have to change the urls &lt;code&gt;jsoneditor/dist/jsoneditor.min.js&lt;/code&gt; and &lt;code&gt;jsoneditor/dist/jsoneditor.min.css&lt;/code&gt; to match the place where you&#39;ve downloaded the library, or fill in the URL of the CDN you&#39;re using.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!DOCTYPE HTML&amp;gt;&#xA;&amp;lt;html lang=&#34;en&#34;&amp;gt;&#xA;&amp;lt;head&amp;gt;&#xA;    &amp;lt;!-- when using the mode &#34;code&#34;, it&#39;s important to specify charset utf-8 --&amp;gt;&#xA;    &amp;lt;meta charset=&#34;utf-8&#34;&amp;gt;&#xA;&#xA;    &amp;lt;link href=&#34;jsoneditor/dist/jsoneditor.min.css&#34; rel=&#34;stylesheet&#34; type=&#34;text/css&#34;&amp;gt;&#xA;    &amp;lt;script src=&#34;jsoneditor/dist/jsoneditor.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&amp;lt;body&amp;gt;&#xA;    &amp;lt;div id=&#34;jsoneditor&#34; style=&#34;width: 400px; height: 400px;&#34;&amp;gt;&amp;lt;/div&amp;gt;&#xA;&#xA;    &amp;lt;script&amp;gt;&#xA;        // create the editor&#xA;        const container = document.getElementById(&#34;jsoneditor&#34;)&#xA;        const options = {}&#xA;        const editor = new JSONEditor(container, options)&#xA;&#xA;        // set json&#xA;        const initialJson = {&#xA;            &#34;Array&#34;: [1, 2, 3],&#xA;            &#34;Boolean&#34;: true,&#xA;            &#34;Null&#34;: null,&#xA;            &#34;Number&#34;: 123,&#xA;            &#34;Object&#34;: {&#34;a&#34;: &#34;b&#34;, &#34;c&#34;: &#34;d&#34;},&#xA;            &#34;String&#34;: &#34;Hello World&#34;&#xA;        }&#xA;        editor.set(initialJson)&#xA;&#xA;        // get json&#xA;        const updatedJson = editor.get()&#xA;    &amp;lt;/script&amp;gt;&#xA;&amp;lt;/body&amp;gt;&#xA;&amp;lt;/html&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Build&lt;/h2&gt; &#xA;&lt;p&gt;The code of the JSON Editor is located in the folder &lt;code&gt;./src&lt;/code&gt;. To build jsoneditor:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Install dependencies:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Build JSON Editor:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will generate the files &lt;code&gt;./jsoneditor.js&lt;/code&gt;, &lt;code&gt;./jsoneditor.css&lt;/code&gt;, and&lt;br&gt; minified versions in the dist of the project.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To automatically build when a source file has changed:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;npm start&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will update &lt;code&gt;./jsoneditor.js&lt;/code&gt; and &lt;code&gt;./jsoneditor.css&lt;/code&gt; in the dist folder on every change, but it will &lt;strong&gt;NOT&lt;/strong&gt; update the minified versions as that&#39;s an expensive operation.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Test&lt;/h2&gt; &#xA;&lt;p&gt;Run unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run code linting (&lt;a href=&#34;https://standardjs.com/&#34;&gt;JavaScript Standard Style&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run lint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Custom builds&lt;/h2&gt; &#xA;&lt;p&gt;The source code of JSONEditor consists of CommonJS modules. JSONEditor can be bundled in a customized way using a module bundler like &lt;a href=&#34;http://browserify.org/&#34;&gt;browserify&lt;/a&gt; or &lt;a href=&#34;http://webpack.github.io/&#34;&gt;webpack&lt;/a&gt;. First, install all dependencies of jsoneditor:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To create a custom bundle of the source code using browserify:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;browserify ./index.js -o ./jsoneditor.custom.js -s JSONEditor&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The Ace editor, used in mode &lt;code&gt;code&lt;/code&gt;, accounts for about one third of the total size of the library. To exclude the Ace editor from the bundle:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;browserify ./index.js -o ./jsoneditor.custom.js -s JSONEditor -x brace -x brace/mode/json -x brace/ext/searchbox&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To minify the generated bundle, use &lt;a href=&#34;https://github.com/mishoo/UglifyJS2&#34;&gt;uglifyjs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;uglifyjs ./jsoneditor.custom.js -o ./jsoneditor.custom.min.js -m -c&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;jsoneditor&lt;/code&gt; is released as open source under the permissive the &lt;a href=&#34;https://raw.githubusercontent.com/josdejong/jsoneditor/develop/LICENSE.md&#34;&gt;Apache 2.0 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you are using jsoneditor commercially, there is a &lt;em&gt;social&lt;/em&gt; (but no legal) expectation that you help fund its maintenance. &lt;a href=&#34;https://github.com/sponsors/josdejong&#34;&gt;Start here&lt;/a&gt;.&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
</feed>