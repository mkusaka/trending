<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-05T01:32:36Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sugarlabs/musicblocks</title>
    <updated>2024-02-05T01:32:36Z</updated>
    <id>tag:github.com,2024-02-05:/sugarlabs/musicblocks</id>
    <link href="https://github.com/sugarlabs/musicblocks" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Music Blocks -- A musical microworld&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://github.com//sugarlabs/musicblocks/graphs/contributors&#34; alt=&#34;Contributors&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/contributors/sugarlabs/musicblocks&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#license&#34; alt=&#34;License&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/license/sugarlabs/musicblocks&#34;&gt; &lt;/a&gt; &#xA;&lt;h1&gt;Music Blocks&lt;/h1&gt; &#xA;&lt;p&gt;“&lt;em&gt;All musicians are subconsciously mathematicians.&lt;/em&gt;” — Monk&lt;/p&gt; &#xA;&lt;p&gt;“&lt;em&gt;Music is a hidden arithmetic exercise of the soul, which does not know that it is counting.&lt;/em&gt;” — Leibniz&lt;/p&gt; &#xA;&lt;p&gt;Music Blocks is a &lt;em&gt;Visual Programming Language&lt;/em&gt; and collection of &lt;em&gt;manipulative tools&lt;/em&gt; for exploring musical and mathematical concepts in an integrative and fun way.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Music Blocks is an interactive Web Application — the interaction is done via basic mouse events like &lt;em&gt;click&lt;/em&gt;, &lt;em&gt;right click&lt;/em&gt;, &lt;em&gt;click and drag&lt;/em&gt;, etc. and keyboard events like &lt;em&gt;hotkey press&lt;/em&gt;. The application is audio-visual; it produces graphics artwork and music. Here are a couple of screenshots to give you an idea of how the application looks like:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/screenshots/Screenshot-1.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/screenshots/Screenshot-2.png&#34; alt=&#34;alt tag&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Visit the Music Blocks website for a hands on experience: &lt;a href=&#34;https://musicblocks.sugarlabs.org&#34;&gt;https://musicblocks.sugarlabs.org&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Or get Music Blocks from the &lt;a href=&#34;https://play.google.com/store/apps/details?id=my.musicblock.sugarlab&#34;&gt;Google Play Store&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Some background on why we combine music and programming can be found &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/WhyMusicBlocks.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Refer to the following sections to get familiar with this application:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#RUNNING-MUSIC-BLOCKS&#34;&gt;Running Music Blocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#HOW-TO-SET-UP-A-LOCAL-SERVER&#34;&gt;How to set up a local server&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#USING-MUSIC-BLOCKS&#34;&gt;Using Music Blocks&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are a developer (beginner, experienced, or pro), you are very welcome to participate in the evolution of Music Blocks.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Refer to the following sections to get an idea:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#CODE-OF-CONDUCT&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#CONTRIBUTING&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#MODIFYING-MUSIC-BLOCKS&#34;&gt;Modifying Music Blocks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#REPORTING-BUGS&#34;&gt;Reporting Bugs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Refer to the following for more information regarding the evolution of this project:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#CREDITS&#34;&gt;Credits&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#MUSIC-BLOCKS-IN-JAPAN&#34;&gt;Music Blocks in Japan&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;RUNNING_MUSIC_BLOCKS&#34;&gt;&lt;/a&gt;Running Music Blocks&lt;/h2&gt; &#xA;&lt;p&gt;Music Blocks is available under the &lt;em&gt;GNU Affero General Public License (AGPL) v3.0&lt;/em&gt;, a free, copyleft license.&lt;/p&gt; &#xA;&lt;p&gt;Music Blocks is designed to run in a web browser. The ideal way to run Music Blocks is to visit the URL &lt;a href=&#34;https://musicblocks.sugarlabs.org&#34;&gt;&lt;em&gt;musicblocks.sugarlabs.org&lt;/em&gt;&lt;/a&gt; in your browser — &lt;em&gt;Google Chrome&lt;/em&gt; (or &lt;em&gt;Chromium&lt;/em&gt;), &lt;em&gt;Microsoft Edge&lt;/em&gt; (&lt;em&gt;Chromium-based&lt;/em&gt;), &lt;em&gt;Mozilla Firefox&lt;/em&gt;, and &lt;em&gt;Opera&lt;/em&gt; work best.&lt;/p&gt; &#xA;&lt;p&gt;To run from the latest master branch (experimental), visit &lt;a href=&#34;https://sugarlabs.github.io/musicblocks&#34;&gt;&lt;em&gt;sugarlabs.github.io/musicblocks&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;HOW_TO_SET_UP_A_LOCAL_SERVER&#34;&gt;&lt;/a&gt;How to set up a &lt;em&gt;local server&lt;/em&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Music Blocks is written using native browser technologies. The bulk of the functionality is in vanilla &lt;em&gt;JavaScript&lt;/em&gt;. This means that most of the functionality can be accessed by launching the &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/index.html&#34;&gt;index.html&lt;/a&gt; file in the browser using &lt;code&gt;file:///absolute/path/to/index.html&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, using so, some functionality will not be available. On top of that, some web browsers (e.g., Firefox v68) have restrictions that prevent Music Blocks from running using &lt;code&gt;file:///&lt;/code&gt;. Therefore, it is best to launch a &lt;em&gt;local web server&lt;/em&gt; from the directory of Music Blocks.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/sugarlabs/musicblocks/archive/master.zip&#34;&gt;Download&lt;/a&gt; Music Blocks, or clone (&lt;code&gt;https://github.com/sugarlabs/musicblocks.git&lt;/code&gt; for &lt;em&gt;HTTPS&lt;/em&gt;, or &lt;code&gt;gh repo clone sugarlabs/musicblocks&lt;/code&gt; for &lt;em&gt;GitHub CLI&lt;/em&gt;), on your local machine.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In a terminal, &lt;code&gt;cd&lt;/code&gt; to the directory where you downloaded/cloned Music Blocks, using &lt;code&gt;cd path/to/musicblocks/&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you do not have &lt;a href=&#34;https://www.python.org&#34;&gt;&lt;em&gt;Python&lt;/em&gt;&lt;/a&gt; installed, you&#39;ll need to install it. You can test for Python in a terminal using &lt;code&gt;python&lt;/code&gt;. Type &lt;code&gt;exit()&lt;/code&gt; to exit Python. (Note that on some older Linux systems, the &lt;code&gt;python3&lt;/code&gt; command is not bound to python. You may need to perform a &lt;code&gt;sudo apt install python-is-python3&lt;/code&gt; on Debian-like distros, or equivalent on others.)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;After cloning the musicblocks repository, run&lt;/p&gt; &lt;p&gt;for &lt;em&gt;Linux&lt;/em&gt; and &lt;em&gt;macOS&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -c &#34;import os, sys; os.system(&#39;python -m SimpleHTTPServer 3000 --bind 127.0.0.1&#39;) if sys.version_info.major==2 else os.system(&#39;python -m http.server 3000 --bind 127.0.0.1&#39;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;for &lt;em&gt;Windows&lt;/em&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;python -c &#34;import os, sys; os.system(&#39;python -m SimpleHTTPServer 3000&#39;) if sys.version_info.major==2 else os.system(&#39;python -m http.server 3000 --bind 127.0.0.1&#39;)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you have &lt;code&gt;npm&lt;/code&gt; installed, simply run &lt;code&gt;npm run serve&lt;/code&gt; for Linux and macOS, and &lt;code&gt;npm run winserve&lt;/code&gt; for Windows.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;Make sure you can run either &lt;code&gt;python&lt;/code&gt; or &lt;code&gt;py&lt;/code&gt; from your terminal, to launch the Python prompt.&lt;/em&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You should see a message &lt;code&gt;Serving HTTP on 127.0.0.1 port 3000 (http://127.0.0.1:3000/) ...&lt;/code&gt; since the HTTP Server is set to start listening on port 3000.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open your favorite browser and visit &lt;code&gt;localhost:3000&lt;/code&gt; or &lt;code&gt;127.0.0.1:3000&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; &lt;em&gt;Use &lt;code&gt;ctrl + c&lt;/code&gt; or &lt;code&gt;cmd + c&lt;/code&gt; to quit the HTTP Server to avoid &lt;code&gt;socket.error:[Errno 48]&lt;/code&gt;&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;USING_MUSIC_BLOCKS&#34;&gt;&lt;/a&gt;Using Music Blocks&lt;/h2&gt; &#xA;&lt;p&gt;Once Music Blocks is running, you&#39;ll want suggestions on how to use it. Follow &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/documentation/README.md&#34;&gt;Using Music Blocks&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/guide/README.md&#34;&gt;Music Blocks Guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Looking for a block? Find it in the &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/guide/README.md#6-appendix&#34;&gt;Palette Tables&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;CODEOFCONDUCT&#34;&gt;&lt;/a&gt;Code of Conduct&lt;/h2&gt; &#xA;&lt;p&gt;The Music Blocks project adheres to the &lt;a href=&#34;https://github.com/sugarlabs/sugar-docs/raw/master/src/CODE_OF_CONDUCT.md&#34;&gt;Sugar Labs Code of Conduct&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;CONTRIBUTING&#34;&gt;&lt;/a&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please consider contributing to the project, with your ideas, your music, your lesson plans, your artwork, and your code.&lt;/p&gt; &#xA;&lt;h3&gt;Special Notes&lt;/h3&gt; &#xA;&lt;p&gt;Music Blocks is being built from the ground-up, to address several architectural problems with this run. Since Music Blocks is a fork of Turtle Blocks JS, musical functionality was added on top of it. However, music is fundamental to Music Blocks. Besides, the Turtle Blocks JS started initially with handful of features and was written without a complex architecture. As Music Blocks got built on top of that, it got incrementally complex, but the architecture remained simple, thus resulting in a monolith. Also, the functionality is tightly coupled with the interface and native client API (Web API).&lt;/p&gt; &#xA;&lt;p&gt;Keeping these problems in mind, we have considered a foundational rebuild that will address all these issues, whilst adding buffers for future additions. We&#39;ll also be using a more elegant tech-stack to develop and maintain this project given its scale. After the core is built, we&#39;ll be porting features from this application to it.&lt;/p&gt; &#xA;&lt;p&gt;Refer to the repository &lt;a href=&#34;https://github.com/sugarlabs/musicblocks-2&#34;&gt;&lt;strong&gt;sugarlabs/musicblocks-2&lt;/strong&gt;&lt;/a&gt; for more information about the new project — &lt;em&gt;Music Blocks 2.0&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tech Stack&lt;/h3&gt; &#xA;&lt;p&gt;Music Blocks is a Web Application and is written using browser technologies — &lt;code&gt;HTML&lt;/code&gt;, &lt;code&gt;CSS&lt;/code&gt; (&lt;code&gt;SCSS&lt;/code&gt;), &lt;code&gt;JavaScript&lt;/code&gt;, &lt;code&gt;SVG&lt;/code&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;re just getting started with development, you may refer to the following resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/html/default.asp&#34;&gt;HTML tutorial - w3schools.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/HTML&#34;&gt;HTML reference - MDN Web Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/css/default.asp&#34;&gt;CSS tutorial - w3schools.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/CSS&#34;&gt;CSS reference - MDN Web Docs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.w3schools.com/js/default.asp&#34;&gt;JavaScript tutorial - w3schools.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript&#34;&gt;JavaScript reference - MDN Web Docs&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Programmers, please follow these general &lt;a href=&#34;https://github.com/sugarlabs/sugar-docs/raw/master/src/contributing.md&#34;&gt;guidelines for contributions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;New Contributors&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;a href=&#34;https://github.com/sugarlabs/musicblocks/discussions&#34;&gt;discussions&lt;/a&gt; tab at the top of the repository to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ask questions you’re wondering about.&lt;/li&gt; &#xA; &lt;li&gt;Share ideas.&lt;/li&gt; &#xA; &lt;li&gt;Engage with other community members.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Feel free. But, please don&#39;t spam :p.&lt;/p&gt; &#xA;&lt;h3&gt;Keep in Mind&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Your contributions need not necessarily have to address any discovered issue. If you encounter any, feel free to add a fix through a PR, or create a new issue ticket.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;a href=&#34;https://github.com/sugarlabs/musicblocks/labels&#34;&gt;labels&lt;/a&gt; on your issues and PRs.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Do not spam with lots of PRs with little changes.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you are addressing a bulk change, divide your commits across multiple PRs, and send them one at a time. The fewer the number of files addressed per PR, the better.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Communicate effectively. Go straight to the point. You don&#39;t need to address anyone using &#39;&lt;em&gt;sir&lt;/em&gt;&#39;. Don&#39;t write unnecessary comments; don&#39;t be over-apologetic. There is no superiority hierarchy. Every single contribution is welcome, as long as it doesn&#39;t spam or distract the flow.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Write useful, brief commit messages. Add commit descriptions if necessary. PR name should speak about what it is addressing and not the issue. In case a PR fixes an issue, use &lt;code&gt;fixes #ticketno&lt;/code&gt; or &lt;code&gt;closes #ticketno&lt;/code&gt; in the PR&#39;s comment. Briefly explain what your PR is doing.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Always test your changes extensively before creating a PR. There&#39;s no sense in merging broken code. If a PR is a &lt;em&gt;work in progress (WIP)&lt;/em&gt;, convert it to draft. It&#39;ll let the maintainers know it isn&#39;t ready for merging.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Read and revise the concepts about programming constructs you&#39;re dealing with. You must be clear about the behavior of the language or compiler/transpiler. See &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript&#34;&gt;JavaScript docs&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you have a question, do a &lt;em&gt;web search&lt;/em&gt; first. If you don&#39;t find any satisfactory answer, then ask it in a comment. If it is a general question about Music Blocks, please use the new &lt;a href=&#34;https://github.com/sugarlabs/musicblocks/discussions&#34;&gt;discussions&lt;/a&gt; tab on top the the repository, or the &lt;em&gt;Sugar-dev Devel &amp;lt;&lt;a href=&#34;mailto:sugar-devel@lists.sugarlabs.org&#34;&gt;sugar-devel@lists.sugarlabs.org&lt;/a&gt;&amp;gt;&lt;/em&gt; mailing list. Don&#39;t ask silly questions (unless you don&#39;t know it is silly ;p) before searching it on the web.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Work on things that matter. Follow three milestones: &lt;code&gt;Port Ready&lt;/code&gt;, &lt;code&gt;Migration&lt;/code&gt;, and &lt;code&gt;Future&lt;/code&gt;. Those tagged &lt;code&gt;Port Ready&lt;/code&gt; are priority. Those tagged with &lt;code&gt;Migration&lt;/code&gt; will be taken care of during or after the foundation rebuild. Feel free to participate in the conversation, adding valuable comments. Those tagged with &lt;code&gt;Future&lt;/code&gt; need not be addressed presently.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;em&gt;Please note there is no need to ask permission to work on an issue. You should check for pull requests linked to an issue you are addressing; if there are none, then assume nobody has done anything. Begin to fix the problem, test, make your commits, push your commits, then make a pull request. Mention an issue number in the pull request, but not the commit message. These practices allow the competition of ideas (Sugar Labs is a meritocracy).&lt;/em&gt;&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;MODIFYING_MUSIC_BLOCKS&#34;&gt;&lt;/a&gt;Modifying Music Blocks&lt;/h2&gt; &#xA;&lt;p&gt;The core functionality for Music Blocks resides in the &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/js/&#34;&gt;&lt;code&gt;js/&lt;/code&gt; directory&lt;/a&gt;. Individual modules are described in more detail in &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/js/README.md&#34;&gt;js/README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; As for any changes, please make a local copy by cloning this &lt;a href=&#34;https://github.com/sugarlabs/musicblocks.git&#34;&gt;repository&lt;/a&gt;. Make your changes, test them, and only then make a pull request.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/sugarlabs/sugar-docs/raw/master/src/contributing.md&#34;&gt;Contributing Code&lt;/a&gt; provides a general overview of Sugar Lab&#39;s guidelines. See &lt;a href=&#34;https://raw.githubusercontent.com/sugarlabs/musicblocks/master/#CONTRIBUTING&#34;&gt;Contributing&lt;/a&gt; section for specific details about this repository.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;REPORTING_BUGS&#34;&gt;&lt;/a&gt;Reporting Bugs&lt;/h2&gt; &#xA;&lt;p&gt;Bugs can be reported in the &lt;a href=&#34;https://github.com/sugarlabs/musicblocks/issues&#34;&gt;issues tab&lt;/a&gt; of this repository.&lt;/p&gt; &#xA;&lt;p&gt;If possible, please include the browser &lt;em&gt;console log output&lt;/em&gt;, and &lt;em&gt;steps to reproduce&lt;/em&gt;, when reporting bugs. To access the console, type &lt;code&gt;Ctrl-Shift-J&lt;/code&gt;/&lt;code&gt;F12&lt;/code&gt; on most browsers. Alternately, &lt;em&gt;right click&lt;/em&gt; and select &lt;code&gt;Inspect&lt;/code&gt;. You may need to set the &lt;code&gt;Default levels&lt;/code&gt; for the console to &lt;code&gt;Verbose&lt;/code&gt; in order to see all of the output, however, in most cases that won&#39;t be required. In fact, it&#39;ll only clutter the list, so select it only when required.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;CREDITS&#34;&gt;&lt;/a&gt;Credits&lt;/h2&gt; &#xA;&lt;p&gt;Music Blocks is a fork of &lt;a href=&#34;https://github.com/sugarlabs/turtleblocksjs&#34;&gt;Turtle Blocks JS&lt;/a&gt; created by &lt;em&gt;Walter Bender (&lt;a href=&#34;https://github.com/walterbender&#34;&gt;@walterbender&lt;/a&gt;)&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.devinulibarri.com/&#34;&gt;&lt;em&gt;Devin Ulibarri&lt;/em&gt;&lt;/a&gt; has contributed functional and user-interface designs. Many of his contributions were inspired by the music education ideas, representations and practices (e.g. aspects of matrix, musical cups) developed and published by &lt;a href=&#34;http://www.larryscripp.net/&#34;&gt;&lt;em&gt;Larry Scripp&lt;/em&gt;&lt;/a&gt; with whom &lt;em&gt;Devin&lt;/em&gt; studied at New England Conservatory and for whom he worked at Affron Scripp &amp;amp; Associates, LLC, &lt;a href=&#34;http://centerformie.org/&#34;&gt;Center for Music and the Arts in Education (CMAIE)&lt;/a&gt;, and &lt;a href=&#34;http://music-in-education.org/&#34;&gt;Music in Education&lt;/a&gt;. Some of the initial graphics were contributed by &lt;a href=&#34;http://www.chieyasuda.com&#34;&gt;&lt;em&gt;Chie Yasuda&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Much of the initial coding specific to Music Blocks was done by &lt;em&gt;Yash Khandelwal (&lt;a href=&#34;https://github.com/khandelwalYash&#34;&gt;@khandelwalYash&lt;/a&gt;)&lt;/em&gt; as part of Google Summer of Code (GSoC) 2015. &lt;em&gt;Hemant Kasat (&lt;a href=&#34;https://github.com/hemantkasat&#34;&gt;@hemantkasat&lt;/a&gt;)&lt;/em&gt; contributed to additional widgets as part of GSoC 2016. Additional contributions were made by &lt;em&gt;Tayba Wasim (&lt;a href=&#34;https://github.com/Tabs16&#34;&gt;@Tabs16&lt;/a&gt;)&lt;/em&gt;, &lt;em&gt;Dinuka Tharangi Jayaweera (&lt;a href=&#34;https://github.com/Tharangi&#34;&gt;@Tharangi&lt;/a&gt;)&lt;/em&gt;, &lt;em&gt;Prachi Agrawal (&lt;a href=&#34;https://github.com/prachiagrawal269&#34;&gt;@prachiagrawal269&lt;/a&gt;)&lt;/em&gt;, &lt;em&gt;Cristina Del Puerto (&lt;a href=&#34;https://github.com/cristinadp&#34;&gt;@cristinadp&lt;/a&gt;)&lt;/em&gt;, and &lt;em&gt;Hrishi Patel (&lt;a href=&#34;https://github.com/Hrishi1999&#34;&gt;@Hrishi1999&lt;/a&gt;)&lt;/em&gt; as part of GSoC 2017. During GSoC 2018, &lt;em&gt;Riya Lohia (&lt;a href=&#34;https://github.com/riyalohia&#34;&gt;@riyalohia&lt;/a&gt;)&lt;/em&gt; developed a Temperament widget. &lt;em&gt;Ritwik Abhishek (&lt;a href=&#34;https://github.com/a-ritwik&#34;&gt;@a-ritwik&lt;/a&gt;)&lt;/em&gt; added a keyboard widget and a pitch-tracking widget. During GSoC 2019, &lt;em&gt;Favor Kelvin (&lt;a href=&#34;https://github.com/fakela&#34;&gt;@fakela&lt;/a&gt;)&lt;/em&gt; refactored much of the code to use promises. During GSoC 2020, &lt;em&gt;Anindya Kundu (&lt;a href=&#34;https://github.com/meganindya&#34;&gt;@meganindya&lt;/a&gt;)&lt;/em&gt; did a major refactoring of the code base to support JavaScript export. &lt;em&gt;Aviral Gangwar (&lt;a href=&#34;https://github.com/aviral243&#34;&gt;@aviral243&lt;/a&gt;)&lt;/em&gt; enhanced the internal representation of mode and key. &lt;em&gt;Saksham Mrig (&lt;a href=&#34;https://github.com/sksum&#34;&gt;@sksum&lt;/a&gt;)&lt;/em&gt; fixed 70+ bugs and added support for pitch tracking and MIDI import.&lt;/p&gt; &#xA;&lt;p&gt;Many students contributed to the project as part of Google Code-in (2015–2019). &lt;em&gt;Sam Parkinson (&lt;a href=&#34;https://github.com/samdroid-apps&#34;&gt;@samdroid-apps&lt;/a&gt;)&lt;/em&gt; built the Planet during GCI. &lt;em&gt;Emily Ong (&lt;a href=&#34;https://github.com/EmilyOng&#34;&gt;@EmilyOng&lt;/a&gt;)&lt;/em&gt; designed our mouse icon and &lt;em&gt;Euan Ong (&lt;a href=&#34;https://github.com/eohomegrownapps&#34;&gt;@eohomegrownapps&lt;/a&gt;)&lt;/em&gt; redesigned the Planet code as a series of GCI tasks. &lt;em&gt;Austin George (&lt;a href=&#34;https://github.com/aust-n&#34;&gt;@aust-n&lt;/a&gt;)&lt;/em&gt; refactored the toolbars as a series of GCI tasks. &lt;em&gt;Bottersnike (&lt;a href=&#34;https://github.com/Bottersnike&#34;&gt;@Bottersnike&lt;/a&gt;)&lt;/em&gt; redesigned the widgets and the Block API, &lt;em&gt;Andrea Gonzales (&lt;a href=&#34;https://github.com/AndreaGon&#34;&gt;@AndreaGon&lt;/a&gt;)&lt;/em&gt; made the widgets responsive, &lt;em&gt;Marcus Chong (&lt;a href=&#34;https://github.com/pidddgy&#34;&gt;@pidddgy&lt;/a&gt;)&lt;/em&gt; refactored the update code, resulting in an order-of-magnitude improvement in CPU usage, and &lt;em&gt;Samyok Nepal (&lt;a href=&#34;https://github.com/nepaltechguy2&#34;&gt;@nepaltechguy2&lt;/a&gt;)&lt;/em&gt; updated the local storage mechanism to use localForage.&lt;/p&gt; &#xA;&lt;p&gt;A full list of &lt;a href=&#34;https://github.com/sugarlabs/musicblocks/graphs/contributors&#34;&gt;contributors&lt;/a&gt; is available.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a name=&#34;MUSIC_BLOCKS_IN_JAPAN&#34;&gt;&lt;/a&gt;Music Blocks in Japan&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gakken-steam.jp/music_blocks/&#34;&gt;Gakken STEAM&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Music Blocks is licensed under the &lt;a href=&#34;https://www.gnu.org/licenses/agpl-3.0.en.html&#34;&gt;AGPL&lt;/a&gt;, which means it will always be free to copy, modify, and hopefully improve. We respect your privacy: while Music Blocks stores your session information in your browser&#39;s local storage, it does not and will never access these data for purposes other than to restore your session. Music Blocks will never share these data with any third parties.&lt;/p&gt; &#xA;&lt;p&gt;There is a Planet where you can share your projects with others and remix projects created by other Music Blocks users. Use of the Planet is anonymous and not required in order to enjoy Music Blocks.&lt;/p&gt; &#xA;&lt;p&gt;Have fun, play hard, and learn.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tastejs/todomvc</title>
    <updated>2024-02-05T01:32:36Z</updated>
    <id>tag:github.com,2024-02-05:/tastejs/todomvc</id>
    <link href="https://github.com/tastejs/todomvc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Helping you select an MV* framework - Todo apps for React.js, Ember.js, Angular, and many more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;img src=&#34;https://raw.githubusercontent.com/tastejs/todomvc/master/media/logo.png&#34; alt=&#34;TodoMVC&#34;&gt;&lt;/h1&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Helping you select an MV* framework&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;http://todomvc.com&#34;&gt;Website&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;http://blog.tastejs.com&#34;&gt;Blog&lt;/a&gt;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&lt;a href=&#34;http://tastejs.com&#34;&gt;TasteJS&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/tastejs/todomvc&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tastejs/todomvc.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dashboard.cypress.io/#/projects/n4ynap/runs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/cypress.io-tests-green.svg?style=flat-square&#34; alt=&#34;Cypress.io tests&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Developers these days are spoiled with choice when it comes to selecting an MV* framework for structuring and organizing JavaScript web apps.&lt;/p&gt; &#xA;&lt;p&gt;Backbone, Ember, AngularJS... the list of new and stable solutions goes on and on, but just how do you decide on which to use in a sea of so many options?&lt;/p&gt; &#xA;&lt;p&gt;To help solve this problem, we created TodoMVC - a project which offers the same Todo application implemented using MV* concepts in most of the popular JavaScript MV* frameworks of today.&lt;/p&gt; &#xA;&lt;h2&gt;Team&lt;/h2&gt; &#xA;&lt;p&gt;TodoMVC would not be possible without a strong team of &lt;a href=&#34;https://github.com/tastejs/todomvc/contributors&#34;&gt;contributors&lt;/a&gt; helping push the project forward each day. Additionally, we have a core project team composed of:&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/addyosmani&#34;&gt;Addy Osmani&lt;/a&gt; - Founder/Lead&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/110953?v=4&amp;amp;s=40&#34;&gt; Addy is a Software Engineer at Google who originally created TodoMVC. He oversees the project direction, maintenance and organizes the planning and development efforts of the team. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/sindresorhus&#34;&gt;Sindre Sorhus&lt;/a&gt; - Lead Developer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/170270?v=4&amp;amp;s=40&#34;&gt; Sindre is a Web Developer who leads core development, quality control and application design for the project. His engineering contributions have helped us ensure consistency and best practices are enforced wherever possible. Sindre also leads up development of the TodoMVC application spec. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/passy&#34;&gt;Pascal Hartig&lt;/a&gt; - Developer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/9906?v=4&amp;amp;s=40&#34;&gt; Pascal is a Software Engineer at Twitter with a deep passion for consistency. He watches pull requests and helps developers getting their contributions integrated with TodoMVC. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/stephenplusplus&#34;&gt;Stephen Sawchuk&lt;/a&gt; - Developer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars3.githubusercontent.com/u/723048?v=2&amp;amp;s=40&#34;&gt; Stephen is a Front-end Engineer at Quicken Loans that cares about improving the maintainability and developer experience of open-source projects. His recent contributions include helping us move all apps over to using Bower and implementing the new information bar. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/colineberhardt&#34;&gt;Colin Eberhardt&lt;/a&gt; - Developer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/1098110?v=4&amp;amp;s=40&#34;&gt; Colin is a software consultant at Scott Logic who is passionate about all software - from JavaScript to Java, and C# to Objective-C. His recent contribution to the project has been a fully automated test suite. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/samccone&#34;&gt;Sam Saccone&lt;/a&gt; - Developer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/883126?v=4&amp;amp;s=40&#34;&gt; Sam is a Software Engineer at Google who is driven by an endless desire to create, solve problems, and improve developers&#39; lives. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/arthurvr&#34;&gt;Arthur Verschaeve&lt;/a&gt; - Developer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/6025224?v=4&amp;amp;s=40&#34;&gt; Arthur is an open-source fanboy from Belgium. He is passionate about developer tooling and all things JavaScript. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/FadySamirSadek&#34;&gt;Fady Samir Sadek&lt;/a&gt; - Developer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/7483806?v=4&amp;amp;s=40&#34;&gt; Fady is a front-end developer who loves all things JavaScript and enjoys solving real world problems using the web platform and helping other developers do the same. He currently leads maintenance of the project and ensures that the project is friendly for new contributors and upcoming developers. &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/gf3&#34;&gt;Gianni Chiappetta&lt;/a&gt; - Logo designer&lt;/h4&gt; &#xA;&lt;img align=&#34;left&#34; width=&#34;40&#34; height=&#34;40&#34; src=&#34;https://avatars.githubusercontent.com/u/18397?v=4&amp;amp;s=40&#34;&gt; Gianni is a programmer and designer currently working as the Chief Rigger at MetaLab. &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;230&#34; height=&#34;230&#34; src=&#34;https://raw.githubusercontent.com/tastejs/todomvc/master/media/icon-small.png&#34;&gt; &#xA;&lt;p&gt;TodoMVC has been called many things including the &#39;Speed-dating&#39; and &#39;Rosetta Stone&#39; of MV* frameworks. Whilst we hope that this project can offer assistance in deciding what frameworks are worth spending more time looking at, remember that the Todo application offers a limited view of a framework&#39;s potential capability.&lt;/p&gt; &#xA;&lt;p&gt;It is meant to be used as a gateway to reviewing how a basic application using a framework may be structured, and we heavily recommend investing time researching a solution in more depth before opting to use it.&lt;/p&gt; &#xA;&lt;p&gt;Also, please keep in mind that TodoMVC is not the perfect way to compare the size of different frameworks. We intentionally use the unminified versions to make reading the source code easier.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Involved&lt;/h2&gt; &#xA;&lt;p&gt;Whilst we enjoy implementing and improving existing Todo apps, we&#39;re always interested in speaking to framework authors (and users) wishing to share Todo app implementations in their framework/solution of choice.&lt;/p&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/tastejs/todomvc/master/contributing.md&#34;&gt;contribution docs&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Everything in this repo is MIT License unless otherwise specified.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tastejs/todomvc/master/license.md&#34;&gt;MIT&lt;/a&gt; © Addy Osmani, Sindre Sorhus, Pascal Hartig, Stephen Sawchuk.&lt;/p&gt;</summary>
  </entry>
</feed>