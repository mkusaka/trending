<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-03T01:33:19Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>AlreadyBored/node-nodejs-basics</title>
    <updated>2022-12-03T01:33:19Z</updated>
    <id>tag:github.com,2022-12-03:/AlreadyBored/node-nodejs-basics</id>
    <link href="https://github.com/AlreadyBored/node-nodejs-basics" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Node.js basics&lt;/h1&gt; &#xA;&lt;h2&gt;!!! Please don&#39;t submit Pull Requests to this repository !!!&lt;/h2&gt;</summary>
  </entry>
  <entry>
    <title>basecamp/trix</title>
    <updated>2022-12-03T01:33:19Z</updated>
    <id>tag:github.com,2022-12-03:/basecamp/trix</id>
    <link href="https://github.com/basecamp/trix" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A rich text editor for everyday writing&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Trix&lt;/h1&gt; &#xA;&lt;h3&gt;A Rich Text Editor for Everyday Writing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Compose beautifully formatted text in your web application.&lt;/strong&gt; Trix is a WYSIWYG editor for writing messages, comments, articles, and lists—the simple documents most web apps are made of. It features a sophisticated document model, support for embedded attachments, and outputs terse and consistent HTML.&lt;/p&gt; &#xA;&lt;p&gt;Trix is an open-source project from &lt;a href=&#34;https://basecamp.com/&#34;&gt;Basecamp&lt;/a&gt;, the creators of &lt;a href=&#34;http://rubyonrails.org/&#34;&gt;Ruby on Rails&lt;/a&gt;. Millions of people trust their text to Basecamp, and we built Trix to give them the best possible editing experience. See Trix in action in the &lt;a href=&#34;https://basecamp.com/3-is-coming&#34;&gt;all-new Basecamp 3&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Different By Design&lt;/h3&gt; &#xA;&lt;p&gt;Most WYSIWYG editors are wrappers around HTML’s &lt;code&gt;contenteditable&lt;/code&gt; and &lt;code&gt;execCommand&lt;/code&gt; APIs, designed by Microsoft to support live editing of web pages in Internet Explorer 5.5, and &lt;a href=&#34;https://blog.whatwg.org/the-road-to-html-5-contenteditable#history&#34;&gt;eventually reverse-engineered&lt;/a&gt; and copied by other browsers.&lt;/p&gt; &#xA;&lt;p&gt;Because these APIs were never fully specified or documented, and because WYSIWYG HTML editors are enormous in scope, each browser’s implementation has its own set of bugs and quirks, and JavaScript developers are left to resolve the inconsistencies.&lt;/p&gt; &#xA;&lt;p&gt;Trix sidesteps these inconsistencies by treating &lt;code&gt;contenteditable&lt;/code&gt; as an I/O device: when input makes its way to the editor, Trix converts that input into an editing operation on its internal document model, then re-renders that document back into the editor. This gives Trix complete control over what happens after every keystroke, and avoids the need to use &lt;code&gt;execCommand&lt;/code&gt; at all.&lt;/p&gt; &#xA;&lt;h3&gt;Built on Web standards&lt;/h3&gt; &#xA;&lt;details&gt;&#xA; &lt;summary&gt;Trix supports all evergreen, self-updating desktop and mobile browsers.&lt;/summary&gt;&#xA; &lt;img src=&#34;https://app.saucelabs.com/browser-matrix/basecamp_trix.svg?sanitize=true&#34;&gt;&#xA;&lt;/details&gt; &#xA;&lt;p&gt;Trix is built with established web standards, notably &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements&#34;&gt;Custom Elements&lt;/a&gt;, &lt;a href=&#34;https://dom.spec.whatwg.org/#mutation-observers&#34;&gt;Mutation Observer&lt;/a&gt;, and &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise&#34;&gt;Promises&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Getting Started&lt;/h1&gt; &#xA;&lt;p&gt;Trix comes bundled in ESM and UMD formats and works with any asset packaging system.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to start with Trix is including it from an npm CDN in the &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt; of your page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;head&amp;gt;&#xA;  …&#xA;  &amp;lt;link rel=&#34;stylesheet&#34; type=&#34;text/css&#34; href=&#34;https://unpkg.com/trix@2.0.0/dist/trix.css&#34;&amp;gt;&#xA;  &amp;lt;script type=&#34;text/javascript&#34; src=&#34;https://unpkg.com/trix@2.0.0/dist/trix.umd.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&amp;lt;/head&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;trix.css&lt;/code&gt; includes default styles for the Trix toolbar, editor, and attachments. Skip this file if you prefer to define these styles yourself.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, you can install the npm package and import it in your application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import Trix from &#34;trix&#34;&#xA;&#xA;document.addEventListener(&#34;trix-before-initialize&#34;, () =&amp;gt; {&#xA;  // Change Trix.config if you need&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Creating an Editor&lt;/h2&gt; &#xA;&lt;p&gt;Place an empty &lt;code&gt;&amp;lt;trix-editor&amp;gt;&amp;lt;/trix-editor&amp;gt;&lt;/code&gt; tag on the page. Trix will automatically insert a separate &lt;code&gt;&amp;lt;trix-toolbar&amp;gt;&lt;/code&gt; before the editor.&lt;/p&gt; &#xA;&lt;p&gt;Like an HTML &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; accepts &lt;code&gt;autofocus&lt;/code&gt; and &lt;code&gt;placeholder&lt;/code&gt; attributes. Unlike a &lt;code&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; automatically expands vertically to fit its contents.&lt;/p&gt; &#xA;&lt;h2&gt;Integrating With Forms&lt;/h2&gt; &#xA;&lt;p&gt;To submit the contents of a &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; with a form, first define a hidden input field in the form and assign it an &lt;code&gt;id&lt;/code&gt;. Then reference that &lt;code&gt;id&lt;/code&gt; in the editor’s &lt;code&gt;input&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form …&amp;gt;&#xA;  &amp;lt;input id=&#34;x&#34; type=&#34;hidden&#34; name=&#34;content&#34;&amp;gt;&#xA;  &amp;lt;trix-editor input=&#34;x&#34;&amp;gt;&amp;lt;/trix-editor&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Trix will automatically update the value of the hidden input field with each change to the editor.&lt;/p&gt; &#xA;&lt;h2&gt;Populating With Stored Content&lt;/h2&gt; &#xA;&lt;p&gt;To populate a &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; with stored content, include that content in the associated input element’s &lt;code&gt;value&lt;/code&gt; attribute.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;form …&amp;gt;&#xA;  &amp;lt;input id=&#34;x&#34; value=&#34;Editor content goes here&#34; type=&#34;hidden&#34; name=&#34;content&#34;&amp;gt;&#xA;  &amp;lt;trix-editor input=&#34;x&#34;&amp;gt;&amp;lt;/trix-editor&amp;gt;&#xA;&amp;lt;/form&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Always use an associated input element to safely populate an editor. Trix won’t load any HTML content inside a &lt;code&gt;&amp;lt;trix-editor&amp;gt;…&amp;lt;/trix-editor&amp;gt;&lt;/code&gt; tag.&lt;/p&gt; &#xA;&lt;h2&gt;Styling Formatted Content&lt;/h2&gt; &#xA;&lt;p&gt;To ensure what you see when you edit is what you see when you save, use a CSS class name to scope styles for Trix formatted content. Apply this class name to your &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; element, and to a containing element when you render stored Trix content for display in your application.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;trix-editor class=&#34;trix-content&#34;&amp;gt;&amp;lt;/trix-editor&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;div class=&#34;trix-content&#34;&amp;gt;Stored content here&amp;lt;/div&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default &lt;code&gt;trix.css&lt;/code&gt; file includes styles for basic formatted content—including bulleted and numbered lists, code blocks, and block quotes—under the class name &lt;code&gt;trix-content&lt;/code&gt;. We encourage you to use these styles as a starting point by copying them into your application’s CSS with a different class name.&lt;/p&gt; &#xA;&lt;h2&gt;Storing Attached Files&lt;/h2&gt; &#xA;&lt;p&gt;Trix automatically accepts files dragged or pasted into an editor and inserts them as attachments in the document. Each attachment is considered &lt;em&gt;pending&lt;/em&gt; until you store it remotely and provide Trix with a permanent URL.&lt;/p&gt; &#xA;&lt;p&gt;To store attachments, listen for the &lt;code&gt;trix-attachment-add&lt;/code&gt; event. Upload the attached files with XMLHttpRequest yourself and set the attachment’s URL attribute upon completion. See the &lt;a href=&#34;https://trix-editor.org/js/attachments.js&#34;&gt;attachment example&lt;/a&gt; for detailed information.&lt;/p&gt; &#xA;&lt;p&gt;If you don’t want to accept dropped or pasted files, call &lt;code&gt;preventDefault()&lt;/code&gt; on the &lt;code&gt;trix-file-accept&lt;/code&gt; event, which Trix dispatches just before the &lt;code&gt;trix-attachment-add&lt;/code&gt; event.&lt;/p&gt; &#xA;&lt;h1&gt;Editing Text Programmatically&lt;/h1&gt; &#xA;&lt;p&gt;You can manipulate a Trix editor programmatically through the &lt;code&gt;Trix.Editor&lt;/code&gt; interface, available on each &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; element through its &lt;code&gt;editor&lt;/code&gt; property.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var element = document.querySelector(&#34;trix-editor&#34;)&#xA;element.editor  // is a Trix.Editor instance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Understanding the Document Model&lt;/h2&gt; &#xA;&lt;p&gt;The formatted content of a Trix editor is known as a &lt;em&gt;document&lt;/em&gt;, and is represented as an instance of the &lt;code&gt;Trix.Document&lt;/code&gt; class. To get the editor’s current document, use the &lt;code&gt;editor.getDocument&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.getDocument()  // is a Trix.Document instance&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can convert a document to an unformatted JavaScript string with the &lt;code&gt;document.toString&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var document = element.editor.getDocument()&#xA;document.toString()  // is a JavaScript string&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Immutability and Equality&lt;/h3&gt; &#xA;&lt;p&gt;Documents are immutable values. Each change you make in an editor replaces the previous document with a new document. Capturing a snapshot of the editor’s content is as simple as keeping a reference to its document, since that document will never change over time. (This is how Trix implements undo.)&lt;/p&gt; &#xA;&lt;p&gt;To compare two documents for equality, use the &lt;code&gt;document.isEqualTo&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var document = element.editor.getDocument()&#xA;document.isEqualTo(element.editor.getDocument())  // true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting and Setting the Selection&lt;/h2&gt; &#xA;&lt;p&gt;Trix documents are structured as sequences of individually addressable characters. The index of one character in a document is called a &lt;em&gt;position&lt;/em&gt;, and a start and end position together make up a &lt;em&gt;range&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get the editor’s current selection, use the &lt;code&gt;editor.getSelectedRange&lt;/code&gt; method, which returns a two-element array containing the start and end positions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.getSelectedRange()  // [0, 0]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can set the editor’s current selection by passing a range array to the &lt;code&gt;editor.setSelectedRange&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Select the first character in the document&#xA;element.editor.setSelectedRange([0, 1])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Collapsed Selections&lt;/h3&gt; &#xA;&lt;p&gt;When the start and end positions of a range are equal, the range is said to be &lt;em&gt;collapsed&lt;/em&gt;. In the editor, a collapsed selection appears as a blinking cursor rather than a highlighted span of text.&lt;/p&gt; &#xA;&lt;p&gt;For convenience, the following calls to &lt;code&gt;setSelectedRange&lt;/code&gt; are equivalent when working with collapsed selections:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.setSelectedRange(1)&#xA;element.editor.setSelectedRange([1])&#xA;element.editor.setSelectedRange([1, 1])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Directional Movement&lt;/h3&gt; &#xA;&lt;p&gt;To programmatically move the cursor or selection through the document, call the &lt;code&gt;editor.moveCursorInDirection&lt;/code&gt; or &lt;code&gt;editor.expandSelectionInDirection&lt;/code&gt; methods with a &lt;em&gt;direction&lt;/em&gt; argument. The direction can be either &lt;code&gt;&#34;forward&#34;&lt;/code&gt; or &lt;code&gt;&#34;backward&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Move the cursor backward one character&#xA;element.editor.moveCursorInDirection(&#34;backward&#34;)&#xA;&#xA;// Expand the end of the selection forward by one character&#xA;element.editor.expandSelectionInDirection(&#34;forward&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Converting Positions to Pixel Offsets&lt;/h3&gt; &#xA;&lt;p&gt;Sometimes you need to know the &lt;em&gt;x&lt;/em&gt; and &lt;em&gt;y&lt;/em&gt; coordinates of a character at a given position in the editor. For example, you might want to absolutely position a pop-up menu element below the editor’s cursor.&lt;/p&gt; &#xA;&lt;p&gt;Call the &lt;code&gt;editor.getClientRectAtPosition&lt;/code&gt; method with a position argument to get a &lt;a href=&#34;https://drafts.fxtf.org/geometry/#DOMRect&#34;&gt;&lt;code&gt;DOMRect&lt;/code&gt;&lt;/a&gt; instance representing the left and top offsets, width, and height of the character at the given position.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var rect = element.editor.getClientRectAtPosition(0)&#xA;[rect.left, rect.top]  // [17, 49]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inserting and Deleting Text&lt;/h2&gt; &#xA;&lt;p&gt;The editor interface provides methods for inserting, replacing, and deleting text at the current selection.&lt;/p&gt; &#xA;&lt;p&gt;To insert or replace text, begin by setting the selected range, then call one of the insertion methods below. Trix will first remove any selected text, then insert the new text at the start position of the selected range.&lt;/p&gt; &#xA;&lt;h3&gt;Inserting Plain Text&lt;/h3&gt; &#xA;&lt;p&gt;To insert unformatted text into the document, call the &lt;code&gt;editor.insertString&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Insert “Hello” at the beginning of the document&#xA;element.editor.setSelectedRange([0, 0])&#xA;element.editor.insertString(&#34;Hello&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inserting HTML&lt;/h3&gt; &#xA;&lt;p&gt;To insert HTML into the document, call the &lt;code&gt;editor.insertHTML&lt;/code&gt; method. Trix will first convert the HTML into its internal document model. During this conversion, any formatting that cannot be represented in a Trix document will be lost.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Insert a bold “Hello” at the beginning of the document&#xA;element.editor.setSelectedRange([0, 0])&#xA;element.editor.insertHTML(&#34;&amp;lt;strong&amp;gt;Hello&amp;lt;/strong&amp;gt;&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inserting a File&lt;/h3&gt; &#xA;&lt;p&gt;To insert a DOM &lt;a href=&#34;http://www.w3.org/TR/FileAPI/#file&#34;&gt;&lt;code&gt;File&lt;/code&gt;&lt;/a&gt; object into the document, call the &lt;code&gt;editor.insertFile&lt;/code&gt; method. Trix will insert a pending attachment for the file as if you had dragged and dropped it onto the editor.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Insert the selected file from the first file input element&#xA;var file = document.querySelector(&#34;input[type=file]&#34;).file&#xA;element.editor.insertFile(file)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inserting a Content Attachment&lt;/h3&gt; &#xA;&lt;p&gt;Content attachments are self-contained units of HTML that behave like files in the editor. They can be moved or removed, but not edited directly, and are represented by a single character position in the document model.&lt;/p&gt; &#xA;&lt;p&gt;To insert HTML as an attachment, create a &lt;code&gt;Trix.Attachment&lt;/code&gt; with a &lt;code&gt;content&lt;/code&gt; attribute and call the &lt;code&gt;editor.insertAttachment&lt;/code&gt; method. The HTML inside a content attachment is not subject to Trix’s document conversion rules and will be rendered as-is.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var attachment = new Trix.Attachment({ content: &#39;&amp;lt;span class=&#34;mention&#34;&amp;gt;@trix&amp;lt;/span&amp;gt;&#39; })&#xA;element.editor.insertAttachment(attachment)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Inserting a Line Break&lt;/h3&gt; &#xA;&lt;p&gt;To insert a line break, call the &lt;code&gt;editor.insertLineBreak&lt;/code&gt; method, which is functionally equivalent to pressing the return key.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Insert “Hello\n”&#xA;element.editor.insertString(&#34;Hello&#34;)&#xA;element.editor.insertLineBreak()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deleting Text&lt;/h3&gt; &#xA;&lt;p&gt;If the current selection is collapsed, you can simulate deleting text before or after the cursor with the &lt;code&gt;editor.deleteInDirection&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// “Backspace” the first character in the document&#xA;element.editor.setSelectedRange([1, 1])&#xA;element.editor.deleteInDirection(&#34;backward&#34;)&#xA;&#xA;// Delete the second character in the document&#xA;element.editor.setSelectedRange([1, 1])&#xA;element.editor.deleteInDirection(&#34;forward&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To delete a range of text, first set the selected range, then call &lt;code&gt;editor.deleteInDirection&lt;/code&gt; with either direction as the argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Delete the first five characters&#xA;element.editor.setSelectedRange([0, 4])&#xA;element.editor.deleteInDirection(&#34;forward&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Working With Attributes and Nesting&lt;/h2&gt; &#xA;&lt;p&gt;Trix represents formatting as sets of &lt;em&gt;attributes&lt;/em&gt; applied across ranges of a document.&lt;/p&gt; &#xA;&lt;p&gt;By default, Trix supports the inline attributes &lt;code&gt;bold&lt;/code&gt;, &lt;code&gt;italic&lt;/code&gt;, &lt;code&gt;href&lt;/code&gt;, and &lt;code&gt;strike&lt;/code&gt;, and the block-level attributes &lt;code&gt;heading1&lt;/code&gt;, &lt;code&gt;quote&lt;/code&gt;, &lt;code&gt;code&lt;/code&gt;, &lt;code&gt;bullet&lt;/code&gt;, and &lt;code&gt;number&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Applying Formatting&lt;/h3&gt; &#xA;&lt;p&gt;To apply formatting to the current selection, use the &lt;code&gt;editor.activateAttribute&lt;/code&gt; method.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.insertString(&#34;Hello&#34;)&#xA;element.editor.setSelectedRange([0, 5])&#xA;element.editor.activateAttribute(&#34;bold&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To set the &lt;code&gt;href&lt;/code&gt; attribute, pass a URL as the second argument to &lt;code&gt;editor.activateAttribute&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.insertString(&#34;Trix&#34;)&#xA;element.editor.setSelectedRange([0, 4])&#xA;element.editor.activateAttribute(&#34;href&#34;, &#34;https://trix-editor.org/&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Removing Formatting&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;editor.deactivateAttribute&lt;/code&gt; method to remove formatting from a selection.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.setSelectedRange([2, 4])&#xA;element.editor.deactivateAttribute(&#34;bold&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Formatting With a Collapsed Selection&lt;/h3&gt; &#xA;&lt;p&gt;If you activate or deactivate attributes when the selection is collapsed, your formatting changes will apply to the text inserted by any subsequent calls to &lt;code&gt;editor.insertString&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.activateAttribute(&#34;italic&#34;)&#xA;element.editor.insertString(&#34;This is italic&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Adjusting the Nesting Level&lt;/h3&gt; &#xA;&lt;p&gt;To adjust the nesting level of quotes, bulleted lists, or numbered lists, call the &lt;code&gt;editor.increaseNestingLevel&lt;/code&gt; and &lt;code&gt;editor.decreaseNestingLevel&lt;/code&gt; methods.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.activateAttribute(&#34;quote&#34;)&#xA;element.editor.increaseNestingLevel()&#xA;element.editor.decreaseNestingLevel()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using Undo and Redo&lt;/h2&gt; &#xA;&lt;p&gt;Trix editors support unlimited undo and redo. Successive typing and formatting changes are consolidated together at five-second intervals; all other input changes are recorded individually in undo history.&lt;/p&gt; &#xA;&lt;p&gt;Call the &lt;code&gt;editor.undo&lt;/code&gt; and &lt;code&gt;editor.redo&lt;/code&gt; methods to perform an undo or redo operation.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.undo()&#xA;element.editor.redo()&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Changes you make through the editor interface will not automatically record undo entries. You can save your own undo entries by calling the &lt;code&gt;editor.recordUndoEntry&lt;/code&gt; method with a description argument.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;element.editor.recordUndoEntry(&#34;Insert Text&#34;)&#xA;element.editor.insertString(&#34;Hello&#34;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Loading and Saving Editor State&lt;/h2&gt; &#xA;&lt;p&gt;Serialize an editor’s state with &lt;code&gt;JSON.stringify&lt;/code&gt; and restore saved state with the &lt;code&gt;editor.loadJSON&lt;/code&gt; method. The serialized state includes the document and current selection, but does not include undo history.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// Save editor state to local storage&#xA;localStorage[&#34;editorState&#34;] = JSON.stringify(element.editor)&#xA;&#xA;// Restore editor state from local storage&#xA;element.editor.loadJSON(JSON.parse(localStorage[&#34;editorState&#34;]))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Observing Editor Changes&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; element emits several events which you can use to observe and respond to changes in editor state.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-before-initialize&lt;/code&gt; fires when the &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; element is attached to the DOM just before Trix installs its &lt;code&gt;editor&lt;/code&gt; object. If you need to use a custom Trix configuration you can change &lt;code&gt;Trix.config&lt;/code&gt; here.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-initialize&lt;/code&gt; fires when the &lt;code&gt;&amp;lt;trix-editor&amp;gt;&lt;/code&gt; element is attached to the DOM and its &lt;code&gt;editor&lt;/code&gt; object is ready for use.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-change&lt;/code&gt; fires whenever the editor’s contents have changed.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-paste&lt;/code&gt; fires whenever text is pasted into the editor. The &lt;code&gt;paste&lt;/code&gt; property on the event contains the pasted &lt;code&gt;string&lt;/code&gt; or &lt;code&gt;html&lt;/code&gt;, and the &lt;code&gt;range&lt;/code&gt; of the inserted text.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-selection-change&lt;/code&gt; fires any time the selected range changes in the editor.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-focus&lt;/code&gt; and &lt;code&gt;trix-blur&lt;/code&gt; fire when the editor gains or loses focus, respectively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-file-accept&lt;/code&gt; fires when a file is dropped or inserted into the editor. You can access the DOM &lt;code&gt;File&lt;/code&gt; object through the &lt;code&gt;file&lt;/code&gt; property on the event. Call &lt;code&gt;preventDefault&lt;/code&gt; on the event to prevent attaching the file to the document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-attachment-add&lt;/code&gt; fires after an attachment is added to the document. You can access the Trix attachment object through the &lt;code&gt;attachment&lt;/code&gt; property on the event. If the &lt;code&gt;attachment&lt;/code&gt; object has a &lt;code&gt;file&lt;/code&gt; property, you should store this file remotely and set the attachment’s URL attribute. See the &lt;a href=&#34;http://trix-editor.org/js/attachments.js&#34;&gt;attachment example&lt;/a&gt; for detailed information.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;trix-attachment-remove&lt;/code&gt; fires when an attachment is removed from the document. You can access the Trix attachment object through the &lt;code&gt;attachment&lt;/code&gt; property on the event. You may wish to use this event to clean up remotely stored files.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing to Trix&lt;/h1&gt; &#xA;&lt;p&gt;Trix is open-source software, freely distributable under the terms of an &lt;a href=&#34;https://raw.githubusercontent.com/basecamp/trix/main/LICENSE&#34;&gt;MIT-style license&lt;/a&gt;. The &lt;a href=&#34;https://github.com/basecamp/trix&#34;&gt;source code is hosted on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We welcome contributions in the form of bug reports, pull requests, or thoughtful discussions in the &lt;a href=&#34;https://github.com/basecamp/trix/issues&#34;&gt;GitHub issue tracker&lt;/a&gt;. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/basecamp/trix/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; for our pledge to contributors.&lt;/p&gt; &#xA;&lt;p&gt;Trix was created by &lt;a href=&#34;https://twitter.com/javan&#34;&gt;Javan Makhmali&lt;/a&gt; and &lt;a href=&#34;https://twitter.com/sstephenson&#34;&gt;Sam Stephenson&lt;/a&gt;, with development sponsored by &lt;a href=&#34;https://basecamp.com/&#34;&gt;Basecamp&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Building From Source&lt;/h3&gt; &#xA;&lt;p&gt;Trix uses &lt;a href=&#34;https://yarnpkg.com/&#34;&gt;Yarn&lt;/a&gt; to manage dependencies and &lt;a href=&#34;https://rollupjs.org/guide/en/&#34;&gt;Rollup&lt;/a&gt; to bundle its source.&lt;/p&gt; &#xA;&lt;p&gt;Install development dependencies with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate distribution files run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Developing In-Browser&lt;/h3&gt; &#xA;&lt;p&gt;You can run a watch process to automatically generate distribution files when your source file change:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When the watch process is running you can run a web server to serve the compiled assets:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;With the development server running, you can visit &lt;code&gt;/index.html&lt;/code&gt; to see a Trix debugger inspector, or &lt;code&gt;/test.html&lt;/code&gt; to run the tests on a browser.&lt;/p&gt; &#xA;&lt;p&gt;For easier development, you can watch for changes to the JavaScript and style files, and serve the results in a browser, with a single command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn start&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running Tests&lt;/h3&gt; &#xA;&lt;p&gt;You can also run the test in a headless mode with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ yarn test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;© 2022 Basecamp, LLC.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>OpenCTI-Platform/opencti</title>
    <updated>2022-12-03T01:33:19Z</updated>
    <id>tag:github.com,2022-12-03:/OpenCTI-Platform/opencti</id>
    <link href="https://github.com/OpenCTI-Platform/opencti" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Open Cyber Threat Intelligence Platform&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.opencti.io&#34;&gt;&lt;img src=&#34;https://www.opencti.io/wp-content/uploads/2022/02/logo_github.png&#34; alt=&#34;OpenCTI&#34;&gt;&lt;/a&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.opencti.io&#34; alt=&#34;Website&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/website-opencti.io-blue.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://filigran.notion.site/OpenCTI-Public-Knowledge-Base-d411e5e477734c59887dad3649f20518&#34; alt=&#34;Documentation&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Documentation-Notion-orange.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://community.filigran.io&#34; alt=&#34;Slack&#34;&gt;&lt;img src=&#34;https://slack.filigran.io/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://drone.opencti.io/OpenCTI-Platform/opencti&#34;&gt;&lt;img src=&#34;https://drone.opencti.io/api/badges/OpenCTI-Platform/opencti/status.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/OpenCTI-Platform/opencti&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/OpenCTI-Platform/opencti/graph/badge.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://deepscan.io/dashboard#view=project&amp;amp;tid=4926&amp;amp;pid=6716&amp;amp;bid=57311&#34;&gt;&lt;img src=&#34;https://deepscan.io/api/teams/4926/projects/6716/branches/57311/badge/grade.svg?sanitize=true&#34; alt=&#34;DeepScan grade&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/u/opencti&#34; alt=&#34;Docker pulls&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/opencti/platform&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;OpenCTI is an open source platform allowing organizations to manage their cyber threat intelligence knowledge and observables. It has been created in order to structure, store, organize and visualize technical and non-technical information about cyber threats.&lt;/p&gt; &#xA;&lt;p&gt;The structuration of the data is performed using a knowledge schema based on the &lt;a href=&#34;https://oasis-open.github.io/cti-documentation/&#34;&gt;STIX2 standards&lt;/a&gt;. It has been designed as a modern web application including a &lt;a href=&#34;https://graphql.org&#34;&gt;GraphQL API&lt;/a&gt; and an UX oriented frontend. Also, OpenCTI can be integrated with other tools and applications such as &lt;a href=&#34;https://github.com/MISP/MISP&#34;&gt;MISP&lt;/a&gt;, &lt;a href=&#34;https://github.com/TheHive-Project/TheHive&#34;&gt;TheHive&lt;/a&gt;, &lt;a href=&#34;https://github.com/mitre/cti&#34;&gt;MITRE ATT&amp;amp;CK&lt;/a&gt;, etc.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.opencti.io/wp-content/uploads/2022/02/screenshot.png&#34; alt=&#34;Screenshot&#34; title=&#34;Screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Objective&lt;/h2&gt; &#xA;&lt;p&gt;The goal is to create a comprehensive tool allowing users to capitalize technical (such as TTPs and observables) and non-technical information (such as suggested attribution, victimology etc.) while linking each piece of information to its primary source (a report, a MISP event, etc.), with features such as links between each information, first and last seen dates, levels of confidence, etc. The tool is able to use the &lt;a href=&#34;https://attack.mitre.org&#34;&gt;MITRE ATT&amp;amp;CK framework&lt;/a&gt; (through a &lt;a href=&#34;https://github.com/OpenCTI-Platform/connectors&#34;&gt;dedicated connector&lt;/a&gt;) to help structure the data. The user can also choose to implement their own datasets.&lt;/p&gt; &#xA;&lt;p&gt;Once data has been capitalized and processed by the analysts within OpenCTI, new relations may be inferred from existing ones to facilitate the understanding and the representation of this information. This allows the user to extract and leverage meaningful knowledge from the raw data.&lt;/p&gt; &#xA;&lt;p&gt;OpenCTI not only allows &lt;a href=&#34;https://filigran.notion.site/Import-Export-7dc143dfbb6147b0881080487ed9db33#4ffd142e88ad489abc3370ea8f738a82&#34;&gt;imports&lt;/a&gt; but also &lt;a href=&#34;https://filigran.notion.site/Import-Export-7dc143dfbb6147b0881080487ed9db33#8dfec135e334415fb18f1f169fe89804&#34;&gt;exports of data&lt;/a&gt; under different formats (CSV, STIX2 bundles, etc.). &lt;a href=&#34;https://filigran.notion.site/OpenCTI-Ecosystem-868329e9fb734fca89692b2ed6087e76&#34;&gt;Connectors&lt;/a&gt; are currently developed to accelerate interactions between the tool and other platforms.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation and demonstration&lt;/h2&gt; &#xA;&lt;p&gt;If you want to know more on OpenCTI, you can read the &lt;a href=&#34;https://filigran.notion.site/OpenCTI-Public-Knowledge-Base-d411e5e477734c59887dad3649f20518&#34;&gt;documentation on the tool&lt;/a&gt;. If you wish to discover how the OpenCTI platform is working, a &lt;a href=&#34;https://demo.opencti.io&#34;&gt;demonstration instance&lt;/a&gt; is available and open to everyone. This instance is reset every night and is based on reference data maintained by the OpenCTI developers.&lt;/p&gt; &#xA;&lt;h2&gt;Releases download&lt;/h2&gt; &#xA;&lt;p&gt;The releases are available on the &lt;a href=&#34;https://github.com/OpenCTI-Platform/opencti/releases&#34;&gt;Github releases page&lt;/a&gt;. You can also access the &lt;a href=&#34;https://releases.opencti.io&#34;&gt;rolling release package&lt;/a&gt; generated from the master branch of the repository.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;All you need to install the OpenCTI platform can be found in the &lt;a href=&#34;https://filigran.notion.site/OpenCTI-Public-Knowledge-Base-d411e5e477734c59887dad3649f20518&#34;&gt;official documentation&lt;/a&gt;. For installation, you can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://filigran.notion.site/Virtual-machine-template-1789b4442b414dbf87f748db51c85aa5&#34;&gt;Deploy the VM template&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://filigran.notion.site/Using-Docker-03d5c0592b9d4547800cc9f4ff7be2b8&#34;&gt;Use Docker&lt;/a&gt; (recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://filigran.notion.site/Using-Terraform-or-Helm-Chart-Community-Version-05e38d1046f34b998a0bd2873537f8f0&#34;&gt;Use Terraform or Helm-Chart&lt;/a&gt; (Community Version)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://filigran.notion.site/Manual-deployment-b911beba44234f179841582ab3894bb1&#34;&gt;Install manually&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Luatix&#39;s members&lt;/h2&gt; &#xA;&lt;h3&gt;Founders&lt;/h3&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://medium.com/@samuel.hassine&#34; alt=&#34;Samuel Hassine&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2021/10/sam-circle-1.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://medium.com/@julien.richard&#34; alt=&#34;Julien Richard&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2021/10/julien.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.ssi.gouv.fr&#34; alt=&#34;ANSSI&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2020/04/Anssi.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Sponsors&lt;/h3&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://www.intrinsec.com&#34; alt=&#34;Intrinsec&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2020/12/intrinsec.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.thalesgroup.com&#34; alt=&#34;Thales&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2020/04/Thales.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.tanium.com&#34; alt=&#34;Tanium&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2021/01/tanium.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www1.nyc.gov/site/cyber/index.page&#34; alt=&#34;New York City Cyber Command&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2020/11/nyc.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gatewatcher.com&#34; alt=&#34;Gatewatcher&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2021/03/gatewatcher.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.deepwatch.com&#34; alt=&#34;deepwatch&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2021/10/deepwatch.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.aisi.fr&#34; alt=&#34;AISI&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2021/10/aisi.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.hermes.com&#34; alt=&#34;Hermès&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2022/01/hermes.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.aon.com&#34; alt=&#34;Aon&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2022/01/aon.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h3&gt;Advisory board&lt;/h3&gt; &#xA;&lt;p align=&#34;left&#34;&gt; &lt;a href=&#34;https://cert.europa.eu&#34; alt=&#34;CERT-EU&#34;&gt;&lt;img src=&#34;https://www.luatix.org/wp-content/uploads/2021/02/certeu.png&#34; width=&#34;80&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;h3&gt;Code of Conduct&lt;/h3&gt; &#xA;&lt;p&gt;OpenCTI has adopted a &lt;a href=&#34;https://raw.githubusercontent.com/OpenCTI-Platform/opencti/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; that we expect project participants to adhere to. Please read the &lt;a href=&#34;https://raw.githubusercontent.com/OpenCTI-Platform/opencti/master/CODE_OF_CONDUCT.md&#34;&gt;full text&lt;/a&gt; so that you can understand what actions will and will not be tolerated.&lt;/p&gt; &#xA;&lt;h3&gt;Contributing Guide&lt;/h3&gt; &#xA;&lt;p&gt;Read our &lt;a href=&#34;https://raw.githubusercontent.com/OpenCTI-Platform/opencti/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; to learn about our development process, how to propose bugfixes and improvements, and how to build and test your changes to OpenCTI.&lt;/p&gt; &#xA;&lt;h3&gt;Beginner friendly issues&lt;/h3&gt; &#xA;&lt;p&gt;To help you get you familiar with our contribution process, we have a list of &lt;a href=&#34;https://github.com/OpenCTI-Platform/opencti/labels/beginner%20friendly%20issue&#34;&gt;beginner friendly issues&lt;/a&gt; which are fairly easy to implement. This is a great place to get started.&lt;/p&gt; &#xA;&lt;h3&gt;Development&lt;/h3&gt; &#xA;&lt;p&gt;If you want to actively help OpenCTI, we created a &lt;a href=&#34;https://filigran.notion.site/Environment-setup-606996f36d904fcf8d434c6d0eae4a00&#34;&gt;dedicated documentation&lt;/a&gt; about the deployment of a development environement and how to start the source code modification.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Status &amp;amp; bugs&lt;/h3&gt; &#xA;&lt;p&gt;Currently OpenCTI is under heavy development, if you wish to report bugs or ask for new features, you can directly use the &lt;a href=&#34;https://github.com/OpenCTI-Platform/opencti/issues&#34;&gt;Github issues module&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Discussion&lt;/h3&gt; &#xA;&lt;p&gt;If you need support or you wish to engage a discussion about the OpenCTI platform, feel free to join us on our &lt;a href=&#34;https://community.filigran.io&#34;&gt;Slack channel&lt;/a&gt;. You can also send us an email to &lt;a href=&#34;mailto:contact@opencti.io&#34;&gt;contact@opencti.io&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;h3&gt;Authors&lt;/h3&gt; &#xA;&lt;p&gt;OpenCTI is a product powered by the collaboration of the private company &lt;a href=&#34;https://www.filigran.io&#34;&gt;Filigran&lt;/a&gt;, the &lt;a href=&#34;https://ssi.gouv.fr&#34;&gt;French national cybersecurity agency (ANSSI)&lt;/a&gt;, the &lt;a href=&#34;https://cert.europa.eu&#34;&gt;CERT-EU&lt;/a&gt; and the &lt;a href=&#34;https://www.luatix.org&#34;&gt;Luatix&lt;/a&gt; non-profit organization.&lt;/p&gt; &#xA;&lt;h3&gt;GDPR and the OpenCTI OpenStreetMap server&lt;/h3&gt; &#xA;&lt;p&gt;In order to provide OpenCTI users with cartography features, the platform uses a dedicated OpenStreetMap server (&lt;a href=&#34;https://map.opencti.io&#34;&gt;https://map.opencti.io&lt;/a&gt;). To monitor usage and adapt services performances, Luatix collects access log to this server (including IP addresses).&lt;/p&gt; &#xA;&lt;p&gt;By using this server, you authorize Luatix to collect this information. Otherwise, you are free to deploy your own OpenStreetMap server and modify the platform configuration accordingly.&lt;/p&gt; &#xA;&lt;p&gt;If you have started using the Luatix server and change your mind, you have the right to access, limit, rectify, erase and receive your data. To exercise your rights, please send your request to &lt;a href=&#34;mailto:gdpr@opencti.io&#34;&gt;gdpr@opencti.io&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>