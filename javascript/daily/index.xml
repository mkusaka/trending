<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-19T01:30:29Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pmndrs/gltfjsx</title>
    <updated>2024-03-19T01:30:29Z</updated>
    <id>tag:github.com,2024-03-19:/pmndrs/gltfjsx</id>
    <link href="https://github.com/pmndrs/gltfjsx" rel="alternate"></link>
    <summary type="html">&lt;p&gt;üéÆ Turns GLTFs into JSX components&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://user-images.githubusercontent.com/2223602/126318148-99da7ed6-a578-48dd-bdd2-21056dbad003.mp4&#34;&gt;https://user-images.githubusercontent.com/2223602/126318148-99da7ed6-a578-48dd-bdd2-21056dbad003.mp4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/gltfjsx&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/gltfjsx?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&#34; alt=&#34;Version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/ZZjjNvJ&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/740090768164651008?style=flat&amp;amp;colorA=000000&amp;amp;colorB=000000&amp;amp;label=discord&amp;amp;logo=discord&amp;amp;logoColor=ffffff&#34; alt=&#34;Discord Shield&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A small command-line tool that turns GLTF assets into declarative and re-usable &lt;a href=&#34;https://github.com/pmndrs/react-three-fiber&#34;&gt;react-three-fiber&lt;/a&gt; JSX components.&lt;/p&gt; &#xA;&lt;h3&gt;The GLTF workflow on the web is not ideal ...&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GLTF is thrown whole into the scene which prevents re-use, in threejs objects can only be mounted once&lt;/li&gt; &#xA; &lt;li&gt;Contents can only be found by traversal which is cumbersome and slow&lt;/li&gt; &#xA; &lt;li&gt;Changes to queried nodes are made by mutation, which alters the source data and prevents re-use&lt;/li&gt; &#xA; &lt;li&gt;Re-structuring content, making nodes conditional or adding/removing is cumbersome&lt;/li&gt; &#xA; &lt;li&gt;Model compression is complex and not easily achieved&lt;/li&gt; &#xA; &lt;li&gt;Models often have unnecessary nodes that cause extra work and matrix updates&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;GLTFJSX fixes that&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;üßë‚Äçüíª It creates a virtual graph of all objects and materials. Now you can easily alter contents and re-use.&lt;/li&gt; &#xA; &lt;li&gt;üèéÔ∏è The graph gets pruned (empty groups, unnecessary transforms, ...) and will perform better.&lt;/li&gt; &#xA; &lt;li&gt;‚ö°Ô∏è It will optionally compress your model with up to 70%-90% size reduction.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;Usage&#xA;  $ npx gltfjsx [Model.glb] [options]&#xA;&#xA;Options&#xA;  --output, -o        Output file name/path&#xA;  --types, -t         Add Typescript definitions&#xA;  --keepnames, -k     Keep original names&#xA;  --keepgroups, -K    Keep (empty) groups, disable pruning&#xA;  --meta, -m          Include metadata (as userData)&#xA;  --shadows, -s        Let meshes cast and receive shadows&#xA;  --printwidth, w     Prettier printWidth (default: 120)&#xA;  --precision, -p     Number of fractional digits (default: 3)&#xA;  --draco, -d         Draco binary path&#xA;  --root, -r          Sets directory from which .gltf file is served&#xA;  --instance, -i      Instance re-occuring geometry&#xA;  --instanceall, -I   Instance every geometry (for cheaper re-use)&#xA;  --transform, -T     Transform the asset for the web (draco, prune, resize)&#xA;    --resolution, -R  Resolution for texture resizing (default: 1024)&#xA;    --keepmeshes, -j  Do not join compatible meshes&#xA;    --keepmaterials, -M Do not palette join materials&#xA;    --format, -f      Texture format (default: &#34;webp&#34;)&#xA;    --simplify, -S    Mesh simplification (default: false)&#xA;      --weld          Weld tolerance (default: 0.00005)&#xA;      --ratio         Simplifier ratio (default: 0)&#xA;      --error         Simplifier error threshold (default: 0.0001)&#xA;  --debug, -D         Debug output&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;A typical use-case&lt;/h3&gt; &#xA;&lt;p&gt;First you run your model through gltfjsx. &lt;code&gt;npx&lt;/code&gt; allows you to use npm packages without installing them.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npx gltfjsx model.gltf --transform&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a &lt;code&gt;Model.jsx&lt;/code&gt; file that plots out all of the assets contents.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;/*&#xA;auto-generated by: https://github.com/pmdrs/gltfjsx&#xA;author: abcdef (https://sketchfab.com/abcdef)&#xA;license: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)&#xA;source: https://sketchfab.com/models/...&#xA;title: Model&#xA;*/&#xA;&#xA;import { useGLTF, PerspectiveCamera } from &#39;@react-three/drei&#39;&#xA;&#xA;export function Model(props) {&#xA;  const { nodes, materials } = useGLTF(&#39;/model-transformed.glb&#39;)&#xA;  return (&#xA;    &amp;lt;group {...props} dispose={null}&amp;gt;&#xA;      &amp;lt;PerspectiveCamera name=&#34;camera&#34; fov={40} near={10} far={1000} position={[10, 0, 50]} /&amp;gt;      &#xA;      &amp;lt;pointLight intensity={10} position={[100, 50, 100]} rotation={[-Math.PI / 2, 0, 0]} /&amp;gt;&#xA;      &amp;lt;group position={[10, -5, 0]}&amp;gt;&#xA;        &amp;lt;mesh geometry={nodes.robot.geometry} material={materials.metal} /&amp;gt;&#xA;        &amp;lt;mesh geometry={nodes.rocket.geometry} material={materials.wood} /&amp;gt;&#xA;      &amp;lt;/group&amp;gt;&#xA;    &amp;lt;/group&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;useGLTF.preload(&#39;/model.gltf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add your model to your &lt;code&gt;/public&lt;/code&gt; folder as you would normally do. With the &lt;code&gt;--transform&lt;/code&gt; flag it has created a compressed copy of it (in the above case &lt;code&gt;model-transformed.glb&lt;/code&gt;). Without the flag just copy the original model.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;/public&#xA;  model-transformed.glb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The component can now be dropped into your scene.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Canvas } from &#39;@react-three/fiber&#39;&#xA;import { Model } from &#39;./Model&#39;&#xA;&#xA;function App() {&#xA;  return (&#xA;    &amp;lt;Canvas&amp;gt;&#xA;      &amp;lt;Model /&amp;gt;      &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can re-use it, it will re-use geometries and materials out of the box:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;Model position={[0, 0, 0]} /&amp;gt;&#xA;&amp;lt;Model position={[10, 0, -10]} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or make the model dynamic. Change its colors for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;mesh geometry={nodes.robot.geometry} material={materials.metal} material-color=&#34;green&#34; /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or exchange materials:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;mesh geometry={nodes.robot.geometry}&amp;gt;&#xA;  &amp;lt;meshPhysicalMaterial color=&#34;hotpink&#34; /&amp;gt;&#xA;&amp;lt;/mesh&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make contents conditional:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;{condition &amp;amp;&amp;amp; &amp;lt;mesh geometry={nodes.robot.geometry} material={materials.metal} /&amp;gt;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add events:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;mesh geometry={nodes.robot.geometry} material={materials.metal} onClick={handleClick} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h4&gt;‚ö°Ô∏è Draco and meshopt compression ootb&lt;/h4&gt; &#xA;&lt;p&gt;You don&#39;t need to do anything if your models are draco compressed, since &lt;code&gt;useGLTF&lt;/code&gt; defaults to a &lt;a href=&#34;https://www.gstatic.com/draco/v1/decoders/&#34;&gt;draco CDN&lt;/a&gt;. By adding the &lt;code&gt;--draco&lt;/code&gt; flag you can refer to &lt;a href=&#34;https://github.com/mrdoob/three.js/tree/dev/examples/js/libs/draco/gltf&#34;&gt;local binaries&lt;/a&gt; which must reside in your /public folder.&lt;/p&gt; &#xA;&lt;h4&gt;‚ö°Ô∏è Preload your assets for faster response&lt;/h4&gt; &#xA;&lt;p&gt;The asset will be preloaded by default, this makes it quicker to load and reduces time-to-paint. Remove the preloader if you don&#39;t need it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;useGLTF.preload(&#39;/model.gltf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ö°Ô∏è Auto-transform (compression, resize)&lt;/h4&gt; &#xA;&lt;p&gt;With the &lt;code&gt;--transform&lt;/code&gt; flag it creates a binary-packed, draco-compressed, texture-resized (1024x1024), webp compressed, deduped, instanced and pruned *.glb ready to be consumed on a web site. It uses &lt;a href=&#34;https://github.com/donmccurdy/glTF-Transform&#34;&gt;glTF-Transform&lt;/a&gt;. This can reduce the size of an asset by 70%-90%.&lt;/p&gt; &#xA;&lt;p&gt;It will not alter the original but create a copy and append &lt;code&gt;[modelname]-transformed.glb&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;‚ö°Ô∏è Type-safety&lt;/h4&gt; &#xA;&lt;p&gt;Add the &lt;code&gt;--types&lt;/code&gt; flag and your GLTF will be typesafe.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-tsx&#34;&gt;type GLTFResult = GLTF &amp;amp; {&#xA;  nodes: { robot: THREE.Mesh; rocket: THREE.Mesh }&#xA;  materials: { metal: THREE.MeshStandardMaterial; wood: THREE.MeshStandardMaterial }&#xA;}&#xA;&#xA;export default function Model(props: JSX.IntrinsicElements[&#39;group&#39;]) {&#xA;  const { nodes, materials } = useGLTF&amp;lt;GLTFResult&amp;gt;(&#39;/model.gltf&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ö°Ô∏è Easier access to animations&lt;/h4&gt; &#xA;&lt;p&gt;If your GLTF contains animations it will add &lt;a href=&#34;https://github.com/pmndrs/drei&#34;&gt;drei&#39;s&lt;/a&gt; &lt;code&gt;useAnimations&lt;/code&gt; hook, which extracts all clips and prepares them as actions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const { nodes, materials, animations } = useGLTF(&#39;/model.gltf&#39;)&#xA;const { actions } = useAnimations(animations, group)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to play an animation you can do so at any time:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;&amp;lt;mesh onClick={(e) =&amp;gt; actions.jump.play()} /&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to blend animations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const [name, setName] = useState(&#34;jump&#34;)&#xA;...&#xA;useEffect(() =&amp;gt; {&#xA;  actions[name].reset().fadeIn(0.5).play()&#xA;  return () =&amp;gt; actions[name].fadeOut(0.5)&#xA;}, [name])&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;‚ö°Ô∏è Auto-instancing&lt;/h4&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;--instance&lt;/code&gt; flag and it will look for similar geometry and create instances of them. Look into &lt;a href=&#34;https://github.com/pmndrs/drei#instances&#34;&gt;drei/Merged&lt;/a&gt; to understand how it works. It does not matter if you instanced the model previously in Blender, it creates instances for each mesh that has a specific geometry and/or material.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--instanceall&lt;/code&gt; will create instances of all the geometry. This allows you to re-use the model with the smallest amount of drawcalls.&lt;/p&gt; &#xA;&lt;p&gt;Your export will look like something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const context = createContext()&#xA;export function Instances({ children, ...props }) {&#xA;  const { nodes } = useGLTF(&#39;/model-transformed.glb&#39;)&#xA;  const instances = useMemo(() =&amp;gt; ({ Screw1: nodes[&#39;Screw1&#39;], Screw2: nodes[&#39;Screw2&#39;] }), [nodes])&#xA;  return (&#xA;    &amp;lt;Merged meshes={instances} {...props}&amp;gt;&#xA;      {(instances) =&amp;gt; &amp;lt;context.Provider value={instances} children={children} /&amp;gt;}&#xA;    &amp;lt;/Merged&amp;gt;&#xA;  )&#xA;}&#xA;&#xA;export function Model(props) {&#xA;  const instances = useContext(context)&#xA;  return (&#xA;    &amp;lt;group {...props} dispose={null}&amp;gt;&#xA;      &amp;lt;instances.Screw1 position={[-0.42, 0.04, -0.08]} rotation={[-Math.PI / 2, 0, 0]} /&amp;gt;&#xA;      &amp;lt;instances.Screw2 position={[-0.42, 0.04, -0.08]} rotation={[-Math.PI / 2, 0, 0]} /&amp;gt;&#xA;    &amp;lt;/group&amp;gt;&#xA;  )&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that similar to &lt;code&gt;--transform&lt;/code&gt; it also has to transform the model. In order to use and re-use the model import both &lt;code&gt;Instances&lt;/code&gt; and &lt;code&gt;Model&lt;/code&gt;. Put all your models into the &lt;code&gt;Instances&lt;/code&gt; component (you can nest).&lt;/p&gt; &#xA;&lt;p&gt;The following will show the model three times, but you will only have 2 drawcalls tops.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { Instances, Model } from &#39;./Model&#39;&#xA;&#xA;&amp;lt;Instances&amp;gt;&#xA;  &amp;lt;Model position={[10,0,0]}&amp;gt;&#xA;  &amp;lt;Model position={[-10,0,0]}&amp;gt;&#xA;  &amp;lt;Model position={[-10,10,0]}&amp;gt;&#xA;&amp;lt;/Instance&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the parser stand-alone&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { parse } from &#39;gltfjsx&#39;&#xA;import { GLTFLoader, DRACOLoader } from &#39;three-stdlib&#39;&#xA;&#xA;const gltfLoader = new GLTFLoader()&#xA;const dracoloader = new DRACOLoader()&#xA;dracoloader.setDecoderPath(&#39;https://www.gstatic.com/draco/v1/decoders/&#39;)&#xA;gltfLoader.setDRACOLoader(dracoloader)&#xA;&#xA;gltfLoader.load(url, (gltf) =&amp;gt; {&#xA;  const jsx = parse(gltf, optionalConfig)&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using the parser stand-alone for scenes (object3d&#39;s)&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;const jsx = parse(scene, optionalConfig)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using GLTFStructureLoader stand-alone&lt;/h2&gt; &#xA;&lt;p&gt;The GLTFStructureLoader can come in handy while testing gltf assets. It allows you to extract the structure without the actual binaries and textures making it possible to run in a testing environment.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;import { GLTFStructureLoader } from &#39;gltfjsx&#39;&#xA;import fs from &#39;fs/promises&#39;&#xA;&#xA;it(&#39;should have a scene with a blue mesh&#39;, async () =&amp;gt; {&#xA;  const loader = new GLTFStructureLoader()&#xA;  const data = await fs.readFile(&#39;./model.glb&#39;)&#xA;  const { scene } = await new Promise((res) =&amp;gt; loader.parse(data, &#39;&#39;, res))&#xA;  expect(() =&amp;gt; scene.children.length).toEqual(1)&#xA;  expect(() =&amp;gt; scene.children[0].type).toEqual(&#39;mesh&#39;)&#xA;  expect(() =&amp;gt; scene.children[0].material.color).toEqual(&#39;blue&#39;)  &#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Nodejs must be installed&lt;/li&gt; &#xA; &lt;li&gt;The GLTF file has to be present in your projects &lt;code&gt;/public&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/mrdoob/three.js/&#34;&gt;three&lt;/a&gt; (&amp;gt;= 122.x)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/react-three-fiber&#34;&gt;@react-three/fiber&lt;/a&gt; (&amp;gt;= 5.x)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/pmndrs/drei&#34;&gt;@react-three/drei&lt;/a&gt; (&amp;gt;= 2.x)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>developersdigest/llm-answer-engine</title>
    <updated>2024-03-19T01:30:29Z</updated>
    <id>tag:github.com,2024-03-19:/developersdigest/llm-answer-engine</id>
    <link href="https://github.com/developersdigest/llm-answer-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Build a Perplexity-Inspired Answer Engine Using Groq, Mixtral, Langchain, Brave &amp; OpenAI&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Perplexity Inspired LLM Answer Engine&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains the code and instructions needed to build a sophisticated answer engine that leverages the capabilities of Groq, Mixtral, Langchain.JS, Brave Search, and OpenAI. Designed to efficiently return sources, answers, and follow-up questions based on user queries, this project is an ideal starting point for developers interested in natural language processing and search technologies.&lt;/p&gt; &#xA;&lt;h2&gt;YouTube Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://img.youtube.com/vi/43ZCeBTcsS8/0.jpg&#34; alt=&#34;Build a Perplexity-Inspired Answer Engine Using Groq, Mixtral, Langchain, Brave &amp;amp; OpenAI in 10 Min&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://youtu.be/43ZCeBTcsS8&#34;&gt;Watch the tutorial here&lt;/a&gt; for a detailed guide on setting up and running this project. The video covers every step of the process, from API key acquisition to server deployment.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies Used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Express.js&lt;/strong&gt;: A web application framework for Node.js, used to create server-side applications.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Body-Parser&lt;/strong&gt;: A middleware for Express.js, it&#39;s used to parse incoming request bodies before your handlers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Groq &amp;amp; Mixtral&lt;/strong&gt;: Technologies for processing and understanding user queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Langchain.JS&lt;/strong&gt;: A JavaScript library focused on text operations, such as text splitting and embeddings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brave Search&lt;/strong&gt;: A privacy-focused search engine used for sourcing relevant content.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI&lt;/strong&gt;: Leveraged for generating coherent and contextually relevant answers and follow-up questions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Cheerio&lt;/strong&gt;: Utilized for HTML parsing, allowing the extraction of content from web pages.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Ensure Node.js and npm are installed on your machine.&lt;/li&gt; &#xA; &lt;li&gt;Obtain API keys from Groq, OpenAI, and Brave Search.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Obtaining API Keys&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Groq API Key&lt;/strong&gt;: &lt;a href=&#34;https://console.groq.com/playground&#34;&gt;Get your Groq API key here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;OpenAI API Key&lt;/strong&gt;: &lt;a href=&#34;https://platform.openai.com/api-keys&#34;&gt;Generate your OpenAI API key here&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Brave Search API Key&lt;/strong&gt;: &lt;a href=&#34;https://api.search.brave.com/app/dashboard&#34;&gt;Obtain your Brave Search API key here&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Clone the repository: &lt;code&gt;git clone https://github.com/developersdigest/llm-answer-engine&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Install the required dependencies: &lt;code&gt;npm install&lt;/code&gt; or &lt;code&gt;bun install&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Create a &lt;code&gt;.env&lt;/code&gt; file in the root of your project and add your API keys: &lt;pre&gt;&lt;code&gt;GROQ_API_KEY=&amp;lt;your_groq_api_key&amp;gt;&#xA;BRAVE_SEARCH_API_KEY=&amp;lt;your_brave_search_api_key&amp;gt;&#xA;OPENAI_API_KEY=&amp;lt;your_openai_api_key&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Running the Server&lt;/h3&gt; &#xA;&lt;p&gt;To start the server, execute: &lt;code&gt;npm start&lt;/code&gt; The server will be listening on port 3005.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Make a POST request to &lt;code&gt;localhost:3005&lt;/code&gt; with a JSON body containing your query and the desired parameters:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;message&#34;: &#34;Tell me the Anthropic&#39;s Claude 3&#34;,&#xA;  &#34;returnSources&#34;: true,&#xA;  &#34;returnFollowUpQuestions&#34;: true,&#xA;  &#34;embedSourcesInLLMResponse&#34;: false,&#xA;  &#34;textChunkSize&#34;: 800,&#xA;  &#34;textChunkOverlap&#34;: 200,&#xA;  &#34;numberOfSimilarityResults&#34;: 2,&#xA;  &#34;numberOfPagesToScan&#34;: 4&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The engine will process your query and return a comprehensive answer along with sources and, if requested, follow-up questions.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to the project are welcome. Feel free to fork the repository, make your changes, and submit a pull request. You can also open issues to suggest improvements or report bugs.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This project is licensed under the MIT License - see the LICENSE file for more details.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;m the developer behind Developers Digest. If you find my work helpful or enjoy what I do, consider supporting me. Here are a few ways you can do that:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Patreon&lt;/strong&gt;: Support me on Patreon at &lt;a href=&#34;https://www.patreon.com/DevelopersDigest&#34;&gt;patreon.com/DevelopersDigest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Buy Me A Coffee&lt;/strong&gt;: You can buy me a coffee at &lt;a href=&#34;https://www.buymeacoffee.com/developersdigest&#34;&gt;buymeacoffee.com/developersdigest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Website&lt;/strong&gt;: Check out my website at &lt;a href=&#34;https://developersdigest.tech&#34;&gt;developersdigest.tech&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Github&lt;/strong&gt;: Follow me on GitHub at &lt;a href=&#34;https://github.com/developersdigest&#34;&gt;github.com/developersdigest&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Twitter&lt;/strong&gt;: Follow me on Twitter at &lt;a href=&#34;https://twitter.com/dev__digest&#34;&gt;twitter.com/dev__digest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>JavaScript-Mastery-Pro/gsap-cc-starter</title>
    <updated>2024-03-19T01:30:29Z</updated>
    <id>tag:github.com,2024-03-19:/JavaScript-Mastery-Pro/gsap-cc-starter</id>
    <link href="https://github.com/JavaScript-Mastery-Pro/gsap-cc-starter" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Starter Repository of GSAP Crash Course&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;React + Vite&lt;/h1&gt; &#xA;&lt;p&gt;This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.&lt;/p&gt; &#xA;&lt;p&gt;Currently, two official plugins are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitejs/vite-plugin-react/raw/main/packages/plugin-react/README.md&#34;&gt;@vitejs/plugin-react&lt;/a&gt; uses &lt;a href=&#34;https://babeljs.io/&#34;&gt;Babel&lt;/a&gt; for Fast Refresh&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vitejs/vite-plugin-react-swc&#34;&gt;@vitejs/plugin-react-swc&lt;/a&gt; uses &lt;a href=&#34;https://swc.rs/&#34;&gt;SWC&lt;/a&gt; for Fast Refresh&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>