<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-10-04T01:34:55Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>midudev/password-generator</title>
    <updated>2022-10-04T01:34:55Z</updated>
    <id>tag:github.com,2022-10-04:/midudev/password-generator</id>
    <link href="https://github.com/midudev/password-generator" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Best password generator agnostic to framework&lt;/p&gt;&lt;hr&gt;&lt;a href=&#34;https://hacktoberfest-2022.vercel.app/&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/midudev/password-generator/main/public/banner_gh.jpg&#34;&gt; &lt;/a&gt; &#xA;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;h1&gt;¡Contribuye a un proyecto de código abierto!&lt;/h1&gt; &#xA; &lt;p&gt;🚀 Soluciona el reto y participa en la Hacktoberfest&lt;/p&gt; &#xA; &lt;p&gt;&lt;img src=&#34;https://img.shields.io/github/stars/midudev/hacktoberfest-2022&#34; alt=&#34;GitHub stars&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues/midudev/hacktoberfest-2022&#34; alt=&#34;GitHub issues&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr/midudev/hacktoberfest-2022&#34; alt=&#34;GitHub pull requests&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/issues-pr-closed-raw/midudev/hacktoberfest-2022&#34; alt=&#34;GitHub pull requests&#34;&gt;&lt;/p&gt; &#xA;&lt;/div&gt; &#xA;&lt;h2&gt;🤔 ¿Qué es la Hacktoberfest?&lt;/h2&gt; &#xA;&lt;p&gt;La &lt;strong&gt;&lt;a href=&#34;https://hacktoberfest.com/&#34;&gt;Hacktoberfest&lt;/a&gt;&lt;/strong&gt; es un evento anual organizado por &lt;a href=&#34;https://www.digitalocean.com/&#34;&gt;DigitalOcean&lt;/a&gt; y &lt;a href=&#34;https://dev.to/&#34;&gt;DEV&lt;/a&gt;, que consiste en contribuir a proyectos de código abierto y ganar una camiseta gratis.&lt;/p&gt; &#xA;&lt;h2&gt;🚀 ¿Cómo participar?&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;🚧 Necesitarás la extensión &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=astro-build.astro-vscode&#34;&gt;Astro para Visual Studio Code&lt;/a&gt; y &lt;a href=&#34;https://nodejs.org/en/&#34;&gt;Nodejs 16+&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Regístrate en &lt;a href=&#34;https://hacktoberfest.com/&#34;&gt;Hacktoberfest&lt;/a&gt;&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click en &lt;strong&gt;Start Hacking&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Inicia sesión con GitHub o GitLab.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Crea un fork de este repositorio&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Click en &lt;em&gt;Fork&lt;/em&gt; en la esquina superior derecha o haz click &lt;a href=&#34;https://github.com/midudev/hacktoberfest-2022/fork&#34;&gt;aquí&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Clona el repositorio:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:TU_USUARIO/hacktoberfest-2022.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instala las dependencias:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm install&#xA;# o&#xA;pnpm install&#xA;# o&#xA;yarn install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Crea una página en&lt;/strong&gt;:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-txt&#34;&gt;/pages/entry/&amp;lt;tu-nombre-de-usuario-en-github&amp;gt;/index.astro&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Ejecuta el proyecto:&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;npm run dev&#xA;# o&#xA;pnpm run dev&#xA;# o&#xA;yarn dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;&lt;strong&gt;Soluciona el reto que se indica en &lt;a href=&#34;https://hacktoberfest-2022.vercel.app/&#34;&gt;la página principal&lt;/a&gt;&lt;/strong&gt; y happy hacking 🥳.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;📝 Reglas&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Puedes usar cualquier framework dentro de esta lista: React, Vue, Svelte, Preact y Solid. También puedes usar Vanilla JavaScript.&lt;/li&gt; &#xA; &lt;li&gt;❌ NO puedes usar dependencias de terceros. Nada de npm install, ni yarn add ni similares.&lt;/li&gt; &#xA; &lt;li&gt;✅ Se puede utilizar CSS y Tailwind pero...&lt;/li&gt; &#xA; &lt;li&gt;❌ NO se puede utilizar otro framework CSS como Bootstrap, Bulma, NextUI, Material UI, etc... ni tampoco SASS, Stylus o similares.&lt;/li&gt; &#xA; &lt;li&gt;❌ No copies soluciones de otros participantes o soluciones de fuera. ¡La idea es que practiques y te esfuerces!&lt;/li&gt; &#xA; &lt;li&gt;✅ Crea tus PRs del &lt;strong&gt;1 al 31 de octubre&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;❌ No uses ni modifiques código o componentes de otros participantes.&lt;/li&gt; &#xA; &lt;li&gt;❌ No modifiques código de fuera de tus carpetas (a no ser que sea exactamente para arreglar un problema de la página).&lt;/li&gt; &#xA; &lt;li&gt;❌ NO USES ESTILOS GLOBALES. NO ESTILES etiquetas. Usa siempre un selector muy específico (por ejemplo, una id con tu nombre) y a partir de ahí estila lo que quieras de tu solución. Así evitamos conflictos entre estilos.&lt;/li&gt; &#xA; &lt;li&gt;✅ Si necesitas crear componentes auxiliares para tu solución, crea una carpeta en:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt; components/&amp;lt;nombre-de-usuario-en-github&amp;gt;/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;🎁 Premios&lt;/h2&gt; &#xA;&lt;p&gt;Además de poder conseguir la camiseta de la Hacktoberfest, haremos una votación para elegir las mejores soluciones. Los premios son:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🥇 Teclado mecánico &lt;a href=&#34;https://www.keychron.com/products/keychron-k3-wireless-mechanical-keyboard?variant=32220198633561&#34;&gt;Keychron K3 v2 RGB Backlight&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🥈 &lt;a href=&#34;https://www.redbubble.com/es/&#34;&gt;Cheque regalo para Red Bubble&lt;/a&gt; por valor de 30€.&lt;/li&gt; &#xA; &lt;li&gt;🥉 &lt;a href=&#34;https://leanpub.com/aprendiendo-git&#34;&gt;Libro de Aprendiendo Git&lt;/a&gt; + &lt;a href=&#34;https://leanpub.com/descubre-svelte&#34;&gt;Descubre Svelte&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;📝 Notas&lt;/h2&gt; &#xA;&lt;p&gt;Si usas Solid o Preact, debes indicar el &lt;a href=&#34;https://www.typescriptlang.org/tsconfig#jsxImportSource&#34;&gt;&lt;code&gt;jsxImportSource&lt;/code&gt;&lt;/a&gt; en un comentario pragma. Haz esto en la primera línea de cada archivo JSX/TSX.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-jsx&#34;&gt;// Para Preact&#xA;/** @jsxImportSource preact */&#xA;&#xA;// Para Solid&#xA;/** @jsxImportSource solid-js */&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Más información al respecto &lt;a href=&#34;https://docs.astro.build/es/guides/typescript/#soluci%C3%B3n-de-problemas&#34;&gt;aquí&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;🤗 Contribuidores&lt;/h2&gt; &#xA;&lt;a href=&#34;https://github.com/midudev/hacktoberfest-2022/graphs/contributors&#34;&gt; &lt;img src=&#34;https://contrib.rocks/image?repo=midudev/hacktoberfest-2022&#34;&gt; &lt;/a&gt;</summary>
  </entry>
  <entry>
    <title>maheshjainckd/Hacktoberfest2022-for-everyone</title>
    <updated>2022-10-04T01:34:55Z</updated>
    <id>tag:github.com,2022-10-04:/maheshjainckd/Hacktoberfest2022-for-everyone</id>
    <link href="https://github.com/maheshjainckd/Hacktoberfest2022-for-everyone" rel="alternate"></link>
    <summary type="html">&lt;p&gt;This repository is for everyone who wants to participate in Hacktoberfest 2022. Anyone can contribute/add quality code or projects for your Swags (T- Shirt), must be relevant that can add some value to this repository.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&#xA; &lt;center&gt;&#xA;   {EXCLUDED} 🥺 From Hacktoberfest2022&#xA; &lt;/center&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;{EXCLUDED} 😐 Contribute to Repositories for HacktoberFest 2022 👇&lt;/h2&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/dikshantrajput/hacktoberfest-2022-react&#34;&gt;https://github.com/dikshantrajput/hacktoberfest-2022-react&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://github.com/dikshantrajput/Hacktoberfest-accepted-2022&#34;&gt;https://github.com/dikshantrajput/Hacktoberfest-accepted-2022&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h1&gt;&#xA; &lt;center&gt;&#xA;   Hacktober Fest 2022 For Everyone! &#xA; &lt;/center&gt;&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img alt=&#34;GitHub pull-requests&#34; src=&#34;https://img.shields.io/github/issues-pr/maheshjainckd/Hacktoberfest2022-for-everyone&#34;&gt; &lt;img alt=&#34;GitHub forks&#34; src=&#34;https://img.shields.io/github/forks/maheshjainckd/Hacktoberfest2022-for-everyone&#34;&gt; &lt;img alt=&#34;contributors&#34; src=&#34;https://img.shields.io/github/contributors/maheshjainckd/Hacktoberfest2022-for-everyone&#34;&gt; &lt;img alt=&#34;GitHub stars&#34; src=&#34;https://img.shields.io/github/stars/maheshjainckd/Hacktoberfest2022-for-everyone&#34;&gt; &lt;/p&gt; &#xA;&lt;h1&gt;Upload Projects or Different Types of Programs in any Language&lt;/h1&gt; &#xA;&lt;p&gt;Use this project to make your first contribution to an open source project on GitHub. Practice making your first pull request to a public repository before doing the real thing!&lt;/p&gt; &#xA;&lt;h1&gt;What is Hacktoberfest?&lt;/h1&gt; &#xA;&lt;p&gt;Hacktoberfest is a program by Digital Ocean, DEV and Github, where you can easily win a T-Shirt just by making 4 pull requests in the month of October to any open source projects on Github.&lt;/p&gt; &#xA;&lt;h2&gt;Steps to follow:&lt;/h2&gt; &#xA;&lt;h3&gt;1. Register for Hacktoberfest&lt;/h3&gt; &#xA;&lt;h5&gt;&lt;a href=&#34;https://hacktoberfest.com/&#34;&gt;https://hacktoberfest.com/&lt;/a&gt;&lt;/h5&gt; &#xA;&lt;h3&gt;2. Add Project/Program in any Language you like:&lt;/h3&gt; &#xA;&lt;p&gt;Add any of your simple or complex Project/Program in any language you like in this repository by clicking &#34;Add File -&amp;gt; Create new File&#34;.&lt;/p&gt; &#xA;&lt;h3&gt;3. Mention your name in the contributors.html file&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/maheshjainckd/Hacktoberfest2022-for-everyone/raw/main/contributors.html&#34;&gt;https://github.com/maheshjainckd/Hacktoberfest2022-for-everyone/blob/main/contributors.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;4. Create Pull Request:&lt;/h3&gt; &#xA;&lt;p&gt;Once you have completed these steps, you are ready to start contributing by clicking on Create Pull Request.&lt;/p&gt; &#xA;&lt;h3&gt;5. Give this Project a Star:&lt;/h3&gt; &#xA;&lt;p&gt;If you liked working on this project, please share this project as much as you can and star this project to help as many people in opensource as you can.&lt;/p&gt; &#xA;&lt;h2&gt;Note:&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Don&#39;t Create Pull Request to update &#34;readme.md&#34; File.&lt;/li&gt; &#xA; &lt;li&gt;Upload or Create File in Specified Language Folder.&lt;/li&gt; &#xA; &lt;li&gt;If Specified Language Folder not Found then Create Folder and then Upload or Create File.&lt;/li&gt; &#xA; &lt;li&gt;Please mention the extention of files while creating them (e.g if file is of java language create file named &#34;xyz.java&#34;).&lt;/li&gt; &#xA; &lt;li&gt;Don&#39;t change the styling of contributors.html file i.e don&#39;t format the file with prettier or any other extensions.&lt;/li&gt; &#xA; &lt;li&gt;In case you need to add an external package, install it by using npm. Don&#39;t push the complete package file here&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Special thanks&lt;span&gt;👍&lt;/span&gt; to:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/dikshantrajput&#34;&gt;dikshantrajput&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>leeoniya/uFuzzy</title>
    <updated>2022-10-04T01:34:55Z</updated>
    <id>tag:github.com,2022-10-04:/leeoniya/uFuzzy</id>
    <link href="https://github.com/leeoniya/uFuzzy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A tiny, efficient fuzzy search that doesn&#39;t suck&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;▒ μFuzzy&lt;/h2&gt; &#xA;&lt;p&gt;A tiny, efficient, fuzzy search that doesn&#39;t suck. This is my fuzzy 🐈. &lt;a href=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/#a-biased-appraisal-of-similar-work&#34;&gt;There are many like it&lt;/a&gt;, but this one is mine.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;uFuzzy is a &lt;a href=&#34;https://en.wikipedia.org/wiki/Approximate_string_matching&#34;&gt;fuzzy search&lt;/a&gt; library designed to match a relatively short search phrase (needle) against a large list of short-to-medium phrases (haystack). It might be best described as a more forgiving &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf&#34;&gt;String.indexOf()&lt;/a&gt;. Common use cases are list filtering, auto-complete/suggest, and title/name/description/filename/function searches.&lt;/p&gt; &#xA;&lt;p&gt;In its default configuration, each uFuzzy match must contain all alpha-numeric characters from the needle in the same sequence, so is likely a poor fit for applications like spellcheck or fulltext/document search. However, its speed leaves ample headroom to &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;outOfOrder&amp;amp;search=spac%20ca&#34;&gt;match out-of-order terms&lt;/a&gt; by combining results from all permutations of the needle. When held &lt;em&gt;just right&lt;/em&gt;, it can efficiently match against multiple object properties, too.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Junk-free, high quality results&lt;/strong&gt; that are &lt;em&gt;dataset-independent&lt;/em&gt;. No need to fine-tune indexing options or boosting params to attain some arbitrary quality score cut-off.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Straightforward fuzziness control&lt;/strong&gt; without surprises.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sorting you can reason about&lt;/strong&gt; and customize using a simple &lt;code&gt;Array.sort()&lt;/code&gt; which gets access to each match&#39;s stats/counters. There&#39;s no composite, black box &#34;score&#34; to understand.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Concise set of options&lt;/strong&gt; that don&#39;t interact in mysterious ways to drastically alter combined behavior.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fast with low resource usage&lt;/strong&gt; - there&#39;s no index to build, so startup is below 1ms with near-zero memory overhead. Searching a three-term phrase in a 162,000 phrase dataset takes 12ms with in-order terms or 50ms with out-of-order terms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Micro, with zero dependencies&lt;/strong&gt; - currently &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/dist/uFuzzy.iife.min.js&#34;&gt;&amp;lt; 4KB min&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;outOfOrder&amp;amp;search=spac%20ca&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/uFuzzy.png&#34; alt=&#34;uFuzzy demo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Demos&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; The &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/demos/testdata.json&#34;&gt;testdata.json&lt;/a&gt; file is a diverse 162,000 string/phrase dataset 4MB in size, so first load may be slow due to network transfer. Try refreshing once it&#39;s been cached by your browser.&lt;/p&gt; &#xA;&lt;p&gt;First, uFuzzy in isolation to demonstrate its performance.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;search=super%20ma&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;search=super%20ma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now the same comparison page, booted with &lt;a href=&#34;https://github.com/farzher/fuzzysort&#34;&gt;fuzzysort&lt;/a&gt;, &lt;a href=&#34;https://fwextensions.github.io/quick-score-demo/&#34;&gt;QuickScore&lt;/a&gt;, and &lt;a href=&#34;https://fusejs.io/&#34;&gt;Fuse.js&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here is the full library list but with a reduced dataset (just &lt;code&gt;hearthstone_750&lt;/code&gt;, &lt;code&gt;urls_and_titles_600&lt;/code&gt;) to avoid crashing your browser:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?lists=hearthstone_750,urls_and_titles_600&amp;amp;search=moo&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?lists=hearthstone_750,urls_and_titles_600&amp;amp;search=moo&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;h3&gt;Node&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm i @leeoniya/ufuzzy&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const uFuzzy = require(&#39;@leeoniya/ufuzzy&#39;);&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Browser&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;&amp;lt;script src=&#34;./dist/uFuzzy.iife.min.js&#34;&amp;gt;&amp;lt;/script&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Example&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;let haystack = [&#xA;    &#39;puzzle&#39;,&#xA;    &#39;Super Awesome Thing (now with stuff!)&#39;,&#xA;    &#39;FileName.js&#39;,&#xA;    &#39;/feeding/the/catPic.jpg&#39;,&#xA;];&#xA;&#xA;let needle = &#39;feed cat&#39;;&#xA;&#xA;let opts = {};&#xA;&#xA;let uf = new uFuzzy(opts);&#xA;&#xA;// pre-filter&#xA;let idxs = uf.filter(haystack, needle);&#xA;&#xA;// sort/rank only when &amp;lt;= 1,000 items&#xA;if (idxs.length &amp;lt;= 1e3) {&#xA;  let info = uf.info(idxs, haystack, needle);&#xA;&#xA;  // order is a double-indirection array (a re-order of the passed-in idxs)&#xA;  // this allows corresponding info to be grabbed directly by idx, if needed&#xA;  let order = uf.sort(info, haystack, needle);&#xA;&#xA;  // render post-filtered &amp;amp; ordered matches&#xA;  for (let i = 0; i &amp;lt; order.length; i++) {&#xA;    // using info.idx here instead of idxs because uf.info() may have&#xA;    // further reduced the initial idxs based on prefix/suffix rules&#xA;    console.log(haystack[info.idx[order[i]]]);&#xA;  }&#xA;}&#xA;else {&#xA;  // render pre-filtered but unordered matches&#xA;  for (let i = 0; i &amp;lt; idxs.length; i++) {&#xA;    console.log(haystack[i]);&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;How It Works&lt;/h3&gt; &#xA;&lt;p&gt;uFuzzy has two operational modes which differ in matching strategy:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;intraMode: 0&lt;/strong&gt; (default) requires all alpha-numeric characters in the search phrase to exist in the same sequence in all matches. For example, when searching for &#34;&lt;strong&gt;cat&lt;/strong&gt;&#34;, this mode is capable of matching the strings below. What is &lt;em&gt;actually&lt;/em&gt; matched will depend on additonal fuzziness settings. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;cat&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;c&lt;/strong&gt;o&lt;strong&gt;at&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;s&lt;strong&gt;c&lt;/strong&gt;r&lt;strong&gt;at&lt;/strong&gt;ch&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;ca&lt;/strong&gt;n&lt;strong&gt;t&lt;/strong&gt;ina&lt;/li&gt; &#xA;   &lt;li&gt;tra&lt;strong&gt;c&lt;/strong&gt;tors &lt;strong&gt;a&lt;/strong&gt;re la&lt;strong&gt;t&lt;/strong&gt;e&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;intraMode: 1&lt;/strong&gt; allows for a single error in each term of the search phrase, where an error is one of: substitution (replacement), transposition (swap), insertion (addition), or deletion (omission). The search strings with errors below can return matches containing &#34;&lt;strong&gt;example&lt;/strong&gt;&#34;. What is &lt;em&gt;actually&lt;/em&gt; matched will depend on additonal fuzziness settings. In contrast to the previous mode, searching for &#34;&lt;strong&gt;example&lt;/strong&gt;&#34; will never match &#34;&lt;strong&gt;ex&lt;/strong&gt;tr&lt;strong&gt;a&lt;/strong&gt; &lt;strong&gt;m&lt;/strong&gt;a&lt;strong&gt;ple&lt;/strong&gt;&#34;. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;example&lt;/code&gt; - exact&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;examplle&lt;/code&gt; - single insertion (addition)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exemple&lt;/code&gt; - single substitution (replacement)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exmaple&lt;/code&gt; - single transposition (swap)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;exmple&lt;/code&gt; - single deletion (omission)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xamp&lt;/code&gt; - partial&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;xmap&lt;/code&gt; - partial with transposition&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There are 3 phases to a search:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Filter&lt;/strong&gt; filters the full &lt;code&gt;haystack&lt;/code&gt; with a fast RegExp compiled from your &lt;code&gt;needle&lt;/code&gt; without doing any extra ops. It returns an array of matched indices in original order.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Info&lt;/strong&gt; collects more detailed stats about the filtered matches, such as start offsets, fuzz level, prefix/suffix counters, etc. It also gathers substring match positions for range highlighting. Finally, it filters out any matches that don&#39;t conform to the desired prefix/suffix rules. To do all this it re-compiles the &lt;code&gt;needle&lt;/code&gt; into two more-expensive RegExps that can partition each match. Therefore, it should be run on a reduced subset of the haystack, usually returned by the Filter phase. The &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&#34;&gt;uFuzzy demo&lt;/a&gt; is gated at &amp;lt;= 1,000 filtered items, before moving ahead with this phase.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Sort&lt;/strong&gt; does an &lt;code&gt;Array.sort()&lt;/code&gt; to determine final result order, utilizing the &lt;code&gt;info&lt;/code&gt; object returned from the previous phase. A custom sort function can be provided via a uFuzzy option: &lt;code&gt;{sort: (info, haystack, needle) =&amp;gt; idxsOrder}&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;API&lt;/h3&gt; &#xA;&lt;p&gt;A liberally-commented 100 LoC &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/dist/uFuzzy.d.ts&#34;&gt;uFuzzy.d.ts&lt;/a&gt; file.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;p&gt;Options with an &lt;strong&gt;inter&lt;/strong&gt; prefix apply to allowances &lt;em&gt;in between&lt;/em&gt; search terms, while those with an &lt;strong&gt;intra&lt;/strong&gt; prefix apply to allowances &lt;em&gt;within&lt;/em&gt; each search term.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Option&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;   &lt;th&gt;Default&lt;/th&gt; &#xA;   &lt;th&gt;Examples&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraMode&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;How term matching should be performed&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;0&lt;/code&gt; MultiInsert&lt;br&gt; &lt;code&gt;1&lt;/code&gt; SingleError&lt;br&gt;&lt;br&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/#how-it-works&#34;&gt;How It Works&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraIns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Max number of extra chars allowed&lt;br&gt;between each char within a term&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;cat&#34;...&lt;br&gt; &lt;code&gt;0&lt;/code&gt; can match: &lt;b&gt;cat&lt;/b&gt;, s&lt;b&gt;cat&lt;/b&gt;, &lt;b&gt;cat&lt;/b&gt;ch, va&lt;b&gt;cat&lt;/b&gt;e&lt;br&gt; &lt;code&gt;1&lt;/code&gt; also matches: &lt;b&gt;ca&lt;/b&gt;r&lt;b&gt;t&lt;/b&gt;, &lt;b&gt;c&lt;/b&gt;h&lt;b&gt;a&lt;/b&gt;p&lt;b&gt;t&lt;/b&gt;er, out&lt;b&gt;ca&lt;/b&gt;s&lt;b&gt;t&lt;/b&gt;&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interIns&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Max number of extra chars allowed between terms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;Infinity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;where is&#34;...&lt;br&gt; &lt;code&gt;Infinity&lt;/code&gt; can match: &lt;b&gt;where is&lt;/b&gt;, &lt;b&gt;where&lt;/b&gt; have blah w&lt;b&gt;is&lt;/b&gt;dom&lt;br&gt; &lt;code&gt;5&lt;/code&gt; cannot match: where have blah wisdom&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;code&gt;intraSub&lt;/code&gt;&lt;br&gt; &lt;code&gt;intraTrn&lt;/code&gt;&lt;br&gt; &lt;code&gt;intraDel&lt;/code&gt;&lt;br&gt; &lt;/td&gt; &#xA;   &lt;td&gt; For &lt;code&gt;intraMode: 1&lt;/code&gt; only,&lt;br&gt; Error types to tolerate within terms &lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;0&lt;/code&gt; No&lt;br&gt; &lt;code&gt;1&lt;/code&gt; Yes&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraChars&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Partial regexp for allowed insert&lt;br&gt;chars between each char within a term&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;[a-z\d]&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;[a-z\d]&lt;/code&gt; matches only alpha-numeric (case-insensitive)&lt;br&gt; &lt;code&gt;[\w-]&lt;/code&gt; would match alpha-numeric, undercore, and hyphen&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;intraFilt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Callback for excluding results based on term &amp;amp; match&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(term, match, index) =&amp;gt; true&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Do your own thing, maybe... - Length diff threshold&lt;br&gt; - Levenshtein distance&lt;br&gt; - Term offset or content&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interChars&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Partial regexp for allowed chars between terms&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; &lt;code&gt;.&lt;/code&gt; matches all chars&lt;br&gt; &lt;code&gt;[^a-z\d]&lt;/code&gt; would only match whitespace and punctuation&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interLft&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines allowable term left boundary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;mania&#34;...&lt;br&gt; &lt;code&gt;0&lt;/code&gt; any - anywhere: ro&lt;b&gt;mania&lt;/b&gt;n&lt;br&gt; &lt;code&gt;1&lt;/code&gt; loose - whitespace, punctuation, alpha-num, case-change transitions: Track&lt;b&gt;Mania&lt;/b&gt;, &lt;b&gt;mania&lt;/b&gt;c&lt;br&gt; &lt;code&gt;2&lt;/code&gt; strict - whitespace, punctuation: &lt;b&gt;mania&lt;/b&gt;cally&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;interRgt&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Determines allowable term right boundary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;0&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Searching &#34;mania&#34;...&lt;br&gt; &lt;code&gt;0&lt;/code&gt; any - anywhere: ro&lt;b&gt;mania&lt;/b&gt;n&lt;br&gt; &lt;code&gt;1&lt;/code&gt; loose - whitespace, punctuation, alpha-num, case-change transitions: &lt;b&gt;Mania&lt;/b&gt;Star&lt;br&gt; &lt;code&gt;2&lt;/code&gt; strict - whitespace, punctuation: &lt;b&gt;mania&lt;/b&gt;_foo&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Custom result sorting function&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;(info, haystack, needle) =&amp;gt; idxsOrder&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt; Default: &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/bba02537334ae9d02440b86262fbfa40d86daa54/src/uFuzzy.js#L32-L52&#34;&gt;Search sort&lt;/a&gt;, prioritizes full term matches and char density&lt;br&gt; Demo: &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/bba02537334ae9d02440b86262fbfa40d86daa54/demos/compare.html#L264-L288&#34;&gt;Typeahead sort&lt;/a&gt;, prioritizes start offset and match length&lt;br&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;h3&gt;A biased appraisal of similar work&lt;/h3&gt; &#xA;&lt;p&gt;This assessment is extremely narrow and, of course, biased towards my use cases, text corpus, and my complete expertise in operating my own library. It is highly probable that I&#39;m not taking full advantage of some feature in other libraries that may significantly improve outcomes along some axis; I welcome improvement PRs from anyone with deeper library knowledge than afforded by my hasty 10min skim over any &#34;Basic usage&#34; example and README doc.&lt;/p&gt; &#xA;&lt;h4&gt;Search quality&lt;/h4&gt; &#xA;&lt;p&gt;Can-of-worms #1.&lt;/p&gt; &#xA;&lt;p&gt;Before we discuss &lt;a href=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/#performance&#34;&gt;performance&lt;/a&gt; let&#39;s talk about search quality, because speed is irrelevant when your results are a strange medly of &#34;Oh yeah!&#34; and &#34;WTF?&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Search quality is very subjective. What constitutes a good top match in a &#34;typeahead / auto-suggest&#34; case can be a poor match in a &#34;search / find-all&#34; scenario. Some solutions optimize for the latter, some for the former. It&#39;s common to find knobs that skew the results in either direction, but these are often by-feel and imperfect, being little more than a proxy to producing a single, composite match &#34;score&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s take a look at some matches produced by the most popular fuzzy search library, &lt;a href=&#34;https://github.com/krisk/Fuse&#34;&gt;Fuse.js&lt;/a&gt; and some others for which match highlighting is implemented in the demo.&lt;/p&gt; &#xA;&lt;p&gt;Searching for the partial term &lt;strong&gt;&#34;twili&#34;&lt;/strong&gt;, we see these results appearing above numerous obvious &lt;strong&gt;&#34;twilight&#34;&lt;/strong&gt; results:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twili&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twili&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;twi&lt;/strong&gt;r&lt;strong&gt;li&lt;/strong&gt;ng&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;he total number of received alerts that &lt;strong&gt;w&lt;/strong&gt;ere &lt;strong&gt;i&lt;/strong&gt;nva&lt;strong&gt;li&lt;/strong&gt;d.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;om Clancy&#39;s Ghost Recon &lt;strong&gt;Wil&lt;/strong&gt;dlands - AS&lt;strong&gt;I&lt;/strong&gt;A Pre-order Standard Uplay Activation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;t&lt;/strong&gt;heHunter™: Call of the &lt;strong&gt;Wi&lt;/strong&gt;ld - Bearclaw &lt;strong&gt;Li&lt;/strong&gt;te CB-60&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Not only are these poor matches in isolation, but they actually rank higher than literal substrings.&lt;/p&gt; &#xA;&lt;p&gt;Finishing the search term to &lt;strong&gt;&#34;twilight&#34;&lt;/strong&gt;, &lt;em&gt;still&lt;/em&gt; scores bizzare results higher:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twilight&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=twilight&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Magic: &lt;strong&gt;T&lt;/strong&gt;he Gathering - Duels of the Planeswalkers &lt;strong&gt;Wi&lt;/strong&gt;ngs of &lt;strong&gt;Light&lt;/strong&gt; Unlock&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;T&lt;/strong&gt;he &lt;strong&gt;Wil&lt;/strong&gt;d E&lt;strong&gt;ight&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Some engines do better with partial prefix matches, at the expense of higher startup/indexing cost:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=twili&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=twili&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Here, &lt;code&gt;match-sorter&lt;/code&gt; returns 1,384 results, but only the first 40 are relevant. How do we know where the cut-off is?&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=super&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,FlexSearch,match-sorter,MiniSearch&amp;amp;search=super&lt;/a&gt;&lt;/p&gt; &#xA;&lt;!--&#xA;twil  0.1683 ok, 0.25+ bad&#xA;chest 0.1959 ok, 0.2+ bad&#xA;train&#xA;nin tur&#xA;puzz, puzl (MiniSearch, {fuzzy: 0.4}, uFuzzy, intraIns: 1)&#xA;--&gt; &#xA;&lt;h4&gt;Performance&lt;/h4&gt; &#xA;&lt;p&gt;Can-of-worms #2.&lt;/p&gt; &#xA;&lt;p&gt;All benchmarks suck, but this one might suck more than others.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;I&#39;ve tried to follow any &#34;best performance&#34; advice when I could find it in each library&#39;s docs, but it&#39;s a certainty that some stones were left unturned when implementing ~20 different search engines.&lt;/li&gt; &#xA; &lt;li&gt;Despite my best efforts, result quality is still extremely variable between libraries, and even between search terms. In some cases, results are very poor but the library is very fast; in other cases, the results are better, but the library is quite slow. What use is extreme speed when the search quality is sub-par? This is a subjective, nuanced topic that will surely affect how you interpret these numbers. I consider uFuzzy&#39;s search quality second-to-none, so my view of most faster libraries is typically one of quality trade-offs I&#39;m happy not to have made. I encourage you to evaluate the results for all benched search phrases manually to decide this for yourself.&lt;/li&gt; &#xA; &lt;li&gt;Many fulltext &amp;amp; document-search libraries compared here are designed to work best with exact terms rather than partial matches (which this benchmark is skewed towards).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Still, something is better than a hand-wavy YMMV/do-it-yourself dismissal and certainly better than nothing.&lt;/p&gt; &#xA;&lt;h4&gt;Benchmark&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each benchmark can be run by changing the &lt;code&gt;libs&lt;/code&gt; parameter to the desired library name: &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?bench&amp;amp;libs=uFuzzy&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?bench&amp;amp;libs=uFuzzy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Results output is suppressed in &lt;code&gt;bench&lt;/code&gt; mode to avoid benchmarking the DOM.&lt;/li&gt; &#xA; &lt;li&gt;Measurements are taken in the Performance secrion of Chrome&#39;s DevTools by recording several reloads of the bench page, with forced garbage collection in between. The middle/typical run is used to collect numbers.&lt;/li&gt; &#xA; &lt;li&gt;The search corpus is 162,000 words and phrases, loaded from a 4MB &lt;a href=&#34;https://github.com/leeoniya/uFuzzy/raw/main/demos/testdata.json&#34;&gt;testdata.json&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The benchmark types and then deletes, character-by-character (every 100ms) the following search terms, triggering a search for each keypress: &lt;code&gt;test&lt;/code&gt;, &lt;code&gt;chest&lt;/code&gt;, &lt;code&gt;super ma&lt;/code&gt;, &lt;code&gt;mania&lt;/code&gt;, &lt;code&gt;puzz&lt;/code&gt;, &lt;code&gt;prom rem stor&lt;/code&gt;, &lt;code&gt;twil&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To evaluate the results for each library, or to compare several, simply visit the same page with more &lt;code&gt;libs&lt;/code&gt; and without &lt;code&gt;bench&lt;/code&gt;: &lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&#34;&gt;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy,fuzzysort,QuickScore,Fuse&amp;amp;search=super%20ma&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/leeoniya/uFuzzy/main/bench.png&#34; alt=&#34;profile example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;There are several metrics evaluated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Init time - how long it takes to load the library and build any required index to perform searching.&lt;/li&gt; &#xA; &lt;li&gt;Bench runtime - how long it takes to execute all searches.&lt;/li&gt; &#xA; &lt;li&gt;Memory required - peak JS heap size used during the bench as well as how much is still retained after a forced garbage collection at the end.&lt;/li&gt; &#xA; &lt;li&gt;GC cost - how much time is needed to collect garbage at the end (main thread jank)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;https://bestofjs.org/projects?tags=search&#xA;--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Lib&lt;/th&gt; &#xA;   &lt;th&gt;Stars&lt;/th&gt; &#xA;   &lt;th&gt;Size (min)&lt;/th&gt; &#xA;   &lt;th&gt;Init&lt;/th&gt; &#xA;   &lt;th&gt;Search&lt;/th&gt; &#xA;   &lt;th&gt;Heap (peak)&lt;/th&gt; &#xA;   &lt;th&gt;Retained&lt;/th&gt; &#xA;   &lt;th&gt;GC&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/leeoniya/uFuzzy&#34;&gt;uFuzzy&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=uFuzzy&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 0&lt;/td&gt; &#xA;   &lt;td&gt;4KB&lt;/td&gt; &#xA;   &lt;td&gt;0.3ms&lt;/td&gt; &#xA;   &lt;td&gt;630ms&lt;/td&gt; &#xA;   &lt;td&gt;25.5MB&lt;/td&gt; &#xA;   &lt;td&gt;7.5MB&lt;/td&gt; &#xA;   &lt;td&gt;20ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/krisk/Fuse&#34;&gt;Fuse.js&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Fuse&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 14.8k&lt;/td&gt; &#xA;   &lt;td&gt;23.5KB&lt;/td&gt; &#xA;   &lt;td&gt;40ms&lt;/td&gt; &#xA;   &lt;td&gt;35600ms&lt;/td&gt; &#xA;   &lt;td&gt;323MB&lt;/td&gt; &#xA;   &lt;td&gt;14.5MB&lt;/td&gt; &#xA;   &lt;td&gt;30ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/nextapps-de/flexsearch&#34;&gt;FlexSearch (Light)&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=FlexSearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 8.9k&lt;/td&gt; &#xA;   &lt;td&gt;5.9KB&lt;/td&gt; &#xA;   &lt;td&gt;3600ms&lt;/td&gt; &#xA;   &lt;td&gt;130ms&lt;/td&gt; &#xA;   &lt;td&gt;673MB&lt;/td&gt; &#xA;   &lt;td&gt;316MB&lt;/td&gt; &#xA;   &lt;td&gt;320ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/olivernn/lunr.js&#34;&gt;Lunr.js&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Lunr&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 8.2k&lt;/td&gt; &#xA;   &lt;td&gt;29.4KB&lt;/td&gt; &#xA;   &lt;td&gt;2000ms&lt;/td&gt; &#xA;   &lt;td&gt;800ms&lt;/td&gt; &#xA;   &lt;td&gt;355MB&lt;/td&gt; &#xA;   &lt;td&gt;121MB&lt;/td&gt; &#xA;   &lt;td&gt;130ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/LyraSearch/lyra&#34;&gt;LyraSearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=LyraSearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3.3k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/kentcdodds/match-sorter&#34;&gt;match-sorter&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=match-sorter&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3.1k&lt;/td&gt; &#xA;   &lt;td&gt;7.3KB&lt;/td&gt; &#xA;   &lt;td&gt;0.03ms&lt;/td&gt; &#xA;   &lt;td&gt;10000ms&lt;/td&gt; &#xA;   &lt;td&gt;79MB&lt;/td&gt; &#xA;   &lt;td&gt;8MB&lt;/td&gt; &#xA;   &lt;td&gt;30ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/farzher/fuzzysort&#34;&gt;fuzzysort&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzysort&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3k&lt;/td&gt; &#xA;   &lt;td&gt;5.5KB&lt;/td&gt; &#xA;   &lt;td&gt;60ms&lt;/td&gt; &#xA;   &lt;td&gt;1500ms&lt;/td&gt; &#xA;   &lt;td&gt;176MB&lt;/td&gt; &#xA;   &lt;td&gt;84MB&lt;/td&gt; &#xA;   &lt;td&gt;70ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/kbrsh/wade&#34;&gt;Wade&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Wade&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 3k&lt;/td&gt; &#xA;   &lt;td&gt;4KB&lt;/td&gt; &#xA;   &lt;td&gt;840ms&lt;/td&gt; &#xA;   &lt;td&gt;370ms&lt;/td&gt; &#xA;   &lt;td&gt;436MB&lt;/td&gt; &#xA;   &lt;td&gt;42MB&lt;/td&gt; &#xA;   &lt;td&gt;100ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/bevacqua/fuzzysearch&#34;&gt;fuzzysearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzysearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 2.6k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/bvaughn/js-search&#34;&gt;js-search&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=js-search&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 2k&lt;/td&gt; &#xA;   &lt;td&gt;17.1KB&lt;/td&gt; &#xA;   &lt;td&gt;6500ms&lt;/td&gt; &#xA;   &lt;td&gt;1350ms&lt;/td&gt; &#xA;   &lt;td&gt;1937MB&lt;/td&gt; &#xA;   &lt;td&gt;734MB&lt;/td&gt; &#xA;   &lt;td&gt;1400ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/weixsong/elasticlunr.js&#34;&gt;Elasticlunr.js&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Elasticlunr&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.9k&lt;/td&gt; &#xA;   &lt;td&gt;18.1KB&lt;/td&gt; &#xA;   &lt;td&gt;1220ms&lt;/td&gt; &#xA;   &lt;td&gt;1770ms&lt;/td&gt; &#xA;   &lt;td&gt;238MB&lt;/td&gt; &#xA;   &lt;td&gt;70MB&lt;/td&gt; &#xA;   &lt;td&gt;100ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/lucaong/minisearch&#34;&gt;MiniSearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=MiniSearch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.5k&lt;/td&gt; &#xA;   &lt;td&gt;22.4KB&lt;/td&gt; &#xA;   &lt;td&gt;525ms&lt;/td&gt; &#xA;   &lt;td&gt;1800ms&lt;/td&gt; &#xA;   &lt;td&gt;422MB&lt;/td&gt; &#xA;   &lt;td&gt;64MB&lt;/td&gt; &#xA;   &lt;td&gt;90ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/Glench/fuzzyset.js&#34;&gt;Fuzzyset&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=Fuzzyset&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.3k&lt;/td&gt; &#xA;   &lt;td&gt;2.8KB&lt;/td&gt; &#xA;   &lt;td&gt;3500ms&lt;/td&gt; &#xA;   &lt;td&gt;1000ms&lt;/td&gt; &#xA;   &lt;td&gt;660MB&lt;/td&gt; &#xA;   &lt;td&gt;238MB&lt;/td&gt; &#xA;   &lt;td&gt;430ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/fergiemcdowall/search-index&#34;&gt;search-index&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=search-index&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 1.3k&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/rmm5t/liquidmetal&#34;&gt;LiquidMetal&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=LiquidMetal&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 285&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/itemsapi/itemsjs&#34;&gt;ItemJS&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=ItemJS&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 260&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/wouter2203/fuzzy-search&#34;&gt;FuzzySearch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzy-search&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 184&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jeancroy/FuzzySearch&#34;&gt;FuzzySearch2&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=FuzzySearch2&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 173&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/fwextensions/quick-score&#34;&gt;QuickScore&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=QuickScore&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 131&lt;/td&gt; &#xA;   &lt;td&gt;9.1KB&lt;/td&gt; &#xA;   &lt;td&gt;40ms&lt;/td&gt; &#xA;   &lt;td&gt;7500ms&lt;/td&gt; &#xA;   &lt;td&gt;176MB&lt;/td&gt; &#xA;   &lt;td&gt;12.8MB&lt;/td&gt; &#xA;   &lt;td&gt;30ms&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/jhawthorn/fzy.js/&#34;&gt;fzy&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fzy&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 115&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/grafana/grafana/raw/main/packages/grafana-ui/src/utils/fuzzy.ts&#34;&gt;fuzzyMatch&lt;/a&gt; (&lt;a href=&#34;https://leeoniya.github.io/uFuzzy/demos/compare.html?libs=fuzzyMatch&amp;amp;search=super%20ma&#34;&gt;try&lt;/a&gt;) &lt;/td&gt; &#xA;   &lt;td&gt;★ 0&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>