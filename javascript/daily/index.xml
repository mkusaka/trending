<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-10-20T01:35:43Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>mkkellogg/GaussianSplats3D</title>
    <updated>2023-10-20T01:35:43Z</updated>
    <id>tag:github.com,2023-10-20:/mkkellogg/GaussianSplats3D</id>
    <link href="https://github.com/mkkellogg/GaussianSplats3D" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Three.js-based implementation of the 3D Gaussian splat viewer&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;3D Gaussian splatting for Three.js&lt;/h1&gt; &#xA;&lt;p&gt;This repository contains a Three.js-based implementation of &lt;a href=&#34;https://repo-sam.inria.fr/fungraph/3d-gaussian-splatting/&#34;&gt;3D Gaussian Splatting for Real-Time Radiance Field Rendering&lt;/a&gt;, a technique for the real-time visualization of real-world 3D scenes. Their project was CUDA-based and I wanted to build a viewer that was accessible via the web.&lt;/p&gt; &#xA;&lt;p&gt;When I started, web-based viewers were already available -- A WebGL-based viewer from &lt;a href=&#34;https://github.com/antimatter15/splat&#34;&gt;antimatter15&lt;/a&gt; and a WebGPU viewer from &lt;a href=&#34;https://github.com/cvlab-epfl/gaussian-splatting-web&#34;&gt;cvlab-epfl&lt;/a&gt; -- However no Three.js version existed. I used those versions as a starting point for my initial implementation, but as of now this project contains all my own code.&lt;/p&gt; &#xA;&lt;p&gt;Highlights:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Organized into ES modules&lt;/li&gt; &#xA; &lt;li&gt;Rendering is done entirely through Three.js&lt;/li&gt; &#xA; &lt;li&gt;The sorting algorithm is a C++ counting sort contained in a WASM module.&lt;/li&gt; &#xA; &lt;li&gt;Rasterization code is documented to describe 2D covariance computations as well as computations of corresponding eigen-values and eigen-vectors&lt;/li&gt; &#xA; &lt;li&gt;Scene is partitioned via octree that is used to cull non-visible splats prior to sorting&lt;/li&gt; &#xA; &lt;li&gt;Splat data (position, covariance, color) is stored via textures so that only splat indexes are transferred between host and GPU&lt;/li&gt; &#xA; &lt;li&gt;Allows a Three.js scene or object group to be rendered along with the splats&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Online demo: &lt;a href=&#34;https://projects.markkellogg.org/threejs/demo_gaussian_splats_3d.php&#34;&gt;https://projects.markkellogg.org/threejs/demo_gaussian_splats_3d.php&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is still very much a work in progress! There are several things that still need to be done:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Improve the method by which splat data is stored in textures (currently much texture space is wasted or packed inefficiently)&lt;/li&gt; &#xA; &lt;li&gt;Properly incorporate spherical harmonics data to achieve view dependent lighting effects&lt;/li&gt; &#xA; &lt;li&gt;Improve the layout of the SplatBuffer object for better efficiency and reduced file size&lt;/li&gt; &#xA; &lt;li&gt;Improve splat sorting -- maybe an incremental sort of some kind?&lt;/li&gt; &#xA; &lt;li&gt;Implement double buffering so that the next splat index array in the main thread can be filled while the current one is sorted in the worker thread&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Navigate to the code directory and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Followed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view the demo scenes locally run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;npm run demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The demo will be accessible locally at &lt;a href=&#34;http://127.0.0.1:8080/index.html&#34;&gt;http://127.0.0.1:8080/index.html&lt;/a&gt;. You will need to download the data for the demo scenes and extract them into&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;code directory&amp;gt;/build/demo/assets/data&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The demo scene data is available here: &lt;a href=&#34;https://projects.markkellogg.org/downloads/gaussian_splat_data.zip&#34;&gt;https://projects.markkellogg.org/downloads/gaussian_splat_data.zip&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;To run the built-in viewer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const viewer = new GaussianSplat3D.Viewer({&#xA;  &#39;cameraUp&#39;: [0, -1, -0.6],&#xA;  &#39;initialCameraPosition&#39;: [-1, -4, 6],&#xA;  &#39;initialCameraLookAt&#39;: [0, 4, -0]&#xA;});&#xA;viewer.init();&#xA;viewer.loadFile(&#39;&amp;lt;path to .ply or .splat file&amp;gt;&#39;)&#xA;.then(() =&amp;gt; {&#xA;    viewer.start();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;loadFile()&lt;/code&gt; method will accept the original &lt;code&gt;.ply&lt;/code&gt; files as well as my custom &lt;code&gt;.splat&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;To convert a &lt;code&gt;.ply&lt;/code&gt; file into the stripped-down &lt;code&gt;.splat&lt;/code&gt; format (currently only compatible with this viewer):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const plyLoader = new GaussianSplat3D.PlyLoader();&#xA;plyLoader.loadFromFile(&#39;&amp;lt;path to .ply file&amp;gt;&#39;)&#xA;.then((splatBuffer) =&amp;gt; {&#xA;    new GaussianSplat3D.SplatLoader(splatBuffer).saveToFile(&#39;converted_file.splat&#39;);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This code will prompt your browser to automatically start downloading the converted &lt;code&gt;.splat&lt;/code&gt; file.&lt;/p&gt; &#xA;&lt;p&gt;It is now possible to integrate your own Three.js scene into the viewer (still somewhat experimental). The &lt;code&gt;Viewer&lt;/code&gt; class now accepts a &lt;code&gt;scene&lt;/code&gt; parameter by which you can pass in any &#39;normal&#39; Three.js objects you want to be rendered along with the splats. Rendering the splats correctly with external objects requires a special sequence of steps so the viewer needs to be aware of them:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const scene = new THREE.Scene();&#xA;&#xA;const boxColor = 0xBBBBBB;&#xA;const boxGeometry = new THREE.BoxGeometry(2, 2, 2);&#xA;const boxMesh = new THREE.Mesh(boxGeometry, new THREE.MeshBasicMaterial({&#39;color&#39;: boxColor}));&#xA;scene.add(boxMesh);&#xA;boxMesh.position.set(3, 2, 2);&#xA;&#xA;const viewer = new GaussianSplat3D.Viewer({&#xA;  &#39;scene&#39;: scene,&#xA;  &#39;cameraUp&#39;: [0, -1, -0.6],&#xA;  &#39;initialCameraPosition&#39;: [-1, -4, 6],&#xA;  &#39;initialCameraLookAt&#39;: [0, 4, -0]&#xA;});&#xA;viewer.init();&#xA;viewer.loadFile(&#39;&amp;lt;path to .ply or .splat file&amp;gt;&#39;)&#xA;.then(() =&amp;gt; {&#xA;    viewer.start();&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The viewer allows for various levels of customization via constructor parameters. You can control when its &lt;code&gt;update()&lt;/code&gt; and &lt;code&gt;render()&lt;/code&gt; methods are called by passing &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;selfDrivenMode&lt;/code&gt; parameter and then calling those methods whenever/wherever you decide is appropriate. You can tell the viewer to not use its built-in camera controls by passing &lt;code&gt;false&lt;/code&gt; for the &lt;code&gt;useBuiltInControls&lt;/code&gt; parameter. You can also use your own Three.js renderer and camera by passing those values to the viewer&#39;s constructor. The sample below shows all of these options:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;const renderWidth = 800;&#xA;const renderHeight = 600;&#xA;&#xA;const rootElement = document.createElement(&#39;div&#39;);&#xA;rootElement.style.width = renderWidth + &#39;px&#39;;&#xA;rootElement.style.height = renderHeight + &#39;px&#39;;&#xA;document.body.appendChild(rootElement);&#xA;&#xA;const renderer = new THREE.WebGLRenderer({&#xA;    antialias: false&#xA;});&#xA;renderer.setSize(renderWidth, renderHeight);&#xA;rootElement.appendChild(renderer.domElement);&#xA;&#xA;const camera = new THREE.PerspectiveCamera(65, renderWidth / renderHeight, 0.1, 500);&#xA;camera.position.copy(new THREE.Vector3().fromArray([-1, -4, 6]));&#xA;camera.lookAt(new THREE.Vector3().fromArray([0, 4, -0]));&#xA;camera.up = new THREE.Vector3().fromArray([0, -1, -0.6]).normalize();&#xA;&#xA;const viewer = new GaussianSplat3D.Viewer({&#xA;    &#39;selfDrivenMode&#39;: false,&#xA;    &#39;renderer&#39;: renderer,&#xA;    &#39;camera&#39;: camera,&#xA;    &#39;useBuiltInControls&#39;: false&#xA;});&#xA;viewer.init();&#xA;viewer.loadFile(&#39;&amp;lt;path to .ply or .splat file&amp;gt;&#39;)&#xA;.then(() =&amp;gt; {&#xA;    requestAnimationFrame(update);&#xA;});&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Since &lt;code&gt;selfDrivenMode&lt;/code&gt; is false, it is up to the developer to call the &lt;code&gt;update()&lt;/code&gt; and &lt;code&gt;render()&lt;/code&gt; methods on the &lt;code&gt;Viewer&lt;/code&gt; class:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;function update() {&#xA;    requestAnimationFrame(update);&#xA;    viewer.update();&#xA;    viewer.render();&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Controls&lt;/h2&gt; &#xA;&lt;p&gt;Mouse&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Left click and drag to orbit around the focal point&lt;/li&gt; &#xA; &lt;li&gt;Right click and drag to pan the camera and focal point&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Keyboard&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;C&lt;/code&gt; Toggles the mesh cursor, which shows where a ray projected from the mouse cursor intersects the splat mesh&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;I&lt;/code&gt; Toggles an info panel that displays the mesh cursor position, current FPS, and current window size&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>lohls/Api-Correios</title>
    <updated>2023-10-20T01:35:43Z</updated>
    <id>tag:github.com,2023-10-20:/lohls/Api-Correios</id>
    <link href="https://github.com/lohls/Api-Correios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Api-Correios&lt;/h1&gt; &#xA;&lt;h2&gt;Funções Usuarios&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Buscar Usuarios&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Buscar somente um Usuario&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Cadastrar Usuario&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Atualiza os dados de um Usuario&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Método HTTP&lt;/th&gt; &#xA;   &lt;th&gt;Endpoint&lt;/th&gt; &#xA;   &lt;th&gt;Descrição&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/users&lt;/td&gt; &#xA;   &lt;td&gt;Retorna todos os usuarios cadastrados&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/users/:id&lt;/td&gt; &#xA;   &lt;td&gt;Retorna o usuario junto com todas suas encomendas relacionadas pelo ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POST&lt;/td&gt; &#xA;   &lt;td&gt;/users&lt;/td&gt; &#xA;   &lt;td&gt;Cadastra um novo usuario&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUT&lt;/td&gt; &#xA;   &lt;td&gt;/users/:id&lt;/td&gt; &#xA;   &lt;td&gt;Atualiza as informações de um usuario existente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DELETE&lt;/td&gt; &#xA;   &lt;td&gt;/user/:id&lt;/td&gt; &#xA;   &lt;td&gt;Exclui um usuario existente pelo ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Funções Encomendas&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Buscar encomendas&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Buscar somente uma encomenda&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Cadastrar encomenda&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Atualiza os dados de uma encomenda&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Método HTTP&lt;/th&gt; &#xA;   &lt;th&gt;Endpoint&lt;/th&gt; &#xA;   &lt;th&gt;Descrição&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/orders&lt;/td&gt; &#xA;   &lt;td&gt;Retorna todos as encomendas cadastradas&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;GET&lt;/td&gt; &#xA;   &lt;td&gt;/orders/:id&lt;/td&gt; &#xA;   &lt;td&gt;Retorna uma encomenda específica pelo ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POST&lt;/td&gt; &#xA;   &lt;td&gt;/orders&lt;/td&gt; &#xA;   &lt;td&gt;Cadastra uma nova encomenda&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PUT&lt;/td&gt; &#xA;   &lt;td&gt;/orders/:id&lt;/td&gt; &#xA;   &lt;td&gt;Atualiza as informações de uma encomenda existente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;DELETE&lt;/td&gt; &#xA;   &lt;td&gt;/orders/:id&lt;/td&gt; &#xA;   &lt;td&gt;Exclui uma encomenda existente pelo ID&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;&lt;/h1&gt; &#xA;&lt;h2&gt;Funções Correios Brasil&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Consultar CEP&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Calcular Preço/Prazo de uma encomenda&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;p&gt;Consultar uma encomenda pelo seu Código de Rastreio e criar uma encomenda nova para o Usuario&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Método HTTP&lt;/th&gt; &#xA;   &lt;th&gt;Endpoint&lt;/th&gt; &#xA;   &lt;th&gt;Descrição&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POST&lt;/td&gt; &#xA;   &lt;td&gt;/consultacep&lt;/td&gt; &#xA;   &lt;td&gt;Retorna o cep passado pelo req.body&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POST&lt;/td&gt; &#xA;   &lt;td&gt;/calcprecoprazo&lt;/td&gt; &#xA;   &lt;td&gt;Retorna todos os valores/dados do calculo do preço de uma encomenda&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;POST&lt;/td&gt; &#xA;   &lt;td&gt;/rastrearencomenda&lt;/td&gt; &#xA;   &lt;td&gt;Rastreia e cadastra uma nova encomenda passada pelo req.body&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Algumas funcionalidades:&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Autenticação JWT (Json Web Token)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Realização de cadastro de encomendas apartir do rastreio&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Verificações de erros&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>sinonjs/sinon</title>
    <updated>2023-10-20T01:35:43Z</updated>
    <id>tag:github.com,2023-10-20:/sinonjs/sinon</id>
    <link href="https://github.com/sinonjs/sinon" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Test spies, stubs and mocks for JavaScript.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;a href=&#34;https://sinonjs.org&#34; title=&#34;Sinon.JS&#34;&gt; &lt;img alt=&#34;Sinon.JS&#34; src=&#34;https://sinonjs.org/assets/images/logo.png&#34;&gt; &lt;/a&gt; &lt;br&gt; Sinon.JS &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; Standalone and test framework agnostic JavaScript test spies, stubs and mocks (pronounced &#34;sigh-non&#34;, named after &lt;a href=&#34;https://en.wikipedia.org/wiki/Sinon&#34;&gt;Sinon, the warrior&lt;/a&gt;). &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://www.npmjs.com/package/sinon&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/sinon.svg?style=flat&#34; alt=&#34;npm version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://saucelabs.com/u/sinonjs&#34;&gt;&lt;img src=&#34;https://saucelabs.com/buildstatus/sinonjs&#34; alt=&#34;Sauce Test Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://codecov.io/gh/sinonjs/sinon&#34;&gt;&lt;img src=&#34;https://codecov.io/gh/sinonjs/sinon/branch/master/graph/badge.svg?sanitize=true&#34; alt=&#34;Codecov status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sinonjs/sinon/main/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/backers/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sinonjs/sinon/main/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsors/badge.svg?sanitize=true&#34; alt=&#34;OpenCollective&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/sinon&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/sinon.svg?sanitize=true&#34; alt=&#34;npm downloads per month&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://cdnjs.com/libraries/sinon.js&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://img.shields.io/cdnjs/v/sinon.js.svg?sanitize=true&#34; alt=&#34;CDNJS version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/sinonjs/sinon/main/CODE_OF_CONDUCT.md&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Contributor%20Covenant-v2.0%20adopted-ff69b4.svg?sanitize=true&#34; alt=&#34;Contributor Covenant&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;!-- Shows an outdated badge. Will not be fixed until https://github.com/sinonjs/fake-timers/pull/395 ships.&#xA;&lt;p align=center&gt;&#xA;&lt;a href=&#34;https://app.saucelabs.com/u/sinonjs&#34;&gt;&#xA;  &lt;img src=&#34;https://app.saucelabs.com/browser-matrix/sinonjs.svg&#34; alt=&#34;Sauce Test Status&#34;/&gt;&#xA;&lt;/a&gt;&#xA;&lt;/p&gt;&#xA;--&gt; &#xA;&lt;h2&gt;Compatibility&lt;/h2&gt; &#xA;&lt;p&gt;For details on compatibility and browser support, please see &lt;a href=&#34;https://raw.githubusercontent.com/sinonjs/sinon/main/COMPATIBILITY.md&#34;&gt;&lt;code&gt;COMPATIBILITY.md&lt;/code&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;via &lt;a href=&#34;https://github.com/npm/npm&#34;&gt;npm&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ npm install sinon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via sinon&#39;s browser builds available for download on the &lt;a href=&#34;https://sinonjs.org/releases/&#34;&gt;homepage&lt;/a&gt;. There are also &lt;a href=&#34;https://sinonjs.org/releases#npm-cdns&#34;&gt;npm based CDNs&lt;/a&gt; one can use.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://sinonjs.org/&#34;&gt;sinon project homepage&lt;/a&gt; for documentation on usage.&lt;/p&gt; &#xA;&lt;p&gt;If you have questions that are not covered by the documentation, you can &lt;a href=&#34;https://stackoverflow.com/questions/tagged/sinon&#34;&gt;check out the &lt;code&gt;sinon&lt;/code&gt; tag on Stack Overflow&lt;/a&gt; or drop by &lt;a href=&#34;irc://irc.freenode.net:6667/sinon.js&#34;&gt;#sinon.js on irc.freenode.net:6667&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also search through the &lt;a href=&#34;http://groups.google.com/group/sinonjs&#34;&gt;Sinon.JS mailing list archives&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No global pollution&lt;/li&gt; &#xA; &lt;li&gt;Easy to use&lt;/li&gt; &#xA; &lt;li&gt;Require minimal “integration”&lt;/li&gt; &#xA; &lt;li&gt;Easy to embed seamlessly with any testing framework&lt;/li&gt; &#xA; &lt;li&gt;Easily fake any interface&lt;/li&gt; &#xA; &lt;li&gt;Ship with ready-to-use fakes for XMLHttpRequest, timers and more&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contribute?&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/sinonjs/sinon/main/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; for details on how you can contribute to Sinon.JS&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Thank you to all our backers! 🙏 [&lt;a href=&#34;https://opencollective.com/sinon#backer&#34;&gt;Become a backer&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/sinon#backers&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/backers.svg?width=890&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Become a sponsor and get your logo on our README on GitHub with a link to your site. [&lt;a href=&#34;https://opencollective.com/sinon#sponsor&#34;&gt;Become a sponsor&lt;/a&gt;]&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/sinon/sponsor/0/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/0/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/1/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/1/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/2/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/2/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/3/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/3/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/4/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/4/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/5/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/5/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/6/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/6/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/7/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/7/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/8/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/8/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/9/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/9/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/sinon/sponsor/10/website&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://opencollective.com/sinon/sponsor/10/avatar.svg?sanitize=true&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;Sinon.js was released under &lt;a href=&#34;https://raw.githubusercontent.com/sinonjs/sinon/main/LICENSE&#34;&gt;BSD-3&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>