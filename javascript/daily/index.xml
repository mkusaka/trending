<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub JavaScript Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-07T01:31:59Z</updated>
  <subtitle>Daily Trending of JavaScript in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>GovindCodes/ValentineWish</title>
    <updated>2024-02-07T01:31:59Z</updated>
    <id>tag:github.com,2024-02-07:/GovindCodes/ValentineWish</id>
    <link href="https://github.com/GovindCodes/ValentineWish" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wish Valentine&#39;s Day to Your loved ones like a Nerd.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Valentine&#39;s Wish &lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/GovindCodes&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/author-GovindCodes-green&#34; alt=&#34;Author&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://govindcodes.github.io/ValentineWish/&#34;&gt;See it Live&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;h2&gt;Make your own version &lt;span&gt;ðŸ’»&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;ðŸ“·&lt;/span&gt;&lt;span&gt;ðŸ“·&lt;/span&gt;&lt;span&gt;ðŸ“·&lt;/span&gt;&lt;span&gt;ðŸ“·&lt;/span&gt;&lt;span&gt;ðŸ“·&lt;/span&gt;&lt;span&gt;ðŸ“·&lt;/span&gt;&lt;span&gt;ðŸ“·&lt;/span&gt; &lt;em&gt;Start with Smile&lt;/em&gt;&lt;span&gt;ðŸ˜„&lt;/span&gt;&lt;span&gt;ðŸ˜„&lt;/span&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fork the repository&lt;/li&gt; &#xA; &lt;li&gt;Open &lt;code&gt;customize.json&lt;/code&gt; and replace name/wish-message/image with your own&lt;/li&gt; &#xA; &lt;li&gt;Turn on GitHub pages for the repository (Settings &amp;gt; GitHub Pages)&lt;/li&gt; &#xA; &lt;li&gt;Send the URL that you get at the above step to your friend&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you have any idea to make it more interesting, feel free to send a PR, or create an issue for a feature request.&lt;/p&gt; &#xA;&lt;p&gt;Stay happy and keep the people you care about happy. :)&lt;/p&gt; &#xA;&lt;h4&gt;OwnerShip&lt;/h4&gt; &#xA;&lt;p&gt;The animations used in the Repository is created by Afiur Rahman Fahim(faahim).&lt;span&gt;ðŸ˜„&lt;/span&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>gulpjs/gulp</title>
    <updated>2024-02-07T01:31:59Z</updated>
    <id>tag:github.com,2024-02-07:/gulpjs/gulp</id>
    <link href="https://github.com/gulpjs/gulp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A toolkit to automate &amp; enhance your workflow&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://gulpjs.com&#34;&gt; &lt;img height=&#34;257&#34; width=&#34;114&#34; src=&#34;https://raw.githubusercontent.com/gulpjs/artwork/master/gulp-2x.png&#34;&gt; &lt;/a&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt;The streaming build system&lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/gulp&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/v/gulp.svg?sanitize=true&#34; alt=&#34;NPM version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.npmjs.com/package/gulp&#34;&gt;&lt;img src=&#34;https://img.shields.io/npm/dm/gulp.svg?sanitize=true&#34; alt=&#34;Downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://dev.azure.com/gulpjs/gulp/_build/latest?definitionId=1&amp;amp;branchName=master&#34;&gt;&lt;img src=&#34;https://dev.azure.com/gulpjs/gulp/_apis/build/status/gulp?branchName=master&#34; alt=&#34;Azure Pipelines Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/gulpjs/gulp&#34;&gt;&lt;img src=&#34;https://img.shields.io/travis/gulpjs/gulp.svg?label=travis-ci&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://ci.appveyor.com/project/gulpjs/gulp&#34;&gt;&lt;img src=&#34;https://img.shields.io/appveyor/ci/gulpjs/gulp.svg?label=appveyor&#34; alt=&#34;AppVeyor Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://coveralls.io/r/gulpjs/gulp&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/gulpjs/gulp/master.svg?sanitize=true&#34; alt=&#34;Coveralls Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gulpjs/gulp/master/#backers&#34;&gt;&lt;img src=&#34;https://opencollective.com/gulpjs/backers/badge.svg?color=blue&#34; alt=&#34;OpenCollective Backers&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://raw.githubusercontent.com/gulpjs/gulp/master/#sponsors&#34;&gt;&lt;img src=&#34;https://opencollective.com/gulpjs/sponsors/badge.svg?color=blue&#34; alt=&#34;OpenCollective Sponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/gulpjs/gulp&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/gulpjs/gulp.svg?sanitize=true&#34; alt=&#34;Gitter chat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What is gulp?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt; - gulp is a toolkit that helps you automate painful or time-consuming tasks in your development workflow.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Platform-agnostic&lt;/strong&gt; - Integrations are built into all major IDEs and people are using gulp with PHP, .NET, Node.js, Java, and other platforms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strong Ecosystem&lt;/strong&gt; - Use npm modules to do anything you want + over 3000 curated plugins for streaming file transformations.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Simple&lt;/strong&gt; - By providing only a minimal API surface, gulp is easy to learn and simple to use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What&#39;s new in 4.0?!&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The task system was rewritten from the ground-up, allowing task composition using &lt;code&gt;series()&lt;/code&gt; and &lt;code&gt;parallel()&lt;/code&gt; methods.&lt;/li&gt; &#xA; &lt;li&gt;The watcher was updated, now using chokidar (no more need for gulp-watch!), with feature parity to our task system.&lt;/li&gt; &#xA; &lt;li&gt;First-class support was added for incremental builds using &lt;code&gt;lastRun()&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;symlink()&lt;/code&gt; method was exposed to create symlinks instead of copying files.&lt;/li&gt; &#xA; &lt;li&gt;Built-in support for sourcemaps was added - the gulp-sourcemaps plugin is no longer necessary!&lt;/li&gt; &#xA; &lt;li&gt;Task registration of exported functions - using node or ES exports - is now recommended.&lt;/li&gt; &#xA; &lt;li&gt;Custom registries were designed, allowing for shared tasks or augmented functionality.&lt;/li&gt; &#xA; &lt;li&gt;Stream implementations were improved, allowing for better conditional and phased builds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;gulp for enterprise&lt;/h2&gt; &#xA;&lt;p&gt;Available as part of the Tidelift Subscription&lt;/p&gt; &#xA;&lt;p&gt;The maintainers of gulp and thousands of other packages are working with Tidelift to deliver commercial support and maintenance for the open source dependencies you use to build your applications. Save time, reduce risk, and improve code health, while paying the maintainers of the exact dependencies you use. &lt;a href=&#34;https://tidelift.com/subscription/pkg/npm-gulp?utm_source=npm-gulp&amp;amp;utm_medium=referral&amp;amp;utm_campaign=enterprise&amp;amp;utm_term=repo&#34;&gt;Learn more.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Follow our &lt;a href=&#34;https://gulpjs.com/docs/en/getting-started/quick-start&#34;&gt;Quick Start guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;Find out about all our work-in-progress and outstanding issues at &lt;a href=&#34;https://github.com/orgs/gulpjs/projects&#34;&gt;https://github.com/orgs/gulpjs/projects&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://gulpjs.com/docs/en/getting-started/quick-start&#34;&gt;Getting Started guide&lt;/a&gt; and &lt;a href=&#34;https://gulpjs.com/docs/en/api/concepts&#34;&gt;API docs&lt;/a&gt; on our website!&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Excuse our dust! All other docs will be behind until we get everything updated. Please open an issue if something isn&#39;t working.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sample &lt;code&gt;gulpfile.js&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;This file will give you a taste of what gulp does.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var gulp = require(&#39;gulp&#39;);&#xA;var less = require(&#39;gulp-less&#39;);&#xA;var babel = require(&#39;gulp-babel&#39;);&#xA;var concat = require(&#39;gulp-concat&#39;);&#xA;var uglify = require(&#39;gulp-uglify&#39;);&#xA;var rename = require(&#39;gulp-rename&#39;);&#xA;var cleanCSS = require(&#39;gulp-clean-css&#39;);&#xA;var del = require(&#39;del&#39;);&#xA;&#xA;var paths = {&#xA;  styles: {&#xA;    src: &#39;src/styles/**/*.less&#39;,&#xA;    dest: &#39;assets/styles/&#39;&#xA;  },&#xA;  scripts: {&#xA;    src: &#39;src/scripts/**/*.js&#39;,&#xA;    dest: &#39;assets/scripts/&#39;&#xA;  }&#xA;};&#xA;&#xA;/* Not all tasks need to use streams, a gulpfile is just another node program&#xA; * and you can use all packages available on npm, but it must return either a&#xA; * Promise, a Stream or take a callback and call it&#xA; */&#xA;function clean() {&#xA;  // You can use multiple globbing patterns as you would with `gulp.src`,&#xA;  // for example if you are using del 2.0 or above, return its promise&#xA;  return del([ &#39;assets&#39; ]);&#xA;}&#xA;&#xA;/*&#xA; * Define our tasks using plain functions&#xA; */&#xA;function styles() {&#xA;  return gulp.src(paths.styles.src)&#xA;    .pipe(less())&#xA;    .pipe(cleanCSS())&#xA;    // pass in options to the stream&#xA;    .pipe(rename({&#xA;      basename: &#39;main&#39;,&#xA;      suffix: &#39;.min&#39;&#xA;    }))&#xA;    .pipe(gulp.dest(paths.styles.dest));&#xA;}&#xA;&#xA;function scripts() {&#xA;  return gulp.src(paths.scripts.src, { sourcemaps: true })&#xA;    .pipe(babel())&#xA;    .pipe(uglify())&#xA;    .pipe(concat(&#39;main.min.js&#39;))&#xA;    .pipe(gulp.dest(paths.scripts.dest));&#xA;}&#xA;&#xA;function watch() {&#xA;  gulp.watch(paths.scripts.src, scripts);&#xA;  gulp.watch(paths.styles.src, styles);&#xA;}&#xA;&#xA;/*&#xA; * Specify if tasks run in series or parallel using `gulp.series` and `gulp.parallel`&#xA; */&#xA;var build = gulp.series(clean, gulp.parallel(styles, scripts));&#xA;&#xA;/*&#xA; * You can use CommonJS `exports` module notation to declare tasks&#xA; */&#xA;exports.clean = clean;&#xA;exports.styles = styles;&#xA;exports.scripts = scripts;&#xA;exports.watch = watch;&#xA;exports.build = build;&#xA;/*&#xA; * Define default task that can be called by just running `gulp` from cli&#xA; */&#xA;exports.default = build;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Use latest JavaScript version in your gulpfile&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Most new versions of node support most features that Babel provides, except the &lt;code&gt;import&lt;/code&gt;/&lt;code&gt;export&lt;/code&gt; syntax. When only that syntax is desired, rename to &lt;code&gt;gulpfile.esm.js&lt;/code&gt;, install the &lt;a href=&#34;https://github.com/standard-things/esm&#34;&gt;esm&lt;/a&gt; module, and skip the Babel portion below.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Node already supports a lot of &lt;strong&gt;ES2015+&lt;/strong&gt; features, but to avoid compatibility problems we suggest to install Babel and rename your &lt;code&gt;gulpfile.js&lt;/code&gt; to &lt;code&gt;gulpfile.babel.js&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;npm install --save-dev @babel/register @babel/core @babel/preset-env&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then create a &lt;strong&gt;.babelrc&lt;/strong&gt; file with the preset configuration.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;{&#xA;  &#34;presets&#34;: [ &#34;@babel/preset-env&#34; ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And here&#39;s the same sample from above written in &lt;strong&gt;ES2015+&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;import gulp from &#39;gulp&#39;;&#xA;import less from &#39;gulp-less&#39;;&#xA;import babel from &#39;gulp-babel&#39;;&#xA;import concat from &#39;gulp-concat&#39;;&#xA;import uglify from &#39;gulp-uglify&#39;;&#xA;import rename from &#39;gulp-rename&#39;;&#xA;import cleanCSS from &#39;gulp-clean-css&#39;;&#xA;import del from &#39;del&#39;;&#xA;&#xA;const paths = {&#xA;  styles: {&#xA;    src: &#39;src/styles/**/*.less&#39;,&#xA;    dest: &#39;assets/styles/&#39;&#xA;  },&#xA;  scripts: {&#xA;    src: &#39;src/scripts/**/*.js&#39;,&#xA;    dest: &#39;assets/scripts/&#39;&#xA;  }&#xA;};&#xA;&#xA;/*&#xA; * For small tasks you can export arrow functions&#xA; */&#xA;export const clean = () =&amp;gt; del([ &#39;assets&#39; ]);&#xA;&#xA;/*&#xA; * You can also declare named functions and export them as tasks&#xA; */&#xA;export function styles() {&#xA;  return gulp.src(paths.styles.src)&#xA;    .pipe(less())&#xA;    .pipe(cleanCSS())&#xA;    // pass in options to the stream&#xA;    .pipe(rename({&#xA;      basename: &#39;main&#39;,&#xA;      suffix: &#39;.min&#39;&#xA;    }))&#xA;    .pipe(gulp.dest(paths.styles.dest));&#xA;}&#xA;&#xA;export function scripts() {&#xA;  return gulp.src(paths.scripts.src, { sourcemaps: true })&#xA;    .pipe(babel())&#xA;    .pipe(uglify())&#xA;    .pipe(concat(&#39;main.min.js&#39;))&#xA;    .pipe(gulp.dest(paths.scripts.dest));&#xA;}&#xA;&#xA; /*&#xA;  * You could even use `export as` to rename exported tasks&#xA;  */&#xA;function watchFiles() {&#xA;  gulp.watch(paths.scripts.src, scripts);&#xA;  gulp.watch(paths.styles.src, styles);&#xA;}&#xA;export { watchFiles as watch };&#xA;&#xA;const build = gulp.series(clean, gulp.parallel(styles, scripts));&#xA;/*&#xA; * Export a default task&#xA; */&#xA;export default build;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Incremental Builds&lt;/h2&gt; &#xA;&lt;p&gt;You can filter out unchanged files between runs of a task using the &lt;code&gt;gulp.src&lt;/code&gt; function&#39;s &lt;code&gt;since&lt;/code&gt; option and &lt;code&gt;gulp.lastRun&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;const paths = {&#xA;  ...&#xA;  images: {&#xA;    src: &#39;src/images/**/*.{jpg,jpeg,png}&#39;,&#xA;    dest: &#39;build/img/&#39;&#xA;  }&#xA;}&#xA;&#xA;function images() {&#xA;  return gulp.src(paths.images.src, {since: gulp.lastRun(images)})&#xA;    .pipe(imagemin())&#xA;    .pipe(gulp.dest(paths.images.dest));&#xA;}&#xA;&#xA;function watch() {&#xA;  gulp.watch(paths.images.src, images);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Task run times are saved in memory and are lost when gulp exits. It will only save time during the &lt;code&gt;watch&lt;/code&gt; task when running the &lt;code&gt;images&lt;/code&gt; task for a second time.&lt;/p&gt; &#xA;&lt;h2&gt;Want to contribute?&lt;/h2&gt; &#xA;&lt;p&gt;Anyone can help make this project better - check out our &lt;a href=&#34;https://raw.githubusercontent.com/gulpjs/gulp/master/CONTRIBUTING.md&#34;&gt;Contributing guide&lt;/a&gt;!&lt;/p&gt; &#xA;&lt;h2&gt;Backers&lt;/h2&gt; &#xA;&lt;p&gt;Support us with a monthly donation and help us continue our activities.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/gulpjs#support&#34;&gt;&lt;img src=&#34;https://opencollective.com/gulpjs/backers.svg?sanitize=true&#34; alt=&#34;Backers&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;p&gt;Become a sponsor to get your logo on our README on Github.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/gulpjs#support&#34;&gt;&lt;img src=&#34;https://opencollective.com/gulpjs/sponsors.svg?sanitize=true&#34; alt=&#34;Sponsors&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>