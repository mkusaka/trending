<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-02-01T01:55:46Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>seanhess/hyperbole</title>
    <updated>2025-02-01T01:55:46Z</updated>
    <id>tag:github.com,2025-02-01:/seanhess/hyperbole</id>
    <link href="https://github.com/seanhess/hyperbole" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell interactive serverside web framework inspired by HTMX, Elm, and Phoenix LiveView&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/seanhess/hyperbole/raw/main/example/static/logo-robot.png&#34; alt=&#34;Hyperbole&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/hyperbole&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/hyperbole.svg?color=success&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Create interactive HTML applications with type-safe serverside Haskell. Inspired by &lt;a href=&#34;https://htmx.org/&#34;&gt;HTMX&lt;/a&gt;, &lt;a href=&#34;https://elm-lang.org/&#34;&gt;Elm&lt;/a&gt;, and &lt;a href=&#34;https://www.phoenixframework.org/&#34;&gt;Phoenix LiveView&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/hyperbole/docs/Web-Hyperbole.html&#34;&gt;Learn more about Hyperbole on Hackage&lt;/a&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE DeriveAnyClass #-}&#xA;{-# LANGUAGE OverloadedStrings #-}&#xA;{-# LANGUAGE TypeFamilies #-}&#xA;module Main where&#xA;&#xA;import Data.Text (Text)&#xA;import Web.Hyperbole&#xA;&#xA;main :: IO ()&#xA;main = do&#xA;  run 3000 $ do&#xA;    liveApp (basicDocument &#34;Example&#34;) (runPage page)&#xA;&#xA;&#xA;page :: (Hyperbole :&amp;gt; es) =&amp;gt; Eff es (Page &#39;[Message])&#xA;page = do&#xA;  pure $ col id $ do&#xA;    hyper Message1 $ messageView &#34;Hello&#34;&#xA;    hyper Message2 $ messageView &#34;World!&#34;&#xA;&#xA;&#xA;data Message = Message1 | Message2&#xA;  deriving (Show, Read, ViewId)&#xA;&#xA;&#xA;instance HyperView Message es where&#xA;  data Action Message = Louder Text&#xA;    deriving (Show, Read, ViewAction)&#xA;&#xA;  update (Louder msg) = do&#xA;    let new = msg &amp;lt;&amp;gt; &#34;!&#34;&#xA;    pure $ messageView new&#xA;&#xA;&#xA;messageView :: Text -&amp;gt; View Message ()&#xA;messageView msg = do&#xA;  row id $ do&#xA;    button (Louder msg) id &#34;Louder&#34;&#xA;    el_ $ text msg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;View this example live: &lt;a href=&#34;https://docs.hyperbole.live/simple&#34;&gt;https://docs.hyperbole.live/simple&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started with Cabal&lt;/h2&gt; &#xA;&lt;p&gt;Create a new application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ mkdir myapp&#xA;$ cd myapp&#xA;$ cabal init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add hyperbole and text to your build-depends:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    build-depends:&#xA;        base&#xA;      , hyperbole&#xA;      , text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Paste the above example into Main.hs, and run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Visit &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt; to view the application&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The example directory contains an app demonstrating various features. See it in action at &lt;a href=&#34;https://docs.hyperbole.live&#34;&gt;https://docs.hyperbole.live&lt;/a&gt;&lt;/p&gt; &#xA;&lt;a href=&#34;https://docs.hyperbole.live&#34;&gt; &lt;img alt=&#34;Hyperbole Examples&#34; src=&#34;https://raw.githubusercontent.com/seanhess/hyperbole/main/example/static/examples.png&#34;&gt; &lt;/a&gt; &#xA;&lt;h3&gt;Try Example Project Locally&lt;/h3&gt; &#xA;&lt;p&gt;These will run the examples webserver&lt;/p&gt; &#xA;&lt;h4&gt;With Nix&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;nix run github:seanhess/hyperbole&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h4&gt;With Docker&lt;/h4&gt; &#xA;&lt;p&gt;&lt;code&gt;docker run -it -p 3000:3000 ghcr.io/seanhess/hyperbole:latest&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Learn More&lt;/h2&gt; &#xA;&lt;p&gt;View Documentation on Hackage&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/hyperbole/docs/Web-Hyperbole.html&#34;&gt;https://hackage.haskell.org/package/hyperbole/docs/Web-Hyperbole.html&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;View on Github&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/seanhess/hyperbole&#34;&gt;https://github.com/seanhess/hyperbole&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Full Production Example&lt;/h2&gt; &#xA;&lt;a href=&#34;https://nso.edu&#34;&gt; &lt;img alt=&#34;National Solar Observatory&#34; src=&#34;https://nso1.b-cdn.net/wp-content/uploads/2020/03/NSO-logo-orange-text.png&#34; width=&#34;400&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;The NSO uses Hyperbole for the Level 2 Data creation tool for the &lt;a href=&#34;https://nso.edu/telescopes/dki-solar-telescope/&#34;&gt;DKIST telescope&lt;/a&gt;. It is completely &lt;a href=&#34;https://github.com/DKISTDC/level2/&#34;&gt;open source&lt;/a&gt;. This production application contains complex interfaces, workers, databases, and more.&lt;/p&gt; &#xA;&lt;h2&gt;How to Import Flake&lt;/h2&gt; &#xA;&lt;p&gt;You can import this flake&#39;s overlay to add &lt;code&gt;hyperbole&lt;/code&gt; to all package sets and override ghc966 and ghc982 with the packages to satisfy &lt;code&gt;hyperbole&lt;/code&gt;&#39;s dependencies.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  inputs = {&#xA;    nixpkgs.url = &#34;github:nixos/nixpkgs/nixpkgs-unstable&#34;;&#xA;    hyperbole.url = &#34;github:seanhess/hyperbole&#34;; # or &#34;path:/path/to/cloned/hyperbole&#34;;&#xA;    flake-utils.url = &#34;github:numtide/flake-utils&#34;;&#xA;  };&#xA;&#xA;  outputs = { self, nixpkgs, hyperbole, flake-utils, ... }:&#xA;    flake-utils.lib.eachDefaultSystem (&#xA;      system:&#xA;      let&#xA;        pkgs = import nixpkgs {&#xA;          inherit system;&#xA;          overlays = [ hyperbole.overlays.default ];&#xA;        };&#xA;        haskellPackagesOverride = pkgs.overriddenHaskellPackages.ghc966.override (old: {&#xA;          overrides = pkgs.lib.composeExtensions (old.overrides or (_: _: { })) (hfinal: hprev: {&#xA;            # your overrides here&#xA;          });&#xA;        });&#xA;      in&#xA;      {&#xA;        devShells.default = haskellPackagesOverride.shellFor {&#xA;          packages = p: [ p.hyperbole ];&#xA;        };&#xA;      }&#xA;    );&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Local Development&lt;/h2&gt; &#xA;&lt;h3&gt;Recommended ghcid command&lt;/h3&gt; &#xA;&lt;p&gt;If you want to work on both the hyperbole library and example code, this &lt;code&gt;ghcid&lt;/code&gt; command will run (and hot reload) the examples server as you change any non-testing code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ghcid --setup=Main.update --command=&#34;cabal repl exe:examples lib:hyperbole&#34; --run=Main.update --warnings --reload=./client/dist/hyperbole.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to work on the test suite, this will run the tests each time any library code is changed.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ghcid --command=&#34;cabal repl test lib:hyperbole&#34; --run=Main.main --warnings --reload=./client/dist/hyperbole.js&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Nix&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nix flake check&lt;/code&gt; will build the library, example executable and devShell with ghc-9.8.2 and ghc-9.6.6 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;This is what the CI on GitHub runs&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nix run&lt;/code&gt; or &lt;code&gt;nix run .#ghc982-example&lt;/code&gt; to start the example project with GHC 9.8.2 &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;nix run .#ghc966-example&lt;/code&gt; to start the example project with GHC 9.6.6&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nix develop&lt;/code&gt; or &lt;code&gt;nix develop .#ghc982-shell&lt;/code&gt; to get a shell with all dependencies installed for GHC 9.8.2. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;nix develop .#ghc966-shell&lt;/code&gt; to get a shell with all dependencies installed for GHC 9.6.6.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nix build&lt;/code&gt;, &lt;code&gt;nix build .#ghc982-hyperbole&lt;/code&gt; and &lt;code&gt;nix build .#ghc966-hyperbole&lt;/code&gt; builds the library with the &lt;code&gt;overriddenHaskellPackages&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;If you want to import this flake, use the overlay&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nix flake update web-view&lt;/code&gt; will update the &lt;code&gt;web-view&lt;/code&gt; input&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Note: You can always run &lt;code&gt;cachix use hyperbole&lt;/code&gt; to use the GitHub CI populated cache if you didn&#39;t allow adding &#39;extra-substituters&#39; when first using this flake.&lt;/p&gt; &#xA;&lt;h3&gt;Common Nix Issues&lt;/h3&gt; &#xA;&lt;h4&gt;Not Allowed to Refer to GHC&lt;/h4&gt; &#xA;&lt;p&gt;If you get an error like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: output &#39;/nix/store/64k8iw0ryz76qpijsnl9v87fb26v28z8-my-haskell-package-1.0.0.0&#39; is not allowed to refer to the following paths:&#xA;         /nix/store/5q5s4a07gaz50h04zpfbda8xjs8wrnhg-ghc-9.6.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Follow these &lt;a href=&#34;https://nixos.org/manual/nixpkgs/unstable/#haskell-packaging-helpers&#34;&gt;instructions&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies Incorrect&lt;/h4&gt; &#xA;&lt;p&gt;If you need to update &lt;code&gt;web-view&lt;/code&gt; run &lt;code&gt;nix flake update web-view&lt;/code&gt;, otherwise:&lt;/p&gt; &#xA;&lt;p&gt;You will need to update the overlay, look for where it says &lt;code&gt;&#34;${packageName}&#34; = hfinal.callCabal2nix packageName src { };&lt;/code&gt; and add a line like &lt;code&gt;Diff = hfinal.callHackage &#34;Diff&#34; &#34;0.5&#34; { };&lt;/code&gt; with the package and version you need.&lt;/p&gt; &#xA;&lt;h4&gt;Missing Files&lt;/h4&gt; &#xA;&lt;p&gt;Check the &lt;code&gt;include&lt;/code&gt; inside the &lt;code&gt;nix-filter.lib&lt;/code&gt; to see if all files needed by cabal are there.&lt;/p&gt; &#xA;&lt;h3&gt;Manual dependency installation&lt;/h3&gt; &#xA;&lt;p&gt;Download and install &lt;a href=&#34;https://nodejs.org/en/download&#34;&gt;NPM&lt;/a&gt;. On a mac, can be installed via homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install npm&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Install client dependencies&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd client&#xA;npm install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Recommended: Use &lt;code&gt;direnv&lt;/code&gt; to automatically load environment from .env&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install direnv&#xA;direnv allow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;Build JavaScript client&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd client&#xA;npx webpack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run examples&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cd example&#xA;cabal run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File watching&lt;/h3&gt; &#xA;&lt;p&gt;Run tests, then recompile everything on file change and restart examples&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bin/dev&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributors&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/seanhess/hyperbole/main/seanhess&#34;&gt;Sean Hess&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kfigiela&#34;&gt;Kamil Figiela&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cgeorgii&#34;&gt;Christian Georgii&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Skyfold&#34;&gt;Pfalzgraf Martin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/tusharad&#34;&gt;Tushar Adhatrao&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>NixOS/nixfmt</title>
    <updated>2025-02-01T01:55:46Z</updated>
    <id>tag:github.com,2025-02-01:/NixOS/nixfmt</id>
    <link href="https://github.com/NixOS/nixfmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The official (but not yet stable) formatter for Nix code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;code&gt;nixfmt&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is a formatter for Nix code, intended to easily apply a uniform style.&lt;/p&gt; &#xA;&lt;p&gt;You are encouraged to test this out on your code and submit any undesirable formatting you find as an issue&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/NixOS/nixfmt/actions/workflows/main.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;State&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; will form the basis for the initial official standard Nix formatter, as established by &lt;a href=&#34;https://github.com/NixOS/rfcs/pull/166&#34;&gt;RFC 166&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The established standard Nix formatting differs considerably from the original one. Be aware of this if you track the main branch. Until the first new release the main branch should be considered &lt;strong&gt;very unstable&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For more details, see the &lt;a href=&#34;https://github.com/NixOS/nixfmt/issues/153&#34;&gt;RFC implementation tracking issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation And Usage Instructions&lt;/h2&gt; &#xA;&lt;h3&gt;nixpkgs/NixOS&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; was used as the basis for the official Nix formatter with a standardized formatting. The new formatting differs considerably from the original one. A recent nixfmt version is available as &lt;code&gt;pkgs.nixfmt-rfc-style&lt;/code&gt; in Nixpkgs. The formatting of this version differs considerably from the original nixfmt that was used as the basis for the standardised official formatter, which is also still available as &lt;code&gt;pkgs.nixfmt-classic&lt;/code&gt; for now, though unmaintained.&lt;/p&gt; &#xA;&lt;p&gt;So installing this &lt;code&gt;nixfmt&lt;/code&gt; is as simple as adding to the system packages:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{ pkgs, ... }:&#xA;&#xA;{&#xA;  environment.systemPackages = [ pkgs.nixfmt-rfc-style ];&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From the repository&lt;/h3&gt; &#xA;&lt;p&gt;It&#39;s also possible to install &lt;code&gt;nixfmt&lt;/code&gt; directly from the repository using &lt;code&gt;nix-env&lt;/code&gt;. Also, updates are not done automatically (as it would with the system packages).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix-env -f https://github.com/NixOS/nixfmt/archive/master.tar.gz -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;nix fmt&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://nix.dev/manual/nix/latest/command-ref/new-cli/nix3-fmt&#34;&gt;nix fmt&lt;/a&gt; (which is a flakes-only feature) can be configured by adding the following to &lt;code&gt;flake.nix&lt;/code&gt; (assuming a &lt;code&gt;nixpkgs&lt;/code&gt; input exists):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  outputs =&#xA;    { nixpkgs, self }:&#xA;    {&#xA;      formatter.x86_64-linux = nixpkgs.legacyPackages.x86_64-linux.nixfmt-rfc-style;&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;treefmt&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/numtide/treefmt&#34;&gt;treefmt&lt;/a&gt; can be used to format repositories consisting of different languages with one command. A possible configuration for &lt;code&gt;nixfmt&lt;/code&gt; in &lt;code&gt;treefmt.toml&lt;/code&gt; looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[formatter.nixfmt-rfc-style]&#xA;command = &#34;nixfmt&#34;&#xA;includes = [&#34;*.nix&#34;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;treefmt&lt;/code&gt; can be integrated into text editors and CI to ensure consistent formatting for all filetypes.&lt;/p&gt; &#xA;&lt;h3&gt;treefmt-nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/numtide/treefmt-nix&#34;&gt;treefmt-nix&lt;/a&gt; automatically configures the correct packages and formatters using a Nix configuration and has native support for &lt;code&gt;nixfmt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;# ...&#xA;treefmt-nix.mkWrapper nixpkgs {&#xA;  # ... other options ...&#xA;  programs.nixfmt-rfc-style.enable = true;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More information about configuration can be found in &lt;a href=&#34;https://github.com/numtide/treefmt-nix?tab=readme-ov-file#integration-into-nix&#34;&gt;the README&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;git-hooks.nix&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cachix/git-hooks.nix&#34;&gt;git-hooks.nix&lt;/a&gt; can automatically configure git hooks like &lt;code&gt;pre-commit&lt;/code&gt; using nix configuration and has native support for &lt;code&gt;nixfmt&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  pre-commit-check = nix-pre-commit-hooks.run {&#xA;    # ... other options ...&#xA;    hooks = {&#xA;      # ... other hooks ...&#xA;      nixfmt-rfc-style.enable = true;&#xA;    };&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;&lt;code&gt;pre-commit&lt;/code&gt; tool&lt;/h3&gt; &#xA;&lt;p&gt;If you have Nix files in a Git repo and you want to make sure that they’re formatted with &lt;code&gt;nixfmt&lt;/code&gt;, then you can use the &lt;code&gt;pre-commit&lt;/code&gt; tool from &lt;a href=&#34;https://pre-commit.com&#34;&gt;pre-commit.com&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you have the &lt;code&gt;pre-commit&lt;/code&gt; command:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pre-commit --version&#xA;pre-commit 3.7.1&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that you’re in your Git repo:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cd &amp;lt;path-to-git-repo&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure that the &lt;code&gt;pre-commit&lt;/code&gt; tool is installed as a Git pre-commit hook:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ pre-commit install&#xA;pre-commit installed at .git/hooks/pre-commit&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;If you don’t already have one, then create a &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add an entry for the &lt;code&gt;nixfmt&lt;/code&gt; hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:&#xA;    - repo: https://github.com/NixOS/nixfmt&#xA;      rev: &amp;lt;version&amp;gt;&#xA;      hooks:&#xA;            - id: nixfmt&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;If you want to use a stable version of &lt;code&gt;nixfmt&lt;/code&gt;, then replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with a tag from this repo. If you want to use an unstable version of &lt;code&gt;nixfmt&lt;/code&gt;, then replace &lt;code&gt;&amp;lt;version&amp;gt;&lt;/code&gt; with a commit hash from this repo.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Try to commit a badly formatted Nix file in order to make sure that everything works.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;[!WARNING] &lt;code&gt;nixfmt&lt;/code&gt;’s integration with the &lt;code&gt;pre-commit&lt;/code&gt; tool is relatively new. At the moment, none of the stable releases of &lt;code&gt;nixfmt&lt;/code&gt; can be used with the &lt;code&gt;pre-commit&lt;/code&gt; tool. You’ll have to use an unstable version for the time being.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;neovim + nixd&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local nvim_lsp = require(&#34;lspconfig&#34;)&#xA;nvim_lsp.nixd.setup({&#xA;   settings = {&#xA;      nixd = {&#xA;         formatting = {&#xA;            command = { &#34;nixfmt&#34; },&#xA;         },&#xA;      },&#xA;   },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;h3&gt;neovim + nil&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local nvim_lsp = require(&#34;lspconfig&#34;)&#xA;nvim_lsp.nil_ls.setup({&#xA;   settings = {&#xA;      [&#39;nil&#39;] = {&#xA;         formatting = {&#xA;            command = { &#34;nixfmt&#34; },&#xA;         },&#xA;      },&#xA;   },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;h3&gt;neovim + none-ls&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-lua&#34;&gt;local null_ls = require(&#34;null-ls&#34;)&#xA;null_ls.setup({&#xA;    sources = {&#xA;        null_ls.builtins.formatting.nixfmt,&#xA;    },&#xA;})&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This only works when &lt;code&gt;nixfmt-rfc-style&lt;/code&gt; is installed (see above for installation instructions).&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;h3&gt;With Nix&lt;/h3&gt; &#xA;&lt;p&gt;Haskell dependencies will be built by Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Enter &lt;code&gt;nix-shell&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Without Nix&lt;/h3&gt; &#xA;&lt;p&gt;Haskell dependencies will be built by Cabal.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build with &lt;code&gt;cabal new-build&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;nixfmt &amp;lt; input.nix&lt;/code&gt; – reads Nix code from &lt;code&gt;stdin&lt;/code&gt;, formats it, and outputs to &lt;code&gt;stdout&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;nixfmt file.nix&lt;/code&gt; – format the file in place&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;About Serokell&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;nixfmt&lt;/code&gt; is maintained and funded with &lt;span&gt;❤️&lt;/span&gt; by &lt;a href=&#34;https://serokell.io/&#34;&gt;Serokell&lt;/a&gt;. The names and logo for Serokell are trademark of Serokell OÜ.&lt;/p&gt; &#xA;&lt;p&gt;We love open source software! See &lt;a href=&#34;https://serokell.io/community?utm_source=github&#34;&gt;our other projects&lt;/a&gt; or &lt;a href=&#34;https://serokell.io/hire-us?utm_source=github&#34;&gt;hire us&lt;/a&gt; to design, develop and grow your idea!&lt;/p&gt;</summary>
  </entry>
</feed>