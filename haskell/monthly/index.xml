<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-01T02:10:59Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kolmodin/binary-arrow</title>
    <updated>2023-09-01T02:10:59Z</updated>
    <id>tag:github.com,2023-09-01:/kolmodin/binary-arrow</id>
    <link href="https://github.com/kolmodin/binary-arrow" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Efficient, pure binary decoding using Arrows and ByteStrings in Haskell.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>b3nj5m1n/xdg-ninja</title>
    <updated>2023-09-01T02:10:59Z</updated>
    <id>tag:github.com,2023-09-01:/b3nj5m1n/xdg-ninja</id>
    <link href="https://github.com/b3nj5m1n/xdg-ninja" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A shell script which checks your $HOME for unwanted files and directories.&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;xdg-ninja&lt;/h1&gt; &#xA; &lt;h5 align=&#34;center&#34;&gt;Because you wouldn&#39;t let just anyone into your &lt;i&gt;$HOME&lt;/i&gt;&lt;/h5&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;A shell script which checks your &lt;em&gt;$HOME&lt;/em&gt; for unwanted files and directories.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://s11.gifyu.com/images/68747470733a2f2f73382e67696679752e636f6d2f696d616765732f5065656b2d323032322d30352d31332d31362d30372e676966.gif&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;When it encounters a file it knows about, it will tell you whether it&#39;s possible to move this file to an appropriate location, and how to do it.&lt;/p&gt; &#xA;&lt;p&gt;The configurations are from the &lt;a href=&#34;https://wiki.archlinux.org/title/XDG_Base_Directory&#34;&gt;arch wiki page on XDG_BASE_DIR&lt;/a&gt;, &lt;a href=&#34;https://github.com/doron-cohen/antidot&#34;&gt;antidot&lt;/a&gt; (thanks to Scr0nch for writing a conversion tool), and contributed by other users.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;h3&gt;Using nix&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://nixos.org&#34;&gt;nix&lt;/a&gt; and have flakes turned on, you can just run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run github:b3nj5m1n/xdg-ninja&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Cloning Manually&lt;/h3&gt; &#xA;&lt;p&gt;Clone the repository somewhere, then run the &lt;em&gt;./xdg-ninja.sh&lt;/em&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;This will run every test in the default configuration.&lt;/p&gt; &#xA;&lt;h3&gt;Installing with Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;To install xdg-ninja with &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;, run &lt;code&gt;brew install xdg-ninja&lt;/code&gt; to install the script and all of its dependencies, then run the &lt;code&gt;xdg-ninja&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your favorite POSIX-compliant shell (&lt;a href=&#34;https://repology.org/project/bash/packages&#34;&gt;bash&lt;/a&gt;, &lt;a href=&#34;https://repology.org/project/zsh/packages&#34;&gt;zsh&lt;/a&gt;, &lt;a href=&#34;https://repology.org/project/dash-shell/packages&#34;&gt;dash&lt;/a&gt;, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/jq/packages&#34;&gt;jq&lt;/a&gt; for parsing the json files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/glow/packages&#34;&gt;glow&lt;/a&gt; for rendering Markdown in the terminal (&lt;a href=&#34;https://repology.org/project/bat-cat/packages&#34;&gt;bat&lt;/a&gt;, &lt;a href=&#34;https://repology.org/project/pygments/versions&#34;&gt;pygmentize&lt;/a&gt; or &lt;a href=&#34;https://repology.org/project/highlight/packages&#34;&gt;highlight&lt;/a&gt; can be used as fallback, but glow&#39;s output is clearer and therefore glow is recommended)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration is done in the &lt;em&gt;programs/&lt;/em&gt; directory, which should be located in the same working directory as the xdg-ninja.sh script. This can be overriden with the &lt;code&gt;XN_PROGRAMS_DIR&lt;/code&gt; environment variable.&lt;/p&gt; &#xA;&lt;p&gt;You define a program, and then a list of files and directories which this program ruthlessly puts into your &lt;em&gt;$HOME&lt;/em&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;For each file/directory, you specify if it can be (re)moved.&lt;/p&gt; &#xA;&lt;p&gt;If this is the case, you also specify instructions on how to accomplish this in Markdown.&lt;/p&gt; &#xA;&lt;p&gt;Files in this directory can have any name, but using the name of the program is encouraged.&lt;/p&gt; &#xA;&lt;h3&gt;Automatically Generating Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You can download the &lt;em&gt;xdgnj&lt;/em&gt; executable from the releases page. Alternatively, you can use the nix flake or build it from scratch using &lt;em&gt;cabal&lt;/em&gt;, &lt;em&gt;stack&lt;/em&gt;, or the provided docker image in &lt;em&gt;build/&lt;/em&gt;. (To be clear, this is just a tool that will help you automatically generate the config files, you still only need your shell to run the tests)&lt;/p&gt; &#xA;&lt;p&gt;Available commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;xdgnj add # Adds a new configuration&#xA;xdgnj prev programs/FILE.json # Preview the configuration for a program&#xA;xdgnj edit programs/FILE.json # Edit the configuration for a program&#xA;xdgnj run # Mostly the same as running the shell script&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Using nix&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using &lt;a href=&#34;https://nixos.org&#34;&gt;nix&lt;/a&gt; and have flakes turned on, you can just run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix run github:b3nj5m1n/xdg-ninja#xdgnj-bin ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Building from scratch&lt;/h4&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;cabal build&lt;/code&gt;, &lt;code&gt;stack build&lt;/code&gt;, or the provided dockerfile in &lt;em&gt;build/&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re going to use &lt;em&gt;git&lt;/em&gt; as an example.&lt;/p&gt; &#xA;&lt;p&gt;It puts the file &lt;em&gt;.gitconfig&lt;/em&gt; into &lt;em&gt;$HOME&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Luckily, the XDG spec is supported by git, so we can simply move the file to &lt;em&gt;XDG_CONFIG_HOME/git/config&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can use that last sentence as our instructions. In this case, there are no newlines, so escaping this string for use in json is trivial, however, this is how you should generally approach it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#34;Luckily, the XDG spec is supported by git, so we can simply move the file to _XDG_CONFIG_HOME/git/config_.&#34; | jq -aRs .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s see what the output of this command looks like for something a little more sophisticated. Here&#39;s an example file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat example.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Currently not fixable.&#xA;&#xA;_(But you can probably just delete the dir)_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s what catting this file to the &lt;em&gt;jq&lt;/em&gt; command produces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat example.md | jq -aRs .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Currently not fixable.\n\n_(But you can probably just delete the dir)_\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we can assemble our final json file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;git&#34;,&#xA;    &#34;files&#34;: [&#xA;        {&#xA;            &#34;path&#34;: &#34;$HOME/.gitconfig&#34;,&#xA;            &#34;movable&#34;: true,&#xA;            &#34;help&#34;: &#34;Luckily, the XDG spec is supported by git, so we can simply move the file to _XDG_CONFIG_HOME/git/config_.\n&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Saving this as &lt;em&gt;git.json&lt;/em&gt; in the &lt;em&gt;programs/&lt;/em&gt; directory will result in the script picking it up and checking the file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve created a configuration for a file that isn&#39;t in the official repository yet, make sure to create a pull request so that other people can benefit from it as well.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>benwbooth/cleo</title>
    <updated>2023-09-01T02:10:59Z</updated>
    <id>tag:github.com,2023-09-01:/benwbooth/cleo</id>
    <link href="https://github.com/benwbooth/cleo" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Beginnings of a parser for a new functional language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Beginnings of a parser for a new functional language&lt;/p&gt;</summary>
  </entry>
</feed>