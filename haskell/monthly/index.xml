<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-07-01T01:49:09Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>IntersectMBO/cardano-ledger</title>
    <updated>2024-07-01T01:49:09Z</updated>
    <id>tag:github.com,2024-07-01:/IntersectMBO/cardano-ledger</id>
    <link href="https://github.com/IntersectMBO/cardano-ledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ledger implementation and specifications of the Cardano blockchain.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Cardano Ledger&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://input-output-hk.github.io/cardano-engineering-handbook&#34;&gt; &lt;img alt=&#34;CEH&#34; src=&#34;https://img.shields.io/badge/policy-Cardano%20Engineering%20Handbook-informational?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/actions/workflows/haskell.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/actions/workflow/status/intersectmbo/cardano-ledger/haskell.yml?branch=master&amp;amp;style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://cardano-ledger.cardano.intersectmbo.org/&#34;&gt; &lt;img alt=&#34;Haddock (master)&#34; src=&#34;https://img.shields.io/badge/documentation-Haddock-yellow?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository contains the formal specifications, executable models, and implementations of the Cardano Ledger.&lt;/p&gt; &#xA;&lt;p&gt;The documents are built in our CI and can be readily accessed using the following links:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Era&lt;/th&gt; &#xA;   &lt;th&gt;Design Documents&lt;/th&gt; &#xA;   &lt;th&gt;Formal Specification&lt;/th&gt; &#xA;   &lt;th&gt;CDDL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Byron&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/byron-blockchain.pdf&#34; title=&#34;Specification of the Blockchain Layer&#34;&gt;Chain Spec&lt;/a&gt;, &lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/byron-ledger.pdf&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Ledger Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/tree/master/eras/byron/cddl-spec/byron.cddl&#34;&gt;CDDL&lt;/a&gt;, &lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/byron-binary.pdf&#34;&gt;PDF&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelley&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/shelley-delegation.pdf&#34; title=&#34;Design Specification for Delegation and Incentives in Cardano&#34;&gt;Design&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/shelley-ledger.pdf&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/tree/master/eras/shelley/impl/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Allegra&lt;/td&gt; &#xA;   &lt;td&gt;Same as Mary era below&lt;/td&gt; &#xA;   &lt;td&gt;Same as Mary era below&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/tree/master/eras/allegra/impl/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eprint.iacr.org/2020/895&#34; title=&#34;Multi-Currency Ledgers&#34;&gt;Multi-Currency&lt;/a&gt;, &lt;a href=&#34;https://iohk.io/en/research/library/papers/utxoma-utxo-with-multi-asset-support/&#34; title=&#34;UTXOma:UTXO with Multi-Asset Support&#34;&gt;UTXOma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/mary-ledger.pdf&#34; title=&#34;A Formal Specification of the Cardano Ledger with a Native Multi-Asset Implementation&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/tree/master/eras/mary/impl/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alonzo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/the-extended-utxo-model/&#34; title=&#34;The Extended UTXO Model&#34;&gt;eUTXO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/alonzo-ledger.pdf&#34; title=&#34;A Formal Specification of the Cardano Ledger integrating Plutus Core&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/tree/master/eras/alonzo/impl/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Babbage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/on-uc-secure-range-extension-and-batch-verification-for-ecvrf/&#34; title=&#34;On UC-Secure Range Extension and Batch Verification for ECVRF&#34;&gt;batch-verification&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/159&#34; title=&#34;Reference inputs&#34;&gt;CIP-31&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/160&#34; title=&#34;Inline datums&#34;&gt;CIP-32&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/161&#34; title=&#34;Reference scripts&#34;&gt;CIP-33&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/babbage-ledger.pdf&#34; title=&#34;Formal Specification of the Cardano Ledger for the Babbage era&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/tree/master/eras/babbage/impl/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Conway&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/cardano-foundation/CIPs/tree/master/CIP-1694&#34;&gt;CIP-1694&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/formal-ledger-specifications&#34;&gt;Spec (WIP)&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/tree/master/eras/conway/impl/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other Documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/non-integer-calculations.pdf&#34;&gt;Non-integer calculations specification&lt;/a&gt;: details on the parts of the Shelley specification that use real numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/pool-ranking.pdf&#34;&gt;Stake pool ranking specification&lt;/a&gt;: details for a robust stake pool ranking mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/releases/latest/download/small-step-semantics.pdf&#34;&gt;Explanation of the small-step-semantics framework&lt;/a&gt;: a guide to the notation and style used by our ledger rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there is a formalization of the Ledger Specification in Isabelle/HOL which can be found &lt;a href=&#34;https://github.com/input-output-hk/fm-ledger-formalization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some user documentation is published on &lt;a href=&#34;https://cardano-ledger.readthedocs.io/en/latest&#34;&gt;Read the Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Haddock code documentation of the latest master branch is available &lt;a href=&#34;https://input-output-hk.github.io/cardano-ledger&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Repository structure&lt;/h1&gt; &#xA;&lt;p&gt;The directory structure of this repository is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron&#34;&gt;Byron&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/ledger&#34;&gt;ledger&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/ledger/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/ledger/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/ledger/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/chain&#34;&gt;chain&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/chain/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/chain/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/byron/cddl-spec&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley&#34;&gt;Shelley&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley/design-spec&#34;&gt;design-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley/impl/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/allegra&#34;&gt;Allegra - Timelocks&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley-ma/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/allegra/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley-ma/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/allegra&#34;&gt;Mary - Multi-Assets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley-ma/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/allegra/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/shelley-ma/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/alonzo&#34;&gt;Alonzo - Smart Contracts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/alonzo/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/alonzo/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/alonzo/impl/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/alonzo/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/babbage&#34;&gt;Babbage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/babbage/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/babbage/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/babbage/impl/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/babbage/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/conway&#34;&gt;Conway - Governance&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/conway/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/conway/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/conway/impl/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/eras/conway/impl/test&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/IntersectMBO/cardano-ledger/master/libs&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://nixos.org/nix/download.html&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; for building everything in this repository. Haskell files can be built with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt; inside of a nix shell.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have a recent version of &lt;code&gt;nix&lt;/code&gt; by following this &lt;a href=&#34;https://nixos.org/manual/nix/stable/installation/upgrading.html&#34;&gt;guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Nix Cache&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; it is recommended that you setup the cache, so that it can reuse built artifacts, reducing the compilation times dramatically:&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; add the snippet below to your &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix.settings = {&#xA;  experimental-features = [ &#34;nix-command&#34; &#34;flakes&#34; ];&#xA;  substituters = [&#xA;    &#34;https://cache.nixos.org&#34;&#xA;    &#34;https://cache.iog.io&#34;&#xA;  ];&#xA;  trusted-public-keys = [&#xA;    &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34;&#xA;  ];&#xA;};&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;nix&lt;/code&gt; package manager next to another operating system put the following in &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;experimental-features = nix-command flakes&#xA;substituters        = https://cache.iog.io https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the LaTeX documents and executable specifications&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; the documents and Haskell code can be readily built by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix build .#specs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The LaTeX documents will be placed inside a directory named &lt;code&gt;result&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result/byron-ledger.pdf&#xA;result/shelley-delegation.pdf&#xA;result/non-integer-calculations.pdf&#xA;result/small-step-semantics.pdf&#xA;result/shelley-ledger.pdf&#xA;result/byron-blockchain.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building individual LaTeX documents&lt;/h2&gt; &#xA;&lt;p&gt;Change to the latex directory where the latex document is (e.g. &lt;code&gt;eras/shelley/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Shelley release, or &lt;code&gt;eras/byron/ledger/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Byron release). Then, build the latex document by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd &amp;lt;myLaTexDir&amp;gt;&#xA;nix develop --command make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a continuous compilation of the &lt;code&gt;LaTeX&lt;/code&gt; file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cd &amp;lt;myLaTexDir&amp;gt;&#xA;nix develop --command make watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;Run &lt;code&gt;cabal test all&lt;/code&gt; to run all tests or &lt;code&gt;cabal test &amp;lt;package&amp;gt;&lt;/code&gt; to run the tests for a specific package.&lt;/p&gt; &#xA;&lt;p&gt;Note: The &lt;code&gt;CARDANO_MAINNET_MIRROR&lt;/code&gt; environment variable can be overriden in &lt;code&gt;flake.nix&lt;/code&gt; if one desires to run the Byron tests with a different version of the &lt;a href=&#34;https://github.com/input-output-hk/cardano-mainnet-mirror/tree/master/epochs&#34;&gt;mainnet epochs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Submitting an issue&lt;/h1&gt; &#xA;&lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/intersectmbo/cardano-ledger/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>maralorn/nix-output-monitor</title>
    <updated>2024-07-01T01:49:09Z</updated>
    <id>tag:github.com,2024-07-01:/maralorn/nix-output-monitor</id>
    <link href="https://github.com/maralorn/nix-output-monitor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Pipe your nix-build output through the nix-output-monitor a.k.a nom to get additional information while building.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;nix-output-monitor&lt;/h1&gt; &#xA;&lt;p&gt;Pipe your nix-build output through the nix-output-monitor (aka nom) to get additional information while building.&lt;/p&gt; &#xA;&lt;p&gt;While your build runs, nom will draw something like this at the bottom of your build log:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/maralorn/nix-output-monitor/main/example-screenshot.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;(note that to reduce clutter nom only shows timers over 1s build or download time.)&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://repology.org/project/nix-output-monitor/versions&#34;&gt;&lt;img src=&#34;https://repology.org/badge/vertical-allrepos/nix-output-monitor.svg?sanitize=true&#34; alt=&#34;Packaging status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This was an experimental fun project, which proved to be useful to quite a lot of people. The purpose of it is to write something fun and useful in Haskell. You are free and very welcome to contribute feedback, issues or PRs. I do not commit to maintain this project over a long time period but it doesn’t look like I am stopping anytime soon.&lt;/p&gt; &#xA;&lt;p&gt;By now, nom is quite fully featured with support for nix v1 commands (e.g. &lt;code&gt;nix-build&lt;/code&gt;) and nix v2 command (e.g. &lt;code&gt;nix build&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Issues and pull requests are welcome at &lt;a href=&#34;https://github.com/maralorn/nix-output-monitor&#34;&gt;https://github.com/maralorn/nix-output-monitor&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Starting from version 2.1.0, nom uses &lt;a href=&#34;https://semver&#34;&gt;SemVer&lt;/a&gt;. The versioning applies to the behavior of the executable. There are no stability guarantees for the library component in the cabal project.&lt;/p&gt; &#xA;&lt;h2&gt;Support&lt;/h2&gt; &#xA;&lt;p&gt;If your question is not answered in this README you can ask it in &lt;a href=&#34;https://matrix.to/#/#nix-output-monitor:maralorn.de&#34;&gt;#nix-output-monitor:maralorn.de&lt;/a&gt; on matrix or open an issue on github.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nixpkgs: nom is in nixpkgs. Just install &lt;code&gt;pkgs.nix-output-monitor&lt;/code&gt; in the usual way. You might want to install it from nixos-unstable to get the newest version.&lt;/li&gt; &#xA; &lt;li&gt;cabal: Install &lt;code&gt;cabal-install&lt;/code&gt; and run &lt;code&gt;cabal install&lt;/code&gt; in the checked out repo.&lt;/li&gt; &#xA; &lt;li&gt;nix: or use &lt;code&gt;nix build&lt;/code&gt; or &lt;code&gt;nix-env&lt;/code&gt; or include the flake output of this repo in your nixos config.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;h3&gt;The Easy Way&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; The displayed build tree might be incomplete with new-style commands like &lt;code&gt;nix build&lt;/code&gt; for nix versions &amp;lt;2.10.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;nom&lt;/code&gt; binary (starting from version 2.0) behaves as a &lt;code&gt;nix&lt;/code&gt; drop in, with much more colorful output, but &lt;strong&gt;only&lt;/strong&gt; for the following commands:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;nom build &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix build &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;br&gt; &lt;code&gt;nom shell &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix shell &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;br&gt; &lt;code&gt;nom develop &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix develop &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The latter two commands work by calling &lt;code&gt;nix shell&lt;/code&gt; or &lt;code&gt;nix develop&lt;/code&gt; twice, the first time with overridden &lt;code&gt;--run exit&lt;/code&gt; and monitoring the output, the second time passing output through to the user. This will incur a performance cost by doubling eval time.&lt;/p&gt; &#xA;&lt;p&gt;Furthermore when called via the corresponding provided symlinks, nom is also a drop-in for the following commands:&lt;br&gt; &lt;code&gt;nom-build &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix-build &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;br&gt; &lt;code&gt;nom-shell &amp;lt;args&amp;gt;&lt;/code&gt;: Behaves like &lt;code&gt;nix-shell &amp;lt;args&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All aliases internally use the json-based approach (see next section) and propagate error codes. If you want nom support for other nix commands please open an issue.&lt;/p&gt; &#xA;&lt;h3&gt;The Flexible Way&lt;/h3&gt; &#xA;&lt;h4&gt;JSON based&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-build --log-format internal-json -v |&amp;amp; nom --json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Don‘t forget to redirect stderr. That&#39;s what the &lt;code&gt;&amp;amp;&lt;/code&gt;, does.&lt;/p&gt; &#xA;&lt;h4&gt;Human readable log parsing&lt;/h4&gt; &#xA;&lt;p&gt;It his highly recommended to always append &lt;code&gt;--log-format internal-json -v&lt;/code&gt; (or use the above mentioned aliases.) and call &lt;code&gt;nom&lt;/code&gt; with &lt;code&gt;--json&lt;/code&gt;. That will give you much more informative output.&lt;/p&gt; &#xA;&lt;p&gt;If you are in a situation, where you can‘t use the json based nix output you can still use&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-build |&amp;amp; nom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning:&lt;/strong&gt; Don‘t forget to redirect stderr. That&#39;s what the &lt;code&gt;&amp;amp;&lt;/code&gt;, does.&lt;/p&gt; &#xA;&lt;p&gt;This has the advantage to also work with other commands like &lt;code&gt;nixos-rebuild&lt;/code&gt; or &lt;code&gt;home-manager&lt;/code&gt;, where it is not trivial to pass in the &lt;code&gt;--log-format internal-json -v&lt;/code&gt; flag. nom will pass everything it reads through, if it does not understand it. This makes it ideal to attach it to scripts which output more then just &lt;code&gt;nix&lt;/code&gt; output.&lt;/p&gt; &#xA;&lt;h3&gt;Preserving Colored Text&lt;/h3&gt; &#xA;&lt;p&gt;Colored text will work as expected in json-mode.&lt;/p&gt; &#xA;&lt;p&gt;In human-readable log mode you can preserve the color of the redirected text by using the &lt;code&gt;unbuffer&lt;/code&gt; command from the &lt;code&gt;expect&lt;/code&gt; package.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;unbuffer nix-build |&amp;amp; nom&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Explanation&lt;/h2&gt; &#xA;&lt;h3&gt;Legend&lt;/h3&gt; &#xA;&lt;p&gt;Nom tries to convey information via symbols and colors&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;⏵&lt;/code&gt;, yellow: running builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;✔&lt;/code&gt;, green: completed builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;⏳︎︎︎&lt;/code&gt;, blue: planned builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;⚠&lt;/code&gt;, red: failed builds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;↓ ⏵&lt;/code&gt;, yellow: running downloads&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;↑ ⏵&lt;/code&gt;, yellow: running uploads&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;↓ ✔&lt;/code&gt;, green: completed downloads&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;↑ ✔&lt;/code&gt;, green: completed uploads&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;↓ ⏳︎︎︎&lt;/code&gt;, blue: waiting downloads&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;∅&lt;/code&gt;: a moving average over past builds of this derivation&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;⏱︎&lt;/code&gt;: running time&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;∑&lt;/code&gt;: a summary over all packages and hosts&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you can‘t see all icons you maybe need another terminal font. I recommend any font from &lt;code&gt;pkgs.nerdfonts&lt;/code&gt; e.g. &lt;code&gt;&#34;JetBrainsMono Nerd Font&#34;&lt;/code&gt;. Also different terminals might work differently well. I recommend: &lt;code&gt;pkgs.foot&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;How to Read the Dependency Graph&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Every entry in the nom tree stands for one derivation.&lt;/li&gt; &#xA; &lt;li&gt;Children of a node are direct dependencies.&lt;/li&gt; &#xA; &lt;li&gt;nom will try to show you the most relevant part of the dependency tree, roughly aiming to fill a third of your terminal&lt;/li&gt; &#xA; &lt;li&gt;No build will be printed twice in the tree, it will only be shown for the lower most dependency.&lt;/li&gt; &#xA; &lt;li&gt;nom will do it’s best to print all running or failed builds, downloads and uploads, but it does not print every direct child of a node.&lt;/li&gt; &#xA; &lt;li&gt;Use the colors from above to read the summary&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example Runs&lt;/h2&gt; &#xA;&lt;p&gt;An example remote build: &lt;a href=&#34;https://asciinema.org/a/KwCh38ujQ9wusHw8kyW4KCMZo&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/KwCh38ujQ9wusHw8kyW4KCMZo.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An example with a lot of downloads: &lt;a href=&#34;https://asciinema.org/a/7hJXH2iFLEkKxG1lL25lspqNn&#34;&gt;&lt;img src=&#34;https://asciinema.org/a/7hJXH2iFLEkKxG1lL25lspqNn.svg?sanitize=true&#34; alt=&#34;asciicast&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Implementation&lt;/h2&gt; &#xA;&lt;p&gt;Right now nom uses four sources of information:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;The parsed nix-build output (json or human-readable)&lt;/li&gt; &#xA; &lt;li&gt;it checks if build results exist in the nix-store (only in human-readable mode)&lt;/li&gt; &#xA; &lt;li&gt;it queries &lt;code&gt;.drv&lt;/code&gt; files for information about the &lt;code&gt;out&lt;/code&gt; output path.&lt;/li&gt; &#xA; &lt;li&gt;It caches build times in &lt;code&gt;$XDG_CACHE_HOME/nix-output-monitor/build-reports.csv&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This will fail in unexpected and expected ways.&lt;/li&gt; &#xA; &lt;li&gt;Luckily I don‘t think this program screws up anything more than your terminal.&lt;/li&gt; &#xA; &lt;li&gt;remote builds will sometimes be shown as running even when they are actually still waiting for uploads or downloads. This is how nix reports it.&lt;/li&gt; &#xA; &lt;li&gt;Terminal clearing and reprinting is brittle. It might fail with your terminal or terminal width. But at this point I‘ve invested some effort to make it usable.&lt;/li&gt; &#xA; &lt;li&gt;This program also makes assumptions like your nix-store is at &#34;/nix/store&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;For human-readable log parsing mode:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;nix-output-monitor receives most it&#39;s information from parsing nix-build output. The parser might be to strict or to loose for use cases I didn‘t think of. Then &lt;strong&gt;the numbers displayed will be off&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;nix-build does not show info when a download or upload is finished, so we currently cannot differentiate between started and completed downloads.&lt;/li&gt; &#xA; &lt;li&gt;For completed build detection we assume that every derivation has an output called &#34;out&#34;.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>