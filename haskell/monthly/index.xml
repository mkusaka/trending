<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-01T01:50:49Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-09-01T01:50:49Z</updated>
    <id>tag:github.com,2022-09-01:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm “file”                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>simplex-chat/simplex-chat</title>
    <updated>2022-09-01T01:50:49Z</updated>
    <id>tag:github.com,2022-09-01:/simplex-chat/simplex-chat</id>
    <link href="https://github.com/simplex-chat/simplex-chat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SimpleX - the first messaging platform operating without user identifiers of any kind - 100% private by design! iOS and Android apps are released 📱!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/simplex-chat-logo.svg?sanitize=true&#34; alt=&#34;SimpleX logo&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;SimpleX - the first messaging platform that has no user identifiers of any kind - 100% private by design!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml/badge.svg?branch=stable&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/simplex-chat/simplex-chat/total&#34; alt=&#34;GitHub downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/simplex-chat/simplex-chat&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/SimpleXChat?style=social&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/SimpleXChat?style=social&#34; alt=&#34;Join on Reddit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apple_store.svg?sanitize=true&#34; alt=&#34;iOS app&#34; height=&#34;42&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/google_play.svg?sanitize=true&#34; alt=&#34;Android app&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://app.simplex.chat&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/f_droid.svg?sanitize=true&#34; alt=&#34;F-Droid&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/testflight.png&#34; alt=&#34;iOS TestFlight&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apk_icon.png&#34; alt=&#34;APK&#34; height=&#34;41&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🖲 Protects your messages and metadata - who you talk to and when.&lt;/li&gt; &#xA; &lt;li&gt;🔐 Double ratchet end-to-end encryption, with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;📱 Mobile apps for Android (&lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;Google Play&lt;/a&gt;, &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;APK&lt;/a&gt;) and &lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;iOS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;TestFlight preview for iOS&lt;/a&gt; with the new features 1-2 weeks earlier - &lt;strong&gt;limited to 10,000 users&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;🖥 Available as a terminal (console) app / CLI on Linux, MacOS, Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#why-privacy-matters&#34;&gt;Why privacy matters&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#simplex-approach-to-privacy-and-security&#34;&gt;SimpleX approach to privacy and security&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#complete-privacy-of-your-identity-profile-contacts-and-metadata&#34;&gt;Complete privacy&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#the-best-protection-against-spam-and-abuse&#34;&gt;Protection against spam and abuse&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#complete-ownership-control-and-security-of-your-data&#34;&gt;Ownership and security of your data&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#users-own-simplex-network&#34;&gt;Users own SimpleX network&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#frequently-asked-questions&#34;&gt;Frequently asked questions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#news-and-updates&#34;&gt;News and updates&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#make-a-private-connection&#34;&gt;Make a private connection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#zap-quick-installation-of-a-terminal-app&#34;&gt;Quick installation of a terminal app&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#simplex-platform-design&#34;&gt;SimpleX Platform design&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#privacy-technical-details-and-limitations&#34;&gt;Privacy: technical details and limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#for-developers&#34;&gt;For developers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#help-us-pay-for-3rd-party-security-audit&#34;&gt;Help us pay for 3rd party security audit&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/#disclaimer&#34;&gt;Disclaimer, License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why privacy matters&lt;/h2&gt; &#xA;&lt;p&gt;Everyone should care about privacy and security of their communications - innocuous conversations can put you in danger even if there is nothing to hide.&lt;/p&gt; &#xA;&lt;p&gt;One of the most shocking stories is the experience of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mohamedou_Ould_Slahi&#34;&gt;Mohamedou Ould Salahi&lt;/a&gt; that he wrote about in his memoir and that is shown in The Mauritanian movie. He was put into Guantanamo camp, without trial, and was tortured there for 15 years after a phone call to his relative in Afghanistan, under suspicion of being involved in 9/11 attacks, even though he lived in Germany for the 10 years prior to the attacks.&lt;/p&gt; &#xA;&lt;p&gt;It is not enough to use an end-to-end encrypted messenger, we all should use the messengers that protect the privacy of our personal networks - who we are connected with.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX approach to privacy and security&lt;/h2&gt; &#xA;&lt;h3&gt;Complete privacy of your identity, profile, contacts and metadata&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike any other existing messaging platform, SimpleX has no identifiers assigned to the users&lt;/strong&gt; - not even random numbers. This protects the privacy of who are you communicating with, hiding it from SimpleX platform servers and from any observers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#full-privacy-of-your-identity-profile-contacts-and-metadata&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The best protection against spam and abuse&lt;/h3&gt; &#xA;&lt;p&gt;As you have no identifier on SimpleX platform, you cannot be contacted unless you share a one-time invitation link or an optional temporary user address. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#the-best-protection-against-spam-and-abuse&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Complete ownership, control and security of your data&lt;/h3&gt; &#xA;&lt;p&gt;SimpleX stores all user data on client devices, the messages are only held temporarily on SimpleX relay servers until they are received. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#complete-ownership-control-and-security-of-your-data&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Users own SimpleX network&lt;/h3&gt; &#xA;&lt;p&gt;You can use SimpleX with your own servers and still communicate with people using the servers that are pre-configured in the apps or any other SimpleX servers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#users-own-simplex-network&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Frequently asked questions&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;How SimpleX can deliver messages without any user identifiers?&lt;/em&gt; See &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220511-simplex-chat-v2-images-files.md#the-first-messaging-platform-without-user-identifiers&#34;&gt;v2 release annoucement&lt;/a&gt; explaining how SimpleX works.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;Why should I not just use Signal?&lt;/em&gt; Signal is a centralised platform that uses phone numbers to identify its users and their contacts. It means that while the content of your messages on Signal is protected with robust end-to-end encryption, there is a large amount of meta-data visible to Signal - who you talk with and when.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;em&gt;How is it different from Matrix, Session, Ricochet, Cwtch, etc., that also don&#39;t require user identites?&lt;/em&gt; Although these platforms do not require a &lt;em&gt;real identity&lt;/em&gt;, they do rely on anonymous user identities to deliver messages – it can be, for example, an identity key or a random number. Using a persistent user identity, even anonymous, creates a risk that user&#39;s connection graph becomes known to the observers and/or service providers, and it can lead to de-anonymizing some users. If the same user profile is used to connect to two different people via any messenger other than SimpleX, these two people can confirm if they are connected to the same person - they would use the same user identifier in the messages. With SimpleX there is no meta-data in common between your conversations with different contacts - the quality that no other messaging platform has.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;News and updates&lt;/h2&gt; &#xA;&lt;p&gt;Selected updates:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220808-simplex-chat-v3.1-chat-groups.md&#34;&gt;Aug 8, 2022. v3.1: secret chat groups, access via Tor, reduced battery and traffic usage, advanced netwrok settings, etc.&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220711-simplex-chat-v3-released-ios-notifications-audio-video-calls-database-export-import-protocol-improvements.md&#34;&gt;Jul 11, 2022. v3.0: instant push notifications for iOS, e2e encrypted WebRTC audio/video calls, chat database export/import, privacy and performance improvements&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220511-simplex-chat-v2-images-files.md&#34;&gt;May 11, 2022. v2.0 released - sending images and files in mobile apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220308-simplex-chat-mobile-apps.md&#34;&gt;Mar 08, 2022 Mobile apps for iOS and Android released&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/20220112-simplex-chat-v1-released.md&#34;&gt;Jan 12, 2022. SimpleX v1 released: the only messaging and application platform without user identities&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog&#34;&gt;All updates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Make a private connection&lt;/h2&gt; &#xA;&lt;p&gt;You need to share a link or scan a QR code (in person or during a video call) to make a connection and start messaging.&lt;/p&gt; &#xA;&lt;p&gt;The channel through which you share the link does not have to be secure - it is enough that you can confirm who sent you the message and that your SimpleX connection is established.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/conversation.png&#34; alt=&#34;Make a private connection&#34; width=&#34;594&#34; height=&#34;360&#34;&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; Quick installation of a terminal app&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o- https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the chat client is installed, simply run &lt;code&gt;simplex-chat&lt;/code&gt; from your terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/connection.gif&#34; alt=&#34;simplex-chat&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/CLI.md&#34;&gt;installing and using the terminal app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX Platform design&lt;/h2&gt; &#xA;&lt;p&gt;SimpleX is a client-server network with a unique network topology that uses redundant, disposable message relay nodes to asynchronously pass messages via unidirectional (simplex) message queues, providing recipient and sender anonymity.&lt;/p&gt; &#xA;&lt;p&gt;Unlike P2P networks, all messages are passed through one or several server nodes, that do not even need to have persistence. In fact, the current &lt;a href=&#34;https://github.com/simplex-chat/simplexmq#smp-server&#34;&gt;SMP server implementation&lt;/a&gt; uses in-memory message storage, persisting only the queue records. SimpleX provides better metadata protection than P2P designs, as no global participant identifiers are used to deliver messages, and avoids &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#comparison-with-p2p-messaging-protocols&#34;&gt;the problems of P2P networks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike federated networks, the server nodes &lt;strong&gt;do not have records of the users&lt;/strong&gt;, &lt;strong&gt;do not communicate with each other&lt;/strong&gt; and &lt;strong&gt;do not store messages&lt;/strong&gt; after they are delivered to the recipients. There is no way to discover the full list of servers participating in SimpleX network. This design avoids the problem of metadata visibility that all federated networks have and better protects from the network-wide attacks.&lt;/p&gt; &#xA;&lt;p&gt;Only the client devices have information about users, their contacts and groups.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/stable/protocol/overview-tjr.md&#34;&gt;SimpleX whitepaper&lt;/a&gt; for more information on platform objectives and technical design.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/protocol/simplex-chat.md&#34;&gt;SimpleX Chat Protocol&lt;/a&gt; for the format of messages sent between chat clients over &lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/stable/protocol/simplex-messaging.md&#34;&gt;SimpleX Messaging Protocol&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Privacy: technical details and limitations&lt;/h2&gt; &#xA;&lt;p&gt;SimpleX Chat is a work in progress – we are releasing improvements as they are ready. You have to decide if the current state is good enough for your usage scenario.&lt;/p&gt; &#xA;&lt;p&gt;What is already implemented:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Instead of user profile identifiers used by all other platforms, even the most private ones, SimpleX uses pairwise per-queue identifiers (2 addresses for each unidirectional message queue, with an optional 3rd address for push notificaitons on iOS, 2 queues in each connection between the users). It makes observing the network graph on the application level more difficult, as for &lt;code&gt;n&lt;/code&gt; users there can be up to &lt;code&gt;n * (n-1)&lt;/code&gt; message queues.&lt;/li&gt; &#xA; &lt;li&gt;End-to-end encryption in each message queue using &lt;a href=&#34;https://nacl.cr.yp.to/box.html&#34;&gt;NaCl cryptobox&lt;/a&gt;. This is added to allow redundancy in the future (passing each message via several servers), to avoid having the same ciphertext in different queues (that would only be visible to the attacker if TLS is compromised). The encryption keys used for this encryption are not rotated, instead we are planning to rotate the queues. Curve25519 keys are used for key negotiation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://signal.org/docs/specifications/doubleratchet/&#34;&gt;Double ratchet&lt;/a&gt; end-to-end encryption in each conversation between two users (or group members). This is the same algorithm that is used in Signal and many other messaging apps; it provides OTR messaging with forward secrecy (each message is encrypted by its own ephemeral key), break-in recovery (the keys are frequently re-negotiated as part of the message exchange). Two pairs of Curve448 keys are used for the initial key agreement, initiating party passes these keys via the connection link, accepting side - in the header of the confirmation message.&lt;/li&gt; &#xA; &lt;li&gt;Additional layer of encryption using NaCL cryptobox for the messages delivered from the server to the recipient. This layer avoids having any ciphertext in common between sent and received traffic of the server inside TLS (and there are no identifiers in common as well).&lt;/li&gt; &#xA; &lt;li&gt;Several levels of content padding to frustrate message size attacks.&lt;/li&gt; &#xA; &lt;li&gt;Starting from v2 of SMP protocol (the current version is v4) all message metadata, including the time when the message was received by the server (rounded to a second) is sent to the recipients inside an encrypted envelope, so even if TLS is compromised it cannot be observed.&lt;/li&gt; &#xA; &lt;li&gt;Only TLS 1.2/1.3 are allowed for client-server connections, limited to cryptographic algorithms: CHACHA20POLY1305_SHA256, Ed25519/Ed448, Curve25519/Curve448.&lt;/li&gt; &#xA; &lt;li&gt;To protect against replay attacks SimpleX servers require &lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc5929.html&#34;&gt;tlsunique channel binding&lt;/a&gt; as session ID in each client command signed with per-queue ephemeral key.&lt;/li&gt; &#xA; &lt;li&gt;To protect your IP address all SimpleX Chat clients support accessing messaging servers via Tor - see &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220808-simplex-chat-v3.1-chat-groups.md&#34;&gt;v3.1 release announcement&lt;/a&gt; for more details.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We plan to add soon:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Message queue rotation. Currently the queues created between two users are used until the contact is deleted, providing a long-term pairwise identifiers of the conversation. We are planning to add queue rotation to make these identifiers termporary and rotate based on some schedule TBC (e.g., every X messages, or every X hours/days).&lt;/li&gt; &#xA; &lt;li&gt;Local database encryption. Currently the local chat database stored on your device is not encrypted.&lt;/li&gt; &#xA; &lt;li&gt;Message &#34;mixing&#34; - adding latency to message delivery, to protect against traffic correlation by message time.&lt;/li&gt; &#xA; &lt;li&gt;Independent implementation audit.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;p&gt;We plan that the SimpleX platform will grow into the platform supporting any distributed Internet application. This will allow you to build any service that people can access via chat, with custom web-based UI widgets that anybody with basic HTML/CSS/JavaScript knowledge can create in a few hours.&lt;/p&gt; &#xA;&lt;p&gt;You already can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use SimpleX Chat library to integrate chat functionality into your apps.&lt;/li&gt; &#xA; &lt;li&gt;use SimpleX Chat bot templates in Haskell to build your own chat bot services (TypeScript SDK is coming soon).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are considering developing with SimpleX platform please get in touch for any advice and support.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Easy to deploy SimpleX server with in-memory message storage, without any dependencies.&lt;/li&gt; &#xA; &lt;li&gt;✅ Terminal (console) client with groups and files support.&lt;/li&gt; &#xA; &lt;li&gt;✅ One-click SimpleX server deployment on Linode.&lt;/li&gt; &#xA; &lt;li&gt;✅ End-to-end encryption using double-ratchet protocol with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;✅ Mobile apps v1 for Android and iOS.&lt;/li&gt; &#xA; &lt;li&gt;✅ Private instant notifications for Android using background service.&lt;/li&gt; &#xA; &lt;li&gt;✅ Haskell chat bot templates.&lt;/li&gt; &#xA; &lt;li&gt;✅ v2.0 - supporting images and files in mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;✅ Manual chat history deletion.&lt;/li&gt; &#xA; &lt;li&gt;✅ End-to-end encrypted WebRTC audio and video calls via the mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;✅ Privacy preserving instant notifications for iOS using Apple Push Notification service.&lt;/li&gt; &#xA; &lt;li&gt;✅ Chat database export and import&lt;/li&gt; &#xA; &lt;li&gt;✅ Chat groups in mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;✅ Connecting to messaging servers via Tor.&lt;/li&gt; &#xA; &lt;li&gt;🏗 Dual server addresses to access messaging servers as v3 hidden services (in progress).&lt;/li&gt; &#xA; &lt;li&gt;🏗 Chat server and TypeScript client SDK to develop chat interfaces, integrations and chat bots (in progress).&lt;/li&gt; &#xA; &lt;li&gt;Chat database encryption.&lt;/li&gt; &#xA; &lt;li&gt;Disappearing messages, with mutual agreement.&lt;/li&gt; &#xA; &lt;li&gt;Web widgets for custom interactivity in the chats.&lt;/li&gt; &#xA; &lt;li&gt;SMP protocol improvements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SMP queue redundancy and rotation.&lt;/li&gt; &#xA;   &lt;li&gt;Message delivery confirmation.&lt;/li&gt; &#xA;   &lt;li&gt;Supporting the same profile on multiple devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Privacy-preserving identity server for optional DNS-based contact/group addresses to simplify connection and discovery, but not used to deliver messages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;keep all your contacts and groups even if you lose the domain.&lt;/li&gt; &#xA;   &lt;li&gt;the server doesn&#39;t have information about your contacts and groups.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Channels server for large groups and broadcast channels.&lt;/li&gt; &#xA; &lt;li&gt;Media server to optimize sending large files to groups.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help us pay for 3rd party security audit&lt;/h2&gt; &#xA;&lt;p&gt;I will get straight to the point: I ask you to support SimpleX Chat with donations.&lt;/p&gt; &#xA;&lt;p&gt;We are prioritizing users privacy and security - it would be impossible without your support we were lucky to have so far.&lt;/p&gt; &#xA;&lt;p&gt;We are planning a 3rd party security audit for the app, and it would hugely help us if some part of this $20,000+ expense could be covered with donations.&lt;/p&gt; &#xA;&lt;p&gt;Our pledge to our users is that SimpleX protocols are and will remain open, and in public domain, - so anybody can build the future implementations of the clients and the servers. We are building SimpleX platform based on the same principles as email and web, but much more private and secure.&lt;/p&gt; &#xA;&lt;p&gt;If you are already using SimpleX Chat, or plan to use it in the future when it has more features, please consider making a donation - it will help us to raise more funds. Donating any amount, even the price of the cup of coffee, would make a huge difference for us.&lt;/p&gt; &#xA;&lt;p&gt;It is possible to donate via:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/simplex-chat&#34;&gt;GitHub&lt;/a&gt; - it is commission-free for us.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://opencollective.com/simplex-chat&#34;&gt;OpenCollective&lt;/a&gt; - it charges a commission, and also accepts donations in crypto-currencies.&lt;/li&gt; &#xA; &lt;li&gt;Monero wallet: 8568eeVjaJ1RQ65ZUn9PRQ8ENtqeX9VVhcCYYhnVLxhV4JtBqw42so2VEUDQZNkFfsH5sXCuV7FN8VhRQ21DkNibTZP57Qt&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Thank you,&lt;/p&gt; &#xA;&lt;p&gt;Evgeny&lt;/p&gt; &#xA;&lt;p&gt;SimpleX Chat founder&lt;/p&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/master/protocol/overview-tjr.md&#34;&gt;SimpleX protocols and security model&lt;/a&gt; was reviewed and had many improvements in v1.0.0; we are currently arranging for the independent implementation audit.&lt;/p&gt; &#xA;&lt;p&gt;You are likely to discover some bugs - we would really appreciate if you use it and let us know anything that needs to be fixed or improved.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/LICENSE&#34;&gt;AGPL v3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apple_store.svg?sanitize=true&#34; alt=&#34;iOS app&#34; height=&#34;42&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/google_play.svg?sanitize=true&#34; alt=&#34;Android app&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://app.simplex.chat&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/f_droid.svg?sanitize=true&#34; alt=&#34;F-Droid&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/testflight.png&#34; alt=&#34;iOS TestFlight&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apk_icon.png&#34; alt=&#34;APK&#34; height=&#34;41&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>unisonweb/unison</title>
    <updated>2022-09-01T01:50:49Z</updated>
    <id>tag:github.com,2022-09-01:/unisonweb/unison</id>
    <link href="https://github.com/unisonweb/unison" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A friendly programming language from the future&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Unison language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/unisonweb/unison&#34;&gt;&lt;img src=&#34;https://travis-ci.org/unisonweb/unison.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unisonweb.org&#34;&gt;Unison&lt;/a&gt; is a modern, statically-typed purely functional language with the ability to describe entire distributed systems using a single program. Here&#39;s an example of a distributed map-reduce implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Haskell&#34;&gt;-- comments start with `--`&#xA;mapReduce loc fn ifEmpty reduce data = match split data with&#xA;  Empty          -&amp;gt; ifEmpty&#xA;  One a          -&amp;gt; fn a&#xA;  Two left right -&amp;gt;&#xA;    fl = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !left)&#xA;    fr = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !right)&#xA;    reduce (await fl) (await fr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function can be either simulated locally (possibly with faults injected for testing purposes), or run atop a distributed pool of compute. See &lt;a href=&#34;https://www.unison-lang.org/articles/distributed-datasets/&#34;&gt;this article&lt;/a&gt; for more in-depth coverage of how to build distributed computing libraries like this.&lt;/p&gt; &#xA;&lt;p&gt;Other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/the-big-idea/&#34;&gt;Learn about the big idea behind Unison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://unison-lang.org&#34;&gt;the project website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Say hello or lurk &lt;a href=&#34;https://unison-lang.org/slack&#34;&gt;in the Slack chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Explore &lt;a href=&#34;https://share.unison-lang.org/&#34;&gt;the Unison ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/&#34;&gt;Learn Unison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building using Stack&lt;/h2&gt; &#xA;&lt;p&gt;If these instructions don&#39;t work for you or are incomplete, please file an issue.&lt;/p&gt; &#xA;&lt;p&gt;The build uses &lt;a href=&#34;http://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt;. If you don&#39;t already have it installed, &lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;follow the install instructions&lt;/a&gt; for your platform. (Hint: &lt;code&gt;brew update &amp;amp;&amp;amp; brew install stack&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/unisonweb/unison.git&#xA;$ cd unison&#xA;$ stack --version # we&#39;ll want to know this version if you run into trouble&#xA;$ stack build --fast --test &amp;amp;&amp;amp; stack exec unison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run the Unison Local UI while building from source, you can use the &lt;code&gt;/dev-ui-install.sh&lt;/code&gt; script. It will download the latest release of &lt;a href=&#34;https://github.com/unisonweb/unison-local-ui&#34;&gt;unison-local-ui&lt;/a&gt; and put it in the expected location for the unison executable created by &lt;code&gt;stack build&lt;/code&gt;. When you start unison, you&#39;ll see a url where Unison Local UI is running.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/unisonweb/unison/trunk/development.markdown&#34;&gt;&lt;code&gt;development.markdown&lt;/code&gt;&lt;/a&gt; for a list of build commands you&#39;ll likely use during development.&lt;/p&gt; &#xA;&lt;h2&gt;Codebase Server&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;ucm&lt;/code&gt; starts it starts a Codebase web server that is used by the &lt;a href=&#34;https://github.com/unisonweb/unison-local-ui&#34;&gt;Unison Local UI&lt;/a&gt;. It selects a random port and a unique token that must be used when starting the UI to correctly connect to the server.&lt;/p&gt; &#xA;&lt;p&gt;The port, host and token can all be configured by providing environment variables when starting &lt;code&gt;ucm&lt;/code&gt;: &lt;code&gt;UCM_PORT&lt;/code&gt;, &lt;code&gt;UCM_HOST&lt;/code&gt;, and &lt;code&gt;UCM_TOKEN&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>