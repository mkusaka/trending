<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-05-01T02:16:26Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haskell-beginners-2022/course-plan</title>
    <updated>2023-05-01T02:16:26Z</updated>
    <id>tag:github.com,2023-05-01:/haskell-beginners-2022/course-plan</id>
    <link href="https://github.com/haskell-beginners-2022/course-plan" rel="alternate"></link>
    <summary type="html">&lt;p&gt;📜 Haskell course info, plan, video lectures, slides&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;course-plan&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;256&#34; height=&#34;256&#34; src=&#34;https://raw.githubusercontent.com/haskell-beginners-2022/course-plan/main/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Haskell and Functional Programming course for complete beginners.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;👩‍🏫 The course was created in 2022 but it&#39;s still active and constantly improving.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Course learning materials comprises:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=6MsQcUprO9o&amp;amp;list=PLOJjn67NeYg9cWA4hyIWcxfaeX64pwo1c&amp;amp;ab_channel=chshersh&#34;&gt;🎥 Four 1-hour lectures on YouTube&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://slides.com/haskellbeginners2022&#34;&gt;🖼 Slides&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haskell-beginners-2022/exercises&#34;&gt;🧩 Practical exercises and Haskell installation instructions&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The course is entirely free and includes two particularly interesting features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🆙 &lt;strong&gt;Review of your solutions to exercises!&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;📜 &lt;strong&gt;A certificate after successful completion!&lt;/strong&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can solve exercises, and I&#39;m (Dmitrii Kovanikov) going to provide review to your solutions, suggesting improvements and alternative ways to solve tasks using idiomatic FP.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Below you can find the plan of each individual lecture with the corresponding links to learning materials.&lt;/p&gt; &#xA;&lt;h2&gt;🏡 Lecture 1: Fundamentals&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;What is Functional Programming?&lt;/li&gt; &#xA; &lt;li&gt;FP concepts&lt;/li&gt; &#xA; &lt;li&gt;Haskell features&lt;/li&gt; &#xA; &lt;li&gt;Haskell toolchain: GHC, GHCi, ghcup, cabal, hls&lt;/li&gt; &#xA; &lt;li&gt;How to install Haskell?&lt;/li&gt; &#xA; &lt;li&gt;GHCi &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Arithmetic expressions&lt;/li&gt; &#xA;   &lt;li&gt;Comparison operators&lt;/li&gt; &#xA;   &lt;li&gt;Boolean expressions&lt;/li&gt; &#xA;   &lt;li&gt;Calling functions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;:t&lt;/code&gt; command in GHCi&lt;/li&gt; &#xA;   &lt;li&gt;Types of booleans, numbers and functions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Lists and operations with them &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Prepending, concatenation&lt;/li&gt; &#xA;   &lt;li&gt;Standard list functions&lt;/li&gt; &#xA;   &lt;li&gt;Ranges&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Laziness&lt;/li&gt; &#xA; &lt;li&gt;String&lt;/li&gt; &#xA; &lt;li&gt;Syntax constructions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Defining our own functions&lt;/li&gt; &#xA;   &lt;li&gt;packages, modules, imports&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;if-then-else&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;guards&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;let-in&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;where&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Immutability&lt;/li&gt; &#xA; &lt;li&gt;Recursion&lt;/li&gt; &#xA; &lt;li&gt;Higher-Order Functions (HOF) &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Functions as first-class values&lt;/li&gt; &#xA;   &lt;li&gt;Lambda functions&lt;/li&gt; &#xA;   &lt;li&gt;Partial application&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;map&lt;/code&gt;, &lt;code&gt;filter&lt;/code&gt;, etc.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-1&#34;&gt;https://slides.com/haskellbeginners2022/lecture-1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=6MsQcUprO9o&#34;&gt;Haskell Beginners 2022: Lecture 1&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🏗 Lecture 2: Data types&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Pattern-matching &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Top level&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;case-of&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;List patterns&lt;/li&gt; &#xA;   &lt;li&gt;Recursion and pattern matching&lt;/li&gt; &#xA;   &lt;li&gt;Pattern matching pitfalls&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Totality&lt;/li&gt; &#xA; &lt;li&gt;Tuples&lt;/li&gt; &#xA; &lt;li&gt;Algebraic Data Types &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Product types&lt;/li&gt; &#xA;   &lt;li&gt;Sum types&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Data types in Haskell &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;data&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Simple product types&lt;/li&gt; &#xA;   &lt;li&gt;Records&lt;/li&gt; &#xA;   &lt;li&gt;Enumerations&lt;/li&gt; &#xA;   &lt;li&gt;Simple sum types&lt;/li&gt; &#xA;   &lt;li&gt;Recursive data types&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;type&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;newtype&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Polymorphism &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Parametric polymorphism&lt;/li&gt; &#xA;   &lt;li&gt;Types of standard functions&lt;/li&gt; &#xA;   &lt;li&gt;Hoogle&lt;/li&gt; &#xA;   &lt;li&gt;Polymorphic data types&lt;/li&gt; &#xA;   &lt;li&gt;Standard polymorphic data types&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Eta-reduction&lt;/li&gt; &#xA; &lt;li&gt;Function composition: dot operator &lt;code&gt;(.)&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-2&#34;&gt;https://slides.com/haskellbeginners2022/lecture-2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=rf-lie7U04Q&#34;&gt;Haskell Beginners 2022: Lecture 2&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🎮 Lecture 3: Typeclasses&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Parametric polymorphism vs Ad-hoc polymorphism&lt;/li&gt; &#xA; &lt;li&gt;Typeclasses &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;class&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;instance&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Default methods&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# MINIMAL #-}&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Small typeclasses vs Big typeclasses&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Language Extensions &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# LANGUAGE InstanceSigs #-}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Standard typeclasses &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Eq&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Haskell Equality Table&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Ord&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Num&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;deriving&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Stock derivable typeclasses&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# LANGUAGE GeneralizedNewtypeDeriving #-}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Algebraic typeclasses &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;Semigroup&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Monoid&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;Laws&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Kinds&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Functor&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Folds &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldr&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldl&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldl&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;foldr&lt;/code&gt; vs &lt;code&gt;foldl&#39;&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Foldable&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Strict and Lazy evaluation &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lazy evaluation&lt;/li&gt; &#xA;   &lt;li&gt;Tail Call Optimization (TCO)&lt;/li&gt; &#xA;   &lt;li&gt;Equational reasoning&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;{-# LANGUAGE BangPatterns #-}&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-3&#34;&gt;https://slides.com/haskellbeginners2022/lecture-3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=Vs-vvlYLtRI&#34;&gt;Haskell Beginners 2022: Lecture 3&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;🔈🎤 Lecture 4: Monads and IO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Monad example &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;code&gt;andThen&lt;/code&gt; for &lt;code&gt;Maybe&lt;/code&gt;, &lt;code&gt;Either&lt;/code&gt; and list&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Monad as programming pattern&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Monad&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The typeclass&lt;/li&gt; &#xA;   &lt;li&gt;Instances&lt;/li&gt; &#xA;   &lt;li&gt;Laws&lt;/li&gt; &#xA;   &lt;li&gt;Usage example&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;FAM&lt;/strong&gt;ily: &lt;code&gt;Functor&lt;/code&gt;, &lt;code&gt;Applicative&lt;/code&gt;, &lt;code&gt;Monad&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Purity&lt;/li&gt; &#xA; &lt;li&gt;Why Purity + Laziness is a problem for side effects?&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;IO&lt;/code&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Why does IO require a monad?&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;String&lt;/code&gt; vs &lt;code&gt;IO String&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;getLine&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;putStrLn&lt;/code&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;Main&lt;/code&gt; and &lt;code&gt;main&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Then&lt;/em&gt; operator: &lt;code&gt;&amp;gt;&amp;gt;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;do&lt;/code&gt;-notation&lt;/li&gt; &#xA; &lt;li&gt;Cabal &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Packages&lt;/li&gt; &#xA;   &lt;li&gt;&lt;code&gt;build-depends&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Functional Core, Imperative Shell&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;🎞 Slides: &lt;a href=&#34;https://slides.com/haskellbeginners2022/lecture-4&#34;&gt;https://slides.com/haskellbeginners2022/lecture-4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;📽 Video: &lt;a href=&#34;https://www.youtube.com/watch?v=12D4Y2Hdnhg&#34;&gt;Haskell Beginners 2022: Lecture 4&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s next?&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;ve finished the course, you may be interested in the following resources to continue your FP and Haskell journey:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lhbg-book.link/&#34;&gt;Learn Haskell by building a blog generator&lt;/a&gt;: A project-based course that teaches pragmatic Haskell by building a blog generator from scratch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/haskell-in-depth&#34;&gt;Haskell in Depth&lt;/a&gt;: A book about intermediate Haskell topics such as Monad Transformers, metaprogramming, testing, logging and performance analysis.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.manning.com/books/functional-design-and-architecture&#34;&gt;Functional Design and Architecture &lt;/a&gt;: Design patterns and architectures for building production quality applications using functional programming, with examples in Haskell and other FP languages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/soupi/haskell-study-plan&#34;&gt;Haskell Study Plan&lt;/a&gt;: More links on different topics and examples to real-world Haskell projects.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/willbasky/Awesome-list-of-Haskell-mentors&#34;&gt;Awesome List of Haskell mentors&lt;/a&gt;: A list of Haskell projects and mentors willing to help you master Haskell.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;History&lt;/h2&gt; &#xA;&lt;p&gt;Below is the link to the original course announcement:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kodimensional.dev/course&#34;&gt;Course announcement&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>phulin/symbolic-trace</title>
    <updated>2023-05-01T02:16:26Z</updated>
    <id>tag:github.com,2023-05-01:/phulin/symbolic-trace</id>
    <link href="https://github.com/phulin/symbolic-trace" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Symbolic execution of LLVM IR traces for program understanding.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;RESET&lt;/h1&gt; &#xA;&lt;p&gt;Reverse Engineering through Symbolic Execution of Traces: Symbolic execution of LLVM IR traces for program understanding.&lt;/p&gt; &#xA;&lt;p&gt;To evaluate a trace, first run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal configure&#xA;cabal build --ghc-options=&#34;-rtsopts&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, to run a program, grab a trace&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dist/build/Eval/Eval -q &amp;lt;qemu_build_dir&amp;gt; &amp;lt;program&amp;gt; &amp;lt;program-args&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The qemu_build_dir should be the build directory, such as ~/qemu/x86_64-linux-user.&lt;/p&gt; &#xA;&lt;p&gt;For a trace in whole-system mode, you need to gather the trace manually. First, make a PANDA record/replay recording of the execution you want to look at. Next, use Volatility or a similar tool to find the CR3 you&#39;re looking for, and then run a command like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo &#34;begin_replay &amp;lt;recording&amp;gt;&#34; | ~/qemu/i386-softmmu/qemu-system-i386 -panda-plugin ~/qemu/i386-softmmu/panda_plugins/panda_llvm_trace.so -panda-arg llvm_trace:cr3=0xDEADBEEF -monitor stdio ~/win7.1.qcows2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;followed by&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dist/build/Eval/Eval&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can do &lt;code&gt;Eval --help&lt;/code&gt; to see a list of command line options. By default, PANDA stores trace information in &lt;code&gt;/tmp&lt;/code&gt;; if you want to change this, use &lt;code&gt;Eval -d&lt;/code&gt; and &lt;code&gt;qemu -panda-arg llvm_trace:base=/other/dir&lt;/code&gt;. Eval will also probably run out stack space; increase that by adding the arguments &lt;code&gt;+RTS -K1G -RTS&lt;/code&gt;, where the 1G specifies 1 GB of stack space.&lt;/p&gt; &#xA;&lt;p&gt;This will start a server that accepts JSON requests for symbolic execution data from the RESET IDA plugin (github.com/phulin/RESETPlugin)&lt;/p&gt; &#xA;&lt;h1&gt;Files&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;types/&lt;/code&gt;: Definitions of basic types. This is in a separate Cabal package due to GHC bug #3333 - you can&#39;t have Template Haskell code in a package that links to C++ code. We use TH for the JSON parsing; aeson provides a nice auto-serialization interface.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;AppList.hs&lt;/code&gt;: Definition of a linked list type which is optimized for appending; we use this instead of normal List for pretty much everything.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Memlog.hs&lt;/code&gt;: Functions for parsing and processing the Panda dynamic log&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Instances.hs&lt;/code&gt;: Miscellanous instances of Show, mostly for debugging&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Options.hs&lt;/code&gt;: Definition and parsing of command-line arguments.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Pretty.hs&lt;/code&gt;: The Pretty class for pretty-printing; probably could be done in a much nicer way&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Expr.hs&lt;/code&gt;: Operations for working with our expression format&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Eval.hs&lt;/code&gt;: Main functions - meat of the symbolic evaluation engine&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Main.hs&lt;/code&gt;: Server code and command-line argument processing, etc&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>wasp-lang/wasp</title>
    <updated>2023-05-01T02:16:26Z</updated>
    <id>tag:github.com,2023-05-01:/wasp-lang/wasp</id>
    <link href="https://github.com/wasp-lang/wasp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The fastest way to develop full-stack web apps with React &amp; Node.js.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;80px&#34; src=&#34;https://user-images.githubusercontent.com/1536647/77317442-78625700-6d0b-11ea-9822-0fb21e557e87.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; The fastest way to develop full-stack web apps with React &amp;amp; Node.js. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/github/license/wasp-lang/wasp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/releases/latest&#34;&gt;&lt;img alt=&#34;latest release&#34; src=&#34;https://img.shields.io/github/v/release/wasp-lang/wasp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img alt=&#34;discord&#34; src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20@%20discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://wasp-lang.dev&#34;&gt;Web page&lt;/a&gt; | &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;Docs&lt;/a&gt; &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Wasp (&lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;Sp&lt;/strong&gt;ecification) is a Rails-like framework for React, Node.js and Prisma.&lt;br&gt; Build your app in a day and deploy it with a single CLI command!&lt;/p&gt; &#xA;&lt;h3&gt;Why is Wasp awesome&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🚀 &lt;strong&gt;Quick start&lt;/strong&gt;: Due to its expressiveness, you can create and deploy a production-ready web app from scratch with very few lines of concise, consistent, declarative code.&lt;/li&gt; &#xA; &lt;li&gt;😌 &lt;strong&gt;No boilerplate&lt;/strong&gt;: By abstracting away complex full-stack features, there is less boilerplate code. That means less code to maintain and understand! It also means easier upgrades.&lt;/li&gt; &#xA; &lt;li&gt;🔓 &lt;strong&gt;No lock-in&lt;/strong&gt;: You can deploy Wasp app anywhere you like. There is no lock-in into specific providers, you have full control over the code (and can actually check it out in .wasp/ dir if you are interested ).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Features&lt;/h3&gt; &#xA;&lt;p&gt;🔒 Full-stack Auth, 🖇️ RPC (Client &amp;lt;-&amp;gt; Server), 🚀 Simple Deployment, ⚙ ️Jobs, ✉️ Email Sending, 🛟 Full-stack Type Safety, ...&lt;/p&gt; &#xA;&lt;h3&gt;Code example&lt;/h3&gt; &#xA;&lt;p&gt;Simple Wasp config file in which you describe the high-level details of your web app:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// file: main.wasp&#xA;&#xA;app todoApp {&#xA;  title: &#34;ToDo App&#34;,  // visible in the browser tab&#xA;  wasp: { version: &#34;^0.10.0&#34; },&#xA;  auth: { // full-stack auth out-of-the-box&#xA;    userEntity: User, methods: { email: {...} }&#xA;  }&#xA;}&#xA;&#xA;route RootRoute { path: &#34;/&#34;, to: MainPage }&#xA;page MainPage {&#xA;  authRequired: true, // Limit access to logged in users.&#xA;  component: import Main from &#34;@client/Main.tsx&#34; // Your React code.&#xA;}&#xA;&#xA;query getTasks {&#xA;  fn: import { getTasks } from &#34;@server/tasks.js&#34;, // Your Node.js code.&#xA;  entities: [Task] // Automatic cache invalidation.&#xA;}&#xA;&#xA;entity Task {=psl  // Your Prisma data model.&#xA;    id          Int     @id @default(autoincrement())&#xA;    description String&#xA;    isDone      Boolean @default(false)&#xA;psl=}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The rest of the code you write in React / Node.js / Prisma and just reference it from the .wasp file.&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;▶&lt;/span&gt; Check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/examples/tutorials/TodoApp&#34;&gt;TodoApp example&lt;/a&gt; for the complete code example. &lt;span&gt;◀&lt;/span&gt;&lt;/p&gt; &#xA;&lt;h3&gt;How it works&lt;/h3&gt; &#xA;&lt;img width=&#34;800px&#34; src=&#34;https://user-images.githubusercontent.com/1536647/231472285-126679e5-ecce-4cbb-8579-eb3cd9ba95bf.png&#34;&gt; &#xA;&lt;p&gt;Given a simple .wasp configuration file that describes the high-level details of your web app, and .js(x)/.css/..., source files with your unique logic, Wasp compiler generates the full source of your web app in the target stack: front-end, back-end and deployment.&lt;/p&gt; &#xA;&lt;p&gt;This unique approach is what makes Wasp &#34;smart&#34; and gives it its super powers!&lt;/p&gt; &#xA;&lt;p&gt;For more information about Wasp, check &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Get started&lt;/h1&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.wasp-lang.dev/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install Wasp on OSX/Linux/WSL(Win). From there, just follow the instructions to run your first app in less than a minute!&lt;/p&gt; &#xA;&lt;p&gt;For more details check out &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;This repository&lt;/h1&gt; &#xA;&lt;p&gt;This is the main repo of the Wasp universe, containing core code (mostly &lt;code&gt;waspc&lt;/code&gt; - Wasp compiler) and the supporting materials.&lt;/p&gt; &#xA;&lt;h1&gt;Project status&lt;/h1&gt; &#xA;&lt;p&gt;Currently, Wasp is in beta, with most features flushed out and working well. However, there are still a lot of improvements and additions that we have in mind for the future, and we are working on them constantly, so you can expect a lot of changes and improvements in the future. As Wasp grows further, it should allow the development of web apps of increasing complexity!&lt;/p&gt; &#xA;&lt;p&gt;While the idea is to support multiple web tech stacks in the future, right now we are focusing on the specific stack: React + react-query, NodeJS + ExpressJS, Prisma. We might yet change that as time goes on, taking trends into account, but for now, this is serving us well to develop Wasp.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Any way you want to contribute is a good way :)!&lt;/p&gt; &#xA;&lt;p&gt;The best place to start is to check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/waspc/&#34;&gt;waspc/&lt;/a&gt;, where you can find detailed steps for the first time contributors + technical details about the Wasp compiler.&lt;/p&gt; &#xA;&lt;p&gt;Core of Wasp is built in Haskell, but there is also a lot of non-Haskell parts of Wasp, so you will certainly be able to find something for you!&lt;/p&gt; &#xA;&lt;p&gt;Even if you don&#39;t plan to submit any code, just joining the discussion on discord &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20on%20discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; and giving your feedback is already great and helps a lot (motivates us and helps us figure out how to shape Wasp)!&lt;/p&gt; &#xA;&lt;p&gt;You can also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⭐&lt;/span&gt; Star this repo to show your interest/support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📫&lt;/span&gt; Stay updated by subscribing to our &lt;a href=&#34;https://wasp-lang.dev#signup&#34;&gt;email list&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;💬&lt;/span&gt; Join the discussion at &lt;a href=&#34;https://github.com/wasp-lang/wasp/discussions&#34;&gt;https://github.com/wasp-lang/wasp/discussions&lt;/a&gt; .&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Careers&lt;/h1&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://wasp-lang.notion.site/Wasp-Careers-59fd1682c80d446f92be5fa65cc17672&#34;&gt;careers&lt;/a&gt; page for a list of currently opened positions!&lt;/p&gt;</summary>
  </entry>
</feed>