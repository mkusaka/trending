<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-08-01T02:42:20Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/cardano-node</title>
    <updated>2022-08-01T02:42:20Z</updated>
    <id>tag:github.com,2022-08-01:/input-output-hk/cardano-node</id>
    <link href="https://github.com/input-output-hk/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/a978cbb4def7018be3d0a004127da356f4db32f1c318c1a48a/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/nightly?label=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; Overview&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linux &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.musl.cardano-node-linux/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;win64 &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macos &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/macos.cardano-node-macos/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Executable&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;code&gt;here &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration &lt;code&gt;.yaml&lt;/code&gt; files&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/input-output-hk/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_. Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;Logs are output to the &lt;code&gt;logs/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;h1&gt;Profiling &amp;amp; statistics&lt;/h1&gt; &#xA;&lt;p&gt;Profiling data and RTS run stats are stored in the &lt;code&gt;profile/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for how to obtain profiling information using the scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis operations&lt;/h1&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;docs/reference/byron-genesis.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Haskell Language Server&lt;/h2&gt; &#xA;&lt;p&gt;When using Haskell Language Server with Visual Studio Code, you may find that &lt;code&gt;HLINT annotations are ignored&amp;lt;https://github.com/haskell/haskell-language-server/issues/638&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, you may run the script &lt;code&gt;./scripts/reconfigure-hlint.sh&lt;/code&gt; to generate a &lt;code&gt;.hlint.yaml&lt;/code&gt; file with HLINT ignore rules derived from the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; is essentially a container which implements several components such networking, consensus, and storage. These components have individual test coverage. The node goes through integration and release testing by Devops/QA while automated CLI tests are ongoing alongside development.&lt;/p&gt; &#xA;&lt;p&gt;Developers on &lt;code&gt;cardano-node&lt;/code&gt; can &lt;code&gt;launch their own testnets &amp;lt;doc/getting-started/launching-a-testnet.md&amp;gt;&lt;/code&gt;_ or &lt;code&gt;run the chairman tests &amp;lt;doc/getting-started/running-chairman-tests.md&amp;gt;&lt;/code&gt;_ locally.&lt;/p&gt; &#xA;&lt;h2&gt;Chairman tests&lt;/h2&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;h2&gt;Pretty printing CBOR encoded files&lt;/h2&gt; &#xA;&lt;p&gt;It may be useful to print the on chain representations of blocks, delegation certificates, txs and update proposals. There are two commands that do this (for any cbor encoded file):&lt;/p&gt; &#xA;&lt;p&gt;To pretty print as CBOR: &lt;code&gt;cabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validate CBOR files&lt;/h2&gt; &#xA;&lt;p&gt;You can validate Byron era blocks, delegation certificates, txs and update proposals with the &lt;code&gt;validate-cbor&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Native Tokens&lt;/h1&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started we have compiled a handy list of resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation for native tokens &amp;lt;https://docs.cardano.org/native-tokens/learn&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;You can also read more about &lt;code&gt;native tokens and how they compare to ada and ERC20 &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/features.rst&amp;gt;&lt;/code&gt;_. Browse native tokens created on the Cardano blockchain and see their transactions in an interactive dashboard that allows filtering and searching: nativetokens.da.iogservices.io.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://input-output-hk.github.io/cardano-node/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;./scripts/haddocs.sh&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-wallet</title>
    <updated>2022-08-01T02:42:20Z</updated>
    <id>tag:github.com,2022-08-01:/input-output-hk/cardano-wallet</id>
    <link href="https://github.com/input-output-hk/cardano-wallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP server &amp; command-line for managing UTxOs and HD wallets in Cardano.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Wallet&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/.github/images/cardano-logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/7ea3dac7a16f066d8dfc8f426a9a9f7a2131e899cd96c444cf/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet-nightly&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/59ea9363b8526e867005ca8839db47715bc5f661f36e490143/master?label=BENCHMARK&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/actions?query=workflow%3Awindows&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-wallet/windows?label=Windows&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hydra.iohk.io/jobset/Cardano/cardano-wallet#tabs-jobs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?style=for-the-badge&amp;amp;url=https%3A%2F%2Fhydra.iohk.io%2Fjob%2FCardano%2Fcardano-wallet%2Frequired%2Fshield&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/actions/workflows/publish.yml&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-wallet/Publish%20Docs?label=Docs&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &#xA; &lt;!--&#xA;  &lt;a href=&#34;https://coveralls.io/github/input-output-hk/cardano-wallet?branch=HEAD&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/input-output-hk/cardano-wallet/HEAD?style=for-the-badge&#34; /&gt;&lt;/a&gt;&#xA;  --&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Cardano Wallet helps you manage your Ada. You can use it to send and receive payments on the &lt;a href=&#34;https://www.cardano.org&#34;&gt;Cardano&lt;/a&gt; blockchain.&lt;/p&gt; &#xA;&lt;p&gt;This project provides an HTTP Application Programming Interface (API) and command-line interface (CLI) for working with your wallet.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as a component of a frontend such as &lt;a href=&#34;https://daedaluswallet.io&#34;&gt;Daedalus&lt;/a&gt;, which provides a friendly user interface for wallets. Most users who would like to use Cardano should start with Daedalus.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This source code repository contains the next major version of Cardano Wallet, which has been completely rewritten for the &lt;a href=&#34;https://roadmap.cardano.org/&#34;&gt;Shelley&lt;/a&gt; phase.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; The Byron version of Cardano Wallet is in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-sl&#34;&gt;cardano-sl&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/docker-compose.yml&#xA;NETWORK=testnet docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fantastic! The server is up-and-running, waiting for HTTP requests on &lt;code&gt;localhost:8090/v2&lt;/code&gt; e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:8090/v2/network/information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to be accessed via CLI, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --network host --rm inputoutput/cardano-wallet network information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/Docker&#34;&gt;Docker&lt;/a&gt; for more information about using docker.&lt;/p&gt; &#xA;&lt;p&gt;NixOS users can also use the &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/NixOS&#34;&gt;NixOS service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to install (Linux / Windows / Mac OS)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Installation Instructions&lt;/strong&gt; for each available &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Latest releases&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;cardano-wallet&lt;/th&gt; &#xA;    &lt;th&gt;cardano-node (compatible versions)&lt;/th&gt; &#xA;    &lt;th&gt;SMASH (compatible versions)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;master&lt;/code&gt; branch&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.35.2&#34;&gt;1.35.2&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-07-01&#34;&gt;v2022-07-01&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.35.0&#34;&gt;1.35.0&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-05-27&#34;&gt;v2022-05-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-04-27&#34;&gt;v2022-04-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to build from sources&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/developers/Building&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/contributing/Testing&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Audience&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide&#34;&gt;User Guide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of Cardano Wallet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/cli&#34;&gt;CLI Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/api/edge&#34;&gt;API Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/&#34;&gt;Cardano Wallet Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/adrestia/&#34;&gt;Adrestia Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-ledger</title>
    <updated>2022-08-01T02:42:20Z</updated>
    <id>tag:github.com,2022-08-01:/input-output-hk/cardano-ledger</id>
    <link href="https://github.com/input-output-hk/cardano-ledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ledger implementation and specifications of the Cardano blockchain.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Cardano Ledger&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/actions/workflows/haskell.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-ledger/Haskell%20CI/master.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository contains the formal specifications, executable models, and implementations of the Cardano Ledger.&lt;/p&gt; &#xA;&lt;p&gt;The documents are built in our CI and can be readily accessed using the following links:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Era&lt;/th&gt; &#xA;   &lt;th&gt;Design Documents&lt;/th&gt; &#xA;   &lt;th&gt;Formal Specification&lt;/th&gt; &#xA;   &lt;th&gt;CDDL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Byron&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronChainSpec/latest/download-by-type/doc-pdf/blockchain-spec&#34; title=&#34;Specification of the Blockchain Layer&#34;&gt;Chain Spec&lt;/a&gt;, &lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Ledger Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/blocksCDDLSpec/latest/download-by-type/doc-pdf/binary&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelley&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec&#34; title=&#34;Design Specification for Delegation and Incentives in Cardano&#34;&gt;Design&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/shelleyLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Allegra &amp;amp; Mary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eprint.iacr.org/2020/895&#34; title=&#34;Multi-Currency Ledgers&#34;&gt;Multi-Currency&lt;/a&gt;, &lt;a href=&#34;https://iohk.io/en/research/library/papers/utxoma-utxo-with-multi-asset-support/&#34; title=&#34;UTXOma:UTXO with Multi-Asset Support&#34;&gt;UTXOma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.shelley-ma/latest/download-by-type/doc-pdf/shelley-ma&#34; title=&#34;A Formal Specification of the Cardano Ledger with a Native Multi-Asset Implementation&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley-ma/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alonzo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/the-extended-utxo-model/&#34; title=&#34;The Extended UTXO Model&#34;&gt;eUTXO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.alonzo-ledger/latest/download-by-type/doc-pdf/alonzo-changes&#34; title=&#34;A Formal Specification of the Cardano Ledger integrating Plutus Core&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/alonzo/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Babbage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/on-uc-secure-range-extension-and-batch-verification-for-ecvrf/&#34; title=&#34;On UC-Secure Range Extension and Batch Verification for ECVRF&#34;&gt;batch-verification&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/159&#34; title=&#34;Reference inputs&#34;&gt;CIP-31&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/160&#34; title=&#34;Inline datums&#34;&gt;CIP-32&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/161&#34; title=&#34;Reference scripts&#34;&gt;CIP-33&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.babbage-ledger/latest/download-by-type/doc-pdf/babbage-changes&#34; title=&#34;Formal Specification of the Cardano Ledger for the Babbage era&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/babbage/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other Documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/nonIntegerCalculations/latest/download-by-type/doc-pdf/non-integer-calculations&#34;&gt;Non-integer calculations specification&lt;/a&gt;: details on the parts of the Shelley specification that use real numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.pool-ranking/latest/download-by-type/doc-pdf/pool-ranking&#34;&gt;Stake pool ranking specification&lt;/a&gt;: details for a robust stake pool ranking mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/semanticsSpec/latest/download-by-type/doc-pdf/small-step-semantics&#34;&gt;Explanation of the small-step-semantics framework&lt;/a&gt;: a guide to the notation and style used by our ledger rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there is a formalization of the Ledger Specification in Isabelle/HOL which can be found &lt;a href=&#34;https://github.com/input-output-hk/fm-ledger-formalization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Some user documentation is published on &lt;a href=&#34;https://cardano-ledger.readthedocs.io/en/latest&#34;&gt;Read the Docs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Repository structure&lt;/h1&gt; &#xA;&lt;p&gt;The directory structure of this repository is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron&#34;&gt;byron&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger&#34;&gt;ledger&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain&#34;&gt;chain&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/cddl-spec&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley&#34;&gt;shelley&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/design-spec&#34;&gt;design-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma&#34;&gt;Timelocks and Multi-Assets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo&#34;&gt;Smart Contracts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/libs&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://nixos.org/nix/download.html&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; for building everything in this repository. Haskell files can be built with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt; inside of a nix shell.&lt;/p&gt; &#xA;&lt;h2&gt;Nix Cache&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; it is recommended that you setup the cache, so that it can reuse built artifacts, reducing the compilation times dramatically:&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; add the snippet below to your &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix.binaryCaches = [&#xA;  &#34;https://cache.nixos.org&#34;&#xA;  &#34;https://hydra.iohk.io&#34;&#xA;];&#xA;&#xA;nix.binaryCachePublicKeys = [&#xA;  &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;nix&lt;/code&gt; package manager next to another operating system put the following in &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; if you have a system-wide &lt;code&gt;nix&lt;/code&gt; installation , or in &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; if you have a local installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substituters        = https://hydra.iohk.io https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the LaTeX documents and executable specifications&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; the documents and Haskell code can be readily built by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The LaTeX documents will be places inside directories named &lt;code&gt;result*&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result-2/ledger-spec.pdf&#xA;result-3/delegation_design_spec.pdf&#xA;result-4/non-integer-calculations.pdf&#xA;result-5/small-step-semantics.pdf&#xA;result-6/ledger-spec.pdf&#xA;result/blockchain-spec.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building individual LaTeX documents&lt;/h2&gt; &#xA;&lt;p&gt;Change to the latex directory where the latex document is (e.g. &lt;code&gt;eras/shelley/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Shelley release, or &lt;code&gt;eras/byron/ledger/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Byron release). Then, build the latex document by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a continuous compilation of the &lt;code&gt;LaTeX&lt;/code&gt; file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run &#34;make watch&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Updating dependencies&lt;/h2&gt; &#xA;&lt;p&gt;When updating the &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/cabal.project&#34;&gt;pinned hackage index-state&lt;/a&gt; (for example, in order to get a new version of a package), it&#39;s necessary to make sure that &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/nix/sources.json&#34;&gt;&lt;code&gt;hackage.nix&lt;/code&gt; pin&lt;/a&gt; points to a later date than the index-state, in order to avoid an error like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;error: Unknown index-state 2021-08-08T00:00:00Z, the latest index-state I know about is 2021-08-06T00:00:00Z. You may need to update to a newer hackage.nix.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can update the &lt;code&gt;sources.json&lt;/code&gt; file using niv:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;niv update hackage&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Submitting an issue&lt;/h1&gt; &#xA;&lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>