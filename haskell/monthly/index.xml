<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Monthly Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-04T02:42:09Z</updated>
  <subtitle>Monthly Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>facebook/duckling</title>
    <updated>2022-06-04T02:42:09Z</updated>
    <id>tag:github.com,2022-06-04:/facebook/duckling</id>
    <link href="https://github.com/facebook/duckling" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Language, engine, and tooling for expressing, testing, and evaluating composable language rules on input strings.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://github.com/facebook/duckling/raw/main/logo.png&#34; alt=&#34;Duckling Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Duckling &lt;a href=&#34;https://opensource.fb.com/support-ukraine&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Support-Ukraine-FFD500?style=flat&amp;amp;labelColor=005BBB&#34; alt=&#34;Support Ukraine&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://travis-ci.org/facebook/duckling&#34;&gt;&lt;img src=&#34;https://travis-ci.org/facebook/duckling.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Duckling is a Haskell library that parses text into structured data.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;&#34;the first Tuesday of October&#34;&#xA;=&amp;gt; {&#34;value&#34;:&#34;2017-10-03T00:00:00.000-07:00&#34;,&#34;grain&#34;:&#34;day&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;A Haskell environment is required. We recommend using &lt;a href=&#34;https://haskell-lang.org/get-started&#34;&gt;stack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;On Linux and MacOS you&#39;ll need to install PCRE development headers. On Linux, use your package manager to install them. On MacOS, the easiest way to install them is with &lt;a href=&#34;https://brew.sh/&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If that doesn&#39;t help, try running &lt;code&gt;brew doctor&lt;/code&gt; and fix the issues it finds.&lt;/p&gt; &#xA;&lt;h2&gt;Quickstart&lt;/h2&gt; &#xA;&lt;p&gt;To compile and run the binary:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack build&#xA;stack exec duckling-example-exe&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first time you run it, it will download all required packages.&lt;/p&gt; &#xA;&lt;p&gt;This runs a basic HTTP server. Example request:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_GB&amp;amp;text=tomorrow at eight&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the example application, all dimensions are enabled by default. Provide the parameter &lt;code&gt;dims&lt;/code&gt; to specify which ones you want. Examples:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Identify credit card numbers only:&#xA;$ curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_US&amp;amp;text=&#34;4111-1111-1111-1111&#34;&amp;amp;dims=&#34;[&#34;credit-card-number&#34;]&#34;&#39;&#xA;If you want multiple dimensions, comma-separate them in the array:&#xA;$ curl -XPOST http://0.0.0.0:8000/parse --data &#39;locale=en_US&amp;amp;text=&#34;3 cups of sugar&#34;&amp;amp;dims=&#34;[&#34;quantity&#34;,&#34;numeral&#34;]&#34;&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See &lt;code&gt;exe/ExampleMain.hs&lt;/code&gt; for an example on how to integrate Duckling in your project. If your backend doesn&#39;t run Haskell or if you don&#39;t want to spin your own Duckling server, you can directly use &lt;a href=&#34;https://wit.ai&#34;&gt;wit.ai&lt;/a&gt;&#39;s built-in entities.&lt;/p&gt; &#xA;&lt;h2&gt;Supported dimensions&lt;/h2&gt; &#xA;&lt;p&gt;Duckling supports many languages, but most don&#39;t support all dimensions yet (&lt;strong&gt;we need your help!&lt;/strong&gt;). Please look into &lt;a href=&#34;https://github.com/facebook/duckling/raw/master/Duckling/Dimensions&#34;&gt;this directory&lt;/a&gt; for language-specific support.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Dimension&lt;/th&gt; &#xA;   &lt;th&gt;Example input&lt;/th&gt; &#xA;   &lt;th&gt;Example value output&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;AmountOfMoney&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;42â‚¬&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:42,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;EUR&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;CreditCardNumber&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;4111-1111-1111-1111&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;4111111111111111&#34;,&#34;issuer&#34;:&#34;visa&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Distance&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;6 miles&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:6,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;mile&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Duration&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;3 mins&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:3,&#34;minute&#34;:3,&#34;unit&#34;:&#34;minute&#34;,&#34;normalized&#34;:{&#34;value&#34;:180,&#34;unit&#34;:&#34;second&#34;}}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Email&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&lt;a href=&#34;mailto:duckling-team@fb.com&#34;&gt;duckling-team@fb.com&lt;/a&gt;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;duckling-team@fb.com&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Numeral&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;eighty eight&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:88,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Ordinal&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;33rd&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:33,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;PhoneNumber&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;+1 (650) 123-4567&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;(+1) 6501234567&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Quantity&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;3 cups of sugar&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:3,&#34;type&#34;:&#34;value&#34;,&#34;product&#34;:&#34;sugar&#34;,&#34;unit&#34;:&#34;cup&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Temperature&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;80F&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:80,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;fahrenheit&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Time&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;today at 9am&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;values&#34;:[{&#34;value&#34;:&#34;2016-12-14T09:00:00.000-08:00&#34;,&#34;grain&#34;:&#34;hour&#34;,&#34;type&#34;:&#34;value&#34;}],&#34;value&#34;:&#34;2016-12-14T09:00:00.000-08:00&#34;,&#34;grain&#34;:&#34;hour&#34;,&#34;type&#34;:&#34;value&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Url&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;&lt;a href=&#34;https://api.wit.ai/message?q=hi&#34;&gt;https://api.wit.ai/message?q=hi&lt;/a&gt;&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:&#34;https://api.wit.ai/message?q=hi&#34;,&#34;domain&#34;:&#34;api.wit.ai&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;code&gt;Volume&lt;/code&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&#34;4 gallons&#34;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;code&gt;{&#34;value&#34;:4,&#34;type&#34;:&#34;value&#34;,&#34;unit&#34;:&#34;gallon&#34;}&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/facebook/duckling/raw/master/exe/CustomDimensionExample.hs&#34;&gt;Custom dimensions&lt;/a&gt; are also supported.&lt;/p&gt; &#xA;&lt;h2&gt;Extending Duckling&lt;/h2&gt; &#xA;&lt;p&gt;To regenerate the classifiers and run the test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack build :duckling-regen-exe &amp;amp;&amp;amp; stack exec duckling-regen-exe &amp;amp;&amp;amp; stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It&#39;s important to regenerate the classifiers after updating the code and before running the test suite.&lt;/p&gt; &#xA;&lt;p&gt;To extend Duckling&#39;s support for a dimension in a given language, typically 4 files need to be updated:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/&amp;lt;Dimension&amp;gt;/&amp;lt;Lang&amp;gt;/Rules.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/&amp;lt;Dimension&amp;gt;/&amp;lt;Lang&amp;gt;/Corpus.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/Dimensions/&amp;lt;Lang&amp;gt;.hs&lt;/code&gt; (if not already present in &lt;code&gt;Duckling/Dimensions/Common.hs&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Duckling/Rules/&amp;lt;Lang&amp;gt;.hs&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add a new language:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make sure that the language code used follows the &lt;a href=&#34;https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes&#34;&gt;ISO-639-1 standard&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The first dimension to implement is &lt;code&gt;Numeral&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://github.com/facebook/duckling/commit/24d3f199768be970149412c95b1c1bf5d76f8240&#34;&gt;this example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To add a new locale:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There should be a need for diverging rules between the locale and the language.&lt;/li&gt; &#xA; &lt;li&gt;Make sure that the locale code is a valid &lt;a href=&#34;https://www.iso.org/obp/ui/#search/code/&#34;&gt;ISO3166 alpha2 country code&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Follow &lt;a href=&#34;https://github.com/facebook/duckling/commit/1ab5f447d2635fe6d48887a501d333a52adff5b9&#34;&gt;this example&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Rules have a name, a pattern and a production. Patterns are used to perform character-level matching (regexes on input) and concept-level matching (predicates on tokens). Productions are arbitrary functions that take a list of tokens and return a new token.&lt;/p&gt; &#xA;&lt;p&gt;The corpus (resp. negative corpus) is a list of examples that should (resp. shouldn&#39;t) parse. The reference time for the corpus is Tuesday Feb 12, 2013 at 4:30am.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Duckling.Debug&lt;/code&gt; provides a few debugging tools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stack repl --no-load&#xA;&amp;gt; :l Duckling.Debug&#xA;&amp;gt; debug (makeLocale EN $ Just US) &#34;in two minutes&#34; [Seal Time]&#xA;in|within|after &amp;lt;duration&amp;gt; (in two minutes)&#xA;-- regex (in)&#xA;-- &amp;lt;integer&amp;gt; &amp;lt;unit-of-duration&amp;gt; (two minutes)&#xA;-- -- integer (0..19) (two)&#xA;-- -- -- regex (two)&#xA;-- -- minute (grain) (minutes)&#xA;-- -- -- regex (minutes)&#xA;[Entity {dim = &#34;time&#34;, body = &#34;in two minutes&#34;, value = RVal Time (TimeValue (SimpleValue (InstantValue {vValue = 2013-02-12 04:32:00 -0200, vGrain = Second})) [SimpleValue (InstantValue {vValue = 2013-02-12 04:32:00 -0200, vGrain = Second})] Nothing), start = 0, end = 14}]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Duckling is &lt;a href=&#34;https://raw.githubusercontent.com/facebook/duckling/main/LICENSE&#34;&gt;BSD-licensed&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jacobstanley/sudo4win</title>
    <updated>2022-06-04T02:42:09Z</updated>
    <id>tag:github.com,2022-06-04:/jacobstanley/sudo4win</id>
    <link href="https://github.com/jacobstanley/sudo4win" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/ouroboros-network</title>
    <updated>2022-06-04T02:42:09Z</updated>
    <id>tag:github.com,2022-06-04:/input-output-hk/ouroboros-network</id>
    <link href="https://github.com/input-output-hk/ouroboros-network" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of the Ouroboros family of consensus algorithms, with its networking support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ouroboros-Network&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;io-sim&lt;/code&gt; - &lt;code&gt;IOSim&lt;/code&gt; simulator monad which supports asynchronous exceptions, &lt;code&gt;STM&lt;/code&gt; transactions and &lt;code&gt;async&lt;/code&gt; interface, timers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io-classes&lt;/code&gt; - type classes, all of them have instance for both &lt;code&gt;IOSim&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typed-protocols&lt;/code&gt; - session type framework with support of &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_pipelining&#34;&gt;protocol pipelining&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See 45min Haskell eXchange 2019 &lt;a href=&#34;https://skillsmatter.com/skillscasts/14633-45-minute-talk-by-duncan-coutts&#34;&gt;talk&lt;/a&gt; by @dcoutts.&lt;/li&gt; &#xA;   &lt;li&gt;See three 50min Monadic Party 2019 workshop talks by @coot: &lt;a href=&#34;https://www.youtube.com/watch?v=j8gza2L61nM&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=oV6KSl1srL8&#34;&gt;Part 2&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=nOIQCRPwmPA&#34;&gt;Part 3&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network&lt;/code&gt;- ouroboros network package which implements protocols which to run ouroboros family of protocols, multiplexing layer.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/input-output-hk/cardano-byron-proxy&#34;&gt;&lt;code&gt;byron-proxy&lt;/code&gt;&lt;/a&gt; is a network protocol proxy between Byron and Shelley. It now lives in a separate repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have two documents which describe various levels of the networking layer of the Cardano Shelley implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/1&#34;&gt;Introduction to the design of Data Diffusion and Networking of Cardano Shelley&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document explains the technical requirements and key constraints for the networking layer of the &lt;em&gt;Cardano Shelley&lt;/em&gt; implementation of &lt;em&gt;Ouroboros Praos&lt;/em&gt;. This is a design document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/2&#34;&gt;The Shelley Networking Protocol&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document is a technical specification of the networking protocol. It includes serialisation formats, necessary details of multiplexer and technical specifications of mini-protocols used by either &lt;em&gt;node-to-node&lt;/em&gt; and &lt;em&gt;node-to-client&lt;/em&gt; flavours of the protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-network/&#34;&gt;Haddock documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.cardano.org/en/latest/&#34;&gt;Official Cardano Documentation&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Specifically the section &#34;Explore Cardano&#34; is helpful, since it talks about the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-architecture/overview&#34;&gt;Cardano Architecture&lt;/a&gt;, &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-design-rationale&#34;&gt;Cardano Design Rationale&lt;/a&gt;, the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-network/about-the-cardano-network&#34;&gt;Cardano Network&lt;/a&gt;, etc. Although the Cardano documentation is less detailed, it is a good place to start and refresh some more basic concepts about Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network API&lt;/h2&gt; &#xA;&lt;p&gt;The API consists of three layers:&lt;/p&gt; &#xA;&lt;p&gt;â€¢ mini-protocol api&#39;s, which are GADTs for each mini-protocol under &lt;code&gt;Ouroboros.Network.Protocol&lt;/code&gt;; this hides heavy type machinery of session types. One only needs the typed &lt;code&gt;Peer&lt;/code&gt; type when one is using &lt;code&gt;runPeer&lt;/code&gt; or &lt;code&gt;runPeerPipelined&lt;/code&gt; function and each protocol exposes a function to create it (e.g. &lt;code&gt;Ouroboros.Network.Protocol.ChainSync.Client.chainSyncClientPeer&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;â€¢ callback &lt;code&gt;ptcl -&amp;gt; channel -&amp;gt; m ()&lt;/code&gt; where &lt;code&gt;ptcl&lt;/code&gt; is enumeration for each mini-protocol, this is either &lt;code&gt;NodeToNodeProtocols&lt;/code&gt; or &lt;code&gt;NodeToClientProtocols&lt;/code&gt;. The callback is wrapped in &lt;code&gt;OuroborosApplication&lt;/code&gt; GADT which allows to differentiate the initiator / responder (or client / server) callbacks.&lt;/p&gt; &#xA;&lt;p&gt;â€¢ versioning which is a map from version numbers to the above callbacks and version data (the tricky part here is that version data type can be different between different versions; there is a simple way of building this map using a semigroup). You can use &lt;code&gt;simpleSingletonVersion&lt;/code&gt; if your application does not depend on negotiated version data. However, &lt;code&gt;Ouroboros.Network.NodeToNode&lt;/code&gt; and &lt;code&gt;Ouroboros.Network.NodeToClient&lt;/code&gt; expose &lt;code&gt;V1&lt;/code&gt; api which hides versioning from the caller.&lt;/p&gt; &#xA;&lt;h2&gt;Demo applications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/Ouroboros-Network-Demo&#34;&gt;demo-chain-sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/cardano-ping&#34;&gt;cardano-ping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/network-mux/demo/mux-demo.hs&#34;&gt;mux-demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ouroboros-network-framework/demo/ping-pong.hs&#34;&gt;demo-ping-pong&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/Win32-network/demo/named-pipe-demo.hs&#34;&gt;named-pipe-demo&lt;/a&gt; (Windows only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ntp-client/demo/Main.hs&#34;&gt;demo-ntp-client&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Instructions&lt;/summary&gt; To run a demo type: &#xA; &lt;pre&gt;&lt;code&gt;cabal run &amp;lt;DEMO_NAME&amp;gt; --&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After &lt;code&gt;--&lt;/code&gt; you will need to pass arguments, when a demo is run without arguments it will specify what arguments it needs.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Ouroboros-Consensus&lt;/h1&gt; &#xA;&lt;p&gt;Consensus layer of the family Ouroboros blockchain protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Ouroboros-Consensus Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;ouroboros-consensus/docs&lt;/code&gt; folder contains documentation about the consensus layer. Start with the &lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/ouroboros-consensus/docs/Contributing.md&#34;&gt;README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.consensus-docs.x86_64-linux/latest/download/1&#34;&gt;The Cardano Consensus and Storage Layer&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This technical report explains the design of the consensus and storage layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;The consensus team uses &lt;code&gt;stylish-haskell&lt;/code&gt; &amp;gt;= 0.11.0.0 to format its code. This is enforced by CI.&lt;/p&gt; &#xA;&lt;p&gt;Either enable editor integration or call the script used by CI itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Nix, you can use the following command, which will build and use the right version of &lt;code&gt;stylish-haskell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --run ./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>