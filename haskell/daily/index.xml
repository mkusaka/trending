<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-03-19T01:29:22Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>kamalsacranie/anki-panky</title>
    <updated>2024-03-19T01:29:22Z</updated>
    <id>tag:github.com,2024-03-19:/kamalsacranie/anki-panky</id>
    <link href="https://github.com/kamalsacranie/anki-panky" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Pandoc Markdown Anki collection compiler&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;300&#34; align=&#34;center&#34; src=&#34;https://raw.githubusercontent.com/kamalsacranie/anki-panky/mucho/assets/logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;Anki Panky is a &lt;strong&gt;Pandoc Markdown&lt;/strong&gt; to &lt;a href=&#34;https://apps.ankiweb.net&#34;&gt;Anki&lt;/a&gt; &lt;em&gt;&lt;strong&gt;hierarchical&lt;/strong&gt;&lt;/em&gt; flashcard deck generator.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Basically, most stuff you can do in Pandoc translates into HTML into your cards!!!!! How good&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Two-minute sales pitch&lt;/h1&gt; &#xA;&lt;p&gt;I really &lt;em&gt;don&#39;t&lt;/em&gt; like to do any reasonable amount of typing-centric work outside of my &lt;a href=&#34;https://youtu.be/QMVIJhC9Veg?si=hbYKs0gk7xSrLfuw&#34;&gt;Personal Development Environment&lt;/a&gt;. As such, I find the process of making decks in Anki&#39;s GUI to be an insanely hard task which I almost certainly never end up doing. There is just too much friction for me to want to invest the time to do so. I really &lt;em&gt;love&lt;/em&gt; writing Markdown notes about anything that I&#39;m learning. I feel &lt;strong&gt;productive as shit&lt;/strong&gt;, I can use &lt;strong&gt;version control&lt;/strong&gt;, and I can use any ecosystem I plugins my heart desires because at the end of the day, I&#39;m just writing text in a code editor. But probably the most important thing is that I can use &lt;a href=&#34;https://pandoc.org&#34;&gt;Pandoc&lt;/a&gt; to render my markdown to a lovely PDF, slide deck, or web-page using the same source file. &lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc&#39;s markdown syntax&lt;/a&gt; makes writing detailed, technical markdown documents quite easy.&lt;/p&gt; &#xA;&lt;p&gt;The desire to use Pandoc-style markdown to write my Anki decks is the titular reason for this bit of software. The second reason was that I couldn&#39;t find any other software which did exactly what I wanted. The compilation functionality I wanted for the MVP was the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The &lt;strong&gt;directory structure&lt;/strong&gt; in which my markdown files are kept &lt;strong&gt;reflects the Anki deck/collection structure&lt;/strong&gt;. I.e., The root directory is the base name of the deck (&#34;Deck::{subdeck-name}::...etc&#34;).&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;syntax&lt;/strong&gt; that I use to define cards should be flexible enough to let me create single-line, and multi-line &#34;fronts&#34; of cards &lt;strong&gt;without having to resort to putting raw HTML in my document&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;strong&gt;syntax&lt;/strong&gt; should also be non-invasive when compiling to PDFs of beamer slides. This is because I may want to print the cards out and review them in reality in the case where I have an exam.&lt;/li&gt; &#xA; &lt;li&gt;Use media from &lt;strong&gt;wherever I want in my file system&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;There should be some basic avoidance for duplication when importing to Anki.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Feature overview&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Uses bog-standard Pandoc syntax&lt;/li&gt; &#xA; &lt;li&gt;Syntax doesn&#39;t interfere with other Pandoc output formats&lt;/li&gt; &#xA; &lt;li&gt;Arbitrarily nested collection directory structure&lt;/li&gt; &#xA; &lt;li&gt;Use images from anywhere in your file system. They &lt;strong&gt;do not need to be colocated with your markdown decks&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;You can use any file extension for your markdown decks. They don&#39;t need to have a &lt;code&gt;.md&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;You can add tags to your cards&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Card syntax&lt;/h1&gt; &#xA;&lt;p&gt;If you have a short question for the front of your card, you can use an H1 to represent the front of your question card. Then the content which follows &lt;strong&gt;up until the next card (H1)&lt;/strong&gt; represents the back of your card:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# What is the capital of France?&#xA;&#xA;Paris&#xA;&#xA;# What if I want to use maths in my flashcards&#xA;&#xA;Just fucking do this:&#xA;&#xA;\begin{equation*}&#xA;  x = \dfrac{-b \pm \sqrt{4ac}}{2a}&#xA;\end{equation*}&#xA;&#xA;or this&#xA;&#xA;$$&#xA;\begin{aligned}&#xA;&amp;amp;\int_{-\infty}^{\infty} e^{-x^2/2} \left( \frac{\partial H}{\partial t} +&#xA;\nabla \cdot (\mathbf{v} H) - K \Delta H \right) dx \\&#xA;&amp;amp;\qquad = \int_{-\infty}^{\infty} e^{-x^2/2} \left( -\frac{\partial V}{\partial&#xA;x} + \mathbf{v} \cdot \nabla H + H \nabla \cdot \mathbf{v} - K \Delta H \right)&#xA;dx \\&#xA;&amp;amp;\qquad = \int_{-\infty}^{\infty} e^{-x^2/2} \left( -\frac{\partial V}{\partial&#xA;x} + \frac{\partial}{\partial x} \left( H v_x \right) + \frac{\partial}{\partial&#xA;y} \left( H v_y \right) + \frac{\partial}{\partial z} \left( H v_z \right)&#xA;\right. \\&#xA;&amp;amp;\qquad = 0&#xA;\end{aligned}&#xA;$$&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want a multi-line heading, the you should start the slide with a horizontal rule and then split the slide with the &lt;a href=&#34;https://pandoc.org/MANUAL.html#inserting-pauses&#34;&gt;Pandoc slide pause syntax&lt;/a&gt; as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;&#xA;This is now the front of the card.&#xA;&#xA;. . .&#xA;&#xA;This is now the back of the card.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or an alternative syntax for multi-line front cards is to use an H1, The title of which gets put into the front of the card too.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# This is a title for the front of the card&#xA;&#xA;The fact that there is a dotted split line below this means that this is an&#xA;extended card. Hence, this is still the front&#xA;&#xA;. . .&#xA;&#xA;This is now the back&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Adding tags to cards&lt;/h2&gt; &#xA;&lt;p&gt;You can also assign tags to cards by using the &lt;code&gt;AnkiTags&lt;/code&gt; HTML tag. The tags for the card is the list of space-separated tags which follow the tag. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;. . .&#xA;&#xA;This is the back of my card&#xA;&#xA;&amp;lt;AnkiTags this-is my tag list/&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the tags must be at the &lt;strong&gt;end of the card&lt;/strong&gt; as the last paragraph.&lt;/p&gt; &#xA;&lt;h2&gt;Images&lt;/h2&gt; &#xA;&lt;p&gt;You can use images as you would in a regular markdown document. The get mapped correctly in the .apkg file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;![This is the alt text](path/to/image.png)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;For some examples of how to use anything, you can check the &lt;code&gt;test-dir&lt;/code&gt; file in the repo.&lt;/p&gt; &#xA;&lt;h1&gt;Naming your deck/subdecks&lt;/h1&gt; &#xA;&lt;p&gt;The default name for your collection/deck is the name of the input file/folder. If you want to specify the name of a markdown deck &lt;strong&gt;file&lt;/strong&gt;, you can add the following metadata to the top of your file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;---&#xA;name: My Deck Name&#xA;---&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If my file name was for example &lt;code&gt;my-deck.md&lt;/code&gt;, then the name of the deck would be &#34;{prefix}::My Deck Name&#34;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;You can name a folder of decks using a dotfile&lt;/strong&gt;. If you want all decks in a folder to be prefixed by a certain name, you can add a &lt;code&gt;.My Deck Name&lt;/code&gt; file to the (the name of the file can be anything). Hence, the name of your collection will be &#34;{prefix}::My Deck Name::{subdeck-name}::...etc&#34;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note, &lt;em&gt;&lt;strong&gt;you can have arbitrarily nested directories&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;CLI arguments&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;--verbose&lt;/code&gt; or &lt;code&gt;-V&lt;/code&gt;: verbose output&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--version&lt;/code&gt; or &lt;code&gt;-v&lt;/code&gt;: output version number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--name&lt;/code&gt;: name the collection output (can only be used when processing one collection)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;--output&lt;/code&gt; or &lt;code&gt;-o&lt;/code&gt;: specify the output directory of the collections^[If the directory doesn&#39;t exist, it is automatically created]&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-+css&lt;/code&gt; or &lt;code&gt;--css&lt;/code&gt;: append to the default card CSS or override the card CSS completely. You can either put in &lt;strong&gt;raw CSS&lt;/strong&gt; or a &lt;strong&gt;path to a CSS file&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;To be added&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Close support&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Syntax highlighting for code blocks&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Figure out a way to use collection specific CLI arguments for multiple collections&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Nekory23/Image-Compressor</title>
    <updated>2024-03-19T01:29:22Z</updated>
    <id>tag:github.com,2024-03-19:/Nekory23/Image-Compressor</id>
    <link href="https://github.com/Nekory23/Image-Compressor" rel="alternate"></link>
    <summary type="html">&lt;p&gt;{EPITECH} | Second year | Functionnal programming&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Image-Compressor&lt;/h1&gt; &#xA;&lt;p&gt;{EPITECH} | Second year | Functionnal programming&lt;/p&gt; &#xA;&lt;p&gt;A pretty basic way to compress image consists in reducing the number of colors it contains.&lt;/p&gt; &#xA;&lt;p&gt;3 steps are needed to do so:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;read the image and extract the colors of each pixel,&lt;/li&gt; &#xA; &lt;li&gt;cluster these colors, and replace each color of a given cluster by the mean color of this cluster,&lt;/li&gt; &#xA; &lt;li&gt;index the means of the cluster, and create the compressed image.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In this project, the first and third steps, reading from and writing into images, are considered as bonus. You are to focus on the second part of the process: clustering.&lt;/p&gt; &#xA;&lt;p&gt;From a file listing all the pixels of the image with their position and color, regroup them into a given number of clusters, according to their colors.&lt;/p&gt; &#xA;&lt;p&gt;See the subject for further details !&lt;/p&gt; &#xA;&lt;p&gt;========================&lt;/p&gt; &#xA;&lt;p&gt;Grade : A | Mark : 17.3&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Category&lt;/th&gt; &#xA;   &lt;th&gt;Percentage&lt;/th&gt; &#xA;   &lt;th&gt;Tests&lt;/th&gt; &#xA;   &lt;th&gt;Crash ?&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1 cluster&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;4/4&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2 clusters&lt;/td&gt; &#xA;   &lt;td&gt;95.5%&lt;/td&gt; &#xA;   &lt;td&gt;21/22&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3 clusters&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;7/7&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4 clusters&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;6/6&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5 clusters&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;4/4&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;16 clusters&lt;/td&gt; &#xA;   &lt;td&gt;0%&lt;/td&gt; &#xA;   &lt;td&gt;0/1&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Error handling&lt;/td&gt; &#xA;   &lt;td&gt;100%&lt;/td&gt; &#xA;   &lt;td&gt;4/4&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Coding Style&lt;/td&gt; &#xA;   &lt;td&gt;75%&lt;/td&gt; &#xA;   &lt;td&gt;3/4&lt;/td&gt; &#xA;   &lt;td&gt;x&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;End score&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;94.2%&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;49/52&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;No&lt;/strong&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt;</summary>
  </entry>
</feed>