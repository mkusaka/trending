<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-11T01:36:38Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nomeata/haskell-on-fastly</title>
    <updated>2023-03-11T01:36:38Z</updated>
    <id>tag:github.com,2023-03-11:/nomeata/haskell-on-fastly</id>
    <link href="https://github.com/nomeata/haskell-on-fastly" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Experiments about running Haskell via WebAssembly on Fastly&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell on Fastly experiments&lt;/h1&gt; &#xA;&lt;p&gt;This repo contains an experiment with compiling Haskell to WebAssembly and runnig it on fastly’s Compute@Cloud service.&lt;/p&gt; &#xA;&lt;p&gt;See it in action on &lt;a href=&#34;https://haskell-on-fastly.edgecompute.app/&#34;&gt;https://haskell-on-fastly.edgecompute.app/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Moving parts&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Haskell&#39;s GHC compiler supports compiling to WebAssembly since GHC-9.8. This repo is using &lt;a href=&#34;https://gitlab.haskell.org/ghc/ghc-wasm-meta&#34;&gt;https://gitlab.haskell.org/ghc/ghc-wasm-meta&lt;/a&gt; to get a precompiled compiler for that target (see &lt;a href=&#34;https://raw.githubusercontent.com/nomeata/haskell-on-fastly/master/flake.nix&#34;&gt;&lt;code&gt;flake.nix&lt;/code&gt;&lt;/a&gt;)&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The generated code uses the WASI system interface (&lt;a href=&#34;https://wasi.dev/&#34;&gt;https://wasi.dev/&lt;/a&gt;) for generic stuff (accessing environment variables). Luckily, Fastly&#39;s platform builds on that.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The Fastly specific stuff (access to the request, sending out the response) is exposed via additional WebAssembly functions. This “ABI” is not fully document, but one can gather how they use from&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;The low-level Rust Crate: &lt;a href=&#34;https://docs.rs/fastly-sys&#34;&gt;https://docs.rs/fastly-sys&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The high-level Rust Crate: &lt;a href=&#34;https://docs.rs/fastly&#34;&gt;https://docs.rs/fastly&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;A interface description in witx format: &lt;a href=&#34;https://github.com/fastly/Viceroy/raw/main/lib/compute-at-edge-abi/compute-at-edge.witx&#34;&gt;https://github.com/fastly/Viceroy/blob/main/lib/compute-at-edge-abi/compute-at-edge.witx&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;The host-side implementation in Viceroy, the local development environment: &lt;a href=&#34;https://github.com/fastly/Viceroy/tree/05247c4addbd94b04636ff89c0a89fbaf672b2e9/lib/src/wiggle_abi&#34;&gt;https://github.com/fastly/Viceroy/tree/05247c4addbd94b04636ff89c0a89fbaf672b2e9/lib/src/wiggle_abi&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;p&gt;We bind a few of function via Haskell&#39;s FFI in file &lt;a href=&#34;https://raw.githubusercontent.com/nomeata/haskell-on-fastly/master/Fastly.hs&#34;&gt;&lt;code&gt;Fastly.hs&lt;/code&gt;&lt;/a&gt;. Because Haskell&#39;s WebAssembly FFI currently does not support importing functions from a different WebAssembly module than &lt;code&gt;env&lt;/code&gt;, file &lt;a href=&#34;https://raw.githubusercontent.com/nomeata/haskell-on-fastly/master/fastly-sys.c&#34;&gt;&lt;code&gt;fastly-sys.c&lt;/code&gt;&lt;/a&gt; imports them from the right module and wraps them in a “local” C function that we can import from Haskell.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/nomeata/haskell-on-fastly/master/hello.hs&#34;&gt;&lt;code&gt;hello.hs&lt;/code&gt;&lt;/a&gt; file puts it all together and implements a very simple service that just prints URL and the environment.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to build, test and deploy&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nix.dev/tutorials/install-nix&#34;&gt;Install nix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Enter a nix shell using &lt;code&gt;nix develop&lt;/code&gt;. You now have tools like &lt;code&gt;fastly&lt;/code&gt;, &lt;code&gt;viceroy&lt;/code&gt; and especially &lt;code&gt;wasm32-wasi-ghc&lt;/code&gt; available.&lt;/li&gt; &#xA; &lt;li&gt;Compile using &lt;pre&gt;&lt;code&gt;wasm32-wasi-ghc --make fastly-sys.c hello.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Run locally with &lt;pre&gt;&lt;code&gt;viceroy -v hello.wasm&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Deploy using &lt;code&gt;fastly compute build &amp;amp;&amp;amp; fastly compute deploy&lt;/code&gt;, after setting up the &lt;code&gt;fastly&lt;/code&gt; instance.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;This is just a small demo. It supports&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Reading method and URI from the request&lt;/li&gt; &#xA; &lt;li&gt;Adding headers and body to the response&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is still much&lt;/p&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Cover more of the Fastly API&lt;/p&gt; &lt;p&gt;Mostly tediuos work, and in the bright future something like the &lt;a href=&#34;https://github.com/WebAssembly/component-model&#34;&gt;WASM Component model&lt;/a&gt; will make that much easier.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Be compatible with &lt;a href=&#34;https://hackage.haskell.org/package/wai&#34;&gt;WAI&lt;/a&gt;. This would allow us to compile any WAI-compatible Web application to run on Fastly.&lt;/p&gt; &lt;p&gt;Should not be hard, but I got stuck with the &lt;code&gt;unix&lt;/code&gt; package not compiling on this target yet. So best to wait for the Haskell-on-WebAssembly eco system to mature a bit more.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Optimize (mabye disable GC, maybe pre-evaluate the binary using &lt;a href=&#34;https://github.com/bytecodealliance/wizer&#34;&gt;wizer&lt;/a&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contributions are welcome!&lt;/p&gt; &#xA;&lt;h1&gt;Credits&lt;/h1&gt; &#xA;&lt;p&gt;Thanks to Cheng Shao aKa TerrorJack for his work on GHC-to-WebAssembly and help with these experiments.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>np/csv-nptools</title>
    <updated>2023-03-11T01:36:38Z</updated>
    <id>tag:github.com,2023-03-11:/np/csv-nptools</id>
    <link href="https://github.com/np/csv-nptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of CSV tools&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>