<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-05-14T01:29:15Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>vmchale/jacinda</title>
    <updated>2024-05-14T01:29:15Z</updated>
    <id>tag:github.com,2024-05-14:/vmchale/jacinda</id>
    <link href="https://github.com/vmchale/jacinda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Functional, expression-oriented data processing language&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Jacinda is a functional pattern sifting language, a smaller &lt;a href=&#34;http://www.awklang.org&#34;&gt;AWK&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;There are binaries for some platforms on the &lt;a href=&#34;https://github.com/vmchale/jacinda/releases/&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you are on Mac, you will need to install &lt;code&gt;*-librure.dylib&lt;/code&gt; as well.&lt;/p&gt; &#xA;&lt;h2&gt;From Source&lt;/h2&gt; &#xA;&lt;p&gt;First, install &lt;a href=&#34;https://github.com/rust-lang/regex/tree/master/regex-capi#c-api-for-rusts-regex-engine&#34;&gt;Rust&#39;s regex library&lt;/a&gt;. You&#39;ll need to put &lt;code&gt;librure.so&lt;/code&gt; or &lt;code&gt;librure.dylib&lt;/code&gt; etc. in the appropriate place.&lt;/p&gt; &#xA;&lt;p&gt;If you have &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;cabal&lt;/a&gt; and &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; installed (perhaps via &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install jacinda&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Editor Support&lt;/h2&gt; &#xA;&lt;p&gt;There is a &lt;a href=&#34;https://github.com/vmchale/jacinda-vim&#34;&gt;vim plugin&lt;/a&gt; and a &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=vmchale.jacinda&#34;&gt;VSCode extension&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Usefulness&lt;/h1&gt; &#xA;&lt;p&gt;Unix uses record separators in many places; we can display one entry in the &lt;code&gt;PATH&lt;/code&gt; variable with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;echo $PATH | ja -F: &#34;{|[x+&#39;\n&#39;+y]|&amp;gt;\`$}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Many Unix tools output much information separated with spaces. We use regular expressions to match relevant lines and then select the field with the data itself, viz.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;otool -l $(locate libpng.dylib) | ja &#39;{`1 ~ /^name/}{`2}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get the value of a variable (say, &lt;code&gt;PATH&lt;/code&gt;) from the output of &lt;code&gt;printenv&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;printenv | ja -F= &#39;{%/^PATH/}{`2}&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Rosetta&lt;/h2&gt; &#xA;&lt;p&gt;Replace&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-awk&#34;&gt;NF == 1 &amp;amp;&amp;amp; $1 != &#34;}&#34; {&#xA;  haveversion[$1] = 1&#xA;}&#xA;END {&#xA;  for (i in haveversion)&#xA;    printf &#34;have-%s = yes\n&#34;, i&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(sprintf &#39;have-%s = yes&#39;)&#34; ~.{nf=1 &amp;amp; `1 != &#39;}&#39;}{`1}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Documentation&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://vmchale.github.io/jacinda/&#34;&gt;guide&lt;/a&gt;, which contains a tutorial on some of the features as well as examples.&lt;/p&gt; &#xA;&lt;p&gt;The manpages document the builtins and provide a syntax reference.&lt;/p&gt; &#xA;&lt;h1&gt;Status&lt;/h1&gt; &#xA;&lt;h2&gt;Missing Features &amp;amp; Bugs&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No nested dfns&lt;/li&gt; &#xA; &lt;li&gt;No list literal syntax&lt;/li&gt; &#xA; &lt;li&gt;Postfix &lt;code&gt;:f&lt;/code&gt; and &lt;code&gt;:i&lt;/code&gt; are handled poorly&lt;/li&gt; &#xA; &lt;li&gt;Streams of functions don&#39;t work&lt;/li&gt; &#xA; &lt;li&gt;Higher-order functions are subtly broken&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Intentionally missing features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;No loops&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Advantages&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.rs/regex/&#34;&gt;Rust&#39;s regular expressions&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;extensively documented with Unicode support&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Deduplicate builtin&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;I have rewritten the code several times so forking and applying patches is fraught!&lt;/p&gt; &#xA;&lt;p&gt;Bug reports are welcome contributions.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tweag/ghc-wasm-bindists</title>
    <updated>2024-05-14T01:29:15Z</updated>
    <id>tag:github.com,2024-05-14:/tweag/ghc-wasm-bindists</id>
    <link href="https://github.com/tweag/ghc-wasm-bindists" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Stable links for various GHC WASM bindists&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>