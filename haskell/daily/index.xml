<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-30T01:35:32Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>nLatt/GLaDOS-2023</title>
    <updated>2023-01-30T01:35:32Z</updated>
    <id>tag:github.com,2023-01-30:/nLatt/GLaDOS-2023</id>
    <link href="https://github.com/nLatt/GLaDOS-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GLaDOS-2023&lt;/h1&gt; &#xA;&lt;h1&gt;Install Dependencies&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S ghc cabal-install cabal-static;&#xA;&#xA;cabal update;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Run project&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal run;&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>10Pines/pdepreludat</title>
    <updated>2023-01-30T01:35:32Z</updated>
    <id>tag:github.com,2023-01-30:/10Pines/pdepreludat</id>
    <link href="https://github.com/10Pines/pdepreludat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;PdePreludat&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/10Pines/pdepreludat/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/10Pines/pdepreludat/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;build&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pdepreludat es una biblioteca que busca hacer más amigable y didáctico al Prelude de haskell, por ejemplo mejorando ciertos mensajes de error.&lt;/p&gt; &#xA;&lt;h2&gt;Para usarlo en un nuevo proyecto&lt;/h2&gt; &#xA;&lt;h3&gt;Instalar stack&lt;/h3&gt; &#xA;&lt;p&gt;Si estás usando Linux, podés correr el siguiente comando:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -sSL https://get.haskellstack.org/ | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Si estás usando Windows, podés descargarlo haciendo click &lt;a href=&#34;https://get.haskellstack.org/stable/windows-x86_64-installer.exe&#34;&gt;acá&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Para más información podés ir a la &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/#how-to-install&#34;&gt;página oficial de stack&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Preparar proyecto&lt;/h3&gt; &#xA;&lt;p&gt;Correr el siguiente comando que va a crear una carpeta llamada &lt;code&gt;proyecto-test&lt;/code&gt; (o el nombre que le hayan pasado &lt;code&gt;stack new&lt;/code&gt;) con el proyecto adentro:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack new proyecto-test https://github.com/10Pines/pdepreludat/releases/latest/download/pdepreludat.hsfiles&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Una vez creada la carpeta, moverse a la misma y compilar el proyecto con los siguientes comandos:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd proyecto-test&#xA;stack build --test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Probarlo&lt;/h3&gt; &#xA;&lt;p&gt;Ahora ya debería haber descargado e instalado todo lo necesario para funcionar, para poder correr el intérprete, ejecutar:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack ghci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;También, se pueden correr los tests usando:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Redefiniciones&lt;/h1&gt; &#xA;&lt;p&gt;La biblioteca exporta un módulo que contiene la mayoría de las funciones existentes en el Prelude, con ciertas modificaciones:&lt;/p&gt; &#xA;&lt;h2&gt;Simplificado tipo de funciones que recibían Foldable para que usen []&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fue redefinido el tipo de las funciones que trabajan sobre &lt;code&gt;Foldable t&lt;/code&gt; para que trabajen sobre &lt;code&gt;[]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Antes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; :t any&#xA;any :: Foldable t =&amp;gt;  (a -&amp;gt; Bool) -&amp;gt; t a -&amp;gt; Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Después&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; :t any&#xA;any :: (a -&amp;gt; Bool) -&amp;gt; [a] -&amp;gt; Bool&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Reemplazada jerarquía de tipos de la typeclass Num por un único tipo Number&lt;/h2&gt; &#xA;&lt;p&gt;A efectos prácticos, el tipo Number es lo mismo que un Double, y todas las funciones que usaban cualquier otro tipo de número o algún tipo numérico más general fueron redefinidas para que trabajen con Number. Este es el cambio más disruptivo o que rompe más la compatibilidad con el resto del mundo de Haskell.&lt;/p&gt; &#xA;&lt;p&gt;La idea es que ayude en:&lt;/p&gt; &#xA;&lt;h3&gt;Hacer más simples algunos tipos que se pueden encontrar desde el principio de la cursada&lt;/h3&gt; &#xA;&lt;h4&gt;Antes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; :t 5&#xA;5 :: Num p =&amp;gt; p&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Después&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; :t 5&#xA;5 :: Number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Simplificar algunos errores&lt;/h3&gt; &#xA;&lt;h4&gt;Antes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; sum + 5&#xA;&amp;lt;interactive&amp;gt;:9:1: error:&#xA;    Non type-variable argument in the constraint: Num (t a -&amp;gt; a)&#xA;    (Use FlexibleContexts to permit this)&#xA;    When checking the inferred type&#xA;    //...más errores&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Después&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; sum + 5&#xA;&amp;lt;interactive&amp;gt;:9:1: error:&#xA;    • Couldn&#39;t match expected type ‘Number’&#xA;                  with actual type ‘[Number] -&amp;gt; Number’&#xA;    • Probable cause: ‘sum’ is applied to too few arguments&#xA;    //...más errores&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Hacer innecesarias ciertas conversiones de números:&lt;/h3&gt; &#xA;&lt;h4&gt;Antes&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; sum [1,2,3,4] / length [1,2,3,4]&#xA;&amp;lt;interactive&amp;gt;:7:1: error:&#xA;    • No instance for (Fractional Int) arising from a use of ‘/’&#xA;    • In the expression: sum [1, 2, 3, 4] / length [1, 2, 3, 4]&#xA;      In an equation for ‘it’:&#xA;          it = sum [1, 2, 3, ....] / length [1, 2, 3, ....]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Después&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; sum [1,2,3,4] / length [1,2,3,4]&#xA;2.5&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;El trade off más grande que hubo que hacer para permitir esas cosas, es que muchos errores en tiempo de compilación se movieron a tiempo de ejecución, es decir, los números ahora son menos &lt;em&gt;type safe&lt;/em&gt;.&lt;/h3&gt; &#xA;&lt;h4&gt;Antes&lt;/h4&gt; &#xA;&lt;p&gt;Esto ni siquiera tipa:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; :t take 2.5 [1,2,3,4]&#xA;&#xA;&amp;lt;interactive&amp;gt;:1:6: error:&#xA;    • Could not deduce (Fractional Int) arising from the literal ‘2.5’&#xA;      from the context: Num a&#xA;        bound by the inferred type of it :: Num a =&amp;gt; [a]&#xA;        at &amp;lt;interactive&amp;gt;:1:1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Después&lt;/h4&gt; &#xA;&lt;p&gt;Esto tipa&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; :t take 2.5 [1,2,3,4]&#xA;take 2.5 [1,2,3,4] :: [Number]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Pero falla en ejecución&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; take 2.5 [1,2,3,4]&#xA;*** Exception: Se esperaba un valor entero pero se pasó uno con decimales&#xA;CallStack (from HasCallStack):&#xA;  error, called at /home/juan/Development/Proyectos/10pines/pdepreludat/src/Number.hs:11:39 in main:Number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mostrar funciones como valor en la consola&lt;/h2&gt; &#xA;&lt;p&gt;Se definió una instancia de &lt;code&gt;Show&lt;/code&gt; para las funciones&lt;/p&gt; &#xA;&lt;h3&gt;Antes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; filter&#xA;&amp;lt;interactive&amp;gt;:2:1: error:&#xA;    No instance for (Show ((a0 -&amp;gt; Bool) -&amp;gt; [a0] -&amp;gt; [a0]))&#xA;    arising from a use of ‘print’&#xA;    // ...más errores&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Después&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; filter&#xA;&amp;lt;una función&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Operaciones entre fracciones y enteros&lt;/h2&gt; &#xA;&lt;p&gt;Se agregó la función &lt;code&gt;toFloat&lt;/code&gt; para convertir enteros a decimales, ya que creemos que &lt;code&gt;fromIntegral&lt;/code&gt; puede ser un poco confuso de usar, y se agregaron mejores mensajes de error a las operaciones donde se esperaba un decimal y llegó un entero o viceversa.&lt;/p&gt; &#xA;&lt;h3&gt;Antes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; sum [1,2] / length [1,2]&#xA;&amp;lt;interactive&amp;gt;:3:1: error:&#xA;    No instance for (Fractional Int) arising from a use of ‘/’&#xA;    In the expression: sum [1, 2] / length [1, 2]&#xA;    // ...más errores&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Después&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; sum [1,2] / length [1,2]&#xA;&amp;lt;interactive&amp;gt;:1:1: error:&#xA;    • Estás operando enteros con fraccionales, que son diferentes tipos. Podés convertir el entero en decimal usando toFloat/1 o el decimal en entero usando round/1, floor/1 o ceiling/1.&#xA;    • In the expression: sum [1, 2] / length [1, 2]&#xA;      In an equation for ‘it’: it = sum [1, 2] / length [1, 2]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Mensajes de error si se trata de usar una función como un comparable o equiparable&lt;/h2&gt; &#xA;&lt;h3&gt;Antes&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; filter == map&#xA;&#xA;&amp;lt;interactive&amp;gt;:1:1: error:&#xA;    • No instance for (Eq ((Bool -&amp;gt; Bool) -&amp;gt; [Bool] -&amp;gt; [Bool]))&#xA;        arising from a use of ‘==’&#xA;        (maybe you haven&#39;t applied a function to enough arguments?)&#xA;    • In the expression: filter == map&#xA;      In an equation for ‘it’: it = filter == map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Después&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&amp;gt; filter == map&#xA;&#xA;&amp;lt;interactive&amp;gt;:1:1: error:&#xA;    • Las funciones no se pueden ordenar ni comparar.&#xA;    • In the expression: filter == map&#xA;      In an equation for ‘it’: it = filter == map&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Agregada documentación en español de varias funciones&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://user-images.githubusercontent.com/11432672/113488290-6923f680-9493-11eb-8728-ea5fc12b3a28.gif&#34; alt=&#34;Ejemplo en el que al pasar el mouse sobre funciones del PdePreludat se ve la documentacion de las mismas&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Para el desarrollador&lt;/h3&gt; &#xA;&lt;p&gt;Podés ver la &lt;a href=&#34;https://github.com/10Pines/pdepreludat/wiki&#34;&gt;wiki&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
</feed>