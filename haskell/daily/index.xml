<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-01-28T01:35:53Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>LaurentRDC/pandoc-plot</title>
    <updated>2023-01-28T01:35:53Z</updated>
    <id>tag:github.com,2023-01-28:/LaurentRDC/pandoc-plot</id>
    <link href="https://github.com/LaurentRDC/pandoc-plot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Render and include figures in Pandoc documents using your plotting toolkit of choice&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;pandoc-plot&lt;/h1&gt; &#xA;&lt;h2&gt;A Pandoc filter to generate figures from code blocks in documents&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2+-lightgray.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pandoc-plot&lt;/code&gt; turns code blocks present in your documents (Markdown, LaTeX, etc.) into embedded figures, using your plotting toolkit of choice, including Matplotlib, ggplot2, MATLAB, Mathematica, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This program is a &lt;a href=&#34;https://pandoc.org/&#34;&gt;Pandoc&lt;/a&gt; filter. It can therefore be used in the middle of conversion from input format to output format, replacing code blocks with figures.&lt;/p&gt; &#xA;&lt;p&gt;The filter recognizes code blocks with classes that match plotting toolkits. For example, using the &lt;code&gt;matplotlib&lt;/code&gt; toolkit:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;# My document&#xA;&#xA;This is a paragraph.&#xA;&#xA;```{.matplotlib}&#xA;import matplotlib.pyplot as plt&#xA;&#xA;plt.figure()&#xA;plt.plot([0,1,2,3,4], [1,2,3,4,5])&#xA;plt.title(&#39;This is an example figure&#39;)&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Putting the above in &lt;code&gt;input.md&lt;/code&gt;, we can then generate the plot and embed it in an HTML page:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pandoc --filter pandoc-plot input.md --output output.html&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The resulting &lt;code&gt;output.html&lt;/code&gt; looks like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;h1 id=&#34;my-document&#34;&amp;gt;My document&amp;lt;/h1&amp;gt;&#xA;&#xA;&amp;lt;p&amp;gt;This is a paragraph.&amp;lt;/p&amp;gt;&#xA;&#xA;&amp;lt;figure&amp;gt;&#xA;&amp;lt;img src=&#34;plots\9671478262050082276.png&#34; /&amp;gt;&#xA;&amp;lt;/figure&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported toolkits&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;pandoc-plot&lt;/code&gt; currently supports the following plotting toolkits (&lt;strong&gt;installed separately&lt;/strong&gt;):&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;matplotlib&lt;/code&gt;: plots using the &lt;a href=&#34;https://matplotlib.org/&#34;&gt;matplotlib&lt;/a&gt; Python library;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plotly_python&lt;/code&gt; : plots using the &lt;a href=&#34;https://plotly.com/python/&#34;&gt;plotly&lt;/a&gt; Python library;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plotly_r&lt;/code&gt;: plots using the &lt;a href=&#34;https://plotly.com/r/&#34;&gt;plotly&lt;/a&gt; R library&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;matlabplot&lt;/code&gt;: plots using &lt;a href=&#34;https://www.mathworks.com/&#34;&gt;MATLAB&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;mathplot&lt;/code&gt; : plots using &lt;a href=&#34;https://www.wolfram.com/mathematica/&#34;&gt;Mathematica&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;octaveplot&lt;/code&gt;: plots using &lt;a href=&#34;https://www.gnu.org/software/octave/&#34;&gt;GNU Octave&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ggplot2&lt;/code&gt;: plots using &lt;a href=&#34;https://ggplot2.tidyverse.org/&#34;&gt;ggplot2&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gnuplot&lt;/code&gt;: plots using &lt;a href=&#34;http://www.gnuplot.info/&#34;&gt;gnuplot&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;graphviz&lt;/code&gt;: graphs using &lt;a href=&#34;http://graphviz.org/&#34;&gt;Graphviz&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bokeh&lt;/code&gt;: plots using the &lt;a href=&#34;https://bokeh.org/&#34;&gt;Bokeh&lt;/a&gt; visualization library;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plotsjl&lt;/code&gt;: plots using the &lt;a href=&#34;https://docs.juliaplots.org/latest/&#34;&gt;Julia &lt;code&gt;Plots.jl&lt;/code&gt;&lt;/a&gt; package;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;plantuml&lt;/code&gt;: diagrams using the &lt;a href=&#34;https://plantuml.com/&#34;&gt;PlantUML&lt;/a&gt; software suite;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;sageplot&lt;/code&gt;: plots using the &lt;a href=&#34;https://www.sagemath.org/&#34;&gt;Sage&lt;/a&gt; software system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To know which toolkits are useable on &lt;em&gt;your machine&lt;/em&gt; (and which ones are not available), you can check with the &lt;code&gt;toolkits&lt;/code&gt; command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;pandoc-plot toolkits&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Wish your plotting toolkit of choice was available? Please &lt;a href=&#34;https://github.com/LaurentRDC/pandoc-plot/issues&#34;&gt;raise an issue&lt;/a&gt;!&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find more information in the documentation, available either in the source repository file &lt;code&gt;MANUAL.md&lt;/code&gt;, on the &lt;a href=&#34;https://laurentrdc.github.io/pandoc-plot/MANUAL.html&#34;&gt;webpage&lt;/a&gt;, or via the command &lt;code&gt;pandoc-plot --manual&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Binaries and Installers&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/LaurentRDC/pandoc-plot/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/LaurentRDC/pandoc-plot&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Windows, Linux, and Mac OS binaries are available on the &lt;a href=&#34;https://github.com/LaurentRDC/pandoc-plot/releases&#34;&gt;GitHub release page&lt;/a&gt;. There are also Windows installers.&lt;/p&gt; &#xA;&lt;h3&gt;conda&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://anaconda.org/conda-forge/pandoc-plot&#34;&gt;&lt;img src=&#34;https://anaconda.org/conda-forge/pandoc-plot/badges/version.svg?sanitize=true&#34; alt=&#34;Conda Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Like &lt;code&gt;pandoc&lt;/code&gt;, &lt;code&gt;pandoc-plot&lt;/code&gt; is available as a package installable with &lt;a href=&#34;https://docs.conda.io/en/latest/&#34;&gt;&lt;code&gt;conda&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://anaconda.org/conda-forge/pandoc-plot&#34;&gt;Click here to see the package page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install in the current environment:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;conda install -c conda-forge pandoc-plot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Homebrew&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://formulae.brew.sh/formula/pandoc-plot&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/pandoc-plot&#34; alt=&#34;homebrew version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pandoc-plot&lt;/code&gt; is available as a package via &lt;a href=&#34;https://brew.sh/&#34;&gt;&lt;code&gt;Homebrew&lt;/code&gt;&lt;/a&gt;. &lt;a href=&#34;https://formulae.brew.sh/formula/pandoc-plot#default&#34;&gt;Click here to see the package page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;brew install pandoc-plot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;winget&lt;/h3&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;pandoc-plot&lt;/code&gt; from the &lt;a href=&#34;https://github.com/microsoft/winget-cli&#34;&gt;Windows Package Manager&lt;/a&gt; &lt;code&gt;winget&lt;/code&gt; (just like &lt;code&gt;pandoc&lt;/code&gt;). To install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;winget install pandoc-plot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Arch Linux&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://aur.archlinux.org/packages/pandoc-plot-bin/&#34;&gt;&lt;img src=&#34;https://img.shields.io/aur/version/pandoc-plot-bin&#34; alt=&#34;AUR version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;pandoc-plot&lt;/code&gt; from the &lt;a href=&#34;https://aur.archlinux.org/packages/pandoc-plot-bin/&#34;&gt;archlinux user repository&lt;/a&gt; as &lt;code&gt;pandoc-plot-bin&lt;/code&gt;. You can install using e.g. &lt;code&gt;yay&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;yay -S pandoc-plot-bin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From Hackage/Stackage&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/pandoc-plot&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/pandoc-plot.svg?sanitize=true&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;pandoc-plot&lt;/code&gt; is available on &lt;a href=&#34;http://hackage.haskell.org/package/pandoc-plot&#34;&gt;Hackage&lt;/a&gt; and &lt;a href=&#34;https://www.stackage.org/nightly/package/pandoc-plot&#34;&gt;Stackage&lt;/a&gt;. Using the &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal-install&lt;/code&gt;&lt;/a&gt; tool:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal update&#xA;cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;From source&lt;/h3&gt; &#xA;&lt;p&gt;Building from source can be done using &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/LaurentRDC/pandoc-plot&#xA;cd pandoc-plot&#xA;cabal install # Alternatively, `stack install`&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>uriba/biolab-analysis</title>
    <updated>2023-01-28T01:35:53Z</updated>
    <id>tag:github.com,2023-01-28:/uriba/biolab-analysis</id>
    <link href="https://github.com/uriba/biolab-analysis" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A library to perform various data analysis on micro-biology measurements.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>tweag/ormolu</title>
    <updated>2023-01-28T01:35:53Z</updated>
    <id>tag:github.com,2023-01-28:/tweag/ormolu</id>
    <link href="https://github.com/tweag/ormolu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A formatter for Haskell source code&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ormolu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://opensource.org/licenses/BSD-3-Clause&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-BSD3-brightgreen.svg?sanitize=true&#34; alt=&#34;License BSD3&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/ormolu&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/ormolu.svg?style=flat&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/ormolu&#34;&gt;&lt;img src=&#34;http://stackage.org/package/ormolu/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/ormolu&#34;&gt;&lt;img src=&#34;http://stackage.org/package/ormolu/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/tweag/ormolu/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/tweag/ormolu/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#building-from-source&#34;&gt;Building from source&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#usage&#34;&gt;Usage&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#ormolu-live&#34;&gt;Ormolu Live&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#editor-integration&#34;&gt;Editor integration&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#haskell-language-server&#34;&gt;Haskell Language Server&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#github-actions&#34;&gt;GitHub actions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#language-extensions-dependencies-and-fixities&#34;&gt;Language extensions, dependencies, and fixities&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#magic-comments&#34;&gt;Magic comments&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#regions&#34;&gt;Regions&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#exit-codes&#34;&gt;Exit codes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#using-as-a-library&#34;&gt;Using as a library&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#limitations&#34;&gt;Limitations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#running-on-hackage&#34;&gt;Running on Hackage&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#forks-and-modifications&#34;&gt;Forks and modifications&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Ormolu is a formatter for Haskell source code. The project was created with the following goals in mind:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Using GHC&#39;s own parser to avoid parsing problems caused by &lt;a href=&#34;https://hackage.haskell.org/package/haskell-src-exts&#34;&gt;&lt;code&gt;haskell-src-exts&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Let some whitespace be programmable. The layout of the input influences the layout choices in the output. This means that the choices between single-line/multi-line layouts in certain situations are made by the user, not by an algorithm. This makes the implementation simpler and leaves some control to the user while still guaranteeing that the formatted code is stylistically consistent.&lt;/li&gt; &#xA; &lt;li&gt;Writing code in such a way so it&#39;s easy to modify and maintain.&lt;/li&gt; &#xA; &lt;li&gt;Implementing one “true” formatting style which admits no configuration.&lt;/li&gt; &#xA; &lt;li&gt;The formatting style aims to result in minimal diffs.&lt;/li&gt; &#xA; &lt;li&gt;Choose a style compatible with modern dialects of Haskell. As new Haskell extensions enter broad use, we may change the style to accommodate them.&lt;/li&gt; &#xA; &lt;li&gt;Idempotence: formatting already formatted code doesn&#39;t change it.&lt;/li&gt; &#xA; &lt;li&gt;Be well-tested and robust so that the formatter can be used in large projects.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Try it out in your browser at &lt;a href=&#34;https://ormolu-live.tweag.io&#34;&gt;https://ormolu-live.tweag.io&lt;/a&gt;! See &lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/#ormolu-live&#34;&gt;Ormolu Live&lt;/a&gt; for more info.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/tweag/ormolu/releases&#34;&gt;release page&lt;/a&gt; has binaries for Linux, macOS and Windows.&lt;/p&gt; &#xA;&lt;p&gt;You can also install using &lt;code&gt;cabal&lt;/code&gt; or &lt;code&gt;stack&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ cabal install ormolu&#xA;$ stack install ormolu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Ormolu is also included in several package repositories. E.g., on Arch Linux, one can use &lt;a href=&#34;https://aur.archlinux.org/packages/ormolu&#34;&gt;the package on AUR&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ yay -S ormolu&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building from source&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to build the project is with Nix:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure to accept the offered Nix caches (in particular the IOG cache), otherwise building may take a very long time.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, &lt;code&gt;stack&lt;/code&gt; could be used as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ stack build # to build&#xA;$ stack install # to install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To use Ormolu directly from GitHub with Nix flakes, this snippet may come in handy:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  inputs.ormolu.url = &#34;github:tweag/ormolu&#34;;&#xA;  outputs = { ormolu, ... }: {&#xA;    # use ormolu.packages.${system}.default here&#xA;  };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The following will print the formatted output to the standard output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ormolu Module.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Add &lt;code&gt;--mode inplace&lt;/code&gt; to replace the contents of the input file with the formatted output.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ormolu --mode inplace Module.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;find&lt;/code&gt; to format a tree recursively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ormolu --mode inplace $(find . -name &#39;*.hs&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or find all files in a project with &lt;code&gt;git ls-files&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ormolu --mode inplace $(git ls-files &#39;*.hs&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check if files are are already formatted (useful on CI):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ ormolu --mode check $(find . -name &#39;*.hs&#39;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;&lt;span&gt;⚡&lt;/span&gt; Beware git&#39;s &lt;code&gt;core.autocrlf&lt;/code&gt; on Windows &lt;span&gt;⚡&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Ormolu&#39;s output always uses LF line endings. In particular, &lt;code&gt;ormolu --mode check&lt;/code&gt; will fail if its input is correctly formatted &lt;em&gt;except&lt;/em&gt; that it has CRLF line endings. This situation can happen on Windows when checking out a git repository without having set &lt;a href=&#34;https://www.git-scm.com/docs/git-config#Documentation/git-config.txt-coreautocrlf&#34;&gt;&lt;code&gt;core.autocrlf&lt;/code&gt;&lt;/a&gt; to &lt;code&gt;false&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Ormolu Live&lt;/h3&gt; &#xA;&lt;p&gt;On every new commit to &lt;code&gt;master&lt;/code&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/tweag/ormolu/master/ormolu-live&#34;&gt;Ormolu Live&lt;/a&gt; is deployed to &lt;a href=&#34;https://ormolu-live.tweag.io&#34;&gt;https://ormolu-live.tweag.io&lt;/a&gt;. Older versions are available at &lt;a href=&#34;https://COMMITHASH--ormolu-live.netlify.app&#34;&gt;https://COMMITHASH--ormolu-live.netlify.app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Editor integration&lt;/h3&gt; &#xA;&lt;p&gt;We know of the following editor integrations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/vyorkin/ormolu.el&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=sjurmillidahl.ormolu-vscode&#34;&gt;VS Code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Vim: &lt;a href=&#34;https://github.com/sbdchd/neoformat&#34;&gt;neoformat&lt;/a&gt;, &lt;a href=&#34;https://github.com/sdiehl/vim-ormolu&#34;&gt;vim-ormolu&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Haskell Language Server&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io&#34;&gt;Haskell Language Server&lt;/a&gt; has built-in support for using Ormolu as a formatter.&lt;/p&gt; &#xA;&lt;h3&gt;GitHub actions&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/marketplace/actions/ormolu-action&#34;&gt;&lt;code&gt;ormolu-action&lt;/code&gt;&lt;/a&gt; is the recommended way to ensure that a project is formatted with Ormolu.&lt;/p&gt; &#xA;&lt;h3&gt;Language extensions, dependencies, and fixities&lt;/h3&gt; &#xA;&lt;p&gt;Ormolu automatically locates the Cabal file that corresponds to a given source code file. When input comes from stdin, one can pass &lt;code&gt;--stdin-input-file&lt;/code&gt; which will give Ormolu the location of the Haskell source file that should be used as the starting point for searching for a suitable Cabal file. Cabal files are used to extract both default extensions and dependencies. Default extensions directly affect behavior of the GHC parser, while dependencies are used to figure out fixities of operators that appear in the source code. Fixities can also be overridden if &lt;code&gt;.ormolu&lt;/code&gt; file is found next to the corresponding Cabal file, i.e. they should be siblings in the same directory.&lt;/p&gt; &#xA;&lt;p&gt;Here is an example of &lt;code&gt;.ormolu&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;infixr 9  .&#xA;infixr 5  ++&#xA;infixl 4  &amp;lt;$&#xA;infixl 1  &amp;gt;&amp;gt;, &amp;gt;&amp;gt;=&#xA;infixr 1  =&amp;lt;&amp;lt;&#xA;infixr 0  $, $!&#xA;infixl 4 &amp;lt;*&amp;gt;, &amp;lt;*, *&amp;gt;, &amp;lt;**&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It uses exactly the same syntax as usual Haskell fixity declarations to make it easier for Haskellers to edit and maintain.&lt;/p&gt; &#xA;&lt;p&gt;Besides, all of the above-mentioned parameters can be controlled from the command line:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language extensions can be specified with the &lt;code&gt;-o&lt;/code&gt; or &lt;code&gt;--ghc-opt&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;Dependencies can be specified with the &lt;code&gt;-p&lt;/code&gt; or &lt;code&gt;--package&lt;/code&gt; flag.&lt;/li&gt; &#xA; &lt;li&gt;Fixities can be specified with the &lt;code&gt;-f&lt;/code&gt; or &lt;code&gt;--fixity&lt;/code&gt; flag.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Searching for both &lt;code&gt;.cabal&lt;/code&gt; and &lt;code&gt;.ormolu&lt;/code&gt; files can be disabled by passing &lt;code&gt;--no-cabal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Magic comments&lt;/h3&gt; &#xA;&lt;p&gt;Ormolu understands two magic comments:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{- ORMOLU_DISABLE -}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{- ORMOLU_ENABLE -}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This allows us to disable formatting selectively for code between these markers or disable it for the entire file. To achieve the latter, just put &lt;code&gt;{- ORMOLU_DISABLE -}&lt;/code&gt; at the very top. Note that for Ormolu to work the fragments where Ormolu is enabled must be parseable on their own. Because of that the magic comments cannot be placed arbitrarily, but rather must enclose independent top-level definitions.&lt;/p&gt; &#xA;&lt;h3&gt;Regions&lt;/h3&gt; &#xA;&lt;p&gt;One can ask Ormolu to format a region of input and leave the rest unformatted. This is accomplished by passing the &lt;code&gt;--start-line&lt;/code&gt; and &lt;code&gt;--end-line&lt;/code&gt; command line options. &lt;code&gt;--start-line&lt;/code&gt; defaults to the beginning of the file, while &lt;code&gt;--end-line&lt;/code&gt; defaults to the end.&lt;/p&gt; &#xA;&lt;h3&gt;Exit codes&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Exit code&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;0&lt;/td&gt; &#xA;   &lt;td&gt;Success&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;1&lt;/td&gt; &#xA;   &lt;td&gt;General problem&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;2&lt;/td&gt; &#xA;   &lt;td&gt;CPP used (deprecated)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;3&lt;/td&gt; &#xA;   &lt;td&gt;Parsing of original input failed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;4&lt;/td&gt; &#xA;   &lt;td&gt;Parsing of formatted code failed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;5&lt;/td&gt; &#xA;   &lt;td&gt;AST of original and formatted code differs&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;6&lt;/td&gt; &#xA;   &lt;td&gt;Formatting is not idempotent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;7&lt;/td&gt; &#xA;   &lt;td&gt;Unrecognized GHC options&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8&lt;/td&gt; &#xA;   &lt;td&gt;Cabal file parsing failed&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9&lt;/td&gt; &#xA;   &lt;td&gt;Missing input file path when using stdin input and accounting for .cabal files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;10&lt;/td&gt; &#xA;   &lt;td&gt;Parse error while parsing fixity overrides&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;100&lt;/td&gt; &#xA;   &lt;td&gt;In checking mode: unformatted files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;101&lt;/td&gt; &#xA;   &lt;td&gt;Inplace mode does not work with stdin&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;102&lt;/td&gt; &#xA;   &lt;td&gt;Other issue (with multiple input files)&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Using as a library&lt;/h3&gt; &#xA;&lt;p&gt;The &lt;code&gt;ormolu&lt;/code&gt; package can also be depended upon from other Haskell programs. For these purposes only the top &lt;code&gt;Ormolu&lt;/code&gt; module should be considered stable. It follows &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; starting from the version 0.5.3.0. Rely on other modules at your own risk.&lt;/p&gt; &#xA;&lt;h2&gt;Limitations&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;CPP support is experimental. CPP is virtually impossible to handle correctly, so we process them as a sort of unchangeable snippets. This works only in simple cases when CPP conditionals surround top-level declarations. See the &lt;a href=&#34;https://github.com/tweag/ormolu/raw/master/DESIGN.md#cpp&#34;&gt;CPP&lt;/a&gt; section in the design notes for a discussion of the dangers.&lt;/li&gt; &#xA; &lt;li&gt;Input modules should be parsable by Haddock, which is a bit stricter criterion than just being valid Haskell modules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Running on Hackage&lt;/h2&gt; &#xA;&lt;p&gt;It&#39;s possible to try Ormolu on arbitrary packages from Hackage. For that execute (from the root of the cloned repo):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;$ nix build .#hackage.&amp;lt;package&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then inspect &lt;code&gt;result/log.txt&lt;/code&gt; for possible problems. The derivation will also contain formatted &lt;code&gt;.hs&lt;/code&gt; files for inspection and original inputs with &lt;code&gt;.hs-original&lt;/code&gt; extension (those are with CPP dropped, exactly what is fed into Ormolu).&lt;/p&gt; &#xA;&lt;h2&gt;Forks and modifications&lt;/h2&gt; &#xA;&lt;p&gt;We know of the following actively maintained forks:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/fourmolu/fourmolu&#34;&gt;Fourmolu&lt;/a&gt;, which uses 4-space indentation and allows arbitrary configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/tweag/ormolu/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/tweag/ormolu/raw/master/LICENSE.md&#34;&gt;LICENSE.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2018–present Tweag I/O&lt;/p&gt;</summary>
  </entry>
</feed>