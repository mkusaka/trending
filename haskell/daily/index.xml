<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-11T01:27:39Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>iog-edu-ke2023/cardano-dev-2023</title>
    <updated>2023-08-11T01:27:39Z</updated>
    <id>tag:github.com,2023-08-11:/iog-edu-ke2023/cardano-dev-2023</id>
    <link href="https://github.com/iog-edu-ke2023/cardano-dev-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Full-time 8-week course that will take you from zero to a productive Haskell and Smart Contract developer.&lt;/p&gt;&lt;hr&gt;&lt;div align=&#34;center&#34;&gt; &#xA; &lt;a href=&#34;https://www.youtube.com/@iogacademy&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/iog-edu-ke2023/cardano-dev-2023/main/img/logos.png&#34; alt=&#34;IOG Academy on YouTube&#34; width=&#34;400&#34;&gt;&lt;/a&gt; &#xA; &lt;h1&gt;Welcome to the Cardano Developer Course&lt;/h1&gt; &#xA;&lt;/div&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Instructor:&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;email:lars.bruenjes@iohk.io&#34;&gt;Lars Br√ºnjes&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;TAs&lt;/strong&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;email:karina.lopez@iohk.io&#34;&gt;Karina Lopez&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;email:robertino.martinez@iohk.io&#34;&gt;Robertino Martinez&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Course Description&lt;/h2&gt; &#xA;&lt;p&gt;This is a full-time 8-week course that will take you from zero to a productive Haskell and Smart Contract developer. In this course, we&#39;ll learn Haskell (an advanced, purely functional programming language), Marlowe (an ecosystem of tools and languages to enable the development of financial and transactional smart contracts), and Plutus (the smart contract platform of the Cardano blockchain).&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s a high-level overview of each week&#39;s contents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 1 (Haskell - 07/08):&lt;/strong&gt; Introduction to Haskell&#39;s syntax, core principles, and IO.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 2 (Haskell - 14/08):&lt;/strong&gt; Testing, common abstractions, tools, and testing.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 3 (Haskell - 21/08):&lt;/strong&gt; More abstractions, writing non-trivial programs, and data structures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 4 (Haskell - 28/08):&lt;/strong&gt; Combining effects, concurrency and parallelism, and Networking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 5 (Marlowe - 04/09):&lt;/strong&gt; Write smart contracts with Marlowe.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 6 (Plutus - 11/09):&lt;/strong&gt; Cardano Blockchain, EUTxO, Plutus tooling and simple Plutus contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Catchup week (18/09):&lt;/strong&gt; Rest, catch up, and prepare for the final two weeks.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 7 (Plutus - 18/09 or 25/09):&lt;/strong&gt; Non-trivial Plutus smart contracts and complete Dapps.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Week 8 (Plutus - 25/09 or 02/10):&lt;/strong&gt; Final project (chosen by the students) or More Dapps.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting the Software&lt;/h2&gt; &#xA;&lt;p&gt;To go through this course, you will need:&lt;/p&gt; &#xA;&lt;h3&gt;Haskell:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;ghc&lt;/code&gt; (the Haskell compiler) version 9.2.5.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal-install&lt;/code&gt; and Cabal library (a build tool for Haskell) version 3.6.2.0.&lt;/li&gt; &#xA; &lt;li&gt;Haskell&#39;s Language Server&lt;/li&gt; &#xA; &lt;li&gt;A suitable text editor or IDE (e.g., VSCode, (Neo)Vim, Emacs) with proper configuration.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you want to start working on your own code&lt;/strong&gt;, we recommend using &lt;a href=&#34;https://github.com/iohkedu-ke2023/haskell-template&#34;&gt;this template&lt;/a&gt; which comes with a development environment ready to go.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;If you want to run the examples in this repo, choose the one you prefer:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Remote development environment: &lt;a href=&#34;https://www.gitpod.io/docs/configure/user-settings/browser-extension&#34;&gt;Install the GitPod extension&lt;/a&gt;, and click the new &#34;Gitpod&#34; button at the top of the repo.&lt;/li&gt; &#xA; &lt;li&gt;Local development environment inside Docker: Make sure you have the latest version of &lt;a href=&#34;https://www.docker.com/products/docker-desktop/&#34;&gt;Docker Desktop&lt;/a&gt; and &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VSCode&lt;/a&gt;. Open the &lt;code&gt;examples-haskell&lt;/code&gt; folder in VSCode (not the root of the repo). You&#39;ll get a notification about a Dev Container config file. Click on &#34;Reopen in Container&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Local development environment directly on your computer using GHCup: Follow &lt;a href=&#34;https://www.youtube.com/watch?v=hSN5mxITv0A&amp;amp;list=PLNEK_Ejlx3x1D9Vq5kqeC3ZDEP7in4dqb&amp;amp;index=13&#34;&gt;these instructions&lt;/a&gt; (all platforms).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Marlowe&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A local Docker instance or online environment provided by the instructors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instructions on how to install the necessary software will be available here when needed.&lt;/p&gt; &#xA;&lt;h3&gt;Plutus&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A local Docker instance or online environment provided by the instructors.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instructions on how to install the necessary software will be available here when needed.&lt;/p&gt; &#xA;&lt;h2&gt;How to get help&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.gg/XEd3hbCZ&#34;&gt;Discord for this course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://stackoverflow.com/questions/tagged/haskell&#34;&gt;Haskell tag stackoverflow.com&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discord.com/invite/inputoutput&#34;&gt;IOG Technical Community&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Lectures&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;ID&lt;/th&gt; &#xA;   &lt;th&gt;Lecture and slides&lt;/th&gt; &#xA;   &lt;th&gt;Assignments&lt;/th&gt; &#xA;   &lt;th&gt;Projects&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Week 01&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lecture 000&lt;/td&gt; &#xA;   &lt;td&gt;Welcome&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lecture 010&lt;/td&gt; &#xA;   &lt;td&gt;Introduction to Cryptocurrencies&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lecture 020&lt;/td&gt; &#xA;   &lt;td&gt;An Overview of Haskell&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://classroom.github.com/a/vGW6fZNQ&#34;&gt;A2&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lecture 030&lt;/td&gt; &#xA;   &lt;td&gt;Datatypes &amp;amp; Functions&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://classroom.github.com/a/cPPqAw1u&#34;&gt;A3&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lecture 040&lt;/td&gt; &#xA;   &lt;td&gt;Polymorphism &amp;amp; Type Classes&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lecture 050&lt;/td&gt; &#xA;   &lt;td&gt;Higher-Order Functions&lt;/td&gt; &#xA;   &lt;td&gt;A5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Packaging &amp;amp; Tools&lt;/td&gt; &#xA;   &lt;td&gt;--&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lecture 060&lt;/td&gt; &#xA;   &lt;td&gt;IO&lt;/td&gt; &#xA;   &lt;td&gt;A6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Week 02&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Next week&#39;s outline depends on students&#39; performance&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;W1&lt;/strong&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Assignments&lt;/h3&gt; &#xA;&lt;p&gt;Daily assignments are due the next day.&lt;/p&gt; &#xA;&lt;p&gt;Weekly homework is due Mondays before the lecture, one week after they have been handed out.&lt;/p&gt; &#xA;&lt;p&gt;All submissions are via GitHub Classroom.&lt;/p&gt; &#xA;&lt;h3&gt;Defects&lt;/h3&gt; &#xA;&lt;p&gt;If you find a defect in one of the sample programs or slides (typos included), please, open an issue on this GitHub repository.&lt;/p&gt; &#xA;&lt;h3&gt;Bibliography&lt;/h3&gt; &#xA;&lt;h4&gt;Haskell&lt;/h4&gt; &#xA;&lt;ol start=&#34;0&#34;&gt; &#xA; &lt;li&gt;IOG Academy. &lt;a href=&#34;https://github.com/input-output-hk/haskell-course&#34;&gt;Haskell Course&lt;/a&gt;. YouTube.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Beginner-friendly Haskell course.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;We have read most of these books and they provide good information for beginners.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;LipovacÃåa M. &lt;a href=&#34;http://learnyouahaskell.com/&#34;&gt;Learn You A Haskell For Great Good!&lt;/a&gt;. San Francisco: No Starch Press; 2012.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Beginner Friendly book with lots of examples.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;O&#39;Sullivan B, Stewart D, Goerzen J. &lt;a href=&#34;http://book.realworldhaskell.org/&#34;&gt;Real World Haskell&lt;/a&gt;. Farnham: O&#39;Reilly; 2009.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A lot of real-world techniques, just a little bit outdated at this point.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;Bird R. &lt;a href=&#34;https://www.amazon.com/Algorithm-Design-Haskell-Richard-Bird-ebook/dp/B08BKXJ1N3/ref=tmm_kin_swatch_0?_encoding=UTF8&amp;amp;qid=1597814133&amp;amp;sr=8-1&#34;&gt;Algorithm Design With Haskell&lt;/a&gt;. Cambridge University Press; 2020.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Learn how far you can get with immutable data, to implement almost all standard algorithms.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Thibaut C. &lt;a href=&#34;https://leanpub.com/texasholdem-tlh&#34;&gt;Texas Hold&#39;em: The Little Haskeller&lt;/a&gt;.leanpub.com; 2019.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;A long article, written in the Question and Answer format. Like the Little Schemer.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Penner C. &lt;a href=&#34;https://leanpub.com/optics-by-example&#34;&gt;Optics By Example: Functional Lenses In Haskell&lt;/a&gt;. leanpub.com; 2020.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The only book on optics.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;ol start=&#34;6&#34;&gt; &#xA; &lt;li&gt;Haskell Org. More resources at &lt;a href=&#34;https://www.haskell.org/documentation/&#34;&gt;Hakell&#39;s official website&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It contains dozens of resources from various sources.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h4&gt;Marlowe&lt;/h4&gt; &#xA;&lt;ol start=&#34;7&#34;&gt; &#xA; &lt;li&gt;IOG. &lt;a href=&#34;https://docs.marlowe.iohk.io/docs/introduction&#34;&gt;Marlowe official documentation&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Plutus&lt;/h4&gt; &#xA;&lt;ol start=&#34;8&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;IOG. PlutusTx &lt;a href=&#34;https://plutus.readthedocs.io/en/latest/&#34;&gt;official documentation&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;IOG. Plutus Core &lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;repository&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>qhool/pe</title>
    <updated>2023-08-11T01:27:39Z</updated>
    <id>tag:github.com,2023-08-11:/qhool/pe</id>
    <link href="https://github.com/qhool/pe" rel="alternate"></link>
    <summary type="html">&lt;p&gt;My project euler solutions. Don&#39;t use these to cheat!&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Solutions to some project euler problems, plus some works-in-progress. You shouldn&#39;t use these to cheat.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ppetr/tie-knot</title>
    <updated>2023-08-11T01:27:39Z</updated>
    <id>tag:github.com,2023-08-11:/ppetr/tie-knot</id>
    <link href="https://github.com/ppetr/tie-knot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&#34;Ties the knot&#34; on a given set of structures that reference each other by keys - replaces the keys with their respective values.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;tie-knot&lt;/h1&gt; &#xA;&lt;p&gt;&#34;Ties the knot&#34; on a given set of structures that reference each other by keys - replaces the keys with their respective values. Takes &lt;code&gt;Map k (v k)&lt;/code&gt; and converts into &lt;code&gt;Map k v&#39;&lt;/code&gt; where &lt;code&gt;v&#39;&lt;/code&gt; is the fixed point of &lt;code&gt;v&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This is accomplished by functions&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;type RefMap k v = Map k (v k)&#xA;&#xA;tie :: (Ord k, F.Foldable (Base v), Unfoldable v)&#xA;    =&amp;gt; RefMap k (Base v) -&amp;gt; Either (TieError k) (Map k v)&#xA;tie&#39; :: (Ord k, Unfoldable v)&#xA;    =&amp;gt; RefMap k (Base v) -&amp;gt; Map k v&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The first variant performs consistency checking (this is why it needs &lt;code&gt;Foldable&lt;/code&gt;), the other just fails with an error if a key is missing in the map.&lt;/p&gt; &#xA;&lt;h2&gt;Examples:&lt;/h2&gt; &#xA;&lt;h1&gt;Alice, Bob and the cat&lt;/h1&gt; &#xA;&lt;p&gt;Suppose that Alice loves Bob and her cat, Bob loves Alice and the cat loves only itself. Imagine that we&#39;re reading this information from some kind of a text file, and store the intermediate data into a list. We would like to create a data structure which would contain these cyclic dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data Person = Person { name :: String, loves :: [Person] }&#xA;&#xA;-- Define a variant of Person where the recursive type&#xA;-- is given as a parameter and the embedding function.&#xA;&#xA;data Person&#39; t = Person&#39; { _name :: String, _loves :: [t] }&#xA;type instance Base Person = Person&#39;&#xA;instance Unfoldable Person where&#xA;  embed ~(Person&#39; n ps)    = Person n ps&#xA;&#xA;-- The easisest way to get &#39;Foldable&#39; + &#39;Functor&#39; is to implement&#xA;-- &#39;Traversable&#39; and then just use the default implementations.&#xA;instance T.Traversable Person&#39; where&#xA;    traverse f (Person&#39; n ns) = Person&#39; n &amp;lt;$&amp;gt; T.traverse f ns&#xA;instance Functor Person&#39; where&#xA;    fmap = T.fmapDefault&#xA;instance F.Foldable Person&#39; where&#xA;    foldMap = T.foldMapDefault&#xA;&#xA;-- Let&#39;s create a person with cicrular dependencies:&#xA;alice :: Person&#xA;alice = fromJust . Map.lookup &#34;Alice&#34; . &#xA;            tie&#39; . Map.fromList . map nameValue $ lst&#xA;  where&#xA;    lst = [ Person&#39; &#34;Alice&#34; [&#34;Bob&#34;, &#34;cat&#34;]&#xA;          , Person&#39; &#34;Bob&#34;   [&#34;Alice&#34;]&#xA;          -- you may disagree, but the cat thinks of itself as Person&#xA;          , Person&#39; &#34;cat&#34;   [&#34;cat&#34;]&#xA;          ]&#xA;    nameValue loves = (_name loves, loves)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Circular lists&lt;/h1&gt; &#xA;&lt;p&gt;There is a well known task of converting a list into a circular structure with no beginning/end:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data DList a = DLNode (DList a) a (DList a)&#xA;&#xA;mkDList :: [a] -&amp;gt; DList a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can accomplish this using tie-knot by simply numbering the fields of a list and then letting the library to tie the knot:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data DList&#39; a t = DLNode&#39; t a t&#xA;type instance Base (DList a) = DList&#39; a&#xA;instance Unfoldable (DList a) where&#xA;  embed ~(DLNode&#39; u x v) = DLNode u x v&#xA;&#xA;instance Functor (DList&#39; n) where&#xA;    fmap = T.fmapDefault&#xA;instance T.Traversable (DList&#39; n) where&#xA;    traverse f (DLNode&#39; u n v) = DLNode&#39; &amp;lt;$&amp;gt; f u &amp;lt;*&amp;gt; pure n &amp;lt;*&amp;gt; f v&#xA;instance F.Foldable (DList&#39; n) where&#xA;    foldMap = T.foldMapDefault&#xA; &#xA;mkDList :: [a] -&amp;gt; DList a&#xA;mkDList xs =fromJust . Map.lookup 0 . tie&#39; $ dict&#xA;  where&#xA;    dict = Map.fromList &#xA;            . map (\(i, x) -&amp;gt; (i, DLNode&#39; (pre i) x (nxt i)))&#xA;            . zip [0..] $ xs&#xA;    n = length xs&#xA;    pre i = (i + n - 1) `rem` n&#xA;    nxt i = (i + 1) `rem` n&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Copyright&lt;/h1&gt; &#xA;&lt;p&gt;Copyright 2012, Petr Pudl√°k&lt;/p&gt; &#xA;&lt;p&gt;Contact: &lt;a href=&#34;http://petr.pudlak.name/&#34;&gt;petr.pudlak.name&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://www.gnu.org/graphics/lgplv3-88x31.png&#34; alt=&#34;LGPLv3&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This program is free software: you can redistribute it and/or modify it under the terms of the GNU Lesser General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.&lt;/p&gt; &#xA;&lt;p&gt;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more details.&lt;/p&gt; &#xA;&lt;p&gt;You should have received a copy of the GNU Lesser General Public License along with this program. If not, see &lt;a href=&#34;http://www.gnu.org/licenses/&#34;&gt;http://www.gnu.org/licenses/&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>