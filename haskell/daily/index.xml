<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-15T01:36:17Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Nydragon/GLaDOS-2023</title>
    <updated>2023-03-15T01:36:17Z</updated>
    <id>tag:github.com,2023-03-15:/Nydragon/GLaDOS-2023</id>
    <link href="https://github.com/Nydragon/GLaDOS-2023" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Scheme interpreter in Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;GLaDOS-2023&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://upload.wikimedia.org/wikipedia/commons/thumb/3/39/Lambda_lc.svg/1200px-Lambda_lc.svg.png&#34; alt=&#34;drawing&#34; width=&#34;200&#34;&gt; &lt;/p&gt;&#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://badgen.net/github/stars/nLatt/GLaDOS-2023?color=purple&#34;&gt; &lt;img src=&#34;https://badgen.net/github/contributors/nLatt/GLaDOS-2023?color=green&#34;&gt; &lt;img src=&#34;https://badgen.net/github/branches/nLatt/GLaDOS-2023?color=pink&#34;&gt; &lt;img src=&#34;https://badgen.net/github/commits/nLatt/GLaDOS-2023/main?color=orange&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/nLatt/GLaDOS-2023/actions/workflows/haskell.yml/badge.svg?branch=main&amp;amp;event=push&#34;&gt; &lt;img src=&#34;https://github.com/nLatt/GLaDOS-2023/actions/workflows/haskell.yml/badge.svg?branch=develop&amp;amp;event=push&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Features&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Basic &lt;strong&gt;scheme interpreter&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Written in &lt;strong&gt;Haskell&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Strict&lt;/strong&gt; testing policy &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Continuous integration running tests on every &lt;strong&gt;Pull Request&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Over 100&lt;/strong&gt; Unit tests and close to &lt;strong&gt;50% coverage&lt;/strong&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;Close to 20&lt;/strong&gt; Integration tests&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Abstract Syntax Tree&lt;/strong&gt; and &lt;strong&gt;Concrete Parse Tree&lt;/strong&gt; implementation&lt;/li&gt; &#xA; &lt;li&gt;Standard input reading&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/Nydragon/GLaDOS-2023/main/doc/syntax-description.md&#34;&gt;ABNF syntax description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;An &lt;a href=&#34;https://raw.githubusercontent.com/Nydragon/GLaDOS-2023/main/doc/compiled-syntax-description&#34;&gt;ABNF syntax description for the &#34;compiled&#34; code&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Infix notations&lt;/strong&gt; for operators and custom functions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Scheme Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Atoms &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Signed Integers&lt;/li&gt; &#xA;   &lt;li&gt;Symbol&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Boolean type&lt;/li&gt; &#xA; &lt;li&gt;Function execution&lt;/li&gt; &#xA; &lt;li&gt;Function definition &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Named Functions&lt;/li&gt; &#xA;   &lt;li&gt;Lambda Functions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Variable definition&lt;/li&gt; &#xA; &lt;li&gt;Conditional expressions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Builtin Functions&lt;/h2&gt; &#xA;&lt;p&gt;In addition to these basic features, our interpreter also implements the following builtins :&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;println&lt;/li&gt; &#xA; &lt;li&gt;print&lt;/li&gt; &#xA; &lt;li&gt;div&lt;/li&gt; &#xA; &lt;li&gt;mod&lt;/li&gt; &#xA; &lt;li&gt;*&lt;/li&gt; &#xA; &lt;li&gt;-&lt;/li&gt; &#xA; &lt;li&gt;+&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;&lt;/li&gt; &#xA; &lt;li&gt;&amp;lt;=&lt;/li&gt; &#xA; &lt;li&gt;&amp;gt;&lt;/li&gt; &#xA; &lt;li&gt;&amp;gt;=&lt;/li&gt; &#xA; &lt;li&gt;eq?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Repl mode&lt;/h2&gt; &#xA;&lt;p&gt;You can also enter into an &lt;strong&gt;interactive&lt;/strong&gt; session by running :&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./glados -i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./glados --interactive&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;Install cabal by installing GHCUP or another method described on the &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell Website&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal update;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Also install the following VSCode/Codium/CodeOSS extensions:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hoovercj.haskell-linter&#xA;justusadam.language-haskell&#xA;haskell.haskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Run project&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal run glados -- file.scm;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make ARGS=&#34;file.scm&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the tests&lt;/h2&gt; &#xA;&lt;p&gt;In order to see coloured output and no coverage when running the tests, please run the tests with one of the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal run test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/Nydragon/GLaDOS-2023/main/doc/dev-install.md&#34;&gt;Build Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Bonus ideas :&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Fully featured REPL&lt;/li&gt; &#xA; &lt;li&gt;Exception stack tracing&lt;/li&gt; &#xA; &lt;li&gt;Exception line tracing&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>aartamonau/kbt</title>
    <updated>2023-03-15T01:36:17Z</updated>
    <id>tag:github.com,2023-03-15:/aartamonau/kbt</id>
    <link href="https://github.com/aartamonau/kbt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple kernel backtrace decoder&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;kbt&lt;/h1&gt; &#xA;&lt;p&gt;Stupid kernel backtrace decoder. Uses /proc/kallsyms to resolve symbol names. First word (delimited by spaces) of every line is assumed to be an address to resolve. If something goes wrong, input line is echoed untouched to the stdout.&lt;/p&gt; &#xA;&lt;h1&gt;usage&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cat backtrace&#xA;0xffffffff814919e0 : 0xffffffff814919e0&#xA;0xffffffff811252f7 : 0xffffffff811252f7&#xA;0xffffffff810b0040 : 0xffffffff810b0040&#xA;0xffffffff81178570 : 0xffffffff81178570&#xA;0xffffffff810af84f : 0xffffffff810af84f&#xA;0xffffffff81491ea9 : 0xffffffff81491ea9&#xA;0xffffffff810af949 : 0xffffffff810af949&#xA;0xffffffff810b048a : 0xffffffff810b048a&#xA;0xffffffff81260e5a : 0xffffffff81260e5a&#xA;0xffffffffa14b2d6b : 0xffffffffa14b2d6b [stap_25786]&#xA;0xffffffff81260e5a : 0xffffffff81260e5a&#xA;0xffffffff810b21cd : 0xffffffff810b21cd&#xA;0xffffffff81496454 : 0xffffffff81496454&#xA;0xffffffffa14b16f3 : 0xffffffffa14b16f3 [stap_25786]&#xA;0xffffffff81119dad : 0xffffffff81119dad&#xA;0xffffffff810232be : 0xffffffff810232be&#xA;0xffffffff810b2c6d : 0xffffffff810b2c6d&#xA;0xffffffff810230b1 : 0xffffffff810230b1&#xA;0xffffffff8149a47f : 0xffffffff8149a47f&#xA;&#xA;$ kbt &amp;lt; backtrace&#xA;0xffffffff814919e0 : __schedule&#xA;0xffffffff811252f7 : __alloc_pages_nodemask&#xA;0xffffffff810b0040 : get_futex_key&#xA;0xffffffff81178570 : __mem_cgroup_try_charge&#xA;0xffffffff810af84f : get_futex_value_locked&#xA;0xffffffff81491ea9 : schedule&#xA;0xffffffff810af949 : futex_wait_queue_me&#xA;0xffffffff810b048a : futex_wait&#xA;0xffffffff81260e5a : strlcpy&#xA;0xffffffffa14b2d6b : function_gettimeofday_us&#xA;0xffffffff81260e5a : strlcpy&#xA;0xffffffff810b21cd : do_futex&#xA;0xffffffff81496454 : do_page_fault&#xA;0xffffffffa14b16f3 : enter_inode_uprobe&#xA;0xffffffff81119dad : uprobe_notify_resume&#xA;0xffffffff810232be : syscall_trace_leave&#xA;0xffffffff810b2c6d : sys_futex&#xA;0xffffffff810230b1 : syscall_trace_enter&#xA;0xffffffff8149a47f : tracesys&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>artemav/kalman1d</title>
    <updated>2023-03-15T01:36:17Z</updated>
    <id>tag:github.com,2023-03-15:/artemav/kalman1d</id>
    <link href="https://github.com/artemav/kalman1d" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>