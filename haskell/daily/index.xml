<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-03T02:22:39Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>dewaka/haskell-99problems</title>
    <updated>2023-03-03T02:22:39Z</updated>
    <id>tag:github.com,2023-03-03:/dewaka/haskell-99problems</id>
    <link href="https://github.com/dewaka/haskell-99problems" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Solving Haskell 99 problems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Public repository to practice Haskell 99 problems.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.haskell.org/haskellwiki/99_Haskell_exercises&#34;&gt;http://www.haskell.org/haskellwiki/99_Haskell_exercises&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>deadpendency/deadpendency</title>
    <updated>2023-03-03T02:22:39Z</updated>
    <id>tag:github.com,2023-03-03:/deadpendency/deadpendency</id>
    <link href="https://github.com/deadpendency/deadpendency" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;üßü‚Äç‚ôÄÔ∏è Deadpendency üßü‚Äç‚ôÇÔ∏è&lt;/h1&gt; &#xA;&lt;p&gt;Check if my repo&#39;s dependencies are dead (projects)!&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://deadpendency.com/&#34;&gt;website&lt;/a&gt; for more details on what the tool does.&lt;/p&gt; &#xA;&lt;p&gt;Yet, RIP, Deadpendency is &lt;a href=&#34;https://alistairb.dev/shutting-down-deadpendency/&#34;&gt;dead&lt;/a&gt;, shutdown and the code is open sourced. This repo just serves as an example of a relatively complex Haskell project deployed to the cloud.&lt;/p&gt; &#xA;&lt;h2&gt;üì¢ Overview&lt;/h2&gt; &#xA;&lt;p&gt;This documentation is focused on detailing the Haskell code and setup. In particular, the way the code is built, verified and deployed is quite nice. It is something I have iterated on for a number of years with a strong focus on simplicity, reproducibility and cacheability.&lt;/p&gt; &#xA;&lt;p&gt;Code structure wise I think it is pretty good. This is my first large Haskell project and no doubt there are areas that can be simplified. This was also a startup, so there are corners that were cut and over time I did not focus on maintaining code quality as much, since I suspected the product would not work out. Still, overall I am quite happy with it and I have refactored quite a lot to achieve something that I found easy to work with and reason about.&lt;/p&gt; &#xA;&lt;p&gt;Included is a bunch of google cloud configuration in the form of terraform files. This is my first time working with google cloud and terraform. I don&#39;t think it is bad, but I&#39;m sure there is a bunch that could be improved. Note: All google cloud infrastructure is completely deleted at this point.&lt;/p&gt; &#xA;&lt;p&gt;I&#39;ve made a decent effort to document and make the code base approachable. However, I don&#39;t want to sink too much time into this and while developing it was just me and I did not need much documentation. So at a certain point you will need to walk through the code / scripts if you want to understand it deeply.&lt;/p&gt; &#xA;&lt;p&gt;I am happy to explain or document certain things more if people have questions. Feel free to open issues.&lt;/p&gt; &#xA;&lt;h2&gt;Running As A CLI Tool&lt;/h2&gt; &#xA;&lt;p&gt;Deadpendency was built to work only as a &lt;a href=&#34;https://docs.github.com/en/developers/apps/getting-started-with-apps/about-apps&#34;&gt;GitHub app&lt;/a&gt; running on &lt;a href=&#34;https://cloud.google.com/run&#34;&gt;google cloud run&lt;/a&gt;. Even in its current form, no attempt was made to have it run locally. Part of this was timesaving, but also I personally am less keen on bespoke setups to run locally. I prefer to invest that time in better automated testing.&lt;/p&gt; &#xA;&lt;p&gt;Nonetheless, it could certainly be converted into a CLI tool as all the logic required is there. The main difference would be a CLI interface would be required as well as a lot of refactoring to rip out all the google cloud dependencies.&lt;/p&gt; &#xA;&lt;h2&gt;üóíÔ∏è Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deadpendency/deadpendency/main/docs/ARCHITECTURE.md&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deadpendency/deadpendency/main/docs/DEVOPS.md&#34;&gt;&#39;devops&#39; pattern&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/deadpendency/deadpendency/main/docs/TESTING.md&#34;&gt;Testing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;üí° Technologies&lt;/h2&gt; &#xA;&lt;h3&gt;System&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/&#34;&gt;Google Cloud Platform (GCP)&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cloud.google.com/run&#34;&gt;Google Cloud Run&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.docker.com/&#34;&gt;Docker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/graphql&#34;&gt;GitHub GraphQL API&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://redis.io/&#34;&gt;Redis&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Code&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/&#34;&gt;Stack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Library&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/relude&#34;&gt;Relude&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/generic-lens&#34;&gt;Generic Lens&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/fused-effects&#34;&gt;Fused Effects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.servant.dev/en/stable/&#34;&gt;Servant&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://morpheusgraphql.com/&#34;&gt;Morpheus GraphQL&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/gogol&#34;&gt;Gogol&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://streamly.composewell.com/&#34;&gt;Streamly&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;And a bunch of other usual suspects in Haskell.&lt;/p&gt; &#xA;&lt;h2&gt;üíª Development&lt;/h2&gt; &#xA;&lt;h3&gt;Requirements&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell Stack.&lt;/li&gt; &#xA; &lt;li&gt;Global GHC Install (currently needs 9.2.5) (eg. via &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Docker&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/&#34;&gt;Haskell Lanauge Server&lt;/a&gt; + Your Preferred Editor&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;auto/build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Testing&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;auto/verify/haskell/test&#xA;&#xA;# Or I typically just do&#xA;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building / Testing With Docker&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;RUN_DOCKER=true auto/build&#xA;RUN_DOCKER=true auto/verify/haskell/test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building / Testing Single Packages&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack test dependency-determiner&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Format Code&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# format modified / new files based on `git status`&#xA;auto/format-haskell&#xA;&#xA;# format all haskell source files&#xA;auto/format-haskell ALL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Verification&lt;/h3&gt; &#xA;&lt;p&gt;This will list the Haskell related checks, which is the focus of this doco. Refer to the other scripts in &lt;a href=&#34;https://raw.githubusercontent.com/deadpendency/deadpendency/main/auto/verify/&#34;&gt;auto/verify/*&lt;/a&gt; to look at other checks that are run.&lt;/p&gt; &#xA;&lt;h4&gt;Run Full&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;auto/verify/all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Hlint&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# hlint check modified / new files based on `git status`&#xA;auto/verify/haskell/hlint&#xA;&#xA;# hlint check all files&#xA;auto/verify/haskell/hlint ALL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Ormolu&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# format check modified / new files based on `git status`&#xA;auto/verify/haskell/ormolu&#xA;&#xA;# format check all files&#xA;auto/verify/haskell/ormolu ALL&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Weeder&lt;/h4&gt; &#xA;&lt;p&gt;Check for dead code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;auto/verify/haskell/weeder&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;GHC Warning Check&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;auto/verify/haskell/ghc-check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Deploying New Versions&lt;/h3&gt; &#xA;&lt;h4&gt;Project&lt;/h4&gt; &#xA;&lt;p&gt;Set up / update the google cloud project (roughly equivalent to an AWS Account)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;terraform/project/plan&#xA;&#xA;terraform/project/apply-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Deploy &lt;a href=&#34;https://en.wikipedia.org/wiki/Blue-green_deployment&#34;&gt;Blue / Green Version&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# BUILDKITE_COMMIT matches the docker tag pushed as part of ./gcloud/auto/release-app&#xA;APP_ENV=prod APP_LIVE=a BUILDKITE_COMMIT=1234 terraform/app/pipeline/plan&#xA;&#xA;APP_ENV=prod APP_LIVE=a BUILDKITE_COMMIT=1234 terraform/app/pipeline/apply-update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Switch The Blue / Green Version&lt;/h4&gt; &#xA;&lt;p&gt;and deploy other common infrastructure which is not tied to a specific blue / green version.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;APP_ENV=preprod APP_LIVE=a APP_LIVE_HOST=https://preprod-a-deadpendency-action-front-door-rnbiybubyq-uc.a.run.app terraform/app/common-front/plan&#xA;&#xA;APP_ENV=preprod APP_LIVE=a APP_LIVE_HOST=https://preprod-a-deadpendency-action-front-door-rnbiybubyq-uc.a.run.app terraform/app/common-front/apply-update&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>CSchank/CAS781Presentation</title>
    <updated>2023-03-03T02:22:39Z</updated>
    <id>tag:github.com,2023-03-03:/CSchank/CAS781Presentation</id>
    <link href="https://github.com/CSchank/CAS781Presentation" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
</feed>