<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-11-20T01:33:19Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NorfairKing/feedback</title>
    <updated>2022-11-20T01:33:19Z</updated>
    <id>tag:github.com,2022-11-20:/NorfairKing/feedback</id>
    <link href="https://github.com/NorfairKing/feedback" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Declarative feedback loop manager&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Feedback loop&lt;/h1&gt; &#xA;&lt;p&gt;A general purpose tool to set up good feedback loops and share them with your team.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;h3&gt;Run feedback loops&lt;/h3&gt; &#xA;&lt;p&gt;Use the &lt;code&gt;feedback&lt;/code&gt; command to set up a feedback loop for your work.&lt;/p&gt; &#xA;&lt;p&gt;For example, if you are working on a nix build, you might use this feedback loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;feedback -- nix-build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Usually &lt;code&gt;feedback&lt;/code&gt; will correctly figure out which files to watch and which files not to watch, but you can also configure this more precisely.&lt;/p&gt; &#xA;&lt;h3&gt;Declarative feedback loops&lt;/h3&gt; &#xA;&lt;p&gt;You can declare feedback loops in the &lt;code&gt;feedback.yaml&lt;/code&gt; configuration file to share them with your team. For example, this gives you a flake-based feedback loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;loops:&#xA;  check: nix flake check -L&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then you can just run this command, and not have to remember the full incantation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;feedback check&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To see the full reference of options of the configuration file, run &lt;code&gt;feedback --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;CI Integration&lt;/h3&gt; &#xA;&lt;p&gt;When sharing feedback loops with team members, it is important that no one breaks another&#39;s workflow. You can use &lt;code&gt;feedback-test&lt;/code&gt; to test out the feedback loops in a one-shot manner, so you can check that they still work on CI. See &lt;code&gt;feedback-test --help&lt;/code&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Try it out&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix run github:NorfairKing/feedback&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Install globally&lt;/h3&gt; &#xA;&lt;p&gt;Add this to your system flake:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;{&#xA;  inputs = {&#xA;    feedback.url = &#34;github:NorfairKing/feedback?ref=flake&#34;;&#xA;  };&#xA;  outputs = { nixpkgs, feedback, ... }:&#xA;    let system = &#34;x86_64-linux&#34;;&#xA;    in {&#xA;      nixosConfigurations.example = nixpkgs.lib.nixosSystem {&#xA;        inherit system;&#xA;        modules = [&#xA;          { environment.systemPackages = [ feedback.packages.${system}.default ]; }&#xA;        ];&#xA;      };&#xA;    };&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Comparison with other tools&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;feedback&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/schell/steeloverseer&#34;&gt;steeloverseer&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/watchexec/watchexec&#34;&gt;watchexec&lt;/a&gt;&lt;/th&gt; &#xA;   &lt;th&gt;&lt;a href=&#34;https://github.com/eradman/entr&#34;&gt;entr&lt;/a&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Indication of command starting&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Indication of time&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Clear screen between feedback&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Gitignore-aware&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✖&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Named feedback loops&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✖️&lt;/td&gt; &#xA;   &lt;td&gt;✖&lt;/td&gt; &#xA;   &lt;td&gt;✖&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Configurable feedback loops&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✖&lt;/td&gt; &#xA;   &lt;td&gt;✖&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Cancelling previous runs that aren&#39;t done yet&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✖&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Long-form flags for every option&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✖&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CI integration&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Indication of how long the loop took&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shell integration (Commands with pipes &#34;just work&#34;)&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Declare Env vars for configured loops&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Declare working directory for configured loops&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Arbitrary &#34;files to watch&#34; filters&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Stdin-based &#34;files to watch&#39; filters&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;C&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✔️: Supported&lt;/li&gt; &#xA; &lt;li&gt;C: Possible but you have to write some code yourself&lt;/li&gt; &#xA; &lt;li&gt;🚧: Under development&lt;/li&gt; &#xA; &lt;li&gt;✖️: Not supported&lt;/li&gt; &#xA; &lt;li&gt;?: I don&#39;t know.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Hacking&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Enter a dev shell&lt;/p&gt; &lt;pre&gt;&lt;code&gt;$ nix develop&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Start a feedback loop&lt;/p&gt; &lt;pre&gt;&lt;code&gt;feedback istall&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your changes&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure CI will pass&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nix flake check&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make a PR to &lt;code&gt;development&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/ouroboros-leios</title>
    <updated>2022-11-20T01:33:19Z</updated>
    <id>tag:github.com,2022-11-20:/input-output-hk/ouroboros-leios</id>
    <link href="https://github.com/input-output-hk/ouroboros-leios" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Documentation and tools relating to the design and prototyping of Ouroboros Leios&lt;/p&gt;&lt;hr&gt;&lt;p&gt;This repository is for documentatin and tools related to the design and prototyping of Ouroboros Leios.&lt;/p&gt; &#xA;&lt;p&gt;Currently there is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;report&lt;/code&gt;: the LaTeX source for the design report&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;CIP&lt;/code&gt;: the initial version of the Leios CIP&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;simulation&lt;/code&gt;: simulation and visualisation code for investigating Leios-like network traffic patterns.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>cutsea110/yesod-pnotify</title>
    <updated>2022-11-20T01:33:19Z</updated>
    <id>tag:github.com,2022-11-20:/cutsea110/yesod-pnotify</id>
    <link href="https://github.com/cutsea110/yesod-pnotify" rel="alternate"></link>
    <summary type="html">&lt;p&gt;yet another getMessage/setMessage using pnotify jquery plugins&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;pre&gt;&#xA;&#xA;$ stack build&#xA;$ ./sample&#xA;&#xA;&lt;/pre&gt;</summary>
  </entry>
</feed>