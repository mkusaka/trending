<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-23T01:32:18Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>sdiehl/write-you-a-haskell</title>
    <updated>2022-12-23T01:32:18Z</updated>
    <id>tag:github.com,2022-12-23:/sdiehl/write-you-a-haskell</id>
    <link href="https://github.com/sdiehl/write-you-a-haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Building a modern functional compiler from first principles. (http://dev.stephendiehl.com/fun/)&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://dev.stephendiehl.com/fun/&#34;&gt; &lt;img src=&#34;https://github.com/sdiehl/write-you-a-haskell/raw/master/img/Haskell-Logo.png&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;http://dev.stephendiehl.com/fun/&#34;&gt; &lt;img src=&#34;https://github.com/sdiehl/write-you-a-haskell/raw/master/img/cover.png&#34;&gt; &lt;/a&gt; &lt;br&gt; &lt;em&gt;Building a modern functional compiler from first principles.&lt;/em&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://twitter.com/smdiehl&#34;&gt;Stephen Diehl&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/sdiehl/write-you-a-haskell&#34;&gt;&lt;img src=&#34;https://travis-ci.org/sdiehl/write-you-a-haskell.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/sdiehl/write-you-a-haskell?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=body_badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Gitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/sdiehl/write-you-a-haskell/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;http://img.shields.io/badge/license-mit-blue.svg?sanitize=true&#34; alt=&#34;MIT License&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read Online:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/&#34;&gt;&lt;strong&gt;HTML&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/WYAH.pdf&#34;&gt;&lt;strong&gt;PDF&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;This is a work in progress.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/000_introduction.html&#34;&gt;Chapter 1: Introduction&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/001_basics.html&#34;&gt;Chapter 2: Haskell Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/002_parsers.html&#34;&gt;Chapter 3: Parsing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/003_lambda_calculus.html&#34;&gt;Chapter 4: Lambda Calculus&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/004_type_systems.html&#34;&gt;Chapter 5: Type Systems&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/005_evaluation.html&#34;&gt;Chapter 6: Evaluation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/006_hindley_milner.html&#34;&gt;Chapter 7: Hindley-Milner Inference&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/007_path.html&#34;&gt;Chapter 8: Design of ProtoHaskell&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/008_extended_parser.html&#34;&gt;Chapter 9: Extended Parser&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/009_datatypes.html&#34;&gt;Chapter 10: Custom Datatypes&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;[Chapter 11: Renamer] (&lt;a href=&#34;http://dev.stephendiehl.com/fun/010_renamer.html&#34;&gt;http://dev.stephendiehl.com/fun/010_renamer.html&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Chapter 12: Pattern Matching &amp;amp; Desugaring&lt;/li&gt; &#xA; &lt;li&gt;Chapter 13: System-F&lt;/li&gt; &#xA; &lt;li&gt;Chapter 14: Type Classes&lt;/li&gt; &#xA; &lt;li&gt;Chapter 15: Core Language&lt;/li&gt; &#xA; &lt;li&gt;Chapter 16: Kinds&lt;/li&gt; &#xA; &lt;li&gt;Chapter 17: Haskell Type Checker&lt;/li&gt; &#xA; &lt;li&gt;Chapter 18: Core Interpreter&lt;/li&gt; &#xA; &lt;li&gt;Chapter 19: Prelude&lt;/li&gt; &#xA; &lt;li&gt;Chapter 20: Design of Lazy Evaluation&lt;/li&gt; &#xA; &lt;li&gt;Chapter 21: STG&lt;/li&gt; &#xA; &lt;li&gt;Chapter 22: Compilation&lt;/li&gt; &#xA; &lt;li&gt;Chapter 23: Design of the Runtime&lt;/li&gt; &#xA; &lt;li&gt;Chapter 24: Imp&lt;/li&gt; &#xA; &lt;li&gt;Chapter 25: Code Generation ( C )&lt;/li&gt; &#xA; &lt;li&gt;Chapter 26: Code Generation ( LLVM )&lt;/li&gt; &#xA; &lt;li&gt;Chapter 27: Row Polymorphism &amp;amp; Effect Typing&lt;/li&gt; &#xA; &lt;li&gt;Chapter 28: Future Work&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;To generate the build scripts provision a cabal sandbox with pandoc in it. This is done by the &lt;code&gt;write-you-a-haskell.cabal&lt;/code&gt; and &lt;code&gt;stack.yaml&lt;/code&gt; files.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Stack&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stack exec make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To generate the pdf, the LaTeX packages must be installed on the system.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo apt-get install texlive-xetex texlive-latex-extra&#xA;$ sudo apt-get install xzdec&#xA;$ sudo tlmgr install zapfding&#xA;$ stack exec make pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Generation of the epub is also supported.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stack exec make epub&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Cabal&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cabal sandbox init&#xA;$ cabal install --only-dependencies&#xA;$ cabal exec bash&#xA;$ make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any and all contributions are always welcome. As always, I rely on the perpetual kindness and goodwill of Haskellers (like you!) to help correct grammar, clarify, and fix errors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://dev.stephendiehl.com/fun/contributing.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;img src=&#34;http://mirrors.creativecommons.org/presskit/buttons/88x31/png/by-nc-sa.png&#34; width=&#34;140&#34; alt=&#34;Artwork CC BY NC SA&#34;&gt; &#xA;&lt;p&gt;This written work is licensed under a &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;Creative Commons Attribution-NonCommercial-ShareAlike 4.0 International License&lt;/a&gt;. You may reproduce and edit this work with attribution for all non-commercial purposes.&lt;/p&gt; &#xA;&lt;p&gt;The included source is released under the terms of the &lt;a href=&#34;http://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Gabriella439/bench</title>
    <updated>2022-12-23T01:32:18Z</updated>
    <id>tag:github.com,2022-12-23:/Gabriella439/bench</id>
    <link href="https://github.com/Gabriella439/bench" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line benchmark tool&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Bench v1.0.12&lt;/h1&gt; &#xA;&lt;p&gt;This project provides the &lt;code&gt;bench&lt;/code&gt; command-line tool, which is a more powerful alternative to the &lt;code&gt;time&lt;/code&gt; command. Use &lt;code&gt;bench&lt;/code&gt; to benchmark a command using Haskell&#39;s &lt;code&gt;criterion&lt;/code&gt; library.&lt;/p&gt; &#xA;&lt;p&gt;Key features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Repeated runs&lt;/li&gt; &#xA; &lt;li&gt;Detailed statistical output&lt;/li&gt; &#xA; &lt;li&gt;Gorgeous HTML output (via the &lt;code&gt;--output&lt;/code&gt; flag) (&lt;a href=&#34;http://www.serpentine.com/criterion/fibber.html&#34;&gt;Example&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Also supports CSV or templated output&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Quick Start&lt;/h2&gt; &#xA;&lt;p&gt;You can install &lt;code&gt;bench&lt;/code&gt; on macOS via &lt;a href=&#34;http://braumeister.org/formula/bench&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ brew install bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... or you can install &lt;code&gt;bench&lt;/code&gt; using Haskell&#39;s &lt;code&gt;stack&lt;/code&gt; tool. To do that, first download the &lt;a href=&#34;https://www.haskell.org/downloads#minimal&#34;&gt;Haskell toolchain&lt;/a&gt;, which provides the &lt;code&gt;stack&lt;/code&gt; tool, then run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ stack setup&#xA;$ stack install bench&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;stack install&lt;/code&gt; will install &lt;code&gt;bench&lt;/code&gt; to &lt;code&gt;~/.local/bin&lt;/code&gt; or something similar. Make sure that the installation directory is on your executable search path before running &lt;code&gt;bench&lt;/code&gt;. &lt;code&gt;stack&lt;/code&gt; will remind you to do this if you forget.&lt;/p&gt; &#xA;&lt;p&gt;Another alternative is to use &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix package manager&lt;/a&gt;. After its installation just execute:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;$ nix-env -i bench&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Once you&#39;ve installed &lt;code&gt;bench&lt;/code&gt; (either by download or installation via &lt;code&gt;stack&lt;/code&gt; or Nix), you can begin benchmarking programs:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bench &#39;sleep 1&#39;  # Don&#39;t forget to quote the command line&#xA;benchmarking sleep 1&#xA;time                 1.003 s    (1.002 s .. 1.003 s)&#xA;                     1.000 R²   (1.000 R² .. 1.000 R²)&#xA;mean                 1.003 s    (1.003 s .. 1.003 s)&#xA;std dev              92.92 μs   (0.0 s .. 101.8 μs)&#xA;variance introduced by outliers: 19% (moderately inflated)&#xA;&#xA;$ bench true&#xA;benchmarking true&#xA;time                 410.3 μs   (382.3 μs .. 443.3 μs)&#xA;                     0.974 R²   (0.961 R² .. 0.987 R²)&#xA;mean                 420.7 μs   (406.8 μs .. 435.7 μs)&#xA;std dev              47.69 μs   (40.09 μs .. 57.91 μs)&#xA;variance introduced by outliers: 81% (severely inflated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All output from the command being benchmarked is discarded.&lt;/p&gt; &#xA;&lt;p&gt;Multiple commands are also supported:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bench id ls &#34;sleep 0.1&#34;&#xA;benchmarking bench/id&#xA;time                 4.798 ms   (4.764 ms .. 4.833 ms)&#xA;                     0.999 R²   (0.998 R² .. 1.000 R²)&#xA;mean                 4.909 ms   (4.879 ms .. 4.953 ms)&#xA;std dev              104.6 μs   (78.91 μs .. 135.7 μs)&#xA;&#xA;benchmarking bench/ls&#xA;time                 2.941 ms   (2.889 ms .. 3.006 ms)&#xA;                     0.996 R²   (0.992 R² .. 0.998 R²)&#xA;mean                 3.051 ms   (3.015 ms .. 3.094 ms)&#xA;std dev              129.7 μs   (104.3 μs .. 178.3 μs)&#xA;variance introduced by outliers: 25% (moderately inflated)&#xA;&#xA;benchmarking bench/sleep 0.1&#xA;time                 109.9 ms   (108.5 ms .. 111.0 ms)&#xA;                     1.000 R²   (1.000 R² .. 1.000 R²)&#xA;mean                 109.2 ms   (108.5 ms .. 109.7 ms)&#xA;std dev              903.0 μs   (676.4 μs .. 1.212 ms)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also output an HTML file graphing the distribution of timings by using the &lt;code&gt;--output&lt;/code&gt; flag:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ bench &#39;ls /usr/bin | wc -l&#39; --output example.html&#xA;benchmarking ls /usr/bin | wc -l&#xA;time                 6.716 ms   (6.645 ms .. 6.807 ms)&#xA;                     0.999 R²   (0.999 R² .. 0.999 R²)&#xA;mean                 7.005 ms   (6.897 ms .. 7.251 ms)&#xA;std dev              462.0 μs   (199.3 μs .. 809.2 μs)&#xA;variance introduced by outliers: 37% (moderately inflated)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;... and if you open that page in your browser you will get something that looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;http://i.imgur.com/2MCKBc2.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ bench --help&#xA;Command-line tool to benchmark other programs&#xA;&#xA;Usage: bench COMMAND ([-I|--ci CI] [-G|--no-gc] [-L|--time-limit SECS]&#xA;             [--resamples COUNT] [--regress RESP:PRED..] [--raw FILE]&#xA;             [-o|--output FILE] [--csv FILE] [--junit FILE]&#xA;             [-v|--verbosity LEVEL] [-t|--template FILE] [-m|--match MATCH]&#xA;             [NAME...] | [-n|--iters ITERS] [-m|--match MATCH] [NAME...] |&#xA;             [-l|--list] | [--version])&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  COMMAND                  The command line to benchmark&#xA;  -I,--ci CI               Confidence interval&#xA;  -G,--no-gc               Do not collect garbage between iterations&#xA;  -L,--time-limit SECS     Time limit to run a benchmark&#xA;  --resamples COUNT        Number of bootstrap resamples to perform&#xA;  --regress RESP:PRED..    Regressions to perform&#xA;  --raw FILE               File to write raw data to&#xA;  -o,--output FILE         File to write report to&#xA;  --csv FILE               File to write CSV summary to&#xA;  --junit FILE             File to write JUnit summary to&#xA;  -v,--verbosity LEVEL     Verbosity level&#xA;  -t,--template FILE       Template to use for report&#xA;  -m,--match MATCH         How to match benchmark names (&#34;prefix&#34; or &#34;glob&#34;)&#xA;  -n,--iters ITERS         Run benchmarks, don&#39;t analyse&#xA;  -m,--match MATCH         How to match benchmark names (&#34;prefix&#34; or &#34;glob&#34;)&#xA;  -l,--list                List benchmarks&#xA;  --version                Show version info&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/Gabriel439/bench&#34;&gt;&lt;img src=&#34;https://travis-ci.org/Gabriel439/bench.png&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a pretty simple utility which just wraps &lt;code&gt;criterion&lt;/code&gt; in a command-line tool, so I don&#39;t expect this project to change much. However, only time will tell.&lt;/p&gt; &#xA;&lt;h2&gt;License (BSD 3-clause)&lt;/h2&gt; &#xA;&lt;p&gt;Copyright Gabriella Gonzalez (c) 2016&lt;/p&gt; &#xA;&lt;p&gt;All rights reserved.&lt;/p&gt; &#xA;&lt;p&gt;Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Neither the name of nor the names of other contributors may be used to endorse or promote products derived from this software without specific prior written permission.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS &#34;AS IS&#34; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.&lt;/p&gt;</summary>
  </entry>
</feed>