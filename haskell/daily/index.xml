<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-09T01:38:53Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>clash-lang/clash-compiler</title>
    <updated>2023-06-09T01:38:53Z</updated>
    <id>tag:github.com,2023-06-09:/clash-lang/clash-compiler</id>
    <link href="https://github.com/clash-lang/clash-compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell to VHDL/Verilog/SystemVerilog compiler&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Clash - A functional hardware description language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitlab.com/clash-lang/clash-compiler/commits/master&#34;&gt;&lt;img src=&#34;https://gitlab.com/clash-lang/clash-compiler/badges/master/pipeline.svg?sanitize=true&#34; alt=&#34;Pipeline status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/clash-ghc&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/clash-ghc.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://packdeps.haskellers.com/feed?needle=QBayLogic&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage-deps/v/clash-ghc.svg?style=flat&#34; alt=&#34;Hackage Dependencies&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://clash-lang.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/clash-lang/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Clash is a functional hardware description language that borrows both its syntax and semantics from the functional programming language Haskell. The Clash compiler transforms these high-level descriptions to low-level synthesizable VHDL, Verilog, or SystemVerilog.&lt;/p&gt; &#xA;&lt;p&gt;Features of Clash:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Strongly typed, but with a very high degree of type inference, enabling both safe and fast prototyping using concise descriptions.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Interactive REPL: load your designs in an interpreter and easily test all your component without needing to setup a test bench.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Higher-order functions, with type inference, result in designs that are fully parametric by default.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Synchronous sequential circuit design based on streams of values, called &lt;code&gt;Signal&lt;/code&gt;s, lead to natural descriptions of feedback loops.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Support for multiple clock domains, with type safe clock domain crossing.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Community&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Mailing list&lt;/strong&gt;: for updates and questions join the mailing list &lt;a href=&#34;mailto:clash-language+subscribe@googlegroups.com&#34;&gt;clash-language+subscribe@googlegroups.com&lt;/a&gt; or read the &lt;a href=&#34;https://groups.google.com/d/forum/clash-language&#34;&gt;forum&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Slack&lt;/strong&gt;: &lt;a href=&#34;https://functionalprogramming.slack.com/archives/CPGMJFF50&#34;&gt;functionalprogramming.slack.com#clash&lt;/a&gt; (Invite yourself at &lt;a href=&#34;https://fpslack.com/&#34;&gt;fpslack.com/&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;IRC&lt;/strong&gt;: &lt;a href=&#34;https://web.libera.chat/#clash&#34;&gt;libera.chat#clash (webchat access)&lt;/a&gt; (or ircs://irc.libera.chat:6697/clash if you want to use a regular IRC client)&lt;/p&gt; &#xA;&lt;h1&gt;Get Clash&lt;/h1&gt; &#xA;&lt;p&gt;Check out &lt;a href=&#34;https://clash-lang.org/install/&#34;&gt;clash-lang.org/install&lt;/a&gt; to install the latest stable release of Clash, or to setup a Clash project.&lt;/p&gt; &#xA;&lt;h1&gt;Get Clash from source&lt;/h1&gt; &#xA;&lt;p&gt;Get the source code using &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-What-is-Git%3F&#34;&gt;Git&lt;/a&gt; and enter the cloned directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:clash-lang/clash-compiler.git&#xA;&#xA;# Alternatively, if you haven&#39;t setup SSH keys with GitHub:&#xA;# git clone https://github.com/clash-lang/clash-compiler.git&#xA;&#xA;cd clash-compiler&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To check out a released version, use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout v1.2.3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To checkout a release &lt;em&gt;branch&lt;/em&gt; use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git checkout 1.2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that release branches might contain non-released patches.&lt;/p&gt; &#xA;&lt;h2&gt;GHC compatibility&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;&lt;/th&gt; &#xA;   &lt;th&gt;Linux&lt;/th&gt; &#xA;   &lt;th&gt;Windows&lt;/th&gt; &#xA;   &lt;th&gt;macOS&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8.6&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8.8&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;8.10&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.0&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;   &lt;td&gt;✔️²&lt;/td&gt; &#xA;   &lt;td&gt;✔️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.2¹&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;9.4³&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;   &lt;td&gt;❌&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;¹ GHC 9.2 contains a regression, rendering Clash error messages indecipherable. This change will be reverted in 9.4.&lt;/p&gt; &#xA;&lt;p&gt;² GHC 9.0.2 on Windows fails to compile &lt;code&gt;clash-cores&lt;/code&gt;. We therefore don&#39;t run the Clash testsuite on CI for this combination.&lt;/p&gt; &#xA;&lt;p&gt;³ A critical dependency of Clash, &lt;code&gt;hint&lt;/code&gt;, has not yet been ported to GHC 9.4.&lt;/p&gt; &#xA;&lt;h2&gt;Cabal&lt;/h2&gt; &#xA;&lt;p&gt;To use Cabal you need both Cabal and GHC installed on your system. We recommend using &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt;. For more information, see &lt;a href=&#34;https://www.haskell.org/downloads/&#34;&gt;https://www.haskell.org/downloads/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To run &lt;code&gt;clash&lt;/code&gt; use:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal v2-run -- clash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If this fails, make sure you&#39;ve got an up-to-date package index:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Stack&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/install_and_upgrade/&#34;&gt;Install Stack&lt;/a&gt; and run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack run -- clash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Nix&lt;/h2&gt; &#xA;&lt;p&gt;Or &lt;a href=&#34;https://nixos.org/nix/download.html&#34;&gt;use Nix&lt;/a&gt; to get a shell with the &lt;code&gt;clash&lt;/code&gt; and &lt;code&gt;clashi&lt;/code&gt; binaries on your PATH:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Start the default dev shell&#xA;nix develop .&#xA;&#xA;# Start a dev shell with a specific GHC version&#xA;nix develop .#ghc961&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will need a modern version of nix with support for the new-style &lt;code&gt;nix&lt;/code&gt; command and flakes (2.4 or newer). Support for these must still be manually enabled, this can be done by setting&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;experimental-features = nix-command flakes&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;in your &lt;code&gt;nix.conf&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To automatically enter and exit the &lt;code&gt;nix&lt;/code&gt; environment on directory change, you can install &lt;a href=&#34;https://direnv.net/&#34;&gt;&lt;code&gt;direnv&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://github.com/nix-community/nix-direnv&#34;&gt;&lt;code&gt;nix-direnv&lt;/code&gt;&lt;/a&gt; and write the following to a &lt;code&gt;.envrc&lt;/code&gt; file in the root of this repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;use flake&#xA;&#xA;watch_file nix/*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Upon adding or changing this file you must &lt;code&gt;direnv allow&lt;/code&gt; in order for the file to be automatically loaded / reloaded on project changes.&lt;/p&gt; &#xA;&lt;p&gt;Individual packages / applications can also be built or run using the &lt;code&gt;nix build&lt;/code&gt; and &lt;code&gt;nix run&lt;/code&gt; commands, i.e.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix build .#clash-ghc&#xA;nix run .#clashi&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Related libraries and initiatives&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gergoerdi/clashilator&#34;&gt;Clashilator&lt;/a&gt;: tooling to integrate Clash with Verilator. Enables fast, multithreaded simulation by compiling Clash designs to C++.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clash-lang/clash-protocols&#34;&gt;Clash Protocols&lt;/a&gt;: experimental library for writing Clash circuits with bidirectional communication - such as AXI or Avalon.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/clash-lang/clash-starters&#34;&gt;Clash Starters&lt;/a&gt;: starter projects to quickly get you up and running.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/expipiplus1/clash-wavedrom&#34;&gt;Clash WaveDrom&lt;/a&gt;: generate wave diagrams from Clash using &lt;a href=&#34;https://wavedrom.com/&#34;&gt;WaveDrom&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Projects built with Clash&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/christiaanb/contranomy&#34;&gt;Contranomy&lt;/a&gt;: a RISCV implementation verified using the &lt;a href=&#34;https://github.com/SymbioticEDA/riscv-formal&#34;&gt;RISC-V Formal Verification Framework&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/gergoerdi/clash-spaceinvaders&#34;&gt;Space Invaders&lt;/a&gt;: a Clash implementation of the 1978 Space Invaders arcade machine by Taito.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>