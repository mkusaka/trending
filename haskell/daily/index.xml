<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-30T01:41:36Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NeuralNine/config-files</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/NeuralNine/config-files</id>
    <link href="https://github.com/NeuralNine/config-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of my config files.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>erebe/wstunnel</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/erebe/wstunnel</id>
    <link href="https://github.com/erebe/wstunnel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tunneling over websocket protocol - Static binary available&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/erebe/wstunnel/raw/master/logo_wstunnel.png&#34; alt=&#34;wstunnel logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Most of the time when you are using a public network, you are behind some kind of firewall or proxy. One of their purpose is to constrain you to only use certain kind of protocols. Nowadays, the most widespread protocol is http and is de facto allowed by third party equipment.&lt;/p&gt; &#xA;&lt;p&gt;This tool understands this fact and uses the websocket protocol which is compatible with http in order to bypass firewalls and proxies. Wstunnel allows you to tunnel what ever traffic you want.&lt;/p&gt; &#xA;&lt;p&gt;My inspiration came from &lt;a href=&#34;https://www.npmjs.com/package/wstunnel&#34;&gt;this project&lt;/a&gt; but as I don&#39;t want to install npm and nodejs to use this tool, I remade it in Haskell and improved it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What to expect:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Good error messages and debug informations&lt;/li&gt; &#xA; &lt;li&gt;Static tunneling (TCP and UDP)&lt;/li&gt; &#xA; &lt;li&gt;Dynamic tunneling (socks5 proxy)&lt;/li&gt; &#xA; &lt;li&gt;Support for http proxy (when behind one)&lt;/li&gt; &#xA; &lt;li&gt;Support for tls/https server (with embedded self signed certificate, see comment in the example section)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standalone binary for linux x86_64&lt;/strong&gt; (so just cp it where you want)&lt;/li&gt; &#xA; &lt;li&gt;Standalone archive for windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;P.S: Please do not pay attention to Main.hs because as I hate to write command line code this file is crappy&lt;/p&gt; &#xA;&lt;h2&gt;Command line&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Use the websockets protocol to tunnel {TCP,UDP} traffic&#xA;wsTunnelClient &amp;lt;---&amp;gt; wsTunnelServer &amp;lt;---&amp;gt; RemoteHost&#xA;Use secure connection (wss://) to bypass proxies&#xA;&#xA;wstunnel [OPTIONS] ws[s]://wstunnelServer[:port]&#xA;&#xA;Client options:&#xA;  -L --localToRemote=[BIND:]PORT:HOST:PORT      Listen on local and forwards&#xA;                                                traffic from remote. Can be&#xA;                                                used multiple time&#xA;  -D --dynamicToRemote=[BIND:]PORT              Listen on local and&#xA;                                                dynamically (with socks5 proxy)&#xA;                                                forwards traffic from remote&#xA;  -u --udp                                      forward UDP traffic instead&#xA;                                                of TCP&#xA;     --udpTimeoutSec=INT                        When using udp forwarding,&#xA;                                                timeout in seconds after when&#xA;                                                the tunnel connection is&#xA;                                                closed. Default 30sec, -1 means&#xA;                                                no timeout&#xA;  -p --httpProxy=USER:PASS@HOST:PORT            If set, will use this proxy&#xA;                                                to connect to the server&#xA;     --soMark=int                               (linux only) Mark network&#xA;                                                packet with SO_MARK sockoption&#xA;                                                with the specified value. You&#xA;                                                need to use {root, sudo,&#xA;                                                capabilities} to run wstunnel&#xA;                                                when using this option&#xA;     --upgradePathPrefix=String                 Use a specific prefix that&#xA;                                                will show up in the http path&#xA;                                                in the upgrade request. Useful&#xA;                                                if you need to route requests&#xA;                                                server side but don&#39;t have&#xA;                                                vhosts&#xA;     --hostHeader=String                        If set, add the custom string&#xA;                                                as host http header&#xA;     --tlsSNI=String                            If set, use custom string in&#xA;                                                the SNI during TLS handshake&#xA;     --websocketPingFrequencySec=int            do a hearthbeat ping every x&#xA;                                                seconds to maintain websocket&#xA;                                                connection&#xA;     --upgradeCredentials=USER[:PASS]           Credentials for the Basic&#xA;                                                HTTP authorization type sent&#xA;                                                with the upgrade request.&#xA;  -H --customHeaders=&#34;HeaderName: HeaderValue&#34;  Send custom headers in the&#xA;                                                upgrade request. Can be used&#xA;                                                multiple time&#xA;  -h --help                                     Display help message&#xA;  -V --version                                  Print version information&#xA;Server options:&#xA;     --server                                   Start a server that will&#xA;                                                forward traffic for you&#xA;  -r --restrictTo=HOST:PORT                     Accept traffic to be&#xA;                                                forwarded only to this service&#xA;Common options:&#xA;  -v --verbose                                  Print debug information&#xA;  -q --quiet                                    Print only errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Simplest one&lt;/h3&gt; &#xA;&lt;p&gt;On your remote host, start the wstunnel&#39;s server by typing this command in your terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wstunnel --server ws://0.0.0.0:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a websocket server listening on any interface on port 8080. On the client side use this command to forward traffic through the websocket tunnel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wstunnel -D 8888 ws://myRemoteHost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will create a sock5 server listening on port 8888 of a loopback interface and will forward traffic.&lt;/p&gt; &#xA;&lt;p&gt;With firefox you can setup a proxy using this tunnel, by setting in networking preferences 127.0.0.1:8888 and selecting socks5 proxy&lt;/p&gt; &#xA;&lt;p&gt;or with curl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -x socks5h://127.0.0.1:8888 http://google.com/&#xA;#Please note h after the 5, it is to avoid curl resolving DNS name locally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;As proxy command for SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;stdio&lt;/code&gt; as source port on the client side if you wish to use wstunnel as part of a proxy command for ssh&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -o ProxyCommand=&#34;wstunnel -L stdio:%h:%p ws://localhost:8080&#34; my-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When behind a corporate proxy&lt;/h3&gt; &#xA;&lt;p&gt;An other useful example is when you want to bypass an http proxy (a corporate proxy for example) The most reliable way to do it is to use wstunnel as described below&lt;/p&gt; &#xA;&lt;p&gt;Start your wstunnel server with tls activated&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wstunnel --server wss://0.0.0.0:443 -r 127.0.0.1:22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will listen on any interface using port 443 (https) and restrict traffic to be forwarded only to the ssh daemon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Be aware that the server will use self signed certificate with weak cryptographic algorithm. It was made in order to add the least possible overhead while still being compliant with tls.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not rely on wstunnel to protect your privacy, as it only forwards traffic that is already secure by design (ex: https)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now on the client side start the client with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wstunnel -L 9999:127.0.0.1:22 -p mycorporateproxy:8080 wss://myRemoteHost:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will start a tcp server on port 9999 that will contact the corporate proxy, negotiate a tls connection with the remote host and forward traffic to the ssh daemon on the remote host.&lt;/p&gt; &#xA;&lt;p&gt;You may now access your server from your local machine on ssh by using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -p 9999 login@127.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wireguard and wstunnel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kirill888.github.io/notes/wireguard-via-websocket/&#34;&gt;https://kirill888.github.io/notes/wireguard-via-websocket/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;Install the stack tool &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;https://docs.haskellstack.org/en/stable/README/&lt;/a&gt; or if you are a believer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run those commands at the root of the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack init&#xA;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add sock5 proxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add better logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add better error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add httpProxy authentification&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Reverse tunnel&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add more tests for socks5 proxy&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-node</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/input-output-hk/cardano-node</id>
    <link href="https://github.com/input-output-hk/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/a978cbb4def7018be3d0a004127da356f4db32f1c318c1a48a/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/nightly?label=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; Overview&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linux &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.musl.cardano-node-linux/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;win64 &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macos &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/macos.cardano-node-macos/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Executable&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;code&gt;here &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration &lt;code&gt;.yaml&lt;/code&gt; files&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/input-output-hk/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_. Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;Logs are output to the &lt;code&gt;logs/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;h1&gt;Profiling &amp;amp; statistics&lt;/h1&gt; &#xA;&lt;p&gt;Profiling data and RTS run stats are stored in the &lt;code&gt;profile/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for how to obtain profiling information using the scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis operations&lt;/h1&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;docs/reference/byron-genesis.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Haskell Language Server&lt;/h2&gt; &#xA;&lt;p&gt;When using Haskell Language Server with Visual Studio Code, you may find that &lt;code&gt;HLINT annotations are ignored&amp;lt;https://github.com/haskell/haskell-language-server/issues/638&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, you may run the script &lt;code&gt;./scripts/reconfigure-hlint.sh&lt;/code&gt; to generate a &lt;code&gt;.hlint.yaml&lt;/code&gt; file with HLINT ignore rules derived from the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; is essentially a container which implements several components such networking, consensus, and storage. These components have individual test coverage. The node goes through integration and release testing by Devops/QA while automated CLI tests are ongoing alongside development.&lt;/p&gt; &#xA;&lt;p&gt;Developers on &lt;code&gt;cardano-node&lt;/code&gt; can &lt;code&gt;launch their own testnets &amp;lt;doc/getting-started/launching-a-testnet.md&amp;gt;&lt;/code&gt;_ or &lt;code&gt;run the chairman tests &amp;lt;doc/getting-started/running-chairman-tests.md&amp;gt;&lt;/code&gt;_ locally.&lt;/p&gt; &#xA;&lt;h2&gt;Chairman tests&lt;/h2&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;h2&gt;Pretty printing CBOR encoded files&lt;/h2&gt; &#xA;&lt;p&gt;It may be useful to print the on chain representations of blocks, delegation certificates, txs and update proposals. There are two commands that do this (for any cbor encoded file):&lt;/p&gt; &#xA;&lt;p&gt;To pretty print as CBOR: &lt;code&gt;cabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validate CBOR files&lt;/h2&gt; &#xA;&lt;p&gt;You can validate Byron era blocks, delegation certificates, txs and update proposals with the &lt;code&gt;validate-cbor&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Native Tokens&lt;/h1&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started we have compiled a handy list of resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation for native tokens &amp;lt;https://docs.cardano.org/native-tokens/learn&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;You can also read more about &lt;code&gt;native tokens and how they compare to ada and ERC20 &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/features.rst&amp;gt;&lt;/code&gt;_. Browse native tokens created on the Cardano blockchain and see their transactions in an interactive dashboard that allows filtering and searching: nativetokens.da.iogservices.io.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://input-output-hk.github.io/cardano-node/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;./scripts/haddocs.sh&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bodigrim/text-rope</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/Bodigrim/text-rope</id>
    <link href="https://github.com/Bodigrim/text-rope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A wrapper around Text for fast line/column navigation and logarithmic concatenation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;text-rope &lt;a href=&#34;https://hackage.haskell.org/package/text-rope&#34;&gt;&lt;img src=&#34;http://img.shields.io/hackage/v/text-rope.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/text-rope&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text-rope/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/text-rope&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text-rope/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A wrapper around &lt;code&gt;Text&lt;/code&gt; for fast line/column navigation and logarithmic concatenation.&lt;/p&gt; &#xA;&lt;p&gt;Here are benchmarks for 1000 edits over 70K text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      3.09 ms ±  94 μs&#xA;    yi-rope:&#xA;      49.4 ms ± 1.4 ms, 15.98x&#xA;  UTF-16&#xA;    text-rope:&#xA;      3.09 ms ± 106 μs&#xA;    rope-utf16-splay:&#xA;      10.6 ms ± 337 μs, 3.44x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      3.04 ms ± 112 μs&#xA;    core-text:&#xA;      14.0 ms ± 297 μs, 4.59x&#xA;    yi-rope:&#xA;      6.25 ms ± 102 μs, 2.06x&#xA;  UTF-16&#xA;    text-rope:&#xA;      3.40 ms ±  70 μs&#xA;    rope-utf16-splay:&#xA;      8.92 ms ± 169 μs, 2.62x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 10000 edits over 700K text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      62.9 ms ± 4.2 ms&#xA;    yi-rope:&#xA;      568  ms ±  31 ms, 9.04x&#xA;  UTF-16&#xA;    text-rope:&#xA;      61.0 ms ± 3.9 ms&#xA;    rope-utf16-splay:&#xA;      325  ms ±  13 ms, 5.32x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      59.6 ms ± 3.8 ms&#xA;    core-text:&#xA;      209  ms ±  15 ms, 3.50x&#xA;    yi-rope:&#xA;      105  ms ± 7.4 ms, 1.76x&#xA;  UTF-16&#xA;    text-rope:&#xA;      63.6 ms ± 5.3 ms&#xA;    rope-utf16-splay:&#xA;      230  ms ± 9.0 ms, 3.62x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 100000 edits over 7M text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      963  ms ±  43 ms&#xA;    yi-rope:&#xA;      6.379 s ± 138 ms, 6.62x&#xA;  UTF-16&#xA;    text-rope:&#xA;      988  ms ±  19 ms&#xA;    rope-utf16-splay: T&#xA;      57.408 s ± 4.24 s, 58.12x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      1.014 s ±  70 ms&#xA;    core-text:&#xA;      3.008 s ± 138 ms, 2.97x&#xA;    yi-rope:&#xA;      1.716 s ±  76 ms, 1.69x&#xA;  UTF-16&#xA;    text-rope:&#xA;      1.065 s ±  53 ms&#xA;    rope-utf16-splay:&#xA;      38.852 s ± 568 ms, 36.49x&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>dapphub/dapptools</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/dapphub/dapptools</id>
    <link href="https://github.com/dapphub/dapptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dapp, Seth, Hevm, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dapp tools by DappHub &lt;a href=&#34;https://dapphub.chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/community-chat-blue.svg?style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Hello!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dapptools&lt;/code&gt; is a suite of Ethereum focused CLI tools following the Unix design philosophy, favoring composability, configurability and extensibility.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the source code for several programs hand-crafted and maintained by DappHub, along with dependency management, courtesy of Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp&#34;&gt;dapp&lt;/a&gt; - All you need Ethereum development tool. Build, test, fuzz, formally verify, debug &amp;amp; deploy solidity contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth&#34;&gt;seth&lt;/a&gt; - Ethereum CLI. Query contracts, send transactions, follow logs, slice &amp;amp; dice data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm&#34;&gt;hevm&lt;/a&gt; - Testing oriented EVM implementation. Debug, fuzz, or symbolically execute code against local or mainnet state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign&#34;&gt;ethsign&lt;/a&gt; - Sign Ethereum transactions from a local keystore or hardware wallet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;dapptools is currently in a stage of clandestine development where support for the casual user may be deprived. The software can now be considered free as in free puppy. Users seeking guidance can explore using foundry as an alternative&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Nix if you haven&#39;t already (&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;instructions&lt;/a&gt;). Then install dapptools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://dapp.tools/install | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configures the dapphub binary cache and installs the &lt;code&gt;dapp&lt;/code&gt;, &lt;code&gt;solc&lt;/code&gt;, &lt;code&gt;seth&lt;/code&gt; and &lt;code&gt;hevm&lt;/code&gt; executables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Arm support in the GHC haskell compiiler is still fairly bleeding edge, until this situation stabilises, users of M1 macs must run dapptools (and the installer!) under rosetta 2 (i.e. as an emulated x86 program). Make sure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; contains &lt;code&gt;system = x86_64-darwin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install an individual tool with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA &amp;lt;tool&amp;gt; -f $(curl -sS https://api.github.com/repos/dapphub/dapptools/releases/latest | jq -r .tarball_url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead want to build from &lt;code&gt;master&lt;/code&gt;, change the url to &lt;code&gt;https://github.com/dapphub/dapptools/archive/master.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuilt hevm binary&lt;/h3&gt; &#xA;&lt;p&gt;Static binaries for linux and macos of hevm are available for each release at &lt;a href=&#34;https://github.com/dapphub/dapptools/releases&#34;&gt;https://github.com/dapphub/dapptools/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most functionality is available out of the box, but for symbolic execution you will need &lt;a href=&#34;https://github.com/ethereum/solidity&#34;&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/a&gt; and (&lt;a href=&#34;https://github.com/Z3Prover/z3/&#34;&gt;&lt;code&gt;z3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/CVC4/CVC4&#34;&gt;&lt;code&gt;cvc4&lt;/code&gt;&lt;/a&gt; (or both)).&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the tools, consult the individual README pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth/README.md&#34;&gt;seth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp/README.md&#34;&gt;dapp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm/README.md&#34;&gt;hevm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign/README.md&#34;&gt;ethsign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or use the &lt;code&gt;--help&lt;/code&gt; flag for any tool.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re also happy to answer any questions at &lt;a href=&#34;https://dapphub.chat/&#34;&gt;https://dapphub.chat/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Deploy a &#39;Hello World&#39; contract and call it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;export ETH_FROM=$YOUR_ADDRESS&#xA;echo &#39;contract Hello { function hi() public pure returns(string memory) {return &#34;Hello, World!&#34;;}}&#39; | solc --bin -o . --overwrite -&#xA;HELLO=$(seth send --create $(&amp;lt;Hello.bin))&#xA;seth call $HELLO &#34;hi()(string)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug the first transaction of the latest block in the interactive debugger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;seth run-tx $(seth block latest transactions | jq .&#39;[0]&#39; -r) --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Vitalik&#39;s next transaction were a contract deployment, calculate the address it would be deployed at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;dapp address 0xab5801a7d398351b8be11c439e05c5b3259aec9b $(seth nonce 0xab5801a7d398351b8be11c439e05c5b3259aec9b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Symbolically explore the possible execution paths of a call to &lt;code&gt;dai.transfer(address,uint)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;seth bundle-source 0x6b175474e89094c44da98b954eedeac495271d0f &amp;gt; daisrc.json &amp;amp;&amp;amp; \&#xA;hevm symbolic --address 0x6b175474e89094c44da98b954eedeac495271d0f --rpc $ETH_RPC_URL  --debug --sig &#34;transfer(address,uint256)&#34; --json-file daisrc.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! You may be interested in the &lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/ARCHITECTURE.md&#34;&gt;architecture&lt;/a&gt; of this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://builtwithnix.org&#34;&gt;&lt;img src=&#34;https://builtwithnix.org/badge.svg?sanitize=true&#34; alt=&#34;built with nix&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xmonad/xmonad</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/xmonad/xmonad</id>
    <link href="https://github.com/xmonad/xmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core of xmonad, a small but functional ICCCM-compliant tiling window manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://xmonad.org/&#34;&gt;&lt;img alt=&#34;XMonad logo&#34; src=&#34;https://xmonad.org/images/logo-wrapped.svg?sanitize=true&#34; height=&#34;150&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;&lt;img alt=&#34;Hackage&#34; src=&#34;https://img.shields.io/hackage/v/xmonad?logo=haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/readme/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/xmonad/xmonad&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://haskell.org/&#34;&gt;&lt;img alt=&#34;Made in Haskell&#34; src=&#34;https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/stack.yml&#34;&gt;&lt;img alt=&#34;Stack&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Stack?label=Stack&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img alt=&#34;Cabal&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Haskell-CI?label=Cabal&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/nix.yml&#34;&gt;&lt;img alt=&#34;Nix&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Nix?label=Nix&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/xmonad?label=GitHub%20Sponsors&amp;amp;logo=githubsponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;&lt;img alt=&#34;Open Collective&#34; src=&#34;https://img.shields.io/opencollective/all/xmonad?label=Open%20Collective&amp;amp;logo=opencollective&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://web.libera.chat/#xmonad&#34;&gt;&lt;img alt=&#34;Chat on #xmonad@irc.libera.chat&#34; src=&#34;https://img.shields.io/badge/%23%20chat-on%20libera-brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#xmonad:matrix.org&#34;&gt;&lt;img alt=&#34;Chat on #xmonad:matrix.org&#34; src=&#34;https://img.shields.io/matrix/xmonad:matrix.org?logo=matrix&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;xmonad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A tiling window manager for X11.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; is a tiling window manager for X11. Windows are arranged automatically to tile the screen without gaps or overlap, maximising screen use. Window manager features are accessible from the keyboard: a mouse is optional. xmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in config files. Layouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;xmonad&lt;/a&gt; package, a minimal, stable, yet extensible core. It is accompanied by &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, a library of hundreds of additional community-maintained tiling algorithms and extension modules. The two combined make for a powerful X11 window-manager with endless customization possibilities. They are, quite literally, libraries for creating your own window manager.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For installation and configuration instructions, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/download.html&#34;&gt;downloading and installing xmonad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/INSTALL.html&#34;&gt;installing latest xmonad snapshot from git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/TUTORIAL.html&#34;&gt;configuring xmonad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into any trouble, consult our &lt;a href=&#34;https://xmonad.org/documentation.html&#34;&gt;documentation&lt;/a&gt; or ask the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all forms of contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/issues&#34;&gt;bug reports and feature ideas&lt;/a&gt; (also to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/issues&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/pulls&#34;&gt;bug fixes, new features, new extensions&lt;/a&gt; (usually to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/pulls&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;documentation fixes and improvements: &lt;a href=&#34;https://github.com/xmonad/xmonad&#34;&gt;xmonad&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-web&#34;&gt;xmonad-web&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;helping others in the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;financial support: &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do read the &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information about bug reporting and code contributions. For a brief overview of the architecture and code conventions, see the &lt;a href=&#34;https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Doc-Developing.html&#34;&gt;documentation for the &lt;code&gt;XMonad.Doc.Developing&lt;/code&gt; module&lt;/a&gt;. If in doubt, &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;talk to us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Started in 2007 by &lt;a href=&#34;https://github.com/spencerjanssen&#34;&gt;Spencer Janssen&lt;/a&gt;, &lt;a href=&#34;https://github.com/donsbot&#34;&gt;Don Stewart&lt;/a&gt; and &lt;a href=&#34;https://github.com/JasonCreighton&#34;&gt;Jason Creighton&lt;/a&gt;, the &lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; project lives on thanks to &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/MAINTAINERS.md&#34;&gt;new generations of maintainers&lt;/a&gt; and &lt;a href=&#34;https://github.com/xmonad/xmonad/graphs/contributors&#34;&gt;dozens of contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jgm/pandoc</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/jgm/pandoc</id>
    <link href="https://github.com/jgm/pandoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal markup converter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pandoc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jgm/pandoc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jgm/pandoc.svg?label=current+release&#34; alt=&#34;github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/pandoc.svg?label=hackage&#34; alt=&#34;hackage release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/pandoc.svg?sanitize=true&#34; alt=&#34;homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/lts/package/pandoc-types&#34;&gt;&lt;img src=&#34;https://stackage.org/package/pandoc/badge/lts&#34; alt=&#34;stackage LTS package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jgm/pandoc/actions&#34;&gt;&lt;img src=&#34;https://github.com/jgm/pandoc/workflows/CI%20tests/badge.svg?sanitize=true&#34; alt=&#34;CI tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2+-lightgray.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/pandoc-discuss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pandoc-discuss-red.svg?style=social&#34; alt=&#34;pandoc-discuss on google groups&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The universal markup converter&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc is a &lt;a href=&#34;https://haskell.org&#34;&gt;Haskell&lt;/a&gt; library for converting from one markup format to another, and a command-line tool that uses this library. It can convert &lt;em&gt;from&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;input-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;creole&lt;/code&gt; (&lt;a href=&#34;http://www.wikicreole.org/wiki/Creole1.0&#34;&gt;Creole 1.0&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csv&lt;/code&gt; (&lt;a href=&#34;https://tools.ietf.org/html/rfc4180&#34;&gt;CSV&lt;/a&gt; table)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;endnotexml&lt;/code&gt; (&lt;a href=&#34;https://support.clarivate.com/Endnote/s/article/EndNote-XML-Document-Type-Definition&#34;&gt;EndNote XML bibliography&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;ODT&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ris&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/RIS_(file_format)&#34;&gt;RIS&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;t2t&lt;/code&gt; (&lt;a href=&#34;https://txt2tags.org&#34;&gt;txt2tags&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tikiwiki&lt;/code&gt; (&lt;a href=&#34;https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax&#34;&gt;TikiWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;twiki&lt;/code&gt; (&lt;a href=&#34;https://twiki.org/cgi-bin/view/TWiki/TextFormattingRules&#34;&gt;TWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;vimwiki&lt;/code&gt; (&lt;a href=&#34;https://vimwiki.github.io&#34;&gt;Vimwiki&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua reader, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It can convert &lt;em&gt;to&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;output-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;asciidoc&lt;/code&gt; (&lt;a href=&#34;https://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc&lt;/a&gt;) or &lt;code&gt;asciidoctor&lt;/code&gt; (&lt;a href=&#34;https://asciidoctor.org/&#34;&gt;AsciiDoctor&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;beamer&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/beamer&#34;&gt;LaTeX beamer&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;context&lt;/code&gt; (&lt;a href=&#34;https://www.contextgarden.net/&#34;&gt;ConTeXt&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; or &lt;code&gt;docbook4&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt; 4)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook5&lt;/code&gt; (DocBook 5)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; or &lt;code&gt;epub3&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt; v3 book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub2&lt;/code&gt; (EPUB v2)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; or &lt;code&gt;html5&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;, i.e.&amp;nbsp;&lt;a href=&#34;https://html.spec.whatwg.org/&#34;&gt;HTML5&lt;/a&gt;/XHTML &lt;a href=&#34;https://www.w3.org/TR/html-polyglot/&#34;&gt;polyglot markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html4&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/TR/xhtml1/&#34;&gt;XHTML&lt;/a&gt; 1.0 Transitional)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;icml&lt;/code&gt; (&lt;a href=&#34;https://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/indesign/sdk/cs6/idml/idml-cookbook.pdf&#34;&gt;InDesign ICML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_archiving&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Archiving and Interchange Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_articleauthoring&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Article Authoring Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_publishing&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Journal Publishing Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (alias for &lt;code&gt;jats_archiving&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markua&lt;/code&gt; (&lt;a href=&#34;https://leanpub.com/markua/read&#34;&gt;Markua&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_ms(7)&#34;&gt;roff ms&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;OpenOffice text document&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opendocument&lt;/code&gt; (&lt;a href=&#34;http://opendocument.xml.org&#34;&gt;OpenDocument&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pdf&lt;/code&gt; (&lt;a href=&#34;https://www.adobe.com/pdf/&#34;&gt;PDF&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;plain&lt;/code&gt; (plain text),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pptx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_PowerPoint&#34;&gt;PowerPoint&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;texinfo&lt;/code&gt; (&lt;a href=&#34;https://www.gnu.org/software/texinfo/&#34;&gt;GNU Texinfo&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slideous&lt;/code&gt; (&lt;a href=&#34;https://goessner.net/articles/slideous/&#34;&gt;Slideous&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slidy&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/Talks/Tools/Slidy2/&#34;&gt;Slidy&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dzslides&lt;/code&gt; (&lt;a href=&#34;https://paulrouget.com/dzslides/&#34;&gt;DZSlides&lt;/a&gt; HTML5 + JavaScript slide show),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;revealjs&lt;/code&gt; (&lt;a href=&#34;https://revealjs.com/&#34;&gt;reveal.js&lt;/a&gt; HTML5 + JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s5&lt;/code&gt; (&lt;a href=&#34;https://meyerweb.com/eric/tools/s5/&#34;&gt;S5&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tei&lt;/code&gt; (&lt;a href=&#34;https://github.com/TEIC/TEI-Simple&#34;&gt;TEI Simple&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;xwiki&lt;/code&gt; (&lt;a href=&#34;https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/&#34;&gt;XWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;zimwiki&lt;/code&gt; (&lt;a href=&#34;https://zim-wiki.org/manual/Help/Wiki_Syntax.html&#34;&gt;ZimWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua writer, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Pandoc can also produce PDF output via LaTeX, Groff ms, or HTML.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc’s enhanced version of Markdown includes syntax for tables, definition lists, metadata blocks, footnotes, citations, math, and much more. See the User’s Manual below under &lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer. Users can also run custom pandoc filters to modify the intermediate AST (see the documentation for &lt;a href=&#34;https://pandoc.org/filters.html&#34;&gt;filters&lt;/a&gt; and &lt;a href=&#34;https://pandoc.org/lua-filters.html&#34;&gt;Lua filters&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Because pandoc’s intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. And some document elements, such as complex tables, may not fit into pandoc’s simple document model. While conversions from pandoc’s Markdown to all formats aspire to be perfect, conversions from formats more expressive than pandoc’s Markdown can be expected to be lossy.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Here’s &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/INSTALL.md&#34;&gt;how to install pandoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc’s website contains a full &lt;a href=&#34;https://pandoc.org/MANUAL.html&#34;&gt;User’s Guide&lt;/a&gt;. It is also available &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/MANUAL.txt&#34;&gt;here&lt;/a&gt; as pandoc-flavored Markdown. The website also contains some &lt;a href=&#34;https://pandoc.org/demos.html&#34;&gt;examples of the use of pandoc&lt;/a&gt; and a limited &lt;a href=&#34;https://pandoc.org/try&#34;&gt;online demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests, bug reports, and feature requests are welcome. Please make sure to read &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/CONTRIBUTING.md&#34;&gt;the contributor guidelines&lt;/a&gt; before opening a new issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;© 2006-2022 John MacFarlane (&lt;a href=&#34;mailto:jgm@berkeley.edu&#34;&gt;jgm@berkeley.edu&lt;/a&gt;). Released under the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.html&#34; title=&#34;GNU General Public License&#34;&gt;GPL&lt;/a&gt;, version 2 or greater. This software carries no warranty of any kind. (See COPYRIGHT for full copyright and warranty notices.)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jtdaugherty/brick</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/jtdaugherty/brick</id>
    <link href="https://github.com/jtdaugherty/brick" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A declarative Unix terminal UI programming library written in Haskell&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/jtdaugherty/brick/master/logo/brick-final-clearbg-with-text.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; is a Haskell terminal user interface (TUI) programming toolkit. To use it, you write a pure function that describes how your user interface should be drawn based on your current application state and you provide a state transformation function to handle events.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; exposes a declarative API. Unlike most GUI toolkits which require you to write a long and tedious sequence of &#34;create a widget, now bind an event handler&#34;, &lt;code&gt;brick&lt;/code&gt; just requires you to describe your interface using a set of declarative layout combinators.&lt;/p&gt; &#xA;&lt;p&gt;Under the hood, this library builds upon &lt;a href=&#34;http://hackage.haskell.org/package/vty&#34;&gt;vty&lt;/a&gt;, so some knowledge of Vty will be helpful in using this library.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example interface (see &lt;code&gt;programs/ReadmeDemo.hs&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;withBorderStyle unicode $&#xA;borderWithLabel (str &#34;Hello!&#34;) $&#xA;(center (str &#34;Left&#34;) &amp;lt;+&amp;gt; vBorder &amp;lt;+&amp;gt; center (str &#34;Right&#34;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Result:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;┌─────────Hello!─────────┐&#xA;│           │            │&#xA;│           │            │&#xA;│   Left    │   Right    │&#xA;│           │            │&#xA;│           │            │&#xA;└────────────────────────┘&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Featured Projects&lt;/h2&gt; &#xA;&lt;p&gt;To get an idea of what some people have done with &lt;code&gt;brick&lt;/code&gt;, check out these projects. If you have made something and would like me to include it, get in touch!&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/SamTay/tetris&#34;&gt;&lt;code&gt;tetris&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the Tetris game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/callum-oakley/gotta-go-fast&#34;&gt;&lt;code&gt;gotta-go-fast&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A typing tutor&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/potomak/haskell-player&#34;&gt;&lt;code&gt;haskell-player&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;afplay&lt;/code&gt; frontend&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/elaye/mushu&#34;&gt;&lt;code&gt;mushu&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An &lt;code&gt;MPD&lt;/code&gt; client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/matterhorn-chat/matterhorn&#34;&gt;&lt;code&gt;matterhorn&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A client for &lt;a href=&#34;https://about.mattermost.com/&#34;&gt;Mattermost&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/maoe/viewprof&#34;&gt;&lt;code&gt;viewprof&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A GHC profile viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jtdaugherty/tart&#34;&gt;&lt;code&gt;tart&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A mouse-driven ASCII art drawing program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rootmos/silly-joy&#34;&gt;&lt;code&gt;silly-joy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interpreter for Joy&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/jackkiefer/herms&#34;&gt;&lt;code&gt;herms&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A command-line tool for managing kitchen recipes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/purebred-mua/purebred&#34;&gt;&lt;code&gt;purebred&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A mail user agent&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/8Gitbrix/2048Haskell&#34;&gt;&lt;code&gt;2048Haskell&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the 2048 game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/andrevdm/bhoogle&#34;&gt;&lt;code&gt;bhoogle&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A &lt;a href=&#34;https://www.haskell.org/hoogle/&#34;&gt;Hoogle&lt;/a&gt; client&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/pasqu4le/clifm&#34;&gt;&lt;code&gt;clifm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A file manager&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/shajenM/projects/tree/master/towerHanoi&#34;&gt;&lt;code&gt;towerHanoi&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Animated solutions to The Tower of Hanoi&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChrisPenner/void-space&#34;&gt;&lt;code&gt;VOIDSPACE&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A space-themed typing-tutor game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ambuc/solitaire&#34;&gt;&lt;code&gt;solitaire&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;The card game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evanrelf/sudoku-tui&#34;&gt;&lt;code&gt;sudoku-tui&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Sudoku implementation&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/kowainik/summoner/tree/master/summoner-tui&#34;&gt;&lt;code&gt;summoner-tui&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive frontend to the Summoner tool&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ta0kira/wrapping-editor&#34;&gt;&lt;code&gt;wrapping-editor&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An embeddable editor with support for Brick&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/andys8/git-brunch&#34;&gt;&lt;code&gt;git-brunch&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A git branch checkout utility&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Yvee1/hascard&#34;&gt;&lt;code&gt;hascard&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A program for reviewing &#34;flash card&#34; notes&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/evuez/ttyme&#34;&gt;&lt;code&gt;ttyme&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for &lt;a href=&#34;https://www.getharvest.com/&#34;&gt;Harvest&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for &lt;code&gt;ghcup&lt;/code&gt;, the Haskell toolchain manager&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mlang/chessIO&#34;&gt;&lt;code&gt;cbookview&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for exploring polyglot chess opening book files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/rmehri01/thock&#34;&gt;&lt;code&gt;thock&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A modern TUI typing game featuring online racing against friends&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/benjaminselfridge/fifteen&#34;&gt;&lt;code&gt;fifteen&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the &lt;a href=&#34;https://en.wikipedia.org/wiki/15_puzzle&#34;&gt;15 puzzle&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/benjaminselfridge/maze&#34;&gt;&lt;code&gt;maze&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A Brick-based maze game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/2mol/pboy&#34;&gt;&lt;code&gt;pboy&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A tiny PDF organizer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/DamienCassou/hyahtzee2#readme&#34;&gt;&lt;code&gt;hyahtzee2&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Famous Yahtzee dice game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/gerdreiss/brewsage#readme&#34;&gt;&lt;code&gt;brewsage&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A TUI for Homebrew&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://codedownio.github.io/sandwich/&#34;&gt;&lt;code&gt;sandwich&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A test framework with a TUI interface&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/florentc/youbrick&#34;&gt;&lt;code&gt;youbrick&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A feed aggregator and launcher for Youtube channels&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/byorgey/swarm/&#34;&gt;&lt;code&gt;swarm&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A 2D programming and resource gathering game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/simonmichael/hledger&#34;&gt;&lt;code&gt;hledger-ui&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A terminal UI for the hledger accounting system.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;http://github.com/rootzlevel/hledger-iadd&#34;&gt;&lt;code&gt;hledger-iadd&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive terminal UI for adding hledger journal entries&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ivanjermakov/wordle&#34;&gt;&lt;code&gt;wordle&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An implementation of the Wordle game&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/akazukin5151/kpxhs&#34;&gt;&lt;code&gt;kpxhs&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive &lt;a href=&#34;https://github.com/keepassxreboot/keepassxc/&#34;&gt;Keepass&lt;/a&gt; database viewer&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/Simon-Hostettler/htyper&#34;&gt;&lt;code&gt;htyper&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A typing speed test program&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ajithnn/ullekha&#34;&gt;&lt;code&gt;ullekha&lt;/code&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;An interactive terminal notes/todo app with file/redis persistence&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;These third-party packages also extend &lt;code&gt;brick&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Project&lt;/th&gt; &#xA;   &lt;th&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/ChrisPenner/brick-filetree&#34;&gt;&lt;code&gt;brick-filetree&lt;/code&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/brick-filetree&#34;&gt;[Hackage]&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;A widget for exploring a directory tree and selecting or flagging files and directories&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Release Announcements / News&lt;/h2&gt; &#xA;&lt;p&gt;Find out about &lt;code&gt;brick&lt;/code&gt; releases and other news on Twitter:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/brick_haskell/&#34;&gt;https://twitter.com/brick_haskell/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;Check out the many demo programs to get a feel for different aspects of the library:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal new-build -f demos&#xA;$ find dist-newstyle -type f -name \*-demo&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To get started, see the &lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/guide.rst&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Documentation for &lt;code&gt;brick&lt;/code&gt; comes in a variety of forms:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/guide.rst&#34;&gt;The official brick user guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/samtay-tutorial.md&#34;&gt;Samuel Tay&#39;s brick tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Haddock (all modules)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/programs&#34;&gt;Demo programs&lt;/a&gt; (&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/docs/programs-screenshots.md&#34;&gt;Screenshots&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/jtdaugherty/brick/raw/master/FAQ.md&#34;&gt;FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Feature Overview&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; comes with a bunch of batteries included:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vertical and horizontal box layout widgets&lt;/li&gt; &#xA; &lt;li&gt;Basic single- and multi-line text editor widgets&lt;/li&gt; &#xA; &lt;li&gt;List and table widgets&lt;/li&gt; &#xA; &lt;li&gt;Progress bar widget&lt;/li&gt; &#xA; &lt;li&gt;Simple dialog box widget&lt;/li&gt; &#xA; &lt;li&gt;Border-drawing widgets (put borders around or in between things)&lt;/li&gt; &#xA; &lt;li&gt;Generic scrollable viewports and viewport scroll bars&lt;/li&gt; &#xA; &lt;li&gt;General-purpose layout control combinators&lt;/li&gt; &#xA; &lt;li&gt;Extensible widget-building API&lt;/li&gt; &#xA; &lt;li&gt;User-customizable attribute themes&lt;/li&gt; &#xA; &lt;li&gt;Type-safe, validated input form API (see the &lt;code&gt;Brick.Forms&lt;/code&gt; module)&lt;/li&gt; &#xA; &lt;li&gt;A filesystem browser for file and directory selection&lt;/li&gt; &#xA; &lt;li&gt;Borders can be configured to automatically connect!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Brick-Users Discussion&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;brick-users&lt;/code&gt; Google Group / e-mail list is a place to discuss library changes, give feedback, and ask questions. You can subscribe at:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/group/brick-users&#34;&gt;https://groups.google.com/group/brick-users&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Status&lt;/h2&gt; &#xA;&lt;p&gt;There are some places were I have deliberately chosen to worry about performance later for the sake of spending more time on the design (and to wait on performance issues to arise first). &lt;code&gt;brick&lt;/code&gt; is also something of an experimental project of mine and some aspects of the design involve trade-offs that might not be right for your application. Brick is not intended to be all things to all people; rather, I want it to provide a good foundation for building complex terminal interfaces in a declarative style to take away specific headaches of building, modifying, and working with such interfaces, all while seeing how far we can get with a pure function to specify the interface.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;brick&lt;/code&gt; exports an extension API that makes it possible to make your own packages and widgets. If you use that, you&#39;ll also be helping to test whether the exported interface is usable and complete!&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please file bug reports as GitHub issues. For best results:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Include the versions of relevant software packages: your terminal emulator, &lt;code&gt;brick&lt;/code&gt;, &lt;code&gt;ghc&lt;/code&gt;, and &lt;code&gt;vty&lt;/code&gt; will be the most important ones.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Clearly describe the behavior you expected ...&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;... and include a minimal demonstration program that exhibits the behavior you actually observed.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you decide to contribute, that&#39;s great! Here are some guidelines you should consider to make submitting patches easier for all concerned:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you want to take on big things, talk to me first; let&#39;s have a design/vision discussion before you start coding. Create a GitHub issue and we can use that as the place to hash things out.&lt;/li&gt; &#xA; &lt;li&gt;Please make changes consistent with the conventions I&#39;ve used in the codebase.&lt;/li&gt; &#xA; &lt;li&gt;Please adjust or provide Haddock and/or user guide documentation relevant to any changes you make.&lt;/li&gt; &#xA; &lt;li&gt;New commits should be &lt;code&gt;-Wall&lt;/code&gt; clean.&lt;/li&gt; &#xA; &lt;li&gt;Please do NOT include package version changes in your patches. Package version changes are only done at release time when the full scope of a release&#39;s changes can be evaluated to determine the appropriate version change.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>kmonad/kmonad</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/kmonad/kmonad</id>
    <link href="https://github.com/kmonad/kmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An advanced keyboard manager&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;KMonad&#34; title=&#34;KMonad&#34; height=&#34;32&#34; src=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/kmonad.svg?sanitize=true&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;The Onion of Keyboard Management Tools, available on GNU/Linux, Windows, and MacOS!&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#configuration&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt; • &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;KMonad is an advanced tool that lets you infinitely customize and extend the functionalities of almost any keyboard. For a detailed list of features, see &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get started with the latest, stable binary release, please check out the master branch, if you are interested in the latest additions and tweaks, switch on over to develop and compile your own binary.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you need any help or just want to say hi, you can join our &lt;a href=&#34;https://discord.gg/3tFfWmnahN&#34;&gt;Discord server&lt;/a&gt; or jump into our &lt;a href=&#34;https://web.libera.chat/#kmonad&#34;&gt;IRC channel&lt;/a&gt; (&lt;code&gt;#kmonad@irc.libera.chat&lt;/code&gt;), which is also bridged with matrix (&lt;code&gt;#kmonad:libera.chat&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;KMonad offers advanced customization features such as &lt;strong&gt;layers&lt;/strong&gt;, &lt;strong&gt;multi-tap&lt;/strong&gt;, &lt;strong&gt;tap-hold&lt;/strong&gt;, and much more. These features are usually available at the hardware level on the QMK-firmware enabled keyboards. However, KMonad allows you to enjoy such features in virtually any keyboard by low-level system manipulations.&lt;/p&gt; &#xA;&lt;p&gt;For a good introduction to KMonad, have a look at &lt;a href=&#34;https://www.youtube.com/watch?v=Dhj1eauljwU&#34;&gt;this Youtube video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Key Customizations&lt;/h4&gt; &#xA;&lt;p&gt;KMonad lets you map any keyboard button to any keymap. Want to swap the useless &lt;strong&gt;Caps Lock&lt;/strong&gt; key with the &lt;strong&gt;Escape&lt;/strong&gt; key? Want to have your modifiers such as &lt;strong&gt;Shift&lt;/strong&gt; and &lt;strong&gt;Control&lt;/strong&gt; on your home row, without breaking your normal typing flow? Want a modifier that is combination of &lt;strong&gt;Alt + Ctrl + Super + Shift&lt;/strong&gt;? You can do all of those and much more!&lt;/p&gt; &#xA;&lt;h4&gt;Layers&lt;/h4&gt; &#xA;&lt;p&gt;A layer is a set of keymaps assigned to your keyboard&#39;s buttons. You can have as many layers on top of your base layer as you want. For instance, you can have your regular QWERTY layout, a Colemak/ Dvorak layout, a numbers and symbols layer, a function keys layer, a layer for mouse navigation and system controls --- all in a 60% keyboard. When a particular layer is active, any keypress is interpreted according to the layout defined in that layer. With proper configurations, you can jump to a specific layer or switch to one for the next keypress, or do various other complex manipulations.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Use and Multi-Tap Buttons&lt;/h4&gt; &#xA;&lt;p&gt;One of the distinguishing features of KMonad is the vast capabilities with Multi-Use Buttons. You can have a single button do different things based on whether it is pressed quickly in succession, or pressed once, or held. For example, you can configure the &lt;strong&gt;Caps Lock&lt;/strong&gt; key to act as an &lt;strong&gt;Escape&lt;/strong&gt; button when pressed once and released, a &lt;strong&gt;Ctrl&lt;/strong&gt; modifier when held-down, and a button to jump to a layer when pressed twice quickly in succession. You can make the left and right &lt;strong&gt;Shift&lt;/strong&gt; keys to act like left and right parentheses (like the Space Cadet Shift keys) when tapped once, and regular &lt;strong&gt;Shift&lt;/strong&gt; keys when held down. The possibilities are infinite!&lt;/p&gt; &#xA;&lt;h4&gt;Command Buttons&lt;/h4&gt; &#xA;&lt;p&gt;With Command Buttons you can trigger shell commands with a tap of any button.&lt;/p&gt; &#xA;&lt;h4&gt;And More!&lt;/h4&gt; &#xA;&lt;p&gt;There are many more exciting features of KMonad that you can find in the &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;configuration tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For more information on how to install KMonad, please refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/installation.md&#34;&gt;installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;For information on how to configure KMonad, please refer you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;the configuration tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;user configurations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to add your own keyboard configuration to &lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;kmonad-contrib&lt;/a&gt;? Just fork the repository, create a new subdirectory using your GitHub username and submit a pull request!&lt;/p&gt; &#xA;&lt;h3&gt;Editor Support for the Configuration Language&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kbd-mode&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/canadaduane/vscode-kmonad&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Startup&lt;/h3&gt; &#xA;&lt;p&gt;There are startup scripts available for different init systems in &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/startup/&#34;&gt;startup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;For several commonly asked questions regarding various configuration issues, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/faq.md&#34;&gt;the FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The original maintainer is chronically ill and currently unable to work on KMonad. Luckily we have a very helpful and pleasant community that is happy to be of assistance. When energy and circumstance permits, the core developer will labour to make progress, but for now this will be sporadically and unpredictably.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/ouroboros-network</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/input-output-hk/ouroboros-network</id>
    <link href="https://github.com/input-output-hk/ouroboros-network" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of the Ouroboros family of consensus algorithms, with its networking support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ouroboros-Network&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;io-sim&lt;/code&gt; - &lt;code&gt;IOSim&lt;/code&gt; simulator monad which supports asynchronous exceptions, &lt;code&gt;STM&lt;/code&gt; transactions and &lt;code&gt;async&lt;/code&gt; interface, timers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io-classes&lt;/code&gt; - type classes, all of them have instance for both &lt;code&gt;IOSim&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typed-protocols&lt;/code&gt; - session type framework with support of &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_pipelining&#34;&gt;protocol pipelining&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See 45min Haskell eXchange 2019 &lt;a href=&#34;https://skillsmatter.com/skillscasts/14633-45-minute-talk-by-duncan-coutts&#34;&gt;talk&lt;/a&gt; by @dcoutts.&lt;/li&gt; &#xA;   &lt;li&gt;See three 50min Monadic Party 2019 workshop talks by @coot: &lt;a href=&#34;https://www.youtube.com/watch?v=j8gza2L61nM&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=oV6KSl1srL8&#34;&gt;Part 2&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=nOIQCRPwmPA&#34;&gt;Part 3&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network&lt;/code&gt;- ouroboros network package which implements protocols which to run ouroboros family of protocols, multiplexing layer.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/input-output-hk/cardano-byron-proxy&#34;&gt;&lt;code&gt;byron-proxy&lt;/code&gt;&lt;/a&gt; is a network protocol proxy between Byron and Shelley. It now lives in a separate repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have two documents which describe various levels of the networking layer of the Cardano Shelley implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/1&#34;&gt;Introduction to the design of Data Diffusion and Networking of Cardano Shelley&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document explains the technical requirements and key constraints for the networking layer of the &lt;em&gt;Cardano Shelley&lt;/em&gt; implementation of &lt;em&gt;Ouroboros Praos&lt;/em&gt;. This is a design document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/2&#34;&gt;The Shelley Networking Protocol&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document is a technical specification of the networking protocol. It includes serialisation formats, necessary details of multiplexer and technical specifications of mini-protocols used by either &lt;em&gt;node-to-node&lt;/em&gt; and &lt;em&gt;node-to-client&lt;/em&gt; flavours of the protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-network/&#34;&gt;Haddock documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.cardano.org/en/latest/&#34;&gt;Official Cardano Documentation&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Specifically the section &#34;Explore Cardano&#34; is helpful, since it talks about the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-architecture/overview&#34;&gt;Cardano Architecture&lt;/a&gt;, &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-design-rationale&#34;&gt;Cardano Design Rationale&lt;/a&gt;, the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-network/about-the-cardano-network&#34;&gt;Cardano Network&lt;/a&gt;, etc. Although the Cardano documentation is less detailed, it is a good place to start and refresh some more basic concepts about Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network API&lt;/h2&gt; &#xA;&lt;p&gt;The API consists of three layers:&lt;/p&gt; &#xA;&lt;p&gt;• mini-protocol api&#39;s, which are GADTs for each mini-protocol under &lt;code&gt;Ouroboros.Network.Protocol&lt;/code&gt;; this hides heavy type machinery of session types. One only needs the typed &lt;code&gt;Peer&lt;/code&gt; type when one is using &lt;code&gt;runPeer&lt;/code&gt; or &lt;code&gt;runPeerPipelined&lt;/code&gt; function and each protocol exposes a function to create it (e.g. &lt;code&gt;Ouroboros.Network.Protocol.ChainSync.Client.chainSyncClientPeer&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;• callback &lt;code&gt;ptcl -&amp;gt; channel -&amp;gt; m ()&lt;/code&gt; where &lt;code&gt;ptcl&lt;/code&gt; is enumeration for each mini-protocol, this is either &lt;code&gt;NodeToNodeProtocols&lt;/code&gt; or &lt;code&gt;NodeToClientProtocols&lt;/code&gt;. The callback is wrapped in &lt;code&gt;OuroborosApplication&lt;/code&gt; GADT which allows to differentiate the initiator / responder (or client / server) callbacks.&lt;/p&gt; &#xA;&lt;p&gt;• versioning which is a map from version numbers to the above callbacks and version data (the tricky part here is that version data type can be different between different versions; there is a simple way of building this map using a semigroup). You can use &lt;code&gt;simpleSingletonVersion&lt;/code&gt; if your application does not depend on negotiated version data. However, &lt;code&gt;Ouroboros.Network.NodeToNode&lt;/code&gt; and &lt;code&gt;Ouroboros.Network.NodeToClient&lt;/code&gt; expose &lt;code&gt;V1&lt;/code&gt; api which hides versioning from the caller.&lt;/p&gt; &#xA;&lt;h2&gt;Demo applications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/Ouroboros-Network-Demo&#34;&gt;demo-chain-sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/cardano-ping&#34;&gt;cardano-ping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/network-mux/demo/mux-demo.hs&#34;&gt;mux-demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ouroboros-network-framework/demo/ping-pong.hs&#34;&gt;demo-ping-pong&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/Win32-network/demo/named-pipe-demo.hs&#34;&gt;named-pipe-demo&lt;/a&gt; (Windows only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ntp-client/demo/Main.hs&#34;&gt;demo-ntp-client&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Instructions&lt;/summary&gt; To run a demo type: &#xA; &lt;pre&gt;&lt;code&gt;cabal run &amp;lt;DEMO_NAME&amp;gt; --&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After &lt;code&gt;--&lt;/code&gt; you will need to pass arguments, when a demo is run without arguments it will specify what arguments it needs.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Ouroboros-Consensus&lt;/h1&gt; &#xA;&lt;p&gt;Consensus layer of the family Ouroboros blockchain protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Ouroboros-Consensus Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;ouroboros-consensus/docs&lt;/code&gt; folder contains documentation about the consensus layer. Start with the &lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/ouroboros-consensus/docs/Contributing.md&#34;&gt;README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.consensus-docs.x86_64-linux/latest/download/1&#34;&gt;The Cardano Consensus and Storage Layer&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This technical report explains the design of the consensus and storage layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;The consensus team uses &lt;code&gt;stylish-haskell&lt;/code&gt; &amp;gt;= 0.11.0.0 to format its code. This is enforced by CI.&lt;/p&gt; &#xA;&lt;p&gt;Either enable editor integration or call the script used by CI itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Nix, you can use the following command, which will build and use the right version of &lt;code&gt;stylish-haskell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --run ./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>unisonweb/unison</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/unisonweb/unison</id>
    <link href="https://github.com/unisonweb/unison" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A friendly programming language from the future&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Unison language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/unisonweb/unison&#34;&gt;&lt;img src=&#34;https://travis-ci.org/unisonweb/unison.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unisonweb.org&#34;&gt;Unison&lt;/a&gt; is a modern, statically-typed purely functional language with the ability to describe entire distributed systems using a single program. Here&#39;s an example of a distributed map-reduce implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Haskell&#34;&gt;-- comments start with `--`&#xA;mapReduce loc fn ifEmpty reduce data = match split data with&#xA;  Empty          -&amp;gt; ifEmpty&#xA;  One a          -&amp;gt; fn a&#xA;  Two left right -&amp;gt;&#xA;    fl = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !left)&#xA;    fr = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !right)&#xA;    reduce (await fl) (await fr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function can be either simulated locally (possibly with faults injected for testing purposes), or run atop a distributed pool of compute. See &lt;a href=&#34;https://www.unison-lang.org/articles/distributed-datasets/&#34;&gt;this article&lt;/a&gt; for more in-depth coverage of how to build distributed computing libraries like this.&lt;/p&gt; &#xA;&lt;p&gt;Other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/the-big-idea/&#34;&gt;Learn about the big idea behind Unison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://unison-lang.org&#34;&gt;the project website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Say hello or lurk &lt;a href=&#34;https://unison-lang.org/slack&#34;&gt;in the Slack chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Explore &lt;a href=&#34;https://share.unison-lang.org/&#34;&gt;the Unison ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/&#34;&gt;Learn Unison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building using Stack&lt;/h2&gt; &#xA;&lt;p&gt;If these instructions don&#39;t work for you or are incomplete, please file an issue.&lt;/p&gt; &#xA;&lt;p&gt;The build uses &lt;a href=&#34;http://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt;. If you don&#39;t already have it installed, &lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;follow the install instructions&lt;/a&gt; for your platform. (Hint: &lt;code&gt;brew update &amp;amp;&amp;amp; brew install stack&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/unisonweb/unison.git&#xA;$ cd unison&#xA;$ stack --version # we&#39;ll want to know this version if you run into trouble&#xA;$ stack build --fast --test &amp;amp;&amp;amp; stack exec unison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a local codebase-ui while building from source, you can use the &lt;code&gt;/dev-ui-install.sh&lt;/code&gt; script. It will download the latest release of the codebase-ui and put it in the expected location for the unison executable created by &lt;code&gt;stack build&lt;/code&gt;. When you start unison, you&#39;ll see a url where the codebase-ui is running.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/unisonweb/unison/trunk/development.markdown&#34;&gt;&lt;code&gt;development.markdown&lt;/code&gt;&lt;/a&gt; for a list of build commands you&#39;ll likely use during development.&lt;/p&gt; &#xA;&lt;h2&gt;Codebase Server&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;ucm&lt;/code&gt; starts it starts a Codebase web server that is used by the &lt;a href=&#34;https://github.com/unisonweb/codebase-ui&#34;&gt;Codebase UI&lt;/a&gt;. It selects a random port and a unique token that must be used when starting the UI to correctly connect to the server.&lt;/p&gt; &#xA;&lt;p&gt;The port, host and token can all be configured by providing environment variables when starting &lt;code&gt;ucm&lt;/code&gt;: &lt;code&gt;UCM_PORT&lt;/code&gt;, &lt;code&gt;UCM_HOST&lt;/code&gt;, and &lt;code&gt;UCM_TOKEN&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-db-sync</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/input-output-hk/cardano-db-sync</id>
    <link href="https://github.com/input-output-hk/cardano-db-sync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A component that follows the Cardano chain and stores blocks and transactions in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cardano DB Sync&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Anyone wishing to build and run anything in this repository should avoid the &lt;code&gt;master&lt;/code&gt; branch and build/run from the latest release tag.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of Cardano DB Sync is to follow the Cardano chain and take information from the chain and an internally maintained copy of ledger state. Data is then extracted from the chain and inserted into a PostgreSQL database. SQL queries can then be written directly against the database schema or as queries embedded in any language with libraries for interacting with an SQL database.&lt;/p&gt; &#xA;&lt;p&gt;Examples of what someone would be able to do via an SQL query against a Cardano DB Sync instance fully synced to a specific network is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up any block, transaction, address, stake pool etc on that network, usually by the hash that identifies that item or the index into another table.&lt;/li&gt; &#xA; &lt;li&gt;Look up the balance of any stake address for any Shelley or later epoch.&lt;/li&gt; &#xA; &lt;li&gt;Look up the amount of ADA delegated to each pool for any Shelley or later epoch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example SQL queries are available at &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example Queries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The cardano-db-sync component consists of a set of components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db&lt;/code&gt; which defines common data types and functions used by any application that needs to interact with the data base from Haskell. In particular, it defines the database schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-tool&lt;/code&gt; a tool used to manage the databases of cardano-db-sync (create and run migrations, validate and analyse)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-sync&lt;/code&gt; which acts as a Cardano node, following the chain and inserting data from the chain into a PostgreSQL database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The db-sync node is written in a highly modular fashion to allow it to be as flexible as possible.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cardano-db-sync&lt;/code&gt; node connects to a locally running &lt;code&gt;cardano-node&lt;/code&gt; (ie one connected to other nodes in the Cardano network over the internet with TCP/IP) using a Unix domain socket, retrieves blocks, updates its internal ledger state and stores parts of each block in a local PostgreSQL database. The database does not store things like cryptographic signatures but does store enough information to follow the chain of blocks and look at the transactions within blocks.&lt;/p&gt; &#xA;&lt;p&gt;The PostgreSQL database is designed to be accessed in a read-only fashion from other applications. The database schema is highly normalised which helps prevent data inconsistencies (specifically with the use of foreign keys from one table to another). More user friendly database queries can be implemented using &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createview.html&#34;&gt;Postgres Views&lt;/a&gt; to implement joins between tables.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The system requirements for &lt;code&gt;cardano-db-sync&lt;/code&gt; (with both &lt;code&gt;db-sync&lt;/code&gt; and the &lt;code&gt;node&lt;/code&gt; running on the same machine are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any of the big well known Linux distributions (eg, Debian, Ubuntu, RHEL, CentOS, Arch etc).&lt;/li&gt; &#xA; &lt;li&gt;32 Gigabytes of RAM or more.&lt;/li&gt; &#xA; &lt;li&gt;4 CPU cores or more.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the machine has sufficient IOPS (Input/Output Operations per Second). Ie it should be 60k IOPS or better. Lower IOPS ratings will result in slower sync times and/or falling behind the chain tip.&lt;/li&gt; &#xA; &lt;li&gt;160 Gigabytes or more of disk storage (preferably SSD which are 2-5 times faster than electro-mechanical disks).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended configuration is to have the &lt;code&gt;db-sync&lt;/code&gt; and the PostgreSQL server on the same machine. During syncing (getting historical data from the blockchain) there is a &lt;strong&gt;HUGE&lt;/strong&gt; amount of data traffic between &lt;code&gt;db-sync&lt;/code&gt; and the database. Traffic to a local database is significantly faster than traffic to a database on the LAN or remotely to another location.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues with this project, consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt; page for possible solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/building-running.md&#34;&gt;BuildingRunning&lt;/a&gt;: Building and running the db-sync node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/docker.md&#34;&gt;Docker&lt;/a&gt;: Instruction for docker-compose, and building the images using nix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example SQL queries&lt;/a&gt;: Some example SQL and Haskell/Esqueleto queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/pool-offline-data.md&#34;&gt;PoolOfflineData&lt;/a&gt;: Explanation of how stake pool offline data is retried.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema.md&#34;&gt;Schema Documentation&lt;/a&gt;: The database schema documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema-management.md&#34;&gt;Schema Management&lt;/a&gt;: How the database schema is managed and modified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/state-snapshot.md&#34;&gt;StateSnapshot&lt;/a&gt;: Document the creation and restoration of state snapshot files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-db-sync/native.haskellPackages.cardano-db.checks.test-db.x86_64-linux/latest/download/1&#34;&gt;SQL DB Schema&lt;/a&gt;: The current PostgreSQL DB schema, as generated by the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/validation.md&#34;&gt;Validation&lt;/a&gt;: Explanation of validation done by the db-sync node and assumptions made.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-wallet</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/input-output-hk/cardano-wallet</id>
    <link href="https://github.com/input-output-hk/cardano-wallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP server &amp; command-line for managing UTxOs and HD wallets in Cardano.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Wallet&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/.github/images/cardano-logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/7ea3dac7a16f066d8dfc8f426a9a9f7a2131e899cd96c444cf/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet-nightly&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/59ea9363b8526e867005ca8839db47715bc5f661f36e490143/master?label=BENCHMARK&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/actions?query=workflow%3Awindows&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-wallet/windows?label=Windows&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hydra.iohk.io/jobset/Cardano/cardano-wallet#tabs-jobs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?style=for-the-badge&amp;amp;url=https%3A%2F%2Fhydra.iohk.io%2Fjob%2FCardano%2Fcardano-wallet%2Frequired%2Fshield&#34;&gt;&lt;/a&gt; &#xA; &lt;!--&#xA;  &lt;a href=&#34;https://coveralls.io/github/input-output-hk/cardano-wallet?branch=HEAD&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/input-output-hk/cardano-wallet/HEAD?style=for-the-badge&#34; /&gt;&lt;/a&gt;&#xA;  --&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Cardano Wallet helps you manage your Ada. You can use it to send and receive payments on the &lt;a href=&#34;https://www.cardano.org&#34;&gt;Cardano&lt;/a&gt; blockchain.&lt;/p&gt; &#xA;&lt;p&gt;This project provides an HTTP Application Programming Interface (API) and command-line interface (CLI) for working with your wallet.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as a component of a frontend such as &lt;a href=&#34;https://daedaluswallet.io&#34;&gt;Daedalus&lt;/a&gt;, which provides a friendly user interface for wallets. Most users who would like to use Cardano should start with Daedalus.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This source code repository contains the next major version of Cardano Wallet, which has been completely rewritten for the &lt;a href=&#34;https://roadmap.cardano.org/&#34;&gt;Shelley&lt;/a&gt; phase.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; The Byron version of Cardano Wallet is in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-sl&#34;&gt;cardano-sl&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/docker-compose.yml&#xA;NETWORK=testnet docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fantastic! The server is up-and-running, waiting for HTTP requests on &lt;code&gt;localhost:8090/v2&lt;/code&gt; e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:8090/v2/network/information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to be accessed via CLI, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --network host --rm inputoutput/cardano-wallet network information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/Docker&#34;&gt;Docker&lt;/a&gt; for more information about using docker.&lt;/p&gt; &#xA;&lt;p&gt;NixOS users can also use the &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/NixOS&#34;&gt;NixOS service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to install (Linux / Windows / Mac OS)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Installation Instructions&lt;/strong&gt; for each available &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Latest releases&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;cardano-wallet&lt;/th&gt; &#xA;    &lt;th&gt;cardano-node (compatible versions)&lt;/th&gt; &#xA;    &lt;th&gt;SMASH (compatible versions)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;master&lt;/code&gt; branch&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-05-27&#34;&gt;v2022-05-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-04-27&#34;&gt;v2022-04-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-01-18&#34;&gt;v2022-01-18&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.33.0&#34;&gt;1.33.0&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to build from sources&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/developers/Building&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/contributing/Testing&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Audience&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide&#34;&gt;User Guide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of Cardano Wallet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/cli&#34;&gt;CLI Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/api/edge&#34;&gt;API Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/&#34;&gt;Cardano Wallet Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/adrestia/&#34;&gt;Adrestia Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lamdu/lamdu</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/lamdu/lamdu</id>
    <link href="https://github.com/lamdu/lamdu" rel="alternate"></link>
    <summary type="html">&lt;p&gt;lamdu - towards the next generation IDE&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Lamdu&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitter.im/lamdu/lamdu?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt;&lt;img src=&#34;https://badges.gitter.im/Join%20Chat.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/lamdu/lamdu&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This project aims to create a &lt;em&gt;next-generation&lt;/em&gt;, &lt;em&gt;live programming&lt;/em&gt; environment that radically improves the programming experience.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;http://lamdu.org/&#34;&gt;Main Page&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;To build Lamdu from source, &lt;a href=&#34;https://raw.githubusercontent.com/lamdu/lamdu/master/doc/Build.md&#34;&gt;see the instructions for your platform&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Tutorial&lt;/h2&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; In the shortcut key combinations, &#34;left&#34; refers to the left cursor key.&lt;/p&gt; &#xA;&lt;h3&gt;Simple expressions&lt;/h3&gt; &#xA;&lt;p&gt;At the top we have an interactive shell, where we can type calculations.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;⋙&lt;/code&gt; is our prompt to this shell. Think of it like a calculator: you enter an expression, hit a button, and it tells you the answer. The next time you use the calculator, you clear whatever&#39;s in there and enter a new expression. Same here.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vbPRcCO.png&#34; alt=&#34;Golden ratio example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To type the calculation above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Type &#34;&lt;strong&gt;&lt;code&gt;1+s&lt;/code&gt;&lt;/strong&gt;&#34; at the prompt (&lt;code&gt;⋙&lt;/code&gt;). Notice we have chosen &#34;&lt;code&gt;1&lt;/code&gt;&#34; for the addition&#39;s left argument. However, we have only begun to type the second argument: it starts with an &#34;s&#34;. Lamdu knows we have finalized the left argument because we have moved on from it, indicated by the &lt;code&gt;+&lt;/code&gt;. But we have done nothing to indicate that just &lt;code&gt;s&lt;/code&gt; is the second argument. To help us finalize the right argument, Lamdu has presented a menu of type-appropriate choices containing &#34;s&#34; in their names – &#34;containing&#34;, not just &#34;starting with&#34;. This menu updates as we type.&lt;/li&gt; &#xA; &lt;li&gt;Next, we will flesh out the &#34;s&#34; into a &#34;sqrt&#34;. As of September 2017, &#34;sqrt&#34; should already be selected in the nearby menu, because it is alphabetically the first function in the library to contain an &#34;s&#34; in its name and to output a number. However your menu, take the path of fewest keystrokes: continuing to type the function&#39;s name reduces the menu options to just those that match. Cursor keys allow you to select from the menu. Hit &lt;strong&gt;space&lt;/strong&gt; to chose your selected menu option.&lt;/li&gt; &#xA; &lt;li&gt;Type &#34;&lt;strong&gt;&lt;code&gt;5&lt;/code&gt;&lt;/strong&gt;&#34;.&lt;/li&gt; &#xA; &lt;li&gt;Select the whole expression by pressing &lt;strong&gt;shift+left&lt;/strong&gt; until the whole REPL expression is selected.&lt;/li&gt; &#xA; &lt;li&gt;Type &#34;&lt;strong&gt;&lt;code&gt;/2&lt;/code&gt;&lt;/strong&gt;&#34;. Notice that Lamdu automatically inserted the parentheses.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lamdu displays the evaluation of each expression, whether the whole or a subexpression. Such an automatic display is called an &#34;annotation&#34;. The annotation of an expression appears below that of any child expression. For example, the evaluation of &lt;code&gt;(1 + sqrt 5) / 2&lt;/code&gt; appears below that of its child expression, &lt;code&gt;(1 + sqrt 5)&lt;/code&gt;. The former is &lt;code&gt;1.61...&lt;/code&gt; and the latter is &lt;code&gt;3.23...&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To keep the expression size from bloating, some annotations are shrunk, like that of the &lt;code&gt;sqrt 5&lt;/code&gt; above, which is &lt;code&gt;2.23...&lt;/code&gt;. To see this in normal size, navigate to the expression by going to the &lt;code&gt;sqrt&lt;/code&gt;, or to the &lt;code&gt;5&lt;/code&gt;, and press &lt;strong&gt;shift+left&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have just expressed the golden ratio. To save it and give it a name, navigate to the &lt;code&gt;⋙&lt;/code&gt; sign and press &lt;strong&gt;return&lt;/strong&gt;. Press &lt;strong&gt;return&lt;/strong&gt; to name the new definition. Type &#34;&lt;strong&gt;&lt;code&gt;golden&lt;/code&gt;&lt;/strong&gt;&#34; and &lt;strong&gt;enter&lt;/strong&gt;. You do not need to explicitly save - as your Lamdu program is always saved.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a function&lt;/h3&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Ctrl-Z is undo.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vWjV8pc.png&#34; alt=&#34;Factorial function&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;To create the function above:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Navigate to the &#34;New...&#34; button and press &lt;strong&gt;space&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Type &lt;strong&gt;&lt;code&gt;factorial x=&lt;/code&gt;&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; Lamdu spaces your code automatically.&lt;/p&gt; &#xA;&lt;p&gt;When you press &lt;strong&gt;space&lt;/strong&gt; at the left-hand-side of a definition, Lamdu adds a parameter to the function and does not add a &#34;space&#34; as it would in a normal text editor.&lt;/p&gt; &#xA;&lt;p&gt;The equals sign after &lt;code&gt;factorial&lt;/code&gt; appears without typing it because all definitions have one. However, after &lt;code&gt;factorial x&lt;/code&gt;, you may type an equals sign anyways, or skip over it with the right cursor key.&lt;/p&gt; &#xA;&lt;p&gt;Now type the body of the function: &lt;strong&gt;&lt;code&gt;if x=0 1 x*fac(x-1)&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ve now written the function. Let&#39;s use it.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Go back up to the REPL, just right of the &lt;code&gt;⋙&lt;/code&gt; symbol. Like with calculators, we want to clear anything in there before using it. If there is an expression there, press &lt;strong&gt;shift+left&lt;/strong&gt; until all is selected, then hit &lt;strong&gt;delete&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Type &#34;&lt;strong&gt;&lt;code&gt;fac 5&lt;/code&gt;&lt;/strong&gt;&#34; and press &lt;strong&gt;space&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Lamdu should now display the evaluation of the whole function, as well as its subexpresssions. The active &lt;code&gt;if&lt;/code&gt; branch (the &lt;code&gt;else&lt;/code&gt;) is highlighted via a green background on the &lt;code&gt;|&lt;/code&gt; symbol. The &lt;code&gt;|&lt;/code&gt; represents a &lt;a href=&#34;https://github.com/lamdu/lamdu/raw/master/doc/Language.md#suspended-computations&#34;&gt;suspended computation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This function is recursive and invoked additional applications of itself. To navigate between these function applications, navigate to the arrows under the &lt;code&gt;x&lt;/code&gt; parameter and press &lt;strong&gt;right&lt;/strong&gt; or &lt;strong&gt;left&lt;/strong&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Further Exploration / Help Documentation&lt;/h2&gt; &#xA;&lt;p&gt;In the lower-right of Lamdu&#39;s screen, you&#39;ll see that F1 brings up contextual help.&lt;/p&gt; &#xA;&lt;p&gt;It shows all the key bindings currently active, which changes according to the current context.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hasura/graphql-engine</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/hasura/graphql-engine</id>
    <link href="https://github.com/hasura/graphql-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazing fast, instant realtime GraphQL APIs on your DB with fine grained access control, also trigger webhooks on database events.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hasura GraphQL Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hasura/graphql-engine/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/hasura/graphql-engine&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-v2.x-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vBPpJkS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-brightgreen.svg?logo=discord&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=HasuraHQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-HasuraHQ-blue.svg?style=flat&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/newsletter-subscribe-yellow.svg?style=flat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hasura is an open source product that accelerates API development by 10x by giving you &lt;a href=&#34;https://hasura.io/graphql/&#34;&gt;GraphQL&lt;/a&gt; or REST APIs with built in authorization on your data, instantly.&lt;/p&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/demo.gif&#34; alt=&#34;Hasura GraphQL Engine Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/realtime.gif&#34; alt=&#34;Hasura GraphQL Engine Realtime Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make powerful queries&lt;/strong&gt;: Built-in filtering, pagination, pattern search, bulk insert, update, delete mutations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works with existing, live databases&lt;/strong&gt;: Point it to an existing database to instantly get a ready-to-use GraphQL API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: Convert any GraphQL query to a live query by using subscriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merge remote schemas&lt;/strong&gt;: Access custom GraphQL schemas for business logic via a single GraphQL Engine endpoint. &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extend with Actions&lt;/strong&gt;: Write REST APIs to extend Hasura’s schema with custom business logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger webhooks or serverless functions&lt;/strong&gt;: On Postgres insert/update/delete events (&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduled Triggers&lt;/strong&gt;: Execute custom business logic at specific points in time using a cron config or a one-off event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained access control&lt;/strong&gt;: Dynamic access control that integrates with your auth system (eg: auth0, firebase-auth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin UI &amp;amp; Migrations&lt;/strong&gt;: Admin UI &amp;amp; Rails-inspired schema migrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;: Supports PostgreSQL (and its flavours), MS SQL Server and Big Query. Support for more &lt;a href=&#34;https://hasura.io/graphql/database/&#34;&gt;databases&lt;/a&gt; coming soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#quickstart&#34;&gt;Quickstart:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#one-click-deployment-on-hasura-cloud&#34;&gt;One-click deployment on Hasura Cloud&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-one-click-deployment-options&#34;&gt;Other one-click deployment options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-deployment-methods&#34;&gt;Other deployment methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#client-side-tooling&#34;&gt;Client-side tooling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#add-business-logic&#34;&gt;Add business logic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#remote-schemas&#34;&gt;Remote schemas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#trigger-webhooks-on-database-events&#34;&gt;Trigger webhooks on database events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#realtime-applications&#34;&gt;Realtime applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#support--troubleshooting&#34;&gt;Support &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#stay-up-to-date&#34;&gt;Stay up to date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#brand-assets&#34;&gt;Brand assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Quickstart:&lt;/h2&gt; &#xA;&lt;h3&gt;One-click deployment on Hasura Cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest and easiest way to try Hasura out is via &lt;a href=&#34;https://hasura.io/docs/latest/graphql/cloud/getting-started/index.html&#34;&gt;Hasura Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the following button to deploy GraphQL engine on Hasura Cloud including Postgres add-on or using an existing Postgres database:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://cloud.hasura.io/signup&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/deploy_to_hasura.png&#34; alt=&#34;Deploy to Hasura Cloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Hasura console&lt;/p&gt; &lt;p&gt;Click on the button &#34;Launch console&#34; to open the Hasura console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your first GraphQL query&lt;/p&gt; &lt;p&gt;Create a table and instantly run your first query. Follow this &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/first-graphql-query.html&#34;&gt;simple guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other one-click deployment options&lt;/h3&gt; &#xA;&lt;p&gt;Check out the instructions for the following one-click deployment options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Infra provider&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;One-click link&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Additional information&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Heroku&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Heroku&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/heroku-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DigitalOcean&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/hasura?action=deploy&amp;amp;refcode=c4d9092d2c48&amp;amp;utm_source=hasura&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/digital-ocean-one-click.html#hasura-graphql-engine-digitalocean-one-click-app&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json&#34;&gt;&lt;img src=&#34;http://azuredeploy.net/deploybutton.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/azure-container-instances-postgres.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Render&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/render-examples/hasura-graphql&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/render-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other deployment methods&lt;/h3&gt; &#xA;&lt;p&gt;For Docker-based deployment and advanced configuration options, see &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/index.html&#34;&gt;deployment guides&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests&#34;&gt;install manifests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Hasura GraphQL Engine fronts a Postgres database instance and can accept GraphQL requests from your client apps. It can be configured to work with your existing auth system and can handle access control using field-level rules with dynamic variables from your auth system.&lt;/p&gt; &#xA;&lt;p&gt;You can also merge remote GraphQL schemas and provide a unified GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/hasura-arch.svg?sanitize=true&#34; alt=&#34;Hasura GraphQL Engine architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client-side tooling&lt;/h2&gt; &#xA;&lt;p&gt;Hasura works with any GraphQL client. See &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;awesome-graphql&lt;/a&gt; for a list of clients. Our &lt;a href=&#34;https://hasura.io/learn/#frontend-tutorial&#34;&gt;frontend tutorial series&lt;/a&gt; also have integrations with GraphQL clients for different frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Add business logic&lt;/h2&gt; &#xA;&lt;p&gt;GraphQL Engine provides easy-to-reason, scalable and performant methods for adding custom business logic to your backend:&lt;/p&gt; &#xA;&lt;h3&gt;Remote schemas&lt;/h3&gt; &#xA;&lt;p&gt;Add custom resolvers in a remote schema in addition to Hasura&#39;s database-based GraphQL schema. Ideal for use-cases like implementing a payment API, or querying data that is not in your database - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Actions are a way to extend Hasura’s schema with custom business logic using custom queries and mutations. Actions can be added to Hasura to handle various use cases such as data validation, data enrichment from external sources and any other complex business logic - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/actions/index.html&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trigger webhooks on database events&lt;/h3&gt; &#xA;&lt;p&gt;Add asynchronous business logic that is triggered based on database events. Ideal for notifications, data-pipelines from Postgres or asynchronous processing - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Derived data or data transformations&lt;/h3&gt; &#xA;&lt;p&gt;Transform data in Postgres or run business logic on it to derive another dataset that can be queried using GraphQL Engine - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/queries/derived-data.html&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Check out all the example applications in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps&#34;&gt;community/sample-apps&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Realtime applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Group Chat application built with React, includes a typing indicator, online users &amp;amp; new message notifications.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-chat.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-chat&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Live location tracking app that shows a running vehicle changing current GPS coordinates moving on a map.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-location-tracking.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-location-tracking&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A realtime dashboard for data aggregations on continuously changing data.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-poll.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-poll&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a2AhxKqd82Q&#34;&gt;Add GraphQL to a self-hosted GitLab instance&lt;/a&gt; (&lt;em&gt;3:44 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=15ITBYnccgc&#34;&gt;Todo app with Auth0 and GraphQL backend&lt;/a&gt; (&lt;em&gt;4:00 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=m1ChRhRLq7o&#34;&gt;GraphQL on GitLab integrated with GitLab auth&lt;/a&gt; (&lt;em&gt;4:05 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tsY573yyGWA&#34;&gt;Dashboard for 10million rides with geo-location (PostGIS, Timescale)&lt;/a&gt; (&lt;em&gt;3:06 mins&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support &amp;amp; Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The documentation and community will help you troubleshoot most issues. If you have encountered a bug or need to get in touch with us, you can contact us using one of the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &amp;amp; feedback: &lt;a href=&#34;https://discord.gg/hasura&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue &amp;amp; bug tracking: &lt;a href=&#34;https://github.com/hasura/graphql-engine/issues&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow product updates: &lt;a href=&#34;https://twitter.com/hasurahq&#34;&gt;@HasuraHQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Talk to us on our &lt;a href=&#34;https://hasura.io&#34;&gt;website chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are committed to fostering an open and welcoming environment in the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/code-of-conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to report a security issue, please &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/SECURITY.md&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;We release new features every month. Sign up for our newsletter by using the link below. We send newsletters only once a month. &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;https://hasura.io/newsletter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Brand assets&lt;/h2&gt; &#xA;&lt;p&gt;Hasura brand assets (logos, the Hasura mascot, powered by badges etc.) can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand&#34;&gt;assets/brand&lt;/a&gt; folder. Feel free to use them in your application/website etc. We&#39;d be thrilled if you add the &#34;Powered by Hasura&#34; badge to your applications built using Hasura. ❤️&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_darkbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_lightbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- For light backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_darkbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&#xA;&amp;lt;!-- For dark backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_lightbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The core GraphQL Engine is available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt; (Apache-2.0).&lt;/p&gt; &#xA;&lt;p&gt;All &lt;strong&gt;other contents&lt;/strong&gt; (except those in &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/server&#34;&gt;&lt;code&gt;server&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/console&#34;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; directories) are available under the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/LICENSE-community&#34;&gt;MIT License&lt;/a&gt;. This includes everything in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community&#34;&gt;&lt;code&gt;community&lt;/code&gt;&lt;/a&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This readme is available in the following translations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.japanese.md&#34;&gt;Japanese &lt;span&gt;🇯🇵&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/moksahero&#34;&gt;@moksahero&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.french.md&#34;&gt;French &lt;span&gt;🇫🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/l0ck3&#34;&gt;@l0ck3&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.bosnian.md&#34;&gt;Bosnian &lt;span&gt;🇧🇦&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/hajro92&#34;&gt;@hajro92&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.russian.md&#34;&gt;Russian &lt;span&gt;🇷🇺&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/highflyer910&#34;&gt;@highflyer910&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.greek.md&#34;&gt;Greek 🇬🇷&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/MIP2000&#34;&gt;@MIP2000&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.mx_spanish.md&#34;&gt;Spanish 🇲🇽&lt;/a&gt;(&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/ferdox2&#34;&gt;@ferdox2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.indonesian.md&#34;&gt;Indonesian &lt;span&gt;🇮🇩&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/anwari666&#34;&gt;@anwari666&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.portuguese_br.md&#34;&gt;Brazilian Portuguese &lt;span&gt;🇧🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/rubensmp&#34;&gt;@rubensmp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.german.md&#34;&gt;German 🇩🇪&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/FynnGrandke&#34;&gt;@FynnGrandke&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.chinese.md&#34;&gt;Chinese &lt;span&gt;🇨🇳&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/jagreetdg&#34;&gt;@jagreetdg&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/johnbanq&#34;&gt;@johnbanq&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.turkish.md&#34;&gt;Turkish &lt;span&gt;🇹🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/berat&#34;&gt;@berat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.korean.md&#34;&gt;Korean &lt;span&gt;🇰🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/laskdjlaskdj12&#34;&gt;@라스크&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translations for other files can be found &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elm/compiler</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/elm/compiler</id>
    <link href="https://github.com/elm/compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compiler for Elm, a functional language for reliable webapps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elm&lt;/h1&gt; &#xA;&lt;p&gt;A delightful language for reliable webapps.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;http://elm-lang.org/&#34;&gt;Home Page&lt;/a&gt;, &lt;a href=&#34;http://elm-lang.org/try&#34;&gt;Try Online&lt;/a&gt;, or &lt;a href=&#34;http://guide.elm-lang.org/&#34;&gt;The Official Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;✨ &lt;a href=&#34;https://guide.elm-lang.org/install/elm.html&#34;&gt;Install&lt;/a&gt; ✨&lt;/p&gt; &#xA;&lt;p&gt;For multiple versions, previous versions, and uninstallation, see the instructions &lt;a href=&#34;https://github.com/elm/compiler/raw/master/installers/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you are stuck, ask around on &lt;a href=&#34;http://elmlang.herokuapp.com/&#34;&gt;the Elm slack channel&lt;/a&gt;. Folks are friendly and happy to help with questions!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-language-server</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/haskell/haskell-language-server</id>
    <link href="https://github.com/haskell/haskell-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official haskell ide support via language server (LSP). Successor of ghcide &amp; haskell-ide-engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;haskell-language-server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haskell/haskell-language-server/master/docs/logos/logo-256.png&#34; alt=&#34;haskell-language-server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/haskell/haskell-language-server.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2-green.svg?dummy&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/haskell/haskell-language-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Testing Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Nix Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/?channels=#haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;ircchat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/haskell/haskell-language-server&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/haskell/haskell-language-server/badges/users.svg?sanitize=true&#34; alt=&#34;codetriage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The official Haskell language server (LSP) implementation. Consult the &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/&#34;&gt;project documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/supported-versions.html&#34;&gt;Supported GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/configuration.html&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus-apps</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/input-output-hk/plutus-apps</id>
    <link href="https://github.com/input-output-hk/plutus-apps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Plutus application platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus Application Framework&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_user_documentation&#34;&gt;User documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_specifications_and_design&#34;&gt;Specifications and design&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_versioning_and_releases&#34;&gt;Versioning and releases&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_branching&#34;&gt;Branching&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_dependency_update&#34;&gt;Dependency update&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_version_ranges&#34;&gt;Version ranges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_working_with_the_project&#34;&gt;Working with the project&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-advice&#34;&gt;Nix&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The Plutus Application Framework, part of the Plutus Platform, is a framework for developing distributed applications using the Cardano blockchain. For more information about the projects, see the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository contains:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Plutus Platform&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Libraries which implement the Plutus Application Framework, a framework for writing applications that work with Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;A selection of end-to-end usecases written with the Plutus Application Framework&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;The Plutus Playground, a web-based playground for learning and writing basic Plutus Applications.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;The rest of this README is focussed on people who want to develop or contribute to the Framework.&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;For people who want to &lt;strong&gt;use&lt;/strong&gt; the Framework, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;cache-warning&#34; class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;DO NOT IGNORE THIS&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you want to use Nix with this project, make sure to set up the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#iohk-binary-cache&#34;&gt;IOHK binary cache&lt;/a&gt;. If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, STOP and fix the cache.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_user_documentation&#34;&gt;User documentation&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main documentation is located &lt;a href=&#34;https://plutus-apps.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The generated Haskell API documentation (haddocks) are here: &lt;a href=&#34;https://playground.plutus.iohkdev.io/doc/haddock&#34; class=&#34;bare&#34;&gt;https://playground.plutus.iohkdev.io/doc/haddock&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_talks&#34;&gt;Talks&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MpWeg6Fg0t8&#34;&gt;Functional Smart Contracts on Cardano&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=usMPt8KpBeI&#34;&gt;The Plutus Platform&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_specifications_and_design&#34;&gt;Specifications and design&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-report/latest/download-by-type/doc-pdf/plutus&#34;&gt;Plutus Technical Report&lt;/a&gt; (draft)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_versioning_and_releases&#34;&gt;Versioning and releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; reminder:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;em&gt;Two&lt;/em&gt; major-version components, A.B&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;In this doc: “first-major-version”, “second-major-version”&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;em&gt;One&lt;/em&gt; minor-version component C&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Any number of (meaningless but higher) patch-version components&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_versioning&#34;&gt;Versioning&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The core &lt;code&gt;plutus-apps&lt;/code&gt; packages are versioned as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Package versioning follows the &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; on a best-effort basis (i.e. we will generally try to but we won’t guarantee it).&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;The first-major-version component indicates the &#34;era&#34; which for our purposes means which major version of the &lt;strong&gt;Cardano node&lt;/strong&gt; the tools are compatible with.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The second-major-version component is used for releases which are major versions according to the PVP, but which are still compatible with the current &#34;era&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The minor-version and below are used as normal.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages which are used downstream should all have the same version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Other packages which are not used downstream (e.g. &lt;code&gt;plutus-playground-server&lt;/code&gt;, &lt;code&gt;plutus-playground-client&lt;/code&gt;, &lt;code&gt;quickcheck-dynamic&lt;/code&gt;, etc.) can remain unversioned.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In principle we could just have a single major version, but using two makes it easier to avoid mistakes and clearly expresses the state of the repository.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_branching&#34;&gt;Branching&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are two protected branches in &lt;code&gt;plutus-apps&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;main&lt;/code&gt; branch&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Most development should be done in this branch&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Should always target a stable version of &lt;code&gt;cardano-node&lt;/code&gt; which is compatible with the current Cardano mainnet.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The version of transitive dependencies (&lt;code&gt;plutus&lt;/code&gt;, &lt;code&gt;cardano-ledger&lt;/code&gt;, &lt;code&gt;ouroboros-network&lt;/code&gt;, etc.) should be pinned to the ones from &lt;code&gt;cardano-node&lt;/code&gt; (or better, &lt;code&gt;cardano-wallet&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Changes will be backported form &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;next-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;next-node&lt;/code&gt; branch: should always target the next node release.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;This branch will eventually be merged in &lt;code&gt;main&lt;/code&gt; after the Cardano mainnet HF.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_dependency_update&#34;&gt;Dependency update&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The dependency update policy is dependent on the protected branch.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For &lt;code&gt;cardano-node&lt;/code&gt;, we define major-version-bound the range of versions which are compatible with a specific era. For example, for the Alonzo era, that would be &lt;code&gt;&amp;gt;= 1.29 &amp;amp;&amp;amp; &amp;lt; 1.35&lt;/code&gt;. For the Vasil era, that would be &lt;code&gt;&amp;gt;= 1.35 &amp;amp;&amp;amp; &amp;lt; 1.36&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Independently of the protected branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should always use the same first-major-version of &lt;code&gt;plutus&lt;/code&gt; as the one used by the &lt;code&gt;plutus&lt;/code&gt; dependency of &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should always be safe to upgrade to a new second-major-version of &lt;code&gt;plutus&lt;/code&gt;: at worst this will lead to some code breakage.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should, unless specified otherwise, use the same version for transitive dependencies (&lt;code&gt;cardano-ledger&lt;/code&gt;, &lt;code&gt;ouroboros-network&lt;/code&gt;, etc.) with &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should pin the major version of &lt;code&gt;cardano-node&lt;/code&gt; for all packages&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should pin the first and second-major version of &lt;code&gt;plutus&lt;/code&gt; for all packages&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should not update &lt;code&gt;cardano-node&lt;/code&gt; to a new major-version. In other words, it should use a &lt;code&gt;cardano-node&lt;/code&gt; version which is compatible with the current Cardano mainnet&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should use a &lt;code&gt;cardano-wallet&lt;/code&gt; version which is compatible with the current &lt;code&gt;cardano-node&lt;/code&gt; version&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;next-node&lt;/code&gt; branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It may update the &lt;code&gt;cardano-node&lt;/code&gt; to a new major-version. In other words, it may use a &lt;code&gt;cardano-node&lt;/code&gt; version which is incompatible with the current Cardano mainnet&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It may use a &lt;code&gt;cardano-wallet&lt;/code&gt; version which is incompatible with the current &lt;code&gt;cardano-node&lt;/code&gt; version&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_version_ranges&#34;&gt;Version ranges&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Packages which depend on &lt;code&gt;plutus-apps&lt;/code&gt; packages should use version ranges to control which version of those packages they build against.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages in &lt;code&gt;plutus-apps&lt;/code&gt; which are used downstream should pin the major-version of each other (e.g. &lt;code&gt;plutus-pab-1.0.1&lt;/code&gt; should depend on &lt;code&gt;plutus-contract ^&amp;gt;= 1.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages should pin at least the first-major-version of &lt;code&gt;plutus-apps&lt;/code&gt; packages.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Upgrading to a new second-major-version should always be safe for working on the current mainnet, with at most code breakage (following the PVP). Users may of course want to pin this version as well to avoid such breakage.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages pulling in &lt;code&gt;plutus-apps&lt;/code&gt; packages via &lt;code&gt;source-repository-package&lt;/code&gt; stanzas should always take tagged commits.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_releases&#34;&gt;Releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Currently there is no release process beyond bumping the package versions and making a tag/branch as appropriate.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_working_with_the_project&#34;&gt;Working with the project&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/CONTRIBUTING.html&#34;&gt;CONTRIBUTING&lt;/a&gt;, which describes our processes in more detail including development environments; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/ARCHITECTURE.html&#34;&gt;ARCHITECTURE&lt;/a&gt;, which describes the structure of the repository.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;None of our libraries are on Hackage, unfortunately (many of our dependencies aren’t either). So for the time being, you need to:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;plutus-apps&lt;/code&gt; as a &lt;code&gt;source-repository-package&lt;/code&gt; to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;source-repository-package&lt;/code&gt; stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; to yours.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy additional stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; as you need, e.g. you may need some of the &lt;code&gt;allow-newer&lt;/code&gt; stanzas.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;a href=&#34;https://github.com/input-output-hk/plutus-starter&#34;&gt;plutus-starter&lt;/a&gt; project provides an example.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_build_the_projects_artifacts&#34;&gt;How to build the project’s artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This section contains information about how to build the project’s artifacts for independent usage. For development work see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt; for more information.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell libraries in the Plutus Platform are built with &lt;code&gt;cabal&lt;/code&gt; and Nix. The other artifacts (docs etc.) are also most easily built with Nix.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_nix&#34;&gt;Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; (recommended). following the instructions on the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix website&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Make sure you have read and understood the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#cache-warning&#34;&gt;cache warning&lt;/a&gt;. DO NOT IGNORE THIS.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-advice&#34;&gt;Nix&lt;/a&gt; for further advice on using Nix.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_non_nix&#34;&gt;Non-Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;You can build some of the Haskell packages without Nix, but this is not recommended and we don’t guarantee that these prerequisites are sufficient. For instance, you would have to build and install this fork of &lt;a href=&#34;https://github.com/input-output-hk/libsodium/commit/66f017f16633f2060db25e17c170c2afa0f2a8a1&#34;&gt;&lt;code&gt;libsodium&lt;/code&gt;&lt;/a&gt; from source. If you use Nix, these tools are provided for you via &lt;code&gt;shell.nix&lt;/code&gt;, and you do &lt;strong&gt;not&lt;/strong&gt; need to install them yourself.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://haskellstack.org/&#34;&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;building-with-nix&#34;&gt;How to build the Haskell packages and other artifacts with Nix&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;nix build -f default.nix plutus-apps.haskell.packages.plutus-pab.components.library&lt;/code&gt; from the root to build the Plutus PAB library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt; to find out what other attributes you can build.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_how_to_build_the_haskell_packages_with_cabal&#34;&gt;How to build the Haskell packages with &lt;code&gt;cabal&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell packages can be built directly with &lt;code&gt;cabal&lt;/code&gt;. We do this during development (see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;). The best way is to do this is inside a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &#xA;         &lt;div class=&#34;paragraph&#34;&gt; &#xA;          &lt;p&gt;For fresh development setups, you also need to run &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;cabal build plutus-pab&lt;/code&gt; from the root to build the Plutus PAB library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/cabal.project&#34;&gt;cabal project file&lt;/a&gt; to see the other packages that you can build with &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_deployment&#34;&gt;Deployment&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The Plutus Playground is automatically deployed upon certain pushes to GitHub&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://plutus-playground-plutus-apps-staging.plutus.aws.iohkdev.io/&#34;&gt;Staging&lt;/a&gt; is deployed from every commit pushed to &lt;code&gt;main&lt;/code&gt; (this URL subject to change)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://playground.plutus.iohkdev.io/&#34;&gt;Production&lt;/a&gt; is deployed from every release tag (matching &lt;code&gt;vYYYY-MM-DD&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For more details, including instructions for setting up ad hoc testing deployments, see &lt;a href=&#34;https://github.com/input-output-hk/plutus-ops&#34;&gt;the plutus-ops repo&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;nix-advice&#34;&gt;Nix&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Adding the IOHK binary cache to your Nix configuration will speed up builds a lot, since many things will have been built already by our CI.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you find you are building packages that are not defined in this repository, or if the build seems to take a very long time then you may not have this set up properly.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To set up the cache:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;On non-NixOS, edit &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and add the following lines:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;substituters        = https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;       &lt;table&gt; &#xA;        &lt;tbody&gt;&#xA;         &lt;tr&gt; &#xA;          &lt;td class=&#34;icon&#34;&gt; &#xA;           &lt;div class=&#34;title&#34;&gt;&#xA;            Note&#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;          &lt;td class=&#34;content&#34;&gt; &#xA;           &lt;div class=&#34;paragraph&#34;&gt; &#xA;            &lt;p&gt;If you don’t have an &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or don’t want to edit it, you may add the &lt;code&gt;nix.conf&lt;/code&gt; lines to &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; instead. You must be a &lt;a href=&#34;https://nixos.org/nix/manual/#ssec-multi-user&#34;&gt;trusted user&lt;/a&gt; to do this.&lt;/p&gt; &#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;         &lt;/tr&gt; &#xA;        &lt;/tbody&gt;&#xA;       &lt;/table&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On NixOS, set the following NixOS options:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;nix = {&#xA;  binaryCaches          = [ &#34;https://hydra.iohk.io&#34; &#34;https://iohk.cachix.org&#34; ];&#xA;  binaryCachePublicKeys = [ &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34; &#34;iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=&#34; ];&#xA;};&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; defines a package set with attributes for all the artifacts you can build from this repository. These can be built using &lt;code&gt;nix build&lt;/code&gt;. For example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;nix build -f default.nix docs.site&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Example attributes&#xA;    &lt;/div&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Project packages: defined inside &lt;code&gt;plutus-apps.haskell.packages&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;plutus-apps.haskell.packages.plutus-pab.components.library&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are other attributes defined in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_licensing&#34;&gt;Licensing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You are free to copy, modify, and distribute the Plutus Platform with under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/NOTICE&#34;&gt;NOTICE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>fossas/fossa-cli</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/fossas/fossa-cli</id>
    <link href="https://github.com/fossas/fossa-cli" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast, portable and reliable dependency analysis for any codebase. Supports license &amp; vulnerability scanning for large monoliths. Language-agnostic; integrates with 20+ build systems.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/assets/header.png&#34; alt=&#34;FOSSA&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;FOSSA CLI&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/fossas/fossa-cli/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/fossas/fossa-cli/actions/workflows/build-all.yml/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/fossas/fossa-cli/actions/workflows/dependency-scan.yml&#34;&gt;&lt;img src=&#34;https://github.com/fossas/fossa-cli/actions/workflows/dependency-scan.yml/badge.svg?sanitize=true&#34; alt=&#34;Dependency scan&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;a href=&#34;https://app.fossa.com/projects/custom%2B1%2Fgit%40github.com%3Afossas%2Ffossa-cli?ref=badge_shield&#34;&gt;&lt;img src=&#34;https://app.fossa.com/api/projects/custom%2B1%2Fgit%40github.com%3Afossas%2Ffossa-cli.svg?type=shield&#34; alt=&#34;FOSSA Status&#34;&gt;&lt;/a&gt; &#xA; &lt;!-- markdown-link-check-disable-next-line --&gt; &lt;a href=&#34;https://github.com/fossas/fossa-cli/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/fossas/fossa-cli/total.svg?sanitize=true&#34; alt=&#34;FOSSA Downloads&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI is a zero-configuration polyglot dependency analysis tool. You can point fossa CLI at any codebase or build, and it will automatically detect dependencies being used by your project.&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI currently supports automatic dependency analysis for &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/references/strategies/README.md#supported-languages&#34;&gt;many different build tools and languages&lt;/a&gt;. It also has limited support for vendored dependency detection, container scanning, and system dependency detection. These features are still a work in progress. Our goal is to make the FOSSA CLI a universal tool for dependency analysis.&lt;/p&gt; &#xA;&lt;p&gt;Fossa CLI integrates with &lt;a href=&#34;https://fossa.com&#34;&gt;FOSSA&lt;/a&gt; for dependency analysis, license scanning, vulnerability scanning, attribution report generation, and more.&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#user-manual&#34;&gt;User Manual&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#reporting-issues&#34;&gt;Reporting Issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Using the install script&lt;/h3&gt; &#xA;&lt;p&gt;FOSSA CLI provides an install script that downloads the latest release from GitHub Releases for your computer&#39;s architecture. You can see the source code and flags at &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh&#34;&gt;&lt;code&gt;install-latest.sh&lt;/code&gt;&lt;/a&gt; for Mac and Linux or &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#34;&gt;&lt;code&gt;install-latest.ps1&lt;/code&gt;&lt;/a&gt; for Windows.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; You may need to add the downloaded executable to your &lt;code&gt;$PATH&lt;/code&gt;. The installer script will output the installed path of the executable. You can also use &lt;code&gt;-b&lt;/code&gt; to pick the installation directory when using &lt;code&gt;install-latest.sh&lt;/code&gt; (see &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh&#34;&gt;the &lt;code&gt;install-latest.sh&lt;/code&gt; source code&lt;/a&gt; for details).&lt;/p&gt; &#xA;&lt;h4&gt;macOS or 64-bit Linux&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -H &#39;Cache-Control: no-cache&#39; https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Windows with Powershell&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;Set-ExecutionPolicy Bypass -Scope Process -Force; iex  ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#39;))&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!-- markdown-link-check-disable-next-line --&gt; &#xA;&lt;p&gt;Alternatively, install using &lt;a href=&#34;https://scoop.sh/&#34;&gt;Scoop&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scoop install fossa&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Installing manually&lt;/h3&gt; &#xA;&lt;p&gt;You can install the FOSSA CLI releases manually by downloading the latest release from &lt;a href=&#34;https://github.com/fossas/fossa-cli/releases&#34;&gt;GitHub Releases&lt;/a&gt; and extracting the binary to your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To install FOSSA CLI 1.x with install script please refer to: &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/install-v1.md&#34;&gt;installing 1.x guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Integrating your project with FOSSA&lt;/h3&gt; &#xA;&lt;h4&gt;TL;DR, Linux, Mac, *nix-like&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# Download FOSSA.&#xA;curl -H &#39;Cache-Control: no-cache&#39; https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.sh | bash&#xA;&#xA;# Set your API key. Get this from the FOSSA web application.&#xA;export FOSSA_API_KEY=XXXX&#xA;&#xA;# Run an analysis in your project&#39;s directory.&#xA;cd $MY_PROJECT_DIR&#xA;fossa analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;TL;DR, Windows&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;# Download FOSSA.&#xA;Set-ExecutionPolicy Bypass -Scope Process -Force; iex  ((New-Object System.Net.WebClient).DownloadString(&#39;https://raw.githubusercontent.com/fossas/fossa-cli/master/install-latest.ps1&#39;))&#xA;&#xA;# Set your API key. Get this from the FOSSA web application.&#xA;$env:FOSSA_API_KEY=XXXX&#xA;&#xA;# Run an analysis in your project&#39;s directory.&#xA;cd $MY_PROJECT_DIR&#xA;fossa analyze&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Installing FOSSA CLI&lt;/h4&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/#installation&#34;&gt;the installation instructions&lt;/a&gt; above to install the FOSSA CLI. Once installed, you should have a new binary named &lt;code&gt;fossa&lt;/code&gt; available on your &lt;code&gt;$PATH&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Generating an API key&lt;/h4&gt; &#xA;&lt;p&gt;To get started with integrating your project into FOSSA, you&#39;ll need to &lt;a href=&#34;https://docs.fossa.com/docs/api-reference&#34;&gt;generate an API key&lt;/a&gt;. You&#39;ll get this API key from the FOSSA web application (&lt;a href=&#34;https://app.fossa.com&#34;&gt;app.fossa.com&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Once you have your API key:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export FOSSA_API_KEY=XXXX # Use your API key here.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Running an analysis&lt;/h4&gt; &#xA;&lt;p&gt;Now we can run an analysis. To run an analysis, all you need to do is navigate to your project&#39;s directory and run &lt;code&gt;fossa analyze&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; While &lt;code&gt;fossa&lt;/code&gt; will try its best to report available results for any kind of project, you&#39;ll get the best results by running in a directory with a working project build. A working build lets us integrate directly with your build tool to identify dependencies, instead of trying to infer dependencies from your source code.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cd $MY_PROJECT_DIR # Use your actual project location here.&#xA;&#xA;$ fossa analyze&#xA;[ INFO] Using project name: `https://github.com/fossas/fossa-cli`&#xA;[ INFO] Using revision: `09ca72e398bb32747b27c0f43731678fa42c3c26`&#xA;[ INFO] Using branch: `No branch (detached HEAD)`&#xA;[ INFO] ============================================================&#xA;&#xA;      View FOSSA Report:&#xA;      https://app.fossa.com/projects/custom+1%2fgithub.com%2ffossas%2ffossa-cli/refs/branch/master/09ca72e398bb32747b27c0f43731678fa42c3c26&#xA;&#xA;  ============================================================&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Viewing your results&lt;/h4&gt; &#xA;&lt;p&gt;Once an analysis has been uploaded, you can view your results in the FOSSA web application. You can see your analysis by using the link provided as output by &lt;code&gt;fossa analyze&lt;/code&gt;, or by navigating to your project and revision in the FOSSA web application.&lt;/p&gt; &#xA;&lt;h4&gt;What next?&lt;/h4&gt; &#xA;&lt;p&gt;Now that your analysis is complete, there are a couple things you might want to do after an initial integration:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Double-check your results.&lt;/strong&gt; Some analysis methods may produce partial or unexpected results depending on what information was available when you ran the analysis. If something seems wrong, &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/walkthroughs/debugging-your-integration.md&#34;&gt;our debugging guide&lt;/a&gt; can help you diagnose and debug your integration.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Scan for issues and generate a compliance report.&lt;/strong&gt; Once your analysis is ready, we&#39;ll automatically queue an issue scan and report the results in the web application. Once an issue scan is complete, you can also &lt;a href=&#34;https://docs.fossa.com/docs/running-a-scan&#34;&gt;generate a report&lt;/a&gt; from the web application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up FOSSA in your CI.&lt;/strong&gt; You can also use your issue scan results as inputs to CI scripts. For GitHub repositories, you can use FOSSA&#39;s &lt;a href=&#34;https://docs.fossa.com/docs/automatic-updates#pull-request--commit-statuses-github-only&#34;&gt;native GitHub integration&lt;/a&gt; to report a status check on your PRs. For other CI integrations, you can also &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/references/subcommands/test.md&#34;&gt;use &lt;code&gt;fossa test&lt;/code&gt;&lt;/a&gt; to get programmatic issue status in CI.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;User Manual&lt;/h2&gt; &#xA;&lt;p&gt;For most users, the FOSSA CLI will work out-of-the-box without any configuration. Just get an API key, run &lt;code&gt;fossa analyze&lt;/code&gt;, and view your results in the FOSSA web application.&lt;/p&gt; &#xA;&lt;p&gt;Users who need advanced customization or features should see the &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/README.md&#34;&gt;User Manual&lt;/a&gt;. Some common topics of interest include:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/walkthroughs/debugging-your-integration.md&#34;&gt;Debugging your integration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/features/vendored-dependencies.md&#34;&gt;Specifying vendored dependencies&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/features/manual-dependencies.md&#34;&gt;Adding manual dependencies&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Reporting Issues&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;ve found a bug or need support, the best way to get support is to email &lt;a href=&#34;mailto:support@fossa.com&#34;&gt;support@fossa.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure to include reproduction steps and any relevant project files (e.g. &lt;code&gt;pom.xml&lt;/code&gt;s, &lt;code&gt;package.json&lt;/code&gt;s, etc.). Including the output from &lt;code&gt;fossa analyze --debug&lt;/code&gt; in the email as well as any relevant fossa files (&lt;code&gt;fossa-deps.json&lt;/code&gt;, &lt;code&gt;.fossa.yml&lt;/code&gt;) will help expedite a solution.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll try to respond to issues opened in this repository on a best-effort basis, but we mostly provide support via our &lt;a href=&#34;mailto:support@fossa.com&#34;&gt;&lt;code&gt;support@&lt;/code&gt;&lt;/a&gt; email.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;If you&#39;re interested in contributing, check out our &lt;a href=&#34;https://raw.githubusercontent.com/fossas/fossa-cli/master/docs/contributing/README.md&#34;&gt;contributor documentation&lt;/a&gt;. PRs are welcome!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm “file”                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ucsd-progsys/liquid-fixpoint</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/ucsd-progsys/liquid-fixpoint</id>
    <link href="https://github.com/ucsd-progsys/liquid-fixpoint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Horn Clause Constraint Solving for Liquid Types&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Liquid Fixpoint &lt;a href=&#34;https://hackage.haskell.org/package/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://packdeps.haskellers.com/feed?needle=liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage-deps/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage-Deps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;hlint&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This package implements a Horn-Clause/Logical Implication constraint solver used for various Liquid Types. The solver uses SMTLIB2 to implement an algorithm similar to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://users.soe.ucsc.edu/~cormac/papers/fme01.pdf&#34;&gt;Houdini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://swt.informatik.uni-freiburg.de/berit/papers/boolean-and-cartesian-....pdf&#34;&gt;Cartesian predicate abstraction&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the .cabal dependencies you require an SMTLIB2 compatible solver binary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;Z3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cvc4.github.io/&#34;&gt;CVC4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mathsat.fbk.eu/download.html&#34;&gt;MathSat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If on Windows, please make sure to place the binary and any associated DLLs somewhere in your path.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build and Install&lt;/h2&gt; &#xA;&lt;p&gt;Simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;$ cd liquid-fixpoint&#xA;$ stack install # alternatively, use `cabal install`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A reproducible Nix environment is provided as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build with:&#xA;$ nix-shell --pure --run &#34;stack build&#34;&#xA;&#xA;# Test with:&#xA;$ nix-shell --pure --run &#34;stack test&#34;&#xA;&#xA;# Run with:&#xA;$ nix-shell --pure --run &#34;stack exec fixpoint -- tests/pos/adt.fq&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using SMTLIB-based SMT Solvers&lt;/h2&gt; &#xA;&lt;p&gt;You can use one of several SMTLIB2 compliant solvers, by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fixpoint --solver=z3 path/to/file.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, we support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Z3&#xA;* CVC4&#xA;* MathSat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&#34;Horn&#34; Format&lt;/h2&gt; &#xA;&lt;p&gt;See the examples in &lt;code&gt;tests/horn/{pos, neg}&lt;/code&gt; eg&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_sum.smt2&#34;&gt;sum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_list00.smt2&#34;&gt;list00&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/neg/ple_list03.smt2&#34;&gt;list03&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For how to write VCs &#34;by hand&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://arxiv.org/abs/2010.07763&#34;&gt;this tutorial&lt;/a&gt; with &lt;a href=&#34;https://github.com/ranjitjhala/sprite-lang&#34;&gt;accompanying code&lt;/a&gt; for an example of how to generate Horn queries.&lt;/p&gt; &#xA;&lt;p&gt;The main datatypes are described in &lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/src/Language/Fixpoint/Horn/Types.hs&#34;&gt;src/Language/Fixpoint/Horn/Types.hs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Management&lt;/h2&gt; &#xA;&lt;p&gt;It is very important that the version of Liquid Fixpoint be maintained properly.&lt;/p&gt; &#xA;&lt;p&gt;Suppose that the current version of Liquid Haskell is &lt;code&gt;A.B.C.D&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;After a release to hackage is made, if any of the components &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, or &lt;code&gt;D&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint shall be incremented by &lt;code&gt;1&lt;/code&gt;. The version of Liquid Fixpoint is now &lt;code&gt;A.B.C.(D + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time a new function or type is exported from Liquid Fixpoint, if any of the components &lt;code&gt;B&lt;/code&gt;, or &lt;code&gt;C&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;C&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;D&lt;/code&gt; component shall stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.B.(C + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time the signature of an exported function or type is changed, or an exported function or type is removed (this includes functions or types that Liquid Fixpoint re-exports from its own dependencies), if the &lt;code&gt;B&lt;/code&gt; component is missing, it shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;B&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; components shall be stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.(B + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;A&lt;/code&gt; component shall be updated at the sole discretion of the project owners.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use the &lt;a href=&#34;https://hackage.haskell.org/package/bumper&#34;&gt;Bumper&lt;/a&gt; utility to manage the versioning of Liquid Fixpoint. Bumper will automatically do the correct update to the cabal file. Additionally, it will update any packages that you have the source for that depend on Liquid Fixpoint.&lt;/p&gt; &#xA;&lt;p&gt;To update Liquid Fixpoint and Liquid Haskell, first clone Liquid Haskell and Liquid Fixpoint to a common location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ucsd-progsys/liquidhaskell.git&#xA;git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper -3 liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will update the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint. If necessary, this will update the &lt;code&gt;Build-Depends&lt;/code&gt; of Liquid Haskell. If the &lt;code&gt;Build-Depends&lt;/code&gt; was updated, Liquid Haskell&#39;s &lt;code&gt;D&lt;/code&gt; component will be incremented.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;C&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --minor liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;B&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --major liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell&lt;/p&gt; &#xA;&lt;h2&gt;SMTLIB2 Interface&lt;/h2&gt; &#xA;&lt;p&gt;There is a new SMTLIB2 interface directly from Haskell:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language.Fixpoint.SmtLib2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;tests/smt2/{Smt.hs, foo.smt2}&lt;/code&gt; for an example of how to use it.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line for SMT2 interface&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;.smt2&lt;/code&gt; interface from the command-line as follows:&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--stdin&lt;/code&gt; to read files from &lt;code&gt;stdin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint --stdin&#xA;&#xA;Liquid-Fixpoint Copyright 2013-21 Regents of the University of California.&#xA;All Rights Reserved.&#xA;&#xA;Working 166% [===============================================================]&#xA;Safe ( 2  constraints checked)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-q&lt;/code&gt; to disable all output (banner, progress bar etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint -q --stdin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--json&lt;/code&gt; to get the output as a JSON object (rendered to &lt;code&gt;stdout&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/abs02-re.smt2 | stack exec -- fixpoint -q --json --stdin&#xA;{&#34;contents&#34;:{&#34;numIter&#34;:3,&#34;numCstr&#34;:3,&#34;numChck&#34;:3,&#34;numBrkt&#34;:3,&#34;numVald&#34;:3},&#34;tag&#34;:&#34;Safe&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;--higherorder&lt;/code&gt; allows higher order binders into the environment&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--extsolver&lt;/code&gt; runs the &lt;strong&gt;deprecated&lt;/strong&gt; external solver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--parts&lt;/code&gt; Partitions an &lt;code&gt;FInfo&lt;/code&gt; into a &lt;code&gt;[FInfo]&lt;/code&gt; and emits a bunch of files. So:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ fixpoint -n -p path/to/foo.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will now emit files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.1.fq&#xA;path/to/.liquid/foo.2.fq&#xA;. . .&#xA;path/to/.liquid/foo.k.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and also a dot file with the constraint dependency graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.fq.dot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FInfo Invariants&lt;/h2&gt; &#xA;&lt;h3&gt;Binders&lt;/h3&gt; &#xA;&lt;p&gt;This is the field&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , bs       :: !BindEnv         -- ^ Bind  |-&amp;gt; (Symbol, SortedReft)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in the .fq files as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bind 1 x : ...&#xA;bind 2 y : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; must be a distinct &lt;code&gt;Int&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; that appears in a constraint environment i.e. inside &lt;em&gt;any&lt;/em&gt; &lt;code&gt;IBindEnv&lt;/code&gt; must appear inside the &lt;code&gt;bs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environments&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint&#39;s environment is a set of &lt;code&gt;BindId&lt;/code&gt; which must be defined in the &lt;code&gt;bindInfo&lt;/code&gt;. Furthermore&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint should not have &lt;em&gt;duplicate&lt;/em&gt; names in its environment, that is if you have two binders&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  bind 1 x : ...&#xA;  bind 12 x : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then a single &lt;code&gt;IBindEnv&lt;/code&gt; should only mention &lt;em&gt;at most&lt;/em&gt; one of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;12&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is also a &#34;tree-shape&#34; property that its a bit hard to describe ... TODO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LHS&lt;/h3&gt; &#xA;&lt;p&gt;Each &lt;code&gt;slhs&lt;/code&gt; of a constraint is a &lt;code&gt;SortedReft&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;SortredReft&lt;/code&gt; is basically a &lt;code&gt;Reft&lt;/code&gt; -- a logical predicate. The important bit is that a &lt;code&gt;KVar&lt;/code&gt; i.e. terms of the formalized&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;     $k1[x1:=y1][x2:=y2]...[xn:=yn]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is represented in the &lt;code&gt;Expr&lt;/code&gt; type as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  | PKVar  !KVar !Subst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;must appear &lt;em&gt;only&lt;/em&gt; at the &lt;strong&gt;top-level&lt;/strong&gt; that is not under &lt;em&gt;any&lt;/em&gt; other operators, i.e. not as a sub-&lt;code&gt;Expr&lt;/code&gt; of other expressions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is basically a predicate that needs to be &#34;well sorted&#34; with respect to the &lt;code&gt;BindId&lt;/code&gt;, intuitively&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y:int |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is well sorted. but&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int  |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not, and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y: list |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not. The exact definition is formalized in &lt;code&gt;Language.Fixpoint.SortCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RHS&lt;/h3&gt; &#xA;&lt;p&gt;Similarly each &lt;code&gt;rhs&lt;/code&gt; of a &lt;code&gt;SubC&lt;/code&gt; must either be a single &lt;code&gt;$k[...]&lt;/code&gt; or an plain &lt;code&gt;$k&lt;/code&gt;-free &lt;code&gt;Expr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Global vs. Distinct Literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , gLits    :: !(SEnv Sort)               -- ^ Global Constant symbols&#xA;     , dLits    :: !(SEnv Sort)       &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;global&lt;/em&gt; literals &lt;code&gt;gLits&lt;/code&gt; are symbols that are in scope &lt;em&gt;everywhere&lt;/em&gt; i.e. need not be separately defined in individual environments. These include things like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;measure&lt;/em&gt; functions &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;data constructor&lt;/em&gt; literals &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Suppose you have an enumerated type like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data Day = Sun | Mon | Tue | Wed | ... | Sat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can model the above values in fixpoint as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;constant lit#Sun : Day&#xA;constant lit#Mon : Day&#xA;constant lit#Tue : Day&#xA;constant lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;distinct&lt;/em&gt; literals are a subset of the above where we want to tell the SMT solver that the values are &lt;em&gt;distinct&lt;/em&gt; i.e. &lt;strong&gt;not equal&lt;/strong&gt; to each other, for example, you can &lt;strong&gt;additionally&lt;/strong&gt; specify this as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;distinct lit#Sun : Day&#xA;distinct lit#Mon : Day&#xA;distinct lit#Tue : Day&#xA;distinct lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above two are represented programmatically by generating suitable &lt;code&gt;Symbol&lt;/code&gt; values (for the literals see &lt;code&gt;litSymbol&lt;/code&gt;) and &lt;code&gt;Sort&lt;/code&gt; values as &lt;code&gt;FTC FTycon&lt;/code&gt; and then making an &lt;code&gt;SEnv&lt;/code&gt; from the &lt;code&gt;[(Symbol, Sort)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sorts&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What&#39;s the difference between an FTC and an FObj?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In early versions of fixpoint, there was support for three sorts for expressions (&lt;code&gt;Expr&lt;/code&gt;) that were sent to the SMT solver:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;other&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;code&gt;FObj&lt;/code&gt; sort was introduced to represent essentially &lt;em&gt;all&lt;/em&gt; non-int and non-bool values (e.g. tuples, lists, trees, pointers...)&lt;/p&gt; &#xA;&lt;p&gt;However, we later realized that it is valuable to keep &lt;em&gt;more&lt;/em&gt; precise information for &lt;code&gt;Expr&lt;/code&gt;s and so we introduced the &lt;code&gt;FTC&lt;/code&gt; (fixpoint type constructor), which lets us represent the above respectively as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;String&#34; []&lt;/code&gt; -- in Haskell &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;Tuple&#34; [FInt, Bool]&lt;/code&gt; -- in Haskell &lt;code&gt;(Int, Bool)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;List&#34; [FTC &#34;List&#34; [FInt]]&lt;/code&gt; -- in Haskell &lt;code&gt;[[Int]]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is a comment that says FObj&#39;s are uninterpretted types; so probably a type the SMT solver doesn&#39;t know about? Does that then make FTC types that the SMT solver does know about (bools, ints, lists, sets, etc.)?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The SMT solver knows about &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; (also &lt;code&gt;bitvector&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;) but &lt;em&gt;all&lt;/em&gt; other types are &lt;em&gt;currently&lt;/em&gt; represented as plain &lt;code&gt;Int&lt;/code&gt; inside the SMT solver. However, we &lt;em&gt;will be&lt;/em&gt; changing this to make use of SMT support for ADTs ...&lt;/p&gt; &#xA;&lt;p&gt;To sum up: the &lt;code&gt;FObj&lt;/code&gt; is there for historical reasons; it has been subsumed by &lt;code&gt;FTC&lt;/code&gt; which is what I recomend you use. However &lt;code&gt;FObj&lt;/code&gt; is there if you want a simple &#34;unitype&#34; / &#34;any&#34; type for terms that are not &#34;interpreted&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Qualifier Patterns&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as (mon . $1) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatPrefix &#34;mon&#34; 1, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as ($1 . mon) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatSuffix 1 &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as mon : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatExact &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatNone, qpSort = FInt}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/gogol</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/brendanhay/gogol</id>
    <link href="https://github.com/brendanhay/gogol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Google Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gogol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/gogol&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/gogol.svg?sanitize=true&#34; alt=&#34;Hackage Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#organisation&#34;&gt;Organisation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#change-log&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#code-generation&#34;&gt;Code Generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#licence&#34;&gt;Licence&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;A comprehensive Google Services SDK for Haskell supporting all of the publicly available services.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the latest stable release documentation for each respective library on Hackage under the &lt;a href=&#34;http://hackage.haskell.org/packages/#cat:Google&#34;&gt;Google section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Organisation&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol&#34;&gt;&lt;code&gt;lib/gogol&lt;/code&gt;&lt;/a&gt;: Actual operational logic, you&#39;ll need to import this to send requests etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol-core&#34;&gt;&lt;code&gt;lib/gogol-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;gogol-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/services&#34;&gt;&lt;code&gt;lib/services/gogol-*&lt;/code&gt;&lt;/a&gt;: Data types for each of the individual Google Compute Engine Service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: A currently sparse collection of examples for the various services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;, Configuration, templates, and assets for the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code generation binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the release lifecycle of the service libraries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;A change log for the entire project can be found under &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gogol/CHANGELOG.md&#34;&gt;&lt;code&gt;gogol/CHANGELOG.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;For any problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/gogol/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code Generation&lt;/h2&gt; &#xA;&lt;p&gt;For pull requests which affect generated output, please &lt;em&gt;do not include&lt;/em&gt; the actual regenerated service code, only commit the updates to the generator and related configuration.&lt;/p&gt; &#xA;&lt;p&gt;This ensures the Continuous Integration process is the single source of truth for generated code changes, and keeps pull requests readable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h3&gt;Adding New Services&lt;/h3&gt; &#xA;&lt;p&gt;The configuration for the generation step of each individual service endpoint lives under &lt;code&gt;./configs/services&lt;/code&gt;. The naming matches the Google Discovery Service naming of endpoints, which are vendored under &lt;code&gt;./configs/models&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rather than actually crawling the Discovery Service, the &lt;a href=&#34;https://www.github.com/google/google-api-go-client&#34;&gt;Google API Go Client&lt;/a&gt; is vendored under &lt;code&gt;./vendor&lt;/code&gt;, and the JSON service definitions are copied to &lt;code&gt;./configs/models&lt;/code&gt; to ensure reproducibility of the generation steps and the abilitry to diff across versions.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Cloud Dataproc&lt;/h3&gt; &#xA;&lt;p&gt;To add a new endpoint, first create the related JSON configuration in the &lt;code&gt;./configs/services&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Since the Cloud Dataproc API is called &lt;code&gt;dataproc-api.json&lt;/code&gt; in the Google Discovery API, you would create the configuration &lt;code&gt;./configs/services/dataproc.json&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA; &#34;library&#34;: &#34;dataproc&#34;,&#xA; &#34;canonicalName&#34;: &#34;Dataproc&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the &lt;code&gt;Makefile&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the &lt;code&gt;./bin/gogol-gen&lt;/code&gt; binary, and will generate a Haskell library for each API that has matching &lt;code&gt;./configs/services/*.json&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;For the above example, the result would be a &lt;code&gt;./lib/services/gogol-dataproc&lt;/code&gt; directory at the top-level of the project containing the generated API client.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;make full-clean&lt;/code&gt; can be used to cause a complete re-download of all (including new) service models.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Individual clients/SDKs can be generated by passing a specific &lt;code&gt;MODELS&lt;/code&gt; environment variable to the &lt;code&gt;make&lt;/code&gt; command, for example: &lt;code&gt;MODELS=configs/models/admin/directory/v1/admin-api.json make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;Gogol is released under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parts of the code are derived from Google Compute Engine service descriptions, licensed under Apache 2.0. Source files subject to this contain an additional licensing clause in their header.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simplex-chat/simplex-chat</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/simplex-chat/simplex-chat</id>
    <link href="https://github.com/simplex-chat/simplex-chat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SimpleX - the first messaging platform operating without user identifiers of any kind - 100% private by design! iOS and Android apps are released 📱!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/simplex-chat-logo.svg?sanitize=true&#34; alt=&#34;SimpleX logo&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;SimpleX - the first messaging platform that has no user identifiers of any kind - 100% private by design!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml/badge.svg?branch=stable&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/simplex-chat/simplex-chat/total&#34; alt=&#34;GitHub downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/simplex-chat/simplex-chat&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/SimpleXChat?style=social&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/SimpleXChat?style=social&#34; alt=&#34;Join on Reddit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apple_store.svg?sanitize=true&#34; alt=&#34;iOS app&#34; height=&#34;42&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/google_play.svg?sanitize=true&#34; alt=&#34;Android app&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://app.simplex.chat&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/f_droid.svg?sanitize=true&#34; alt=&#34;F-Droid&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/testflight.png&#34; alt=&#34;iOS TestFlight&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apk_icon.png&#34; alt=&#34;APK&#34; height=&#34;41&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🖲 Protects your messages and metadata - who you talk to and when.&lt;/li&gt; &#xA; &lt;li&gt;🔐 Double ratchet end-to-end encryption, with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;📱 Mobile apps for Android (&lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;Google Play&lt;/a&gt;, &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;APK&lt;/a&gt;) and &lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;iOS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;TestFlight preview for iOS&lt;/a&gt; with the new features 1-2 weeks earlier - &lt;strong&gt;limited to 10,000 users&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;🖥 Available as a terminal (console) app / CLI on Linux, MacOS, Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why privacy of communications matter&lt;/h2&gt; &#xA;&lt;p&gt;Everyone should care about privacy and security of their communications - innocuous conversations can put you in danger even if there is nothing to hide.&lt;/p&gt; &#xA;&lt;p&gt;One of the most shocking stories is the experience of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mohamedou_Ould_Slahi&#34;&gt;Mohamedou Ould Salahi&lt;/a&gt; that he wrote about in his memoir and that is shown in The Mauritanian movie. He was put into Guantanamo camp, without trial, and was tortured there for 15 years after a phone call to his relative in Afghanistan, under suspicion of being involved in 9/11 attacks, even though he lived in Germany for the 10 years prior to the attacks.&lt;/p&gt; &#xA;&lt;p&gt;It is not enough to use an end-to-end encrypted messenger, we all should use the messengers that protect the privacy of our personal networks - who we are connected with.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX unique approach to privacy and security&lt;/h2&gt; &#xA;&lt;h3&gt;Full privacy of your identity, profile, contacts and metadata&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike any other existing messaging platform, SimpleX has no identifiers assigned to the users&lt;/strong&gt; - not even random numbers. This protects the privacy of who are you communicating with, hiding it from SimpleX platform servers and from any observers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#full-privacy-of-your-identity-profile-contacts-and-metadata&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The best protection against spam and abuse&lt;/h3&gt; &#xA;&lt;p&gt;As you have no identifier on SimpleX platform, you cannot be contacted unless you share a one-time invitation link or an optional temporary user address. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#the-best-protection-against-spam-and-abuse&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Complete ownership, control and security of your data&lt;/h3&gt; &#xA;&lt;p&gt;SimpleX stores all user data on client devices, the messages are only held temporarily on SimpleX relay servers until they are received. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#complete-ownership-control-and-security-of-your-data&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Users own SimpleX network&lt;/h3&gt; &#xA;&lt;p&gt;You can use SimpleX with your own servers and still communicate with people using the servers that are pre-configured in the apps or any other SimpleX servers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#users-own-simplex-network&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;p&gt;We plan that the SimpleX platform will grow into the platform supporting any distributed Internet application. This will allow you to build any service that people can access via chat, with custom web-based UI widgets that anybody with basic HTML/CSS/JavaScript knowledge can create in a few hours.&lt;/p&gt; &#xA;&lt;p&gt;You already can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use SimpleX Chat library to integrate chat functionality into your apps.&lt;/li&gt; &#xA; &lt;li&gt;use SimpleX Chat bot templates in Haskell to build your own chat bot services (TypeScript SDK is coming soon).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are considering developing with SimpleX platform please get in touch for any advice and support.&lt;/p&gt; &#xA;&lt;h2&gt;News and updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220511-simplex-chat-v2-images-files.md&#34;&gt;May 11, 2022. v2.0 released - sending images and files in mobile apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220404-simplex-chat-instant-notifications.md&#34;&gt;Apr 04, 2022. Instant notifications for SimpleX Chat mobile apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220308-simplex-chat-mobile-apps.md&#34;&gt;Mar 08, 2022 Mobile apps for iOS and Android released&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog&#34;&gt;All updates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Make a private connection&lt;/h2&gt; &#xA;&lt;p&gt;You need to share a link or scan a QR code (in person or during a video call) to make a connection and start messaging.&lt;/p&gt; &#xA;&lt;p&gt;The channel through which you share the link does not have to be secure - it is enough that you can confirm who sent you the message and that your SimpleX connection is established.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/conversation.png&#34; alt=&#34;Make a private connection&#34; width=&#34;594&#34; height=&#34;360&#34;&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; Quick installation of a terminal app&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o- https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the chat client is installed, simply run &lt;code&gt;simplex-chat&lt;/code&gt; from your terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/connection.gif&#34; alt=&#34;simplex-chat&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/CLI.md&#34;&gt;installing and using the terminal app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX Platform design&lt;/h2&gt; &#xA;&lt;p&gt;SimpleX is a client-server network with a unique network topology that uses redundant, disposable message relay nodes to asynchronously pass messages via unidirectional (simplex) message queues, providing recipient and sender anonymity.&lt;/p&gt; &#xA;&lt;p&gt;Unlike P2P networks, all messages are passed through one or several server nodes, that do not even need to have persistence. In fact, the current &lt;a href=&#34;https://github.com/simplex-chat/simplexmq#smp-server&#34;&gt;SMP server implementation&lt;/a&gt; uses in-memory message storage, persisting only the queue records. SimpleX provides better metadata protection than P2P designs, as no global participant identifiers are used to deliver messages, and avoids &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#comparison-with-p2p-messaging-protocols&#34;&gt;the problems of P2P networks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike federated networks, the server nodes &lt;strong&gt;do not have records of the users&lt;/strong&gt;, &lt;strong&gt;do not communicate with each other&lt;/strong&gt; and &lt;strong&gt;do not store messages&lt;/strong&gt; after they are delivered to the recipients. There is no way to discover the full list of servers participating in SimpleX network. This design avoids the problem of metadata visibility that all federated networks have and better protects from the network-wide attacks.&lt;/p&gt; &#xA;&lt;p&gt;Only the client devices have information about users, their contacts and groups.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/master/protocol/overview-tjr.md&#34;&gt;SimpleX whitepaper&lt;/a&gt; for more information on platform objectives and technical design.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Easy to deploy SimpleX server with in-memory message storage, without any dependencies.&lt;/li&gt; &#xA; &lt;li&gt;✅ Terminal (console) client with groups and files support.&lt;/li&gt; &#xA; &lt;li&gt;✅ One-click SimpleX server deployment on Linode.&lt;/li&gt; &#xA; &lt;li&gt;✅ End-to-end encryption using double-ratchet protocol with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;✅ Mobile apps v1 for Android and iOS.&lt;/li&gt; &#xA; &lt;li&gt;✅ Private instant notifications for Android using background service.&lt;/li&gt; &#xA; &lt;li&gt;✅ Haskell chat bot templates.&lt;/li&gt; &#xA; &lt;li&gt;✅ v2.0 - supporting images and files in mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;🏗 End-to-end encrypted audio and video calls via the mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;🏗 Automatic chat history deletion.&lt;/li&gt; &#xA; &lt;li&gt;🏗 Privacy preserving instant notifications for iOS using Apple Push Notification service (in progress).&lt;/li&gt; &#xA; &lt;li&gt;🏗 Chat server and TypeScript client SDK to develop chat interfaces, integrations and chat bots (in progress).&lt;/li&gt; &#xA; &lt;li&gt;Groups support for mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;Chat database portability and encryption.&lt;/li&gt; &#xA; &lt;li&gt;Web widgets for custom interactivity in the chats.&lt;/li&gt; &#xA; &lt;li&gt;SMP protocol improvements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SMP queue redundancy and rotation.&lt;/li&gt; &#xA;   &lt;li&gt;Message delivery confirmation.&lt;/li&gt; &#xA;   &lt;li&gt;Supporting the same profile on multiple devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Privacy-preserving identity server for optional DNS-based contact/group addresses to simplify connection and discovery, but not used to deliver messages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;keep all your contacts and groups even if you lose the domain.&lt;/li&gt; &#xA;   &lt;li&gt;the server doesn&#39;t have information about your contacts and groups.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Media server to optimize sending large files to groups.&lt;/li&gt; &#xA; &lt;li&gt;Channels server for large groups and broadcast channels.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/master/protocol/overview-tjr.md&#34;&gt;SimpleX protocols and security model&lt;/a&gt; was reviewed and had many improvements in v1.0.0; we are currently arranging for the independent implementation audit.&lt;/p&gt; &#xA;&lt;p&gt;You are likely to discover some bugs - we would really appreciate if you use it and let us know anything that needs to be fixed or improved.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/LICENSE&#34;&gt;AGPL v3&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>liquidhaskell/liquid-base</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/liquidhaskell/liquid-base</id>
    <link href="https://github.com/liquidhaskell/liquid-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drop-in replacement for the base library, to use with Liquid Haskell&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;liquid-base&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/liquid-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/liquid-base.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/liquidhaskell/liquid-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/liquidhaskell/liquid-base/develop.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a drop-in replacement for the Haskell &lt;a href=&#34;https://hackage.haskell.org/package/base&#34;&gt;base&lt;/a&gt; library, meant to be used with &lt;a href=&#34;http://ucsd-progsys.github.io/liquidhaskell/&#34;&gt;Liquid Haskell&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This package simply re-exports all the &lt;code&gt;base&lt;/code&gt; modules, but it also provides LH refinements for some of them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/amazonka</title>
    <updated>2022-05-30T01:41:36Z</updated>
    <id>tag:github.com,2022-05-30:/brendanhay/amazonka</id>
    <link href="https://github.com/brendanhay/amazonka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Amazon Web Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MPL-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL%202.0-blue.svg?sanitize=true&#34; alt=&#34;MPL2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/amazonka&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/amazonka.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/gen/badge.svg?sanitize=true&#34; alt=&#34;Gen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/docs/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Amazon Web Services SDK for Haskell with support for most public services. Parts of the code contained in this repository are auto-generated and automatically kept up to date with Amazon&#39;s latest service APIs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can find the latest Haddock documentation for each respective library on the &lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt; website.&lt;/li&gt; &#xA; &lt;li&gt;A release changelog can be found in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka/CHANGELOG.md&#34;&gt;lib/amazonka/CHANGELOG.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/amazonka/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#directory-layout&#34;&gt;Directory Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#supported-platforms-and-ghc-versions&#34;&gt;Supported Platforms and GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-project&#34;&gt;Building the Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-documentation&#34;&gt;Building the Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#running-the-code-generator&#34;&gt;Running the Code Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#code-formatting&#34;&gt;Code Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#third-party-packages&#34;&gt;Third Party Packages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Amazonka is licensed under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The AWS service descriptions are licensed under Apache 2.0. Source files derived from the service descriptions contain an additional licensing clause in their header.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Layout&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka&#34;&gt;&lt;code&gt;lib/amazonka&lt;/code&gt;&lt;/a&gt;: The main library containing setup, authentication, and send logic. This will be your primary dependency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/service/amazonka-*&lt;/code&gt;: A library per supported Amazon Web Service, you&#39;ll need to add a dependency on each selected service library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-core&#34;&gt;&lt;code&gt;lib/amazonka-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;amazonka-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-test&#34;&gt;&lt;code&gt;lib/amazonka-test&lt;/code&gt;&lt;/a&gt;: Common test functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: Basic examples for using the service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;: Service configuration, templates, and assets used by the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt;: The website documentation and related build code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code and configuration generators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/nix&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt;: Nix configuration code for toolchain packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the project, such as the release lifecycle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt;: Custom bazel rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/third_party&#34;&gt;&lt;code&gt;third_party&lt;/code&gt;&lt;/a&gt;: Third party packages and patches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms and GHC Versions&lt;/h2&gt; &#xA;&lt;p&gt;GHC versions &lt;code&gt;8.8.4&lt;/code&gt; and &lt;code&gt;8.10.7&lt;/code&gt; are officially supported and tested on NixOS, Ubuntu, and macOS. GHC &lt;code&gt;8.6.5&lt;/code&gt; may also work, but is not tested by our continuous integration pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository is built using a combination of &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; and your choice of &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; or Cabal. If you&#39;re just using Amazonka as a git dependency in your Cabal or Stack project, you can skip these steps. But if you plan on contributing to the codebase - welcome, read on!&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:brendanhay/amazonka.git&#xA;cd amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Setup Nix&lt;/h3&gt; &#xA;&lt;p&gt;Building the code in this repository requires various development dependencies (e.g. &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt;, &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;, &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; package manager is used to obtain and build the other dependencies in a &lt;a href=&#34;https://sre.google/sre-book/release-engineering/#hermetic-builds-nqslhnid&#34;&gt;hermetic&lt;/a&gt; environment. You can install Nix by following the &lt;a href=&#34;https://nixos.org/guides/install-nix.html&#34;&gt;official installation instructions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Nix is setup, you can enable the &lt;a href=&#34;https://amazonka.cachix.org&#34;&gt;cache&lt;/a&gt; to avoid building dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -iA cachix -f https://cachix.org/api/v1/install&#xA;cachix use amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Enter a Nix Shell&lt;/h3&gt; &#xA;&lt;p&gt;The build tools are installed and activated upon entering a &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; shell, which is achieved by running the following command in the root of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enter a shell and explicitly specify the GHC version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --argstr ghcVersion 884&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, if you have &lt;a href=&#34;https://direnv.net&#34;&gt;Direnv&lt;/a&gt; and &lt;a href=&#34;https://github.com/nix-community/lorri&#34;&gt;lorri&lt;/a&gt; installed you can use the provided &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/.envrc&#34;&gt;.envrc&lt;/a&gt; instead, which will also add the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;scripts&lt;/a&gt; directory to your &lt;code&gt;PATH&lt;/code&gt;. You can extend this by adding your own uncommitted &lt;code&gt;.envrc.local&lt;/code&gt; file. See the &lt;a href=&#34;https://github.com/direnv/direnv/wiki&#34;&gt;Direnv Wiki&lt;/a&gt; for various recipes.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Project&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following commands assume you&#39;re already in a nix-shell outlined in the previous step.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cabal&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re familiar with Cabal, you can build &lt;code&gt;amazonka-*&lt;/code&gt; packages via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build amazonka amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the entire project (which will take a very long time!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, if you plan on contributing to the project or want to perform code generation, you will need to familiarise yourself with &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;. You can build packages by specifying one or more targets using &lt;a href=&#34;https://docs.bazel.build/versions/4.1.0/build-ref.html#labels&#34;&gt;Bazel&#39;s label&lt;/a&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/amazonka //lib/services/amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or build all Haskell libraries in the project using the &lt;code&gt;...&lt;/code&gt; wildcard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view what targets are available in the workspace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel query //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, the &lt;code&gt;bazel&lt;/code&gt; command will use the same GHC version as the Nix shell&#39;s &lt;code&gt;ghcVersion&lt;/code&gt; argument. You can choose a different GHC version using &lt;code&gt;nix-shell --argstr ghcVersion 884&lt;/code&gt; - which is just a synonym for &lt;code&gt;bazel build --//tools/ghc:version=884&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Building the Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;docs&lt;/a&gt; Bazel package contains the Haddock target and Hugo static site definition and markdown content. To build the site locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //docs:bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can serve the documentation site locally on &lt;code&gt;http://localhost:1313&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel run //docs:serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Code Generator&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;gen&lt;/a&gt; Bazel package contains code generators for synthesising Haskell data types, packages, and configuration from the botocore service definitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate&#34;&gt;scripts/generate&lt;/a&gt; will run the code generator for all services configured in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/services&lt;/a&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can selectively run the generator on one or more services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate ec2 s3 iam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/botocore&#34;&gt;botocore&lt;/a&gt; service definitions used by the generator, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/update-botocore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate-configs&#34;&gt;scripts/generate-configs&lt;/a&gt; will run the config generator to produce placeholder &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/serivces&lt;/a&gt; configurations for the version of botocore pinned in the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/WORKSPACE&#34;&gt;WORKSPACE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate any missing service configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate-configs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Service configurations generated in this way are intended as examples only and the resulting &lt;code&gt;configs/services/&amp;lt;name&amp;gt;.json:libraryName&lt;/code&gt; (Haskell package name) and &lt;code&gt;configs/annexes/&amp;lt;name&amp;gt;.json:serviceAbbreviation&lt;/code&gt; (Haskell package namespace) should be manually verified and curated as necessary.&lt;/p&gt; &#xA;&lt;p&gt;For pull requests which affect generated output please &lt;em&gt;do not include&lt;/em&gt; the regenerated &lt;code&gt;amazonka-*&lt;/code&gt; packages, only commit updates to the build rules, documentation, generator, and related configuration. This ensures the Continuous Integration process is the single source of truth for the generated code and reduces noise in pull requests, keeping them reviewable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h2&gt;Code Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;./scripts/format&lt;/code&gt; frequently - it&#39;s OK, I hate 2 spaces too, we&#39;re in this together.&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Packages&lt;/h2&gt; &#xA;&lt;p&gt;When naming an additional library which provides supplemental functionality to &lt;code&gt;amazonka&lt;/code&gt;, if you want to use the &lt;code&gt;amazonka-*&lt;/code&gt; namespace, then please consider prefixing your package names with &lt;code&gt;amazonka-contrib-*&lt;/code&gt;. For example, &lt;a href=&#34;https://hackage.haskell.org/package/amazonka-contrib-rds-utils&#34;&gt;amazonka-contrib-rds-utils&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This minimises potential future collisions with auto-generated package names and new AWS service and product releases.&lt;/p&gt;</summary>
  </entry>
</feed>