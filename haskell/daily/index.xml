<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-27T01:32:09Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Verification-for-Security/dpll-t</title>
    <updated>2023-09-27T01:32:09Z</updated>
    <id>tag:github.com,2023-09-27:/Verification-for-Security/dpll-t</id>
    <link href="https://github.com/Verification-for-Security/dpll-t" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An assignment where you build an SMT solver.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Assignment 2: DPLL(T)&lt;/h1&gt; &#xA;&lt;p&gt;In this assignment, you will implement an SMT solver over the theory of Linear Rational Arithmetic (LRA). For the most part, this assignment consists of implementing an SAT solver using the DPLL algorithm. When your SAT solver is fully functioning, you can extend it into an SMT solver by incoporating a theory solver. In this case, one over LRA using the Simplex method.&lt;/p&gt; &#xA;&lt;h2&gt;Running and testing&lt;/h2&gt; &#xA;&lt;p&gt;This code again features a test bench, which you may run in the same fashion with &lt;code&gt;stack&lt;/code&gt;. The tests again aim to direct you through to code base of this assignment and we strongly suggest you follow this!&lt;/p&gt; &#xA;&lt;p&gt;This assignment also features an executable which may be ran with the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ stack run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default, this will run the full SMT solver. This will only work once the entire assignment is complete. We do allow you to modify &lt;code&gt;Main&lt;/code&gt; to run only a part of solver. This can be useful when you wish to test a larger sequence of code. The executable code for a Haskell project can generally be found in the &lt;code&gt;app&lt;/code&gt; folder.&lt;/p&gt; &#xA;&lt;h2&gt;Assignment Structure&lt;/h2&gt; &#xA;&lt;p&gt;In this assignment, we provide you with a skeleton which requires a number of stubs to be implemented. Every stub contains some explanation of what it is supposed to do. Read this carefully!&lt;/p&gt; &#xA;&lt;h2&gt;SAT solver&lt;/h2&gt; &#xA;&lt;p&gt;For the SAT solver, you essentially need to implement three things.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Conversion from proposition into Conjunct Normal Form (CNF)&lt;/li&gt; &#xA; &lt;li&gt;Tseitins Transformation to create an equisatisfiable CNF&lt;/li&gt; &#xA; &lt;li&gt;The DPLL algorithm, including BCP and PLE&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Propositions&lt;/h3&gt; &#xA;&lt;p&gt;You may notice that there are two datastructures that represent a proposition. The first being &lt;code&gt;Prop a&lt;/code&gt;, which is in an unconstrained form. When compared to the second form, &lt;code&gt;CNF a&lt;/code&gt;, you&#39;ll quickly see that the latter structure strictly allows for propositions only in CNF. The nice thing about this is that it saves us the tedious (and slow) task of checking whether the structure is in CNF when checking satisfiability!&lt;/p&gt; &#xA;&lt;p&gt;Before implementing the CNF conversion, try to understand both datastructures! Your first tasks will be to implement the conversion from &lt;code&gt;Prop a&lt;/code&gt; to &lt;code&gt;CNF a&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SMT solver&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;ve implemented to SAT solver, you will extend it to an SMT solver. This requires you to implement the following two things.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Conversion from LRA to a format supported by the theory solver (Simplex)&lt;/li&gt; &#xA; &lt;li&gt;The DPLL(T) algorithm&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Notice that you will not have to implement the theory solver itself.&lt;/p&gt; &#xA;&lt;h2&gt;Grading&lt;/h2&gt; &#xA;&lt;p&gt;Your final grade corresponds directly to the one awarded to you by the test infrastructure. Do make sure your submission correctly executes on our online environment.&lt;/p&gt; &#xA;&lt;p&gt;If there are issues with the submission system, don&#39;t panic! We will handle this on a case-by-case basis.&lt;/p&gt; &#xA;&lt;p&gt;If your uploaded submission somehow fail tests that work locally, ping us and we will have a look!&lt;/p&gt; &#xA;&lt;p&gt;If the online environment suddenly fails to work moments before the deadline, don&#39;t hesitate to send us your submission through different means (e.g. email).&lt;/p&gt; &#xA;&lt;h2&gt;Plagiarism&lt;/h2&gt; &#xA;&lt;p&gt;We have a strict zero tolerance policy against plagiarism. Sadly, we find cases every year... This is not fun for you, nor us. Please, refrain from copying and/or sharing your code with other groups.&lt;/p&gt; &#xA;&lt;p&gt;Since this is a group assignment, we expect that most of you will work together via Git. Do make sure to make your repository &lt;strong&gt;private&lt;/strong&gt;! Sharing your code in this manner is sadly still plagiarism, even if unintentional.&lt;/p&gt;</summary>
  </entry>
</feed>