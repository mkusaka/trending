<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-09-10T01:37:15Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>YoshikuniJujo/wxturtle</title>
    <updated>2022-09-10T01:37:15Z</updated>
    <id>tag:github.com,2022-09-10:/YoshikuniJujo/wxturtle</id>
    <link href="https://github.com/YoshikuniJujo/wxturtle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;library for program like LOGO&#39;s turtle with using wxHaskell&lt;/p&gt;&lt;hr&gt;&lt;p&gt;You can run turtle in wxHaskell.&lt;/p&gt; &#xA;&lt;p&gt;Install this package by cabal.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>GaloisInc/what4-serialize</title>
    <updated>2022-09-10T01:37:15Z</updated>
    <id>tag:github.com,2022-09-10:/GaloisInc/what4-serialize</id>
    <link href="https://github.com/GaloisInc/what4-serialize" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Serialization/deserialization for What4 expressions&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;what4-serialize&lt;/h1&gt; &#xA;&lt;p&gt;This library is &lt;strong&gt;deprecated&lt;/strong&gt; because its functionality has been merged into the core what4 library.&lt;/p&gt; &#xA;&lt;p&gt;This library provided a mechanism to serialize what4 terms into an s-expression format (and later deserialize them).&lt;/p&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;The dependencies of the project that are not on Hackage are specified using git submodules. To build the code with a modern version of &lt;code&gt;cabal&lt;/code&gt; (assuming you are in the root of the repository):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  $ git submodule update --init&#xA;  $ ln -s cabal.project.newbuild cabal.project&#xA;  $ cabal new-configure&#xA;  $ cabal new-build what4-serialize&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>restaumatic/vcr-proxy</title>
    <updated>2022-09-10T01:37:15Z</updated>
    <id>tag:github.com,2022-09-10:/restaumatic/vcr-proxy</id>
    <link href="https://github.com/restaumatic/vcr-proxy" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Proxy for request, response recording and playback&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;VCR proxy&lt;/h1&gt; &#xA;&lt;p&gt;VCR proxy can be used to record and replay recorded API interactions.&lt;/p&gt; &#xA;&lt;p&gt;It is not a HTTP proxy in the normal sense, instead the HTTP client which we are testing should be pointed (if possible) at the proxy as its endpoint. VCR proxy in Record mode will use the &#34;endpoint&#34; argument to route the requests to the remote API.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For restaumatic developers: VCR proxy is already present in our devcontainer.&lt;/p&gt; &#xA;&lt;p&gt;For other users:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;(Haskell users) build it with &lt;code&gt;stack install&lt;/code&gt; (this will put the binary into $HOME/.local/bin which you might want to add to your path).&lt;/li&gt; &#xA; &lt;li&gt;(Ubuntu users / possibly other distros) download a binary from: &lt;a href=&#34;https://github.com/restaumatic/vcr-proxy/releases/tag/v0.3.0.0&#34;&gt;https://github.com/restaumatic/vcr-proxy/releases/tag/v0.3.0.0&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;% vcr-proxy --help&#xA;VCR Proxy&#xA;&#xA;Usage: vcr-proxy (-c|--cassette CASSETTE_FILE) (-m|--mode MODE)&#xA;                 (-e|--endpoint REMOTE_API_ENDPOINT) [--port INT]&#xA;  Run the VCR proxy to replay or record API calls. Runs in replay mode by&#xA;  default.&#xA;&#xA;Available options:&#xA;  -c,--cassette CASSETTE_FILE&#xA;                           Cassette yaml file for recording/replaying the API&#xA;                           interactions&#xA;  -m,--mode MODE           Run vcr proxy in the specified mode: Record | Replay&#xA;                           | ReplayStrict&#xA;  -e,--endpoint REMOTE_API_ENDPOINT&#xA;                           Forward requests to the specified API endpoint&#xA;  --port INT               Port to listen on (default: 3128)&#xA;  -h,--help                Show this help text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example usage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run vcr proxy in &lt;code&gt;Record&lt;/code&gt; mode:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;vcr-proxy -e &#34;https://postman-echo.com/&#34; -c cassette.yaml -m Record&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt;Interact with the &#34;API&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --request POST &#34;http://localhost:3128/post&#34; --data &#34;RETURN THIS&#34;  --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;3&#34;&gt; &#xA; &lt;li&gt;The request should be recorded in the &lt;code&gt;cassette.yaml&lt;/code&gt; file&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;ignoredHeaders: []&#xA;apiCalls:&#xA;- response:&#xA;    status:&#xA;      code: 200&#xA;      message: OK&#xA;    body: ! &#39;{&#34;args&#34;:{},&#34;data&#34;:&#34;&#34;,&#34;files&#34;:{},&#34;form&#34;:{&#34;RETURN THIS&#34;:&#34;&#34;},&#34;headers&#34;:{&#34;x-forwarded-proto&#34;:&#34;https&#34;,&#34;host&#34;:&#34;postman-echo.com&#34;,&#34;content-length&#34;:&#34;11&#34;,&#34;accept&#34;:&#34;*/*&#34;,&#34;accept-encoding&#34;:&#34;gzip&#34;,&#34;content-type&#34;:&#34;application/x-www-form-urlencoded&#34;,&#34;user-agent&#34;:&#34;curl/7.54.0&#34;,&#34;x-forwarded-port&#34;:&#34;443&#34;},&#34;json&#34;:{&#34;RETURN&#xA;      THIS&#34;:&#34;&#34;},&#34;url&#34;:&#34;https://postman-echo.com/post&#34;}&#39;&#xA;    headers:&#xA;    - - x-via-proxy&#xA;      - &#39;yes&#39;&#xA;    - - content-encoding&#xA;      - gzip&#xA;    - - content-type&#xA;      - application/json; charset=utf-8&#xA;    - - date&#xA;      - Wed, 20 Feb 2019 12:46:04 GMT&#xA;    - - etag&#xA;      - W/&#34;161-/+7sogff3HHwvNZ0N6/PEIi992Y&#34;&#xA;    - - server&#xA;      - nginx&#xA;    - - set-cookie&#xA;      - sails.sid=s%3AZ8Er_mJ6ZdZGpprlP86lQ6gzxEK6K881.WOKz1JtNAc9jfzuTdaIy4jo6vCrLT0dQCY9ykUdG%2FEU;&#xA;        Path=/; HttpOnly&#xA;    - - vary&#xA;      - Accept-Encoding&#xA;    - - content-length&#xA;      - &#39;237&#39;&#xA;    - - connection&#xA;      - keep-alive&#xA;  request:&#xA;    methodName: POST&#xA;    body: RETURN THIS&#xA;    url: /post&#xA;    params: []&#xA;    headers: []&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the proxy in &lt;code&gt;ReplayStrict&lt;/code&gt; or &lt;code&gt;Replay&lt;/code&gt; mode&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;vcr-proxy -e &#34;https://postman-echo.com/&#34; -c cassette.yaml -m ReplayStrict&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Interact with the &#34;API&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl --request POST &#34;http://localhost:3128/post&#34; --data &#34;RETURN THIS&#34;  --verbose&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The request recorded in the cassette file should be returned !&lt;/p&gt; &#xA;&lt;h3&gt;Why not a normal proxy?&lt;/h3&gt; &#xA;&lt;p&gt;We wouldn&#39;t be able to handle HTTPS / CONNECT requests.&lt;/p&gt; &#xA;&lt;h3&gt;TODO:&lt;/h3&gt; &#xA;&lt;p&gt;I didn&#39;t really think through what should be the &#34;endpoint&#34; parameter passed as an argument, ie. should it be just &lt;code&gt;scheme://host:port/&lt;/code&gt; or should it also include &lt;code&gt;path&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>