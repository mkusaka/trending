<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-07T01:43:56Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>wireapp/wire-server</title>
    <updated>2022-06-07T01:43:56Z</updated>
    <id>tag:github.com,2022-06-07:/wireapp/wire-server</id>
    <link href="https://github.com/wireapp/wire-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ðŸ‡ªðŸ‡º Wire back-end services&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Wireâ„¢&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://wire.com/jobs/&#34;&gt;&lt;img src=&#34;https://github.com/wireapp/wire/raw/master/assets/header-small.png?raw=true&#34; alt=&#34;Wire logo&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This repository is part of the source code of Wire. You can find more information at &lt;a href=&#34;https://wire.com&#34;&gt;wire.com&lt;/a&gt; or by contacting &lt;a href=&#34;mailto:opensource@wire.com&#34;&gt;opensource@wire.com&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can find the published source code at &lt;a href=&#34;https://github.com/wireapp/wire&#34;&gt;github.com/wireapp/wire&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For licensing information, see the attached LICENSE file and the list of third-party licenses at &lt;a href=&#34;https://wire.com/legal/licenses/&#34;&gt;wire.com/legal/licenses/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;No license is granted to the Wire trademark and its associated logos, all of which will continue to be owned exclusively by Wire Swiss GmbH. Any use of the Wire trademark and/or its associated logos is expressly prohibited without the express prior written consent of Wire Swiss GmbH.&lt;/p&gt; &#xA;&lt;h2&gt;Wire server&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the source code for the Wire server. It contains all libraries and services necessary to run Wire.&lt;/p&gt; &#xA;&lt;p&gt;For documentation on how to self host your own Wire-Server see &lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#how-to-install-and-run-wire-server&#34;&gt;this section&lt;/a&gt;. Federation is on our long term roadmap.&lt;/p&gt; &#xA;&lt;p&gt;See more in &#34;&lt;a href=&#34;https://medium.com/@wireapp/open-sourcing-wire-server-code-ef7866a731d5&#34;&gt;Open sourcing Wire server code&lt;/a&gt;&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- vim-markdown-toc GFM --&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#contents-of-this-repository&#34;&gt;Contents of this repository&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#architecture-overview&#34;&gt;Architecture Overview&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#development-setup&#34;&gt;Development setup&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#how-to-build-wire-server-binaries&#34;&gt;How to build &lt;code&gt;wire-server&lt;/code&gt; binaries&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#1-compile-sources-natively&#34;&gt;1. Compile sources natively.&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#2-use-docker&#34;&gt;2. Use docker&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#how-to-run-integration-tests&#34;&gt;How to run integration tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#when-you-need-more-fine-grained-control-over-your-build-test-loops&#34;&gt;when you need more fine-grained control over your build-test loops&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/#how-to-install-and-run-wire-server&#34;&gt;How to install and run &lt;code&gt;wire-server&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- vim-markdown-toc --&gt; &#xA;&lt;h2&gt;Contents of this repository&lt;/h2&gt; &#xA;&lt;p&gt;This repository contains the following source code:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;services&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;nginz&lt;/strong&gt;: Public API Reverse Proxy (Nginx with custom libzauth module)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;galley&lt;/strong&gt;: Conversations and Teams&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;brig&lt;/strong&gt;: Accounts&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;gundeck&lt;/strong&gt;: Push Notification Hub&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;cannon&lt;/strong&gt;: WebSocket Push Notifications&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;cargohold&lt;/strong&gt;: Asset (image, file, ...) Storage&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;proxy&lt;/strong&gt;: 3rd Party API Integration&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;restund&lt;/strong&gt;: STUN/TURN server for use in Audio/Video calls&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;spar&lt;/strong&gt;: Single-Sign-On (SSO)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;tools&lt;/strong&gt;&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;strong&gt;api-simulations&lt;/strong&gt;: Run automated smoke and load tests&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;makedeb&lt;/strong&gt;: Create Debian packages&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;bonanza&lt;/strong&gt;: Transform and forward log data&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;db/&lt;/strong&gt;: Migration tools (e.g. when new tables are added)&lt;/li&gt; &#xA;   &lt;li&gt;&lt;strong&gt;stern/&lt;/strong&gt;: Backoffice tool (basic &lt;a href=&#34;https://swagger.io/&#34;&gt;Swagger&lt;/a&gt; based interface)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;libs&lt;/strong&gt;: Shared libraries&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It also contains&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;build&lt;/strong&gt;: Build scripts and Dockerfiles for some platforms&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;deploy&lt;/strong&gt;: (Work-in-progress) - how to run wire-server in an ephemeral, in-memory demo mode&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;doc&lt;/strong&gt;: Documentation&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;hack&lt;/strong&gt;: scripts and configuration for kuberentes helm chart development/releases mainly used by CI&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;charts&lt;/strong&gt;: Kubernetes Helm charts. The charts are mirroed to S3 and can be used with &lt;code&gt;helm repo add wire https://s3-eu-west-1.amazonaws.com/public.wire.com/charts&lt;/code&gt;. See the &lt;a href=&#34;https://docs.wire.com&#34;&gt;Administrator&#39;s Guide&lt;/a&gt; for more info.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Architecture Overview&lt;/h2&gt; &#xA;&lt;p&gt;The following diagram gives a high-level outline of the (deployment) architecture of the components that make up a Wire Server as well as the main internal and external dependencies between components.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/docs/developer/architecture/wire-arch-2.png&#34; alt=&#34;wire-arch&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Communication between internal components is currently not guarded by dedicated authentication or encryption and is assumed to be confined to a private network.&lt;/p&gt; &#xA;&lt;h2&gt;Development setup&lt;/h2&gt; &#xA;&lt;h3&gt;How to build &lt;code&gt;wire-server&lt;/code&gt; binaries&lt;/h3&gt; &#xA;&lt;p&gt;There are two options:&lt;/p&gt; &#xA;&lt;h4&gt;1. Compile sources natively.&lt;/h4&gt; &#xA;&lt;p&gt;This requires a range of dependencies that depend on your platform/OS, such as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell &amp;amp; Rust compiler and package managers&lt;/li&gt; &#xA; &lt;li&gt;Some package dependencies (libsodium, openssl, protobuf, icu, geoip, snappy, &lt;a href=&#34;https://github.com/wireapp/cryptobox-c&#34;&gt;cryptobox-c&lt;/a&gt;, ...) that depend on your platform/OS&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/docs/legacy/developer/dependencies.md&#34;&gt;docs/developer/dependencies.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;Once all dependencies are set up, the following should succeed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# build all haskell services&#xA;make&#xA;# build one haskell service, e.g. brig:&#xA;cd services/brig &amp;amp;&amp;amp; make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The default make target (&lt;code&gt;fast&lt;/code&gt;) compiles unoptimized (faster compilation time, slower binaries), which should be fine for development purposes. Use &lt;code&gt;make install&lt;/code&gt; to get optimized binaries.&lt;/p&gt; &#xA;&lt;p&gt;For building nginz, see &lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/services/nginz/README.md&#34;&gt;services/nginz/README.md&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;2. Use docker&lt;/h4&gt; &#xA;&lt;p&gt;&lt;em&gt;If you don&#39;t wish to build all docker images from scratch (e.g. the &lt;code&gt;ubuntu20-builder&lt;/code&gt; takes a very long time), ready-built images can be downloaded from &lt;a href=&#34;https://quay.io/organization/wire&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you wish to build your own docker images, you need &lt;a href=&#34;https://www.docker.com/&#34;&gt;docker version &amp;gt;= 17.05&lt;/a&gt; and &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;&lt;code&gt;make&lt;/code&gt;&lt;/a&gt;. Then,&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# optionally:&#xA;# make docker-builder # if you don&#39;t run this, it pulls the ubuntu20-builder image from quay.io&#xA;make docker-deps docker-intermediate docker-services&#xA;&#xA;# subsequent times, after changing code, if you wish to re-create docker images, it&#39;s sufficient to&#xA;make docker-intermediate docker-services&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will, eventually, have built a range of docker images. Make sure to &lt;a href=&#34;https://github.com/wireapp/wire-server/issues/562&#34;&gt;give Docker enough RAM&lt;/a&gt;; if you see &lt;code&gt;make: *** [builder] Error 137&lt;/code&gt;, it might be a sign that the build ran out of memory. You can also mix and match â€“ e.g. pull the &lt;a href=&#34;https://quay.io/repository/wire/ubuntu20-builder?tab=tags&#34;&gt;&lt;code&gt;ubuntu20-builder&lt;/code&gt;&lt;/a&gt; image and build the rest locally.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Makefile&lt;/code&gt;s and &lt;code&gt;Dockerfile&lt;/code&gt;s, as well as &lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/build/ubuntu/README.md&#34;&gt;build/ubuntu/README.md&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h3&gt;How to run integration tests&lt;/h3&gt; &#xA;&lt;p&gt;Integration tests require all of the haskell services (brig, galley, cannon, gundeck, proxy, cargohold, spar) to be correctly configured and running, before being able to execute e.g. the &lt;code&gt;brig-integration&lt;/code&gt; binary. The test for brig also starts nginz, so make sure it has been built before. These services require most of the deployment dependencies as seen in the architecture diagram to also be available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Required internal dependencies: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;cassandra (with the correct schema)&lt;/li&gt; &#xA;   &lt;li&gt;elasticsearch (with the correct schema)&lt;/li&gt; &#xA;   &lt;li&gt;redis&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Required external dependencies are the following configured AWS services (or &#34;fake&#34; replacements providing the same API): &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SES&lt;/li&gt; &#xA;   &lt;li&gt;SQS&lt;/li&gt; &#xA;   &lt;li&gt;SNS&lt;/li&gt; &#xA;   &lt;li&gt;S3&lt;/li&gt; &#xA;   &lt;li&gt;DynamoDB&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Required additional software: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;netcat (in order to allow the services being tested to talk to the dependencies above)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Setting up these real, but in-memory internal and &#34;fake&#34; external dependencies is done easiest using &lt;a href=&#34;https://docs.docker.com/compose/install/&#34;&gt;&lt;code&gt;docker-compose&lt;/code&gt;&lt;/a&gt;. Run the following in a separate terminal (it will block that terminal, C-c to shut all these docker images down again):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;deploy/dockerephemeral/run.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, to run all integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make integration&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, alternatively, &lt;code&gt;make&lt;/code&gt; on the top-level directory (to produce all the service&#39;s binaries) followed by e.g &lt;code&gt;cd services/brig &amp;amp;&amp;amp; make integration&lt;/code&gt; to run one service&#39;s integration tests only.&lt;/p&gt; &#xA;&lt;h3&gt;when you need more fine-grained control over your build-test loops&lt;/h3&gt; &#xA;&lt;p&gt;You can use &lt;code&gt;$WIRE_STACK_OPTIONS&lt;/code&gt; to pass arguments to stack through the &lt;code&gt;Makefile&lt;/code&gt;s. This is useful to e.g. pass arguments to a unit test suite or temporarily disable &lt;code&gt;-Werror&lt;/code&gt; without the risk of accidentally committing anything, like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;WIRE_STACK_OPTIONS=&#39;--ghc-options=-Wwarn --test-arguments=&#34;--quickcheck-tests=19919 --quickcheck-replay=651712&#34;&#39; make -C services/gundeck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Integration tests are run via &lt;code&gt;/services/integration.sh&lt;/code&gt;, which does not know about stack or &lt;code&gt;$WIRE_STACK_OPTIONS&lt;/code&gt;. Here you can use &lt;code&gt;$WIRE_INTEGRATION_TEST_OPTIONS&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd services/spar&#xA;WIRE_INTEGRATION_TEST_OPTIONS=&#34;--match=&#39;POST /identity-providers&#39;&#34; make i&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can use &lt;a href=&#34;https://github.com/feuerbach/tasty#runtime&#34;&gt;tasty&#39;s support for passing arguments vie shell variables directly&lt;/a&gt;. Or, in the case of spar, the &lt;a href=&#34;https://hspec.github.io/options.html#specifying-options-through-an-environment-variable&#34;&gt;hspec equivalent&lt;/a&gt;, which &lt;a href=&#34;https://github.com/hspec/hspec/issues/335&#34;&gt;is less helpful at times&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to install and run &lt;code&gt;wire-server&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;p&gt;You have two options:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Option 1. (recommended) Install wire-server on kubernetes using the configuration and instructions provided in &lt;a href=&#34;https://github.com/wireapp/wire-server-deploy&#34;&gt;wire-server-deploy&lt;/a&gt;. This is the best option to run it on a server and recommended if you want to self-host wire-server.&lt;/li&gt; &#xA; &lt;li&gt;Option 2. Compile everything in this repo, then you can use the &lt;a href=&#34;https://raw.githubusercontent.com/wireapp/wire-server/develop/deploy/services-demo/README.md&#34;&gt;docker-compose based demo&lt;/a&gt;. This option is intended as a way to try out wire-server on your local development machine and is less suited when you want to install wire-server on a server.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>tweag/plutus-libs</title>
    <updated>2022-06-07T01:43:56Z</updated>
    <id>tag:github.com,2022-06-07:/tweag/plutus-libs</id>
    <link href="https://github.com/tweag/plutus-libs" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Tweag Plutus Libraries&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/#projects&#34;&gt;Projects&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/#developer-tools-and-environment&#34;&gt;Developer Tools and Env&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/#important-configure-your-nix-cache&#34;&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Setting up the nix cache&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/#updating-plutus&#34;&gt;Updating Plutus&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This repository contains our collection of the libraries for developing and auditing &lt;a href=&#34;https://github.com/input-output-hk/plutus&#34;&gt;Plutus&lt;/a&gt; contracts. These libraries are a research prototype under active development, they comes &lt;em&gt;as is&lt;/em&gt; with no guarantees whatosever. Check the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/LICENSE&#34;&gt;license&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The rendered Haddock for the current &lt;code&gt;main&lt;/code&gt; branch can be found at &lt;a href=&#34;https://tweag.github.io/plutus-libs/&#34;&gt;https://tweag.github.io/plutus-libs/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Projects&lt;/h2&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/cooked-validators&#34;&gt;cooked-validators&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Used for writing the first layer of off-chain code: generating and submitting transactions.&lt;/li&gt; &#xA; &lt;li&gt;Enables property-based testing of Plutus contracts with no code duplication.&lt;/li&gt; &#xA; &lt;li&gt;Interacts seamlessly with Plutus &lt;code&gt;Contract&lt;/code&gt; monad.&lt;/li&gt; &#xA; &lt;li&gt;Supports loading arbitrary UPLC contracts from bytestrings for testing.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/examples&#34;&gt;examples&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Example contracts and their test suites written using &lt;code&gt;cooked-validators&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Developer Tools and Environment&lt;/h2&gt; &#xA;&lt;p&gt;A Nix shell development environment is provided. See &lt;a href=&#34;https://nixos.org/manual/nix/unstable/command-ref/nix-shell.html&#34;&gt;&lt;code&gt;nix-shell&lt;/code&gt; docs&lt;/a&gt;. All of the project dependencies, except for Plutus, are handled by nix. Plutus is handled by cabal. This results in a simpler nix setup that is easy to extend with different tools one might need.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;strong&gt;IMPORTANT:&lt;/strong&gt; Configure your nix cache!&lt;/h3&gt; &#xA;&lt;p&gt;Plutus uses a custom GHC version. To avoid having to build this GHC, make sure you set up the IOHK binary nix cache as instructed &lt;a href=&#34;https://github.com/input-output-hk/plutus#iohk-binary-cache&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Seamless Integration with &lt;code&gt;direnv&lt;/code&gt;&lt;/h3&gt; &#xA;&lt;p&gt;We recommend using &lt;code&gt;direnv&lt;/code&gt; to automatically bring in the nix dependencies when entering the project directory. Just run &lt;code&gt;direnv allow&lt;/code&gt; at the root of the repo. To cache the nix environment and make direnv load instantaneously, you can and use &lt;a href=&#34;https://github.com/nix-community/nix-direnv#with-nix-env&#34;&gt;nix-direnv&lt;/a&gt;. Several editors have support for &lt;code&gt;direnv&lt;/code&gt;. If you use emacs, we recomend using &lt;a href=&#34;https://github.com/purcell/envrc&#34;&gt;&lt;code&gt;envrc-mode&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Nixpkgs and HaskellNix pin&lt;/h3&gt; &#xA;&lt;p&gt;In order to improve reproducibility, nixpkgs and &lt;a href=&#34;https://input-output-hk.github.io/haskell.nix/&#34;&gt;&lt;code&gt;haskell.nix&lt;/code&gt;&lt;/a&gt; are pinned. See &lt;a href=&#34;https://nixos.wiki/wiki/FAQ/Pinning_Nixpkgs&#34;&gt;&#34;FAQ/Pinning Nixpkgs&#34; wiki&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Pinning is done using &lt;a href=&#34;https://github.com/nmattia/niv&#34;&gt;&lt;code&gt;niv&lt;/code&gt;&lt;/a&gt;. Updating them is simple:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix-shell -p niv --run &#34;niv update nixpkgs&#34;&#xA;nix-shell -p niv --run &#34;niv update haskellNix&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Check out the &lt;code&gt;nix/sources.json&lt;/code&gt; file, you might need to switch the branch.&lt;/p&gt; &#xA;&lt;h3&gt;Updating Plutus&lt;/h3&gt; &#xA;&lt;p&gt;Are you a contributor and would you like to bump the Plutus version we are depending upon? Because we are &lt;em&gt;not&lt;/em&gt; pinning plutus with nix, updating it&#39;s a little more manual but it&#39;s straightforward.&lt;/p&gt; &#xA;&lt;p&gt;Our &lt;code&gt;cabal.project&lt;/code&gt; file is a copy of the homonym file from &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps/raw/main/cabal.project&#34;&gt;plutus-apps&lt;/a&gt;, with the addition of &lt;code&gt;plutus-apps&lt;/code&gt; themselves in there and a different list of packages to build.&lt;/p&gt; &#xA;&lt;p&gt;In order to bump plutus, you must:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Select the tag you want to update &lt;em&gt;to&lt;/em&gt; from &lt;code&gt;plutus-apps&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Copy the &lt;code&gt;cabal.project&lt;/code&gt; from there&lt;/li&gt; &#xA; &lt;li&gt;Modify the &lt;code&gt;packages:&lt;/code&gt; section to build our packages: &lt;pre&gt;&lt;code&gt;packages:&#xA;  cooked-validators&#xA;  examples&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the relevant setting for linking with libsodium: &lt;pre&gt;&lt;code&gt;package cardano-crypto-praos&#xA;  flags: -external-libsodium-vrf&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;plutus-apps&lt;/code&gt; dependency in there: &lt;pre&gt;&lt;code&gt;source-repository-package&#xA;  type: git&#xA;  location: https://github.com/input-output-hk/plutus-apps.git&#xA;  tag: v2021-11-05 -- change the tag to whatever tag you need.&#xA;  subdir:&#xA;    freer-extras&#xA;    playground-common&#xA;    plutus-chain-index&#xA;    plutus-chain-index-core&#xA;    plutus-contract&#xA;    plutus-pab&#xA;    plutus-ledger&#xA;    plutus-use-cases&#xA;    quickcheck-dynamic&#xA;&lt;/code&gt;&lt;/pre&gt; In this case, we&#39;re running with &lt;code&gt;plutus-apps&lt;/code&gt; at tag &lt;code&gt;v2021-11-05&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build all&lt;/code&gt; and grab a coffee, this will take a while.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Pre-commit Hooks and CI&lt;/h3&gt; &#xA;&lt;p&gt;Our ci runs &lt;code&gt;ormolu&lt;/code&gt;, &lt;code&gt;hlint&lt;/code&gt; and &lt;code&gt;cabal test&lt;/code&gt; for each of our subprojects. In order to help avoid CI failures due to formatting problems, we recommend that you install the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/plutus-libs/main/ci/ormolu-pre-commit-hook.sh&#34;&gt;pre-commit hook for running ormolu&lt;/a&gt;. To do so, simply copy (or link) the script into &lt;code&gt;.git/hooks/pre-commit&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>