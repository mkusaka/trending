<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-05T01:30:20Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>obsidiansystems/hydra-drep-incentives-poc</title>
    <updated>2024-06-05T01:30:20Z</updated>
    <id>tag:github.com,2024-06-05:/obsidiansystems/hydra-drep-incentives-poc</id>
    <link href="https://github.com/obsidiansystems/hydra-drep-incentives-poc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An open-source experiment exploring the use of Hydra to distribute DRep Incentives&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hydra DRep Incentives POC&lt;/h1&gt; &#xA;&lt;p&gt;What follows is the initial phase of an experimental proof-of-concept (POC) to explore whether &lt;a href=&#34;https://github.com/input-output-hk/hydra&#34;&gt;Hydra&lt;/a&gt; payment channels could be utilized to distribute voting incentives for delegated representatives (DReps) participating in Cardanoâ€™s developing &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/tree/master/CIP-1694&#34;&gt;decentralized governance system&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Our findings suggest that using Hydra here could be feasible, practical, and - in the absence of final decisions about incentive models - could help reduce overall uncertainty by acting as a well-understood open-source off-chain agreement between parties and system components in a variety of situations.&lt;/p&gt; &#xA;&lt;h2&gt;The POC&lt;/h2&gt; &#xA;&lt;p&gt;Currently the POC provides quite a few features to enable testing of governance and the application of Hydra to DRep incentives&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically configure a sanchonet node&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Automatically run and synchronize a sanchonet node&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Create parties as needed&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Provide automated funding of voter addresses through the governance address&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Party addresses have stake keys, hydra keys, and are registered as DReps&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Allow creation of proposals in scenarios where they have already been voted on (this requires 50000 tADA)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Synthesize and consume the governance state to determine voters and automate pay-out&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Tested Hydra against Sanchonet both pre and post re-spin, on versions 0.16.0 and 0.17.0&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Track the cumulative transaction hashes during a run through of incentive payment detection&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Use a Hydra offline channel to run incentive payment channel mechanism on an L2&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Track the offline channel incentive payments in the L2 Head&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Move to online Hydra payment channel once &lt;a href=&#34;https://github.com/input-output-hk/hydra/issues/1462&#34;&gt;this issue&lt;/a&gt; is resolved&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;The Experimental Workflow&lt;/h3&gt; &#xA;&lt;p&gt;This POC web application creates a Sanchonet cardano node, then provides 3 voters and one governance address. The voters have been registered as DReps and their tADA will be automatically kept at the minimum amount (550000000) of Lovelace provided the governance address has funds. This application automatically updates and monitors the state of the chain, the balances of the governance and voters, and the Hydra network. Another important element the application monitors is the governance state on-chain.&lt;/p&gt; &#xA;&lt;p&gt;When the application is running and you have navigated to the UI page (by default &lt;a href=&#34;http://localhost:8000&#34;&gt;http://localhost:8000&lt;/a&gt;) you will be presented with:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The governance address (to be able to send tADA if you run low)&lt;/li&gt; &#xA; &lt;li&gt;A current governance proposal (if available) with the ability to view the URL encoded inside&lt;/li&gt; &#xA; &lt;li&gt;A way to create new proposals so that if one isn&#39;t available to vote on, you can immediately create one for testing (note this does take about 50000000000 Lovelace, and thus isn&#39;t automated to be conscious of those with limited test-net funds)&lt;/li&gt; &#xA; &lt;li&gt;The voters and their balances&lt;/li&gt; &#xA; &lt;li&gt;A log of transactions that have occurred during the session&lt;/li&gt; &#xA; &lt;li&gt;The current state of the Hydra payment channel that contains the governance address and the voters&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can then vote as any one of the voters, assuming they haven&#39;t voted already. Pressing the &#34;Vote&#34; button adjacent to any voter&#39;s name will cause a vote transaction to be built, signed, and submitted. After the transaction is confirmed, the vote will be reflected in the governance state, and when this has been detected, an amount of reward Lovelace will be sent to the voter responsible (12345678 Lovelace by default).&lt;/p&gt; &#xA;&lt;h4&gt;The governance address&lt;/h4&gt; &#xA;&lt;p&gt;This address is a representation of the governance body of cardano, the specifics of the incentive mechanism and fund source are still &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/raw/master/CIP-1694/README.md#drep-incentives&#34;&gt;being discussed&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;The voter addresses&lt;/h4&gt; &#xA;&lt;p&gt;Each voter in the UI is a registered DRep on the network, and is eligible to receive incentive payments for voting on proposals that are active&lt;/p&gt; &#xA;&lt;h4&gt;The Hydra payment channel&lt;/h4&gt; &#xA;&lt;p&gt;Here is where incentive payments are made, they are recorded in the channel, and displayed accordingly&lt;/p&gt; &#xA;&lt;h2&gt;How to Build &amp;amp; Run Locally&lt;/h2&gt; &#xA;&lt;p&gt;If you want deploy your application locally or test a production-oriented build you can build and deploy the app as described below.&lt;/p&gt; &#xA;&lt;p&gt;Build the application:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-build -A exe --no-out-link&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Copy the result to a new directory, add configuration, and run!&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;mkdir test-app&#xA;ln -s $(nix-build -A exe --no-out-link)/* test-app/&#xA;cp -r config test-app&#xA;(cd test-app &amp;amp;&amp;amp; ./backend)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;How Run in Development Mode&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ob run -v &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For now, you will require &lt;a href=&#34;https://github.com/obsidiansystems/obelisk&#34;&gt;obelisk&lt;/a&gt; to be able to run in development mode, and hack on the application.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Obelisk&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Install Nix&lt;/a&gt;. If you already have Nix installed, make sure you have version 2.0 or higher. To check your current version, run &lt;code&gt;nix-env --version&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Set up nix caches &#xA;  &lt;ol&gt; &#xA;   &lt;li&gt;If you are running NixOS, add this to &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;: &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;nix.binaryCaches = [ &#34;https://nixcache.reflex-frp.org&#34; ];&#xA;nix.binaryCachePublicKeys = [ &#34;ryantrinkle.com-1:JJiAKaRv9mWgpVAz8dwewnZe0AzzEAzPkagE9SP5NWI=&#34; ];&#xA;&lt;/code&gt;&lt;/pre&gt; and rebuild your NixOS configuration (e.g. &lt;code&gt;sudo nixos-rebuild switch&lt;/code&gt;).&lt;/li&gt; &#xA;   &lt;li&gt;If you are using another operating system or Linux distribution, ensure that these lines are present in your Nix configuration file (&lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; on most systems; &lt;a href=&#34;https://nixos.org/nix/manual/#sec-conf-file&#34;&gt;see full list&lt;/a&gt;): &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;binary-caches = https://cache.nixos.org https://nixcache.reflex-frp.org&#xA;binary-cache-public-keys = cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY= ryantrinkle.com-1:JJiAKaRv9mWgpVAz8dwewnZe0AzzEAzPkagE9SP5NWI=&#xA;binary-caches-parallel-connections = 40&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;If you&#39;re on a Linux distribution other than NixOS, enable sandboxing (see these &lt;a href=&#34;https://github.com/obsidiansystems/obelisk/issues/172#issuecomment-411507818&#34;&gt;issue 172&lt;/a&gt; or &lt;a href=&#34;https://github.com/obsidiansystems/obelisk/issues/6&#34;&gt;issue 6&lt;/a&gt; if you run into build problems) by adding the following: &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;sandbox = true&#xA;&lt;/code&gt;&lt;/pre&gt; then restart the nix daemon &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo systemctl restart nix-daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;     &lt;li&gt;If you&#39;re on MacOS, disable sandboxing (there are still some impure dependencies for now) by adding the following: &lt;pre&gt;&lt;code class=&#34;language-nix&#34;&gt;sandbox = false&#xA;&lt;/code&gt;&lt;/pre&gt; then restart the nix daemon &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sudo launchctl stop org.nixos.nix-daemon&#xA;sudo launchctl start org.nixos.nix-daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;/ol&gt; &lt;/li&gt; &#xA; &lt;li&gt;Install obelisk: &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -f https://github.com/obsidiansystems/obelisk/archive/master.tar.gz -iA command&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions and issue reports are encouraged and appreciated! Refer to the &lt;a href=&#34;https://raw.githubusercontent.com/obsidiansystems/hydra-drep-incentives-poc/master/CONTRIBUTING.md&#34;&gt;Contributing&lt;/a&gt; guide for information about getting started.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>channable/alfred-margaret</title>
    <updated>2024-06-05T01:30:20Z</updated>
    <id>tag:github.com,2024-06-05:/channable/alfred-margaret</id>
    <link href="https://github.com/channable/alfred-margaret" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Fast Aho-Corasick string searching&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Alfredâ€“Margaret&lt;/h1&gt; &#xA;&lt;p&gt;Alfredâ€“Margaret is a fast implementation of the Ahoâ€“Corasick string searching algorithm in Haskell. It powers many string-related operations in &lt;a href=&#34;https://www.channable.com/&#34;&gt;Channable&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The library is designed to work with the &lt;a href=&#34;https://github.com/haskell/text&#34;&gt;&lt;code&gt;text&lt;/code&gt;&lt;/a&gt; package. It matches directly on the internal UTF-16 representation of &lt;code&gt;Text&lt;/code&gt; for efficiency. See the &lt;a href=&#34;https://tech.channable.com/posts/2019-03-13-how-we-made-haskell-search-strings-as-fast-as-rust.html&#34;&gt;announcement blog post&lt;/a&gt; for a deeper dive into Ahoâ€“Corasick, and the optimizations that make this library fast.&lt;/p&gt; &#xA;&lt;p&gt;Alfredâ€“Margaret is named after Alfred Aho and Margaret Corasick.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;Running time to count all matches, in a real-world data set, comparing &lt;a href=&#34;https://github.com/hankcs/AhoCorasickDoubleArrayTrie/tree/v1.2.0&#34;&gt;a Java implementation&lt;/a&gt; and &lt;a href=&#34;https://github.com/BurntSushi/aho-corasick/tree/0.6.8&#34;&gt;a Rust implementation&lt;/a&gt; against Alfredâ€“Margaret, and against memcopy to establish a lower bound:&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img title=&#34;Graph that shows that Alfredâ€“Margaret is fast.&#34; src=&#34;https://raw.githubusercontent.com/channable/alfred-margaret/master/performance.png&#34; width=&#34;80%&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;For the full details of this benchmark, see &lt;a href=&#34;https://tech.channable.com/posts/2019-03-13-how-we-made-haskell-search-strings-as-fast-as-rust.html&#34;&gt;our announcement blog post&lt;/a&gt;, which includes more details about the data set, the benchmark setup, and a few things to keep in mind when interpreting this graph.&lt;/p&gt; &#xA;&lt;h3&gt;LLVM&lt;/h3&gt; &#xA;&lt;p&gt;If you are using LLVM instead of the GHC backend, make sure to compare different versions. Using LLVM 9 instead of LLVM 12 with GHC 8.10.7 made a significant dent in benchmark times. For more information, see &lt;a href=&#34;https://github.com/channable/alfred-margaret/issues/24&#34;&gt;this issue&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Check if a string contains one of the needles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;&#xA;import qualified Data.Text.AhoCorasick.Automaton as Aho&#xA;import qualified Data.Text.AhoCorasick.Searcher as Searcher&#xA;&#xA;searcher = Searcher.build Aho.CaseSensitive [&#34;tshirt&#34;, &#34;shirts&#34;, &#34;shorts&#34;]&#xA;&#xA;Searcher.containsAny searcher &#34;short tshirts&#34;&#xA;&amp;gt; True&#xA;&#xA;Searcher.containsAny searcher &#34;long shirt&#34;&#xA;&amp;gt; False&#xA;&#xA;Searcher.containsAny searcher &#34;Short TSHIRTS&#34;&#xA;&amp;gt; False&#xA;&#xA;searcher&#39; = Searcher.build Aho.IgnoreCase [&#34;tshirt&#34;, &#34;shirts&#34;, &#34;shorts&#34;]&#xA;&#xA;Searcher.containsAny searcher&#39; &#34;Short TSHIRTS&#34;&#xA;&amp;gt; True&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Sequentially replace many needles:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import Data.Text.AhoCorasick.Automaton (CaseSensitivity (..))&#xA;import qualified Data.Text.AhoCorasick.Replacer as Replacer&#xA;&#xA;replacer = Replacer.build CaseSensitive [(&#34;tshirt&#34;, &#34;banana&#34;), (&#34;shirt&#34;, &#34;pear&#34;)]&#xA;&#xA;Replacer.run replacer &#34;tshirts for sale&#34;&#xA;&amp;gt; &#34;bananas for sale&#34;&#xA;&#xA;Replacer.run replacer &#34;tshirts and shirts for sale&#34;&#xA;&amp;gt; &#34;bananas and pears for sale&#34;&#xA;&#xA;Replacer.run replacer &#34;sweatshirts and shirtshirts&#34;&#xA;&amp;gt; &#34;sweabananas and shirbananas&#34;&#xA;&#xA;Replacer.run replacer &#34;sweatshirts and shirttshirts&#34;&#xA;&amp;gt; &#34;sweabananas and pearbananas&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Get all matches, possibly overlapping:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;import qualified Data.Text.AhoCorasick.Automaton as Aho&#xA;&#xA;pairNeedleWithSelf text = (Aho.unpackUtf16 text, text)&#xA;automaton = Aho.build $ fmap pairNeedleWithSelf [&#34;tshirt&#34;, &#34;shirts&#34;, &#34;shorts&#34;]&#xA;allMatches = Aho.runText [] (\matches match -&amp;gt; Aho.Step (match : matches))&#xA;&#xA;allMatches automaton &#34;short tshirts&#34;&#xA;&amp;gt; [ Match {matchPos = CodeUnitIndex 13, matchValue = &#34;shirts&#34;}&#xA;&amp;gt; , Match {matchPos = CodeUnitIndex 12, matchValue = &#34;tshirt&#34;}&#xA;&amp;gt; ]&#xA;&#xA;allMatches automaton &#34;sweatshirts and shirtshirts&#34;&#xA;&amp;gt; [ Match {matchPos = CodeUnitIndex 27, matchValue = &#34;shirts&#34;}&#xA;&amp;gt; , Match {matchPos = CodeUnitIndex 26, matchValue = &#34;tshirt&#34;}&#xA;&amp;gt; , Match {matchPos = CodeUnitIndex 22, matchValue = &#34;shirts&#34;}&#xA;&amp;gt; , Match {matchPos = CodeUnitIndex 11, matchValue = &#34;shirts&#34;}&#xA;&amp;gt; , Match {matchPos = CodeUnitIndex 10, matchValue = &#34;tshirt&#34;}&#xA;&amp;gt; ]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Alfredâ€“Margaret is licensed under the 3-clause BSD license.&lt;/p&gt;</summary>
  </entry>
</feed>