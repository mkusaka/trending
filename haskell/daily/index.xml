<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-03T01:41:27Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fjvallarino/monomer</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/fjvallarino/monomer</id>
    <link href="https://github.com/fjvallarino/monomer" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An easy to use, cross platform, GUI library for writing Haskell applications.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Monomer&lt;/h1&gt; &#xA;&lt;p&gt;An easy to use, cross platform, GUI library for writing native Haskell applications.&lt;/p&gt; &#xA;&lt;p&gt;It provides a framework similar to the Elm Architecture, allowing the creation of GUIs using an extensible set of widgets with pure Haskell.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshot&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/assets/images/monomer-readme.png&#34; alt=&#34;Project&#39;s screenshot&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Objectives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Be easy to learn and use.&lt;/li&gt; &#xA; &lt;li&gt;Be extensible with custom widgets.&lt;/li&gt; &#xA; &lt;li&gt;Run on Windows, Linux and macOS.&lt;/li&gt; &#xA; &lt;li&gt;Have good documentation.&lt;/li&gt; &#xA; &lt;li&gt;Have good examples.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;These are not objectives for this project&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have a native look and feel.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Why would you want to use this library?&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You want to write your application in Haskell.&lt;/li&gt; &#xA; &lt;li&gt;You want to write a native, not web based, application.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;p&gt;You can read how to setup your environment &lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/00-setup.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Tutorials&lt;/h3&gt; &#xA;&lt;p&gt;Introductory tutorials are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/01-basics.md&#34;&gt;01 - Basics&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/02-styling.md&#34;&gt;02 - Styling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/03-life-cycle.md&#34;&gt;03 - Life cycle&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/04-tasks.md&#34;&gt;04 - Tasks&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/05-producers.md&#34;&gt;05 - Producers&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/06-composite.md&#34;&gt;06 - Composite&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/07-custom-widgets.md&#34;&gt;07 - Custom widgets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/tutorials/08-themes.md&#34;&gt;08 - Themes&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Examples&lt;/h3&gt; &#xA;&lt;p&gt;Beyond the tutorials, a few &lt;em&gt;real world like&lt;/em&gt; examples are available:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/examples/01-todo.md&#34;&gt;Todo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/examples/02-books.md&#34;&gt;Books&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/examples/03-ticker.md&#34;&gt;Ticker&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/examples/04-generative.md&#34;&gt;Generative&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/examples/05-opengl.md&#34;&gt;Custom OpenGL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Haddock&lt;/h3&gt; &#xA;&lt;p&gt;You can read the source code&#39;s documentation &lt;a href=&#34;https://hackage.haskell.org/package/monomer&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Design decisions&lt;/h3&gt; &#xA;&lt;p&gt;In case you wonder why some choices were made, you can read &lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/docs/design-decisions.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Stability and performance.&lt;/li&gt; &#xA; &lt;li&gt;Mobile support.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;PRs are welcome!&lt;/p&gt; &#xA;&lt;p&gt;If possible, keep them small and focused. If you are planning on making a large change, please submit an issue first so we can agree on a solution.&lt;/p&gt; &#xA;&lt;h2&gt;Questions?&lt;/h2&gt; &#xA;&lt;p&gt;If you are not sure how something works or you have a usage question, feel free to open an issue!&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This library is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/fjvallarino/monomer/main/LICENSE&#34;&gt;BSD-3 license&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Fonts used in the examples:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://fonts.google.com/specimen/Roboto&#34;&gt;Roboto&lt;/a&gt;, licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache license&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://remixicon.com&#34;&gt;Remix Icon&lt;/a&gt;, licensed under the &lt;a href=&#34;http://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache license&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Acknowledgments&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/ghislaineguerin&#34;&gt;Ghislaine Guerin&lt;/a&gt; for UX advice.&lt;/li&gt; &#xA; &lt;li&gt;Thanks to &lt;a href=&#34;https://github.com/memononen&#34;&gt;Mikko Mononen&lt;/a&gt; for the amazing &lt;a href=&#34;https://github.com/memononen/nanovg&#34;&gt;nanovg&lt;/a&gt; library.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>hadolint/hadolint</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/hadolint/hadolint</id>
    <link href="https://github.com/hadolint/hadolint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dockerfile linter, validate inline bash, written in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell Dockerfile Linter&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hadolint/hadolint/actions&#34;&gt;&lt;img src=&#34;https://github.com/hadolint/hadolint/workflows/Haskell%20Tests/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://tldrlegal.com/l/gpl-3.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPL--3-blue.svg?sanitize=true&#34; alt=&#34;GPL-3 licensed&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/hadolint/hadolint.svg?sanitize=true&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/github/downloads/hadolint/hadolint/total.svg?sanitize=true&#34; alt=&#34;Github downloads&#34;&gt; &lt;img align=&#34;right&#34; alt=&#34;pipecat&#34; width=&#34;150&#34; src=&#34;https://hadolint.github.io/hadolint/img/cat_container.png&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A smarter Dockerfile linter that helps you build &lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices&#34;&gt;best practice&lt;/a&gt; Docker images. The linter parses the Dockerfile into an AST and performs rules on top of the AST. It stands on the shoulders of &lt;a href=&#34;https://github.com/koalaman/shellcheck&#34;&gt;ShellCheck&lt;/a&gt; to lint the Bash code inside &lt;code&gt;RUN&lt;/code&gt; instructions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;span&gt;üåê&lt;/span&gt; &lt;strong&gt;Check the online version on hadolint.github.io/hadolint&lt;/strong&gt;&lt;/a&gt; &lt;a href=&#34;https://hadolint.github.io/hadolint&#34;&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/screenshot.png&#34; alt=&#34;Screenshot&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;You can run &lt;code&gt;hadolint&lt;/code&gt; locally to lint your Dockerfile.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint &amp;lt;Dockerfile&amp;gt;&#xA;hadolint --ignore DL3003 --ignore DL3006 &amp;lt;Dockerfile&amp;gt; # exclude specific rules&#xA;hadolint --trusted-registry my-company.com:500 &amp;lt;Dockerfile&amp;gt; # Warn when using untrusted FROM images&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Docker comes to the rescue, providing an easy way how to run &lt;code&gt;hadolint&lt;/code&gt; on most platforms. Just pipe your &lt;code&gt;Dockerfile&lt;/code&gt; to &lt;code&gt;docker run&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using &lt;a href=&#34;https://podman.io/&#34;&gt;Podman&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;podman run --rm -i docker.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;podman run --rm -i ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or using Windows PowerShell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;cat .\Dockerfile | docker run --rm -i hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;You can download prebuilt binaries for OSX, Windows and Linux from the latest &lt;a href=&#34;https://github.com/hadolint/hadolint/releases/latest&#34;&gt;release page&lt;/a&gt;. However, if this does not work for you, please fall back to container (Docker), &lt;code&gt;brew&lt;/code&gt; or source installation.&lt;/p&gt; &#xA;&lt;p&gt;On OSX, you can use &lt;a href=&#34;https://brew.sh/&#34;&gt;brew&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows, you can use &lt;a href=&#34;https://github.com/lukesampson/scoop&#34;&gt;scoop&lt;/a&gt; to install &lt;code&gt;hadolint&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-batch&#34;&gt;scoop install hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On distributions that have &lt;code&gt;nix&lt;/code&gt; installed, you can use the &lt;code&gt;hadolint&lt;/code&gt; package to run ad-hoc shells or permanently install &lt;code&gt;hadolint&lt;/code&gt; into your environment.&lt;/p&gt; &#xA;&lt;p&gt;As mentioned earlier, &lt;code&gt;hadolint&lt;/code&gt; is available as a container image:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you need a container with shell access, use the Debian or Alpine variants:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker pull hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull hadolint/hadolint:latest-alpine&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-debian&#xA;# OR&#xA;docker pull ghcr.io/hadolint/hadolint:latest-alpine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also build &lt;code&gt;hadolint&lt;/code&gt; locally. You need &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;Haskell&lt;/a&gt; and the &lt;a href=&#34;http://docs.haskellstack.org/en/stable/install_and_upgrade.html&#34;&gt;stack&lt;/a&gt; build tool to build the binary.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/hadolint/hadolint \&#xA;&amp;amp;&amp;amp; cd hadolint \&#xA;&amp;amp;&amp;amp; stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want the &lt;a href=&#34;https://github.com/michaellzc/vscode-hadolint&#34;&gt;VS Code Hadolint&lt;/a&gt; extension to use Hadolint in a container, you can use the following &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/691#issuecomment-932116329&#34;&gt;wrapper script&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/bash&#xA;dockerfile=&#34;$1&#34;&#xA;shift&#xA;docker run --rm -i hadolint/hadolint hadolint &#34;$@&#34; - &amp;lt; &#34;$dockerfile&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;hadolint - Dockerfile Linter written in Haskell&#xA;&#xA;Usage: hadolint [-v|--version] [-c|--config FILENAME] [DOCKERFILE...]&#xA;                [--file-path-in-report FILEPATHINREPORT] [--no-fail]&#xA;                [--no-color] [-V|--verbose] [-f|--format ARG] [--error RULECODE]&#xA;                [--warning RULECODE] [--info RULECODE] [--style RULECODE]&#xA;                [--ignore RULECODE]&#xA;                [--trusted-registry REGISTRY (e.g. docker.io)]&#xA;                [--require-label LABELSCHEMA (e.g. maintainer:text)]&#xA;                [--strict-labels] [--disable-ignore-pragma]&#xA;                [-t|--failure-threshold THRESHOLD]&#xA;  Lint Dockerfile for errors and best practices&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;  -v,--version             Show version&#xA;  -c,--config FILENAME     Path to the configuration file&#xA;  --file-path-in-report FILEPATHINREPORT&#xA;                           The file path referenced in the generated report.&#xA;                           This only applies for the &#39;checkstyle&#39; format and is&#xA;                           useful when running Hadolint with Docker to set the&#xA;                           correct file path.&#xA;  --no-fail                Don&#39;t exit with a failure status code when any rule&#xA;                           is violated&#xA;  --no-color               Don&#39;t colorize output&#xA;  -V,--verbose             Enables verbose logging of hadolint&#39;s output to&#xA;                           stderr&#xA;  -f,--format ARG          The output format for the results [tty | json |&#xA;                           checkstyle | codeclimate | gitlab_codeclimate | gnu |&#xA;                           codacy | sonarqube | sarif] (default: tty)&#xA;  --error RULECODE         Make the rule `RULECODE` have the level `error`&#xA;  --warning RULECODE       Make the rule `RULECODE` have the level `warning`&#xA;  --info RULECODE          Make the rule `RULECODE` have the level `info`&#xA;  --style RULECODE         Make the rule `RULECODE` have the level `style`&#xA;  --ignore RULECODE        A rule to ignore. If present, the ignore list in the&#xA;                           config file is ignored&#xA;  --trusted-registry REGISTRY (e.g. docker.io)&#xA;                           A docker registry to allow to appear in FROM&#xA;                           instructions&#xA;  --require-label LABELSCHEMA (e.g. maintainer:text)&#xA;                           The option --require-label=label:format makes&#xA;                           Hadolint check that the label `label` conforms to&#xA;                           format requirement `format`&#xA;  --strict-labels          Do not permit labels other than specified in&#xA;                           `label-schema`&#xA;  --disable-ignore-pragma  Disable inline ignore pragmas `# hadolint&#xA;                           ignore=DLxxxx`&#xA;  -t,--failure-threshold THRESHOLD&#xA;                           Exit with failure code only when rules with a&#xA;                           severity equal to or above THRESHOLD are violated.&#xA;                           Accepted values: [error | warning | info | style |&#xA;                           ignore | none] (default: info)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Configure&lt;/h2&gt; &#xA;&lt;p&gt;Configuration files can be used globally or per project. Hadolint looks for configuration files in the following locations or their platform specific equivalents in this order and uses the first one exclusively:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;$PWD/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$XDG_CONFIG_HOME/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.config/hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint/hadolint.yaml or $HOME/hadolint/config.yaml&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;$HOME/.hadolint.yaml&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In windows, the &lt;code&gt;%LOCALAPPDATA%&lt;/code&gt; environment variable is used instead of &lt;code&gt;XDG_CONFIG_HOME&lt;/code&gt;. Config files can have either &lt;code&gt;yaml&lt;/code&gt; or &lt;code&gt;yml&lt;/code&gt; extensions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; full &lt;code&gt;yaml&lt;/code&gt; config file schema&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: string               # name of threshold level (error | warning | info | style | ignore | none)&#xA;format: string                          # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy)&#xA;ignored: [string]                       # list of rules&#xA;label-schema:                           # See Linting Labels below for specific label-schema details&#xA;  author: string                        # Your name&#xA;  contact: string                       # email address&#xA;  created: timestamp                    # rfc3339 datetime&#xA;  version: string                       # semver&#xA;  documentation: string                 # url&#xA;  git-revision: string                  # hash&#xA;  license: string                       # spdx&#xA;no-color: boolean                       # true | false&#xA;no-fail: boolean                        # true | false&#xA;override:&#xA;  error: [string]                       # list of rules&#xA;  warning: [string]                     # list of rules&#xA;  info: [string]                        # list of rules&#xA;  style: [string]                       # list of rules&#xA;strict-labels: boolean                  # true | false&#xA;disable-ignore-pragma: boolean          # true | false&#xA;trustedRegistries: string | [string]    # registry or list of registries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;hadolint&lt;/code&gt; supports specifying the ignored rules using a configuration file. The configuration file should be in &lt;code&gt;yaml&lt;/code&gt; format. This is one valid configuration file as an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, &lt;code&gt;hadolint&lt;/code&gt; can warn you when images from untrusted repositories are being used in Dockerfiles, you can append the &lt;code&gt;trustedRegistries&lt;/code&gt; keys to the configuration file, as shown below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;ignored:&#xA;  - DL3000&#xA;  - SC1010&#xA;&#xA;trustedRegistries:&#xA;  - docker.io&#xA;  - my-company.com:5000&#xA;  - &#34;*.gcr.io&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to override the severity of specific rules, you can do that too:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;override:&#xA;  error:&#xA;    - DL3001&#xA;    - DL3002&#xA;  warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;  style:&#xA;    - DL3015&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;failure-threshold&lt;/code&gt; Exit with failure code only when rules with a severity above THRESHOLD are violated (Available in v2.6.0+)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;failure-threshold: info&#xA;warning:&#xA;    - DL3042&#xA;    - DL3033&#xA;  info:&#xA;    - DL3032&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Additionally, you can pass a custom configuration file in the command line with the &lt;code&gt;--config&lt;/code&gt; option&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --config /path/to/config.yaml Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To pass a custom configuration file (using relative or absolute path) to a container, use the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml hadolint/hadolint &amp;lt; Dockerfile&#xA;# OR&#xA;docker run --rm -i -v /your/path/to/hadolint.yaml:/.config/hadolint.yaml ghcr.io/hadolint/hadolint &amp;lt; Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In addition to config files, Hadolint can be configured with environment variables.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;NO_COLOR=1                               # Set or unset. See https://no-color.org&#xA;HADOLINT_NOFAIL=1                        # Truthy value e.g. 1, true or yes&#xA;HADOLINT_VERBOSE=1                       # Truthy value e.g. 1, true or yes&#xA;HADOLINT_FORMAT=json                     # Output format (tty | json | checkstyle | codeclimate | gitlab_codeclimate | gnu | codacy | sarif )&#xA;HADOLINT_FAILURE_THRESHOLD=info          # threshold level (error | warning | info | style | ignore | none)&#xA;HADOLINT_OVERRIDE_ERROR=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_WARNING=DL3010,DL3020  # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_INFO=DL3010,DL3020     # comma separated list of rule codes&#xA;HADOLINT_OVERRIDE_STYLE=DL3010,DL3020    # comma separated list of rule codes&#xA;HADOLINT_IGNORE=DL3010,DL3020            # comma separated list of rule codes&#xA;HADOLINT_STRICT_LABELS=1                 # Truthy value e.g. 1, true or yes&#xA;HADOLINT_DISABLE_IGNORE_PRAGMA=1         # Truthy value e.g. 1, true or yes&#xA;HADOLINT_TRUSTED_REGISTRIES=docker.io    # comma separated list of registry urls&#xA;HADOLINT_REQUIRE_LABELS=maintainer:text  # comma separated list of label schema items&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Non-Posix Shells&lt;/h2&gt; &#xA;&lt;p&gt;When using base images with non-posix shells as default (e.g. Windows based images) a special pragma &lt;code&gt;hadolint shell&lt;/code&gt; can specify which shell the base image uses, so that Hadolint can automatically ignore all shell-specific rules.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Dockerfile&#34;&gt;FROM mcr.microsoft.com/windows/servercore:ltsc2022&#xA;# hadolint shell=powershell&#xA;RUN Get-Process notepad | Stop-Process&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Inline ignores&lt;/h2&gt; &#xA;&lt;p&gt;It is also possible to ignore rules by adding a special comment directly above the Dockerfile statement for which you want to make an exception for. Such comments look like &lt;code&gt;# hadolint ignore=DL3001,SC1081&lt;/code&gt;. For example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;# hadolint ignore=DL3006&#xA;FROM ubuntu&#xA;&#xA;# hadolint ignore=DL3003,SC1035&#xA;RUN cd /tmp &amp;amp;&amp;amp; echo &#34;hello!&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The comment &#34;inline ignores&#34; applies only to the statement following it.&lt;/p&gt; &#xA;&lt;h2&gt;Linting Labels&lt;/h2&gt; &#xA;&lt;p&gt;Hadolint is able to check if specific labels are present and conform to a predefined label schema. First, a label schema must be defined either via the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --require-label author:text --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or via the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  author: text&#xA;  contact: email&#xA;  created: rfc3339&#xA;  version: semver&#xA;  documentation: url&#xA;  git-revision: hash&#xA;  license: spdx&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The value of a label can be either of &lt;code&gt;text&lt;/code&gt;, &lt;code&gt;url&lt;/code&gt;, &lt;code&gt;semver&lt;/code&gt;, &lt;code&gt;hash&lt;/code&gt; or &lt;code&gt;rfc3339&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Schema&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;text&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Anything&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;rfc3339&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A time, formatted according to &lt;a href=&#34;https://www.ietf.org/rfc/rfc3339.txt&#34;&gt;RFC 3339&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;semver&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A &lt;a href=&#34;https://semver.org/&#34;&gt;semantic version&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;url&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;A URI as described in &lt;a href=&#34;https://www.ietf.org/rfc/rfc3986.txt&#34;&gt;RFC 3986&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;hash&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either a short or a long &lt;a href=&#34;https://git-scm.com/book/en/v2/Git-Tools-Revision-Selection&#34;&gt;Git hash&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;spdx&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An &lt;a href=&#34;https://spdx.org/licenses/&#34;&gt;SPDX license identifier&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;email&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;An email address conforming to &lt;a href=&#34;https://www.ietf.org/rfc/rfc5322.txt&#34;&gt;RFC 5322&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;By default, Hadolint ignores any label that is not specified in the label schema. To warn against such additional labels, turn on strict labels, using the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hadolint --strict-labels --require-label version:semver Dockerfile&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or the config file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;strict-labels: true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When strict labels is enabled, but no label schema is specified, &lt;code&gt;hadolint&lt;/code&gt; will warn if any label is present.&lt;/p&gt; &#xA;&lt;h3&gt;Note on dealing with variables in labels&lt;/h3&gt; &#xA;&lt;p&gt;It is a common pattern to fill the value of a label not statically, but rather dynamically at build time by using a variable:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-dockerfile&#34;&gt;FROM debian:buster&#xA;ARG VERSION=&#34;du-jour&#34;&#xA;LABEL version=&#34;${VERSION}&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To allow this, the label schema must specify &lt;code&gt;text&lt;/code&gt; as value for that label:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;label-schema:&#xA;  version: text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Integrations&lt;/h2&gt; &#xA;&lt;p&gt;To get most of &lt;code&gt;hadolint&lt;/code&gt;, it is useful to integrate it as a check in your CI or into your editor, or as a pre-commit hook, to lint your &lt;code&gt;Dockerfile&lt;/code&gt; as you write it. See our &lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md&#34;&gt;Integration&lt;/a&gt; docs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#code-review&#34;&gt;Code Review Platform Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#continuous-integration&#34;&gt;Continuous Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#editors&#34;&gt;Editor Integrations&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hadolint/hadolint/master/docs/INTEGRATION.md#version-control&#34;&gt;Version Control Integrations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Rules&lt;/h2&gt; &#xA;&lt;p&gt;An incomplete list of implemented rules. Click on the error code to get more detailed information.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the prefix &lt;code&gt;DL&lt;/code&gt; are from &lt;code&gt;hadolint&lt;/code&gt;. Have a look at &lt;code&gt;Rules.hs&lt;/code&gt; to find the implementation of the rules.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Rules with the &lt;code&gt;SC&lt;/code&gt; prefix are from &lt;strong&gt;ShellCheck&lt;/strong&gt; (only the most common rules are listed, there are dozens more).&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please &lt;a href=&#34;https://github.com/hadolint/hadolint/issues/new&#34;&gt;create an issue&lt;/a&gt; if you have an idea for a good rule.&lt;/p&gt; &#xA;&lt;!--lint disable maximum-line-length--&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Rule&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Default Severity&lt;/th&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL1001&#34;&gt;DL1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Please refrain from using inline ignore pragmas &lt;code&gt;# hadolint ignore=DLxxxx&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3000&#34;&gt;DL3000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use absolute WORKDIR.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3001&#34;&gt;DL3001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For some bash commands it makes no sense running them in a Docker container like ssh, vim, shutdown, service, ps, free, top, kill, mount, ifconfig.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3002&#34;&gt;DL3002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Last user should not be root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3003&#34;&gt;DL3003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use WORKDIR to switch to a directory.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3004&#34;&gt;DL3004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use sudo as it leads to unpredictable behavior. Use a tool like gosu to enforce root.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3005&#34;&gt;DL3005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use apt-get dist-upgrade.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3006&#34;&gt;DL3006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Always tag the version of an image explicitly.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3007&#34;&gt;DL3007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Using latest is prone to errors if the image will ever update. Pin the version explicitly to a release tag.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3008&#34;&gt;DL3008&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apt-get install.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3009&#34;&gt;DL3009&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Delete the apt-get lists after installing something.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3010&#34;&gt;DL3010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use ADD for extracting archives into an image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3011&#34;&gt;DL3011&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Valid UNIX ports range from 0 to 65535.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3012&#34;&gt;DL3012&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;HEALTHCHECK&lt;/code&gt; instructions.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3013&#34;&gt;DL3013&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in pip.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3014&#34;&gt;DL3014&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3015&#34;&gt;DL3015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid additional packages by specifying --no-install-recommends.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3016&#34;&gt;DL3016&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in &lt;code&gt;npm&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3018&#34;&gt;DL3018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in apk add. Instead of &lt;code&gt;apk add &amp;lt;package&amp;gt;&lt;/code&gt; use &lt;code&gt;apk add &amp;lt;package&amp;gt;=&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3019&#34;&gt;DL3019&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;--no-cache&lt;/code&gt; switch to avoid the need to use &lt;code&gt;--update&lt;/code&gt; and remove &lt;code&gt;/var/cache/apk/*&lt;/code&gt; when done installing packages.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3020&#34;&gt;DL3020&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;COPY&lt;/code&gt; instead of &lt;code&gt;ADD&lt;/code&gt; for files and folders.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3021&#34;&gt;DL3021&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; with more than 2 arguments requires the last argument to end with &lt;code&gt;/&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3022&#34;&gt;DL3022&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; should reference a previously defined &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3023&#34;&gt;DL3023&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY --from&lt;/code&gt; cannot reference its own &lt;code&gt;FROM&lt;/code&gt; alias&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3024&#34;&gt;DL3024&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;FROM&lt;/code&gt; aliases (stage names) must be unique&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3025&#34;&gt;DL3025&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use arguments JSON notation for CMD and ENTRYPOINT arguments&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3026&#34;&gt;DL3026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use only an allowed registry in the FROM image&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3027&#34;&gt;DL3027&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;apt&lt;/code&gt; as it is meant to be a end-user tool, use &lt;code&gt;apt-get&lt;/code&gt; or &lt;code&gt;apt-cache&lt;/code&gt; instead&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3028&#34;&gt;DL3028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Pin versions in gem install. Instead of &lt;code&gt;gem install &amp;lt;gem&amp;gt;&lt;/code&gt; use &lt;code&gt;gem install &amp;lt;gem&amp;gt;:&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3029&#34;&gt;DL3029&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use --platform flag with FROM.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3030&#34;&gt;DL3030&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;yum install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3032&#34;&gt;DL3032&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yum clean all&lt;/code&gt; missing after yum command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3033&#34;&gt;DL3033&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;yum install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3034&#34;&gt;DL3034&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Non-interactive switch missing from &lt;code&gt;zypper&lt;/code&gt; command: &lt;code&gt;zypper install -y&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3035&#34;&gt;DL3035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not use &lt;code&gt;zypper dist-upgrade&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3036&#34;&gt;DL3036&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;zypper clean&lt;/code&gt; missing after zypper use.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3037&#34;&gt;DL3037&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;zypper install -y &amp;lt;package&amp;gt;[=]&amp;lt;version&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3038&#34;&gt;DL3038&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use the &lt;code&gt;-y&lt;/code&gt; switch to avoid manual input &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3040&#34;&gt;DL3040&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;dnf clean all&lt;/code&gt; missing after dnf command.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3041&#34;&gt;DL3041&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Specify version with &lt;code&gt;dnf install -y &amp;lt;package&amp;gt;-&amp;lt;version&amp;gt;&lt;/code&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3042&#34;&gt;DL3042&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Avoid cache directory with &lt;code&gt;pip install --no-cache-dir &amp;lt;package&amp;gt;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3043&#34;&gt;DL3043&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;ONBUILD&lt;/code&gt;, &lt;code&gt;FROM&lt;/code&gt; or &lt;code&gt;MAINTAINER&lt;/code&gt; triggered from within &lt;code&gt;ONBUILD&lt;/code&gt; instruction.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3044&#34;&gt;DL3044&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Do not refer to an environment variable within the same &lt;code&gt;ENV&lt;/code&gt; statement where it is defined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3045&#34;&gt;DL3045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;COPY&lt;/code&gt; to a relative destination without &lt;code&gt;WORKDIR&lt;/code&gt; set.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3046&#34;&gt;DL3046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;useradd&lt;/code&gt; without flag &lt;code&gt;-l&lt;/code&gt; and high UID will result in excessively large Image.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3047&#34;&gt;DL3047&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;wget&lt;/code&gt; without flag &lt;code&gt;--progress&lt;/code&gt; will result in excessively bloated build logs when downloading larger files.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3048&#34;&gt;DL3048&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Style&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid Label Key&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3049&#34;&gt;DL3049&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3050&#34;&gt;DL3050&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Superfluous label(s) present.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3051&#34;&gt;DL3051&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is empty.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3052&#34;&gt;DL3052&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid URL.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3053&#34;&gt;DL3053&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid time format - must be conform to RFC3339.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3054&#34;&gt;DL3054&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid SPDX license identifier.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3055&#34;&gt;DL3055&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid git hash.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3056&#34;&gt;DL3056&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; does not conform to semantic versioning.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3057&#34;&gt;DL3057&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ignore&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;HEALTHCHECK&lt;/code&gt; instruction missing.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3058&#34;&gt;DL3058&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Label &lt;code&gt;&amp;lt;label&amp;gt;&lt;/code&gt; is not a valid email format - must be conform to RFC5322.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3059&#34;&gt;DL3059&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple consecutive &lt;code&gt;RUN&lt;/code&gt; instructions. Consider consolidation.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3060&#34;&gt;DL3060&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Info&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;yarn cache clean&lt;/code&gt; missing after &lt;code&gt;yarn install&lt;/code&gt; was run.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL3061&#34;&gt;DL3061&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Invalid instruction order. Dockerfile must begin with &lt;code&gt;FROM&lt;/code&gt;, &lt;code&gt;ARG&lt;/code&gt; or comment.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4000&#34;&gt;DL4000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;MAINTAINER is deprecated.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4001&#34;&gt;DL4001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Either use Wget or Curl but not both.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4003&#34;&gt;DL4003&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;CMD&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4004&#34;&gt;DL4004&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Error&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Multiple &lt;code&gt;ENTRYPOINT&lt;/code&gt; instructions found.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4005&#34;&gt;DL4005&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;SHELL&lt;/code&gt; to change the default shell.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/hadolint/hadolint/wiki/DL4006&#34;&gt;DL4006&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Warning&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Set the &lt;code&gt;SHELL&lt;/code&gt; option -o pipefail before &lt;code&gt;RUN&lt;/code&gt; with a pipe in it&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1000&#34;&gt;SC1000&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;$&lt;/code&gt; is not used specially and should therefore be escaped.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1001&#34;&gt;SC1001&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;\c&lt;/code&gt; will be a regular &lt;code&gt;&#39;c&#39;&lt;/code&gt; in this context.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1007&#34;&gt;SC1007&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Remove space after &lt;code&gt;=&lt;/code&gt; if trying to assign a value (or for empty string, use &lt;code&gt;var=&#39;&#39; ...&lt;/code&gt;).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1010&#34;&gt;SC1010&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use semicolon or linefeed before &lt;code&gt;done&lt;/code&gt; (or quote to make it literal).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1018&#34;&gt;SC1018&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is a unicode non-breaking space. Delete it and retype as space.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1035&#34;&gt;SC1035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space here&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1045&#34;&gt;SC1045&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;It&#39;s not &lt;code&gt;foo &amp;amp;; bar&lt;/code&gt;, just &lt;code&gt;foo &amp;amp; bar&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1065&#34;&gt;SC1065&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Trying to declare parameters? Don&#39;t. Use &lt;code&gt;()&lt;/code&gt; and refer to params as &lt;code&gt;$1&lt;/code&gt;, &lt;code&gt;$2&lt;/code&gt; etc.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1066&#34;&gt;SC1066&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use $ on the left side of assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1068&#34;&gt;SC1068&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t put spaces around the &lt;code&gt;=&lt;/code&gt; in assignments.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1077&#34;&gt;SC1077&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;For command expansion, the tick should slant left (` vs ¬¥).&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1078&#34;&gt;SC1078&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Did you forget to close this double-quoted string?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1079&#34;&gt;SC1079&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This is actually an end quote, but due to next char, it looks suspect.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1081&#34;&gt;SC1081&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Scripts are case sensitive. Use &lt;code&gt;if&lt;/code&gt;, not &lt;code&gt;If&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1083&#34;&gt;SC1083&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This &lt;code&gt;{/}&lt;/code&gt; is literal. Check expression (missing &lt;code&gt;;/\n&lt;/code&gt;?) or quote it.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1086&#34;&gt;SC1086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Don&#39;t use &lt;code&gt;$&lt;/code&gt; on the iterator name in for loops.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1087&#34;&gt;SC1087&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Braces are required when expanding arrays, as in &lt;code&gt;${array[idx]}&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1095&#34;&gt;SC1095&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space or linefeed between the function name and body.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1097&#34;&gt;SC1097&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Unexpected &lt;code&gt;==&lt;/code&gt;. For assignment, use &lt;code&gt;=&lt;/code&gt;. For comparison, use &lt;code&gt;[ .. ]&lt;/code&gt; or &lt;code&gt;[[ .. ]]&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1098&#34;&gt;SC1098&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote/escape special characters when using &lt;code&gt;eval&lt;/code&gt;, e.g. &lt;code&gt;eval &#34;a=(b)&#34;&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC1099&#34;&gt;SC1099&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;You need a space before the &lt;code&gt;#&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2002&#34;&gt;SC2002&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Useless cat. Consider &lt;code&gt;cmd &amp;lt; file | ..&lt;/code&gt; or &lt;code&gt;cmd file | ..&lt;/code&gt; instead.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2015&#34;&gt;SC2015&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Note that &lt;code&gt;A &amp;amp;&amp;amp; B || C&lt;/code&gt; is not if-then-else. C may run when A is true.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2026&#34;&gt;SC2026&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;This word is outside of quotes. Did you intend to &#39;nest &#39;&#34;&#39;single quotes&#39;&#34;&#39; instead&#39;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2028&#34;&gt;SC2028&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;code&gt;echo&lt;/code&gt; won&#39;t expand escape sequences. Consider &lt;code&gt;printf&lt;/code&gt;.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2035&#34;&gt;SC2035&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;./*glob*&lt;/code&gt; or &lt;code&gt;-- *glob*&lt;/code&gt; so names with dashes won&#39;t become options.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2039&#34;&gt;SC2039&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;In POSIX sh, something is undefined.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2046&#34;&gt;SC2046&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Quote this to prevent word splitting&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2086&#34;&gt;SC2086&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Double quote to prevent globbing and word splitting.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2140&#34;&gt;SC2140&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Word is in the form &lt;code&gt;&#34;A&#34;B&#34;C&#34;&lt;/code&gt; (B indicated). Did you mean &lt;code&gt;&#34;ABC&#34;&lt;/code&gt; or &lt;code&gt;&#34;A\&#34;B\&#34;C&#34;&lt;/code&gt;?&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2154&#34;&gt;SC2154&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;var is referenced but not assigned.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2155&#34;&gt;SC2155&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Declare and assign separately to avoid masking return values.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2164&#34;&gt;SC2164&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Use &lt;code&gt;cd ... || exit&lt;/code&gt; in case &lt;code&gt;cd&lt;/code&gt; fails.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;!--lint enable maximum-line-length--&gt; &#xA;&lt;h2&gt;Develop&lt;/h2&gt; &#xA;&lt;p&gt;If you are an experienced Haskeller, we would be very grateful if you would tear our code apart in a review.&lt;/p&gt; &#xA;&lt;h3&gt;Setup&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone repository&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone --recursive git@github.com:hadolint/hadolint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the dependencies&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;REPL&lt;/h3&gt; &#xA;&lt;p&gt;The easiest way to try out the parser is using the REPL.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# start the repl&#xA;stack repl&#xA;# overload strings to be able to use Text&#xA;:set -XOverloadedStrings&#xA;# import parser library&#xA;import Language.Docker&#xA;# parse instruction and look at AST representation&#xA;parseText &#34;FROM debian:jessie&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Tests&lt;/h3&gt; &#xA;&lt;p&gt;Run unit tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Run integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./integration_test.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;AST&lt;/h3&gt; &#xA;&lt;p&gt;Dockerfile syntax is fully described in the &lt;a href=&#34;http://docs.docker.com/engine/reference/builder/&#34;&gt;Dockerfile reference&lt;/a&gt;. Just take a look at &lt;a href=&#34;https://www.stackage.org/haddock/nightly-2018-01-07/language-docker-2.0.1/Language-Docker-Syntax.html&#34;&gt;Syntax.hs&lt;/a&gt; in the &lt;code&gt;language-docker&lt;/code&gt; project to see the AST definition.&lt;/p&gt; &#xA;&lt;h3&gt;Building against custom libraries&lt;/h3&gt; &#xA;&lt;p&gt;Hadolint uses many libraries to do the dirty work. In particular, language-docker is used to parse Dockerfiles and produce an AST which then can be analyzed. To build Hadolint against a custom version of such libraries, do the following. This example uses language-docker, but it would work with any other libaray as well.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the same directory (e.g. &lt;code&gt;/home/user/repos&lt;/code&gt;) clone Hadolint and language-docker git repositories&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos&#xA;git clone https://github.com/hadolint/hadolint.git&#xA;git clone https://github.com/hadolint/language-docker.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;2&#34;&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your modifications to language-docker&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;In the Hadolint repo, edit the &lt;code&gt;stack.yaml&lt;/code&gt; file, such that the &lt;code&gt;extra-deps&lt;/code&gt; property points to the other repo&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;[...]&#xA;extra-deps:&#xA;  - ../language-docker&#xA;[...]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Recompile Hadolint and run the tests&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd /home/user/repos/hadolint&#xA;stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Alternatives&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;replicatedhq/&lt;a href=&#34;https://github.com/replicatedhq/dockerfilelint&#34;&gt;dockerfilelint&lt;/a&gt;, the other linter used by the &lt;a href=&#34;https://github.com/github/super-linter/raw/main/README.md#supported-linters&#34;&gt;super-linter&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;RedCoolBeans/&lt;a href=&#34;https://github.com/RedCoolBeans/dockerlint/&#34;&gt;dockerlint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;projectatomic/&lt;a href=&#34;https://github.com/projectatomic/dockerfile_lint/&#34;&gt;dockerfile_lint&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- References --&gt;</summary>
  </entry>
  <entry>
    <title>koka-lang/koka</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/koka-lang/koka</id>
    <link href="https://github.com/koka-lang/koka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Koka language compiler and interpreter&lt;/p&gt;&lt;hr&gt;&lt;img align=&#34;left&#34; width=&#34;100&#34; height=&#34;100&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/logo/koka-logo-filled.png&#34;&gt; &#xA;&lt;!--&#xA;[&lt;img align=&#34;right&#34; src=&#34;https://travis-ci.org/koka-lang/koka.svg?branch=master&#34;/&gt;](https://travis-ci.org/koka-lang/koka)&#xA;--&gt; &#xA;&lt;a href=&#34;https://matrix.to/#/#koka-lang_koka:gitter.im&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://img.shields.io/matrix/koka-lang:matrix.org?label=chat%20on%20matrix&#34;&gt; &lt;/a&gt; &#xA;&lt;a href=&#34;https://gitter.im/koka-lang/koka?utm_source=badge&amp;amp;utm_medium=badge&amp;amp;utm_campaign=pr-badge&amp;amp;utm_content=badge&#34;&gt; &lt;img align=&#34;right&#34; style=&#34;margin: 5px&#34; src=&#34;https://badges.gitter.im/koka-lang/koka.svg?sanitize=true&#34;&gt; &lt;/a&gt; &#xA;&lt;p&gt;&amp;nbsp;&lt;/p&gt; &#xA;&lt;h1&gt;Koka: a Functional Language with Effects&lt;/h1&gt; &#xA;&lt;p&gt;&lt;em&gt;Koka v2 is a research language that currently under heavy development with the new C backend&lt;/em&gt; &lt;em&gt;Latest release&lt;/em&gt;: v2.4.0, 2022-02-07 (&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-handlers&#34;&gt;&lt;img align=&#34;right&#34; width=&#34;300&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/snippet-yield.png&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Koka is a strongly typed functional-style language with effect types and handlers.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The core of Koka consists of a small set of well-studied language features, like first-class functions, a polymorphic type- and effect system, algebraic data types, and effect handlers. Each of these is composable and avoid the addition of ‚Äúspecial‚Äù extensions by being as general as possible.&lt;/li&gt; &#xA; &lt;li&gt;Koka tracks the (side) &lt;em&gt;effects&lt;/em&gt; of every function in its type, where pure and effectful computations are distinguished. The precise effect typing gives Koka &lt;em&gt;rock-solid semantics&lt;/em&gt; backed by well-studied category theory, which makes Koka particularly easy to reason about for both humans and compilers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;em&gt;Effect handlers&lt;/em&gt; let you define advanced control abstractions, like exceptions, async/await, or probabilistic programs, as a user library in a typed and composable way.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-perceus&#34;&gt;Perceus&lt;/a&gt; is an advanced compilation method for reference counting. Together with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;evidence passing&lt;/a&gt;, this lets Koka compile directly to C code &lt;em&gt;without needing a garbage collector or runtime system&lt;/em&gt;. Perceus also performs &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#why-fbip&#34;&gt;reuse analysis&lt;/a&gt; and optimizes functional-style programs to use in-place updates when possible.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To learn more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Install&lt;/a&gt; Koka and compile your first programs.&lt;/li&gt; &#xA; &lt;li&gt;Read the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;Koka book&lt;/a&gt; for a tour of the Koka language and its specification.&lt;/li&gt; &#xA; &lt;li&gt;Browse the &lt;a href=&#34;https://koka-lang.github.io/koka/doc/toc.html&#34;&gt;library documentation&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Help with &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#tasks&#34;&gt;development&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Enjoy, Daan Leijen&lt;/p&gt; &#xA;&lt;p&gt;Special thanks to: &lt;a href=&#34;https://antonlorenzen.de/&#34;&gt;Anton Lorenzen&lt;/a&gt; for his work on frame-limited reuse in Perceus &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[10]&lt;/a&gt;, &lt;a href=&#34;https://xnning.github.io/&#34;&gt;Ningning Xie&lt;/a&gt; for her work on the theory and practice of evidence passing &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[9,6]&lt;/a&gt; and the formalization of Perceus reference counting &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, &lt;a href=&#34;https://alexreinking.com/&#34;&gt;Alex Reinking&lt;/a&gt; for the implementation of the Perceus reference counting analysis &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#references&#34;&gt;[8]&lt;/a&gt;, and all previous interns working on earlier versions of Koka: Daniel Hillerstr√∂m, Jonathan Brachth√§user, Niki Vazou, Ross Tate, Edsko de Vries, and Dana Xu.&lt;/p&gt; &#xA;&lt;h2&gt;Recent Releases&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.4.0&lt;/code&gt;, 2022-02-07: automatic generation of installation packages for various Linux distributions (by &lt;a href=&#34;https://github.com/rubikscraft&#34;&gt;Rubikscraft&lt;/a&gt;), improved specialization and integer add/sub, add &lt;code&gt;rbtree-fbip&lt;/code&gt; sample, improve grammar (&lt;code&gt;pub&lt;/code&gt; (instead of &lt;code&gt;public&lt;/code&gt;, remove private (as it is always default)), &lt;code&gt;final ctl&lt;/code&gt; (instead of &lt;code&gt;brk&lt;/code&gt;), underscores in number literals, etc), rename &lt;code&gt;double&lt;/code&gt; to &lt;code&gt;float64&lt;/code&gt;, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.8&lt;/code&gt;, 2021-12-27: improved &lt;code&gt;int&lt;/code&gt; performance, various bug fixes, update wasm backend, initial conan support, fix js backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.6&lt;/code&gt;, 2021-11-26: fix specialization bug, add &lt;code&gt;std/os/readline&lt;/code&gt; module.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.4&lt;/code&gt;, 2021-11-26: &lt;code&gt;maybe&lt;/code&gt;-like types are already value types, but now also no longer need heap allocation if not nested (and &lt;code&gt;[Just(1)]&lt;/code&gt; uses the same heap space as &lt;code&gt;[1]&lt;/code&gt;), improved atomic refcounting (by Anton Lorenzen), improved specialization (by Steven Fontanella), various small fixes, fix build on freeBSD.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.2&lt;/code&gt;, 2021-10-15: initial wasm support (use &lt;code&gt;--target=wasm&lt;/code&gt;, and install &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt;), improved reuse specialization (by Anton Lorenzen), fix default color scheme for non-dark shells (#190), stack-less free and marking, add &lt;code&gt;--stack&lt;/code&gt; option, &lt;a href=&#34;https://musl.libc.org/&#34;&gt;musl&lt;/a&gt; support (use &lt;code&gt;--cc=musl-gcc&lt;/code&gt;), fix &lt;code&gt;vcpkg&lt;/code&gt; support on macOS with homebrew installed vcpkg, various bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.1&lt;/code&gt;, 2021-09-29: improved TRMC optimizations, and improved reuse (the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/rbtree.kk&#34;&gt;rbtree&lt;/a&gt; benchmark is faster as C++ now). Improved effect operation speed. Allow elision of &lt;code&gt;-&amp;gt;&lt;/code&gt; in anonymous function expressions (e.g. &lt;code&gt;xs.map( fn(x) x + 1 )&lt;/code&gt;) and operation clauses. Allow &lt;code&gt;ctl&lt;/code&gt; for &lt;code&gt;control&lt;/code&gt;. New default output directory as &lt;code&gt;.koka&lt;/code&gt; and improved command line options to be more in line with other compilers (with &lt;code&gt;-o&lt;/code&gt; specifying the final output, and &lt;code&gt;-e&lt;/code&gt; to execute the program).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.3.0&lt;/code&gt;, 2021-09-20: many changes: new layout rule to &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html#sec-layout&#34;&gt;elide braces&lt;/a&gt; and no more need to parenthesize &lt;code&gt;if&lt;/code&gt; and &lt;code&gt;match&lt;/code&gt; conditions (see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/samples/basic/rbtree.kk&#34;&gt;&lt;code&gt;samples/basic/rbtree&lt;/code&gt;&lt;/a&gt; for an example of this), updated the JavaScript backend (&lt;code&gt;--target=js&lt;/code&gt;) to use standard ES6 modules and using the new &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt&#34;&gt;&lt;code&gt;BigInt&lt;/code&gt;&lt;/a&gt; for arbitrary precision integers, improved runtime layout with support for 128-bit arm CHERI, add the &lt;code&gt;std/num/int64&lt;/code&gt; module and &lt;code&gt;int64&lt;/code&gt; primitive type, add the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench/koka/binarytrees.kk&#34;&gt;binarytrees&lt;/a&gt; benchmark, initial support for parallel tasks (in &lt;code&gt;std/os/task&lt;/code&gt;), improved simplification and inlining giving much improved effect operations, updated isocline for the interactive environment.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.1&lt;/code&gt;, 2021-09-05: improved optimization, initial parallel tasks, binary-trees benchmark, still slightly slower effect handling, upgrade isocline, fix minor bugs.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.2.0&lt;/code&gt;, 2021-08-26: improved case-of-known simpification (by Rakshika B), improve cross-module specialization (by Steven Fontanella), initial borrowing annotations and improved reuse analysis (by Anton Lorenzen), improved line editing in the interactive environment, improved inlining. Note: due to the new inline phases, effect handling may currently be a tad slower in this release but will be improved for the next release.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#older-release-notes&#34;&gt;Older release notes&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!--&#xA;&lt;img align=&#34;right&#34; width=&#34;200&#34; src=&#34;doc/system-logos.png&#34;&gt;&#xA;--&gt; &#xA;&lt;h1&gt;Install&lt;/h1&gt; &#xA;&lt;p&gt;Koka has &lt;a href=&#34;https://koka-lang.github.io/koka/doc/book.html&#34;&gt;binary installers&lt;/a&gt; for Windows (x64), macOS (x64, M1), Linux (x64, arm64), and FreeBSD (x64). For other platforms, you need to build the compiler from source.&lt;/p&gt; &#xA;&lt;h1&gt;Build from Source&lt;/h1&gt; &#xA;&lt;p&gt;Koka has few dependencies and should build from source without problems on most common platforms, e.g. Windows (including WSL), macOS, and Unix. The following programs are required to build Koka:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt; to run the Haskell compiler. Use &lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh&lt;/code&gt; on Unix and macOS x64, or the binary &lt;a href=&#34;https://get.haskellstack.org/stable/windows-x86_64-installer.exe&#34;&gt;installer&lt;/a&gt; on Windows. On macOS M1, use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; (and see the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;vcpkg&lt;/a&gt; to be able to link easily with C libraries. Use &lt;code&gt;brew install vcpkg&lt;/code&gt; on macOS. On other systems use the vcpkg &lt;a href=&#34;https://vcpkg.io/en/getting-started.html&#34;&gt;install&lt;/a&gt; instructions (Koka can find vcpkg automatically if installed to &lt;code&gt;~/vcpkg&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;http://nodejs.org&#34;&gt;nodejs&lt;/a&gt; if using the Javascript backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: &lt;a href=&#34;https://emscripten.org/docs/getting_started/downloads.html&#34;&gt;emscripten&lt;/a&gt; and &lt;a href=&#34;https://wasmtime.dev/&#34;&gt;wasmtime&lt;/a&gt; if using the Wasm backend.&lt;/li&gt; &#xA; &lt;li&gt;Optional: On Windows it is recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; C compiler, or the &lt;a href=&#34;https://visualstudio.microsoft.com/downloads/&#34;&gt;Visual Studio&lt;/a&gt; C compiler.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Now clone the repository and build the compiler as (note the &lt;code&gt;--recursive&lt;/code&gt; flag):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone --recursive https://github.com/koka-lang/koka&#xA;$ cd koka&#xA;$ stack update&#xA;$ stack build&#xA;$ stack exec koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use &lt;code&gt;stack build --fast&lt;/code&gt; to build a debug version of the compiler. Use &lt;code&gt;stack test --fast&lt;/code&gt; to run the test-suite.&lt;/p&gt; &#xA;&lt;p&gt;(See the &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/#build-notes&#34;&gt;build notes&lt;/a&gt; below for building macOS M1, or if you have issues when running- or installing &lt;code&gt;stack&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Create an Install Bundle&lt;/h2&gt; &#xA;&lt;p&gt;Koka can generate a binary install bundle that can be installed on the local machine:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec koka -- -e util/bundle&#xA;...&#xA;distribution bundle created.&#xA;  bundle : bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;  cc     : gcc&#xA;  version: v2.3.9&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This takes a while as it pre-compiles the standard libraries in three build variants (&lt;code&gt;debug&lt;/code&gt;, &lt;code&gt;drelease&lt;/code&gt; (release with debug info), and &lt;code&gt;release&lt;/code&gt;). After generating the bundle, you can install it locally as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ util/install.sh  bundle/v2.3.9/koka-v2.3.9-linux-x64.tar.gz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;(use &lt;code&gt;util/install.bat&lt;/code&gt; on Windows). After installation, you can now directly invoke &lt;code&gt;koka&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ koka --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Koka is by default installed for the current user in &lt;code&gt;&amp;lt;prefix&amp;gt;/bin/koka&lt;/code&gt;, (with architecture specific files under &lt;code&gt;&amp;lt;prefix&amp;gt;/lib/koka/v2.x.x&lt;/code&gt; and libraries and samples under &lt;code&gt;&amp;lt;prefix&amp;gt;/share/koka/v2.x.x&lt;/code&gt;). On Unix and macOS the default prefix is &lt;code&gt;/usr/local&lt;/code&gt; while on Windows the default prefix is &lt;code&gt;%LOCALAPPDATA%\koka&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to generate installation packages for various Linux platforms (RHEL, Debian, Alpine, etc.). See the [readme][util/packaging] for further information.&lt;/p&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;These are initial benchmarks of Koka v2 with &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; reference counting versus state-of-the-art memory reclamation implementations in various other languages. Since we compare across languages we need to interpret these results with care -- the results depend not only on memory reclamation but also on the different optimizations performed by each compiler and how well we can translate each benchmark to that particular language. We view these results therefore mostly as &lt;em&gt;evidence that the current Koka implementation of reference counting is viable and can be competitive&lt;/em&gt; and &lt;em&gt;not&lt;/em&gt; as a direct comparison of absolute performance between languages and systems.&lt;/p&gt; &#xA;&lt;p&gt;As such, we select here only benchmarks that stress memory allocation, and we tried to select mature comparison systems that use a range of memory reclamation techniques and are considered best-in-class. The systems we compare are, Koka 2.0.3 (compiling the generated C code with gcc 9.3.0), &lt;a href=&#34;https://ocaml.org&#34;&gt;OCaml&lt;/a&gt; 4.08.1, &lt;a href=&#34;https://www.haskell.org&#34;&gt;Haskell&lt;/a&gt; GHC 8.6.5, &lt;a href=&#34;https://swift.org/&#34;&gt;Swift&lt;/a&gt; 5.3, &lt;a href=&#34;https://www.java.com&#34;&gt;Java&lt;/a&gt; SE 15.0.1 with the Hotspot G1 collector, and &lt;a href=&#34;http://www.cplusplus.org&#34;&gt;C++&lt;/a&gt; gcc 9.3.0.&lt;/p&gt; &#xA;&lt;img align=&#34;right&#34; width=&#34;400&#34; src=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/doc/bench-amd3600-nov-2020.png&#34; style=&#34;border:1px solid black&#34;&gt; &#xA;&lt;p&gt;The benchmarks are all available in &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/test/bench&#34;&gt;&lt;code&gt;test/bench&lt;/code&gt;&lt;/a&gt; (see the readme there for build instructions), and all stress memory allocation with little computation: &lt;code&gt;rbtree&lt;/code&gt; (inserts 42 million items into a red-black tree), &lt;code&gt;rbtree-ck&lt;/code&gt; (a variant of &lt;code&gt;rbtree&lt;/code&gt; that keeps a list of every 5th subtree and thus shares many subtrees), &lt;code&gt;deriv&lt;/code&gt; (the symbolic derivative of a large expression), &lt;code&gt;nqueens&lt;/code&gt; (calculates all solutions for the n-queens problem of size 13 into a list, and returns the length of that list where the solution lists share many sub-solutions), and &lt;code&gt;cfold&lt;/code&gt; (constant-folding over a large symbolic expression).&lt;/p&gt; &#xA;&lt;p&gt;Note: in C++, without automatic memory management, many benchmarks are difficult to express directly as they use persistent and partially shared data structures. To implement these faithfully would essentially require manual reference counting. Instead, we use C++ as our performance baseline: we either use in-place updates without supporting persistence (as in &lt;code&gt;rbtree&lt;/code&gt; which uses &lt;code&gt;std::map&lt;/code&gt;) or we do not reclaim memory at all (as in &lt;code&gt;deriv&lt;/code&gt;, &lt;code&gt;nqueens&lt;/code&gt;, and &lt;code&gt;cfold&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;The execution times and peak working set averaged over 10 runs and normalized to Koka are in the figure on the right (on a 3.8Ghz AMD3600XT on Ubuntu 20.04, Nov 2020).&lt;/p&gt; &#xA;&lt;p&gt;We can see that even though Koka has currently few optimizations besides the reference counting ones, it performs very well compared to these mature systems, often outperforming by a significant margin -- both in execution time and peak working set. Clearly, these benchmarks are allocation heavy but it is encouraging to see this initial performance from Koka.&lt;/p&gt; &#xA;&lt;p&gt;A full discussion of these benchmarks and systems can be found in the &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;Perceus&lt;/a&gt; report.&lt;/p&gt; &#xA;&lt;h1&gt;Tasks&lt;/h1&gt; &#xA;&lt;p&gt;Please help develop Koka: there are many opportunities to improve Koka or do research with Koka. We need:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Emacs (partially done) and Vim syntax highlighting.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add more samples, improve documentation, landing page etc. Make it easier for people to contribute.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Many library modules are incomplete (like &lt;code&gt;std/os/file&lt;/code&gt;) or missing (like &lt;code&gt;std/data/map&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Update file and os primitives for the JavaScript backend.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the full test suite.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Run the Bayesian probalistic machine learning program with large parameters.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Functions with a pattern match in the argument (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Support &lt;code&gt;int64&lt;/code&gt; operations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More advanced projects:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Update the JavaScript backend to 1) use modern modules instead of amdefine, 2) use the new bigints instead of bigint.js, and 3) add support for int64. (landed in the &lt;code&gt;dev&lt;/code&gt; branch)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Port &lt;code&gt;std/text/regex&lt;/code&gt; from v1 (using PCRE)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; A language server for Visual Studio Code and Atom. Koka can already generate a typed &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/src/Syntax/RangeMap.hs&#34;&gt;range map&lt;/a&gt; so this should be managable. Partially done: see PR #100 (by @fwcd) -- it just needs work on packaging it to make it easy to build and install as part of the Koka installer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Package management of Koka modules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Compile to WASM (using emscripten on the current C backend)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Extend TRMC to include (1) return results with pairs (like &lt;code&gt;unzip&lt;/code&gt; or &lt;code&gt;partition&lt;/code&gt;), (2) associative functions (like &lt;code&gt;+&lt;/code&gt; in &lt;code&gt;length&lt;/code&gt;), and (3) mutually recursive functions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve compilation of local state to use local variables directly (in C) without allocation. Tricky though due to multiple resumptions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve performance of array/mutable reference programming. Koka is has great performance for algebraic datatypes but lags when using more imperative array algorithms. This requires better integration with the reference counting (faster in-place update for vectors) and integration local mutable references.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; To support optimal Btree&#39;s we need &lt;em&gt;mutable fields&lt;/em&gt; in constructors, and perhaps intrusive vector fields.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The current parallel task support is very basic; we need a great work-stealing thread pool, LVar&#39;s etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Expose the &#34;bytes&#34; primitive data together with views..&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve C code generation by identifying output that could be better; also in effectful code we generate many join-points (see [9]), can we increase the sharing/reduce the extra code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The compiler always analyses module dependencies and builds any needed dependencies. The current code (in &lt;code&gt;src/Compiler/Compile.hs&lt;/code&gt;) is not great and it would be nice to factorize the &#34;make&#34; functionality out and also allow for parallel builds.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Master/PhD level:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Better language level FBIP support with guaranteed datatype matching, automatic derivative and visitor generation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Can we use C++ exceptions to implement &#34;zero-cost&#34; &lt;code&gt;if yielding() ...&lt;/code&gt; branches and remove the need join points (see [9]).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Float up &lt;code&gt;open&lt;/code&gt; calls to improve effect handling (worked on by Naoya Furudono)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Formalize opening and closing effect row types (worked on by Kazuki Ikemori)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently being worked on:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Various standard optimizations like case-of-case, join points, case-of-known constructor, etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement inline specialization where functions like &lt;code&gt;map&lt;/code&gt;, &lt;code&gt;fold&lt;/code&gt; etc get specialized for the function with which they are called. This is an important optimization for functional style languages to reduce the allocation of lambda&#39;s. (contact: Steven Fontanella)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Borrowing analysis for Perceus and improved reuse analysis. (contact: Anton Lorenzen)&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Improve case-of-known simplification with shape information&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The following is the immediate todo list to be completed in the coming months:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Port &lt;code&gt;std/async&lt;/code&gt; (using &lt;code&gt;libuv&lt;/code&gt;).&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Proper overloading with (a form of) type classes. (in design phase).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Contact me if you are interested in tackling some of these :-)&lt;/p&gt; &#xA;&lt;h1&gt;Build Notes&lt;/h1&gt; &#xA;&lt;h2&gt;Branches&lt;/h2&gt; &#xA;&lt;p&gt;The main development branches are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;master&lt;/code&gt;: latest stable version.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;dev&lt;/code&gt;: current development branch -- submit PR&#39;s to this branch.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v1-master&lt;/code&gt;: last stable version of Koka v1: this is Koka with the Javascript (and C#) backend which does not use evidence translation. This version supports &lt;code&gt;std/async&lt;/code&gt; and should compile examples from published papers.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building on macOS M1&lt;/h2&gt; &#xA;&lt;p&gt;Currently (Dec 2021) you need to use &lt;code&gt;brew install haskell-stack --head&lt;/code&gt; to get the latest &lt;code&gt;2.7.4&lt;/code&gt; version of stack. (Have patience as the cabal install step takes about 20 min). Moreover, you need to add the &lt;code&gt;brew&lt;/code&gt; installed LLVM to your path afterwards, or otherwise stack cannot find the LLVM tools. Add the following to your &lt;code&gt;~/.zshrc&lt;/code&gt; script and open an fresh prompt:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=/opt/homebrew/opt/llvm/bin:$PATH&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;!--&#xA;Moreover, sometimes `stack` segfaults but running it inside `bash` seems to resolve the issue.&#xA;Also, we need to tell stack to use the system installed ghc and skip the version check as&#xA;it can currently not install GHC for arm64 yet:&#xA;```&#xA;bash:~$ git clone --recursive https://github.com/koka-lang/koka&#xA;bash:~$ cd koka&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check build&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka&#xA;```&#xA;&#xA;and pass the `--system-ghc` flag to create an installation bundle as well:&#xA;```&#xA;bash:~/koka$ stack --system-ghc --skip-ghc-check exec koka -- -e util/bundle -- --system-ghc&#xA;```&#xA;--&gt; &#xA;&lt;h2&gt;Building with Cabal&lt;/h2&gt; &#xA;&lt;p&gt;Some platforms (like Linux arm64 and FreeBSD) do not always support &lt;code&gt;stack&lt;/code&gt; well. In these cases we can also use &lt;code&gt;ghc&lt;/code&gt; and &lt;code&gt;cabal&lt;/code&gt; directly. Install these packages as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo apt update&#xA;$ sudo apt install ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (x64 and arm64) we use &lt;code&gt;brew&lt;/code&gt; instead:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ brew install pkg-config ghc cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD, use &lt;code&gt;pkg&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ sudo pkg update&#xA;$ sudo pkg install ghc hs-cabal-install   # or: hs-haskell-platform&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, install &lt;code&gt;vcpkg&lt;/code&gt; as well. If you install this in the &lt;code&gt;~/vcpkg&lt;/code&gt; directory Koka will find it automatically when needed:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone https://github.com/microsoft/vcpkg&#xA;~$ ./vcpkg/bootstrap-vcpkg.sh&#xA;~$ vcpkg/vcpkg install pcre&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can now build the compiler using &lt;code&gt;cabal&lt;/code&gt; as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~$ git clone --recursive https://github.com/koka-lang/koka&#xA;~$ cd koka&#xA;~/koka$ cabal new-update&#xA;~/koka$ cabal new-build&#xA;~/koka$ cabal new-run koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can also run tests as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka-test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or create an installer:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ cabal new-run koka -- -e util/bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building with minbuild&lt;/h2&gt; &#xA;&lt;p&gt;If neither &lt;code&gt;stack&lt;/code&gt; nor &lt;code&gt;cabal&lt;/code&gt; are functional, you may try to run the minimal build script to build Koka:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ ./util/minbuild.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;which directly invokes &lt;code&gt;ghc&lt;/code&gt; to build the compiler. You can create an install bundle from a minbuild as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;~/koka$ .koka/minbuild/koka -e util/bundle.kk -- --koka=.koka/minbuild/koka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Windows C Compilers&lt;/h2&gt; &#xA;&lt;p&gt;The Koka compiler on Windows requires a C compiler. By default when using &lt;code&gt;stack exec koka&lt;/code&gt; the C compiler supplied with &lt;code&gt;ghc&lt;/code&gt; is used (&lt;code&gt;mingw&lt;/code&gt;) but that is only visible within a stack environmet.&lt;/p&gt; &#xA;&lt;p&gt;It is therefore recommended to install the &lt;a href=&#34;https://llvm.org/builds&#34;&gt;clang&lt;/a&gt; compiler for Windows (which is automatically installed when running &lt;code&gt;util/install.bat&lt;/code&gt;). However, Koka can also use the Microsoft Visual C++ compiler (&lt;code&gt;cl&lt;/code&gt;) if you run &lt;code&gt;koka&lt;/code&gt; from a &lt;a href=&#34;https://raw.githubusercontent.com/koka-lang/koka/master/vsprompt&#34;&gt;Visual Studio x64 toolset&lt;/a&gt; command prompt (in order to link correctly with the Windows system libraries).&lt;/p&gt; &#xA;&lt;p&gt;Generally, for Koka code, &lt;code&gt;mingw&lt;/code&gt; (&lt;code&gt;gcc&lt;/code&gt;) optimizes best, closely followed &lt;code&gt;clang-cl&lt;/code&gt;. On a 3.8Gz AMD 3600XT, with &lt;code&gt;mingw&lt;/code&gt; 7.2.0, &lt;code&gt;clang-cl&lt;/code&gt; 11.0.0, and &lt;code&gt;cl&lt;/code&gt; 19.28 we get:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec out\v2.0.5\mingw-release\test_bench_koka_rbtree -- --kktime&#xA;420000&#xA;info: elapsed: 0.624s, user: 0.625s, sys: 0.000s, rss: 163mb&#xA;&#xA;$ out\v2.0.5\clang-cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 0.727s, user: 0.734s, sys: 0.000s, rss: 164mb&#xA;&#xA;$ out\v2.0.5\cl-release\test_bench_koka_rbtree --kktime&#xA;420000&#xA;info: elapsed: 1.483s, user: 1.484s, sys: 0.000s, rss: 164mb&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Older Release Notes&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.9&lt;/code&gt;, 2021-06-23: initial support for cross-module specialization (by Steven Fontanella).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.8&lt;/code&gt;, 2021-06-17: initial support for macOS M1 and Linux arm64, improved readline, minor fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.6&lt;/code&gt;, 2021-06-10: initial support for shallow resumptions, fix space leak with vectors, allow &lt;code&gt;gcc&lt;/code&gt; with &lt;code&gt;--fasan&lt;/code&gt;, improved &lt;code&gt;vcpkg&lt;/code&gt; support, add &lt;code&gt;--fstdalloc&lt;/code&gt; flag, improved VS code syntax highlighting, improved &lt;code&gt;valgrind&lt;/code&gt; support, added &lt;code&gt;--no-optimize&lt;/code&gt; flag for extended debug information.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.4&lt;/code&gt;, 2021-05-31: remove dependency on cmake, support library linking, support vckpg, updated &lt;code&gt;std/text/regex&lt;/code&gt;, improved Windows installer with &lt;code&gt;clang&lt;/code&gt; install included, remove dependency on Visual Studio on Windows, improved &lt;code&gt;--fasan&lt;/code&gt; support, fixed space leak on boxed value types, use signed &lt;code&gt;size_t&lt;/code&gt; internally, various small bug fixes.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.2&lt;/code&gt;, 2021-05-01: various bug fixes, allow pattern bindings in parameters of anonymous functions (by Steven Fontanella), initial Emacs syntax highlighting (by Kamoii).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.1.1&lt;/code&gt;, 2021-03-08: bug fixes, use right-associative (++) for string- and list append (instead of (+)), improved internal string handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.16&lt;/code&gt;, 2021-02-14: bug fixes, fix short-circuit evaluation of logical operations, improved utf-8 handling.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.14&lt;/code&gt;, 2020-12-11: bug fixes, improved var escape checking.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.12&lt;/code&gt;, 2020-12-02: syntax highlighting support for VS Code and Atom, improved uninstall, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.9&lt;/code&gt;, 2020-11-27: now with binary &lt;a href=&#34;https://github.com/koka-lang/koka/releases&#34;&gt;releases&lt;/a&gt; for Windows, macOS, and Linux.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.7&lt;/code&gt;, 2020-11-23: more small fixes, improved scoped handlers, improved higher-rank type propagation, more samples.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.5&lt;/code&gt;, 2020-11-15: many bug fixes and improvements. Improved codegen, named handlers, added samples, docker support, direct C compilation, local install support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;v2.0.0&lt;/code&gt;, 2020-08-21: initial v2 release.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;References&lt;/h1&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Daniel Hillerstr√∂m, and Sam Lindley. ‚ÄúLiberating Effects with Rows and Handlers.‚Äù In &lt;em&gt;Proceedings of the 1st International Workshop on Type-Driven Development&lt;/em&gt;, 15--27. TyDe 2016. Nara, Japan. 2016. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2976022.2976033&#34;&gt;10.1145/2976022.2976033&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. ‚ÄúKoka: Programming with Row Polymorphic Effect Types.‚Äù In &lt;em&gt;Mathematically Structured Functional Programming 2014&lt;/em&gt;. EPTCS. Mar. 2014. arXiv:&lt;a href=&#34;http://arxiv.org/abs/1406.2061&#34;&gt;1406.2061&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. &lt;em&gt;Algebraic Effects for Functional Programming&lt;/em&gt;. MSR-TR-2016-29. Microsoft Research. Aug. 2016. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&#34;&gt;https://www.microsoft.com/en-us/research/publication/algebraic-effects-for-functional-programming&lt;/a&gt;. Extended version of [4].&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Daan Leijen. ‚ÄúType Directed Compilation of Row-Typed Algebraic Effects.‚Äù In &lt;em&gt;Proceedings of Principles of Programming Languages (POPL‚Äô17)&lt;/em&gt;. Paris, France. Jan. 2017.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nicolas Wu, Tom Schrijvers, and Ralf Hinze. ‚ÄúEffect Handlers in Scope.‚Äù In &lt;em&gt;Proceedings of the 2014 ACM SIGPLAN Symposium on Haskell&lt;/em&gt;, 1--12. Haskell ‚Äô14. ACM, New York, NY, USA. 2014. doi:&lt;a href=&#34;https://dx.doi.org/10.1145/2633357.2633358&#34;&gt;10.1145/2633357.2633358&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie, Jonathan Brachth√§user, Daniel Hillerstr√∂m, Philipp Schuster, Daan Leijen. ‚ÄúEffect Handlers, Evidently‚Äù The 25th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2020. doi:&lt;a href=&#34;https://doi.org/10.1145/3408981&#34;&gt;10.1145/3408981&lt;/a&gt;, &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/evidently-with-proofs-5f0b7d860b387.pdf&#34;&gt;pdf&lt;/a&gt;. See also [9] which improves upon this work.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. ‚ÄúEffect Handlers in Haskell, Evidently‚Äù The 13th ACM SIGPLAN International Haskell Symposium, August 2020. &lt;a href=&#34;https://www.microsoft.com/en-us/research/uploads/prod/2020/07/effev.pdf&#34;&gt;pdf&lt;/a&gt; See also the &lt;a href=&#34;https://github.com/xnning/EvEff&#34;&gt;Ev.Eff&lt;/a&gt; and &lt;a href=&#34;https://github.com/xnning/MpEff&#34;&gt;Mp.Eff&lt;/a&gt; repositories.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alex Reinking, Ningning Xie, Leonardo de Moura, and Daan Leijen: ‚Äú Perceus: Garbage Free Reference Counting with Reuse‚Äù MSR-TR-2020-42, Nov 22, 2020. Distinguished paper at PLDI&#39;21. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/perceus-garbage-free-reference-counting-with-reuse/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ningning Xie and Daan Leijen. ‚Äú Generalized Evidence Passing for Effect Handlers‚Äù In The 26th ACM SIGPLAN International Conference on Functional Programming (ICFP), August 2021. Also as MSR-TR-2021-5, Mar, 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/generalized-evidence-passing-for-effect-handlers/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Anton Lorenzen and Daan Leijen. ‚Äú Reference Counting with Frame-Limited Reuse‚Äù Microsoft Research technical report MSR-TR-2021-30, Nov 2021. &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/reference-counting-with-frame-limited-reuse-extended-version/&#34;&gt;pdf&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/plutus-apps</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/input-output-hk/plutus-apps</id>
    <link href="https://github.com/input-output-hk/plutus-apps" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The Plutus application platform&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/input-output-hk/plutus-apps&#34;&gt;The Plutus Application Framework&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;div id=&#34;toc&#34; class=&#34;toc&#34;&gt; &#xA; &lt;div id=&#34;toctitle&#34;&gt;&#xA;  Table of Contents&#xA; &lt;/div&gt; &#xA; &lt;ul class=&#34;sectlevel1&#34;&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_documentation&#34;&gt;Documentation&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_user_documentation&#34;&gt;User documentation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_talks&#34;&gt;Talks&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_specifications_and_design&#34;&gt;Specifications and design&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_versioning_and_releases&#34;&gt;Versioning and releases&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_versioning&#34;&gt;Versioning&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_branching&#34;&gt;Branching&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_dependency_update&#34;&gt;Dependency update&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_version_ranges&#34;&gt;Version ranges&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_releases&#34;&gt;Releases&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_working_with_the_project&#34;&gt;Working with the project&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_how_to_build_the_projects_artifacts&#34;&gt;How to build the project‚Äôs artifacts&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_deployment&#34;&gt;Deployment&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-advice&#34;&gt;Nix&lt;/a&gt; &#xA;   &lt;ul class=&#34;sectlevel2&#34;&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;/ul&gt; &lt;/li&gt; &#xA;  &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#_licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;div id=&#34;preamble&#34;&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;The Plutus Application Framework, part of the Plutus Platform, is a framework for developing distributed applications using the Cardano blockchain. For more information about the projects, see the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;This repository contains:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;Plutus Platform&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;Libraries which implement the Plutus Application Framework, a framework for writing applications that work with Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;A selection of end-to-end usecases written with the Plutus Application Framework&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;The Plutus Playground, a web-based playground for learning and writing basic Plutus Applications.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;The rest of this README is focussed on people who want to develop or contribute to the Framework.&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;For people who want to &lt;strong&gt;use&lt;/strong&gt; the Framework, please consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#user-documentation&#34;&gt;[user-documentation]&lt;/a&gt;.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div id=&#34;cache-warning&#34; class=&#34;admonitionblock important&#34;&gt; &#xA;   &lt;table&gt; &#xA;    &lt;tbody&gt;&#xA;     &lt;tr&gt; &#xA;      &lt;td class=&#34;icon&#34;&gt; &#xA;       &lt;div class=&#34;title&#34;&gt;&#xA;        Important&#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;      &lt;td class=&#34;content&#34;&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;DO NOT IGNORE THIS&lt;/p&gt; &#xA;       &lt;/div&gt; &#xA;       &lt;div class=&#34;paragraph&#34;&gt; &#xA;        &lt;p&gt;If you want to use Nix with this project, make sure to set up the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#iohk-binary-cache&#34;&gt;IOHK binary cache&lt;/a&gt;. If you do not do this, you will end up building GHC, which takes several hours. If you find yourself building GHC, STOP and fix the cache.&lt;/p&gt; &#xA;       &lt;/div&gt; &lt;/td&gt; &#xA;     &lt;/tr&gt; &#xA;    &lt;/tbody&gt;&#xA;   &lt;/table&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_documentation&#34;&gt;Documentation&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_user_documentation&#34;&gt;User documentation&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The main documentation is located &lt;a href=&#34;https://plutus-apps.readthedocs.io/en/latest/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The generated Haskell API documentation (haddocks) are here: &lt;a href=&#34;https://playground.plutus.iohkdev.io/doc/haddock&#34; class=&#34;bare&#34;&gt;https://playground.plutus.iohkdev.io/doc/haddock&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_talks&#34;&gt;Talks&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=MpWeg6Fg0t8&#34;&gt;Functional Smart Contracts on Cardano&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=usMPt8KpBeI&#34;&gt;The Plutus Platform&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_specifications_and_design&#34;&gt;Specifications and design&lt;/h3&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/plutus/linux.docs.plutus-report/latest/download-by-type/doc-pdf/plutus&#34;&gt;Plutus Technical Report&lt;/a&gt; (draft)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_versioning_and_releases&#34;&gt;Versioning and releases&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;&lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; reminder:&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;ulist&#34;&gt; &#xA;   &lt;ul&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;em&gt;Two&lt;/em&gt; major-version components, A.B&lt;/p&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;In this doc: ‚Äúfirst-major-version‚Äù, ‚Äúsecond-major-version‚Äù&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;&lt;em&gt;One&lt;/em&gt; minor-version component C&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;li&gt; &lt;p&gt;Any number of (meaningless but higher) patch-version components&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;/ul&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_versioning&#34;&gt;Versioning&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The core &lt;code&gt;plutus-apps&lt;/code&gt; packages are versioned as follows:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Package versioning follows the &lt;a href=&#34;https://pvp.haskell.org/&#34;&gt;PVP&lt;/a&gt; on a best-effort basis (i.e. we will generally try to but we won‚Äôt guarantee it).&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;The first-major-version component indicates the &#34;era&#34; which for our purposes means which major version of the &lt;strong&gt;Cardano node&lt;/strong&gt; the tools are compatible with.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The second-major-version component is used for releases which are major versions according to the PVP, but which are still compatible with the current &#34;era&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The minor-version and below are used as normal.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages which are used downstream should all have the same version.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Other packages which are not used downstream (e.g. &lt;code&gt;plutus-playground-server&lt;/code&gt;, &lt;code&gt;plutus-playground-client&lt;/code&gt;, &lt;code&gt;quickcheck-dynamic&lt;/code&gt;, etc.) can remain unversioned.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;In principle we could just have a single major version, but using two makes it easier to avoid mistakes and clearly expresses the state of the repository.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_branching&#34;&gt;Branching&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are two protected branches in &lt;code&gt;plutus-apps&lt;/code&gt;:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;main&lt;/code&gt; branch&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Most development should be done in this branch&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Should always target a stable version of &lt;code&gt;cardano-node&lt;/code&gt; which is compatible with the current Cardano mainnet.&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;The version of transitive dependencies (&lt;code&gt;plutus&lt;/code&gt;, &lt;code&gt;cardano-ledger&lt;/code&gt;, &lt;code&gt;ouroboros-network&lt;/code&gt;, etc.) should be pinned to the ones from &lt;code&gt;cardano-node&lt;/code&gt; (or better, &lt;code&gt;cardano-wallet&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;        &lt;li&gt; &lt;p&gt;Changes will be backported form &lt;code&gt;main&lt;/code&gt; to &lt;code&gt;next-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;code&gt;next-node&lt;/code&gt; branch: should always target the next node release.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;This branch will eventually be merged in &lt;code&gt;main&lt;/code&gt; after the Cardano mainnet HF.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_dependency_update&#34;&gt;Dependency update&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The dependency update policy is dependent on the protected branch.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For &lt;code&gt;cardano-node&lt;/code&gt;, we define major-version-bound the range of versions which are compatible with a specific era. For example, for the Alonzo era, that would be &lt;code&gt;&amp;gt;= 1.29 &amp;amp;&amp;amp; &amp;lt; 1.35&lt;/code&gt;. For the Vasil era, that would be &lt;code&gt;&amp;gt;= 1.35 &amp;amp;&amp;amp; &amp;lt; 1.36&lt;/code&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Independently of the protected branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should always use the same first-major-version of &lt;code&gt;plutus&lt;/code&gt; as the one used by the &lt;code&gt;plutus&lt;/code&gt; dependency of &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should always be safe to upgrade to a new second-major-version of &lt;code&gt;plutus&lt;/code&gt;: at worst this will lead to some code breakage.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should, unless specified otherwise, use the same version for transitive dependencies (&lt;code&gt;cardano-ledger&lt;/code&gt;, &lt;code&gt;ouroboros-network&lt;/code&gt;, etc.) with &lt;code&gt;cardano-node&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should pin the major version of &lt;code&gt;cardano-node&lt;/code&gt; for all packages&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should pin the first and second-major version of &lt;code&gt;plutus&lt;/code&gt; for all packages&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;main&lt;/code&gt; branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should not update &lt;code&gt;cardano-node&lt;/code&gt; to a new major-version. In other words, it should use a &lt;code&gt;cardano-node&lt;/code&gt; version which is compatible with the current Cardano mainnet&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It should use a &lt;code&gt;cardano-wallet&lt;/code&gt; version which is compatible with the current &lt;code&gt;cardano-node&lt;/code&gt; version&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;code&gt;next-node&lt;/code&gt; branch:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;It may update the &lt;code&gt;cardano-node&lt;/code&gt; to a new major-version. In other words, it may use a &lt;code&gt;cardano-node&lt;/code&gt; version which is incompatible with the current Cardano mainnet&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;It may use a &lt;code&gt;cardano-wallet&lt;/code&gt; version which is incompatible with the current &lt;code&gt;cardano-node&lt;/code&gt; version&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_version_ranges&#34;&gt;Version ranges&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Packages which depend on &lt;code&gt;plutus-apps&lt;/code&gt; packages should use version ranges to control which version of those packages they build against.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Packages in &lt;code&gt;plutus-apps&lt;/code&gt; which are used downstream should pin the major-version of each other (e.g. &lt;code&gt;plutus-pab-1.0.1&lt;/code&gt; should depend on &lt;code&gt;plutus-contract ^&amp;gt;= 1.0&lt;/code&gt;).&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages should pin at least the first-major-version of &lt;code&gt;plutus-apps&lt;/code&gt; packages.&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;Upgrading to a new second-major-version should always be safe for working on the current mainnet, with at most code breakage (following the PVP). Users may of course want to pin this version as well to avoid such breakage.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Downstream packages pulling in &lt;code&gt;plutus-apps&lt;/code&gt; packages via &lt;code&gt;source-repository-package&lt;/code&gt; stanzas should always take tagged commits.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_releases&#34;&gt;Releases&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Currently there is no release process beyond bumping the package versions and making a tag/branch as appropriate.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_working_with_the_project&#34;&gt;Working with the project&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_submit_an_issue&#34;&gt;How to submit an issue&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/plutus-apps/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/CONTRIBUTING.html&#34;&gt;CONTRIBUTING&lt;/a&gt;, which describes our processes in more detail including development environments; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/ARCHITECTURE.html&#34;&gt;ARCHITECTURE&lt;/a&gt;, which describes the structure of the repository.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_depend_on_the_project_from_another_haskell_project&#34;&gt;How to depend on the project from another Haskell project&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;None of our libraries are on Hackage, unfortunately (many of our dependencies aren‚Äôt either). So for the time being, you need to:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;Add &lt;code&gt;plutus-apps&lt;/code&gt; as a &lt;code&gt;source-repository-package&lt;/code&gt; to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy the &lt;code&gt;source-repository-package&lt;/code&gt; stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; to yours.&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;Copy additional stanzas from our &lt;code&gt;cabal.project&lt;/code&gt; as you need, e.g. you may need some of the &lt;code&gt;allow-newer&lt;/code&gt; stanzas.&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The &lt;a href=&#34;https://github.com/input-output-hk/plutus-starter&#34;&gt;plutus-starter&lt;/a&gt; project provides an example.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_how_to_build_the_projects_artifacts&#34;&gt;How to build the project‚Äôs artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;This section contains information about how to build the project‚Äôs artifacts for independent usage. For development work see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt; for more information.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;prerequisites&#34;&gt;Prerequisites&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell libraries in the Plutus Platform are built with &lt;code&gt;cabal&lt;/code&gt; and Nix. The other artifacts (docs etc.) are also most easily built with Nix.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_nix&#34;&gt;Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Install &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; (recommended). following the instructions on the &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix website&lt;/a&gt;.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;Make sure you have read and understood the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#cache-warning&#34;&gt;cache warning&lt;/a&gt;. DO NOT IGNORE THIS.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-advice&#34;&gt;Nix&lt;/a&gt; for further advice on using Nix.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;sect4&#34;&gt; &#xA;     &lt;h5 id=&#34;_non_nix&#34;&gt;Non-Nix&lt;/h5&gt; &#xA;     &lt;div class=&#34;paragraph&#34;&gt; &#xA;      &lt;p&gt;You can build some of the Haskell packages without Nix, but this is not recommended and we don‚Äôt guarantee that these prerequisites are sufficient. For instance, you would have to build and install this fork of &lt;a href=&#34;https://github.com/input-output-hk/libsodium/commit/66f017f16633f2060db25e17c170c2afa0f2a8a1&#34;&gt;&lt;code&gt;libsodium&lt;/code&gt;&lt;/a&gt; from source. If you use Nix, these tools are provided for you via &lt;code&gt;shell.nix&lt;/code&gt;, and you do &lt;strong&gt;not&lt;/strong&gt; need to install them yourself.&lt;/p&gt; &#xA;     &lt;/div&gt; &#xA;     &lt;div class=&#34;ulist&#34;&gt; &#xA;      &lt;ul&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;li&gt; &lt;p&gt;If you want to build our Haskell packages with &lt;a href=&#34;https://haskellstack.org/&#34;&gt;&lt;code&gt;stack&lt;/code&gt;&lt;/a&gt;, then install it.&lt;/p&gt; &lt;/li&gt; &#xA;      &lt;/ul&gt; &#xA;     &lt;/div&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;building-with-nix&#34;&gt;How to build the Haskell packages and other artifacts with Nix&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;nix build -f default.nix plutus-apps.haskell.packages.plutus-pab.components.library&lt;/code&gt; from the root to build the Plutus PAB library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/a&gt; to find out what other attributes you can build.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;sect3&#34;&gt; &#xA;    &lt;h4 id=&#34;_how_to_build_the_haskell_packages_with_cabal&#34;&gt;How to build the Haskell packages with &lt;code&gt;cabal&lt;/code&gt;&lt;/h4&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;The Haskell packages can be built directly with &lt;code&gt;cabal&lt;/code&gt;. We do this during development (see &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/#how-to-develop&#34;&gt;How to develop and contribute to the project&lt;/a&gt;). The best way is to do this is inside a &lt;code&gt;nix-shell&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;     &lt;table&gt; &#xA;      &lt;tbody&gt;&#xA;       &lt;tr&gt; &#xA;        &lt;td class=&#34;icon&#34;&gt; &#xA;         &lt;div class=&#34;title&#34;&gt;&#xA;          Note&#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;        &lt;td class=&#34;content&#34;&gt; &#xA;         &lt;div class=&#34;paragraph&#34;&gt; &#xA;          &lt;p&gt;For fresh development setups, you also need to run &lt;code&gt;cabal update&lt;/code&gt;.&lt;/p&gt; &#xA;         &lt;/div&gt; &lt;/td&gt; &#xA;       &lt;/tr&gt; &#xA;      &lt;/tbody&gt;&#xA;     &lt;/table&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;Run &lt;code&gt;cabal build plutus-pab&lt;/code&gt; from the root to build the Plutus PAB library.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;    &lt;div class=&#34;paragraph&#34;&gt; &#xA;     &lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/cabal.project&#34;&gt;cabal project file&lt;/a&gt; to see the other packages that you can build with &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;_deployment&#34;&gt;Deployment&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;The Plutus Playground is automatically deployed upon certain pushes to GitHub&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://plutus-playground-plutus-apps-staging.plutus.aws.iohkdev.io/&#34;&gt;Staging&lt;/a&gt; is deployed from every commit pushed to &lt;code&gt;main&lt;/code&gt; (this URL subject to change)&lt;/p&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://playground.plutus.iohkdev.io/&#34;&gt;Production&lt;/a&gt; is deployed from every release tag (matching &lt;code&gt;vYYYY-MM-DD&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;For more details, including instructions for setting up ad hoc testing deployments, see &lt;a href=&#34;https://github.com/input-output-hk/plutus-ops&#34;&gt;the plutus-ops repo&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;nix-advice&#34;&gt;Nix&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;iohk-binary-cache&#34;&gt;How to set up the IOHK binary caches&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;Adding the IOHK binary cache to your Nix configuration will speed up builds a lot, since many things will have been built already by our CI.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;If you find you are building packages that are not defined in this repository, or if the build seems to take a very long time then you may not have this set up properly.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;To set up the cache:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;olist arabic&#34;&gt; &#xA;    &lt;ol class=&#34;arabic&#34;&gt; &#xA;     &lt;li&gt; &lt;p&gt;On non-NixOS, edit &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; and add the following lines:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;substituters        = https://hydra.iohk.io https://iohk.cachix.org https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &#xA;      &lt;div class=&#34;admonitionblock note&#34;&gt; &#xA;       &lt;table&gt; &#xA;        &lt;tbody&gt;&#xA;         &lt;tr&gt; &#xA;          &lt;td class=&#34;icon&#34;&gt; &#xA;           &lt;div class=&#34;title&#34;&gt;&#xA;            Note&#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;          &lt;td class=&#34;content&#34;&gt; &#xA;           &lt;div class=&#34;paragraph&#34;&gt; &#xA;            &lt;p&gt;If you don‚Äôt have an &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; or don‚Äôt want to edit it, you may add the &lt;code&gt;nix.conf&lt;/code&gt; lines to &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; instead. You must be a &lt;a href=&#34;https://nixos.org/nix/manual/#ssec-multi-user&#34;&gt;trusted user&lt;/a&gt; to do this.&lt;/p&gt; &#xA;           &lt;/div&gt; &lt;/td&gt; &#xA;         &lt;/tr&gt; &#xA;        &lt;/tbody&gt;&#xA;       &lt;/table&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;     &lt;li&gt; &lt;p&gt;On NixOS, set the following NixOS options:&lt;/p&gt; &#xA;      &lt;div class=&#34;listingblock&#34;&gt; &#xA;       &lt;div class=&#34;content&#34;&gt; &#xA;        &lt;pre&gt;nix = {&#xA;  binaryCaches          = [ &#34;https://hydra.iohk.io&#34; &#34;https://iohk.cachix.org&#34; ];&#xA;  binaryCachePublicKeys = [ &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34; &#34;iohk.cachix.org-1:DpRUyj7h7V830dp/i6Nti+NEO2/nhblbov/8MW7Rqoo=&#34; ];&#xA;};&lt;/pre&gt; &#xA;       &lt;/div&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ol&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA;  &lt;div class=&#34;sect2&#34;&gt; &#xA;   &lt;h3 id=&#34;nix-build-attributes&#34;&gt;Which attributes to use to build different artifacts&lt;/h3&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt; defines a package set with attributes for all the artifacts you can build from this repository. These can be built using &lt;code&gt;nix build&lt;/code&gt;. For example:&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;listingblock&#34;&gt; &#xA;    &lt;div class=&#34;content&#34;&gt; &#xA;     &lt;pre&gt;nix build -f default.nix docs.site&lt;/pre&gt; &#xA;    &lt;/div&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;ulist&#34;&gt; &#xA;    &lt;div class=&#34;title&#34;&gt;&#xA;     Example attributes&#xA;    &lt;/div&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt; &lt;p&gt;Project packages: defined inside &lt;code&gt;plutus-apps.haskell.packages&lt;/code&gt;&lt;/p&gt; &#xA;      &lt;div class=&#34;ulist&#34;&gt; &#xA;       &lt;ul&gt; &#xA;        &lt;li&gt; &lt;p&gt;e.g.&amp;nbsp;&lt;code&gt;plutus-apps.haskell.packages.plutus-pab.components.library&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA;       &lt;/ul&gt; &#xA;      &lt;/div&gt; &lt;/li&gt; &#xA;    &lt;/ul&gt; &#xA;   &lt;/div&gt; &#xA;   &lt;div class=&#34;paragraph&#34;&gt; &#xA;    &lt;p&gt;There are other attributes defined in &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/default.nix&#34;&gt;&lt;code&gt;default.nix&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;   &lt;/div&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt; &#xA;&lt;div class=&#34;sect1&#34;&gt; &#xA; &lt;h2 id=&#34;_licensing&#34;&gt;Licensing&lt;/h2&gt; &#xA; &lt;div class=&#34;sectionbody&#34;&gt; &#xA;  &lt;div class=&#34;paragraph&#34;&gt; &#xA;   &lt;p&gt;You are free to copy, modify, and distribute the Plutus Platform with under the terms of the Apache 2.0 license. See the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/LICENSE&#34;&gt;LICENSE&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/plutus-apps/main/NOTICE&#34;&gt;NOTICE&lt;/a&gt; files for details.&lt;/p&gt; &#xA;  &lt;/div&gt; &#xA; &lt;/div&gt; &#xA;&lt;/div&gt;</summary>
  </entry>
  <entry>
    <title>Simspace/avaleryar</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/Simspace/avaleryar</id>
    <link href="https://github.com/Simspace/avaleryar" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A logical authorization system&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Avaleryar&lt;/h1&gt; &#xA;&lt;p&gt;An implementation of &lt;a href=&#34;http://okmij.org/ftp/papers/Soutei.pdf&#34; title=&#34;Soutei Paper&#34;&gt;Soutei&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Not yet fit for human consumption.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;It&#39;s easier to ask forgiveness than it is to get permission. --Rear Admiral Grace Murray Hopper&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Avaleryar is an implementation of &lt;a href=&#34;http://okmij.org/ftp/papers/Soutei.pdf&#34; title=&#34;Soutei Paper&#34;&gt;Pimlott and Kiselyov&#39;s Soutei&lt;/a&gt; trust-management system, comprising&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;a href=&#34;https://en.wikipedia.org/wiki/Datalog&#34;&gt;Datalog&lt;/a&gt;-like rule language for describing authorization policies (including the evaluator, parser, and a pretty-printer).&lt;/li&gt; &#xA; &lt;li&gt;Convenient library support for extending the policy language with application-specific predicates.&lt;/li&gt; &#xA; &lt;li&gt;A REPL for exploring and debugging policies.&lt;/li&gt; &#xA; &lt;li&gt;An integrated unit-testing system. (NB: It&#39;s pretty bad; we intend to improve it someday).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We have more improvements planned for the future, which you can read about &lt;a href=&#34;https://raw.githubusercontent.com/Simspace/avaleryar/master/#planned-improvements&#34;&gt;below&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;A Quick Example&lt;/h2&gt; &#xA;&lt;p&gt;Soutei is an extremely flexible system, capable of expressing various styles of authorization policies (RBAC, ABAC, other acronyms that end in -BAC). For this introductory example, we&#39;ll write a simple policy for a hypothetical blogging platform. When a user attempts to take an action, the platform will consult the policy to advise it whether or not to allow the operation to proceed. Here&#39;s an informal version of our policy, in English:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Anyone may read a post that&#39;s been published&lt;/li&gt; &#xA; &lt;li&gt;Anyone who is allowed to edit a post may read it&lt;/li&gt; &#xA; &lt;li&gt;The author of a post may edit and publish it&lt;/li&gt; &#xA; &lt;li&gt;The owner of a blog may create new posts&lt;/li&gt; &#xA; &lt;li&gt;A user may leave a comment on a post if they&#39;re permitted to read it, and are friends with the post&#39;s author.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; Anyone may read a post that&#39;s been published&#xA;may(read) :-&#xA;  application says status(published).&#xA;  &#xA;;; Anyone who is allowed to edit a post may read it&#xA;may(read) :-&#xA;  may(edit).&#xA;&#xA;;; The author of a post may edit it...&#xA;may(edit) :-&#xA;  application says user(?user),&#xA;  application says author(?user).&#xA;&#xA;;; ...and publish it&#xA;may(publish) :-&#xA;  application says user(?user),&#xA;  application says author(?user).&#xA;&#xA;;; The owner of a blog may create new posts&#xA;may(create) :-&#xA;  application says user(?user),&#xA;  application says blog-owner(?user).&#xA;&#xA;;; A user may leave a comment on a post if they&#39;re permitted to read it, and are friends with the&#xA;;; post&#39;s author.&#xA;may(comment) :-&#xA;  may(read),&#xA;  application says user(?user),&#xA;  application says author(?author),&#xA;  ?author says friend(?user).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What we have is a collection of &lt;em&gt;rules&lt;/em&gt; describing the circumstances under which a particular action should be permitted. When our blog application wants to know whether a request is authorized, it will ask Soutei. Soutei will then try to prove that the rules permit the access somehow, and let the application know if it succeeded. We&#39;ll discuss this syntax in detail below. Briefly, though, you can decode, say, the third rule (the author of a post may edit and publish it) like this: &#34;&lt;code&gt;edit&lt;/code&gt; is permitted when the application tells us there&#39;s a user (denoted by the &lt;em&gt;variable&lt;/em&gt; &lt;code&gt;?user&lt;/code&gt;) associated with the request, and the application tells us that that user is identically the author of the post&#34;. Observe that &lt;code&gt;:-&lt;/code&gt; (which I&#39;ll pronounce &#34;when&#34;) is like an implication in logic. The second rule (if you&#39;re allowed to edit you&#39;re allowed to read) is just saying that &lt;code&gt;edit&lt;/code&gt; implies &lt;code&gt;read&lt;/code&gt; (or, since the implication goes right-to-left, perhaps &#34;&lt;code&gt;read&lt;/code&gt; is implied by &lt;code&gt;edit&lt;/code&gt;&#34; would be better).&lt;/p&gt; &#xA;&lt;p&gt;Don&#39;t worry if this is still confusing. The example demonstrates several different features of the system. Nonetheless, I hope you agree it&#39;s a relatively compact and clean description of a not-completely-trivial authorization policy.&lt;/p&gt; &#xA;&lt;h2&gt;Using Soutei for Authorization&lt;/h2&gt; &#xA;&lt;p&gt;Architecturally, Soutei provides support for implementing a so-called &#34;policy decision point&#34;. Its job is to advise an application on whether it should permit a request by determining if it complies with its security policy. It does &lt;em&gt;not&lt;/em&gt; provide policy &lt;em&gt;enforcement&lt;/em&gt;. This is to say, you ask whether to allow access, and you get an answer, but it&#39;s still up to you to send the 403 back to the client if that answer was &#34;no&#34;.&lt;/p&gt; &#xA;&lt;p&gt;To make use of the policy engine, you formulate a query and send it along. For instance, when implementing the commenting system for your blog platform, you might ask Soutei &lt;code&gt;may(comment)&lt;/code&gt; (this is concrete syntax, in practice you&#39;ll assemble the query using library functions). Of course, whether commenting is permitted depends on information that Soutei doesn&#39;t have. In our example, that&#39;s at least the identity of the commenting user and the author of the post, and probably some more information necessary to deduce the ability to read the post. Soutei only knows about the rules you&#39;ve given it, so where do these extra facts about this particular commenting operation come from? The application provides them as a parameter to the query. So in our example, the application might ask &#34;is commenting permitted? (and by the way, the post has been published, the current user is &lt;code&gt;bob&lt;/code&gt;, the author of the post is &lt;code&gt;alice&lt;/code&gt;, and &lt;code&gt;alice&lt;/code&gt; says &lt;code&gt;bob&lt;/code&gt; is her friend, in case that helps you make your decision)&#34;.&lt;/p&gt; &#xA;&lt;p&gt;This may be a rather different style of access control than you&#39;re used to, and it requires a bit of a shift in perspective.&lt;/p&gt; &#xA;&lt;p&gt;TODO: Say more here.&lt;/p&gt; &#xA;&lt;h2&gt;Syntax and Semantics&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s a rule about activities:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It says that an activity is permitted (&lt;code&gt;can(?activity)&lt;/code&gt;) when we want to do that activity (&lt;code&gt;want-to(?activity)&lt;/code&gt;). We can see several features of the syntax in this small example. Rules have two parts (a &lt;strong&gt;head&lt;/strong&gt; and a &lt;strong&gt;body&lt;/strong&gt;), separated by the symbol &lt;code&gt;:-&lt;/code&gt; (which I tend to pronounce &#34;when&#34;), and terminated with a period. The head of the rule is &lt;code&gt;can(?activity)&lt;/code&gt;, and the body of the rule is &lt;code&gt;want-to(?activity)&lt;/code&gt;. They use a function-call like notation (called a &lt;strong&gt;literal&lt;/strong&gt;) to describe logical &lt;strong&gt;predicates&lt;/strong&gt; (i.e., &lt;code&gt;can&lt;/code&gt; and &lt;code&gt;want-to&lt;/code&gt;). Predicates are usually denoted with their arity, so rather than writing &lt;code&gt;can&lt;/code&gt;, we&#39;d write &lt;code&gt;can/1&lt;/code&gt;. If we had a predicate describing friendship between two people (&lt;code&gt;friend(alice, bob)&lt;/code&gt;), we&#39;d refer to it as &lt;code&gt;friend/2&lt;/code&gt;. We can also see that &lt;strong&gt;variables&lt;/strong&gt; are written with a prefix question-mark (&lt;code&gt;?activity&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;If this rule were our entire policy, it would never permit us to do anything, because it has no way to establish what we &lt;code&gt;want-to/1&lt;/code&gt; do. In general, determining our psyche&#39;s innermost desires can be complicated, and we could write a bunch of complicated rules to define &lt;code&gt;want-to/1&lt;/code&gt;. But let&#39;s just assume we&#39;re blessed with unusual self awareness, and add a special kind of rule, called a &lt;strong&gt;fact&lt;/strong&gt;, that will express our yearning:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;  &#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We can see that a fact is a rule without a body. We can also see that comments are introduced with semicolons and extend to the end of the line. This policy will now permit a query of the form &lt;code&gt;can(dance)&lt;/code&gt;. Let&#39;s look at how that deduction works. We ask Soutei &lt;code&gt;can(dance)&lt;/code&gt;, and it reasons: &#34;I can prove &lt;code&gt;can(dance)&lt;/code&gt; if, when &lt;code&gt;?activity&lt;/code&gt; is &lt;code&gt;dance&lt;/code&gt;, I can prove &lt;code&gt;want-to(dance)&lt;/code&gt;. Oh! and I can prove &lt;code&gt;want-to(dance)&lt;/code&gt; because I know that for fact!&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Notice that &lt;code&gt;dance&lt;/code&gt; isn&#39;t a variable, it&#39;s just a symbol. We could have written &lt;code&gt;want-to(&#34;dance&#34;)&lt;/code&gt;, using double-quotes to delimit the string, but it&#39;s unnecessary (and un-idiomatic) when the string doesn&#39;t contain spaces or commas.&lt;/p&gt; &#xA;&lt;p&gt;Now suppose we want to say that we can dance if we want to, act if we want to, but sing under any circumstances? (This whole example will probably make more sense with a bit more &lt;a href=&#34;https://www.youtube.com/watch?v=AjPau5QYtYs&#34;&gt;context&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What &lt;code&gt;can/1&lt;/code&gt; we do now? Well, we &lt;code&gt;can(dance)&lt;/code&gt;, we &lt;code&gt;can(dance)&lt;/code&gt;, we &lt;code&gt;can(sing)&lt;/code&gt;, and we &lt;code&gt;can(act)&lt;/code&gt;. This shows that we&#39;re able to express different ways to conclude that an action is permitted by writing multiple rules for the same predicate (remember that facts are rules without bodies). Rule bodies aren&#39;t limited to a single literal. Let&#39;s add an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&#xA;;; we only want to go when the night is young, and so am I&#xA;want-to(go) :-&#xA;  time-of(night, young),&#xA;  age-of(me, young).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We require every predicate in the body of a rule to succeed in order for the rule to succeed. So &lt;code&gt;want-to(go)&lt;/code&gt; needs both &lt;code&gt;time-of(night, young)&lt;/code&gt; and &lt;code&gt;age-of(me, young)&lt;/code&gt; to be proven in order for this rule to prove that &lt;code&gt;want-to(go)&lt;/code&gt;. Of course, what we have so far isn&#39;t enough to prove &lt;code&gt;can(go)&lt;/code&gt; yet, because &lt;code&gt;age-of/2&lt;/code&gt; and &lt;code&gt;time-of/2&lt;/code&gt; aren&#39;t actually defined anywhere. This isn&#39;t considered an error; it simply means that an attempt to prove &lt;code&gt;want-to(go)&lt;/code&gt; will fail. (As a reminder, there&#39;s no special meaning attached to &lt;code&gt;night&lt;/code&gt;, &lt;code&gt;young&lt;/code&gt; or &lt;code&gt;me&lt;/code&gt;---they&#39;re just symbols I&#39;m using to demonstrate the syntax).&lt;/p&gt; &#xA;&lt;p&gt;It may be occurring to you by now that these rules don&#39;t actually depend on anything---the assertion we&#39;re developing (a collection of rules like this is called an &lt;strong&gt;assertion&lt;/strong&gt;---an assertion is kind of like a module or a namespace) will always prove exactly the same things. A rule may consult predicates in &lt;em&gt;other&lt;/em&gt; assertions than the one in which it&#39;s written. Let&#39;s hypothesize two new assertions, &lt;code&gt;clock&lt;/code&gt; and &lt;code&gt;bio&lt;/code&gt;, that contain chronological and biographical rules, respectively:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&#xA;;; we only want to go when the night is young, and so am and I&#xA;want-to(go) :-&#xA;  clock says time-of(night, young),&#xA;  bio says age-of(me, young).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;ve changed the body of our &lt;code&gt;want-to(go)&lt;/code&gt; rule by adding &lt;code&gt;clock says time-of(night, young)&lt;/code&gt; and &lt;code&gt;bio says age-of(me, young)&lt;/code&gt;. This tells Soutei to try and resolve &lt;code&gt;time-of/2&lt;/code&gt; in the assertion named &lt;code&gt;clock&lt;/code&gt; and &lt;code&gt;age-of/2&lt;/code&gt; in the assertion named &lt;code&gt;bio&lt;/code&gt;. By &#34;resolve a predicate in an assertion&#34;, I mean that Soutei will load all the rules in that assertion, and continue trying to satisfy the predicate using the rules in &lt;em&gt;that&lt;/em&gt; assertion. Of course, if any rule in this new assertion has a body literal of the form &lt;code&gt;assertion says pred(...)&lt;/code&gt;, then Soutei will load the rules in &lt;code&gt;assertion&lt;/code&gt; and resolve &lt;code&gt;pred&lt;/code&gt; there.&lt;/p&gt; &#xA;&lt;p&gt;Other than a short discussion about variable binding and another on so-called &#34;native predicates&#34;, we&#39;ve now looked (albeit briefly) at the entirety of the semantics of the language. I point that out because in order to continue our Safety Dance, we&#39;ll need to introduce a convention that &lt;code&gt;avaleryar&lt;/code&gt; (following the original paper) imposes: the &lt;code&gt;application&lt;/code&gt; assertion. Semantically, the &lt;code&gt;application&lt;/code&gt; assertion is no different than any other. However, when &lt;code&gt;avaleryar&lt;/code&gt; runs a query, it accepts a collection of facts as, effectively, parameters that are made available to our rules through the &lt;code&gt;application&lt;/code&gt; assertion. (NB: I&#39;m doing my best to distinguish Soutei-the-language from &lt;code&gt;avaleryar&lt;/code&gt;-the-implementation-of-Soutei-the-language, I hope this isn&#39;t too confusing). So to demonstrate, let&#39;s write a needlessly complicated rule determining whether the dancing we can do is, properly a Safety Dance.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;can(?activity) :-&#xA;  want-to(?activity).&#xA;&#xA;can(sing).&#xA;&#xA;;; we can dance if we want to&#xA;want-to(dance).&#xA;&#xA;;; we can act if we want to&#xA;want-to(act).&#xA;&#xA;;; we only want to go when the night is young, and so am and I&#xA;want-to(go) :-&#xA;  clock says time-of(night, young),&#xA;  bio says age-of(me, young).&#xA;&#xA;;; we can overextend the efficacy a questionable pop-culture reference&#xA;safety(?activity) :-&#xA;  can(?activity),&#xA;  application says out-of(control, everything),&#xA;  application says doing-it(from, pole),&#xA;  application says doing-it(to, pole),&#xA;  application says looking-at(hands, ?somebody),&#xA;  ?somebody says taking(the-chance).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This (completely inane, it&#39;s getting pretty late as I write this---the examples section below won&#39;t be this silly) new rule uses a bunch of information provided by the application querying for authorization advice (&lt;code&gt;application says ...&lt;/code&gt;) in addition to some locally written rules (&lt;code&gt;can(?activity)&lt;/code&gt;). It also uses an assertion &lt;em&gt;determined by the query&lt;/em&gt; (&lt;code&gt;?somebody says taking(the-chance)&lt;/code&gt;) to ultimately establish that indeed, &lt;code&gt;safety(dance)&lt;/code&gt;. The ability to dynamically choose different assertions in which to reason is a powerfully expressive feature of Soutei.&lt;/p&gt; &#xA;&lt;p&gt;TODO: unification and native predicates.&lt;/p&gt; &#xA;&lt;p&gt;TODO: why encoding &#34;&#39;Cause your friends don&#39;t dance, and if they don&#39;t dance, then they&#39;re no friends of mine&#34; isn&#39;t (naively) possible.&lt;/p&gt; &#xA;&lt;p&gt;TODO: mode checking.&lt;/p&gt; &#xA;&lt;p&gt;TODO: monotonicity.&lt;/p&gt; &#xA;&lt;h2&gt;Examples and Advice&lt;/h2&gt; &#xA;&lt;h3&gt;Example: Unix File Permissions&lt;/h3&gt; &#xA;&lt;p&gt;Here is a simplified version of file permissions on Unix. We assume that the application will tell us what the file is, that there&#39;s an assertion named after the file that knows what permissions are set on it, who owns it, and which group it&#39;s associated with, as well as that each group has an assertion named after it that can tell us whether a user is a member of that group. For example, we might have an assertion for some file that looked like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; assertion for /path/to/some/file&#xA;&#xA;owner(mary).&#xA;group(wheel).&#xA;perm(user, read).&#xA;perm(user, write).&#xA;perm(user, execute).&#xA;perm(group, read).&#xA;perm(group, execute).&#xA;perm(other, read).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would represent a file owned by &lt;code&gt;mary&lt;/code&gt;, with group &lt;code&gt;wheel&lt;/code&gt;, with permissions &lt;code&gt;754&lt;/code&gt; (as in, &lt;code&gt;chmod 754 /path/to/some/file&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; allow ?access when the user is the owner and ?access is enabled for them.&#xA;;; NB: The word &#34;user&#34; appears with three different meanings in this rule.  The application fact&#xA;;; &#39;user/1&#39;, which indicates the user accessing the file, the variable &#39;?user&#39;, which has that&#xA;;; user bound to it, and the symbol &#39;user&#39; in &#39;perm(user, ?access)&#39;, which refers to user&#xA;;; permissions on a file in the sense of &#39;chmod u+x $FILE&#39;.&#xA;may(?access) :-&#xA;  application says file(?file),&#xA;  application says user(?user),&#xA;  ?file says owner(?user),&#xA;  ?file says perm(user, ?access).&#xA;&#xA;;; allow ?access when it&#39;s enabled on the file, the file is associated with a group ?group,&#xA;;; and the user is a member of ?group.&#xA;may(?access) :-&#xA;  application says file(?file),&#xA;  application says user(?user),&#xA;  ?file says group(?group),&#xA;  ?group says member(?user),&#xA;  ?file says perm(group, ?access).&#xA;  &#xA;;; allow ?access if it&#39;s enabled for all users (&#34;other&#34; permissions)&#xA;may(?access) :-&#xA;  application says file(?file),&#xA;  ?file says perm(other, ?access).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Unix permissions are more sophisticated than this---for instance, if you have &lt;code&gt;read&lt;/code&gt; access to a directory, you are permitted to see the &lt;em&gt;names&lt;/em&gt; of the files in that directory, but not other metadata (roughly, you&#39;re allowed to see the output of &lt;code&gt;ls&lt;/code&gt;, but not &lt;code&gt;ls -l&lt;/code&gt;) unless you also have &lt;code&gt;execute&lt;/code&gt; permission on the directory as well. A more nuanced version of this policy would need to know what metadata is being sought by the application, and probably require some native predicates to compute the directory part of a file path.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Role-Based Access Control (RBAC)&lt;/h3&gt; &#xA;&lt;p&gt;In RBAC, we have a discrete set of primitive &lt;em&gt;permissions&lt;/em&gt;, a collection of named &lt;em&gt;roles&lt;/em&gt; each of which is a subset of the permissions, and an assignment of users to (possibly multiple) roles. To determine if a user is permitted to take some action, we check that the user has been assigned some role that contains the appropriate permission.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-prolog&#34;&gt;;; permissions&#xA;&#xA;perm(manage-users).&#xA;perm(manage-computers).&#xA;perm(access-lab).&#xA;perm(run-experiment).&#xA;perm(create-experiment).&#xA;perm(approve-experiment).&#xA;&#xA;;; roles&#xA;&#xA;; grad students get to do all the work&#xA;role(grad-student, access-lab).&#xA;role(grad-student, run-experiment).&#xA;&#xA;; professors have at least the permissions of grad students, plus they can&#xA;; create experiments.&#xA;role(professor, ?perm) :-&#xA;  role(grad-student, ?perm).&#xA;role(professor, create-experiment).&#xA;&#xA;; poison control should probably be allowed into the lab, just in case&#xA;role(poison-control, access-lab).&#xA;&#xA;; the IT department needs to access the lab to manage its computers&#xA;role(it-support, access-lab).&#xA;role(it-support, manage-computers).&#xA;&#xA;; the dean has nothing to do with the science, but they still sign the&#xA;; checks and assign personel&#xA;role(dean, approve-experiment).&#xA;role(dean, manage-users).&#xA;&#xA;;; users&#xA;&#xA;has-role(bill, grad-student).&#xA;has-role(clara, professor).&#xA;has-role(dmitri, grad-student).&#xA;has-role(dmitri, poison-control). ; dmitri is a volunteer EMT&#xA;has-role(emily, it-support).&#xA;has-role(fabian, dean).&#xA;&#xA;;; RBAC&#xA;&#xA;may(?perm) :-&#xA;  application says user(?user),&#xA;  has-role(?user, ?role),&#xA;  role(?role, ?perm).&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Example: Access Control Lists (ACLs)&lt;/h3&gt; &#xA;&lt;h3&gt;Advice: Don&#39;t use ACLs&lt;/h3&gt; &#xA;&lt;h2&gt;Using Avaleryar&lt;/h2&gt; &#xA;&lt;p&gt;TODO: tutorial module.&lt;/p&gt; &#xA;&lt;h2&gt;Glossary&lt;/h2&gt; &#xA;&lt;h2&gt;Planned Improvements&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;An interactive debugger&lt;/li&gt; &#xA; &lt;li&gt;A better persistence story (to make dynamic rule submission usable)&lt;/li&gt; &#xA; &lt;li&gt;Assertion signatures (enabling the use of variables for native assertions)&lt;/li&gt; &#xA; &lt;li&gt;Some kind of &lt;a href=&#34;https://en.wikipedia.org/wiki/Abductive_logic_programming&#34;&gt;abduction&lt;/a&gt; (to offer explanations of query failure)&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>bitnomial/prometheus</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/bitnomial/prometheus</id>
    <link href="https://github.com/bitnomial/prometheus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Prometheus.io Haskell client.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Prometheus Haskell Client&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/bitnomial/prometheus&#34;&gt;&lt;img src=&#34;https://travis-ci.com/bitnomial/prometheus.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/prometheus&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/prometheus.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A simple and modern, type safe, performance focused, idiomatic Haskell client for &lt;a href=&#34;http://prometheus.io&#34;&gt;Prometheus&lt;/a&gt; monitoring. Specifically there is no use of unsafe IO or manual ByteString construction from lists of bytes. Batteries-included web server.&lt;/p&gt; &#xA;&lt;p&gt;A key design element of this library is that the RegistryT monad transformer is only required for registering new time series. Once the time series is registered, new data samples may just be added in the IO monad.&lt;/p&gt; &#xA;&lt;p&gt;Note: Version 0.* supports Prometheus v1.0 and version 2.* supports Prometheus v2.0.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/prometheus&#34;&gt;Hackage Package&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://github.com/bitnomial/prometheus&#34;&gt;Github Repo&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage Example&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;{-# LANGUAGE OverloadedStrings #-}&#xA;&#xA;module Example where&#xA;&#xA;import           Control.Monad.IO.Class                         (liftIO)&#xA;import           System.Metrics.Prometheus.Http.Scrape          (serveMetricsT)&#xA;import           System.Metrics.Prometheus.Concurrent.RegistryT&#xA;import           System.Metrics.Prometheus.Metric.Counter       (inc)&#xA;import           System.Metrics.Prometheus.MetricId&#xA;&#xA;main :: IO ()&#xA;main = runRegistryT $ do&#xA;    -- Labels can be defined as lists or added to an empty label set&#xA;    connectSuccessGauge &amp;lt;- registerGauge &#34;example_connections&#34; (fromList [(&#34;login&#34;, &#34;success&#34;)])&#xA;    connectFailureGauge &amp;lt;- registerGauge &#34;example_connections&#34; (addLabel &#34;login&#34; &#34;failure&#34; mempty)&#xA;    connectCounter &amp;lt;- registerCounter &#34;example_connection_total&#34; mempty&#xA;    latencyHistogram &amp;lt;- registerHistogram &#34;example_round_trip_latency_ms&#34; mempty [10, 20..100]&#xA;&#xA;    liftIO $ inc connectCounter -- increment a counter&#xA;&#xA;    -- [...] pass metric handles to the rest of the app&#xA;&#xA;    serveMetricsT 8080 [&#34;metrics&#34;] -- http://localhost:8080/metric server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Advanced Usage&lt;/h2&gt; &#xA;&lt;p&gt;A &lt;code&gt;Registry&lt;/code&gt; and &lt;code&gt;StateT&lt;/code&gt;-based &lt;code&gt;RegistryT&lt;/code&gt; are available for unit testing or generating lists of &lt;code&gt;[IO a]&lt;/code&gt; actions that can be &lt;code&gt;sequenced&lt;/code&gt; and returned from pure code to be applied.&lt;/p&gt; &#xA;&lt;h2&gt;Concurrency Model&lt;/h2&gt; &#xA;&lt;p&gt;Metrics are &#34;values&#34; and the Registry is the map of &#34;name_labels&#34; to metric &#34;keys&#34;.&lt;/p&gt; &#xA;&lt;p&gt;Metrics may be created/registered at any point, not just at start up, in the &lt;code&gt;RegistryT&lt;/code&gt; monad transformer. Thread the &lt;code&gt;RegistryT&lt;/code&gt; through your transformer stack to tell the type system you intend to register new metrics in that call stack. The &lt;code&gt;RegistryT&lt;/code&gt; has a thread safe version in the &lt;code&gt;Concurrent&lt;/code&gt; module.&lt;/p&gt; &#xA;&lt;p&gt;The metrics are thread safe on their own and do not require locking the entire registry to update them. They use high performance check-and-set atomic primitives. This is because metrics may be updated many times in between scrapes where the Reigstry needs to be lock. You do NOT want to lock all the metrics just to update one.&lt;/p&gt; &#xA;&lt;p&gt;The scraping operation of the server to collect all the metrics locks the registry to ensure no new metrics are being created/keyed in a race with the scrape.&lt;/p&gt; &#xA;&lt;h2&gt;Tasks&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement help docstrings.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement GHC-specific metrics.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Implement &lt;a href=&#34;https://github.com/prometheus/client_golang/raw/master/prometheus/summary.go&#34;&gt;summary metric&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Encode name and labels on register.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Implement ReaderT for Concurrent Registry.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Library documentation and example.&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; &lt;a href=&#34;http://prometheus.io/docs/concepts/data_model/#metric-names-and-labels&#34;&gt;Name and label validation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>Simspace/on-error</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/Simspace/on-error</id>
    <link href="https://github.com/Simspace/on-error" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Clearly-delineated error-handling&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;on-error: clearly-delineated error-handling&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.com/simspace/on-error&#34;&gt;&lt;img src=&#34;https://travis-ci.com/simspace/on-error.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Error-handling code is messy, but if we want to provide good error messages, we should still take the time to do it right. &lt;code&gt;on-error&lt;/code&gt; provides a naming convention which clearly distinguishes error-handling code from the rest of the code, thereby allowing developers to only pay attention to the error-handling code when they want to do so.&lt;/p&gt; &#xA;&lt;p&gt;The naming convention is as follows:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;on[Condition]ThrowError&lt;/code&gt; functions detect errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[transform]Error&lt;/code&gt; functions transform errors&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;onError[Action]&lt;/code&gt; functions handle errors&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Furthermore, those functions are designed to be composed using &lt;code&gt;(.)&lt;/code&gt; into a clearly-delineated block of error-handling code. Here is an example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countDogs :: Response Int&#xA;countDogs = onErrorCatch sendErrorStatus&#xA;          . onNothingThrowError 500&#xA;       =&amp;lt;&amp;lt;$ liftIO&#xA;          $ fetchCount &#34;http://example.com/dogs/count&#34;&#xA;&#xA;fetchCount :: Text -&amp;gt; IO (Maybe Int)&#xA;sendErrorStatus :: Int -&amp;gt; Response a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Everything before the &lt;code&gt;(=&amp;lt;&amp;lt;$)&lt;/code&gt; (which is just a low-precedence version of &lt;code&gt;(=&amp;lt;&amp;lt;)&lt;/code&gt;) is error-handling code, and everything after it is normal code. Once our brains have learned to recognize those error-handling blocks as such, we can take a brief look at the above definition and quickly home in to the important part: &lt;code&gt;countDogs&lt;/code&gt; calls &lt;code&gt;fetchCount&lt;/code&gt; at a specific URL, while the rest of the code embeds this &lt;code&gt;IO&lt;/code&gt; computation into a &lt;code&gt;Response&lt;/code&gt; computation, and deals with the error cases somehow. This is often a good enough level of understanding, but if later on we do need to understand the error-handling code, we can take a closer look and determine that the &lt;code&gt;Nothing&lt;/code&gt; case is handled by calling &lt;code&gt;sendErrorStatus 500&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Without &lt;code&gt;on-error&lt;/code&gt;, the implementation of &lt;code&gt;countDogs&lt;/code&gt; might look something like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countDogs&#39; :: Response Int&#xA;countDogs&#39; = do&#xA;  r &amp;lt;- liftIO $ fetchCount &#34;http://example.com/dogs/count&#34;&#xA;  case r of&#xA;    Nothing -&amp;gt; sendErrorStatus 500&#xA;    Just count -&amp;gt; pure count&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countDogs&#39;&#39; :: Response Int&#xA;countDogs&#39;&#39; = join&#xA;            . fmap (maybe (sendErrorStatus 500) pure)&#xA;            . liftIO&#xA;            $ fetchCount &#34;http://example.com/dogs/count&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;countDogs&#39;&lt;/code&gt; is quite clear, but you only realize that the second part of the function only performs error-handling after you have already read and understood that part. &lt;code&gt;countDogs&#39;&#39;&lt;/code&gt; uses a different style in which the core &lt;code&gt;fetchCount&lt;/code&gt; computation is gradually transformed into a &lt;code&gt;Response&lt;/code&gt; computation, but again, it&#39;s unclear whether some of those transformations affect the happy path or just the error cases until after you&#39;ve read and understood those transformations.&lt;/p&gt; &#xA;&lt;h2&gt;Detecting errors&lt;/h2&gt; &#xA;&lt;p&gt;Functions which can fail do so in one of three ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;By returning a special value such as &lt;code&gt;Nothing&lt;/code&gt; or &lt;code&gt;Either&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By signaling failure using some monadic effect, such &lt;code&gt;ExceptT.throwE&lt;/code&gt;, &lt;code&gt;MonadError.throwError&lt;/code&gt;, or &lt;code&gt;MonadFail.fail&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;By throwing an exception.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;In each case, we want to detect the error condition and to convert it to a value of some type &lt;code&gt;e&lt;/code&gt; representing the errors which we know can happen within the current code. If you only plan to log the error or to display it to the user, &lt;code&gt;Text&lt;/code&gt; is a good enough representation, but if you plan to handle some of those errors later on, &lt;code&gt;SomeException&lt;/code&gt; and &lt;code&gt;Text&lt;/code&gt; are terrible representations because they don&#39;t give your callers any information about the set of error cases they might want to handle. If you want to do error-&lt;em&gt;handling&lt;/em&gt;, not just error-displaying, a sum type would be a better choice for &lt;code&gt;e&lt;/code&gt;. See &lt;a href=&#34;https://raw.githubusercontent.com/Simspace/on-error/master/#handling-errors&#34;&gt;Handling errors&lt;/a&gt; for some concrete suggestions.&lt;/p&gt; &#xA;&lt;p&gt;In any case, here&#39;s how to obtain an &lt;code&gt;e&lt;/code&gt; in all three cases.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;Nothing&lt;/code&gt;, use &lt;code&gt;onNothingThrowError&lt;/code&gt; with a value of type &lt;code&gt;e&lt;/code&gt; to be thrown if the value is &lt;code&gt;Nothing&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;Left x&lt;/code&gt;, use &lt;code&gt;onLeftThrowError&lt;/code&gt;. It uses &lt;code&gt;x&lt;/code&gt; as the error, which you can then convert to an &lt;code&gt;e&lt;/code&gt; using &lt;code&gt;mapError&lt;/code&gt;. For other, less common values, define a custom &lt;code&gt;on[Condition]ThrowError&lt;/code&gt; function in order to avoid polluting your non-error-handling code with error-handling concerns such as converting to &lt;code&gt;Maybe&lt;/code&gt; or &lt;code&gt;Either&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For &lt;code&gt;ExceptT.throwE&lt;/code&gt; and &lt;code&gt;MonadError.throwError&lt;/code&gt;, there is nothing to do, because &lt;code&gt;Control.Monad.Trans.OnError&lt;/code&gt; already uses &lt;code&gt;ExceptT&lt;/code&gt; to propagate the error upwards. The &lt;code&gt;Control.Monad.OnError&lt;/code&gt; API is slightly different in that regard, see the &lt;a href=&#34;https://raw.githubusercontent.com/Simspace/on-error/master/#propagating-and-transforming-errors&#34;&gt;Propagating and transforming errors&lt;/a&gt; section for details.&lt;/p&gt; &lt;p&gt;For &lt;code&gt;MonadFail.fail&lt;/code&gt;, the behaviour depends on the monad. Due to a design wart, calling &lt;code&gt;fail&lt;/code&gt; often throws an exception, even for error-tracking monads such as &lt;code&gt;Either&lt;/code&gt; and &lt;code&gt;ExceptT&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;For exceptions, try to catch them as close to their source as possible and to rethrow them as errors using one of the two other methods. Be careful to only catch the exceptions you know about; blindly catching all exceptions and propagating them up as a &lt;code&gt;SomeException&lt;/code&gt; or a &lt;code&gt;Text&lt;/code&gt; will not improve the quality of your error handling, it will only decrease it since your callers won&#39;t know what to handle and it will be much more difficult to make sure the generated error messages are valid english sentences. It is better to let unknown exceptions propagate upwards as exceptions, not errors, and to handle exceptions generically at the top-level of your program. Because of asynchronous exceptions, all the code you write has to be exception-safe anyway.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Propagating and transforming errors&lt;/h2&gt; &#xA;&lt;p&gt;Once an error is detected, the computation stops and the error gets propagated up the stack until it gets handled. &lt;code&gt;on-error&lt;/code&gt;&#39;s two modules provide two alternate ways of doing that:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;Control.Monad.Trans.OnError&lt;/code&gt; is based on &lt;code&gt;transformers&lt;/code&gt;, in which case &lt;code&gt;ExceptT&lt;/code&gt; should be the outermost transformer.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Control.Monad.OnError&lt;/code&gt; is based on &lt;code&gt;mtl&lt;/code&gt;, in which case the computation should be polymorphic in &lt;code&gt;m&lt;/code&gt; and have a &lt;code&gt;MonadError e m&lt;/code&gt; constaint.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Learning &lt;code&gt;Control.Monad.Trans.OnError&lt;/code&gt; first is recommended, because its type signatures are more intuitive. The type signatures of the &lt;code&gt;Control.Monad.OnError&lt;/code&gt; module are a bit misleading because they often ask for an &lt;code&gt;ExceptT&lt;/code&gt; computation when a computation which is polymorphic in &lt;code&gt;m&lt;/code&gt; would be a better choice. For example, the type of &lt;code&gt;Control.Monad.OnError.mapError&lt;/code&gt; is&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;mapError :: MonadError e&#39; m =&amp;gt; (e -&amp;gt; e&#39;) -&amp;gt; ExceptT e m a -&amp;gt; m a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And so we might be tempted to give it an &lt;code&gt;ExceptT e m a&lt;/code&gt; computation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countHumans :: forall m. (MonadError Text m, MonadIO m) =&amp;gt; m Int&#xA;countHumans = mapError (&#34;while counting humans: &#34; &amp;lt;&amp;gt;) body&#xA;  where&#xA;    body :: ExceptT Text m Int&#xA;    body = do&#xA;      liftIO $ putStrLn &#34;counting humans...&#34;&#xA;      throwE &#34;humans are not pets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This typechecks, but using such a concrete monad stack doesn&#39;t fit well with the &lt;code&gt;mtl&lt;/code&gt; style for which &lt;code&gt;Control.Monad.OnError&lt;/code&gt; is designed. It would be better to use a polymorphic monad stack:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;countHumans :: forall m. (MonadError Text m, MonadIO m) =&amp;gt; m Int&#xA;countHumans = mapError (&#34;while counting humans: &#34; &amp;lt;&amp;gt;) body&#xA;  where&#xA;    body :: forall n. (MonadError Text n, MonadIO n) =&amp;gt; n Int&#xA;    body = do&#xA;      liftIO $ putStrLn &#34;counting humans...&#34;&#xA;      throwError &#34;humans are not pets&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This typechecks as well, since &lt;code&gt;n&lt;/code&gt; automatically gets specialized to &lt;code&gt;ExceptT Text m&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The reason &lt;code&gt;mapError&lt;/code&gt; specializes the &lt;code&gt;n&lt;/code&gt; of its input computation in this way is that changing the type of the error being propagated is not an effectful action in any monad, it is instead a translation from an &lt;code&gt;ExceptT e&lt;/code&gt; computation to an &lt;code&gt;ExceptT e&#39;&lt;/code&gt; computation. By specializing &lt;code&gt;n a&lt;/code&gt; to &lt;code&gt;ExceptT e m a&lt;/code&gt;, we can strip off the &lt;code&gt;ExceptT e&lt;/code&gt; layer to obtain an &lt;code&gt;m (Either e a)&lt;/code&gt;, at which point we can convert the &lt;code&gt;e&lt;/code&gt; to an &lt;code&gt;e&#39;&lt;/code&gt; and rethrow it using &lt;code&gt;m&lt;/code&gt;&#39;s &lt;code&gt;MonadError&lt;/code&gt; instance. This means that &lt;code&gt;m&lt;/code&gt; will itself be instantiated to a monad stack containing an &lt;code&gt;ExceptT e&#39;&lt;/code&gt; at some point, and so if the &lt;code&gt;n a&lt;/code&gt; computation was using a concrete monad stack, it would look something like &lt;code&gt;ExceptT e (ExceptT e&#39; IO) a&lt;/code&gt;. This is a pretty unusual and unintuitive monad stack, which is another reason to prefer writing it as a computation which is polymorphic in &lt;code&gt;n&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Handling errors&lt;/h2&gt; &#xA;&lt;p&gt;While you can use the &lt;code&gt;onError[Action]&lt;/code&gt; functions to handle the errors in whichever way you please, here are some concrete recommendations.&lt;/p&gt; &#xA;&lt;p&gt;For a function which looks up a key in a &lt;code&gt;Map&lt;/code&gt;, it makes sense to return a &lt;code&gt;Maybe&lt;/code&gt; to denote the fact that the key was not found. The &lt;code&gt;Nothing&lt;/code&gt; case isn&#39;t necessarily an error case; perhaps the caller wants to insert a new value at that key, and the &lt;code&gt;Nothing&lt;/code&gt; case is actually the success case because there isn&#39;t an existing, conflicting value at that key.&lt;/p&gt; &#xA;&lt;p&gt;So when we are very close to the source of the &#34;error&#34;, it&#39;s not yet clear whether that error is problematic or not, because we do not yet have enough context. So we propagate the information upwards, in the hope that the caller has more context.&lt;/p&gt; &#xA;&lt;p&gt;If we are manipulating a graph represented as a &lt;code&gt;Map&lt;/code&gt; from node to neighbours, we know that our invariant is that all the neighbour nodes must be present in the &lt;code&gt;Map&lt;/code&gt;. So if we attempt to perform a lookup and we receive a &lt;code&gt;Nothing&lt;/code&gt;, we know that we have a bug somewhere which accidentally breaks the invariant. There is nothing the caller can do about this, the only solution is to abort and to inform the programmer that a bug needs to be fixed. Since there is nothing the caller can do, it is not useful to tell it that this particular error case could happen, and so for bugs, I don&#39;t recommend propagating the error up using &lt;code&gt;on-error&lt;/code&gt;, instead I recommend failing with an exception, for example using &lt;code&gt;error &#34;invariant violated: neighbour not in Map&#34;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Keeping track of such invariants in order to know when to convert unlikely errors into exceptions which will hopefully never be thrown is an important part of error-handling, because it allows you to reduce the number of error cases you are propagating up. Otherwise, as we go up the stack, functions have more and more sub-calls beneath them, and so more and more error cases would accumulate, and handling all those cases would become unmanageable. I recommend trying to keep the number of error cases small at all levels.&lt;/p&gt; &#xA;&lt;p&gt;At the top-level, the caller is the user. For them, a sum type describing all the possible error cases is less useful; what they need is a clear error message. So once we have enough context to know that an error cannot be handled by the code and will have to be displayed to the user, I recommend converting the value representing the error to &lt;code&gt;Text&lt;/code&gt;, and to propagate that error message upwards. With judicious uses of &lt;code&gt;annotateError&lt;/code&gt;, this error message can be annotated with some contextual information clarifying where the error has occurred.&lt;/p&gt; &#xA;&lt;p&gt;For example, if the user provides a pair of keys so we can perform some lookup in a nested &lt;code&gt;Map&lt;/code&gt; of &lt;code&gt;Map&lt;/code&gt;s, we&#39;ll have to tell the user which key wasn&#39;t found and in which &lt;code&gt;Map&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;lookupM :: MonadError Text m&#xA;        =&amp;gt; Int -&amp;gt; Map Int a -&amp;gt; m a&#xA;lookupM k = onNothingThrowError (&#34;key &#34; &amp;lt;&amp;gt; showt k &amp;lt;&amp;gt; &#34; not found&#34;)&#xA;          . Map.lookup k&#xA;&#xA;nestedLookupM :: MonadError Text m&#xA;              =&amp;gt; (Int, Int) -&amp;gt; Map Int (Map Int a) -&amp;gt; m a&#xA;nestedLookupM (k1, k2) mm = do&#xA;  m &amp;lt;- annotateError &#34;outer map&#34; $ lookupM k1 mm&#xA;  a &amp;lt;- annotateError &#34;inner map&#34; $ lookupM k2 m&#xA;  pure a&#xA;&#xA;-- |&#xA;-- &amp;gt;&amp;gt;&amp;gt; nestedLookupM (3,4) nestedMap :: Either Text Int&#xA;-- Left &#34;outer map: key 3 not found&#34;&#xA;-- &amp;gt;&amp;gt;&amp;gt; nestedLookupM (1,4) nestedMap :: Either Text Int&#xA;-- Left &#34;inner map: key 4 not found&#34;&#xA;nestedMap :: Map Int (Map Int Int)&#xA;nestedMap = Map.fromList [(1, Map.fromList [(2, 42)])]&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>cdepillabout/servant-rawm</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/cdepillabout/servant-rawm</id>
    <link href="https://github.com/cdepillabout/servant-rawm" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Effectful Raw handler for Servant servers.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Servant.RawM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/cdepillabout/servant-rawm/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/cdepillabout/servant-rawm/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/servant-rawm.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/servant-rawm&#34;&gt;&lt;img src=&#34;http://stackage.org/package/servant-rawm/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/servant-rawm&#34;&gt;&lt;img src=&#34;http://stackage.org/package/servant-rawm/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt; &lt;img src=&#34;https://img.shields.io/badge/license-BSD3-blue.svg?sanitize=true&#34; alt=&#34;BSD3 license&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;servant-rawm&lt;/code&gt; provides a way to embed a WAI &lt;a href=&#34;https://hackage.haskell.org/package/wai-3.2.1.1/docs/Network-Wai.html#t:Application&#34;&gt;&lt;code&gt;Application&lt;/code&gt;&lt;/a&gt; in a Servant handler. It is more convenient and powerful than the &lt;a href=&#34;https://hackage.haskell.org/package/servant-0.11/docs/Servant-API-Raw.html#t:Raw&#34;&gt;&lt;code&gt;Raw&lt;/code&gt;&lt;/a&gt; type provided by &lt;a href=&#34;https://hackage.haskell.org/package/servant&#34;&gt;&lt;code&gt;servant&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html&#34;&gt;Haddocks on Hackage for &lt;code&gt;servant-rawm&lt;/code&gt;&lt;/a&gt; for an explanation of how to use the &lt;a href=&#34;https://hackage.haskell.org/package/servant-rawm/docs/Servant-RawM.html#t:RawM&#34;&gt;&lt;code&gt;RawM&lt;/code&gt;&lt;/a&gt; type.&lt;/p&gt; &#xA;&lt;p&gt;After &lt;code&gt;servant-rawm&lt;/code&gt; 1.0.0.0, the implementations of the &lt;code&gt;RawM&lt;/code&gt; endpoint are divided into &lt;code&gt;servant-rawm-client&lt;/code&gt;, &lt;code&gt;servant-rawm-docs&lt;/code&gt;, and &lt;code&gt;servant-rawm-server&lt;/code&gt; to avoid introducing unnecessary dependencies and reduce the compilation overhead.&lt;/p&gt; &#xA;&lt;p&gt;You will need to add either of the implementations to your dependencies, and import the corresponding implementation (&lt;code&gt;Servant.RawM.Server&lt;/code&gt;, &lt;code&gt;Servant.RawM.Client&lt;/code&gt;, or &lt;code&gt;Servant.RawM.Docs&lt;/code&gt;) for the &lt;code&gt;RawM&lt;/code&gt; endpoint to function correctly.&lt;/p&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;There is code for an example server, client, and documentation located in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/&#34;&gt;&lt;code&gt;servant-rawm-examples-and-tests/example/&lt;/code&gt;&lt;/a&gt;. The following section describes how to run the example executables.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;The example executables can be built with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack build servant-rawm-examples-and-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;After building, the server can be run with the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This runs a server on port 8201 serving files in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/files/&#34;&gt;&lt;code&gt;servant-rawm-examples-and-tests/example/files/&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It can be accessed from &lt;code&gt;curl&lt;/code&gt; like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ curl http://localhost:8201/serve-directory/foo.txt&#xA;This is an example text file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Client&lt;/h3&gt; &#xA;&lt;p&gt;After building and running the server, the client can be run like the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-client&#xA;Successfully got file ./example/files/foo.txt:&#xA;&#xA;This is an example text file.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Documentation&lt;/h3&gt; &#xA;&lt;p&gt;After building, the documentation can be generated like the following. This is documentation for the API defined in &lt;a href=&#34;https://raw.githubusercontent.com/cdepillabout/servant-rawm/master/servant-rawm-examples-and-tests/example/Api.hs&#34;&gt;servant-rawm-examples-and-tests/example/Api.hs&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack exec -- servant-rawm-example-docs&#xA;...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Maintainers&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/cdepillabout&#34;&gt;@cdepillabout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Krasjet&#34;&gt;@Krasjet&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>unisonweb/unison</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/unisonweb/unison</id>
    <link href="https://github.com/unisonweb/unison" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A friendly programming language from the future&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Unison language&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/unisonweb/unison&#34;&gt;&lt;img src=&#34;https://travis-ci.org/unisonweb/unison.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://unisonweb.org&#34;&gt;Unison&lt;/a&gt; is a modern, statically-typed purely functional language with the ability to describe entire distributed systems using a single program. Here&#39;s an example of a distributed map-reduce implementation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Haskell&#34;&gt;-- comments start with `--`&#xA;mapReduce loc fn ifEmpty reduce data = match split data with&#xA;  Empty          -&amp;gt; ifEmpty&#xA;  One a          -&amp;gt; fn a&#xA;  Two left right -&amp;gt;&#xA;    fl = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !left)&#xA;    fr = forkAt loc &#39;(mapReduce loc fn ifEmpty reduce !right)&#xA;    reduce (await fl) (await fr)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This function can be either simulated locally (possibly with faults injected for testing purposes), or run atop a distributed pool of compute. See &lt;a href=&#34;https://www.unison-lang.org/articles/distributed-datasets/&#34;&gt;this article&lt;/a&gt; for more in-depth coverage of how to build distributed computing libraries like this.&lt;/p&gt; &#xA;&lt;p&gt;Other resources:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/the-big-idea/&#34;&gt;Learn about the big idea behind Unison&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Check out &lt;a href=&#34;https://unison-lang.org&#34;&gt;the project website&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Say hello or lurk &lt;a href=&#34;https://unison-lang.org/slack&#34;&gt;in the Slack chat&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Explore &lt;a href=&#34;https://share.unison-lang.org/&#34;&gt;the Unison ecosystem&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.unison-lang.org/learn/&#34;&gt;Learn Unison&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Building using Stack&lt;/h2&gt; &#xA;&lt;p&gt;If these instructions don&#39;t work for you or are incomplete, please file an issue.&lt;/p&gt; &#xA;&lt;p&gt;The build uses &lt;a href=&#34;http://docs.haskellstack.org/&#34;&gt;Stack&lt;/a&gt;. If you don&#39;t already have it installed, &lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;follow the install instructions&lt;/a&gt; for your platform. (Hint: &lt;code&gt;brew update &amp;amp;&amp;amp; brew install stack&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone https://github.com/unisonweb/unison.git&#xA;$ cd unison&#xA;$ stack --version # we&#39;ll want to know this version if you run into trouble&#xA;$ stack build --fast --test &amp;amp;&amp;amp; stack exec unison&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run a local codebase-ui while building from source, you can use the &lt;code&gt;/dev-ui-install.sh&lt;/code&gt; script. It will download the latest release of the codebase-ui and put it in the expected location for the unison executable created by &lt;code&gt;stack build&lt;/code&gt;. When you start unison, you&#39;ll see a url where the codebase-ui is running.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/unisonweb/unison/trunk/development.markdown&#34;&gt;&lt;code&gt;development.markdown&lt;/code&gt;&lt;/a&gt; for a list of build commands you&#39;ll likely use during development.&lt;/p&gt; &#xA;&lt;h2&gt;Codebase Server&lt;/h2&gt; &#xA;&lt;p&gt;When &lt;code&gt;ucm&lt;/code&gt; starts it starts a Codebase web server that is used by the &lt;a href=&#34;https://github.com/unisonweb/codebase-ui&#34;&gt;Codebase UI&lt;/a&gt;. It selects a random port and a unique token that must be used when starting the UI to correctly connect to the server.&lt;/p&gt; &#xA;&lt;p&gt;The port, host and token can all be configured by providing environment variables when starting &lt;code&gt;ucm&lt;/code&gt;: &lt;code&gt;UCM_PORT&lt;/code&gt;, &lt;code&gt;UCM_HOST&lt;/code&gt;, and &lt;code&gt;UCM_TOKEN&lt;/code&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mwotton/squealgen</title>
    <updated>2022-06-03T01:41:27Z</updated>
    <id>tag:github.com,2022-06-03:/mwotton/squealgen</id>
    <link href="https://github.com/mwotton/squealgen" rel="alternate"></link>
    <summary type="html">&lt;p&gt;generate haskell types for Squeal from a running postgresql database.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;squealgen&lt;/h1&gt; &#xA;&lt;p&gt;Generate squeal types from a running database.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/mwotton/squealgen/workflows/CI/badge.svg?sanitize=true&#34; alt=&#34;CI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;why?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/squeal-postgresql&#34;&gt;Squeal&lt;/a&gt; is a lovely way to interact with a database, but setting up the initial schema is a struggle. By default, it assumes you will be managing and migrating your database with Squeal, and if you are starting from scratch, that works great, but if you&#39;re managing it some other way, or even just want to test out Squeal on an existing database, it&#39;s tedious to have to set up the database types and keep them up to date.&lt;/p&gt; &#xA;&lt;h2&gt;how?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;clone the repo and change into the directory&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;make prefix=$HOME/.local install&lt;/code&gt;. (We will assume here that &lt;code&gt;$HOME/.local/bin&lt;/code&gt; is in your path, obviously feel free to install wherever makes sense to you.)&lt;/li&gt; &#xA; &lt;li&gt;If my database is &lt;code&gt;cooldb&lt;/code&gt;, my haskell module file is &lt;code&gt;Schema.hs&lt;/code&gt;, and i want to use the &lt;code&gt;public&lt;/code&gt; schema (the default), I would run &lt;code&gt;squealgen cooldb Schema public &amp;gt; ~/myproject/src/Schema.hs&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You could integrate this in various ways: perhaps just as an initial scaffold, or perhaps integrated as part of your build process. A true madman could integrate this into a TH call, but I suspect this would be slow and prone to failing (for instance, better never compile any code if you don&#39;t have access to the right version of psql or a way of spinning up an empty database.)&lt;/p&gt; &#xA;&lt;p&gt;I highly recommend having a scripted way to bring up a temporary database and run all migrations first. I use Jonathan Fischoff&#39;s &lt;a href=&#34;https://hackage.haskell.org/package/tmp-postgres-1.34.1.0&#34;&gt;tmp-postgres&lt;/a&gt; library and recommend it if you&#39;re running migrations through Haskell.&lt;/p&gt; &#xA;&lt;h2&gt;hacking?&lt;/h2&gt; &#xA;&lt;p&gt;My workflow looks like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;make testwatch&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;you&#39;ll need&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;initdb&lt;/code&gt; from postgresql to be in your PATH. It typically isn&#39;t on Ubuntu systems, at least: usually in /usr/lib/postgresql/$VERSION_NUMBER/bin.&lt;/li&gt; &#xA; &lt;li&gt;pg_tmp from here: &lt;a href=&#34;https://eradman.com/ephemeralpg/code/ephemeralpg-3.0.tar.gz&#34;&gt;https://eradman.com/ephemeralpg/code/ephemeralpg-3.0.tar.gz&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;make&lt;/li&gt; &#xA; &lt;li&gt;stack&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;what next?&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;support in-out parameters in functions, once I know how to model this in squeal&lt;/li&gt; &#xA; &lt;li&gt;Remove string-hacking, generate in a more principled way.&lt;/li&gt; &#xA; &lt;li&gt;Extract check constraints (maybe). This is much harder than the rest of it.&lt;/li&gt; &#xA; &lt;li&gt;Triggers&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>