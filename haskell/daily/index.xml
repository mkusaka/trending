<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-06-27T01:36:25Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haskell-beam/beam</title>
    <updated>2023-06-27T01:36:25Z</updated>
    <id>tag:github.com,2023-06-27:/haskell-beam/beam</id>
    <link href="https://github.com/haskell-beam/beam" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A type-safe, non-TH Haskell SQL library and ORM&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Beam: a type-safe, non-TH Haskell relational database library and ORM&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haskell-beam/beam/workflows/Build/badge.svg&#34;&gt;&lt;img src=&#34;https://github.com/haskell-beam/beam/workflows/Build/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you use beam commercially, please consider a donation to make this project possible: &lt;a href=&#34;https://liberapay.com/tathougies&#34;&gt;https://liberapay.com/tathougies&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Beam is a Haskell interface to relational databases. Beam uses the Haskell type system to verify that queries are type-safe before sending them to the database server. Queries are written in a straightforward, natural monadic syntax. Combinators are provided for all standard SQL92 features, and a significant subset of SQL99, SQL2003, and SQL2008 features. For your convenience a thorough compatibility matrix is maintained &lt;a href=&#34;https://haskell-beam.github.io/beam/about/compatibility/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Beam is standards compliant but not naive. We recognize that different database backends provide different guarantees, syntaxes, and advantages. To reflect this, beam maintains a modular design. While the core package provides standard functionality, beam is split up into a variety of &lt;em&gt;backends&lt;/em&gt; which provide a means to interface Beam&#39;s data query and update DSLs with particular RDBMS backends. Backends can be written and maintained independently of this repository. For example, the &lt;a href=&#34;https://github.com/tathougies/beam-mysql&#34;&gt;beam-mysql&lt;/a&gt; and &lt;a href=&#34;https://github.com/gibranrosa/beam-firebird&#34;&gt;beam-firebird&lt;/a&gt; backends are packaged independently.&lt;/p&gt; &#xA;&lt;p&gt;Recognizing that over-abstraction frequently means caving in to the lowest common denominator, Beam does not do connection or transaction management. Rather, the user is free to perform these functions using the appropriate Haskell interface library for their backend of choice. Additionally, beam backends provide a significant portion of backend-specific functionality which seamlessly fits into the beam ecosystem.&lt;/p&gt; &#xA;&lt;p&gt;For example, the &lt;code&gt;beam-postgres&lt;/code&gt; backend is built off of the &lt;code&gt;postgresql-simple&lt;/code&gt; interface library. When using &lt;code&gt;beam-postgres&lt;/code&gt;, the user manages connections and transactions with &lt;code&gt;postgresql-simple&lt;/code&gt;. The user is free to issue queries directly with &lt;code&gt;postgresql-simple&lt;/code&gt;, only using beam when desired. Postgres offers a number of rich data types on top of the standard SQL data types. To reflect this, &lt;code&gt;beam-postgres&lt;/code&gt; offers pluggable support for postgres-specific data types and features.&lt;/p&gt; &#xA;&lt;p&gt;For more information, see the &lt;a href=&#34;https://haskell-beam.github.io/beam&#34;&gt;user guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;For questions, feel free to join our &lt;a href=&#34;https://groups.google.com/forum/#!forum/beam-discussion&#34;&gt;mailing list&lt;/a&gt; or head over to &lt;code&gt;#haskell-beam&lt;/code&gt; on freenode.&lt;/p&gt; &#xA;&lt;h2&gt;A word on testing&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;beam-core&lt;/code&gt; has in-depth unit tests to test query generation over an idealized ANSI SQL-compliant backend. You may be concerned that there are no tests in either &lt;code&gt;beam-sqlite&lt;/code&gt; or &lt;code&gt;beam-postgres&lt;/code&gt;. Do not be alarmed. The documentation contains many, many examples of queries written over the sample Chinook database, the schema for which can be found at &lt;code&gt;beam-sqlite/examples/Chinook/Schema.hs&lt;/code&gt;. The included &lt;code&gt;mkdocs&lt;/code&gt; configuration and custom &lt;code&gt;beam_query&lt;/code&gt; python Markdown extension automatically run every query in the documentation against a live database connection. Any errors in serializion/deserialization or invalid syntax are caught while building the documentation. Feel free to open pull-requests with additional examples/tests.&lt;/p&gt; &#xA;&lt;p&gt;Tests are written&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;!beam-query&#xA;```haskell&#xA;!example &amp;lt;template-name&amp;gt; &amp;lt;requirements&amp;gt;&#xA;do x &amp;lt;- all_ (customer chinookDb) -- chinookDb available under chinook and chinookdml examples&#xA;   pure x&#xA;```&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;!beam-query&lt;/code&gt; declaration indicates this is markdown code block that contains beam query code. The &lt;code&gt;!example&lt;/code&gt; declaration indicates that this example should be built against applicable backends and included in the code. The &lt;code&gt;template_name&lt;/code&gt; is either &lt;code&gt;chinook&lt;/code&gt; or &lt;code&gt;chinookdml&lt;/code&gt; (depending on whether you have quest a query or a DML statement). For &lt;code&gt;chinook&lt;/code&gt;, the included code should produce a &lt;code&gt;Q&lt;/code&gt; query. For &lt;code&gt;chinookdml&lt;/code&gt;, the included code should be a monadic action in a &lt;code&gt;MonadBeam&lt;/code&gt;. The &lt;code&gt;requirements&lt;/code&gt; can be used to select which backends to run this against. See the documentation for examples.&lt;/p&gt; &#xA;&lt;h2&gt;Building the documentation&lt;/h2&gt; &#xA;&lt;p&gt;Beam uses &lt;code&gt;mkdocs&lt;/code&gt; for its documentation generation. The included &lt;code&gt;build-docs.sh&lt;/code&gt; script can take care of building the documentation and serving it locally. In order to use the tool though, make sure you have a python installation with the &lt;code&gt;mkdocs&lt;/code&gt; module installed. You can do this by creating a virtualenv, and pip installing &lt;code&gt;mkdocs&lt;/code&gt;, or in a Nix shell with &lt;code&gt;nix-shell docs&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The documentation uses a custom Markdown preprocessor to automatically build examples against the canonical Chinook database. By default, beam will build examples for &lt;em&gt;every&lt;/em&gt; beam backend it knows about, including ones not in the main source tree (see &lt;code&gt;docs/beam.yaml&lt;/code&gt; for the full configuration). This means you will need to have an instance of all these database servers running and available. This is usually not what you want.&lt;/p&gt; &#xA;&lt;p&gt;To only build examples for a particular backend, modify &lt;code&gt;mkdocs.yaml&lt;/code&gt; and set the &lt;code&gt;enabled_backends&lt;/code&gt; configuration setting for the &lt;code&gt;docs.markdown.beam_query&lt;/code&gt; preprocessor. For example, to only build docs for &lt;code&gt;beam-sqlite&lt;/code&gt;, change&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  - docs.markdown.beam_query:&#xA;      template_dir: &#39;docs/beam-templates&#39;&#xA;      cache_dir: &#39;docs/.beam-query-cache&#39;&#xA;      conf: &#39;docs/beam.yaml&#39;&#xA;      base_dir: &#39;.&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;  - docs.markdown.beam_query:&#xA;      template_dir: &#39;docs/beam-templates&#39;&#xA;      cache_dir: &#39;docs/.beam-query-cache&#39;&#xA;      conf: &#39;docs/beam.yaml&#39;&#xA;      base_dir: &#39;.&#39;&#xA;      enabled_backends:&#xA;        - beam-sqlite&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>