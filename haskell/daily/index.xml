<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-02-15T01:29:05Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>maxdore/dedekind</title>
    <updated>2024-02-15T01:29:05Z</updated>
    <id>tag:github.com,2024-02-15:/maxdore/dedekind</id>
    <link href="https://github.com/maxdore/dedekind" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dedekind - a solver for boundary problems in Cubical Agda&lt;/h1&gt; &#xA;&lt;p&gt;This Haskell tool can be used to resolve proof obligations in &lt;a href=&#34;https://agda.readthedocs.io/en/v2.6.4.1/language/cubical.html&#34;&gt;Cubical Agda&lt;/a&gt; which involve connections and Kan compositions.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;The solver is written in Haskell and can be built locally with cabal: &lt;code&gt;cabal build&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The solver can be called on &lt;code&gt;.cube&lt;/code&gt; files, which contain a cubical cell context and boundary problems over the context. For example, we can define a cell context with two paths and specify a list of boundary problems over it as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;p : (i)[]&#xA;q : (i)[i = 0 -&amp;gt; p(1)]&#xA;---&#xA;? : (i)[i = 0 -&amp;gt; p(1) | i = 1 -&amp;gt; p(0)]&#xA;? : (i)[i = 0 -&amp;gt; p(0) | i = 1 -&amp;gt; q(1)]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://github.com/maxdore/dedekind/tree/main/examples&#34;&gt;/examples&lt;/a&gt; folder for more examples.&lt;/p&gt; &#xA;&lt;p&gt;A basic call to the solver is with &lt;code&gt;cabal run dedekind -- -f FILE.cube&lt;/code&gt; (if you have installed the solver on your path, you can also call &lt;code&gt;dedekind -f FILE.cube&lt;/code&gt;). The solver outputs code in Cubical Agda, which can be copied into a formalisation.&lt;/p&gt; &#xA;&lt;p&gt;For example, we can solve all problems in the file &lt;code&gt;examples/path.cube&lt;/code&gt; with the following command:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal run dedekind -- -f examples/path.cube&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;You can optionally provide the flag &lt;code&gt;-v&lt;/code&gt; to get more information about the solving process, and &lt;code&gt;-t 10&lt;/code&gt; to specify a timeout in seconds.&lt;/p&gt; &#xA;&lt;h2&gt;Benchmark&lt;/h2&gt; &#xA;&lt;p&gt;The file &lt;code&gt;benchmark.sh&lt;/code&gt; will solve all files in the folder &lt;code&gt;/examples&lt;/code&gt; folder and will provide some benchmarking information. Simply call &lt;code&gt;sh benchmark.sh&lt;/code&gt; to run the benchmarking suite.&lt;/p&gt;</summary>
  </entry>
</feed>