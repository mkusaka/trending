<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-05T01:42:12Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Plutonomicon/plutarch-plutus</title>
    <updated>2022-07-05T01:42:12Z</updated>
    <id>tag:github.com,2022-07-05:/Plutonomicon/plutarch-plutus</id>
    <link href="https://github.com/Plutonomicon/plutarch-plutus" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Typed eDSL for writing UPLC /ˈpluː.tɑːk/&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Plutarch&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hercules-ci.com/github/Plutonomicon/plutarch&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/ci--by--hercules-green.svg?sanitize=true&#34; alt=&#34;Hercules-ci&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://public-plutonomicon.cachix.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/cachix-public--plutonomicon-blue.svg?sanitize=true&#34; alt=&#34;Cachix Cache&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Plutarch is a typed eDSL in Haskell for writing efficient Plutus Core validators.&lt;/p&gt; &#xA;&lt;h1&gt;Why Plutarch?&lt;/h1&gt; &#xA;&lt;p&gt;Plutarch written validators are often significantly more efficient than Plutus Tx written validators. With Plutarch, you have much more fine gained control of the Plutus Core you generate, without giving up any type information.&lt;/p&gt; &#xA;&lt;p&gt;To put things into perspective, one validator script from a large production contract was rewritten in Plutarch, changed from Plutus Tx. Here&#39;s the comparison between the Plutarch script&#39;s execution cost compared to the Plutus Tx script&#39;s execution cost. These numbers were gathered by simulating the whole contract flow on a testnet:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Version&lt;/th&gt; &#xA;   &lt;th&gt;CPU&lt;/th&gt; &#xA;   &lt;th&gt;Memory&lt;/th&gt; &#xA;   &lt;th&gt;Script Size&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;PlutusTx (current)&lt;/td&gt; &#xA;   &lt;td&gt;198,505,651&lt;/td&gt; &#xA;   &lt;td&gt;465,358&lt;/td&gt; &#xA;   &lt;td&gt;2013&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Plutarch&lt;/td&gt; &#xA;   &lt;td&gt;51,475,605&lt;/td&gt; &#xA;   &lt;td&gt;99,992&lt;/td&gt; &#xA;   &lt;td&gt;489&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;More benchmarks, with reproducible code, soon to follow.&lt;/p&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Add this repo as a source repository package to your &lt;code&gt;cabal.project&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Add the &lt;code&gt;plutarch&lt;/code&gt; package as a dependency to your cabal file.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;This package takes in a flag, &lt;code&gt;development&lt;/code&gt;, that defaults to false. It&#39;s used to turn on &#34;development mode&#34;. Following is a list of effects and their variations based on whether or not development mode is on.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;On&lt;/th&gt; &#xA;   &lt;th&gt;Off&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Tracing functions from &lt;code&gt;Plutarch.Trace&lt;/code&gt; log given message to the trace log.&lt;/td&gt; &#xA;   &lt;td&gt;Tracing functions from &lt;code&gt;Plutarch.Trace&lt;/code&gt; do not log. They merely return their argument.&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;You can turn on development mode by passing in the &lt;code&gt;development&lt;/code&gt; flag in your &lt;code&gt;cabal.project&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;package plutarch&#xA;  flags: +development&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Benchmarks&lt;/h1&gt; &#xA;&lt;p&gt;See the &lt;a href=&#34;https://raw.githubusercontent.com/Plutonomicon/plutarch-plutus/master/plutarch-benchmark&#34;&gt;&lt;code&gt;plutarch-benchmark&lt;/code&gt;&lt;/a&gt; library for how to benchmark plutarch, and benchmarking your own scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Read the &lt;a href=&#34;https://raw.githubusercontent.com/Plutonomicon/plutarch-plutus/master/docs/README.md&#34;&gt;Plutarch guide&lt;/a&gt; to get started!&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Contributions are more than welcome! Alongside the &lt;a href=&#34;https://raw.githubusercontent.com/Plutonomicon/plutarch-plutus/master/#usage&#34;&gt;User guide&lt;/a&gt; above, you may also find the &lt;a href=&#34;https://raw.githubusercontent.com/Plutonomicon/plutarch-plutus/master/docs/DEVGUIDE.md&#34;&gt;Developers&#39; guide&lt;/a&gt; useful for understanding the codebase.&lt;/p&gt; &#xA;&lt;h1&gt;License&lt;/h1&gt; &#xA;&lt;pre&gt;&lt;code&gt;Copyright (c) 2021-2022 Ardana Labs&#xA;Copyright (c) 2021-2022 Cardax B.V.&#xA;Copyright (c) 2021-2022 Minswap Team&#xA;Copyright (c) 2021-2022 Liqwid Labs&#xA;Copyright (c) 2021-2022 Platonic.Systems&#xA;Copyright (c) 2021-2022 MLabs&#xA;&#xA;Permission is hereby granted, free of charge, to any person obtaining a copy of&#xA;this software and associated documentation files (the &#34;Software&#34;), to deal in&#xA;the Software without restriction, including without limitation the rights to&#xA;use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies&#xA;of the Software, and to permit persons to whom the Software is furnished to do&#xA;so, subject to the following conditions:&#xA;&#xA;The above copyright notice and this permission notice shall be included in all&#xA;copies or substantial portions of the Software.&#xA;&#xA;THE SOFTWARE IS PROVIDED &#34;AS IS&#34;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR&#xA;IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,&#xA;FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE&#xA;AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER&#xA;LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,&#xA;OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE&#xA;SOFTWARE.&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>flora-pm/flora-server</title>
    <updated>2022-07-05T01:42:12Z</updated>
    <id>tag:github.com,2022-07-05:/flora-pm/flora-server</id>
    <link href="https://github.com/flora-pm/flora-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A package index for the Haskell ecosystem&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; Flora &lt;br&gt; &lt;small&gt;A package index for the Haskell ecosystem&lt;/small&gt; &lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/flora-pm/flora-server/development/assets/favicon.svg?sanitize=true&#34; height=&#34;250&#34; width=&#34;250&#34; alt=&#34;Logo&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/flora-pm/flora-server/actions&#34;&gt; &lt;img src=&#34;https://img.shields.io/github/workflow/status/flora-pm/flora-server/CI/development?style=flat-square&#34; alt=&#34;CI badge&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://haskell.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&amp;amp;style=flat-square&#34; alt=&#34;made with Haskell&#34;&gt; &lt;/a&gt; &lt;a href=&#34;https://app.element.io/#/room/#flora-pm:matrix.org&#34;&gt; &lt;img src=&#34;https://img.shields.io/badge/matrix-%23flora--pm%3Amatrix.org-brightgreen?style=flat-square&amp;amp;logo=matrix&#34; alt=&#34;Matrix chatroom badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;dl&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;dt&gt;&#xA;  Flora.pm&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  A read-only mirror of hackage.haskell.org with an improved and lightweight interface.&#xA; &lt;/dd&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA; &lt;p&gt; &lt;/p&gt;&#xA; &lt;dt&gt;&#xA;  Flora Server&#xA; &lt;/dt&gt; &#xA; &lt;dd&gt;&#xA;  An alternative package index server for the Haskell ecosystem with mirroring capabilities.&#xA; &lt;/dd&gt; &#xA; &lt;p&gt;&lt;/p&gt; &#xA;&lt;/dl&gt; &#xA;&lt;p&gt;&lt;strong&gt;Read More&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flora-pm/flora-server/development/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/flora-pm/flora-server/development/CONTRIBUTING.md&#34;&gt;Contribution Guide&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/flora-pm/flora-server/wiki&#34;&gt;Development Wiki&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation and Configuration&lt;/h2&gt; &#xA;&lt;p&gt;For ease of development, a &lt;code&gt;shell.nix&lt;/code&gt; file is provided. It brings with it system dependency and tooling.&lt;/p&gt; &#xA;&lt;p&gt;To jump into the development environment, use &lt;code&gt;make nix-shell&lt;/code&gt;. It is impure by default, so your editor and development tools will still be accessible.&lt;/p&gt; &#xA;&lt;h3&gt;System dependencies&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;libpq&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/souffle-lang/souffle/releases&#34;&gt;Soufflé Datalog&lt;/a&gt; &amp;gt;=v2.2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Flora server&lt;/h3&gt; &#xA;&lt;p&gt;The configuration is handled through environment variables. They are all prefixed by &lt;code&gt;FLORA_&lt;/code&gt; to avoid conflict, and the server will tell you which ones are missing.&lt;/p&gt; &#xA;&lt;p&gt;To start in the best of conditions, create a file called &lt;code&gt;environment.local.sh&lt;/code&gt; with the following content:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;source environment.sh&#xA;&#xA;# export FLORA_SENTRY_DSN=&#34;&#34; # Don&#39;t forget to add your Sentry DSN if you use it!&#xA;# export FLORA_PROMETHEUS_ENABLED=&#34;true&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will get all the variables from &lt;code&gt;environment.sh&lt;/code&gt; and allow you to override them.&lt;/p&gt; &#xA;&lt;p&gt;You can then build the server with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# To build the binaries&#xA;$ make build&#xA;# To load the main library in a REPL&#xA;$ make repl&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Database&lt;/h3&gt; &#xA;&lt;p&gt;The Flora server uses PostgreSQL 14.&lt;/p&gt; &#xA;&lt;p&gt;To create the database and apply the migrations, type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ make db-setup # Implies db-create&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;you can also use &lt;code&gt;db-create&lt;/code&gt; and &lt;code&gt;db-drop&lt;/code&gt; to create and delete the database in the PostgreSQL instance.&lt;/p&gt; &#xA;&lt;h3&gt;Docker Workflow&lt;/h3&gt; &#xA;&lt;p&gt;A docker-based workflow is provided. The idea is to develop from within a container that brings with it all dependencies, and communicates with another container for the PostgreSQL database.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# You need to build the container first. It&#39;s gonna take around 13 minutes the first time you build&#xA;$ make docker-build&#xA;# Start the container.&#xA;$ make docker-start&#xA;# Once the containers are running, you can enter the development environment and start hacking&#xA;$ make docker-enter&#xA;# You&#39;ll be in the docker container. Environment variables are automatically set &#xA;# so you should be able to start Flora&#xA;(docker)$ make nix-tmux&#xA;# You&#39;ll be in a tmux session, everything should be launched&#xA;# Visit localhost:8084 from your web browser to see if it all works.&#xA;&#xA;# To provision the development database, type:&#xA;$ make docker-enter&#xA;(docker)$ source environment.docker.sh&#xA;(docker)$ make db-drop  # password is &#39;postgres&#39; by default&#xA;(docker)$ make db-setup # password is &#39;postgres&#39; by default&#xA;(docker)$ make nix-provision&#xA;# And you should be good!&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing everything from Hackage&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Download the archive containing all packages &lt;a href=&#34;https://hackage.haskell.org/01-index.tar&#34;&gt;here&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Extract it in Flora&#39;s root directory. You should now have a &lt;code&gt;01-index&lt;/code&gt; folder&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make import-from-hackage&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;You can explore the Makefile rules by typing &lt;code&gt;make&lt;/code&gt; in your shell.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>UnBParadigmas2022-1/2022.1_G5_Funcional_JaoDelivery</title>
    <updated>2022-07-05T01:42:12Z</updated>
    <id>tag:github.com,2022-07-05:/UnBParadigmas2022-1/2022.1_G5_Funcional_JaoDelivery</id>
    <link href="https://github.com/UnBParadigmas2022-1/2022.1_G5_Funcional_JaoDelivery" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Projeto para a disciplina de Paradigmas de Programação da UnB, que cria um sistema de correio utilizando o paradigma de programação funcional com a linguagem Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Jão Delivery&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disciplina&lt;/strong&gt;: FGA0210 - PARADIGMAS DE PROGRAMAÇÃO - T01 &lt;br&gt; &lt;strong&gt;Nro do Grupo&lt;/strong&gt;: 05&lt;br&gt; &lt;strong&gt;Paradigma&lt;/strong&gt;: Funcional&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Alunos&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Matrícula&lt;/th&gt; &#xA;   &lt;th&gt;Aluno&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180041592&lt;/td&gt; &#xA;   &lt;td&gt;Denys Rogeres Leles dos Santos&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180113259&lt;/td&gt; &#xA;   &lt;td&gt;Felipe Correia Andrade&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180103580&lt;/td&gt; &#xA;   &lt;td&gt;Jonathan Jorge Barbosa Oliveira&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180125885&lt;/td&gt; &#xA;   &lt;td&gt;Lucas Melo dos Santos&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180127535&lt;/td&gt; &#xA;   &lt;td&gt;Mateus Brandao Teixeira&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180106821&lt;/td&gt; &#xA;   &lt;td&gt;Mateus Gomes do Nascimento&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180127641&lt;/td&gt; &#xA;   &lt;td&gt;Matheus Afonso de Souza&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180138545&lt;/td&gt; &#xA;   &lt;td&gt;Thiago Mesquita Peres Nunes de Carvalho&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;180132245&lt;/td&gt; &#xA;   &lt;td&gt;Vinicius de Sousa Saturnino&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Sobre&lt;/h2&gt; &#xA;&lt;p&gt;Este software é um sistema de envio de mercadorias onde pessoas podem enviar seus pacotes da forma mais ágil acompanhando a trajetoria e o status deles até o destinatário.&lt;/p&gt; &#xA;&lt;h2&gt;Screenshots&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/UnBParadigmas2022-1/2022.1_G5_Funcional_JaoDelivery/master/img/menu1.jpeg&#34; alt=&#34;menu&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/UnBParadigmas2022-1/2022.1_G5_Funcional_JaoDelivery/master/img/menuEntrega.jpeg&#34; alt=&#34;menu entrega&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Instalação&lt;/h2&gt; &#xA;&lt;p&gt;É necessário instalar as seguintes ferramentas para rodar o programa:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GHC&lt;/li&gt; &#xA; &lt;li&gt;cabal-install&lt;/li&gt; &#xA; &lt;li&gt;stack&lt;/li&gt; &#xA; &lt;li&gt;haskell-language-server(opcional)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Para instalar, basta seguir o tutorial disponível no &lt;a href=&#34;https://www.haskell.org/downloads/&#34;&gt;site do Haskell&lt;/a&gt;, e em seguida, entrar no diretório do projeto e executar o seguinte comando no terminal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;make run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Linguagens&lt;/strong&gt;: Haskell&lt;br&gt; &lt;strong&gt;Tecnologias&lt;/strong&gt;: Haskell&lt;br&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Uso&lt;/h2&gt; &#xA;&lt;p&gt;Entre no software, e cadestre seu pacote a partir do menu de cadastro (opção &#34;1&#34;). Após isso, vá para a entrega (opção &#34;2&#34;), onde será selecionando os pacotes que serão entregues. Com isso é possível verificar o status de entrega no menu de &#34;entrega&#34; (opção &#34;3&#34;). E o status da mercadoria pode ser alterado para &#34;Sucesso&#34; (Produto entregue com sucesso), &#34;Falha&#34; (Produto entregue com falha) ou &#34;Cancelar&#34; (Cancelar a entrega do produto).&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/UnBParadigmas2022-1/2022.1_G5_Funcional_JaoDelivery/master/img/status_entrega_resumo.jpeg&#34; alt=&#34;status entrega1&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/UnBParadigmas2022-1/2022.1_G5_Funcional_JaoDelivery/master/img/status_entrega.jpeg&#34; alt=&#34;status entrega2&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Vídeo&lt;/h2&gt; &#xA;&lt;p&gt;Adicione 1 ou mais vídeos com a execução do projeto. Procure: (i) Introduzir o projeto; (ii) Mostrar passo a passo o código, explicando-o, e deixando claro o que é de terceiros, e o que é contribuição real da equipe; (iii) Apresentar particularidades do Paradigma, da Linguagem, e das Tecnologias, e (iV) Apresentar lições aprendidas, contribuições, pendências, e ideias para trabalhos futuros. OBS: TODOS DEVEM PARTICIPAR, CONFERINDO PONTOS DE VISTA. TEMPO: +/- 15min&lt;/p&gt; &#xA;&lt;h2&gt;Participações&lt;/h2&gt; &#xA;&lt;p&gt;Apresente, brevemente, como cada membro do grupo contribuiu para o projeto.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Nome do Membro&lt;/th&gt; &#xA;   &lt;th&gt;Contribuição&lt;/th&gt; &#xA;   &lt;th&gt;Significância da Contribuição para o Projeto (Excelente/Boa/Regular/Ruim/Nula)&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Denys Rogeres Leles dos Santos&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Felipe Correia Andrade&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Jonathan Jorge Barbosa Oliveira&lt;/td&gt; &#xA;   &lt;td&gt;Implementação do fluxo de criar pacote, verificar pacote, formatar as entradas e saídas dos dados, criação de entrega e criação dos dados para popular o grafo.&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Lucas Melo dos Santos&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;   &lt;td&gt;---&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mateus Brandao Teixeira&lt;/td&gt; &#xA;   &lt;td&gt;Implementação do fluxo de criar entrega, verificar entregas, finalizar entrega, da listagem de pacotes e entregas e menus.&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Mateus Gomes do Nascimento&lt;/td&gt; &#xA;   &lt;td&gt;Implementação do fluxo de criar entrega, verificar entrega, finalizar entrega, atualizar status das entregas e pacotes, dos menus e da listagem de pacotes e entregas.&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Matheus Afonso de Souza&lt;/td&gt; &#xA;   &lt;td&gt;Implementação da estrutura do grafo, do algoritmo de Dijkstra, do fluxo de calcular melhor rota, das funções de leitura e escrita em arquivos, dos menus e da criação dos dados para popular o grafo.&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Thiago Mesquita Peres Nunes de Carvalho&lt;/td&gt; &#xA;   &lt;td&gt;Implementação do fluxo de scriar entrega, verificar entregas, finalizar entrega, da listagem de pacotes e entregas e menus.&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Vinicius de Sousa Saturnino&lt;/td&gt; &#xA;   &lt;td&gt;Implementação do fluxo de criar pacote, verificar pacotes, dos menus e da repetição de escolhas do usuário.&lt;/td&gt; &#xA;   &lt;td&gt;Excelente&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Outros&lt;/h2&gt; &#xA;&lt;h3&gt;Lições Aprendidas&lt;/h3&gt; &#xA;&lt;p&gt;Com a execução do projeto, os membros do grupo aprenderam bastante sobre o paradigma funcional, vendo suas vantagens e desvantagens na hora da implementação. Além disso, utilizando esse paradigma os membros tiveram o desafio de pensar de forma diferente do que estavam acostumados e foi um exercício interessante para melhorar na programação e também entender novos paradigmas, para não depender apenas do paradigma que estão mais acostumados.&lt;/p&gt; &#xA;&lt;h3&gt;Percepções&lt;/h3&gt; &#xA;&lt;p&gt;Depois da execução deste trabalho, os membros do grupo estão mais preparados para aprender novos paradigmas, visto que foi um grande desafio ter que &#34;reprogramar o cérebro&#34; para pensar em um novo paradigma, mas agora o grupo já possui uma experiência neste processo. E além disso, o grupo percebeu que contar apenas com o paradigma mais utilizado no momento pode ser uma estratégia perigosa, porque o mercado e as tecnologias podem mudar a qualquer momento com um novo paradigma, e por conta disso, saber aprender um novo paradigma é muito importante.&lt;/p&gt; &#xA;&lt;h3&gt;Contribuições e Fragilidades&lt;/h3&gt; &#xA;&lt;p&gt;Com o desenvolvimento do projeto, foi evidente que no início o grupo teve uma grande dificuldade de contribuir com o projeto, visto que é uma linguagem e um paradigma novos para os membros. Mas ao decorrer do projeto, o entendimento do grupo aumentou sobre a linguagem e sobre o paradigma, e as contribuições ficaram mais fáceis de se fazer e o projeto pôde ser concluído.&lt;/p&gt; &#xA;&lt;h3&gt;Trabalhos Futuros&lt;/h3&gt; &#xA;&lt;p&gt;Ao longo do desenvolvimento do projeto, o grupo percebeu que, embora as desvantagens de um paradigma novo sejam bem evidentes no início, por se tratar de uma nova forma de pensar, cada paradigma possui suas vantagens e desvantagens, e na hora de implementar um novo trabalho, é importante escolher um paradigma levando em conta estas vantagens e desvantagens.&lt;/p&gt; &#xA;&lt;h2&gt;Fontes&lt;/h2&gt; &#xA;&lt;p&gt;Referencie, adequadamente, as referências utilizadas. Indique ainda, fontes de leitura complementares.&lt;/p&gt;</summary>
  </entry>
</feed>