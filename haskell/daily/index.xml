<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-12T01:44:58Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>pabloariasal/protofmt</title>
    <updated>2022-07-12T01:44:58Z</updated>
    <id>tag:github.com,2022-07-12:/pabloariasal/protofmt</id>
    <link href="https://github.com/pabloariasal/protofmt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Formatter for Protocol Buffer files&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;protofmt - Formatter for Protocol Buffer Files&lt;/h1&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;üëé&lt;/th&gt; &#xA;   &lt;th&gt;üëç&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pabloariasal/protofmt/master/screenshots/before.svg?sanitize=true&#34; alt=&#34;before&#34;&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;img src=&#34;https://raw.githubusercontent.com/pabloariasal/protofmt/master/screenshots/after.svg?sanitize=true&#34; alt=&#34;after&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h1&gt;Formatting Rules&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Applies google&#39;s official protobuf style guide&lt;/li&gt; &#xA; &lt;li&gt;Indentation with 2 spaces&lt;/li&gt; &#xA; &lt;li&gt;Import groups are sorted alphabetically&lt;/li&gt; &#xA; &lt;li&gt;Makes all string literals double quoted: &lt;code&gt;option opt = &#39;foo&#39;;&lt;/code&gt; =&amp;gt; &lt;code&gt;option opt = &#34;foo&#34;;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Makes all enum fields uppercase: &lt;code&gt;enum E { field = 1 }&lt;/code&gt; =&amp;gt; &lt;code&gt;enum E { FIELD = 1 }&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Makes opening braces on the declaration line: &lt;code&gt;message M {&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Strips redundant semicolons: &lt;code&gt;enum E {};&lt;/code&gt; =&amp;gt; &lt;code&gt;enum E {}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Full comment support&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Installation&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;protofmt&lt;/code&gt; is written in Haskell, you can use &lt;code&gt;cabal&lt;/code&gt; to install it.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;git clone https://github.com/pabloariasal/protofmt.git&#xA;cd protofmt&#xA;cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Usage&lt;/h1&gt; &#xA;&lt;p&gt;Just pass the file to be formatted:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;protofmt &amp;lt;path_to_unformatted_proto_file&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ cat unformatted.proto&#xA;syntax = &#39;proto3&#39;;&#xA;message M { string field = 1; };&#xA;&#xA;$ protofmt unformatted.proto&#xA;syntax = &#34;proto3&#34;;&#xA;message M {&#xA;  string field = 1;&#xA;}&#xA;&#xA;$ protofmt unformatted.proto | tee formatted.proto&#xA;syntax = &#34;proto3&#34;;&#xA;message M {&#xA;  string field = 1;&#xA;}&#xA;&#xA;$ cat formatted.proto&#xA;syntax = &#34;proto3&#34;;&#xA;message M {&#xA;  string field = 1;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Known Limitations (to be fixed soon)&lt;/h1&gt; &#xA;&lt;h2&gt;Language&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only protobuf 3&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;inf&lt;/code&gt; and &lt;code&gt;nan&lt;/code&gt; are not supported as floating point literals (PR welcome)&lt;/li&gt; &#xA; &lt;li&gt;enum fields must be decimal literals (no hex, octal or binary) (PR welcome)&lt;/li&gt; &#xA; &lt;li&gt;No service definitions (PR welcome)&lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;optional&lt;/code&gt; nor &lt;code&gt;required&lt;/code&gt; keywords supported (PR welcome)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;API&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Only one file can be processed at once&lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;--in-place&lt;/code&gt; flag supported&lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;--recursive&lt;/code&gt; flag supported&lt;/li&gt; &#xA; &lt;li&gt;No &lt;code&gt;--diff&lt;/code&gt; flag to display a diff between formatted and unformatted file (status code 0 if no diff)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt;</summary>
  </entry>
</feed>