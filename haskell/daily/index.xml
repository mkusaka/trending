<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-08-08T01:35:16Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>crufter/hakit</title>
    <updated>2023-08-08T01:35:16Z</updated>
    <id>tag:github.com,2023-08-08:/crufter/hakit</id>
    <link href="https://github.com/crufter/hakit" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A Haskell web toolkit.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hakit&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Hakit&lt;/strong&gt; (pronounce: &#34;hack it&#34;) is my ongoing attempt to say thanks to the Haskell community.&lt;/p&gt; &#xA;&lt;h3&gt;What is it?&lt;/h3&gt; &#xA;&lt;p&gt;It is a web toolkit written in Haskell.&lt;/p&gt; &#xA;&lt;h3&gt;Why?&lt;/h3&gt; &#xA;&lt;p&gt;The key idea is to introduce the least possible new concepts to people coming from other languages.&lt;/p&gt; &#xA;&lt;p&gt;It especially eases the transition for people coming from dynamic languages by providing a central dynamic data structure and using that in most places (where it is sensible), so they will spend less time freaking out about yet another type they don&#39;t grasp yet.&lt;/p&gt; &#xA;&lt;h4&gt;Also...&lt;/h4&gt; &#xA;&lt;p&gt;PHP &amp;amp; co has approx 6000 web frameworks/toolkits (per language), Haskell has only a handful, let&#39;s get up to speed, shall we?&lt;/p&gt; &#xA;&lt;h3&gt;Modules&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crufter/hakit/master/docs/hakit&#34;&gt;Hakit&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A module containing an easy to use data type similar to that of dynamic languages.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crufter/hakit/master/docs/http&#34;&gt;Hakit.Http&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A very simple to use HTTP server/client.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://raw.githubusercontent.com/crufter/hakit/master/docs/validation&#34;&gt;Hakit.Validation&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Validate data easily.&lt;/p&gt; &#xA;&lt;h4&gt;Hakit.Db&lt;/h4&gt; &#xA;&lt;p&gt;Typeclasses (currently only one, a simplistic one) which reprents db drivers.&lt;/p&gt; &#xA;&lt;h4&gt;Hakit.Db.Mongo&lt;/h4&gt; &#xA;&lt;p&gt;MongoDB implementation of a db driver found in Hakit.Db&lt;/p&gt; &#xA;&lt;h4&gt;Hakit.Routing&lt;/h4&gt; &#xA;&lt;p&gt;Routing made easy.&lt;/p&gt; &#xA;&lt;h3&gt;Separate modules intended to work well with Hakit:&lt;/h3&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/recurziv/haquery&#34;&gt;Haquery&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;A CSS selector based template engine (effectively, jQuery in Haskell, on your server).&lt;br&gt; All selectors can be arbitrarily nested (eg: &#34;.a:not(.b:has(.c, .d:first)):even&#34; and similar).&lt;br&gt; The workings of the selectors aim to match the jQuery behaviour, so for further documentation, consult the jQuery API.&lt;/p&gt; &#xA;&lt;h4&gt;&lt;a href=&#34;https://github.com/recurziv/jobs&#34;&gt;Jobs&lt;/a&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Lets you start cronlike jobs from your Haskell application.&lt;/p&gt; &#xA;&lt;h3&gt;Goals&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Make it so simple and obvious that one can pick it up in a couple of minutes.&lt;/li&gt; &#xA; &lt;li&gt;Be gentle to people with a non-fp background.&lt;/li&gt; &#xA; &lt;li&gt;Be fun to use.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Progress&lt;/strong&gt;: very-very early stage.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: I am a Haskell newbie, thus the code is probably not that idiomatic. This will change though as I gain experience.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>tamarin-prover/tamarin-prover</title>
    <updated>2023-08-08T01:35:16Z</updated>
    <id>tag:github.com,2023-08-08:/tamarin-prover/tamarin-prover</id>
    <link href="https://github.com/tamarin-prover/tamarin-prover" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Main source code repository of the Tamarin prover for security protocol verification.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Tamarin prover repository&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/tamarin-prover/tamarin-prover&#34;&gt;&lt;img src=&#34;https://travis-ci.org/tamarin-prover/tamarin-prover.svg?branch=develop&#34; alt=&#34;master branch build-status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This README describes the organization of the repository of the Tamarin prover for security protocol verification. Its intended audience are interested users and future developers of the Tamarin prover. For installation and usage instructions of the Tamarin prover see chapter 2 of the manual: &lt;a href=&#34;https://tamarin-prover.github.io/manual/book/002_installation.html&#34;&gt;https://tamarin-prover.github.io/manual/book/002_installation.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Developing and contributing&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/tamarin-prover/tamarin-prover/develop/CONTRIBUTING.md&#34;&gt;contributing instructions&lt;/a&gt; for instructions on how to develop, test and release changes to the Tamarin prover source code.&lt;/p&gt; &#xA;&lt;h2&gt;Version Numbering Policy&lt;/h2&gt; &#xA;&lt;p&gt;We use version numbers with four components.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The first component is the major version number. It indicates complete rewrites of the codebase.&lt;/li&gt; &#xA; &lt;li&gt;The second component is the minor version number. We use odd minor version numbers to denote development releases intended for early adopters. We use even minor version numbers to denote public releases, which are also published.&lt;/li&gt; &#xA; &lt;li&gt;The third component indicates bugfix releases.&lt;/li&gt; &#xA; &lt;li&gt;The fourth component indicates documentation and meta-data changes.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We ensure that the external interface of a version of the Tamarin prover is backwards compatible with the external interface of all versions that agree on the major and minor version number.&lt;/p&gt; &#xA;&lt;p&gt;We announce all releases of the Tamarin prover on: &lt;a href=&#34;http://tamarin-prover.github.io&#34;&gt;http://tamarin-prover.github.io&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Manual&lt;/h2&gt; &#xA;&lt;p&gt;The manual is available as PDF or HTML at &lt;a href=&#34;https://tamarin-prover.github.io/manual/index.html&#34;&gt;https://tamarin-prover.github.io/manual/index.html&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Experimental improved graph output&lt;/h2&gt; &#xA;&lt;p&gt;You can use our experimental improved graph output which may be helpful for very large graphs that can be created for complicated protocols. To enable this feature read the instructions about &lt;a href=&#34;https://raw.githubusercontent.com/tamarin-prover/tamarin-prover/develop/misc/cleandot/README.md&#34;&gt;improved graphs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Spthy code editors&lt;/h2&gt; &#xA;&lt;p&gt;The project contains support for spthy syntax highlighting and support in the &lt;a href=&#34;https://raw.githubusercontent.com/tamarin-prover/tamarin-prover/develop/etc/&#34;&gt;etc&lt;/a&gt; directory. This includes support for &lt;a href=&#34;https://raw.githubusercontent.com/tamarin-prover/tamarin-prover/develop/etc/SUBLIME_TEXT.md&#34;&gt;Sublime Text&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/tamarin-prover/tamarin-prover/develop/etc/spthy.vim&#34;&gt;VIM&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/tamarin-prover/tamarin-prover/develop/etc/notepad_plus_plus_spthy.xml&#34;&gt;Notepad++&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Example Protocol Models&lt;/h2&gt; &#xA;&lt;p&gt;All example protocol models are found in the directory&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./examples/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;All models that we consider stable are part of every installation of the Tamarin prover. See &lt;code&gt;tamarin-prover.cabal&lt;/code&gt; for the list of installed protocols. We use the following sub-directories to organize the models.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;accountability/ case studies using the accountability implementation presented in&#xA;                the &#34;Verifying Accountability for Unbounded Sets of Participants&#34; paper&#xA;csf12/          the AKE case studies from our CSF&#39;12 paper.&#xA;classic/        classic security protocols like the ones from&#xA;                [SPORE](http://www.lsv.ens-cachan.fr/Software/spore/table.html)&#xA;loops/          experiments for testing loop-invariants and protocols with&#xA;                non-monotonic state&#xA;related_work/   examples from related work on protocols with loops or&#xA;                non-monotonic state&#xA;experiments/    all other experiments&#xA;ake/            more AKE examples including ID-based and tripartite group KE&#xA;                protocols based on bilinear pairing&#xA;features/       (small) models that demonstrate a given feature&#xA;ccs15/&#x9;        the observational equivalence case studies from our CCS&#39;15 paper&#xA;csf-18/         the XOR case studies from the CSF&#39;18 paper&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Feel free to add more sub-directories and describe them here.&lt;/p&gt; &#xA;&lt;p&gt;In general, we try use descriptive names for files containing the models. We also document all our findings as comments in the protocol model. Moreover, we use the following header in all files to make their context more explicit.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;/*&#xA;   Protocol:    Example&#xA;   Modeler:     Simon Meier, Benedikt Schmidt&#xA;   Date:        January 2012&#xA;&#xA;   Status:      working&#xA;&#xA;   Description of protocol.&#xA;&#xA;*/&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>