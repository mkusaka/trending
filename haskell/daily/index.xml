<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-06-25T01:31:03Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>haskell/hackage-server</title>
    <updated>2024-06-25T01:31:03Z</updated>
    <id>tag:github.com,2024-06-25:/haskell/hackage-server</id>
    <link href="https://github.com/haskell/hackage-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Hackage-Server: A Haskell Package Repository&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hackage-server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haskell/hackage-server/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/hackage-server/actions/workflows/haskell-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/hackage-server/actions/workflows/nix-flake.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/hackage-server/actions/workflows/nix-flake.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is the &lt;code&gt;hackage-server&lt;/code&gt; code. This is what powers &lt;a href=&#34;http://hackage.haskell.org&#34;&gt;http://hackage.haskell.org&lt;/a&gt;, and many other private hackage instances. The &lt;code&gt;master&lt;/code&gt; branch is suitable for general usage. Specific policy and documentation for the central hackage instance exists in the &lt;code&gt;central-server&lt;/code&gt; branch.&lt;/p&gt; &#xA;&lt;h2&gt;Installing dependencies&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;hackage-server&lt;/code&gt; depends on &lt;code&gt;libgd&lt;/code&gt;, &lt;code&gt;zlib&lt;/code&gt;, and other system libraries. You&#39;ll also need &lt;code&gt;libbrotli-dev&lt;/code&gt; for enabling tests.&lt;/p&gt; &#xA;&lt;p&gt;You can use the Nix package manager to provide these dependencies, or install them manually.&lt;/p&gt; &#xA;&lt;h3&gt;Using the &lt;a href=&#34;https://nixos.org/&#34;&gt;Nix package manager&lt;/a&gt; and provided &lt;a href=&#34;https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-flake.html&#34;&gt;Nix Flake&lt;/a&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you have the Nix package manager installed, you can build and run &lt;code&gt;hackage-server&lt;/code&gt; without manually installing any dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix run&#xA;&#xA;&#39;state&#39; state-dir already exists&#xA;hackage-server: Ready! Point your browser at http://127.0.0.1:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If the required &lt;code&gt;state&lt;/code&gt; directory does not already exist, &lt;code&gt;nix run&lt;/code&gt; will create and initialize it.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;flake.nix&lt;/code&gt; is implemented with &lt;a href=&#34;https://github.com/srid/haskell-flake&#34;&gt;&lt;code&gt;srid/haskell-flake&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Alternatively, open the &lt;a href=&#34;https://nixos.org/manual/nix/stable/command-ref/new-cli/nix3-develop.html&#34;&gt;&lt;code&gt;nix develop&lt;/code&gt;&lt;/a&gt; shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ nix develop&#xA;&#xA;(in develop shell)&#xA;&#xA;# if state directory does not already exist&#xA;$ cabal v2-run -- hackage-server init --static-dir=datafiles --state-dir=state&#xA;&#xA;$ cabal v2-run -- hackage-server run --static-dir=datafiles --state-dir=state --base-uri=http://127.0.0.1:8080&#xA;hackage-server: Ready! Point your browser at http://127.0.0.1:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Populate the local package index&lt;/h4&gt; &#xA;&lt;p&gt;This copies packages from real Hackage Server to local Hackage Server.&lt;/p&gt; &#xA;&lt;p&gt;Add the default &lt;code&gt;admin&lt;/code&gt; user to the &lt;code&gt;mirrorers&lt;/code&gt; group here: &lt;a href=&#34;http://localhost:8080/packages/mirrorers/&#34;&gt;http://localhost:8080/packages/mirrorers/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Then&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt; $ nix run .#mirror-hackage-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Not working&lt;/h4&gt; &#xA;&lt;p&gt;Please note this App &lt;em&gt;cannot&lt;/em&gt; be run &lt;a href=&#34;https://determinate.systems/posts/nix-run&#34;&gt;directly from GitHub&lt;/a&gt; like this:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix run github:haskell/hackage-server -- init --static-dir=datafiles&#xA;&#xA;nix run github:haskell/hackage-server -- run --static-dir=datafiles --base-uri=http://127.0.0.1:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;because &lt;code&gt;hackage-server&lt;/code&gt; expects the directories &lt;code&gt;state&lt;/code&gt; and &lt;code&gt;datafiles&lt;/code&gt; to exist in the working directory.&lt;/p&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;You can also install dependencies manually via your operating system&#39;s package manager.&lt;/p&gt; &#xA;&lt;h4&gt;Libgd&lt;/h4&gt; &#xA;&lt;p&gt;You&#39;ll need to do the following to get &lt;code&gt;hackage-server&lt;/code&gt;&#39;s dependency &lt;code&gt;hs-captcha&lt;/code&gt; (and transitively &lt;code&gt;gd&lt;/code&gt;) to build:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac OS X&lt;/p&gt; &lt;pre&gt;&lt;code&gt;brew install libgd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu/Debian&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install unzip libgd-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora/CentOS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo dnf install unzip libgd-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nix/NixOS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nix-shell --packages gd&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;libbrotli&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu/Debian&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt update&#xA;sudo apt install libbrotli-dev&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora/CentOS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo dnf install brotli-devel&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;openssl&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora/CentOS&lt;/p&gt; &lt;p&gt;sudo dnf install openssl-devel&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;zlib&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Mac OS X&lt;/p&gt; &lt;pre&gt;&lt;code&gt;brew install zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Ubuntu/Debian&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo apt-get update&#xA;sudo apt-get install zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fedora/CentOS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;sudo dnf install zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Nix/NixOS&lt;/p&gt; &lt;pre&gt;&lt;code&gt;nix-shell --packages zlib&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Mac OS X&lt;/h4&gt; &#xA;&lt;p&gt;In addition to the above commands, you&#39;ll need to run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install pkg-config&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the above &lt;code&gt;brew install&lt;/code&gt; commands, you also need to update &lt;code&gt;cabal.project.local&lt;/code&gt; with the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cat &amp;gt;&amp;gt; cabal.project.local &amp;lt;&amp;lt;EOF&#xA;package gd&#xA;  extra-include-dirs:&#xA;    $(echo $(brew --prefix)/Cellar/gd/*/include)&#xA;  extra-lib-dirs:&#xA;    $(echo $(brew --prefix)/Cellar/gd/*/lib)&#xA;    $(echo $(brew --prefix)/Cellar/libpng/*/lib)&#xA;    $(echo $(brew --prefix)/Cellar/jpeg-turbo/*/lib)&#xA;    $(echo $(brew --prefix)/Cellar/fontconfig/*/lib)&#xA;    $(echo $(brew --prefix)/Cellar/freetype/*/lib)&#xA;&#xA;constraints:&#xA;  , HsOpenSSL +use-pkg-config&#xA;EOF&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Setting up security infrastructure&lt;/h2&gt; &#xA;&lt;p&gt;Out of the box the server comes with some example keys and &lt;a href=&#34;https://theupdateframework.io&#34;&gt;TUF&lt;/a&gt; metadata. The example keys are in &lt;code&gt;example-keys/&lt;/code&gt;; these keys were used to create&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;datafiles/TUF/root.json&#xA;datafiles/TUF/mirrors.json&#xA;datafiles/TUF/timestamp.private&#xA;datafiles/TUF/snapshot.private&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;While these files will enable you to start the server without doing anything else, you should replace all these files before deploying your server. In the remainder of this section we will explain how to do that.&lt;/p&gt; &#xA;&lt;p&gt;The first step is to create your own keys using the &lt;a href=&#34;http://hackage.haskell.org/package/hackage-repo-tool&#34;&gt;hackage-repo-tool&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hackage-repo-tool create-keys --keys /path/to/keys&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then copy over the timestamp and snapshot keys to the TUF directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cp /path/to/keys/timestamp/&amp;lt;id&amp;gt;.private datafiles/TUF/timestamp.private&#xA;cp /path/to/keys/snapshot/&amp;lt;id&amp;gt;.private  datafiles/TUF/snapshot.private&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Create root information:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hackage-repo-tool create-root --keys /path/to/keys -o datafiles/TUF/root.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;And finally create a list of mirrors (this is necessary even if you don&#39;t have any mirrors):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;hackage-repo-tool create-mirrors --keys /path/to/keys -o datafiles/TUF/mirrors.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;create-mirrors&lt;/code&gt; command takes a list of mirrors as additional arguments if you do want to list mirrors.&lt;/p&gt; &#xA;&lt;p&gt;In order for secure clients to bootstrap the root security metadata from your server, you will need to provide them with the public key IDs of your root keys; you can find these as the file names of the files created in &lt;code&gt;/path/to/keys/root&lt;/code&gt; (as well as in the generated root.json under the &lt;code&gt;signed.roles.root.keyids&lt;/code&gt;). An example &lt;code&gt;cabal&lt;/code&gt; client configuration might look something like&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repository my-private-hackage&#xA;  url: http://example.com:8080/&#xA;  secure: True&#xA;  root-keys: 865cc6ce84231ccc990885b1addc92646b7377dd8bb920bdfe3be4d20c707796&#xA;             dd86074061a8a6570348e489aae306b997ed3ccdf87d567260c4568f8ac2cbee&#xA;             e4182227adac4f3d0f60c9e9392d720e07a8586e6f271ddcc1697e1eeab73390&#xA;  key-threshold: 2&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that if you elect to not use a secure client, the hackage server will not provide your client the most recent versions of packages from its index. The cabal-version:2.0 format packages are thus only available in the newer secure repository mode. See &lt;a href=&#34;https://github.com/haskell/cabal/issues/4624&#34;&gt;Issue #4625&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install&#xA;&#xA;hackage-server init&#xA;hackage-server run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you want to run the server directly from the build tree, run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal v2-run -- hackage-server init&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;once to initialise the state. After that you can run the server with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal v2-run -- hackage-server run --static-dir=datafiles/ --base-uri=http://127.0.0.1:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By default the server runs on port &lt;code&gt;8080&lt;/code&gt; with the following settings:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;URL:      http://localhost:8080/&#xA;username: admin&#xA;password: admin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To specify something different, see &lt;code&gt;hackage-server init --help&lt;/code&gt; for details.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;http://127.0.0.1:8080/packages/uploaders/edit&#34;&gt;http://127.0.0.1:8080/packages/uploaders/edit&lt;/a&gt; is used to add users (e.g. &lt;code&gt;admin&lt;/code&gt;) to &lt;em&gt;Uploaders&lt;/em&gt; group.&lt;/p&gt; &#xA;&lt;p&gt;The server can be stopped by using &lt;code&gt;Control-C&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This will save the current state and shutdown cleanly. Running again will resume with the same state.&lt;/p&gt; &#xA;&lt;h3&gt;Resetting&lt;/h3&gt; &#xA;&lt;p&gt;To reset everything, kill the server and delete the server state:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;rm -rf state/&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Note that the &lt;code&gt;datafiles/&lt;/code&gt; and &lt;code&gt;state/&lt;/code&gt; directories differ: &lt;code&gt;datafiles&lt;/code&gt; is for static html, templates and other files. The &lt;code&gt;state&lt;/code&gt; directory holds the database (using &lt;code&gt;acid-state&lt;/code&gt; and a separate blob store).&lt;/p&gt; &#xA;&lt;h3&gt;Creating users &amp;amp; uploading packages&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Admin front-end: &lt;a href=&#34;http://localhost:8080/admin&#34;&gt;http://localhost:8080/admin&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;List of users: &lt;a href=&#34;http://localhost:8080/users/&#34;&gt;http://localhost:8080/users/&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Register new users: &lt;a href=&#34;http://localhost:8080/users/register&#34;&gt;http://localhost:8080/users/register&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Currently there is no restriction on registering, but only an admin user can grant privileges to registered users e.g. by adding them to other groups. In particular there are groups:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;admins &lt;code&gt;http://localhost:8080/users/admins/&lt;/code&gt; -- administrators can do things with user accounts like disabling, deleting, changing other groups etc.&lt;/li&gt; &#xA; &lt;li&gt;trustees &lt;code&gt;http://localhost:8080/packages/trustees/&lt;/code&gt; -- trustees can do janitorial work on all packages&lt;/li&gt; &#xA; &lt;li&gt;mirrors &lt;code&gt;http://localhost:8080/packages/mirrorers/&lt;/code&gt; -- for special mirroring clients that are trusted to upload packages&lt;/li&gt; &#xA; &lt;li&gt;per-package maintainer groups &lt;code&gt;http://localhost:8080/package/foo/maintainers&lt;/code&gt; -- users allowed to upload packages&lt;/li&gt; &#xA; &lt;li&gt;uploaders &lt;code&gt;http://localhost:8080/packages/uploaders/&lt;/code&gt; -- for uploading new packages&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Mirroring&lt;/h3&gt; &#xA;&lt;p&gt;There is a client program included in the &lt;code&gt;hackage-server&lt;/code&gt; package called &lt;code&gt;hackage-mirror&lt;/code&gt;. It&#39;s intended to run against two servers, syncing all the packages from one to the other, e.g. getting all the packages from the old hackage and uploading them to a local instance of a hackage-server.&lt;/p&gt; &#xA;&lt;p&gt;To try it out:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;On the target server, add a user to the mirrorers group via &lt;a href=&#34;http://localhost:8080/packages/mirrorers/&#34;&gt;http://localhost:8080/packages/mirrorers/&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a config file that contains the source and target servers. Assuming you are cloning the packages on &lt;a href=&#34;http://hackage.haskell.org&#34;&gt;http://hackage.haskell.org&lt;/a&gt; locally, create the file &lt;code&gt;servers.cfg&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;source &#34;hackage&#34;&#xA;  uri: http://hackage.haskell.org&#xA;  type: secure&#xA;&#xA;target &#34;mirror&#34;&#xA;  uri: http://admin:admin@localhost:8080&#xA;  type: hackage2&#xA;&#xA;  post-mirror-hook: &#34;shell command to execute&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Recognized types are &lt;code&gt;hackage2&lt;/code&gt;, &lt;code&gt;secure&lt;/code&gt; and &lt;code&gt;local&lt;/code&gt;. The target server name was displayed when you ran.&lt;/p&gt; &lt;p&gt;Note, the target must &lt;em&gt;not&lt;/em&gt; have a trailing slash, or confusion will tend to occur. Additionally, if you have ipv6 setup on the machine, you may need to replace &lt;code&gt;localhost&lt;/code&gt; with &lt;code&gt;127.0.0.1&lt;/code&gt;.&lt;/p&gt; &lt;p&gt;Also note that you should mirror &lt;em&gt;from&lt;/em&gt; &lt;code&gt;hackage2&lt;/code&gt; or &lt;code&gt;secure&lt;/code&gt; typically and mirror &lt;em&gt;to&lt;/em&gt; &lt;code&gt;hackage2&lt;/code&gt;. Only mirroring from &lt;code&gt;secure&lt;/code&gt; will include dependency revision information.&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hackage-server run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the client, pointing to the config file:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;hackage-mirror servers.cfg&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;This will do a one-time sync, and will bail out at the first sign of trouble. You can also do more robust and continuous mirroring. Use the flag &lt;code&gt;--continuous&lt;/code&gt;. It will sync every 30 minutes (configurable with &lt;code&gt;--interval&lt;/code&gt;). In this mode it carries on even when some packages cannot be mirrored for some reason and remembers them so it doesn&#39;t try them again and again. You can force it to try again by deleting the state files it mentions.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt;</summary>
  </entry>
</feed>