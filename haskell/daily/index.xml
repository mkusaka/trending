<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-01T01:42:47Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm “file”                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-node</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/input-output-hk/cardano-node</id>
    <link href="https://github.com/input-output-hk/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/a978cbb4def7018be3d0a004127da356f4db32f1c318c1a48a/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/nightly?label=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; Overview&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linux &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.musl.cardano-node-linux/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;win64 &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macos &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/macos.cardano-node-macos/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Executable&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;code&gt;here &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration &lt;code&gt;.yaml&lt;/code&gt; files&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/input-output-hk/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_. Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;Logs are output to the &lt;code&gt;logs/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;h1&gt;Profiling &amp;amp; statistics&lt;/h1&gt; &#xA;&lt;p&gt;Profiling data and RTS run stats are stored in the &lt;code&gt;profile/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for how to obtain profiling information using the scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis operations&lt;/h1&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;docs/reference/byron-genesis.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Haskell Language Server&lt;/h2&gt; &#xA;&lt;p&gt;When using Haskell Language Server with Visual Studio Code, you may find that &lt;code&gt;HLINT annotations are ignored&amp;lt;https://github.com/haskell/haskell-language-server/issues/638&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, you may run the script &lt;code&gt;./scripts/reconfigure-hlint.sh&lt;/code&gt; to generate a &lt;code&gt;.hlint.yaml&lt;/code&gt; file with HLINT ignore rules derived from the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; is essentially a container which implements several components such networking, consensus, and storage. These components have individual test coverage. The node goes through integration and release testing by Devops/QA while automated CLI tests are ongoing alongside development.&lt;/p&gt; &#xA;&lt;p&gt;Developers on &lt;code&gt;cardano-node&lt;/code&gt; can &lt;code&gt;launch their own testnets &amp;lt;doc/getting-started/launching-a-testnet.md&amp;gt;&lt;/code&gt;_ or &lt;code&gt;run the chairman tests &amp;lt;doc/getting-started/running-chairman-tests.md&amp;gt;&lt;/code&gt;_ locally.&lt;/p&gt; &#xA;&lt;h2&gt;Chairman tests&lt;/h2&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;h2&gt;Pretty printing CBOR encoded files&lt;/h2&gt; &#xA;&lt;p&gt;It may be useful to print the on chain representations of blocks, delegation certificates, txs and update proposals. There are two commands that do this (for any cbor encoded file):&lt;/p&gt; &#xA;&lt;p&gt;To pretty print as CBOR: &lt;code&gt;cabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validate CBOR files&lt;/h2&gt; &#xA;&lt;p&gt;You can validate Byron era blocks, delegation certificates, txs and update proposals with the &lt;code&gt;validate-cbor&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Native Tokens&lt;/h1&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started we have compiled a handy list of resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation for native tokens &amp;lt;https://docs.cardano.org/native-tokens/learn&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;You can also read more about &lt;code&gt;native tokens and how they compare to ada and ERC20 &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/features.rst&amp;gt;&lt;/code&gt;_. Browse native tokens created on the Cardano blockchain and see their transactions in an interactive dashboard that allows filtering and searching: nativetokens.da.iogservices.io.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://input-output-hk.github.io/cardano-node/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;./scripts/haddocs.sh&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-wallet</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/input-output-hk/cardano-wallet</id>
    <link href="https://github.com/input-output-hk/cardano-wallet" rel="alternate"></link>
    <summary type="html">&lt;p&gt;HTTP server &amp; command-line for managing UTxOs and HD wallets in Cardano.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;big&gt;&lt;strong&gt;Cardano Wallet&lt;/strong&gt;&lt;/big&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img width=&#34;200&#34; src=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/.github/images/cardano-logo.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/7ea3dac7a16f066d8dfc8f426a9a9f7a2131e899cd96c444cf/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-wallet-nightly&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/59ea9363b8526e867005ca8839db47715bc5f661f36e490143/master?label=BENCHMARK&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/actions?query=workflow%3Awindows&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-wallet/windows?label=Windows&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hydra.iohk.io/jobset/Cardano/cardano-wallet#tabs-jobs&#34;&gt;&lt;img src=&#34;https://img.shields.io/endpoint?style=for-the-badge&amp;amp;url=https%3A%2F%2Fhydra.iohk.io%2Fjob%2FCardano%2Fcardano-wallet%2Frequired%2Fshield&#34;&gt;&lt;/a&gt; &#xA; &lt;!--&#xA;  &lt;a href=&#34;https://coveralls.io/github/input-output-hk/cardano-wallet?branch=HEAD&#34;&gt;&lt;img src=&#34;https://img.shields.io/coveralls/github/input-output-hk/cardano-wallet/HEAD?style=for-the-badge&#34; /&gt;&lt;/a&gt;&#xA;  --&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Cardano Wallet helps you manage your Ada. You can use it to send and receive payments on the &lt;a href=&#34;https://www.cardano.org&#34;&gt;Cardano&lt;/a&gt; blockchain.&lt;/p&gt; &#xA;&lt;p&gt;This project provides an HTTP Application Programming Interface (API) and command-line interface (CLI) for working with your wallet.&lt;/p&gt; &#xA;&lt;p&gt;It can be used as a component of a frontend such as &lt;a href=&#34;https://daedaluswallet.io&#34;&gt;Daedalus&lt;/a&gt;, which provides a friendly user interface for wallets. Most users who would like to use Cardano should start with Daedalus.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;span&gt;ℹ&lt;/span&gt; This source code repository contains the next major version of Cardano Wallet, which has been completely rewritten for the &lt;a href=&#34;https://roadmap.cardano.org/&#34;&gt;Shelley&lt;/a&gt; phase.&lt;/p&gt; &#xA; &lt;p&gt;&lt;span&gt;💡&lt;/span&gt; The Byron version of Cardano Wallet is in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-sl&#34;&gt;cardano-sl&lt;/a&gt; repository.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;wget https://raw.githubusercontent.com/input-output-hk/cardano-wallet/master/docker-compose.yml&#xA;NETWORK=testnet docker-compose up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Fantastic! The server is up-and-running, waiting for HTTP requests on &lt;code&gt;localhost:8090/v2&lt;/code&gt; e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl http://localhost:8090/v2/network/information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or to be accessed via CLI, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker run --network host --rm inputoutput/cardano-wallet network information&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;See also &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/Docker&#34;&gt;Docker&lt;/a&gt; for more information about using docker.&lt;/p&gt; &#xA;&lt;p&gt;NixOS users can also use the &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/NixOS&#34;&gt;NixOS service&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to install (Linux / Windows / Mac OS)&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;strong&gt;Installation Instructions&lt;/strong&gt; for each available &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases&#34;&gt;release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;h3&gt;Latest releases&lt;/h3&gt; &#xA; &lt;table&gt; &#xA;  &lt;thead&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;th&gt;cardano-wallet&lt;/th&gt; &#xA;    &lt;th&gt;cardano-node (compatible versions)&lt;/th&gt; &#xA;    &lt;th&gt;SMASH (compatible versions)&lt;/th&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/thead&gt; &#xA;  &lt;tbody&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;code&gt;master&lt;/code&gt; branch&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-05-27&#34;&gt;v2022-05-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-04-27&#34;&gt;v2022-04-27&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.34.1&#34;&gt;1.34.1&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;   &lt;tr&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/releases/tag/v2022-01-18&#34;&gt;v2022-01-18&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases/tag/1.33.0&#34;&gt;1.33.0&lt;/a&gt;&lt;/td&gt; &#xA;    &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/smash/releases/tag/1.6.1&#34;&gt;1.6.1&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;/tr&gt; &#xA;  &lt;/tbody&gt; &#xA; &lt;/table&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;How to build from sources&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/developers/Building&#34;&gt;Building&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to test&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/contributing/Testing&#34;&gt;Testing&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Link&lt;/th&gt; &#xA;   &lt;th&gt;Audience&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide&#34;&gt;User Guide&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of Cardano Wallet&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/user-guide/cli&#34;&gt;CLI Manual&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/api/edge&#34;&gt;API Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Users of the Cardano Wallet API&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/cardano-wallet/&#34;&gt;Cardano Wallet Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://input-output-hk.github.io/adrestia/&#34;&gt;Adrestia Documentation&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;Anyone interested in the project and our development process&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-wallet/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/license/input-output-hk/cardano-wallet.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>b3nj5m1n/xdg-ninja</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/b3nj5m1n/xdg-ninja</id>
    <link href="https://github.com/b3nj5m1n/xdg-ninja" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A shell script which checks your $HOME for unwanted files and directories.&lt;/p&gt;&lt;hr&gt;&lt;div&gt; &#xA; &lt;h1 align=&#34;center&#34;&gt;xdg-ninja&lt;/h1&gt; &#xA; &lt;h5 align=&#34;center&#34;&gt;Because you wouldn&#39;t let just anyone into your &lt;i&gt;$HOME&lt;/i&gt;&lt;/h5&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;A shell script which checks your &lt;em&gt;$HOME&lt;/em&gt; for unwanted files and directories.&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://s8.gifyu.com/images/Peek-2022-05-13-16-07.gif&#34; width=&#34;500&#34;&gt; &lt;/p&gt; &#xA;&lt;p&gt;When it encounters a file it knows about, it will tell you whether it&#39;s possible to move this file to an appropriate location, and how to do it.&lt;/p&gt; &#xA;&lt;p&gt;The configurations are from the &lt;a href=&#34;https://wiki.archlinux.org/title/XDG_Base_Directory&#34;&gt;arch wiki page on XDG_BASE_DIR&lt;/a&gt;, &lt;a href=&#34;https://github.com/doron-cohen/antidot&#34;&gt;antidot&lt;/a&gt; (thanks to Scr0nch for writing a conversion tool), and contributed by other users.&lt;/p&gt; &#xA;&lt;h2&gt;Running&lt;/h2&gt; &#xA;&lt;p&gt;Clone the repository somewhere, then run the &lt;em&gt;./xdg-ninja.sh&lt;/em&gt; script.&lt;/p&gt; &#xA;&lt;p&gt;This will run every test in the default configuration.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;your favorite POSIX-compliant shell (&lt;a href=&#34;https://repology.org/project/bash/packages&#34;&gt;bash&lt;/a&gt;, &lt;a href=&#34;https://repology.org/project/zsh/packages&#34;&gt;zsh&lt;/a&gt;, &lt;a href=&#34;https://repology.org/project/dash-shell/packages&#34;&gt;dash&lt;/a&gt;, ...)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/jq/packages&#34;&gt;jq&lt;/a&gt; for parsing the json files&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Optional&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/glow/packages&#34;&gt;glow&lt;/a&gt; for rendering markdown in the terminal (&lt;a href=&#34;https://repology.org/project/bat-cat/packages&#34;&gt;bat&lt;/a&gt;, &lt;a href=&#34;https://repology.org/project/pygments/versions&#34;&gt;pygmentize&lt;/a&gt; or &lt;a href=&#34;https://repology.org/project/highlight/packages&#34;&gt;highlight&lt;/a&gt; can be used as fallback, but glow&#39;s output is clearer and therefore glow is recommended)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://repology.org/project/cabal/packages&#34;&gt;cabal&lt;/a&gt; for compiling the helper program for creating configurations&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;The configuration is done in the &lt;em&gt;programs/&lt;/em&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;You define a program, and then a list of files and directories which this program ruthlessly puts into your &lt;em&gt;$HOME&lt;/em&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;For each file/directory, you specify if it can be (re)moved.&lt;/p&gt; &#xA;&lt;p&gt;If this is the case, you also specify instructions on how to accomplish this in markdown.&lt;/p&gt; &#xA;&lt;p&gt;Files in this directory can have any name, but using the name of the program is encouraged.&lt;/p&gt; &#xA;&lt;h3&gt;Automatically Generating Configuration&lt;/h3&gt; &#xA;&lt;p&gt;You need &lt;em&gt;haskell&lt;/em&gt; and &lt;em&gt;cabal&lt;/em&gt; installed. (To be clear, this is just for a tool that will help you automatically generate the config files, you still only need your shell to run the tests)&lt;/p&gt; &#xA;&lt;p&gt;Run the following command:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal run xdgnj add&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Manually&lt;/h3&gt; &#xA;&lt;p&gt;We&#39;re going to use &lt;em&gt;git&lt;/em&gt; as an example.&lt;/p&gt; &#xA;&lt;p&gt;It puts the file &lt;em&gt;.gitconfig&lt;/em&gt; into _$HOME.&lt;/p&gt; &#xA;&lt;p&gt;Luckily, the XDG spec is supported by git, so we can simply move the file to &lt;em&gt;XDG_CONFIG_HOME/git/config&lt;/em&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We can use that last sentence as our instructions. In this case, there are no newlines, so escaping this string for use in json is trivial, however, this is how you should generally approach it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo &#34;Luckily, the XDG spec is supported by git, so we can simply move the file to _XDG_CONFIG_HOME/git/config_.&#34; | jq -aRs .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Let&#39;s see what the output of this command looks like for something a little more sophisticated. Here&#39;s an example file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat example.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;Currently not fixable.&#xA;&#xA;_(But you can probably just delete the dir)_&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here&#39;s what catting this file to the &lt;em&gt;jq&lt;/em&gt; command produces:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cat example.md | jq -aRs .&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code&gt;&#34;Currently not fixable.\n\n_(But you can probably just delete the dir)_\n&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now, we can assemble our final json file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;    &#34;name&#34;: &#34;git&#34;,&#xA;    &#34;files&#34;: [&#xA;        {&#xA;            &#34;path&#34;: &#34;$HOME/.gitconfig&#34;,&#xA;            &#34;movable&#34;: true,&#xA;            &#34;help&#34;: &#34;Luckily, the XDG spec is supported by git, so we can simply move the file to _XDG_CONFIG_HOME/git/config_.\n&#34;&#xA;        }&#xA;    ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Saving this as &lt;em&gt;git.json&lt;/em&gt; in the &lt;em&gt;programs/&lt;/em&gt; directory will result in the script picking it up and checking the file.&lt;/p&gt; &#xA;&lt;p&gt;If you&#39;ve created a configuration for a file that isn&#39;t in the offical repository yet, make sure to create a pull request so that other people can benefit from it as well.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kmonad/kmonad</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/kmonad/kmonad</id>
    <link href="https://github.com/kmonad/kmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An advanced keyboard manager&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img alt=&#34;KMonad&#34; title=&#34;KMonad&#34; height=&#34;32&#34; src=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/kmonad.svg?sanitize=true&#34;&gt; &lt;/h1&gt; &#xA;&lt;h4 align=&#34;center&#34;&gt;The Onion of Keyboard Management Tools, available on GNU/Linux, Windows, and MacOS!&lt;/h4&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;Features&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#installation&#34;&gt;Installation&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#configuration&#34;&gt;Configuration&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#troubleshooting&#34;&gt;Troubleshooting&lt;/a&gt; • &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#disclaimer&#34;&gt;Disclaimer&lt;/a&gt; • &lt;/p&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;KMonad is an advanced tool that lets you infinitely customize and extend the functionalities of almost any keyboard. For a detailed list of features, see &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/#features&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to get started with the latest, stable binary release, please check out the master branch, if you are interested in the latest additions and tweaks, switch on over to develop and compile your own binary.&lt;/p&gt; &#xA;&lt;p&gt;Additionally, if you need any help or just want to say hi, you can join our &lt;a href=&#34;https://discord.gg/3tFfWmnahN&#34;&gt;Discord server&lt;/a&gt; or jump into our &lt;a href=&#34;https://web.libera.chat/#kmonad&#34;&gt;IRC channel&lt;/a&gt; (&lt;code&gt;#kmonad@irc.libera.chat&lt;/code&gt;), which is also bridged with matrix (&lt;code&gt;#kmonad:libera.chat&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;p&gt;KMonad offers advanced customization features such as &lt;strong&gt;layers&lt;/strong&gt;, &lt;strong&gt;multi-tap&lt;/strong&gt;, &lt;strong&gt;tap-hold&lt;/strong&gt;, and much more. These features are usually available at the hardware level on the QMK-firmware enabled keyboards. However, KMonad allows you to enjoy such features in virtually any keyboard by low-level system manipulations.&lt;/p&gt; &#xA;&lt;p&gt;For a good introduction to KMonad, have a look at &lt;a href=&#34;https://www.youtube.com/watch?v=Dhj1eauljwU&#34;&gt;this Youtube video&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Key Customizations&lt;/h4&gt; &#xA;&lt;p&gt;KMonad lets you map any keyboard button to any keymap. Want to swap the useless &lt;strong&gt;Caps Lock&lt;/strong&gt; key with the &lt;strong&gt;Escape&lt;/strong&gt; key? Want to have your modifiers such as &lt;strong&gt;Shift&lt;/strong&gt; and &lt;strong&gt;Control&lt;/strong&gt; on your home row, without breaking your normal typing flow? Want a modifier that is combination of &lt;strong&gt;Alt + Ctrl + Super + Shift&lt;/strong&gt;? You can do all of those and much more!&lt;/p&gt; &#xA;&lt;h4&gt;Layers&lt;/h4&gt; &#xA;&lt;p&gt;A layer is a set of keymaps assigned to your keyboard&#39;s buttons. You can have as many layers on top of your base layer as you want. For instance, you can have your regular QWERTY layout, a Colemak/ Dvorak layout, a numbers and symbols layer, a function keys layer, a layer for mouse navigation and system controls --- all in a 60% keyboard. When a particular layer is active, any keypress is interpreted according to the layout defined in that layer. With proper configurations, you can jump to a specific layer or switch to one for the next keypress, or do various other complex manipulations.&lt;/p&gt; &#xA;&lt;h4&gt;Multi-Use and Multi-Tap Buttons&lt;/h4&gt; &#xA;&lt;p&gt;One of the distinguishing features of KMonad is the vast capabilities with Multi-Use Buttons. You can have a single button do different things based on whether it is pressed quickly in succession, or pressed once, or held. For example, you can configure the &lt;strong&gt;Caps Lock&lt;/strong&gt; key to act as an &lt;strong&gt;Escape&lt;/strong&gt; button when pressed once and released, a &lt;strong&gt;Ctrl&lt;/strong&gt; modifier when held-down, and a button to jump to a layer when pressed twice quickly in succession. You can make the left and right &lt;strong&gt;Shift&lt;/strong&gt; keys to act like left and right parentheses (like the Space Cadet Shift keys) when tapped once, and regular &lt;strong&gt;Shift&lt;/strong&gt; keys when held down. The possibilities are infinite!&lt;/p&gt; &#xA;&lt;h4&gt;Command Buttons&lt;/h4&gt; &#xA;&lt;p&gt;With Command Buttons you can trigger shell commands with a tap of any button.&lt;/p&gt; &#xA;&lt;h4&gt;And More!&lt;/h4&gt; &#xA;&lt;p&gt;There are many more exciting features of KMonad that you can find in the &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;configuration tutorial&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For more information on how to install KMonad, please refer to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/installation.md&#34;&gt;installation&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;For information on how to configure KMonad, please refer you to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/keymap/tutorial.kbd&#34;&gt;the configuration tutorial&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;user configurations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Want to add your own keyboard configuration to &lt;a href=&#34;https://github.com/kmonad/kmonad-contrib&#34;&gt;kmonad-contrib&lt;/a&gt;? Just fork the repository, create a new subdirectory using your GitHub username and submit a pull request!&lt;/p&gt; &#xA;&lt;h3&gt;Editor Support for the Configuration Language&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kbd-mode&#34;&gt;Emacs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/kmonad/kmonad-vim&#34;&gt;Vim&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/canadaduane/vscode-kmonad&#34;&gt;VSCode&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Startup&lt;/h3&gt; &#xA;&lt;p&gt;There are startup scripts available for different init systems in &lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/startup/&#34;&gt;startup&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;For several commonly asked questions regarding various configuration issues, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kmonad/kmonad/master/doc/faq.md&#34;&gt;the FAQ&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;The original maintainer is chronically ill and currently unable to work on KMonad. Luckily we have a very helpful and pleasant community that is happy to be of assistance. When energy and circumstance permits, the core developer will labour to make progress, but for now this will be sporadically and unpredictably.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>purescript/purescript</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/purescript/purescript</id>
    <link href="https://github.com/purescript/purescript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A strongly-typed language that compiles to JavaScript&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/purescript/purescript/master/logo.png&#34; alt=&#34;PureScript&#34; width=&#34;392&#34;&gt; &#xA;&lt;p&gt;A small strongly typed programming language with expressive types that compiles to JavaScript, written in and inspired by Haskell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/purescript&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/purescript.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Language info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://purescript.org&#34;&gt;PureScript home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/releases&#34;&gt;Releases &amp;amp; changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/raw/master/CONTRIBUTING.md&#34;&gt;Contributing to PureScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.purescript.org/&#34;&gt;PureScript book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://try.purescript.org&#34;&gt;Try PureScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pursuit.purescript.org/&#34;&gt;Pursuit Package Index&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help!&lt;/h2&gt; &#xA;&lt;h3&gt;Community Spaces&lt;/h3&gt; &#xA;&lt;p&gt;The following spaces are governed by the &lt;a href=&#34;https://github.com/purescript/governance/raw/master/CODE_OF_CONDUCT.md&#34;&gt;PureScript Community Code of Conduct&lt;/a&gt;. The majority of PureScript users use these spaces to discuss and collaborate on PureScript-related topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://purescript.org/chat&#34;&gt;PureScript Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.purescript.org/&#34;&gt;PureScript Discourse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unaffiliated Spaces&lt;/h3&gt; &#xA;&lt;p&gt;Some PureScript users also collaborate in the below spaces. These do not fall under the code of conduct linked above. They may have no code of conduct or one very different than the one linked above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#purescript:matrix.org&#34;&gt;PureScript Matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/purescript&#34;&gt;PureScript on StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libera.chat/&#34;&gt;The &lt;code&gt;#purescript&lt;/code&gt; channel on Libera.Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>agda/agda</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/agda/agda</id>
    <link href="https://github.com/agda/agda" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Agda is a dependently typed programming language / interactive theorem prover.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Agda 2&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/Agda&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/Agda.svg?label=Hackage&#34; alt=&#34;Hackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/package/Agda&#34;&gt;&lt;img src=&#34;https://www.stackage.org/package/Agda/badge/lts?label=Stackage&#34; alt=&#34;Stackage version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22Build%2C+Test%2C+and+Benchmark%22&#34;&gt;&lt;img src=&#34;https://github.com/agda/agda/workflows/Build,%20Test,%20and%20Benchmark/badge.svg?branch=master&#34; alt=&#34;Test&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22stack+build%22&#34;&gt;&lt;img src=&#34;https://github.com/agda/agda/workflows/stack%20build/badge.svg?sanitize=true&#34; alt=&#34;Stack Build Status via GH Actions&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://agda.readthedocs.io/en/latest/?badge=latest&#34;&gt;&lt;img src=&#34;https://readthedocs.org/projects/agda/badge/?version=latest&#34; alt=&#34;Documentation Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://agda.zulipchat.com&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/zulip-join_chat-brightgreen.svg?sanitize=true&#34; alt=&#34;Agda Zulip&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/agda/agda/master/doc/user-manual/agda.svg?sanitize=true&#34; alt=&#34;The official Agda logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Note that this README is only about Agda, not its standard library. See the &lt;a href=&#34;http://wiki.portal.chalmers.se/agda/pmwiki.php&#34;&gt;Agda Wiki&lt;/a&gt; for information about the library.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://agda.readthedocs.io&#34;&gt;User manual&lt;/a&gt; (per-commit pdf can be downloaded from the &lt;a href=&#34;https://github.com/agda/agda/actions?query=workflow%3A%22User+Manual%22&#34;&gt;github actions&lt;/a&gt; page)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/agda/agda/raw/master/CHANGELOG.md&#34;&gt;CHANGELOG&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agda.readthedocs.io/en/latest/getting-started/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://agda.readthedocs.io/en/latest/getting-started/a-taste-of-agda.html&#34;&gt;Quick guide to editing, type checking and compiling Agda code&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing to Agda&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Contribution how-to: &lt;a href=&#34;https://github.com/agda/agda/raw/master/HACKING.md&#34;&gt;&lt;code&gt;HACKING&lt;/code&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/andreasabel/haskell-style-guide/raw/master/haskell-style.md&#34;&gt;Haskell style-guide&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jgm/pandoc</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/jgm/pandoc</id>
    <link href="https://github.com/jgm/pandoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal markup converter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pandoc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jgm/pandoc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jgm/pandoc.svg?label=current+release&#34; alt=&#34;github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/pandoc.svg?label=hackage&#34; alt=&#34;hackage release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/pandoc.svg?sanitize=true&#34; alt=&#34;homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/lts/package/pandoc-types&#34;&gt;&lt;img src=&#34;https://stackage.org/package/pandoc/badge/lts&#34; alt=&#34;stackage LTS package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jgm/pandoc/actions&#34;&gt;&lt;img src=&#34;https://github.com/jgm/pandoc/workflows/CI%20tests/badge.svg?sanitize=true&#34; alt=&#34;CI tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2+-lightgray.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/pandoc-discuss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pandoc-discuss-red.svg?style=social&#34; alt=&#34;pandoc-discuss on google groups&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The universal markup converter&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc is a &lt;a href=&#34;https://haskell.org&#34;&gt;Haskell&lt;/a&gt; library for converting from one markup format to another, and a command-line tool that uses this library. It can convert &lt;em&gt;from&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;input-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;creole&lt;/code&gt; (&lt;a href=&#34;http://www.wikicreole.org/wiki/Creole1.0&#34;&gt;Creole 1.0&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csv&lt;/code&gt; (&lt;a href=&#34;https://tools.ietf.org/html/rfc4180&#34;&gt;CSV&lt;/a&gt; table)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;endnotexml&lt;/code&gt; (&lt;a href=&#34;https://support.clarivate.com/Endnote/s/article/EndNote-XML-Document-Type-Definition&#34;&gt;EndNote XML bibliography&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;ODT&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ris&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/RIS_(file_format)&#34;&gt;RIS&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;t2t&lt;/code&gt; (&lt;a href=&#34;https://txt2tags.org&#34;&gt;txt2tags&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tikiwiki&lt;/code&gt; (&lt;a href=&#34;https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax&#34;&gt;TikiWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;twiki&lt;/code&gt; (&lt;a href=&#34;https://twiki.org/cgi-bin/view/TWiki/TextFormattingRules&#34;&gt;TWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;vimwiki&lt;/code&gt; (&lt;a href=&#34;https://vimwiki.github.io&#34;&gt;Vimwiki&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua reader, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It can convert &lt;em&gt;to&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;output-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;asciidoc&lt;/code&gt; (&lt;a href=&#34;https://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc&lt;/a&gt;) or &lt;code&gt;asciidoctor&lt;/code&gt; (&lt;a href=&#34;https://asciidoctor.org/&#34;&gt;AsciiDoctor&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;beamer&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/beamer&#34;&gt;LaTeX beamer&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;context&lt;/code&gt; (&lt;a href=&#34;https://www.contextgarden.net/&#34;&gt;ConTeXt&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; or &lt;code&gt;docbook4&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt; 4)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook5&lt;/code&gt; (DocBook 5)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; or &lt;code&gt;epub3&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt; v3 book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub2&lt;/code&gt; (EPUB v2)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; or &lt;code&gt;html5&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;, i.e.&amp;nbsp;&lt;a href=&#34;https://html.spec.whatwg.org/&#34;&gt;HTML5&lt;/a&gt;/XHTML &lt;a href=&#34;https://www.w3.org/TR/html-polyglot/&#34;&gt;polyglot markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html4&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/TR/xhtml1/&#34;&gt;XHTML&lt;/a&gt; 1.0 Transitional)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;icml&lt;/code&gt; (&lt;a href=&#34;https://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/indesign/sdk/cs6/idml/idml-cookbook.pdf&#34;&gt;InDesign ICML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_archiving&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Archiving and Interchange Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_articleauthoring&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Article Authoring Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_publishing&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Journal Publishing Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (alias for &lt;code&gt;jats_archiving&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markua&lt;/code&gt; (&lt;a href=&#34;https://leanpub.com/markua/read&#34;&gt;Markua&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_ms(7)&#34;&gt;roff ms&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;OpenOffice text document&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opendocument&lt;/code&gt; (&lt;a href=&#34;http://opendocument.xml.org&#34;&gt;OpenDocument&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pdf&lt;/code&gt; (&lt;a href=&#34;https://www.adobe.com/pdf/&#34;&gt;PDF&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;plain&lt;/code&gt; (plain text),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pptx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_PowerPoint&#34;&gt;PowerPoint&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;texinfo&lt;/code&gt; (&lt;a href=&#34;https://www.gnu.org/software/texinfo/&#34;&gt;GNU Texinfo&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slideous&lt;/code&gt; (&lt;a href=&#34;https://goessner.net/articles/slideous/&#34;&gt;Slideous&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slidy&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/Talks/Tools/Slidy2/&#34;&gt;Slidy&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dzslides&lt;/code&gt; (&lt;a href=&#34;https://paulrouget.com/dzslides/&#34;&gt;DZSlides&lt;/a&gt; HTML5 + JavaScript slide show),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;revealjs&lt;/code&gt; (&lt;a href=&#34;https://revealjs.com/&#34;&gt;reveal.js&lt;/a&gt; HTML5 + JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s5&lt;/code&gt; (&lt;a href=&#34;https://meyerweb.com/eric/tools/s5/&#34;&gt;S5&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tei&lt;/code&gt; (&lt;a href=&#34;https://github.com/TEIC/TEI-Simple&#34;&gt;TEI Simple&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;xwiki&lt;/code&gt; (&lt;a href=&#34;https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/&#34;&gt;XWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;zimwiki&lt;/code&gt; (&lt;a href=&#34;https://zim-wiki.org/manual/Help/Wiki_Syntax.html&#34;&gt;ZimWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua writer, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Pandoc can also produce PDF output via LaTeX, Groff ms, or HTML.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc’s enhanced version of Markdown includes syntax for tables, definition lists, metadata blocks, footnotes, citations, math, and much more. See the User’s Manual below under &lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer. Users can also run custom pandoc filters to modify the intermediate AST (see the documentation for &lt;a href=&#34;https://pandoc.org/filters.html&#34;&gt;filters&lt;/a&gt; and &lt;a href=&#34;https://pandoc.org/lua-filters.html&#34;&gt;Lua filters&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Because pandoc’s intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. And some document elements, such as complex tables, may not fit into pandoc’s simple document model. While conversions from pandoc’s Markdown to all formats aspire to be perfect, conversions from formats more expressive than pandoc’s Markdown can be expected to be lossy.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Here’s &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/INSTALL.md&#34;&gt;how to install pandoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc’s website contains a full &lt;a href=&#34;https://pandoc.org/MANUAL.html&#34;&gt;User’s Guide&lt;/a&gt;. It is also available &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/MANUAL.txt&#34;&gt;here&lt;/a&gt; as pandoc-flavored Markdown. The website also contains some &lt;a href=&#34;https://pandoc.org/demos.html&#34;&gt;examples of the use of pandoc&lt;/a&gt; and a limited &lt;a href=&#34;https://pandoc.org/try&#34;&gt;online demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests, bug reports, and feature requests are welcome. Please make sure to read &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/CONTRIBUTING.md&#34;&gt;the contributor guidelines&lt;/a&gt; before opening a new issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;© 2006-2022 John MacFarlane (&lt;a href=&#34;mailto:jgm@berkeley.edu&#34;&gt;jgm@berkeley.edu&lt;/a&gt;). Released under the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.html&#34; title=&#34;GNU General Public License&#34;&gt;GPL&lt;/a&gt;, version 2 or greater. This software carries no warranty of any kind. (See COPYRIGHT for full copyright and warranty notices.)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/ouroboros-network</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/input-output-hk/ouroboros-network</id>
    <link href="https://github.com/input-output-hk/ouroboros-network" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An implementation of the Ouroboros family of consensus algorithms, with its networking support&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Ouroboros-Network&lt;/h1&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;io-sim&lt;/code&gt; - &lt;code&gt;IOSim&lt;/code&gt; simulator monad which supports asynchronous exceptions, &lt;code&gt;STM&lt;/code&gt; transactions and &lt;code&gt;async&lt;/code&gt; interface, timers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;io-classes&lt;/code&gt; - type classes, all of them have instance for both &lt;code&gt;IOSim&lt;/code&gt; and &lt;code&gt;IO&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;typed-protocols&lt;/code&gt; - session type framework with support of &lt;a href=&#34;https://en.wikipedia.org/wiki/Protocol_pipelining&#34;&gt;protocol pipelining&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;See 45min Haskell eXchange 2019 &lt;a href=&#34;https://skillsmatter.com/skillscasts/14633-45-minute-talk-by-duncan-coutts&#34;&gt;talk&lt;/a&gt; by @dcoutts.&lt;/li&gt; &#xA;   &lt;li&gt;See three 50min Monadic Party 2019 workshop talks by @coot: &lt;a href=&#34;https://www.youtube.com/watch?v=j8gza2L61nM&#34;&gt;Part 1&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=oV6KSl1srL8&#34;&gt;Part 2&lt;/a&gt;, &lt;a href=&#34;https://www.youtube.com/watch?v=nOIQCRPwmPA&#34;&gt;Part 3&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ouroboros-network&lt;/code&gt;- ouroboros network package which implements protocols which to run ouroboros family of protocols, multiplexing layer.&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/input-output-hk/cardano-byron-proxy&#34;&gt;&lt;code&gt;byron-proxy&lt;/code&gt;&lt;/a&gt; is a network protocol proxy between Byron and Shelley. It now lives in a separate repository.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network Documentation&lt;/h2&gt; &#xA;&lt;p&gt;We have two documents which describe various levels of the networking layer of the Cardano Shelley implementation:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/1&#34;&gt;Introduction to the design of Data Diffusion and Networking of Cardano Shelley&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document explains the technical requirements and key constraints for the networking layer of the &lt;em&gt;Cardano Shelley&lt;/em&gt; implementation of &lt;em&gt;Ouroboros Praos&lt;/em&gt;. This is a design document.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.network-docs.x86_64-linux/latest/download/2&#34;&gt;The Shelley Networking Protocol&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This document is a technical specification of the networking protocol. It includes serialisation formats, necessary details of multiplexer and technical specifications of mini-protocols used by either &lt;em&gt;node-to-node&lt;/em&gt; and &lt;em&gt;node-to-client&lt;/em&gt; flavours of the protocol.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://input-output-hk.github.io/ouroboros-network/&#34;&gt;Haddock documentation&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://docs.cardano.org/en/latest/&#34;&gt;Official Cardano Documentation&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Specifically the section &#34;Explore Cardano&#34; is helpful, since it talks about the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-architecture/overview&#34;&gt;Cardano Architecture&lt;/a&gt;, &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-design-rationale&#34;&gt;Cardano Design Rationale&lt;/a&gt;, the &lt;a href=&#34;https://docs.cardano.org/explore-cardano/cardano-network/about-the-cardano-network&#34;&gt;Cardano Network&lt;/a&gt;, etc. Although the Cardano documentation is less detailed, it is a good place to start and refresh some more basic concepts about Cardano.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Ouroboros-Network API&lt;/h2&gt; &#xA;&lt;p&gt;The API consists of three layers:&lt;/p&gt; &#xA;&lt;p&gt;• mini-protocol api&#39;s, which are GADTs for each mini-protocol under &lt;code&gt;Ouroboros.Network.Protocol&lt;/code&gt;; this hides heavy type machinery of session types. One only needs the typed &lt;code&gt;Peer&lt;/code&gt; type when one is using &lt;code&gt;runPeer&lt;/code&gt; or &lt;code&gt;runPeerPipelined&lt;/code&gt; function and each protocol exposes a function to create it (e.g. &lt;code&gt;Ouroboros.Network.Protocol.ChainSync.Client.chainSyncClientPeer&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;p&gt;• callback &lt;code&gt;ptcl -&amp;gt; channel -&amp;gt; m ()&lt;/code&gt; where &lt;code&gt;ptcl&lt;/code&gt; is enumeration for each mini-protocol, this is either &lt;code&gt;NodeToNodeProtocols&lt;/code&gt; or &lt;code&gt;NodeToClientProtocols&lt;/code&gt;. The callback is wrapped in &lt;code&gt;OuroborosApplication&lt;/code&gt; GADT which allows to differentiate the initiator / responder (or client / server) callbacks.&lt;/p&gt; &#xA;&lt;p&gt;• versioning which is a map from version numbers to the above callbacks and version data (the tricky part here is that version data type can be different between different versions; there is a simple way of building this map using a semigroup). You can use &lt;code&gt;simpleSingletonVersion&lt;/code&gt; if your application does not depend on negotiated version data. However, &lt;code&gt;Ouroboros.Network.NodeToNode&lt;/code&gt; and &lt;code&gt;Ouroboros.Network.NodeToClient&lt;/code&gt; expose &lt;code&gt;V1&lt;/code&gt; api which hides versioning from the caller.&lt;/p&gt; &#xA;&lt;h2&gt;Demo applications&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/Ouroboros-Network-Demo&#34;&gt;demo-chain-sync&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/wiki/cardano-ping&#34;&gt;cardano-ping&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/network-mux/demo/mux-demo.hs&#34;&gt;mux-demo&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ouroboros-network-framework/demo/ping-pong.hs&#34;&gt;demo-ping-pong&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/Win32-network/demo/named-pipe-demo.hs&#34;&gt;named-pipe-demo&lt;/a&gt; (Windows only)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/raw/master/ntp-client/demo/Main.hs&#34;&gt;demo-ntp-client&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;details&gt; &#xA; &lt;summary&gt;Instructions&lt;/summary&gt; To run a demo type: &#xA; &lt;pre&gt;&lt;code&gt;cabal run &amp;lt;DEMO_NAME&amp;gt; --&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA; &lt;p&gt;After &lt;code&gt;--&lt;/code&gt; you will need to pass arguments, when a demo is run without arguments it will specify what arguments it needs.&lt;/p&gt; &#xA;&lt;/details&gt; &#xA;&lt;h1&gt;Ouroboros-Consensus&lt;/h1&gt; &#xA;&lt;p&gt;Consensus layer of the family Ouroboros blockchain protocols.&lt;/p&gt; &#xA;&lt;h2&gt;Ouroboros-Consensus Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;ouroboros-consensus/docs&lt;/code&gt; folder contains documentation about the consensus layer. Start with the &lt;a href=&#34;https://github.com/input-output-hk/ouroboros-network/ouroboros-consensus/docs/Contributing.md&#34;&gt;README.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/ouroboros-network/native.consensus-docs.x86_64-linux/latest/download/1&#34;&gt;The Cardano Consensus and Storage Layer&lt;/a&gt;&lt;/p&gt; &lt;p&gt;This technical report explains the design of the consensus and storage layer.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Formatting&lt;/h2&gt; &#xA;&lt;p&gt;The consensus team uses &lt;code&gt;stylish-haskell&lt;/code&gt; &amp;gt;= 0.11.0.0 to format its code. This is enforced by CI.&lt;/p&gt; &#xA;&lt;p&gt;Either enable editor integration or call the script used by CI itself:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;When using Nix, you can use the following command, which will build and use the right version of &lt;code&gt;stylish-haskell&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --run ./scripts/ci/check-stylish.sh&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>hasura/graphql-engine</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/hasura/graphql-engine</id>
    <link href="https://github.com/hasura/graphql-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazing fast, instant realtime GraphQL APIs on your DB with fine grained access control, also trigger webhooks on database events.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hasura GraphQL Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hasura/graphql-engine/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/hasura/graphql-engine&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-v2.x-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vBPpJkS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-brightgreen.svg?logo=discord&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=HasuraHQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-HasuraHQ-blue.svg?style=flat&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/newsletter-subscribe-yellow.svg?style=flat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hasura is an open source product that accelerates API development by 10x by giving you &lt;a href=&#34;https://hasura.io/graphql/&#34;&gt;GraphQL&lt;/a&gt; or REST APIs with built in authorization on your data, instantly.&lt;/p&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/demo.gif&#34; alt=&#34;Hasura GraphQL Engine Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/realtime.gif&#34; alt=&#34;Hasura GraphQL Engine Realtime Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make powerful queries&lt;/strong&gt;: Built-in filtering, pagination, pattern search, bulk insert, update, delete mutations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works with existing, live databases&lt;/strong&gt;: Point it to an existing database to instantly get a ready-to-use GraphQL API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: Convert any GraphQL query to a live query by using subscriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merge remote schemas&lt;/strong&gt;: Access custom GraphQL schemas for business logic via a single GraphQL Engine endpoint. &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extend with Actions&lt;/strong&gt;: Write REST APIs to extend Hasura’s schema with custom business logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger webhooks or serverless functions&lt;/strong&gt;: On Postgres insert/update/delete events (&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduled Triggers&lt;/strong&gt;: Execute custom business logic at specific points in time using a cron config or a one-off event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained access control&lt;/strong&gt;: Dynamic access control that integrates with your auth system (eg: auth0, firebase-auth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin UI &amp;amp; Migrations&lt;/strong&gt;: Admin UI &amp;amp; Rails-inspired schema migrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;: Supports PostgreSQL (and its flavours), MS SQL Server and Big Query. Support for more &lt;a href=&#34;https://hasura.io/graphql/database/&#34;&gt;databases&lt;/a&gt; coming soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#quickstart&#34;&gt;Quickstart:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#one-click-deployment-on-hasura-cloud&#34;&gt;One-click deployment on Hasura Cloud&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-one-click-deployment-options&#34;&gt;Other one-click deployment options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-deployment-methods&#34;&gt;Other deployment methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#client-side-tooling&#34;&gt;Client-side tooling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#add-business-logic&#34;&gt;Add business logic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#remote-schemas&#34;&gt;Remote schemas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#trigger-webhooks-on-database-events&#34;&gt;Trigger webhooks on database events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#realtime-applications&#34;&gt;Realtime applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#support--troubleshooting&#34;&gt;Support &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#stay-up-to-date&#34;&gt;Stay up to date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#brand-assets&#34;&gt;Brand assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Quickstart:&lt;/h2&gt; &#xA;&lt;h3&gt;One-click deployment on Hasura Cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest and easiest way to try Hasura out is via &lt;a href=&#34;https://hasura.io/docs/latest/graphql/cloud/getting-started/index.html&#34;&gt;Hasura Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the following button to deploy GraphQL engine on Hasura Cloud including Postgres add-on or using an existing Postgres database:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://cloud.hasura.io/signup&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/deploy_to_hasura.png&#34; alt=&#34;Deploy to Hasura Cloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Hasura console&lt;/p&gt; &lt;p&gt;Click on the button &#34;Launch console&#34; to open the Hasura console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your first GraphQL query&lt;/p&gt; &lt;p&gt;Create a table and instantly run your first query. Follow this &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/first-graphql-query.html&#34;&gt;simple guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other one-click deployment options&lt;/h3&gt; &#xA;&lt;p&gt;Check out the instructions for the following one-click deployment options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Infra provider&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;One-click link&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Additional information&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Heroku&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Heroku&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/heroku-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DigitalOcean&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/hasura?action=deploy&amp;amp;refcode=c4d9092d2c48&amp;amp;utm_source=hasura&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/digital-ocean-one-click.html#hasura-graphql-engine-digitalocean-one-click-app&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json&#34;&gt;&lt;img src=&#34;http://azuredeploy.net/deploybutton.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/azure-container-instances-postgres.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Render&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/render-examples/hasura-graphql&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/render-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other deployment methods&lt;/h3&gt; &#xA;&lt;p&gt;For Docker-based deployment and advanced configuration options, see &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/index.html&#34;&gt;deployment guides&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests&#34;&gt;install manifests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Hasura GraphQL Engine fronts a Postgres database instance and can accept GraphQL requests from your client apps. It can be configured to work with your existing auth system and can handle access control using field-level rules with dynamic variables from your auth system.&lt;/p&gt; &#xA;&lt;p&gt;You can also merge remote GraphQL schemas and provide a unified GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/hasura-arch.svg?sanitize=true&#34; alt=&#34;Hasura GraphQL Engine architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client-side tooling&lt;/h2&gt; &#xA;&lt;p&gt;Hasura works with any GraphQL client. See &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;awesome-graphql&lt;/a&gt; for a list of clients. Our &lt;a href=&#34;https://hasura.io/learn/#frontend-tutorial&#34;&gt;frontend tutorial series&lt;/a&gt; also have integrations with GraphQL clients for different frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Add business logic&lt;/h2&gt; &#xA;&lt;p&gt;GraphQL Engine provides easy-to-reason, scalable and performant methods for adding custom business logic to your backend:&lt;/p&gt; &#xA;&lt;h3&gt;Remote schemas&lt;/h3&gt; &#xA;&lt;p&gt;Add custom resolvers in a remote schema in addition to Hasura&#39;s database-based GraphQL schema. Ideal for use-cases like implementing a payment API, or querying data that is not in your database - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Actions are a way to extend Hasura’s schema with custom business logic using custom queries and mutations. Actions can be added to Hasura to handle various use cases such as data validation, data enrichment from external sources and any other complex business logic - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/actions/index.html&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trigger webhooks on database events&lt;/h3&gt; &#xA;&lt;p&gt;Add asynchronous business logic that is triggered based on database events. Ideal for notifications, data-pipelines from Postgres or asynchronous processing - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Derived data or data transformations&lt;/h3&gt; &#xA;&lt;p&gt;Transform data in Postgres or run business logic on it to derive another dataset that can be queried using GraphQL Engine - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/queries/derived-data.html&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Check out all the example applications in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps&#34;&gt;community/sample-apps&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Realtime applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Group Chat application built with React, includes a typing indicator, online users &amp;amp; new message notifications.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-chat.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-chat&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Live location tracking app that shows a running vehicle changing current GPS coordinates moving on a map.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-location-tracking.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-location-tracking&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A realtime dashboard for data aggregations on continuously changing data.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-poll.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-poll&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a2AhxKqd82Q&#34;&gt;Add GraphQL to a self-hosted GitLab instance&lt;/a&gt; (&lt;em&gt;3:44 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=15ITBYnccgc&#34;&gt;Todo app with Auth0 and GraphQL backend&lt;/a&gt; (&lt;em&gt;4:00 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=m1ChRhRLq7o&#34;&gt;GraphQL on GitLab integrated with GitLab auth&lt;/a&gt; (&lt;em&gt;4:05 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tsY573yyGWA&#34;&gt;Dashboard for 10million rides with geo-location (PostGIS, Timescale)&lt;/a&gt; (&lt;em&gt;3:06 mins&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support &amp;amp; Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The documentation and community will help you troubleshoot most issues. If you have encountered a bug or need to get in touch with us, you can contact us using one of the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &amp;amp; feedback: &lt;a href=&#34;https://discord.gg/hasura&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue &amp;amp; bug tracking: &lt;a href=&#34;https://github.com/hasura/graphql-engine/issues&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow product updates: &lt;a href=&#34;https://twitter.com/hasurahq&#34;&gt;@HasuraHQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Talk to us on our &lt;a href=&#34;https://hasura.io&#34;&gt;website chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are committed to fostering an open and welcoming environment in the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/code-of-conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to report a security issue, please &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/SECURITY.md&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;We release new features every month. Sign up for our newsletter by using the link below. We send newsletters only once a month. &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;https://hasura.io/newsletter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Brand assets&lt;/h2&gt; &#xA;&lt;p&gt;Hasura brand assets (logos, the Hasura mascot, powered by badges etc.) can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand&#34;&gt;assets/brand&lt;/a&gt; folder. Feel free to use them in your application/website etc. We&#39;d be thrilled if you add the &#34;Powered by Hasura&#34; badge to your applications built using Hasura. ❤️&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_darkbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_lightbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- For light backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_darkbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&#xA;&amp;lt;!-- For dark backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_lightbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The core GraphQL Engine is available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt; (Apache-2.0).&lt;/p&gt; &#xA;&lt;p&gt;All &lt;strong&gt;other contents&lt;/strong&gt; (except those in &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/server&#34;&gt;&lt;code&gt;server&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/console&#34;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; directories) are available under the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/LICENSE-community&#34;&gt;MIT License&lt;/a&gt;. This includes everything in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community&#34;&gt;&lt;code&gt;community&lt;/code&gt;&lt;/a&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This readme is available in the following translations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.japanese.md&#34;&gt;Japanese &lt;span&gt;🇯🇵&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/moksahero&#34;&gt;@moksahero&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.french.md&#34;&gt;French &lt;span&gt;🇫🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/l0ck3&#34;&gt;@l0ck3&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.bosnian.md&#34;&gt;Bosnian &lt;span&gt;🇧🇦&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/hajro92&#34;&gt;@hajro92&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.russian.md&#34;&gt;Russian &lt;span&gt;🇷🇺&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/highflyer910&#34;&gt;@highflyer910&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.greek.md&#34;&gt;Greek 🇬🇷&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/MIP2000&#34;&gt;@MIP2000&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.mx_spanish.md&#34;&gt;Spanish 🇲🇽&lt;/a&gt;(&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/ferdox2&#34;&gt;@ferdox2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.indonesian.md&#34;&gt;Indonesian &lt;span&gt;🇮🇩&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/anwari666&#34;&gt;@anwari666&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.portuguese_br.md&#34;&gt;Brazilian Portuguese &lt;span&gt;🇧🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/rubensmp&#34;&gt;@rubensmp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.german.md&#34;&gt;German 🇩🇪&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/FynnGrandke&#34;&gt;@FynnGrandke&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.chinese.md&#34;&gt;Chinese &lt;span&gt;🇨🇳&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/jagreetdg&#34;&gt;@jagreetdg&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/johnbanq&#34;&gt;@johnbanq&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.turkish.md&#34;&gt;Turkish &lt;span&gt;🇹🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/berat&#34;&gt;@berat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.korean.md&#34;&gt;Korean &lt;span&gt;🇰🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/laskdjlaskdj12&#34;&gt;@라스크&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translations for other files can be found &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>msp-strath/TypOS</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/msp-strath/TypOS</id>
    <link href="https://github.com/msp-strath/TypOS" rel="alternate"></link>
    <summary type="html">&lt;p&gt;being an operating system for typechecking processes&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;TypOS&lt;/h1&gt; &#xA;&lt;p&gt;being an operating system for typechecking processes&lt;/p&gt; &#xA;&lt;p&gt;Are the processes being typechecked? Are the processes doing the typechecking? Yes.&lt;/p&gt; &#xA;&lt;p&gt;Still very much in the early stages of construction (may it never leave them!), TypOS is a domain-specific language for implementing type systems, based on an actor model (caveat emptor) of concurrent execution. Each region of source code is processed by an actor, implementing a typing judgement with a clearly specified interaction protocol. Actors may spawn other actors: child processes which correspond to the premises of typing rules. Actors communicate with one another along channels, in accordance with their stated protocol.&lt;/p&gt; &#xA;&lt;h2&gt;What&#39;s in a TypOS program?&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;descriptions of syntaxes&lt;/li&gt; &#xA; &lt;li&gt;declarations of judgement interaction protocols&lt;/li&gt; &#xA; &lt;li&gt;definitions of judgement actors&lt;/li&gt; &#xA; &lt;li&gt;example invocations of judgement actors&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;And when you press go, you get to watch the execution trace of your examples, as control flits about between a treelike hierarchy of actors, making progress wherever possible. We are still at a rudimentary stage: there is a lot which remains to be done.&lt;/p&gt; &#xA;&lt;h2&gt;What gets typechecked?&lt;/h2&gt; &#xA;&lt;p&gt;We have a very simple syntax for the stuff that gets processed by TypOS actors.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;em&gt;name&lt;/em&gt; begins with an alphabetical character, followed by zero or more characters which are alphabetical, numeric or &lt;code&gt;_&lt;/code&gt;. Names are used in two ways:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;as variables, &lt;em&gt;x&lt;/em&gt;, once they have been brought into scope&lt;/li&gt; &#xA; &lt;li&gt;as atoms, &lt;code&gt;&#39;&lt;/code&gt;&lt;em&gt;x&lt;/em&gt;, whose role is to be different from each other&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We build up structure by means of&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;binding: &lt;code&gt;\&lt;/code&gt;&lt;em&gt;x&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; is a term which brings &lt;em&gt;x&lt;/em&gt; into scope in &lt;em&gt;term&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;pairing: &lt;code&gt;[&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;|&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;]&lt;/code&gt; is a term with two subterms&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;There is a special atom, &lt;code&gt;[]&lt;/code&gt; (pronounced &#34;nil&#34;), and we adopt the bias towards right-nesting which has been prevalent since LISP established it in the 1950s. That is, every occurrence of &lt;code&gt;|[&lt;/code&gt; may be removed, provided its corresponding &lt;code&gt;]&lt;/code&gt; is removed also. It is typical, therefore, to build languages with terms of the form &lt;code&gt;[&#39;&lt;/code&gt;&lt;em&gt;tag&lt;/em&gt; &lt;em&gt;subterm&lt;/em&gt; .. &lt;em&gt;subterm&lt;/em&gt;&lt;code&gt;]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Now, there is no particular ideological significance to this choice of LISP-with-binding. It is a cheap way to get started, but it is not an ideal way to encode languages with more complex scoping structure. When we need more, we shall review this choice.&lt;/p&gt; &#xA;&lt;p&gt;Of course, LISP-with-binding is intended merely as a substrate: not all terms are expected to be meaningful in all situations. We provide various means of classification. Let us begin.&lt;/p&gt; &#xA;&lt;h2&gt;&lt;code&gt;syntax&lt;/code&gt; declarations&lt;/h2&gt; &#xA;&lt;p&gt;We start with a basic notion of context-free grammar. A &lt;code&gt;syntax&lt;/code&gt; declaration allows a bunch of nonterminal symbols to be mutually defined. Here is an example, being a bidirectional presentation of simply typed lambda-calculus.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syntax&#xA;  { &#39;Check = [&#39;Tag  [ [&#39;Lam [&#39;Bind &#39;Synth &#39;Check]]&#xA;                      [&#39;Emb &#39;Synth] ]&#xA;             ]&#xA;  ; &#39;Synth = [&#39;Tag  [ [&#39;Rad &#39;Check &#39;Type]&#xA;                      [&#39;App &#39;Synth &#39;Check] ]&#xA;             ]&#xA;  ; &#39;Type = [&#39;EnumOrTag [&#39;Nat ]&#xA;                        [ [&#39;Arr &#39;Type &#39;Type] ]&#xA;            ]&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;What are we saying? The terms you can &lt;code&gt;&#39;Check&lt;/code&gt; can be lambda-abstractions but we also &lt;code&gt;&#39;Emb&lt;/code&gt;ed all the terms whose type we can &lt;code&gt;&#39;Synth&lt;/code&gt;esize. The latter comprise what we call &lt;code&gt;&#39;Rad&lt;/code&gt;icals (checkable terms with a type annotation) and &lt;code&gt;&#39;App&lt;/code&gt;lications where a synthesizable function is given a checkable argument. E.g., the identity function might be written &lt;code&gt;[&#39;Lam \x. [&#39;Emb x]]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;How have we said it? Following the keyword &lt;code&gt;syntax&lt;/code&gt; is a &lt;code&gt;{;}&lt;/code&gt;-list of equations, each defining an atom by a term which happens to be a &lt;em&gt;syntax description&lt;/em&gt;. You can see some components of syntax descriptions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;Tag&lt;/code&gt; .. &lt;code&gt;]&lt;/code&gt; takes a list of pairs of atoms with lists of syntax descriptions, allowing us to demand exactly a list whose head is a tag and whose other elements are specified in a manner selected by the tag. So &lt;code&gt;&#39;Lam&lt;/code&gt; and &lt;code&gt;&#39;Emb&lt;/code&gt; are the tags for &lt;code&gt;&#39;Check&lt;/code&gt; terms, &lt;code&gt;&#39;Rad&#39;&lt;/code&gt; and &lt;code&gt;&#39;App&lt;/code&gt; for &lt;code&gt;&#39;Synth&lt;/code&gt; terms.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;EnumOrTag&lt;/code&gt; .. &lt;code&gt;]&lt;/code&gt; takes two lists: the first one &lt;em&gt;enumerates&lt;/em&gt; the permissible atoms, that is, it admits any of of them, whereas the second again is a list of pairs of tags and syntax descriptions (in fact, &lt;code&gt;[&#39;Tag&lt;/code&gt; &lt;em&gt;ts&lt;/em&gt;&lt;code&gt;]&lt;/code&gt; is syntactic sugar for &lt;code&gt;[EnumOrTag []&lt;/code&gt; &lt;em&gt;ts&lt;/em&gt; &lt;code&gt;]&lt;/code&gt;; similarly &lt;code&gt;[&#39;Enum&lt;/code&gt; &lt;em&gt;es&lt;/em&gt; &lt;code&gt;]&lt;/code&gt; is syntactic sugar for &lt;code&gt;[EnumOrTag&lt;/code&gt; &lt;em&gt;es&lt;/em&gt; &lt;code&gt;[] ]&lt;/code&gt;). So &lt;code&gt;Nat&lt;/code&gt; on its own is a &lt;code&gt;&#39;Type&lt;/code&gt;, and &lt;code&gt;&#39;Arr&lt;/code&gt; is a tag demanding two further types.&lt;/li&gt; &#xA; &lt;li&gt;Names of syntax declarations can occur &lt;em&gt;recursively&lt;/em&gt; in syntax descriptions: these are atoms which is the name of a syntax, including the syntaxes defined in previous syntax declarations, or the current syntax declaration. E.g., we see that the &lt;code&gt;&#39;Emb&lt;/code&gt; tag should be followed by one &lt;code&gt;&#39;Synth&lt;/code&gt; term, while the &lt;code&gt;&#39;Arr&lt;/code&gt; tag should be followed by two &lt;code&gt;&#39;Type&lt;/code&gt;s.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;Bind&lt;/code&gt; ..&lt;code&gt;]&lt;/code&gt; specifies a term of form &lt;code&gt;\&lt;/code&gt;&lt;em&gt;x&lt;/em&gt;&lt;code&gt;.&lt;/code&gt;&lt;em&gt;t&lt;/em&gt;. It takes an atom which determines the named syntax to which the &lt;em&gt;x&lt;/em&gt; is being added, then a syntax description for the &lt;em&gt;t&lt;/em&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Correspondingly, in our example above, the &lt;code&gt;x&lt;/code&gt; is classified as a &lt;code&gt;&#39;Synth&lt;/code&gt; term, and so must be &lt;code&gt;&#39;Emb&lt;/code&gt;edded as the &lt;code&gt;&#39;Check&lt;/code&gt;able body of the &lt;code&gt;&#39;Lam&lt;/code&gt;bda abstraction.&lt;/p&gt; &#xA;&lt;p&gt;The other permitted syntax descriptions are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;Nil]&lt;/code&gt; admits only &lt;code&gt;[]&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;Cons&lt;/code&gt; &lt;em&gt;head&lt;/em&gt; &lt;em&gt;tail&lt;/em&gt;&lt;code&gt;]&lt;/code&gt; admits pairs &lt;code&gt;[&lt;/code&gt;&lt;em&gt;h&lt;/em&gt;&lt;code&gt;|&lt;/code&gt;&lt;em&gt;t&lt;/em&gt;&lt;code&gt;]&lt;/code&gt; where &lt;em&gt;head&lt;/em&gt; admits &lt;em&gt;h&lt;/em&gt; and &lt;em&gt;tail&lt;/em&gt; admits &lt;em&gt;t&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;NilOrCons&lt;/code&gt; &lt;em&gt;head&lt;/em&gt; &lt;em&gt;tail&lt;/em&gt;&lt;code&gt;]&lt;/code&gt; admits the union of the above two.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;Atom]&lt;/code&gt; admits any atom.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;AtomBar *as*]&lt;/code&gt; admits any atom, &lt;em&gt;except&lt;/em&gt; those listed in &lt;em&gt;as&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;Fix \&lt;/code&gt;&lt;em&gt;x&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; ..&lt;code&gt;]&lt;/code&gt; takes a syntax decsription in which the bound &lt;em&gt;x&lt;/em&gt; is treated as a syntax description, allowing local recursion.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;[&#39;Wildcard]&lt;/code&gt; admits anything.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For a more exciting example, we take&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;syntax { &#39;Syntax = [&#39;EnumOrTag&#xA;  [&#39;Nil &#39;Atom &#39;Wildcard &#39;Syntax]&#xA;  [[&#39;AtomBar [&#39;Fix \at. [&#39;NilOrCons &#39;Atom at]]]&#xA;   [&#39;Cons &#39;Syntax &#39;Syntax]&#xA;   [&#39;NilOrCons &#39;Syntax &#39;Syntax]&#xA;   [&#39;Bind [&#39;EnumOrTag [&#39;Syntax] []] &#39;Syntax]&#xA;   [&#39;EnumOrTag [&#39;Fix \at. [&#39;NilOrCons &#39;Atom at]]&#xA;               [&#39;Fix \cell. [&#39;NilOrCons [&#39;Cons &#39;Atom [&#39;Fix \rec. [&#39;NilOrCons &#39;Syntax rec]]] cell]]]&#xA;   [&#39;Enum [&#39;Fix \at. [&#39;NilOrCons &#39;Atom at]]]&#xA;   [&#39;Tag [&#39;Fix \cell. [&#39;NilOrCons [&#39;Cons &#39;Atom [&#39;Fix \rec. [&#39;NilOrCons &#39;Syntax rec]]] cell]]]&#xA;   [&#39;Fix [&#39;Bind &#39;Syntax &#39;Syntax]]]]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;as the syntax description of syntax descriptions, using &lt;code&gt;&#39;Fix&lt;/code&gt; to characterize the lists which occur in the &lt;code&gt;[&#39;AtomBar&lt;/code&gt; ..&lt;code&gt;]&lt;/code&gt;, &lt;code&gt;[&#39;Tag&lt;/code&gt; ..&lt;code&gt;]&lt;/code&gt; and &lt;code&gt;[&#39;Enum&lt;/code&gt; .. &lt;code&gt;]&lt;/code&gt; constructs.&lt;/p&gt; &#xA;&lt;h2&gt;Judgement forms and protocols&lt;/h2&gt; &#xA;&lt;p&gt;Before we can implement the actors which process our terms, we must say which actors exist and how to communicate with them. Our version of Milner&#39;s judgement-form-in-a-box names is to declare &lt;em&gt;name&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;protocol&lt;/em&gt;. A protocol is a sequence of &lt;em&gt;actions&lt;/em&gt;. Each action is specified by &lt;code&gt;?&lt;/code&gt; for input or &lt;code&gt;!&lt;/code&gt; for output, then the intended syntax description for that transmission, then &lt;code&gt;.&lt;/code&gt; as a closing delimiter.&lt;/p&gt; &#xA;&lt;p&gt;For our example language, we have&lt;/p&gt; &#xA;&lt;!--&#xA;```&#xA;ctxt |- &#39;Synth -&gt; &#39;Type&#xA;```&#xA;--&gt; &#xA;&lt;pre&gt;&lt;code&gt;type  : ?&#39;Type.&#xA;check : ?&#39;Type. ?&#39;Check.&#xA;synth : ?&#39;Synth. !&#39;Type.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;indicating that &lt;code&gt;type&lt;/code&gt; actors receive only a &lt;code&gt;&#39;Type&lt;/code&gt; which they may validate; &lt;code&gt;check&lt;/code&gt; actors receive a &lt;code&gt;&#39;Type&lt;/code&gt; to check and a &lt;code&gt;&#39;Check&lt;/code&gt;able term which we hope the type admits; &lt;code&gt;synth&lt;/code&gt; actors receive a &lt;code&gt;&#39;Synth&lt;/code&gt;esizable term, then (we hope) transmit the &lt;code&gt;&#39;Type&lt;/code&gt; synthesized for that term.&lt;/p&gt; &#xA;&lt;p&gt;Our protocols are nowhere near as exciting as session types, offering only a rigid sequence of actions to do (or die). In the future, we plan to enrich the notion of protocol in two ways:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Designate one input as the &lt;em&gt;subject&lt;/em&gt; of the judgement, i.e., the currently untrusted thing whose validity the judgement is intended to establish. Above, the clue is in the name.&lt;/li&gt; &#xA; &lt;li&gt;For every signal which is not the subject, indicate the &lt;em&gt;contract&lt;/em&gt;. The actor is allowed to &lt;em&gt;rely&lt;/em&gt; on properties of its inputs, but it must &lt;em&gt;guarantee&lt;/em&gt; properties of its outputs. For the above, we should let &lt;code&gt;check&lt;/code&gt; rely on receiving a &lt;code&gt;&#39;Type&lt;/code&gt; which &lt;code&gt;type&lt;/code&gt; accepts, but demand that &lt;code&gt;synth&lt;/code&gt; always yields a &lt;code&gt;&#39;Type&lt;/code&gt; which &lt;code&gt;type&lt;/code&gt; accepts.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;That is, we plan to check the checkers: at the moment we check that actors stick to the designated interleaving of input and output operations, and that syntax descriptions are adhered to.&lt;/p&gt; &#xA;&lt;h2&gt;TypOS actors&lt;/h2&gt; &#xA;&lt;p&gt;An actor definition looks like &lt;em&gt;judgement&lt;/em&gt;&lt;code&gt;@&lt;/code&gt;&lt;em&gt;channel&lt;/em&gt; &lt;code&gt;=&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;. The channel is the actor&#39;s link with its parent (so we often call it &lt;code&gt;p&lt;/code&gt;) along which it must follow the declared protocol. Here is a simple example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;type@p = p?ty. case ty&#xA;  { &#39;Nat -&amp;gt;&#xA;  ; [&#39;Arr S T] -&amp;gt;&#xA;      ( type@q. q!S.&#xA;      | type@r. r!T.&#xA;      )&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This actor implements &lt;code&gt;type&lt;/code&gt;, with channel &lt;code&gt;p&lt;/code&gt; to its parent. Its first action is &lt;code&gt;p?ty.&lt;/code&gt; to ask its parent for an input, which comes into scope as the value of the &lt;em&gt;actor-variable&lt;/em&gt; &lt;code&gt;ty&lt;/code&gt;. I.e., a &lt;em&gt;receiving&lt;/em&gt; actor looks like &lt;em&gt;channel&lt;/em&gt;&lt;code&gt;?&lt;/code&gt;&lt;em&gt;actor-variable&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;, which performs an input on the given &lt;em&gt;channel&lt;/em&gt;, then continues as the &lt;em&gt;actor&lt;/em&gt; with the &lt;em&gt;actor-variable&lt;/em&gt; in scope. Actor variables stand for terms, and may be used in terms as placeholders. Our actor has received a type to validate. How does it proceed?&lt;/p&gt; &#xA;&lt;p&gt;It performs a &lt;code&gt;case&lt;/code&gt; analysis on the structure of the type. The actor construct is &lt;code&gt;case&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;{&lt;/code&gt; &lt;em&gt;pattern&lt;/em&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt; &lt;code&gt;;&lt;/code&gt; ..&lt;code&gt;}&lt;/code&gt;. We shall specify patterns in more detail shortly, but let us continue the overview. The &lt;code&gt;&#39;Nat&lt;/code&gt; pattern matches only if &lt;code&gt;ty&lt;/code&gt; is exactly &lt;code&gt;&#39;Nat&lt;/code&gt;, and the action taken in that case is nothing at all! The empty actor denotes glorious success! Meanwhile, the pattern &lt;code&gt;[&#39;Arr S T]&lt;/code&gt; matches any three element list whose head is the atom &lt;code&gt;&#39;Arr&lt;/code&gt;: the other two elements are brought into scope as &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt;, repsectively, then we proceed with the nonempty actor to the right of &lt;code&gt;-&amp;gt;&lt;/code&gt;. What have we, now?&lt;/p&gt; &#xA;&lt;p&gt;We have a &lt;em&gt;parallel&lt;/em&gt; composition, &lt;em&gt;actor&lt;/em&gt; &lt;code&gt;|&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;, and both components will run concurrently. The first begins by &lt;em&gt;spawning&lt;/em&gt; a new &lt;code&gt;type&lt;/code&gt; actor on fresh channel &lt;code&gt;q&lt;/code&gt;. Spawning looks like &lt;em&gt;judgement&lt;/em&gt;&lt;code&gt;@&lt;/code&gt;&lt;em&gt;channel&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;, and it is another sequential process, forking out a new actor for the given &lt;em&gt;judgement&lt;/em&gt; and naming the &lt;em&gt;channel&lt;/em&gt; for talking to it, before continuing as the given &lt;em&gt;actor&lt;/em&gt; with the &lt;em&gt;channel&lt;/em&gt; in scope. The channel follows the protocol &lt;em&gt;dual&lt;/em&gt; to that declared for the judgement. Our first fork continues by &lt;em&gt;sending&lt;/em&gt; &lt;code&gt;S&lt;/code&gt; to &lt;code&gt;q&lt;/code&gt;. Sending looks like &lt;em&gt;channel&lt;/em&gt;&lt;code&gt;!&lt;/code&gt;&lt;em&gt;term&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;. That is, we have delegated the validation of &lt;code&gt;S&lt;/code&gt; to a subprocess and hung up our boots, contented. The second fork similarly delegates the validation of &lt;code&gt;T&lt;/code&gt; to another &lt;code&gt;type&lt;/code&gt; actor on channel &lt;code&gt;r&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We have seen actors for receiving, sending, case analysis, parallel composition, and spawning. There is a little more to come. Let us have a further example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;check@p = p?ty. p?tm. case tm&#xA;  { [&#39;Emb e] -&amp;gt; synth@q. q!e. q?S. S ~ ty&#xA;  ; [&#39;Lam \x. body] -&amp;gt; &#39;Type?S. &#39;Type?T.&#xA;      ( ty ~ [&#39;Arr S T]&#xA;      | \x. ctxt |- x -&amp;gt; S. check@q. q!T. q!body.&#xA;      )&#xA;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;check&lt;/code&gt; actor follows the designated protocol, asking its parent for a type &lt;code&gt;ty&lt;/code&gt; and a checkable term &lt;code&gt;tm&lt;/code&gt;. We expect &lt;code&gt;tm&lt;/code&gt; to match one of two patterns. The first is the simpler &lt;code&gt;[&#39;Emb e]&lt;/code&gt;. This matches an embedded &lt;code&gt;&#39;Synth&lt;/code&gt; term, bound to &lt;code&gt;e&lt;/code&gt;, then spawns a &lt;code&gt;synth&lt;/code&gt; actor on channel &lt;code&gt;q&lt;/code&gt; to determine the type of &lt;code&gt;e&lt;/code&gt;. That is, we send &lt;code&gt;e&lt;/code&gt; over &lt;code&gt;q&lt;/code&gt;, then receive type &lt;code&gt;S&lt;/code&gt; in return. Our last act in this case is to &lt;em&gt;constrain&lt;/em&gt; &lt;code&gt;S ~ ty&lt;/code&gt;, i.e., we demand that the type synthesized is none other than the type we were asked to check. The actor form &lt;em&gt;term&lt;/em&gt; &lt;code&gt;~&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; performs a unification process, attempting to make the terms equal.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;[&#39;Lam \x. body]&lt;/code&gt; case shows a richness of features. Firstly, the pattern indicates that the term must bind a variable, which the term can name however it likes, but which the actor will think of as &lt;code&gt;x&lt;/code&gt;. The pattern variable &lt;code&gt;body&lt;/code&gt; matches what is in the scope of &lt;code&gt;x&lt;/code&gt;. As a consequence, &lt;code&gt;body&lt;/code&gt; stands for a term which may mention &lt;code&gt;x&lt;/code&gt; and thus may be used only in places where &lt;code&gt;x&lt;/code&gt; is somehow captured. That is, the use sites of actor variables are scope-checked, to ensure that everything the terms they stand for might need is somehow in existence. We have found the body of our abstraction. What happens next?&lt;/p&gt; &#xA;&lt;p&gt;It looks like we are making inputs &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; from the &#34;syntactic description &lt;code&gt;&#39;Type&lt;/code&gt; channel&#34;, and that is exactly what we are doing! We request &lt;code&gt;S&lt;/code&gt; and &lt;code&gt;T&lt;/code&gt; from &lt;em&gt;thin air&lt;/em&gt;. Operationally, TypOS generates placeholders for terms as yet unknown, but which may yet be solved, given subsequent constraints. Indeed, one of our subsequent forked actors exactly demands that &lt;code&gt;ty&lt;/code&gt; is &lt;code&gt;[&#39;Arr S T]&lt;/code&gt;, but we need not wait to proceed. In parallel, we &lt;em&gt;bind&lt;/em&gt; a fresh variable &lt;code&gt;x&lt;/code&gt;, allowing us to spawn a &lt;code&gt;check&lt;/code&gt; actor on channel &lt;code&gt;q&lt;/code&gt; and ask it to check that type &lt;code&gt;T&lt;/code&gt; admits &lt;code&gt;body&lt;/code&gt; (whose &lt;code&gt;x&lt;/code&gt; has been captured by our binding). But we race ahead. A &lt;em&gt;binding&lt;/em&gt; actor looks like &lt;code&gt;\&lt;/code&gt; &lt;em&gt;variable&lt;/em&gt; &lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;. It brings a fresh term &lt;em&gt;variable&lt;/em&gt; into scope, then behaves like &lt;em&gt;actor&lt;/em&gt; for the duration of that scope.&lt;/p&gt; &#xA;&lt;p&gt;Now, before we can &lt;code&gt;check&lt;/code&gt; the &lt;code&gt;body&lt;/code&gt;, we must ensure that &lt;code&gt;synth&lt;/code&gt; knows what to do whenever it is asked about &lt;code&gt;x&lt;/code&gt;. We have explored various options about how to manage that interaction. The current incarnation is to allow the declaration of stacks of &lt;em&gt;contextual data&lt;/em&gt; for free variables. The form &lt;em&gt;stackname&lt;/em&gt; &lt;code&gt;|-&lt;/code&gt; &lt;em&gt;variable&lt;/em&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt; pushes the association of &lt;em&gt;term&lt;/em&gt; with &lt;em&gt;variable&lt;/em&gt; into the context &lt;em&gt;stackname&lt;/em&gt;, then continues as &lt;em&gt;actor&lt;/em&gt;. Before we can make use of such a context, we must explain the syntactic descriptions involved in. For our running example, we declare a context &lt;code&gt;ctxt&lt;/code&gt; which maps variables of syntactic category &lt;code&gt;&#39;Synth&lt;/code&gt; to types, as follows:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-typos-ignore&#34;&gt;ctxt |- &#39;Synth -&amp;gt; &#39;Type&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In our example, we have &lt;code&gt;ctxt |- x -&amp;gt; S. check@q. q!T. q!body.&lt;/code&gt;, so any actor which is a descendant of the &lt;code&gt;check&lt;/code&gt; actor on channel &lt;code&gt;q&lt;/code&gt; will be able to access the &lt;code&gt;S&lt;/code&gt; associated with &lt;code&gt;x&lt;/code&gt; by quering the &lt;code&gt;ctxt&lt;/code&gt; context. To see an example how, let us look at the &lt;code&gt;synth&lt;/code&gt; actor&#39;s definition.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;synth@p = p?tm . if tm in ctxt { S -&amp;gt; p!S. } else case tm&#xA;   { [&#39;Rad t ty] -&amp;gt;&#xA;        ( type@q. q!ty.&#xA;        | check@r. r!ty. r!t.&#xA;        | p!ty.&#xA;        )&#xA;   ; [&#39;App f s] -&amp;gt; &#39;Type?S. &#39;Type?T.&#xA;        ( synth@q. q!f. q?ty. ty ~ [&#39;Arr S T]&#xA;        | check@r. r!S. r!s.&#xA;        | p!T.&#xA;        )&#xA;   }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We have only one new feature, which is invoked immediately we have received &lt;code&gt;tm&lt;/code&gt;. The actor &lt;code&gt;if&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;in&lt;/code&gt; &lt;em&gt;stackname&lt;/em&gt; &lt;code&gt;{&lt;/code&gt; &lt;em&gt;actor-variable&lt;/em&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt; &lt;code&gt;} else&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt; attempts to access the context &lt;em&gt;stackname&lt;/em&gt;, in this case &lt;code&gt;ctxt&lt;/code&gt;. It will succeed if &lt;code&gt;tm&lt;/code&gt; stands for a free term variable with a context entry in scope, and in that case, the &lt;em&gt;actor-variable&lt;/em&gt; binds the associated value and the &lt;em&gt;actor&lt;/em&gt; after &lt;code&gt;-&amp;gt;&lt;/code&gt; is executed. As you can see, &lt;code&gt;ctxt&lt;/code&gt; interprets the contextual data associated with a free variable as exactly the type to send out. If the &lt;em&gt;term&lt;/em&gt; is not a free variable, or if there is no associated data in the context, the &lt;code&gt;if-in&lt;/code&gt; actor falls through to its &lt;code&gt;else&lt;/code&gt; clause.&lt;/p&gt; &#xA;&lt;p&gt;Here, we fall back on the hope that &lt;code&gt;tm&lt;/code&gt; might take one of the two forms specified in the syntax of &lt;code&gt;&#39;Synth&lt;/code&gt; terms. For &lt;code&gt;&#39;Rad&lt;/code&gt;icals, we concurrently validate the type, check that it accepts the term, and deliver the type as our output. For &lt;code&gt;&#39;App&lt;/code&gt;lications, we guess source and target types for the function, then concurrently confirm our guess by constraining the output of &lt;code&gt;synth&lt;/code&gt; on the function, check the argument at our guessed source type, and output our guessed target type as the type of the application.&lt;/p&gt; &#xA;&lt;p&gt;You have been watching&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;guessing: &lt;em&gt;syntax-desc&lt;/em&gt;&lt;code&gt;?&lt;/code&gt;&lt;em&gt;actor-variable&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;receiving: &lt;em&gt;channel&lt;/em&gt; &lt;code&gt;?&lt;/code&gt;&lt;em&gt;actor-variable&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;sending: &lt;em&gt;channel&lt;/em&gt;&lt;code&gt;!&lt;/code&gt;&lt;em&gt;term&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;casing: &lt;code&gt;case&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;{&lt;/code&gt; &lt;em&gt;pattern&lt;/em&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt; &lt;code&gt;;&lt;/code&gt; ..&lt;code&gt;}&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;forking: &lt;em&gt;actor&lt;/em&gt; &lt;code&gt;|&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;spawning: &lt;em&gt;judgement&lt;/em&gt;&lt;code&gt;@&lt;/code&gt;&lt;em&gt;channel&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;constraining: &lt;em&gt;term&lt;/em&gt; &lt;code&gt;~&lt;/code&gt; &lt;em&gt;term&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;extending: &lt;em&gt;stackname&lt;/em&gt; &lt;code&gt;|-&lt;/code&gt; &lt;em&gt;variable&lt;/em&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;querying: &lt;code&gt;if&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;in&lt;/code&gt; &lt;em&gt;stackname&lt;/em&gt; &lt;code&gt;{&lt;/code&gt; &lt;em&gt;actor-variable&lt;/em&gt; &lt;code&gt;-&amp;gt;&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt; &lt;code&gt;} else&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;winning:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;and there&#39;s five more:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;plumbing: &lt;em&gt;channel&lt;/em&gt; &lt;code&gt;&amp;lt;-&amp;gt;&lt;/code&gt; &lt;em&gt;channel&lt;/em&gt; connects together two channels to forward on messages in both directions&lt;/li&gt; &#xA; &lt;li&gt;let-binders: &lt;code&gt;let&lt;/code&gt; &lt;em&gt;actor-variable&lt;/em&gt; &lt;code&gt;:&lt;/code&gt; &lt;em&gt;syntax-desc&lt;/em&gt; &lt;code&gt;=&lt;/code&gt; &lt;em&gt;term&lt;/em&gt; &lt;code&gt;.&lt;/code&gt; &lt;em&gt;actor&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;losing: &lt;code&gt;#&lt;/code&gt; &lt;em&gt;format-string&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;printing: &lt;code&gt;PRINTF&lt;/code&gt; &lt;em&gt;format-string&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;breaking: &lt;code&gt;BREAK&lt;/code&gt; &lt;em&gt;format-string&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Patterns&lt;/h2&gt; &#xA;&lt;p&gt;The patterns you can write in a TypOS &lt;code&gt;case&lt;/code&gt; actor look like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;term variable: &lt;em&gt;variable&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;specific atom: &lt;code&gt;&#39;&lt;/code&gt;&lt;em&gt;name&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;paired patterns: &lt;code&gt;[&lt;/code&gt; &lt;em&gt;pattern&lt;/em&gt; &lt;code&gt;|&lt;/code&gt; &lt;em&gt;pattern&lt;/em&gt; &lt;code&gt;]&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;variable binding: &lt;code&gt;\&lt;/code&gt;&lt;em&gt;variable&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; &lt;em&gt;pattern&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;scope selection: &lt;code&gt;{&lt;/code&gt; &lt;em&gt;selection&lt;/em&gt; &lt;code&gt;}&lt;/code&gt; &lt;em&gt;pattern&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;pattern binding: &lt;em&gt;actor-variable&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;happy oblivion: &lt;code&gt;_&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;where a &lt;em&gt;selection&lt;/em&gt; (sometimes known dually as a &lt;em&gt;thinning&lt;/em&gt;) selects a subset of the variables in scope as permitted dependencies. Inside the braces, you write either the list of variables you want to keep or the list of variables you want to exclude then &lt;code&gt;*&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A term variable pattern matches exactly that term variable: we can tell them apart from the pattern bindings of actor variables because we can see where the term variable has been bound, whereas the actor variable for a pattern binding must be fresh. E.g., we might want to spot eta-redexes in our lambda calculus with the pattern &lt;code&gt;[&#39;Lam \x. [&#39;Emb [&#39;App {x*}f x]]]&lt;/code&gt;. The &lt;code&gt;f&lt;/code&gt; is a pattern binding and it matches any term not depending on &lt;code&gt;x&lt;/code&gt;. The &lt;code&gt;x&lt;/code&gt; is a bound variable, and it matches only the variable bound by the &lt;code&gt;\x.&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;At the binding sites of actor variables, TypOS detects which term variables are in scope. TypOS further insists that everything which was in scope at an actor variable&#39;s binding site is in scope at each of its use sites. In the above example, we check that &lt;code&gt;f&lt;/code&gt; matches a term in which &lt;code&gt;x&lt;/code&gt; plays no part, and we gain the right to use &lt;code&gt;f&lt;/code&gt; with no &lt;code&gt;x&lt;/code&gt; in scope.&lt;/p&gt; &#xA;&lt;h2&gt;Substitutions&lt;/h2&gt; &#xA;&lt;p&gt;When we write terms in actors, we are really talking &lt;em&gt;about&lt;/em&gt; terms, with actor-variables standing for terms, generically. Now, we have insisted that every term variable in scope at an actor-variable&#39;s binding site must be captured at each of its use sites, and we have seen that one way to do that is with another &lt;code&gt;\&lt;/code&gt;&lt;em&gt;variable&lt;/em&gt;&lt;code&gt;.&lt;/code&gt; binding with a matching name. However, we may also &lt;em&gt;substitute&lt;/em&gt; such variables.&lt;/p&gt; &#xA;&lt;p&gt;We extend the syntax of terms with &lt;code&gt;{&lt;/code&gt;&lt;em&gt;substitution&lt;/em&gt;&lt;code&gt;}&lt;/code&gt;&lt;em&gt;term&lt;/em&gt;. A substitution is a comma-separated list of components which look like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;definition: &lt;em&gt;variable&lt;/em&gt;&lt;code&gt;=&lt;/code&gt;&lt;em&gt;term&lt;/em&gt;&lt;/li&gt; &#xA; &lt;li&gt;exclusion: &lt;em&gt;variable&lt;/em&gt;&lt;code&gt;*&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;preservation: &lt;em&gt;variable&lt;/em&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Order matters: substitutions should be read from right to left as actions on the scope we find them in. Definitions bring new variables into scope, by defining them to be terms using only variables already in scope. Exclusions throw variables out of scope. Preservations retain variables from the present scope but only as their own images: in &lt;code&gt;{y=t,x}&lt;/code&gt;, the &lt;code&gt;t&lt;/code&gt; may not depend on &lt;code&gt;x&lt;/code&gt;. A leftmost prefix of preservations may safely be elided, so we need only say what is &lt;em&gt;changing&lt;/em&gt; at the local end of scope.&lt;/p&gt; &#xA;&lt;p&gt;We may write substitutions anywhere in a term, but they act structurally on all the term constructs (acquiring an extra preservation at the local end wherever they go under a binder), piling up at the use sites of actor-variables, where their role is to reconcile any difference in scope with the binding sites of those variables.&lt;/p&gt; &#xA;&lt;h2&gt;Actors, channels, scope&lt;/h2&gt; &#xA;&lt;p&gt;Each actor knows about only those variables it binds itself. When actors run, the terms which the actor-variables stand for will be in a larger scope: the term variables mentioned in the actor&#39;s source code will constitute the local end of that scope. Although the &lt;code&gt;lookup&lt;/code&gt; construct enables the basic means to find out stuff about free variables, only the actor which binds the variable can choose what that stuff is. Ignorance of free variables makes it easier to achieve stability under substitution. In particular, the fact that &lt;code&gt;case&lt;/code&gt; patterns can test for only those free variables protected by their binders from the action of substitution means that an actor&#39;s &lt;code&gt;case&lt;/code&gt; choices cannot be changed by the action of substitution on its inputs. There is some sort of stability property to be proven about &lt;code&gt;lookup&lt;/code&gt; .. &lt;code&gt;else&lt;/code&gt;, characterizing the things it is safe to substitute for free variables.&lt;/p&gt; &#xA;&lt;p&gt;Meanwhile, channels also have a notion of scope, restricting the variables which may occur free in the terms which get sent along them. The scope of a channel is exactly the scope at its time of creation.&lt;/p&gt; &#xA;&lt;h2&gt;Format strings&lt;/h2&gt; &#xA;&lt;p&gt;The actors &lt;code&gt;PRINTF&lt;/code&gt;, &lt;code&gt;BREAK&lt;/code&gt; and &lt;code&gt;#&lt;/code&gt; can be used to print messages to the user: &lt;code&gt;#&lt;/code&gt; signifies failure, &lt;code&gt;BREAK&lt;/code&gt; halts execution to display a message, and &lt;code&gt;PRINTF&lt;/code&gt; is often used to communicate success. Each of these actors are followed by a format string enclosed in double quotes &#34;, which may contain placeholders &lt;code&gt;%r&lt;/code&gt;, &lt;code&gt;%i&lt;/code&gt;, &lt;code&gt;%s&lt;/code&gt;, &lt;code&gt;%S&lt;/code&gt;, &lt;code&gt;%e&lt;/code&gt;, and &lt;code&gt;%m&lt;/code&gt;, followed by a term for each &lt;code&gt;%r&lt;/code&gt;, &lt;code&gt;%i&lt;/code&gt;, and &lt;code&gt;%s&lt;/code&gt; placeholder in the string. Newlines and tabs are represented by &lt;code&gt;\n&lt;/code&gt; and &lt;code&gt;\t&lt;/code&gt; respectively, and characters can be quoted by preceding them with a backslash. The placeholders have the following meaning:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;%r&lt;/code&gt;: print &#34;raw&#34; term (without instantiating solved meta variables)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%i&lt;/code&gt;: print &#34;instantiated&#34; term&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%s&lt;/code&gt;: print underlying term representation using Haskell&#39;s &lt;code&gt;show&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%S&lt;/code&gt;: print current stack of virtual machine&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%e&lt;/code&gt;: print current environment of bindings&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;%m&lt;/code&gt;: print current store of metavariable solutions&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Executing actors&lt;/h2&gt; &#xA;&lt;p&gt;Actors are executed using the &lt;code&gt;exec&lt;/code&gt; command, in the context of all previous declarations and definitions. After the actors have finished running, a &#34;typing derivation&#34; is extracted and printed on the screen. For example, running the actor&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;exec  check@p. &#39;Check?t.&#xA;   p! [&#39;Arr &#39;Nat &#39;Nat].&#xA;   p! [&#39;Lam \z. [&#39;Emb&#xA;         [&#39;App [&#39;Rad [&#39;Lam \w. [&#39;Emb w]] [&#39;Arr &#39;Nat &#39;Nat]]&#xA;         [&#39;Emb z]]]].&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;gives rise to the following output:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-output&#34;&gt;check [&#39;Arr &#39;Nat &#39;Nat]&#xA;      [&#39;Lam \z. [&#39;Emb [&#39;App [&#39;Rad [&#39;Lam \w. [&#39;Emb w]] [&#39;Arr &#39;Nat &#39;Nat]]&#xA;                            [&#39;Emb z]]]]&#xA; \z_0. ctxt |- z_0 -&amp;gt; &#39;Nat.&#xA;  check &#39;Nat [&#39;Emb [&#39;App [&#39;Rad [&#39;Lam \w. [&#39;Emb w]]&#xA;                               [&#39;Arr &#39;Nat &#39;Nat]] [&#39;Emb z_0]]]&#xA;   synth [&#39;App [&#39;Rad [&#39;Lam \w. [&#39;Emb w]] [&#39;Arr &#39;Nat &#39;Nat]] [&#39;Emb z_0]] &#39;Nat&#xA;    synth [&#39;Rad [&#39;Lam \w. [&#39;Emb w]] [&#39;Arr &#39;Nat &#39;Nat]] [&#39;Arr &#39;Nat &#39;Nat]&#xA;     type [&#39;Arr &#39;Nat &#39;Nat]&#xA;      type &#39;Nat&#xA;      type &#39;Nat&#xA;     check [&#39;Arr &#39;Nat &#39;Nat] [&#39;Lam \w. [&#39;Emb w]]&#xA;      \w_1. ctxt |- w_1 -&amp;gt; &#39;Nat.&#xA;       check &#39;Nat [&#39;Emb w_1]&#xA;        synth w_1 &#39;Nat&#xA;    check &#39;Nat [&#39;Emb z_0]&#xA;     synth z_0 &#39;Nat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;By running &lt;code&gt;typos INPUTFILE --latex OUTFILE&lt;/code&gt;, the derivation above is written in latex format to &lt;code&gt;OUTFILE&lt;/code&gt; as well. With commands redefined as in the &lt;a href=&#34;https://raw.githubusercontent.com/msp-strath/TypOS/main/build/notations.tex&#34;&gt;notations.tex&lt;/a&gt; file, this produces the following for our example execution:&lt;/p&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/msp-strath/TypOS/main/build/trace.svg?raw=true&#34; alt=&#34;Typing derivation in latex format&#34; style=&#34;width: 700px; height: auto;&#34;&gt;</summary>
  </entry>
  <entry>
    <title>olivierverdier/zsh-git-prompt</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/olivierverdier/zsh-git-prompt</id>
    <link href="https://github.com/olivierverdier/zsh-git-prompt" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Informative git prompt for zsh&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Informative git prompt for zsh&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/olivierverdier/zsh-git-prompt&#34;&gt;&lt;img src=&#34;https://travis-ci.org/olivierverdier/zsh-git-prompt.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;zsh&lt;/code&gt; prompt that displays information about the current git repository. In particular the branch name, difference with remote branch, number of files staged, changed, etc.&lt;/p&gt; &#xA;&lt;p&gt;(an original idea from this &lt;a href=&#34;http://sebastiancelis.com/2009/nov/16/zsh-prompt-git-users/&#34;&gt;blog post&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;The prompt may look like the following:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;(master↑3|✚1)&lt;/code&gt;: on branch &lt;code&gt;master&lt;/code&gt;, ahead of remote by 3 commits, 1 file changed but not staged&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(status|●2)&lt;/code&gt;: on branch &lt;code&gt;status&lt;/code&gt;, 2 files staged&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(master|✚7…)&lt;/code&gt;: on branch &lt;code&gt;master&lt;/code&gt;, 7 files changed, some files untracked&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(master|✖2✚3)&lt;/code&gt;: on branch &lt;code&gt;master&lt;/code&gt;, 2 conflicts, 3 files changed&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(experimental↓2↑3|✔)&lt;/code&gt;: on branch &lt;code&gt;experimental&lt;/code&gt;; your branch has diverged by 3 commits, remote by 2 commits; the repository is otherwise clean&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;(:70c2952|✔)&lt;/code&gt;: not on any branch; parent commit has hash &lt;code&gt;70c2952&lt;/code&gt;; the repository is otherwise clean&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here is how it could look like when you are ahead by 4 commits, behind by 5 commits, and have 1 staged files, 1 changed but unstaged file, and some untracked files, on branch &lt;code&gt;dev&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/olivierverdier/zsh-git-prompt/raw/master/screenshot.png&#34; width=&#34;300/&#34;&gt; &#xA;&lt;h2&gt;Prompt Structure&lt;/h2&gt; &#xA;&lt;p&gt;By default, the general appearance of the prompt is:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;(&amp;lt;branch&amp;gt;&amp;lt;branch tracking&amp;gt;|&amp;lt;local status&amp;gt;)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The symbols are as follows:&lt;/p&gt; &#xA;&lt;h3&gt;Local Status Symbols&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Symbol&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✔&lt;/td&gt; &#xA;   &lt;td&gt;repository clean&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;●n&lt;/td&gt; &#xA;   &lt;td&gt;there are &lt;code&gt;n&lt;/code&gt; staged files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✖n&lt;/td&gt; &#xA;   &lt;td&gt;there are &lt;code&gt;n&lt;/code&gt; unmerged files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;✚n&lt;/td&gt; &#xA;   &lt;td&gt;there are &lt;code&gt;n&lt;/code&gt; changed but &lt;em&gt;unstaged&lt;/em&gt; files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;…&lt;/td&gt; &#xA;   &lt;td&gt;there are some untracked files&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Branch Tracking Symbols&lt;/h3&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Symbol&lt;/th&gt; &#xA;   &lt;th&gt;Meaning&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;↑n&lt;/td&gt; &#xA;   &lt;td&gt;ahead of remote by &lt;code&gt;n&lt;/code&gt; commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;↓n&lt;/td&gt; &#xA;   &lt;td&gt;behind remote by &lt;code&gt;n&lt;/code&gt; commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;↓m↑n&lt;/td&gt; &#xA;   &lt;td&gt;branches diverged, other by &lt;code&gt;m&lt;/code&gt; commits, yours by &lt;code&gt;n&lt;/code&gt; commits&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Branch Symbol&lt;/h3&gt; &#xA;&lt;p&gt;When the branch name starts with a colon &lt;code&gt;:&lt;/code&gt;, it means it’s actually a hash, not a branch (although it should be pretty clear, unless you name your branches like hashes :-)&lt;/p&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone this repository somewhere on your hard drive.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Source the file &lt;code&gt;zshrc.sh&lt;/code&gt; from your &lt;code&gt;~/.zshrc&lt;/code&gt; config file, and configure your prompt. So, somewhere in &lt;code&gt;~/.zshrc&lt;/code&gt;, you should have:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;source path/to/zshrc.sh&#xA;# an example prompt&#xA;PROMPT=&#39;%B%m%~%b$(git_super_status) %# &#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go in a git repository and test it!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Haskell (optional)&lt;/h3&gt; &#xA;&lt;p&gt;There is now a Haskell implementation as well, which can be four to six times faster than the Python one. The reason is not that Haskell is faster in itself (although it is), but that this implementation calls &lt;code&gt;git&lt;/code&gt; only once. To install, do the following:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Make sure &lt;a href=&#34;http://docs.haskellstack.org/en/stable/README.html#how-to-install&#34;&gt;Haskell&#39;s stack&lt;/a&gt; is installed on your system&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cd&lt;/code&gt; to this folder&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stack setup&lt;/code&gt; to install the Haskell compiler, if it is not already there&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;stack build &amp;amp;&amp;amp; stack install&lt;/code&gt; (don&#39;t worry, the executable is only “installed” in this folder, not on your system)&lt;/li&gt; &#xA; &lt;li&gt;Define the variable &lt;code&gt;GIT_PROMPT_EXECUTABLE=&#34;haskell&#34;&lt;/code&gt; somewhere in your &lt;code&gt;.zshrc&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Customisation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You may redefine the function &lt;code&gt;git_super_status&lt;/code&gt; (after the &lt;code&gt;source&lt;/code&gt; statement) to adapt it to your needs (to change the order in which the information is displayed).&lt;/li&gt; &#xA; &lt;li&gt;Define the variable &lt;code&gt;ZSH_THEME_GIT_PROMPT_CACHE&lt;/code&gt; in order to enable caching.&lt;/li&gt; &#xA; &lt;li&gt;You may also change a number of variables (which name start with &lt;code&gt;ZSH_THEME_GIT_PROMPT_&lt;/code&gt;) to change the appearance of the prompt. Take a look in the file &lt;code&gt;zshrc.sh&lt;/code&gt; to see how the function &lt;code&gt;git_super_status&lt;/code&gt; is defined, and what variables are available.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;strong&gt;Enjoy!&lt;/strong&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/gogol</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/brendanhay/gogol</id>
    <link href="https://github.com/brendanhay/gogol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Google Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gogol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/gogol&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/gogol.svg?sanitize=true&#34; alt=&#34;Hackage Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#organisation&#34;&gt;Organisation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#change-log&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#code-generation&#34;&gt;Code Generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#licence&#34;&gt;Licence&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;A comprehensive Google Services SDK for Haskell supporting all of the publicly available services.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the latest stable release documentation for each respective library on Hackage under the &lt;a href=&#34;http://hackage.haskell.org/packages/#cat:Google&#34;&gt;Google section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Organisation&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol&#34;&gt;&lt;code&gt;lib/gogol&lt;/code&gt;&lt;/a&gt;: Actual operational logic, you&#39;ll need to import this to send requests etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol-core&#34;&gt;&lt;code&gt;lib/gogol-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;gogol-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/services&#34;&gt;&lt;code&gt;lib/services/gogol-*&lt;/code&gt;&lt;/a&gt;: Data types for each of the individual Google Compute Engine Service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: A currently sparse collection of examples for the various services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;, Configuration, templates, and assets for the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code generation binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the release lifecycle of the service libraries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;A change log for the entire project can be found under &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gogol/CHANGELOG.md&#34;&gt;&lt;code&gt;gogol/CHANGELOG.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;For any problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/gogol/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code Generation&lt;/h2&gt; &#xA;&lt;p&gt;For pull requests which affect generated output, please &lt;em&gt;do not include&lt;/em&gt; the actual regenerated service code, only commit the updates to the generator and related configuration.&lt;/p&gt; &#xA;&lt;p&gt;This ensures the Continuous Integration process is the single source of truth for generated code changes, and keeps pull requests readable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h3&gt;Adding New Services&lt;/h3&gt; &#xA;&lt;p&gt;The configuration for the generation step of each individual service endpoint lives under &lt;code&gt;./configs/services&lt;/code&gt;. The naming matches the Google Discovery Service naming of endpoints, which are vendored under &lt;code&gt;./configs/models&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rather than actually crawling the Discovery Service, the &lt;a href=&#34;https://www.github.com/google/google-api-go-client&#34;&gt;Google API Go Client&lt;/a&gt; is vendored under &lt;code&gt;./vendor&lt;/code&gt;, and the JSON service definitions are copied to &lt;code&gt;./configs/models&lt;/code&gt; to ensure reproducibility of the generation steps and the abilitry to diff across versions.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Cloud Dataproc&lt;/h3&gt; &#xA;&lt;p&gt;To add a new endpoint, first create the related JSON configuration in the &lt;code&gt;./configs/services&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Since the Cloud Dataproc API is called &lt;code&gt;dataproc-api.json&lt;/code&gt; in the Google Discovery API, you would create the configuration &lt;code&gt;./configs/services/dataproc.json&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA; &#34;library&#34;: &#34;dataproc&#34;,&#xA; &#34;canonicalName&#34;: &#34;Dataproc&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the &lt;code&gt;Makefile&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the &lt;code&gt;./bin/gogol-gen&lt;/code&gt; binary, and will generate a Haskell library for each API that has matching &lt;code&gt;./configs/services/*.json&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;For the above example, the result would be a &lt;code&gt;./lib/services/gogol-dataproc&lt;/code&gt; directory at the top-level of the project containing the generated API client.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;make full-clean&lt;/code&gt; can be used to cause a complete re-download of all (including new) service models.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Individual clients/SDKs can be generated by passing a specific &lt;code&gt;MODELS&lt;/code&gt; environment variable to the &lt;code&gt;make&lt;/code&gt; command, for example: &lt;code&gt;MODELS=configs/models/admin/directory/v1/admin-api.json make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;Gogol is released under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parts of the code are derived from Google Compute Engine service descriptions, licensed under Apache 2.0. Source files subject to this contain an additional licensing clause in their header.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-language-server</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/haskell/haskell-language-server</id>
    <link href="https://github.com/haskell/haskell-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official haskell ide support via language server (LSP). Successor of ghcide &amp; haskell-ide-engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;haskell-language-server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haskell/haskell-language-server/master/docs/logos/logo-256.png&#34; alt=&#34;haskell-language-server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/haskell/haskell-language-server.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2-green.svg?dummy&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/haskell/haskell-language-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Testing Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Nix Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/?channels=#haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;ircchat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/haskell/haskell-language-server&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/haskell/haskell-language-server/badges/users.svg?sanitize=true&#34; alt=&#34;codetriage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The official Haskell language server (LSP) implementation. Consult the &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/&#34;&gt;project documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/supported-versions.html&#34;&gt;Supported GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/configuration.html&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>PostgREST/postgrest</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/PostgREST/postgrest</id>
    <link href="https://github.com/PostgREST/postgrest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;REST API for any Postgres database&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/bigger-logo.png&#34; alt=&#34;Logo&#34; title=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-Patreon-orange.svg?colorB=F96854&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/begriffs/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/begriffs/postgrest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://postgrest.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/postgrest/postgrest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/postgrest/postgrest.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PostgREST/postgrest/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/postgrest/postgrest/actions/workflows/ci.yaml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/PostgREST/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/postgrest/postgrest/main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/postgrest.svg?label=hackage&#34; alt=&#34;Hackage docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PostgREST serves a fully RESTful API from any existing PostgreSQL database. It provides a cleaner, more standards-compliant, faster API than you are likely to write from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.cybertec-postgresql.com/en/?utm_source=postgrest.org&amp;amp;utm_medium=referral&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;222px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/cybertec-new.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.2ndquadrant.com/en/?utm_campaign=External%20Websites&amp;amp;utm_source=PostgREST&amp;amp;utm_medium=Logo&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/2ndquadrant.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://tryretool.com/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/retool.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://gnuhost.eu/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/gnuhost.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://supabase.io?utm_source=postgrest%20backers&amp;amp;utm_medium=open%20source%20partner&amp;amp;utm_campaign=postgrest%20backers%20github&amp;amp;utm_term=homepage&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/supabase.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://oblivious.ai/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/oblivious.jpg&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Big thanks to our sponsors! You can join them by supporting PostgREST on &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the binary (&lt;a href=&#34;https://github.com/PostgREST/postgrest/releases/latest&#34;&gt;latest release&lt;/a&gt;) for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke for help:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;postgrest --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://postgrest.org&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Latest documentation is at &lt;a href=&#34;http://postgrest.org&#34;&gt;postgrest.org&lt;/a&gt;. You can contribute to the docs in &lt;a href=&#34;https://github.com/PostgREST/postgrest-docs&#34;&gt;PostgREST/postgrest-docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;TLDR; subsecond response times for up to 2000 requests/sec on Heroku free tier. If you&#39;re used to servers written in interpreted languages, prepare to be pleasantly surprised by PostgREST performance.&lt;/p&gt; &#xA;&lt;p&gt;Three factors contribute to the speed. First the server is written in &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; using the &lt;a href=&#34;http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks&#34;&gt;Warp&lt;/a&gt; HTTP server (aka a compiled language with lightweight threads). Next it delegates as much calculation as possible to the database including&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serializing JSON responses directly in SQL&lt;/li&gt; &#xA; &lt;li&gt;Data validation&lt;/li&gt; &#xA; &lt;li&gt;Authorization&lt;/li&gt; &#xA; &lt;li&gt;Combined row counting and retrieval&lt;/li&gt; &#xA; &lt;li&gt;Data post in single command (&lt;code&gt;returning *&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally it uses the database efficiently with the &lt;a href=&#34;https://nikita-volkov.github.io/hasql-benchmarks/&#34;&gt;Hasql&lt;/a&gt; library by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keeping a pool of db connections&lt;/li&gt; &#xA; &lt;li&gt;Using the PostgreSQL binary protocol&lt;/li&gt; &#xA; &lt;li&gt;Being stateless to allow horizontal scaling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST &lt;a href=&#34;http://postgrest.org/en/stable/auth.html&#34;&gt;handles authentication&lt;/a&gt; (via JSON Web Tokens) and delegates authorization to the role information defined in the database. This ensures there is a single declarative source of truth for security. When dealing with the database the server assumes the identity of the currently authenticated user, and for the duration of the connection cannot do anything the user themselves couldn&#39;t. Other forms of authentication can be built on top of the JWT primitive. See the docs for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;A robust long-lived API needs the freedom to exist in multiple versions. PostgREST does versioning through database schemas. This allows you to expose tables and views without making the app brittle. Underlying tables can be superseded and hidden behind public facing views.&lt;/p&gt; &#xA;&lt;h2&gt;Self-documentation&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST uses the &lt;a href=&#34;https://openapis.org/&#34;&gt;OpenAPI&lt;/a&gt; standard to generate up-to-date documentation for APIs. You can use a tool like &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Swagger-UI&lt;/a&gt; to render interactive documentation for demo requests against the live API server.&lt;/p&gt; &#xA;&lt;p&gt;This project uses HTTP to communicate other metadata as well. For instance the number of rows returned by an endpoint is reported by - and limited with - range headers. More about &lt;a href=&#34;http://begriffs.com/posts/2014-03-06-beyond-http-header-links.html&#34;&gt;that&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Data Integrity&lt;/h2&gt; &#xA;&lt;p&gt;Rather than relying on an Object Relational Mapper and custom imperative coding, this system requires you put declarative constraints directly into your database. Hence no application can corrupt your data (including your API server).&lt;/p&gt; &#xA;&lt;p&gt;The PostgREST exposes HTTP interface with safeguards to prevent surprises, such as enforcing idempotent PUT requests.&lt;/p&gt; &#xA;&lt;p&gt;See examples of &lt;a href=&#34;http://www.tutorialspoint.com/postgresql/postgresql_constraints.htm&#34;&gt;PostgreSQL constraints&lt;/a&gt; and the &lt;a href=&#34;http://postgrest.org/en/stable/api.html&#34;&gt;API guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting development&lt;/h2&gt; &#xA;&lt;p&gt;You can help PostgREST ongoing maintenance and development by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Making a regular donation through Patreon &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;https://www.patreon.com/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, you can make a one-time donation via Paypal &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;https://www.paypal.me/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every donation will be spent on making PostgREST better for the whole community.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;The PostgREST organization is grateful to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/BACKERS.md&#34;&gt;sponsors and backers&lt;/a&gt; who support PostgREST&#39;s development.&lt;/li&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/graphs/contributors&#34;&gt;contributors&lt;/a&gt; who have improved PostgREST immensely with their code and good judgement. See more details in the &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The cool logo came from &lt;a href=&#34;https://github.com/casalaina&#34;&gt;Mikey Casalaina&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>dapphub/dapptools</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/dapphub/dapptools</id>
    <link href="https://github.com/dapphub/dapptools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Dapp, Seth, Hevm, and more&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Dapp tools by DappHub &lt;a href=&#34;https://dapphub.chat&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/community-chat-blue.svg?style=flat-square&#34; alt=&#34;Chat&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Hello!&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;dapptools&lt;/code&gt; is a suite of Ethereum focused CLI tools following the Unix design philosophy, favoring composability, configurability and extensibility.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the source code for several programs hand-crafted and maintained by DappHub, along with dependency management, courtesy of Nix.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp&#34;&gt;dapp&lt;/a&gt; - All you need Ethereum development tool. Build, test, fuzz, formally verify, debug &amp;amp; deploy solidity contracts.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth&#34;&gt;seth&lt;/a&gt; - Ethereum CLI. Query contracts, send transactions, follow logs, slice &amp;amp; dice data.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm&#34;&gt;hevm&lt;/a&gt; - Testing oriented EVM implementation. Debug, fuzz, or symbolically execute code against local or mainnet state.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign&#34;&gt;ethsign&lt;/a&gt; - Sign Ethereum transactions from a local keystore or hardware wallet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development Status&lt;/h2&gt; &#xA;&lt;p&gt;dapptools is currently in a stage of clandestine development where support for the casual user may be deprived. The software can now be considered free as in free puppy. Users seeking guidance can explore using foundry as an alternative&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;Install Nix if you haven&#39;t already (&lt;a href=&#34;https://nixos.org/download.html&#34;&gt;instructions&lt;/a&gt;). Then install dapptools:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl https://dapp.tools/install | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This configures the dapphub binary cache and installs the &lt;code&gt;dapp&lt;/code&gt;, &lt;code&gt;solc&lt;/code&gt;, &lt;code&gt;seth&lt;/code&gt; and &lt;code&gt;hevm&lt;/code&gt; executables.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;NOTE:&lt;/strong&gt; Arm support in the GHC haskell compiler is still fairly bleeding edge, until this situation stabilises, users of M1 macs must run dapptools (and the installer!) under rosetta 2 (i.e. as an emulated x86 program). Make sure &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; contains &lt;code&gt;system = x86_64-darwin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also install an individual tool with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA &amp;lt;tool&amp;gt; -f $(curl -sS https://api.github.com/repos/dapphub/dapptools/releases/latest | jq -r .tarball_url)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you instead want to build from &lt;code&gt;master&lt;/code&gt;, change the url to &lt;code&gt;https://github.com/dapphub/dapptools/archive/master.tar.gz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Prebuilt hevm binary&lt;/h3&gt; &#xA;&lt;p&gt;Static binaries for linux and macos of hevm are available for each release at &lt;a href=&#34;https://github.com/dapphub/dapptools/releases&#34;&gt;https://github.com/dapphub/dapptools/releases&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Most functionality is available out of the box, but for symbolic execution you will need &lt;a href=&#34;https://github.com/ethereum/solidity&#34;&gt;&lt;code&gt;solc&lt;/code&gt;&lt;/a&gt; and (&lt;a href=&#34;https://github.com/Z3Prover/z3/&#34;&gt;&lt;code&gt;z3&lt;/code&gt;&lt;/a&gt; or &lt;a href=&#34;https://github.com/CVC4/CVC4&#34;&gt;&lt;code&gt;cvc4&lt;/code&gt;&lt;/a&gt; (or both)).&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;p&gt;For more information about the tools, consult the individual README pages:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/seth/README.md&#34;&gt;seth&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/dapp/README.md&#34;&gt;dapp&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/hevm/README.md&#34;&gt;hevm&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/src/ethsign/README.md&#34;&gt;ethsign&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or use the &lt;code&gt;--help&lt;/code&gt; flag for any tool.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;re also happy to answer any questions at &lt;a href=&#34;https://dapphub.chat/&#34;&gt;https://dapphub.chat/&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;Deploy a &#39;Hello World&#39; contract and call it:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;export ETH_FROM=$YOUR_ADDRESS&#xA;echo &#39;contract Hello { function hi() public pure returns(string memory) {return &#34;Hello, World!&#34;;}}&#39; | solc --bin -o . --overwrite -&#xA;HELLO=$(seth send --create $(&amp;lt;Hello.bin))&#xA;seth call $HELLO &#34;hi()(string)&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Debug the first transaction of the latest block in the interactive debugger:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;seth run-tx $(seth block latest transactions | jq .&#39;[0]&#39; -r) --debug&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If Vitalik&#39;s next transaction were a contract deployment, calculate the address it would be deployed at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;export ETH_RPC_URL=https://mainnet.infura.io/v3/$YOUR_API_KEY&#xA;dapp address 0xab5801a7d398351b8be11c439e05c5b3259aec9b $(seth nonce 0xab5801a7d398351b8be11c439e05c5b3259aec9b)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Symbolically explore the possible execution paths of a call to &lt;code&gt;dai.transfer(address,uint)&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;seth bundle-source 0x6b175474e89094c44da98b954eedeac495271d0f &amp;gt; daisrc.json &amp;amp;&amp;amp; \&#xA;hevm symbolic --address 0x6b175474e89094c44da98b954eedeac495271d0f --rpc $ETH_RPC_URL  --debug --sig &#34;transfer(address,uint256)&#34; --json-file daisrc.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are always welcome! You may be interested in the &lt;a href=&#34;https://raw.githubusercontent.com/dapphub/dapptools/master/ARCHITECTURE.md&#34;&gt;architecture&lt;/a&gt; of this repository.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://builtwithnix.org&#34;&gt;&lt;img src=&#34;https://builtwithnix.org/badge.svg?sanitize=true&#34; alt=&#34;built with nix&#34;&gt;&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-db-sync</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/input-output-hk/cardano-db-sync</id>
    <link href="https://github.com/input-output-hk/cardano-db-sync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A component that follows the Cardano chain and stores blocks and transactions in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cardano DB Sync&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Anyone wishing to build and run anything in this repository should avoid the &lt;code&gt;master&lt;/code&gt; branch and build/run from the latest release tag.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of Cardano DB Sync is to follow the Cardano chain and take information from the chain and an internally maintained copy of ledger state. Data is then extracted from the chain and inserted into a PostgreSQL database. SQL queries can then be written directly against the database schema or as queries embedded in any language with libraries for interacting with an SQL database.&lt;/p&gt; &#xA;&lt;p&gt;Examples of what someone would be able to do via an SQL query against a Cardano DB Sync instance fully synced to a specific network is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up any block, transaction, address, stake pool etc on that network, usually by the hash that identifies that item or the index into another table.&lt;/li&gt; &#xA; &lt;li&gt;Look up the balance of any stake address for any Shelley or later epoch.&lt;/li&gt; &#xA; &lt;li&gt;Look up the amount of ADA delegated to each pool for any Shelley or later epoch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example SQL queries are available at &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example Queries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The cardano-db-sync component consists of a set of components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db&lt;/code&gt; which defines common data types and functions used by any application that needs to interact with the data base from Haskell. In particular, it defines the database schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-tool&lt;/code&gt; a tool used to manage the databases of cardano-db-sync (create and run migrations, validate and analyse)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-sync&lt;/code&gt; which acts as a Cardano node, following the chain and inserting data from the chain into a PostgreSQL database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The db-sync node is written in a highly modular fashion to allow it to be as flexible as possible.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cardano-db-sync&lt;/code&gt; node connects to a locally running &lt;code&gt;cardano-node&lt;/code&gt; (ie one connected to other nodes in the Cardano network over the internet with TCP/IP) using a Unix domain socket, retrieves blocks, updates its internal ledger state and stores parts of each block in a local PostgreSQL database. The database does not store things like cryptographic signatures but does store enough information to follow the chain of blocks and look at the transactions within blocks.&lt;/p&gt; &#xA;&lt;p&gt;The PostgreSQL database is designed to be accessed in a read-only fashion from other applications. The database schema is highly normalised which helps prevent data inconsistencies (specifically with the use of foreign keys from one table to another). More user friendly database queries can be implemented using &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createview.html&#34;&gt;Postgres Views&lt;/a&gt; to implement joins between tables.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The system requirements for &lt;code&gt;cardano-db-sync&lt;/code&gt; (with both &lt;code&gt;db-sync&lt;/code&gt; and the &lt;code&gt;node&lt;/code&gt; running on the same machine are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any of the big well known Linux distributions (eg, Debian, Ubuntu, RHEL, CentOS, Arch etc).&lt;/li&gt; &#xA; &lt;li&gt;32 Gigabytes of RAM or more.&lt;/li&gt; &#xA; &lt;li&gt;4 CPU cores or more.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the machine has sufficient IOPS (Input/Output Operations per Second). Ie it should be 60k IOPS or better. Lower IOPS ratings will result in slower sync times and/or falling behind the chain tip.&lt;/li&gt; &#xA; &lt;li&gt;160 Gigabytes or more of disk storage (preferably SSD which are 2-5 times faster than electro-mechanical disks).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended configuration is to have the &lt;code&gt;db-sync&lt;/code&gt; and the PostgreSQL server on the same machine. During syncing (getting historical data from the blockchain) there is a &lt;strong&gt;HUGE&lt;/strong&gt; amount of data traffic between &lt;code&gt;db-sync&lt;/code&gt; and the database. Traffic to a local database is significantly faster than traffic to a database on the LAN or remotely to another location.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues with this project, consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt; page for possible solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/building-running.md&#34;&gt;BuildingRunning&lt;/a&gt;: Building and running the db-sync node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/docker.md&#34;&gt;Docker&lt;/a&gt;: Instruction for docker-compose, and building the images using nix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example SQL queries&lt;/a&gt;: Some example SQL and Haskell/Esqueleto queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/pool-offline-data.md&#34;&gt;PoolOfflineData&lt;/a&gt;: Explanation of how stake pool offline data is retried.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema.md&#34;&gt;Schema Documentation&lt;/a&gt;: The database schema documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema-management.md&#34;&gt;Schema Management&lt;/a&gt;: How the database schema is managed and modified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/state-snapshot.md&#34;&gt;StateSnapshot&lt;/a&gt;: Document the creation and restoration of state snapshot files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-db-sync/native.haskellPackages.cardano-db.checks.test-db.x86_64-linux/latest/download/1&#34;&gt;SQL DB Schema&lt;/a&gt;: The current PostgreSQL DB schema, as generated by the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/validation.md&#34;&gt;Validation&lt;/a&gt;: Explanation of validation done by the db-sync node and assumptions made.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>digital-asset/ex-healthcare-claims-processing</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/digital-asset/ex-healthcare-claims-processing</id>
    <link href="https://github.com/digital-asset/ex-healthcare-claims-processing" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reference DAML application demonstrating a healthcare use case.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reference Application: Healthcare Claims Processing&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;This application simulates processing a healthcare claim, starting with the referral from the Primary Care Provider (PCP) and including the creation of an appointment with the radiologist, checking in the patient on the date of the appointment, checking out the patient after service delivery, generation of the claim, and finally, payment for the procedure.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This reference application is intended to demonstrate the capabilities of Daml. You are recommended to consider other non-functional aspects, like security, resiliency, recoverability, etc prior to production use.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;Be sure you have the following installed.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.daml.com/&#34;&gt;Daml SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java 8 or higher&lt;/li&gt; &#xA; &lt;li&gt;Make&lt;/li&gt; &#xA; &lt;li&gt;Node v14.16.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;NPM v7.14.0 or higher&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pipenv.pypa.io/&#34;&gt;Python Pipenv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Starting the App&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Build the App. Type:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you change the Daml models locally, you need to re-run this command before starting the application.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Use &lt;strong&gt;separate terminals&lt;/strong&gt; to launch the individual components:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;launchers/sandbox+populate&#xA;launchers/automation&#xA;launchers/ui&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Stopping the App&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop each running command by pressing &lt;strong&gt;Ctrl+C&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Working with Daml Hub&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: The custom UI does not work on Daml Hub yet, but you can use Daml Hub&#39;s live explorer to interact with the contracts by following the instructions below.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;As a first step, build the whole project&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make clean build&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create a project and a ledger in Daml Hub&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Upload the DARs&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the parties to the ledger&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;PrimaryCareProvider&lt;/li&gt; &#xA;   &lt;li&gt;Radiologist&lt;/li&gt; &#xA;   &lt;li&gt;Patient1&lt;/li&gt; &#xA;   &lt;li&gt;Operator&lt;/li&gt; &#xA;   &lt;li&gt;InsuranceCompany&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Download &lt;code&gt;participants.json&lt;/code&gt; from the ledger settings&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Create the &lt;code&gt;ledger-setup.json&lt;/code&gt; file manually or by running&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;node scripts/create-ledger-setup.js participants.json ledger-setup.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The resulting file should like this:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;{&#xA;  &#34;parties&#34;: {&#xA;    &#34;payer1&#34;: &#34;ledger-party-92d3fc64-a589-4a18-9e47-30541fdc7824&#34;,&#xA;    &#34;operator&#34;: &#34;ledger-party-01328c4d-a7b1-49d4-92cc-400badcb46c2&#34;,&#xA;    &#34;patient1&#34;: &#34;ledger-party-841214e1-cb38-42fa-88a9-08710592f74d&#34;,&#xA;    &#34;provider1&#34;: &#34;ledger-party-5292e717-bbd6-43d5-8cdc-67b463427ee9&#34;,&#xA;    &#34;provider2&#34;: &#34;ledger-party-bd952624-9142-412d-ae39-f6025cd94ac8&#34;&#xA;  }&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;The following table contains the necessary name mapping:&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;Daml Hub name (in &lt;code&gt;participants.json&lt;/code&gt;)&lt;/th&gt; &#xA;     &lt;th align=&#34;center&#34;&gt;Ledger Setup name&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;primaryCareProvider&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;provider1&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;radiologist&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;provider2&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;patient1&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;patient1&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;operator&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;operator&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;insuranceCompany&lt;/td&gt; &#xA;     &lt;td align=&#34;center&#34;&gt;payer1&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the ledger setup&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;daml script \&#xA;  --participant-config participants.json \&#xA;  --json-api \&#xA;  --dar models.dar \&#xA;  --script-name DemoOnboardScenario.StartScript:setupLedger \&#xA;  --input-file ledger-setup.json&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the triggers from the Daml Hub UI&lt;/p&gt; &#xA;  &lt;table&gt; &#xA;   &lt;thead&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;Party&lt;/th&gt; &#xA;     &lt;th align=&#34;left&#34;&gt;Trigger&lt;/th&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/thead&gt; &#xA;   &lt;tbody&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;InsuranceCompany&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Triggers.AcceptClaimTrigger:acceptClaimTrigger&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;InsuranceCompany&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Triggers.AcknowledgeAppointmentTrigger:acknowledgeAppointmentTrigger&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Radiologist&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Triggers.EvaluateReferralTrigger:evaluateReferralTrigger&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Radiologist&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Triggers.UpdateReferralDetailsTrigger:updateReferralDetailsTrigger&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Patient1&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Triggers.AcknowledgeAndDiscloseTrigger:acknowledgeAndDiscloseTrigger&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;    &lt;tr&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Patient1&lt;/td&gt; &#xA;     &lt;td align=&#34;left&#34;&gt;Triggers.AcceptPatientPaymentRequestTrigger:acceptPatientPaymentRequestTrigger&lt;/td&gt; &#xA;    &lt;/tr&gt; &#xA;   &lt;/tbody&gt; &#xA;  &lt;/table&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;This User Guide will take you step-by-step through healthcare claims processing, executing one successful claim.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This demo is designed to show successful processing of a claim without exceptions or error conditions. A full production implementation would include additional features, handle errors and exceptions, and incorporate appropriate security controls.&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;p&gt;&lt;strong&gt;Roles and Responsibilities&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Role&lt;/th&gt; &#xA;   &lt;th&gt;Responsibility&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Primary Care Provider&lt;/td&gt; &#xA;   &lt;td&gt;A physician, who creates a referral for a Patient to a Radiologist&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Patient&lt;/td&gt; &#xA;   &lt;td&gt;Visits the Primary Care Provider and is referred to a Radiologist&lt;br&gt;Pays their portion of the Bill/Claim after the Radiologist submits a Claim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Radiologist&lt;/td&gt; &#xA;   &lt;td&gt;Checks Referrals and schedules an Appointment for a Patient&lt;br&gt;On the Appointment date they Check-In the Patient in and perform a treatment &lt;br&gt;Marks the Treatment as Completed which creates a Claim for the Insurance Company&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Insurance Company&lt;/td&gt; &#xA;   &lt;td&gt;Pays their portion of the Claim/Bill after the Radiologist submits a Claim&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&lt;strong&gt;Steps&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;The Healthcare Process workflow involves these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Referral&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The Primary Care Provider creates a referral for &#34;John Doe&#34; in the system, sending the patient to a radiology lab (Radiologist) for an x-ray of a possible fracture. The system checks to verify that the patient is eligible for treatment under their insurance and calculates the cost of the procedure for this patient.&lt;/p&gt; &lt;p&gt;Checks include:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Validity of the patient’s insurance policy (in good standing, not expired)&lt;/li&gt; &#xA;   &lt;li&gt;Network status of the radiologist (whether in or out of the insurance company’s approved provider list)&lt;/li&gt; &#xA;   &lt;li&gt;Verification of eligibility and pre-authorization for the treatment&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Appointment&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The Radiologist now creates an appointment for the patient in the system. The system ensures that the treatment is appropriate for the diagnosis and that any necessary pre-authorization has been done. It checks again to ensure that the patient insurance status has not changed since the referral was created.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Check-In&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The patient goes to the lab and is checked in. Again the system reruns all the previous checks to determine if any parameter has changed, for example, whether the patient has satisfied more of their deductible before this date.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Treatment Completion and Claim Creation&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The x-ray is done. The treatment is completed, and the claim is automatically created. The system creates an obligation for the patient to pay their portion of the cost (if any) and for the insurance company to pay its portion.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Payment&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;The insurance company now pays the claim to the lab. The patient pays any required amount as well. The amounts paid are the verified amount established in first steps of the process.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the Application&lt;/h2&gt; &#xA;&lt;h3&gt;Choosing and Changing Roles&lt;/h3&gt; &#xA;&lt;p&gt;When you launch the application, you will see a login screen with the option to choose your Role.&lt;/p&gt; &#xA;&lt;p&gt;To switch from one Role to another click on &#34;Change Roles&#34; in the lower left hand corner of the screen.&lt;/p&gt; &#xA;&lt;p&gt;Note: In this application each Role is represented by a different Party, this is a simplified design for demonstration purposes.&lt;/p&gt; &#xA;&lt;h2&gt;Refer the Patient (&#34;John Doe&#34;) to the Radiologist&lt;/h2&gt; &#xA;&lt;p&gt;The workflow begins with the patient visiting their Primary Care Provider physician (PCP) for treatment. The PCP decides the patient needs an X-Ray and creates a referral to a Radiologist.&lt;/p&gt; &#xA;&lt;h3&gt;Create a Referral&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as the Primary Care Provider Role&lt;/li&gt; &#xA; &lt;li&gt;Go to &lt;strong&gt;Patients&lt;/strong&gt; tab&lt;/li&gt; &#xA; &lt;li&gt;Click on the Patient &#34;John Doe&#34;&lt;/li&gt; &#xA; &lt;li&gt;Select &#34;Refer Patient&#34;&lt;/li&gt; &#xA; &lt;li&gt;Fill out the &#34;Create Referral&#34; screen and click &#34;Create Referral. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can select the &#34;Policy&#34;, &#34;Diagnosis Code&#34;, and &#34;Procedure Code&#34; from their respective dropdowns&lt;/li&gt; &#xA;   &lt;li&gt;Receiver must be &#34;Radiologist&#34; (without quotes)&lt;/li&gt; &#xA;   &lt;li&gt;All other fields can contain any text&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Schedule an Appointment for the Patient as the Radiologist&lt;/h2&gt; &#xA;&lt;p&gt;The next step is scheduling the appointment for the x-ray.&lt;/p&gt; &#xA;&lt;h3&gt;Schedule the Patient&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as the Radiologist&lt;/li&gt; &#xA; &lt;li&gt;Choose the &lt;strong&gt;Referrals&lt;/strong&gt; tab&lt;/li&gt; &#xA; &lt;li&gt;Click on the referral for &#34;John Doe&#34; that you just created&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;Schedule Appointment&lt;/strong&gt;&lt;/li&gt; &#xA; &lt;li&gt;Select the date and time for the appointment on the New Appointment pane and click the &lt;strong&gt;Schedule Appointment&lt;/strong&gt; button. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;You&#39;ll typically want to leave this as the current date and time, otherwise the system won&#39;t let you check in &#34;John Doe&#34; until the scheduled appointment time has passed.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;This new appointment is now visible to the Radiologist and &#34;John Doe&#34;.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The various checks are run again, and the payment requirements are displayed, showing now what payment the lab will receive and what the patient will owe.&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;The Primary Care Provider cannot see this part of the workflow, as the appointment scheduling is only disclosed to the Patient, the Radiologist, and the Insurance Company.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Check-In the Patient as the Radiologist&lt;/h2&gt; &#xA;&lt;p&gt;The next step is for the patient to arrive at the lab for the x-ray and be checked in.&lt;/p&gt; &#xA;&lt;h3&gt;Check-In&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Choose the &lt;strong&gt;Appointments&lt;/strong&gt; tab as the Radiologist&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on &#34;John Doe&#34;s appointment&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click &#34;Check In Patient&#34; and confirm in the dialog window&lt;/p&gt; &lt;p&gt;The various checks are run again to confirm that the patient is still eligible and to recalculate the payments to account for any changes, such as a situation where the patient has satisfied part of their deductible.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Complete Treatment and Create the Claim as the Radiologist&lt;/h2&gt; &#xA;&lt;p&gt;After the x-ray is done, the patient is checked out from the facility, and the claim is created.&lt;/p&gt; &#xA;&lt;h3&gt;Complete Treatment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Choose the &lt;strong&gt;Treatments&lt;/strong&gt; tab as the Radiologist&lt;/li&gt; &#xA; &lt;li&gt;On the Treatments tab, click on the treatment with &#34;John Doe&#34;s name and click &lt;strong&gt;Complete Treatment&lt;/strong&gt; and confirm in the dialog window &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;You can see the pending unpaid claim by locating it on the Claims tab. It will show both the Patient and Insurance Company&#39;s payment responsibilities.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Make Payments from Insurance Company and Patient&lt;/h2&gt; &#xA;&lt;p&gt;The last step of this workflow is for payment to be made to the lab by both the Insurance Company and the Patient&lt;/p&gt; &#xA;&lt;h3&gt;Make Payment&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in as Insurance Company and choose the &lt;strong&gt;Claims&lt;/strong&gt; tab&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;On the Claims list screen, click on the claim made from the Radiologist to the Insurance Company&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Details of this claim will be displayed.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click the &lt;strong&gt;Pay Claim&lt;/strong&gt; button, and confirm in the dialog window&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in as the Patient and choose the &lt;strong&gt;Bills&lt;/strong&gt; tab&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;In a production system, the patient would likely log in through a patient portal rather than through this application.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the open claim from the Radiologist, click the &lt;strong&gt;Pay Bill&lt;/strong&gt; button and confirm on the dialog window&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;And that&#39;s the whole workflow! You&#39;ve just worked through a complicated but typical workflow involving 4 separate parties with their respective privacy preserved throughout and information disclosed only where necessary.&lt;/p&gt; &#xA;&lt;p&gt;CONFIDENTIAL © 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved. Any unauthorized use, duplication or distribution is strictly prohibited.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>yesodweb/wai</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/yesodweb/wai</id>
    <link href="https://github.com/yesodweb/wai" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell Web Application Interface&lt;/p&gt;&lt;hr&gt;&lt;p&gt;An interface between Haskell web frameworks and web servers.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/yesodweb/wai/actions/workflows/tests.yml&#34;&gt;&lt;img src=&#34;https://github.com/yesodweb/wai/actions/workflows/tests.yml/badge.svg?sanitize=true&#34; alt=&#34;Build status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A Haskell web application targets WAI and then can be deployed to any backend with a WAI adaptor. The premier WAI backend is the Warp web server.&lt;/p&gt; &#xA;&lt;p&gt;WAI also adds modularity and code-sharing through middleware and WAI applications. Code can be written that works with any web framework targeting WAI.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://www.yesodweb.com/book/web-application-interface&#34;&gt;Documentation&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/wai&#34;&gt;Haddock Documentation&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Mesabloo/diagnose</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/Mesabloo/diagnose</id>
    <link href="https://github.com/Mesabloo/diagnose" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A simple library for reporting compiler/interpreter errors&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Error reporting made easy&lt;/h1&gt; &#xA;&lt;p&gt;Diagnose is a small library used to report compiler/interpreter errors in a beautiful yet readable way. It was in the beginning heavily inspired by &lt;a href=&#34;https://github.com/zesterer/ariadne&#34;&gt;ariadne&lt;/a&gt;, but ended up quickly becoming its own thing.&lt;/p&gt; &#xA;&lt;p&gt;As a great example, here&#39;s the output of the last test:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mesabloo/diagnose/master/assets/real-world-example-unicode.png&#34; alt=&#34;first example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not like unicode characters, or choose to target platforms which cannot output them natively; you may alternatively print the whole diagnostic with ASCII characters, like this:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Mesabloo/diagnose/master/assets/real-world-example-ascii.png&#34; alt=&#34;second example&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Colors are also optional, and you may choose not to print them.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Show diagnostics with/without 8-bit colors, with/without Unicode characters&lt;/li&gt; &#xA; &lt;li&gt;Inline and multiline markers are nicely displayed&lt;/li&gt; &#xA; &lt;li&gt;The order of markers matters! If there are multiple markers on the same line, they are ordered according to how they were put in each report&lt;/li&gt; &#xA; &lt;li&gt;Reports spanning across multiple files are handled as well&lt;/li&gt; &#xA; &lt;li&gt;Generic over the type of message which can be displayed, meaning that you can output custom data types as well as they can be pretty-printed&lt;/li&gt; &#xA; &lt;li&gt;Diagnostics can be exported to JSON, if you don&#39;t quite like the rendering as it is, or if you need to transmit them to e.g. a website&lt;/li&gt; &#xA; &lt;li&gt;Plug and play (mega)parsec integration and it magically works with your parsers!&lt;/li&gt; &#xA; &lt;li&gt;Support for optional custom error codes, if you want to go the Rust way&lt;/li&gt; &#xA; &lt;li&gt;Variable width Unicode characters are handled in a crossplatform manner&lt;/li&gt; &#xA; &lt;li&gt;TAB characters have custom sizes specified when printing a diagnostic, so that &lt;em&gt;you&lt;/em&gt; decide the width of a TAB, not your terminal emulator!&lt;/li&gt; &#xA; &lt;li&gt;Colors can be tweaked thanks to the ability to export diagnostics as &lt;code&gt;Doc&lt;/code&gt;uments&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;You only need to &lt;code&gt;import Error.Diagnose&lt;/code&gt;, and everything should be ready to go. You don&#39;t even need to &lt;code&gt;import Prettyprinter&lt;/code&gt;, as it is already provided to you by &lt;code&gt;Error.Diagnose&lt;/code&gt;!&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;A diagnostic can be viewed as a collection of reports, spanning on files. This is what the &lt;code&gt;Diagnostic&lt;/code&gt; type embodies.&lt;/p&gt; &#xA;&lt;p&gt;It has a &lt;code&gt;Default&lt;/code&gt; instance, which can be used to construct an empty diagnostic (contains no reports, and has no files).&lt;/p&gt; &#xA;&lt;p&gt;The second step is to add some reports. There are two kinds of reports:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Error reports, created through &lt;code&gt;err&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Warning reports, created by using &lt;code&gt;warn&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Both of these fonctions have the following type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | An optional error code, shown right after @error@ or @warning@ in the square brackets&#xA;Maybe msg -&amp;gt;&#xA;-- | The main message, which is output at the top right after @[error]@ or @[warning]@&#xA;msg -&amp;gt;&#xA;-- | A list of markers, along with the positions they span on&#xA;[(Position, Marker msg)] -&amp;gt;&#xA;-- | Some hints to be output at the bottom of the report&#xA;[msg] -&amp;gt;&#xA;-- | The created report&#xA;Report msg&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Each report contains markers, which are what underlines the code in the screenshots above. They come in three flavors:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A &lt;code&gt;This&lt;/code&gt; marker indicates the main reason of the error. It is highlighted in red (for errors) or yellow (for warnings). Ideally, there is only one per report, but this isn&#39;t strictly required.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;Where&lt;/code&gt; marker adds additional context to the error by adding highlighted code to the error. This can be used to remind used that a variable was found of a given type earlier, or even where a previous declaration was found in another file. This is output in blue by default.&lt;/li&gt; &#xA; &lt;li&gt;A &lt;code&gt;Maybe&lt;/code&gt; marker is probably the rarest one. It is basically a way of suggesting fixes (as when GCC tells you that you probably mistyped a variable name). These markers are highlighted in green.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The &lt;code&gt;Position&lt;/code&gt; datatype is however required to be used with this library. If you use another way of keeping track of position information, you will need to convert them to the &lt;code&gt;Position&lt;/code&gt; datatype.&lt;/p&gt; &#xA;&lt;p&gt;Once your reports are created, you will need to add them inside the diagnostic using &lt;code&gt;addReport&lt;/code&gt;. You will also need to put your files into the diagnostic with &lt;code&gt;addFile&lt;/code&gt;, else lines won&#39;t be printed and you will get &lt;code&gt;&amp;lt;no-line&amp;gt;&lt;/code&gt; in your reports.&lt;/p&gt; &#xA;&lt;p&gt;After all of this is done, you may choose to either:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;print the diagnostic onto a file &lt;code&gt;Handle&lt;/code&gt; (most likely &lt;code&gt;stdout&lt;/code&gt; or &lt;code&gt;stderr&lt;/code&gt;) using &lt;code&gt;printDiagnostic&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;create a &lt;code&gt;Doc&lt;/code&gt;ument which can be further altered using &lt;code&gt;prettyDiagnostic&lt;/code&gt;;&lt;/li&gt; &#xA; &lt;li&gt;or export it to JSON with &lt;code&gt;diagnosticToJson&lt;/code&gt; or the &lt;code&gt;ToJSON&lt;/code&gt; class of Aeson (the output format is documented under the &lt;code&gt;diagnosticToJson&lt;/code&gt; function).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Example&lt;/h2&gt; &#xA;&lt;p&gt;Here is how the above screenshot was generated:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;let beautifulExample =&#xA;      err&#xA;        Nothing&#xA;        &#34;Could not deduce constraint &#39;Num(a)&#39; from the current context&#34;&#xA;        [ (Position (1, 25) (2, 6) &#34;somefile.zc&#34;, This &#34;While applying function &#39;+&#39;&#34;),&#xA;          (Position (1, 11) (1, 16) &#34;somefile.zc&#34;, Where &#34;&#39;x&#39; is supposed to have type &#39;a&#39;&#34;),&#xA;          (Position (1, 8) (1, 9) &#34;somefile.zc&#34;, Where &#34;type &#39;a&#39; is bound here without constraints&#34;)&#xA;        ]&#xA;        [&#34;Adding &#39;Num(a)&#39; to the list of constraints may solve this problem.&#34;]&#xA;&#xA;-- Create the diagnostic &#xA;let diagnostic  = addFile def &#34;somefile.zc&#34; &#34;let id&amp;lt;a&amp;gt;(x : a) : a := x\n  + 1&#34;&#xA;let diagnostic&#39; = addReport diagnostic beautifulExample&#xA;&#xA;-- Print with unicode characters, colors and the default style&#xA;printDiagnostic stdout True True 4 defaultStyle diagnostic&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples are given in the &lt;a href=&#34;https://raw.githubusercontent.com/Mesabloo/diagnose/master/test/rendering&#34;&gt;&lt;code&gt;test/rendering&lt;/code&gt;&lt;/a&gt; folder (execute &lt;code&gt;stack test&lt;/code&gt; to see the output).&lt;/p&gt; &#xA;&lt;h2&gt;TODO list&lt;/h2&gt; &#xA;&lt;p&gt;&amp;lt;&amp;lt; empty, for now &amp;gt;&amp;gt;&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;This work is licensed under the BSD-3 clause license.&lt;/p&gt; &#xA;&lt;p&gt;Copyright (c) 2021-2022 Mesabloo, all rights reserved.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>kowainik/learn4haskell</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/kowainik/learn4haskell</id>
    <link href="https://github.com/kowainik/learn4haskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;👩‍🏫 👨‍🏫 Learn Haskell basics in 4 pull requests&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;learn4haskell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/images/HacktoberFest2021-Learn4Haskell-Banner.png&#34; alt=&#34;Learn4Haskell&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;🚨 &lt;strong&gt;Important notice: This course continues BAU even after Hacktoberfest&lt;/strong&gt; 🚨&lt;/p&gt; &#xA;&lt;p&gt;You can find the results of Hacktoberfest 2020 for &lt;a href=&#34;https://github.com/kowainik/learn4haskell&#34;&gt;Learn4Haskell&lt;/a&gt; in the following blog post:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://kowainik.github.io/posts/hacktoberfest2020&#34;&gt;Brave New Hacktoberfest&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;It&#39;s the time of the year when thousand pull requests are starting to float in the air like a leaf on the wind 🍃&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s Hacktoberfest! And we are happy to be part of this fantastic event.&lt;/p&gt; &#xA;&lt;p&gt;Usually, people contribute to projects within the communities they spend most of their time already and don&#39;t try to go out of those boundaries. But why not use this time to learn something challenging, something fresh, something that you never had time for?&lt;/p&gt; &#xA;&lt;p&gt;You can get the benefits of Hacktoberfest while learning something new fascinating concepts – Functional Programming with Haskell.&lt;/p&gt; &#xA;&lt;p&gt;And we&#39;re here to help!&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4 Pull Request to get the T-Shirt or plant a tree as stands in the Hacktoberfest rules.&lt;/li&gt; &#xA; &lt;li&gt;4 Pull Request to learn to program in Haskell.&lt;/li&gt; &#xA; &lt;li&gt;4 Pull Request to blow your mind.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#what-is-learn4haskell&#34;&gt;What is Learn4Haskell&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#course-plan&#34;&gt;Course Plan&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#goals&#34;&gt;Goals&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#who-can-participate&#34;&gt;Who can participate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#what-you-will-get-from-this-course&#34;&gt;What you will get from this course&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-to-get-started&#34;&gt;How to get started&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#installing-haskell&#34;&gt;Installing Haskell&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#haskell-ide&#34;&gt;Haskell IDE&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-to-develop&#34;&gt;How to develop&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#who-we-are&#34;&gt;Who we are&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#how-can-you-help&#34;&gt;How can you help&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is Learn4Haskell&lt;/h2&gt; &#xA;&lt;p&gt;Learn4Haskell is a GitHub-located course that will get you into the Haskell Functional Programming world in just 4 Pull Requests.&lt;/p&gt; &#xA;&lt;p&gt;This course is organised as a coding project. So you can complete the course without needing to exit your editor.&lt;/p&gt; &#xA;&lt;p&gt;This works in the following way. When you decide to start the project, all you need to do is to fork the project. We have prepared 4 separate modules — chapters. Each part contains educational material and lots of examples that we provide in a simple form that doesn&#39;t require you to know anything about functional programming beforehand. Also, each chapter contains several exercises on everything that is explained by us. You can solve the tasks on your way and at the end open a PR to your fork with this chapter&#39;s solution and summon us (by shouting out our nicknames there). We would be happy to give you feedback on your progress, explain problematic concepts or just support you mentally!&lt;/p&gt; &#xA;&lt;p&gt;Each chapter contains unique information and covers different topics. We suggest going through them in order. However, if you think that some of the chapters are already familiar to you, feel free to skip onto the next one. If you would like to talk to us, you can even rely on PRs for the chapter you have questions about.&lt;/p&gt; &#xA;&lt;p&gt;Chapters are stuffed with information but are aimed to be completed without additional resources. You may spend an evening per chapter, but we swear it&#39;s worth it!&lt;/p&gt; &#xA;&lt;p&gt;At the end of the course, you should be able to independently create and read basic Haskell code and understand Monads and other famous concepts of Functional Programming.&lt;/p&gt; &#xA;&lt;h3&gt;Course Plan&lt;/h3&gt; &#xA;&lt;p&gt;Here is a more concrete plan of the mystical 4 Chapters we prepared for you. These are the highlights of each part.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter One&lt;/strong&gt; – What is Haskell, what are its particularities, basic Haskell syntax, functions, types, expressions.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Two&lt;/strong&gt; – FP concepts in the language, immutability, pattern matching, recursion, polymorphism, laziness, Higher-ordered functions, partial applications, eta-reduction.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Three&lt;/strong&gt; – Focus on Types. Type aliases, ADTs, Product types and Records, Sum types and Enumerations, Newtypes, Typeclasses.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Chapter Four&lt;/strong&gt; – Kinds. Three monsters of functional programming: Functor, Applicative, Monad.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Goals&lt;/h2&gt; &#xA;&lt;p&gt;We created the Learn4Haskell project in pursuit of the following goals:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Help others to learn Haskell&lt;/li&gt; &#xA; &lt;li&gt;Give a beginner-friendly and self-consistent course with theory and practice in the same place&lt;/li&gt; &#xA; &lt;li&gt;Explain Haskell topics before each task, but strive to be concise and useful at the same time. It&#39;s a tough balance!&lt;/li&gt; &#xA; &lt;li&gt;Help people who want to participate in Hacktoberfest and Open-Source, but also want to learn new things during this process&lt;/li&gt; &#xA; &lt;li&gt;Provide review and feedback on solutions, so people are never alone in this challenging yet exciting journey!&lt;/li&gt; &#xA; &lt;li&gt;Give people who completed this course all the necessary understandings to be able to work with basic projects that use standard features. We also intend that you have a strong basis on what they should do to be able to continue their functional programming studies.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Who can participate&lt;/h2&gt; &#xA;&lt;p&gt;Everyone!&lt;/p&gt; &#xA;&lt;p&gt;We welcome everyone and would be happy to assist you in this journey!&lt;/p&gt; &#xA;&lt;p&gt;The course is intended for people who don&#39;t know Haskell or know only language basics, though.&lt;/p&gt; &#xA;&lt;p&gt;If you are already an experienced Haskell developer and have come here for learning advanced topics, this course might not be that for you. But you still can help us! Your feedback and suggestions would be helpful for us as well as for the language newcomers who decide to work with this course.&lt;/p&gt; &#xA;&lt;h2&gt;What you will get from this course&lt;/h2&gt; &#xA;&lt;p&gt;This course has many benefits upon completion. Check them out to be sure that it fits your expectations!&lt;/p&gt; &#xA;&lt;p&gt;Participation in this course would give you:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;4 Pull Requests required for Hacktoberfest completion&lt;/li&gt; &#xA; &lt;li&gt;Basic knowledge of the most functional programming language&lt;/li&gt; &#xA; &lt;li&gt;Understanding of the functional programming concepts that you would be able to use in your day-to-day life afterwards&lt;/li&gt; &#xA; &lt;li&gt;On-the-fly feedback and help from experienced Haskell developers and educators&lt;/li&gt; &#xA; &lt;li&gt;Interesting challenges&lt;/li&gt; &#xA; &lt;li&gt;Fun!&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Honestly, this seems like a pretty rad deal!&lt;/p&gt; &#xA;&lt;h2&gt;How to get started&lt;/h2&gt; &#xA;&lt;p&gt;Starting to learn Haskell with Learn4Haskell is a piece of cake!&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/getting-started-with-github/fork-a-repo&#34;&gt;Fork this repository&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;⚠&lt;/span&gt; Add the &lt;code&gt;hacktoberfest&lt;/code&gt; topic to your fork. Otherwise, &lt;a href=&#34;https://hacktoberfest.digitalocean.com/hacktoberfest-update&#34;&gt;your PRs won&#39;t count&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Enable GitHub Actions for your forked repository. &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Visit: &lt;a href=&#34;https://github.com/&#34;&gt;https://github.com/&lt;/a&gt;&amp;lt;YOUR_GITHUB_USERNAME&amp;gt;/learn4haskell/actions&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/kowainik/learn4haskell/main/#installing-haskell&#34;&gt;Install the Haskell compiler&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open the &lt;code&gt;src/Chapter1.hs&lt;/code&gt; file, and start learning and solving tasks!&lt;/li&gt; &#xA; &lt;li&gt;After you finish the first chapter (or any other chapter, or even if you are stuck in the middle), open &lt;a href=&#34;https://docs.github.com/en/free-pro-team@latest/github/collaborating-with-issues-and-pull-requests/creating-a-pull-request&#34;&gt;Pull Request&lt;/a&gt; &lt;strong&gt;to your fork&lt;/strong&gt; with the solution and mention @vrom911 and @chshersh and we would be on our way for the review.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Note, that you should open a PR for your fork of this repo, not this repo. Everyone has their solutions to the included tasks, and they don&#39;t mix together well in one repo 🙂&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;However, if you find some bugs or problems in this repo, you can open a PR to Learn4Haskell directly. We appreciate any help and feedback!&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Learn4Haskell has 4 chapters that you can walk through and submit 4 pull requests to complete the Hacktoberfest event (or just for knowledge and your enjoyment).&lt;/p&gt; &#xA;&lt;p&gt;So, you can start right now with forking. Following this we&#39;ll describe how you can install all the necessary items to be able to run this course locally.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Haskell&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re on Windows, install the &lt;code&gt;haskell-dev&lt;/code&gt; and &lt;code&gt;make&lt;/code&gt; packages &lt;a href=&#34;https://chocolatey.org/install&#34;&gt;using Chocolatey&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;choco install haskell-dev make&#xA;refreshenv&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you&#39;re on Linux or macOS, then the process is easy:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Install &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;ghcup&lt;/a&gt; and follow &lt;code&gt;ghcup&lt;/code&gt; instructions for successful installation (remember to restart your terminal afterwards to avoid an &lt;code&gt;unknown ghcup command&lt;/code&gt; error on the next step).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Install the latest version of the Haskell compiler — GHC — and the &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;Cabal&lt;/a&gt; build tool. After you install &lt;code&gt;ghcup&lt;/code&gt;, it is easy to install the rest with a few commands from your terminal&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;ghcup install ghc 8.10.4&#xA;ghcup set ghc 8.10.4&#xA;ghcup install cabal 3.2.0.0&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run &lt;code&gt;cabal update&lt;/code&gt; to fetch the latest info about Haskell packages.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Haskell IDE&lt;/h3&gt; &#xA;&lt;p&gt;If you don&#39;t have any IDE preferences, we recommend installing &lt;a href=&#34;https://code.visualstudio.com/download&#34;&gt;Visual Studio Code&lt;/a&gt; with the &lt;a href=&#34;https://marketplace.visualstudio.com/items?itemName=haskell.haskell&#34;&gt;Haskell plugin&lt;/a&gt;. The mentioned plugin would give you everything required to immediately start coding with Haskell.&lt;/p&gt; &#xA;&lt;h3&gt;Gitpod&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://gitpod.io/#https://github.com/kowainik/learn4haskell&#34;&gt;&lt;img src=&#34;https://gitpod.io/button/open-in-gitpod.svg?sanitize=true&#34; alt=&#34;Open in Gitpod&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gitpod.io/&#34;&gt;Gitpod&lt;/a&gt; is a VSCode-based Web IDE. With it, you can get a Haskell environment out-of-the-box. It&#39;s free to use up to 50 hours per month.&lt;/p&gt; &#xA;&lt;p&gt;Just prepend &lt;code&gt;gitpod.io#&lt;/code&gt; to your repo URL and you are ready to go. It will take some time to initialize the workspace for the first time it opens. It only keeps changes under &lt;code&gt;/workspace&lt;/code&gt;, and it will be deleted after a period of inactivity unless it&#39;s pinned.&lt;/p&gt; &#xA;&lt;h3&gt;How to develop&lt;/h3&gt; &#xA;&lt;p&gt;The course assumes that you install Haskell tooling (GHC and Cabal), edit code in the corresponding chapters, run GHCi (Haskell interpreter, explained in the course) from the root of this project and load your chapters to check your code. Don&#39;t worry, each chapter explains all the needed information!&lt;/p&gt; &#xA;&lt;p&gt;We also provide a Makefile with commands to test your solutions locally with the included prepared test-suite. We have also configured the CI using GitHub Actions on Learn4Haskell to check your answers at GitHub automatically!&lt;/p&gt; &#xA;&lt;p&gt;To run all tests for Chapter One:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test-chapter1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To run tests only for basic tasks for Chapter One (without the advanced tasks):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make test-chapter1-basic&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Similar commands are provided for all chapters from One to Four.&lt;/p&gt; &#xA;&lt;h2&gt;Who we are&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://vrom911.github.io/&#34;&gt;Veronika (@vrom911)&lt;/a&gt; and &lt;a href=&#34;https://kodimensional.dev/&#34;&gt;Dmitrii (@chshersh)&lt;/a&gt; are experienced Haskell developers. Together we drive this open source organisation — &lt;a href=&#34;https://kowainik.github.io/&#34;&gt;Kowainik&lt;/a&gt;. We have a lot of open source projects and libraries in Haskell that are used in the Haskell community. We are also working on a lot of tutorials and guides in Haskell and mentoring people who are keen to learn Haskell as well. Moreover, Dmitrii has a few years of experience teaching Haskell courses in the university to CS students.&lt;/p&gt; &#xA;&lt;p&gt;We are passionate about Functional Programming and Haskell in particular. But at the same time, we understand how difficult it can be to get into all these ideas on your own. That is why we&#39;ve decided to start this course to help newcomers. With the interactive learning process and live discussions we&#39;ve included, Haskell will not be that scary. We will do our best so that it especially won&#39;t be the case for you or any others participating here!&lt;/p&gt; &#xA;&lt;h2&gt;How can you help&lt;/h2&gt; &#xA;&lt;p&gt;You can help us by supporting us on Ko-Fi or via GitHub sponsorship program:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://ko-fi.com/kowainik&#34;&gt;Kowainik Ko-Fi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/vrom911&#34;&gt;Veronika Romashkina via GitHub&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/sponsors/chshersh&#34;&gt;Dmitrii Kovanikov via GitHub&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We also appreciate any feedback on our course a lot! You can submit your feedback using the following form:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.google.com/forms/d/e/1FAIpQLScBVhLxq5CgGnAfIGUE-fCoOUqeGkDY2HXzbT7KV2jjLOsmjQ/viewform&#34;&gt;Feedback Form&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>ucsd-progsys/liquid-fixpoint</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/ucsd-progsys/liquid-fixpoint</id>
    <link href="https://github.com/ucsd-progsys/liquid-fixpoint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Horn Clause Constraint Solving for Liquid Types&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Liquid Fixpoint&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://packdeps.haskellers.com/feed?needle=liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage-deps/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage-Deps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;hlint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/cabal.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/cabal.yml/badge.svg?sanitize=true&#34; alt=&#34;cabal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/stack.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/stack.yml/badge.svg?sanitize=true&#34; alt=&#34;stack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package implements a Horn-Clause/Logical Implication constraint solver used for various Liquid Types. The solver uses SMTLIB2 to implement an algorithm similar to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://users.soe.ucsc.edu/~cormac/papers/fme01.pdf&#34;&gt;Houdini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://swt.informatik.uni-freiburg.de/berit/papers/boolean-and-cartesian-....pdf&#34;&gt;Cartesian predicate abstraction&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the .cabal dependencies you require an SMTLIB2 compatible solver binary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;Z3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cvc4.github.io/&#34;&gt;CVC4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mathsat.fbk.eu/download.html&#34;&gt;MathSat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If on Windows, please make sure to place the binary and any associated DLLs somewhere in your path.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build and Install&lt;/h2&gt; &#xA;&lt;p&gt;Simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;$ cd liquid-fixpoint&#xA;$ stack install # alternatively, use `cabal install`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A reproducible Nix environment is provided as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build with:&#xA;$ nix-shell --pure --run &#34;stack build&#34;&#xA;&#xA;# Test with:&#xA;$ nix-shell --pure --run &#34;stack test&#34;&#xA;&#xA;# Run with:&#xA;$ nix-shell --pure --run &#34;stack exec fixpoint -- tests/pos/adt.fq&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using SMTLIB-based SMT Solvers&lt;/h2&gt; &#xA;&lt;p&gt;You can use one of several SMTLIB2 compliant solvers, by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fixpoint --solver=z3 path/to/file.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, we support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Z3&#xA;* CVC4&#xA;* MathSat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&#34;Horn&#34; Format&lt;/h2&gt; &#xA;&lt;p&gt;See the examples in &lt;code&gt;tests/horn/{pos, neg}&lt;/code&gt; eg&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_sum.smt2&#34;&gt;sum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_list00.smt2&#34;&gt;list00&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/neg/ple_list03.smt2&#34;&gt;list03&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For how to write VCs &#34;by hand&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://arxiv.org/abs/2010.07763&#34;&gt;this tutorial&lt;/a&gt; with &lt;a href=&#34;https://github.com/ranjitjhala/sprite-lang&#34;&gt;accompanying code&lt;/a&gt; for an example of how to generate Horn queries.&lt;/p&gt; &#xA;&lt;p&gt;The main datatypes are described in &lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/src/Language/Fixpoint/Horn/Types.hs&#34;&gt;src/Language/Fixpoint/Horn/Types.hs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Management&lt;/h2&gt; &#xA;&lt;p&gt;It is very important that the version of Liquid Fixpoint be maintained properly.&lt;/p&gt; &#xA;&lt;p&gt;Suppose that the current version of Liquid Haskell is &lt;code&gt;A.B.C.D&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;After a release to hackage is made, if any of the components &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, or &lt;code&gt;D&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint shall be incremented by &lt;code&gt;1&lt;/code&gt;. The version of Liquid Fixpoint is now &lt;code&gt;A.B.C.(D + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time a new function or type is exported from Liquid Fixpoint, if any of the components &lt;code&gt;B&lt;/code&gt;, or &lt;code&gt;C&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;C&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;D&lt;/code&gt; component shall stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.B.(C + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time the signature of an exported function or type is changed, or an exported function or type is removed (this includes functions or types that Liquid Fixpoint re-exports from its own dependencies), if the &lt;code&gt;B&lt;/code&gt; component is missing, it shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;B&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; components shall be stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.(B + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;A&lt;/code&gt; component shall be updated at the sole discretion of the project owners.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use the &lt;a href=&#34;https://hackage.haskell.org/package/bumper&#34;&gt;Bumper&lt;/a&gt; utility to manage the versioning of Liquid Fixpoint. Bumper will automatically do the correct update to the cabal file. Additionally, it will update any packages that you have the source for that depend on Liquid Fixpoint.&lt;/p&gt; &#xA;&lt;p&gt;To update Liquid Fixpoint and Liquid Haskell, first clone Liquid Haskell and Liquid Fixpoint to a common location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ucsd-progsys/liquidhaskell.git&#xA;git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper -3 liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will update the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint. If necessary, this will update the &lt;code&gt;Build-Depends&lt;/code&gt; of Liquid Haskell. If the &lt;code&gt;Build-Depends&lt;/code&gt; was updated, Liquid Haskell&#39;s &lt;code&gt;D&lt;/code&gt; component will be incremented.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;C&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --minor liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;B&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --major liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell&lt;/p&gt; &#xA;&lt;h2&gt;SMTLIB2 Interface&lt;/h2&gt; &#xA;&lt;p&gt;There is a new SMTLIB2 interface directly from Haskell:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language.Fixpoint.SmtLib2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;tests/smt2/{Smt.hs, foo.smt2}&lt;/code&gt; for an example of how to use it.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line for SMT2 interface&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;.smt2&lt;/code&gt; interface from the command-line as follows:&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--stdin&lt;/code&gt; to read files from &lt;code&gt;stdin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint --stdin&#xA;&#xA;Liquid-Fixpoint Copyright 2013-21 Regents of the University of California.&#xA;All Rights Reserved.&#xA;&#xA;Working 166% [===============================================================]&#xA;Safe ( 2  constraints checked)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-q&lt;/code&gt; to disable all output (banner, progress bar etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint -q --stdin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--json&lt;/code&gt; to get the output as a JSON object (rendered to &lt;code&gt;stdout&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/abs02-re.smt2 | stack exec -- fixpoint -q --json --stdin&#xA;{&#34;contents&#34;:{&#34;numIter&#34;:3,&#34;numCstr&#34;:3,&#34;numChck&#34;:3,&#34;numBrkt&#34;:3,&#34;numVald&#34;:3},&#34;tag&#34;:&#34;Safe&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;--higherorder&lt;/code&gt; allows higher order binders into the environment&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--extsolver&lt;/code&gt; runs the &lt;strong&gt;deprecated&lt;/strong&gt; external solver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--parts&lt;/code&gt; Partitions an &lt;code&gt;FInfo&lt;/code&gt; into a &lt;code&gt;[FInfo]&lt;/code&gt; and emits a bunch of files. So:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ fixpoint -n -p path/to/foo.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will now emit files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.1.fq&#xA;path/to/.liquid/foo.2.fq&#xA;. . .&#xA;path/to/.liquid/foo.k.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and also a dot file with the constraint dependency graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.fq.dot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FInfo Invariants&lt;/h2&gt; &#xA;&lt;h3&gt;Binders&lt;/h3&gt; &#xA;&lt;p&gt;This is the field&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , bs       :: !BindEnv         -- ^ Bind  |-&amp;gt; (Symbol, SortedReft)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in the .fq files as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bind 1 x : ...&#xA;bind 2 y : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; must be a distinct &lt;code&gt;Int&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; that appears in a constraint environment i.e. inside &lt;em&gt;any&lt;/em&gt; &lt;code&gt;IBindEnv&lt;/code&gt; must appear inside the &lt;code&gt;bs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environments&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint&#39;s environment is a set of &lt;code&gt;BindId&lt;/code&gt; which must be defined in the &lt;code&gt;bindInfo&lt;/code&gt;. Furthermore&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint should not have &lt;em&gt;duplicate&lt;/em&gt; names in its environment, that is if you have two binders&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  bind 1 x : ...&#xA;  bind 12 x : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then a single &lt;code&gt;IBindEnv&lt;/code&gt; should only mention &lt;em&gt;at most&lt;/em&gt; one of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;12&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is also a &#34;tree-shape&#34; property that its a bit hard to describe ... TODO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LHS&lt;/h3&gt; &#xA;&lt;p&gt;Each &lt;code&gt;slhs&lt;/code&gt; of a constraint is a &lt;code&gt;SortedReft&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;SortredReft&lt;/code&gt; is basically a &lt;code&gt;Reft&lt;/code&gt; -- a logical predicate. The important bit is that a &lt;code&gt;KVar&lt;/code&gt; i.e. terms of the formalized&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;     $k1[x1:=y1][x2:=y2]...[xn:=yn]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is represented in the &lt;code&gt;Expr&lt;/code&gt; type as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  | PKVar  !KVar !Subst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;must appear &lt;em&gt;only&lt;/em&gt; at the &lt;strong&gt;top-level&lt;/strong&gt; that is not under &lt;em&gt;any&lt;/em&gt; other operators, i.e. not as a sub-&lt;code&gt;Expr&lt;/code&gt; of other expressions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is basically a predicate that needs to be &#34;well sorted&#34; with respect to the &lt;code&gt;BindId&lt;/code&gt;, intuitively&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y:int |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is well sorted. but&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int  |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not, and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y: list |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not. The exact definition is formalized in &lt;code&gt;Language.Fixpoint.SortCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RHS&lt;/h3&gt; &#xA;&lt;p&gt;Similarly each &lt;code&gt;rhs&lt;/code&gt; of a &lt;code&gt;SubC&lt;/code&gt; must either be a single &lt;code&gt;$k[...]&lt;/code&gt; or an plain &lt;code&gt;$k&lt;/code&gt;-free &lt;code&gt;Expr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Global vs. Distinct Literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , gLits    :: !(SEnv Sort)               -- ^ Global Constant symbols&#xA;     , dLits    :: !(SEnv Sort)       &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;global&lt;/em&gt; literals &lt;code&gt;gLits&lt;/code&gt; are symbols that are in scope &lt;em&gt;everywhere&lt;/em&gt; i.e. need not be separately defined in individual environments. These include things like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;measure&lt;/em&gt; functions &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;data constructor&lt;/em&gt; literals &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Suppose you have an enumerated type like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data Day = Sun | Mon | Tue | Wed | ... | Sat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can model the above values in fixpoint as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;constant lit#Sun : Day&#xA;constant lit#Mon : Day&#xA;constant lit#Tue : Day&#xA;constant lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;distinct&lt;/em&gt; literals are a subset of the above where we want to tell the SMT solver that the values are &lt;em&gt;distinct&lt;/em&gt; i.e. &lt;strong&gt;not equal&lt;/strong&gt; to each other, for example, you can &lt;strong&gt;additionally&lt;/strong&gt; specify this as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;distinct lit#Sun : Day&#xA;distinct lit#Mon : Day&#xA;distinct lit#Tue : Day&#xA;distinct lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above two are represented programmatically by generating suitable &lt;code&gt;Symbol&lt;/code&gt; values (for the literals see &lt;code&gt;litSymbol&lt;/code&gt;) and &lt;code&gt;Sort&lt;/code&gt; values as &lt;code&gt;FTC FTycon&lt;/code&gt; and then making an &lt;code&gt;SEnv&lt;/code&gt; from the &lt;code&gt;[(Symbol, Sort)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sorts&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What&#39;s the difference between an FTC and an FObj?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In early versions of fixpoint, there was support for three sorts for expressions (&lt;code&gt;Expr&lt;/code&gt;) that were sent to the SMT solver:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;other&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;code&gt;FObj&lt;/code&gt; sort was introduced to represent essentially &lt;em&gt;all&lt;/em&gt; non-int and non-bool values (e.g. tuples, lists, trees, pointers...)&lt;/p&gt; &#xA;&lt;p&gt;However, we later realized that it is valuable to keep &lt;em&gt;more&lt;/em&gt; precise information for &lt;code&gt;Expr&lt;/code&gt;s and so we introduced the &lt;code&gt;FTC&lt;/code&gt; (fixpoint type constructor), which lets us represent the above respectively as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;String&#34; []&lt;/code&gt; -- in Haskell &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;Tuple&#34; [FInt, Bool]&lt;/code&gt; -- in Haskell &lt;code&gt;(Int, Bool)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;List&#34; [FTC &#34;List&#34; [FInt]]&lt;/code&gt; -- in Haskell &lt;code&gt;[[Int]]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is a comment that says FObj&#39;s are uninterpretted types; so probably a type the SMT solver doesn&#39;t know about? Does that then make FTC types that the SMT solver does know about (bools, ints, lists, sets, etc.)?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The SMT solver knows about &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; (also &lt;code&gt;bitvector&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;) but &lt;em&gt;all&lt;/em&gt; other types are &lt;em&gt;currently&lt;/em&gt; represented as plain &lt;code&gt;Int&lt;/code&gt; inside the SMT solver. However, we &lt;em&gt;will be&lt;/em&gt; changing this to make use of SMT support for ADTs ...&lt;/p&gt; &#xA;&lt;p&gt;To sum up: the &lt;code&gt;FObj&lt;/code&gt; is there for historical reasons; it has been subsumed by &lt;code&gt;FTC&lt;/code&gt; which is what I recomend you use. However &lt;code&gt;FObj&lt;/code&gt; is there if you want a simple &#34;unitype&#34; / &#34;any&#34; type for terms that are not &#34;interpreted&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Qualifier Patterns&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as (mon . $1) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatPrefix &#34;mon&#34; 1, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as ($1 . mon) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatSuffix 1 &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as mon : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatExact &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatNone, qpSort = FInt}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>liquidhaskell/liquid-base</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/liquidhaskell/liquid-base</id>
    <link href="https://github.com/liquidhaskell/liquid-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drop-in replacement for the base library, to use with Liquid Haskell&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;liquid-base&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/liquid-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/liquid-base.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/liquidhaskell/liquid-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/liquidhaskell/liquid-base/develop.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a drop-in replacement for the Haskell &lt;a href=&#34;https://hackage.haskell.org/package/base&#34;&gt;base&lt;/a&gt; library, meant to be used with &lt;a href=&#34;http://ucsd-progsys.github.io/liquidhaskell/&#34;&gt;Liquid Haskell&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This package simply re-exports all the &lt;code&gt;base&lt;/code&gt; modules, but it also provides LH refinements for some of them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bodigrim/text-rope</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/Bodigrim/text-rope</id>
    <link href="https://github.com/Bodigrim/text-rope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A wrapper around Text for fast line/column navigation and logarithmic concatenation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;text-rope &lt;a href=&#34;https://hackage.haskell.org/package/text-rope&#34;&gt;&lt;img src=&#34;http://img.shields.io/hackage/v/text-rope.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/text-rope&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text-rope/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/text-rope&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text-rope/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A wrapper around &lt;code&gt;Text&lt;/code&gt; for fast line/column navigation and logarithmic concatenation.&lt;/p&gt; &#xA;&lt;p&gt;Here are benchmarks for 1000 edits over 70K text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      3.09 ms ±  94 μs&#xA;    yi-rope:&#xA;      49.4 ms ± 1.4 ms, 15.98x&#xA;  UTF-16&#xA;    text-rope:&#xA;      3.09 ms ± 106 μs&#xA;    rope-utf16-splay:&#xA;      10.6 ms ± 337 μs, 3.44x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      3.04 ms ± 112 μs&#xA;    core-text:&#xA;      14.0 ms ± 297 μs, 4.59x&#xA;    yi-rope:&#xA;      6.25 ms ± 102 μs, 2.06x&#xA;  UTF-16&#xA;    text-rope:&#xA;      3.40 ms ±  70 μs&#xA;    rope-utf16-splay:&#xA;      8.92 ms ± 169 μs, 2.62x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 10000 edits over 700K text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      62.9 ms ± 4.2 ms&#xA;    yi-rope:&#xA;      568  ms ±  31 ms, 9.04x&#xA;  UTF-16&#xA;    text-rope:&#xA;      61.0 ms ± 3.9 ms&#xA;    rope-utf16-splay:&#xA;      325  ms ±  13 ms, 5.32x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      59.6 ms ± 3.8 ms&#xA;    core-text:&#xA;      209  ms ±  15 ms, 3.50x&#xA;    yi-rope:&#xA;      105  ms ± 7.4 ms, 1.76x&#xA;  UTF-16&#xA;    text-rope:&#xA;      63.6 ms ± 5.3 ms&#xA;    rope-utf16-splay:&#xA;      230  ms ± 9.0 ms, 3.62x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 100000 edits over 7M text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      963  ms ±  43 ms&#xA;    yi-rope:&#xA;      6.379 s ± 138 ms, 6.62x&#xA;  UTF-16&#xA;    text-rope:&#xA;      988  ms ±  19 ms&#xA;    rope-utf16-splay: T&#xA;      57.408 s ± 4.24 s, 58.12x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      1.014 s ±  70 ms&#xA;    core-text:&#xA;      3.008 s ± 138 ms, 2.97x&#xA;    yi-rope:&#xA;      1.716 s ±  76 ms, 1.69x&#xA;  UTF-16&#xA;    text-rope:&#xA;      1.065 s ±  53 ms&#xA;    rope-utf16-splay:&#xA;      38.852 s ± 568 ms, 36.49x&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>SFML-haskell/SFML</title>
    <updated>2022-06-01T01:42:47Z</updated>
    <id>tag:github.com,2022-06-01:/SFML-haskell/SFML</id>
    <link href="https://github.com/SFML-haskell/SFML" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Low level Haskell bindings for SFML 2.x&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;SFML&lt;/h1&gt; &#xA;&lt;p&gt;Low level Haskell bindings for SFML 2.x&lt;/p&gt; &#xA;&lt;h3&gt;What&#39;s been wrapped:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Window module&lt;/li&gt; &#xA; &lt;li&gt;System module&lt;/li&gt; &#xA; &lt;li&gt;Graphics module&lt;/li&gt; &#xA; &lt;li&gt;Audio module&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What&#39;s been left out:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Threading and networking, since Haskell has better alternatives&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;What&#39;s been tested:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Window module, partially&lt;/li&gt; &#xA; &lt;li&gt;System module, all but vectors&lt;/li&gt; &#xA; &lt;li&gt;Graphics module, partially&lt;/li&gt; &#xA; &lt;li&gt;Audio module, partially&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Where it&#39;s been tested:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Arch Linux 32-bit&lt;/li&gt; &#xA; &lt;li&gt;Ubuntu Linux 32-bit&lt;/li&gt; &#xA; &lt;li&gt;Windows 7 32-bit&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation (brief)&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Download latest CSFML 2.x&lt;/li&gt; &#xA; &lt;li&gt;Make sure your compiler can find CSFML&#39;s headers and libraries, then run:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/SFML-haskell/SFML.git&#xA;$ cd SFML&#xA;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For detailed installation instructions, please head to the &lt;a href=&#34;https://github.com/jeannekamikaze/SFML/wiki&#34;&gt;wiki&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>