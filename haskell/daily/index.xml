<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2025-08-11T01:33:34Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>fuzzypixelz/hustle</title>
    <updated>2025-08-11T01:33:34Z</updated>
    <id>tag:github.com,2025-08-11:/fuzzypixelz/hustle</id>
    <link href="https://github.com/fuzzypixelz/hustle" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Haskell implementation of the KDL Document Language&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hustle&lt;/h1&gt; &#xA;&lt;p&gt;A Haskell library for the &lt;a href=&#34;https://github.com/kdl-org/kdl/raw/main/SPEC.md&#34;&gt;KDL&lt;/a&gt; document language, featuring a Parser and a Formatter.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;h3&gt;Library&lt;/h3&gt; &#xA;&lt;p&gt;This is the source code for the provided &lt;code&gt;hustle-fmt&lt;/code&gt; program, it reformats a KDL document received through &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;main :: IO ()&#xA;main = do&#xA;  input &amp;lt;- T.pack &amp;lt;$&amp;gt; getContents&#xA;  case parse document &#34;&#34; input of&#xA;    Left  e -&amp;gt; putStrLn (errorBundlePretty e)&#xA;    Right d -&amp;gt; print d&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;code&gt;KDL&lt;/code&gt; module hence exports &lt;code&gt;document :: Parser Document&lt;/code&gt;, which you can run using &lt;a href=&#34;https://hackage.haskell.org/package/megaparsec&#34;&gt;Megaparsec&lt;/a&gt;&#39;s &lt;code&gt;parse&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Moreover, &lt;code&gt;Document&lt;/code&gt;&#39;s &lt;code&gt;show&lt;/code&gt; class instance is backed by &lt;a href=&#34;https://hackage.haskell.org/package/prettyprinter&#34;&gt;Prettyprinter&lt;/a&gt;&#39;s &lt;code&gt;Pretty&lt;/code&gt; type class, this allows for control over the document&#39;s layout options and using the various available rendering backends.&lt;/p&gt; &#xA;&lt;p&gt;A &lt;code&gt;Document&lt;/code&gt; is simply a list of &lt;code&gt;Nodes&lt;/code&gt;s:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;data Node = Node&#xA;  { nodeAnn      :: Maybe Identifier&#xA;  , nodeName     :: Identifier&#xA;  , nodeArgs     :: [Value]&#xA;  , nodeProps    :: Map Identifier Value&#xA;  , nodeChildren :: [Node]&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The following is an example of a KDL document and its resulting Haskell representation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-kdl&#34;&gt;author &#34;Alex Monad&#34; email=&#34;alex@example.com&#34; active=true&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-hs&#34;&gt;Document&#xA;  { docNodes =&#xA;    [ Node&#xA;      { nodeAnn      = Nothing&#xA;      , nodeName     = Identifier &#34;author&#34;&#xA;      , nodeArgs     = [ Value { valueAnn = Nothing&#xA;                               , valueExp = StringValue &#34;Alex Monad&#34; } ]&#xA;      , nodeProps    = fromList&#xA;        [ ( Identifier &#34;active&#34;&#xA;          , Value { valueAnn = Nothing&#xA;                  , valueExp = BooleanValue True } )&#xA;        , ( Identifier &#34;email&#34;&#xA;          , Value { valueAnn = Nothing&#xA;                  , valueExp = StringValue &#34;alex@example.com&#34; } ) ]&#xA;      , nodeChildren = [] } ] }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;This is a Cabal project, you can build it using &lt;code&gt;cabal build&lt;/code&gt;, the test suite is described in the &lt;code&gt;test/Spec.hs&lt;/code&gt; file and can be run with &lt;code&gt;cabal test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Dependencies&lt;/h4&gt; &#xA;&lt;p&gt;Aside from &lt;code&gt;Megaparsec&lt;/code&gt; and &lt;code&gt;Prettyprinter&lt;/code&gt;, this library makes use of:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/text&#34;&gt;text&lt;/a&gt;: An efficient packed Unicode text type.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/scientific&#34;&gt;scientific&lt;/a&gt;: Convenience representation of numbers using scientific notation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackage.haskell.org/package/containers&#34;&gt;containers&lt;/a&gt;: Provides the &lt;code&gt;Map&lt;/code&gt; data type used for representing a node&#39;s set of properties.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;As it stands, this library is not anywhere near a battle-tested trusty tool; this is further aggravated by the ongoing discussions on the &lt;a href=&#34;https://github.com/kdl-org/kdl/issues&#34;&gt;specification&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;More extensive Unit/Property-based tests.&lt;/li&gt; &#xA; &lt;li&gt;Full support for the reserved &lt;a href=&#34;https://github.com/kdl-org/kdl/raw/main/SPEC.md#type-annotation&#34;&gt;Type Annotations&lt;/a&gt; in the specification.&lt;/li&gt; &#xA; &lt;li&gt;Support for the &lt;a href=&#34;https://github.com/kdl-org/kdl/raw/main/SPEC.md&#34;&gt;Query&lt;/a&gt; and &lt;a href=&#34;https://github.com/kdl-org/kdl/raw/main/SCHEMA-SPEC.md&#34;&gt;Schema&lt;/a&gt; specifications.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Feel free to open issues and/or pull requests on &lt;a href=&#34;https://github.com/fuzzypixelz/hustle&#34;&gt;fuzzypixelz/hustle&lt;/a&gt;; the kdl-org &lt;a href=&#34;https://github.com/kdl-org/kdl/raw/main/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; applies.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;As an uninitiated Haskell programmer, I can happily bear witness to the friendliness of the Haskell community. I may have asked a bit too many questions on the Libera IRC &lt;code&gt;#haskell&lt;/code&gt; channel, but the people over there never failed to deliver crystal clear explanations; thank you.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Hustle is open-source software under the terms of the permissive &lt;a href=&#34;https://opensource.org/licenses/MIT&#34;&gt;MIT License&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>