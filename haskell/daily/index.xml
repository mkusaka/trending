<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-20T01:36:02Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tweag/crem</title>
    <updated>2023-03-20T01:36:02Z</updated>
    <id>tag:github.com,2023-03-20:/tweag/crem</id>
    <link href="https://github.com/tweag/crem" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compositional Representable Executable Machines&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://github.com/tweag/crem&#34;&gt;crem&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;img src=&#34;https://raw.githubusercontent.com/tweag/crem/main/logo/crem-transparent.png&#34; width=&#34;200&#34;&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://github.com/tweag/crem/actions/workflows/ci.yml/badge.svg?sanitize=true&#34; alt=&#34;CI status&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;crem&lt;/code&gt; stands for &lt;strong&gt;c&lt;/strong&gt;ompositional &lt;strong&gt;r&lt;/strong&gt;epresentable &lt;strong&gt;e&lt;/strong&gt;xecutable &lt;strong&gt;m&lt;/strong&gt;achines.&lt;/p&gt; &#xA;&lt;p&gt;It allows defining state machines (Mealy machines in fact), composing them to build bigger machines out of smaller ones and then running them and drawing their flow and their state space.&lt;/p&gt; &#xA;&lt;h2&gt;What can you do with &lt;code&gt;crem&lt;/code&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;Defining state machines&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;crem&lt;/code&gt; allows you to define state machines so that you can enforce which state transitions are actually allowed by your machine.&lt;/p&gt; &#xA;&lt;p&gt;If you try to implement a machine by running a transition which is not allowed, you will get a compilation error.&lt;/p&gt; &#xA;&lt;p&gt;More details on how to define a machine at &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/docs/how-to-create-a-machine.md&#34;&gt;How to create a machine&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Composing state machines&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;crem&lt;/code&gt; allows you to compose machines together to build more complex ones, proving a compositional language to implement state machines.&lt;/p&gt; &#xA;&lt;p&gt;More details on how to compose machines at &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/docs/how-to-compose-machines.md&#34;&gt;How to compose machines&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Rendering a state machine&lt;/h3&gt; &#xA;&lt;p&gt;Thanks to the information on the allowed transitions &lt;code&gt;crem&lt;/code&gt; collects when you define a machine, it is able to produce a graphical representation of the flow and the state space of your machine.&lt;/p&gt; &#xA;&lt;p&gt;One example of such an output is&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://mermaid.ink/svg/pako:eNqlVF1PwjAU_SvkPmkyCGCBbQ8mCvqkxkj0wSwhzXad1a4lXUdAsv9u9-HcCMgMfepOz73n3PbubsGXAYILsaYaZ4yGikbd1dATHbNysEPDUGGY7bYFnK0KXDzIGdX0BZXG9b7zqeQcfY3Bc4yqJfVOUjFDTRmPb5mK9eGQJ_SRrTCYKgyYvk4U0iQTORJWKV1x_renenmdbvfyxMqa1EMJ29ffLvGpt7TfzyH3R--0hZ1_5E7rzbqUnPmbeqcWyOLsvMH-bepMqOAUJ2WGhn5DQckPY4VJ0VCp0MWciZDjYwXs8bqjXlHrOpEvhU91XaSEdmupOcrSlSywIEIVURaY3ztP4oF-xwg9cM02oOrTA0-khpcsA6N4Y95CKnDfKI_RAppoOd8IH1ytEvwhlSOiYi2peJWy8Q3uFtbgkv6oN7ZtZ0xscjEZWbABdziY9IjjODaZkMFw0HdIasFXHt_vGQrmFu6LkZRPpvQbS36R_g&#34; alt=&#34;risk manager flow&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;More details on how to render a machine at &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/docs/how-to-render-a-machine.md&#34;&gt;How to render a machine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Running a machine&lt;/h3&gt; &#xA;&lt;p&gt;Last but not the least, you can also execute a machine, providing inputs to it and receiving the emitted outputs.&lt;/p&gt; &#xA;&lt;p&gt;More details on how to run a machine at &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/docs/how-to-run-a-machine.md&#34;&gt;How to run a machine&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Want to know more?&lt;/h3&gt; &#xA;&lt;p&gt;Further documentation can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/docs&#34;&gt;docs&lt;/a&gt; folder.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/examples&#34;&gt;examples&lt;/a&gt; folder contains a lot of examples, from simple machines to complex ones describing entire workflows.&lt;/p&gt; &#xA;&lt;p&gt;I would recommend to check:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/examples/Crem/Example/TwoSwitchesGate.lhs&#34;&gt;TwoSwitchesGate.lhs&lt;/a&gt; if you want to see all the code which is needed to use the library with a quite detailed explanation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/examples/Crem/Example/RiskManager/&#34;&gt;RiskManager&lt;/a&gt; if you want to see how to use &lt;code&gt;crem&lt;/code&gt; to &lt;a href=&#34;http://marcosh.github.io/post/2021/10/27/ddd-state-machines.html&#34;&gt;model your domain using state machines&lt;/a&gt; following the ideas coming from Domain Driven Design.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/examples/Crem/Example/Uno.hs&#34;&gt;Uno.hs&lt;/a&gt; if you want to see how to structure a card game like &lt;a href=&#34;https://en.wikipedia.org/wiki/Uno_(card_game)&#34;&gt;Uno&lt;/a&gt;, with an implementation ported from &lt;a href=&#34;https://github.com/thinkbeforecoding/UnoCore/raw/solution/Uno/Game.fs&#34;&gt;UnoCore&lt;/a&gt; by &lt;a href=&#34;https://functional.cafe/@thinkb4coding@mastodon.social&#34;&gt;@thinkb4coding@mastodon.social&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Be sure to check out also the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/spec&#34;&gt;spec&lt;/a&gt; folder, where all the tests of the application are included, to see in practice what you can do with &lt;code&gt;crem&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;This is a Haskell Cabal project that uses Nix for development. Nix is optional but recommended.&lt;/p&gt; &#xA;&lt;h3&gt;environment&lt;/h3&gt; &#xA;&lt;p&gt;A Nix shell is available with all the required tools. To enter the shell, issue&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# default GHC&#xA;nix develop&#xA;&#xA;# custom GHC&#xA;nix develop .#ghc90&#xA;nix develop .#ghc92&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, without flakes:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# default GHC&#xA;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;GHC version&lt;/h3&gt; &#xA;&lt;p&gt;The project has a default GHC version that is specified in the flake. At the moment that version is 9.0, because the HLS plugin Wingman &lt;a href=&#34;https://github.com/haskell/haskell-language-server/issues/2971&#34;&gt;currently only builds up to this version&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It is also possible to use other GHC versions to build the project and enter development shells. This allows us to easily test multiple versions.&lt;/p&gt; &#xA;&lt;h3&gt;Building&lt;/h3&gt; &#xA;&lt;p&gt;In a development shell, you can simply build the project with Cabal:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This provides us fast incremental builds, ease of debugging, etc.&lt;/p&gt; &#xA;&lt;p&gt;Inside the development shell, you can also use the commands&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;# just build the project&#xA;build-watch&#xA;&#xA;# execute also the tests&#xA;test-watch&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Haddock documentation&lt;/h3&gt; &#xA;&lt;p&gt;You can generate and see the [Haddock] documentation by running&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;cabal haddock --open&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Code formatting&lt;/h3&gt; &#xA;&lt;p&gt;Code is formatted using &lt;a href=&#34;https://github.com/fourmolu/fourmolu&#34;&gt;fourmolu&lt;/a&gt; version 0.10.1.0.&lt;/p&gt; &#xA;&lt;h3&gt;Cabal flags&lt;/h3&gt; &#xA;&lt;p&gt;We have a &lt;code&gt;cabal&lt;/code&gt; flag called &lt;code&gt;errors&lt;/code&gt; which allows enabling &lt;code&gt;-Werror&lt;/code&gt;. It has a default of &lt;code&gt;False&lt;/code&gt;, so that warning are not turned into errors.&lt;/p&gt; &#xA;&lt;p&gt;In development and CI we use the flag &lt;code&gt;-f errors&lt;/code&gt; so that we can avoid any warning in the library code.&lt;/p&gt; &#xA;&lt;h3&gt;Changelog&lt;/h3&gt; &#xA;&lt;p&gt;All changes are tracked in the &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/CHANGELOG.md&#34;&gt;&lt;code&gt;Changelog&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Project setup&lt;/h2&gt; &#xA;&lt;p&gt;You can find more details on the project setup on &lt;a href=&#34;https://raw.githubusercontent.com/tweag/crem/main/Setup.md&#34;&gt;Setup.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Known limitations&lt;/h2&gt; &#xA;&lt;p&gt;The project is still in its early stage and not everything is crafted to perfection.&lt;/p&gt; &#xA;&lt;p&gt;Some known limitations to the current state of the project are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;crem&lt;/code&gt; has not been tested on huge state machines. Compilation times might grow very rapidly.&lt;/li&gt; &#xA; &lt;li&gt;the topologies which &lt;code&gt;crem&lt;/code&gt; allows you to define need to be finite, and not particularly big, either. For example, it is not feasible to use &lt;code&gt;Int&lt;/code&gt; as the type of vertices for a topology.&lt;/li&gt; &#xA; &lt;li&gt;in its current state, the &lt;code&gt;StateMachine&lt;/code&gt; type is not extensible. It has a predefined set of constructors, but maybe there are more which make sense and are not present yet.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Moreover, for current bugs and feature requests, you can check the &lt;a href=&#34;https://github.com/tweag/crem/issues&#34;&gt;open issues&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are extremely welcome. If you have any idea on how to improve the library, its code or its documentation, feel free to open an &lt;a href=&#34;https://github.com/tweag/crem/issues&#34;&gt;issue&lt;/a&gt;, create a &lt;a href=&#34;https://github.com/tweag/crem/pulls&#34;&gt;pull request&lt;/a&gt;, or just contact directly one of the maintainers.&lt;/p&gt; &#xA;&lt;h2&gt;Logo&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;crem&lt;/code&gt; logo was kindly generated by &lt;a href=&#34;https://www.craiyon.com/&#34;&gt;craiyon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;p&gt;If you want to know a bit more of &lt;code&gt;crem&lt;/code&gt; and some ideas behind it, here are some additional resources you can check out:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://marcosh.github.io/post/2021/10/27/ddd-state-machines.html&#34;&gt;Domain modelling with state machines&lt;/a&gt;, the first blog post where I started considering using composable state machines for DDD-like architectures.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=cvbOG1I6wrU&#34;&gt;Composable Haskell state machines with &lt;code&gt;crem&lt;/code&gt;&lt;/a&gt;, if you prefer a video introducing &lt;code&gt;crem&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hackmd.io/@CJO5VbycTsyzjGBytbwezQ/rkJliIjRj#/&#34;&gt;State machines with &lt;code&gt;crem&lt;/code&gt;&lt;/a&gt; the slide deck used for the above presentation.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>scarf-sh/gateway</title>
    <updated>2023-03-20T01:36:02Z</updated>
    <id>tag:github.com,2023-03-20:/scarf-sh/gateway</id>
    <link href="https://github.com/scarf-sh/gateway" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Scarf Gateway is a universal redirect layer for any digital artifact or URL, anywhere online. Scarf Gateway acts much like a customizable link shortener that also lets you serve software like Docker containers, Python packages, or anything other kind of software you distribute.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt; &lt;img src=&#34;https://raw.githubusercontent.com/scarf-sh/gateway/main/assets/gateway.svg?sanitize=true&#34; width=&#34;300&#34;&gt; &lt;img referrerpolicy=&#34;no-referrer-when-downgrade&#34; src=&#34;https://static.scarf.sh/a.png?x-pxid=55057c42-7e5c-4f06-b3c5-8745e7e0a06f&#34;&gt; &lt;/h1&gt; &#xA;&lt;p&gt;Scarf Gateway is a universal redirect layer for any digital artifact or URL, anywhere online. Scarf Gateway acts much like a customizable link shortener that also lets you serve software like Docker containers, Python packages, or anything other kind of software you distribute. Host your Docker containers, NPM packages, PyPI packages, your binaries, and more, all from the same place. Scarf Gateway also makes it easy to switch between different registries without disrupting your public endpoints, allowing for a more flexible package distribution system that is decoupled from where your artifacts are hosted.&lt;/p&gt; &#xA;&lt;p&gt;When requests are made to Scarf Gateway, the traffic is automatically redirected to the configured location, while ensuring seamless compatibility with popular package managers, container runtimes, and HTTP clients.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Serve container pulls from Docker Hub, GHCR, etc via your domain&#xA;docker pull yourdomain.com/your-namespace/your-image&#xA;# Redirect Python package downloads PyPI, etc via your domain&#xA;pip install --extra-index-url yourdomain.com your-python-package&#xA;# Redirect HTTP requests, file downloads, etc to anywhere through your domain&#xA;wget yourdomain.com/linux/v1.2.0/your-tarball.tgz&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scarf Gateway is a core service that &lt;a href=&#34;https://scarf.sh&#34;&gt;Scarf&lt;/a&gt; runs internally. Scarf hosts a robust, globally distributed Gateway service, and augments it with extra functionality including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;A web dashboard for managing your package configuration&lt;/li&gt; &#xA; &lt;li&gt;Robust analytics, data visualization, export, etc.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Scarf Gateway natively supports Docker/OCI Containers, Python packages, NPM packages, and any other file, URL, or URL template.&lt;/p&gt; &#xA;&lt;h2&gt;Building the project&lt;/h2&gt; &#xA;&lt;p&gt;Make sure you have configured:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Haskell GHC 9.4.4&lt;/li&gt; &#xA; &lt;li&gt;Cabal 3.8.1.0&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, this project uses &lt;a href=&#34;https://nixos.wiki/wiki/Flakes&#34;&gt;Nix Flakes&lt;/a&gt;. The Gateway is set as the default package. So to build:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To use Scarf Gateway, you should first create a manifest with a set of redirection rules. For example:&lt;/p&gt; &#xA;&lt;p&gt;my-manifest.json&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;rules&#34;: [&#xA;    {&#xA;      &#34;repository-name&#34;: &#34;library/hello-world&#34;,&#xA;      &#34;package-id&#34;: &#34;aaf2ec15-5244-484b-845a-ffd559e5f802&#34;,&#xA;      &#34;domain&#34;: &#34;testorg.docker.scarf.sh&#34;,&#xA;      &#34;registry&#34;: &#34;registry-1.docker.io&#34;,&#xA;      &#34;type&#34;: &#34;docker-v1&#34;&#xA;     }&#xA;  ]&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, just run the gateway using the manifest above:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scarf-gateway --manifest ./my-manifest.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Now gateway is running at port 8081. You can pull docker images with &lt;code&gt;docker pull localhost:8081/hello-world&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Gateway Rules&lt;/h2&gt; &#xA;&lt;p&gt;There are different manifest rules for docker, file, and python packages. The rule is composed by some basic properties:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;type&lt;/code&gt; - It can be &lt;code&gt;docker-v1&lt;/code&gt; for docker images, &lt;code&gt;python-v1&lt;/code&gt; for python packages, and &lt;code&gt;file-v1&lt;/code&gt; for any kind of files or executable.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package-id&lt;/code&gt; - A unique identifier for the package. It can be any string from your system.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;domain&lt;/code&gt; - A custom domain through where the package is served. Domains can be different for each file. E.g. &lt;code&gt;my-domain.com&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Docker Rules&lt;/h3&gt; &#xA;&lt;p&gt;For Docker Packages (&lt;code&gt;docker-v1&lt;/code&gt;) some additional properties are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;repository-name&lt;/code&gt; - The image name used by the docker pull command. E.g. &lt;code&gt;library/hello-world&lt;/code&gt;, &lt;code&gt;library/nginx&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backend-registry&lt;/code&gt; - The backend registry domain. The most common are &lt;code&gt;registry-1.docker.io&lt;/code&gt; for Docker Hub, and &lt;code&gt;ghcr.io&lt;/code&gt; for GitHub.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of Docker rule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;type&#34;: &#34;docker-v1&#34;,&#xA;  &#34;package-id&#34;: &#34;6d3cda25-4ffc-461f-a1b8-72abf9ab3fc1&#34;,&#xA;  &#34;domain&#34;: &#34;registry.helloworlders&#34;,&#xA;  &#34;repository-name&#34;: &#34;library/hello-world&#34;, &#xA;  &#34;registry&#34;: &#34;registry-1.docker.io&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;File Rules&lt;/h3&gt; &#xA;&lt;p&gt;For File Packages (&lt;code&gt;file-v1&lt;/code&gt;) some additional properties are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;incoming-path&lt;/code&gt; - The URL path to download the file. E.g. &lt;code&gt;/minikube-{platform}-{version}.tar.gz&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;outgoing-url&lt;/code&gt; - The URL to redirect the file. E.g. &lt;code&gt;https://github.com/kubernetes/minikube/releases/downloads/minikube-{platform}-{version}.tar.gz&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of File rule:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;type&#34;: &#34;file-v1&#34;,&#xA;  &#34;package-id&#34;: &#34;a45901e6-8cad-4a27-8776-2349212c6a0d&#34;,&#xA;  &#34;domain&#34;: &#34;avi.gateway.scarf.sh&#34;,&#xA;  &#34;incoming-path&#34;: &#34;/{identifer}@{version}&#34;,&#xA;  &#34;outgoing-url&#34;: &#34;https://deno.land/x/{identifer}@{version}&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Python Rules&lt;/h3&gt; &#xA;&lt;p&gt;For Python Packages (&lt;code&gt;python-v1&lt;/code&gt;) some additional properties are required:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;file-name&lt;/code&gt; - The full name of the file. See examples below.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;package-name&lt;/code&gt; - The package name.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;version&lt;/code&gt; - The version of the package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;hash-value&lt;/code&gt; - The hash value. E.g (md5, 123...).&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;gpg-sig&lt;/code&gt; - A value of either true or false to indicate whether or not there is a GPG signature.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;requires-python&lt;/code&gt; - The Python version(s) that the distribution is guaranteed to be compatible with. The value follows the PEP 345 spec.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backend-url&lt;/code&gt; - The backend URL to download the package.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;backend-simple-index&lt;/code&gt;- The manifest backend index. If not present, assume &lt;a href=&#34;https://pypi.org/simple/&#34;&gt;https://pypi.org/simple/&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example of Python rule&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA;  &#34;type&#34;: &#34;python-v1&#34;,&#xA;  &#34;package-id&#34;: &#34;013e1ebd-3bc0-411d-b971-6ff1c20267c3&#34;,&#xA;  &#34;domain&#34;: &#34;fabioluz.gateway.scarf53.sh&#34;,&#xA;  &#34;file-name&#34;: &#34;numpy-1.6.1-cp27-none-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.whl&#34;,&#xA;  &#34;package-name&#34;: &#34;numpy&#34;,&#xA;  &#34;version&#34;: &#34;1.6.1-cp27-none-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.whl&#34;,&#xA;  &#34;hash-value&#34;: {&#xA;      &#34;hash&#34;: &#34;5bd0a2a68903f1b286dd646f42f92f7de7bde6bbf3c4829a3f078400f48fa1e7&#34;,&#xA;      &#34;type&#34;: &#34;sha256&#34;&#xA;  },&#xA;  &#34;backend-url&#34;: &#34;https://files.pythonhosted.org/packages/a6/b9/a9e4411c08a568a9558e4d4efc15cd26cf9f2f84e4d7ea800742fedb858c/numpy-1.6.1-cp27-none-macosx_10_6_intel.macosx_10_9_intel.macosx_10_9_x86_64.whl#sha256=5bd0a2a68903f1b286dd646f42f92f7de7bde6bbf3c4829a3f078400f48fa1e7&#34;&#xA;  &#34;backend-simple-index&#34;: &#34;https://pypi.org/simple/&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For further details, please check &lt;a href=&#34;https://raw.githubusercontent.com/scarf-sh/gateway/main/src/Scarf/Gateway/Manifest.hs&#34;&gt;Scarf.Gateway.Manifest&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Caveats&lt;/h2&gt; &#xA;&lt;h3&gt;Bandwidth usage: redirect vs proxy&lt;/h3&gt; &#xA;&lt;p&gt;The gateway redirects whenever possible. Some versions of some container runtimes, however, do not properly authenticate with container registries when the client is redirected , and therefore the gateway is forced to proxy the requests to serve the download successfully. When Scarf Gateway must proxy, be prepared to pay for the bandwidth bill, as the container images themselves will pass through your infrastructure.&lt;/p&gt; &#xA;&lt;h2&gt;Logging&lt;/h2&gt; &#xA;&lt;p&gt;Requests will be logged to stdout. Request details are in JSON format to be easily processed for any kind of analytics you might want to do. To learn more about getting advanced insights from Scarf Gateway traffic, check out the free and paid features of the entire &lt;a href=&#34;https://scarf.sh&#34;&gt;Scarf&lt;/a&gt; platform.&lt;/p&gt; &#xA;&lt;h2&gt;Community&lt;/h2&gt; &#xA;&lt;h3&gt;Code of conduct&lt;/h3&gt; &#xA;&lt;p&gt;This project is for everyone. We ask that our users and contributors take a few minutes to review our &lt;a href=&#34;https://github.com/scarf-sh/code-of-conduct&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Communication&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://github.com/scarf-sh/gateway/issues&#34;&gt;Issues&lt;/a&gt; can be used for open discussions. If you know someone who should hear about the message, tag them explicitly using the @username GitHub syntax.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;We also have a &lt;a href=&#34;https://join.slack.com/t/scarf-community/shared_invite/zt-1q9vpx13r-H9fy07psWSwM4SGF~vEsJA&#34;&gt;slack server&lt;/a&gt; that anyone can join where we can discuss about the gateway or all matters open source!&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>