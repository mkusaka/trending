<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-03-17T01:35:22Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>stevana/elastically-scalable-thread-pools</title>
    <updated>2023-03-17T01:35:22Z</updated>
    <id>tag:github.com,2023-03-17:/stevana/elastically-scalable-thread-pools</id>
    <link href="https://github.com/stevana/elastically-scalable-thread-pools" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An experiment in controlling the size of a thread pool using a PID controller.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elastically scalable thread pools&lt;/h1&gt; &#xA;&lt;p&gt;An experiment in controlling the size of a thread pool using a PID controller.&lt;/p&gt; &#xA;&lt;h2&gt;Motivation&lt;/h2&gt; &#xA;&lt;p&gt;A tried and tested way to achieve parallelism is to use pipelining. It&#39;s used extensively in manufacturing and in computer hardware.&lt;/p&gt; &#xA;&lt;p&gt;For example, Airbus &lt;a href=&#34;https://youtu.be/oxjT7veKi9c?t=2682&#34;&gt;apparently&lt;/a&gt; outputs two airplanes per day on average, even though it takes two months to build a single airplane from start to finish. It&#39;s also used inside CPUs to &lt;a href=&#34;https://en.wikipedia.org/wiki/Instruction_pipelining&#34;&gt;pipeline instructions&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Let&#39;s imagine we want to take advantage of pipelining in some software system. To make things more concrete, let&#39;s say we have a system where some kind of requests come on over the network and we want to process them in some way. The first stage of the pipeline is to parse the incoming requests from raw bytestrings into some more structured data, the second stage is to apply some validation logic to the parsed data and the third stage is to process the valid data and produce some outputs that are then sent back to the client or stored somewhere.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;  flowchart LR&#xA;    Q1(Queue of bytestrings) --&amp;gt; S1((Parse)) --&amp;gt; Q2(Queue of data)&#xA;    Q2--&amp;gt; S2((Validate)) --&amp;gt; Q3(Queue of valid data)&#xA;    Q3--&amp;gt; S3((Process)) --&amp;gt; Q4(Queue of outputs)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The service time of an item can differ from stage to stage, for example parsing might be slower than validation, which can create bottlenecks. Luckily it&#39;s quite easy to spot bottlenecks by merely observing the queue lengths and once a slow stage is found we can often fix it by merely adding an additional parallel processor to that stage. For example we could spin up two or more threads that take bytestrings from the first queue and turn them into structured data and thereby compensate for parsing being slow.&lt;/p&gt; &#xA;&lt;p&gt;By spinning up more threads we can decrease latency (waiting time in the queue) and increase throughput (process more items), but we are also on the other hand using more energy and potentially hogging CPU resources that might be better used elsewhere in the pipeline or system at large.&lt;/p&gt; &#xA;&lt;p&gt;So here&#39;s the question that the rest of this post is concerned about: can we dynamically spin up and spin down threads at a stage in response to the input queue length for that stage?&lt;/p&gt; &#xA;&lt;h2&gt;Plan&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s focus on a single stage of the pipeline to make things easier for ourselves.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;flowchart LR&#xA;    I(Input queue) --&amp;gt; P((Processor)) --&amp;gt; O(Output queue)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We&#39;d like to increase the parallelism of the processors if the input queue grows, and decrease it when the queue shrinks. One simple strategy might be to establish thresholds, i.e. if there&#39;s over $100$ items in the input queue then allocate more processors and if there&#39;s no items in the queue then deallocate them.&lt;/p&gt; &#xA;&lt;p&gt;Since allocating and deallocating processors can be an expense in itself, we&#39;d like to avoid changing them processor count unnecessarily.&lt;/p&gt; &#xA;&lt;p&gt;The threshold based approach is sensitive to unnecessarily changing the count if the arrival rate of work fluctuates. The reason for this is because it only takes the &lt;em&gt;present&lt;/em&gt; queue length into account.&lt;/p&gt; &#xA;&lt;p&gt;We can do better by also incorporating the &lt;em&gt;past&lt;/em&gt; and trying to predict the &lt;em&gt;future&lt;/em&gt;, this is the basic idea of &lt;a href=&#34;https://en.wikipedia.org/wiki/PID_controller&#34;&gt;PID controllers&lt;/a&gt; from &lt;a href=&#34;https://en.wikipedia.org/wiki/Control_theory&#34;&gt;control theory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Here&#39;s what the picture looks like with a PID controller in the loop:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;                                            +----------------------------------+&#xA;                                            |                                  |&#xA;    -------------------------------------------&amp;gt;[Input queue]--&amp;gt;[Worker pool]-----&amp;gt;[Output queue]--&amp;gt;&#xA;                                            |                                  |&#xA;     r(t)   e(t)                    u(t)    |                                  |&#xA;    -----&amp;gt;+------&amp;gt;[PID controller]--------&amp;gt; |                                  |&#xA;          ^                                 |                                  |&#xA;          |                                 +----------------------------------+&#xA;          |                                                 | y(t)&#xA;          +-------------------------------------------------+&#xA;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The PID controller monitors the queue length $y(t)$, compares it to some desired queue length $r(t)$ (also known as the setpoint) and calculates the error $e(t)$. The error determines the control variable $u(t)$ which is used to grow or shrink the processor pool.&lt;/p&gt; &#xA;&lt;h2&gt;Pseudo-code&lt;/h2&gt; &#xA;&lt;p&gt;Let&#39;s start top-down with the &lt;code&gt;main&lt;/code&gt; function which drives our whole experiment.&lt;/p&gt; &#xA;&lt;h3&gt;Main&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;main =&#xA;&#xA;  // Create the in- and out-queues.&#xA;  inQueue  := newQueue()&#xA;  outQueue := newQueue()&#xA;&#xA;&#xA;  // The workers don&#39;t do anything interesting, they merely sleep for a bit to&#xA;  // pretend to be doing some work.&#xA;  worker := sleep 0.025s&#xA;&#xA;  // Create an empty worker pool.&#xA;  pool := newPool(worker, inQueue, outQueue)&#xA;&#xA;  // Start the PID controller in a background thread. The parameters provided&#xA;  // here allow us to tune the PID controller, we&#39;ll come back to them later.&#xA;  kp := 1&#xA;  ki := 0.05&#xA;  kd := 0.05&#xA;  dt := 0.01s&#xA;  fork(pidController(kp, ki, kd, dt, pool))&#xA;&#xA;&#xA;  // Create a workload for our workers. We use the sine function to create&#xA;  // between 0 and 40 work items every 0.1s for 60s. The idea being that because&#xA;  // the workload varies over time the PID controller will have some work to do&#xA;  // figuring out how many workers are needed.&#xA;  sineLoadGenerator(inQueue, 40, 0.1s, 60s)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Worker pool&lt;/h3&gt; &#xA;&lt;p&gt;The worker pool itself is merely a struct which packs up the necessary data we need to be able to scale it up and down.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;struct Pool =&#xA;  { inQueue:  Queue&amp;lt;Input&amp;gt;&#xA;  , outQueue: Queue&amp;lt;Output&amp;gt;&#xA;  , worker:   Function&amp;lt;Input, Output&amp;gt;&#xA;  , pids:     List&amp;lt;ProcessId&amp;gt;&#xA;  }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Creating a &lt;code&gt;newPool&lt;/code&gt; creates the struct with an empty list of process ids.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;newPool worker inQueue outQueue = Pool { ..., pids: emptyList }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Scaling up and down are functions that take and return a &lt;code&gt;Pool&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;scaleUp pool =&#xA;  work := forever&#xA;            x := readQueue(pool.inQueue)&#xA;            y := pool.worker(x)&#xA;            writeQueue(pool.outQueue, y)&#xA;  pid   := fork(work)&#xA;  pool&#39; := pool.pids = append(pid, pool.pids)&#xA;  return pool&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The function &lt;code&gt;scaleDown&lt;/code&gt; does the inverse, i.e. kills and removes the last process id from &lt;code&gt;pool.pids&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Load generator&lt;/h3&gt; &#xA;&lt;p&gt;In order to create work load that varies over time we use the sine function. The sine function oscillates between $-1$ and $1$:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stevana/elastically-scalable-thread-pools/main/img/sine.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We would like to have it oscillate between $0$ and some max value $m$. By multiplying the output of the sine function by $m/2$ we get an oscillation between $-m/2$ and $m/2$, we can then add $m/2$ to make it oscillate between $0$ and $m$.&lt;/p&gt; &#xA;&lt;p&gt;We&#39;ll sample the resulting function once every &lt;code&gt;timesStep&lt;/code&gt; seconds, this gives us the amount of work items (&lt;code&gt;n&lt;/code&gt;) to create we then spread those out evenly in time, rinse and repeat until we reach some &lt;code&gt;endTime&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sineLoadGenerator inQueue workItem maxItems timeStep endTime =&#xA;  for t := 0; t &amp;lt; endtime; t += timeStep&#xA;    n := sin(t) * maxItems / 2 + maxItems / 2&#xA;    for i := 0; i &amp;lt; n; i++&#xA;      writeQueue(inQueue, workItem)&#xA;      sleep(timeStep / n)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;PID controller&lt;/h3&gt; &#xA;&lt;p&gt;The PID controller implementation follows the pseudo-code given at &lt;a href=&#34;https://en.wikipedia.org/wiki/PID_controller#Pseudocode&#34;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;previous_error := 0&#xA;integral := 0&#xA;loop:&#xA;   error := setpoint − measured_value&#xA;   proportional := error;&#xA;   integral := integral + error × dt&#xA;   derivative := (error − previous_error) / dt&#xA;   output := Kp × proportional + Ki × integral + Kd × derivative&#xA;   previous_error := error&#xA;   wait(dt)&#xA;   goto loop&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Where &lt;code&gt;Kp&lt;/code&gt;, &lt;code&gt;Ki&lt;/code&gt; and &lt;code&gt;Kd&lt;/code&gt; is respectively the proportional, integral and derivative gain and &lt;code&gt;dt&lt;/code&gt; is the loop interval time. The proportional part acts on the &lt;em&gt;present&lt;/em&gt; error value, the integral acts on the &lt;em&gt;past&lt;/em&gt; and the derivative tries to predict the &lt;em&gt;future&lt;/em&gt;. The measured value is the input queue length and the setpoint, i.e. desired queue length, is set to zero. If the &lt;code&gt;output&lt;/code&gt; of the PID controller is less than $-100$ (i.e. the queue length is over $100$ taking the present, past and possible future into account) then we scale up and if it&#39;s more than $-20$ (i.e. the queue length is less than $20$) then we scale down the worker pool.&lt;/p&gt; &#xA;&lt;h2&gt;How it works&lt;/h2&gt; &#xA;&lt;p&gt;We start off by only setting the proportional part and keeping the integral and derivative part zero, this is called a P-controller. We see below that it will scale the worker count up and down proportionally to the sine wave shaped load:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stevana/elastically-scalable-thread-pools/main/img/elastically-scalable-thread-pools-1.0-0.0-0.0.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;A P-controller only focuses on the &lt;em&gt;present&lt;/em&gt;, and we see that it allocates and deallocates workers unnecessarily. In order to smooth things out we introduce the integral part, i.e. a PI-controller. The integral part takes the &lt;em&gt;past&lt;/em&gt; into account. We see now that the worker count stabilises at $28$:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stevana/elastically-scalable-thread-pools/main/img/elastically-scalable-thread-pools-1.0-5.0e-2-0.0.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;We can improve on this by adding the derivative part which takes the &lt;em&gt;future&lt;/em&gt; into account. We then see that it stabilises at $26$ workers:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/stevana/elastically-scalable-thread-pools/main/img/elastically-scalable-thread-pools-1.0-5.0e-2-5.0e-2.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;With the full PID controller, which stabilises using less workers than the PI-controller, we see that the queue length spikes up to $20$ or so each time the work load generator hits one of the sine function&#39;s peaks. Recall that we started scaling down once the queue length was less than $20$.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;The above graphs were generated by running: &lt;code&gt;cabal run app -- kp ki kd&lt;/code&gt;, where the $K_p$, $K_i$, and $K_d$ parameters are the tuning parameters for the PID controller.&lt;/p&gt; &#xA;&lt;p&gt;If you don&#39;t have the GHC Haskell compiler and the &lt;code&gt;cabal&lt;/code&gt; build tool already installed, then the easiest way to get it is via &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt;. Alternatively if you got &lt;code&gt;nix&lt;/code&gt; then &lt;code&gt;nix-shell&lt;/code&gt; should give give you access to all the dependencies you need.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;There are many ways we can build upon this experiment, here are a few ideas:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; We probably want to limit the max number of threads in a pool;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; If two or more threads take items from some input queue and put them on some output queue then there&#39;s no guarantee that the order of the output items will be the same as the input items. We could solve this, and regain determinism, by using array based queues and shard on the index, i.e. even indices goes to one processor and odd to an other or more generally modulus N can be used to shard between N processors. This is essentially what the &lt;a href=&#34;https://en.wikipedia.org/wiki/Disruptor_(software)&#34;&gt;LMAX Disruptor&lt;/a&gt; does;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; We&#39;ve only looked at one stage in a pipeline, what happens if we have multiple stages? is it enough to control each individual stage separately or do we need more global control?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Can we come up with other things to control? E.g. batch sizes?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; We&#39;ve only monitored the current queue length, could we combine this with other data? E.g. time series of the queue length from the previous day?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Is it robust to wildly changing usage patterns? E.g. bursty traffic or the &lt;a href=&#34;https://en.wikipedia.org/wiki/Slashdot_effect&#34;&gt;Slashdot effect&lt;/a&gt;?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; We&#39;ve looked at scaling up and down on a single machine (vertical scaling), what about scaling out and in across multiple machines (horizontal scaling)?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; We generated and processed real work items (by sleeping), could we do a discrete-event simulation instead to avoid having to wait for the sleeps?&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; I just picked random values for the PID controller parameters, there are more principled &lt;a href=&#34;https://en.wikipedia.org/wiki/PID_controller#Overview_of_tuning_methods&#34;&gt;ways&lt;/a&gt; of tuning the PID controller;&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; The PID controller we implemented merely followed the pseudo-code from Wikipedia, there&#39;s probably better ways of implementing it?&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If any of this sounds interesting, feel free to get in touch!&lt;/p&gt; &#xA;&lt;h2&gt;See also&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.researchgate.net/publication/265611546_A_Review_of_Auto-scaling_Techniques_for_Elastic_Applications_in_Cloud_Environments&#34;&gt;&lt;em&gt;A Review of Auto-scaling Techniques for Elastic Applications in Cloud Environments&lt;/em&gt;&lt;/a&gt; (2014) is a survey paper which talks about both threshold and PID controllers;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://people.eecs.berkeley.edu/~brewer/papers/SEDA-sosp.pdf&#34;&gt;&lt;em&gt;SEDA: An Architecture for Well-Conditioned Scalable Internet Services&lt;/em&gt;&lt;/a&gt; (2001), this is paper that I got the idea for elastic scalable thread pools. They use a threshold approach rather than a PID controller, saying:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;The controller periodically samples the input queue (once per second by default) and adds a thread when the queue length exceeds some threshold (100 events by default). Threads are removed from a stage when they are idle for a specified period of time (5 seconds by default).&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;But also:&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;Under SEDA, the body of work on control systems can be brought to bear on service resource management, and we have only scratched the surface of the potential for this technique.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;p&gt;A bit more explanation is provided by Matt Welsh, who is one of the author, in his PhD &lt;a href=&#34;https://cs.uwaterloo.ca/~brecht/servers/readings-new/mdw-phdthesis.pdf&#34;&gt;thesis&lt;/a&gt; (2002):&lt;/p&gt; &#xA;  &lt;blockquote&gt; &#xA;   &lt;p&gt;A benefit to ad hoc controller design is that it does not rely on complex models and parameters that a system designer may be unable to understand or to tune. A common complaint of classic PID controller design is that it is often difficult to understand the effect of gain settings.&lt;/p&gt; &#xA;  &lt;/blockquote&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;There are many introductory text books on control theory, but there&#39;s a lot less resources on how to apply control theory to software systems. Here are a few resources:&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://janert.org/books/feedback-control-for-computer-systems/&#34;&gt;&lt;em&gt;Feedback Control for Computer Systems&lt;/em&gt;&lt;/a&gt; book by Philipp K. Janert (2013);&lt;/p&gt; &lt;/li&gt; &#xA;   &lt;li&gt; &lt;p&gt;&lt;a href=&#34;https://www.cse.wustl.edu/~lu/control-tutorials/im09/&#34;&gt;&lt;em&gt;Tutorial: Recent Advances in the Application of Control Theory to Network and Service Management&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;It could very well be that the way we&#39;ve applied classic PID controllers isn&#39;t suitable for unpredictable internet traffic loads. There are branches of control theory might be better suited for this, see, for example, &lt;a href=&#34;https://en.wikipedia.org/wiki/Robust_control&#34;&gt;robust&lt;/a&gt; and &lt;a href=&#34;https://en.wikipedia.org/wiki/Adaptive_control&#34;&gt;adaptive&lt;/a&gt; control theory;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The .NET thread pool apparently uses the &lt;a href=&#34;https://en.wikipedia.org/wiki/Hill_climbing&#34;&gt;hill climbing&lt;/a&gt; optimisation technique to &lt;a href=&#34;https://mattwarren.org/2017/04/13/The-CLR-Thread-Pool-Thread-Injection-Algorithm/&#34;&gt;elastically scale&lt;/a&gt;;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;My previous post: &lt;a href=&#34;https://github.com/stevana/pipelined-state-machines#pipelined-state-machines&#34;&gt;&lt;em&gt;An experiment in declaratively programming parallel pipelines of state machines&lt;/em&gt;&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Discussion&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://news.ycombinator.com/item?id=35148068&#34;&gt;Hacker News&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://lobste.rs/s/ybtxic/experiment_elastically_scaling_thread&#34;&gt;lobste.rs&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://old.reddit.com/r/haskell/comments/11qyfw7/an_experiment_in_elastically_scaling_a_thread/&#34;&gt;r/haskell&lt;/a&gt;;&lt;/li&gt; &#xA; &lt;li&gt;Also see Glyn Normington&#39;s &lt;a href=&#34;https://github.com/stevana/elastically-scalable-thread-pools/issues/1&#34;&gt;comment&lt;/a&gt; in the issue tracker.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>debasishg/joy-free-monads</title>
    <updated>2023-03-17T01:35:22Z</updated>
    <id>tag:github.com,2023-03-17:/debasishg/joy-free-monads</id>
    <link href="https://github.com/debasishg/joy-free-monads" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An interpreter for a Joy like concatenative language using free monads in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;joy-free-monads&lt;/h1&gt; &#xA;&lt;p&gt;An interpreter for a Joy like concatenative language using free monads in Haskell&lt;/p&gt;</summary>
  </entry>
</feed>