<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-07-16T01:42:37Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>smallhadroncollider/taskell</title>
    <updated>2022-07-16T01:42:37Z</updated>
    <id>tag:github.com,2022-07-16:/smallhadroncollider/taskell</id>
    <link href="https://github.com/smallhadroncollider/taskell" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Command-line Kanban board/task manager with support for Trello boards and GitHub projects&lt;/p&gt;&lt;hr&gt;&lt;blockquote&gt; &#xA; &lt;p&gt;I&#39;m going to be taking a break from development of Taskell for a while. Trying to do it alongside my day job was proving a bit much. Feel free to continue to submit issues, but I won&#39;t be able to work on any of them immediately. Pull requests also welcome. Thanks for understanding ðŸ™‚&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h1&gt;Taskell&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/smallhadroncollider/taskell&#34;&gt;&lt;img src=&#34;https://travis-ci.org/smallhadroncollider/taskell.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;A CLI kanban board/task manager for Mac and Linux&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Per project task lists&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;vim&lt;/code&gt; style key-bindings&lt;/li&gt; &#xA; &lt;li&gt;Stored using Markdown&lt;/li&gt; &#xA; &lt;li&gt;Clean diffs for easy version control&lt;/li&gt; &#xA; &lt;li&gt;Support for sub-tasks and due dates&lt;/li&gt; &#xA; &lt;li&gt;Trello board imports&lt;/li&gt; &#xA; &lt;li&gt;GitHub project imports&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.buymeacoffee.com/shc&#34; target=&#34;_blank&#34;&gt;&lt;img src=&#34;https://www.buymeacoffee.com/assets/img/custom_images/orange_img.png&#34; alt=&#34;Buy Me A Coffee&#34; style=&#34;height: 41px !important;width: 174px !important;box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;-webkit-box-shadow: 0px 3px 2px 0px rgba(190, 190, 190, 0.5) !important;&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Follow &lt;a href=&#34;https://twitter.com/taskellcli&#34;&gt;@taskellcli&lt;/a&gt; on Twitter for updates&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://taskell.app/img/demo.gif&#34; alt=&#34;Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#installation&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#using-taskell&#34;&gt;Using Taskell&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#options&#34;&gt;Options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#storage&#34;&gt;Storage&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-trello-boards&#34;&gt;Importing Trello Boards&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-github-projects&#34;&gt;Importing GitHub Projects&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#configuration&#34;&gt;Configuration&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#controls&#34;&gt;Controls&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#due-dates&#34;&gt;Due Dates&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#theming&#34;&gt;Theming&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#roadmap&#34;&gt;Roadmap&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#contributing&#34;&gt;Contributing&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#core-contributors&#34;&gt;Core Contributors&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#acknowledgements&#34;&gt;Acknowledgements&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Homebrew (Mac)&lt;/h3&gt; &#xA;&lt;p&gt;You can install Taskell on your Mac using &lt;a href=&#34;https://brew.sh&#34;&gt;Homebrew&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;brew install taskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Debian/Ubuntu&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smallhadroncollider/taskell/releases&#34;&gt;A &lt;code&gt;.deb&lt;/code&gt; package is available for Debian/Ubuntu&lt;/a&gt;. Download it and install with &lt;code&gt;dpkg -i &amp;lt;package-name&amp;gt;&lt;/code&gt;. You may also need to install the &lt;code&gt;libtinfo5&lt;/code&gt; package (&lt;code&gt;sudo apt install libtinfo5&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Fedora&lt;/h3&gt; &#xA;&lt;p&gt;Not officially supported, but try running &lt;code&gt;sudo dnf install ncurses-compat-libs&lt;/code&gt; then download and run the binary as described below. If that doesn&#39;t work you may need to build from scratch (&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#cabal&#34;&gt;Cabal&lt;/a&gt;/&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#stack&#34;&gt;Stack&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Binaries&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/smallhadroncollider/taskell/releases&#34;&gt;A binary is available for Mac and Debian/Ubuntu&lt;/a&gt;. Download it and copy it to a directory in your &lt;code&gt;$PATH&lt;/code&gt; (e.g. &lt;code&gt;/usr/local/bin&lt;/code&gt; or &lt;code&gt;/usr/bin&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;h3&gt;Cabal&lt;/h3&gt; &#xA;&lt;p&gt;You can install Taskell with &lt;code&gt;cabal&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal install taskell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you run &lt;code&gt;cabal update&lt;/code&gt; if you haven&#39;t run it recently.&lt;/p&gt; &#xA;&lt;h3&gt;Stack&lt;/h3&gt; &#xA;&lt;p&gt;If none of the above options work you can build taskell using &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Stack&lt;/a&gt;. First &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/#how-to-install&#34;&gt;install Stack on your machine&lt;/a&gt;. Then clone the repo and run &lt;code&gt;stack build &amp;amp;&amp;amp; stack install&lt;/code&gt;: this will build taskell and then install it in &lt;code&gt;~/.local/bin&lt;/code&gt; (so make sure that directory is in your &lt;code&gt;$PATH&lt;/code&gt;). Building from scratch can take a long time and occasionally doesn&#39;t work the first time (if this happens try running it again).&lt;/p&gt; &#xA;&lt;h2&gt;Using Taskell&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;taskell&lt;/code&gt;: will use &lt;code&gt;taskell.md&lt;/code&gt; in the pwd - offers to create if not found&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;taskell filename.md&lt;/code&gt;: will use &lt;code&gt;filename.md&lt;/code&gt; in the pwd - offers to create if not found&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Options&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-h&lt;/code&gt;: show help&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-v&lt;/code&gt;: show version number&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-t &amp;lt;trello-board-id&amp;gt;&lt;/code&gt;: import a Trello board (&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-trello-boards&#34;&gt;see below&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;-g &amp;lt;github-project-id&amp;gt;&lt;/code&gt;: import a GitHub project (&lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#importing-github-projects&#34;&gt;see below&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Tips&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;If you&#39;re using a simple two-column &#34;To Do&#34; and &#34;Done&#34; then use the space bar to mark an item as complete while staying in the &#34;To Do&#34; list. If you&#39;re using a more complicated column setup then you will want to use &lt;code&gt;H&lt;/code&gt;/&lt;code&gt;L&lt;/code&gt; to move tasks between columns.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Storage&lt;/h3&gt; &#xA;&lt;p&gt;By default stores in a &lt;code&gt;taskell.md&lt;/code&gt; file in the working directory:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-md&#34;&gt;## To Do&#xA;&#xA;- Do this&#xA;&#xA;## Done&#xA;&#xA;- Do That&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Importing Trello Boards&lt;/h3&gt; &#xA;&lt;p&gt;Taskell includes the ability to fetch a Trello board and store it as local taskell file.&lt;/p&gt; &#xA;&lt;h4&gt;Authentication&lt;/h4&gt; &#xA;&lt;p&gt;Before fetching a Trello board, you&#39;ll need to create an access token and store it in &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;First, &lt;a href=&#34;https://trello.com/1/authorize?expiration=never&amp;amp;name=taskell&amp;amp;scope=read&amp;amp;response_type=token&amp;amp;key=80dbcf6f88f62cc5639774e13342c20b&#34;&gt;get a Trello token&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then add it to &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[trello]&#xA;token = &amp;lt;your-trello-access-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can revoke access tokens &lt;a href=&#34;https://trello.com/my/account&#34;&gt;on Trello&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fetching&lt;/h4&gt; &#xA;&lt;p&gt;Running the following would pull down the Trello board with the ID &#34;TRe1l0iD&#34; into a file named &lt;code&gt;trello.md&lt;/code&gt; and then open taskell with that file.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taskell -t TRe1l0iD trello.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure you have permission to view the Trello board, otherwise you&#39;ll get an error.&lt;/p&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a one-off procedure: it effectively imports a Trello board to taskell&lt;/li&gt; &#xA; &lt;li&gt;Currently imports: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Lists&lt;/li&gt; &#xA;   &lt;li&gt;Cards&lt;/li&gt; &#xA;   &lt;li&gt;Card descriptions&lt;/li&gt; &#xA;   &lt;li&gt;Card due dates&lt;/li&gt; &#xA;   &lt;li&gt;Card checklists (merged into one list per card)&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Importing GitHub Projects&lt;/h3&gt; &#xA;&lt;p&gt;Taskell includes the ability to fetch a GitHub project and store it as local taskell file.&lt;/p&gt; &#xA;&lt;h4&gt;Authentication&lt;/h4&gt; &#xA;&lt;p&gt;Before fetching a GitHub board, you&#39;ll need to create a person access token and store it in &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;First, &lt;a href=&#34;https://github.com/settings/tokens/new&#34;&gt;get a GitHub personal access token&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure to tick the &lt;code&gt;repo&lt;/code&gt; scope&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Then add it to &lt;code&gt;~/.taskell/config.ini&lt;/code&gt;:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[github]&#xA;token = &amp;lt;your-github-personal-access-token&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;You can delete personal access tokens &lt;a href=&#34;https://github.com/settings/tokens/&#34;&gt;on GitHub&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h4&gt;Fetching&lt;/h4&gt; &#xA;&lt;p&gt;Projects can belong to &lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#organisations&#34;&gt;organisations&lt;/a&gt; or to &lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#repositories&#34;&gt;individual repositories&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Make sure you have permission to view the GitHub project, otherwise you&#39;ll get an error.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://taskell.app/img/github.gif&#34; alt=&#34;GitHub Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;h5&gt;Organisations&lt;/h5&gt; &#xA;&lt;p&gt;To import a project for an organisation called &#34;test-org&#34; you would use the following:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taskell -g orgs/test-org github.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would then show you a list of possible projects to import. Enter the number of the project you wish to import.&lt;/p&gt; &#xA;&lt;h5&gt;Repositories&lt;/h5&gt; &#xA;&lt;p&gt;To import a project for the repository &#34;test-repo&#34; for the user &#34;test-user&#34;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;taskell -g repos/test-user/test-repo github.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This would then show you a list of possible projects to import. Enter the number of the project you with to import.&lt;/p&gt; &#xA;&lt;h4&gt;Limitations&lt;/h4&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is a one-off procedure: it effectively imports a GitHub project to taskell&lt;/li&gt; &#xA; &lt;li&gt;Currently imports: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Columns&lt;/li&gt; &#xA;   &lt;li&gt;Cards&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Configuration&lt;/h2&gt; &#xA;&lt;p&gt;Taskell uses the &lt;a href=&#34;https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html&#34;&gt;XDG Base Directory Specification&lt;/a&gt;, so it will look for an &lt;code&gt;$XDG_CONFIG_HOME&lt;/code&gt; environmental variable and create a directory named &lt;code&gt;taskell&lt;/code&gt; inside it. If this variable is not found it will create the &lt;code&gt;taskell&lt;/code&gt; directory in &lt;code&gt;~/.config/&lt;/code&gt;. (If you&#39;ve been using Taskell since &amp;lt;= 1.3.5 then it will be in a &lt;code&gt;~/.taskell&lt;/code&gt; directory, feel free to move this to the XDG directory.)&lt;/p&gt; &#xA;&lt;p&gt;Taskell has a &lt;code&gt;config.ini&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[general]&#xA;; the default filename to create/look for&#xA;filename = taskell.md&#xA;&#xA;[layout]&#xA;; top/bottom padding for the taskell window&#xA;padding = 1&#xA;&#xA;; the width of a column&#xA;column_width = 30&#xA;&#xA;; the padding of a column&#xA;; for both sides, so 3 would give a gap of 6 between two columns&#xA;column_padding = 3&#xA;&#xA;; the icon to use when a task has a description&#xA;; the default icon may not display on all systems&#xA;description_indicator = &#34;â‰¡&#34;&#xA;&#xA;; whether to show the statusbar&#xA;statusbar = true&#xA;&#xA;[markdown]&#xA;; the markdown to start a title line with&#xA;title = &#34;##&#34;&#xA;&#xA;; the markdown to start a task line with&#xA;task = &#34;-&#34;&#xA;&#xA;; the markdown to start a sub-task line with&#xA;subtask = &#34;    *&#34;&#xA;&#xA;; by default times are stored in UTC to avoid diffs if you&#xA;; change locations. Set this to true if it will always be&#xA;; edited in the same timezone&#xA;localTimes = false&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure that the values in the &lt;code&gt;[markdown]&lt;/code&gt; section are surrounded by &lt;strong&gt;double&lt;/strong&gt;-quotes.&lt;/p&gt; &#xA;&lt;p&gt;If you always use sub-tasks, an alternative setup for &lt;code&gt;[markdown]&lt;/code&gt; might be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[markdown]&#xA;title = &#34;##&#34;&#xA;&#xA;; each task is a header&#xA;task = &#34;###&#34;&#xA;&#xA;; subtasks are list items under the header&#xA;subtask = &#34;-&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: currently if you change your &lt;code&gt;[markdown]&lt;/code&gt; settings any older files stored with different settings will not be readable.&lt;/p&gt; &#xA;&lt;h3&gt;Template&lt;/h3&gt; &#xA;&lt;p&gt;You can edit the &lt;code&gt;template.md&lt;/code&gt; config file to change what a new taskell file looks like.&lt;/p&gt; &#xA;&lt;h3&gt;Controls&lt;/h3&gt; &#xA;&lt;p&gt;You can edit keyboard bindings in the &lt;code&gt;bindings.ini&lt;/code&gt; config file.&lt;/p&gt; &#xA;&lt;p&gt;The default bindings can be found in &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/master/templates/bindings.ini&#34;&gt;&lt;code&gt;bindings.ini&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Available special keys: &lt;code&gt;&amp;lt;Space&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Enter&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Backspace&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Left&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Right&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Up&amp;gt;&lt;/code&gt;, &lt;code&gt;&amp;lt;Down&amp;gt;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;On a Mac you can use the &lt;code&gt;alt&lt;/code&gt; characters: e.g. &lt;code&gt;quit = Å“&lt;/code&gt; is equivalent to &lt;code&gt;alt+q&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You shouldn&#39;t try to assign the &lt;code&gt;1&lt;/code&gt;-&lt;code&gt;9&lt;/code&gt; keys, as it will not overwrite the default behaviour.&lt;/p&gt; &#xA;&lt;h4&gt;Due Dates&lt;/h4&gt; &#xA;&lt;p&gt;Due dates must be input with the format &lt;code&gt;YYYY-MM-DD&lt;/code&gt; or &lt;code&gt;YYYY-MM-DD HH:MM&lt;/code&gt;. The date will not be accepted otherwise.&lt;/p&gt; &#xA;&lt;p&gt;You can also pass in relative times such as &lt;code&gt;1w 2d&lt;/code&gt; (for 1 week and 2 days). Valid units are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;s&lt;/code&gt; (seconds)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;m&lt;/code&gt; (minutes)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;h&lt;/code&gt; (hours)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;d&lt;/code&gt; (days)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;w&lt;/code&gt; (weeks)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;These can be used in any combination. If the time is made up only of days and/or weeks, the due date will not include a time.&lt;/p&gt; &#xA;&lt;p&gt;By default times are stored in the Markdown file as UTC. If you would like local times (and are unlikely to open the file in lots of different timezones) then you can set &lt;code&gt;localTimes&lt;/code&gt; to &lt;code&gt;true&lt;/code&gt; in the &lt;code&gt;markdown&lt;/code&gt; section of the &lt;a href=&#34;https://raw.githubusercontent.com/smallhadroncollider/taskell/master/#configuration&#34;&gt;config file&lt;/a&gt;. If you have this setting on and you change timezone, you&#39;ll get a diff on all your times the next time you make changes to the file.&lt;/p&gt; &#xA;&lt;h3&gt;Theming&lt;/h3&gt; &#xA;&lt;p&gt;You can edit Taskell&#39;s colour-scheme by editing &lt;code&gt;theme.ini&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[other]&#xA;&#xA;; list title&#xA;title.fg = green&#xA;&#xA;; status bar&#xA;statusBar.bg = blue&#xA;statusBar.fg = black&#xA;&#xA;; current list title&#xA;titleCurrent.fg = blue&#xA;&#xA;; current task&#xA;taskCurrent.fg = magenta&#xA;&#xA;; subtasks&#xA;; selected&#xA;subtaskCurrent.fg = magenta&#xA;; incomplete&#xA;subtaskIncomplete.fg = blue&#xA;; complete&#xA;subtaskComplete.fg = yellow&#xA;&#xA;; disabled&#xA;disabled.fg = yellow&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also change the background and default text colour:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[default]&#xA;&#xA;; the app background colour&#xA;default.bg = brightBlack&#xA;&#xA;; the app text colour&#xA;default.fg = white&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The available colours are: &lt;code&gt;black&lt;/code&gt;, &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, &lt;code&gt;yellow&lt;/code&gt;, &lt;code&gt;blue&lt;/code&gt;, &lt;code&gt;magenta&lt;/code&gt;, &lt;code&gt;cyan&lt;/code&gt;, &lt;code&gt;white&lt;/code&gt;, &lt;code&gt;brightBlack&lt;/code&gt;, &lt;code&gt;brightRed&lt;/code&gt;, &lt;code&gt;brightGreen&lt;/code&gt;, &lt;code&gt;brightYellow&lt;/code&gt;, &lt;code&gt;brightBlue&lt;/code&gt;, &lt;code&gt;brightMagenta&lt;/code&gt;, &lt;code&gt;brightCyan&lt;/code&gt;, &lt;code&gt;brightWhite&lt;/code&gt;, or &lt;code&gt;default&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/develop/roadmap.md&#34;&gt;roadmap.md&lt;/a&gt; for planned features&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please check the &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/develop/roadmap.md&#34;&gt;roadmap.md&lt;/a&gt; before adding any bugs/feature requests to Issues.&lt;/p&gt; &#xA;&lt;p&gt;Anyone is welcome to contribute to the project, but please read through &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING.md&lt;/a&gt; and make sure that you agree with the &lt;a href=&#34;https://github.com/smallhadroncollider/taskell/raw/master/CODE_OF_CONDUCT.md&#34;&gt;Code of Conduct&lt;/a&gt; before getting involved.&lt;/p&gt; &#xA;&lt;h3&gt;Core Contributors&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Mark Wales (&lt;a href=&#34;https://github.com/smallhadroncollider&#34;&gt;@smallhadroncollider&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Ali Ahmed (&lt;a href=&#34;https://github.com/AliNisarAhmed&#34;&gt;@AliNisarAhmed&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;Built using &lt;a href=&#34;https://github.com/jtdaugherty/brick&#34;&gt;Brick&lt;/a&gt;. Thanks to &lt;a href=&#34;https://github.com/jtdaugherty&#34;&gt;Jonathan Daugherty&lt;/a&gt; for answering all my questions and pointing me in the right direction. Also thanks to &lt;a href=&#34;https://github.com/leighman&#34;&gt;Jack Leigh&lt;/a&gt; and &lt;a href=&#34;https://github.com/ThomWright&#34;&gt;Thom Wright&lt;/a&gt; for helping me get started. Also thanks to &lt;a href=&#34;https://github.com/katjad&#34;&gt;Katja Durrani&lt;/a&gt; for submitting Taskell to &lt;a href=&#34;https://github.com/Homebrew/homebrew-core&#34;&gt;&lt;code&gt;homebrew-core&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>jtmalinowski/haskell-particles</title>
    <updated>2022-07-16T01:42:37Z</updated>
    <id>tag:github.com,2022-07-16:/jtmalinowski/haskell-particles</id>
    <link href="https://github.com/jtmalinowski/haskell-particles" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>zachjs/sv2v</title>
    <updated>2022-07-16T01:42:37Z</updated>
    <id>tag:github.com,2022-07-16:/zachjs/sv2v</id>
    <link href="https://github.com/zachjs/sv2v" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SystemVerilog to Verilog conversion&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;sv2v: SystemVerilog to Verilog&lt;/h1&gt; &#xA;&lt;p&gt;sv2v converts SystemVerilog (&lt;a href=&#34;https://ieeexplore.ieee.org/servlet/opac?punumber=8299593&#34;&gt;IEEE 1800-2017&lt;/a&gt;) to Verilog (&lt;a href=&#34;https://ieeexplore.ieee.org/servlet/opac?punumber=10779&#34;&gt;IEEE 1364-2005&lt;/a&gt;), with an emphasis on supporting synthesizable language constructs.&lt;/p&gt; &#xA;&lt;p&gt;The primary goal of this project is to create a completely free and open-source tool for converting SystemVerilog to Verilog. While methods for performing this conversion already exist, they generally either rely on commercial tools, or are limited in scope.&lt;/p&gt; &#xA;&lt;p&gt;This project was originally developed to target &lt;a href=&#34;http://www.clifford.at/yosys/&#34;&gt;Yosys&lt;/a&gt;, and so allows for disabling the conversion of (passing through) those &lt;a href=&#34;https://github.com/YosysHQ/yosys#supported-features-from-systemverilog&#34;&gt;SystemVerilog features which Yosys supports&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The idea for this project was shared with me while I was an undergraduate at Carnegie Mellon University as part of a joint Computer Science and Electrical and Computer Engineering research project on open hardware under Professors &lt;a href=&#34;https://engineering.cmu.edu/directory/bios/mai-kenneth.html&#34;&gt;Ken Mai&lt;/a&gt; and &lt;a href=&#34;https://www.cs.cmu.edu/~davide/&#34;&gt;Dave Eckhardt&lt;/a&gt;. I have greatly enjoyed collaborating with the team at CMU since January 2019, even after my graduation the following May.&lt;/p&gt; &#xA;&lt;h2&gt;Dependencies&lt;/h2&gt; &#xA;&lt;p&gt;All of sv2v&#39;s dependencies are free and open-source.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Build Dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://www.haskellstack.org/&#34;&gt;Haskell Stack&lt;/a&gt; - Haskell build system&lt;/li&gt; &#xA;   &lt;li&gt;Haskell dependencies are managed in &lt;code&gt;sv2v.cabal&lt;/code&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Test Dependencies &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;http://iverilog.icarus.com&#34;&gt;Icarus Verilog&lt;/a&gt; - for Verilog simulation&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://github.com/kward/shunit2&#34;&gt;shUnit2&lt;/a&gt; - test framework&lt;/li&gt; &#xA;   &lt;li&gt;Python (any version) - for generating certain test cases&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;h3&gt;Pre-built binaries&lt;/h3&gt; &#xA;&lt;p&gt;Binaries for Ubuntu, macOS, and Windows are available on the &lt;a href=&#34;https://github.com/zachjs/sv2v/releases&#34;&gt;releases page&lt;/a&gt;. If your system is not covered, or you would like to build the latest commit, simple instructions for building from source are below.&lt;/p&gt; &#xA;&lt;h3&gt;Building from source&lt;/h3&gt; &#xA;&lt;p&gt;You must have &lt;a href=&#34;https://www.haskellstack.org/&#34;&gt;Stack&lt;/a&gt; installed to build sv2v. Then you can:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/zachjs/sv2v.git&#xA;cd sv2v&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This creates the executable at &lt;code&gt;./bin/sv2v&lt;/code&gt;. Stack takes care of installing exact (compatible) versions of the compiler and sv2v&#39;s build dependencies.&lt;/p&gt; &#xA;&lt;p&gt;You can install the binary to your local bin path (typically &lt;code&gt;~/.local/bin&lt;/code&gt;) by running &lt;code&gt;stack install&lt;/code&gt;, or copy over the executable manually.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;sv2v takes in a list of files and prints the converted Verilog to &lt;code&gt;stdout&lt;/code&gt;. Using &lt;code&gt;--write=adjacent&lt;/code&gt; will create a converted &lt;code&gt;.v&lt;/code&gt; for every &lt;code&gt;.sv&lt;/code&gt; input file rather than printing to &lt;code&gt;stdout&lt;/code&gt;. &lt;code&gt;--write&lt;/code&gt;/&lt;code&gt;-w&lt;/code&gt; can also be used to specify a path to a &lt;code&gt;.v&lt;/code&gt; output file.&lt;/p&gt; &#xA;&lt;p&gt;Users may specify &lt;code&gt;include&lt;/code&gt; search paths, define macros during preprocessing, and exclude some of the conversions. Specifying &lt;code&gt;-&lt;/code&gt; as an input file will read from &lt;code&gt;stdin&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Below is the current usage printout. This interface is subject to change.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sv2v [OPTIONS] [FILES]&#xA;&#xA;Preprocessing:&#xA;  -I --incdir=DIR           Add directory to include search path&#xA;  -D --define=NAME[=VALUE]  Define a macro for preprocessing&#xA;     --siloed               Lex input files separately, so macros from&#xA;                            earlier files are not defined in later files&#xA;     --skip-preprocessor    Disable preprocessor&#xA;Conversion:&#xA;     --pass-through         Dump input without converting&#xA;  -E --exclude=CONV         Exclude a particular conversion (Always, Assert,&#xA;                            Interface, Logic, or UnbasedUnsized)&#xA;  -v --verbose              Retain certain conversion artifacts&#xA;  -w --write=MODE/FILE      How to write output; default is &#39;stdout&#39;; use&#xA;                            &#39;adjacent&#39; to create a .v file next to each input;&#xA;                            use a path ending in .v to write to a file&#xA;Other:&#xA;     --oversized-numbers    Disable standard-imposed 32-bit limit on unsized&#xA;                            number literals (e.g., &#39;h1_ffff_ffff, 4294967296)&#xA;     --dump-prefix=PATH     Create intermediate output files with the given&#xA;                            path prefix; used for internal debugging&#xA;     --help                 Display help message&#xA;     --version              Print version information&#xA;     --numeric-version      Print just the version number&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Supported Features&lt;/h2&gt; &#xA;&lt;p&gt;sv2v supports most synthesizable SystemVerilog features. Current notable exceptions include &lt;code&gt;defparam&lt;/code&gt; on interface instances, certain synthesizable usages of parameterized classes, and the &lt;code&gt;bind&lt;/code&gt; keyword. Assertions are also supported, but are simply dropped during conversion.&lt;/p&gt; &#xA;&lt;p&gt;If you find a bug or have a feature request, please &lt;a href=&#34;https://github.com/zachjs/sv2v/issues/new&#34;&gt;create an issue&lt;/a&gt;. Preference will be given to issues which include examples or test cases.&lt;/p&gt; &#xA;&lt;h2&gt;SystemVerilog Front End&lt;/h2&gt; &#xA;&lt;p&gt;This project contains a preprocessor, lexer, and parser, and an abstract syntax tree representation for a subset of the SystemVerilog specification. The parser is not very strict. The AST allows for the representation of syntactically (and semantically) invalid Verilog. The goal is to be more general in the representation to enable more standardized and straightforward conversion procedures. This could be extended into an independent and more fully-featured front end if there is significant interest.&lt;/p&gt; &#xA;&lt;h2&gt;Testing&lt;/h2&gt; &#xA;&lt;p&gt;Once the &lt;a href=&#34;https://raw.githubusercontent.com/zachjs/sv2v/master/#dependencies&#34;&gt;test dependencies&lt;/a&gt; are installed, tests can be run with &lt;code&gt;make test&lt;/code&gt;. GitHub Actions is used to automatically test commits.&lt;/p&gt; &#xA;&lt;p&gt;There is also a &lt;a href=&#34;https://github.com/SymbiFlow/sv-tests&#34;&gt;SystemVerilog compliance suite&lt;/a&gt; being created to test open-source tools&#39; SystemVerilog support. Although not every test in the suite is applicable, it has been a valuable asset in finding edge cases.&lt;/p&gt; &#xA;&lt;h2&gt;Acknowledgements&lt;/h2&gt; &#xA;&lt;p&gt;This project was originally forked from &lt;a href=&#34;https://github.com/tomahawkins/verilog&#34;&gt;Tom Hawkin&#39;s Verilog parser&lt;/a&gt;. While the front end has changed substantially to support the larger SystemVerilog standard, his project was a great starting point.&lt;/p&gt; &#xA;&lt;p&gt;Reid Long was invaluable in developing this tool, providing significant tests and advice, and isolating many bugs. His projects can be found &lt;a href=&#34;https://bitbucket.org/ReidLong/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Edric Kusuma helped me with the ins and outs of SystemVerilog, with which I had no prior experience, and has also helped with test cases.&lt;/p&gt; &#xA;&lt;p&gt;Since sv2v&#39;s public release, several people have taken the time to file detailed bug reports and feature requests. I greatly appreciate their help in furthering the project.&lt;/p&gt;</summary>
  </entry>
</feed>