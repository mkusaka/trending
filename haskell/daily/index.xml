<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-12-06T01:33:31Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Sheinxy/Advent2022</title>
    <updated>2022-12-06T01:33:31Z</updated>
    <id>tag:github.com,2022-12-06:/Sheinxy/Advent2022</id>
    <link href="https://github.com/Sheinxy/Advent2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Advent Of Code 2022&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;New year, same me&lt;/h2&gt; &#xA;&lt;p&gt;Watch me code in Haskell for 25 days straight&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Day 1&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Day 2&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Day 3&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Day 4&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Day 5&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 6&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 7&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 8&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 9&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 10&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 11&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 12&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 13&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 14&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 15&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 16&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 17&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 18&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 19&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 20&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 21&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 22&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 23&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 24&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Day 25&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Personnal Feedback&lt;/h2&gt; &#xA;&lt;h3&gt;Day 1:&lt;/h3&gt; &#xA;&lt;p&gt;Nothing quite remarkable, I wasn&#39;t going to use splitOn at first but I decided it was cleaner to use it (I am not sure it is standard though.)&lt;/p&gt; &#xA;&lt;h3&gt;Day 2:&lt;/h3&gt; &#xA;&lt;p&gt;Because this is really simple to solve, I tried to do it in the most cumbersome and compact way possible. Basically, the idea is to put everything in a matrix and notice that there is a cycle to the possible scores.&lt;/p&gt; &#xA;&lt;h3&gt;Day 3:&lt;/h3&gt; &#xA;&lt;p&gt;Weirdly enough, I really liked this one. I am quite proud of my solution :D&lt;/p&gt; &#xA;&lt;h3&gt;Day 4:&lt;/h3&gt; &#xA;&lt;p&gt;It is way too early for me to be awake, my solution is quite silly but it works.&lt;/p&gt; &#xA;&lt;h3&gt;Day 5:&lt;/h3&gt; &#xA;&lt;p&gt;The hardest part about this one was the parsing, and even that wasn&#39;t too hard&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mujx/hakatime</title>
    <updated>2022-12-06T01:33:31Z</updated>
    <id>tag:github.com,2022-12-06:/mujx/hakatime</id>
    <link href="https://github.com/mujx/hakatime" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Wakatime server implementation &amp; analytics dashboard&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hakatime&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://circleci.com/gh/mujx/hakatime&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/mujx/hakatime.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/mujx/hakatime/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/mujx/hakatime&#34; alt=&#34;Latest version&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://nixos.org/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Built_With-Nix-5277C3.svg?logo=nixos&amp;amp;labelColor=73C3D5&#34; alt=&#34;BuiltWithNix&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://paypal.me/sideriskonstantin&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;donate&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hakatime is a server implementation of &lt;a href=&#34;https://wakatime.com/&#34;&gt;Wakatime&lt;/a&gt;. You can use it as a self-hosted alternative.&lt;/p&gt; &#xA;&lt;p&gt;It comes together with a dashboard which provides a graphical representation of the collected data.&lt;/p&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Import Wakatime activity using an API token and a range of dates.&lt;/li&gt; &#xA; &lt;li&gt;See time spent on Github commits.&lt;/li&gt; &#xA; &lt;li&gt;Forward incoming heartbeats to another Wakatime compatible server (e.g &lt;code&gt;wakatime.com&lt;/code&gt;)&lt;/li&gt; &#xA; &lt;li&gt;Group projects together with tags (e.g &lt;code&gt;#work&lt;/code&gt;, &lt;code&gt;#personal&lt;/code&gt;) and view their aggregated statistics.&lt;/li&gt; &#xA; &lt;li&gt;User registration &amp;amp; login through the UI.&lt;/li&gt; &#xA; &lt;li&gt;Leaderboards for all the users of the instance.&lt;/li&gt; &#xA; &lt;li&gt;Badge generation for a project that displays that total amount of hours spent for a configurable time period. &lt;a href=&#34;https://hakatime.mtx-dev.xyz/badge/svg/f8c0f834-3747-4d3f-965b-6fa08c6dea94?days=7&#34;&gt;&lt;img src=&#34;https://hakatime.mtx-dev.xyz/badge/svg/f8c0f834-3747-4d3f-965b-6fa08c6dea94?days=14&#34; alt=&#34;my-app&#34;&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Global and per project charts &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Breakdown by project or language.&lt;/li&gt; &#xA;   &lt;li&gt;Breakdown by day of week and hour of the day.&lt;/li&gt; &#xA;   &lt;li&gt;Timeline of activity for a configurable time-frame.&lt;/li&gt; &#xA;   &lt;li&gt;Total time spent per file.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;API token management &amp;amp; generation.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Demo&lt;/h2&gt; &#xA;&lt;p&gt;There is an instance &lt;a href=&#34;https://hakatime.mtx-dev.xyz&#34;&gt;here&lt;/a&gt; that you can use to send data or browse around.&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;demo&lt;/code&gt; as username and &lt;code&gt;demodemo&lt;/code&gt; as password or create your own user to login. You can create an API token and try sending your data.&lt;/p&gt; &#xA;&lt;h2&gt;Client setup&lt;/h2&gt; &#xA;&lt;p&gt;After you&#39;ve generated a new API token from Hakatime&#39;s UI, update your &lt;code&gt;~/.wakatime.cfg&lt;/code&gt; file like below:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-ini&#34;&gt;[settings]&#xA;api_key=&amp;lt;generated_token&amp;gt;&#xA;&#xA;# e.g api_url=https://hakatime.mtx-dev.xyz/api/v1/users/current/heartbeats.bulk for the demo instance.&#xA;api_url=&amp;lt;hakatime_instance_url&amp;gt;/api/v1/users/current/heartbeats.bulk&#xA;&#xA;# e.g If you&#39;re using the docker-compose-deploy.yml to test things locally, use the following:&#xA;# api_url=http://localhost:8080/api/v1/users/current/heartbeats.bulk&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The file&#39;s location might be different depending on your system and editor. Please consult the &lt;a href=&#34;https://wakatime.com/plugins&#34;&gt;client docs&lt;/a&gt; for further information.&lt;/p&gt; &#xA;&lt;h2&gt;Deployment&lt;/h2&gt; &#xA;&lt;p&gt;You can use the following docker-compose setup for testing locally or an actual deployment. Change &lt;code&gt;HAKA_BADGE_URL&lt;/code&gt; to match the actual external endpoint of your instance.&lt;/p&gt; &#xA;&lt;p&gt;Deploying on ARM is also possible using the &lt;code&gt;mujx/hakatime:latest-arm&lt;/code&gt; or &lt;code&gt;mujx/hakatime:v1.7.2-arm&lt;/code&gt; image or the dedicated Dockerfile (&lt;a href=&#34;https://raw.githubusercontent.com/mujx/hakatime/master/Dockerfile.arm&#34;&gt;&lt;code&gt;Dockerfile.arm&lt;/code&gt;&lt;/a&gt;) to build the image.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;version: &#34;3&#34;&#xA;services:&#xA;  server:&#xA;    container_name: hakatime&#xA;    image: mujx/hakatime:v1.7.2&#xA;    environment:&#xA;      # DB settings.&#xA;      HAKA_DB_HOST: haka_db&#xA;      HAKA_DB_PORT: 5432&#xA;      HAKA_DB_NAME: test&#xA;      HAKA_DB_PASS: test&#xA;      HAKA_DB_USER: test&#xA;      # Server settings.&#xA;      # Fill out this field if the api is behind another path (e.g behind a reverse proxy).&#xA;      # This will adjust the Set-Cookie path for all the /auth related API calls.&#xA;      HAKA_API_PREFIX: &#34;&#34;&#xA;      # Update this with the external endpoint that you use to access hakatime.&#xA;      HAKA_BADGE_URL: &#34;http://localhost:8080&#34;&#xA;      HAKA_PORT: 8080&#xA;      HAKA_SHIELDS_IO_URL: &#34;https://img.shields.io&#34;&#xA;      HAKA_ENABLE_REGISTRATION: &#34;true&#34; # Toggle after you&#39;ve created your account.&#xA;      # Number of hours after which inactive browser sessions will expire (login required).&#xA;      HAKA_SESSION_EXPIRY: &#34;24&#34;&#xA;      HAKA_LOG_LEVEL: &#34;info&#34; # Control the verbosity of the logger.&#xA;      HAKA_ENV: &#34;dev&#34; # Use a json logger for production, otherwise key=value pairs.&#xA;      HAKA_HTTP_LOG: &#34;true&#34; # If you want to log http requests.&#xA;      GITHUB_TOKEN: &#34;&amp;lt;token&amp;gt;&#34; # If you want to retrieve time spent per commit. No extra scope is required.&#xA;      # Add the following variables if you want to forward any received heartbeats to another&#xA;      # Wakatime compatible server.&#xA;      HAKA_REMOTE_WRITE_URL: &#34;https://wakatime.com/api/v1/users/current/heartbeats.bulk&#34;&#xA;      HAKA_REMOTE_WRITE_TOKEN: &#34;&amp;lt;token&amp;gt;&#34;&#xA;    ports:&#xA;      - &#34;127.0.0.1:8080:8080&#34;&#xA;  haka_db:&#xA;    container_name: haka_db&#xA;    image: postgres:12-alpine&#xA;    environment:&#xA;      POSTGRES_DB: test&#xA;      POSTGRES_PASSWORD: test&#xA;      POSTGRES_USER: test&#xA;    volumes:&#xA;      - deploy_db_data:/var/lib/postgresql/data&#xA;&#xA;volumes:&#xA;  deploy_db_data: {}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To start all the services run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ docker-compose -f ./docker-compose-deploy.yml up&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and navigate to &lt;a href=&#34;http://localhost:8080&#34;&gt;http://localhost:8080&lt;/a&gt; to access the dashboard.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;h3&gt;Server&lt;/h3&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt; (tested with 8.8 &amp;amp; 8.10)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/docs/11/libpq.html&#34;&gt;libpq&lt;/a&gt; (PostgreSQL bindings)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;cabal-install&lt;/a&gt; (Build system for Haskell)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build&#xA;cabal run exe:hakatime -- run&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Dashboard&lt;/h3&gt; &#xA;&lt;p&gt;The output files will be located at &lt;code&gt;dashboard/dist&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Requirements:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Node.js &amp;amp; npm&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd dashboard&#xA;&#xA;npm install&#xA;npm run prod&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;CLI options&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;hakatime :: v1.7.2&#xA;&#xA;Usage: hakatime COMMAND&#xA;  Wakatime server implementation&#xA;&#xA;Available options:&#xA;  -h,--help                Show this help text&#xA;&#xA;Available commands:&#xA;  create-token             Create a new auth token&#xA;  create-user              Create a new user account&#xA;  run-migrations           Apply pending database migrations&#xA;  run                      Start the Server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Screens&lt;/h2&gt; &#xA;&lt;h3&gt;Overview&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mujx/hakatime/master/img/overview.png&#34; alt=&#34;Overview Page&#34; title=&#34;Overview Page&#34;&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Projects&lt;/h3&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mujx/hakatime/master/img/projects.png&#34; alt=&#34;Projects Page&#34; title=&#34;Projects Page&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/mujx/hakatime/master/img/commits.png&#34; alt=&#34;Projects Page - Commits&#34; title=&#34;Projects Page - Commits&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Any kind of contribution is greatly appreciated. This could be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Bug fixes&lt;/li&gt; &#xA; &lt;li&gt;Suggesting/Implementing new features&lt;/li&gt; &#xA; &lt;li&gt;UI/UX improvements/suggestions&lt;/li&gt; &#xA; &lt;li&gt;Code refactoring&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>mstksg/advent-of-code-2022</title>
    <updated>2022-12-06T01:33:31Z</updated>
    <id>tag:github.com,2022-12-06:/mstksg/advent-of-code-2022</id>
    <link href="https://github.com/mstksg/advent-of-code-2022" rel="alternate"></link>
    <summary type="html">&lt;p&gt;🎅🌟❄️☃️🎄🎁&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Advent of Code 2022&lt;/h1&gt; &#xA;&lt;!--&#xA;This file generated by the build script at ./Build.hs&#xA;--&gt; &#xA;&lt;p&gt;&lt;em&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2016&#34;&gt;2016&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2017&#34;&gt;2017&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2018&#34;&gt;2018&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2019&#34;&gt;2019&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2020&#34;&gt;2020&lt;/a&gt;&lt;/em&gt; / &lt;em&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2021&#34;&gt;2021&lt;/a&gt;&lt;/em&gt;&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s the most wonderful time of the year!&lt;/p&gt; &#xA;&lt;p&gt;My &lt;a href=&#34;https://adventofcode.com/2022&#34;&gt;Advent of Code 2022&lt;/a&gt; Haskell solutions here, along with an automated fetching, testing, running environment (powered by the &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/advent-of-code-api&#34;&gt;advent-of-code-api&lt;/a&gt;&lt;/em&gt; library). The interactive development environment and runner/bench marker/viewer/tester has been pulled out &lt;a href=&#34;https://github.com/mstksg/advent-of-code-dev&#34;&gt;here&lt;/a&gt;, so this is implemented as &#34;fork&#34; of it with my own solutions and reflections.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/main/reflections.md&#34;&gt;reflections&lt;/a&gt; (with &lt;a href=&#34;http://feeds.feedburner.com/jle-advent-of-code-2022&#34;&gt;rss feed&lt;/a&gt;) and &lt;a href=&#34;https://mstksg.github.io/advent-of-code-2022/&#34;&gt;package haddocks&lt;/a&gt; --- more info below!&lt;/p&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/main/reflections.md&#34;&gt;Reflections and Benchmarks&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://feeds.feedburner.com/jle-advent-of-code-2022&#34;&gt;Available as RSS Feed&lt;/a&gt;&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Challenge&lt;/th&gt; &#xA;   &lt;th&gt;Reflections&lt;/th&gt; &#xA;   &lt;th&gt;Code&lt;/th&gt; &#xA;   &lt;th&gt;Rendered&lt;/th&gt; &#xA;   &lt;th&gt;Benchmarks&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 1&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-1&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/src/AOC/Challenge/Day01.hs&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mstksg.github.io/advent-of-code-2022/src/AOC.Challenge.Day01.html&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-1-benchmarks&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 2&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-2&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/src/AOC/Challenge/Day02.hs&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mstksg.github.io/advent-of-code-2022/src/AOC.Challenge.Day02.html&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-2-benchmarks&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 3&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-3&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/src/AOC/Challenge/Day03.hs&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mstksg.github.io/advent-of-code-2022/src/AOC.Challenge.Day03.html&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-3-benchmarks&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 4&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-4&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/src/AOC/Challenge/Day04.hs&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mstksg.github.io/advent-of-code-2022/src/AOC.Challenge.Day04.html&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-4-benchmarks&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 5&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/src/AOC/Challenge/Day05.hs&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://mstksg.github.io/advent-of-code-2022/src/AOC.Challenge.Day05.html&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/mstksg/advent-of-code-2022/raw/master/reflections.md#day-5-benchmarks&#34;&gt;x&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 6&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 7&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 8&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 9&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 10&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 11&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 12&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 13&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 14&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 15&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 16&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 17&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 18&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 19&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 20&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 21&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 22&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 23&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 24&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Day 25&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;&#34;Rendered&#34; links go to haddock source renders for code, with reflections in the documentation. Haddock source renders have hyperlinked identifiers, so you can follow any unrecognized identifiers to see where I have defined them in the library.&lt;/p&gt; &#xA;&lt;h3&gt;&lt;code&gt;:~&amp;gt;&lt;/code&gt; type&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re looking at my actual github solutions, you&#39;ll notice that this year I&#39;m implementing my solutions in terms of a &lt;code&gt;:~&amp;gt;&lt;/code&gt; record type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;data a :~&amp;gt; b = MkSol&#xA;    { sParse :: String -&amp;gt; Maybe a    -- ^ parse input into an `a`&#xA;    , sSolve :: a      -&amp;gt; Maybe b    -- ^ solve an `a` input to a `b` solution&#xA;    , sShow  :: b      -&amp;gt; String     -- ^ print out the `b` solution for submission&#xA;    }&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;An &lt;code&gt;a :~&amp;gt; b&lt;/code&gt; is a solution to a challenge expecting input of type &lt;code&gt;a&lt;/code&gt; and producing answers of type &lt;code&gt;b&lt;/code&gt;. It also packs in functions to parse a &lt;code&gt;String&lt;/code&gt; into an &lt;code&gt;a&lt;/code&gt;, and functions to show a &lt;code&gt;b&lt;/code&gt; as a &lt;code&gt;String&lt;/code&gt; to submit as an answer.&lt;/p&gt; &#xA;&lt;p&gt;This helps me mentally separate out parsing, solving, and showing, allowing for some cleaner code and an easier time planning my solution.&lt;/p&gt; &#xA;&lt;p&gt;Such a challenge can be &#34;run&#34; on string inputs by feeding the string into &lt;code&gt;sParse&lt;/code&gt;, then &lt;code&gt;sSolve&lt;/code&gt;, then &lt;code&gt;sShow&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | Run a &#39;:~&amp;gt;&#39; on some input, retuning &#39;Maybe&#39;&#xA;runSolution :: Challenge -&amp;gt; String -&amp;gt; Maybe String&#xA;runSolution MkSol{..} s = do&#xA;    x &amp;lt;- sParse s&#xA;    y &amp;lt;- sSolve x&#xA;    pure (sShow y)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In the actual library, I have &lt;code&gt;runSolution&lt;/code&gt; return an &lt;code&gt;Either&lt;/code&gt; so I can debug which stage the error happened in.&lt;/p&gt; &#xA;&lt;p&gt;You might also notice the function &lt;code&gt;dyno_&lt;/code&gt;, used like &lt;code&gt;dyno_ &#34;limit&#34; 10000&lt;/code&gt;. This is how I implement parameters in problems that vary between test data and actual input. For example, Day 6 involved finding points that had a total distance of less than 10000, but for the test input, we found the points that had a total distance of less than 32. So, I have a system that lets me write &lt;code&gt;dyno_ &#34;limit&#34; 10000&lt;/code&gt; in my code instead of hard-coding in &lt;code&gt;10000&lt;/code&gt;. This &lt;code&gt;10000&lt;/code&gt; would be replaced by &lt;code&gt;32&lt;/code&gt; when running with test data (which is parsed from &lt;a href=&#34;https://github.com/mstksg/advent-of-code-2018/raw/main/test-data/06b.txt&#34;&gt;this file&lt;/a&gt;)&lt;/p&gt; &#xA;&lt;h2&gt;Interactive&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;em&gt;&lt;a href=&#34;https://mstksg.github.io/advent-of-code-2022/AOC2022-Run-Interactive.html&#34;&gt;AOC.Run.Interactive&lt;/a&gt;&lt;/em&gt; module has code (powered by &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/advent-of-code-api&#34;&gt;advent-of-code-api&lt;/a&gt;&lt;/em&gt;) for testing your solutions and submitting within GHCI, so you don&#39;t have to re-compile. If you edit your solution programs, they are automatically updated when you hit &lt;code&gt;:r&lt;/code&gt; in ghci.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;ghci&amp;gt; execSolution_   $ solSpec &#39;day02a   -- get answer for challenge based on solution&#xA;ghci&amp;gt; testSolution_   $ solSpec &#39;day02a   -- run solution against test suite&#xA;ghci&amp;gt; viewPrompt_     $ solSpec &#39;day02a   -- view the prompt for a part&#xA;ghci&amp;gt; waitForPrompt_  $ solSpec &#39;day02a   -- count down to the prompt for a part&#xA;ghci&amp;gt; submitSolution_ $ solSpec &#39;day02a   -- submit a solution, and retry after cooldown automatically&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;These are loaded with session key stored in the configuration file (see next section).&lt;/p&gt; &#xA;&lt;h2&gt;Executable&lt;/h2&gt; &#xA;&lt;p&gt;Comes with test examples given in problems.&lt;/p&gt; &#xA;&lt;p&gt;You can install using &lt;code&gt;stack&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ git clone https://github.com/mstksg/advent-of-code-2022&#xA;$ cd advent-of-code-2022&#xA;$ stack setup&#xA;$ stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The executable &lt;code&gt;aoc2022&lt;/code&gt; includes a testing and benchmark suite, as well as a way to view prompts within the command line:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ aoc2022 --help&#xA;aoc2022 - Advent of Code 2022 challenge runner&#xA;&#xA;Usage: aoc2022 [-c|--config PATH] COMMAND&#xA;  Run challenges from Advent of Code 2022. Available days: 1, 2, 3 (..)&#xA;&#xA;Available options:&#xA;  -c,--config PATH         Path to configuration file (default: aoc-conf.yaml)&#xA;  -h,--help                Show this help text&#xA;&#xA;Available commands:&#xA;  run                      Run, test, and benchmark challenges&#xA;  view                     View a prompt for a given challenge&#xA;  submit                   Test and submit answers for challenges&#xA;  test                     Alias for run --test&#xA;  bench                    Alias for run --bench&#xA;  countdown                Alias for view --countdown&#xA;&#xA;$ aoc2022 run 3 b&#xA;&amp;gt;&amp;gt; Day 03b&#xA;&amp;gt;&amp;gt; [✓] 243&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can supply input via stdin with &lt;code&gt;--stdin&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ aoc2022 run 1 --stdin&#xA;&amp;gt;&amp;gt; Day 01a&#xA;+1&#xA;+2&#xA;+1&#xA;-3&#xA;&amp;lt;Ctrl+D&amp;gt;&#xA;[?] 1&#xA;&amp;gt;&amp;gt; Day 01b&#xA;[?] 1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Benchmarking is implemented using &lt;em&gt;criterion&lt;/em&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ aoc2022 bench 2&#xA;&amp;gt;&amp;gt; Day 02a&#xA;benchmarking...&#xA;time                 1.317 ms   (1.271 ms .. 1.392 ms)&#xA;                     0.982 R²   (0.966 R² .. 0.999 R²)&#xA;mean                 1.324 ms   (1.298 ms .. 1.373 ms)&#xA;std dev              115.5 μs   (77.34 μs .. 189.0 μs)&#xA;variance introduced by outliers: 65% (severely inflated)&#xA;&#xA;&amp;gt;&amp;gt; Day 02b&#xA;benchmarking...&#xA;time                 69.61 ms   (68.29 ms .. 72.09 ms)&#xA;                     0.998 R²   (0.996 R² .. 1.000 R²)&#xA;mean                 69.08 ms   (68.47 ms .. 69.99 ms)&#xA;std dev              1.327 ms   (840.8 μs .. 1.835 ms)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Test suites run the example problems given in the puzzle description, and outputs are colorized in ANSI terminals.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ aoc2022 test 1&#xA;&amp;gt;&amp;gt; Day 01a&#xA;[✓] (3)&#xA;[✓] (3)&#xA;[✓] (0)&#xA;[✓] (-6)&#xA;[✓] Passed 4 out of 4 test(s)&#xA;[✓] 416&#xA;&amp;gt;&amp;gt; Day 01b&#xA;[✓] (2)&#xA;[✓] (0)&#xA;[✓] (10)&#xA;[✓] (5)&#xA;[✓] (14)&#xA;[✓] Passed 5 out of 5 test(s)&#xA;[✓] 56752&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This should only work if you&#39;re running &lt;code&gt;aoc2022&lt;/code&gt; in the project directory.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;To run on actual inputs&lt;/strong&gt;, the executable expects inputs to be found in the folder &lt;code&gt;data/XX.txt&lt;/code&gt; in the directory you are running in. That is, the input for Day 7 will be expected at &lt;code&gt;data/07.txt&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;aoc2022 will download missing input files&lt;/em&gt;, but requires a session token. This can be provided in &lt;code&gt;aoc-conf.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;session:  [[ session token goes here ]]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Session keys are also required to download &#34;Part 2&#34; prompts for each challenge.&lt;/p&gt; &#xA;&lt;p&gt;You can &#34;lock in&#34; your current answers (telling the executable that those are the correct answers) by passing in &lt;code&gt;--lock&lt;/code&gt;. This will lock in any final puzzle solutions encountered as the verified official answers. Later, if you edit or modify your solutions, they will be checked on the locked-in answers.&lt;/p&gt; &#xA;&lt;p&gt;These are stored in &lt;code&gt;data/ans/XXpart.txt&lt;/code&gt;. That is, the target output for Day 7 (Part 2, &lt;code&gt;b&lt;/code&gt;) will be expected at &lt;code&gt;data/ans/07b.txt&lt;/code&gt;. You can also manually edit these files.&lt;/p&gt; &#xA;&lt;p&gt;You can view prompts: (use &lt;code&gt;--countdown&lt;/code&gt; to count down until a prompt is released, and display immediately)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ aoc2022 view 3 b&#xA;&amp;gt;&amp;gt; Day 03b&#xA;--- Part Two ---&#xA;----------------&#xA;&#xA;Amidst the chaos, you notice that exactly one claim doesn&#39;t overlap by&#xA;even a single square inch of fabric with any other claim. If you can&#xA;somehow draw attention to it, maybe the Elves will be able to make&#xA;Santa&#39;s suit after all!&#xA;&#xA;For example, in the claims above, only claim `3` is intact after all&#xA;claims are made.&#xA;&#xA;*What is the ID of the only claim that doesn&#39;t overlap?*&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also submit answers:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ aoc2022 submit 1 a&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Submissions will automatically run the test suite. If any tests fail, you will be asked to confirm submission or else abort. The submit command will output the result of your submission: The message from the AoC website, and whether or not your answer was correct (or invalid or ignored). Answers that are confirmed correct will be locked in and saved for future testing against, in case you change your solution.&lt;/p&gt; &#xA;&lt;p&gt;All networking features are powered by &lt;em&gt;&lt;a href=&#34;https://hackage.haskell.org/package/advent-of-code-api&#34;&gt;advent-of-code-api&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;</summary>
  </entry>
</feed>