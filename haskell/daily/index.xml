<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-05-31T01:41:52Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>NeuralNine/config-files</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/NeuralNine/config-files</id>
    <link href="https://github.com/NeuralNine/config-files" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A collection of my config files.&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>geohot/configuration</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/geohot/configuration</id>
    <link href="https://github.com/geohot/configuration" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Like some files bro&lt;/p&gt;&lt;hr&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/amazonka</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/brendanhay/amazonka</id>
    <link href="https://github.com/brendanhay/amazonka" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Amazon Web Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;&lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opensource.org/licenses/MPL-2.0&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-MPL%202.0-blue.svg?sanitize=true&#34; alt=&#34;MPL2&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/amazonka&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/amazonka.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/build/badge.svg?sanitize=true&#34; alt=&#34;Build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/gen/badge.svg?sanitize=true&#34; alt=&#34;Gen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/brendanhay/amazonka/actions&#34;&gt;&lt;img src=&#34;https://github.com/brendanhay/amazonka/workflows/docs/badge.svg?sanitize=true&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;An Amazon Web Services SDK for Haskell with support for most public services. Parts of the code contained in this repository are auto-generated and automatically kept up to date with Amazon&#39;s latest service APIs.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;You can find the latest Haddock documentation for each respective library on the &lt;a href=&#34;https://www.brendanhay.nz/amazonka&#34;&gt;Amazonka&lt;/a&gt; website.&lt;/li&gt; &#xA; &lt;li&gt;A release changelog can be found in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka/CHANGELOG.md&#34;&gt;lib/amazonka/CHANGELOG.md&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;For problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/amazonka/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#directory-layout&#34;&gt;Directory Layout&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#supported-platforms-and-ghc-versions&#34;&gt;Supported Platforms and GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#getting-started&#34;&gt;Getting Started&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-project&#34;&gt;Building the Project&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#building-the-documentation&#34;&gt;Building the Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#running-the-code-generator&#34;&gt;Running the Code Generator&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#code-formatting&#34;&gt;Code Formatting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/#third-party-packages&#34;&gt;Third Party Packages&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Amazonka is licensed under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The AWS service descriptions are licensed under Apache 2.0. Source files derived from the service descriptions contain an additional licensing clause in their header.&lt;/p&gt; &#xA;&lt;h2&gt;Directory Layout&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka&#34;&gt;&lt;code&gt;lib/amazonka&lt;/code&gt;&lt;/a&gt;: The main library containing setup, authentication, and send logic. This will be your primary dependency.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;lib/service/amazonka-*&lt;/code&gt;: A library per supported Amazon Web Service, you&#39;ll need to add a dependency on each selected service library.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-core&#34;&gt;&lt;code&gt;lib/amazonka-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;amazonka-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/lib/amazonka-test&#34;&gt;&lt;code&gt;lib/amazonka-test&lt;/code&gt;&lt;/a&gt;: Common test functionality.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: Basic examples for using the service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;: Service configuration, templates, and assets used by the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt;: The website documentation and related build code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code and configuration generators.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/nix&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt;: Nix configuration code for toolchain packages.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the project, such as the release lifecycle.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/tools&#34;&gt;&lt;code&gt;tools&lt;/code&gt;&lt;/a&gt;: Custom bazel rules.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/third_party&#34;&gt;&lt;code&gt;third_party&lt;/code&gt;&lt;/a&gt;: Third party packages and patches.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Supported Platforms and GHC Versions&lt;/h2&gt; &#xA;&lt;p&gt;GHC versions &lt;code&gt;8.8.4&lt;/code&gt; and &lt;code&gt;8.10.7&lt;/code&gt; are officially supported and tested on NixOS, Ubuntu, and macOS. GHC &lt;code&gt;8.6.5&lt;/code&gt; may also work, but is not tested by our continuous integration pipeline.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;This repository is built using a combination of &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; and your choice of &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; or Cabal. If you&#39;re just using Amazonka as a git dependency in your Cabal or Stack project, you can skip these steps. But if you plan on contributing to the codebase - welcome, read on!&lt;/p&gt; &#xA;&lt;h3&gt;1. Clone this repository&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone git@github.com:brendanhay/amazonka.git&#xA;cd amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;2. Setup Nix&lt;/h3&gt; &#xA;&lt;p&gt;Building the code in this repository requires various development dependencies (e.g. &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt;, &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;, &lt;a href=&#34;https://www.haskell.org/ghc/&#34;&gt;GHC&lt;/a&gt;.)&lt;/p&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; package manager is used to obtain and build the other dependencies in a &lt;a href=&#34;https://sre.google/sre-book/release-engineering/#hermetic-builds-nqslhnid&#34;&gt;hermetic&lt;/a&gt; environment. You can install Nix by following the &lt;a href=&#34;https://nixos.org/guides/install-nix.html&#34;&gt;official installation instructions&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;sh &amp;lt;(curl -L https://nixos.org/nix/install) --daemon&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once Nix is setup, you can enable the &lt;a href=&#34;https://amazonka.cachix.org&#34;&gt;cache&lt;/a&gt; to avoid building dependencies:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-env -iA cachix -f https://cachix.org/api/v1/install&#xA;cachix use amazonka&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;3. Enter a Nix Shell&lt;/h3&gt; &#xA;&lt;p&gt;The build tools are installed and activated upon entering a &lt;a href=&#34;https://nixos.org/nix/&#34;&gt;Nix&lt;/a&gt; shell, which is achieved by running the following command in the root of the repository:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also enter a shell and explicitly specify the GHC version:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;nix-shell --argstr ghcVersion 884&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Optionally, if you have &lt;a href=&#34;https://direnv.net&#34;&gt;Direnv&lt;/a&gt; and &lt;a href=&#34;https://github.com/nix-community/lorri&#34;&gt;lorri&lt;/a&gt; installed you can use the provided &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/.envrc&#34;&gt;.envrc&lt;/a&gt; instead, which will also add the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts&#34;&gt;scripts&lt;/a&gt; directory to your &lt;code&gt;PATH&lt;/code&gt;. You can extend this by adding your own uncommitted &lt;code&gt;.envrc.local&lt;/code&gt; file. See the &lt;a href=&#34;https://github.com/direnv/direnv/wiki&#34;&gt;Direnv Wiki&lt;/a&gt; for various recipes.&lt;/p&gt; &#xA;&lt;h2&gt;Building the Project&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;The following commands assume you&#39;re already in a nix-shell outlined in the previous step.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h3&gt;Cabal&lt;/h3&gt; &#xA;&lt;p&gt;If you&#39;re familiar with Cabal, you can build &lt;code&gt;amazonka-*&lt;/code&gt; packages via:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build amazonka amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or the entire project (which will take a very long time!):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cabal build all&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Bazel&lt;/h3&gt; &#xA;&lt;p&gt;Alternatively, if you plan on contributing to the project or want to perform code generation, you will need to familiarise yourself with &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt;. You can build packages by specifying one or more targets using &lt;a href=&#34;https://docs.bazel.build/versions/4.1.0/build-ref.html#labels&#34;&gt;Bazel&#39;s label&lt;/a&gt; syntax:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/amazonka //lib/services/amazonka-s3&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or build all Haskell libraries in the project using the &lt;code&gt;...&lt;/code&gt; wildcard:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //lib/...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To view what targets are available in the workspace:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel query //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;By default, the &lt;code&gt;bazel&lt;/code&gt; command will use the same GHC version as the Nix shell&#39;s &lt;code&gt;ghcVersion&lt;/code&gt; argument. You can choose a different GHC version using &lt;code&gt;nix-shell --argstr ghcVersion 884&lt;/code&gt; - which is just a synonym for &lt;code&gt;bazel build --//tools/ghc:version=884&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Building the Documentation&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/docs&#34;&gt;docs&lt;/a&gt; Bazel package contains the Haddock target and Hugo static site definition and markdown content. To build the site locally, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel build //docs:bundle&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can serve the documentation site locally on &lt;code&gt;http://localhost:1313&lt;/code&gt; by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bazel run //docs:serve&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Running the Code Generator&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/gen&#34;&gt;gen&lt;/a&gt; Bazel package contains code generators for synthesising Haskell data types, packages, and configuration from the botocore service definitions.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate&#34;&gt;scripts/generate&lt;/a&gt; will run the code generator for all services configured in &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/services&lt;/a&gt;, for example:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or, you can selectively run the generator on one or more services:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate ec2 s3 iam&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To update the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/botocore&#34;&gt;botocore&lt;/a&gt; service definitions used by the generator, you can run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/update-botocore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/scripts/generate-configs&#34;&gt;scripts/generate-configs&lt;/a&gt; will run the config generator to produce placeholder &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/config/services&#34;&gt;config/serivces&lt;/a&gt; configurations for the version of botocore pinned in the &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/amazonka/main/WORKSPACE&#34;&gt;WORKSPACE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To generate any missing service configurations:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;./scripts/generate-configs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Service configurations generated in this way are intended as examples only and the resulting &lt;code&gt;configs/services/&amp;lt;name&amp;gt;.json:libraryName&lt;/code&gt; (Haskell package name) and &lt;code&gt;configs/annexes/&amp;lt;name&amp;gt;.json:serviceAbbreviation&lt;/code&gt; (Haskell package namespace) should be manually verified and curated as necessary.&lt;/p&gt; &#xA;&lt;p&gt;For pull requests which affect generated output please &lt;em&gt;do not include&lt;/em&gt; the regenerated &lt;code&gt;amazonka-*&lt;/code&gt; packages, only commit updates to the build rules, documentation, generator, and related configuration. This ensures the Continuous Integration process is the single source of truth for the generated code and reduces noise in pull requests, keeping them reviewable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h2&gt;Code Formatting&lt;/h2&gt; &#xA;&lt;p&gt;Please use &lt;code&gt;./scripts/format&lt;/code&gt; frequently - it&#39;s OK, I hate 2 spaces too, we&#39;re in this together.&lt;/p&gt; &#xA;&lt;h2&gt;Third Party Packages&lt;/h2&gt; &#xA;&lt;p&gt;When naming an additional library which provides supplemental functionality to &lt;code&gt;amazonka&lt;/code&gt;, if you want to use the &lt;code&gt;amazonka-*&lt;/code&gt; namespace, then please consider prefixing your package names with &lt;code&gt;amazonka-contrib-*&lt;/code&gt;. For example, &lt;a href=&#34;https://hackage.haskell.org/package/amazonka-contrib-rds-utils&#34;&gt;amazonka-contrib-rds-utils&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This minimises potential future collisions with auto-generated package names and new AWS service and product releases.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>hasura/graphql-engine</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/hasura/graphql-engine</id>
    <link href="https://github.com/hasura/graphql-engine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blazing fast, instant realtime GraphQL APIs on your DB with fine grained access control, also trigger webhooks on database events.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Hasura GraphQL Engine&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hasura/graphql-engine/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/hasura/graphql-engine&#34; alt=&#34;Latest release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/docs&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-v2.x-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://discord.gg/vBPpJkS&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-discord-brightgreen.svg?logo=discord&amp;amp;style=flat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/intent/follow?screen_name=HasuraHQ&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Follow-HasuraHQ-blue.svg?style=flat&amp;amp;logo=twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/newsletter-subscribe-yellow.svg?style=flat&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Hasura is an open source product that accelerates API development by 10x by giving you &lt;a href=&#34;https://hasura.io/graphql/&#34;&gt;GraphQL&lt;/a&gt; or REST APIs with built in authorization on your data, instantly.&lt;/p&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/demo.gif&#34; alt=&#34;Hasura GraphQL Engine Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/realtime.gif&#34; alt=&#34;Hasura GraphQL Engine Realtime Demo&#34;&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Make powerful queries&lt;/strong&gt;: Built-in filtering, pagination, pattern search, bulk insert, update, delete mutations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Works with existing, live databases&lt;/strong&gt;: Point it to an existing database to instantly get a ready-to-use GraphQL API&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Realtime&lt;/strong&gt;: Convert any GraphQL query to a live query by using subscriptions&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Merge remote schemas&lt;/strong&gt;: Access custom GraphQL schemas for business logic via a single GraphQL Engine endpoint. &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;&lt;strong&gt;Read more&lt;/strong&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Extend with Actions&lt;/strong&gt;: Write REST APIs to extend Hasura’s schema with custom business logic.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Trigger webhooks or serverless functions&lt;/strong&gt;: On Postgres insert/update/delete events (&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scheduled Triggers&lt;/strong&gt;: Execute custom business logic at specific points in time using a cron config or a one-off event.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Fine-grained access control&lt;/strong&gt;: Dynamic access control that integrates with your auth system (eg: auth0, firebase-auth)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Admin UI &amp;amp; Migrations&lt;/strong&gt;: Admin UI &amp;amp; Rails-inspired schema migrations&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Supported Databases&lt;/strong&gt;: Supports PostgreSQL (and its flavours), MS SQL Server and Big Query. Support for more &lt;a href=&#34;https://hasura.io/graphql/database/&#34;&gt;databases&lt;/a&gt; coming soon.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Read more at &lt;a href=&#34;https://hasura.io&#34;&gt;hasura.io&lt;/a&gt; and the &lt;a href=&#34;https://hasura.io/docs/&#34;&gt;docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Table of contents&lt;/h2&gt; &#xA;&lt;!-- markdown-toc start - Don&#39;t edit this section. Run M-x markdown-toc-refresh-toc --&gt; &#xA;&lt;p&gt;&lt;strong&gt;Table of Contents&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#quickstart&#34;&gt;Quickstart:&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#one-click-deployment-on-hasura-cloud&#34;&gt;One-click deployment on Hasura Cloud&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-one-click-deployment-options&#34;&gt;Other one-click deployment options&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#other-deployment-methods&#34;&gt;Other deployment methods&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#architecture&#34;&gt;Architecture&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#client-side-tooling&#34;&gt;Client-side tooling&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#add-business-logic&#34;&gt;Add business logic&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#remote-schemas&#34;&gt;Remote schemas&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#trigger-webhooks-on-database-events&#34;&gt;Trigger webhooks on database events&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#demos&#34;&gt;Demos&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#realtime-applications&#34;&gt;Realtime applications&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#videos&#34;&gt;Videos&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#support--troubleshooting&#34;&gt;Support &amp;amp; Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#stay-up-to-date&#34;&gt;Stay up to date&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#brand-assets&#34;&gt;Brand assets&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#license&#34;&gt;License&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/#translations&#34;&gt;Translations&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;!-- markdown-toc end --&gt; &#xA;&lt;h2&gt;Quickstart:&lt;/h2&gt; &#xA;&lt;h3&gt;One-click deployment on Hasura Cloud&lt;/h3&gt; &#xA;&lt;p&gt;The fastest and easiest way to try Hasura out is via &lt;a href=&#34;https://hasura.io/docs/latest/graphql/cloud/getting-started/index.html&#34;&gt;Hasura Cloud&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Click on the following button to deploy GraphQL engine on Hasura Cloud including Postgres add-on or using an existing Postgres database:&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;https://cloud.hasura.io/signup&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/deploy_to_hasura.png&#34; alt=&#34;Deploy to Hasura Cloud&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Open the Hasura console&lt;/p&gt; &lt;p&gt;Click on the button &#34;Launch console&#34; to open the Hasura console.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make your first GraphQL query&lt;/p&gt; &lt;p&gt;Create a table and instantly run your first query. Follow this &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/first-graphql-query.html&#34;&gt;simple guide&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Other one-click deployment options&lt;/h3&gt; &#xA;&lt;p&gt;Check out the instructions for the following one-click deployment options:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Infra provider&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;One-click link&lt;/strong&gt;&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;&lt;strong&gt;Additional information&lt;/strong&gt;&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Heroku&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://heroku.com/deploy?template=https://github.com/hasura/graphql-engine-heroku&#34;&gt;&lt;img src=&#34;https://www.herokucdn.com/deploy/button.svg?sanitize=true&#34; alt=&#34;Deploy to Heroku&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/heroku-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;DigitalOcean&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://marketplace.digitalocean.com/apps/hasura?action=deploy&amp;amp;refcode=c4d9092d2c48&amp;amp;utm_source=hasura&amp;amp;utm_campaign=readme&#34;&gt;&lt;img src=&#34;https://graphql-engine-cdn.hasura.io/img/create_hasura_droplet_200px.png&#34; alt=&#34;Deploy to DigitalOcean&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/digital-ocean-one-click.html#hasura-graphql-engine-digitalocean-one-click-app&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Azure&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://portal.azure.com/#create/Microsoft.Template/uri/https%3a%2f%2fraw.githubusercontent.com%2fhasura%2fgraphql-engine%2fmaster%2finstall-manifests%2fazure-container-with-pg%2fazuredeploy.json&#34;&gt;&lt;img src=&#34;http://azuredeploy.net/deploybutton.png&#34; alt=&#34;Deploy to Azure&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/azure-container-instances-postgres.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;Render&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://render.com/deploy?repo=https://github.com/render-examples/hasura-graphql&#34;&gt;&lt;img src=&#34;https://render.com/images/deploy-to-render-button.svg?sanitize=true&#34; alt=&#34;Deploy to Render&#34;&gt;&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/guides/deployment/render-one-click.html&#34;&gt;docs&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h3&gt;Other deployment methods&lt;/h3&gt; &#xA;&lt;p&gt;For Docker-based deployment and advanced configuration options, see &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/getting-started/index.html&#34;&gt;deployment guides&lt;/a&gt; or &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/install-manifests&#34;&gt;install manifests&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The Hasura GraphQL Engine fronts a Postgres database instance and can accept GraphQL requests from your client apps. It can be configured to work with your existing auth system and can handle access control using field-level rules with dynamic variables from your auth system.&lt;/p&gt; &#xA;&lt;p&gt;You can also merge remote GraphQL schemas and provide a unified GraphQL API.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/hasura-arch.svg?sanitize=true&#34; alt=&#34;Hasura GraphQL Engine architecture&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Client-side tooling&lt;/h2&gt; &#xA;&lt;p&gt;Hasura works with any GraphQL client. See &lt;a href=&#34;https://github.com/chentsulin/awesome-graphql&#34;&gt;awesome-graphql&lt;/a&gt; for a list of clients. Our &lt;a href=&#34;https://hasura.io/learn/#frontend-tutorial&#34;&gt;frontend tutorial series&lt;/a&gt; also have integrations with GraphQL clients for different frameworks.&lt;/p&gt; &#xA;&lt;h2&gt;Add business logic&lt;/h2&gt; &#xA;&lt;p&gt;GraphQL Engine provides easy-to-reason, scalable and performant methods for adding custom business logic to your backend:&lt;/p&gt; &#xA;&lt;h3&gt;Remote schemas&lt;/h3&gt; &#xA;&lt;p&gt;Add custom resolvers in a remote schema in addition to Hasura&#39;s database-based GraphQL schema. Ideal for use-cases like implementing a payment API, or querying data that is not in your database - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/remote-schemas.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Actions&lt;/h3&gt; &#xA;&lt;p&gt;Actions are a way to extend Hasura’s schema with custom business logic using custom queries and mutations. Actions can be added to Hasura to handle various use cases such as data validation, data enrichment from external sources and any other complex business logic - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/actions/index.html&#34;&gt;read more&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Trigger webhooks on database events&lt;/h3&gt; &#xA;&lt;p&gt;Add asynchronous business logic that is triggered based on database events. Ideal for notifications, data-pipelines from Postgres or asynchronous processing - &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/event-triggers.md&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Derived data or data transformations&lt;/h3&gt; &#xA;&lt;p&gt;Transform data in Postgres or run business logic on it to derive another dataset that can be queried using GraphQL Engine - &lt;a href=&#34;https://hasura.io/docs/latest/graphql/core/queries/derived-data.html&#34;&gt;read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Demos&lt;/h2&gt; &#xA;&lt;p&gt;Check out all the example applications in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps&#34;&gt;community/sample-apps&lt;/a&gt; directory.&lt;/p&gt; &#xA;&lt;h3&gt;Realtime applications&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Group Chat application built with React, includes a typing indicator, online users &amp;amp; new message notifications.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-chat.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-chat&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Live location tracking app that shows a running vehicle changing current GPS coordinates moving on a map.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-location-tracking.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-location-tracking&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;A realtime dashboard for data aggregations on continuously changing data.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://realtime-poll.demo.hasura.io/&#34;&gt;Try it out&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community/sample-apps/realtime-poll&#34;&gt;Tutorial&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Videos&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=a2AhxKqd82Q&#34;&gt;Add GraphQL to a self-hosted GitLab instance&lt;/a&gt; (&lt;em&gt;3:44 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=15ITBYnccgc&#34;&gt;Todo app with Auth0 and GraphQL backend&lt;/a&gt; (&lt;em&gt;4:00 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=m1ChRhRLq7o&#34;&gt;GraphQL on GitLab integrated with GitLab auth&lt;/a&gt; (&lt;em&gt;4:05 mins&lt;/em&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=tsY573yyGWA&#34;&gt;Dashboard for 10million rides with geo-location (PostGIS, Timescale)&lt;/a&gt; (&lt;em&gt;3:06 mins&lt;/em&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Support &amp;amp; Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;The documentation and community will help you troubleshoot most issues. If you have encountered a bug or need to get in touch with us, you can contact us using one of the following channels:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Support &amp;amp; feedback: &lt;a href=&#34;https://discord.gg/hasura&#34;&gt;Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Issue &amp;amp; bug tracking: &lt;a href=&#34;https://github.com/hasura/graphql-engine/issues&#34;&gt;GitHub issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Follow product updates: &lt;a href=&#34;https://twitter.com/hasurahq&#34;&gt;@HasuraHQ&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Talk to us on our &lt;a href=&#34;https://hasura.io&#34;&gt;website chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We are committed to fostering an open and welcoming environment in the community. Please see the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/code-of-conduct.md&#34;&gt;Code of Conduct&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;If you want to report a security issue, please &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/SECURITY.md&#34;&gt;read this&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Stay up to date&lt;/h2&gt; &#xA;&lt;p&gt;We release new features every month. Sign up for our newsletter by using the link below. We send newsletters only once a month. &lt;a href=&#34;https://hasura.io/newsletter/&#34;&gt;https://hasura.io/newsletter/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Check out our &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/CONTRIBUTING.md&#34;&gt;contributing guide&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;h2&gt;Brand assets&lt;/h2&gt; &#xA;&lt;p&gt;Hasura brand assets (logos, the Hasura mascot, powered by badges etc.) can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand&#34;&gt;assets/brand&lt;/a&gt; folder. Feel free to use them in your application/website etc. We&#39;d be thrilled if you add the &#34;Powered by Hasura&#34; badge to your applications built using Hasura. ❤️&lt;/p&gt; &#xA;&lt;div style=&#34;display: flex;&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_darkbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA; &lt;img src=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/assets/brand/powered_by_hasura_primary_lightbg.svg?sanitize=true&#34; width=&#34;150px&#34;&gt; &#xA;&lt;/div&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;&amp;lt;!-- For light backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_darkbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&#xA;&amp;lt;!-- For dark backgrounds --&amp;gt;&#xA;&amp;lt;a href=&#34;https://hasura.io&#34;&amp;gt;&#xA;  &amp;lt;img width=&#34;150px&#34; src=&#34;https://graphql-engine-cdn.hasura.io/img/powered_by_hasura_primary_lightbg.svg&#34; /&amp;gt;&#xA;&amp;lt;/a&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;The core GraphQL Engine is available under the &lt;a href=&#34;https://www.apache.org/licenses/LICENSE-2.0&#34;&gt;Apache License 2.0&lt;/a&gt; (Apache-2.0).&lt;/p&gt; &#xA;&lt;p&gt;All &lt;strong&gt;other contents&lt;/strong&gt; (except those in &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/server&#34;&gt;&lt;code&gt;server&lt;/code&gt;&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/cli&#34;&gt;&lt;code&gt;cli&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/console&#34;&gt;&lt;code&gt;console&lt;/code&gt;&lt;/a&gt; directories) are available under the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/LICENSE-community&#34;&gt;MIT License&lt;/a&gt;. This includes everything in the &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/docs&#34;&gt;&lt;code&gt;docs&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/community&#34;&gt;&lt;code&gt;community&lt;/code&gt;&lt;/a&gt; directories.&lt;/p&gt; &#xA;&lt;h2&gt;Translations&lt;/h2&gt; &#xA;&lt;p&gt;This readme is available in the following translations:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.japanese.md&#34;&gt;Japanese &lt;span&gt;🇯🇵&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/moksahero&#34;&gt;@moksahero&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.french.md&#34;&gt;French &lt;span&gt;🇫🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/l0ck3&#34;&gt;@l0ck3&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.bosnian.md&#34;&gt;Bosnian &lt;span&gt;🇧🇦&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/hajro92&#34;&gt;@hajro92&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.russian.md&#34;&gt;Russian &lt;span&gt;🇷🇺&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/highflyer910&#34;&gt;@highflyer910&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.greek.md&#34;&gt;Greek 🇬🇷&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/MIP2000&#34;&gt;@MIP2000&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.mx_spanish.md&#34;&gt;Spanish 🇲🇽&lt;/a&gt;(&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/ferdox2&#34;&gt;@ferdox2&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.indonesian.md&#34;&gt;Indonesian &lt;span&gt;🇮🇩&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/anwari666&#34;&gt;@anwari666&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.portuguese_br.md&#34;&gt;Brazilian Portuguese &lt;span&gt;🇧🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/rubensmp&#34;&gt;@rubensmp&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.german.md&#34;&gt;German 🇩🇪&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/FynnGrandke&#34;&gt;@FynnGrandke&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.chinese.md&#34;&gt;Chinese &lt;span&gt;🇨🇳&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/jagreetdg&#34;&gt;@jagreetdg&lt;/a&gt; &amp;amp; &lt;a href=&#34;https://github.com/johnbanq&#34;&gt;@johnbanq&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.turkish.md&#34;&gt;Turkish &lt;span&gt;🇹🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/berat&#34;&gt;@berat&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations/README.korean.md&#34;&gt;Korean &lt;span&gt;🇰🇷&lt;/span&gt;&lt;/a&gt; (&lt;span&gt;🙏&lt;/span&gt; &lt;a href=&#34;https://github.com/laskdjlaskdj12&#34;&gt;@라스크&lt;/a&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Translations for other files can be found &lt;a href=&#34;https://raw.githubusercontent.com/hasura/graphql-engine/master/translations&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>Bodigrim/text-rope</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/Bodigrim/text-rope</id>
    <link href="https://github.com/Bodigrim/text-rope" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A wrapper around Text for fast line/column navigation and logarithmic concatenation&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;text-rope &lt;a href=&#34;https://hackage.haskell.org/package/text-rope&#34;&gt;&lt;img src=&#34;http://img.shields.io/hackage/v/text-rope.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/lts/package/text-rope&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text-rope/badge/lts&#34; alt=&#34;Stackage LTS&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://stackage.org/nightly/package/text-rope&#34;&gt;&lt;img src=&#34;http://stackage.org/package/text-rope/badge/nightly&#34; alt=&#34;Stackage Nightly&#34;&gt;&lt;/a&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A wrapper around &lt;code&gt;Text&lt;/code&gt; for fast line/column navigation and logarithmic concatenation.&lt;/p&gt; &#xA;&lt;p&gt;Here are benchmarks for 1000 edits over 70K text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      3.09 ms ±  94 μs&#xA;    yi-rope:&#xA;      49.4 ms ± 1.4 ms, 15.98x&#xA;  UTF-16&#xA;    text-rope:&#xA;      3.09 ms ± 106 μs&#xA;    rope-utf16-splay:&#xA;      10.6 ms ± 337 μs, 3.44x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      3.04 ms ± 112 μs&#xA;    core-text:&#xA;      14.0 ms ± 297 μs, 4.59x&#xA;    yi-rope:&#xA;      6.25 ms ± 102 μs, 2.06x&#xA;  UTF-16&#xA;    text-rope:&#xA;      3.40 ms ±  70 μs&#xA;    rope-utf16-splay:&#xA;      8.92 ms ± 169 μs, 2.62x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 10000 edits over 700K text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      62.9 ms ± 4.2 ms&#xA;    yi-rope:&#xA;      568  ms ±  31 ms, 9.04x&#xA;  UTF-16&#xA;    text-rope:&#xA;      61.0 ms ± 3.9 ms&#xA;    rope-utf16-splay:&#xA;      325  ms ±  13 ms, 5.32x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      59.6 ms ± 3.8 ms&#xA;    core-text:&#xA;      209  ms ±  15 ms, 3.50x&#xA;    yi-rope:&#xA;      105  ms ± 7.4 ms, 1.76x&#xA;  UTF-16&#xA;    text-rope:&#xA;      63.6 ms ± 5.3 ms&#xA;    rope-utf16-splay:&#xA;      230  ms ± 9.0 ms, 3.62x&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For 100000 edits over 7M text:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;Split at position&#xA;  Unicode&#xA;    text-rope:&#xA;      963  ms ±  43 ms&#xA;    yi-rope:&#xA;      6.379 s ± 138 ms, 6.62x&#xA;  UTF-16&#xA;    text-rope:&#xA;      988  ms ±  19 ms&#xA;    rope-utf16-splay: T&#xA;      57.408 s ± 4.24 s, 58.12x&#xA;Split at offset&#xA;  Unicode&#xA;    text-rope:&#xA;      1.014 s ±  70 ms&#xA;    core-text:&#xA;      3.008 s ± 138 ms, 2.97x&#xA;    yi-rope:&#xA;      1.716 s ±  76 ms, 1.69x&#xA;  UTF-16&#xA;    text-rope:&#xA;      1.065 s ±  53 ms&#xA;    rope-utf16-splay:&#xA;      38.852 s ± 568 ms, 36.49x&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>koalaman/shellcheck</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/koalaman/shellcheck</id>
    <link href="https://github.com/koalaman/shellcheck" rel="alternate"></link>
    <summary type="html">&lt;p&gt;ShellCheck, a static analysis tool for shell scripts&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/koalaman/shellcheck/actions/workflows/build.yml/badge.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h1&gt;ShellCheck - A shell script static analysis tool&lt;/h1&gt; &#xA;&lt;p&gt;ShellCheck is a GPLv3 tool that gives warnings and suggestions for bash/sh shell scripts:&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/terminal.png&#34; alt=&#34;Screenshot of a terminal showing problematic shell script lines highlighted&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;The goals of ShellCheck are&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical beginner&#39;s syntax issues that cause a shell to give cryptic error messages.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out and clarify typical intermediate level semantic problems that cause a shell to behave strangely and counter-intuitively.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;To point out subtle caveats, corner cases and pitfalls that may cause an advanced user&#39;s otherwise working script to fail under future circumstances.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/README.md#user-content-gallery-of-bad-code&#34;&gt;the gallery of bad code&lt;/a&gt; for examples of what ShellCheck can help you identify!&lt;/p&gt; &#xA;&lt;h2&gt;Table of Contents&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#how-to-use&#34;&gt;How to use&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#on-the-web&#34;&gt;On the web&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#from-your-terminal&#34;&gt;From your terminal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-editor&#34;&gt;In your editor&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#in-your-build-or-test-suites&#34;&gt;In your build or test suites&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-from-source&#34;&gt;Compiling from source&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-cabal&#34;&gt;Installing Cabal&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#compiling-shellcheck&#34;&gt;Compiling ShellCheck&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#running-tests&#34;&gt;Running tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#gallery-of-bad-code&#34;&gt;Gallery of bad code&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#quoting&#34;&gt;Quoting&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#conditionals&#34;&gt;Conditionals&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#frequently-misused-commands&#34;&gt;Frequently misused commands&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#common-beginners-mistakes&#34;&gt;Common beginner&#39;s mistakes&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#style&#34;&gt;Style&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#data-and-typing-errors&#34;&gt;Data and typing errors&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#robustness&#34;&gt;Robustness&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#portability&#34;&gt;Portability&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#miscellaneous&#34;&gt;Miscellaneous&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#testimonials&#34;&gt;Testimonials&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#ignoring-issues&#34;&gt;Ignoring issues&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#reporting-bugs&#34;&gt;Reporting bugs&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#contributing&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#copyright&#34;&gt;Copyright&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#other-resources&#34;&gt;Other Resources&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to use&lt;/h2&gt; &#xA;&lt;p&gt;There are a number of ways to use ShellCheck!&lt;/p&gt; &#xA;&lt;h3&gt;On the web&lt;/h3&gt; &#xA;&lt;p&gt;Paste a shell script on &lt;a href=&#34;https://www.shellcheck.net&#34;&gt;https://www.shellcheck.net&lt;/a&gt; for instant feedback.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.shellcheck.net&#34;&gt;ShellCheck.net&lt;/a&gt; is always synchronized to the latest git commit, and is the easiest way to give ShellCheck a go. Tell your friends!&lt;/p&gt; &#xA;&lt;h3&gt;From your terminal&lt;/h3&gt; &#xA;&lt;p&gt;Run &lt;code&gt;shellcheck yourscript&lt;/code&gt; in your terminal for instant output, as seen above.&lt;/p&gt; &#xA;&lt;h3&gt;In your editor&lt;/h3&gt; &#xA;&lt;p&gt;You can see ShellCheck suggestions directly in a variety of editors.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Vim, through &lt;a href=&#34;https://github.com/w0rp/ale&#34;&gt;ALE&lt;/a&gt;, &lt;a href=&#34;https://github.com/neomake/neomake&#34;&gt;Neomake&lt;/a&gt;, or &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;Syntastic&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/vim-syntastic.png&#34; alt=&#34;Screenshot of Vim showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Emacs, through &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;Flycheck&lt;/a&gt; or &lt;a href=&#34;https://github.com/federicotdn/flymake-shellcheck&#34;&gt;Flymake&lt;/a&gt;:&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/doc/emacs-flycheck.png&#34; alt=&#34;Screenshot of emacs showing inlined shellcheck feedback&#34;&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Sublime, through &lt;a href=&#34;https://github.com/SublimeLinter/SublimeLinter-shellcheck&#34;&gt;SublimeLinter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Atom, through &lt;a href=&#34;https://github.com/AtomLinter/linter-shellcheck&#34;&gt;Linter&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;VSCode, through &lt;a href=&#34;https://github.com/timonwong/vscode-shellcheck&#34;&gt;vscode-shellcheck&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Most other editors, through &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/shellcheck.1.md#user-content-formats&#34;&gt;GCC error compatibility&lt;/a&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;In your build or test suites&lt;/h3&gt; &#xA;&lt;p&gt;While ShellCheck is mostly intended for interactive use, it can easily be added to builds or test suites. It makes canonical use of exit codes, so you can just add a &lt;code&gt;shellcheck&lt;/code&gt; command as part of the process.&lt;/p&gt; &#xA;&lt;p&gt;For example, in a Makefile:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-Makefile&#34;&gt;check-scripts:&#xA;    # Fail if any of these files have warnings&#xA;    shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in a Travis CI &lt;code&gt;.travis.yml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;script:&#xA;  # Fail if any of these files have warnings&#xA;  - shellcheck myscripts/*.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Services and platforms that have ShellCheck pre-installed and ready to use:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://travis-ci.org/&#34;&gt;Travis CI&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codacy.com/&#34;&gt;Codacy&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://codeclimate.com/&#34;&gt;Code Climate&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.codefactor.io/&#34;&gt;Code Factor&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://circleci.com&#34;&gt;CircleCI&lt;/a&gt; via the &lt;a href=&#34;https://circleci.com/orbs/registry/orb/circleci/shellcheck&#34;&gt;ShellCheck Orb&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34;&gt;Github&lt;/a&gt; (only Linux)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Most other services, including &lt;a href=&#34;https://about.gitlab.com/&#34;&gt;GitLab&lt;/a&gt;, let you install ShellCheck yourself, either through the system&#39;s package manager (see &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing&#34;&gt;Installing&lt;/a&gt;), or by downloading and unpacking a &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/#installing-a-pre-compiled-binary&#34;&gt;binary release&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;It&#39;s a good idea to manually install a specific ShellCheck version regardless. This avoids any surprise build breaks when a new version with new warnings is published.&lt;/p&gt; &#xA;&lt;p&gt;For customized filtering or reporting, ShellCheck can output simple JSON, CheckStyle compatible XML, GCC compatible warnings as well as human readable text (with or without ANSI colors). See the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Integration&#34;&gt;Integration&lt;/a&gt; wiki page for more documentation.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;The easiest way to install ShellCheck locally is through your package manager.&lt;/p&gt; &#xA;&lt;p&gt;On systems with Cabal (installs to &lt;code&gt;~/.cabal/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cabal update&#xA;cabal install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On systems with Stack (installs to &lt;code&gt;~/.local/bin&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack update&#xA;stack install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Debian based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo apt install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Arch Linux based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pacman -S shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or get the dependency free &lt;a href=&#34;https://aur.archlinux.org/packages/shellcheck-bin/&#34;&gt;shellcheck-bin&lt;/a&gt; from the AUR.&lt;/p&gt; &#xA;&lt;p&gt;On Gentoo based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;emerge --ask shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On EPEL based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo yum -y install epel-release&#xA;sudo yum install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Fedora based distros:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;dnf install ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On FreeBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg install hs-ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On macOS (OS X) with Homebrew:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;brew install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or with MacPorts:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;sudo port install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On OpenBSD:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;pkg_add shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On openSUSE&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;zypper in ShellCheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or use OneClickInstall - &lt;a href=&#34;https://software.opensuse.org/package/ShellCheck&#34;&gt;https://software.opensuse.org/package/ShellCheck&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;On Solus:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;eopkg install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On Windows (via &lt;a href=&#34;https://chocolatey.org/packages/shellcheck&#34;&gt;chocolatey&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; choco install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or Windows (via &lt;a href=&#34;http://scoop.sh&#34;&gt;scoop&lt;/a&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;C:\&amp;gt; scoop install shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From &lt;a href=&#34;https://anaconda.org/conda-forge/shellcheck&#34;&gt;conda-forge&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;conda install -c conda-forge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Snap Store:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;snap install --channel=edge shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;From Docker Hub:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;docker run --rm -v &#34;$PWD:/mnt&#34; koalaman/shellcheck:stable myscript&#xA;# Or :v0.4.7 for that version, or :latest for daily builds&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or use &lt;code&gt;koalaman/shellcheck-alpine&lt;/code&gt; if you want a larger Alpine Linux based image to extend. It works exactly like a regular Alpine image, but has shellcheck preinstalled.&lt;/p&gt; &#xA;&lt;p&gt;Using the &lt;a href=&#34;https://nixos.org/nix&#34;&gt;nix package manager&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-env -iA nixpkgs.shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Alternatively, you can download pre-compiled binaries for the latest release here:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.x86_64.tar.xz&#34;&gt;Linux, x86_64&lt;/a&gt; (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.armv6hf.tar.xz&#34;&gt;Linux, armv6hf&lt;/a&gt;, i.e. Raspberry Pi (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.linux.aarch64.tar.xz&#34;&gt;Linux, aarch64&lt;/a&gt; aka ARM64 (statically linked)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.darwin.x86_64.tar.xz&#34;&gt;macOS, x86_64&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/download/stable/shellcheck-stable.zip&#34;&gt;Windows, x86&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;or see the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases&#34;&gt;GitHub Releases&lt;/a&gt; for other releases (including the &lt;a href=&#34;https://github.com/koalaman/shellcheck/releases/tag/latest&#34;&gt;latest&lt;/a&gt; meta-release for daily git builds).&lt;/p&gt; &#xA;&lt;p&gt;Distro packages already come with a &lt;code&gt;man&lt;/code&gt; page. If you are building from source, it can be installed with:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-console&#34;&gt;pandoc -s -f markdown-smart -t man shellcheck.1.md -o shellcheck.1&#xA;sudo mv shellcheck.1 /usr/share/man/man1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;pre-commit&lt;/h3&gt; &#xA;&lt;p&gt;To run ShellCheck via &lt;a href=&#34;https://pre-commit.com/&#34;&gt;pre-commit&lt;/a&gt;, add the hook to your &lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;repos:&#xA;-   repo: https://github.com/koalaman/shellcheck-precommit&#xA;    rev: v0.7.2&#xA;    hooks:&#xA;    -   id: shellcheck&#xA;#       args: [&#34;--severity=warning&#34;]  # Optionally only show errors and warnings&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Travis CI&lt;/h3&gt; &#xA;&lt;p&gt;Travis CI has now integrated ShellCheck by default, so you don&#39;t need to manually install it.&lt;/p&gt; &#xA;&lt;p&gt;If you still want to do so in order to upgrade at your leisure or ensure you&#39;re using the latest release, follow the steps below to install a binary version.&lt;/p&gt; &#xA;&lt;h3&gt;Installing a pre-compiled binary&lt;/h3&gt; &#xA;&lt;p&gt;The pre-compiled binaries come in &lt;code&gt;tar.xz&lt;/code&gt; files. To decompress them, make sure &lt;code&gt;xz&lt;/code&gt; is installed. On Debian/Ubuntu/Mint, you can &lt;code&gt;apt install xz-utils&lt;/code&gt;. On Redhat/Fedora/CentOS, &lt;code&gt;yum -y install xz&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;A simple installer may do something like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;scversion=&#34;stable&#34; # or &#34;v0.4.7&#34;, or &#34;latest&#34;&#xA;wget -qO- &#34;https://github.com/koalaman/shellcheck/releases/download/${scversion?}/shellcheck-${scversion?}.linux.x86_64.tar.xz&#34; | tar -xJv&#xA;cp &#34;shellcheck-${scversion}/shellcheck&#34; /usr/bin/&#xA;shellcheck --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Compiling from source&lt;/h2&gt; &#xA;&lt;p&gt;This section describes how to build ShellCheck from a source directory. ShellCheck is written in Haskell and requires 2GB of RAM to compile.&lt;/p&gt; &#xA;&lt;h3&gt;Installing Cabal&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck is built and packaged using Cabal. Install the package &lt;code&gt;cabal-install&lt;/code&gt; from your system&#39;s package manager (with e.g. &lt;code&gt;apt-get&lt;/code&gt;, &lt;code&gt;brew&lt;/code&gt;, &lt;code&gt;emerge&lt;/code&gt;, &lt;code&gt;yum&lt;/code&gt;, or &lt;code&gt;zypper&lt;/code&gt;).&lt;/p&gt; &#xA;&lt;p&gt;On macOS (OS X), you can do a fast install of Cabal using brew, which takes a couple of minutes instead of more than 30 minutes if you try to compile it from source.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ brew install cabal-install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On MacPorts, the package is instead called &lt;code&gt;hs-cabal-install&lt;/code&gt;, while native Windows users should install the latest version of the Haskell platform from &lt;a href=&#34;https://www.haskell.org/platform/&#34;&gt;https://www.haskell.org/platform/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Verify that &lt;code&gt;cabal&lt;/code&gt; is installed and update its dependency list with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal update&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Compiling ShellCheck&lt;/h3&gt; &#xA;&lt;p&gt;&lt;code&gt;git clone&lt;/code&gt; this repository, and &lt;code&gt;cd&lt;/code&gt; to the ShellCheck source directory to build/install:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Or if you intend to run the tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal install --enable-tests&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will compile ShellCheck and install it to your &lt;code&gt;~/.cabal/bin&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Add this directory to your &lt;code&gt;PATH&lt;/code&gt; (for bash, add this to your &lt;code&gt;~/.bashrc&lt;/code&gt;):&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;export PATH=&#34;$HOME/.cabal/bin:$PATH&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Log out and in again, and verify that your PATH is set up correctly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ which shellcheck&#xA;~/.cabal/bin/shellcheck&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;On native Windows, the &lt;code&gt;PATH&lt;/code&gt; should already be set up, but the system may use a legacy codepage. In &lt;code&gt;cmd.exe&lt;/code&gt;, &lt;code&gt;powershell.exe&lt;/code&gt; and Powershell ISE, make sure to use a TrueType font, not a Raster font, and set the active codepage to UTF-8 (65001) with &lt;code&gt;chcp&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cmd&#34;&gt;chcp 65001&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;In Powershell ISE, you may need to additionally update the output encoding:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34;&gt;[Console]::OutputEncoding = [System.Text.Encoding]::UTF8&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Running tests&lt;/h3&gt; &#xA;&lt;p&gt;To run the unit test suite:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ cabal test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Gallery of bad code&lt;/h2&gt; &#xA;&lt;p&gt;So what kind of things does ShellCheck look for? Here is an incomplete list of detected issues.&lt;/p&gt; &#xA;&lt;h3&gt;Quoting&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize several types of incorrect quoting:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo $1                           # Unquoted variables&#xA;find . -name *.ogg                # Unquoted find/grep patterns&#xA;rm &#34;~/my file.txt&#34;                # Quoted tilde expansion&#xA;v=&#39;--verbose=&#34;true&#34;&#39;; cmd $v      # Literal quotes in variables&#xA;for f in &#34;*.ogg&#34;                  # Incorrectly quoted &#39;for&#39; loops&#xA;touch $@                          # Unquoted $@&#xA;echo &#39;Don&#39;t forget to restart!&#39;   # Singlequote closed by apostrophe&#xA;echo &#39;Don\&#39;t try this at home&#39;    # Attempting to escape &#39; in &#39;&#39;&#xA;echo &#39;Path is $PATH&#39;              # Variables in single quotes&#xA;trap &#34;echo Took ${SECONDS}s&#34; 0    # Prematurely expanded trap&#xA;unset var[i]                      # Array index treated as glob&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Conditionals&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize many types of incorrect test statements.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ n != 0 ]]                      # Constant test expressions&#xA;[[ -e *.mpg ]]                    # Existence checks of globs&#xA;[[ $foo==0 ]]                     # Always true due to missing spaces&#xA;[[ -n &#34;$foo &#34; ]]                  # Always true due to literals&#xA;[[ $foo =~ &#34;fo+&#34; ]]               # Quoted regex in =~&#xA;[ foo =~ re ]                     # Unsupported [ ] operators&#xA;[ $1 -eq &#34;shellcheck&#34; ]           # Numerical comparison of strings&#xA;[ $n &amp;amp;&amp;amp; $m ]                      # &amp;amp;&amp;amp; in [ .. ]&#xA;[ grep -q foo file ]              # Command without $(..)&#xA;[[ &#34;$$file&#34; == *.jpg ]]           # Comparisons that can&#39;t succeed&#xA;(( 1 -lt 2 ))                     # Using test operators in ((..))&#xA;[ x ] &amp;amp; [ y ] | [ z ]             # Accidental backgrounding and piping&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Frequently misused commands&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize instances where commands are used incorrectly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;grep &#39;*foo*&#39; file                 # Globs in regex contexts&#xA;find . -exec foo {} &amp;amp;&amp;amp; bar {} \;  # Prematurely terminated find -exec&#xA;sudo echo &#39;Var=42&#39; &amp;gt; /etc/profile # Redirecting sudo&#xA;time --format=%s sleep 10         # Passing time(1) flags to time builtin&#xA;while read h; do ssh &#34;$h&#34; uptime  # Commands eating while loop input&#xA;alias archive=&#39;mv $1 /backup&#39;     # Defining aliases with arguments&#xA;tr -cd &#39;[a-zA-Z0-9]&#39;              # [] around ranges in tr&#xA;exec foo; echo &#34;Done!&#34;            # Misused &#39;exec&#39;&#xA;find -name \*.bak -o -name \*~ -delete  # Implicit precedence in find&#xA;# find . -exec foo &amp;gt; bar \;       # Redirections in find&#xA;f() { whoami; }; sudo f           # External use of internal functions&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Common beginner&#39;s mistakes&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes many common beginner&#39;s syntax errors:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;var = 42                          # Spaces around = in assignments&#xA;$foo=42                           # $ in assignments&#xA;for $var in *; do ...             # $ in for loop variables&#xA;var$n=&#34;Hello&#34;                     # Wrong indirect assignment&#xA;echo ${var$n}                     # Wrong indirect reference&#xA;var=(1, 2, 3)                     # Comma separated arrays&#xA;array=( [index] = value )         # Incorrect index initialization&#xA;echo $var[14]                     # Missing {} in array references&#xA;echo &#34;Argument 10 is $10&#34;         # Positional parameter misreference&#xA;if $(myfunction); then ..; fi     # Wrapping commands in $()&#xA;else if othercondition; then ..   # Using &#39;else if&#39;&#xA;f; f() { echo &#34;hello world; }     # Using function before definition&#xA;[ false ]                         # &#39;false&#39; being true&#xA;if ( -f file )                    # Using (..) instead of test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Style&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions to improve style:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;[[ -z $(find /tmp | grep mpg) ]]  # Use grep -q instead&#xA;a &amp;gt;&amp;gt; log; b &amp;gt;&amp;gt; log; c &amp;gt;&amp;gt; log      # Use a redirection block instead&#xA;echo &#34;The time is `date`&#34;         # Use $() instead&#xA;cd dir; process *; cd ..;         # Use subshells instead&#xA;echo $[1+2]                       # Use standard $((..)) instead of old $[]&#xA;echo $(($RANDOM % 6))             # Don&#39;t use $ on variables in $((..))&#xA;echo &#34;$(date)&#34;                    # Useless use of echo&#xA;cat file | grep foo               # Useless use of cat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Data and typing errors&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can recognize issues related to data and typing:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;args=&#34;$@&#34;                         # Assigning arrays to strings&#xA;files=(foo bar); echo &#34;$files&#34;    # Referencing arrays as strings&#xA;declare -A arr=(foo bar)          # Associative arrays without index&#xA;printf &#34;%s\n&#34; &#34;Arguments: $@.&#34;    # Concatenating strings and arrays&#xA;[[ $# &amp;gt; 2 ]]                      # Comparing numbers as strings&#xA;var=World; echo &#34;Hello &#34; var      # Unused lowercase variables&#xA;echo &#34;Hello $name&#34;                # Unassigned lowercase variables&#xA;cmd | read bar; echo $bar         # Assignments in subshells&#xA;cat foo | cp bar                  # Piping to commands that don&#39;t read&#xA;printf &#39;%s: %s\n&#39; foo             # Mismatches in printf argument count&#xA;eval &#34;${array[@]}&#34;                # Lost word boundaries in array eval&#xA;for i in &#34;${x[@]}&#34;; do ${x[$i]}   # Using array value as key&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Robustness&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck can make suggestions for improving the robustness of a script:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;rm -rf &#34;$STEAMROOT/&#34;*            # Catastrophic rm&#xA;touch ./-l; ls *                 # Globs that could become options&#xA;find . -exec sh -c &#39;a &amp;amp;&amp;amp; b {}&#39; \; # Find -exec shell injection&#xA;printf &#34;Hello $name&#34;             # Variables in printf format&#xA;for f in $(ls *.txt); do         # Iterating over ls output&#xA;export MYVAR=$(cmd)              # Masked exit codes&#xA;case $version in 2.*) :;; 2.6.*) # Shadowed case branches&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Portability&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck will warn when using features not supported by the shebang. For example, if you set the shebang to &lt;code&gt;#!/bin/sh&lt;/code&gt;, ShellCheck will warn about portability issues similar to &lt;code&gt;checkbashisms&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;echo {1..$n}                     # Works in ksh, but not bash/dash/sh&#xA;echo {1..10}                     # Works in ksh and bash, but not dash/sh&#xA;echo -n 42                       # Works in ksh, bash and dash, undefined in sh&#xA;expr match str regex             # Unportable alias for `expr str : regex`&#xA;trap &#39;exit 42&#39; sigint            # Unportable signal spec&#xA;cmd &amp;amp;&amp;gt; file                      # Unportable redirection operator&#xA;read foo &amp;lt; /dev/tcp/host/22      # Unportable intercepted files&#xA;foo-bar() { ..; }                # Undefined/unsupported function name&#xA;[ $UID = 0 ]                     # Variable undefined in dash/sh&#xA;local var=value                  # local is undefined in sh&#xA;time sleep 1 | sleep 5           # Undefined uses of &#39;time&#39;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Miscellaneous&lt;/h3&gt; &#xA;&lt;p&gt;ShellCheck recognizes a menagerie of other issues:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;PS1=&#39;\e[0;32m\$\e[0m &#39;            # PS1 colors not in \[..\]&#xA;PATH=&#34;$PATH:~/bin&#34;                # Literal tilde in $PATH&#xA;rm “file”                         # Unicode quotes&#xA;echo &#34;Hello world&#34;                # Carriage return / DOS line endings&#xA;echo hello \                      # Trailing spaces after \&#xA;var=42 echo $var                  # Expansion of inlined environment&#xA;!# bin/bash -x -e                 # Common shebang errors&#xA;echo $((n/180*100))               # Unnecessary loss of precision&#xA;ls *[:digit:].txt                 # Bad character class globs&#xA;sed &#39;s/foo/bar/&#39; file &amp;gt; file      # Redirecting to input&#xA;var2=$var2                        # Variable assigned to itself&#xA;[ x$var = xval ]                  # Antiquated x-comparisons&#xA;ls() { ls -l &#34;$@&#34;; }              # Infinitely recursive wrapper&#xA;alias ls=&#39;ls -l&#39;; ls foo          # Alias used before it takes effect&#xA;for x; do for x; do               # Nested loop uses same variable&#xA;while getopts &#34;a&#34; f; do case $f in &#34;b&#34;) # Unhandled getopts flags&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Testimonials&lt;/h2&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;At first you&#39;re like &#34;shellcheck is awesome&#34; but then you&#39;re like &#34;wtf are we still using bash&#34;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;Alexander Tarasikov, &lt;a href=&#34;https://twitter.com/astarasikov/status/568825996532707330&#34;&gt;via Twitter&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Ignoring issues&lt;/h2&gt; &#xA;&lt;p&gt;Issues can be ignored via environmental variable, command line, individually or globally within a file:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Ignore&#34;&gt;https://github.com/koalaman/shellcheck/wiki/Ignore&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Reporting bugs&lt;/h2&gt; &#xA;&lt;p&gt;Please use the GitHub issue tracker for any bugs or feature suggestions:&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/koalaman/shellcheck/issues&#34;&gt;https://github.com/koalaman/shellcheck/issues&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Please submit patches to code or documentation as GitHub pull requests! Check out the &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/DevGuide&#34;&gt;DevGuide&lt;/a&gt; on the ShellCheck Wiki.&lt;/p&gt; &#xA;&lt;p&gt;Contributions must be licensed under the GNU GPLv3. The contributor retains the copyright.&lt;/p&gt; &#xA;&lt;h2&gt;Copyright&lt;/h2&gt; &#xA;&lt;p&gt;ShellCheck is licensed under the GNU General Public License, v3. A copy of this license is included in the file &lt;a href=&#34;https://raw.githubusercontent.com/koalaman/shellcheck/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Copyright 2012-2019, &lt;a href=&#34;https://github.com/koalaman/&#34;&gt;Vidar &#39;koala_man&#39; Holen&lt;/a&gt; and contributors.&lt;/p&gt; &#xA;&lt;p&gt;Happy ShellChecking!&lt;/p&gt; &#xA;&lt;h2&gt;Other Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The wiki has &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/Checks&#34;&gt;long form descriptions&lt;/a&gt; for each warning, e.g. &lt;a href=&#34;https://github.com/koalaman/shellcheck/wiki/SC2221&#34;&gt;SC2221&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;ShellCheck does not attempt to enforce any kind of formatting or indenting style, so also check out &lt;a href=&#34;https://github.com/mvdan/sh&#34;&gt;shfmt&lt;/a&gt;!&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>jgm/pandoc</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/jgm/pandoc</id>
    <link href="https://github.com/jgm/pandoc" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Universal markup converter&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Pandoc&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/jgm/pandoc/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release/jgm/pandoc.svg?label=current+release&#34; alt=&#34;github release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/pandoc.svg?label=hackage&#34; alt=&#34;hackage release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://formulae.brew.sh/formula/pandoc&#34;&gt;&lt;img src=&#34;https://img.shields.io/homebrew/v/pandoc.svg?sanitize=true&#34; alt=&#34;homebrew&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.stackage.org/lts/package/pandoc-types&#34;&gt;&lt;img src=&#34;https://stackage.org/package/pandoc/badge/lts&#34; alt=&#34;stackage LTS package&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/jgm/pandoc/actions&#34;&gt;&lt;img src=&#34;https://github.com/jgm/pandoc/workflows/CI%20tests/badge.svg?sanitize=true&#34; alt=&#34;CI tests&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv2+-lightgray.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://groups.google.com/forum/#!forum/pandoc-discuss&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/pandoc-discuss-red.svg?style=social&#34; alt=&#34;pandoc-discuss on google groups&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;The universal markup converter&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc is a &lt;a href=&#34;https://haskell.org&#34;&gt;Haskell&lt;/a&gt; library for converting from one markup format to another, and a command-line tool that uses this library. It can convert &lt;em&gt;from&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;input-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;creole&lt;/code&gt; (&lt;a href=&#34;http://www.wikicreole.org/wiki/Creole1.0&#34;&gt;Creole 1.0&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csv&lt;/code&gt; (&lt;a href=&#34;https://tools.ietf.org/html/rfc4180&#34;&gt;CSV&lt;/a&gt; table)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;endnotexml&lt;/code&gt; (&lt;a href=&#34;https://support.clarivate.com/Endnote/s/article/EndNote-XML-Document-Type-Definition&#34;&gt;EndNote XML bibliography&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;ODT&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ris&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/RIS_(file_format)&#34;&gt;RIS&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;t2t&lt;/code&gt; (&lt;a href=&#34;https://txt2tags.org&#34;&gt;txt2tags&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tikiwiki&lt;/code&gt; (&lt;a href=&#34;https://doc.tiki.org/Wiki-Syntax-Text#The_Markup_Language_Wiki-Syntax&#34;&gt;TikiWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;twiki&lt;/code&gt; (&lt;a href=&#34;https://twiki.org/cgi-bin/view/TWiki/TextFormattingRules&#34;&gt;TWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;vimwiki&lt;/code&gt; (&lt;a href=&#34;https://vimwiki.github.io&#34;&gt;Vimwiki&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua reader, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;It can convert &lt;em&gt;to&lt;/em&gt;&lt;/p&gt; &#xA;&lt;div id=&#34;output-formats&#34;&gt; &#xA; &lt;ul&gt; &#xA;  &lt;li&gt;&lt;code&gt;asciidoc&lt;/code&gt; (&lt;a href=&#34;https://www.methods.co.nz/asciidoc/&#34;&gt;AsciiDoc&lt;/a&gt;) or &lt;code&gt;asciidoctor&lt;/code&gt; (&lt;a href=&#34;https://asciidoctor.org/&#34;&gt;AsciiDoctor&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;beamer&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/beamer&#34;&gt;LaTeX beamer&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;bibtex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/bibtex&#34;&gt;BibTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;biblatex&lt;/code&gt; (&lt;a href=&#34;https://ctan.org/pkg/biblatex&#34;&gt;BibLaTeX&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;commonmark_x&lt;/code&gt; (&lt;a href=&#34;https://commonmark.org&#34;&gt;CommonMark&lt;/a&gt; Markdown with extensions)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;context&lt;/code&gt; (&lt;a href=&#34;https://www.contextgarden.net/&#34;&gt;ConTeXt&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;csljson&lt;/code&gt; (&lt;a href=&#34;https://citeproc-js.readthedocs.io/en/latest/csl-json/markup.html&#34;&gt;CSL JSON&lt;/a&gt; bibliography)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook&lt;/code&gt; or &lt;code&gt;docbook4&lt;/code&gt; (&lt;a href=&#34;https://docbook.org&#34;&gt;DocBook&lt;/a&gt; 4)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docbook5&lt;/code&gt; (DocBook 5)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;docx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Office_Open_XML&#34;&gt;Word docx&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dokuwiki&lt;/code&gt; (&lt;a href=&#34;https://www.dokuwiki.org/dokuwiki&#34;&gt;DokuWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub&lt;/code&gt; or &lt;code&gt;epub3&lt;/code&gt; (&lt;a href=&#34;http://idpf.org/epub&#34;&gt;EPUB&lt;/a&gt; v3 book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;epub2&lt;/code&gt; (EPUB v2)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;fb2&lt;/code&gt; (&lt;a href=&#34;http://www.fictionbook.org/index.php/Eng:XML_Schema_Fictionbook_2.1&#34;&gt;FictionBook2&lt;/a&gt; e-book)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;gfm&lt;/code&gt; (&lt;a href=&#34;https://help.github.com/articles/github-flavored-markdown/&#34;&gt;GitHub-Flavored Markdown&lt;/a&gt;), or the deprecated and less accurate &lt;code&gt;markdown_github&lt;/code&gt;; use &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;markdown_github&lt;/code&gt;&lt;/a&gt; only if you need extensions not supported in &lt;a href=&#34;https://pandoc.org/MANUAL.html#markdown-variants&#34;&gt;&lt;code&gt;gfm&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;haddock&lt;/code&gt; (&lt;a href=&#34;https://www.haskell.org/haddock/doc/html/ch03s08.html&#34;&gt;Haddock markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html&lt;/code&gt; or &lt;code&gt;html5&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/html/&#34;&gt;HTML&lt;/a&gt;, i.e.&amp;nbsp;&lt;a href=&#34;https://html.spec.whatwg.org/&#34;&gt;HTML5&lt;/a&gt;/XHTML &lt;a href=&#34;https://www.w3.org/TR/html-polyglot/&#34;&gt;polyglot markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;html4&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/TR/xhtml1/&#34;&gt;XHTML&lt;/a&gt; 1.0 Transitional)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;icml&lt;/code&gt; (&lt;a href=&#34;https://wwwimages.adobe.com/www.adobe.com/content/dam/acom/en/devnet/indesign/sdk/cs6/idml/idml-cookbook.pdf&#34;&gt;InDesign ICML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ipynb&lt;/code&gt; (&lt;a href=&#34;https://nbformat.readthedocs.io/en/latest/&#34;&gt;Jupyter notebook&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_archiving&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Archiving and Interchange Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_articleauthoring&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Article Authoring Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats_publishing&lt;/code&gt; (&lt;a href=&#34;https://jats.nlm.nih.gov&#34;&gt;JATS&lt;/a&gt; XML, Journal Publishing Tag Set)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jats&lt;/code&gt; (alias for &lt;code&gt;jats_archiving&lt;/code&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;jira&lt;/code&gt; (&lt;a href=&#34;https://jira.atlassian.com/secure/WikiRendererHelpAction.jspa?section=all&#34;&gt;Jira&lt;/a&gt;/Confluence wiki markup)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;json&lt;/code&gt; (JSON version of native AST)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;latex&lt;/code&gt; (&lt;a href=&#34;https://www.latex-project.org/&#34;&gt;LaTeX&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;man&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_man(7)&#34;&gt;roff man&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown&lt;/code&gt; (&lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_mmd&lt;/code&gt; (&lt;a href=&#34;https://fletcherpenney.net/multimarkdown/&#34;&gt;MultiMarkdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_phpextra&lt;/code&gt; (&lt;a href=&#34;https://michelf.ca/projects/php-markdown/extra/&#34;&gt;PHP Markdown Extra&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markdown_strict&lt;/code&gt; (original unextended &lt;a href=&#34;https://daringfireball.net/projects/markdown/&#34;&gt;Markdown&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;markua&lt;/code&gt; (&lt;a href=&#34;https://leanpub.com/markua/read&#34;&gt;Markua&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;mediawiki&lt;/code&gt; (&lt;a href=&#34;https://www.mediawiki.org/wiki/Help:Formatting&#34;&gt;MediaWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;ms&lt;/code&gt; (&lt;a href=&#34;https://man.cx/groff_ms(7)&#34;&gt;roff ms&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;muse&lt;/code&gt; (&lt;a href=&#34;https://amusewiki.org/library/manual&#34;&gt;Muse&lt;/a&gt;),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;native&lt;/code&gt; (native Haskell),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;odt&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/OpenDocument&#34;&gt;OpenOffice text document&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opml&lt;/code&gt; (&lt;a href=&#34;http://dev.opml.org/spec2.html&#34;&gt;OPML&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;opendocument&lt;/code&gt; (&lt;a href=&#34;http://opendocument.xml.org&#34;&gt;OpenDocument&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;org&lt;/code&gt; (&lt;a href=&#34;https://orgmode.org&#34;&gt;Emacs Org mode&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pdf&lt;/code&gt; (&lt;a href=&#34;https://www.adobe.com/pdf/&#34;&gt;PDF&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;plain&lt;/code&gt; (plain text),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;pptx&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Microsoft_PowerPoint&#34;&gt;PowerPoint&lt;/a&gt; slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rst&lt;/code&gt; (&lt;a href=&#34;https://docutils.sourceforge.io/docs/ref/rst/introduction.html&#34;&gt;reStructuredText&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;rtf&lt;/code&gt; (&lt;a href=&#34;https://en.wikipedia.org/wiki/Rich_Text_Format&#34;&gt;Rich Text Format&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;texinfo&lt;/code&gt; (&lt;a href=&#34;https://www.gnu.org/software/texinfo/&#34;&gt;GNU Texinfo&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;textile&lt;/code&gt; (&lt;a href=&#34;https://www.promptworks.com/textile&#34;&gt;Textile&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slideous&lt;/code&gt; (&lt;a href=&#34;https://goessner.net/articles/slideous/&#34;&gt;Slideous&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;slidy&lt;/code&gt; (&lt;a href=&#34;https://www.w3.org/Talks/Tools/Slidy2/&#34;&gt;Slidy&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;dzslides&lt;/code&gt; (&lt;a href=&#34;https://paulrouget.com/dzslides/&#34;&gt;DZSlides&lt;/a&gt; HTML5 + JavaScript slide show),&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;revealjs&lt;/code&gt; (&lt;a href=&#34;https://revealjs.com/&#34;&gt;reveal.js&lt;/a&gt; HTML5 + JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;s5&lt;/code&gt; (&lt;a href=&#34;https://meyerweb.com/eric/tools/s5/&#34;&gt;S5&lt;/a&gt; HTML and JavaScript slide show)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;tei&lt;/code&gt; (&lt;a href=&#34;https://github.com/TEIC/TEI-Simple&#34;&gt;TEI Simple&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;xwiki&lt;/code&gt; (&lt;a href=&#34;https://www.xwiki.org/xwiki/bin/view/Documentation/UserGuide/Features/XWikiSyntax/&#34;&gt;XWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;&lt;code&gt;zimwiki&lt;/code&gt; (&lt;a href=&#34;https://zim-wiki.org/manual/Help/Wiki_Syntax.html&#34;&gt;ZimWiki markup&lt;/a&gt;)&lt;/li&gt; &#xA;  &lt;li&gt;the path of a custom Lua writer, see &lt;a href=&#34;https://pandoc.org/MANUAL.html#custom-readers-and-writers&#34;&gt;Custom readers and writers&lt;/a&gt; below&lt;/li&gt; &#xA; &lt;/ul&gt; &#xA;&lt;/div&gt; &#xA;&lt;p&gt;Pandoc can also produce PDF output via LaTeX, Groff ms, or HTML.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc’s enhanced version of Markdown includes syntax for tables, definition lists, metadata blocks, footnotes, citations, math, and much more. See the User’s Manual below under &lt;a href=&#34;https://pandoc.org/MANUAL.html#pandocs-markdown&#34;&gt;Pandoc’s Markdown&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Pandoc has a modular design: it consists of a set of readers, which parse text in a given format and produce a native representation of the document (an &lt;em&gt;abstract syntax tree&lt;/em&gt; or AST), and a set of writers, which convert this native representation into a target format. Thus, adding an input or output format requires only adding a reader or writer. Users can also run custom pandoc filters to modify the intermediate AST (see the documentation for &lt;a href=&#34;https://pandoc.org/filters.html&#34;&gt;filters&lt;/a&gt; and &lt;a href=&#34;https://pandoc.org/lua-filters.html&#34;&gt;Lua filters&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;Because pandoc’s intermediate representation of a document is less expressive than many of the formats it converts between, one should not expect perfect conversions between every format and every other. Pandoc attempts to preserve the structural elements of a document, but not formatting details such as margin size. And some document elements, such as complex tables, may not fit into pandoc’s simple document model. While conversions from pandoc’s Markdown to all formats aspire to be perfect, conversions from formats more expressive than pandoc’s Markdown can be expected to be lossy.&lt;/p&gt; &#xA;&lt;h2&gt;Installing&lt;/h2&gt; &#xA;&lt;p&gt;Here’s &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/INSTALL.md&#34;&gt;how to install pandoc&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;Pandoc’s website contains a full &lt;a href=&#34;https://pandoc.org/MANUAL.html&#34;&gt;User’s Guide&lt;/a&gt;. It is also available &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/MANUAL.txt&#34;&gt;here&lt;/a&gt; as pandoc-flavored Markdown. The website also contains some &lt;a href=&#34;https://pandoc.org/demos.html&#34;&gt;examples of the use of pandoc&lt;/a&gt; and a limited &lt;a href=&#34;https://pandoc.org/try&#34;&gt;online demo&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Pull requests, bug reports, and feature requests are welcome. Please make sure to read &lt;a href=&#34;https://raw.githubusercontent.com/jgm/pandoc/master/CONTRIBUTING.md&#34;&gt;the contributor guidelines&lt;/a&gt; before opening a new issue.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;© 2006-2022 John MacFarlane (&lt;a href=&#34;mailto:jgm@berkeley.edu&#34;&gt;jgm@berkeley.edu&lt;/a&gt;). Released under the &lt;a href=&#34;https://www.gnu.org/licenses/old-licenses/gpl-2.0.html&#34; title=&#34;GNU General Public License&#34;&gt;GPL&lt;/a&gt;, version 2 or greater. This software carries no warranty of any kind. (See COPYRIGHT for full copyright and warranty notices.)&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>xmonad/xmonad</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/xmonad/xmonad</id>
    <link href="https://github.com/xmonad/xmonad" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core of xmonad, a small but functional ICCCM-compliant tiling window manager&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://xmonad.org/&#34;&gt;&lt;img alt=&#34;XMonad logo&#34; src=&#34;https://xmonad.org/images/logo-wrapped.svg?sanitize=true&#34; height=&#34;150&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;&lt;img alt=&#34;Hackage&#34; src=&#34;https://img.shields.io/hackage/v/xmonad?logo=haskell&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/readme/LICENSE&#34;&gt;&lt;img alt=&#34;License&#34; src=&#34;https://img.shields.io/github/license/xmonad/xmonad&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://haskell.org/&#34;&gt;&lt;img alt=&#34;Made in Haskell&#34; src=&#34;https://img.shields.io/badge/Made%20in-Haskell-%235e5086?logo=haskell&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/stack.yml&#34;&gt;&lt;img alt=&#34;Stack&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Stack?label=Stack&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/haskell-ci.yml&#34;&gt;&lt;img alt=&#34;Cabal&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Haskell-CI?label=Cabal&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/xmonad/xmonad/actions/workflows/nix.yml&#34;&gt;&lt;img alt=&#34;Nix&#34; src=&#34;https://img.shields.io/github/workflow/status/xmonad/xmonad/Nix?label=Nix&amp;amp;logo=githubactions&amp;amp;logoColor=white&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;&lt;img alt=&#34;GitHub Sponsors&#34; src=&#34;https://img.shields.io/github/sponsors/xmonad?label=GitHub%20Sponsors&amp;amp;logo=githubsponsors&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;&lt;img alt=&#34;Open Collective&#34; src=&#34;https://img.shields.io/opencollective/all/xmonad?label=Open%20Collective&amp;amp;logo=opencollective&#34;&gt;&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://web.libera.chat/#xmonad&#34;&gt;&lt;img alt=&#34;Chat on #xmonad@irc.libera.chat&#34; src=&#34;https://img.shields.io/badge/%23%20chat-on%20libera-brightgreen&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://matrix.to/#/#xmonad:matrix.org&#34;&gt;&lt;img alt=&#34;Chat on #xmonad:matrix.org&#34; src=&#34;https://img.shields.io/matrix/xmonad:matrix.org?logo=matrix&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;h1&gt;xmonad&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;A tiling window manager for X11.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; is a tiling window manager for X11. Windows are arranged automatically to tile the screen without gaps or overlap, maximising screen use. Window manager features are accessible from the keyboard: a mouse is optional. xmonad is written, configured and extensible in Haskell. Custom layout algorithms, key bindings and other extensions may be written by the user in config files. Layouts are applied dynamically, and different layouts may be used on each workspace. Xinerama is fully supported, allowing windows to be tiled on several physical screens.&lt;/p&gt; &#xA;&lt;p&gt;This repository contains the &lt;a href=&#34;https://hackage.haskell.org/package/xmonad&#34;&gt;xmonad&lt;/a&gt; package, a minimal, stable, yet extensible core. It is accompanied by &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, a library of hundreds of additional community-maintained tiling algorithms and extension modules. The two combined make for a powerful X11 window-manager with endless customization possibilities. They are, quite literally, libraries for creating your own window manager.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;For installation and configuration instructions, please see:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/download.html&#34;&gt;downloading and installing xmonad&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/INSTALL.html&#34;&gt;installing latest xmonad snapshot from git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://xmonad.org/TUTORIAL.html&#34;&gt;configuring xmonad&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you run into any trouble, consult our &lt;a href=&#34;https://xmonad.org/documentation.html&#34;&gt;documentation&lt;/a&gt; or ask the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt; for help.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;We welcome all forms of contributions:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/issues&#34;&gt;bug reports and feature ideas&lt;/a&gt; (also to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/issues&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/xmonad/xmonad/pulls&#34;&gt;bug fixes, new features, new extensions&lt;/a&gt; (usually to &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib/pulls&#34;&gt;xmonad-contrib&lt;/a&gt;)&lt;/li&gt; &#xA; &lt;li&gt;documentation fixes and improvements: &lt;a href=&#34;https://github.com/xmonad/xmonad&#34;&gt;xmonad&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-contrib&#34;&gt;xmonad-contrib&lt;/a&gt;, &lt;a href=&#34;https://github.com/xmonad/xmonad-web&#34;&gt;xmonad-web&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;helping others in the &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;community&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;financial support: &lt;a href=&#34;https://github.com/sponsors/xmonad&#34;&gt;GitHub Sponsors&lt;/a&gt;, &lt;a href=&#34;https://opencollective.com/xmonad&#34;&gt;Open Collective&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Please do read the &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt; document for more information about bug reporting and code contributions. For a brief overview of the architecture and code conventions, see the &lt;a href=&#34;https://xmonad.github.io/xmonad-docs/xmonad-contrib/XMonad-Doc-Developing.html&#34;&gt;documentation for the &lt;code&gt;XMonad.Doc.Developing&lt;/code&gt; module&lt;/a&gt;. If in doubt, &lt;a href=&#34;https://xmonad.org/community.html&#34;&gt;talk to us&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Authors&lt;/h2&gt; &#xA;&lt;p&gt;Started in 2007 by &lt;a href=&#34;https://github.com/spencerjanssen&#34;&gt;Spencer Janssen&lt;/a&gt;, &lt;a href=&#34;https://github.com/donsbot&#34;&gt;Don Stewart&lt;/a&gt; and &lt;a href=&#34;https://github.com/JasonCreighton&#34;&gt;Jason Creighton&lt;/a&gt;, the &lt;a href=&#34;https://xmonad.org/&#34;&gt;XMonad&lt;/a&gt; project lives on thanks to &lt;a href=&#34;https://github.com/xmonad/xmonad/raw/master/MAINTAINERS.md&#34;&gt;new generations of maintainers&lt;/a&gt; and &lt;a href=&#34;https://github.com/xmonad/xmonad/graphs/contributors&#34;&gt;dozens of contributors&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>PostgREST/postgrest</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/PostgREST/postgrest</id>
    <link href="https://github.com/PostgREST/postgrest" rel="alternate"></link>
    <summary type="html">&lt;p&gt;REST API for any Postgres database&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/bigger-logo.png&#34; alt=&#34;Logo&#34; title=&#34;Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-Patreon-orange.svg?colorB=F96854&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/Donate-PayPal-green.svg?sanitize=true&#34; alt=&#34;Donate&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://gitter.im/begriffs/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/gitter-join%20chat%20%E2%86%92-brightgreen.svg?sanitize=true&#34; alt=&#34;Join the chat at https://gitter.im/begriffs/postgrest&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://postgrest.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat&#34; alt=&#34;Docs&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hub.docker.com/r/postgrest/postgrest/&#34;&gt;&lt;img src=&#34;https://img.shields.io/docker/pulls/postgrest/postgrest.svg?sanitize=true&#34; alt=&#34;Docker Stars&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/PostgREST/postgrest/actions?query=branch%3Amain&#34;&gt;&lt;img src=&#34;https://github.com/postgrest/postgrest/actions/workflows/ci.yaml/badge.svg?branch=main&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://app.codecov.io/gh/PostgREST/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/codecov/c/github/postgrest/postgrest/main&#34; alt=&#34;Coverage Status&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://hackage.haskell.org/package/postgrest&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/postgrest.svg?label=hackage&#34; alt=&#34;Hackage docs&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;PostgREST serves a fully RESTful API from any existing PostgreSQL database. It provides a cleaner, more standards-compliant, faster API than you are likely to write from scratch.&lt;/p&gt; &#xA;&lt;h2&gt;Sponsors&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.cybertec-postgresql.com/en/?utm_source=postgrest.org&amp;amp;utm_medium=referral&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;222px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/cybertec-new.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://www.2ndquadrant.com/en/?utm_campaign=External%20Websites&amp;amp;utm_source=PostgREST&amp;amp;utm_medium=Logo&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/2ndquadrant.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://tryretool.com/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/retool.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt;&lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://gnuhost.eu/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/gnuhost.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://supabase.io?utm_source=postgrest%20backers&amp;amp;utm_medium=open%20source%20partner&amp;amp;utm_campaign=postgrest%20backers%20github&amp;amp;utm_term=homepage&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/supabase.png&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34; valign=&#34;middle&#34;&gt; &lt;a href=&#34;https://oblivious.ai/?utm_source=sponsor&amp;amp;utm_campaign=postgrest&#34; target=&#34;_blank&#34;&gt; &lt;img width=&#34;296px&#34; src=&#34;https://raw.githubusercontent.com/PostgREST/postgrest/main/static/oblivious.jpg&#34;&gt; &lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Big thanks to our sponsors! You can join them by supporting PostgREST on &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;Patreon&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Download the binary (&lt;a href=&#34;https://github.com/PostgREST/postgrest/releases/latest&#34;&gt;latest release&lt;/a&gt;) for your platform.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Invoke for help:&lt;/p&gt; &lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;postgrest --help&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;&lt;a href=&#34;http://postgrest.org&#34;&gt;Documentation&lt;/a&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Latest documentation is at &lt;a href=&#34;http://postgrest.org&#34;&gt;postgrest.org&lt;/a&gt;. You can contribute to the docs in &lt;a href=&#34;https://github.com/PostgREST/postgrest-docs&#34;&gt;PostgREST/postgrest-docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Performance&lt;/h2&gt; &#xA;&lt;p&gt;TLDR; subsecond response times for up to 2000 requests/sec on Heroku free tier. If you&#39;re used to servers written in interpreted languages, prepare to be pleasantly surprised by PostgREST performance.&lt;/p&gt; &#xA;&lt;p&gt;Three factors contribute to the speed. First the server is written in &lt;a href=&#34;https://www.haskell.org/&#34;&gt;Haskell&lt;/a&gt; using the &lt;a href=&#34;http://www.yesodweb.com/blog/2011/03/preliminary-warp-cross-language-benchmarks&#34;&gt;Warp&lt;/a&gt; HTTP server (aka a compiled language with lightweight threads). Next it delegates as much calculation as possible to the database including&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Serializing JSON responses directly in SQL&lt;/li&gt; &#xA; &lt;li&gt;Data validation&lt;/li&gt; &#xA; &lt;li&gt;Authorization&lt;/li&gt; &#xA; &lt;li&gt;Combined row counting and retrieval&lt;/li&gt; &#xA; &lt;li&gt;Data post in single command (&lt;code&gt;returning *&lt;/code&gt;)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Finally it uses the database efficiently with the &lt;a href=&#34;https://nikita-volkov.github.io/hasql-benchmarks/&#34;&gt;Hasql&lt;/a&gt; library by&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Keeping a pool of db connections&lt;/li&gt; &#xA; &lt;li&gt;Using the PostgreSQL binary protocol&lt;/li&gt; &#xA; &lt;li&gt;Being stateless to allow horizontal scaling&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Security&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST &lt;a href=&#34;http://postgrest.org/en/stable/auth.html&#34;&gt;handles authentication&lt;/a&gt; (via JSON Web Tokens) and delegates authorization to the role information defined in the database. This ensures there is a single declarative source of truth for security. When dealing with the database the server assumes the identity of the currently authenticated user, and for the duration of the connection cannot do anything the user themselves couldn&#39;t. Other forms of authentication can be built on top of the JWT primitive. See the docs for more information.&lt;/p&gt; &#xA;&lt;h2&gt;Versioning&lt;/h2&gt; &#xA;&lt;p&gt;A robust long-lived API needs the freedom to exist in multiple versions. PostgREST does versioning through database schemas. This allows you to expose tables and views without making the app brittle. Underlying tables can be superseded and hidden behind public facing views.&lt;/p&gt; &#xA;&lt;h2&gt;Self-documentation&lt;/h2&gt; &#xA;&lt;p&gt;PostgREST uses the &lt;a href=&#34;https://openapis.org/&#34;&gt;OpenAPI&lt;/a&gt; standard to generate up-to-date documentation for APIs. You can use a tool like &lt;a href=&#34;https://github.com/swagger-api/swagger-ui&#34;&gt;Swagger-UI&lt;/a&gt; to render interactive documentation for demo requests against the live API server.&lt;/p&gt; &#xA;&lt;p&gt;This project uses HTTP to communicate other metadata as well. For instance the number of rows returned by an endpoint is reported by - and limited with - range headers. More about &lt;a href=&#34;http://begriffs.com/posts/2014-03-06-beyond-http-header-links.html&#34;&gt;that&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Data Integrity&lt;/h2&gt; &#xA;&lt;p&gt;Rather than relying on an Object Relational Mapper and custom imperative coding, this system requires you put declarative constraints directly into your database. Hence no application can corrupt your data (including your API server).&lt;/p&gt; &#xA;&lt;p&gt;The PostgREST exposes HTTP interface with safeguards to prevent surprises, such as enforcing idempotent PUT requests.&lt;/p&gt; &#xA;&lt;p&gt;See examples of &lt;a href=&#34;http://www.tutorialspoint.com/postgresql/postgresql_constraints.htm&#34;&gt;PostgreSQL constraints&lt;/a&gt; and the &lt;a href=&#34;http://postgrest.org/en/stable/api.html&#34;&gt;API guide&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Supporting development&lt;/h2&gt; &#xA;&lt;p&gt;You can help PostgREST ongoing maintenance and development by:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Making a regular donation through Patreon &lt;a href=&#34;https://www.patreon.com/postgrest&#34;&gt;https://www.patreon.com/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Alternatively, you can make a one-time donation via Paypal &lt;a href=&#34;https://www.paypal.me/postgrest&#34;&gt;https://www.paypal.me/postgrest&lt;/a&gt;&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Every donation will be spent on making PostgREST better for the whole community.&lt;/p&gt; &#xA;&lt;h2&gt;Thanks&lt;/h2&gt; &#xA;&lt;p&gt;The PostgREST organization is grateful to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/BACKERS.md&#34;&gt;sponsors and backers&lt;/a&gt; who support PostgREST&#39;s development.&lt;/li&gt; &#xA; &lt;li&gt;The project &lt;a href=&#34;https://github.com/PostgREST/postgrest/graphs/contributors&#34;&gt;contributors&lt;/a&gt; who have improved PostgREST immensely with their code and good judgement. See more details in the &lt;a href=&#34;https://github.com/PostgREST/postgrest/raw/main/CHANGELOG.md&#34;&gt;changelog&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The cool logo came from &lt;a href=&#34;https://github.com/casalaina&#34;&gt;Mikey Casalaina&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>runtimeverification/haskell-backend</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/runtimeverification/haskell-backend</id>
    <link href="https://github.com/runtimeverification/haskell-backend" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The symbolic execution engine powering the K Framework&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;The Kore Language&lt;/h1&gt; &#xA;&lt;p&gt;Kore is the &#34;core&#34; part of the K framework.&lt;/p&gt; &#xA;&lt;h2&gt;What is Kore all about?&lt;/h2&gt; &#xA;&lt;p&gt;In short, we need a formal semantics of K. In K, users can define formal syntax and semantics of programming languages as K definitions, and automatically obtain parsers, interpreters, compilers, and various verification tools for their languages. Therefore K is a language-independent framework.&lt;/p&gt; &#xA;&lt;p&gt;Thanks to years of research in matching logic and reachability logic, we know that all K does can be nicely formalized as logic reasoning in matching logic. To give K a formal semantics, we only need to formally specify the underlying matching logic theories with which K does reasoning. In practice, these underlying theories are complex and often infinite, and it is tricky to specify infinite theories without a carefully designed formal specification language. And Kore is such a language.&lt;/p&gt; &#xA;&lt;h2&gt;Structure of this project&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://github.com/runtimeverification/haskell-backend/tree/master/docs&#34;&gt;docs&lt;/a&gt; directory contains a collection of documents that describe the mathematical foundation of Kore and a BNF grammar that defines the syntax of Kore language. See &lt;a href=&#34;https://github.com/runtimeverification/haskell-backend/raw/master/docs/introduction.md&#34;&gt;/docs/introduction.md&lt;/a&gt; for an overview of the components of Kore.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;kore&lt;/code&gt; project is an implementation in Haskell of a Kore parser and symbolic execution engine, for use with the &lt;a href=&#34;https://github.com/runtimeverification/k&#34;&gt;K Framework&lt;/a&gt; as a backend.&lt;/p&gt; &#xA;&lt;h2&gt;Building&lt;/h2&gt; &#xA;&lt;p&gt;Besides &lt;a href=&#34;https://git-scm.com/&#34;&gt;git&lt;/a&gt;, you will need &lt;a href=&#34;https://www.haskellstack.org/&#34;&gt;stack&lt;/a&gt; or &lt;a href=&#34;https://haskell.org/cabal&#34;&gt;cabal&lt;/a&gt; to build &lt;code&gt;kore&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;stack build kore&#xA;# or&#xA;cabal build kore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If using &lt;code&gt;cabal&lt;/code&gt;, version 3.0 or later is recommended.&lt;/p&gt; &#xA;&lt;p&gt;Using &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;make&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;make all # builds all binaries&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;macOS&lt;/h3&gt; &#xA;&lt;p&gt;Currently, LLVM 13 from Homebrew installs an incompatible version of &lt;code&gt;install_name_tool&lt;/code&gt;, which breaks the Haskell backend build on macOS. To resolve this, uninstall &lt;code&gt;llvm&lt;/code&gt; and install &lt;code&gt;llvm@12&lt;/code&gt; from Homebrew, then build from scratch.&lt;/p&gt; &#xA;&lt;h4&gt;Apple Silicon&lt;/h4&gt; &#xA;&lt;p&gt;If you are building the project on an Apple Silicon machine, a temporary workaround is necessary to install a new enough version of GHC with support for ARM64 Darwin. To do so, follow the instructions in &lt;a href=&#34;https://github.com/commercialhaskell/stack/pull/5562#issuecomment-913015550&#34;&gt;this comment&lt;/a&gt;. The command-line flags for &lt;code&gt;stack&lt;/code&gt; should then be specified &lt;em&gt;everywhere&lt;/em&gt; an execution of &lt;code&gt;stack&lt;/code&gt; is required. For &lt;code&gt;make&lt;/code&gt; invocations in this project, set the environment variable &lt;code&gt;STACK_BUILD_OPTS=--compiler ghc-8.10.7 --system-ghc&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When &lt;code&gt;stack&lt;/code&gt; and &lt;code&gt;ghc&lt;/code&gt; merge their full support for ARM64 Darwin in future releases, it should be possible to remove this workaround.&lt;/p&gt; &#xA;&lt;h2&gt;Developing&lt;/h2&gt; &#xA;&lt;p&gt;Developers will require all the dependencies listed above, in addition to the requirements and recommendations below.&lt;/p&gt; &#xA;&lt;h3&gt;Required dependencies&lt;/h3&gt; &#xA;&lt;p&gt;For integration testing, we require:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;GNU &lt;a href=&#34;https://www.gnu.org/software/make/&#34;&gt;make&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;The &lt;a href=&#34;https://github.com/runtimeverification/k&#34;&gt;K Framework&lt;/a&gt; frontend.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Instead of installing the frontend, you can use our &lt;code&gt;Dockerfile&lt;/code&gt; to run the integration tests inside a container. Use &lt;code&gt;docker.sh&lt;/code&gt; to run commands inside the container:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;./docker/build.sh  # run once when dependencies change&#xA;./docker/run.sh make all  # build the backend&#xA;./docker/run.sh make test  # run all tests&#xA;./docker/run.sh make -C test/imp test  # run all tests in test/imp&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Recommended dependencies&lt;/h3&gt; &#xA;&lt;p&gt;For setting up a development environment, we recommend:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv&lt;/a&gt; to make the project&#39;s tools available in shells and editors.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server&#34;&gt;haskell-language-server&lt;/a&gt;, a &lt;a href=&#34;https://langserver.org/&#34;&gt;language server&lt;/a&gt; for Haskell that is compatible with most editors. See instructions &lt;a href=&#34;https://raw.githubusercontent.com/runtimeverification/haskell-backend/master/#running-a-language-server&#34;&gt;below&lt;/a&gt; to run a language server.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/ndmitchell/hlint&#34;&gt;hlint&lt;/a&gt; for compliance with project guidelines.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/eradman/entr&#34;&gt;entr&lt;/a&gt; and &lt;a href=&#34;https://github.com/sharkdp/fd&#34;&gt;fd&lt;/a&gt; for running &lt;code&gt;./entr.sh&lt;/code&gt; to keep important files up-to-date.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;We recommend to keep &lt;code&gt;./entr.sh&lt;/code&gt; running in the background to keep important files (such as package descriptions) up-to-date, especially if the developer is using Cabal.&lt;/p&gt; &#xA;&lt;h3&gt;Running a language server&lt;/h3&gt; &#xA;&lt;p&gt;To run a language server, developers will need to activate the appropriate &lt;code&gt;hie.yaml&lt;/code&gt; file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;ln -s hie-stack.yaml hie.yaml  # for Stack&#xA;# or&#xA;ln -s hie-cabal.yaml hie.yaml  # for Cabal&#xA;# or&#xA;ln -s hie-bios.yaml hie.yaml  # if all else fails&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The project&#39;s dependencies must be installed before starting the language server:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;stack build --test --bench --only-dependencies&#xA;# or&#xA;cabal build --enable-tests --enable-benchmarks --only-dependencies kore&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Developing with Nix&lt;/h3&gt; &#xA;&lt;p&gt;We provide a &lt;code&gt;shell.nix&lt;/code&gt; expression with a suitable development environment and a binary cache at &lt;a href=&#34;https://runtimeverification.cachix.org/&#34;&gt;runtimeverification.cachix.org&lt;/a&gt;. The development environment is intended to be used with &lt;code&gt;nix-shell&lt;/code&gt; and &lt;code&gt;cabal&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;When the &lt;code&gt;.cabal&lt;/code&gt; package description file changes, run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-.sh&#34;&gt;# Requires Nix to be installed.&#xA;./nix/rematerialize.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This script is also run by an automatic workflow.&lt;/p&gt; &#xA;&lt;p&gt;We provide a &lt;code&gt;test.nix&lt;/code&gt; for running integration tests:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;nix-build test.nix  # run all integration tests&#xA;nix-build test.nix --argstr test imp  # run the integration tests in test/imp&#xA;nix-shell test.nix  # enter a shell where we can run tests manually&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>wasp-lang/wasp</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/wasp-lang/wasp</id>
    <link href="https://github.com/wasp-lang/wasp" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A programming language that understands what a web app is.&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img height=&#34;80px&#34; src=&#34;https://user-images.githubusercontent.com/1536647/77317442-78625700-6d0b-11ea-9822-0fb21e557e87.png&#34;&gt; &lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; A programming language that understands what a web app is. &lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/raw/main/LICENSE&#34;&gt;&lt;img alt=&#34;license&#34; src=&#34;https://img.shields.io/github/license/wasp-lang/wasp&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/search?l=haskell&#34;&gt;&lt;img alt=&#34;language&#34; src=&#34;https://img.shields.io/badge/language-Haskell-purple.svg?sanitize=true&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/wasp-lang/wasp/actions&#34;&gt;&lt;img alt=&#34;build status&#34; src=&#34;https://img.shields.io/github/workflow/status/wasp-lang/wasp/CI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img alt=&#34;discord&#34; src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20@%20discord&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p align=&#34;center&#34;&gt; {= &lt;a href=&#34;https://wasp-lang.notion.site/Wasp-Careers-59fd1682c80d446f92be5fa65cc17672&#34;&gt;We are hiring!&lt;/a&gt; =} &lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasp-lang.dev&#34;&gt;&lt;strong&gt;Project page&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;&lt;strong&gt;Docs&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;br&gt; &#xA;&lt;p&gt;Wasp (&lt;strong&gt;W&lt;/strong&gt;eb &lt;strong&gt;A&lt;/strong&gt;pplication &lt;strong&gt;Sp&lt;/strong&gt;ecification Language) is a declarative DSL (domain-specific language) for developing, building and deploying modern full-stack web apps with less code.&lt;/p&gt; &#xA;&lt;p&gt;Concepts such as &lt;em&gt;app&lt;/em&gt;, &lt;em&gt;page&lt;/em&gt;, &lt;em&gt;user&lt;/em&gt;, &lt;em&gt;login&lt;/em&gt;, &lt;em&gt;frontend&lt;/em&gt;, &lt;em&gt;production&lt;/em&gt;, etc. are baked into the language, bringing a new level of expressiveness and allowing you to get more work done with fewer lines of code.&lt;/p&gt; &#xA;&lt;p&gt;While describing high-level features with Wasp, you still write the rest of your logic in your favorite technologies (currently React, NodeJS, Prisma).&lt;/p&gt; &#xA;&lt;p&gt;NOTE: Wasp is in alpha and is therefore likely to change a lot, have bugs and miss important features.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;// file: main.wasp&#xA;&#xA;app TodoApp {&#xA;  title: &#34;Todo App&#34;&#xA;}&#xA;&#xA;route RootRoute { path: &#34;/&#34;, to: MainPage }&#xA;page MainPage {&#xA;  component: import Main from &#34;@ext/pages/Main.js&#34; // Importing React component.&#xA;}&#xA;&#xA;query getTasks {&#xA;  fn: import { getTasks } from &#34;@ext/queries.js&#34;, // Importing NodeJS code.&#xA;  entities: [Task]&#xA;}&#xA;&#xA;entity Task {=psl&#xA;    id          Int     @id @default(autoincrement())&#xA;    description String&#xA;    isDone      Boolean @default(false)&#xA;psl=}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Source files (&lt;code&gt;.wasp&lt;/code&gt;, &lt;code&gt;.js(x)&lt;/code&gt;, &lt;code&gt;.css&lt;/code&gt;, ...) are compiled by &lt;code&gt;waspc&lt;/code&gt; (Wasp compiler) into the web technology stack of your choice (currently React + NodeJS/ExpressJS + Prisma).&lt;/p&gt; &#xA;&lt;p&gt;&lt;span&gt;▶&lt;/span&gt; Check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/examples/tutorials/TodoApp&#34;&gt;TodoApp example&lt;/a&gt; for the complete code example. &lt;span&gt;◀&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;Why is Wasp awesome:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Quick start&lt;/strong&gt;: Due to its expressiveness, you can create and deploy a production-ready web app from scratch with very few lines of concise, consistent, declarative code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Flexible&lt;/strong&gt;: When you need more control than Wasp offers, you can write code in existing technologies such as js/html/css/... and combine it with Wasp code!&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;No lock-in&lt;/strong&gt;: If Wasp becomes too limiting for you, simply eject and continue with the generated source code, which is human-readable.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For more information about Wasp, check &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;&lt;strong&gt;docs&lt;/strong&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Get started&lt;/h1&gt; &#xA;&lt;p&gt;Run&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.wasp-lang.dev/installer.sh | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;to install Wasp on OSX/Linux. From there, just follow the instructions to run your first app in less then a minute!&lt;/p&gt; &#xA;&lt;p&gt;For more details (including installing on Windows) check out &lt;a href=&#34;https://wasp-lang.dev/docs&#34;&gt;the docs&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;This repository&lt;/h1&gt; &#xA;&lt;p&gt;This is the main repo of the Wasp universe, containing core code (mostly &lt;code&gt;waspc&lt;/code&gt; - Wasp compiler) and the supporting materials.&lt;/p&gt; &#xA;&lt;h1&gt;Project status&lt;/h1&gt; &#xA;&lt;p&gt;Currently, Wasp is in alpha and has enough features so that you can develop a basic web app in it! You might find that it misses flexibility in some places or that some bigger features are missing, but the basics are there and we are now adding on top of them. In the case you get stuck, you can take the generated code and continue with it. As Wasp grows further, it should allow the development of web apps of increasing complexity, without the need to eject!&lt;/p&gt; &#xA;&lt;p&gt;While the idea is to support multiple web tech stacks in the future, right now we are focusing on the specific stack: React + react-query, NodeJS + ExpressJS, Prisma. We might yet change that as time goes, taking trends into account, but for now, this is serving us well for the purpose of developing compiler and language.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;Any way you want to contribute is a good way :)!&lt;/p&gt; &#xA;&lt;p&gt;The best place to start is to check out &lt;a href=&#34;https://raw.githubusercontent.com/wasp-lang/wasp/main/waspc/&#34;&gt;waspc/&lt;/a&gt;, where you can find detailed steps for the first time contributors + technical details about the Wasp compiler.&lt;/p&gt; &#xA;&lt;p&gt;Even if you don&#39;t plan to submit any code, just joining the discussion on discord &lt;a href=&#34;https://discord.gg/rzdnErX&#34;&gt;&lt;img src=&#34;https://img.shields.io/discord/686873244791210014?label=chat%20on%20discord&#34; alt=&#34;Discord&#34;&gt;&lt;/a&gt; and giving your feedback is already great and helps a lot (motivates us and helps us figure out how to shape Wasp)!&lt;/p&gt; &#xA;&lt;p&gt;You can also:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;span&gt;⭐&lt;/span&gt; Star this repo to show your interest/support.&lt;/li&gt; &#xA; &lt;li&gt;&lt;span&gt;📫&lt;/span&gt; Stay updated by subscribing to our &lt;a href=&#34;https://wasp-lang.dev#signup&#34;&gt;email list&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Careers&lt;/h1&gt; &#xA;&lt;p&gt;Check our &lt;a href=&#34;https://wasp-lang.notion.site/Wasp-Careers-59fd1682c80d446f92be5fa65cc17672&#34;&gt;careers&lt;/a&gt; page for a list of currently opened positions!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-db-sync</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/input-output-hk/cardano-db-sync</id>
    <link href="https://github.com/input-output-hk/cardano-db-sync" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A component that follows the Cardano chain and stores blocks and transactions in PostgreSQL&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Cardano DB Sync&lt;/h1&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Anyone wishing to build and run anything in this repository should avoid the &lt;code&gt;master&lt;/code&gt; branch and build/run from the latest release tag.&lt;/p&gt; &#xA;&lt;h2&gt;Purpose&lt;/h2&gt; &#xA;&lt;p&gt;The purpose of Cardano DB Sync is to follow the Cardano chain and take information from the chain and an internally maintained copy of ledger state. Data is then extracted from the chain and inserted into a PostgreSQL database. SQL queries can then be written directly against the database schema or as queries embedded in any language with libraries for interacting with an SQL database.&lt;/p&gt; &#xA;&lt;p&gt;Examples of what someone would be able to do via an SQL query against a Cardano DB Sync instance fully synced to a specific network is:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Look up any block, transaction, address, stake pool etc on that network, usually by the hash that identifies that item or the index into another table.&lt;/li&gt; &#xA; &lt;li&gt;Look up the balance of any stake address for any Shelley or later epoch.&lt;/li&gt; &#xA; &lt;li&gt;Look up the amount of ADA delegated to each pool for any Shelley or later epoch.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Example SQL queries are available at &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example Queries&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Architecture&lt;/h2&gt; &#xA;&lt;p&gt;The cardano-db-sync component consists of a set of components:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db&lt;/code&gt; which defines common data types and functions used by any application that needs to interact with the data base from Haskell. In particular, it defines the database schema.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-tool&lt;/code&gt; a tool used to manage the databases of cardano-db-sync (create and run migrations, validate and analyse)&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cardano-db-sync&lt;/code&gt; which acts as a Cardano node, following the chain and inserting data from the chain into a PostgreSQL database.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The db-sync node is written in a highly modular fashion to allow it to be as flexible as possible.&lt;/p&gt; &#xA;&lt;p&gt;The &lt;code&gt;cardano-db-sync&lt;/code&gt; node connects to a locally running &lt;code&gt;cardano-node&lt;/code&gt; (ie one connected to other nodes in the Cardano network over the internet with TCP/IP) using a Unix domain socket, retrieves blocks, updates its internal ledger state and stores parts of each block in a local PostgreSQL database. The database does not store things like cryptographic signatures but does store enough information to follow the chain of blocks and look at the transactions within blocks.&lt;/p&gt; &#xA;&lt;p&gt;The PostgreSQL database is designed to be accessed in a read-only fashion from other applications. The database schema is highly normalised which helps prevent data inconsistencies (specifically with the use of foreign keys from one table to another). More user friendly database queries can be implemented using &lt;a href=&#34;https://www.postgresql.org/docs/current/sql-createview.html&#34;&gt;Postgres Views&lt;/a&gt; to implement joins between tables.&lt;/p&gt; &#xA;&lt;h2&gt;System Requirements&lt;/h2&gt; &#xA;&lt;p&gt;The system requirements for &lt;code&gt;cardano-db-sync&lt;/code&gt; (with both &lt;code&gt;db-sync&lt;/code&gt; and the &lt;code&gt;node&lt;/code&gt; running on the same machine are:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Any of the big well known Linux distributions (eg, Debian, Ubuntu, RHEL, CentOS, Arch etc).&lt;/li&gt; &#xA; &lt;li&gt;32 Gigabytes of RAM or more.&lt;/li&gt; &#xA; &lt;li&gt;4 CPU cores or more.&lt;/li&gt; &#xA; &lt;li&gt;Ensure that the machine has sufficient IOPS (Input/Output Operations per Second). Ie it should be 60k IOPS or better. Lower IOPS ratings will result in slower sync times and/or falling behind the chain tip.&lt;/li&gt; &#xA; &lt;li&gt;160 Gigabytes or more of disk storage (preferably SSD which are 2-5 times faster than electro-mechanical disks).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The recommended configuration is to have the &lt;code&gt;db-sync&lt;/code&gt; and the PostgreSQL server on the same machine. During syncing (getting historical data from the blockchain) there is a &lt;strong&gt;HUGE&lt;/strong&gt; amount of data traffic between &lt;code&gt;db-sync&lt;/code&gt; and the database. Traffic to a local database is significantly faster than traffic to a database on the LAN or remotely to another location.&lt;/p&gt; &#xA;&lt;h2&gt;Troubleshooting&lt;/h2&gt; &#xA;&lt;p&gt;If you have any issues with this project, consult the &lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/troubleshooting.md&#34;&gt;Troubleshooting&lt;/a&gt; page for possible solutions.&lt;/p&gt; &#xA;&lt;h2&gt;Further Reading&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/building-running.md&#34;&gt;BuildingRunning&lt;/a&gt;: Building and running the db-sync node.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/docker.md&#34;&gt;Docker&lt;/a&gt;: Instruction for docker-compose, and building the images using nix.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/interesting-queries.md&#34;&gt;Example SQL queries&lt;/a&gt;: Some example SQL and Haskell/Esqueleto queries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/pool-offline-data.md&#34;&gt;PoolOfflineData&lt;/a&gt;: Explanation of how stake pool offline data is retried.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema.md&#34;&gt;Schema Documentation&lt;/a&gt;: The database schema documentation.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/schema-management.md&#34;&gt;Schema Management&lt;/a&gt;: How the database schema is managed and modified.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/state-snapshot.md&#34;&gt;StateSnapshot&lt;/a&gt;: Document the creation and restoration of state snapshot files.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-db-sync/native.haskellPackages.cardano-db.checks.test-db.x86_64-linux/latest/download/1&#34;&gt;SQL DB Schema&lt;/a&gt;: The current PostgreSQL DB schema, as generated by the code.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-db-sync/master/doc/validation.md&#34;&gt;Validation&lt;/a&gt;: Explanation of validation done by the db-sync node and assumptions made.&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>brendanhay/gogol</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/brendanhay/gogol</id>
    <link href="https://github.com/brendanhay/gogol" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A comprehensive Google Services SDK for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Gogol&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/gogol&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/gogol.svg?sanitize=true&#34; alt=&#34;Hackage Version&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#description&#34;&gt;Description&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#organisation&#34;&gt;Organisation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#change-log&#34;&gt;Change Log&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#contribute&#34;&gt;Contribute&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#code-generation&#34;&gt;Code Generation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/#licence&#34;&gt;Licence&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;A comprehensive Google Services SDK for Haskell supporting all of the publicly available services.&lt;/p&gt; &#xA;&lt;h2&gt;Documentation&lt;/h2&gt; &#xA;&lt;p&gt;You can find the latest stable release documentation for each respective library on Hackage under the &lt;a href=&#34;http://hackage.haskell.org/packages/#cat:Google&#34;&gt;Google section&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Organisation&lt;/h2&gt; &#xA;&lt;p&gt;This repository is organised into the following directory structure:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol&#34;&gt;&lt;code&gt;lib/gogol&lt;/code&gt;&lt;/a&gt;: Actual operational logic, you&#39;ll need to import this to send requests etc.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/gogol-core&#34;&gt;&lt;code&gt;lib/gogol-core&lt;/code&gt;&lt;/a&gt;: The &lt;code&gt;gogol-core&lt;/code&gt; library upon which each of the services depends.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/lib/services&#34;&gt;&lt;code&gt;lib/services/gogol-*&lt;/code&gt;&lt;/a&gt;: Data types for each of the individual Google Compute Engine Service libraries.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/examples&#34;&gt;&lt;code&gt;examples&lt;/code&gt;&lt;/a&gt;: A currently sparse collection of examples for the various services.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/configs&#34;&gt;&lt;code&gt;configs&lt;/code&gt;&lt;/a&gt;, Configuration, templates, and assets for the code generator.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gen&#34;&gt;&lt;code&gt;gen&lt;/code&gt;&lt;/a&gt;: The code generation binary.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/scripts&#34;&gt;&lt;code&gt;scripts&lt;/code&gt;&lt;/a&gt;: Scripts to manage the release lifecycle of the service libraries.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Change Log&lt;/h2&gt; &#xA;&lt;p&gt;A change log for the entire project can be found under &lt;a href=&#34;https://raw.githubusercontent.com/brendanhay/gogol/main/gogol/CHANGELOG.md&#34;&gt;&lt;code&gt;gogol/CHANGELOG.md&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Contribute&lt;/h2&gt; &#xA;&lt;p&gt;For any problems, comments, or feedback please create an issue &lt;a href=&#34;https://github.com/brendanhay/gogol/issues&#34;&gt;here on GitHub&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Code Generation&lt;/h2&gt; &#xA;&lt;p&gt;For pull requests which affect generated output, please &lt;em&gt;do not include&lt;/em&gt; the actual regenerated service code, only commit the updates to the generator and related configuration.&lt;/p&gt; &#xA;&lt;p&gt;This ensures the Continuous Integration process is the single source of truth for generated code changes, and keeps pull requests readable and focused on actual generator code/logic changes.&lt;/p&gt; &#xA;&lt;h3&gt;Adding New Services&lt;/h3&gt; &#xA;&lt;p&gt;The configuration for the generation step of each individual service endpoint lives under &lt;code&gt;./configs/services&lt;/code&gt;. The naming matches the Google Discovery Service naming of endpoints, which are vendored under &lt;code&gt;./configs/models&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Rather than actually crawling the Discovery Service, the &lt;a href=&#34;https://www.github.com/google/google-api-go-client&#34;&gt;Google API Go Client&lt;/a&gt; is vendored under &lt;code&gt;./vendor&lt;/code&gt;, and the JSON service definitions are copied to &lt;code&gt;./configs/models&lt;/code&gt; to ensure reproducibility of the generation steps and the abilitry to diff across versions.&lt;/p&gt; &#xA;&lt;h3&gt;Example: Cloud Dataproc&lt;/h3&gt; &#xA;&lt;p&gt;To add a new endpoint, first create the related JSON configuration in the &lt;code&gt;./configs/services&lt;/code&gt; directory.&lt;/p&gt; &#xA;&lt;p&gt;Since the Cloud Dataproc API is called &lt;code&gt;dataproc-api.json&lt;/code&gt; in the Google Discovery API, you would create the configuration &lt;code&gt;./configs/services/dataproc.json&lt;/code&gt; with the following contents:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;{&#xA; &#34;library&#34;: &#34;dataproc&#34;,&#xA; &#34;canonicalName&#34;: &#34;Dataproc&#34;&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then, the &lt;code&gt;Makefile&lt;/code&gt; is used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;make clean&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will build the &lt;code&gt;./bin/gogol-gen&lt;/code&gt; binary, and will generate a Haskell library for each API that has matching &lt;code&gt;./configs/services/*.json&lt;/code&gt; configuration.&lt;/p&gt; &#xA;&lt;p&gt;For the above example, the result would be a &lt;code&gt;./lib/services/gogol-dataproc&lt;/code&gt; directory at the top-level of the project containing the generated API client.&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;&lt;code&gt;make full-clean&lt;/code&gt; can be used to cause a complete re-download of all (including new) service models.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;Individual clients/SDKs can be generated by passing a specific &lt;code&gt;MODELS&lt;/code&gt; environment variable to the &lt;code&gt;make&lt;/code&gt; command, for example: &lt;code&gt;MODELS=configs/models/admin/directory/v1/admin-api.json make&lt;/code&gt;&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;h2&gt;Licence&lt;/h2&gt; &#xA;&lt;p&gt;Gogol is released under the &lt;a href=&#34;http://www.mozilla.org/MPL/&#34;&gt;Mozilla Public License Version 2.0&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Parts of the code are derived from Google Compute Engine service descriptions, licensed under Apache 2.0. Source files subject to this contain an additional licensing clause in their header.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>eashanhatti/peridot</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/eashanhatti/peridot</id>
    <link href="https://github.com/eashanhatti/peridot" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A fast functional language based on two level type theory&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/eashanhatti/peridot/master/logo.png&#34; alt=&#34;Peridot logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;An experimental language for exploring the practical applications of two level type theory.&lt;/p&gt; &#xA;&lt;p&gt;Discussion takes place on the &lt;a href=&#34;https://discord.gg/jFZ8JyUNtn&#34;&gt;r/ProgrammingLanguages Discord server&lt;/a&gt; in the #peridot channel.&lt;/p&gt; &#xA;&lt;h3&gt;References and Inspiration&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eashanhatti/peridot/master/REFERENCES.md&#34;&gt;REFERENCES.md&lt;/a&gt;: A list of prior art that have influenced Peridot&#39;s design and implementation in major ways&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Information&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eashanhatti/peridot/master/notes/RATIONALE.md&#34;&gt;RATIONALE.md&lt;/a&gt;: An in-depth explanation of Peridot&#39;s design rationale&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/eashanhatti/peridot/master/notes/OLD_VS_NEW.md&#34;&gt;OLD_VS_NEW.md&lt;/a&gt;: A comparison of Peridot and &lt;a href=&#34;https://github.com/eashanhatti/konna&#34;&gt;Konna&lt;/a&gt;, a previous project of mine also based on 2LTT&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Introduction&lt;/h3&gt; &#xA;&lt;p&gt;Peridot is a functional/logic language based on 2LTT (two level type theory). It uses a logic language for the meta level, which allows for domain specific, declarative optimizers to be written entirely in userspace - writers of optimizers can focus on purely on the optimizations themselves. Meanwhile, the object language is high-level, dependently typed, and functional. Here&#39;s a very simple example of optimizing arithmetic:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- optimize `x * 2` to `x &amp;lt;&amp;lt; 1`&#xA;optimize {~x * 2} {~y &amp;lt;&amp;lt; 1} :- optimize x y.&#xA;&#xA;-- optimize `x * y / y` to `x`&#xA;optimize {(~x * ~y) / ~y} {~z} :- optimize x z.&#xA;&#xA;-- optimize both sides of a division&#xA;optimize {~x / ~y} {~z / ~w} :-&#xA;  optimize x z,&#xA;  optimize y w.&#xA;&#xA;optimize {~x} {~x} :- int_literal x.&#xA;&#xA;main =&#xA;    -- c = {3}, c = {(3 &amp;lt;&amp;lt; 1) / 2}&#xA;    let optimize {(3 * 2) / 2} c&#xA;    -- 3&#xA;    in print ~(select smallest c)&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>haskell/haskell-language-server</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/haskell/haskell-language-server</id>
    <link href="https://github.com/haskell/haskell-language-server" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Official haskell ide support via language server (LSP). Successor of ghcide &amp; haskell-ide-engine.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;haskell-language-server&lt;/h1&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/haskell/haskell-language-server/master/docs/logos/logo-256.png&#34; alt=&#34;haskell-language-server&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/haskell/haskell-language-server/releases/latest&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/haskell/haskell-language-server.svg?sanitize=true&#34; alt=&#34;Release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/haskell-language-server.svg?logo=haskell&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/raw/master/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-Apache2-green.svg?dummy&#34; alt=&#34;License Apache 2.0&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/haskell/haskell-language-server/&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/github/haskell/haskell-language-server/master.svg?sanitize=true&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/test.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Testing Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml&#34;&gt;&lt;img src=&#34;https://github.com/haskell/haskell-language-server/actions/workflows/nix.yml/badge.svg?sanitize=true&#34; alt=&#34;GitHub Nix Workflow&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://web.libera.chat/?channels=#haskell-language-server&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/chat-on%20libera-brightgreen.svg?sanitize=true&#34; alt=&#34;ircchat&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.codetriage.com/haskell/haskell-language-server&#34;&gt;&lt;img src=&#34;https://www.codetriage.com/haskell/haskell-language-server/badges/users.svg?sanitize=true&#34; alt=&#34;codetriage&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;The official Haskell language server (LSP) implementation. Consult the &lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/&#34;&gt;project documentation&lt;/a&gt; for more details.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/features.html&#34;&gt;Features&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/installation.html&#34;&gt;Installation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/supported-versions.html&#34;&gt;Supported GHC Versions&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/configuration.html&#34;&gt;Configuration&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/troubleshooting.html&#34;&gt;Troubleshooting&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://haskell-language-server.readthedocs.io/en/latest/contributing/index.html&#34;&gt;Contributing&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>purescript/purescript</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/purescript/purescript</id>
    <link href="https://github.com/purescript/purescript" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A strongly-typed language that compiles to JavaScript&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/purescript/purescript/master/logo.png&#34; alt=&#34;PureScript&#34; width=&#34;392&#34;&gt; &#xA;&lt;p&gt;A small strongly typed programming language with expressive types that compiles to JavaScript, written in and inspired by Haskell.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;http://hackage.haskell.org/package/purescript&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/purescript.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/purescript/purescript/actions/workflows/ci.yml/badge.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Language info&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://purescript.org&#34;&gt;PureScript home&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/releases&#34;&gt;Releases &amp;amp; changelog&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/purescript/raw/master/CONTRIBUTING.md&#34;&gt;Contributing to PureScript&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Resources&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://book.purescript.org/&#34;&gt;PureScript book&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/purescript/documentation&#34;&gt;Documentation&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://try.purescript.org&#34;&gt;Try PureScript&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://pursuit.purescript.org/&#34;&gt;Pursuit Package Index&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Help!&lt;/h2&gt; &#xA;&lt;h3&gt;Community Spaces&lt;/h3&gt; &#xA;&lt;p&gt;The following spaces are governed by the &lt;a href=&#34;https://github.com/purescript/governance/raw/master/CODE_OF_CONDUCT.md&#34;&gt;PureScript Community Code of Conduct&lt;/a&gt;. The majority of PureScript users use these spaces to discuss and collaborate on PureScript-related topics:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://purescript.org/chat&#34;&gt;PureScript Discord&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://discourse.purescript.org/&#34;&gt;PureScript Discourse&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Unaffiliated Spaces&lt;/h3&gt; &#xA;&lt;p&gt;Some PureScript users also collaborate in the below spaces. These do not fall under the code of conduct linked above. They may have no code of conduct or one very different than the one linked above.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://matrix.to/#/#purescript:matrix.org&#34;&gt;PureScript Matrix&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/tagged/purescript&#34;&gt;PureScript on StackOverflow&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://libera.chat/&#34;&gt;The &lt;code&gt;#purescript&lt;/code&gt; channel on Libera.Chat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>github/semantic</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/github/semantic</id>
    <link href="https://github.com/github/semantic" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Parsing, analyzing, and comparing source code across many languages&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Semantic&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;semantic&lt;/code&gt; is a Haskell library and command line tool for parsing, analyzing, and comparing source code.&lt;/p&gt; &#xA;&lt;p&gt;In a hurry? Check out our documentation of &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/docs/examples.md&#34;&gt;example uses for the &lt;code&gt;semantic&lt;/code&gt; command line tool&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Table of Contents&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#usage&#34;&gt;Usage&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#language-support&#34;&gt;Language support&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#development&#34;&gt;Development&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#technology-and-architecture&#34;&gt;Technology and architecture&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;&lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/#licensing&#34;&gt;Licensing&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Run &lt;code&gt;semantic --help&lt;/code&gt; for complete list of up-to-date options.&lt;/p&gt; &#xA;&lt;h4&gt;Parse&lt;/h4&gt; &#xA;&lt;pre&gt;&lt;code&gt;Usage: semantic parse [--sexpression | (--json-symbols|--symbols) |&#xA;                        --proto-symbols | --show | --quiet] [FILES...]&#xA;  Generate parse trees for path(s)&#xA;&#xA;Available options:&#xA;  --sexpression            Output s-expression parse trees (default)&#xA;  --json-symbols,--symbols Output JSON symbol list&#xA;  --proto-symbols          Output protobufs symbol list&#xA;  --show                   Output using the Show instance (debug only, format&#xA;                           subject to change without notice)&#xA;  --quiet                  Don&#39;t produce output, but show timing stats&#xA;  -h,--help                Show this help text&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Language support&lt;/h2&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th align=&#34;left&#34;&gt;Language&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Parse&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;AST Symbols†&lt;/th&gt; &#xA;   &lt;th align=&#34;center&#34;&gt;Stack graphs&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Ruby&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JavaScript&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TypeScript&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Python&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Go&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;PHP&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Java&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSON&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬜️&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;⬜️&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;JSX&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;TSX&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;CodeQL&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;✅&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td align=&#34;left&#34;&gt;Haskell&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;🚧&lt;/td&gt; &#xA;   &lt;td align=&#34;center&#34;&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;† Used for &lt;a href=&#34;https://help.github.com/en/github/managing-files-in-a-repository/navigating-code-on-github&#34;&gt;code navigation&lt;/a&gt; on github.com.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ — Supported&lt;/li&gt; &#xA; &lt;li&gt;🔶 — Partial support&lt;/li&gt; &#xA; &lt;li&gt;🚧 — Under development&lt;/li&gt; &#xA; &lt;li&gt;⬜ - N/A ️&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Development&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;semantic&lt;/code&gt; requires at least GHC 8.10.1 and Cabal 3.0. We strongly recommend using &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;&lt;code&gt;ghcup&lt;/code&gt;&lt;/a&gt; to sandbox GHC versions, as GHC packages installed through your OS&#39;s package manager may not install statically-linked versions of the GHC boot libraries. &lt;code&gt;semantic&lt;/code&gt; currently builds only on Unix systems; users of other operating systems may wish to use the &lt;a href=&#34;https://github.com/github/semantic/packages/11609&#34;&gt;Docker images&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;We use &lt;code&gt;cabal&#39;s&lt;/code&gt; &lt;a href=&#34;https://cabal.readthedocs.io/en/3.4/nix-local-build-overview.html&#34;&gt;Nix-style local builds&lt;/a&gt; for development. To get started quickly:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:github/semantic.git&#xA;cd semantic&#xA;script/bootstrap&#xA;cabal v2-build all&#xA;cabal v2-run semantic:test&#xA;cabal v2-run semantic:semantic -- --help&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can also use the &lt;a href=&#34;https://bazel.build&#34;&gt;Bazel&lt;/a&gt; build system for development. To learn more about Bazel and why it might give you a better development experience, check the &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/docs/build.md&#34;&gt;build documentation&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone git@github.com:github/semantic.git&#xA;cd semantic&#xA;script/bootstrap-bazel&#xA;bazel build //...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;stack&lt;/code&gt; as a build tool is not officially supported; there is &lt;a href=&#34;https://github.com/jkachmar/semantic-stack-yaml&#34;&gt;unofficial &lt;code&gt;stack.yaml&lt;/code&gt; support&lt;/a&gt; available, though we cannot make guarantees as to its stability.&lt;/p&gt; &#xA;&lt;h2&gt;Technology and architecture&lt;/h2&gt; &#xA;&lt;p&gt;Architecturally, &lt;code&gt;semantic&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Generates per-language Haskell syntax types based on &lt;a href=&#34;https://github.com/tree-sitter/tree-sitter&#34;&gt;tree-sitter&lt;/a&gt; grammar definitions.&lt;/li&gt; &#xA; &lt;li&gt;Reads blobs from a filesystem or provided via a protocol buffer request.&lt;/li&gt; &#xA; &lt;li&gt;Returns blobs or performs analysis.&lt;/li&gt; &#xA; &lt;li&gt;Renders output in one of many supported formats.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Throughout its lifestyle, &lt;code&gt;semantic&lt;/code&gt; has leveraged a number of interesting algorithms and techniques, including:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Myers&#39; algorithm (SES) as described in the paper &lt;a href=&#34;http://www.xmailserver.org/diff2.pdf&#34;&gt;&lt;em&gt;An O(ND) Difference Algorithm and Its Variations&lt;/em&gt;&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;RWS as described in the paper &lt;a href=&#34;https://db.in.tum.de/~finis/papers/RWS-Diff.pdf&#34;&gt;&lt;em&gt;RWS-Diff: Flexible and Efficient Change Detection in Hierarchical Data&lt;/em&gt;&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Open unions and &lt;a href=&#34;http://www.cs.ru.nl/~W.Swierstra/Publications/DataTypesALaCarte.pdf&#34;&gt;data types à la carte&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;An implementation of &lt;a href=&#34;https://plum-umd.github.io/abstracting-definitional-interpreters/&#34;&gt;Abstracting Definitional Interpreters&lt;/a&gt; extended to work with an à la carte representation of syntax terms.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Contributions&lt;/h2&gt; &#xA;&lt;p&gt;Contributions are welcome! Please see our &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/CONTRIBUTING.md&#34;&gt;contribution guidelines&lt;/a&gt; and our &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/CODE_OF_CONDUCT.md&#34;&gt;code of conduct&lt;/a&gt; for details on how to participate in our community.&lt;/p&gt; &#xA;&lt;h2&gt;Licensing&lt;/h2&gt; &#xA;&lt;p&gt;Semantic is licensed under the &lt;a href=&#34;https://raw.githubusercontent.com/github/semantic/main/semantic/LICENSE&#34;&gt;MIT license&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>erebe/wstunnel</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/erebe/wstunnel</id>
    <link href="https://github.com/erebe/wstunnel" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Tunneling over websocket protocol - Static binary available&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/erebe/wstunnel/raw/master/logo_wstunnel.png&#34; alt=&#34;wstunnel logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Most of the time when you are using a public network, you are behind some kind of firewall or proxy. One of their purpose is to constrain you to only use certain kind of protocols. Nowadays, the most widespread protocol is http and is de facto allowed by third party equipment.&lt;/p&gt; &#xA;&lt;p&gt;This tool understands this fact and uses the websocket protocol which is compatible with http in order to bypass firewalls and proxies. Wstunnel allows you to tunnel what ever traffic you want.&lt;/p&gt; &#xA;&lt;p&gt;My inspiration came from &lt;a href=&#34;https://www.npmjs.com/package/wstunnel&#34;&gt;this project&lt;/a&gt; but as I don&#39;t want to install npm and nodejs to use this tool, I remade it in Haskell and improved it.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;What to expect:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Good error messages and debug informations&lt;/li&gt; &#xA; &lt;li&gt;Static tunneling (TCP and UDP)&lt;/li&gt; &#xA; &lt;li&gt;Dynamic tunneling (socks5 proxy)&lt;/li&gt; &#xA; &lt;li&gt;Support for http proxy (when behind one)&lt;/li&gt; &#xA; &lt;li&gt;Support for tls/https server (with embedded self signed certificate, see comment in the example section)&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Standalone binary for linux x86_64&lt;/strong&gt; (so just cp it where you want)&lt;/li&gt; &#xA; &lt;li&gt;Standalone archive for windows&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;P.S: Please do not pay attention to Main.hs because as I hate to write command line code this file is crappy&lt;/p&gt; &#xA;&lt;h2&gt;Command line&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;Use the websockets protocol to tunnel {TCP,UDP} traffic&#xA;wsTunnelClient &amp;lt;---&amp;gt; wsTunnelServer &amp;lt;---&amp;gt; RemoteHost&#xA;Use secure connection (wss://) to bypass proxies&#xA;&#xA;wstunnel [OPTIONS] ws[s]://wstunnelServer[:port]&#xA;&#xA;Client options:&#xA;  -L --localToRemote=[BIND:]PORT:HOST:PORT      Listen on local and forwards&#xA;                                                traffic from remote. Can be&#xA;                                                used multiple time&#xA;  -D --dynamicToRemote=[BIND:]PORT              Listen on local and&#xA;                                                dynamically (with socks5 proxy)&#xA;                                                forwards traffic from remote&#xA;  -u --udp                                      forward UDP traffic instead&#xA;                                                of TCP&#xA;     --udpTimeoutSec=INT                        When using udp forwarding,&#xA;                                                timeout in seconds after when&#xA;                                                the tunnel connection is&#xA;                                                closed. Default 30sec, -1 means&#xA;                                                no timeout&#xA;  -p --httpProxy=USER:PASS@HOST:PORT            If set, will use this proxy&#xA;                                                to connect to the server&#xA;     --soMark=int                               (linux only) Mark network&#xA;                                                packet with SO_MARK sockoption&#xA;                                                with the specified value. You&#xA;                                                need to use {root, sudo,&#xA;                                                capabilities} to run wstunnel&#xA;                                                when using this option&#xA;     --upgradePathPrefix=String                 Use a specific prefix that&#xA;                                                will show up in the http path&#xA;                                                in the upgrade request. Useful&#xA;                                                if you need to route requests&#xA;                                                server side but don&#39;t have&#xA;                                                vhosts&#xA;     --hostHeader=String                        If set, add the custom string&#xA;                                                as host http header&#xA;     --tlsSNI=String                            If set, use custom string in&#xA;                                                the SNI during TLS handshake&#xA;     --websocketPingFrequencySec=int            do a hearthbeat ping every x&#xA;                                                seconds to maintain websocket&#xA;                                                connection&#xA;     --upgradeCredentials=USER[:PASS]           Credentials for the Basic&#xA;                                                HTTP authorization type sent&#xA;                                                with the upgrade request.&#xA;  -H --customHeaders=&#34;HeaderName: HeaderValue&#34;  Send custom headers in the&#xA;                                                upgrade request. Can be used&#xA;                                                multiple time&#xA;  -h --help                                     Display help message&#xA;  -V --version                                  Print version information&#xA;Server options:&#xA;     --server                                   Start a server that will&#xA;                                                forward traffic for you&#xA;  -r --restrictTo=HOST:PORT                     Accept traffic to be&#xA;                                                forwarded only to this service&#xA;Common options:&#xA;  -v --verbose                                  Print debug information&#xA;  -q --quiet                                    Print only errors&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;h3&gt;Simplest one&lt;/h3&gt; &#xA;&lt;p&gt;On your remote host, start the wstunnel&#39;s server by typing this command in your terminal&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wstunnel --server ws://0.0.0.0:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will create a websocket server listening on any interface on port 8080. On the client side use this command to forward traffic through the websocket tunnel&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wstunnel -D 8888 ws://myRemoteHost:8080&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This command will create a sock5 server listening on port 8888 of a loopback interface and will forward traffic.&lt;/p&gt; &#xA;&lt;p&gt;With firefox you can setup a proxy using this tunnel, by setting in networking preferences 127.0.0.1:8888 and selecting socks5 proxy&lt;/p&gt; &#xA;&lt;p&gt;or with curl&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;curl -x socks5h://127.0.0.1:8888 http://google.com/&#xA;#Please note h after the 5, it is to avoid curl resolving DNS name locally&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;As proxy command for SSH&lt;/h3&gt; &#xA;&lt;p&gt;You can specify &lt;code&gt;stdio&lt;/code&gt; as source port on the client side if you wish to use wstunnel as part of a proxy command for ssh&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -o ProxyCommand=&#34;wstunnel -L stdio:%h:%p ws://localhost:8080&#34; my-server&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;When behind a corporate proxy&lt;/h3&gt; &#xA;&lt;p&gt;An other useful example is when you want to bypass an http proxy (a corporate proxy for example) The most reliable way to do it is to use wstunnel as described below&lt;/p&gt; &#xA;&lt;p&gt;Start your wstunnel server with tls activated&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wstunnel --server wss://0.0.0.0:443 -r 127.0.0.1:22&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The server will listen on any interface using port 443 (https) and restrict traffic to be forwarded only to the ssh daemon.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Be aware that the server will use self signed certificate with weak cryptographic algorithm. It was made in order to add the least possible overhead while still being compliant with tls.&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Do not rely on wstunnel to protect your privacy, as it only forwards traffic that is already secure by design (ex: https)&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;Now on the client side start the client with&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;wstunnel -L 9999:127.0.0.1:22 -p mycorporateproxy:8080 wss://myRemoteHost:443&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It will start a tcp server on port 9999 that will contact the corporate proxy, negotiate a tls connection with the remote host and forward traffic to the ssh daemon on the remote host.&lt;/p&gt; &#xA;&lt;p&gt;You may now access your server from your local machine on ssh by using&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;ssh -p 9999 login@127.0.0.1&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;Wireguard and wstunnel&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://kirill888.github.io/notes/wireguard-via-websocket/&#34;&gt;https://kirill888.github.io/notes/wireguard-via-websocket/&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How to Build&lt;/h2&gt; &#xA;&lt;p&gt;Install the stack tool &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;https://docs.haskellstack.org/en/stable/README/&lt;/a&gt; or if you are a believer&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;curl -sSL https://get.haskellstack.org/ | sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and run those commands at the root of the project&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;stack init&#xA;stack install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;TODO&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add sock5 proxy&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add better logging&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add better error handling&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add httpProxy authentification&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; disabled&gt; Add Reverse tunnel&lt;/li&gt; &#xA; &lt;li&gt;&lt;input type=&#34;checkbox&#34; checked disabled&gt; Add more tests for socks5 proxy&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
  <entry>
    <title>simonmichael/hledger</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/simonmichael/hledger</id>
    <link href="https://github.com/simonmichael/hledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A reliable, user-friendly Plain Text Accounting tool with command line, terminal and web interfaces.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;hledger&lt;/h1&gt; &#xA;&lt;h2&gt;Robust, intuitive plain text accounting&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://www.gnu.org/licenses/gpl.html&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/license-GPLv3+-brightgreen.svg?sanitize=true&#34; alt=&#34;license&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://hackage.haskell.org/package/hledger&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/hledger.svg?label=hackage&amp;amp;colorB=green&#34; alt=&#34;on hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_nighly/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://repology.org/metapackage/hledger&#34;&gt;&lt;img src=&#34;https://repology.org/badge/version-for-repo/stackage_lts/hledger.svg?sanitize=true&#34; alt=&#34;&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://bugs.hledger.org&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/issues/simonmichael/hledger.svg?sanitize=true&#34; alt=&#34;github issues&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Welcome! This a brief intro to hledger. For a more detailed version, see the home page: &lt;strong&gt;&lt;a href=&#34;https://hledger.org&#34;&gt;https://hledger.org&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;hledger is lightweight, cross platform, multi-currency, double-entry accounting software. It lets you track money, investments, cryptocurrencies, invoices, time, inventory and more, in a safe, future-proof plain text data format with full version control and privacy.&lt;/p&gt; &#xA;&lt;p&gt;hledger aims to help both computer experts and regular folks gain clarity in their finances and time management. Though the UIs are basic, hledger can model any accounting situation and provide precise, clear reports. It is reliable, quick, and backed by the highly supportive &lt;a href=&#34;https://plaintextaccounting.org&#34;&gt;Plain Text Accounting&lt;/a&gt; ecosystem. Using it is an excellent way to learn double entry accounting.&lt;/p&gt; &#xA;&lt;p&gt;Compared to &lt;a href=&#34;https://plaintextaccounting.org/#software&#34;&gt;other PTA apps&lt;/a&gt;, hledger is actively maintained, with regular releases, and a strong focus on being easy to use and practical for everyday accounting.&lt;/p&gt; &#xA;&lt;p&gt;More features:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Installs easily on unix, mac or windows&lt;/li&gt; &#xA; &lt;li&gt;Complete, built-in documentation in multiple formats, beginner videos, tutorials etc.&lt;/li&gt; &#xA; &lt;li&gt;Multiple UIs: command-line, terminal, web, mobile, editors/IDEs&lt;/li&gt; &#xA; &lt;li&gt;Good at importing and exporting CSV; also outputs text/HTML/JSON/SQL&lt;/li&gt; &#xA; &lt;li&gt;A robust, general, well-specified multi-currency accounting engine&lt;/li&gt; &#xA; &lt;li&gt;Fast, analysing 25k transactions per second on a macbook air m1&lt;/li&gt; &#xA; &lt;li&gt;Accurate to 255 decimal places&lt;/li&gt; &#xA; &lt;li&gt;Supports your preferred account names, currencies, number formats&lt;/li&gt; &#xA; &lt;li&gt;Inspired by and partly compatible with Ledger CLI; interconvertible with Beancount&lt;/li&gt; &#xA; &lt;li&gt;Scriptable by CLI, HTTP or API, with plenty of examples&lt;/li&gt; &#xA; &lt;li&gt;Clean Haskell codebase, continually improved since 2007, with $100 regression bounties&lt;/li&gt; &#xA; &lt;li&gt;Free software licensed under GPLv3+.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Examples&lt;/h2&gt; &#xA;&lt;p&gt;I use hledger to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;track income and spending, sometimes with budgets&lt;/li&gt; &#xA; &lt;li&gt;see time reports by day/week/month/project&lt;/li&gt; &#xA; &lt;li&gt;track reimbursables, invoices and payments&lt;/li&gt; &#xA; &lt;li&gt;predict cashflow and account balances&lt;/li&gt; &#xA; &lt;li&gt;get accurate numbers for tax filing&lt;/li&gt; &#xA; &lt;li&gt;research past events&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Here&#39;s an example of the journal file format:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-journal&#34;&gt;2022-01-01 opening balances as of this date&#xA;    assets&lt;span&gt;🏦&lt;/span&gt;checking                $1000&#xA;    assets&lt;span&gt;🏦&lt;/span&gt;savings                 $2000&#xA;    assets:cash                          $100&#xA;    liabilities:creditcard               $-50&#xA;    equity:opening/closing balances&#xA;&#xA;2022-01-15 market&#xA;    expenses:food             $50&#xA;    assets:cash              $-50&#xA;&#xA;2022-02-01 GOODWORKS CORP&#xA;    assets&lt;span&gt;🏦&lt;/span&gt;checking           $1000&#xA;    income:salary                 $-1000&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and some simple reports:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger bs&#xA;Balance Sheet 2022-02-15&#xA;&#xA;                        || 2022-02-15 &#xA;========================++============&#xA; Assets                 ||            &#xA;------------------------++------------&#xA; assets&lt;span&gt;🏦&lt;/span&gt;checking   ||      $2000 &#xA; assets&lt;span&gt;🏦&lt;/span&gt;savings    ||      $2000 &#xA; assets:cash            ||        $50 &#xA;------------------------++------------&#xA;                        ||      $4050 &#xA;========================++============&#xA; Liabilities            ||            &#xA;------------------------++------------&#xA; liabilities:creditcard ||        $50 &#xA;------------------------++------------&#xA;                        ||        $50 &#xA;========================++============&#xA; Net:                   ||      $4000 &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-cli&#34;&gt;$ hledger is --monthly                                            &#xA;Income Statement 2022-01-01..2022-02-28                                               &#xA;                                                                                      &#xA;               ||  Jan    Feb                                                         &#xA;===============++=============                                                        &#xA; Revenues      ||                                                                     &#xA;---------------++-------------                                                        &#xA; income:salary ||    0  $1000                                                         &#xA;---------------++-------------                                                        &#xA;               ||    0  $1000                                                         &#xA;===============++=============                                                        &#xA; Expenses      ||                                                                     &#xA;---------------++-------------                                                        &#xA; expenses:food ||  $50      0                                                         &#xA;---------------++-------------                                                        &#xA;               ||  $50      0                                                         &#xA;===============++=============                                                        &#xA; Net:          || $-50  $1000                                                         &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;More examples and screenshots: &lt;a href=&#34;https://hledger.org/#how-to-get-started&#34;&gt;https://hledger.org/#how-to-get-started&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Funding&lt;/h2&gt; &#xA;&lt;p&gt;hledger is brought to you by &lt;a href=&#34;http://joyful.com&#34;&gt;Simon Michael&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/simonmichael/hledger/master/CREDITS.html&#34;&gt;140+ contributors&lt;/a&gt;, and the generous financial sponsors below.&lt;/p&gt; &#xA;&lt;p&gt;After enjoying some personal or organisational success with hledger, you might want to become one of them, to help support this work. It&#39;s easy! Please see &lt;a href=&#34;https://hledger.org/sponsor.html&#34;&gt;https://hledger.org/sponsor.html&lt;/a&gt; for details.&lt;/p&gt; &#xA;&lt;!-- keep synced with sponsor.md: --&gt; &#xA;&lt;h3&gt;Organisational sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/organization/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/0/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/1/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/2/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/3/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/4/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/5/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/6/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/7/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/8/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/9/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/10/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/11/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/12/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/13/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/14/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/15/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/16/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/17/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/18/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/organization/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/organization/19/avatar.svg?avatarHeight=200&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h3&gt;Individual sponsors&lt;/h3&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://opencollective.com/hledger/individual/0/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/0/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/1/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/1/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/2/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/2/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/3/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/3/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/4/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/4/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/5/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/5/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/6/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/6/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/7/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/7/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/8/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/8/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/9/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/9/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/10/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/10/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/11/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/11/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/12/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/12/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/13/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/13/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/14/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/14/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/15/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/15/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/16/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/16/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/17/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/17/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/18/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/18/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/19/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/19/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/20/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/20/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/21/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/21/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/22/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/22/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/23/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/23/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/24/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/24/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/25/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/25/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/26/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/26/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/27/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/27/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/28/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/28/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/29/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/29/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/30/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/30/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/31/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/31/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/32/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/32/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/33/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/33/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/34/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/34/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/35/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/35/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/36/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/36/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/37/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/37/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/38/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/38/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://opencollective.com/hledger/individual/39/website&#34;&gt;&lt;img src=&#34;https://opencollective.com/hledger/individual/39/avatar.svg?avatarHeight=100&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;If your logo/avatar needs to be added, &lt;a href=&#34;mailto:webmaster@hledger.org&#34;&gt;let me know&lt;/a&gt;!&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>simplex-chat/simplex-chat</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/simplex-chat/simplex-chat</id>
    <link href="https://github.com/simplex-chat/simplex-chat" rel="alternate"></link>
    <summary type="html">&lt;p&gt;SimpleX - the first messaging platform operating without user identifiers of any kind - 100% private by design! iOS and Android apps are released 📱!&lt;/p&gt;&lt;hr&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/simplex-chat-logo.svg?sanitize=true&#34; alt=&#34;SimpleX logo&#34; width=&#34;100%&#34;&gt; &#xA;&lt;h1&gt;SimpleX - the first messaging platform that has no user identifiers of any kind - 100% private by design!&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/simplex-chat/actions/workflows/build.yml/badge.svg?branch=stable&#34; alt=&#34;build&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/downloads/simplex-chat/simplex-chat/total&#34; alt=&#34;GitHub downloads&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/simplex-chat/simplex-chat/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/v/release/simplex-chat/simplex-chat&#34; alt=&#34;GitHub release&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://twitter.com/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/twitter/follow/SimpleXChat?style=social&#34; alt=&#34;Follow on Twitter&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://www.reddit.com/r/SimpleXChat&#34;&gt;&lt;img src=&#34;https://img.shields.io/reddit/subreddit-subscribers/SimpleXChat?style=social&#34; alt=&#34;Join on Reddit&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apple_store.svg?sanitize=true&#34; alt=&#34;iOS app&#34; height=&#34;42&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/google_play.svg?sanitize=true&#34; alt=&#34;Android app&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://app.simplex.chat&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/f_droid.svg?sanitize=true&#34; alt=&#34;F-Droid&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/testflight.png&#34; alt=&#34;iOS TestFlight&#34; height=&#34;41&#34;&gt;&lt;/a&gt; &amp;nbsp; &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/apk_icon.png&#34; alt=&#34;APK&#34; height=&#34;41&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;🖲 Protects your messages and metadata - who you talk to and when.&lt;/li&gt; &#xA; &lt;li&gt;🔐 Double ratchet end-to-end encryption, with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;📱 Mobile apps for Android (&lt;a href=&#34;https://play.google.com/store/apps/details?id=chat.simplex.app&#34;&gt;Google Play&lt;/a&gt;, &lt;a href=&#34;https://github.com/simplex-chat/website/raw/master/simplex.apk&#34;&gt;APK&lt;/a&gt;) and &lt;a href=&#34;https://apps.apple.com/us/app/simplex-chat/id1605771084&#34;&gt;iOS&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;🚀 &lt;a href=&#34;https://testflight.apple.com/join/DWuT2LQu&#34;&gt;TestFlight preview for iOS&lt;/a&gt; with the new features 1-2 weeks earlier - &lt;strong&gt;limited to 10,000 users&lt;/strong&gt;!&lt;/li&gt; &#xA; &lt;li&gt;🖥 Available as a terminal (console) app / CLI on Linux, MacOS, Windows.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Why privacy of communications matter&lt;/h2&gt; &#xA;&lt;p&gt;Everyone should care about privacy and security of their communications - innocuous conversations can put you in danger even if there is nothing to hide.&lt;/p&gt; &#xA;&lt;p&gt;One of the most shocking stories is the experience of &lt;a href=&#34;https://en.wikipedia.org/wiki/Mohamedou_Ould_Slahi&#34;&gt;Mohamedou Ould Salahi&lt;/a&gt; that he wrote about in his memoir and that is shown in The Mauritanian movie. He was put into Guantanamo camp, without trial, and was tortured there for 15 years after a phone call to his relative in Afghanistan, under suspicion of being involved in 9/11 attacks, even though he lived in Germany for the 10 years prior to the attacks.&lt;/p&gt; &#xA;&lt;p&gt;It is not enough to use an end-to-end encrypted messenger, we all should use the messengers that protect the privacy of our personal networks - who we are connected with.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX unique approach to privacy and security&lt;/h2&gt; &#xA;&lt;h3&gt;Full privacy of your identity, profile, contacts and metadata&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Unlike any other existing messaging platform, SimpleX has no identifiers assigned to the users&lt;/strong&gt; - not even random numbers. This protects the privacy of who are you communicating with, hiding it from SimpleX platform servers and from any observers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#full-privacy-of-your-identity-profile-contacts-and-metadata&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;The best protection against spam and abuse&lt;/h3&gt; &#xA;&lt;p&gt;As you have no identifier on SimpleX platform, you cannot be contacted unless you share a one-time invitation link or an optional temporary user address. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#the-best-protection-against-spam-and-abuse&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Complete ownership, control and security of your data&lt;/h3&gt; &#xA;&lt;p&gt;SimpleX stores all user data on client devices, the messages are only held temporarily on SimpleX relay servers until they are received. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#complete-ownership-control-and-security-of-your-data&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Users own SimpleX network&lt;/h3&gt; &#xA;&lt;p&gt;You can use SimpleX with your own servers and still communicate with people using the servers that are pre-configured in the apps or any other SimpleX servers. &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#users-own-simplex-network&#34;&gt;Read more&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;For developers&lt;/h2&gt; &#xA;&lt;p&gt;We plan that the SimpleX platform will grow into the platform supporting any distributed Internet application. This will allow you to build any service that people can access via chat, with custom web-based UI widgets that anybody with basic HTML/CSS/JavaScript knowledge can create in a few hours.&lt;/p&gt; &#xA;&lt;p&gt;You already can:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;use SimpleX Chat library to integrate chat functionality into your apps.&lt;/li&gt; &#xA; &lt;li&gt;use SimpleX Chat bot templates in Haskell to build your own chat bot services (TypeScript SDK is coming soon).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If you are considering developing with SimpleX platform please get in touch for any advice and support.&lt;/p&gt; &#xA;&lt;h2&gt;News and updates&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220511-simplex-chat-v2-images-files.md&#34;&gt;May 11, 2022. v2.0 released - sending images and files in mobile apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220404-simplex-chat-instant-notifications.md&#34;&gt;Apr 04, 2022. Instant notifications for SimpleX Chat mobile apps&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog/20220308-simplex-chat-mobile-apps.md&#34;&gt;Mar 08, 2022 Mobile apps for iOS and Android released&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/blog&#34;&gt;All updates&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Make a private connection&lt;/h2&gt; &#xA;&lt;p&gt;You need to share a link or scan a QR code (in person or during a video call) to make a connection and start messaging.&lt;/p&gt; &#xA;&lt;p&gt;The channel through which you share the link does not have to be secure - it is enough that you can confirm who sent you the message and that your SimpleX connection is established.&lt;/p&gt; &#xA;&lt;img src=&#34;https://github.com/simplex-chat/.github/raw/master/profile/images/conversation.png&#34; alt=&#34;Make a private connection&#34; width=&#34;594&#34; height=&#34;360&#34;&gt; &#xA;&lt;h2&gt;&lt;span&gt;⚡&lt;/span&gt; Quick installation of a terminal app&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;curl -o- https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/install.sh | bash&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Once the chat client is installed, simply run &lt;code&gt;simplex-chat&lt;/code&gt; from your terminal.&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/images/connection.gif&#34; alt=&#34;simplex-chat&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;Read more about &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/CLI.md&#34;&gt;installing and using the terminal app&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;SimpleX Platform design&lt;/h2&gt; &#xA;&lt;p&gt;SimpleX is a client-server network with a unique network topology that uses redundant, disposable message relay nodes to asynchronously pass messages via unidirectional (simplex) message queues, providing recipient and sender anonymity.&lt;/p&gt; &#xA;&lt;p&gt;Unlike P2P networks, all messages are passed through one or several server nodes, that do not even need to have persistence. In fact, the current &lt;a href=&#34;https://github.com/simplex-chat/simplexmq#smp-server&#34;&gt;SMP server implementation&lt;/a&gt; uses in-memory message storage, persisting only the queue records. SimpleX provides better metadata protection than P2P designs, as no global participant identifiers are used to deliver messages, and avoids &lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/docs/SIMPLEX.md#comparison-with-p2p-messaging-protocols&#34;&gt;the problems of P2P networks&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;Unlike federated networks, the server nodes &lt;strong&gt;do not have records of the users&lt;/strong&gt;, &lt;strong&gt;do not communicate with each other&lt;/strong&gt; and &lt;strong&gt;do not store messages&lt;/strong&gt; after they are delivered to the recipients. There is no way to discover the full list of servers participating in SimpleX network. This design avoids the problem of metadata visibility that all federated networks have and better protects from the network-wide attacks.&lt;/p&gt; &#xA;&lt;p&gt;Only the client devices have information about users, their contacts and groups.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/master/protocol/overview-tjr.md&#34;&gt;SimpleX whitepaper&lt;/a&gt; for more information on platform objectives and technical design.&lt;/p&gt; &#xA;&lt;h2&gt;Roadmap&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;✅ Easy to deploy SimpleX server with in-memory message storage, without any dependencies.&lt;/li&gt; &#xA; &lt;li&gt;✅ Terminal (console) client with groups and files support.&lt;/li&gt; &#xA; &lt;li&gt;✅ One-click SimpleX server deployment on Linode.&lt;/li&gt; &#xA; &lt;li&gt;✅ End-to-end encryption using double-ratchet protocol with additional encryption layer.&lt;/li&gt; &#xA; &lt;li&gt;✅ Mobile apps v1 for Android and iOS.&lt;/li&gt; &#xA; &lt;li&gt;✅ Private instant notifications for Android using background service.&lt;/li&gt; &#xA; &lt;li&gt;✅ Haskell chat bot templates.&lt;/li&gt; &#xA; &lt;li&gt;✅ v2.0 - supporting images and files in mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;🏗 End-to-end encrypted audio and video calls via the mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;🏗 Automatic chat history deletion.&lt;/li&gt; &#xA; &lt;li&gt;🏗 Privacy preserving instant notifications for iOS using Apple Push Notification service (in progress).&lt;/li&gt; &#xA; &lt;li&gt;🏗 Chat server and TypeScript client SDK to develop chat interfaces, integrations and chat bots (in progress).&lt;/li&gt; &#xA; &lt;li&gt;Groups support for mobile apps.&lt;/li&gt; &#xA; &lt;li&gt;Chat database portability and encryption.&lt;/li&gt; &#xA; &lt;li&gt;Web widgets for custom interactivity in the chats.&lt;/li&gt; &#xA; &lt;li&gt;SMP protocol improvements: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;SMP queue redundancy and rotation.&lt;/li&gt; &#xA;   &lt;li&gt;Message delivery confirmation.&lt;/li&gt; &#xA;   &lt;li&gt;Supporting the same profile on multiple devices.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Privacy-preserving identity server for optional DNS-based contact/group addresses to simplify connection and discovery, but not used to deliver messages: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;keep all your contacts and groups even if you lose the domain.&lt;/li&gt; &#xA;   &lt;li&gt;the server doesn&#39;t have information about your contacts and groups.&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Media server to optimize sending large files to groups.&lt;/li&gt; &#xA; &lt;li&gt;Channels server for large groups and broadcast channels.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Disclaimer&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/simplex-chat/simplexmq/raw/master/protocol/overview-tjr.md&#34;&gt;SimpleX protocols and security model&lt;/a&gt; was reviewed and had many improvements in v1.0.0; we are currently arranging for the independent implementation audit.&lt;/p&gt; &#xA;&lt;p&gt;You are likely to discover some bugs - we would really appreciate if you use it and let us know anything that needs to be fixed or improved.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/simplex-chat/simplex-chat/stable/LICENSE&#34;&gt;AGPL v3&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>lettier/gifcurry</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/lettier/gifcurry</id>
    <link href="https://github.com/lettier/gifcurry" rel="alternate"></link>
    <summary type="html">&lt;p&gt;😎 The open-source, Haskell-built video editor for GIF makers.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KFZyEqq.png&#34; alt=&#34;Gifcurry&#34;&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Tell me about Gifcurry. &lt;span&gt;😃&lt;/span&gt;&lt;/h1&gt; &#xA;&lt;p&gt;Gifcurry is the open-source, Haskell-built video editor for GIF makers. Load a video, make some edits, and save it as a GIF—Gifcurry makes your life easy! &lt;span&gt;😎&lt;/span&gt; Most video formats should work, so go wild. And since it&#39;s made with Haskell, you know it&#39;s good. &lt;span&gt;💯&lt;/span&gt;&lt;/p&gt; &#xA;&lt;p&gt;For the command line averse, there is a GUI. &lt;span&gt;🖱&lt;/span&gt; Die-hard terminal aficionado? Gifcurry has you covered with its CLI. &lt;span&gt;🖥&lt;/span&gt; And for the Haskell programmers out there, there is also a library &lt;span&gt;📚&lt;/span&gt; API.&lt;/p&gt; &#xA;&lt;p&gt;Gifcurry can save your creation as a GIF or as a video. &lt;span&gt;📼&lt;/span&gt; So if you hate &lt;span&gt;😠&lt;/span&gt; GIFs with a passion—no problem! Just select &#34;Save as a Video&#34; and do your part to rid &lt;span&gt;🗑&lt;/span&gt; the world of GIFs.&lt;/p&gt; &#xA;&lt;p&gt;Enjoy memes? &lt;img alt=&#34;trollface&#34; src=&#34;https://github.githubassets.com/images/icons/emoji/trollface.png?v8&#34;&gt;) Great! Gifcurry can add text all over your GIF. You can change the font, size, color, position, outline, rotation, and the timing. Create the next viral meme with Gifcurry.&lt;/p&gt; &#xA;&lt;p&gt;Did you know Gifcurry slices...and dices? &lt;span&gt;🍴&lt;/span&gt; You can crop &lt;span&gt;✂&lt;/span&gt; from the left, the right, the top, and/or the bottom. With Gifcurry, you can slice up some tasty GIFs.&lt;/p&gt; &#xA;&lt;p&gt;Is Gifcurry another Electron app? No way! Gifcurry is 100% #ElectronFree. No need to download more RAM &lt;span&gt;🐏&lt;/span&gt;, Gifcurry is light as a feather. Run &lt;span&gt;🏃&lt;/span&gt; it all day, run it all year—you&#39;ll never notice.&lt;/p&gt; &#xA;&lt;p&gt;&#34;So...Gifcurry is just FFmpeg and ImageMagick?&#34;—nope. Gifcurry hides all the goofy details so you can concentrate on what matters—the almighty &lt;span&gt;🙌&lt;/span&gt; GIF.&lt;/p&gt; &#xA;&lt;p&gt;Become a GIF master &lt;span&gt;💪&lt;/span&gt; with Gifcurry!&lt;/p&gt; &#xA;&lt;h2&gt;What do I need Gifcurry for? &lt;span&gt;🤔&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;&lt;span&gt;☑&lt;/span&gt; Want to show off that new UI feature in a pull request? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; Your template doesn&#39;t allow video in the hero image? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; No GIF of your favorite movie scene? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; Need a custom animated emoji for Slack? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; Can&#39;t find the perfect GIF for that reply-all email? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; Your README needs a GIF? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; That presentation slide could use some animation? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; Video doesn&#39;t auto play on iOS? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; Time to promote your indie game? Gifcurry.&lt;br&gt; &lt;span&gt;☑&lt;/span&gt; Need to add subtitles to a video? Gifcurry.&lt;/p&gt; &#xA;&lt;p&gt;Gifcurry comes in handy &lt;span&gt;🔧&lt;/span&gt; for all sorts of scenarios.&lt;/p&gt; &#xA;&lt;h2&gt;What does the GUI look &lt;span&gt;👀&lt;/span&gt; like?&lt;/h2&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/SJ8zovM.gif&#34; alt=&#34;Gifcurry GUI&#34;&gt;&lt;/p&gt; &#xA;&lt;h2&gt;How do I use the command line interface (CLI)? &lt;span&gt;🖥&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gifcurry_cli [OPTIONS]&#xA;&#xA;FILE IO:&#xA;  -i --input-file=FILE   The input video file path.&#xA;  -o --output-file=FILE  The output GIF file path.&#xA;  -m --save-as-video     If present, saves the GIF as a video.&#xA;TIME:&#xA;  -s --start-time=NUM    The start time (in seconds) for the first frame.&#xA;  -e --end-time=NUM      The end time (in seconds) for the last frame.&#xA;OUTPUT FILE SIZE:&#xA;  -w --width=INT         How wide the output needs to be. Height will scale&#xA;                         to match.&#xA;  -f --fps=INT           How many frames per second the output should have.&#xA;  -c --color-count=INT   How many colors are used in the output.&#xA;  -d --dither            If present, uses dither.&#xA;CROP:&#xA;  -L --left-crop=NUM     The amount you wish to crop from the left.&#xA;  -R --right-crop=NUM    The amount you wish to crop from the right.&#xA;  -T --top-crop=NUM      The amount you wish to crop from the top.&#xA;  -B --bottom-crop=NUM   The amount you wish to crop from the bottom.&#xA;TEXT:&#xA;  -t --text-file=FILE    Either a text overlays YAML or SRT subtitles file&#xA;                         path.&#xA;  -? --help              Display help message&#xA;  -V --version           Print version information&#xA;&#xA;Visit https://github.com/lettier/gifcurry for more information.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Got a CLI example?&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;gifcurry_cli \&#xA;  -i ~/Videos/video.webm \&#xA;  -o ~/tmp/test \&#xA;  -s 150 \&#xA;  -e 151 \&#xA;  -t ~/tmp/text-overlays.yaml \&#xA;  -w 800 \&#xA;  -f 15 \&#xA;  -c 100 \&#xA;  -d&#xA;  -L 0.1 \&#xA;  -R 0.1 \&#xA;  -T 0.1 \&#xA;  -B 0.1 \&#xA;  -m&#xA;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;▄▄▄▄▄▄▄▄ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA; &amp;nbsp;&amp;nbsp;&amp;nbsp; ▄▄████&amp;nbsp;&amp;nbsp;  ▀▀███▄&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ████▀&amp;nbsp;&amp;nbsp;&amp;nbsp;▄ &amp;nbsp;&amp;nbsp; ▀███&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ▄  &amp;nbsp;&amp;nbsp;&amp;nbsp;▐██▌&amp;nbsp;&amp;nbsp; ▄███▄&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;▄&amp;nbsp;&amp;nbsp;&amp;nbsp;▐███&amp;nbsp;&amp;nbsp;&amp;nbsp;████&amp;nbsp;&amp;nbsp;&amp;nbsp;▀███ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;▄███▀▀██ &amp;nbsp;&amp;nbsp;  &amp;nbsp;&amp;nbsp;&amp;nbsp;███&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;▐█▌&amp;nbsp;&amp;nbsp;&amp;nbsp;██ &amp;nbsp;&amp;nbsp;▐███&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;████&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;███ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;▐██  █████▌&amp;nbsp;▄█████ ▐██▌&amp;nbsp;&amp;nbsp;██▌&amp;nbsp; ██▄██▌ ██▄██▌&amp;nbsp;██▌&amp;nbsp;&amp;nbsp; ███&amp;nbsp;&#xA;&amp;nbsp;███ &amp;nbsp;&amp;nbsp;▐▌&amp;nbsp;&amp;nbsp; ███&amp;nbsp;&amp;nbsp;&amp;nbsp; &amp;nbsp;&amp;nbsp;▐███▌&amp;nbsp;&amp;nbsp; ███&amp;nbsp;&amp;nbsp;████▌&amp;nbsp;▐██ &amp;nbsp;&amp;nbsp;██▌&amp;nbsp;&amp;nbsp;███ &amp;nbsp;&amp;nbsp; &amp;nbsp;▐██▌&amp;nbsp;&amp;nbsp;██▌&amp;nbsp; ███▀ &amp;nbsp; ███▀ &amp;nbsp;&amp;nbsp;▐██ &amp;nbsp;███&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;████&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;███▀&amp;nbsp;&amp;nbsp;▐█&amp;nbsp;&amp;nbsp;&amp;nbsp;███▌&amp;nbsp;&amp;nbsp;&amp;nbsp;███&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;██▌&amp;nbsp;▐██ &amp;nbsp;&amp;nbsp;██▌&amp;nbsp;&amp;nbsp;███&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;▐██▌&amp;nbsp;&amp;nbsp;██▌&amp;nbsp; ██▌&amp;nbsp;&amp;nbsp;&amp;nbsp; ██▌&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;██▌▐██ &amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;▐███▄&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;▐██▌&amp;nbsp;&amp;nbsp;&amp;nbsp;██ &amp;nbsp;&amp;nbsp; ██&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ███▄▄▄██▌&amp;nbsp;▐██ &amp;nbsp;&amp;nbsp;██▌&amp;nbsp;&amp;nbsp; ███▄▄█  ███▄███▌&amp;nbsp; ██▌&amp;nbsp;&amp;nbsp;&amp;nbsp; ██▌&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;████▌&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;▀███&amp;nbsp;&amp;nbsp;&amp;nbsp;▀███&amp;nbsp;&amp;nbsp;&amp;nbsp;▐███&amp;nbsp;&amp;nbsp;&amp;nbsp;▀ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ▀▀▀▀▀ &amp;nbsp;&amp;nbsp;&amp;nbsp;▀▀ &amp;nbsp;&amp;nbsp;▀▀ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ▀▀▀ &amp;nbsp;&amp;nbsp;  ▀▀▀   &amp;nbsp;&amp;nbsp;▀▀ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;▀▀ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ███&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp; ███▄&amp;nbsp;&amp;nbsp;&amp;nbsp;▀ &amp;nbsp;&amp;nbsp; ████▌&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ███▀&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ▀███▄▄ &amp;nbsp;&amp;nbsp;█████▀&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp; ▀▀▀▀▀▀▀ &amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&amp;nbsp;&#xA;&#xA;&#xA;Gifcurry 6.0.1.0&#xA;(C) 2016 David Lettier&#xA;lettier.com&#xA;&#xA;[INFO] Here are your settings.&#xA;&#xA;  - FILE IO:&#xA;    - Input File:    /home/Videos/video.webm&#xA;    - Output File:   /home/tmp/test.webm&#xA;    - Save As Video: Yes&#xA;  - TIME:&#xA;    - Start Second: 150.000&#xA;    - End   Second: 151.000&#xA;  - OUTPUT FILE SIZE:&#xA;    - Width:       800px&#xA;    - FPS:         15&#xA;    - Color Count: 100&#xA;    - Dither:      True&#xA;  - TEXT:&#xA;    - Text: This is a test.&#xA;      - Font:&#xA;        - Family:  Sans&#xA;        - Size:    30&#xA;        - Style:   Normal&#xA;        - Stretch: Normal&#xA;        - Weight:  800&#xA;      - Time:&#xA;        - Start Second: 150.000&#xA;        - End   Second: 151.000&#xA;      - Translation:&#xA;        - Origin: NorthWest&#xA;        - X:      0.0&#xA;        - Y:      0.0&#xA;      - Rotation:&#xA;        - Degrees: 0&#xA;      - Outline:&#xA;        - Size: 10&#xA;        - Color: rgb(1,100,10)&#xA;      - Fill:&#xA;        - Color: rgb(255,255,0)&#xA;  - CROP:&#xA;    - Left:   0.100&#xA;    - Right:  0.100&#xA;    - Top:    0.100&#xA;    - Bottom: 0.100&#xA;&#xA;[INFO] Writing the temporary frames to: /home/.cache/gifcurry/gifcurry-frames30450&#xA;[INFO] Adding text.&#xA;[INFO] Converting the frames to the specified color count.&#xA;[INFO] Saving your video to: /home/tmp/test.webm&#xA;[INFO] All done.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What is the format for the text overlays YAML file? &lt;span&gt;🔢&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Here&#39;s an example file:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;- text: This is an example.&#xA;  fontFamily:   Sans&#xA;  fontStyle:    Oblique&#xA;  fontStretch:  Normal&#xA;  fontWeight:   30&#xA;  fontSize:     800&#xA;  origin:       NorthWest&#xA;  xTranslation: 0.0&#xA;  yTranslation: 0.0&#xA;  rotation:     20&#xA;  startTime:    5.000&#xA;  endTime:      8.000&#xA;  outlineSize:  7&#xA;  outlineColor: rgba(1,100,10,1.0)&#xA;  fillColor:    rgba(255,255,0,0.0)&#xA;- text: This is another example.&#xA;  fontFamily:   Serif&#xA;  fontStyle:    Italic&#xA;  fontStretch:  Condensed&#xA;  fontWeight:   30&#xA;  fontSize:     800&#xA;  origin:       Center&#xA;  xTranslation: 10.0&#xA;  yTranslation: 11.0&#xA;  rotation:     20&#xA;  startTime:    5.000&#xA;  endTime:      8.000&#xA;  outlineSize:  7&#xA;  outlineColor: rgb(1,11,100)&#xA;  fillColor:    rgba(255,0,0,0.0)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;code&gt;fontStyle&lt;/code&gt; can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Italic&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Normal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Oblique&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;fontStretch&lt;/code&gt; can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;Any&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Condensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Expanded&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ExtraCondensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;ExtraExpanded&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;Normal&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SemiCondensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SemiExpanded&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UltraCondensed&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;UltraExpanded&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;origin&lt;/code&gt; can be:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;North&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NorthEast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;East&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SouthEast&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;South&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;SouthWest&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;West&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;NorthWest&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;outlineSize&lt;/code&gt; ranges from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;10&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;outlineColor&lt;/code&gt; and &lt;code&gt;fillColor&lt;/code&gt; can either be &lt;code&gt;rgba(red,green,blue,alpha)&lt;/code&gt; or &lt;code&gt;rgb(red,green,blue)&lt;/code&gt; where &lt;code&gt;red&lt;/code&gt;, &lt;code&gt;green&lt;/code&gt;, and &lt;code&gt;blue&lt;/code&gt; range from &lt;code&gt;0&lt;/code&gt; to &lt;code&gt;255&lt;/code&gt; and &lt;code&gt;alpha&lt;/code&gt; ranges from &lt;code&gt;0.0&lt;/code&gt; to &lt;code&gt;1.0&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How do I get a copy of Gifcurry? &lt;span&gt;💾&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;Gifcurry works on Linux, Mac, and most likely Windows. Make sure you have FFmpeg, GStreamer, ImageMagick, and GTK+ installed on your machine. To find the latest version of Gifcurry, head over to the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases&#34;&gt;releases page&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;I use Linux. &lt;span&gt;🐧&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you use Linux then the easiest way to grab a copy of Gifcurry is by downloading the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-6.0.1.0-x86_64.AppImage&#34;&gt;AppImage&lt;/a&gt;. After you download the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-6.0.1.0-x86_64.AppImage&#34;&gt;AppImage&lt;/a&gt;, right click on it, select permissions, and check the box near execute. With that out of the way—you&#39;re all set—just double click on the AppImage and the GUI will fire right up.&lt;/p&gt; &#xA;&lt;p&gt;You can also download and install the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-6.0.1.0-x86_64.AppImage&#34;&gt;AppImage&lt;/a&gt; using the handy &lt;a href=&#34;https://raw.githubusercontent.com/lettier/gifcurry/master/packaging/linux/app-image/gifcurry-app-image-install.sh&#34;&gt;AppImage install script&lt;/a&gt; (right click and save link as). Download the script, right click on it, select permissions, check the box near execute, and double click on it. You should now see Gifcurry listed alongside your other installed programs.&lt;/p&gt; &#xA;&lt;p&gt;If you want the CLI then download the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-linux-6.0.1.0.tar.gz&#34;&gt;prebuilt version&lt;/a&gt; for Linux, extract it, open up your terminal, &lt;code&gt;cd&lt;/code&gt; to the bin folder, and then run &lt;code&gt;gifcurry_cli -?&lt;/code&gt;. As an added bonus, inside the bin directory is the GUI version too so now you have both.&lt;/p&gt; &#xA;&lt;h4&gt;I use Arch/Manjaro/Antergos/pacman. &lt;span&gt;👻&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;d rather install Gifcurry via pacman then copy the following into your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd&#xA;sudo pacman -S git ffmpeg imagemagick gstreamer gst-plugins-base-libs gst-plugins-base gst-plugins-good gst-plugins-bad gst-libav&#xA;cd &#34;$HOME/Downloads&#34;&#xA;git clone https://aur.archlinux.org/gifcurry.git&#xA;cd gifcurry&#xA;makepkg -sic&#xA;cd &#34;$HOME/Downloads&#34;&#xA;rm -rf gifcurry&#xA;cd&#xA;gifcurry_cli -?&#xA;gifcurry_gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;I use Ubuntu/Mint/Debian/Deepin/snap. &lt;span&gt;🌀&lt;/span&gt;&lt;/h4&gt; &#xA;&lt;p&gt;Gifcurry is available as a snap from &lt;a href=&#34;https://snapcraft.io/&#34;&gt;Snapcraft&lt;/a&gt;. If you don&#39;t already have &lt;code&gt;snap&lt;/code&gt;, go ahead and install it using the command &lt;code&gt;sudo apt install snapd&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can install the &lt;a href=&#34;https://snapcraft.io/gifcurry&#34;&gt;Gifcurry snap&lt;/a&gt; right from your browser or via the command line. For the command line route, paste the following into your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;snap install gifcurry&#xA;sudo snap connect gifcurry:removable-media&#xA;gifcurry&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;a href=&#34;https://snapcraft.io/gifcurry&#34;&gt;Gifcurry snap&lt;/a&gt; only comes with the GUI. If you want the CLI, download the &lt;a href=&#34;https://github.com/lettier/gifcurry/releases/download/6.0.1.0/gifcurry-linux-6.0.1.0.tar.gz&#34;&gt;prebuilt version&lt;/a&gt; for Linux.&lt;/p&gt; &#xA;&lt;h3&gt;I use Mac. &lt;span&gt;🍎&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;Mac users can download the &lt;a href=&#34;https://raw.githubusercontent.com/lettier/gifcurry/master/packaging/mac/gifcurry-mac-install-script.command&#34;&gt;Mac install script&lt;/a&gt; by holding down control, clicking the link, selecting &#34;Save Link As...&#34;, selecting where Downloads, and clicking save. To run the script, hold down the command key and press the space bar. Now type terminal and hit enter. After the terminal comes up, copy and paste the following.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;cd ~/Downloads&#xA;chmod +x gifcurry-mac-install-script.command&#xA;./gifcurry-mac-install-script.command&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;After running the install script, a shortcut to both the Gifcurry GUI and CLI will be on your desktop.&lt;/p&gt; &#xA;&lt;h3&gt;I&#39;m a Haskell developer. &lt;span&gt;🔨&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;p&gt;If you develop Haskell programs then the easiest way to build Gifcurry is with &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Haskell Stack&lt;/a&gt;. Copy the following into your terminal.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;git clone https://github.com/lettier/gifcurry.git&#xA;cd gifcurry&#xA;stack setup&#xA;stack install alex happy&#xA;stack install gtk2hs-buildtools&#xA;stack install hsc2hs&#xA;stack install&#xA;$HOME/.local/bin/gifcurry_cli -?&#xA;$HOME/.local/bin/gifcurry_gui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;What dependencies does Gifcurry use? &lt;span&gt;🤔&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;h3&gt;To run Gifcurry. &lt;span&gt;🏃&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.gtk.org/download/index.php&#34;&gt;GTK+ &amp;gt;= 3.10&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.ffmpeg.org/download.html&#34;&gt;FFmpeg &amp;gt;= 2.8.15&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/download/&#34;&gt;GStreamer &amp;gt;= 1.0&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://gstreamer.freedesktop.org/modules/&#34;&gt;GStreamer Plugins&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://www.imagemagick.org/script/download.php&#34;&gt;ImageMagick &amp;gt;= 6&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;To build Gifcurry. &lt;span&gt;👷&lt;/span&gt;&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://wiki.gnome.org/action/show/Projects/GObjectIntrospection&#34;&gt;GObject Introspection&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;Haskell Stack&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;What is the license? &lt;span&gt;📜&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;For license information, see &lt;a href=&#34;https://raw.githubusercontent.com/lettier/gifcurry/master/LICENSE&#34;&gt;LICENSE&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Who wrote Gifcurry? &lt;span&gt;©&lt;/span&gt;&lt;/h2&gt; &#xA;&lt;p&gt;(C) 2016 David Lettier&lt;br&gt; &lt;a href=&#34;http://www.lettier.com/&#34;&gt;lettier.com&lt;/a&gt;&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>digital-asset/contingent-claims</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/digital-asset/contingent-claims</id>
    <link href="https://github.com/digital-asset/contingent-claims" rel="alternate"></link>
    <summary type="html">&lt;p&gt;&lt;/p&gt;&lt;hr&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/digital-asset/daml/raw/main/LICENSE&#34;&gt;&lt;img src=&#34;https://img.shields.io/badge/License-Apache%202.0-blue.svg?sanitize=true&#34; alt=&#34;License&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/digital-asset/contingent-claims&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/digital-asset/contingent-claims.svg?style=shield&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;Copyright © 2022 Digital Asset (Switzerland) GmbH and/or its affiliates. All Rights Reserved. SPDX-License-Identifier: Apache-2.0&lt;/p&gt; &#xA;&lt;h1&gt;Contingent Claims&lt;/h1&gt; &#xA;&lt;p&gt;This is a library for modeling contingent claims, i.e. derivatives, written in the smart contract language &lt;a href=&#34;https://www.digitalasset.com/developers&#34;&gt;Daml&lt;/a&gt;. Briefly, a derivative is represented by a tree of &lt;code&gt;Claim&lt;/code&gt;s, which describe future cashflows between two parties as well as the conditions under which these cashflows occur.&lt;/p&gt; &#xA;&lt;p&gt;The library offers life-cycling capabilities, as well as a valuation semantics that maps a claim to a mathematical expression that can be used for no-arbitrage pricing.&lt;/p&gt; &#xA;&lt;p&gt;The implementation closely follows the model outlined in the papers &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/contingent-claims/master/#1&#34;&gt;[1]&lt;/a&gt;, &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/contingent-claims/master/#2&#34;&gt;[2]&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To get started, we recommend reading through the &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/contingent-claims/master/QUICKSTART.md&#34;&gt;quickstart&lt;/a&gt; document.&lt;/p&gt; &#xA;&lt;p&gt;Examples of how to create and lifecycle contracts can be found in the &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/contingent-claims/master/test/daml/Test/FinancialContract.daml&#34;&gt;test directory&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;How to use this library&lt;/h2&gt; &#xA;&lt;p&gt;To use the library in your Daml project, it is sufficient to download the latest &lt;code&gt;*.dar&lt;/code&gt; file from the &lt;a href=&#34;https://github.com/digital-asset/contingent-claims/releases/&#34;&gt;releases page&lt;/a&gt; and add it as a dependency to your project.&lt;/p&gt; &#xA;&lt;h2&gt;Releases&lt;/h2&gt; &#xA;&lt;p&gt;Releases adhere to the &#39;semantic versioning&#39; specification. Breaking changes across major versions are documented in &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/contingent-claims/master/UPGRADING.md&#34;&gt;Upgrading.md&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h2&gt;Building the code&lt;/h2&gt; &#xA;&lt;p&gt;In order to build the code from source, follow these instructions.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Clone the repository&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Make sure the &lt;a href=&#34;https://docs.daml.com/getting-started/installation.html&#34;&gt;Daml SDK&lt;/a&gt; is installed on your machine&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Fetch the &lt;code&gt;*.dar&lt;/code&gt; file for the latest version of the &lt;a href=&#34;https://github.com/digital-asset/daml-ctl/releases&#34;&gt;daml-ctl&lt;/a&gt; library and copy it to the &lt;code&gt;lib/&lt;/code&gt; folder in the repository&#39;s root&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;You can then build a release version (no tests in the &lt;code&gt;*.dar&lt;/code&gt;) by running &lt;code&gt;daml build&lt;/code&gt; in the root directory, or a dev version that includes tests from the &lt;code&gt;test&lt;/code&gt; directory.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;We also provide an unsupported &lt;code&gt;Makefile&lt;/code&gt; with targets for said tasks.&lt;/p&gt; &#xA;&lt;h3&gt;Running the tests&lt;/h3&gt; &#xA;&lt;p&gt;Navigate to the &lt;code&gt;test&lt;/code&gt; directory and run &lt;code&gt;daml test&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;API documentation&lt;/h3&gt; &#xA;&lt;p&gt;API documentation for the latest release is available online &lt;a href=&#34;https://digital-asset.github.io/contingent-claims/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;You can also build this locally using the SDK command &lt;code&gt;daml damlc docs&lt;/code&gt; from the root directory. There is also an unsupported &lt;code&gt;make doc&lt;/code&gt; target.&lt;/p&gt; &#xA;&lt;h2&gt;Contribution Policy&lt;/h2&gt; &#xA;&lt;p&gt;If you wish to contribute to this project, please contact us first via Github. In future, we do plan to accept external contributions, contingent on the Digital Asset CLA.&lt;/p&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a id=&#34;1&#34;&gt;[1]&lt;/a&gt; Jones, S. Peyton, Jean-Marc Eber, and Julian Seward. &#34;Composing contracts: an adventure in financial engineering.&#34; ACM SIG-PLAN Notices 35.9 (2000): 280-292.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a id=&#34;2&#34;&gt;[2]&lt;/a&gt; Jones, SL Peyton, and J. M. Eber. &#34;How to write a financial contract&#34;, volume &#34;Fun Of Programming&#34; of &#34;Cornerstones of Computing.&#34; (2005).&lt;/p&gt; &#xA;&lt;p&gt;The papers can be downloaded from &lt;a href=&#34;https://www.microsoft.com/en-us/research/publication/composing-contracts-an-adventure-in-financial-engineering/&#34;&gt;Microsoft Research&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>ucsd-progsys/liquid-fixpoint</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/ucsd-progsys/liquid-fixpoint</id>
    <link href="https://github.com/ucsd-progsys/liquid-fixpoint" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Horn Clause Constraint Solving for Liquid Types&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Liquid Fixpoint&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;http://packdeps.haskellers.com/feed?needle=liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage-deps/v/liquid-fixpoint.svg?sanitize=true&#34; alt=&#34;Hackage-Deps&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint&#34;&gt;&lt;img src=&#34;https://circleci.com/gh/ucsd-progsys/liquid-fixpoint.svg?style=svg&#34; alt=&#34;CircleCI&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/hlint-ci.yml/badge.svg?sanitize=true&#34; alt=&#34;hlint&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/cabal.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/cabal.yml/badge.svg?sanitize=true&#34; alt=&#34;cabal&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/stack.yml&#34;&gt;&lt;img src=&#34;https://github.com/ucsd-progsys/liquid-fixpoint/actions/workflows/stack.yml/badge.svg?sanitize=true&#34; alt=&#34;stack&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This package implements a Horn-Clause/Logical Implication constraint solver used for various Liquid Types. The solver uses SMTLIB2 to implement an algorithm similar to:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://users.soe.ucsc.edu/~cormac/papers/fme01.pdf&#34;&gt;Houdini&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://swt.informatik.uni-freiburg.de/berit/papers/boolean-and-cartesian-....pdf&#34;&gt;Cartesian predicate abstraction&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Requirements&lt;/h2&gt; &#xA;&lt;p&gt;In addition to the .cabal dependencies you require an SMTLIB2 compatible solver binary:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;Z3&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://cvc4.github.io/&#34;&gt;CVC4&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://mathsat.fbk.eu/download.html&#34;&gt;MathSat&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;If on Windows, please make sure to place the binary and any associated DLLs somewhere in your path.&lt;/p&gt; &#xA;&lt;h2&gt;How To Build and Install&lt;/h2&gt; &#xA;&lt;p&gt;Simply do:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;$ cd liquid-fixpoint&#xA;$ stack install # alternatively, use `cabal install`.&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;A reproducible Nix environment is provided as well:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;# Build with:&#xA;$ nix-shell --pure --run &#34;stack build&#34;&#xA;&#xA;# Test with:&#xA;$ nix-shell --pure --run &#34;stack test&#34;&#xA;&#xA;# Run with:&#xA;$ nix-shell --pure --run &#34;stack exec fixpoint -- tests/pos/adt.fq&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Using SMTLIB-based SMT Solvers&lt;/h2&gt; &#xA;&lt;p&gt;You can use one of several SMTLIB2 compliant solvers, by:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;fixpoint --solver=z3 path/to/file.hs&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Currently, we support&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;* Z3&#xA;* CVC4&#xA;* MathSat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;&#34;Horn&#34; Format&lt;/h2&gt; &#xA;&lt;p&gt;See the examples in &lt;code&gt;tests/horn/{pos, neg}&lt;/code&gt; eg&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_sum.smt2&#34;&gt;sum&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/pos/ple_list00.smt2&#34;&gt;list00&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/tests/horn/neg/ple_list03.smt2&#34;&gt;list03&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;For how to write VCs &#34;by hand&#34;.&lt;/p&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://arxiv.org/abs/2010.07763&#34;&gt;this tutorial&lt;/a&gt; with &lt;a href=&#34;https://github.com/ranjitjhala/sprite-lang&#34;&gt;accompanying code&lt;/a&gt; for an example of how to generate Horn queries.&lt;/p&gt; &#xA;&lt;p&gt;The main datatypes are described in &lt;a href=&#34;https://raw.githubusercontent.com/ucsd-progsys/liquid-fixpoint/develop/src/Language/Fixpoint/Horn/Types.hs&#34;&gt;src/Language/Fixpoint/Horn/Types.hs&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Configuration Management&lt;/h2&gt; &#xA;&lt;p&gt;It is very important that the version of Liquid Fixpoint be maintained properly.&lt;/p&gt; &#xA;&lt;p&gt;Suppose that the current version of Liquid Haskell is &lt;code&gt;A.B.C.D&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;After a release to hackage is made, if any of the components &lt;code&gt;B&lt;/code&gt;, &lt;code&gt;C&lt;/code&gt;, or &lt;code&gt;D&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint shall be incremented by &lt;code&gt;1&lt;/code&gt;. The version of Liquid Fixpoint is now &lt;code&gt;A.B.C.(D + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time a new function or type is exported from Liquid Fixpoint, if any of the components &lt;code&gt;B&lt;/code&gt;, or &lt;code&gt;C&lt;/code&gt; are missing, they shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;C&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;D&lt;/code&gt; component shall stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.B.(C + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The first time the signature of an exported function or type is changed, or an exported function or type is removed (this includes functions or types that Liquid Fixpoint re-exports from its own dependencies), if the &lt;code&gt;B&lt;/code&gt; component is missing, it shall be added and set to &lt;code&gt;0&lt;/code&gt;. Then the &lt;code&gt;B&lt;/code&gt; component shall be incremented by &lt;code&gt;1&lt;/code&gt;, and the &lt;code&gt;C&lt;/code&gt; and &lt;code&gt;D&lt;/code&gt; components shall be stripped. The version of Liquid Fixpoint is now &lt;code&gt;A.(B + 1)&lt;/code&gt;&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The &lt;code&gt;A&lt;/code&gt; component shall be updated at the sole discretion of the project owners.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;It is recommended to use the &lt;a href=&#34;https://hackage.haskell.org/package/bumper&#34;&gt;Bumper&lt;/a&gt; utility to manage the versioning of Liquid Fixpoint. Bumper will automatically do the correct update to the cabal file. Additionally, it will update any packages that you have the source for that depend on Liquid Fixpoint.&lt;/p&gt; &#xA;&lt;p&gt;To update Liquid Fixpoint and Liquid Haskell, first clone Liquid Haskell and Liquid Fixpoint to a common location:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;git clone https://github.com/ucsd-progsys/liquidhaskell.git&#xA;git clone https://github.com/ucsd-progsys/liquid-fixpoint.git&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper -3 liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will update the &lt;code&gt;D&lt;/code&gt; component of Liquid Fixpoint. If necessary, this will update the &lt;code&gt;Build-Depends&lt;/code&gt; of Liquid Haskell. If the &lt;code&gt;Build-Depends&lt;/code&gt; was updated, Liquid Haskell&#39;s &lt;code&gt;D&lt;/code&gt; component will be incremented.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;C&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; component:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --minor liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell.&lt;/p&gt; &#xA;&lt;p&gt;To increment the &lt;code&gt;B&lt;/code&gt; component of Liquid Fixpoint, and strip the &lt;code&gt;D&lt;/code&gt; and &lt;code&gt;C&lt;/code&gt; components:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;./path/to/bumper --major liquid-fixpoint&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;As before, this will update Liquid Fixpoint and, if necessary, Liquid Haskell&lt;/p&gt; &#xA;&lt;h2&gt;SMTLIB2 Interface&lt;/h2&gt; &#xA;&lt;p&gt;There is a new SMTLIB2 interface directly from Haskell:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Language.Fixpoint.SmtLib2&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;See &lt;code&gt;tests/smt2/{Smt.hs, foo.smt2}&lt;/code&gt; for an example of how to use it.&lt;/p&gt; &#xA;&lt;h3&gt;Command Line for SMT2 interface&lt;/h3&gt; &#xA;&lt;p&gt;You can use the &lt;code&gt;.smt2&lt;/code&gt; interface from the command-line as follows:&lt;/p&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--stdin&lt;/code&gt; to read files from &lt;code&gt;stdin&lt;/code&gt;&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint --stdin&#xA;&#xA;Liquid-Fixpoint Copyright 2013-21 Regents of the University of California.&#xA;All Rights Reserved.&#xA;&#xA;Working 166% [===============================================================]&#xA;Safe ( 2  constraints checked)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;-q&lt;/code&gt; to disable all output (banner, progress bar etc.)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/test01.smt2 | fixpoint -q --stdin&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Use &lt;code&gt;--json&lt;/code&gt; to get the output as a JSON object (rendered to &lt;code&gt;stdout&lt;/code&gt;)&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ more tests/horn/pos/abs02-re.smt2 | stack exec -- fixpoint -q --json --stdin&#xA;{&#34;contents&#34;:{&#34;numIter&#34;:3,&#34;numCstr&#34;:3,&#34;numChck&#34;:3,&#34;numBrkt&#34;:3,&#34;numVald&#34;:3},&#34;tag&#34;:&#34;Safe&#34;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Options&lt;/h2&gt; &#xA;&lt;p&gt;&lt;code&gt;--higherorder&lt;/code&gt; allows higher order binders into the environment&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--extsolver&lt;/code&gt; runs the &lt;strong&gt;deprecated&lt;/strong&gt; external solver.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;--parts&lt;/code&gt; Partitions an &lt;code&gt;FInfo&lt;/code&gt; into a &lt;code&gt;[FInfo]&lt;/code&gt; and emits a bunch of files. So:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ fixpoint -n -p path/to/foo.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;will now emit files:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.1.fq&#xA;path/to/.liquid/foo.2.fq&#xA;. . .&#xA;path/to/.liquid/foo.k.fq&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;and also a dot file with the constraint dependency graph:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;path/to/.liquid/foo.fq.dot&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;FInfo Invariants&lt;/h2&gt; &#xA;&lt;h3&gt;Binders&lt;/h3&gt; &#xA;&lt;p&gt;This is the field&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , bs       :: !BindEnv         -- ^ Bind  |-&amp;gt; (Symbol, SortedReft)&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;or in the .fq files as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;bind 1 x : ...&#xA;bind 2 y : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; must be a distinct &lt;code&gt;Int&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;Each &lt;code&gt;BindId&lt;/code&gt; that appears in a constraint environment i.e. inside &lt;em&gt;any&lt;/em&gt; &lt;code&gt;IBindEnv&lt;/code&gt; must appear inside the &lt;code&gt;bs&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Environments&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint&#39;s environment is a set of &lt;code&gt;BindId&lt;/code&gt; which must be defined in the &lt;code&gt;bindInfo&lt;/code&gt;. Furthermore&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Each constraint should not have &lt;em&gt;duplicate&lt;/em&gt; names in its environment, that is if you have two binders&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;  bind 1 x : ...&#xA;  bind 12 x : ...&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Then a single &lt;code&gt;IBindEnv&lt;/code&gt; should only mention &lt;em&gt;at most&lt;/em&gt; one of &lt;code&gt;1&lt;/code&gt; or &lt;code&gt;12&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;There is also a &#34;tree-shape&#34; property that its a bit hard to describe ... TODO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;LHS&lt;/h3&gt; &#xA;&lt;p&gt;Each &lt;code&gt;slhs&lt;/code&gt; of a constraint is a &lt;code&gt;SortedReft&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Each &lt;code&gt;SortredReft&lt;/code&gt; is basically a &lt;code&gt;Reft&lt;/code&gt; -- a logical predicate. The important bit is that a &lt;code&gt;KVar&lt;/code&gt; i.e. terms of the formalized&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;     $k1[x1:=y1][x2:=y2]...[xn:=yn]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;That is represented in the &lt;code&gt;Expr&lt;/code&gt; type as&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;  | PKVar  !KVar !Subst&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;must appear &lt;em&gt;only&lt;/em&gt; at the &lt;strong&gt;top-level&lt;/strong&gt; that is not under &lt;em&gt;any&lt;/em&gt; other operators, i.e. not as a sub-&lt;code&gt;Expr&lt;/code&gt; of other expressions.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;This is basically a predicate that needs to be &#34;well sorted&#34; with respect to the &lt;code&gt;BindId&lt;/code&gt;, intuitively&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y:int |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is well sorted. but&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int  |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not, and&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;    x:int, y: list |- x + y : int&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;is not. The exact definition is formalized in &lt;code&gt;Language.Fixpoint.SortCheck&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h3&gt;RHS&lt;/h3&gt; &#xA;&lt;p&gt;Similarly each &lt;code&gt;rhs&lt;/code&gt; of a &lt;code&gt;SubC&lt;/code&gt; must either be a single &lt;code&gt;$k[...]&lt;/code&gt; or an plain &lt;code&gt;$k&lt;/code&gt;-free &lt;code&gt;Expr&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Global vs. Distinct Literals&lt;/h3&gt; &#xA;&lt;pre&gt;&lt;code&gt;     , gLits    :: !(SEnv Sort)               -- ^ Global Constant symbols&#xA;     , dLits    :: !(SEnv Sort)       &#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;global&lt;/em&gt; literals &lt;code&gt;gLits&lt;/code&gt; are symbols that are in scope &lt;em&gt;everywhere&lt;/em&gt; i.e. need not be separately defined in individual environments. These include things like&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;measure&lt;/em&gt; functions &lt;code&gt;len&lt;/code&gt;, &lt;code&gt;height&lt;/code&gt;,&lt;/li&gt; &#xA; &lt;li&gt;uninterpreted &lt;em&gt;data constructor&lt;/em&gt; literals &lt;code&gt;True&lt;/code&gt;, &lt;code&gt;False&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;Suppose you have an enumerated type like:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;data Day = Sun | Mon | Tue | Wed | ... | Sat&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You can model the above values in fixpoint as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;constant lit#Sun : Day&#xA;constant lit#Mon : Day&#xA;constant lit#Tue : Day&#xA;constant lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The &lt;em&gt;distinct&lt;/em&gt; literals are a subset of the above where we want to tell the SMT solver that the values are &lt;em&gt;distinct&lt;/em&gt; i.e. &lt;strong&gt;not equal&lt;/strong&gt; to each other, for example, you can &lt;strong&gt;additionally&lt;/strong&gt; specify this as:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;distinct lit#Sun : Day&#xA;distinct lit#Mon : Day&#xA;distinct lit#Tue : Day&#xA;distinct lit#Wed : Day&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The above two are represented programmatically by generating suitable &lt;code&gt;Symbol&lt;/code&gt; values (for the literals see &lt;code&gt;litSymbol&lt;/code&gt;) and &lt;code&gt;Sort&lt;/code&gt; values as &lt;code&gt;FTC FTycon&lt;/code&gt; and then making an &lt;code&gt;SEnv&lt;/code&gt; from the &lt;code&gt;[(Symbol, Sort)]&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;Sorts&lt;/h3&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;What&#39;s the difference between an FTC and an FObj?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;In early versions of fixpoint, there was support for three sorts for expressions (&lt;code&gt;Expr&lt;/code&gt;) that were sent to the SMT solver:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;code&gt;int&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;bool&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&#34;other&#34;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The &lt;code&gt;FObj&lt;/code&gt; sort was introduced to represent essentially &lt;em&gt;all&lt;/em&gt; non-int and non-bool values (e.g. tuples, lists, trees, pointers...)&lt;/p&gt; &#xA;&lt;p&gt;However, we later realized that it is valuable to keep &lt;em&gt;more&lt;/em&gt; precise information for &lt;code&gt;Expr&lt;/code&gt;s and so we introduced the &lt;code&gt;FTC&lt;/code&gt; (fixpoint type constructor), which lets us represent the above respectively as:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;String&#34; []&lt;/code&gt; -- in Haskell &lt;code&gt;String&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;Tuple&#34; [FInt, Bool]&lt;/code&gt; -- in Haskell &lt;code&gt;(Int, Bool)&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;FTC &#34;List&#34; [FTC &#34;List&#34; [FInt]]&lt;/code&gt; -- in Haskell &lt;code&gt;[[Int]]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;There is a comment that says FObj&#39;s are uninterpretted types; so probably a type the SMT solver doesn&#39;t know about? Does that then make FTC types that the SMT solver does know about (bools, ints, lists, sets, etc.)?&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The SMT solver knows about &lt;code&gt;bool&lt;/code&gt;, &lt;code&gt;int&lt;/code&gt; and &lt;code&gt;set&lt;/code&gt; (also &lt;code&gt;bitvector&lt;/code&gt; and &lt;code&gt;map&lt;/code&gt;) but &lt;em&gt;all&lt;/em&gt; other types are &lt;em&gt;currently&lt;/em&gt; represented as plain &lt;code&gt;Int&lt;/code&gt; inside the SMT solver. However, we &lt;em&gt;will be&lt;/em&gt; changing this to make use of SMT support for ADTs ...&lt;/p&gt; &#xA;&lt;p&gt;To sum up: the &lt;code&gt;FObj&lt;/code&gt; is there for historical reasons; it has been subsumed by &lt;code&gt;FTC&lt;/code&gt; which is what I recomend you use. However &lt;code&gt;FObj&lt;/code&gt; is there if you want a simple &#34;unitype&#34; / &#34;any&#34; type for terms that are not &#34;interpreted&#34;.&lt;/p&gt; &#xA;&lt;h2&gt;Qualifier Patterns&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as (mon . $1) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatPrefix &#34;mon&#34; 1, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as ($1 . mon) : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatSuffix 1 &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z as mon : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatExact &#34;mon&#34;, qpSort = FInt}&#xA;λ&amp;gt; doParse&#39; (qualParamP sortP) &#34;&#34; &#34;z : int&#34;&#xA;QP {qpSym = &#34;z&#34;, qpPat = PatNone, qpSort = FInt}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
  <entry>
    <title>liquidhaskell/liquid-base</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/liquidhaskell/liquid-base</id>
    <link href="https://github.com/liquidhaskell/liquid-base" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Drop-in replacement for the base library, to use with Liquid Haskell&lt;/p&gt;&lt;hr&gt;&lt;h2&gt;liquid-base&lt;/h2&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://hackage.haskell.org/package/liquid-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/hackage/v/liquid-base.svg?sanitize=true&#34; alt=&#34;Hackage&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://circleci.com/gh/liquidhaskell/liquid-base&#34;&gt;&lt;img src=&#34;https://img.shields.io/circleci/project/liquidhaskell/liquid-base/develop.svg?sanitize=true&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a drop-in replacement for the Haskell &lt;a href=&#34;https://hackage.haskell.org/package/base&#34;&gt;base&lt;/a&gt; library, meant to be used with &lt;a href=&#34;http://ucsd-progsys.github.io/liquidhaskell/&#34;&gt;Liquid Haskell&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;This package simply re-exports all the &lt;code&gt;base&lt;/code&gt; modules, but it also provides LH refinements for some of them.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>input-output-hk/cardano-node</title>
    <updated>2022-05-31T01:41:52Z</updated>
    <id>tag:github.com,2022-05-31:/input-output-hk/cardano-node</id>
    <link href="https://github.com/input-output-hk/cardano-node" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The core component that is used to participate in a Cardano decentralised blockchain.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;.. raw:: html&lt;/p&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/releases&#34;&gt;&lt;img src=&#34;https://img.shields.io/github/release-pre/input-output-hk/cardano-node.svg?style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://buildkite.com/input-output-hk/cardano-node&#34;&gt;&lt;img src=&#34;https://img.shields.io/buildkite/a978cbb4def7018be3d0a004127da356f4db32f1c318c1a48a/master?label=BUILD&amp;amp;style=for-the-badge&#34;&gt;&lt;/a&gt; &lt;/p&gt; &#xA;&lt;table align=&#34;center&#34;&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt;&#xA;   &lt;td colspan=&#34;2&#34; align=&#34;center&#34;&gt;GitHub Actions&lt;/td&gt;&#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/master&#34;&gt;&lt;/a&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-node/actions/workflows/haskell.yml&#34;&gt;&lt;img alt=&#34;GitHub Workflow Status (branch)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-node/Haskell%20CI/nightly?label=nightly&#34;&gt;&lt;/a&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; Overview&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Integration of the &lt;code&gt;ledger &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs&amp;gt;&lt;/code&gt;&lt;em&gt;, &lt;code&gt;consensus &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-consensus&amp;gt;&lt;/code&gt;&lt;/em&gt;, &lt;code&gt;networking &amp;lt;https://github.com/input-output-hk/ouroboros-network/tree/master/ouroboros-network&amp;gt;&lt;/code&gt;_ and &lt;code&gt;node shell &amp;lt;https://github.com/input-output-hk/cardano-shell&amp;gt;&lt;/code&gt;_ repositories.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Logging &amp;lt;https://github.com/input-output-hk/iohk-monitoring-framework&amp;gt;&lt;/code&gt;_ is provided as a &lt;code&gt;feature &amp;lt;https://github.com/input-output-hk/cardano-shell/blob/master/app/Cardano/Shell/Features/Logging.hs&amp;gt;&lt;/code&gt;_ by the node shell to the other packages.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;The cardano-node is the top level for the node and aggregates the other components from other packages: consensus, ledger and networking, with configuration, CLI, logging and monitoring.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;The node no longer incorporates wallet or explorer functionality. The wallet backend and explorer backend are separate components that run in separate external processes that communicate with the node via local IPC.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Network Configuration, Genesis and Topology Files&lt;/h1&gt; &#xA;&lt;p&gt;The latest supported networks can be found at &lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/cardano-deployment/latest-finished/download/1/index.html&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;h1&gt;How to build&lt;/h1&gt; &#xA;&lt;p&gt;Documentation for building the node can be found &lt;code&gt;here &amp;lt;https://docs.cardano.org/getting-started/installing-the-cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h1&gt;Executables&lt;/h1&gt; &#xA;&lt;p&gt;You can download the latest version of &lt;code&gt;cardano-node&lt;/code&gt; and &lt;code&gt;cardano-cli&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;linux &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.musl.cardano-node-linux/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;win64 &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;macos &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/macos.cardano-node-macos/latest-finished&amp;gt;&lt;/code&gt;_&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Windows Executable&lt;/h1&gt; &#xA;&lt;h2&gt;Download&lt;/h2&gt; &#xA;&lt;p&gt;You can download &lt;code&gt;here &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-node/linux.windows.cardano-node-win64/latest-finished&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;h2&gt;Instructions&lt;/h2&gt; &#xA;&lt;p&gt;The download includes cardano-node.exe and a .dll. To run the node with cardano-node run you need to reference a few files and directories as arguments. These can be copied from the cardano-node repo into the executables directory. The command to run the node on mainnet looks like this:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;cardano-node.exe run --topology ./configuration/cardano/mainnet-topology.json --database-path ./state --port 3001 --config ./configuration/cardano/mainnet-config.yaml  --socket-path \\.\pipe\cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Docker image&lt;/h1&gt; &#xA;&lt;p&gt;You can pull the docker image with the latest version of cardano-node from &lt;code&gt;here &amp;lt;https://hub.docker.com/r/inputoutput/cardano-node&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;docker pull inputoutput/cardano-node&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-node&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;This refers to the client that is used for running a node.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-node run [--topology FILEPATH] [--database-path FILEPATH] [--socket-path FILEPATH] [--byron-delegation-certificate FILEPATH] [--byron-signing-key FILEPATH] [--shelley-kes-key FILEPATH] [--shelley-vrf-key FILEPATH] [--shelley-operational-certificate FILEPATH] [--host-addr IPV4-ADDRESS] [--host-ipv6-addr IPV6-ADDRESS] [--port PORT] [--config NODE-CONFIGURATION] [--validate-db] Run the node.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--topology&lt;/code&gt; - Filepath to a topology file describing which peers the node should connect to.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--database-path&lt;/code&gt; - Path to the blockchain database.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-delegation-certificate&lt;/code&gt; - Optional path to the Byron delegation certificate. The delegation certificate allows the delegator (the issuer of said certificate) to give his/her own block signing rights to somebody else (the delegatee). The delegatee can then sign blocks on behalf of the delegator.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--byron-signing-key&lt;/code&gt; - Optional path to the Byron signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-signing-key&lt;/code&gt; - Optional path to the Shelley signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-kes-key&lt;/code&gt; - Optional path to the Shelley KES signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-vrf-key&lt;/code&gt; - Optional path to the Shelley VRF signing key.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--shelley-operational-certificate&lt;/code&gt; - Optional path to the Shelley operational certificate.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--socket-path&lt;/code&gt; - Path to the socket file.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv4 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--host-ipv6-addr&lt;/code&gt; - Optionally specify your node&#39;s IPv6 address.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--port&lt;/code&gt; - Specify which port to assign to the node.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--config&lt;/code&gt; - Specify the filepath to the config &lt;code&gt;.yaml&lt;/code&gt; file. This file is responsible for all the other node&#39;s required settings. See examples in &lt;code&gt;configuration&lt;/code&gt; (e.g. &lt;code&gt;config-0.yaml &amp;lt;configuration/defaults/simpleview/config-0.yaml&amp;gt;&lt;/code&gt;_).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;--validate-db&lt;/code&gt; - Flag to revalidate all on-disk database files&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Configuration &lt;code&gt;.yaml&lt;/code&gt; files&lt;/h1&gt; &#xA;&lt;p&gt;The &lt;code&gt;--config&lt;/code&gt; flag points to a &lt;code&gt;.yaml&lt;/code&gt; file that is responsible to configuring the logging &amp;amp; other important settings for the node. E.g. see the Byron mainnet configuration in this &lt;code&gt;configuration.yaml &amp;lt;https://github.com/input-output-hk/cardano-node/blob/master/configuration/defaults/byron-mainnet/configuration.yaml&amp;gt;&lt;/code&gt;_. Some of the more important settings are as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;Protocol: RealPBFT&lt;/code&gt; -- Protocol the node will execute&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;RequiresNetworkMagic&lt;/code&gt;: RequiresNoMagic -- Used to distinguish between mainnet (&lt;code&gt;RequiresNoMagic&lt;/code&gt;) and testnets (&lt;code&gt;RequiresMagic&lt;/code&gt;)&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Logging&lt;/h1&gt; &#xA;&lt;p&gt;Logs are output to the &lt;code&gt;logs/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;h1&gt;Profiling &amp;amp; statistics&lt;/h1&gt; &#xA;&lt;p&gt;Profiling data and RTS run stats are stored in the &lt;code&gt;profile/&lt;/code&gt; dir.&lt;/p&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for how to obtain profiling information using the scripts.&lt;/p&gt; &#xA;&lt;h1&gt;Scripts&lt;/h1&gt; &#xA;&lt;p&gt;Please see &lt;code&gt;scripts/README.md&lt;/code&gt; for information on the various scripts.&lt;/p&gt; &#xA;&lt;h1&gt;&lt;code&gt;cardano-cli&lt;/code&gt;&lt;/h1&gt; &#xA;&lt;p&gt;A CLI utility to support a variety of key material operations (genesis, migration, pretty-printing..) for different system generations. Usage documentation can be found at &lt;code&gt;cardano-cli/README.md&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The general synopsis is as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Usage: cardano-cli (Era based commands | Byron specific commands | Miscellaneous commands)&lt;/p&gt; &#xA;&lt;blockquote&gt; &#xA; &lt;p&gt;NOTE: the exact invocation command depends on the environment. If you have only built &lt;code&gt;cardano-cli&lt;/code&gt;, without installing it, then you have to prepend &lt;code&gt;cabal run -- &lt;/code&gt; before &lt;code&gt;cardano-cli&lt;/code&gt;. We henceforth assume that the necessary environment-specific adjustment has been made, so we only mention &lt;code&gt;cardano-cli&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;/blockquote&gt; &#xA;&lt;p&gt;The subcommands are subdivided in groups, and their full list can be seen in the output of &lt;code&gt;cardano-cli --help&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;All subcommands have help available. For example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal run -- cardano-cli -- byron key migrate-delegate-key-from --help&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron key migrate-delegate-key-from Usage: cardano-cli byron key migrate-delegate-key-from --from FILEPATH --to FILEPATH Migrate a delegate key from an older version.&lt;/p&gt; &#xA;&lt;p&gt;Available options: --byron-legacy-formats Byron/cardano-sl formats and compatibility --byron-formats Byron era formats and compatibility --from FILEPATH Signing key file to migrate. --to FILEPATH Non-existent file to write the signing key to. -h,--help Show this help text&lt;/p&gt; &#xA;&lt;h1&gt;Genesis operations&lt;/h1&gt; &#xA;&lt;h2&gt;Generation&lt;/h2&gt; &#xA;&lt;p&gt;The Byron genesis generation operations will create a directory that contains:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis.json&lt;/code&gt;: The genesis JSON file itself.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;avvm-seed.*.seed&lt;/code&gt;: Ada Voucher Vending Machine seeds (secret). Affected by &lt;code&gt;--avvm-entry-count&lt;/code&gt; and &lt;code&gt;--avvm-entry-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegate-keys.*.key&lt;/code&gt;: Delegate private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;delegation-cert.*.json&lt;/code&gt;: Delegation certificates. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;genesis-keys.*.key&lt;/code&gt;: Genesis stake private keys. Affected by: &lt;code&gt;--n-delegate-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;code&gt;poor-keys.*.key&lt;/code&gt;: Non-delegate private keys with genesis UTxO. Affected by: &lt;code&gt;--n-poor-addresses&lt;/code&gt;, &lt;code&gt;--total-balance&lt;/code&gt;.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;More details on the Byron Genesis &lt;code&gt;JSON&lt;/code&gt; file can be found in &lt;code&gt;docs/reference/byron-genesis.md&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;Byron genesis delegation and related concepts are described in detail in:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;&amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; example provides a nice set of defaults and illustrates available options.&lt;/p&gt; &#xA;&lt;h1&gt;Key operations&lt;/h1&gt; &#xA;&lt;p&gt;Note that key operations do not support password-protected keys.&lt;/p&gt; &#xA;&lt;h2&gt;Signing key generation &amp;amp; verification key extraction&lt;/h2&gt; &#xA;&lt;p&gt;Signing keys can be generated using the &lt;code&gt;keygen&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;p&gt;Extracting a verification key out of the signing key is performed by the &lt;code&gt;to-verification&lt;/code&gt; subcommand.&lt;/p&gt; &#xA;&lt;h2&gt;Delegate key migration&lt;/h2&gt; &#xA;&lt;p&gt;In order to continue using a delegate key from the Byron Legacy era in the new implementation, it needs to be migrated over, which is done by the &lt;code&gt;migrate-delegate-key-from&lt;/code&gt; subcommand:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key migrate-delegate-key-from --from key0.sk --to key0Converted.sk&lt;/p&gt; &#xA;&lt;h2&gt;Signing key queries&lt;/h2&gt; &#xA;&lt;p&gt;One can gather information about a signing key&#39;s properties through the &lt;code&gt;signing-key-public&lt;/code&gt; and &lt;code&gt;signing-key-address&lt;/code&gt; subcommands (the latter requires the network magic):&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli byron key signing-key-public --byron-formats --secret key0.sk&lt;/p&gt; &#xA;&lt;p&gt;public key hash: a2b1af0df8ca764876a45608fae36cf04400ed9f413de2e37d92ce04 public key: sc4pa1pAriXO7IzMpByKo4cG90HCFD465Iad284uDYz06dHCqBwMHRukReQ90+TA/vQpj4L1YNaLHI7DS0Z2Vg==&lt;/p&gt; &#xA;&lt;p&gt;$ cabal v2-run -- cardano-cli signing-key-address --byron-formats --secret key0.pbft --testnet-magic 42&lt;/p&gt; &#xA;&lt;p&gt;2cWKMJemoBakxhXgZSsMteLP9TUvz7owHyEYbUDwKRLsw2UGDrG93gPqmpv1D9ohWNddx VerKey address with root e5a3807d99a1807c3f161a1558bcbc45de8392e049682df01809c488, attributes: AddrAttributes { derivation path: {} }&lt;/p&gt; &#xA;&lt;h1&gt;Transactions&lt;/h1&gt; &#xA;&lt;h2&gt;Creation&lt;/h2&gt; &#xA;&lt;p&gt;Transactions can be created via the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; &amp;amp; &lt;code&gt;issue-utxo-expenditure&lt;/code&gt; commands.&lt;/p&gt; &#xA;&lt;p&gt;The easiest way to create a transaction is via the &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; script as follows:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;./scripts/benchmarking/issue-genesis-utxo-expenditure.sh transaction_file&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;NB: This by default creates a transaction based on &lt;code&gt;configuration/defaults/liveview/config-0.yaml&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;If you do not have a &lt;code&gt;genesis_file&lt;/code&gt; you can run &lt;code&gt;scripts/benchmarking/genesis.sh&lt;/code&gt; which will create an example &lt;code&gt;genesis_file&lt;/code&gt; for you. The script &lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt; has defaults for all the requirements of the &lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;h2&gt;Submission&lt;/h2&gt; &#xA;&lt;p&gt;The &lt;code&gt;submit-tx&lt;/code&gt; subcommand provides the option of submitting a pre-signed transaction, in its raw wire format (see GenTx for Byron transactions).&lt;/p&gt; &#xA;&lt;p&gt;The canned &lt;code&gt;scripts/benchmarking/submit-tx.sh&lt;/code&gt; script will submit the supplied transaction to a testnet launched by &lt;code&gt;scripts/benchmarking/shelley-testnet-liveview.sh&lt;/code&gt; script.&lt;/p&gt; &#xA;&lt;h2&gt;Issuing UTxO expenditure (genesis and regular)&lt;/h2&gt; &#xA;&lt;p&gt;To make a transaction spending UTxO, you can either use the:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-genesis-utxo-expenditure&lt;/code&gt;, for genesis UTxO&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;issue-utxo-expenditure&lt;/code&gt;, for normal UTxO&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;subcommands directly, or, again use canned scripts that will make transactions tailored for the aforementioned testnet cluster:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-genesis-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;scripts/benchmarking/issue-utxo-expenditure.sh&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;The script requires the target file name to write the transaction to, input TxId (for normal UTxO), and optionally allows specifying the source txin output index, source and target signing keys and lovelace value to send.&lt;/p&gt; &#xA;&lt;p&gt;The target address defaults to the 1-st richman key (&lt;code&gt;configuration/delegate-keys.001.key&lt;/code&gt;) of the testnet, and lovelace amount is almost the entirety of its funds.&lt;/p&gt; &#xA;&lt;h1&gt;Local node queries&lt;/h1&gt; &#xA;&lt;p&gt;You can query the tip of your local node via the &lt;code&gt;get-tip&lt;/code&gt; command as follows&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Open &lt;code&gt;tmux&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;cabal build cardano-node&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run &lt;code&gt;./scripts/lite/shelley-testnet.sh example&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;Run ``export CARDANO_NODE_SOCKET_PATH=/cardano-node/example/socket/node-1-socket&lt;/li&gt; &#xA; &lt;li&gt;&lt;code&gt;cabal exec cardano-cli -- get-tip --testnet-magic 42&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;You will see output from stdout in this format:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;Current tip: Block hash: 4ab21a10e1b25e39 Slot: 6 Block number: 5&lt;/p&gt; &#xA;&lt;h1&gt;Update proposals&lt;/h1&gt; &#xA;&lt;h2&gt;Update proposal creation&lt;/h2&gt; &#xA;&lt;p&gt;A Byron update proposal can be created as follows:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance create-update-proposal (--mainnet | --testnet-magic NATURAL) --signing-key FILEPATH --protocol-version-major WORD16 --protocol-version-minor WORD16 --protocol-version-alt WORD8 --application-name STRING --software-version-num WORD32 --system-tag STRING --installer-hash HASH --filepath FILEPATH ..&lt;/p&gt; &#xA;&lt;p&gt;The mandatory arguments are &lt;code&gt;--mainnet | --testnet-magic&lt;/code&gt;, &lt;code&gt;signing-key&lt;/code&gt;, &lt;code&gt;protocol-version-major&lt;/code&gt;, &lt;code&gt;protocol-version-minor&lt;/code&gt;, &lt;code&gt;protocol-version-alt&lt;/code&gt;, &lt;code&gt;application-name&lt;/code&gt;, &lt;code&gt;software-version-num&lt;/code&gt;, &lt;code&gt;system-tag&lt;/code&gt;, &lt;code&gt;installer-hash&lt;/code&gt; and &lt;code&gt;filepath&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;The remaining arguments are optional parameters you want to update in your update proposal.&lt;/p&gt; &#xA;&lt;p&gt;You can also check your proposal&#39;s validity using the &lt;code&gt;validate-cbor&lt;/code&gt; command. See: &lt;code&gt;Validate CBOR files&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h2&gt;Update proposal submission&lt;/h2&gt; &#xA;&lt;p&gt;You can submit your proposal using the &lt;code&gt;submit-update-proposal&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;Example:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cardano-cli -- byron governance submit-update-proposal --config configuration/defaults/mainnet/configuration.yaml (--mainnet | --testnet-magic NATURAL) --filepath my-update-proposal&lt;/p&gt; &#xA;&lt;p&gt;See the &lt;code&gt;Byron specification &amp;lt;https://hydra.iohk.io/job/Cardano/cardano-ledger-specs/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&amp;gt;&lt;/code&gt;_ for more details on update proposals.&lt;/p&gt; &#xA;&lt;h1&gt;Update proposal voting&lt;/h1&gt; &#xA;&lt;p&gt;You can create and submit byron update proposal votes with the &lt;code&gt;create-proposal-vote&lt;/code&gt; &amp;amp; &lt;code&gt;submit-proposal-vote&lt;/code&gt; commands. The following are two example commands:&lt;/p&gt; &#xA;&lt;p&gt;Byron vote creation:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance create-proposal-vote (--mainnet | --testnet-magic NATURAL) --signing-key configuration/defaults/liveview/genesis/delegate-keys.000.key --proposal-filepath ProtocolUpdateProposalFile --vote-yes --output-filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;p&gt;Byron vote submission:&lt;/p&gt; &#xA;&lt;p&gt;.. code-block:: console&lt;/p&gt; &#xA;&lt;p&gt;cabal exec cardano-cli -- byron governance submit-proposal-vote (--mainnet | --testnet-magic NATURAL) --filepath UpdateProposalVoteFile&lt;/p&gt; &#xA;&lt;h1&gt;Development&lt;/h1&gt; &#xA;&lt;h2&gt;GHCID&lt;/h2&gt; &#xA;&lt;p&gt;run &lt;em&gt;ghcid&lt;/em&gt; with: &lt;code&gt;ghcid -c &#34;cabal repl exe:cardano-node --reorder-goals&#34;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Haskell Language Server&lt;/h2&gt; &#xA;&lt;p&gt;When using Haskell Language Server with Visual Studio Code, you may find that &lt;code&gt;HLINT annotations are ignored&amp;lt;https://github.com/haskell/haskell-language-server/issues/638&amp;gt;&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;p&gt;To work around this, you may run the script &lt;code&gt;./scripts/reconfigure-hlint.sh&lt;/code&gt; to generate a &lt;code&gt;.hlint.yaml&lt;/code&gt; file with HLINT ignore rules derived from the source code.&lt;/p&gt; &#xA;&lt;h1&gt;Testing&lt;/h1&gt; &#xA;&lt;p&gt;&lt;code&gt;cardano-node&lt;/code&gt; is essentially a container which implements several components such networking, consensus, and storage. These components have individual test coverage. The node goes through integration and release testing by Devops/QA while automated CLI tests are ongoing alongside development.&lt;/p&gt; &#xA;&lt;p&gt;Developers on &lt;code&gt;cardano-node&lt;/code&gt; can &lt;code&gt;launch their own testnets &amp;lt;doc/getting-started/launching-a-testnet.md&amp;gt;&lt;/code&gt;_ or &lt;code&gt;run the chairman tests &amp;lt;doc/getting-started/running-chairman-tests.md&amp;gt;&lt;/code&gt;_ locally.&lt;/p&gt; &#xA;&lt;h2&gt;Chairman tests&lt;/h2&gt; &#xA;&lt;h1&gt;Debugging&lt;/h1&gt; &#xA;&lt;h2&gt;Pretty printing CBOR encoded files&lt;/h2&gt; &#xA;&lt;p&gt;It may be useful to print the on chain representations of blocks, delegation certificates, txs and update proposals. There are two commands that do this (for any cbor encoded file):&lt;/p&gt; &#xA;&lt;p&gt;To pretty print as CBOR: &lt;code&gt;cabal exec cardano-cli -- pretty-print-cbor --filepath CBOREncodedFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h2&gt;Validate CBOR files&lt;/h2&gt; &#xA;&lt;p&gt;You can validate Byron era blocks, delegation certificates, txs and update proposals with the &lt;code&gt;validate-cbor&lt;/code&gt; command.&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;cabal exec cardano-cli -- validate-cbor --byron-block 21600 --filepath CBOREncodedByronBlockFile&lt;/code&gt;&lt;/p&gt; &#xA;&lt;h1&gt;Native Tokens&lt;/h1&gt; &#xA;&lt;p&gt;Native tokens is a new feature that enables the transacting of multi-assets on Cardano. Native tokens are now supported on mainnet and users can transact with ada, and an unlimited number of user-defined (custom) tokens natively.&lt;/p&gt; &#xA;&lt;p&gt;To help you get started we have compiled a handy list of resources:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Cardano Forum discussion &amp;lt;https://forum.cardano.org/c/developers/cardano-tokens/150&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;Documentation for native tokens &amp;lt;https://docs.cardano.org/native-tokens/learn&amp;gt;&lt;/code&gt;_&lt;/p&gt; &#xA;&lt;p&gt;You can also read more about &lt;code&gt;native tokens and how they compare to ada and ERC20 &amp;lt;https://github.com/input-output-hk/cardano-ledger-specs/blob/master/doc/explanations/features.rst&amp;gt;&lt;/code&gt;_. Browse native tokens created on the Cardano blockchain and see their transactions in an interactive dashboard that allows filtering and searching: nativetokens.da.iogservices.io.&lt;/p&gt; &#xA;&lt;h1&gt;API Documentation&lt;/h1&gt; &#xA;&lt;p&gt;The API documentation is published &lt;code&gt;here &amp;lt;https://input-output-hk.github.io/cardano-node/&amp;gt;&lt;/code&gt;_.&lt;/p&gt; &#xA;&lt;p&gt;The documentation is built with each push, but is only published from &lt;code&gt;master&lt;/code&gt; branch. In order to test if the documentation is working, build the documentation locally with &lt;code&gt;./scripts/haddocs.sh&lt;/code&gt; and open &lt;code&gt;haddocks/index.html&lt;/code&gt; in the browser.&lt;/p&gt;</summary>
  </entry>
</feed>