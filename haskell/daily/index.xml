<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2023-09-11T01:31:57Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>Verification-for-Security/haskell-intro</title>
    <updated>2023-09-11T01:31:57Z</updated>
    <id>tag:github.com,2023-09-11:/Verification-for-Security/haskell-intro</id>
    <link href="https://github.com/Verification-for-Security/haskell-intro" rel="alternate"></link>
    <summary type="html">&lt;p&gt;An introductory assignment for Haskell.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Haskell introduction&lt;/h1&gt; &#xA;&lt;p&gt;In this assignment, you will pick up the basics of Haskell. This will help you to understand and write the harder assignments later in the course.&lt;/p&gt; &#xA;&lt;h2&gt;Getting started&lt;/h2&gt; &#xA;&lt;h3&gt;GHCup&lt;/h3&gt; &#xA;&lt;p&gt;Install GHCup by following the &lt;a href=&#34;https://www.haskell.org/ghcup/&#34;&gt;installation instructions&lt;/a&gt; for your operating system. Do make sure to allow GHCup to hook into stack, as we will be using stack to build the assignments. To check if the installation went succesful, the following command should give a version number.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghcup --version&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Make sure this is the latest version of GHCup. If this is not the case, you can upgrade to the latest version via&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghcup upgrade&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;GHCup manages all your Haskell related software. For this course, we will be working with the package manager Stack. To install this, you can simply run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghcup install stack&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;We also recommend that you install the Haskell Language Server (HLS). If your code editor supports language servers (which most of them do), this will display errors or useful tips to improve your code! It also allows you to run some additional commands when editing, for example, jumping to a definition of a piece of code. You can install it via the following command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghcup install hls&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For an overview of all the software installed on your system by GHCup, run the following command. With this, you can make sure that both Stack and HLS are on their latest versions.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ ghcup tui&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;It should be the case that stack will automatically install the GHC version specified by the project when trying to compile it. If this doesn&#39;t work you could also manually install specific GHC versions, either through this menu, or through the command line.&lt;/p&gt; &#xA;&lt;h3&gt;Git&lt;/h3&gt; &#xA;&lt;p&gt;Install Git by following the &lt;a href=&#34;https://git-scm.com/book/en/v2/Getting-Started-Installing-Git&#34;&gt;installation instructions&lt;/a&gt; for your operating system.&lt;/p&gt; &#xA;&lt;p&gt;You may clone this assignment through git. Make sure to run this command in the directory where you would like this project to exist. You can find the &lt;code&gt;&amp;lt;directory-path&amp;gt;&lt;/code&gt; in the top right of this repository, under &lt;code&gt;Code&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ git clone &amp;lt;directory-path&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Git is also the recommended way to cooperate with your teammates during the later assignments. Do make sure to keep your repositories private in this case! Note that this is an individual assignment.&lt;/p&gt; &#xA;&lt;h2&gt;Running and testing&lt;/h2&gt; &#xA;&lt;p&gt;You can build and test the code through stack. Make sure to be within the project folder before you run stack. One of the most useful commands throughout the course will be:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack test&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This will run the entire test infrastructure on your code. If all went well up to this point, this will give you a list of functions that failed their tests.&lt;/p&gt; &#xA;&lt;p&gt;There are many other ways to build and/or run your code. One recommended way would be to use GHCi. This is a Read-Eval-Print-Loop (REPL) that allows you to test smaller parts of your program. You could for example run a single function in your implementation via this command.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-sh&#34;&gt;$ stack ghci&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Here is a &lt;a href=&#34;https://downloads.haskell.org/ghc/latest/docs/users_guide/ghci.html&#34;&gt;user-guide&lt;/a&gt; for GHCi. It is not all that difficult to use, but it is useful to know some of the commands like &lt;code&gt;:r&lt;/code&gt; or &lt;code&gt;:q&lt;/code&gt;. Note that running GHCi through stack already imports the current codebase into scope. This is practically always desireable, so we recommend running GHCi in this fashion instead of as a standalone program.&lt;/p&gt; &#xA;&lt;h2&gt;Assignment structure&lt;/h2&gt; &#xA;&lt;p&gt;Implement all function stubs found within the &lt;code&gt;src&lt;/code&gt; folder of this project. A stub will have the following shape:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | Returns true if the passed list was empty&#xA;-- e.g. null [1, 2] = False&#xA;null :: [a] -&amp;gt; Bool&#xA;null = undefined&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;You will have to provide an implementation for this, e.g.&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-haskell&#34;&gt;-- | Returns true if the passed list was empty&#xA;-- e.g. null [1, 2] = False&#xA;null :: [a] -&amp;gt; Bool&#xA;null [] = True&#xA;null _  = False&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;Notice how the comment above the stub provides you with an explanation of what the code is supposed to do, as well as an example case. Do make sure to read all the comments in a file. They provide useful insights, as well as occasionally ask you to implement functions in a specific way. Do not change the function signature of the stubs. This will generally make your program unable to compile!&lt;/p&gt; &#xA;&lt;p&gt;The automatic tests that are ran by &lt;code&gt;stack test&lt;/code&gt; will check whether your implementation is correct. These tests will also tell you in which order we think the assignment works best. Some tests may even depend on earlier pieces of your implementation in order to function. Hence, we strongly suggest to work in this order!&lt;/p&gt; &#xA;&lt;h2&gt;Grading&lt;/h2&gt; &#xA;&lt;p&gt;Your final grade corresponds directly to the one awarded to you by the test infrastructure. Do make sure your submission correctly executes on our online environment.&lt;/p&gt; &#xA;&lt;p&gt;If there are issues with the submission system, don&#39;t panic! We will handle this on a case-by-case basis.&lt;/p&gt; &#xA;&lt;p&gt;If your uploaded submission somehow fail tests that work locally, ping us and we will have a look!&lt;/p&gt; &#xA;&lt;p&gt;If the online environment suddenly fails to work moments before the deadline, don&#39;t hesitate to send us your submission through different means (e.g. email).&lt;/p&gt; &#xA;&lt;h2&gt;Plagiarism&lt;/h2&gt; &#xA;&lt;p&gt;We have a strict zero tolerance policy against plagiarism. Sadly, we find cases every year... This is not fun for you, nor us. Please, refrain from copying and/or sharing your code with other students.&lt;/p&gt; &#xA;&lt;p&gt;While we generally recommend our students to work via Git, do make sure to make your repository &lt;strong&gt;private&lt;/strong&gt;! Sharing your code in this manner is sadly still plagiarism, even if unintentional.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>mame/type-level-quine</title>
    <updated>2023-09-11T01:31:57Z</updated>
    <id>tag:github.com,2023-09-11:/mame/type-level-quine</id>
    <link href="https://github.com/mame/type-level-quine" rel="alternate"></link>
    <summary type="html">&lt;p&gt;A type-level Quine in Haskell&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Type-level-Quine&lt;/h1&gt; &#xA;&lt;p&gt;A type-level Quine in Haskell.&lt;/p&gt; &#xA;&lt;h2&gt;How to run the proof-of-concept version&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ghc -fcontext-stack=2048 type-level-quine-poc.hs&#xA;$ ./type-level-quine-poc&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;code&gt;-fcontext-stack=2048&lt;/code&gt; is required. (Otherwise, ghc will fail with stack overflow)&lt;/li&gt; &#xA; &lt;li&gt;The compilation may take a few minutes.&lt;/li&gt; &#xA; &lt;li&gt;The result is partially snipped; this is not a complete quine.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;How to run the full version&lt;/h2&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ ghc -fcontext-stack=2048 type-level-quine.hs&#xA;$ ./type-level-quine&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;NOTE:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;This may make your OS stuck&lt;/strong&gt; because of short of memory.&lt;/li&gt; &#xA; &lt;li&gt;Actually I has failed to confirm this.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;References&lt;/h2&gt; &#xA;&lt;p&gt;Both are written in Japanese.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/keigoi/20090418/1240060720&#34;&gt;http://d.hatena.ne.jp/keigoi/20090418/1240060720&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/ku-ma-me/20130303/p1&#34;&gt;http://d.hatena.ne.jp/ku-ma-me/20130303/p1&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt;</summary>
  </entry>
</feed>