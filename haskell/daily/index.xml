<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-27T01:43:59Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>digital-asset/ex-mortgage-repackaging</title>
    <updated>2022-06-27T01:43:59Z</updated>
    <id>tag:github.com,2022-06-27:/digital-asset/ex-mortgage-repackaging</id>
    <link href="https://github.com/digital-asset/ex-mortgage-repackaging" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reference DAML application demonstrating the use case of repackaging Mortgage Based Securities.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reference Application: Mortgage Repackaging&lt;/h1&gt; &#xA;&lt;h2&gt;Introduction&lt;/h2&gt; &#xA;&lt;p&gt;A mortgage-backed security (MBS) is a collection (pool) of mortgages that are securitized or packaged as a security. As an MBS ages, the underlying mortgages get paid down or are removed from the pool because of, for example, default or refinancing. Rolling multiple MBS pools into one larger one can substantially reduce risk, as the default of a single loan will have a smaller effect on the whole.&lt;/p&gt; &#xA;&lt;p&gt;This demo executes the process of “repackaging” an MBS to reduce risk by consolidating several pools of loans into a single security.&lt;/p&gt; &#xA;&lt;p&gt;&lt;em&gt;Note&lt;/em&gt;: This demo is designed to show successful processing of a claim without exceptions or error conditions. A full production implementation would include additional features, handle errors and exceptions, and incorporate appropriate security controls.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This reference application is intended to demonstrate the capabilities of the DAML. You are recommended to consider other non-functional aspects, like security, resiliency, recoverability, etc prior to production use.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;Be sure you have the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.daml.com/&#34;&gt;DAML SDK&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build&lt;/h4&gt; &#xA;&lt;p&gt;Type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;daml build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you change the DAML models locally, you need to re-run this command before starting the application.&lt;/p&gt; &#xA;&lt;h3&gt;Starting the App&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure you have built the application (see: &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-mortgage-repackaging/main/#build&#34;&gt;Build&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the DAML Sandbox and Navigator. Type: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;daml start --sandbox-option --address=localhost&#xA;&lt;/code&gt;&lt;/pre&gt; The navigator will automatically open in new browser tab at &lt;a href=&#34;http://localhost:7500&#34;&gt;http://localhost:7500&lt;/a&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Stopping the App&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop the Sandbox and the Navigator by pressing &lt;strong&gt;Ctrl+C&lt;/strong&gt; in the DAML assistant.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Resetting the Prototype&lt;/h3&gt; &#xA;&lt;p&gt;Reset the application by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop the app by following the steps in &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-mortgage-repackaging/main/#stopping-the-app&#34;&gt;Stopping the App&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Start the app by following the steps in &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-mortgage-repackaging/main/#starting-the-app&#34;&gt;Starting the App&lt;/a&gt; section.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;This application has a full browser-based user interface. Refer to the included .pdf file for instructions on how to use that interface to run the application.&lt;/p&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-mortgage-repackaging/main/Digital%20Asset%20Mortgage%20Backed%20Securities%20-%20User%20Guide.pdf&#34;&gt;Digital Asset Mortgage Backed Securities - User Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;CONFIDENTIAL © 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved. Any unauthorized use, duplication or distribution is strictly prohibited.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>qfpl/applied-fp-course</title>
    <updated>2022-06-27T01:43:59Z</updated>
    <id>tag:github.com,2022-06-27:/qfpl/applied-fp-course</id>
    <link href="https://github.com/qfpl/applied-fp-course" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Applied Functional Programming Course - Move from exercises to a working app!&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Applied Functional Programming Course&lt;/h1&gt; &#xA;&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/qfpl/applied-fp-course&#34;&gt;&lt;img src=&#34;https://travis-ci.org/qfpl/applied-fp-course.svg?branch=master&#34; alt=&#34;Build Status&#34;&gt;&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/qfpl/assets/master/data61-transparent-bg.png&#34; alt=&#34;CSIRO&#39;s Data61 Logo&#34;&gt;&lt;/p&gt; &#xA;&lt;p&gt;This is a new course, so there are going to be rough edges. We invite you to submit issues or pull requests if you find errors or have suggestions on how to improve it.&lt;/p&gt; &#xA;&lt;p&gt;This course is designed to be run in a class room with instructors, but we would like to make it suitable for self-study as well. Although undertaking this course outside of the workshops will increase the difficulty somewhat, we do not discourage it and invite suggestions on how to make the course more approachable.&lt;/p&gt; &#xA;&lt;p&gt;If you do attempt this on your own and find yourself completely lost, then you may come find us on IRC on &lt;a href=&#34;https://web.libera.chat/&#34;&gt;libera.chat&lt;/a&gt; in &lt;code&gt;#qfpl&lt;/code&gt; or &lt;code&gt;#fp-course&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h3&gt;You:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have completed, or are capable of completing, the &lt;a href=&#34;https://github.com/system-f/fp-course&#34;&gt;FP Course&lt;/a&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Have a few months self-study to your name.&lt;/li&gt; &#xA; &lt;li&gt;Want to know how to build larger applications with statically typed FP.&lt;/li&gt; &#xA; &lt;li&gt;Are willing to accept that a web application is a sufficient choice.&lt;/li&gt; &#xA; &lt;li&gt;Can write the canonical function of type: &lt;code&gt;Applicative f =&amp;gt; [f a] -&amp;gt; f [a]&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;We:&lt;/h3&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Have constructed a sequence of goals of increasing difficulty.&lt;/li&gt; &#xA; &lt;li&gt;Have provided a framework within which to apply these goals.&lt;/li&gt; &#xA; &lt;li&gt;Have included relevant components of larger applications: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Package dependencies&lt;/li&gt; &#xA;   &lt;li&gt;Project configuration&lt;/li&gt; &#xA;   &lt;li&gt;Application testing &amp;amp; building&lt;/li&gt; &#xA;   &lt;li&gt;Encoding / Decoding messages (JSON &amp;amp; Binary)&lt;/li&gt; &#xA;   &lt;li&gt;Persistent storage integration&lt;/li&gt; &#xA;   &lt;li&gt;App state &amp;amp; configuration management&lt;/li&gt; &#xA;   &lt;li&gt;Error handling &amp;amp; reporting&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Will utilise both type &amp;amp; test driven development techniques.&lt;/li&gt; &#xA; &lt;li&gt;Will explain architectural and design trade-offs when appropriate.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Setup build tools:&lt;/h3&gt; &#xA;&lt;p&gt;Each level is a self-contained Haskell module, containing incomplete, or as yet undefined, data types and functions.&lt;/p&gt; &#xA;&lt;p&gt;We recommend using &lt;code&gt;nix develop&lt;/code&gt; or &lt;code&gt;nix-shell&lt;/code&gt; to get a shell with the necessary tools. You can also use &lt;code&gt;cabal&lt;/code&gt; or &lt;code&gt;stack&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Cabal&lt;/h4&gt; &#xA;&lt;p&gt;If you&#39;re using version &amp;gt;=3.0 of &lt;code&gt;cabal-install&lt;/code&gt; (use &lt;code&gt;cabal --version&lt;/code&gt; to find out), then you don&#39;t need to previx the commands with &lt;code&gt;v2-&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd path/to/applied-fp-course&#xA;$ cabal configure --enable-tests&#xA;$ cabal build &amp;lt;levelN&amp;gt;-exe&#xA;$ $EDITOR src/&amp;lt;LevelN&amp;gt;/README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;Nix&lt;/h4&gt; &#xA;&lt;p&gt;If you would like to use a Nix Shell:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ cd path/to/applied-fp-course&#xA;$ nix-shell  # or `nix develop`, if you use flakes&#xA;$ cabal build &amp;lt;levelN&amp;gt;-exe&#xA;$ $EDITOR src/&amp;lt;LevelN&amp;gt;/README.md&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h4&gt;ghcid&lt;/h4&gt; &#xA;&lt;p&gt;If you have &lt;code&gt;ghcid&lt;/code&gt; installed, run &lt;code&gt;ghcid -c &#39;cabal repl&#39;&lt;/code&gt; to get a terminal with up-to-date type errors, which are refreshed on every save.&lt;/p&gt; &#xA;&lt;h4&gt;Stack&lt;/h4&gt; &#xA;&lt;p&gt;A &lt;code&gt;stack.yaml&lt;/code&gt; configuration is provided on a best-effort basis. The authors do not use stack and cannot promise to be able to resolve stack-related issues. Though we will do our best. :)&lt;/p&gt; &#xA;&lt;h4&gt;Please note...&lt;/h4&gt; &#xA;&lt;p&gt;These lessons are designed to be completed with an instructor as part of the Data61 Applied Functional Programming Course. You are of course welcome to clone the repository and give it a try, but you may find the tasks more difficult. If you have any questions we can be contacted in the &lt;a href=&#34;https://libera.chat&#34;&gt;#qfpl IRC channel&lt;/a&gt; on &lt;code&gt;libera.chat&lt;/code&gt;.&lt;/p&gt; &#xA;&lt;h4&gt;Subsequent lessons may contain spoilers, don&#39;t cheat yourself out of the experience!&lt;/h4&gt; &#xA;&lt;p&gt;There is a &lt;code&gt;README.md&lt;/code&gt; file in each Level module folder that will provide instructions about what the goal is for that specific level.&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Level 01 : Simple hello world web app.&lt;/li&gt; &#xA; &lt;li&gt;Level 02 : Define our application spec with types!&lt;/li&gt; &#xA; &lt;li&gt;Level 03 : Testing &amp;amp; tools&lt;/li&gt; &#xA; &lt;li&gt;Level 04 : Database layer (sqlite-simple)&lt;/li&gt; &#xA; &lt;li&gt;Level 05 : Better error handling through ExceptT&lt;/li&gt; &#xA; &lt;li&gt;Level 06 : Add some flexible configuration&lt;/li&gt; &#xA; &lt;li&gt;Level 07 : &lt;code&gt;ReaderT&lt;/code&gt; &amp;amp; refactoring&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;-- In Development...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Level 08 : Lenses &amp;amp; &#34;classy mtl&#34; monad transformers&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;-- Maybe...&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Level 09 : Add session controls (login, logout) and a protected route. So we can have something that resembles application state. For the purposes of modelling the state machine and implementing some property based tests.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Bonus Content&lt;/h3&gt; &#xA;&lt;p&gt;Extension material that doesn&#39;t feel like it belongs to the main progression lives in the &lt;a href=&#34;https://github.com/qfpl/applied-fp-course/tree/master/bonus&#34;&gt;&lt;code&gt;bonus&lt;/code&gt;&lt;/a&gt; subdirectory.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>digital-asset/ex-bond-issuance</title>
    <updated>2022-06-27T01:43:59Z</updated>
    <id>tag:github.com,2022-06-27:/digital-asset/ex-bond-issuance</id>
    <link href="https://github.com/digital-asset/ex-bond-issuance" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Reference DAML application demonstrating a bond issuance use case.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Reference Application: Bond Issuance&lt;/h1&gt; &#xA;&lt;h2&gt;Overview&lt;/h2&gt; &#xA;&lt;p&gt;Issuing a new bond is currently a fragmented process. A Distributed Ledger Technology (DLT) approach to bond issuance creates opportunity for Issuers, Auction Agents, CSDs (Central Securities Depositories), and Banks to reduce costs and risks associated with the process, while at the same time providing additional benefits.&lt;/p&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;h3&gt;Installing&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Disclaimer:&lt;/strong&gt; This reference application is intended to demonstrate the capabilities of the DAML. You are recommended to consider other non-functional aspects, like security, resiliency, recoverability, etc prior to production use.&lt;/p&gt; &#xA;&lt;h4&gt;Prerequisites&lt;/h4&gt; &#xA;&lt;p&gt;Be sure you have the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://docs.daml.com/&#34;&gt;DAML SDK&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Java&lt;/li&gt; &#xA; &lt;li&gt;Yarn&lt;/li&gt; &#xA; &lt;li&gt;Node v12&lt;/li&gt; &#xA; &lt;li&gt;Make&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://pipenv.pypa.io/&#34;&gt;Python Pipenv&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h4&gt;Build the App&lt;/h4&gt; &#xA;&lt;p&gt;Type:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;make build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; If you change the DAML models locally, you need to re-run this command before starting the application.&lt;/p&gt; &#xA;&lt;h3&gt;Starting the App&lt;/h3&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; Make sure you have built the application (see: &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-bond-issuance/main/#build-the-app&#34;&gt;Build the App&lt;/a&gt;).&lt;/p&gt; &#xA;&lt;p&gt;These commands start the application with wall clock time. Note that Navigator&#39;s time widget won&#39;t work in this mode as one cannot modify the time.&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Start the DAML Sandbox. Type: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;launchers/sandbox+jsonapi&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start the automation logic by starting bots. Type: &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;launchers/automation&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt;Start the React UI. The UI will automatically open in a new browser tab at &lt;a href=&#34;http://localhost:3000&#34;&gt;http://localhost:3000&lt;/a&gt;. &lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;launchers/ui&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Stopping the App&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop the triggers by pressing &lt;strong&gt;Ctrl+C&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Stop the Sandbox by pressing &lt;strong&gt;Ctrl+C&lt;/strong&gt; in the DAML assistant.&lt;/li&gt; &#xA; &lt;li&gt;Stop the ui by pressing &lt;strong&gt;Ctrl+C&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Resetting the Prototype&lt;/h3&gt; &#xA;&lt;p&gt;Reset the application by following these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stop the app by following the steps in &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-bond-issuance/main/#stopping-the-app&#34;&gt;Stopping the App&lt;/a&gt; section.&lt;/li&gt; &#xA; &lt;li&gt;Start the app by following the steps in &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-bond-issuance/main/#starting-the-app&#34;&gt;Starting the App&lt;/a&gt; section.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Working with DAML Hub&lt;/h2&gt; &#xA;&lt;h3&gt;If you do have cli access, please follow these steps:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Run the cli script, after setting your token with &lt;code&gt;dablc t&lt;/code&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;./dabl-deploy.sh&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h3&gt;If you do &lt;em&gt;not&lt;/em&gt; have cli access, please follow these steps:&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Start a new project at DAML Hub. Upload the DARs to DAML Hub (in your new project, Deployments tab / Upload file, two files &lt;code&gt;target/bond-issuance*.dar&lt;/code&gt;), deploy the model (bond-issuance.dar, Deploy Instance).&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Add the parties to the DAML Hub project: AuctionAgent, CSD, Bank1, Bank2, Bank3, Issuer, CentralBank, Regulator, Operator.&lt;/p&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Download &lt;code&gt;participants.json&lt;/code&gt; (Ledger settings tab).&lt;/li&gt; &#xA;   &lt;li&gt;Download &lt;code&gt;parties.json&lt;/code&gt; (Users tab).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Run the market setup:&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;daml script \&#xA;  --participant-config participants.json \&#xA;  --json-api \&#xA;  --dar target/bond-issuance.dar \&#xA;  --script-name DA.RefApps.Bond.MarketSetup.MarketSetupScript:setupMarketWithDablParties \&#xA;  --input-file parties.json&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;4&#34;&gt; &#xA; &lt;li&gt;Run the triggers from the DAML Hub UI:&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;pre&gt;&lt;code&gt;Bank1:&#xA;DA.RefApps.Bond.Triggers.InvestorSettlementTrigger:investorSettlementTrigger&#xA;DA.RefApps.Bond.Triggers.PlaceBidTrigger:placeBidTrigger&#xA;Bank2:&#xA;DA.RefApps.Bond.Triggers.InvestorSettlementTrigger:investorSettlementTrigger&#xA;DA.RefApps.Bond.Triggers.PlaceBidTrigger:placeBidTrigger&#xA;Bank3:&#xA;DA.RefApps.Bond.Triggers.InvestorSettlementTrigger:investorSettlementTrigger&#xA;DA.RefApps.Bond.Triggers.PlaceBidTrigger:placeBidTrigger&#xA;Issuer:&#xA;DA.RefApps.Bond.Triggers.CommissionTrigger:commissionTrigger&#xA;DA.RefApps.Bond.Triggers.RedemptionFinalizeTrigger:redemptionFinalizeTrigger&#xA;AuctionAgent:&#xA;DA.RefApps.Bond.Triggers.AuctionFinalizeTrigger:auctionFinalizeTrigger&#xA;CSD:&#xA;DA.RefApps.Bond.Triggers.RedemptionCalculationTrigger:redemptionCalculationTrigger&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;ol start=&#34;5&#34;&gt; &#xA; &lt;li&gt;Run &lt;code&gt;make daml-hub-package&lt;/code&gt;. Upload &lt;code&gt;target/bondui.zip&lt;/code&gt; to DAML Hub and deploy the UI. Follow &#34;View site&#34;. Upload &lt;code&gt;parties.json&lt;/code&gt; to the UI using the button on the login screen (Upload parties.json (tokens)). Receiving no error means you have succeeded.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; parties.json needs to be re-uploaded to the UI every time the tokens change.&lt;/p&gt; &#xA;&lt;h2&gt;User Guide&lt;/h2&gt; &#xA;&lt;p&gt;This User Guide will take you step-by-step through the whole bond issuance, bond auction, and redemption process. It will lead you through all the major UI screens and data fields that you will need to use.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Note&lt;/strong&gt;: This demo is designed to show successful conclusion of the Bond Issuance workflow without exceptions or error conditions. A full production implementation would include additional features, handle errors and exceptions, and incorporate appropriate security controls.&lt;/p&gt; &#xA;&lt;h2&gt;Workflow&lt;/h2&gt; &#xA;&lt;h3&gt;Roles and Responsibilities&lt;/h3&gt; &#xA;&lt;p&gt;Participants in the following roles are involved in the Bond Issuance workflow.&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;tbody&gt;&#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Role&lt;/strong&gt; &lt;/td&gt; &#xA;   &lt;td&gt;&lt;strong&gt;Responsibilities&lt;/strong&gt; &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Issuer &lt;/td&gt; &#xA;   &lt;td&gt;Requests creation of a new bond. &lt;p&gt; Defines parameters of a bond auction. &lt;/p&gt;&lt;p&gt; Starts redemption of bond at maturity. &lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;CSD &lt;/td&gt; &#xA;   &lt;td&gt;Approves and issues a new bond. &lt;p&gt; Approves redemption of bonds at maturity. &lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Auction Agent &lt;/td&gt; &#xA;   &lt;td&gt;Commissions the bond auction. &lt;p&gt; Invites bidding banks. &lt;/p&gt;&lt;p&gt; Finalizes the auction. &lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Bank &lt;/td&gt; &#xA;   &lt;td&gt;Bids on bonds in the auction. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Central Bank &lt;/td&gt; &#xA;   &lt;td&gt;Backer of money on the ledger. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Regulator &lt;/td&gt; &#xA;   &lt;td&gt;Has no functional obligation in the demo. &lt;p&gt; Acts as a passive observer of the proceess. &lt;/p&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Operator &lt;/td&gt; &#xA;   &lt;td&gt;System operator. &lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt;&#xA;&lt;/table&gt; &#xA;&lt;p&gt;There are three parties set up with the Bank role, other roles have a single corresponding party configured. Setting up a given role with different parties (e.g. having two parties with the Auction Agent role) would require changing the DAML models.&lt;/p&gt; &#xA;&lt;p&gt;The Bond Issuance application includes these steps:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Market Setup:&lt;/strong&gt; The application starts with an automated market setup process. Participants and their roles are created, relationships are set up, and Participants also have their cash account set up in the Central Bank, with an initial balance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Bond Issuance:&lt;/strong&gt; The entire issuance process is modeled in DAML, with transparency and accuracy. The Bond Issuer requests the issuance, and the CSD approves the request and issues the bond. The ledger keeps an immutable, auditable history of the bond issuance.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Create a Bond Auction:&lt;/strong&gt; The entire auction logic is modeled in DAML, enforcing the actions of the Auction Agent and market participants. The process starts with the Issuer defining the key parameters of the bond auction, including the start and end date of the auction, and the minimum price for the bond. The Issuer submits the auction request to its Auction Agent. The Auction Agent reviews the auction parameters and can commission the auction.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Execute a Bond Auction:&lt;/strong&gt; The application uses a Dutch auction to calculate winning bids and quantities. Invited banks can bid in the auction. The banks cannot see the minimum price for the auction, only the denomination and total quantity of available bonds. Banks can place multiple bids in the auction so that they have different bids at different prices.&lt;/p&gt; &lt;p&gt;All investors are guaranteed to be treated equally and according to the auction rules.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; The settlement is guaranteed to be successful if Investors have a valid bid at the close of the auction, as the Bond is already locked.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Redemption:&lt;/strong&gt; The Issuer can start the redemption of a bond, where all bonds are redeemed, and the face value of the bond plus interest is paid to owners. The CSD must approve the redemption. Communication to all relevant market participants occurs in real time.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Running the Application&lt;/h2&gt; &#xA;&lt;h3&gt;Choosing and Changing Roles&lt;/h3&gt; &#xA;&lt;p&gt;When you launch the Bond Issuance application, you will see the login screen where you can choose your party with the desired role.&lt;/p&gt; &#xA;&lt;p&gt;To log in:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;On the home screen, select the party from the list (no password needs to be entered).&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;To switch users:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;In the top right corner, click on the logout icon.&lt;/li&gt; &#xA; &lt;li&gt;On the home screen, select a different party.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Market Setup&lt;/h3&gt; &#xA;&lt;p&gt;The participants listed above in Roles and Responsibilities are added automatically at market setup along with required reference data.&lt;/p&gt; &#xA;&lt;h3&gt;Creating a New Bond Issuance&lt;/h3&gt; &#xA;&lt;p&gt;This part of the workflow shows how to issue a new bond.&lt;/p&gt; &#xA;&lt;h4&gt;Entering New Bond Issuance Request&lt;/h4&gt; &#xA;&lt;p&gt;The Issuer creates a request for the CSD to issue a new bond with the parameters defined by the Issuer.&lt;/p&gt; &#xA;&lt;p&gt;To request a new bond issuance:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as &lt;strong&gt;Issuer&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Choose the &lt;strong&gt;Issuer Actions&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Issue Bond&lt;/strong&gt; choice on the Issuer role contract.&lt;/li&gt; &#xA; &lt;li&gt;Fill out the new issuance parameters: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Issue size: quantity of new bonds to be issued: e.g.:1000000&lt;/li&gt; &#xA;   &lt;li&gt;Issue date: date for the issue date, e.g., today&lt;/li&gt; &#xA;   &lt;li&gt;Currency: USD&lt;/li&gt; &#xA;   &lt;li&gt;Denomination: bond’s value at maturity, and the initial price for the bond set for the auction. e.g.: 100&lt;/li&gt; &#xA;   &lt;li&gt;Maturity date: Note that redemption of a bond is usually only possible on the defined maturity date, but the application does not model this. At redemption the face value of the bond plus the coupon rate is paid to the buyer.&lt;/li&gt; &#xA;   &lt;li&gt;Coupon rate: rate expressed in numeric value for the duration of the bond: 0.01 = 1%&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;Okay&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Approving New Bond Issuance Request&lt;/h4&gt; &#xA;&lt;p&gt;Once the Issuer submitted a new bond issuance request, the CSD receives a notification of this request. The CSD needs to approve the bond issuance request to issue the bonds and assign the ISIN.&lt;/p&gt; &#xA;&lt;p&gt;To approve:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as the &lt;strong&gt;CSD&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Choose the &lt;strong&gt;Issuance and ISIN Request&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Select the contract in the table view.&lt;/li&gt; &#xA; &lt;li&gt;View the parameters of the new issuance request.&lt;/li&gt; &#xA; &lt;li&gt;Add an ISIN (arbitrarily, e.g.: Bond007). Choose &lt;strong&gt;Accept&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Viewing New Bond Issue&lt;/h4&gt; &#xA;&lt;p&gt;The Issuer can view the newly issued Bonds.&lt;/p&gt; &#xA;&lt;p&gt;To view:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in as the &lt;strong&gt;Issuer&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Go to the &lt;strong&gt;Balance view&lt;/strong&gt; tab.&lt;/p&gt; &lt;p&gt;The newly issued bond will be visible.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Creating a New Bond Auction&lt;/h3&gt; &#xA;&lt;p&gt;Bond Auction is the process of taking a new bond issuance to the market. The application models the workflow of a Dutch auction in which the price of the offering is set after taking in all bids to determine the price at which the total offering can be sold. Banks place bids for the amount they are willing to buy in terms of quantity and price. Winners of the auction are announced after finalizing the results of all valid bids. In a real world implementation, the minimum price set by the Issuer is not visible to the bidding banks, only the denomination (face value) of the bond.&lt;/p&gt; &#xA;&lt;h4&gt;Creating a New Bond Auction Request&lt;/h4&gt; &#xA;&lt;p&gt;The Issuer can define the key parameters of the bond auction, including the start and end date of the auction and the minimum price for the bond. The Issuer then submits the auction request to its Auction Agent.&lt;/p&gt; &#xA;&lt;p&gt;To create an auction request:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as the &lt;strong&gt;Issuer&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Issuer Actions&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Commission Auction&lt;/strong&gt; choice.&lt;/li&gt; &#xA; &lt;li&gt;Enter parameters of New Bond Auction: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Bond asset deposit: choose the name of the &lt;a href=&#34;https://raw.githubusercontent.com/digital-asset/ex-bond-issuance/main/#approving-new-bond-issuance-request&#34;&gt;bond just issued&lt;/a&gt;, e.g.: Bond007&lt;/li&gt; &#xA;   &lt;li&gt;Start date&lt;/li&gt; &#xA;   &lt;li&gt;End date&lt;/li&gt; &#xA;   &lt;li&gt;Minimum price: e.g: 96 (must be smaller the bond&#39;s denomination)&lt;/li&gt; &#xA;   &lt;li&gt;Size: e.g.: 500000 (The size of the auction cannot be larger than the balance of available bonds).&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;Okay&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Commissioning New Bond Auction&lt;/h4&gt; &#xA;&lt;p&gt;The Auction Agent reviews the auction parameters and commissions the auction.&lt;/p&gt; &#xA;&lt;p&gt;To commission the auction:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as the &lt;strong&gt;Auction Agent&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Auction Requests&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Next to the &lt;strong&gt;Accept&lt;/strong&gt; button, enter an auction name (e.g.: Auction001) and click the button.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Once the auction had been approved, the auction disappears from the &lt;strong&gt;Auction Request&lt;/strong&gt; tab and appears in the &lt;strong&gt;Ongoing Auctions&lt;/strong&gt; tab.&lt;/p&gt; &#xA;&lt;h4&gt;Inviting Banks to Auction&lt;/h4&gt; &#xA;&lt;p&gt;For the commissioned auction, the Auction Agent invites Banks to bid.&lt;/p&gt; &#xA;&lt;p&gt;To invite Banks:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Stay logged in as the &lt;strong&gt;Auction Agent&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Ongoing Auctions&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;In the row of the just started auction, select the &lt;strong&gt;Invite Bidders&lt;/strong&gt; choice and invite the banks: &#39;Bank1, Bank2, Bank3&#39;&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;Okay&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Viewing the Auction Invite&lt;/h4&gt; &#xA;&lt;p&gt;To view the invitation as a Bank:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;Log in as any &lt;strong&gt;bank (Bank1, Bank2, Bank3)&lt;/strong&gt;.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;Select the &lt;strong&gt;Ongoing Auctions&lt;/strong&gt; tab.&lt;/p&gt; &lt;p&gt;Observe that the auction is now active.&lt;/p&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h3&gt;Bidding and Finalizing Auction&lt;/h3&gt; &#xA;&lt;h4&gt;Bidding on an Auction&lt;/h4&gt; &#xA;&lt;p&gt;Invited banks can start bidding on an auction. As discussed above, Banks cannot see the minimum price for the auction, only the denomination and total quantity of available bonds. They can place multiple bids for an auction to ensure that they have different bids at different prices.&lt;/p&gt; &#xA;&lt;p&gt;To bid:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as a &lt;strong&gt;bank (Bank1, Bank2, or Bank3)&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Ongoing Auctions&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Next to the relevant auction, select the &lt;strong&gt;Place Bid&lt;/strong&gt; choice and enter details: &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;Price&lt;/li&gt; &#xA;   &lt;li&gt;Quantity&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;Okay&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Repeat this process for other Banks or for multiple bids for the same Bank.&lt;/p&gt; &#xA;&lt;h4&gt;Finalizing an Auction&lt;/h4&gt; &#xA;&lt;p&gt;On the end date, the Auction Agent finalizes the auction and the automated delivery of bonds and cash occurs. When finalizing an auction, the application will automatically calculate the winning bids based on the Dutch auction logic. A bid that is under the minimum price will be regarded as an invalid bid.&lt;/p&gt; &#xA;&lt;p&gt;To finalize:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log is as the *&lt;em&gt;Auction Agent&lt;/em&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Click on the &lt;strong&gt;Ongoing Auctions&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Next to the auction, select the &lt;strong&gt;Finalize&lt;/strong&gt; choice.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h4&gt;Committing Cash for Simultaneous Settlement of Cash and Bonds&lt;/h4&gt; &#xA;&lt;p&gt;A bank has a final step. It needs to commit its cash to approve the settlement if it wins the auction.&lt;/p&gt; &#xA;&lt;p&gt;To commit cash:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as a bidding &lt;strong&gt;Bank&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Pending Settlements&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Settle&lt;/strong&gt; choice for the relevant row.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;Simultaneous delivery of cash from the bidding Banks account to the Issuer cash account in exchange of bonds will occur.&lt;/p&gt; &#xA;&lt;h3&gt;Redemption at Maturity&lt;/h3&gt; &#xA;&lt;h4&gt;Kicking off the Redemption Process&lt;/h4&gt; &#xA;&lt;p&gt;To start the redemption:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as the &lt;strong&gt;Issuer&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Issuer Actions&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Redeem&lt;/strong&gt; choice.&lt;/li&gt; &#xA; &lt;li&gt;Select the appropriate bond you would like to redeem.&lt;/li&gt; &#xA; &lt;li&gt;Choose &lt;strong&gt;Okay&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;A redemption request is now sent to the CSD for its approval.&lt;/p&gt; &#xA;&lt;h4&gt;Approving the Redemption&lt;/h4&gt; &#xA;&lt;p&gt;When the Issuer kicks off the redemption process, the CSD needs to approve it. Upon the CSD’s approval the bonds will be redeemed, and all bonds created during the Issuance will be archived on the ledger. At the same time the Issuer pays back the cash for the denomination of the bond with the defined interest to the Banks cash account.&lt;/p&gt; &#xA;&lt;p&gt;To approve:&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Log in as the &lt;strong&gt;CSD&lt;/strong&gt;.&lt;/li&gt; &#xA; &lt;li&gt;Select the &lt;strong&gt;Redemption Requests&lt;/strong&gt; tab.&lt;/li&gt; &#xA; &lt;li&gt;Select &lt;strong&gt;Accept&lt;/strong&gt;.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Additional Exploration&lt;/h2&gt; &#xA;&lt;p&gt;After completing the workflow, you can explore the application to try other paths, submit higher or lower bids, revoke a bid once entered, and so on.&lt;/p&gt; &#xA;&lt;p&gt;CONFIDENTIAL © 2019 Digital Asset (Switzerland) GmbH and/or its affiliates. All rights reserved. Any unauthorized use, duplication or distribution is strictly prohibited.&lt;/p&gt;</summary>
  </entry>
</feed>