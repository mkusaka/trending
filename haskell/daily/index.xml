<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2024-04-17T01:29:24Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>tusharad/Scotty-Crud</title>
    <updated>2024-04-17T01:29:24Z</updated>
    <id>tag:github.com,2024-04-17:/tusharad/Scotty-Crud</id>
    <link href="https://github.com/tusharad/Scotty-Crud" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Blogging application written in Haskell-Scotty, Blaze-HTML and PostgreSQL.&lt;/p&gt;&lt;hr&gt;&lt;p&gt;Certainly! Here&#39;s a README template for the Scotty-Crud GitHub repository based on the provided context:&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;h1&gt;Scotty-Crud&lt;/h1&gt; &#xA;&lt;p&gt;Scotty-Crud is a web-based blogging application designed to facilitate hands-on learning with the Scotty Web-Framework. This application allows users to experience the simplicity and power of Scotty alongside other technologies like Blaze-html for templating and PostgreSQL for database management. Whether you&#39;re new to Haskell web frameworks or looking to sharpen your skills, Scotty-Crud offers a practical approach to understanding web application development with Scotty.&lt;/p&gt; &#xA;&lt;h2&gt;Technologies Used&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;strong&gt;Scotty&lt;/strong&gt;: A lightweight web framework for Haskell, inspired by Ruby&#39;s Sinatra.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Blaze-html&lt;/strong&gt;: A library for Haskell that provides an HTML templating engine.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;PostgreSQL&lt;/strong&gt;: An open-source relational database system.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Features&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;&lt;strong&gt;Login/Signup&lt;/strong&gt;: Secure authentication using JWT tokens ensures that users can safely login or sign up to access the application.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add Blogs&lt;/strong&gt;: Users can create and publish blogs, sharing their thoughts, knowledge, or any content they wish to put out there.&lt;/li&gt; &#xA; &lt;li&gt;&lt;strong&gt;Add Comments&lt;/strong&gt;: Engage with the community by adding comments to blogs, fostering an interactive environment.&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Getting Started&lt;/h2&gt; &#xA;&lt;p&gt;To get Scotty-Crud up and running on your local machine, follow these simple steps:&lt;/p&gt; &#xA;&lt;h3&gt;Prerequisites&lt;/h3&gt; &#xA;&lt;p&gt;Ensure you have the following installed:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://git-scm.com/&#34;&gt;Git&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.haskell.org/cabal/download.html&#34;&gt;Cabal&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://www.postgresql.org/download/&#34;&gt;PostgreSQL&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h3&gt;Installation&lt;/h3&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Clone the repository&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Open your terminal and clone the Scotty-Crud repository using Git:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;git clone https://github.com/yourusername/scotty-crud.git&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;p&gt;Navigate into the project directory:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cd scotty-crud&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Set up the database&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Make sure PostgreSQL is running. Create a new database for the project and note down the credentials; you&#39;ll need to configure these in the code.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Configure your environment&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Update the database configuration in the application to match your PostgreSQL settings.&lt;/p&gt; &lt;/li&gt; &#xA; &lt;li&gt; &lt;p&gt;&lt;strong&gt;Run the application&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;Use Cabal to run the application:&lt;/p&gt; &lt;pre&gt;&lt;code&gt;cabal run&#xA;&lt;/code&gt;&lt;/pre&gt; &lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;The application should now be running on your local server. Open your web browser and navigate to the address provided in your terminal to start using Scotty-Crud.&lt;/p&gt; &#xA;&lt;h2&gt;Contributing&lt;/h2&gt; &#xA;&lt;p&gt;Contributions to Scotty-Crud are welcome! Whether it&#39;s bug fixes, feature additions, or improvements to the documentation, your help is appreciated. Please feel free to fork the repository and submit a pull request with your changes.&lt;/p&gt; &#xA;&lt;h2&gt;License&lt;/h2&gt; &#xA;&lt;p&gt;Scotty-Crud is released under the &lt;a href=&#34;https://raw.githubusercontent.com/tusharad/Scotty-Crud/main/LICENSE&#34;&gt;MIT License&lt;/a&gt;. Feel free to use, modify, and distribute the code as you see fit.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;/login - GET - login.html /signup - GET - signup.html&lt;/p&gt; &#xA;&lt;p&gt;/loginPerson - POST /signupPerson - POST&lt;/p&gt; &#xA;&lt;p&gt;name email password store it in DB&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>agra-uni-bremen/BinSym</title>
    <updated>2024-04-17T01:29:24Z</updated>
    <id>tag:github.com,2024-04-17:/agra-uni-bremen/BinSym</id>
    <link href="https://github.com/agra-uni-bremen/BinSym" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Symbolic execution for RISC-V machine code based on the formal LibRISCV ISA model&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;BinSym&lt;/h1&gt; &#xA;&lt;p&gt;Symbolic execution of &lt;a href=&#34;https://riscv.org/&#34;&gt;RISC-V&lt;/a&gt; binary code based on formal instruction semantics.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;More information:&lt;/strong&gt; &lt;a href=&#34;https://doi.org/10.48550/arXiv.2404.04132&#34;&gt;https://doi.org/10.48550/arXiv.2404.04132&lt;/a&gt;&lt;/p&gt; &#xA;&lt;h2&gt;About&lt;/h2&gt; &#xA;&lt;p&gt;BinSym is a program analysis tool which enables symbolic execution of binary code. The majority of prior work on binary program analysis lifts/transforms binary code to an Intermediate Representation (IR) and then analysis this intermediate format. BinSym, on the other hand, operates directly on the binary-level at eliminates the need to perform binary lifting. This enables BinSym to capture and reason about low-level interactions (e.g. with the architectural state). Furthermore, through the utilization of formal instruction semantics, BinSym is more faithful to the ISA specification and eliminates the possibilities of errors and inaccuracies which may occur during the lifting step in prior work.&lt;/p&gt; &#xA;&lt;p&gt;The implementation of BinSym is based on our prior work on &lt;a href=&#34;https://github.com/agra-uni-bremen/libriscv&#34;&gt;LibRISCV&lt;/a&gt;. Specifically, BinSym provides actual symbolic semantics for the abstract instruction semantics specified in LibRISCV. Or, in other words, BinSym is a symbolic free monad interpreter for LibRISCV.&lt;/p&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;p&gt;BinSym has been developed for GHC 9.4.8 (newer versions may work too). Furthermore, installation requires &lt;a href=&#34;https://github.com/Z3Prover/z3&#34;&gt;z3&lt;/a&gt; to be installed as a prerequisite. After installing z3, you can install BinSym by running the following commands:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;$ git clone https://github.com/agra-uni-bremen/binsym&#xA;$ cabal install&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;This install a &lt;code&gt;riscv-symex&lt;/code&gt; binary into your path. This binary can be used for symbolic execution of RV32I machine code. Within this machine code, unconstrained symbolic values can be declared based on which the code is then symbolically explored. In order to declare a symbolic value, the following code can be used:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-C&#34;&gt;void&#xA;make_symbolic(void *ptr, size_t size)&#xA;{&#xA;&#x9;__asm__ volatile (&#34;li a7, 96\n&#34;&#xA;&#x9;                  &#34;mv a0, %0\n&#34;&#xA;&#x9;                  &#34;mv a1, %1\n&#34;&#xA;&#x9;                  &#34;ecall\n&#34;&#xA;&#x9;                  : /* no output operands */&#xA;&#x9;                  : &#34;r&#34; (ptr), &#34;r&#34; (size)&#xA;&#x9;                  : &#34;a7&#34;, &#34;a0&#34;, &#34;a1&#34;);&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;BinSym executes the code until it finds the first invalid instruction, therefore in order to terminate an execution use something along the lines of &lt;code&gt;.word 0xffff&lt;/code&gt; in your startup assembly file.&lt;/p&gt; &#xA;&lt;h2&gt;How To Cite&lt;/h2&gt; &#xA;&lt;p&gt;This work is still ongoing, a preprint is &lt;a href=&#34;https://doi.org/10.48550/arXiv.2404.04132&#34;&gt;available on arXiv&lt;/a&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;@misc{tempel2024binsym,&#xA;&#x9;author = {Sören Tempel and Tobias Brandt and Christoph Lüth and Rolf Drechsler},&#xA;&#x9;title  = {BinSym: Binary-Level Symbolic Execution using Formal Descriptions of Instruction Semantics},&#xA;&#x9;year   = {2024},&#xA;&#x9;month  = apr,&#xA;&#x9;doi    = {10.48550/arXiv.1801.02833},&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;</summary>
  </entry>
</feed>