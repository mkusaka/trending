<?xml version="1.0" encoding="UTF-8"?><feed xmlns="http://www.w3.org/2005/Atom">
  <title>GitHub Haskell Daily Trending</title>
  <id>http://mshibanami.github.io/GitHubTrendingRSS</id>
  <updated>2022-06-12T01:42:23Z</updated>
  <subtitle>Daily Trending of Haskell in GitHub</subtitle>
  <link href="http://mshibanami.github.io/GitHubTrendingRSS"></link>
  <entry>
    <title>input-output-hk/cardano-ledger</title>
    <updated>2022-06-12T01:42:23Z</updated>
    <id>tag:github.com,2022-06-12:/input-output-hk/cardano-ledger</id>
    <link href="https://github.com/input-output-hk/cardano-ledger" rel="alternate"></link>
    <summary type="html">&lt;p&gt;The ledger implementation and specifications of the Cardano blockchain.&lt;/p&gt;&lt;hr&gt;&lt;h1 align=&#34;center&#34;&gt;Cardano Ledger&lt;/h1&gt; &#xA;&lt;p align=&#34;center&#34;&gt; &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/actions/workflows/haskell.yml&#34;&gt; &lt;img alt=&#34;GitHub Workflow Status (master)&#34; src=&#34;https://img.shields.io/github/workflow/status/input-output-hk/cardano-ledger/Haskell%20CI/master.svg?style=for-the-badge&#34;&gt; &lt;/a&gt; &lt;/p&gt; &#xA;&lt;p&gt;This repository contains the formal specifications, executable models, and implementations of the Cardano Ledger.&lt;/p&gt; &#xA;&lt;p&gt;The documents are built in our CI and can be readily accessed using the following links:&lt;/p&gt; &#xA;&lt;table&gt; &#xA; &lt;thead&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;th&gt;Era&lt;/th&gt; &#xA;   &lt;th&gt;Design Documents&lt;/th&gt; &#xA;   &lt;th&gt;Formal Specification&lt;/th&gt; &#xA;   &lt;th&gt;CDDL&lt;/th&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/thead&gt; &#xA; &lt;tbody&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Byron&lt;/td&gt; &#xA;   &lt;td&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronChainSpec/latest/download-by-type/doc-pdf/blockchain-spec&#34; title=&#34;Specification of the Blockchain Layer&#34;&gt;Chain Spec&lt;/a&gt;, &lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/byronLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Ledger Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/blocksCDDLSpec/latest/download-by-type/doc-pdf/binary&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Shelley&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/delegationDesignSpec/latest/download-by-type/doc-pdf/delegation_design_spec&#34; title=&#34;Design Specification for Delegation and Incentives in Cardano&#34;&gt;Design&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/shelleyLedgerSpec/latest/download-by-type/doc-pdf/ledger-spec&#34; title=&#34;A Formal Specification of the Cardano Ledger&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Allegra &amp;amp; Mary&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://eprint.iacr.org/2020/895&#34; title=&#34;Multi-Currency Ledgers&#34;&gt;Multi-Currency&lt;/a&gt;, &lt;a href=&#34;https://iohk.io/en/research/library/papers/utxoma-utxo-with-multi-asset-support/&#34; title=&#34;UTXOma:UTXO with Multi-Asset Support&#34;&gt;UTXOma&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.shelley-ma/latest/download-by-type/doc-pdf/shelley-ma&#34; title=&#34;A Formal Specification of the Cardano Ledger with a Native Multi-Asset Implementation&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/shelley-ma/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Alonzo&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/the-extended-utxo-model/&#34; title=&#34;The Extended UTXO Model&#34;&gt;eUTXO&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.alonzo-ledger/latest/download-by-type/doc-pdf/alonzo-changes&#34; title=&#34;A Formal Specification of the Cardano Ledger integrating Plutus Core&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/alonzo/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA;  &lt;tr&gt; &#xA;   &lt;td&gt;Babbage&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://iohk.io/en/research/library/papers/on-uc-secure-range-extension-and-batch-verification-for-ecvrf/&#34; title=&#34;On UC-Secure Range Extension and Batch Verification for ECVRF&#34;&gt;batch-verification&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/159&#34; title=&#34;Reference inputs&#34;&gt;CIP-31&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/160&#34; title=&#34;Inline datums&#34;&gt;CIP-32&lt;/a&gt;, &lt;a href=&#34;https://github.com/cardano-foundation/CIPs/pull/161&#34; title=&#34;Reference scripts&#34;&gt;CIP-33&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.babbage-ledger/latest/download-by-type/doc-pdf/babbage-changes&#34; title=&#34;Formal Specification of the Cardano Ledger for the Babbage era&#34;&gt;Spec&lt;/a&gt;&lt;/td&gt; &#xA;   &lt;td&gt;&lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/tree/master/eras/babbage/test-suite/cddl-files&#34;&gt;CDDL&lt;/a&gt;&lt;/td&gt; &#xA;  &lt;/tr&gt; &#xA; &lt;/tbody&gt; &#xA;&lt;/table&gt; &#xA;&lt;p&gt;Other Documents:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/nonIntegerCalculations/latest/download-by-type/doc-pdf/non-integer-calculations&#34;&gt;Non-integer calculations specification&lt;/a&gt;: details on the parts of the Shelley specification that use real numbers.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/specs.pool-ranking/latest/download-by-type/doc-pdf/pool-ranking&#34;&gt;Stake pool ranking specification&lt;/a&gt;: details for a robust stake pool ranking mechanism.&lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://hydra.iohk.io/job/Cardano/cardano-ledger/semanticsSpec/latest/download-by-type/doc-pdf/small-step-semantics&#34;&gt;Explanation of the small-step-semantics framework&lt;/a&gt;: a guide to the notation and style used by our ledger rules.&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;In addition, there is a formalization of the Ledger Specification in Isabelle/HOL which can be found &lt;a href=&#34;https://github.com/input-output-hk/fm-ledger-formalization&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;h1&gt;Repository structure&lt;/h1&gt; &#xA;&lt;p&gt;The directory structure of this repository is as follows:&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron&#34;&gt;byron&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger&#34;&gt;ledger&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/ledger/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain&#34;&gt;chain&lt;/a&gt; &#xA;    &lt;ul&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;     &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/chain/executable-spec&#34;&gt;executable-spec&lt;/a&gt;&lt;/li&gt; &#xA;    &lt;/ul&gt; &lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/byron/cddl-spec&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley&#34;&gt;shelley&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/design-spec&#34;&gt;design-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley/test-suite/cddl-files&#34;&gt;cddl&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma&#34;&gt;Timelocks and Multi-Assets&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/shelley-ma/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo&#34;&gt;Smart Contracts&lt;/a&gt; &#xA;  &lt;ul&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/formal-spec&#34;&gt;formal-spec&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/impl&#34;&gt;implementation&lt;/a&gt;&lt;/li&gt; &#xA;   &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/eras/alonzo/test-suite&#34;&gt;tests&lt;/a&gt;&lt;/li&gt; &#xA;  &lt;/ul&gt; &lt;/li&gt; &#xA; &lt;li&gt;&lt;a href=&#34;https://raw.githubusercontent.com/input-output-hk/cardano-ledger/master/libs&#34;&gt;Libraries&lt;/a&gt;&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h1&gt;Building&lt;/h1&gt; &#xA;&lt;p&gt;It is recommended to use &lt;a href=&#34;https://nixos.org/nix/download.html&#34;&gt;&lt;code&gt;nix&lt;/code&gt;&lt;/a&gt; for building everything in this repository. Haskell files can be built with &lt;a href=&#34;https://www.haskell.org/cabal/&#34;&gt;&lt;code&gt;cabal&lt;/code&gt;&lt;/a&gt; inside of a nix shell.&lt;/p&gt; &#xA;&lt;h2&gt;Nix Cache&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; it is recommended that you setup the cache, so that it can reuse built artifacts, reducing the compilation times dramatically:&lt;/p&gt; &#xA;&lt;p&gt;If you are using &lt;a href=&#34;https://nixos.org/&#34;&gt;NixOS&lt;/a&gt; add the snippet below to your &lt;code&gt;/etc/nixos/configuration.nix&lt;/code&gt;:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;nix.binaryCaches = [&#xA;  &#34;https://cache.nixos.org&#34;&#xA;  &#34;https://hydra.iohk.io&#34;&#xA;];&#xA;&#xA;nix.binaryCachePublicKeys = [&#xA;  &#34;hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ=&#34;&#xA;];&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;If you are using the &lt;code&gt;nix&lt;/code&gt; package manager next to another operating system put the following in &lt;code&gt;/etc/nix/nix.conf&lt;/code&gt; if you have a system-wide &lt;code&gt;nix&lt;/code&gt; installation , or in &lt;code&gt;~/.config/nix/nix.conf&lt;/code&gt; if you have a local installation:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;substituters        = https://hydra.iohk.io https://cache.nixos.org/&#xA;trusted-public-keys = hydra.iohk.io:f/Ea+s+dFdN+3Y/G+FDgSq+a5NEWhJGzdjvKNGv0/EQ= cache.nixos.org-1:6NCHdD59X431o0gWypbMrAURkbJ16ZPMQFGspcDShjY=&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building the LaTeX documents and executable specifications&lt;/h2&gt; &#xA;&lt;p&gt;When using &lt;code&gt;nix&lt;/code&gt; the documents and Haskell code can be readily built by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix build&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;The LaTeX documents will be places inside directories named &lt;code&gt;result*&lt;/code&gt;, e.g.:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;result-2/ledger-spec.pdf&#xA;result-3/delegation_design_spec.pdf&#xA;result-4/non-integer-calculations.pdf&#xA;result-5/small-step-semantics.pdf&#xA;result-6/ledger-spec.pdf&#xA;result/blockchain-spec.pdf&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Building individual LaTeX documents&lt;/h2&gt; &#xA;&lt;p&gt;Change to the latex directory where the latex document is (e.g. &lt;code&gt;eras/shelley/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Shelley release, or &lt;code&gt;eras/byron/ledger/formal-spec&lt;/code&gt; for the ledger specification corresponding to the Byron release). Then, build the latex document by running:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run make&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;p&gt;For a continuous compilation of the &lt;code&gt;LaTeX&lt;/code&gt; file run:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;nix-shell --pure --run &#34;make watch&#34;&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h1&gt;Submitting an issue&lt;/h1&gt; &#xA;&lt;p&gt;Issues can be filed in the &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/issues&#34;&gt;GitHub Issue tracker&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;p&gt;However, note that this is pre-release software, so we will not usually be providing support.&lt;/p&gt; &#xA;&lt;h1&gt;Contributing&lt;/h1&gt; &#xA;&lt;p&gt;See &lt;a href=&#34;https://github.com/input-output-hk/cardano-ledger/raw/master/CONTRIBUTING.md&#34;&gt;CONTRIBUTING&lt;/a&gt;.&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>erebe/greenclip</title>
    <updated>2022-06-12T01:42:23Z</updated>
    <id>tag:github.com,2022-06-12:/erebe/greenclip</id>
    <link href="https://github.com/erebe/greenclip" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Simple clipboard manager to be integrated with rofi - Static binary available&lt;/p&gt;&lt;hr&gt;&lt;p align=&#34;center&#34;&gt; &lt;img src=&#34;https://github.com/erebe/greenclip/raw/master/logo.png&#34; alt=&#34;logo&#34;&gt; &lt;/p&gt; &#xA;&lt;h2&gt;Description&lt;/h2&gt; &#xA;&lt;p&gt;Recycle your clipboard selections with greenclip and don&#39;t waste your time anymore to reselect things over and over.&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Purpose:&lt;/strong&gt; Keeps track of your history of selections to quickly switch between them&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Demo:&lt;/strong&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=Utk-9Gy8H3w&#34;&gt;Video Link&lt;/a&gt; &lt;br&gt; &lt;a href=&#34;https://www.youtube.com/watch?v=4IycORAdW9M&#34;&gt;Video made by @gotbletu&lt;/a&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;strong&gt;Features:&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Integrated with &lt;a href=&#34;https://github.com/DaveDavenport/rofi&#34;&gt;rofi&lt;/a&gt;&lt;/li&gt; &#xA; &lt;li&gt;Permanently set some selections to added at the end (set &lt;code&gt;static_history = []&lt;/code&gt; in the config file)&lt;/li&gt; &#xA; &lt;li&gt;Merge X Primary selection with clipboard selection (set &lt;code&gt;use_primary_selection_as_input = true&lt;/code&gt; in the config file)&lt;/li&gt; &#xA; &lt;li&gt;Blacklist some applications (see &lt;code&gt;I want to blacklist some applications !&lt;/code&gt; in the FAQ section)&lt;/li&gt; &#xA; &lt;li&gt;Copy small images (you can disable it in the config)&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;h2&gt;Installation&lt;/h2&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;It&#39;s a static binary so drop it anywhere in your $PATH env&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;wget https://github.com/erebe/greenclip/releases/download/v4.2/greenclip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;ul&gt; &#xA; &lt;li&gt;Alternatively if you are using Archlinux you can install the package from AUR&lt;/li&gt; &#xA;&lt;/ul&gt; &#xA;&lt;p&gt;&lt;code&gt;yay rofi-greenclip&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;PS: If you want, you can add a permanent list of selections to be added to your current history. Go see the config file&lt;/p&gt; &#xA;&lt;p&gt;Configuration file can be found at:&lt;/p&gt; &#xA;&lt;pre&gt;&lt;code&gt;❯ cat ~/.config/greenclip.toml&#xA;&#xA;[greenclip]&#xA;  history_file = &#34;/home/erebe/.cache/greenclip.history&#34;&#xA;  max_history_length = 50&#xA;  max_selection_size_bytes = 0&#xA;  trim_space_from_selection = true&#xA;  use_primary_selection_as_input = false&#xA;  blacklisted_applications = []&#xA;  enable_image_support = true&#xA;  image_cache_directory = &#34;/tmp/greenclip&#34;&#xA;  static_history = [&#xA; &#39;&#39;&#39;¯\_(ツ)_/¯&#39;&#39;&#39;,&#xA;]&#xA;&lt;/code&gt;&lt;/pre&gt; &#xA;&lt;h2&gt;Usage&lt;/h2&gt; &#xA;&lt;p&gt;Greenclip is intended to be used with &lt;a href=&#34;https://github.com/DaveDavenport/rofi&#34;&gt;rofi&lt;/a&gt;&lt;/p&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Spawn the daemon &lt;code&gt;greenclip daemon&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;When ever you need to get your selections history &lt;code&gt;rofi -modi &#34;clipboard:greenclip print&#34; -show clipboard -run-command &#39;{cmd}&#39;&lt;/code&gt;&lt;/li&gt; &#xA; &lt;li&gt;The entry that you have selected will be in your clipboard now&lt;/li&gt; &#xA; &lt;li&gt;Configuration file can be found in &lt;code&gt;.config/greenclip.cfg&lt;/code&gt;&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Migrating from 2.x version to 3.x one&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Kill all greenclip process already running&lt;/li&gt; &#xA; &lt;li&gt;Delete your old config file and old cache file (in ~/.cache/greenclip*)&lt;/li&gt; &#xA; &lt;li&gt;Start the new version of greenclip&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;h2&gt;Building the project&lt;/h2&gt; &#xA;&lt;ol&gt; &#xA; &lt;li&gt;Get &lt;a href=&#34;https://docs.haskellstack.org/en/stable/README/&#34;&gt;stack&lt;/a&gt; for Haskell&lt;/li&gt; &#xA; &lt;li&gt;stack init &amp;amp;&amp;amp; stack install&lt;/li&gt; &#xA;&lt;/ol&gt; &#xA;&lt;p&gt;or you can look at the .travis.yml file&lt;/p&gt; &#xA;&lt;h2&gt;FAQ&lt;/h2&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;Greenclip does not copy selection !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. Greenclip cannot run alongside other clipboard manager. If you have already one activated (there is one by default in KDE), you have first to disable it before trying to run greenclip&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;I cannot paste images !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. You can only keep in your history small images (~ &amp;lt;500 kb). I disabled the support for bigger images as it will turn your CPU into a heater for winter.&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;I want to blacklist some applications !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. There is in your config file a section for blacklisting applications. You can run greenclip daemon in a terminal to find what is the name of the application who has the current selection. Be aware that a lot of application does not name their clipboard process/window, so it will be empty most of the time. Be aware also, that if you use an electron application (like slack i.e) you will get a generic name like &#34;Chromium clipboard&#34;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;I want to paste selection directly after selecting them !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. This is not possible as when you invoke rofi, you lose focus of your current window and there is no way to find it back (from greenclip point of view)&lt;/p&gt; &#xA;&lt;p&gt;Nonetheless, you can emulate the feature with xdotool &lt;code&gt;rofi -modi &#34;clipboard:greenclip print&#34; -show clipboard -run-command &#39;{cmd}&#39; ; sleep 0.5; xdotool type $(xclip -o -selection clipboard)&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;or look at this issue for a more complete solution &lt;a href=&#34;https://github.com/erebe/greenclip/issues/27&#34;&gt;https://github.com/erebe/greenclip/issues/27&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;I got a strange behavior when clearing the clipboard - greenclip clear&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. The command is not doing what it is supposed to do, if greenclip&#39;s daemon is running. You need to stop it first.&lt;/p&gt; &#xA;&lt;p&gt;Use this command to clear the history &lt;code&gt;pkill greenclip &amp;amp;&amp;amp; greenclip clear &amp;amp;&amp;amp; greenclip daemon &amp;amp;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;For more information regarding why, refer to &lt;a href=&#34;https://github.com/erebe/greenclip/issues/34&#34;&gt;https://github.com/erebe/greenclip/issues/34&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;I need multi-line text in staticHistory&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. &lt;a href=&#34;https://github.com/erebe/greenclip/issues/78&#34;&gt;https://github.com/erebe/greenclip/issues/78&lt;/a&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;I don&#39;t want to use rofi !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. You can also use greenclip with &lt;a href=&#34;http://tools.suckless.org/dmenu&#34;&gt;dmenu&lt;/a&gt; or &lt;a href=&#34;https://github.com/junegunn/fzf&#34;&gt;fzf&lt;/a&gt;. Example usage:&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;greenclip print | grep . | dmenu -i -l 10 -p clipboard | xargs -r -d&#39;\n&#39; -I &#39;{}&#39; greenclip print &#39;{}&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;p&gt;&lt;code&gt;greenclip print | grep . | fzf -e | xargs -r -d&#39;\n&#39; -I &#39;{}&#39; greenclip print &#39;{}&#39;&lt;/code&gt;&lt;/p&gt; &#xA;&lt;hr&gt; &#xA;&lt;p&gt;Q. &lt;strong&gt;I want to thank you for greenclip !&lt;/strong&gt;&lt;/p&gt; &#xA;&lt;p&gt;A. Give a star to this repository&lt;/p&gt;</summary>
  </entry>
  <entry>
    <title>elm/compiler</title>
    <updated>2022-06-12T01:42:23Z</updated>
    <id>tag:github.com,2022-06-12:/elm/compiler</id>
    <link href="https://github.com/elm/compiler" rel="alternate"></link>
    <summary type="html">&lt;p&gt;Compiler for Elm, a functional language for reliable webapps.&lt;/p&gt;&lt;hr&gt;&lt;h1&gt;Elm&lt;/h1&gt; &#xA;&lt;p&gt;A delightful language for reliable webapps.&lt;/p&gt; &#xA;&lt;p&gt;Check out the &lt;a href=&#34;http://elm-lang.org/&#34;&gt;Home Page&lt;/a&gt;, &lt;a href=&#34;http://elm-lang.org/try&#34;&gt;Try Online&lt;/a&gt;, or &lt;a href=&#34;http://guide.elm-lang.org/&#34;&gt;The Official Guide&lt;/a&gt;&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Install&lt;/h2&gt; &#xA;&lt;p&gt;✨ &lt;a href=&#34;https://guide.elm-lang.org/install/elm.html&#34;&gt;Install&lt;/a&gt; ✨&lt;/p&gt; &#xA;&lt;p&gt;For multiple versions, previous versions, and uninstallation, see the instructions &lt;a href=&#34;https://github.com/elm/compiler/raw/master/installers/README.md&#34;&gt;here&lt;/a&gt;.&lt;/p&gt; &#xA;&lt;br&gt; &#xA;&lt;h2&gt;Help&lt;/h2&gt; &#xA;&lt;p&gt;If you are stuck, ask around on &lt;a href=&#34;http://elmlang.herokuapp.com/&#34;&gt;the Elm slack channel&lt;/a&gt;. Folks are friendly and happy to help with questions!&lt;/p&gt;</summary>
  </entry>
</feed>